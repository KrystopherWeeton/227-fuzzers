; ModuleID = '../../third_party/angle/src/libANGLE/queryconversions.cpp'
source_filename = "../../third_party/angle/src/libANGLE/queryconversions.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.gl::Context" = type <{ %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::State", i8, i8, i8, i8, [4 x i8], %"class.gl::ErrorSet", %"class.angle::BitSetT.537", [4 x i8], %"class.std::__1::unique_ptr.538", i8*, %"struct.gl::Extensions", [4 x i8], %"class.gl::BindingPointer", %"struct.egl::Config"*, %"class.angle::PackedEnumMap.544", %"class.gl::ResourceMap.546", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.556", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.566", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.576", %"class.gl::HandleAllocator", i8*, i8*, i8*, i8*, %"class.std::__1::vector.586", i8*, %"class.std::__1::vector.586", %"class.std::__1::unique_ptr.593", i8, i8, i8, i8, i32, i8, i8, i8, [5 x i8], %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.egl::Display"*, i8, i8, i8, [5 x i8], %"class.gl::MemoryProgramCache"*, %"class.angle::BitSetT.536", %"class.gl::StateCache", %"class.angle::BitSetT.168", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %struct.Optional.607, %struct.Optional.607, %"class.std::__1::shared_ptr.608", %"class.std::__1::unique_ptr.609", %"class.std::__1::basic_string", i64, %"class.gl::MockOverlay", i8, i8, i8, [4 x i8] }>
%"class.egl::LabeledObject" = type { i32 (...)** }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"class.gl::State" = type <{ %"struct.gl::ContextID", i32, i32, %"struct.gl::Version", [4 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"class.egl::ShareGroup"*, %"class.gl::BufferManager"*, %"class.gl::ShaderProgramManager"*, %"class.gl::TextureManager"*, %"class.gl::RenderbufferManager"*, %"class.gl::SamplerManager"*, %"class.gl::SyncManager"*, %"class.gl::FramebufferManager"*, %"class.gl::ProgramPipelineManager"*, %"class.gl::MemoryObjectManager"*, %"class.gl::SemaphoreManager"*, i32, i32, %"struct.angle::Color", float, i32, %"struct.gl::RasterizerState", i8, [3 x i8], %"struct.gl::Rectangle", %"struct.gl::BlendState", [4 x i8], %"class.gl::BlendStateExt", %"struct.angle::Color", i8, i8, [2 x i8], float, i8, i8, [2 x i8], i32, %"struct.std::__1::array.373", i8, [3 x i8], float, %"struct.gl::DepthStencilState", i32, i32, float, i32, i32, i32, i8, i8, [2 x i8], %"struct.gl::Rectangle", float, float, i32, i32, %"class.gl::Framebuffer"*, %"class.gl::Framebuffer"*, %"class.gl::BindingPointer.374", %"class.gl::Program"*, %"class.gl::BindingPointer.376", %"class.gl::ProgramExecutable"*, i8, [7 x i8], %"class.std::__1::vector.378", %"class.gl::VertexArray"*, %"class.angle::BitSetT.148", i64, %"class.angle::PackedEnumMap.406", %"class.gl::ActiveTexturesCache", %"class.std::__1::vector.337", %"class.angle::BitSetArray", %"class.std::__1::vector.418", %"class.std::__1::vector.427", %"class.angle::PackedEnumMap.434", %"class.angle::PackedEnumMap.438", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.angle::BitSetArray.447", %"class.angle::BitSetT.448", %"class.angle::BitSetT.168", %"class.gl::BindingPointer.449", %"struct.gl::PixelUnpackState", %"struct.gl::PixelPackState", i8, [3 x i8], %"class.gl::Debug", i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, %"class.angle::BitSetT.476", i32, %"class.gl::GLES1State", %"class.angle::BitSetT.168", %"class.angle::BitSetT.535", [4 x i8], %"class.angle::BitSetT.536", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.gl::MockOverlay"*, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i8, [5 x i8] }>
%"struct.gl::ContextID" = type { i32 }
%"struct.gl::Version" = type { i32, i32 }
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.30", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.28", i32 }
%"struct.std::__1::array.28" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.29" }
%"struct.std::__1::array.29" = type { [6 x i32] }
%"class.angle::PackedEnumMap.30" = type { %"struct.std::__1::array.31" }
%"struct.std::__1::array.31" = type { [6 x i64] }
%"struct.std::__1::array.32" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.33" }
%"class.angle::PackedEnumMap.33" = type { %"struct.std::__1::array.34" }
%"struct.std::__1::array.34" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.35" }
%"class.std::__1::set.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.egl::ShareGroup" = type opaque
%"class.gl::BufferManager" = type { %"class.gl::TypedResourceManager" }
%"class.gl::TypedResourceManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap" }
%"class.gl::ResourceManagerBase" = type { i32 (...)**, %"class.gl::HandleAllocator", i64 }
%"class.gl::ResourceMap" = type { i64, %"class.gl::Buffer"**, %"class.absl::flat_hash_map" }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.53", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.53" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"class.rx::Serial" = type { i64 }
%"struct.gl::BufferID" = type { i32 }
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.rx::BufferImpl" = type opaque
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.54" }
%"class.std::__1::__tree.54" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, %"class.gl::Buffer"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.gl::ShaderProgramManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.69", %"class.gl::ResourceMap.122" }
%"class.gl::ResourceMap.69" = type { i64, %"class.gl::Shader"**, %"class.absl::flat_hash_map.113" }
%"class.gl::Shader" = type { %"class.gl::LabeledObject", %"class.gl::ShaderState", %"class.std::__1::unique_ptr.85", %"struct.gl::Limitations", %"struct.gl::ShaderProgramID", i8, i32, i8, %"class.std::__1::basic_string", %"class.gl::BindingPointer", %"class.std::__1::unique_ptr.107", %"class.std::__1::basic_string", %"class.gl::ShaderProgramManager"*, i32, i32 }
%"class.gl::ShaderState" = type <{ %"class.std::__1::basic_string", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", [4 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.77", %"class.std::__1::vector.77", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", i8, [3 x i8], %"class.angle::BitSetT", i32, %struct.Optional, %struct.Optional, %struct.Optional.84, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.79" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.70" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.sh::InterfaceBlock"* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.72" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", i8, i8, %"class.std::__1::vector.70", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.sh::ShaderVariable"* }
%"class.angle::BitSetT" = type { i32 }
%struct.Optional = type { i8, i8 }
%struct.Optional.84 = type { i8, i32 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.rx::ShaderImpl"* }
%"class.rx::ShaderImpl" = type opaque
%"struct.gl::ShaderProgramID" = type { i32 }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.gl::Shader::CompilingState"* }
%"struct.gl::Shader::CompilingState" = type opaque
%"class.absl::flat_hash_map.113" = type { %"class.absl::container_internal::raw_hash_map.114" }
%"class.absl::container_internal::raw_hash_map.114" = type { %"class.absl::container_internal::raw_hash_set.115" }
%"class.absl::container_internal::raw_hash_set.115" = type { i8*, %"union.absl::container_internal::map_slot_type.116"*, i64, i64, %"class.absl::container_internal::CompressedTuple.117" }
%"union.absl::container_internal::map_slot_type.116" = type opaque
%"class.absl::container_internal::CompressedTuple.117" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.122" = type { i64, %"class.gl::Program"**, %"class.absl::flat_hash_map.241" }
%"class.absl::flat_hash_map.241" = type { %"class.absl::container_internal::raw_hash_map.242" }
%"class.absl::container_internal::raw_hash_map.242" = type { %"class.absl::container_internal::raw_hash_set.243" }
%"class.absl::container_internal::raw_hash_set.243" = type { i8*, %"union.absl::container_internal::map_slot_type.244"*, i64, i64, %"class.absl::container_internal::CompressedTuple.245" }
%"union.absl::container_internal::map_slot_type.244" = type { %"struct.std::__1::pair.630" }
%"struct.std::__1::pair.630" = type { i32, %"class.gl::Program"* }
%"class.absl::container_internal::CompressedTuple.245" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::TextureManager" = type { %"class.gl::TypedResourceManager.250" }
%"class.gl::TypedResourceManager.250" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.251" }
%"class.gl::ResourceMap.251" = type { i64, %"class.gl::Texture"**, %"class.absl::flat_hash_map.270" }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.253", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.266", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.268", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.253" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.4", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.4" = type { i32 (...)**, i64 }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.5", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.std::__1::set.5" = type { %"class.std::__1::__tree.6" }
%"class.std::__1::__tree.6" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.257", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.254, i8, [3 x i8] }>
%union.anon.254 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.257" = type { %"class.std::__1::__vector_base.258" }
%"class.std::__1::__vector_base.258" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.259" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer.264", i64, i64 }
%"class.gl::BindingPointer.264" = type { %"class.angle::BindingPointer.265" }
%"class.angle::BindingPointer.265" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.angle::BitSetT.266" = type { i64 }
%"class.rx::TextureImpl" = type opaque
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.267", i32, i32 }
%"class.rx::StreamProducerImpl" = type opaque
%"struct.std::__1::array.267" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.268" = type { %"struct.std::__1::array.269", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.269" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.absl::flat_hash_map.270" = type { %"class.absl::container_internal::raw_hash_map.271" }
%"class.absl::container_internal::raw_hash_map.271" = type { %"class.absl::container_internal::raw_hash_set.272" }
%"class.absl::container_internal::raw_hash_set.272" = type { i8*, %"union.absl::container_internal::map_slot_type.273"*, i64, i64, %"class.absl::container_internal::CompressedTuple.274" }
%"union.absl::container_internal::map_slot_type.273" = type { %"struct.std::__1::pair.632" }
%"struct.std::__1::pair.632" = type { i32, %"class.gl::Texture"* }
%"class.absl::container_internal::CompressedTuple.274" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::RenderbufferManager" = type { %"class.gl::TypedResourceManager.279" }
%"class.gl::TypedResourceManager.279" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.280" }
%"class.gl::ResourceMap.280" = type { i64, %"class.gl::Renderbuffer"**, %"class.absl::flat_hash_map.281" }
%"class.gl::Renderbuffer" = type { %"class.gl::RefCountObject.base", %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::RenderbufferState", %"class.std::__1::unique_ptr", %"class.std::__1::basic_string", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::RenderbufferID" }>
%"struct.gl::RenderbufferID" = type { i32 }
%"class.gl::RenderbufferState" = type <{ i32, i32, %"struct.gl::Format", i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.rx::RenderbufferImpl"* }
%"class.rx::RenderbufferImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::RenderbufferState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.absl::flat_hash_map.281" = type { %"class.absl::container_internal::raw_hash_map.282" }
%"class.absl::container_internal::raw_hash_map.282" = type { %"class.absl::container_internal::raw_hash_set.283" }
%"class.absl::container_internal::raw_hash_set.283" = type { i8*, %"union.absl::container_internal::map_slot_type.284"*, i64, i64, %"class.absl::container_internal::CompressedTuple.285" }
%"union.absl::container_internal::map_slot_type.284" = type { %"struct.std::__1::pair.634" }
%"struct.std::__1::pair.634" = type { i32, %"class.gl::Renderbuffer"* }
%"class.absl::container_internal::CompressedTuple.285" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SamplerManager" = type { %"class.gl::TypedResourceManager.290" }
%"class.gl::TypedResourceManager.290" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.291" }
%"class.gl::ResourceMap.291" = type { i64, %"class.gl::Sampler"**, %"class.absl::flat_hash_map.294" }
%"class.gl::Sampler" = type { %"class.gl::RefCountObject.base.293", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::SamplerState", i8, %"class.rx::SamplerImpl"*, %"class.std::__1::basic_string" }
%"class.gl::RefCountObject.base.293" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::SamplerID" }>
%"struct.gl::SamplerID" = type { i32 }
%"class.rx::SamplerImpl" = type opaque
%"class.absl::flat_hash_map.294" = type { %"class.absl::container_internal::raw_hash_map.295" }
%"class.absl::container_internal::raw_hash_map.295" = type { %"class.absl::container_internal::raw_hash_set.296" }
%"class.absl::container_internal::raw_hash_set.296" = type { i8*, %"union.absl::container_internal::map_slot_type.297"*, i64, i64, %"class.absl::container_internal::CompressedTuple.298" }
%"union.absl::container_internal::map_slot_type.297" = type { %"struct.std::__1::pair.636" }
%"struct.std::__1::pair.636" = type { i32, %"class.gl::Sampler"* }
%"class.absl::container_internal::CompressedTuple.298" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SyncManager" = type { %"class.gl::TypedResourceManager.303" }
%"class.gl::TypedResourceManager.303" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.304" }
%"class.gl::ResourceMap.304" = type { i64, %"class.gl::Sync"**, %"class.absl::flat_hash_map.305" }
%"class.gl::Sync" = type opaque
%"class.absl::flat_hash_map.305" = type { %"class.absl::container_internal::raw_hash_map.306" }
%"class.absl::container_internal::raw_hash_map.306" = type { %"class.absl::container_internal::raw_hash_set.307" }
%"class.absl::container_internal::raw_hash_set.307" = type { i8*, %"union.absl::container_internal::map_slot_type.308"*, i64, i64, %"class.absl::container_internal::CompressedTuple.309" }
%"union.absl::container_internal::map_slot_type.308" = type opaque
%"class.absl::container_internal::CompressedTuple.309" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::FramebufferManager" = type { %"class.gl::TypedResourceManager.314" }
%"class.gl::TypedResourceManager.314" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.315" }
%"class.gl::ResourceMap.315" = type { i64, %"class.gl::Framebuffer"**, %"class.absl::flat_hash_map.316" }
%"class.absl::flat_hash_map.316" = type { %"class.absl::container_internal::raw_hash_map.317" }
%"class.absl::container_internal::raw_hash_map.317" = type { %"class.absl::container_internal::raw_hash_set.318" }
%"class.absl::container_internal::raw_hash_set.318" = type { i8*, %"union.absl::container_internal::map_slot_type.319"*, i64, i64, %"class.absl::container_internal::CompressedTuple.320" }
%"union.absl::container_internal::map_slot_type.319" = type { %"struct.std::__1::pair.638" }
%"struct.std::__1::pair.638" = type { i32, %"class.gl::Framebuffer"* }
%"class.absl::container_internal::CompressedTuple.320" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramPipelineManager" = type { %"class.gl::TypedResourceManager.325" }
%"class.gl::TypedResourceManager.325" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.326" }
%"class.gl::ResourceMap.326" = type { i64, %"class.gl::ProgramPipeline"**, %"class.absl::flat_hash_map.344" }
%"class.gl::ProgramPipeline" = type { %"class.gl::RefCountObject.base.328", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::HasAttachedShaders", %"class.std::__1::unique_ptr.329", %"class.gl::ProgramPipelineState", %"class.std::__1::vector.337", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base.328" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::ProgramPipelineID" }>
%"struct.gl::ProgramPipelineID" = type { i32 }
%"class.gl::HasAttachedShaders" = type { i32 (...)** }
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"class.rx::ProgramPipelineImpl"* }
%"class.rx::ProgramPipelineImpl" = type opaque
%"class.gl::ProgramPipelineState" = type <{ %"class.std::__1::basic_string", %"class.gl::Program"*, %"class.angle::PackedEnumMap.335", i8, [7 x i8], %"class.gl::ProgramExecutable"*, i8, [7 x i8] }>
%"class.angle::PackedEnumMap.335" = type { %"struct.std::__1::array.336" }
%"struct.std::__1::array.336" = type { [6 x %"class.gl::Program"*] }
%"class.absl::flat_hash_map.344" = type { %"class.absl::container_internal::raw_hash_map.345" }
%"class.absl::container_internal::raw_hash_map.345" = type { %"class.absl::container_internal::raw_hash_set.346" }
%"class.absl::container_internal::raw_hash_set.346" = type { i8*, %"union.absl::container_internal::map_slot_type.347"*, i64, i64, %"class.absl::container_internal::CompressedTuple.348" }
%"union.absl::container_internal::map_slot_type.347" = type { %"struct.std::__1::pair.640" }
%"struct.std::__1::pair.640" = type { i32, %"class.gl::ProgramPipeline"* }
%"class.absl::container_internal::CompressedTuple.348" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::MemoryObjectManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.353" }
%"class.gl::ResourceMap.353" = type { i64, %"class.gl::MemoryObject"**, %"class.absl::flat_hash_map.354" }
%"class.gl::MemoryObject" = type opaque
%"class.absl::flat_hash_map.354" = type { %"class.absl::container_internal::raw_hash_map.355" }
%"class.absl::container_internal::raw_hash_map.355" = type { %"class.absl::container_internal::raw_hash_set.356" }
%"class.absl::container_internal::raw_hash_set.356" = type { i8*, %"union.absl::container_internal::map_slot_type.357"*, i64, i64, %"class.absl::container_internal::CompressedTuple.358" }
%"union.absl::container_internal::map_slot_type.357" = type opaque
%"class.absl::container_internal::CompressedTuple.358" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SemaphoreManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.363" }
%"class.gl::ResourceMap.363" = type { i64, %"class.gl::Semaphore"**, %"class.absl::flat_hash_map.364" }
%"class.gl::Semaphore" = type opaque
%"class.absl::flat_hash_map.364" = type { %"class.absl::container_internal::raw_hash_map.365" }
%"class.absl::container_internal::raw_hash_map.365" = type { %"class.absl::container_internal::raw_hash_set.366" }
%"class.absl::container_internal::raw_hash_set.366" = type { i8*, %"union.absl::container_internal::map_slot_type.367"*, i64, i64, %"class.absl::container_internal::CompressedTuple.368" }
%"union.absl::container_internal::map_slot_type.367" = type opaque
%"class.absl::container_internal::CompressedTuple.368" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.gl::RasterizerState" = type { i8, i8, i32, i8, float, float, i8, i8, i8, i8 }
%"struct.gl::BlendState" = type { i8, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i64 }
%"struct.angle::Color" = type { float, float, float, float }
%"struct.std::__1::array.373" = type { [2 x i32] }
%"struct.gl::DepthStencilState" = type { i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::Framebuffer" = type opaque
%"class.gl::BindingPointer.374" = type { %"class.angle::BindingPointer.375" }
%"class.angle::BindingPointer.375" = type { i32 (...)**, %"class.gl::Renderbuffer"* }
%"class.gl::Program" = type { %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::HasAttachedShaders", %"class.rx::Serial", %"class.gl::ProgramState", %"class.rx::ProgramImpl"*, i8, %"class.gl::ProgramBindings", %"class.gl::ProgramAliasedBindings", %"class.gl::ProgramAliasedBindings", i8, %"class.std::__1::unique_ptr.235", i8, i32, %"class.gl::ShaderProgramManager"*, %"struct.gl::ShaderProgramID", %"class.angle::BitSetT.201" }
%"class.gl::ProgramState" = type { %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", %"class.angle::PackedEnumMap.123", i32, %"class.std::__1::vector.125", %"class.std::__1::vector.132", %"class.std::__1::vector.139", %"class.gl::Range", %"class.angle::BitSetT.147", %"class.std::__1::vector", %"class.angle::BitSetT.148", i8, i8, i8, i8, %"class.angle::BitSetT", i32, i32, i32, i32, i32, i32, %"class.gl::ProgramAliasedBindings", %"class.std::__1::shared_ptr" }
%"class.angle::PackedEnumMap.123" = type { %"struct.std::__1::array.124" }
%"struct.std::__1::array.124" = type { [6 x %"class.gl::Shader"*] }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"*, %"class.std::__1::__compressed_pair.134" }
%"struct.gl::VariableLocation" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.gl::VariableLocation"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.gl::BufferVariable"*, %"struct.gl::BufferVariable"*, %"class.std::__1::__compressed_pair.142" }
%"struct.gl::BufferVariable" = type <{ %"struct.gl::ActiveVariable.base", [7 x i8], %"struct.sh::ShaderVariable", i32, %"struct.sh::BlockMemberInfo", i32, [4 x i8] }>
%"struct.gl::ActiveVariable.base" = type <{ i32 (...)**, %"class.angle::BitSetT.141" }>
%"class.angle::BitSetT.141" = type { i8 }
%"struct.sh::BlockMemberInfo" = type { i32, i32, i32, i8, i32 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.gl::BufferVariable"* }
%"class.gl::Range" = type { i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.gl::ProgramExecutable"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.rx::ProgramImpl" = type opaque
%"class.gl::ProgramBindings" = type { %"class.absl::flat_hash_map.226" }
%"class.absl::flat_hash_map.226" = type { %"class.absl::container_internal::raw_hash_map.227" }
%"class.absl::container_internal::raw_hash_map.227" = type { %"class.absl::container_internal::raw_hash_set.228" }
%"class.absl::container_internal::raw_hash_set.228" = type { i8*, %"union.absl::container_internal::map_slot_type.229"*, i64, i64, %"class.absl::container_internal::CompressedTuple.230" }
%"union.absl::container_internal::map_slot_type.229" = type opaque
%"class.absl::container_internal::CompressedTuple.230" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramAliasedBindings" = type { %"class.absl::flat_hash_map.149" }
%"class.absl::flat_hash_map.149" = type { %"class.absl::container_internal::raw_hash_map.150" }
%"class.absl::container_internal::raw_hash_map.150" = type { %"class.absl::container_internal::raw_hash_set.151" }
%"class.absl::container_internal::raw_hash_set.151" = type { i8*, %"union.absl::container_internal::map_slot_type.152"*, i64, i64, %"class.absl::container_internal::CompressedTuple.153" }
%"union.absl::container_internal::map_slot_type.152" = type opaque
%"class.absl::container_internal::CompressedTuple.153" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.gl::Program::LinkingState"* }
%"struct.gl::Program::LinkingState" = type opaque
%"class.angle::BitSetT.201" = type { i64 }
%"class.gl::BindingPointer.376" = type { %"class.angle::BindingPointer.377" }
%"class.angle::BindingPointer.377" = type { i32 (...)**, %"class.gl::ProgramPipeline"* }
%"class.gl::ProgramExecutable" = type <{ %"class.angle::Subject", %"class.gl::InfoLog", %"class.angle::BitSetT.141", %"class.angle::BitSetT.141", [6 x i8], %"class.angle::BitSetT.166", i32, [4 x i8], %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"struct.std::__1::array.169", %"struct.std::__1::array.170", %"class.angle::BitSetArray", %"struct.std::__1::array.171", %"struct.std::__1::array.172", %"class.angle::BitSetArray", %"struct.std::__1::array.172", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.132", %"class.std::__1::vector.132", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.173", %"class.std::__1::vector.180", i32, [4 x i8], %"class.std::__1::vector.187", %"class.gl::Range", %"class.gl::Range", %"class.std::__1::vector.194", %"class.angle::BitSetT.201", %"class.std::__1::vector.202", %"class.gl::Range", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.gl::Range", %"class.std::__1::vector.209", %"class.std::__1::vector.216", %"class.std::__1::vector.216", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap", i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, %struct.Optional.225, [6 x i8] }>
%"class.gl::InfoLog" = type { %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::basic_stringstream"* }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::array.169" = type { [96 x i32] }
%"struct.std::__1::array.170" = type { [96 x i8] }
%"struct.std::__1::array.171" = type { [96 x i8] }
%"struct.std::__1::array.172" = type { [96 x %"class.angle::BitSetT.141"] }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"*, %"class.std::__1::__compressed_pair.175" }
%"struct.gl::TransformFeedbackVarying" = type <{ %"struct.sh::ShaderVariable", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.gl::TransformFeedbackVarying"* }
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { i32*, i32*, %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { i32* }
%"class.std::__1::vector.187" = type { %"class.std::__1::__vector_base.188" }
%"class.std::__1::__vector_base.188" = type { %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"*, %"class.std::__1::__compressed_pair.189" }
%"struct.gl::LinkedUniform" = type { %"struct.gl::ActiveVariable.base", %"struct.sh::ShaderVariable", %"struct.gl::UniformTypeInfo"*, i32, %"struct.sh::BlockMemberInfo", %"class.std::__1::vector" }
%"struct.gl::UniformTypeInfo" = type <{ i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, [4 x i8], i64, i64, i64, i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.gl::LinkedUniform"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.gl::ShaderVariableBuffer"*, %"struct.gl::ShaderVariableBuffer"*, %"class.std::__1::__compressed_pair.204" }
%"struct.gl::ShaderVariableBuffer" = type { %"struct.gl::ActiveVariable.base", i32, i32, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.gl::ShaderVariableBuffer"* }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.gl::InterfaceBlock"*, %"struct.gl::InterfaceBlock"*, %"class.std::__1::__compressed_pair.196" }
%"struct.gl::InterfaceBlock" = type <{ %"struct.gl::ShaderVariableBuffer", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.gl::InterfaceBlock"* }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.gl::SamplerBinding"*, %"struct.gl::SamplerBinding"*, %"class.std::__1::__compressed_pair.211" }
%"struct.gl::SamplerBinding" = type { i8, i32, i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"struct.gl::SamplerBinding"* }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"struct.gl::ImageBinding"*, %"struct.gl::ImageBinding"*, %"class.std::__1::__compressed_pair.218" }
%"struct.gl::ImageBinding" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.gl::ImageBinding"* }
%"class.angle::PackedEnumMap.223" = type { %"struct.std::__1::array.224" }
%"struct.std::__1::array.224" = type { [6 x %"class.std::__1::vector.70"] }
%struct.Optional.225 = type { i8, i8 }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.381" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.380, i32 }
%union.anon.380 = type { [4 x float] }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.382" }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"class.gl::VertexArray" = type <{ %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"struct.gl::VertexArrayID", [4 x i8], %"class.gl::VertexArrayState", %"class.angle::BitSetT.400", %"struct.std::__1::array.401", %"struct.std::__1::array.403", %struct.Optional.405, %"class.rx::VertexArrayImpl"*, %"class.std::__1::vector.337", %"class.angle::BitSetT.166", %"class.gl::VertexArray::IndexRangeCache", i8, [7 x i8] }>
%"struct.gl::VertexArrayID" = type { i32 }
%"class.gl::VertexArrayState" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.386", %"class.gl::SubjectBindingPointer", %"class.std::__1::vector.393", %"class.angle::BitSetT.166", %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166" }
%"class.std::__1::vector.386" = type { %"class.std::__1::__vector_base.387" }
%"class.std::__1::__vector_base.387" = type { %"struct.gl::VertexAttribute"*, %"struct.gl::VertexAttribute"*, %"class.std::__1::__compressed_pair.388" }
%"struct.gl::VertexAttribute" = type { i8, %"struct.angle::Format"*, i8*, i32, i32, i32, i64 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"struct.gl::VertexAttribute"* }
%"class.gl::SubjectBindingPointer" = type { %"class.gl::BindingPointer.264", %"class.angle::ObserverBindingBase" }
%"class.std::__1::vector.393" = type { %"class.std::__1::__vector_base.394" }
%"class.std::__1::__vector_base.394" = type { %"class.gl::VertexBinding"*, %"class.gl::VertexBinding"*, %"class.std::__1::__compressed_pair.395" }
%"class.gl::VertexBinding" = type { i32, i32, i64, %"class.gl::BindingPointer.264", %"class.angle::BitSetT.166" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.gl::VertexBinding"* }
%"class.angle::BitSetT.400" = type { i64 }
%"struct.std::__1::array.401" = type { [16 x %"class.angle::BitSetT.402"] }
%"class.angle::BitSetT.402" = type { i64 }
%"struct.std::__1::array.403" = type { [16 x %"class.angle::BitSetT.404"] }
%"class.angle::BitSetT.404" = type { i64 }
%struct.Optional.405 = type { i8, %"class.angle::BitSetT.400" }
%"class.rx::VertexArrayImpl" = type opaque
%"class.gl::VertexArray::IndexRangeCache" = type { i64, i32, i64, %"struct.gl::IndexRange" }
%"struct.gl::IndexRange" = type { i64, i64, i64 }
%"class.angle::BitSetT.148" = type { i64 }
%"class.angle::PackedEnumMap.406" = type { %"struct.std::__1::array.407" }
%"struct.std::__1::array.407" = type { [11 x %"class.std::__1::vector.408"] }
%"class.std::__1::vector.408" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"class.gl::BindingPointer.410"*, %"class.gl::BindingPointer.410"*, %"class.std::__1::__compressed_pair.412" }
%"class.gl::BindingPointer.410" = type { %"class.angle::BindingPointer.411" }
%"class.angle::BindingPointer.411" = type { i32 (...)**, %"class.gl::Texture"* }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"class.gl::BindingPointer.410"* }
%"class.gl::ActiveTexturesCache" = type { %"struct.std::__1::array.417" }
%"struct.std::__1::array.417" = type { [96 x %"class.gl::Texture"*] }
%"class.std::__1::vector.418" = type { %"class.std::__1::__vector_base.419" }
%"class.std::__1::__vector_base.419" = type { %"class.gl::BindingPointer.420"*, %"class.gl::BindingPointer.420"*, %"class.std::__1::__compressed_pair.422" }
%"class.gl::BindingPointer.420" = type { %"class.angle::BindingPointer.421" }
%"class.angle::BindingPointer.421" = type { i32 (...)**, %"class.gl::Sampler"* }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"class.gl::BindingPointer.420"* }
%"class.std::__1::vector.427" = type { %"class.std::__1::__vector_base.428" }
%"class.std::__1::__vector_base.428" = type { %"struct.gl::ImageUnit"*, %"struct.gl::ImageUnit"*, %"class.std::__1::__compressed_pair.429" }
%"struct.gl::ImageUnit" = type <{ %"class.gl::BindingPointer.410", i32, i8, [3 x i8], i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"struct.gl::ImageUnit"* }
%"class.angle::PackedEnumMap.434" = type { %"struct.std::__1::array.435" }
%"struct.std::__1::array.435" = type { [7 x %"class.gl::BindingPointer.436"] }
%"class.gl::BindingPointer.436" = type { %"class.angle::BindingPointer.437" }
%"class.angle::BindingPointer.437" = type { i32 (...)**, %"class.gl::Query"* }
%"class.gl::Query" = type opaque
%"class.angle::PackedEnumMap.438" = type { %"struct.std::__1::array.439" }
%"struct.std::__1::array.439" = type { [13 x %"class.gl::BindingPointer.264"] }
%"class.std::__1::vector.440" = type { %"class.std::__1::__vector_base.441" }
%"class.std::__1::__vector_base.441" = type { %"class.gl::OffsetBindingPointer"*, %"class.gl::OffsetBindingPointer"*, %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.gl::OffsetBindingPointer"* }
%"class.angle::BitSetArray.447" = type { %"struct.std::__1::array.167" }
%"struct.std::__1::array.167" = type { [2 x %"class.angle::BitSetT.168"] }
%"class.angle::BitSetT.448" = type { i64 }
%"class.gl::BindingPointer.449" = type { %"class.angle::BindingPointer.450" }
%"class.angle::BindingPointer.450" = type { i32 (...)**, %"class.gl::TransformFeedback"* }
%"class.gl::TransformFeedback" = type { %"class.gl::RefCountObject.base.452", %"class.gl::LabeledObject", %"class.gl::TransformFeedbackState", %"class.rx::TransformFeedbackImpl"* }
%"class.gl::RefCountObject.base.452" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TransformFeedbackID" }>
%"struct.gl::TransformFeedbackID" = type { i32 }
%"class.gl::TransformFeedbackState" = type { %"class.std::__1::basic_string", i8, i8, i8, i64, i64, %"class.gl::Program"*, %"class.std::__1::vector.440" }
%"class.rx::TransformFeedbackImpl" = type opaque
%"struct.gl::PixelUnpackState" = type { %"struct.gl::PixelStoreStateBase" }
%"struct.gl::PixelStoreStateBase" = type { i32, i32, i32, i32, i32, i32 }
%"struct.gl::PixelPackState" = type <{ %"struct.gl::PixelStoreStateBase", i8, [3 x i8] }>
%"class.gl::Debug" = type { i8, void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*, %"class.std::__1::deque", i32, i8, %"class.std::__1::vector.462" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.458" }
%"struct.std::__1::__split_buffer" = type { %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"class.std::__1::__compressed_pair.453" }
%"struct.gl::Debug::Message" = type { i32, i32, i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"struct.gl::Debug::Message"** }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.462" = type { %"class.std::__1::__vector_base.463" }
%"class.std::__1::__vector_base.463" = type { %"struct.gl::Debug::Group"*, %"struct.gl::Debug::Group"*, %"class.std::__1::__compressed_pair.471" }
%"struct.gl::Debug::Group" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.464" }
%"class.std::__1::vector.464" = type { %"class.std::__1::__vector_base.465" }
%"class.std::__1::__vector_base.465" = type { %"struct.gl::Debug::Control"*, %"struct.gl::Debug::Control"*, %"class.std::__1::__compressed_pair.466" }
%"struct.gl::Debug::Control" = type <{ i32, i32, i32, [4 x i8], %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"struct.gl::Debug::Control"* }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"struct.gl::Debug::Group"* }
%"class.angle::BitSetT.476" = type { i32 }
%"class.gl::GLES1State" = type <{ %"class.gl::State"*, %"class.angle::BitSetT.166", %"class.std::__1::vector.477", i8, i8, i8, i8, [4 x i8], %"class.std::__1::vector.485", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", %"class.angle::Vector", %"class.std::__1::vector.490", i32, i8, [3 x i8], %"class.angle::FixedVector", %"class.angle::FixedVector", %"class.std::__1::vector.505", %"class.std::__1::vector.512", %"struct.gl::MaterialParameters", %"struct.gl::LightModelParameters", %"class.std::__1::vector.519", %"struct.gl::FogParameters", i8, [3 x i8], %"struct.gl::PointParameters", i8, [3 x i8], float, i8, [7 x i8], %"class.std::__1::vector.528", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::vector.477" = type { %"class.std::__1::__vector_base.478" }
%"class.std::__1::__vector_base.478" = type { %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"*, %"class.std::__1::__compressed_pair.480" }
%"class.angle::BitSetT.479" = type opaque
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.angle::BitSetT.479"* }
%"class.std::__1::vector.485" = type { i64*, i64, %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"class.std::__1::vector.490" = type { %"class.std::__1::__vector_base.491" }
%"class.std::__1::__vector_base.491" = type { %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"*, %"class.std::__1::__compressed_pair.492" }
%"struct.gl::TextureCoordF" = type { float, float, float, float }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"struct.gl::TextureCoordF"* }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.497", i64 }
%"struct.std::__1::array.497" = type { [16 x %"class.angle::Mat4"] }
%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector.498", i32, i32 }
%"class.std::__1::vector.498" = type { %"class.std::__1::__vector_base.499" }
%"class.std::__1::__vector_base.499" = type { float*, float*, %"class.std::__1::__compressed_pair.500" }
%"class.std::__1::__compressed_pair.500" = type { %"struct.std::__1::__compressed_pair_elem.501" }
%"struct.std::__1::__compressed_pair_elem.501" = type { float* }
%"class.std::__1::vector.505" = type { %"class.std::__1::__vector_base.506" }
%"class.std::__1::__vector_base.506" = type { %"class.angle::FixedVector"*, %"class.angle::FixedVector"*, %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.angle::FixedVector"* }
%"class.std::__1::vector.512" = type { %"class.std::__1::__vector_base.513" }
%"class.std::__1::__vector_base.513" = type { %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*, %"class.std::__1::__compressed_pair.514" }
%"struct.gl::TextureEnvironmentParameters" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", float, float, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.514" = type { %"struct.std::__1::__compressed_pair_elem.515" }
%"struct.std::__1::__compressed_pair_elem.515" = type { %"struct.gl::TextureEnvironmentParameters"* }
%"struct.gl::MaterialParameters" = type { %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", float }
%"struct.gl::LightModelParameters" = type <{ %"struct.angle::Color", i8, [3 x i8] }>
%"class.std::__1::vector.519" = type { %"class.std::__1::__vector_base.520" }
%"class.std::__1::__vector_base.520" = type { %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*, %"class.std::__1::__compressed_pair.523" }
%"struct.gl::LightParameters" = type { i8, %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"class.angle::Vector.521", %"class.angle::Vector", float, float, float, float, float }
%"class.angle::Vector.521" = type { %"class.angle::VectorBase.522" }
%"class.angle::VectorBase.522" = type { [4 x float] }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"struct.gl::LightParameters"* }
%"struct.gl::FogParameters" = type { i8, float, float, float, %"struct.angle::Color" }
%"struct.gl::PointParameters" = type { float, float, float, %"class.angle::Vector", float }
%"class.std::__1::vector.528" = type { %"class.std::__1::__vector_base.529" }
%"class.std::__1::__vector_base.529" = type { %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*, %"class.std::__1::__compressed_pair.530" }
%"struct.gl::ClipPlaneParameters" = type { i8, %"class.angle::Vector.521" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"struct.gl::ClipPlaneParameters"* }
%"class.angle::BitSetT.535" = type { i32 }
%"class.angle::BitSetT.166" = type { i64 }
%"class.angle::BitSetArray" = type { %"struct.std::__1::array.167" }
%"class.angle::BitSetT.147" = type { i8 }
%"class.gl::ErrorSet" = type { %"class.gl::Context"*, %"class.std::__1::set.35" }
%"class.angle::BitSetT.537" = type { i32 }
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.rx::ContextImpl"* }
%"class.rx::ContextImpl" = type opaque
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer.91" }
%"class.angle::BindingPointer.91" = type { i32 (...)**, %"class.gl::Compiler"* }
%"class.gl::Compiler" = type { %"class.angle::RefCountObject", %"class.std::__1::unique_ptr.92", i32, i32, %struct.ShBuiltInResources, %"class.angle::PackedEnumMap.98" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.rx::CompilerImpl"* }
%"class.rx::CompilerImpl" = type opaque
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.98" = type { %"struct.std::__1::array.99" }
%"struct.std::__1::array.99" = type { [6 x %"class.std::__1::vector.100"] }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"class.gl::ShCompilerInstance"*, %"class.gl::ShCompilerInstance"*, %"class.std::__1::__compressed_pair.102" }
%"class.gl::ShCompilerInstance" = type <{ i8*, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.gl::ShCompilerInstance"* }
%"struct.egl::Config" = type opaque
%"class.angle::PackedEnumMap.544" = type { %"struct.std::__1::array.545" }
%"struct.std::__1::array.545" = type { [11 x %"class.gl::BindingPointer.410"] }
%"class.gl::ResourceMap.546" = type { i64, %"class.gl::FenceNV"**, %"class.absl::flat_hash_map.547" }
%"class.gl::FenceNV" = type opaque
%"class.absl::flat_hash_map.547" = type { %"class.absl::container_internal::raw_hash_map.548" }
%"class.absl::container_internal::raw_hash_map.548" = type { %"class.absl::container_internal::raw_hash_set.549" }
%"class.absl::container_internal::raw_hash_set.549" = type { i8*, %"union.absl::container_internal::map_slot_type.550"*, i64, i64, %"class.absl::container_internal::CompressedTuple.551" }
%"union.absl::container_internal::map_slot_type.550" = type opaque
%"class.absl::container_internal::CompressedTuple.551" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.556" = type { i64, %"class.gl::Query"**, %"class.absl::flat_hash_map.557" }
%"class.absl::flat_hash_map.557" = type { %"class.absl::container_internal::raw_hash_map.558" }
%"class.absl::container_internal::raw_hash_map.558" = type { %"class.absl::container_internal::raw_hash_set.559" }
%"class.absl::container_internal::raw_hash_set.559" = type { i8*, %"union.absl::container_internal::map_slot_type.560"*, i64, i64, %"class.absl::container_internal::CompressedTuple.561" }
%"union.absl::container_internal::map_slot_type.560" = type opaque
%"class.absl::container_internal::CompressedTuple.561" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.566" = type { i64, %"class.gl::VertexArray"**, %"class.absl::flat_hash_map.567" }
%"class.absl::flat_hash_map.567" = type { %"class.absl::container_internal::raw_hash_map.568" }
%"class.absl::container_internal::raw_hash_map.568" = type { %"class.absl::container_internal::raw_hash_set.569" }
%"class.absl::container_internal::raw_hash_set.569" = type { i8*, %"union.absl::container_internal::map_slot_type.570"*, i64, i64, %"class.absl::container_internal::CompressedTuple.571" }
%"union.absl::container_internal::map_slot_type.570" = type opaque
%"class.absl::container_internal::CompressedTuple.571" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.576" = type { i64, %"class.gl::TransformFeedback"**, %"class.absl::flat_hash_map.577" }
%"class.absl::flat_hash_map.577" = type { %"class.absl::container_internal::raw_hash_map.578" }
%"class.absl::container_internal::raw_hash_map.578" = type { %"class.absl::container_internal::raw_hash_set.579" }
%"class.absl::container_internal::raw_hash_set.579" = type { i8*, %"union.absl::container_internal::map_slot_type.580"*, i64, i64, %"class.absl::container_internal::CompressedTuple.581" }
%"union.absl::container_internal::map_slot_type.580" = type opaque
%"class.absl::container_internal::CompressedTuple.581" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::HandleAllocator" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.45", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.gl::HandleAllocator::HandleRange"*, %"struct.gl::HandleAllocator::HandleRange"*, %"class.std::__1::__compressed_pair.47" }
%"struct.gl::HandleAllocator::HandleRange" = type { i32, i32 }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.gl::HandleAllocator::HandleRange"* }
%"class.std::__1::vector.586" = type { %"class.std::__1::__vector_base.587" }
%"class.std::__1::__vector_base.587" = type { i8**, i8**, %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.589" = type { i8** }
%"class.std::__1::unique_ptr.593" = type { %"class.std::__1::__compressed_pair.594" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"class.gl::GLES1Renderer"* }
%"class.gl::GLES1Renderer" = type opaque
%"class.egl::Surface" = type opaque
%"class.egl::Display" = type opaque
%"class.gl::MemoryProgramCache" = type opaque
%"class.gl::StateCache" = type <{ %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", i8, [7 x i8], i64, i64, i64, i64, i8, [7 x i8], %"class.angle::BitSetT.168", %"class.angle::BitSetArray", %"class.angle::PackedEnumMap.599", %"class.angle::PackedEnumMap.601", %"class.angle::PackedEnumMap.603", %"class.angle::PackedEnumMap.605", %"class.angle::PackedEnumMap.605", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.599" = type { %"struct.std::__1::array.600" }
%"struct.std::__1::array.600" = type { [16 x i8] }
%"class.angle::PackedEnumMap.601" = type { %"struct.std::__1::array.602" }
%"struct.std::__1::array.602" = type { [12 x i8] }
%"class.angle::PackedEnumMap.603" = type { %"struct.std::__1::array.604" }
%"struct.std::__1::array.604" = type { [4 x i8] }
%"class.angle::PackedEnumMap.605" = type { %"struct.std::__1::array.606" }
%"struct.std::__1::array.606" = type { [19 x i32] }
%"class.angle::BitSetT.168" = type { i64 }
%"class.angle::BitSetT.536" = type { i64 }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.std::__1::vector.337" = type { %"class.std::__1::__vector_base.338" }
%"class.std::__1::__vector_base.338" = type { %"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*, %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.angle::ObserverBinding"* }
%struct.Optional.607 = type { i8, %"class.angle::ScratchBuffer" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::shared_ptr.608" = type { %"class.angle::WorkerThreadPool"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WorkerThreadPool" = type { i32 (...)** }
%"class.std::__1::unique_ptr.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.angle::FrameCapture"* }
%"class.angle::FrameCapture" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gl::MockOverlay" = type { %"class.gl::overlay::Mock" }
%"class.gl::overlay::Mock" = type { i8 }
%"class.gl::LogMessage" = type { i8*, i8*, i32, i32, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN2gl23CastFromGLintStateValueIfjEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIfiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIijEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIiiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIljEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIliEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIjjEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIjiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIjiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIfiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIiiEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIfbEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIjbEET_jT0_ = comdat any

$_ZN2gl23CastFromGLintStateValueIibEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIilEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIllEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIfjEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIffEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIifEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIjfEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIjjEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIihEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIlhEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIijEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueIljEET_jT0_ = comdat any

$_ZN2gl18CastFromStateValueImjEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIifEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIhiEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIiiEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIijEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIfiEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIfjEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIffEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIjiEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIjjEET_jT0_ = comdat any

$_ZN2gl16CastQueryValueToIjfEET_jT0_ = comdat any

$_ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_ = comdat any

$_ZN2gl15CastStateValuesIiEEvPKNS_7ContextEjjjPT_ = comdat any

$_ZN2gl15CastStateValuesIjEEvPKNS_7ContextEjjjPT_ = comdat any

$_ZN2gl15CastStateValuesIfEEvPKNS_7ContextEjjjPT_ = comdat any

$_ZN2gl15CastStateValuesIlEEvPKNS_7ContextEjjjPT_ = comdat any

$_ZN2gl22CastIndexedStateValuesIhEEvPNS_7ContextEjjjjPT_ = comdat any

$_ZN2gl22CastIndexedStateValuesIiEEvPNS_7ContextEjjjjPT_ = comdat any

$_ZN2gl22CastIndexedStateValuesIjEEvPNS_7ContextEjjjjPT_ = comdat any

$_ZN2gl22CastIndexedStateValuesIfEEvPNS_7ContextEjjjjPT_ = comdat any

$_ZN2gl22CastIndexedStateValuesIlEEvPNS_7ContextEjjjjPT_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [58 x i8] c"../../third_party/angle/src/libANGLE/queryconversions.cpp\00", align 1
@__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_ = private unnamed_addr constant [16 x i8] c"CastStateValues\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"Application querying parameter that does not exist.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl23CastFromGLintStateValueIfjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ult i32 %1, 2147483647
  %4 = select i1 %3, i32 %1, i32 2147483647
  %5 = sitofp i32 %4 to float
  ret float %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl18CastFromStateValueIfiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = sitofp i32 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIijEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ult i32 %1, 2147483647
  %4 = select i1 %3, i32 %1, i32 2147483647
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIiiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl23CastFromGLintStateValueIljEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ult i32 %1, 2147483647
  %4 = select i1 %3, i32 %1, i32 2147483647
  %5 = zext i32 %4 to i64
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl18CastFromStateValueIliEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = sext i32 %1 to i64
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIjjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ult i32 %1, 2147483647
  %4 = select i1 %3, i32 %1, i32 2147483647
  %5 = icmp sgt i32 %4, 0
  %6 = select i1 %5, i32 %4, i32 0
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIjiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp sgt i32 %1, 0
  %4 = select i1 %3, i32 %1, i32 0
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIjiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp sgt i32 %1, 0
  %4 = select i1 %3, i32 %1, i32 0
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl23CastFromGLintStateValueIfiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = sitofp i32 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIiiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl23CastFromGLintStateValueIfbEET_jT0_(i32, i1 zeroext) local_unnamed_addr #0 comdat {
  %3 = uitofp i1 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIjbEET_jT0_(i32, i1 zeroext) local_unnamed_addr #0 comdat {
  %3 = zext i1 %1 to i32
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl23CastFromGLintStateValueIibEET_jT0_(i32, i1 zeroext) local_unnamed_addr #0 comdat {
  %3 = zext i1 %1 to i32
  ret i32 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIilEET_jT0_(i32, i64) local_unnamed_addr #0 comdat {
  %3 = icmp sgt i64 %1, -2147483648
  %4 = select i1 %3, i64 %1, i64 -2147483648
  %5 = icmp slt i64 %4, 2147483647
  %6 = select i1 %5, i64 %4, i64 2147483647
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl18CastFromStateValueIllEET_jT0_(i32, i64) local_unnamed_addr #0 comdat {
  ret i64 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl18CastFromStateValueIfjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = uitofp i32 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl18CastFromStateValueIffEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  ret float %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIifEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  switch i32 %0, label %14 [
    i32 2928, label %3
    i32 3106, label %3
    i32 2931, label %3
    i32 32773, label %3
    i32 3010, label %3
    i32 2816, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2
  %4 = fpext float %1 to double
  %5 = fmul double %4, 0x41EFFFFFFFE00000
  %6 = fadd double %5, -1.000000e+00
  %7 = fmul double %6, 5.000000e-01
  %8 = fptosi double %7 to i64
  %9 = icmp slt i64 %8, 2147483647
  br i1 %9, label %10, label %21

10:                                               ; preds = %3
  %11 = icmp sgt i64 %8, -2147483648
  %12 = select i1 %11, i64 %8, i64 -2147483648
  %13 = trunc i64 %12 to i32
  br label %21

14:                                               ; preds = %2
  %15 = tail call float @llvm.round.f32(float %1) #8
  %16 = fcmp ult float %15, 0x41E0000000000000
  br i1 %16, label %17, label %21

17:                                               ; preds = %14
  %18 = fcmp ole float %15, 0xC1E0000000000000
  %19 = select i1 %18, float 0xC1E0000000000000, float %15
  %20 = fptosi float %19 to i32
  br label %21

21:                                               ; preds = %3, %10, %14, %17
  %22 = phi i32 [ %13, %10 ], [ 2147483647, %3 ], [ %20, %17 ], [ 2147483647, %14 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIjfEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  switch i32 %0, label %15 [
    i32 2928, label %3
    i32 3106, label %3
    i32 2931, label %3
    i32 32773, label %3
    i32 3010, label %3
    i32 2816, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2
  %4 = fpext float %1 to double
  %5 = fmul double %4, 0x41EFFFFFFFE00000
  %6 = fadd double %5, -1.000000e+00
  %7 = fmul double %6, 5.000000e-01
  %8 = fptosi double %7 to i64
  %9 = icmp slt i64 %8, 4294967295
  br i1 %9, label %10, label %23

10:                                               ; preds = %3
  %11 = icmp sgt i64 %8, 0
  %12 = sext i1 %11 to i32
  %13 = trunc i64 %8 to i32
  %14 = select i1 %11, i32 %13, i32 %12
  br label %23

15:                                               ; preds = %2
  %16 = tail call float @llvm.round.f32(float %1) #8
  %17 = fcmp ult float %16, 0x41F0000000000000
  br i1 %17, label %18, label %23

18:                                               ; preds = %15
  %19 = fcmp ugt float %16, 0.000000e+00
  %20 = sext i1 %19 to i32
  %21 = fptoui float %16 to i32
  %22 = select i1 %19, i32 %21, i32 %20
  br label %23

23:                                               ; preds = %3, %10, %15, %18
  %24 = phi i32 [ %14, %10 ], [ -1, %3 ], [ %22, %18 ], [ -1, %15 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIjjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIihEET_jT0_(i32, i8 zeroext) local_unnamed_addr #0 comdat {
  %3 = zext i8 %1 to i32
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl18CastFromStateValueIlhEET_jT0_(i32, i8 zeroext) local_unnamed_addr #0 comdat {
  %3 = zext i8 %1 to i64
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl18CastFromStateValueIijEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ult i32 %1, 2147483647
  %4 = select i1 %3, i32 %1, i32 2147483647
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl18CastFromStateValueIljEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = zext i32 %1 to i64
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZN2gl18CastFromStateValueImjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = zext i32 %1 to i64
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIifEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  %3 = tail call float @llvm.round.f32(float %1) #8
  %4 = fptosi float %3 to i64
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i8 @_ZN2gl16CastQueryValueToIhiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = icmp ne i32 %1, 0
  %4 = zext i1 %3 to i8
  ret i8 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIiiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIijEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl16CastQueryValueToIfiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = sitofp i32 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl16CastQueryValueToIfjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  %3 = uitofp i32 %1 to float
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden float @_ZN2gl16CastQueryValueToIffEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  ret float %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIjiEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIjjEET_jT0_(i32, i32) local_unnamed_addr #0 comdat {
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN2gl16CastQueryValueToIjfEET_jT0_(i32, float) local_unnamed_addr #0 comdat {
  %3 = tail call float @llvm.round.f32(float %1) #8
  %4 = fptosi float %3 to i64
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_(%"class.gl::Context"*, i32, i32, i32, i8*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.gl::LogMessage", align 8
  switch i32 %1, label %317 [
    i32 5124, label %7
    i32 35670, label %92
    i32 5126, label %175
    i32 27326, label %260
  ]

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* null) #8
  br label %324

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* nonnull %14) #8
  %15 = icmp ult i32 %3, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %80, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %80 ]
  br label %83

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %62, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %59, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %60, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = icmp ne <4 x i32> %32, zeroinitializer
  %37 = icmp ne <4 x i32> %35, zeroinitializer
  %38 = zext <4 x i1> %36 to <4 x i8>
  %39 = zext <4 x i1> %37 to <4 x i8>
  %40 = getelementptr inbounds i8, i8* %4, i64 %28
  %41 = bitcast i8* %40 to <4 x i8>*
  store <4 x i8> %38, <4 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 4
  %43 = bitcast i8* %42 to <4 x i8>*
  store <4 x i8> %39, <4 x i8>* %43, align 1
  %44 = or i64 %28, 8
  %45 = getelementptr inbounds i32, i32* %14, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = icmp ne <4 x i32> %47, zeroinitializer
  %52 = icmp ne <4 x i32> %50, zeroinitializer
  %53 = zext <4 x i1> %51 to <4 x i8>
  %54 = zext <4 x i1> %52 to <4 x i8>
  %55 = getelementptr inbounds i8, i8* %4, i64 %44
  %56 = bitcast i8* %55 to <4 x i8>*
  store <4 x i8> %53, <4 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 4
  %58 = bitcast i8* %57 to <4 x i8>*
  store <4 x i8> %54, <4 x i8>* %58, align 1
  %59 = add i64 %28, 16
  %60 = add i64 %29, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %27, !llvm.loop !2

62:                                               ; preds = %27, %18
  %63 = phi i64 [ 0, %18 ], [ %59, %27 ]
  %64 = icmp eq i64 %23, 0
  br i1 %64, label %80, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %14, i64 %63
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = icmp ne <4 x i32> %68, zeroinitializer
  %73 = icmp ne <4 x i32> %71, zeroinitializer
  %74 = zext <4 x i1> %72 to <4 x i8>
  %75 = zext <4 x i1> %73 to <4 x i8>
  %76 = getelementptr inbounds i8, i8* %4, i64 %63
  %77 = bitcast i8* %76 to <4 x i8>*
  store <4 x i8> %74, <4 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 4
  %79 = bitcast i8* %78 to <4 x i8>*
  store <4 x i8> %75, <4 x i8>* %79, align 1
  br label %80

80:                                               ; preds = %62, %65
  %81 = icmp eq i64 %19, %8
  br i1 %81, label %82, label %16

82:                                               ; preds = %83, %80
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %324

83:                                               ; preds = %16, %83
  %84 = phi i64 [ %90, %83 ], [ %17, %16 ]
  %85 = getelementptr inbounds i32, i32* %14, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = icmp ne i32 %86, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds i8, i8* %4, i64 %84
  store i8 %88, i8* %89, align 1
  %90 = add nuw nsw i64 %84, 1
  %91 = icmp eq i64 %90, %8
  br i1 %91, label %82, label %83, !llvm.loop !4

92:                                               ; preds = %5
  %93 = zext i32 %3 to i64
  %94 = icmp eq i32 %3, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* null) #8
  br label %324

96:                                               ; preds = %92
  %97 = tail call i8* @_Znwm(i64 %93) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %97, i8 0, i64 %93, i1 false)
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* nonnull %97) #8
  %98 = icmp ult i32 %3, 32
  br i1 %98, label %99, label %101

99:                                               ; preds = %163, %96
  %100 = phi i64 [ 0, %96 ], [ %102, %163 ]
  br label %166

101:                                              ; preds = %96
  %102 = and i64 %93, 4294967264
  %103 = add nsw i64 %102, -32
  %104 = lshr exact i64 %103, 5
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %145, label %108

108:                                              ; preds = %101
  %109 = sub nuw nsw i64 %105, %106
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %142, %110 ]
  %112 = phi i64 [ %109, %108 ], [ %143, %110 ]
  %113 = getelementptr inbounds i8, i8* %97, i64 %111
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = getelementptr inbounds i8, i8* %113, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = icmp ne <16 x i8> %115, zeroinitializer
  %120 = icmp ne <16 x i8> %118, zeroinitializer
  %121 = zext <16 x i1> %119 to <16 x i8>
  %122 = zext <16 x i1> %120 to <16 x i8>
  %123 = getelementptr inbounds i8, i8* %4, i64 %111
  %124 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %123, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1
  %127 = or i64 %111, 32
  %128 = getelementptr inbounds i8, i8* %97, i64 %127
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1
  %134 = icmp ne <16 x i8> %130, zeroinitializer
  %135 = icmp ne <16 x i8> %133, zeroinitializer
  %136 = zext <16 x i1> %134 to <16 x i8>
  %137 = zext <16 x i1> %135 to <16 x i8>
  %138 = getelementptr inbounds i8, i8* %4, i64 %127
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %141, align 1
  %142 = add i64 %111, 64
  %143 = add i64 %112, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %110, !llvm.loop !6

145:                                              ; preds = %110, %101
  %146 = phi i64 [ 0, %101 ], [ %142, %110 ]
  %147 = icmp eq i64 %106, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds i8, i8* %97, i64 %146
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 16
  %153 = bitcast i8* %152 to <16 x i8>*
  %154 = load <16 x i8>, <16 x i8>* %153, align 1
  %155 = icmp ne <16 x i8> %151, zeroinitializer
  %156 = icmp ne <16 x i8> %154, zeroinitializer
  %157 = zext <16 x i1> %155 to <16 x i8>
  %158 = zext <16 x i1> %156 to <16 x i8>
  %159 = getelementptr inbounds i8, i8* %4, i64 %146
  %160 = bitcast i8* %159 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %160, align 1
  %161 = getelementptr inbounds i8, i8* %159, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %162, align 1
  br label %163

163:                                              ; preds = %145, %148
  %164 = icmp eq i64 %102, %93
  br i1 %164, label %165, label %99

165:                                              ; preds = %166, %163
  tail call void @_ZdlPv(i8* nonnull %97) #9
  br label %324

166:                                              ; preds = %99, %166
  %167 = phi i64 [ %173, %166 ], [ %100, %99 ]
  %168 = getelementptr inbounds i8, i8* %97, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = icmp ne i8 %169, 0
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds i8, i8* %4, i64 %167
  store i8 %171, i8* %172, align 1
  %173 = add nuw nsw i64 %167, 1
  %174 = icmp eq i64 %173, %93
  br i1 %174, label %165, label %166, !llvm.loop !7

175:                                              ; preds = %5
  %176 = zext i32 %3 to i64
  %177 = icmp eq i32 %3, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* null) #8
  br label %324

179:                                              ; preds = %175
  %180 = shl nuw nsw i64 %176, 2
  %181 = tail call i8* @_Znwm(i64 %180) #9
  %182 = bitcast i8* %181 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %181, i8 0, i64 %180, i1 false)
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* nonnull %182) #8
  %183 = icmp ult i32 %3, 8
  br i1 %183, label %184, label %186

184:                                              ; preds = %248, %179
  %185 = phi i64 [ 0, %179 ], [ %187, %248 ]
  br label %251

186:                                              ; preds = %179
  %187 = and i64 %176, 4294967288
  %188 = add nsw i64 %187, -8
  %189 = lshr exact i64 %188, 3
  %190 = add nuw nsw i64 %189, 1
  %191 = and i64 %190, 1
  %192 = icmp eq i64 %188, 0
  br i1 %192, label %230, label %193

193:                                              ; preds = %186
  %194 = sub nuw nsw i64 %190, %191
  br label %195

195:                                              ; preds = %195, %193
  %196 = phi i64 [ 0, %193 ], [ %227, %195 ]
  %197 = phi i64 [ %194, %193 ], [ %228, %195 ]
  %198 = getelementptr inbounds float, float* %182, i64 %196
  %199 = bitcast float* %198 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 4
  %201 = getelementptr inbounds float, float* %198, i64 4
  %202 = bitcast float* %201 to <4 x float>*
  %203 = load <4 x float>, <4 x float>* %202, align 4
  %204 = fcmp une <4 x float> %200, zeroinitializer
  %205 = fcmp une <4 x float> %203, zeroinitializer
  %206 = zext <4 x i1> %204 to <4 x i8>
  %207 = zext <4 x i1> %205 to <4 x i8>
  %208 = getelementptr inbounds i8, i8* %4, i64 %196
  %209 = bitcast i8* %208 to <4 x i8>*
  store <4 x i8> %206, <4 x i8>* %209, align 1
  %210 = getelementptr inbounds i8, i8* %208, i64 4
  %211 = bitcast i8* %210 to <4 x i8>*
  store <4 x i8> %207, <4 x i8>* %211, align 1
  %212 = or i64 %196, 8
  %213 = getelementptr inbounds float, float* %182, i64 %212
  %214 = bitcast float* %213 to <4 x float>*
  %215 = load <4 x float>, <4 x float>* %214, align 4
  %216 = getelementptr inbounds float, float* %213, i64 4
  %217 = bitcast float* %216 to <4 x float>*
  %218 = load <4 x float>, <4 x float>* %217, align 4
  %219 = fcmp une <4 x float> %215, zeroinitializer
  %220 = fcmp une <4 x float> %218, zeroinitializer
  %221 = zext <4 x i1> %219 to <4 x i8>
  %222 = zext <4 x i1> %220 to <4 x i8>
  %223 = getelementptr inbounds i8, i8* %4, i64 %212
  %224 = bitcast i8* %223 to <4 x i8>*
  store <4 x i8> %221, <4 x i8>* %224, align 1
  %225 = getelementptr inbounds i8, i8* %223, i64 4
  %226 = bitcast i8* %225 to <4 x i8>*
  store <4 x i8> %222, <4 x i8>* %226, align 1
  %227 = add i64 %196, 16
  %228 = add i64 %197, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %195, !llvm.loop !8

230:                                              ; preds = %195, %186
  %231 = phi i64 [ 0, %186 ], [ %227, %195 ]
  %232 = icmp eq i64 %191, 0
  br i1 %232, label %248, label %233

233:                                              ; preds = %230
  %234 = getelementptr inbounds float, float* %182, i64 %231
  %235 = bitcast float* %234 to <4 x float>*
  %236 = load <4 x float>, <4 x float>* %235, align 4
  %237 = getelementptr inbounds float, float* %234, i64 4
  %238 = bitcast float* %237 to <4 x float>*
  %239 = load <4 x float>, <4 x float>* %238, align 4
  %240 = fcmp une <4 x float> %236, zeroinitializer
  %241 = fcmp une <4 x float> %239, zeroinitializer
  %242 = zext <4 x i1> %240 to <4 x i8>
  %243 = zext <4 x i1> %241 to <4 x i8>
  %244 = getelementptr inbounds i8, i8* %4, i64 %231
  %245 = bitcast i8* %244 to <4 x i8>*
  store <4 x i8> %242, <4 x i8>* %245, align 1
  %246 = getelementptr inbounds i8, i8* %244, i64 4
  %247 = bitcast i8* %246 to <4 x i8>*
  store <4 x i8> %243, <4 x i8>* %247, align 1
  br label %248

248:                                              ; preds = %230, %233
  %249 = icmp eq i64 %187, %176
  br i1 %249, label %250, label %184

250:                                              ; preds = %251, %248
  tail call void @_ZdlPv(i8* nonnull %181) #9
  br label %324

251:                                              ; preds = %184, %251
  %252 = phi i64 [ %258, %251 ], [ %185, %184 ]
  %253 = getelementptr inbounds float, float* %182, i64 %252
  %254 = load float, float* %253, align 4
  %255 = fcmp une float %254, 0.000000e+00
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds i8, i8* %4, i64 %252
  store i8 %256, i8* %257, align 1
  %258 = add nuw nsw i64 %252, 1
  %259 = icmp eq i64 %258, %176
  br i1 %259, label %250, label %251, !llvm.loop !9

260:                                              ; preds = %5
  %261 = zext i32 %3 to i64
  %262 = icmp eq i32 %3, 0
  br i1 %262, label %263, label %264

263:                                              ; preds = %260
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* null) #8
  br label %324

264:                                              ; preds = %260
  %265 = shl nuw nsw i64 %261, 3
  %266 = tail call i8* @_Znwm(i64 %265) #9
  %267 = bitcast i8* %266 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %266, i8 0, i64 %265, i1 false)
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* nonnull %267) #8
  %268 = add nsw i64 %261, -1
  %269 = and i64 %261, 3
  %270 = icmp ult i64 %268, 3
  br i1 %270, label %273, label %271

271:                                              ; preds = %264
  %272 = sub nsw i64 %261, %269
  br label %288

273:                                              ; preds = %288, %264
  %274 = phi i64 [ 0, %264 ], [ %314, %288 ]
  %275 = icmp eq i64 %269, 0
  br i1 %275, label %287, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %284, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %285, %276 ], [ %269, %273 ]
  %279 = getelementptr inbounds i64, i64* %267, i64 %277
  %280 = load i64, i64* %279, align 8
  %281 = icmp ne i64 %280, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds i8, i8* %4, i64 %277
  store i8 %282, i8* %283, align 1
  %284 = add nuw nsw i64 %277, 1
  %285 = add i64 %278, -1
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %276, !llvm.loop !10

287:                                              ; preds = %276, %273
  tail call void @_ZdlPv(i8* nonnull %266) #9
  br label %324

288:                                              ; preds = %288, %271
  %289 = phi i64 [ 0, %271 ], [ %314, %288 ]
  %290 = phi i64 [ %272, %271 ], [ %315, %288 ]
  %291 = getelementptr inbounds i64, i64* %267, i64 %289
  %292 = load i64, i64* %291, align 8
  %293 = icmp ne i64 %292, 0
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds i8, i8* %4, i64 %289
  store i8 %294, i8* %295, align 1
  %296 = or i64 %289, 1
  %297 = getelementptr inbounds i64, i64* %267, i64 %296
  %298 = load i64, i64* %297, align 8
  %299 = icmp ne i64 %298, 0
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds i8, i8* %4, i64 %296
  store i8 %300, i8* %301, align 1
  %302 = or i64 %289, 2
  %303 = getelementptr inbounds i64, i64* %267, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = icmp ne i64 %304, 0
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds i8, i8* %4, i64 %302
  store i8 %306, i8* %307, align 1
  %308 = or i64 %289, 3
  %309 = getelementptr inbounds i64, i64* %267, i64 %308
  %310 = load i64, i64* %309, align 8
  %311 = icmp ne i64 %310, 0
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds i8, i8* %4, i64 %308
  store i8 %312, i8* %313, align 1
  %314 = add nuw nsw i64 %289, 4
  %315 = add i64 %290, -4
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %273, label %288

317:                                              ; preds = %5
  %318 = tail call zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32 2) #8
  br i1 %318, label %319, label %324

319:                                              ; preds = %317
  %320 = bitcast %"class.gl::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %320) #8
  call void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"* nonnull %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_, i64 0, i64 0), i32 224, i32 2) #8
  %321 = getelementptr inbounds %"class.gl::LogMessage", %"class.gl::LogMessage"* %6, i64 0, i32 4
  %322 = bitcast %"class.std::__1::basic_ostringstream"* %321 to %"class.std::__1::basic_ostream"*
  %323 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %322, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i64 51) #8
  call void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %320) #8
  br label %324

324:                                              ; preds = %263, %178, %95, %10, %319, %317, %287, %250, %165, %82
  ret void
}

declare void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"*, i32, i32*) local_unnamed_addr #2

declare void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"*, i32, i8*) local_unnamed_addr #2

declare void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"*, i32, float*) local_unnamed_addr #2

declare void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"*, i32, i64*) local_unnamed_addr #2

declare zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32) local_unnamed_addr #2

declare void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"*, i8*, i8*, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl15CastStateValuesIiEEvPKNS_7ContextEjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.gl::LogMessage", align 8
  switch i32 %1, label %272 [
    i32 5124, label %7
    i32 35670, label %105
    i32 5126, label %188
    i32 27326, label %224
  ]

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* null) #8
  br label %279

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* nonnull %14) #8
  %15 = icmp ult i32 %3, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %95, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %95 ]
  br label %98

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp ult i64 %20, 24
  br i1 %24, label %76, label %25

25:                                               ; preds = %18
  %26 = sub nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %73, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %74, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = getelementptr inbounds i32, i32* %4, i64 %28
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %37, align 4
  %38 = getelementptr inbounds i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %39, align 4
  %40 = or i64 %28, 8
  %41 = getelementptr inbounds i32, i32* %14, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr inbounds i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds i32, i32* %4, i64 %40
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %48, align 4
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %50, align 4
  %51 = or i64 %28, 16
  %52 = getelementptr inbounds i32, i32* %14, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = getelementptr inbounds i32, i32* %4, i64 %51
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %59, align 4
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %61, align 4
  %62 = or i64 %28, 24
  %63 = getelementptr inbounds i32, i32* %14, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %4, i64 %62
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %70, align 4
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %72, align 4
  %73 = add i64 %28, 32
  %74 = add i64 %29, -4
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %27, !llvm.loop !12

76:                                               ; preds = %27, %18
  %77 = phi i64 [ 0, %18 ], [ %73, %27 ]
  %78 = icmp eq i64 %23, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %76, %79
  %80 = phi i64 [ %92, %79 ], [ %77, %76 ]
  %81 = phi i64 [ %93, %79 ], [ %23, %76 ]
  %82 = getelementptr inbounds i32, i32* %14, i64 %80
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = getelementptr inbounds i32, i32* %82, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4
  %88 = getelementptr inbounds i32, i32* %4, i64 %80
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %89, align 4
  %90 = getelementptr inbounds i32, i32* %88, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %91, align 4
  %92 = add i64 %80, 8
  %93 = add i64 %81, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !13

95:                                               ; preds = %79, %76
  %96 = icmp eq i64 %19, %8
  br i1 %96, label %97, label %16

97:                                               ; preds = %98, %95
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %279

98:                                               ; preds = %16, %98
  %99 = phi i64 [ %103, %98 ], [ %17, %16 ]
  %100 = getelementptr inbounds i32, i32* %14, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds i32, i32* %4, i64 %99
  store i32 %101, i32* %102, align 4
  %103 = add nuw nsw i64 %99, 1
  %104 = icmp eq i64 %103, %8
  br i1 %104, label %97, label %98, !llvm.loop !14

105:                                              ; preds = %5
  %106 = zext i32 %3 to i64
  %107 = icmp eq i32 %3, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* null) #8
  br label %279

109:                                              ; preds = %105
  %110 = tail call i8* @_Znwm(i64 %106) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %110, i8 0, i64 %106, i1 false)
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* nonnull %110) #8
  %111 = icmp ult i32 %3, 8
  br i1 %111, label %112, label %114

112:                                              ; preds = %176, %109
  %113 = phi i64 [ 0, %109 ], [ %115, %176 ]
  br label %179

114:                                              ; preds = %109
  %115 = and i64 %106, 4294967288
  %116 = add nsw i64 %115, -8
  %117 = lshr exact i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 1
  %120 = icmp eq i64 %116, 0
  br i1 %120, label %158, label %121

121:                                              ; preds = %114
  %122 = sub nuw nsw i64 %118, %119
  br label %123

123:                                              ; preds = %123, %121
  %124 = phi i64 [ 0, %121 ], [ %155, %123 ]
  %125 = phi i64 [ %122, %121 ], [ %156, %123 ]
  %126 = getelementptr inbounds i8, i8* %110, i64 %124
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = icmp ne <4 x i8> %128, zeroinitializer
  %133 = icmp ne <4 x i8> %131, zeroinitializer
  %134 = zext <4 x i1> %132 to <4 x i32>
  %135 = zext <4 x i1> %133 to <4 x i32>
  %136 = getelementptr inbounds i32, i32* %4, i64 %124
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %137, align 4
  %138 = getelementptr inbounds i32, i32* %136, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %139, align 4
  %140 = or i64 %124, 8
  %141 = getelementptr inbounds i8, i8* %110, i64 %140
  %142 = bitcast i8* %141 to <4 x i8>*
  %143 = load <4 x i8>, <4 x i8>* %142, align 1
  %144 = getelementptr inbounds i8, i8* %141, i64 4
  %145 = bitcast i8* %144 to <4 x i8>*
  %146 = load <4 x i8>, <4 x i8>* %145, align 1
  %147 = icmp ne <4 x i8> %143, zeroinitializer
  %148 = icmp ne <4 x i8> %146, zeroinitializer
  %149 = zext <4 x i1> %147 to <4 x i32>
  %150 = zext <4 x i1> %148 to <4 x i32>
  %151 = getelementptr inbounds i32, i32* %4, i64 %140
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %152, align 4
  %153 = getelementptr inbounds i32, i32* %151, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %154, align 4
  %155 = add i64 %124, 16
  %156 = add i64 %125, -2
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %123, !llvm.loop !15

158:                                              ; preds = %123, %114
  %159 = phi i64 [ 0, %114 ], [ %155, %123 ]
  %160 = icmp eq i64 %119, 0
  br i1 %160, label %176, label %161

161:                                              ; preds = %158
  %162 = getelementptr inbounds i8, i8* %110, i64 %159
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = getelementptr inbounds i8, i8* %162, i64 4
  %166 = bitcast i8* %165 to <4 x i8>*
  %167 = load <4 x i8>, <4 x i8>* %166, align 1
  %168 = icmp ne <4 x i8> %164, zeroinitializer
  %169 = icmp ne <4 x i8> %167, zeroinitializer
  %170 = zext <4 x i1> %168 to <4 x i32>
  %171 = zext <4 x i1> %169 to <4 x i32>
  %172 = getelementptr inbounds i32, i32* %4, i64 %159
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %170, <4 x i32>* %173, align 4
  %174 = getelementptr inbounds i32, i32* %172, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %171, <4 x i32>* %175, align 4
  br label %176

176:                                              ; preds = %158, %161
  %177 = icmp eq i64 %115, %106
  br i1 %177, label %178, label %112

178:                                              ; preds = %179, %176
  tail call void @_ZdlPv(i8* nonnull %110) #9
  br label %279

179:                                              ; preds = %112, %179
  %180 = phi i64 [ %186, %179 ], [ %113, %112 ]
  %181 = getelementptr inbounds i8, i8* %110, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = icmp ne i8 %182, 0
  %184 = zext i1 %183 to i32
  %185 = getelementptr inbounds i32, i32* %4, i64 %180
  store i32 %184, i32* %185, align 4
  %186 = add nuw nsw i64 %180, 1
  %187 = icmp eq i64 %186, %106
  br i1 %187, label %178, label %179, !llvm.loop !16

188:                                              ; preds = %5
  %189 = zext i32 %3 to i64
  %190 = icmp eq i32 %3, 0
  br i1 %190, label %191, label %192

191:                                              ; preds = %188
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* null) #8
  br label %279

192:                                              ; preds = %188
  %193 = shl nuw nsw i64 %189, 2
  %194 = tail call i8* @_Znwm(i64 %193) #9
  %195 = bitcast i8* %194 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %194, i8 0, i64 %193, i1 false)
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* nonnull %195) #8
  br label %197

196:                                              ; preds = %219
  tail call void @_ZdlPv(i8* nonnull %194) #9
  br label %279

197:                                              ; preds = %219, %192
  %198 = phi i64 [ 0, %192 ], [ %222, %219 ]
  %199 = getelementptr inbounds float, float* %195, i64 %198
  %200 = load float, float* %199, align 4
  switch i32 %2, label %212 [
    i32 2928, label %201
    i32 3106, label %201
    i32 2931, label %201
    i32 32773, label %201
    i32 3010, label %201
    i32 2816, label %201
  ]

201:                                              ; preds = %197, %197, %197, %197, %197, %197
  %202 = fpext float %200 to double
  %203 = fmul double %202, 0x41EFFFFFFFE00000
  %204 = fadd double %203, -1.000000e+00
  %205 = fmul double %204, 5.000000e-01
  %206 = fptosi double %205 to i64
  %207 = icmp slt i64 %206, 2147483647
  br i1 %207, label %208, label %219

208:                                              ; preds = %201
  %209 = icmp sgt i64 %206, -2147483648
  %210 = select i1 %209, i64 %206, i64 -2147483648
  %211 = trunc i64 %210 to i32
  br label %219

212:                                              ; preds = %197
  %213 = tail call float @llvm.round.f32(float %200) #8
  %214 = fcmp ult float %213, 0x41E0000000000000
  br i1 %214, label %215, label %219

215:                                              ; preds = %212
  %216 = fcmp ole float %213, 0xC1E0000000000000
  %217 = select i1 %216, float 0xC1E0000000000000, float %213
  %218 = fptosi float %217 to i32
  br label %219

219:                                              ; preds = %201, %208, %212, %215
  %220 = phi i32 [ %211, %208 ], [ 2147483647, %201 ], [ %218, %215 ], [ 2147483647, %212 ]
  %221 = getelementptr inbounds i32, i32* %4, i64 %198
  store i32 %220, i32* %221, align 4
  %222 = add nuw nsw i64 %198, 1
  %223 = icmp eq i64 %222, %189
  br i1 %223, label %196, label %197

224:                                              ; preds = %5
  %225 = zext i32 %3 to i64
  %226 = icmp eq i32 %3, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* null) #8
  br label %279

228:                                              ; preds = %224
  %229 = shl nuw nsw i64 %225, 3
  %230 = tail call i8* @_Znwm(i64 %229) #9
  %231 = bitcast i8* %230 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 0, i64 %229, i1 false)
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* nonnull %231) #8
  %232 = and i64 %225, 1
  %233 = icmp eq i32 %3, 1
  br i1 %233, label %236, label %234

234:                                              ; preds = %228
  %235 = sub nsw i64 %225, %232
  br label %249

236:                                              ; preds = %249, %228
  %237 = phi i64 [ 0, %228 ], [ %269, %249 ]
  %238 = icmp eq i64 %232, 0
  br i1 %238, label %248, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds i64, i64* %231, i64 %237
  %241 = load i64, i64* %240, align 8
  %242 = icmp sgt i64 %241, -2147483648
  %243 = select i1 %242, i64 %241, i64 -2147483648
  %244 = icmp slt i64 %243, 2147483647
  %245 = select i1 %244, i64 %243, i64 2147483647
  %246 = trunc i64 %245 to i32
  %247 = getelementptr inbounds i32, i32* %4, i64 %237
  store i32 %246, i32* %247, align 4
  br label %248

248:                                              ; preds = %236, %239
  tail call void @_ZdlPv(i8* nonnull %230) #9
  br label %279

249:                                              ; preds = %249, %234
  %250 = phi i64 [ 0, %234 ], [ %269, %249 ]
  %251 = phi i64 [ %235, %234 ], [ %270, %249 ]
  %252 = getelementptr inbounds i64, i64* %231, i64 %250
  %253 = load i64, i64* %252, align 8
  %254 = icmp sgt i64 %253, -2147483648
  %255 = select i1 %254, i64 %253, i64 -2147483648
  %256 = icmp slt i64 %255, 2147483647
  %257 = select i1 %256, i64 %255, i64 2147483647
  %258 = trunc i64 %257 to i32
  %259 = getelementptr inbounds i32, i32* %4, i64 %250
  store i32 %258, i32* %259, align 4
  %260 = or i64 %250, 1
  %261 = getelementptr inbounds i64, i64* %231, i64 %260
  %262 = load i64, i64* %261, align 8
  %263 = icmp sgt i64 %262, -2147483648
  %264 = select i1 %263, i64 %262, i64 -2147483648
  %265 = icmp slt i64 %264, 2147483647
  %266 = select i1 %265, i64 %264, i64 2147483647
  %267 = trunc i64 %266 to i32
  %268 = getelementptr inbounds i32, i32* %4, i64 %260
  store i32 %267, i32* %268, align 4
  %269 = add nuw nsw i64 %250, 2
  %270 = add i64 %251, -2
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %236, label %249

272:                                              ; preds = %5
  %273 = tail call zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32 2) #8
  br i1 %273, label %274, label %279

274:                                              ; preds = %272
  %275 = bitcast %"class.gl::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %275) #8
  call void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"* nonnull %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_, i64 0, i64 0), i32 224, i32 2) #8
  %276 = getelementptr inbounds %"class.gl::LogMessage", %"class.gl::LogMessage"* %6, i64 0, i32 4
  %277 = bitcast %"class.std::__1::basic_ostringstream"* %276 to %"class.std::__1::basic_ostream"*
  %278 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %277, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i64 51) #8
  call void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %275) #8
  br label %279

279:                                              ; preds = %227, %191, %108, %10, %274, %272, %248, %196, %178, %97
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl15CastStateValuesIjEEvPKNS_7ContextEjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.gl::LogMessage", align 8
  switch i32 %1, label %259 [
    i32 5124, label %7
    i32 35670, label %92
    i32 5126, label %175
    i32 27326, label %213
  ]

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* null) #8
  br label %266

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* nonnull %14) #8
  %15 = icmp ult i32 %3, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %80, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %80 ]
  br label %83

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %62, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %59, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %60, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = icmp sgt <4 x i32> %32, zeroinitializer
  %37 = icmp sgt <4 x i32> %35, zeroinitializer
  %38 = select <4 x i1> %36, <4 x i32> %32, <4 x i32> zeroinitializer
  %39 = select <4 x i1> %37, <4 x i32> %35, <4 x i32> zeroinitializer
  %40 = getelementptr inbounds i32, i32* %4, i64 %28
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %41, align 4
  %42 = getelementptr inbounds i32, i32* %40, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %43, align 4
  %44 = or i64 %28, 8
  %45 = getelementptr inbounds i32, i32* %14, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = icmp sgt <4 x i32> %47, zeroinitializer
  %52 = icmp sgt <4 x i32> %50, zeroinitializer
  %53 = select <4 x i1> %51, <4 x i32> %47, <4 x i32> zeroinitializer
  %54 = select <4 x i1> %52, <4 x i32> %50, <4 x i32> zeroinitializer
  %55 = getelementptr inbounds i32, i32* %4, i64 %44
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 4
  %57 = getelementptr inbounds i32, i32* %55, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %58, align 4
  %59 = add i64 %28, 16
  %60 = add i64 %29, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %27, !llvm.loop !17

62:                                               ; preds = %27, %18
  %63 = phi i64 [ 0, %18 ], [ %59, %27 ]
  %64 = icmp eq i64 %23, 0
  br i1 %64, label %80, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %14, i64 %63
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = icmp sgt <4 x i32> %68, zeroinitializer
  %73 = icmp sgt <4 x i32> %71, zeroinitializer
  %74 = select <4 x i1> %72, <4 x i32> %68, <4 x i32> zeroinitializer
  %75 = select <4 x i1> %73, <4 x i32> %71, <4 x i32> zeroinitializer
  %76 = getelementptr inbounds i32, i32* %4, i64 %63
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4
  %78 = getelementptr inbounds i32, i32* %76, i64 4
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %79, align 4
  br label %80

80:                                               ; preds = %62, %65
  %81 = icmp eq i64 %19, %8
  br i1 %81, label %82, label %16

82:                                               ; preds = %83, %80
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %266

83:                                               ; preds = %16, %83
  %84 = phi i64 [ %90, %83 ], [ %17, %16 ]
  %85 = getelementptr inbounds i32, i32* %14, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = icmp sgt i32 %86, 0
  %88 = select i1 %87, i32 %86, i32 0
  %89 = getelementptr inbounds i32, i32* %4, i64 %84
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %84, 1
  %91 = icmp eq i64 %90, %8
  br i1 %91, label %82, label %83, !llvm.loop !18

92:                                               ; preds = %5
  %93 = zext i32 %3 to i64
  %94 = icmp eq i32 %3, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* null) #8
  br label %266

96:                                               ; preds = %92
  %97 = tail call i8* @_Znwm(i64 %93) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %97, i8 0, i64 %93, i1 false)
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* nonnull %97) #8
  %98 = icmp ult i32 %3, 8
  br i1 %98, label %99, label %101

99:                                               ; preds = %163, %96
  %100 = phi i64 [ 0, %96 ], [ %102, %163 ]
  br label %166

101:                                              ; preds = %96
  %102 = and i64 %93, 4294967288
  %103 = add nsw i64 %102, -8
  %104 = lshr exact i64 %103, 3
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %145, label %108

108:                                              ; preds = %101
  %109 = sub nuw nsw i64 %105, %106
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %142, %110 ]
  %112 = phi i64 [ %109, %108 ], [ %143, %110 ]
  %113 = getelementptr inbounds i8, i8* %97, i64 %111
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = getelementptr inbounds i8, i8* %113, i64 4
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = icmp ne <4 x i8> %115, zeroinitializer
  %120 = icmp ne <4 x i8> %118, zeroinitializer
  %121 = zext <4 x i1> %119 to <4 x i32>
  %122 = zext <4 x i1> %120 to <4 x i32>
  %123 = getelementptr inbounds i32, i32* %4, i64 %111
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %124, align 4
  %125 = getelementptr inbounds i32, i32* %123, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %126, align 4
  %127 = or i64 %111, 8
  %128 = getelementptr inbounds i8, i8* %97, i64 %127
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 4
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = icmp ne <4 x i8> %130, zeroinitializer
  %135 = icmp ne <4 x i8> %133, zeroinitializer
  %136 = zext <4 x i1> %134 to <4 x i32>
  %137 = zext <4 x i1> %135 to <4 x i32>
  %138 = getelementptr inbounds i32, i32* %4, i64 %127
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %139, align 4
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %141, align 4
  %142 = add i64 %111, 16
  %143 = add i64 %112, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %110, !llvm.loop !19

145:                                              ; preds = %110, %101
  %146 = phi i64 [ 0, %101 ], [ %142, %110 ]
  %147 = icmp eq i64 %106, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds i8, i8* %97, i64 %146
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 4
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = icmp ne <4 x i8> %151, zeroinitializer
  %156 = icmp ne <4 x i8> %154, zeroinitializer
  %157 = zext <4 x i1> %155 to <4 x i32>
  %158 = zext <4 x i1> %156 to <4 x i32>
  %159 = getelementptr inbounds i32, i32* %4, i64 %146
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %160, align 4
  %161 = getelementptr inbounds i32, i32* %159, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %162, align 4
  br label %163

163:                                              ; preds = %145, %148
  %164 = icmp eq i64 %102, %93
  br i1 %164, label %165, label %99

165:                                              ; preds = %166, %163
  tail call void @_ZdlPv(i8* nonnull %97) #9
  br label %266

166:                                              ; preds = %99, %166
  %167 = phi i64 [ %173, %166 ], [ %100, %99 ]
  %168 = getelementptr inbounds i8, i8* %97, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = icmp ne i8 %169, 0
  %171 = zext i1 %170 to i32
  %172 = getelementptr inbounds i32, i32* %4, i64 %167
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %167, 1
  %174 = icmp eq i64 %173, %93
  br i1 %174, label %165, label %166, !llvm.loop !20

175:                                              ; preds = %5
  %176 = zext i32 %3 to i64
  %177 = icmp eq i32 %3, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* null) #8
  br label %266

179:                                              ; preds = %175
  %180 = shl nuw nsw i64 %176, 2
  %181 = tail call i8* @_Znwm(i64 %180) #9
  %182 = bitcast i8* %181 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %181, i8 0, i64 %180, i1 false)
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* nonnull %182) #8
  br label %184

183:                                              ; preds = %208
  tail call void @_ZdlPv(i8* nonnull %181) #9
  br label %266

184:                                              ; preds = %208, %179
  %185 = phi i64 [ 0, %179 ], [ %211, %208 ]
  %186 = getelementptr inbounds float, float* %182, i64 %185
  %187 = load float, float* %186, align 4
  switch i32 %2, label %200 [
    i32 2928, label %188
    i32 3106, label %188
    i32 2931, label %188
    i32 32773, label %188
    i32 3010, label %188
    i32 2816, label %188
  ]

188:                                              ; preds = %184, %184, %184, %184, %184, %184
  %189 = fpext float %187 to double
  %190 = fmul double %189, 0x41EFFFFFFFE00000
  %191 = fadd double %190, -1.000000e+00
  %192 = fmul double %191, 5.000000e-01
  %193 = fptosi double %192 to i64
  %194 = icmp slt i64 %193, 4294967295
  br i1 %194, label %195, label %208

195:                                              ; preds = %188
  %196 = icmp sgt i64 %193, 0
  %197 = sext i1 %196 to i32
  %198 = trunc i64 %193 to i32
  %199 = select i1 %196, i32 %198, i32 %197
  br label %208

200:                                              ; preds = %184
  %201 = tail call float @llvm.round.f32(float %187) #8
  %202 = fcmp ult float %201, 0x41F0000000000000
  br i1 %202, label %203, label %208

203:                                              ; preds = %200
  %204 = fcmp ugt float %201, 0.000000e+00
  %205 = sext i1 %204 to i32
  %206 = fptoui float %201 to i32
  %207 = select i1 %204, i32 %206, i32 %205
  br label %208

208:                                              ; preds = %188, %195, %200, %203
  %209 = phi i32 [ %199, %195 ], [ -1, %188 ], [ %207, %203 ], [ -1, %200 ]
  %210 = getelementptr inbounds i32, i32* %4, i64 %185
  store i32 %209, i32* %210, align 4
  %211 = add nuw nsw i64 %185, 1
  %212 = icmp eq i64 %211, %176
  br i1 %212, label %183, label %184

213:                                              ; preds = %5
  %214 = zext i32 %3 to i64
  %215 = icmp eq i32 %3, 0
  br i1 %215, label %216, label %217

216:                                              ; preds = %213
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* null) #8
  br label %266

217:                                              ; preds = %213
  %218 = shl nuw nsw i64 %214, 3
  %219 = tail call i8* @_Znwm(i64 %218) #9
  %220 = bitcast i8* %219 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %219, i8 0, i64 %218, i1 false)
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* nonnull %220) #8
  %221 = and i64 %214, 1
  %222 = icmp eq i32 %3, 1
  br i1 %222, label %225, label %223

223:                                              ; preds = %217
  %224 = sub nsw i64 %214, %221
  br label %241

225:                                              ; preds = %272, %217
  %226 = phi i64 [ 0, %217 ], [ %275, %272 ]
  %227 = icmp eq i64 %221, 0
  br i1 %227, label %240, label %228

228:                                              ; preds = %225
  %229 = getelementptr inbounds i64, i64* %220, i64 %226
  %230 = load i64, i64* %229, align 8
  %231 = icmp slt i64 %230, 4294967295
  br i1 %231, label %232, label %237

232:                                              ; preds = %228
  %233 = icmp sgt i64 %230, 0
  %234 = sext i1 %233 to i32
  %235 = trunc i64 %230 to i32
  %236 = select i1 %233, i32 %235, i32 %234
  br label %237

237:                                              ; preds = %232, %228
  %238 = phi i32 [ %236, %232 ], [ -1, %228 ]
  %239 = getelementptr inbounds i32, i32* %4, i64 %226
  store i32 %238, i32* %239, align 4
  br label %240

240:                                              ; preds = %225, %237
  tail call void @_ZdlPv(i8* nonnull %219) #9
  br label %266

241:                                              ; preds = %272, %223
  %242 = phi i64 [ 0, %223 ], [ %275, %272 ]
  %243 = phi i64 [ %224, %223 ], [ %276, %272 ]
  %244 = getelementptr inbounds i64, i64* %220, i64 %242
  %245 = load i64, i64* %244, align 8
  %246 = icmp slt i64 %245, 4294967295
  br i1 %246, label %247, label %252

247:                                              ; preds = %241
  %248 = icmp sgt i64 %245, 0
  %249 = sext i1 %248 to i32
  %250 = trunc i64 %245 to i32
  %251 = select i1 %248, i32 %250, i32 %249
  br label %252

252:                                              ; preds = %241, %247
  %253 = phi i32 [ %251, %247 ], [ -1, %241 ]
  %254 = getelementptr inbounds i32, i32* %4, i64 %242
  store i32 %253, i32* %254, align 4
  %255 = or i64 %242, 1
  %256 = getelementptr inbounds i64, i64* %220, i64 %255
  %257 = load i64, i64* %256, align 8
  %258 = icmp slt i64 %257, 4294967295
  br i1 %258, label %267, label %272

259:                                              ; preds = %5
  %260 = tail call zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32 2) #8
  br i1 %260, label %261, label %266

261:                                              ; preds = %259
  %262 = bitcast %"class.gl::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %262) #8
  call void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"* nonnull %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_, i64 0, i64 0), i32 224, i32 2) #8
  %263 = getelementptr inbounds %"class.gl::LogMessage", %"class.gl::LogMessage"* %6, i64 0, i32 4
  %264 = bitcast %"class.std::__1::basic_ostringstream"* %263 to %"class.std::__1::basic_ostream"*
  %265 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %264, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i64 51) #8
  call void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %262) #8
  br label %266

266:                                              ; preds = %216, %178, %95, %10, %261, %259, %240, %183, %165, %82
  ret void

267:                                              ; preds = %252
  %268 = icmp sgt i64 %257, 0
  %269 = sext i1 %268 to i32
  %270 = trunc i64 %257 to i32
  %271 = select i1 %268, i32 %270, i32 %269
  br label %272

272:                                              ; preds = %267, %252
  %273 = phi i32 [ %271, %267 ], [ -1, %252 ]
  %274 = getelementptr inbounds i32, i32* %4, i64 %255
  store i32 %273, i32* %274, align 4
  %275 = add nuw nsw i64 %242, 2
  %276 = add i64 %243, -2
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %225, label %241
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl15CastStateValuesIfEEvPKNS_7ContextEjjjPT_(%"class.gl::Context"*, i32, i32, i32, float*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.gl::LogMessage", align 8
  switch i32 %1, label %320 [
    i32 5124, label %7
    i32 35670, label %85
    i32 5126, label %168
    i32 27326, label %268
  ]

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* null) #8
  br label %327

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* nonnull %14) #8
  %15 = icmp ult i32 %3, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %74, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %74 ]
  br label %77

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %58, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %55, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %56, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = sitofp <4 x i32> %32 to <4 x float>
  %37 = sitofp <4 x i32> %35 to <4 x float>
  %38 = getelementptr inbounds float, float* %4, i64 %28
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4
  %40 = getelementptr inbounds float, float* %38, i64 4
  %41 = bitcast float* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4
  %42 = or i64 %28, 8
  %43 = getelementptr inbounds i32, i32* %14, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = sitofp <4 x i32> %45 to <4 x float>
  %50 = sitofp <4 x i32> %48 to <4 x float>
  %51 = getelementptr inbounds float, float* %4, i64 %42
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> %49, <4 x float>* %52, align 4
  %53 = getelementptr inbounds float, float* %51, i64 4
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %50, <4 x float>* %54, align 4
  %55 = add i64 %28, 16
  %56 = add i64 %29, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %27, !llvm.loop !21

58:                                               ; preds = %27, %18
  %59 = phi i64 [ 0, %18 ], [ %55, %27 ]
  %60 = icmp eq i64 %23, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = getelementptr inbounds i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = sitofp <4 x i32> %64 to <4 x float>
  %69 = sitofp <4 x i32> %67 to <4 x float>
  %70 = getelementptr inbounds float, float* %4, i64 %59
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %68, <4 x float>* %71, align 4
  %72 = getelementptr inbounds float, float* %70, i64 4
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %69, <4 x float>* %73, align 4
  br label %74

74:                                               ; preds = %58, %61
  %75 = icmp eq i64 %19, %8
  br i1 %75, label %76, label %16

76:                                               ; preds = %77, %74
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %327

77:                                               ; preds = %16, %77
  %78 = phi i64 [ %83, %77 ], [ %17, %16 ]
  %79 = getelementptr inbounds i32, i32* %14, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = sitofp i32 %80 to float
  %82 = getelementptr inbounds float, float* %4, i64 %78
  store float %81, float* %82, align 4
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, %8
  br i1 %84, label %76, label %77, !llvm.loop !22

85:                                               ; preds = %5
  %86 = zext i32 %3 to i64
  %87 = icmp eq i32 %3, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* null) #8
  br label %327

89:                                               ; preds = %85
  %90 = tail call i8* @_Znwm(i64 %86) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %90, i8 0, i64 %86, i1 false)
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* nonnull %90) #8
  %91 = icmp ult i32 %3, 8
  br i1 %91, label %92, label %94

92:                                               ; preds = %156, %89
  %93 = phi i64 [ 0, %89 ], [ %95, %156 ]
  br label %159

94:                                               ; preds = %89
  %95 = and i64 %86, 4294967288
  %96 = add nsw i64 %95, -8
  %97 = lshr exact i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 1
  %100 = icmp eq i64 %96, 0
  br i1 %100, label %138, label %101

101:                                              ; preds = %94
  %102 = sub nuw nsw i64 %98, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %135, %103 ]
  %105 = phi i64 [ %102, %101 ], [ %136, %103 ]
  %106 = getelementptr inbounds i8, i8* %90, i64 %104
  %107 = bitcast i8* %106 to <4 x i8>*
  %108 = load <4 x i8>, <4 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 4
  %110 = bitcast i8* %109 to <4 x i8>*
  %111 = load <4 x i8>, <4 x i8>* %110, align 1
  %112 = icmp eq <4 x i8> %108, zeroinitializer
  %113 = icmp eq <4 x i8> %111, zeroinitializer
  %114 = select <4 x i1> %112, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %115 = select <4 x i1> %113, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %116 = getelementptr inbounds float, float* %4, i64 %104
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4
  %118 = getelementptr inbounds float, float* %116, i64 4
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %115, <4 x float>* %119, align 4
  %120 = or i64 %104, 8
  %121 = getelementptr inbounds i8, i8* %90, i64 %120
  %122 = bitcast i8* %121 to <4 x i8>*
  %123 = load <4 x i8>, <4 x i8>* %122, align 1
  %124 = getelementptr inbounds i8, i8* %121, i64 4
  %125 = bitcast i8* %124 to <4 x i8>*
  %126 = load <4 x i8>, <4 x i8>* %125, align 1
  %127 = icmp eq <4 x i8> %123, zeroinitializer
  %128 = icmp eq <4 x i8> %126, zeroinitializer
  %129 = select <4 x i1> %127, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = select <4 x i1> %128, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %131 = getelementptr inbounds float, float* %4, i64 %120
  %132 = bitcast float* %131 to <4 x float>*
  store <4 x float> %129, <4 x float>* %132, align 4
  %133 = getelementptr inbounds float, float* %131, i64 4
  %134 = bitcast float* %133 to <4 x float>*
  store <4 x float> %130, <4 x float>* %134, align 4
  %135 = add i64 %104, 16
  %136 = add i64 %105, -2
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %103, !llvm.loop !23

138:                                              ; preds = %103, %94
  %139 = phi i64 [ 0, %94 ], [ %135, %103 ]
  %140 = icmp eq i64 %99, 0
  br i1 %140, label %156, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds i8, i8* %90, i64 %139
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 4
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = icmp eq <4 x i8> %144, zeroinitializer
  %149 = icmp eq <4 x i8> %147, zeroinitializer
  %150 = select <4 x i1> %148, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %151 = select <4 x i1> %149, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %152 = getelementptr inbounds float, float* %4, i64 %139
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %150, <4 x float>* %153, align 4
  %154 = getelementptr inbounds float, float* %152, i64 4
  %155 = bitcast float* %154 to <4 x float>*
  store <4 x float> %151, <4 x float>* %155, align 4
  br label %156

156:                                              ; preds = %138, %141
  %157 = icmp eq i64 %95, %86
  br i1 %157, label %158, label %92

158:                                              ; preds = %159, %156
  tail call void @_ZdlPv(i8* nonnull %90) #9
  br label %327

159:                                              ; preds = %92, %159
  %160 = phi i64 [ %166, %159 ], [ %93, %92 ]
  %161 = getelementptr inbounds i8, i8* %90, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 0
  %164 = select i1 %163, float 0.000000e+00, float 1.000000e+00
  %165 = getelementptr inbounds float, float* %4, i64 %160
  store float %164, float* %165, align 4
  %166 = add nuw nsw i64 %160, 1
  %167 = icmp eq i64 %166, %86
  br i1 %167, label %158, label %159, !llvm.loop !24

168:                                              ; preds = %5
  %169 = zext i32 %3 to i64
  %170 = icmp eq i32 %3, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* null) #8
  br label %327

172:                                              ; preds = %168
  %173 = shl nuw nsw i64 %169, 2
  %174 = tail call i8* @_Znwm(i64 %173) #9
  %175 = bitcast i8* %174 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %174, i8 0, i64 %173, i1 false)
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* nonnull %175) #8
  %176 = icmp ult i32 %3, 8
  br i1 %176, label %177, label %179

177:                                              ; preds = %256, %172
  %178 = phi i64 [ 0, %172 ], [ %180, %256 ]
  br label %259

179:                                              ; preds = %172
  %180 = and i64 %169, 4294967288
  %181 = add nsw i64 %180, -8
  %182 = lshr exact i64 %181, 3
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 3
  %185 = icmp ult i64 %181, 24
  br i1 %185, label %237, label %186

186:                                              ; preds = %179
  %187 = sub nsw i64 %183, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %234, %188 ]
  %190 = phi i64 [ %187, %186 ], [ %235, %188 ]
  %191 = getelementptr inbounds float, float* %175, i64 %189
  %192 = bitcast float* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4
  %194 = getelementptr inbounds float, float* %191, i64 4
  %195 = bitcast float* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = getelementptr inbounds float, float* %4, i64 %189
  %198 = bitcast float* %197 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %198, align 4
  %199 = getelementptr inbounds float, float* %197, i64 4
  %200 = bitcast float* %199 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %200, align 4
  %201 = or i64 %189, 8
  %202 = getelementptr inbounds float, float* %175, i64 %201
  %203 = bitcast float* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4
  %205 = getelementptr inbounds float, float* %202, i64 4
  %206 = bitcast float* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4
  %208 = getelementptr inbounds float, float* %4, i64 %201
  %209 = bitcast float* %208 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %209, align 4
  %210 = getelementptr inbounds float, float* %208, i64 4
  %211 = bitcast float* %210 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %211, align 4
  %212 = or i64 %189, 16
  %213 = getelementptr inbounds float, float* %175, i64 %212
  %214 = bitcast float* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4
  %216 = getelementptr inbounds float, float* %213, i64 4
  %217 = bitcast float* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4
  %219 = getelementptr inbounds float, float* %4, i64 %212
  %220 = bitcast float* %219 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %220, align 4
  %221 = getelementptr inbounds float, float* %219, i64 4
  %222 = bitcast float* %221 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %222, align 4
  %223 = or i64 %189, 24
  %224 = getelementptr inbounds float, float* %175, i64 %223
  %225 = bitcast float* %224 to <4 x i32>*
  %226 = load <4 x i32>, <4 x i32>* %225, align 4
  %227 = getelementptr inbounds float, float* %224, i64 4
  %228 = bitcast float* %227 to <4 x i32>*
  %229 = load <4 x i32>, <4 x i32>* %228, align 4
  %230 = getelementptr inbounds float, float* %4, i64 %223
  %231 = bitcast float* %230 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %231, align 4
  %232 = getelementptr inbounds float, float* %230, i64 4
  %233 = bitcast float* %232 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %233, align 4
  %234 = add i64 %189, 32
  %235 = add i64 %190, -4
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %188, !llvm.loop !25

237:                                              ; preds = %188, %179
  %238 = phi i64 [ 0, %179 ], [ %234, %188 ]
  %239 = icmp eq i64 %184, 0
  br i1 %239, label %256, label %240

240:                                              ; preds = %237, %240
  %241 = phi i64 [ %253, %240 ], [ %238, %237 ]
  %242 = phi i64 [ %254, %240 ], [ %184, %237 ]
  %243 = getelementptr inbounds float, float* %175, i64 %241
  %244 = bitcast float* %243 to <4 x i32>*
  %245 = load <4 x i32>, <4 x i32>* %244, align 4
  %246 = getelementptr inbounds float, float* %243, i64 4
  %247 = bitcast float* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 4
  %249 = getelementptr inbounds float, float* %4, i64 %241
  %250 = bitcast float* %249 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %250, align 4
  %251 = getelementptr inbounds float, float* %249, i64 4
  %252 = bitcast float* %251 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %252, align 4
  %253 = add i64 %241, 8
  %254 = add i64 %242, -1
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %240, !llvm.loop !26

256:                                              ; preds = %240, %237
  %257 = icmp eq i64 %180, %169
  br i1 %257, label %258, label %177

258:                                              ; preds = %259, %256
  tail call void @_ZdlPv(i8* nonnull %174) #9
  br label %327

259:                                              ; preds = %177, %259
  %260 = phi i64 [ %266, %259 ], [ %178, %177 ]
  %261 = getelementptr inbounds float, float* %175, i64 %260
  %262 = bitcast float* %261 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds float, float* %4, i64 %260
  %265 = bitcast float* %264 to i32*
  store i32 %263, i32* %265, align 4
  %266 = add nuw nsw i64 %260, 1
  %267 = icmp eq i64 %266, %169
  br i1 %267, label %258, label %259, !llvm.loop !27

268:                                              ; preds = %5
  %269 = zext i32 %3 to i64
  %270 = icmp eq i32 %3, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %268
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* null) #8
  br label %327

272:                                              ; preds = %268
  %273 = shl nuw nsw i64 %269, 3
  %274 = tail call i8* @_Znwm(i64 %273) #9
  %275 = bitcast i8* %274 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %274, i8 0, i64 %273, i1 false)
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* nonnull %275) #8
  %276 = add nsw i64 %269, -1
  %277 = and i64 %269, 3
  %278 = icmp ult i64 %276, 3
  br i1 %278, label %281, label %279

279:                                              ; preds = %272
  %280 = sub nsw i64 %269, %277
  br label %295

281:                                              ; preds = %295, %272
  %282 = phi i64 [ 0, %272 ], [ %317, %295 ]
  %283 = icmp eq i64 %277, 0
  br i1 %283, label %294, label %284

284:                                              ; preds = %281, %284
  %285 = phi i64 [ %291, %284 ], [ %282, %281 ]
  %286 = phi i64 [ %292, %284 ], [ %277, %281 ]
  %287 = getelementptr inbounds i64, i64* %275, i64 %285
  %288 = load i64, i64* %287, align 8
  %289 = sitofp i64 %288 to float
  %290 = getelementptr inbounds float, float* %4, i64 %285
  store float %289, float* %290, align 4
  %291 = add nuw nsw i64 %285, 1
  %292 = add i64 %286, -1
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %284, !llvm.loop !28

294:                                              ; preds = %284, %281
  tail call void @_ZdlPv(i8* nonnull %274) #9
  br label %327

295:                                              ; preds = %295, %279
  %296 = phi i64 [ 0, %279 ], [ %317, %295 ]
  %297 = phi i64 [ %280, %279 ], [ %318, %295 ]
  %298 = getelementptr inbounds i64, i64* %275, i64 %296
  %299 = load i64, i64* %298, align 8
  %300 = sitofp i64 %299 to float
  %301 = getelementptr inbounds float, float* %4, i64 %296
  store float %300, float* %301, align 4
  %302 = or i64 %296, 1
  %303 = getelementptr inbounds i64, i64* %275, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = sitofp i64 %304 to float
  %306 = getelementptr inbounds float, float* %4, i64 %302
  store float %305, float* %306, align 4
  %307 = or i64 %296, 2
  %308 = getelementptr inbounds i64, i64* %275, i64 %307
  %309 = load i64, i64* %308, align 8
  %310 = sitofp i64 %309 to float
  %311 = getelementptr inbounds float, float* %4, i64 %307
  store float %310, float* %311, align 4
  %312 = or i64 %296, 3
  %313 = getelementptr inbounds i64, i64* %275, i64 %312
  %314 = load i64, i64* %313, align 8
  %315 = sitofp i64 %314 to float
  %316 = getelementptr inbounds float, float* %4, i64 %312
  store float %315, float* %316, align 4
  %317 = add nuw nsw i64 %296, 4
  %318 = add i64 %297, -4
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %281, label %295

320:                                              ; preds = %5
  %321 = tail call zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32 2) #8
  br i1 %321, label %322, label %327

322:                                              ; preds = %320
  %323 = bitcast %"class.gl::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %323) #8
  call void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"* nonnull %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_, i64 0, i64 0), i32 224, i32 2) #8
  %324 = getelementptr inbounds %"class.gl::LogMessage", %"class.gl::LogMessage"* %6, i64 0, i32 4
  %325 = bitcast %"class.std::__1::basic_ostringstream"* %324 to %"class.std::__1::basic_ostream"*
  %326 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %325, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i64 51) #8
  call void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %323) #8
  br label %327

327:                                              ; preds = %271, %171, %88, %10, %322, %320, %294, %258, %158, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl15CastStateValuesIlEEvPKNS_7ContextEjjjPT_(%"class.gl::Context"*, i32, i32, i32, i64*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.gl::LogMessage", align 8
  switch i32 %1, label %269 [
    i32 5124, label %7
    i32 35670, label %85
    i32 5126, label %140
    i32 27326, label %171
  ]

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* null) #8
  br label %276

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZNK2gl7Context15getIntegervImplEjPi(%"class.gl::Context"* %0, i32 %2, i32* nonnull %14) #8
  %15 = icmp ult i32 %3, 4
  br i1 %15, label %16, label %18

16:                                               ; preds = %74, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %74 ]
  br label %77

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967292
  %20 = add nsw i64 %19, -4
  %21 = lshr exact i64 %20, 2
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %58, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %55, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %56, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <2 x i32>*
  %32 = load <2 x i32>, <2 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 2
  %34 = bitcast i32* %33 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 4
  %36 = sext <2 x i32> %32 to <2 x i64>
  %37 = sext <2 x i32> %35 to <2 x i64>
  %38 = getelementptr inbounds i64, i64* %4, i64 %28
  %39 = bitcast i64* %38 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %39, align 8
  %40 = getelementptr inbounds i64, i64* %38, i64 2
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %41, align 8
  %42 = or i64 %28, 4
  %43 = getelementptr inbounds i32, i32* %14, i64 %42
  %44 = bitcast i32* %43 to <2 x i32>*
  %45 = load <2 x i32>, <2 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 2
  %47 = bitcast i32* %46 to <2 x i32>*
  %48 = load <2 x i32>, <2 x i32>* %47, align 4
  %49 = sext <2 x i32> %45 to <2 x i64>
  %50 = sext <2 x i32> %48 to <2 x i64>
  %51 = getelementptr inbounds i64, i64* %4, i64 %42
  %52 = bitcast i64* %51 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %52, align 8
  %53 = getelementptr inbounds i64, i64* %51, i64 2
  %54 = bitcast i64* %53 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %54, align 8
  %55 = add i64 %28, 8
  %56 = add i64 %29, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %27, !llvm.loop !29

58:                                               ; preds = %27, %18
  %59 = phi i64 [ 0, %18 ], [ %55, %27 ]
  %60 = icmp eq i64 %23, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = bitcast i32* %62 to <2 x i32>*
  %64 = load <2 x i32>, <2 x i32>* %63, align 4
  %65 = getelementptr inbounds i32, i32* %62, i64 2
  %66 = bitcast i32* %65 to <2 x i32>*
  %67 = load <2 x i32>, <2 x i32>* %66, align 4
  %68 = sext <2 x i32> %64 to <2 x i64>
  %69 = sext <2 x i32> %67 to <2 x i64>
  %70 = getelementptr inbounds i64, i64* %4, i64 %59
  %71 = bitcast i64* %70 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %71, align 8
  %72 = getelementptr inbounds i64, i64* %70, i64 2
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %73, align 8
  br label %74

74:                                               ; preds = %58, %61
  %75 = icmp eq i64 %19, %8
  br i1 %75, label %76, label %16

76:                                               ; preds = %77, %74
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %276

77:                                               ; preds = %16, %77
  %78 = phi i64 [ %83, %77 ], [ %17, %16 ]
  %79 = getelementptr inbounds i32, i32* %14, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i64, i64* %4, i64 %78
  store i64 %81, i64* %82, align 8
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, %8
  br i1 %84, label %76, label %77, !llvm.loop !30

85:                                               ; preds = %5
  %86 = zext i32 %3 to i64
  %87 = icmp eq i32 %3, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* null) #8
  br label %276

89:                                               ; preds = %85
  %90 = tail call i8* @_Znwm(i64 %86) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %90, i8 0, i64 %86, i1 false)
  tail call void @_ZNK2gl7Context15getBooleanvImplEjPh(%"class.gl::Context"* %0, i32 %2, i8* nonnull %90) #8
  %91 = add nsw i64 %86, -1
  %92 = and i64 %86, 3
  %93 = icmp ult i64 %91, 3
  br i1 %93, label %96, label %94

94:                                               ; preds = %89
  %95 = sub nsw i64 %86, %92
  br label %111

96:                                               ; preds = %111, %89
  %97 = phi i64 [ 0, %89 ], [ %137, %111 ]
  %98 = icmp eq i64 %92, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %96, %99
  %100 = phi i64 [ %107, %99 ], [ %97, %96 ]
  %101 = phi i64 [ %108, %99 ], [ %92, %96 ]
  %102 = getelementptr inbounds i8, i8* %90, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = icmp ne i8 %103, 0
  %105 = zext i1 %104 to i64
  %106 = getelementptr inbounds i64, i64* %4, i64 %100
  store i64 %105, i64* %106, align 8
  %107 = add nuw nsw i64 %100, 1
  %108 = add i64 %101, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %99, !llvm.loop !31

110:                                              ; preds = %99, %96
  tail call void @_ZdlPv(i8* nonnull %90) #9
  br label %276

111:                                              ; preds = %111, %94
  %112 = phi i64 [ 0, %94 ], [ %137, %111 ]
  %113 = phi i64 [ %95, %94 ], [ %138, %111 ]
  %114 = getelementptr inbounds i8, i8* %90, i64 %112
  %115 = load i8, i8* %114, align 1
  %116 = icmp ne i8 %115, 0
  %117 = zext i1 %116 to i64
  %118 = getelementptr inbounds i64, i64* %4, i64 %112
  store i64 %117, i64* %118, align 8
  %119 = or i64 %112, 1
  %120 = getelementptr inbounds i8, i8* %90, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = icmp ne i8 %121, 0
  %123 = zext i1 %122 to i64
  %124 = getelementptr inbounds i64, i64* %4, i64 %119
  store i64 %123, i64* %124, align 8
  %125 = or i64 %112, 2
  %126 = getelementptr inbounds i8, i8* %90, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = icmp ne i8 %127, 0
  %129 = zext i1 %128 to i64
  %130 = getelementptr inbounds i64, i64* %4, i64 %125
  store i64 %129, i64* %130, align 8
  %131 = or i64 %112, 3
  %132 = getelementptr inbounds i8, i8* %90, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = icmp ne i8 %133, 0
  %135 = zext i1 %134 to i64
  %136 = getelementptr inbounds i64, i64* %4, i64 %131
  store i64 %135, i64* %136, align 8
  %137 = add nuw nsw i64 %112, 4
  %138 = add i64 %113, -4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %96, label %111

140:                                              ; preds = %5
  %141 = zext i32 %3 to i64
  %142 = icmp eq i32 %3, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* null) #8
  br label %276

144:                                              ; preds = %140
  %145 = shl nuw nsw i64 %141, 2
  %146 = tail call i8* @_Znwm(i64 %145) #9
  %147 = bitcast i8* %146 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %146, i8 0, i64 %145, i1 false)
  tail call void @_ZNK2gl7Context13getFloatvImplEjPf(%"class.gl::Context"* %0, i32 %2, float* nonnull %147) #8
  br label %149

148:                                              ; preds = %166
  tail call void @_ZdlPv(i8* nonnull %146) #9
  br label %276

149:                                              ; preds = %166, %144
  %150 = phi i64 [ 0, %144 ], [ %169, %166 ]
  %151 = getelementptr inbounds float, float* %147, i64 %150
  %152 = load float, float* %151, align 4
  switch i32 %2, label %159 [
    i32 2928, label %153
    i32 3106, label %153
    i32 2931, label %153
    i32 32773, label %153
    i32 3010, label %153
    i32 2816, label %153
  ]

153:                                              ; preds = %149, %149, %149, %149, %149, %149
  %154 = fpext float %152 to double
  %155 = fmul double %154, 0x41EFFFFFFFE00000
  %156 = fadd double %155, -1.000000e+00
  %157 = fmul double %156, 5.000000e-01
  %158 = fptosi double %157 to i64
  br label %166

159:                                              ; preds = %149
  %160 = tail call float @llvm.round.f32(float %152) #8
  %161 = fcmp ult float %160, 0x43E0000000000000
  br i1 %161, label %162, label %166

162:                                              ; preds = %159
  %163 = fcmp ole float %160, 0xC3E0000000000000
  %164 = select i1 %163, float 0xC3E0000000000000, float %160
  %165 = fptosi float %164 to i64
  br label %166

166:                                              ; preds = %153, %159, %162
  %167 = phi i64 [ %158, %153 ], [ %165, %162 ], [ 9223372036854775807, %159 ]
  %168 = getelementptr inbounds i64, i64* %4, i64 %150
  store i64 %167, i64* %168, align 8
  %169 = add nuw nsw i64 %150, 1
  %170 = icmp eq i64 %169, %141
  br i1 %170, label %148, label %149

171:                                              ; preds = %5
  %172 = zext i32 %3 to i64
  %173 = icmp eq i32 %3, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* null) #8
  br label %276

175:                                              ; preds = %171
  %176 = shl nuw nsw i64 %172, 3
  %177 = tail call i8* @_Znwm(i64 %176) #9
  %178 = bitcast i8* %177 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 0, i64 %176, i1 false)
  tail call void @_ZNK2gl7Context17getInteger64vImplEjPl(%"class.gl::Context"* %0, i32 %2, i64* nonnull %178) #8
  %179 = icmp ult i32 %3, 4
  br i1 %179, label %180, label %182

180:                                              ; preds = %259, %175
  %181 = phi i64 [ 0, %175 ], [ %183, %259 ]
  br label %262

182:                                              ; preds = %175
  %183 = and i64 %172, 4294967292
  %184 = add nsw i64 %183, -4
  %185 = lshr exact i64 %184, 2
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 3
  %188 = icmp ult i64 %184, 12
  br i1 %188, label %240, label %189

189:                                              ; preds = %182
  %190 = sub nsw i64 %186, %187
  br label %191

191:                                              ; preds = %191, %189
  %192 = phi i64 [ 0, %189 ], [ %237, %191 ]
  %193 = phi i64 [ %190, %189 ], [ %238, %191 ]
  %194 = getelementptr inbounds i64, i64* %178, i64 %192
  %195 = bitcast i64* %194 to <2 x i64>*
  %196 = load <2 x i64>, <2 x i64>* %195, align 8
  %197 = getelementptr inbounds i64, i64* %194, i64 2
  %198 = bitcast i64* %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8
  %200 = getelementptr inbounds i64, i64* %4, i64 %192
  %201 = bitcast i64* %200 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %201, align 8
  %202 = getelementptr inbounds i64, i64* %200, i64 2
  %203 = bitcast i64* %202 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %203, align 8
  %204 = or i64 %192, 4
  %205 = getelementptr inbounds i64, i64* %178, i64 %204
  %206 = bitcast i64* %205 to <2 x i64>*
  %207 = load <2 x i64>, <2 x i64>* %206, align 8
  %208 = getelementptr inbounds i64, i64* %205, i64 2
  %209 = bitcast i64* %208 to <2 x i64>*
  %210 = load <2 x i64>, <2 x i64>* %209, align 8
  %211 = getelementptr inbounds i64, i64* %4, i64 %204
  %212 = bitcast i64* %211 to <2 x i64>*
  store <2 x i64> %207, <2 x i64>* %212, align 8
  %213 = getelementptr inbounds i64, i64* %211, i64 2
  %214 = bitcast i64* %213 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %214, align 8
  %215 = or i64 %192, 8
  %216 = getelementptr inbounds i64, i64* %178, i64 %215
  %217 = bitcast i64* %216 to <2 x i64>*
  %218 = load <2 x i64>, <2 x i64>* %217, align 8
  %219 = getelementptr inbounds i64, i64* %216, i64 2
  %220 = bitcast i64* %219 to <2 x i64>*
  %221 = load <2 x i64>, <2 x i64>* %220, align 8
  %222 = getelementptr inbounds i64, i64* %4, i64 %215
  %223 = bitcast i64* %222 to <2 x i64>*
  store <2 x i64> %218, <2 x i64>* %223, align 8
  %224 = getelementptr inbounds i64, i64* %222, i64 2
  %225 = bitcast i64* %224 to <2 x i64>*
  store <2 x i64> %221, <2 x i64>* %225, align 8
  %226 = or i64 %192, 12
  %227 = getelementptr inbounds i64, i64* %178, i64 %226
  %228 = bitcast i64* %227 to <2 x i64>*
  %229 = load <2 x i64>, <2 x i64>* %228, align 8
  %230 = getelementptr inbounds i64, i64* %227, i64 2
  %231 = bitcast i64* %230 to <2 x i64>*
  %232 = load <2 x i64>, <2 x i64>* %231, align 8
  %233 = getelementptr inbounds i64, i64* %4, i64 %226
  %234 = bitcast i64* %233 to <2 x i64>*
  store <2 x i64> %229, <2 x i64>* %234, align 8
  %235 = getelementptr inbounds i64, i64* %233, i64 2
  %236 = bitcast i64* %235 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %236, align 8
  %237 = add i64 %192, 16
  %238 = add i64 %193, -4
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %191, !llvm.loop !32

240:                                              ; preds = %191, %182
  %241 = phi i64 [ 0, %182 ], [ %237, %191 ]
  %242 = icmp eq i64 %187, 0
  br i1 %242, label %259, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %256, %243 ], [ %241, %240 ]
  %245 = phi i64 [ %257, %243 ], [ %187, %240 ]
  %246 = getelementptr inbounds i64, i64* %178, i64 %244
  %247 = bitcast i64* %246 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8
  %249 = getelementptr inbounds i64, i64* %246, i64 2
  %250 = bitcast i64* %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 8
  %252 = getelementptr inbounds i64, i64* %4, i64 %244
  %253 = bitcast i64* %252 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %253, align 8
  %254 = getelementptr inbounds i64, i64* %252, i64 2
  %255 = bitcast i64* %254 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %255, align 8
  %256 = add i64 %244, 4
  %257 = add i64 %245, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %243, !llvm.loop !33

259:                                              ; preds = %243, %240
  %260 = icmp eq i64 %183, %172
  br i1 %260, label %261, label %180

261:                                              ; preds = %262, %259
  tail call void @_ZdlPv(i8* nonnull %177) #9
  br label %276

262:                                              ; preds = %180, %262
  %263 = phi i64 [ %267, %262 ], [ %181, %180 ]
  %264 = getelementptr inbounds i64, i64* %178, i64 %263
  %265 = load i64, i64* %264, align 8
  %266 = getelementptr inbounds i64, i64* %4, i64 %263
  store i64 %265, i64* %266, align 8
  %267 = add nuw nsw i64 %263, 1
  %268 = icmp eq i64 %267, %172
  br i1 %268, label %261, label %262, !llvm.loop !34

269:                                              ; preds = %5
  %270 = tail call zeroext i1 @_ZN2gl4priv30ShouldCreatePlatformLogMessageEi(i32 2) #8
  br i1 %270, label %271, label %276

271:                                              ; preds = %269
  %272 = bitcast %"class.gl::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %272) #8
  call void @_ZN2gl10LogMessageC1EPKcS2_ii(%"class.gl::LogMessage"* nonnull %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__._ZN2gl15CastStateValuesIhEEvPKNS_7ContextEjjjPT_, i64 0, i64 0), i32 224, i32 2) #8
  %273 = getelementptr inbounds %"class.gl::LogMessage", %"class.gl::LogMessage"* %6, i64 0, i32 4
  %274 = bitcast %"class.std::__1::basic_ostringstream"* %273 to %"class.std::__1::basic_ostream"*
  %275 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %274, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i64 51) #8
  call void @_ZN2gl10LogMessageD1Ev(%"class.gl::LogMessage"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %272) #8
  br label %276

276:                                              ; preds = %174, %143, %88, %10, %271, %269, %261, %148, %110, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl22CastIndexedStateValuesIhEEvPNS_7ContextEjjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32, i8*) local_unnamed_addr #0 comdat {
  switch i32 %1, label %232 [
    i32 5124, label %7
    i32 35670, label %92
    i32 27326, label %175
  ]

7:                                                ; preds = %6
  %8 = zext i32 %4 to i64
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* null) #8
  br label %232

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* nonnull %14) #8
  %15 = icmp ult i32 %4, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %80, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %80 ]
  br label %83

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %62, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %59, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %60, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = icmp ne <4 x i32> %32, zeroinitializer
  %37 = icmp ne <4 x i32> %35, zeroinitializer
  %38 = zext <4 x i1> %36 to <4 x i8>
  %39 = zext <4 x i1> %37 to <4 x i8>
  %40 = getelementptr inbounds i8, i8* %5, i64 %28
  %41 = bitcast i8* %40 to <4 x i8>*
  store <4 x i8> %38, <4 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 4
  %43 = bitcast i8* %42 to <4 x i8>*
  store <4 x i8> %39, <4 x i8>* %43, align 1
  %44 = or i64 %28, 8
  %45 = getelementptr inbounds i32, i32* %14, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = icmp ne <4 x i32> %47, zeroinitializer
  %52 = icmp ne <4 x i32> %50, zeroinitializer
  %53 = zext <4 x i1> %51 to <4 x i8>
  %54 = zext <4 x i1> %52 to <4 x i8>
  %55 = getelementptr inbounds i8, i8* %5, i64 %44
  %56 = bitcast i8* %55 to <4 x i8>*
  store <4 x i8> %53, <4 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 4
  %58 = bitcast i8* %57 to <4 x i8>*
  store <4 x i8> %54, <4 x i8>* %58, align 1
  %59 = add i64 %28, 16
  %60 = add i64 %29, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %27, !llvm.loop !35

62:                                               ; preds = %27, %18
  %63 = phi i64 [ 0, %18 ], [ %59, %27 ]
  %64 = icmp eq i64 %23, 0
  br i1 %64, label %80, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %14, i64 %63
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = icmp ne <4 x i32> %68, zeroinitializer
  %73 = icmp ne <4 x i32> %71, zeroinitializer
  %74 = zext <4 x i1> %72 to <4 x i8>
  %75 = zext <4 x i1> %73 to <4 x i8>
  %76 = getelementptr inbounds i8, i8* %5, i64 %63
  %77 = bitcast i8* %76 to <4 x i8>*
  store <4 x i8> %74, <4 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 4
  %79 = bitcast i8* %78 to <4 x i8>*
  store <4 x i8> %75, <4 x i8>* %79, align 1
  br label %80

80:                                               ; preds = %62, %65
  %81 = icmp eq i64 %19, %8
  br i1 %81, label %82, label %16

82:                                               ; preds = %83, %80
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %232

83:                                               ; preds = %16, %83
  %84 = phi i64 [ %90, %83 ], [ %17, %16 ]
  %85 = getelementptr inbounds i32, i32* %14, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = icmp ne i32 %86, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds i8, i8* %5, i64 %84
  store i8 %88, i8* %89, align 1
  %90 = add nuw nsw i64 %84, 1
  %91 = icmp eq i64 %90, %8
  br i1 %91, label %82, label %83, !llvm.loop !36

92:                                               ; preds = %6
  %93 = zext i32 %4 to i64
  %94 = icmp eq i32 %4, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* null) #8
  br label %232

96:                                               ; preds = %92
  %97 = tail call i8* @_Znwm(i64 %93) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %97, i8 0, i64 %93, i1 false)
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* nonnull %97) #8
  %98 = icmp ult i32 %4, 32
  br i1 %98, label %99, label %101

99:                                               ; preds = %163, %96
  %100 = phi i64 [ 0, %96 ], [ %102, %163 ]
  br label %166

101:                                              ; preds = %96
  %102 = and i64 %93, 4294967264
  %103 = add nsw i64 %102, -32
  %104 = lshr exact i64 %103, 5
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %145, label %108

108:                                              ; preds = %101
  %109 = sub nuw nsw i64 %105, %106
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %142, %110 ]
  %112 = phi i64 [ %109, %108 ], [ %143, %110 ]
  %113 = getelementptr inbounds i8, i8* %97, i64 %111
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = getelementptr inbounds i8, i8* %113, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = icmp ne <16 x i8> %115, zeroinitializer
  %120 = icmp ne <16 x i8> %118, zeroinitializer
  %121 = zext <16 x i1> %119 to <16 x i8>
  %122 = zext <16 x i1> %120 to <16 x i8>
  %123 = getelementptr inbounds i8, i8* %5, i64 %111
  %124 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %123, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1
  %127 = or i64 %111, 32
  %128 = getelementptr inbounds i8, i8* %97, i64 %127
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1
  %134 = icmp ne <16 x i8> %130, zeroinitializer
  %135 = icmp ne <16 x i8> %133, zeroinitializer
  %136 = zext <16 x i1> %134 to <16 x i8>
  %137 = zext <16 x i1> %135 to <16 x i8>
  %138 = getelementptr inbounds i8, i8* %5, i64 %127
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %141, align 1
  %142 = add i64 %111, 64
  %143 = add i64 %112, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %110, !llvm.loop !37

145:                                              ; preds = %110, %101
  %146 = phi i64 [ 0, %101 ], [ %142, %110 ]
  %147 = icmp eq i64 %106, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds i8, i8* %97, i64 %146
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 16
  %153 = bitcast i8* %152 to <16 x i8>*
  %154 = load <16 x i8>, <16 x i8>* %153, align 1
  %155 = icmp ne <16 x i8> %151, zeroinitializer
  %156 = icmp ne <16 x i8> %154, zeroinitializer
  %157 = zext <16 x i1> %155 to <16 x i8>
  %158 = zext <16 x i1> %156 to <16 x i8>
  %159 = getelementptr inbounds i8, i8* %5, i64 %146
  %160 = bitcast i8* %159 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %160, align 1
  %161 = getelementptr inbounds i8, i8* %159, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %162, align 1
  br label %163

163:                                              ; preds = %145, %148
  %164 = icmp eq i64 %102, %93
  br i1 %164, label %165, label %99

165:                                              ; preds = %166, %163
  tail call void @_ZdlPv(i8* nonnull %97) #9
  br label %232

166:                                              ; preds = %99, %166
  %167 = phi i64 [ %173, %166 ], [ %100, %99 ]
  %168 = getelementptr inbounds i8, i8* %97, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = icmp ne i8 %169, 0
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds i8, i8* %5, i64 %167
  store i8 %171, i8* %172, align 1
  %173 = add nuw nsw i64 %167, 1
  %174 = icmp eq i64 %173, %93
  br i1 %174, label %165, label %166, !llvm.loop !38

175:                                              ; preds = %6
  %176 = zext i32 %4 to i64
  %177 = icmp eq i32 %4, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* null) #8
  br label %232

179:                                              ; preds = %175
  %180 = shl nuw nsw i64 %176, 3
  %181 = tail call i8* @_Znwm(i64 %180) #9
  %182 = bitcast i8* %181 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 0, i64 %180, i1 false)
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* nonnull %182) #8
  %183 = add nsw i64 %176, -1
  %184 = and i64 %176, 3
  %185 = icmp ult i64 %183, 3
  br i1 %185, label %188, label %186

186:                                              ; preds = %179
  %187 = sub nsw i64 %176, %184
  br label %203

188:                                              ; preds = %203, %179
  %189 = phi i64 [ 0, %179 ], [ %229, %203 ]
  %190 = icmp eq i64 %184, 0
  br i1 %190, label %202, label %191

191:                                              ; preds = %188, %191
  %192 = phi i64 [ %199, %191 ], [ %189, %188 ]
  %193 = phi i64 [ %200, %191 ], [ %184, %188 ]
  %194 = getelementptr inbounds i64, i64* %182, i64 %192
  %195 = load i64, i64* %194, align 8
  %196 = icmp ne i64 %195, 0
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds i8, i8* %5, i64 %192
  store i8 %197, i8* %198, align 1
  %199 = add nuw nsw i64 %192, 1
  %200 = add i64 %193, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %191, !llvm.loop !39

202:                                              ; preds = %191, %188
  tail call void @_ZdlPv(i8* nonnull %181) #9
  br label %232

203:                                              ; preds = %203, %186
  %204 = phi i64 [ 0, %186 ], [ %229, %203 ]
  %205 = phi i64 [ %187, %186 ], [ %230, %203 ]
  %206 = getelementptr inbounds i64, i64* %182, i64 %204
  %207 = load i64, i64* %206, align 8
  %208 = icmp ne i64 %207, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds i8, i8* %5, i64 %204
  store i8 %209, i8* %210, align 1
  %211 = or i64 %204, 1
  %212 = getelementptr inbounds i64, i64* %182, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = icmp ne i64 %213, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds i8, i8* %5, i64 %211
  store i8 %215, i8* %216, align 1
  %217 = or i64 %204, 2
  %218 = getelementptr inbounds i64, i64* %182, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = icmp ne i64 %219, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds i8, i8* %5, i64 %217
  store i8 %221, i8* %222, align 1
  %223 = or i64 %204, 3
  %224 = getelementptr inbounds i64, i64* %182, i64 %223
  %225 = load i64, i64* %224, align 8
  %226 = icmp ne i64 %225, 0
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds i8, i8* %5, i64 %223
  store i8 %227, i8* %228, align 1
  %229 = add nuw nsw i64 %204, 4
  %230 = add i64 %205, -4
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %188, label %203

232:                                              ; preds = %178, %95, %10, %202, %165, %82, %6
  ret void
}

declare void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"*, i32, i32, i32*) local_unnamed_addr #2

declare void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"*, i32, i32, i8*) local_unnamed_addr #2

declare void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"*, i32, i32, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl22CastIndexedStateValuesIiEEvPNS_7ContextEjjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32, i32*) local_unnamed_addr #0 comdat {
  switch i32 %1, label %236 [
    i32 5124, label %7
    i32 35670, label %105
    i32 27326, label %188
  ]

7:                                                ; preds = %6
  %8 = zext i32 %4 to i64
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* null) #8
  br label %236

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* nonnull %14) #8
  %15 = icmp ult i32 %4, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %95, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %95 ]
  br label %98

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp ult i64 %20, 24
  br i1 %24, label %76, label %25

25:                                               ; preds = %18
  %26 = sub nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %73, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %74, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = getelementptr inbounds i32, i32* %5, i64 %28
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %37, align 4
  %38 = getelementptr inbounds i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %39, align 4
  %40 = or i64 %28, 8
  %41 = getelementptr inbounds i32, i32* %14, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr inbounds i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds i32, i32* %5, i64 %40
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %48, align 4
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %50, align 4
  %51 = or i64 %28, 16
  %52 = getelementptr inbounds i32, i32* %14, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = getelementptr inbounds i32, i32* %5, i64 %51
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %59, align 4
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %61, align 4
  %62 = or i64 %28, 24
  %63 = getelementptr inbounds i32, i32* %14, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %5, i64 %62
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %70, align 4
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %72, align 4
  %73 = add i64 %28, 32
  %74 = add i64 %29, -4
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %27, !llvm.loop !40

76:                                               ; preds = %27, %18
  %77 = phi i64 [ 0, %18 ], [ %73, %27 ]
  %78 = icmp eq i64 %23, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %76, %79
  %80 = phi i64 [ %92, %79 ], [ %77, %76 ]
  %81 = phi i64 [ %93, %79 ], [ %23, %76 ]
  %82 = getelementptr inbounds i32, i32* %14, i64 %80
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = getelementptr inbounds i32, i32* %82, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4
  %88 = getelementptr inbounds i32, i32* %5, i64 %80
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %89, align 4
  %90 = getelementptr inbounds i32, i32* %88, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %91, align 4
  %92 = add i64 %80, 8
  %93 = add i64 %81, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !41

95:                                               ; preds = %79, %76
  %96 = icmp eq i64 %19, %8
  br i1 %96, label %97, label %16

97:                                               ; preds = %98, %95
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %236

98:                                               ; preds = %16, %98
  %99 = phi i64 [ %103, %98 ], [ %17, %16 ]
  %100 = getelementptr inbounds i32, i32* %14, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds i32, i32* %5, i64 %99
  store i32 %101, i32* %102, align 4
  %103 = add nuw nsw i64 %99, 1
  %104 = icmp eq i64 %103, %8
  br i1 %104, label %97, label %98, !llvm.loop !42

105:                                              ; preds = %6
  %106 = zext i32 %4 to i64
  %107 = icmp eq i32 %4, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* null) #8
  br label %236

109:                                              ; preds = %105
  %110 = tail call i8* @_Znwm(i64 %106) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %110, i8 0, i64 %106, i1 false)
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* nonnull %110) #8
  %111 = icmp ult i32 %4, 8
  br i1 %111, label %112, label %114

112:                                              ; preds = %176, %109
  %113 = phi i64 [ 0, %109 ], [ %115, %176 ]
  br label %179

114:                                              ; preds = %109
  %115 = and i64 %106, 4294967288
  %116 = add nsw i64 %115, -8
  %117 = lshr exact i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 1
  %120 = icmp eq i64 %116, 0
  br i1 %120, label %158, label %121

121:                                              ; preds = %114
  %122 = sub nuw nsw i64 %118, %119
  br label %123

123:                                              ; preds = %123, %121
  %124 = phi i64 [ 0, %121 ], [ %155, %123 ]
  %125 = phi i64 [ %122, %121 ], [ %156, %123 ]
  %126 = getelementptr inbounds i8, i8* %110, i64 %124
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = icmp ne <4 x i8> %128, zeroinitializer
  %133 = icmp ne <4 x i8> %131, zeroinitializer
  %134 = zext <4 x i1> %132 to <4 x i32>
  %135 = zext <4 x i1> %133 to <4 x i32>
  %136 = getelementptr inbounds i32, i32* %5, i64 %124
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %137, align 4
  %138 = getelementptr inbounds i32, i32* %136, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %139, align 4
  %140 = or i64 %124, 8
  %141 = getelementptr inbounds i8, i8* %110, i64 %140
  %142 = bitcast i8* %141 to <4 x i8>*
  %143 = load <4 x i8>, <4 x i8>* %142, align 1
  %144 = getelementptr inbounds i8, i8* %141, i64 4
  %145 = bitcast i8* %144 to <4 x i8>*
  %146 = load <4 x i8>, <4 x i8>* %145, align 1
  %147 = icmp ne <4 x i8> %143, zeroinitializer
  %148 = icmp ne <4 x i8> %146, zeroinitializer
  %149 = zext <4 x i1> %147 to <4 x i32>
  %150 = zext <4 x i1> %148 to <4 x i32>
  %151 = getelementptr inbounds i32, i32* %5, i64 %140
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %152, align 4
  %153 = getelementptr inbounds i32, i32* %151, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %154, align 4
  %155 = add i64 %124, 16
  %156 = add i64 %125, -2
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %123, !llvm.loop !43

158:                                              ; preds = %123, %114
  %159 = phi i64 [ 0, %114 ], [ %155, %123 ]
  %160 = icmp eq i64 %119, 0
  br i1 %160, label %176, label %161

161:                                              ; preds = %158
  %162 = getelementptr inbounds i8, i8* %110, i64 %159
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = getelementptr inbounds i8, i8* %162, i64 4
  %166 = bitcast i8* %165 to <4 x i8>*
  %167 = load <4 x i8>, <4 x i8>* %166, align 1
  %168 = icmp ne <4 x i8> %164, zeroinitializer
  %169 = icmp ne <4 x i8> %167, zeroinitializer
  %170 = zext <4 x i1> %168 to <4 x i32>
  %171 = zext <4 x i1> %169 to <4 x i32>
  %172 = getelementptr inbounds i32, i32* %5, i64 %159
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %170, <4 x i32>* %173, align 4
  %174 = getelementptr inbounds i32, i32* %172, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %171, <4 x i32>* %175, align 4
  br label %176

176:                                              ; preds = %158, %161
  %177 = icmp eq i64 %115, %106
  br i1 %177, label %178, label %112

178:                                              ; preds = %179, %176
  tail call void @_ZdlPv(i8* nonnull %110) #9
  br label %236

179:                                              ; preds = %112, %179
  %180 = phi i64 [ %186, %179 ], [ %113, %112 ]
  %181 = getelementptr inbounds i8, i8* %110, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = icmp ne i8 %182, 0
  %184 = zext i1 %183 to i32
  %185 = getelementptr inbounds i32, i32* %5, i64 %180
  store i32 %184, i32* %185, align 4
  %186 = add nuw nsw i64 %180, 1
  %187 = icmp eq i64 %186, %106
  br i1 %187, label %178, label %179, !llvm.loop !44

188:                                              ; preds = %6
  %189 = zext i32 %4 to i64
  %190 = icmp eq i32 %4, 0
  br i1 %190, label %191, label %192

191:                                              ; preds = %188
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* null) #8
  br label %236

192:                                              ; preds = %188
  %193 = shl nuw nsw i64 %189, 3
  %194 = tail call i8* @_Znwm(i64 %193) #9
  %195 = bitcast i8* %194 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %194, i8 0, i64 %193, i1 false)
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* nonnull %195) #8
  %196 = and i64 %189, 1
  %197 = icmp eq i32 %4, 1
  br i1 %197, label %200, label %198

198:                                              ; preds = %192
  %199 = sub nsw i64 %189, %196
  br label %213

200:                                              ; preds = %213, %192
  %201 = phi i64 [ 0, %192 ], [ %233, %213 ]
  %202 = icmp eq i64 %196, 0
  br i1 %202, label %212, label %203

203:                                              ; preds = %200
  %204 = getelementptr inbounds i64, i64* %195, i64 %201
  %205 = load i64, i64* %204, align 8
  %206 = icmp sgt i64 %205, -2147483648
  %207 = select i1 %206, i64 %205, i64 -2147483648
  %208 = icmp slt i64 %207, 2147483647
  %209 = select i1 %208, i64 %207, i64 2147483647
  %210 = trunc i64 %209 to i32
  %211 = getelementptr inbounds i32, i32* %5, i64 %201
  store i32 %210, i32* %211, align 4
  br label %212

212:                                              ; preds = %200, %203
  tail call void @_ZdlPv(i8* nonnull %194) #9
  br label %236

213:                                              ; preds = %213, %198
  %214 = phi i64 [ 0, %198 ], [ %233, %213 ]
  %215 = phi i64 [ %199, %198 ], [ %234, %213 ]
  %216 = getelementptr inbounds i64, i64* %195, i64 %214
  %217 = load i64, i64* %216, align 8
  %218 = icmp sgt i64 %217, -2147483648
  %219 = select i1 %218, i64 %217, i64 -2147483648
  %220 = icmp slt i64 %219, 2147483647
  %221 = select i1 %220, i64 %219, i64 2147483647
  %222 = trunc i64 %221 to i32
  %223 = getelementptr inbounds i32, i32* %5, i64 %214
  store i32 %222, i32* %223, align 4
  %224 = or i64 %214, 1
  %225 = getelementptr inbounds i64, i64* %195, i64 %224
  %226 = load i64, i64* %225, align 8
  %227 = icmp sgt i64 %226, -2147483648
  %228 = select i1 %227, i64 %226, i64 -2147483648
  %229 = icmp slt i64 %228, 2147483647
  %230 = select i1 %229, i64 %228, i64 2147483647
  %231 = trunc i64 %230 to i32
  %232 = getelementptr inbounds i32, i32* %5, i64 %224
  store i32 %231, i32* %232, align 4
  %233 = add nuw nsw i64 %214, 2
  %234 = add i64 %215, -2
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %200, label %213

236:                                              ; preds = %191, %108, %10, %212, %178, %97, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl22CastIndexedStateValuesIjEEvPNS_7ContextEjjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32, i32*) local_unnamed_addr #0 comdat {
  switch i32 %1, label %221 [
    i32 5124, label %7
    i32 35670, label %92
    i32 27326, label %175
  ]

7:                                                ; preds = %6
  %8 = zext i32 %4 to i64
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* null) #8
  br label %221

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* nonnull %14) #8
  %15 = icmp ult i32 %4, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %80, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %80 ]
  br label %83

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %62, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %59, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %60, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = icmp sgt <4 x i32> %32, zeroinitializer
  %37 = icmp sgt <4 x i32> %35, zeroinitializer
  %38 = select <4 x i1> %36, <4 x i32> %32, <4 x i32> zeroinitializer
  %39 = select <4 x i1> %37, <4 x i32> %35, <4 x i32> zeroinitializer
  %40 = getelementptr inbounds i32, i32* %5, i64 %28
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %41, align 4
  %42 = getelementptr inbounds i32, i32* %40, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %43, align 4
  %44 = or i64 %28, 8
  %45 = getelementptr inbounds i32, i32* %14, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = icmp sgt <4 x i32> %47, zeroinitializer
  %52 = icmp sgt <4 x i32> %50, zeroinitializer
  %53 = select <4 x i1> %51, <4 x i32> %47, <4 x i32> zeroinitializer
  %54 = select <4 x i1> %52, <4 x i32> %50, <4 x i32> zeroinitializer
  %55 = getelementptr inbounds i32, i32* %5, i64 %44
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 4
  %57 = getelementptr inbounds i32, i32* %55, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %58, align 4
  %59 = add i64 %28, 16
  %60 = add i64 %29, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %27, !llvm.loop !45

62:                                               ; preds = %27, %18
  %63 = phi i64 [ 0, %18 ], [ %59, %27 ]
  %64 = icmp eq i64 %23, 0
  br i1 %64, label %80, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %14, i64 %63
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = icmp sgt <4 x i32> %68, zeroinitializer
  %73 = icmp sgt <4 x i32> %71, zeroinitializer
  %74 = select <4 x i1> %72, <4 x i32> %68, <4 x i32> zeroinitializer
  %75 = select <4 x i1> %73, <4 x i32> %71, <4 x i32> zeroinitializer
  %76 = getelementptr inbounds i32, i32* %5, i64 %63
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4
  %78 = getelementptr inbounds i32, i32* %76, i64 4
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %79, align 4
  br label %80

80:                                               ; preds = %62, %65
  %81 = icmp eq i64 %19, %8
  br i1 %81, label %82, label %16

82:                                               ; preds = %83, %80
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %221

83:                                               ; preds = %16, %83
  %84 = phi i64 [ %90, %83 ], [ %17, %16 ]
  %85 = getelementptr inbounds i32, i32* %14, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = icmp sgt i32 %86, 0
  %88 = select i1 %87, i32 %86, i32 0
  %89 = getelementptr inbounds i32, i32* %5, i64 %84
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %84, 1
  %91 = icmp eq i64 %90, %8
  br i1 %91, label %82, label %83, !llvm.loop !46

92:                                               ; preds = %6
  %93 = zext i32 %4 to i64
  %94 = icmp eq i32 %4, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* null) #8
  br label %221

96:                                               ; preds = %92
  %97 = tail call i8* @_Znwm(i64 %93) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %97, i8 0, i64 %93, i1 false)
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* nonnull %97) #8
  %98 = icmp ult i32 %4, 8
  br i1 %98, label %99, label %101

99:                                               ; preds = %163, %96
  %100 = phi i64 [ 0, %96 ], [ %102, %163 ]
  br label %166

101:                                              ; preds = %96
  %102 = and i64 %93, 4294967288
  %103 = add nsw i64 %102, -8
  %104 = lshr exact i64 %103, 3
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %145, label %108

108:                                              ; preds = %101
  %109 = sub nuw nsw i64 %105, %106
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %142, %110 ]
  %112 = phi i64 [ %109, %108 ], [ %143, %110 ]
  %113 = getelementptr inbounds i8, i8* %97, i64 %111
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = getelementptr inbounds i8, i8* %113, i64 4
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = icmp ne <4 x i8> %115, zeroinitializer
  %120 = icmp ne <4 x i8> %118, zeroinitializer
  %121 = zext <4 x i1> %119 to <4 x i32>
  %122 = zext <4 x i1> %120 to <4 x i32>
  %123 = getelementptr inbounds i32, i32* %5, i64 %111
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %124, align 4
  %125 = getelementptr inbounds i32, i32* %123, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %126, align 4
  %127 = or i64 %111, 8
  %128 = getelementptr inbounds i8, i8* %97, i64 %127
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 4
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = icmp ne <4 x i8> %130, zeroinitializer
  %135 = icmp ne <4 x i8> %133, zeroinitializer
  %136 = zext <4 x i1> %134 to <4 x i32>
  %137 = zext <4 x i1> %135 to <4 x i32>
  %138 = getelementptr inbounds i32, i32* %5, i64 %127
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %139, align 4
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %141, align 4
  %142 = add i64 %111, 16
  %143 = add i64 %112, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %110, !llvm.loop !47

145:                                              ; preds = %110, %101
  %146 = phi i64 [ 0, %101 ], [ %142, %110 ]
  %147 = icmp eq i64 %106, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds i8, i8* %97, i64 %146
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 4
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = icmp ne <4 x i8> %151, zeroinitializer
  %156 = icmp ne <4 x i8> %154, zeroinitializer
  %157 = zext <4 x i1> %155 to <4 x i32>
  %158 = zext <4 x i1> %156 to <4 x i32>
  %159 = getelementptr inbounds i32, i32* %5, i64 %146
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %160, align 4
  %161 = getelementptr inbounds i32, i32* %159, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %162, align 4
  br label %163

163:                                              ; preds = %145, %148
  %164 = icmp eq i64 %102, %93
  br i1 %164, label %165, label %99

165:                                              ; preds = %166, %163
  tail call void @_ZdlPv(i8* nonnull %97) #9
  br label %221

166:                                              ; preds = %99, %166
  %167 = phi i64 [ %173, %166 ], [ %100, %99 ]
  %168 = getelementptr inbounds i8, i8* %97, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = icmp ne i8 %169, 0
  %171 = zext i1 %170 to i32
  %172 = getelementptr inbounds i32, i32* %5, i64 %167
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %167, 1
  %174 = icmp eq i64 %173, %93
  br i1 %174, label %165, label %166, !llvm.loop !48

175:                                              ; preds = %6
  %176 = zext i32 %4 to i64
  %177 = icmp eq i32 %4, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* null) #8
  br label %221

179:                                              ; preds = %175
  %180 = shl nuw nsw i64 %176, 3
  %181 = tail call i8* @_Znwm(i64 %180) #9
  %182 = bitcast i8* %181 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 0, i64 %180, i1 false)
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* nonnull %182) #8
  %183 = and i64 %176, 1
  %184 = icmp eq i32 %4, 1
  br i1 %184, label %187, label %185

185:                                              ; preds = %179
  %186 = sub nsw i64 %176, %183
  br label %203

187:                                              ; preds = %227, %179
  %188 = phi i64 [ 0, %179 ], [ %230, %227 ]
  %189 = icmp eq i64 %183, 0
  br i1 %189, label %202, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds i64, i64* %182, i64 %188
  %192 = load i64, i64* %191, align 8
  %193 = icmp slt i64 %192, 4294967295
  br i1 %193, label %194, label %199

194:                                              ; preds = %190
  %195 = icmp sgt i64 %192, 0
  %196 = sext i1 %195 to i32
  %197 = trunc i64 %192 to i32
  %198 = select i1 %195, i32 %197, i32 %196
  br label %199

199:                                              ; preds = %194, %190
  %200 = phi i32 [ %198, %194 ], [ -1, %190 ]
  %201 = getelementptr inbounds i32, i32* %5, i64 %188
  store i32 %200, i32* %201, align 4
  br label %202

202:                                              ; preds = %187, %199
  tail call void @_ZdlPv(i8* nonnull %181) #9
  br label %221

203:                                              ; preds = %227, %185
  %204 = phi i64 [ 0, %185 ], [ %230, %227 ]
  %205 = phi i64 [ %186, %185 ], [ %231, %227 ]
  %206 = getelementptr inbounds i64, i64* %182, i64 %204
  %207 = load i64, i64* %206, align 8
  %208 = icmp slt i64 %207, 4294967295
  br i1 %208, label %209, label %214

209:                                              ; preds = %203
  %210 = icmp sgt i64 %207, 0
  %211 = sext i1 %210 to i32
  %212 = trunc i64 %207 to i32
  %213 = select i1 %210, i32 %212, i32 %211
  br label %214

214:                                              ; preds = %203, %209
  %215 = phi i32 [ %213, %209 ], [ -1, %203 ]
  %216 = getelementptr inbounds i32, i32* %5, i64 %204
  store i32 %215, i32* %216, align 4
  %217 = or i64 %204, 1
  %218 = getelementptr inbounds i64, i64* %182, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = icmp slt i64 %219, 4294967295
  br i1 %220, label %222, label %227

221:                                              ; preds = %178, %95, %10, %202, %165, %82, %6
  ret void

222:                                              ; preds = %214
  %223 = icmp sgt i64 %219, 0
  %224 = sext i1 %223 to i32
  %225 = trunc i64 %219 to i32
  %226 = select i1 %223, i32 %225, i32 %224
  br label %227

227:                                              ; preds = %222, %214
  %228 = phi i32 [ %226, %222 ], [ -1, %214 ]
  %229 = getelementptr inbounds i32, i32* %5, i64 %217
  store i32 %228, i32* %229, align 4
  %230 = add nuw nsw i64 %204, 2
  %231 = add i64 %205, -2
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %187, label %203
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl22CastIndexedStateValuesIfEEvPNS_7ContextEjjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32, float*) local_unnamed_addr #0 comdat {
  switch i32 %1, label %220 [
    i32 5124, label %7
    i32 35670, label %85
    i32 27326, label %168
  ]

7:                                                ; preds = %6
  %8 = zext i32 %4 to i64
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* null) #8
  br label %220

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* nonnull %14) #8
  %15 = icmp ult i32 %4, 8
  br i1 %15, label %16, label %18

16:                                               ; preds = %74, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %74 ]
  br label %77

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967288
  %20 = add nsw i64 %19, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %58, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %55, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %56, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = sitofp <4 x i32> %32 to <4 x float>
  %37 = sitofp <4 x i32> %35 to <4 x float>
  %38 = getelementptr inbounds float, float* %5, i64 %28
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4
  %40 = getelementptr inbounds float, float* %38, i64 4
  %41 = bitcast float* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4
  %42 = or i64 %28, 8
  %43 = getelementptr inbounds i32, i32* %14, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = sitofp <4 x i32> %45 to <4 x float>
  %50 = sitofp <4 x i32> %48 to <4 x float>
  %51 = getelementptr inbounds float, float* %5, i64 %42
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> %49, <4 x float>* %52, align 4
  %53 = getelementptr inbounds float, float* %51, i64 4
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %50, <4 x float>* %54, align 4
  %55 = add i64 %28, 16
  %56 = add i64 %29, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %27, !llvm.loop !49

58:                                               ; preds = %27, %18
  %59 = phi i64 [ 0, %18 ], [ %55, %27 ]
  %60 = icmp eq i64 %23, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = getelementptr inbounds i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = sitofp <4 x i32> %64 to <4 x float>
  %69 = sitofp <4 x i32> %67 to <4 x float>
  %70 = getelementptr inbounds float, float* %5, i64 %59
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %68, <4 x float>* %71, align 4
  %72 = getelementptr inbounds float, float* %70, i64 4
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %69, <4 x float>* %73, align 4
  br label %74

74:                                               ; preds = %58, %61
  %75 = icmp eq i64 %19, %8
  br i1 %75, label %76, label %16

76:                                               ; preds = %77, %74
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %220

77:                                               ; preds = %16, %77
  %78 = phi i64 [ %83, %77 ], [ %17, %16 ]
  %79 = getelementptr inbounds i32, i32* %14, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = sitofp i32 %80 to float
  %82 = getelementptr inbounds float, float* %5, i64 %78
  store float %81, float* %82, align 4
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, %8
  br i1 %84, label %76, label %77, !llvm.loop !50

85:                                               ; preds = %6
  %86 = zext i32 %4 to i64
  %87 = icmp eq i32 %4, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* null) #8
  br label %220

89:                                               ; preds = %85
  %90 = tail call i8* @_Znwm(i64 %86) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %90, i8 0, i64 %86, i1 false)
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* nonnull %90) #8
  %91 = icmp ult i32 %4, 8
  br i1 %91, label %92, label %94

92:                                               ; preds = %156, %89
  %93 = phi i64 [ 0, %89 ], [ %95, %156 ]
  br label %159

94:                                               ; preds = %89
  %95 = and i64 %86, 4294967288
  %96 = add nsw i64 %95, -8
  %97 = lshr exact i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 1
  %100 = icmp eq i64 %96, 0
  br i1 %100, label %138, label %101

101:                                              ; preds = %94
  %102 = sub nuw nsw i64 %98, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %135, %103 ]
  %105 = phi i64 [ %102, %101 ], [ %136, %103 ]
  %106 = getelementptr inbounds i8, i8* %90, i64 %104
  %107 = bitcast i8* %106 to <4 x i8>*
  %108 = load <4 x i8>, <4 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 4
  %110 = bitcast i8* %109 to <4 x i8>*
  %111 = load <4 x i8>, <4 x i8>* %110, align 1
  %112 = icmp eq <4 x i8> %108, zeroinitializer
  %113 = icmp eq <4 x i8> %111, zeroinitializer
  %114 = select <4 x i1> %112, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %115 = select <4 x i1> %113, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %116 = getelementptr inbounds float, float* %5, i64 %104
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4
  %118 = getelementptr inbounds float, float* %116, i64 4
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %115, <4 x float>* %119, align 4
  %120 = or i64 %104, 8
  %121 = getelementptr inbounds i8, i8* %90, i64 %120
  %122 = bitcast i8* %121 to <4 x i8>*
  %123 = load <4 x i8>, <4 x i8>* %122, align 1
  %124 = getelementptr inbounds i8, i8* %121, i64 4
  %125 = bitcast i8* %124 to <4 x i8>*
  %126 = load <4 x i8>, <4 x i8>* %125, align 1
  %127 = icmp eq <4 x i8> %123, zeroinitializer
  %128 = icmp eq <4 x i8> %126, zeroinitializer
  %129 = select <4 x i1> %127, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = select <4 x i1> %128, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %131 = getelementptr inbounds float, float* %5, i64 %120
  %132 = bitcast float* %131 to <4 x float>*
  store <4 x float> %129, <4 x float>* %132, align 4
  %133 = getelementptr inbounds float, float* %131, i64 4
  %134 = bitcast float* %133 to <4 x float>*
  store <4 x float> %130, <4 x float>* %134, align 4
  %135 = add i64 %104, 16
  %136 = add i64 %105, -2
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %103, !llvm.loop !51

138:                                              ; preds = %103, %94
  %139 = phi i64 [ 0, %94 ], [ %135, %103 ]
  %140 = icmp eq i64 %99, 0
  br i1 %140, label %156, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds i8, i8* %90, i64 %139
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 4
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = icmp eq <4 x i8> %144, zeroinitializer
  %149 = icmp eq <4 x i8> %147, zeroinitializer
  %150 = select <4 x i1> %148, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %151 = select <4 x i1> %149, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %152 = getelementptr inbounds float, float* %5, i64 %139
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %150, <4 x float>* %153, align 4
  %154 = getelementptr inbounds float, float* %152, i64 4
  %155 = bitcast float* %154 to <4 x float>*
  store <4 x float> %151, <4 x float>* %155, align 4
  br label %156

156:                                              ; preds = %138, %141
  %157 = icmp eq i64 %95, %86
  br i1 %157, label %158, label %92

158:                                              ; preds = %159, %156
  tail call void @_ZdlPv(i8* nonnull %90) #9
  br label %220

159:                                              ; preds = %92, %159
  %160 = phi i64 [ %166, %159 ], [ %93, %92 ]
  %161 = getelementptr inbounds i8, i8* %90, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 0
  %164 = select i1 %163, float 0.000000e+00, float 1.000000e+00
  %165 = getelementptr inbounds float, float* %5, i64 %160
  store float %164, float* %165, align 4
  %166 = add nuw nsw i64 %160, 1
  %167 = icmp eq i64 %166, %86
  br i1 %167, label %158, label %159, !llvm.loop !52

168:                                              ; preds = %6
  %169 = zext i32 %4 to i64
  %170 = icmp eq i32 %4, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* null) #8
  br label %220

172:                                              ; preds = %168
  %173 = shl nuw nsw i64 %169, 3
  %174 = tail call i8* @_Znwm(i64 %173) #9
  %175 = bitcast i8* %174 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 0, i64 %173, i1 false)
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* nonnull %175) #8
  %176 = add nsw i64 %169, -1
  %177 = and i64 %169, 3
  %178 = icmp ult i64 %176, 3
  br i1 %178, label %181, label %179

179:                                              ; preds = %172
  %180 = sub nsw i64 %169, %177
  br label %195

181:                                              ; preds = %195, %172
  %182 = phi i64 [ 0, %172 ], [ %217, %195 ]
  %183 = icmp eq i64 %177, 0
  br i1 %183, label %194, label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %191, %184 ], [ %182, %181 ]
  %186 = phi i64 [ %192, %184 ], [ %177, %181 ]
  %187 = getelementptr inbounds i64, i64* %175, i64 %185
  %188 = load i64, i64* %187, align 8
  %189 = sitofp i64 %188 to float
  %190 = getelementptr inbounds float, float* %5, i64 %185
  store float %189, float* %190, align 4
  %191 = add nuw nsw i64 %185, 1
  %192 = add i64 %186, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %184, !llvm.loop !53

194:                                              ; preds = %184, %181
  tail call void @_ZdlPv(i8* nonnull %174) #9
  br label %220

195:                                              ; preds = %195, %179
  %196 = phi i64 [ 0, %179 ], [ %217, %195 ]
  %197 = phi i64 [ %180, %179 ], [ %218, %195 ]
  %198 = getelementptr inbounds i64, i64* %175, i64 %196
  %199 = load i64, i64* %198, align 8
  %200 = sitofp i64 %199 to float
  %201 = getelementptr inbounds float, float* %5, i64 %196
  store float %200, float* %201, align 4
  %202 = or i64 %196, 1
  %203 = getelementptr inbounds i64, i64* %175, i64 %202
  %204 = load i64, i64* %203, align 8
  %205 = sitofp i64 %204 to float
  %206 = getelementptr inbounds float, float* %5, i64 %202
  store float %205, float* %206, align 4
  %207 = or i64 %196, 2
  %208 = getelementptr inbounds i64, i64* %175, i64 %207
  %209 = load i64, i64* %208, align 8
  %210 = sitofp i64 %209 to float
  %211 = getelementptr inbounds float, float* %5, i64 %207
  store float %210, float* %211, align 4
  %212 = or i64 %196, 3
  %213 = getelementptr inbounds i64, i64* %175, i64 %212
  %214 = load i64, i64* %213, align 8
  %215 = sitofp i64 %214 to float
  %216 = getelementptr inbounds float, float* %5, i64 %212
  store float %215, float* %216, align 4
  %217 = add nuw nsw i64 %196, 4
  %218 = add i64 %197, -4
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %181, label %195

220:                                              ; preds = %171, %88, %10, %194, %158, %76, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2gl22CastIndexedStateValuesIlEEvPNS_7ContextEjjjjPT_(%"class.gl::Context"*, i32, i32, i32, i32, i64*) local_unnamed_addr #0 comdat {
  switch i32 %1, label %238 [
    i32 5124, label %7
    i32 35670, label %85
    i32 27326, label %140
  ]

7:                                                ; preds = %6
  %8 = zext i32 %4 to i64
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* null) #8
  br label %238

11:                                               ; preds = %7
  %12 = shl nuw nsw i64 %8, 2
  %13 = tail call i8* @_Znwm(i64 %12) #9
  %14 = bitcast i8* %13 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  tail call void @_ZN2gl7Context13getIntegeri_vEjjPi(%"class.gl::Context"* %0, i32 %2, i32 %3, i32* nonnull %14) #8
  %15 = icmp ult i32 %4, 4
  br i1 %15, label %16, label %18

16:                                               ; preds = %74, %11
  %17 = phi i64 [ 0, %11 ], [ %19, %74 ]
  br label %77

18:                                               ; preds = %11
  %19 = and i64 %8, 4294967292
  %20 = add nsw i64 %19, -4
  %21 = lshr exact i64 %20, 2
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %58, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %55, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %56, %27 ]
  %30 = getelementptr inbounds i32, i32* %14, i64 %28
  %31 = bitcast i32* %30 to <2 x i32>*
  %32 = load <2 x i32>, <2 x i32>* %31, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 2
  %34 = bitcast i32* %33 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 4
  %36 = sext <2 x i32> %32 to <2 x i64>
  %37 = sext <2 x i32> %35 to <2 x i64>
  %38 = getelementptr inbounds i64, i64* %5, i64 %28
  %39 = bitcast i64* %38 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %39, align 8
  %40 = getelementptr inbounds i64, i64* %38, i64 2
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %41, align 8
  %42 = or i64 %28, 4
  %43 = getelementptr inbounds i32, i32* %14, i64 %42
  %44 = bitcast i32* %43 to <2 x i32>*
  %45 = load <2 x i32>, <2 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 2
  %47 = bitcast i32* %46 to <2 x i32>*
  %48 = load <2 x i32>, <2 x i32>* %47, align 4
  %49 = sext <2 x i32> %45 to <2 x i64>
  %50 = sext <2 x i32> %48 to <2 x i64>
  %51 = getelementptr inbounds i64, i64* %5, i64 %42
  %52 = bitcast i64* %51 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %52, align 8
  %53 = getelementptr inbounds i64, i64* %51, i64 2
  %54 = bitcast i64* %53 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %54, align 8
  %55 = add i64 %28, 8
  %56 = add i64 %29, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %27, !llvm.loop !54

58:                                               ; preds = %27, %18
  %59 = phi i64 [ 0, %18 ], [ %55, %27 ]
  %60 = icmp eq i64 %23, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i32, i32* %14, i64 %59
  %63 = bitcast i32* %62 to <2 x i32>*
  %64 = load <2 x i32>, <2 x i32>* %63, align 4
  %65 = getelementptr inbounds i32, i32* %62, i64 2
  %66 = bitcast i32* %65 to <2 x i32>*
  %67 = load <2 x i32>, <2 x i32>* %66, align 4
  %68 = sext <2 x i32> %64 to <2 x i64>
  %69 = sext <2 x i32> %67 to <2 x i64>
  %70 = getelementptr inbounds i64, i64* %5, i64 %59
  %71 = bitcast i64* %70 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %71, align 8
  %72 = getelementptr inbounds i64, i64* %70, i64 2
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %73, align 8
  br label %74

74:                                               ; preds = %58, %61
  %75 = icmp eq i64 %19, %8
  br i1 %75, label %76, label %16

76:                                               ; preds = %77, %74
  tail call void @_ZdlPv(i8* nonnull %13) #9
  br label %238

77:                                               ; preds = %16, %77
  %78 = phi i64 [ %83, %77 ], [ %17, %16 ]
  %79 = getelementptr inbounds i32, i32* %14, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i64, i64* %5, i64 %78
  store i64 %81, i64* %82, align 8
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, %8
  br i1 %84, label %76, label %77, !llvm.loop !55

85:                                               ; preds = %6
  %86 = zext i32 %4 to i64
  %87 = icmp eq i32 %4, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* null) #8
  br label %238

89:                                               ; preds = %85
  %90 = tail call i8* @_Znwm(i64 %86) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %90, i8 0, i64 %86, i1 false)
  tail call void @_ZN2gl7Context13getBooleani_vEjjPh(%"class.gl::Context"* %0, i32 %2, i32 %3, i8* nonnull %90) #8
  %91 = add nsw i64 %86, -1
  %92 = and i64 %86, 3
  %93 = icmp ult i64 %91, 3
  br i1 %93, label %96, label %94

94:                                               ; preds = %89
  %95 = sub nsw i64 %86, %92
  br label %111

96:                                               ; preds = %111, %89
  %97 = phi i64 [ 0, %89 ], [ %137, %111 ]
  %98 = icmp eq i64 %92, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %96, %99
  %100 = phi i64 [ %107, %99 ], [ %97, %96 ]
  %101 = phi i64 [ %108, %99 ], [ %92, %96 ]
  %102 = getelementptr inbounds i8, i8* %90, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = icmp ne i8 %103, 0
  %105 = zext i1 %104 to i64
  %106 = getelementptr inbounds i64, i64* %5, i64 %100
  store i64 %105, i64* %106, align 8
  %107 = add nuw nsw i64 %100, 1
  %108 = add i64 %101, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %99, !llvm.loop !56

110:                                              ; preds = %99, %96
  tail call void @_ZdlPv(i8* nonnull %90) #9
  br label %238

111:                                              ; preds = %111, %94
  %112 = phi i64 [ 0, %94 ], [ %137, %111 ]
  %113 = phi i64 [ %95, %94 ], [ %138, %111 ]
  %114 = getelementptr inbounds i8, i8* %90, i64 %112
  %115 = load i8, i8* %114, align 1
  %116 = icmp ne i8 %115, 0
  %117 = zext i1 %116 to i64
  %118 = getelementptr inbounds i64, i64* %5, i64 %112
  store i64 %117, i64* %118, align 8
  %119 = or i64 %112, 1
  %120 = getelementptr inbounds i8, i8* %90, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = icmp ne i8 %121, 0
  %123 = zext i1 %122 to i64
  %124 = getelementptr inbounds i64, i64* %5, i64 %119
  store i64 %123, i64* %124, align 8
  %125 = or i64 %112, 2
  %126 = getelementptr inbounds i8, i8* %90, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = icmp ne i8 %127, 0
  %129 = zext i1 %128 to i64
  %130 = getelementptr inbounds i64, i64* %5, i64 %125
  store i64 %129, i64* %130, align 8
  %131 = or i64 %112, 3
  %132 = getelementptr inbounds i8, i8* %90, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = icmp ne i8 %133, 0
  %135 = zext i1 %134 to i64
  %136 = getelementptr inbounds i64, i64* %5, i64 %131
  store i64 %135, i64* %136, align 8
  %137 = add nuw nsw i64 %112, 4
  %138 = add i64 %113, -4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %96, label %111

140:                                              ; preds = %6
  %141 = zext i32 %4 to i64
  %142 = icmp eq i32 %4, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* null) #8
  br label %238

144:                                              ; preds = %140
  %145 = shl nuw nsw i64 %141, 3
  %146 = tail call i8* @_Znwm(i64 %145) #9
  %147 = bitcast i8* %146 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 0, i64 %145, i1 false)
  tail call void @_ZN2gl7Context15getInteger64i_vEjjPl(%"class.gl::Context"* %0, i32 %2, i32 %3, i64* nonnull %147) #8
  %148 = icmp ult i32 %4, 4
  br i1 %148, label %149, label %151

149:                                              ; preds = %228, %144
  %150 = phi i64 [ 0, %144 ], [ %152, %228 ]
  br label %231

151:                                              ; preds = %144
  %152 = and i64 %141, 4294967292
  %153 = add nsw i64 %152, -4
  %154 = lshr exact i64 %153, 2
  %155 = add nuw nsw i64 %154, 1
  %156 = and i64 %155, 3
  %157 = icmp ult i64 %153, 12
  br i1 %157, label %209, label %158

158:                                              ; preds = %151
  %159 = sub nsw i64 %155, %156
  br label %160

160:                                              ; preds = %160, %158
  %161 = phi i64 [ 0, %158 ], [ %206, %160 ]
  %162 = phi i64 [ %159, %158 ], [ %207, %160 ]
  %163 = getelementptr inbounds i64, i64* %147, i64 %161
  %164 = bitcast i64* %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 8
  %166 = getelementptr inbounds i64, i64* %163, i64 2
  %167 = bitcast i64* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8
  %169 = getelementptr inbounds i64, i64* %5, i64 %161
  %170 = bitcast i64* %169 to <2 x i64>*
  store <2 x i64> %165, <2 x i64>* %170, align 8
  %171 = getelementptr inbounds i64, i64* %169, i64 2
  %172 = bitcast i64* %171 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %172, align 8
  %173 = or i64 %161, 4
  %174 = getelementptr inbounds i64, i64* %147, i64 %173
  %175 = bitcast i64* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 8
  %177 = getelementptr inbounds i64, i64* %174, i64 2
  %178 = bitcast i64* %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8
  %180 = getelementptr inbounds i64, i64* %5, i64 %173
  %181 = bitcast i64* %180 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %181, align 8
  %182 = getelementptr inbounds i64, i64* %180, i64 2
  %183 = bitcast i64* %182 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %183, align 8
  %184 = or i64 %161, 8
  %185 = getelementptr inbounds i64, i64* %147, i64 %184
  %186 = bitcast i64* %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8
  %188 = getelementptr inbounds i64, i64* %185, i64 2
  %189 = bitcast i64* %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 8
  %191 = getelementptr inbounds i64, i64* %5, i64 %184
  %192 = bitcast i64* %191 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %192, align 8
  %193 = getelementptr inbounds i64, i64* %191, i64 2
  %194 = bitcast i64* %193 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %194, align 8
  %195 = or i64 %161, 12
  %196 = getelementptr inbounds i64, i64* %147, i64 %195
  %197 = bitcast i64* %196 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 8
  %199 = getelementptr inbounds i64, i64* %196, i64 2
  %200 = bitcast i64* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8
  %202 = getelementptr inbounds i64, i64* %5, i64 %195
  %203 = bitcast i64* %202 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %203, align 8
  %204 = getelementptr inbounds i64, i64* %202, i64 2
  %205 = bitcast i64* %204 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %205, align 8
  %206 = add i64 %161, 16
  %207 = add i64 %162, -4
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %160, !llvm.loop !57

209:                                              ; preds = %160, %151
  %210 = phi i64 [ 0, %151 ], [ %206, %160 ]
  %211 = icmp eq i64 %156, 0
  br i1 %211, label %228, label %212

212:                                              ; preds = %209, %212
  %213 = phi i64 [ %225, %212 ], [ %210, %209 ]
  %214 = phi i64 [ %226, %212 ], [ %156, %209 ]
  %215 = getelementptr inbounds i64, i64* %147, i64 %213
  %216 = bitcast i64* %215 to <2 x i64>*
  %217 = load <2 x i64>, <2 x i64>* %216, align 8
  %218 = getelementptr inbounds i64, i64* %215, i64 2
  %219 = bitcast i64* %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 8
  %221 = getelementptr inbounds i64, i64* %5, i64 %213
  %222 = bitcast i64* %221 to <2 x i64>*
  store <2 x i64> %217, <2 x i64>* %222, align 8
  %223 = getelementptr inbounds i64, i64* %221, i64 2
  %224 = bitcast i64* %223 to <2 x i64>*
  store <2 x i64> %220, <2 x i64>* %224, align 8
  %225 = add i64 %213, 4
  %226 = add i64 %214, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %212, !llvm.loop !58

228:                                              ; preds = %212, %209
  %229 = icmp eq i64 %152, %141
  br i1 %229, label %230, label %149

230:                                              ; preds = %231, %228
  tail call void @_ZdlPv(i8* nonnull %146) #9
  br label %238

231:                                              ; preds = %149, %231
  %232 = phi i64 [ %236, %231 ], [ %150, %149 ]
  %233 = getelementptr inbounds i64, i64* %147, i64 %232
  %234 = load i64, i64* %233, align 8
  %235 = getelementptr inbounds i64, i64* %5, i64 %232
  store i64 %234, i64* %235, align 8
  %236 = add nuw nsw i64 %232, 1
  %237 = icmp eq i64 %236, %141
  br i1 %237, label %230, label %231, !llvm.loop !59

238:                                              ; preds = %143, %88, %10, %230, %110, %76, %6
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2gl13CastMaskValueEj(i32) local_unnamed_addr #4 {
  %2 = icmp ult i32 %0, 2147483647
  %3 = select i1 %2, i32 %0, i32 2147483647
  ret i32 %3
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #8
  %7 = load i8, i8* %6, align 8, !range !60
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #8
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #8
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #8
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #8
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #8
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #9
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #8
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #8
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #9
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #8
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #8
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !5, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !5, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !5, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !5, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !11}
!27 = distinct !{!27, !5, !3}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !5, !3}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !5, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !5, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !5, !3}
!39 = distinct !{!39, !11}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !11}
!42 = distinct !{!42, !5, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !5, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !5, !3}
!47 = distinct !{!47, !3}
!48 = distinct !{!48, !5, !3}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !5, !3}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !5, !3}
!53 = distinct !{!53, !11}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !5, !3}
!56 = distinct !{!56, !11}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !11}
!59 = distinct !{!59, !5, !3}
!60 = !{i8 0, i8 2}
