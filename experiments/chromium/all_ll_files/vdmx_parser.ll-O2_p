; ModuleID = '../../third_party/blink/renderer/platform/fonts/vdmx_parser.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/vdmx_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink9ParseVDMXEPiS0_PKhmj(i32* nocapture, i32* nocapture, i8*, i64, i32) local_unnamed_addr #0 {
  %6 = icmp ult i64 %3, 6
  br i1 %6, label %111, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 1
  %11 = tail call i16 @llvm.bswap.i16(i16 %10) #2
  %12 = zext i16 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 6
  %15 = zext i16 %11 to i32
  %16 = icmp eq i16 %10, 0
  br i1 %16, label %111, label %17

17:                                               ; preds = %7, %47
  %18 = phi i32 [ %48, %47 ], [ 0, %7 ]
  %19 = phi i64 [ %33, %47 ], [ 6, %7 ]
  %20 = or i64 %19, 1
  %21 = icmp ugt i64 %20, %3
  br i1 %21, label %111, label %22

22:                                               ; preds = %17
  %23 = add nuw nsw i64 %19, 2
  %24 = icmp ugt i64 %23, %3
  br i1 %24, label %111, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, i8* %2, i64 %20
  %27 = load i8, i8* %26, align 1
  %28 = add nuw nsw i64 %19, 3
  %29 = icmp ugt i64 %28, %3
  br i1 %29, label %111, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds i8, i8* %2, i64 %23
  %32 = load i8, i8* %31, align 1
  %33 = add nuw nsw i64 %19, 4
  %34 = icmp ugt i64 %33, %3
  br i1 %34, label %111, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds i8, i8* %2, i64 %28
  %37 = load i8, i8* %36, align 1
  %38 = icmp ne i8 %27, 1
  %39 = icmp ugt i8 %32, 1
  %40 = or i1 %38, %39
  %41 = icmp eq i8 %37, 0
  %42 = or i1 %40, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %35
  %44 = or i8 %32, %27
  %45 = or i8 %44, %37
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %43
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp ult i32 %48, %15
  br i1 %49, label %17, label %111

50:                                               ; preds = %43, %35
  %51 = shl nuw i32 %18, 1
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %14, %52
  %54 = add nuw nsw i64 %53, 2
  %55 = icmp ugt i64 %54, %3
  br i1 %55, label %111, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds i8, i8* %2, i64 %53
  %58 = bitcast i8* %57 to i16*
  %59 = load i16, i16* %58, align 1
  %60 = tail call i16 @llvm.bswap.i16(i16 %59) #2
  %61 = zext i16 %60 to i64
  %62 = add nuw nsw i64 %61, 2
  %63 = icmp ugt i64 %62, %3
  br i1 %63, label %111, label %64

64:                                               ; preds = %56
  %65 = add nuw nsw i64 %61, 4
  %66 = icmp ugt i64 %65, %3
  br i1 %66, label %111, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds i8, i8* %2, i64 %61
  %69 = bitcast i8* %68 to i16*
  %70 = load i16, i16* %69, align 1
  %71 = tail call i16 @llvm.bswap.i16(i16 %70) #2
  %72 = zext i16 %71 to i32
  %73 = icmp eq i16 %70, 0
  br i1 %73, label %111, label %74

74:                                               ; preds = %67, %105
  %75 = phi i32 [ %108, %105 ], [ 0, %67 ]
  %76 = phi i64 [ %106, %105 ], [ %65, %67 ]
  %77 = add nuw nsw i64 %76, 2
  %78 = icmp ugt i64 %77, %3
  br i1 %78, label %111, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds i8, i8* %2, i64 %76
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 1
  %83 = tail call i16 @llvm.bswap.i16(i16 %82) #2
  %84 = zext i16 %83 to i32
  %85 = icmp ugt i32 %84, %4
  br i1 %85, label %111, label %86

86:                                               ; preds = %79
  %87 = icmp eq i32 %84, %4
  br i1 %87, label %88, label %105

88:                                               ; preds = %86
  %89 = add i64 %76, 4
  %90 = icmp ugt i64 %89, %3
  %91 = add i64 %76, 6
  %92 = icmp ugt i64 %91, %3
  %93 = or i1 %90, %92
  br i1 %93, label %111, label %94

94:                                               ; preds = %88
  %95 = getelementptr inbounds i8, i8* %2, i64 %77
  %96 = bitcast i8* %95 to i16*
  %97 = load i16, i16* %96, align 1
  %98 = tail call i16 @llvm.bswap.i16(i16 %97) #2
  %99 = getelementptr inbounds i8, i8* %2, i64 %89
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 1
  %102 = tail call i16 @llvm.bswap.i16(i16 %101) #2
  %103 = sext i16 %102 to i32
  store i32 %103, i32* %1, align 4
  %104 = sext i16 %98 to i32
  store i32 %104, i32* %0, align 4
  br label %111

105:                                              ; preds = %86
  %106 = add i64 %76, 6
  %107 = icmp ule i64 %106, %3
  %108 = add nuw nsw i32 %75, 1
  %109 = icmp ult i32 %108, %72
  %110 = and i1 %107, %109
  br i1 %110, label %74, label %111

111:                                              ; preds = %47, %17, %22, %25, %30, %74, %79, %105, %7, %67, %5, %64, %50, %88, %94, %56
  %112 = phi i1 [ false, %50 ], [ false, %56 ], [ false, %88 ], [ true, %94 ], [ false, %64 ], [ false, %5 ], [ false, %67 ], [ false, %7 ], [ false, %105 ], [ false, %79 ], [ false, %74 ], [ false, %30 ], [ false, %25 ], [ false, %22 ], [ false, %17 ], [ false, %47 ]
  ret i1 %112
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
