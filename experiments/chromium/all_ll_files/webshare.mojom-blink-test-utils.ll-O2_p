; ModuleID = 'gen/third_party/blink/public/mojom/webshare/webshare.mojom-blink-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/webshare/webshare.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::blink::ShareServiceAsyncWaiter" = type { %"class.blink::mojom::blink::ShareService"* }
%"class.blink::mojom::blink::ShareService" = type { i32 (...)** }
%"class.blink::mojom::blink::ShareServiceInterceptorForTesting" = type { %"class.blink::mojom::blink::ShareService" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.mojo::StructPtr"*, i32, i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::mojom::blink::SharedFile"* }
%"class.blink::mojom::blink::SharedFile" = type { %"class.WTF::String", %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.blink::BlobDataHandle"* }
%"class.blink::BlobDataHandle" = type { %"class.WTF::ThreadSafeRefCounted", %"class.WTF::String", %"class.WTF::String", i64, i8, %"class.mojo::PendingRemote", %"class.WTF::Mutex" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.14 }
%class.scoped_refptr.14 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.15", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.15" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.26, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.19", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.21" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.26 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.27" }>
%"class.base::RefCountedThreadSafe.27" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.28 }
%class.scoped_refptr.28 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.29", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.29" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.30" }
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i8 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }

$_ZN5blink5mojom5blink12ShareServiceD2Ev = comdat any

$_ZN5blink5mojom5blink33ShareServiceInterceptorForTestingD0Ev = comdat any

@.str = private unnamed_addr constant [6 x i8] c"Share\00", align 1
@.str.1 = private unnamed_addr constant [79 x i8] c"gen/third_party/blink/public/mojom/webshare/webshare.mojom-blink-test-utils.cc\00", align 1
@_ZTVN5blink5mojom5blink33ShareServiceInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::blink::ShareService"*)* @_ZN5blink5mojom5blink12ShareServiceD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)* @_ZN5blink5mojom5blink33ShareServiceInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)* @_ZN5blink5mojom5blink33ShareServiceInterceptorForTesting5ShareERKN3WTF6StringES6_RKNS_4KURLENS3_6VectorIN4mojo9StructPtrINS1_10SharedFileEEELj0ENS3_18PartitionAllocatorEEEN4base12OnceCallbackIFvNS0_10ShareErrorEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom5blink23ShareServiceAsyncWaiterC1EPNS1_12ShareServiceE = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ShareServiceAsyncWaiter"*, %"class.blink::mojom::blink::ShareService"*), void (%"class.blink::mojom::blink::ShareServiceAsyncWaiter"*, %"class.blink::mojom::blink::ShareService"*)* @_ZN5blink5mojom5blink23ShareServiceAsyncWaiterC2EPNS1_12ShareServiceE
@_ZN5blink5mojom5blink23ShareServiceAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ShareServiceAsyncWaiter"*), void (%"class.blink::mojom::blink::ShareServiceAsyncWaiter"*)* @_ZN5blink5mojom5blink23ShareServiceAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink33ShareServiceInterceptorForTesting5ShareERKN3WTF6StringES6_RKNS_4KURLENS3_6VectorIN4mojo9StructPtrINS1_10SharedFileEEELj0ENS3_18PartitionAllocatorEEEN4base12OnceCallbackIFvNS0_10ShareErrorEEEE(%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112), %"class.WTF::Vector"* nocapture, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::Vector", align 8
  %8 = alloca %"class.base::OnceCallback", align 8
  %9 = bitcast %"class.blink::mojom::blink::ShareServiceInterceptorForTesting"* %0 to %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)***
  %10 = load %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)**, %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)*, %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)** %10, i64 3
  %12 = load %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)*, %"class.blink::mojom::blink::ShareService"* (%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*)** %11, align 8
  %13 = tail call %"class.blink::mojom::blink::ShareService"* %12(%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"* %0) #10
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 2
  %16 = bitcast %"class.WTF::Vector"* %4 to i64*
  %17 = bitcast %"class.WTF::Vector"* %7 to i64*
  store i64 0, i64* %17, align 8
  %18 = load i64, i64* %16, align 8
  %19 = bitcast %"class.WTF::Vector"* %7 to i64*
  store atomic i64 0, i64* %16 monotonic, align 8
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %14, align 8
  store i32 0, i32* %20, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %15, align 4
  store i32 0, i32* %22, align 4
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.base::OnceCallback"* %8 to i64*
  store i64 %26, i64* %27, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %28 = bitcast %"class.blink::mojom::blink::ShareService"* %13 to void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)***
  %29 = load void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)** %29, i64 2
  %31 = load void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)** %30, align 8
  call void %31(%"class.blink::mojom::blink::ShareService"* %13, %"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %2, %"class.blink::KURL"* dereferenceable(112) %3, %"class.WTF::Vector"* nonnull %7, %"class.base::OnceCallback"* nonnull %8) #10
  %32 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %32) #10
  %33 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %33, align 8
  %35 = icmp eq %"class.mojo::StructPtr"* %34, null
  br i1 %35, label %58, label %36, !prof !2

36:                                               ; preds = %6
  %37 = bitcast %"class.mojo::StructPtr"* %34 to i8*
  %38 = load i32, i32* %15, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %56, label %40, !prof !3

40:                                               ; preds = %36
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %34, i64 %41
  br label %43

43:                                               ; preds = %50, %40
  %44 = phi %"class.mojo::StructPtr"* [ %51, %50 ], [ %34, %40 ]
  %45 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %44, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = load %"class.blink::mojom::blink::SharedFile"*, %"class.blink::mojom::blink::SharedFile"** %45, align 8
  store %"class.blink::mojom::blink::SharedFile"* null, %"class.blink::mojom::blink::SharedFile"** %45, align 8
  %47 = icmp eq %"class.blink::mojom::blink::SharedFile"* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %43
  call void @_ZN5blink5mojom5blink10SharedFileD1Ev(%"class.blink::mojom::blink::SharedFile"* nonnull %46) #10
  %49 = bitcast %"class.blink::mojom::blink::SharedFile"* %46 to i8*
  call void @_ZdlPv(i8* %49) #11
  br label %50

50:                                               ; preds = %48, %43
  %51 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %44, i64 1
  %52 = icmp eq %"class.mojo::StructPtr"* %51, %42
  br i1 %52, label %53, label %43

53:                                               ; preds = %50
  store i32 0, i32* %15, align 4
  %54 = bitcast %"class.WTF::Vector"* %7 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %53, %36
  %57 = phi i8* [ %55, %53 ], [ %37, %36 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #10
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %33, align 8
  br label %58

58:                                               ; preds = %6, %56
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom5blink23ShareServiceAsyncWaiterC2EPNS1_12ShareServiceE(%"class.blink::mojom::blink::ShareServiceAsyncWaiter"* nocapture, %"class.blink::mojom::blink::ShareService"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::blink::ShareServiceAsyncWaiter", %"class.blink::mojom::blink::ShareServiceAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::blink::ShareService"* %1, %"class.blink::mojom::blink::ShareService"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom5blink23ShareServiceAsyncWaiterD2Ev(%"class.blink::mojom::blink::ShareServiceAsyncWaiter"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringES6_RKNS_4KURLENS3_6VectorIN4mojo9StructPtrINS1_10SharedFileEEELj0ENS3_18PartitionAllocatorEEEPNS0_10ShareErrorE(%"class.blink::mojom::blink::ShareServiceAsyncWaiter"* nocapture readonly, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112), %"class.WTF::Vector"* nocapture, i32*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.base::RunLoop", align 8
  %8 = alloca %"class.WTF::Vector", align 8
  %9 = alloca %"class.base::OnceCallback", align 8
  %10 = alloca %"class.base::Location", align 8
  %11 = ptrtoint i32* %5 to i64
  %12 = bitcast %"class.base::RunLoop"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %7, i32 0) #10
  %13 = getelementptr inbounds %"class.blink::mojom::blink::ShareServiceAsyncWaiter", %"class.blink::mojom::blink::ShareServiceAsyncWaiter"* %0, i64 0, i32 0
  %14 = load %"class.blink::mojom::blink::ShareService"*, %"class.blink::mojom::blink::ShareService"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 2
  %17 = bitcast %"class.WTF::Vector"* %4 to i64*
  %18 = bitcast %"class.WTF::Vector"* %8 to i64*
  store i64 0, i64* %18, align 8
  %19 = load i64, i64* %17, align 8
  %20 = bitcast %"class.WTF::Vector"* %8 to i64*
  store atomic i64 0, i64* %17 monotonic, align 8
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %15, align 8
  store i32 0, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %16, align 4
  store i32 0, i32* %23, align 4
  %25 = ptrtoint %"class.base::RunLoop"* %7 to i64
  %26 = call i8* @_Znwm(i64 56) #11, !noalias !4
  %27 = bitcast i8* %26 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %27, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, i32)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringESA_RKNS3_4KURLENS7_6VectorIN4mojo9StructPtrINS5_10SharedFileEEELj0ENS7_18PartitionAllocatorEEEPNS4_10ShareErrorEE3$_0JPNS_7RunLoopESM_EEEFvSL_EE7RunOnceEPNS0_13BindStateBaseESL_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringES9_RKNS2_4KURLENS6_6VectorIN4mojo9StructPtrINS4_10SharedFileEEELj0ENS6_18PartitionAllocatorEEEPNS3_10ShareErrorEE3$_0JPNS_7RunLoopESL_EE7DestroyEPKNS0_13BindStateBaseE") #10, !noalias !4
  %28 = getelementptr inbounds i8, i8* %26, i64 40
  %29 = bitcast i8* %28 to i64*
  store i64 %25, i64* %29, align 8, !noalias !4
  %30 = getelementptr inbounds i8, i8* %26, i64 48
  %31 = bitcast i8* %30 to i64*
  store i64 %11, i64* %31, align 8, !noalias !4
  %32 = bitcast %"class.base::OnceCallback"* %9 to i8**
  store i8* %26, i8** %32, align 8, !alias.scope !4
  %33 = bitcast %"class.blink::mojom::blink::ShareService"* %14 to void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)***
  %34 = load void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)** %34, i64 2
  %36 = load void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ShareService"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::KURL"*, %"class.WTF::Vector"*, %"class.base::OnceCallback"*)** %35, align 8
  call void %36(%"class.blink::mojom::blink::ShareService"* %14, %"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %2, %"class.blink::KURL"* dereferenceable(112) %3, %"class.WTF::Vector"* nonnull %8, %"class.base::OnceCallback"* nonnull %9) #10
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %37) #10
  %38 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %38, align 8
  %40 = icmp eq %"class.mojo::StructPtr"* %39, null
  br i1 %40, label %63, label %41, !prof !2

41:                                               ; preds = %6
  %42 = bitcast %"class.mojo::StructPtr"* %39 to i8*
  %43 = load i32, i32* %16, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %61, label %45, !prof !3

45:                                               ; preds = %41
  %46 = zext i32 %43 to i64
  %47 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %39, i64 %46
  br label %48

48:                                               ; preds = %55, %45
  %49 = phi %"class.mojo::StructPtr"* [ %56, %55 ], [ %39, %45 ]
  %50 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load %"class.blink::mojom::blink::SharedFile"*, %"class.blink::mojom::blink::SharedFile"** %50, align 8
  store %"class.blink::mojom::blink::SharedFile"* null, %"class.blink::mojom::blink::SharedFile"** %50, align 8
  %52 = icmp eq %"class.blink::mojom::blink::SharedFile"* %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  call void @_ZN5blink5mojom5blink10SharedFileD1Ev(%"class.blink::mojom::blink::SharedFile"* nonnull %51) #10
  %54 = bitcast %"class.blink::mojom::blink::SharedFile"* %51 to i8*
  call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %53, %48
  %56 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %49, i64 1
  %57 = icmp eq %"class.mojo::StructPtr"* %56, %47
  br i1 %57, label %58, label %48

58:                                               ; preds = %55
  store i32 0, i32* %16, align 4
  %59 = bitcast %"class.WTF::Vector"* %8 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %41
  %62 = phi i8* [ %60, %58 ], [ %42, %41 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %62) #10
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %38, align 8
  br label %63

63:                                               ; preds = %6, %61
  %64 = bitcast %"class.base::Location"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %64) #10
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.1, i64 0, i64 0), i32 56) #10
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %7, %"class.base::Location"* nonnull dereferenceable(32) %10) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %64) #10
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"*, i32) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"*, %"class.base::Location"* dereferenceable(32)) local_unnamed_addr #5

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink12ShareServiceD2Ev(%"class.blink::mojom::blink::ShareService"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink33ShareServiceInterceptorForTestingD0Ev(%"class.blink::mojom::blink::ShareServiceInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN5blink5mojom5blink10SharedFileD1Ev(%"class.blink::mojom::blink::SharedFile"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringESA_RKNS3_4KURLENS7_6VectorIN4mojo9StructPtrINS5_10SharedFileEEELj0ENS7_18PartitionAllocatorEEEPNS4_10ShareErrorEE3$_0JPNS_7RunLoopESM_EEEFvSL_EE7RunOnceEPNS0_13BindStateBaseESL_"(%"class.base::internal::BindStateBase"* nocapture readonly, i32) #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %4 = bitcast void ()** %3 to %"class.base::RunLoop"**
  %5 = getelementptr inbounds void ()*, void ()** %3, i64 1
  %6 = bitcast void ()** %5 to i32**
  %7 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %4, align 8
  %8 = load i32*, i32** %6, align 8
  store i32 %1, i32* %8, align 4
  tail call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %7) #10
  ret void
}

declare void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringES9_RKNS2_4KURLENS6_6VectorIN4mojo9StructPtrINS4_10SharedFileEEELj0ENS6_18PartitionAllocatorEEEPNS3_10ShareErrorEE3$_0JPNS_7RunLoopESL_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5, !7}
!5 = distinct !{!5, !6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringESA_RKNS3_4KURLENS7_6VectorIN4mojo9StructPtrINS5_10SharedFileEEELj0ENS7_18PartitionAllocatorEEEPNS4_10ShareErrorEE3$_0JPNS_7RunLoopERSM_EEEDcOT0_DpOT1_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringESA_RKNS3_4KURLENS7_6VectorIN4mojo9StructPtrINS5_10SharedFileEEELj0ENS7_18PartitionAllocatorEEEPNS4_10ShareErrorEE3$_0JPNS_7RunLoopERSM_EEEDcOT0_DpOT1_"}
!7 = distinct !{!7, !8, !"_ZN4base8BindOnceIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringES8_RKNS1_4KURLENS5_6VectorIN4mojo9StructPtrINS3_10SharedFileEEELj0ENS5_18PartitionAllocatorEEEPNS2_10ShareErrorEE3$_0JPNS_7RunLoopERSK_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSS_DpOST_: argument 0"}
!8 = distinct !{!8, !"_ZN4base8BindOnceIZN5blink5mojom5blink23ShareServiceAsyncWaiter5ShareERKN3WTF6StringES8_RKNS1_4KURLENS5_6VectorIN4mojo9StructPtrINS3_10SharedFileEEELj0ENS5_18PartitionAllocatorEEEPNS2_10ShareErrorEE3$_0JPNS_7RunLoopERSK_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSS_DpOST_"}
