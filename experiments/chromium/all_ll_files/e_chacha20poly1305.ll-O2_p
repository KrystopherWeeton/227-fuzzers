; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_aead_st = type { i8, i8, i8, i8, i32, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)*, void (%struct.evp_aead_ctx_st*)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)*, i64 (%struct.evp_aead_ctx_st*, i64, i64)* }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%union.chacha20_poly1305_seal_data = type { %struct.anon }
%struct.anon = type { [32 x i8], i32, [12 x i8], i8*, i64 }
%union.chacha20_poly1305_open_data = type { %struct.anon.1 }
%struct.anon.1 = type { [32 x i8], i32, [12 x i8] }

@aead_chacha20_poly1305 = internal constant %struct.evp_aead_st { i8 32, i8 12, i8 16, i8 16, i32 1, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* @aead_chacha20_poly1305_init, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* null, void (%struct.evp_aead_ctx_st*)* @aead_chacha20_poly1305_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_chacha20_poly1305_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_chacha20_poly1305_open_gather, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* null }, align 8
@aead_xchacha20_poly1305 = internal constant %struct.evp_aead_st { i8 32, i8 24, i8 16, i8 16, i32 1, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* @aead_chacha20_poly1305_init, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* null, void (%struct.evp_aead_ctx_st*)* @aead_chacha20_poly1305_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_xchacha20_poly1305_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_xchacha20_poly1305_open_gather, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* null }, align 8
@.str = private unnamed_addr constant [73 x i8] c"../../third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c\00", align 1
@OPENSSL_ia32cap_P = external local_unnamed_addr global [4 x i32], align 16
@calc_tag.padding = internal constant [16 x i8] zeroinitializer, align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_chacha20_poly1305() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_chacha20_poly1305
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_xchacha20_poly1305() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_xchacha20_poly1305
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_chacha20_poly1305_init(%struct.evp_aead_ctx_st* nocapture, i8* nocapture readonly, i64, i64) #1 {
  %5 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %6 = icmp eq i64 %3, 0
  %7 = select i1 %6, i64 16, i64 %3
  %8 = icmp ugt i64 %7, 16
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 54) #4
  br label %16

10:                                               ; preds = %4
  %11 = icmp eq i64 %2, 32
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = bitcast %union.evp_aead_ctx_st_state* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %1, i64 32, i1 false) #4
  %14 = trunc i64 %7 to i8
  %15 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  store i8 %14, i8* %15, align 8
  br label %16

16:                                               ; preds = %10, %12, %9
  %17 = phi i32 [ 0, %9 ], [ 1, %12 ], [ 0, %10 ]
  ret i32 %17
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @aead_chacha20_poly1305_cleanup(%struct.evp_aead_ctx_st* nocapture) #0 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_chacha20_poly1305_seal_scatter(%struct.evp_aead_ctx_st*, i8*, i8*, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readonly, i64, i8*, i64) #1 {
  %14 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %15 = bitcast %union.evp_aead_ctx_st_state* %14 to i8*
  %16 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i64
  %19 = tail call fastcc i32 @chacha20_poly1305_seal_scatter(i8* %15, i8* %1, i8* %2, i64* %3, i64 %4, i8* %5, i64 %6, i8* %7, i64 %8, i8* %9, i64 %10, i8* %11, i64 %12, i64 %18)
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_chacha20_poly1305_open_gather(%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64) #1 {
  %11 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %12 = bitcast %union.evp_aead_ctx_st_state* %11 to i8*
  %13 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %14 = load i8, i8* %13, align 8
  %15 = zext i8 %14 to i64
  %16 = tail call fastcc i32 @chacha20_poly1305_open_gather(i8* %12, i8* %1, i8* %2, i64 %3, i8* %4, i64 %5, i8* %6, i64 %7, i8* %8, i64 %9, i64 %15)
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @chacha20_poly1305_seal_scatter(i8*, i8*, i8*, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readonly, i64, i8*, i64, i64) unnamed_addr #1 {
  %15 = alloca [64 x i8], align 16
  %16 = alloca %union.chacha20_poly1305_seal_data, align 16
  %17 = add i64 %13, %10
  %18 = icmp ult i64 %17, %13
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 117) #4
  br label %190

20:                                               ; preds = %14
  %21 = icmp ugt i64 %17, %4
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  tail call void @ERR_put_error(i32 30, i32 0, i32 103, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 121) #4
  br label %190

23:                                               ; preds = %20
  %24 = icmp eq i64 %6, 12
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 125) #4
  br label %190

26:                                               ; preds = %23
  %27 = icmp ugt i64 %8, 274877906879
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 137) #4
  br label %190

29:                                               ; preds = %26
  %30 = icmp ult i64 %4, %13
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void @ERR_put_error(i32 30, i32 0, i32 103, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 142) #4
  br label %190

32:                                               ; preds = %29
  %33 = icmp eq i64 %10, 0
  br i1 %33, label %174, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 64, i1 false)
  %36 = and i64 %8, 63
  %37 = lshr i64 %8, 6
  %38 = trunc i64 %37 to i32
  %39 = getelementptr i8, i8* %2, i64 1
  %40 = getelementptr i8, i8* %9, i64 1
  br label %45

41:                                               ; preds = %160, %155, %45
  %42 = phi i64 [ %47, %45 ], [ %76, %155 ], [ %170, %160 ]
  %43 = icmp ult i64 %42, %10
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #4
  br label %174

45:                                               ; preds = %34, %41
  %46 = phi i32 [ %49, %41 ], [ %38, %34 ]
  %47 = phi i64 [ %42, %41 ], [ 0, %34 ]
  %48 = phi i64 [ 0, %41 ], [ %36, %34 ]
  %49 = add i32 %46, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 64, i1 false)
  call void @CRYPTO_chacha_20(i8* nonnull %35, i8* nonnull %35, i64 64, i8* %0, i8* %5, i32 %49) #4
  %50 = icmp ult i64 %47, %10
  br i1 %50, label %51, label %41

51:                                               ; preds = %45
  %52 = xor i64 %47, -1
  %53 = add i64 %52, %10
  %54 = xor i64 %48, 63
  %55 = icmp ult i64 %53, %54
  %56 = select i1 %55, i64 %53, i64 %54
  %57 = add nuw nsw i64 %56, 1
  %58 = icmp ult i64 %57, 32
  br i1 %58, label %157, label %59

59:                                               ; preds = %51
  %60 = getelementptr i8, i8* %2, i64 %47
  %61 = xor i64 %47, -1
  %62 = add i64 %61, %10
  %63 = xor i64 %48, 63
  %64 = icmp ult i64 %62, %63
  %65 = select i1 %64, i64 %62, i64 %63
  %66 = add i64 %47, %65
  %67 = getelementptr i8, i8* %39, i64 %66
  %68 = getelementptr i8, i8* %9, i64 %47
  %69 = getelementptr i8, i8* %40, i64 %66
  %70 = icmp ult i8* %60, %69
  %71 = icmp ult i8* %68, %67
  %72 = and i1 %70, %71
  br i1 %72, label %157, label %73

73:                                               ; preds = %59
  %74 = and i64 %57, 96
  %75 = add nuw nsw i64 %48, %74
  %76 = add i64 %47, %74
  %77 = add nsw i64 %74, -32
  %78 = lshr exact i64 %77, 5
  %79 = add nuw nsw i64 %78, 1
  %80 = and i64 %79, 1
  %81 = icmp eq i64 %77, 0
  br i1 %81, label %131, label %82

82:                                               ; preds = %73
  %83 = sub nuw nsw i64 %79, %80
  br label %84

84:                                               ; preds = %84, %82
  %85 = phi i64 [ 0, %82 ], [ %128, %84 ]
  %86 = phi i64 [ %83, %82 ], [ %129, %84 ]
  %87 = or i64 %48, %85
  %88 = add i64 %47, %85
  %89 = getelementptr inbounds i8, i8* %9, i64 %88
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !2
  %92 = getelementptr inbounds i8, i8* %89, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !2
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %87
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !5
  %98 = getelementptr inbounds i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !5
  %101 = xor <16 x i8> %97, %91
  %102 = xor <16 x i8> %100, %94
  %103 = getelementptr inbounds i8, i8* %2, i64 %88
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %104, align 1, !alias.scope !7, !noalias !2
  %105 = getelementptr inbounds i8, i8* %103, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %106, align 1, !alias.scope !7, !noalias !2
  %107 = or i64 %85, 32
  %108 = add i64 %48, %107
  %109 = add i64 %47, %107
  %110 = getelementptr inbounds i8, i8* %9, i64 %109
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !2
  %113 = getelementptr inbounds i8, i8* %110, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !2
  %116 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %108
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !5
  %119 = getelementptr inbounds i8, i8* %116, i64 16
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1, !alias.scope !5
  %122 = xor <16 x i8> %118, %112
  %123 = xor <16 x i8> %121, %115
  %124 = getelementptr inbounds i8, i8* %2, i64 %109
  %125 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %125, align 1, !alias.scope !7, !noalias !2
  %126 = getelementptr inbounds i8, i8* %124, i64 16
  %127 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %127, align 1, !alias.scope !7, !noalias !2
  %128 = add i64 %85, 64
  %129 = add i64 %86, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %84, !llvm.loop !9

131:                                              ; preds = %84, %73
  %132 = phi i64 [ 0, %73 ], [ %128, %84 ]
  %133 = icmp eq i64 %80, 0
  br i1 %133, label %155, label %134

134:                                              ; preds = %131
  %135 = add i64 %48, %132
  %136 = add i64 %47, %132
  %137 = getelementptr inbounds i8, i8* %9, i64 %136
  %138 = bitcast i8* %137 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1, !alias.scope !2
  %140 = getelementptr inbounds i8, i8* %137, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1, !alias.scope !2
  %143 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %135
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1, !alias.scope !5
  %146 = getelementptr inbounds i8, i8* %143, i64 16
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !alias.scope !5
  %149 = xor <16 x i8> %145, %139
  %150 = xor <16 x i8> %148, %142
  %151 = getelementptr inbounds i8, i8* %2, i64 %136
  %152 = bitcast i8* %151 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %152, align 1, !alias.scope !7, !noalias !2
  %153 = getelementptr inbounds i8, i8* %151, i64 16
  %154 = bitcast i8* %153 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %154, align 1, !alias.scope !7, !noalias !2
  br label %155

155:                                              ; preds = %131, %134
  %156 = icmp eq i64 %57, %74
  br i1 %156, label %41, label %157

157:                                              ; preds = %155, %59, %51
  %158 = phi i64 [ %48, %59 ], [ %48, %51 ], [ %75, %155 ]
  %159 = phi i64 [ %47, %59 ], [ %47, %51 ], [ %76, %155 ]
  br label %160

160:                                              ; preds = %157, %160
  %161 = phi i64 [ %169, %160 ], [ %158, %157 ]
  %162 = phi i64 [ %170, %160 ], [ %159, %157 ]
  %163 = getelementptr inbounds i8, i8* %9, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %161
  %166 = load i8, i8* %165, align 1
  %167 = xor i8 %166, %164
  %168 = getelementptr inbounds i8, i8* %2, i64 %162
  store i8 %167, i8* %168, align 1
  %169 = add nuw nsw i64 %161, 1
  %170 = add nuw i64 %162, 1
  %171 = icmp ult i64 %169, 64
  %172 = icmp ult i64 %170, %10
  %173 = and i1 %172, %171
  br i1 %173, label %160, label %41, !llvm.loop !11

174:                                              ; preds = %32, %44
  %175 = getelementptr inbounds %union.chacha20_poly1305_seal_data, %union.chacha20_poly1305_seal_data* %16, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %175) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %175, i8 -86, i64 64, i1 false)
  %176 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 1), align 4
  %177 = and i32 %176, 524288
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %184, label %179

179:                                              ; preds = %174
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %175, i8* align 1 %0, i64 32, i1 false) #4
  %180 = getelementptr inbounds %union.chacha20_poly1305_seal_data, %union.chacha20_poly1305_seal_data* %16, i64 0, i32 0, i32 1
  store i32 0, i32* %180, align 16
  %181 = getelementptr inbounds %union.chacha20_poly1305_seal_data, %union.chacha20_poly1305_seal_data* %16, i64 0, i32 0, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %181, i8* align 1 %5, i64 12, i1 false) #4
  %182 = getelementptr inbounds %union.chacha20_poly1305_seal_data, %union.chacha20_poly1305_seal_data* %16, i64 0, i32 0, i32 3
  store i8* %2, i8** %182, align 16
  %183 = getelementptr inbounds %union.chacha20_poly1305_seal_data, %union.chacha20_poly1305_seal_data* %16, i64 0, i32 0, i32 4
  store i64 %10, i64* %183, align 8
  call void @chacha20_poly1305_seal(i8* %1, i8* %7, i64 %8, i8* %11, i64 %12, %union.chacha20_poly1305_seal_data* nonnull %16) #4
  br label %185

184:                                              ; preds = %174
  call void @CRYPTO_chacha_20(i8* %1, i8* %7, i64 %8, i8* %0, i8* %5, i32 1) #4
  call fastcc void @calc_tag(i8* nonnull %175, i8* %0, i8* %5, i8* %11, i64 %12, i8* %1, i64 %8, i8* %2, i64 %10)
  br label %185

185:                                              ; preds = %184, %179
  %186 = icmp eq i64 %13, 0
  br i1 %186, label %189, label %187

187:                                              ; preds = %185
  %188 = getelementptr inbounds i8, i8* %2, i64 %10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %188, i8* nonnull align 16 %175, i64 %13, i1 false) #4
  br label %189

189:                                              ; preds = %185, %187
  store i64 %17, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %175) #4
  br label %190

190:                                              ; preds = %28, %31, %189, %25, %22, %19
  %191 = phi i32 [ 0, %19 ], [ 0, %22 ], [ 0, %25 ], [ 0, %28 ], [ 0, %31 ], [ 1, %189 ]
  ret i32 %191
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @CRYPTO_chacha_20(i8*, i8*, i64, i8*, i8*, i32) local_unnamed_addr #3

declare void @chacha20_poly1305_seal(i8*, i8*, i64, i8*, i64, %union.chacha20_poly1305_seal_data*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @calc_tag(i8*, i8*, i8*, i8*, i64, i8*, i64, i8*, i64) unnamed_addr #1 {
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca [32 x i8], align 16
  %13 = alloca [512 x i8], align 16
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 32, i1 false) #4
  call void @CRYPTO_chacha_20(i8* nonnull %14, i8* nonnull %14, i64 32, i8* %1, i8* %2, i32 0) #4
  %15 = getelementptr inbounds [512 x i8], [512 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 512, i1 false)
  call void @CRYPTO_poly1305_init([512 x i8]* nonnull %13, i8* nonnull %14) #4
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* %3, i64 %4) #4
  %16 = and i64 %4, 15
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %9
  %19 = sub nuw nsw i64 16, %16
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @calc_tag.padding, i64 0, i64 0), i64 %19) #4
  br label %20

20:                                               ; preds = %9, %18
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* %5, i64 %6) #4
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* %7, i64 %8) #4
  %21 = add i64 %8, %6
  %22 = and i64 %21, 15
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = sub nuw nsw i64 16, %22
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @calc_tag.padding, i64 0, i64 0), i64 %25) #4
  br label %26

26:                                               ; preds = %20, %24
  %27 = bitcast i64* %10 to [8 x i8]*
  %28 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 1
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 2
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 3
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 4
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 5
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 6
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 7
  %36 = trunc i64 %4 to i8
  store i8 %36, i8* %28, align 8
  %37 = lshr i64 %4, 8
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %29, align 1
  %39 = lshr i64 %4, 16
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %30, align 2
  %41 = lshr i64 %4, 24
  %42 = trunc i64 %41 to i8
  store i8 %42, i8* %31, align 1
  %43 = lshr i64 %4, 32
  %44 = trunc i64 %43 to i8
  store i8 %44, i8* %32, align 4
  %45 = lshr i64 %4, 40
  %46 = trunc i64 %45 to i8
  store i8 %46, i8* %33, align 1
  %47 = lshr i64 %4, 48
  %48 = trunc i64 %47 to i8
  store i8 %48, i8* %34, align 2
  %49 = lshr i64 %4, 56
  %50 = trunc i64 %49 to i8
  store i8 %50, i8* %35, align 1
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* nonnull %28, i64 8) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  %51 = bitcast i64* %11 to [8 x i8]*
  %52 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #4
  %53 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  %54 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  %60 = trunc i64 %21 to i8
  store i8 %60, i8* %52, align 8
  %61 = lshr i64 %21, 8
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %53, align 1
  %63 = lshr i64 %21, 16
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %54, align 2
  %65 = lshr i64 %21, 24
  %66 = trunc i64 %65 to i8
  store i8 %66, i8* %55, align 1
  %67 = lshr i64 %21, 32
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %56, align 4
  %69 = lshr i64 %21, 40
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %57, align 1
  %71 = lshr i64 %21, 48
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %58, align 2
  %73 = lshr i64 %21, 56
  %74 = trunc i64 %73 to i8
  store i8 %74, i8* %59, align 1
  call void @CRYPTO_poly1305_update([512 x i8]* nonnull %13, i8* nonnull %52, i64 8) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #4
  call void @CRYPTO_poly1305_finish([512 x i8]* nonnull %13, i8* %0) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  ret void
}

declare void @CRYPTO_poly1305_init([512 x i8]*, i8*) local_unnamed_addr #3

declare void @CRYPTO_poly1305_update([512 x i8]*, i8*, i64) local_unnamed_addr #3

declare void @CRYPTO_poly1305_finish([512 x i8]*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @chacha20_poly1305_open_gather(i8*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i64) unnamed_addr #1 {
  %12 = alloca %union.chacha20_poly1305_open_data, align 16
  %13 = icmp eq i64 %3, 12
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 228) #4
  br label %36

15:                                               ; preds = %11
  %16 = icmp eq i64 %7, %10
  br i1 %16, label %18, label %17

17:                                               ; preds = %15
  tail call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 233) #4
  br label %36

18:                                               ; preds = %15
  %19 = icmp ugt i64 %5, 274877906879
  br i1 %19, label %20, label %21

20:                                               ; preds = %18
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 245) #4
  br label %36

21:                                               ; preds = %18
  %22 = getelementptr inbounds %union.chacha20_poly1305_open_data, %union.chacha20_poly1305_open_data* %12, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 48, i1 false)
  %23 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 1), align 4
  %24 = and i32 %23, 524288
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %22, i8* align 1 %0, i64 32, i1 false) #4
  %27 = getelementptr inbounds %union.chacha20_poly1305_open_data, %union.chacha20_poly1305_open_data* %12, i64 0, i32 0, i32 1
  store i32 0, i32* %27, align 16
  %28 = getelementptr inbounds %union.chacha20_poly1305_open_data, %union.chacha20_poly1305_open_data* %12, i64 0, i32 0, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 1 %2, i64 12, i1 false) #4
  call void @chacha20_poly1305_open(i8* %1, i8* %4, i64 %5, i8* %8, i64 %9, %union.chacha20_poly1305_open_data* nonnull %12) #4
  br label %30

29:                                               ; preds = %21
  call fastcc void @calc_tag(i8* nonnull %22, i8* %0, i8* %2, i8* %8, i64 %9, i8* %4, i64 %5, i8* null, i64 0)
  call void @CRYPTO_chacha_20(i8* %1, i8* %4, i64 %5, i8* %0, i8* %2, i32 1) #4
  br label %30

30:                                               ; preds = %29, %26
  %31 = call i32 @CRYPTO_memcmp(i8* nonnull %22, i8* %6, i64 %7) #4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 261) #4
  br label %34

34:                                               ; preds = %30, %33
  %35 = phi i32 [ 0, %33 ], [ 1, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #4
  br label %36

36:                                               ; preds = %20, %34, %17, %14
  %37 = phi i32 [ 0, %14 ], [ 0, %17 ], [ 0, %20 ], [ %35, %34 ]
  ret i32 %37
}

declare void @chacha20_poly1305_open(i8*, i8*, i64, i8*, i64, %union.chacha20_poly1305_open_data*) local_unnamed_addr #3

declare i32 @CRYPTO_memcmp(i8*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_xchacha20_poly1305_seal_scatter(%struct.evp_aead_ctx_st*, i8*, i8*, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readonly, i64, i8*, i64) #1 {
  %14 = alloca [32 x i8], align 4
  %15 = alloca [12 x i8], align 4
  %16 = icmp eq i64 %6, 24
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 207) #4
  br label %33

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #4
  %21 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %21) #4
  %22 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i64 0, i64 4
  %23 = bitcast %union.evp_aead_ctx_st_state* %19 to i8*
  call void @CRYPTO_hchacha20(i8* nonnull %20, i8* %23, i8* %5) #4
  %24 = bitcast [12 x i8]* %15 to i32*
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %5, i64 16
  %26 = bitcast i8* %25 to i64*
  %27 = bitcast i8* %22 to i64*
  %28 = load i64, i64* %26, align 1
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %30 = load i8, i8* %29, align 8
  %31 = zext i8 %30 to i64
  %32 = call fastcc i32 @chacha20_poly1305_seal_scatter(i8* nonnull %20, i8* %1, i8* %2, i64* %3, i64 %4, i8* nonnull %21, i64 12, i8* %7, i64 %8, i8* %9, i64 %10, i8* %11, i64 %12, i64 %31)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #4
  br label %33

33:                                               ; preds = %18, %17
  %34 = phi i32 [ 0, %17 ], [ %32, %18 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_xchacha20_poly1305_open_gather(%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64) #1 {
  %11 = alloca [32 x i8], align 4
  %12 = alloca [12 x i8], align 4
  %13 = icmp eq i64 %3, 24
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0), i32 288) #4
  br label %30

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #4
  %18 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %18) #4
  %19 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 4
  %20 = bitcast %union.evp_aead_ctx_st_state* %16 to i8*
  call void @CRYPTO_hchacha20(i8* nonnull %17, i8* %20, i8* %2) #4
  %21 = bitcast [12 x i8]* %12 to i32*
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %2, i64 16
  %23 = bitcast i8* %22 to i64*
  %24 = bitcast i8* %19 to i64*
  %25 = load i64, i64* %23, align 1
  store i64 %25, i64* %24, align 4
  %26 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %27 = load i8, i8* %26, align 8
  %28 = zext i8 %27 to i64
  %29 = call fastcc i32 @chacha20_poly1305_open_gather(i8* nonnull %17, i8* %1, i8* nonnull %18, i64 12, i8* %4, i64 %5, i8* %6, i64 %7, i8* %8, i64 %9, i64 %28)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #4
  br label %30

30:                                               ; preds = %15, %14
  %31 = phi i32 [ 0, %14 ], [ %29, %15 ]
  ret i32 %31
}

declare void @CRYPTO_hchacha20(i8*, i8*, i8*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
