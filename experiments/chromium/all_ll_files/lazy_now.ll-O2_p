; ModuleID = '../../base/task/sequence_manager/lazy_now.cc'
source_filename = "../../base/task/sequence_manager/lazy_now.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::sequence_manager::LazyNow" = type { %"class.base::TickClock"*, %"class.absl::optional" }
%"class.base::TickClock" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

@_ZN4base16sequence_manager7LazyNowC1ENS_9TimeTicksE = hidden unnamed_addr alias void (%"class.base::sequence_manager::LazyNow"*, i64), void (%"class.base::sequence_manager::LazyNow"*, i64)* @_ZN4base16sequence_manager7LazyNowC2ENS_9TimeTicksE
@_ZN4base16sequence_manager7LazyNowC1EPKNS_9TickClockE = hidden unnamed_addr alias void (%"class.base::sequence_manager::LazyNow"*, %"class.base::TickClock"*), void (%"class.base::sequence_manager::LazyNow"*, %"class.base::TickClock"*)* @_ZN4base16sequence_manager7LazyNowC2EPKNS_9TickClockE
@_ZN4base16sequence_manager7LazyNowC1EOS1_ = hidden unnamed_addr alias void (%"class.base::sequence_manager::LazyNow"*, %"class.base::sequence_manager::LazyNow"*), void (%"class.base::sequence_manager::LazyNow"*, %"class.base::sequence_manager::LazyNow"*)* @_ZN4base16sequence_manager7LazyNowC2EOS1_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base16sequence_manager7LazyNowC2ENS_9TimeTicksE(%"class.base::sequence_manager::LazyNow"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 0
  store %"class.base::TickClock"* null, %"class.base::TickClock"** %3, align 8
  %4 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %4, align 8
  %5 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base16sequence_manager7LazyNowC2EPKNS_9TickClockE(%"class.base::sequence_manager::LazyNow"* nocapture, %"class.base::TickClock"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 0
  store %"class.base::TickClock"* %1, %"class.base::TickClock"** %3, align 8
  %4 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16sequence_manager7LazyNowC2EOS1_(%"class.base::sequence_manager::LazyNow"* nocapture, %"class.base::sequence_manager::LazyNow"* nocapture dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %1, i64 0, i32 0
  %4 = bitcast %"class.base::sequence_manager::LazyNow"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::sequence_manager::LazyNow"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  store %"class.base::TickClock"* null, %"class.base::TickClock"** %3, align 8
  store i8 0, i8* %8, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base16sequence_manager7LazyNow3NowEv(%"class.base::sequence_manager::LazyNow"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  br label %20

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 0
  %10 = load %"class.base::TickClock"*, %"class.base::TickClock"** %9, align 8
  %11 = bitcast %"class.base::TickClock"* %10 to i64 (%"class.base::TickClock"*)***
  %12 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %11, align 8
  %13 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %12, i64 2
  %14 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %13, align 8
  %15 = tail call i64 %14(%"class.base::TickClock"* %10) #3
  %16 = load i8, i8* %2, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds %"class.base::sequence_manager::LazyNow", %"class.base::sequence_manager::LazyNow"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %15, i64* %18, align 8
  br i1 %17, label %19, label %20

19:                                               ; preds = %8
  store i8 1, i8* %2, align 8
  br label %20

20:                                               ; preds = %5, %8, %19
  %21 = phi i64 [ %7, %5 ], [ %15, %8 ], [ %15, %19 ]
  ret i64 %21
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
