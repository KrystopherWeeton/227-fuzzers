; ModuleID = '../../third_party/fontconfig/src/src/fcrange.c'
source_filename = "../../third_party/fontconfig/src/src/fcrange.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._FcRange = type { double, double }
%struct._FcValuePromotionBuffer = type { %union.anon }
%union.anon = type { double, [248 x i8] }
%struct._FcSerialize = type { i64, %struct._FcCharSetFreezer*, i8*, [8191 x %struct._FcSerializeBucket*] }
%struct._FcCharSetFreezer = type opaque
%struct._FcSerializeBucket = type { %struct._FcSerializeBucket*, i8*, i64 }

@FcRangeCreateDouble = hidden alias %struct._FcRange* (double, double), %struct._FcRange* (double, double)* @IA__FcRangeCreateDouble
@FcRangeCreateInteger = hidden alias %struct._FcRange* (i32, i32), %struct._FcRange* (i32, i32)* @IA__FcRangeCreateInteger
@FcRangeDestroy = hidden alias void (%struct._FcRange*), void (%struct._FcRange*)* @IA__FcRangeDestroy
@FcRangeCopy = hidden alias %struct._FcRange* (%struct._FcRange*), %struct._FcRange* (%struct._FcRange*)* @IA__FcRangeCopy
@FcRangeGetDouble = hidden alias i32 (%struct._FcRange*, double*, double*), i32 (%struct._FcRange*, double*, double*)* @IA__FcRangeGetDouble

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._FcRange* @IA__FcRangeCreateDouble(double, double) #0 {
  %3 = tail call noalias i8* @malloc(i64 16) #9
  %4 = bitcast i8* %3 to %struct._FcRange*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = bitcast i8* %3 to double*
  store double %0, double* %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to double*
  store double %1, double* %9, align 8
  br label %10

10:                                               ; preds = %2, %6
  ret %struct._FcRange* %4
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._FcRange* @IA__FcRangeCreateInteger(i32, i32) #0 {
  %3 = tail call noalias i8* @malloc(i64 16) #9
  %4 = bitcast i8* %3 to %struct._FcRange*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = uitofp i32 %0 to double
  %8 = bitcast i8* %3 to double*
  store double %7, double* %8, align 8
  %9 = uitofp i32 %1 to double
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  br label %12

12:                                               ; preds = %2, %6
  ret %struct._FcRange* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcRangeDestroy(%struct._FcRange* nocapture) #2 {
  %2 = bitcast %struct._FcRange* %0 to i8*
  tail call void @free(i8* %2) #9
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._FcRange* @IA__FcRangeCopy(%struct._FcRange* nocapture readonly) #0 {
  %2 = bitcast %struct._FcRange* %0 to <2 x i64>*
  %3 = load <2 x i64>, <2 x i64>* %2, align 8
  %4 = tail call noalias i8* @malloc(i64 16) #9
  %5 = bitcast i8* %4 to %struct._FcRange*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = bitcast i8* %4 to <2 x i64>*
  store <2 x i64> %3, <2 x i64>* %8, align 8
  br label %9

9:                                                ; preds = %1, %7
  ret %struct._FcRange* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @IA__FcRangeGetDouble(%struct._FcRange* readonly, double*, double*) #4 {
  %4 = icmp eq %struct._FcRange* %0, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %3
  %6 = icmp eq double* %1, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = bitcast %struct._FcRange* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast double* %1 to i64*
  store i64 %9, i64* %10, align 8
  br label %11

11:                                               ; preds = %5, %7
  %12 = icmp eq double* %2, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %0, i64 0, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast double* %2 to i64*
  store i64 %16, i64* %17, align 8
  br label %18

18:                                               ; preds = %13, %11, %3
  %19 = phi i32 [ 0, %3 ], [ 1, %11 ], [ 1, %13 ]
  ret i32 %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden %struct._FcRange* @FcRangePromote(double, %struct._FcValuePromotionBuffer*) local_unnamed_addr #5 {
  %3 = bitcast %struct._FcValuePromotionBuffer* %1 to %struct._FcRange*
  %4 = getelementptr inbounds %struct._FcValuePromotionBuffer, %struct._FcValuePromotionBuffer* %1, i64 0, i32 0, i32 0
  store double %0, double* %4, align 8
  %5 = getelementptr inbounds %struct._FcValuePromotionBuffer, %struct._FcValuePromotionBuffer* %1, i64 0, i32 0, i32 1
  %6 = bitcast [248 x i8]* %5 to double*
  store double %0, double* %6, align 8
  ret %struct._FcRange* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @FcRangeIsInRange(%struct._FcRange* nocapture readonly, %struct._FcRange* nocapture readonly) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp ult double %4, %6
  br i1 %7, label %15, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp ole double %10, %12
  %14 = zext i1 %13 to i32
  br label %15

15:                                               ; preds = %2, %8
  %16 = phi i32 [ 0, %2 ], [ %14, %8 ]
  ret i32 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @FcRangeCompare(i32, %struct._FcRange* nocapture readonly, %struct._FcRange* nocapture readonly) local_unnamed_addr #6 {
  switch i32 %0, label %76 [
    i32 22, label %4
    i32 24, label %16
    i32 25, label %16
    i32 23, label %28
    i32 26, label %40
    i32 27, label %52
    i32 28, label %58
    i32 29, label %64
    i32 30, label %70
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %6, %8
  br i1 %9, label %10, label %76

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fcmp oeq double %12, %14
  br label %76

16:                                               ; preds = %3, %3
  %17 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %20 = load double, double* %19, align 8
  %21 = fcmp ult double %18, %20
  br i1 %21, label %76, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fcmp ole double %24, %26
  br label %76

28:                                               ; preds = %3
  %29 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %30 = load double, double* %29, align 8
  %31 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = fcmp une double %30, %32
  br i1 %33, label %76, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %36 = load double, double* %35, align 8
  %37 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %38 = load double, double* %37, align 8
  %39 = fcmp une double %36, %38
  br label %76

40:                                               ; preds = %3
  %41 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %44 = load double, double* %43, align 8
  %45 = fcmp ult double %42, %44
  br i1 %45, label %76, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %48 = load double, double* %47, align 8
  %49 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %50 = load double, double* %49, align 8
  %51 = fcmp ugt double %48, %50
  br label %76

52:                                               ; preds = %3
  %53 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %54 = load double, double* %53, align 8
  %55 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %56 = load double, double* %55, align 8
  %57 = fcmp olt double %54, %56
  br label %76

58:                                               ; preds = %3
  %59 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 1
  %60 = load double, double* %59, align 8
  %61 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 0
  %62 = load double, double* %61, align 8
  %63 = fcmp ole double %60, %62
  br label %76

64:                                               ; preds = %3
  %65 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %66 = load double, double* %65, align 8
  %67 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %68 = load double, double* %67, align 8
  %69 = fcmp ogt double %66, %68
  br label %76

70:                                               ; preds = %3
  %71 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %1, i64 0, i32 0
  %72 = load double, double* %71, align 8
  %73 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %2, i64 0, i32 1
  %74 = load double, double* %73, align 8
  %75 = fcmp oge double %72, %74
  br label %76

76:                                               ; preds = %46, %40, %22, %16, %3, %28, %34, %4, %10, %70, %64, %58, %52
  %77 = phi i1 [ %75, %70 ], [ %69, %64 ], [ %63, %58 ], [ %57, %52 ], [ false, %4 ], [ %15, %10 ], [ true, %28 ], [ %39, %34 ], [ false, %3 ], [ false, %16 ], [ %27, %22 ], [ true, %40 ], [ %51, %46 ]
  %78 = zext i1 %77 to i32
  ret i32 %78
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @FcRangeHash(%struct._FcRange* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = fmul double %3, 1.000000e+02
  %5 = fptosi double %4 to i32
  %6 = getelementptr inbounds %struct._FcRange, %struct._FcRange* %0, i64 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = fmul double %7, 1.000000e+02
  %9 = fptosi double %8 to i32
  %10 = shl i32 %5, 1
  %11 = xor i32 %10, %5
  %12 = shl i32 %9, 9
  %13 = xor i32 %11, %12
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcRangeSerializeAlloc(%struct._FcSerialize*, %struct._FcRange*) local_unnamed_addr #2 {
  %3 = bitcast %struct._FcRange* %1 to i8*
  %4 = tail call i32 @FcSerializeAlloc(%struct._FcSerialize* %0, i8* %3, i32 16) #9
  %5 = icmp ne i32 %4, 0
  %6 = zext i1 %5 to i32
  ret i32 %6
}

declare hidden i32 @FcSerializeAlloc(%struct._FcSerialize*, i8*, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcRange* @FcRangeSerialize(%struct._FcSerialize*, %struct._FcRange*) local_unnamed_addr #2 {
  %3 = bitcast %struct._FcRange* %1 to i8*
  %4 = tail call i8* @FcSerializePtr(%struct._FcSerialize* %0, i8* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = bitcast i8* %4 to %struct._FcRange*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %3, i64 16, i1 false)
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi %struct._FcRange* [ %7, %6 ], [ null, %2 ]
  ret %struct._FcRange* %9
}

declare hidden i8* @FcSerializePtr(%struct._FcSerialize*, i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #8

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
