; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsalpha.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsalpha.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmstransform_struct = type { i32, i32, {}*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, float*, i8*, i32)*, i8* (%struct._cmstransform_struct*, float*, i8*, i32)*, %struct._cmsCACHE, %struct._cmsPipeline_struct*, %struct._cmsPipeline_struct*, %struct._cms_NAMEDCOLORLIST_struct*, %struct._cms_NAMEDCOLORLIST_struct*, i32, i32, %struct.cmsCIEXYZ, %struct.cmsCIEXYZ, %struct.cmsSEQ*, i32, double, i32, %struct._cmsContext_struct*, i8*, void (%struct._cmsContext_struct*, i8*)*, void (%struct._cmstransform_struct*, i8*, i8*, i32, i32)* }
%struct._cmsCACHE = type { [16 x i16], [16 x i16] }
%struct._cmsPipeline_struct = type { %struct._cmsStage_struct*, i32, i32, i8*, void (i16*, i16*, i8*)*, void (float*, float*, i8*)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*)*, %struct._cmsContext_struct*, i32 }
%struct._cmsStage_struct = type { %struct._cmsContext_struct*, i32, i32, i32, i32, void (float*, float*, %struct._cmsStage_struct*)*, i8* (%struct._cmsStage_struct*)*, void (%struct._cmsStage_struct*)*, i8*, %struct._cmsStage_struct* }
%struct._cms_NAMEDCOLORLIST_struct = type { i32, i32, i32, [33 x i8], [33 x i8], %struct._cmsNAMEDCOLOR*, %struct._cmsContext_struct* }
%struct._cmsNAMEDCOLOR = type { [256 x i8], [3 x i16], [16 x i16] }
%struct.cmsCIEXYZ = type { double, double, double }
%struct.cmsSEQ = type { i32, %struct._cmsContext_struct*, %struct.cmsPSEQDESC* }
%struct.cmsPSEQDESC = type { i32, i32, i64, i32, %union.cmsProfileID, %struct._cms_MLU_struct*, %struct._cms_MLU_struct*, %struct._cms_MLU_struct* }
%union.cmsProfileID = type { [4 x i32] }
%struct._cms_MLU_struct = type { %struct._cmsContext_struct*, i32, i32, %struct._cmsMLUentry*, i32, i32, i8* }
%struct._cmsMLUentry = type { i16, i16, i32, i32 }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsStride = type { i32, i32, i32, i32 }

@_cmsGetFormatterAlpha.FormattersAlpha = internal unnamed_addr constant [6 x [6 x void (i8*, i8*)*]] [[6 x void (i8*, i8*)*] [void (i8*, i8*)* @copy8, void (i8*, i8*)* @from8to16, void (i8*, i8*)* @from8to16SE, void (i8*, i8*)* @from8toHLF, void (i8*, i8*)* @from8toFLT, void (i8*, i8*)* @from8toDBL], [6 x void (i8*, i8*)*] [void (i8*, i8*)* @from16to8, void (i8*, i8*)* @copy16, void (i8*, i8*)* @from16to16, void (i8*, i8*)* @from16toHLF, void (i8*, i8*)* @from16toFLT, void (i8*, i8*)* @from16toDBL], [6 x void (i8*, i8*)*] [void (i8*, i8*)* @from16SEto8, void (i8*, i8*)* @from16to16, void (i8*, i8*)* @copy16, void (i8*, i8*)* @from16SEtoHLF, void (i8*, i8*)* @from16SEtoFLT, void (i8*, i8*)* @from16SEtoDBL], [6 x void (i8*, i8*)*] [void (i8*, i8*)* @fromHLFto8, void (i8*, i8*)* @fromHLFto16, void (i8*, i8*)* @fromHLFto16SE, void (i8*, i8*)* @copy16, void (i8*, i8*)* @fromHLFtoFLT, void (i8*, i8*)* @fromHLFtoDBL], [6 x void (i8*, i8*)*] [void (i8*, i8*)* @fromFLTto8, void (i8*, i8*)* @fromFLTto16, void (i8*, i8*)* @fromFLTto16SE, void (i8*, i8*)* @fromFLTtoHLF, void (i8*, i8*)* @copy32, void (i8*, i8*)* @fromFLTtoDBL], [6 x void (i8*, i8*)*] [void (i8*, i8*)* @fromDBLto8, void (i8*, i8*)* @fromDBLto16, void (i8*, i8*)* @fromDBLto16SE, void (i8*, i8*)* @fromDBLtoHLF, void (i8*, i8*)* @fromDBLtoFLT, void (i8*, i8*)* @copy64]], align 16
@.str = private unnamed_addr constant [33 x i8] c"Unrecognized alpha channel width\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_cmsHandleExtraChannels(%struct._cmstransform_struct* nocapture readonly, i8*, i8*, i32, i32, %struct.cmsStride* nocapture readonly) local_unnamed_addr #0 {
  %7 = alloca [16 x i32], align 16
  %8 = alloca [16 x i32], align 16
  %9 = alloca [16 x i32], align 16
  %10 = alloca [16 x i32], align 16
  %11 = alloca [16 x i8*], align 16
  %12 = alloca [16 x i8*], align 16
  %13 = alloca [16 x i32], align 16
  %14 = alloca [16 x i32], align 16
  %15 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 64, i1 false)
  %16 = bitcast [16 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 64, i1 false)
  %17 = bitcast [16 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 64, i1 false)
  %18 = bitcast [16 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 64, i1 false)
  %19 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 17
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 67108864
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %301, label %23

23:                                               ; preds = %6
  %24 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i8* %1, %2
  %30 = and i1 %29, %28
  br i1 %30, label %301, label %31

31:                                               ; preds = %23
  %32 = lshr i32 %25, 7
  %33 = and i32 %32, 7
  %34 = lshr i32 %27, 7
  %35 = and i32 %34, 7
  %36 = icmp ne i32 %33, %35
  %37 = icmp eq i32 %33, 0
  %38 = or i1 %37, %36
  br i1 %38, label %301, label %39

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  %43 = getelementptr inbounds [16 x i32], [16 x i32]* %8, i64 0, i64 0
  call fastcc void @ComputeComponentIncrements(i32 %25, i32 %41, i32* nonnull %42, i32* nonnull %43)
  %44 = load i32, i32* %26, align 4
  %45 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 0
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 0
  call fastcc void @ComputeComponentIncrements(i32 %44, i32 %46, i32* nonnull %47, i32* nonnull %48)
  %49 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 20
  %50 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %49, align 8
  %51 = load i32, i32* %24, align 8
  %52 = load i32, i32* %26, align 4
  %53 = and i32 %51, 4194311
  switch i32 %53, label %58 [
    i32 4194304, label %63
    i32 4194306, label %61
    i32 4194308, label %62
    i32 2, label %54
  ]

54:                                               ; preds = %39
  %55 = and i32 %51, 2048
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 1, i32 2
  br label %63

58:                                               ; preds = %39
  %59 = icmp ne i32 %53, 1
  %60 = sext i1 %59 to i32
  br label %63

61:                                               ; preds = %39
  br label %63

62:                                               ; preds = %39
  br label %63

63:                                               ; preds = %62, %61, %58, %54, %39
  %64 = phi i32 [ %60, %58 ], [ 5, %39 ], [ %57, %54 ], [ 3, %61 ], [ 4, %62 ]
  %65 = and i32 %52, 4194311
  switch i32 %65, label %70 [
    i32 4194304, label %75
    i32 4194306, label %73
    i32 4194308, label %74
    i32 2, label %66
  ]

66:                                               ; preds = %63
  %67 = and i32 %52, 2048
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i32 1, i32 2
  br label %75

70:                                               ; preds = %63
  %71 = icmp ne i32 %65, 1
  %72 = sext i1 %71 to i32
  br label %75

73:                                               ; preds = %63
  br label %75

74:                                               ; preds = %63
  br label %75

75:                                               ; preds = %74, %73, %70, %66, %63
  %76 = phi i32 [ %72, %70 ], [ 5, %63 ], [ %69, %66 ], [ 3, %73 ], [ 4, %74 ]
  %77 = or i32 %76, %64
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %75
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %50, i32 8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0)) #6
  br label %301

80:                                               ; preds = %75
  %81 = sext i32 %64 to i64
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds [6 x [6 x void (i8*, i8*)*]], [6 x [6 x void (i8*, i8*)*]]* @_cmsGetFormatterAlpha.FormattersAlpha, i64 0, i64 %81, i64 %82
  %84 = load void (i8*, i8*)*, void (i8*, i8*)** %83, align 8
  %85 = icmp eq void (i8*, i8*)* %84, null
  br i1 %85, label %301, label %86

86:                                               ; preds = %80
  %87 = icmp eq i32 %33, 1
  br i1 %87, label %88, label %128

88:                                               ; preds = %86
  %89 = icmp eq i32 %4, 0
  br i1 %89, label %301, label %90

90:                                               ; preds = %88
  %91 = load i32, i32* %42, align 16
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %1, i64 %92
  %94 = load i32, i32* %47, align 16
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %2, i64 %95
  %97 = icmp eq i32 %3, 0
  %98 = load i32, i32* %43, align 16
  %99 = zext i32 %98 to i64
  %100 = load i32, i32* %48, align 16
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 0
  %103 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 1
  br label %104

104:                                              ; preds = %121, %90
  %105 = phi i32 [ 0, %90 ], [ %125, %121 ]
  %106 = phi i32 [ 0, %90 ], [ %123, %121 ]
  %107 = phi i32 [ 0, %90 ], [ %126, %121 ]
  br i1 %97, label %121, label %108

108:                                              ; preds = %104
  %109 = zext i32 %105 to i64
  %110 = getelementptr inbounds i8, i8* %96, i64 %109
  %111 = zext i32 %106 to i64
  %112 = getelementptr inbounds i8, i8* %93, i64 %111
  br label %113

113:                                              ; preds = %113, %108
  %114 = phi i8* [ %118, %113 ], [ %110, %108 ]
  %115 = phi i8* [ %117, %113 ], [ %112, %108 ]
  %116 = phi i32 [ %119, %113 ], [ 0, %108 ]
  tail call void %84(i8* %114, i8* %115) #6
  %117 = getelementptr inbounds i8, i8* %115, i64 %99
  %118 = getelementptr inbounds i8, i8* %114, i64 %101
  %119 = add nuw i32 %116, 1
  %120 = icmp eq i32 %119, %3
  br i1 %120, label %121, label %113

121:                                              ; preds = %113, %104
  %122 = load i32, i32* %102, align 4
  %123 = add i32 %122, %106
  %124 = load i32, i32* %103, align 4
  %125 = add i32 %124, %105
  %126 = add nuw i32 %107, 1
  %127 = icmp eq i32 %126, %4
  br i1 %127, label %301, label %104

128:                                              ; preds = %86
  %129 = bitcast [16 x i8*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %129) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 -86, i64 128, i1 false)
  %130 = bitcast [16 x i8*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %130) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %130, i8 -86, i64 128, i1 false)
  %131 = bitcast [16 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %131) #6
  %132 = bitcast [16 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %132) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %131, i8 0, i64 64, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %132, i8 0, i64 64, i1 false)
  %133 = icmp eq i32 %4, 0
  br i1 %133, label %300, label %134

134:                                              ; preds = %128
  %135 = icmp eq i32 %3, 0
  %136 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 0
  %137 = getelementptr inbounds %struct.cmsStride, %struct.cmsStride* %5, i64 0, i32 1
  %138 = zext i32 %33 to i64
  %139 = zext i32 %33 to i64
  %140 = zext i32 %33 to i64
  %141 = and i64 %140, 6
  %142 = add nsw i64 %141, -2
  %143 = lshr exact i64 %142, 1
  %144 = add nuw i64 %143, 1
  %145 = icmp ult i32 %33, 2
  %146 = and i64 %140, 6
  %147 = and i64 %144, 1
  %148 = icmp eq i64 %142, 0
  %149 = sub nuw i64 %144, %147
  %150 = icmp eq i64 %147, 0
  %151 = icmp eq i64 %146, %140
  br label %152

152:                                              ; preds = %134, %297
  %153 = phi i32 [ 0, %134 ], [ %298, %297 ]
  br i1 %145, label %154, label %156

154:                                              ; preds = %239, %152
  %155 = phi i64 [ 0, %152 ], [ %146, %239 ]
  br label %241

156:                                              ; preds = %152
  br i1 %148, label %212, label %157

157:                                              ; preds = %156, %157
  %158 = phi i64 [ %209, %157 ], [ 0, %156 ]
  %159 = phi i64 [ %210, %157 ], [ %149, %156 ]
  %160 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %158
  %161 = bitcast i32* %160 to <2 x i32>*
  %162 = load <2 x i32>, <2 x i32>* %161, align 16
  %163 = zext <2 x i32> %162 to <2 x i64>
  %164 = getelementptr inbounds i8, i8* %1, <2 x i64> %163
  %165 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 %158
  %166 = bitcast i32* %165 to <2 x i32>*
  %167 = load <2 x i32>, <2 x i32>* %166, align 16
  %168 = zext <2 x i32> %167 to <2 x i64>
  %169 = getelementptr inbounds i8, <2 x i8*> %164, <2 x i64> %168
  %170 = getelementptr inbounds [16 x i8*], [16 x i8*]* %11, i64 0, i64 %158
  %171 = bitcast i8** %170 to <2 x i8*>*
  store <2 x i8*> %169, <2 x i8*>* %171, align 16
  %172 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %158
  %173 = bitcast i32* %172 to <2 x i32>*
  %174 = load <2 x i32>, <2 x i32>* %173, align 16
  %175 = zext <2 x i32> %174 to <2 x i64>
  %176 = getelementptr inbounds i8, i8* %2, <2 x i64> %175
  %177 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %158
  %178 = bitcast i32* %177 to <2 x i32>*
  %179 = load <2 x i32>, <2 x i32>* %178, align 16
  %180 = zext <2 x i32> %179 to <2 x i64>
  %181 = getelementptr inbounds i8, <2 x i8*> %176, <2 x i64> %180
  %182 = getelementptr inbounds [16 x i8*], [16 x i8*]* %12, i64 0, i64 %158
  %183 = bitcast i8** %182 to <2 x i8*>*
  store <2 x i8*> %181, <2 x i8*>* %183, align 16
  %184 = or i64 %158, 2
  %185 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %184
  %186 = bitcast i32* %185 to <2 x i32>*
  %187 = load <2 x i32>, <2 x i32>* %186, align 8
  %188 = zext <2 x i32> %187 to <2 x i64>
  %189 = getelementptr inbounds i8, i8* %1, <2 x i64> %188
  %190 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 %184
  %191 = bitcast i32* %190 to <2 x i32>*
  %192 = load <2 x i32>, <2 x i32>* %191, align 8
  %193 = zext <2 x i32> %192 to <2 x i64>
  %194 = getelementptr inbounds i8, <2 x i8*> %189, <2 x i64> %193
  %195 = getelementptr inbounds [16 x i8*], [16 x i8*]* %11, i64 0, i64 %184
  %196 = bitcast i8** %195 to <2 x i8*>*
  store <2 x i8*> %194, <2 x i8*>* %196, align 16
  %197 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %184
  %198 = bitcast i32* %197 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 8
  %200 = zext <2 x i32> %199 to <2 x i64>
  %201 = getelementptr inbounds i8, i8* %2, <2 x i64> %200
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %184
  %203 = bitcast i32* %202 to <2 x i32>*
  %204 = load <2 x i32>, <2 x i32>* %203, align 8
  %205 = zext <2 x i32> %204 to <2 x i64>
  %206 = getelementptr inbounds i8, <2 x i8*> %201, <2 x i64> %205
  %207 = getelementptr inbounds [16 x i8*], [16 x i8*]* %12, i64 0, i64 %184
  %208 = bitcast i8** %207 to <2 x i8*>*
  store <2 x i8*> %206, <2 x i8*>* %208, align 16
  %209 = add i64 %158, 4
  %210 = add i64 %159, -2
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %157, !llvm.loop !2

212:                                              ; preds = %157, %156
  %213 = phi i64 [ 0, %156 ], [ %209, %157 ]
  br i1 %150, label %239, label %214

214:                                              ; preds = %212
  %215 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %213
  %216 = bitcast i32* %215 to <2 x i32>*
  %217 = load <2 x i32>, <2 x i32>* %216, align 8
  %218 = zext <2 x i32> %217 to <2 x i64>
  %219 = getelementptr inbounds i8, i8* %1, <2 x i64> %218
  %220 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 %213
  %221 = bitcast i32* %220 to <2 x i32>*
  %222 = load <2 x i32>, <2 x i32>* %221, align 8
  %223 = zext <2 x i32> %222 to <2 x i64>
  %224 = getelementptr inbounds i8, <2 x i8*> %219, <2 x i64> %223
  %225 = getelementptr inbounds [16 x i8*], [16 x i8*]* %11, i64 0, i64 %213
  %226 = bitcast i8** %225 to <2 x i8*>*
  store <2 x i8*> %224, <2 x i8*>* %226, align 16
  %227 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %213
  %228 = bitcast i32* %227 to <2 x i32>*
  %229 = load <2 x i32>, <2 x i32>* %228, align 8
  %230 = zext <2 x i32> %229 to <2 x i64>
  %231 = getelementptr inbounds i8, i8* %2, <2 x i64> %230
  %232 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %213
  %233 = bitcast i32* %232 to <2 x i32>*
  %234 = load <2 x i32>, <2 x i32>* %233, align 8
  %235 = zext <2 x i32> %234 to <2 x i64>
  %236 = getelementptr inbounds i8, <2 x i8*> %231, <2 x i64> %235
  %237 = getelementptr inbounds [16 x i8*], [16 x i8*]* %12, i64 0, i64 %213
  %238 = bitcast i8** %237 to <2 x i8*>*
  store <2 x i8*> %236, <2 x i8*>* %238, align 16
  br label %239

239:                                              ; preds = %212, %214
  br i1 %151, label %240, label %154

240:                                              ; preds = %241, %239
  br i1 %135, label %263, label %266

241:                                              ; preds = %154, %241
  %242 = phi i64 [ %261, %241 ], [ %155, %154 ]
  %243 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %1, i64 %245
  %247 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 %242
  %248 = load i32, i32* %247, align 4
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %246, i64 %249
  %251 = getelementptr inbounds [16 x i8*], [16 x i8*]* %11, i64 0, i64 %242
  store i8* %250, i8** %251, align 8
  %252 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %242
  %253 = load i32, i32* %252, align 4
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %2, i64 %254
  %256 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %242
  %257 = load i32, i32* %256, align 4
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %255, i64 %258
  %260 = getelementptr inbounds [16 x i8*], [16 x i8*]* %12, i64 0, i64 %242
  store i8* %259, i8** %260, align 8
  %261 = add nuw nsw i64 %242, 1
  %262 = icmp eq i64 %261, %138
  br i1 %262, label %240, label %241, !llvm.loop !4

263:                                              ; preds = %284, %240
  %264 = load i32, i32* %136, align 4
  %265 = load i32, i32* %137, align 4
  br label %287

266:                                              ; preds = %240, %284
  %267 = phi i32 [ %285, %284 ], [ 0, %240 ]
  br label %268

268:                                              ; preds = %268, %266
  %269 = phi i64 [ 0, %266 ], [ %282, %268 ]
  %270 = getelementptr inbounds [16 x i8*], [16 x i8*]* %12, i64 0, i64 %269
  %271 = load i8*, i8** %270, align 8
  %272 = getelementptr inbounds [16 x i8*], [16 x i8*]* %11, i64 0, i64 %269
  %273 = load i8*, i8** %272, align 8
  tail call void %84(i8* %271, i8* %273) #6
  %274 = getelementptr inbounds [16 x i32], [16 x i32]* %8, i64 0, i64 %269
  %275 = load i32, i32* %274, align 4
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %273, i64 %276
  store i8* %277, i8** %272, align 8
  %278 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 %269
  %279 = load i32, i32* %278, align 4
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds i8, i8* %271, i64 %280
  store i8* %281, i8** %270, align 8
  %282 = add nuw nsw i64 %269, 1
  %283 = icmp eq i64 %282, %139
  br i1 %283, label %284, label %268

284:                                              ; preds = %268
  %285 = add nuw i32 %267, 1
  %286 = icmp eq i32 %285, %3
  br i1 %286, label %263, label %266

287:                                              ; preds = %287, %263
  %288 = phi i64 [ 0, %263 ], [ %295, %287 ]
  %289 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 %288
  %290 = load i32, i32* %289, align 4
  %291 = add i32 %290, %264
  store i32 %291, i32* %289, align 4
  %292 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %288
  %293 = load i32, i32* %292, align 4
  %294 = add i32 %293, %265
  store i32 %294, i32* %292, align 4
  %295 = add nuw nsw i64 %288, 1
  %296 = icmp eq i64 %295, %140
  br i1 %296, label %297, label %287, !llvm.loop !6

297:                                              ; preds = %287
  %298 = add nuw i32 %153, 1
  %299 = icmp eq i32 %298, %4
  br i1 %299, label %300, label %152

300:                                              ; preds = %297, %128
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %132) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %131) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %130) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %129) #6
  br label %301

301:                                              ; preds = %121, %88, %79, %31, %300, %80, %23, %6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ComputeComponentIncrements(i32, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast [16 x i32]* %5 to i8*
  %7 = and i32 %0, 4096
  %8 = icmp eq i32 %7, 0
  %9 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 64, i1 false) #6
  %10 = lshr i32 %0, 7
  %11 = and i32 %10, 7
  %12 = lshr i32 %0, 3
  %13 = and i32 %12, 15
  %14 = add nuw nsw i32 %13, %11
  %15 = and i32 %0, 7
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 8, i32 %15
  br i1 %8, label %296, label %18

18:                                               ; preds = %4
  %19 = add nsw i32 %14, -1
  %20 = icmp ugt i32 %19, 14
  br i1 %20, label %579, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 64, i1 false) #6
  %23 = icmp eq i32 %11, 0
  br i1 %23, label %26, label %101

24:                                               ; preds = %612, %609, %606, %603, %600, %597, %101
  %25 = icmp eq i32 %14, 0
  br i1 %25, label %281, label %26

26:                                               ; preds = %24, %21
  %27 = and i32 %0, 1024
  %28 = icmp eq i32 %27, 0
  %29 = zext i32 %14 to i64
  %30 = icmp ult i32 %14, 8
  br i1 %30, label %31, label %34

31:                                               ; preds = %99, %26
  %32 = phi i64 [ 0, %26 ], [ %35, %99 ]
  %33 = phi i32 [ 0, %26 ], [ %36, %99 ]
  br label %103

34:                                               ; preds = %26
  %35 = and i64 %29, 24
  %36 = trunc i64 %35 to i32
  %37 = insertelement <4 x i32> undef, i32 %14, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = insertelement <4 x i32> undef, i32 %14, i32 0
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> zeroinitializer
  %41 = add nsw i64 %35, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 1
  %45 = icmp eq i64 %41, 0
  br i1 %45, label %82, label %46

46:                                               ; preds = %34
  %47 = sub nuw nsw i64 %43, %44
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %77, %48 ]
  %50 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %46 ], [ %78, %48 ]
  %51 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %46 ], [ %79, %48 ]
  %52 = phi i64 [ %47, %46 ], [ %80, %48 ]
  %53 = xor <4 x i32> %50, <i32 -1, i32 -1, i32 -1, i32 -1>
  %54 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %50
  %55 = add nsw <4 x i32> %38, %53
  %56 = add nsw <4 x i32> %40, %54
  %57 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %58 = select i1 %28, <4 x i32> %51, <4 x i32> %55
  %59 = select i1 %28, <4 x i32> %57, <4 x i32> %56
  %60 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %49
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %61, align 16
  %62 = getelementptr inbounds i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %63, align 16
  %64 = or i64 %49, 8
  %65 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %66 = sub <4 x i32> <i32 -9, i32 -9, i32 -9, i32 -9>, %50
  %67 = sub <4 x i32> <i32 -13, i32 -13, i32 -13, i32 -13>, %50
  %68 = add nsw <4 x i32> %38, %66
  %69 = add nsw <4 x i32> %40, %67
  %70 = add <4 x i32> %51, <i32 12, i32 12, i32 12, i32 12>
  %71 = select i1 %28, <4 x i32> %65, <4 x i32> %68
  %72 = select i1 %28, <4 x i32> %70, <4 x i32> %69
  %73 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %64
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %74, align 16
  %75 = getelementptr inbounds i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %76, align 16
  %77 = add i64 %49, 16
  %78 = add <4 x i32> %50, <i32 16, i32 16, i32 16, i32 16>
  %79 = add <4 x i32> %51, <i32 16, i32 16, i32 16, i32 16>
  %80 = add i64 %52, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %48, !llvm.loop !7

82:                                               ; preds = %48, %34
  %83 = phi i64 [ 0, %34 ], [ %77, %48 ]
  %84 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %34 ], [ %78, %48 ]
  %85 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %34 ], [ %79, %48 ]
  %86 = icmp eq i64 %44, 0
  br i1 %86, label %99, label %87

87:                                               ; preds = %82
  %88 = xor <4 x i32> %84, <i32 -1, i32 -1, i32 -1, i32 -1>
  %89 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %84
  %90 = add nsw <4 x i32> %38, %88
  %91 = add nsw <4 x i32> %40, %89
  %92 = add <4 x i32> %85, <i32 4, i32 4, i32 4, i32 4>
  %93 = select i1 %28, <4 x i32> %85, <4 x i32> %90
  %94 = select i1 %28, <4 x i32> %92, <4 x i32> %91
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %83
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 16
  %97 = getelementptr inbounds i32, i32* %95, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %98, align 16
  br label %99

99:                                               ; preds = %82, %87
  %100 = icmp eq i64 %35, %29
  br i1 %100, label %114, label %31

101:                                              ; preds = %21
  store i32 %17, i32* %3, align 4
  %102 = icmp eq i32 %11, 1
  br i1 %102, label %24, label %597

103:                                              ; preds = %31, %103
  %104 = phi i64 [ %111, %103 ], [ %32, %31 ]
  %105 = phi i32 [ %112, %103 ], [ %33, %31 ]
  %106 = xor i32 %105, -1
  %107 = add nsw i32 %14, %106
  %108 = trunc i64 %104 to i32
  %109 = select i1 %28, i32 %108, i32 %107
  %110 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %104
  store i32 %109, i32* %110, align 4
  %111 = add nuw nsw i64 %104, 1
  %112 = add nuw nsw i32 %105, 1
  %113 = icmp eq i64 %111, %29
  br i1 %113, label %114, label %103, !llvm.loop !8

114:                                              ; preds = %103, %99
  %115 = and i32 %0, 16384
  %116 = icmp ne i32 %115, 0
  %117 = icmp ne i32 %14, 0
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %221

119:                                              ; preds = %114
  %120 = load i32, i32* %22, align 16
  %121 = icmp eq i32 %19, 0
  br i1 %121, label %218, label %122

122:                                              ; preds = %119
  %123 = zext i32 %19 to i64
  %124 = icmp ult i32 %19, 8
  br i1 %124, label %209, label %125

125:                                              ; preds = %122
  %126 = and i64 %123, 4294967288
  %127 = add nsw i64 %126, -8
  %128 = lshr exact i64 %127, 3
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 3
  %131 = icmp ult i64 %127, 24
  br i1 %131, label %187, label %132

132:                                              ; preds = %125
  %133 = sub nsw i64 %129, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %184, %134 ]
  %136 = phi i64 [ %133, %132 ], [ %185, %134 ]
  %137 = or i64 %135, 1
  %138 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %135
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %145, align 16
  %146 = getelementptr inbounds i32, i32* %144, i64 4
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %147, align 16
  %148 = or i64 %135, 8
  %149 = or i64 %135, 9
  %150 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = getelementptr inbounds i32, i32* %150, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %148
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %157, align 16
  %158 = getelementptr inbounds i32, i32* %156, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %159, align 16
  %160 = or i64 %135, 16
  %161 = or i64 %135, 17
  %162 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %161
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = getelementptr inbounds i32, i32* %162, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %160
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %169, align 16
  %170 = getelementptr inbounds i32, i32* %168, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %171, align 16
  %172 = or i64 %135, 24
  %173 = or i64 %135, 25
  %174 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %172
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %176, <4 x i32>* %181, align 16
  %182 = getelementptr inbounds i32, i32* %180, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %183, align 16
  %184 = add i64 %135, 32
  %185 = add i64 %136, -4
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %134, !llvm.loop !9

187:                                              ; preds = %134, %125
  %188 = phi i64 [ 0, %125 ], [ %184, %134 ]
  %189 = icmp eq i64 %130, 0
  br i1 %189, label %207, label %190

190:                                              ; preds = %187, %190
  %191 = phi i64 [ %204, %190 ], [ %188, %187 ]
  %192 = phi i64 [ %205, %190 ], [ %130, %187 ]
  %193 = or i64 %191, 1
  %194 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4
  %200 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %191
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %201, align 16
  %202 = getelementptr inbounds i32, i32* %200, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %203, align 16
  %204 = add i64 %191, 8
  %205 = add i64 %192, -1
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %190, !llvm.loop !10

207:                                              ; preds = %190, %187
  %208 = icmp eq i64 %126, %123
  br i1 %208, label %218, label %209

209:                                              ; preds = %207, %122
  %210 = phi i64 [ 0, %122 ], [ %126, %207 ]
  br label %211

211:                                              ; preds = %209, %211
  %212 = phi i64 [ %213, %211 ], [ %210, %209 ]
  %213 = add nuw nsw i64 %212, 1
  %214 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %212
  store i32 %215, i32* %216, align 4
  %217 = icmp eq i64 %213, %123
  br i1 %217, label %218, label %211, !llvm.loop !12

218:                                              ; preds = %211, %207, %119
  %219 = phi i64 [ 0, %119 ], [ %123, %207 ], [ %123, %211 ]
  %220 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %219
  store i32 %120, i32* %220, align 4
  br label %221

221:                                              ; preds = %218, %114
  %222 = icmp ult i32 %14, 8
  br i1 %222, label %223, label %225

223:                                              ; preds = %279, %221
  %224 = phi i64 [ 0, %221 ], [ %226, %279 ]
  br label %289

225:                                              ; preds = %221
  %226 = and i64 %29, 24
  %227 = insertelement <4 x i32> undef, i32 %1, i32 0
  %228 = shufflevector <4 x i32> %227, <4 x i32> undef, <4 x i32> zeroinitializer
  %229 = insertelement <4 x i32> undef, i32 %1, i32 0
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> zeroinitializer
  %231 = add nsw i64 %226, -8
  %232 = lshr exact i64 %231, 3
  %233 = add nuw nsw i64 %232, 1
  %234 = and i64 %233, 1
  %235 = icmp eq i64 %231, 0
  br i1 %235, label %265, label %236

236:                                              ; preds = %225
  %237 = sub nuw nsw i64 %233, %234
  br label %238

238:                                              ; preds = %238, %236
  %239 = phi i64 [ 0, %236 ], [ %262, %238 ]
  %240 = phi i64 [ %237, %236 ], [ %263, %238 ]
  %241 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %239
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 16
  %244 = getelementptr inbounds i32, i32* %241, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 16
  %247 = mul <4 x i32> %243, %228
  %248 = mul <4 x i32> %246, %230
  %249 = bitcast i32* %241 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %249, align 16
  %250 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %250, align 16
  %251 = or i64 %239, 8
  %252 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %251
  %253 = bitcast i32* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 16
  %255 = getelementptr inbounds i32, i32* %252, i64 4
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 16
  %258 = mul <4 x i32> %254, %228
  %259 = mul <4 x i32> %257, %230
  %260 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %260, align 16
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %261, align 16
  %262 = add i64 %239, 16
  %263 = add i64 %240, -2
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %238, !llvm.loop !13

265:                                              ; preds = %238, %225
  %266 = phi i64 [ 0, %225 ], [ %262, %238 ]
  %267 = icmp eq i64 %234, 0
  br i1 %267, label %279, label %268

268:                                              ; preds = %265
  %269 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %266
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 16
  %272 = getelementptr inbounds i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 16
  %275 = mul <4 x i32> %271, %228
  %276 = mul <4 x i32> %274, %230
  %277 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %277, align 16
  %278 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %278, align 16
  br label %279

279:                                              ; preds = %265, %268
  %280 = icmp eq i64 %226, %29
  br i1 %280, label %281, label %223

281:                                              ; preds = %289, %279, %24
  br i1 %23, label %579, label %282

282:                                              ; preds = %281
  %283 = zext i32 %13 to i64
  %284 = getelementptr [16 x i32], [16 x i32]* %5, i64 0, i64 %283
  %285 = bitcast i32* %284 to i8*
  %286 = shl nuw nsw i32 %10, 2
  %287 = and i32 %286, 28
  %288 = zext i32 %287 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %285, i64 %288, i1 false) #6
  br label %579

289:                                              ; preds = %223, %289
  %290 = phi i64 [ %294, %289 ], [ %224, %223 ]
  %291 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = mul i32 %292, %1
  store i32 %293, i32* %291, align 4
  %294 = add nuw nsw i64 %290, 1
  %295 = icmp eq i64 %294, %29
  br i1 %295, label %281, label %289, !llvm.loop !14

296:                                              ; preds = %4
  %297 = mul nuw nsw i32 %17, %14
  %298 = add nsw i32 %14, -1
  %299 = icmp ugt i32 %298, 14
  br i1 %299, label %579, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 64, i1 false) #6
  %302 = icmp eq i32 %11, 0
  br i1 %302, label %305, label %380

303:                                              ; preds = %595, %592, %589, %586, %583, %580, %380
  %304 = icmp eq i32 %14, 0
  br i1 %304, label %571, label %305

305:                                              ; preds = %303, %300
  %306 = and i32 %0, 1024
  %307 = icmp eq i32 %306, 0
  %308 = zext i32 %14 to i64
  %309 = icmp ult i32 %14, 8
  br i1 %309, label %310, label %313

310:                                              ; preds = %378, %305
  %311 = phi i64 [ 0, %305 ], [ %314, %378 ]
  %312 = phi i32 [ 0, %305 ], [ %315, %378 ]
  br label %382

313:                                              ; preds = %305
  %314 = and i64 %308, 24
  %315 = trunc i64 %314 to i32
  %316 = insertelement <4 x i32> undef, i32 %14, i32 0
  %317 = shufflevector <4 x i32> %316, <4 x i32> undef, <4 x i32> zeroinitializer
  %318 = insertelement <4 x i32> undef, i32 %14, i32 0
  %319 = shufflevector <4 x i32> %318, <4 x i32> undef, <4 x i32> zeroinitializer
  %320 = add nsw i64 %314, -8
  %321 = lshr exact i64 %320, 3
  %322 = add nuw nsw i64 %321, 1
  %323 = and i64 %322, 1
  %324 = icmp eq i64 %320, 0
  br i1 %324, label %361, label %325

325:                                              ; preds = %313
  %326 = sub nuw nsw i64 %322, %323
  br label %327

327:                                              ; preds = %327, %325
  %328 = phi i64 [ 0, %325 ], [ %356, %327 ]
  %329 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %325 ], [ %357, %327 ]
  %330 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %325 ], [ %358, %327 ]
  %331 = phi i64 [ %326, %325 ], [ %359, %327 ]
  %332 = xor <4 x i32> %329, <i32 -1, i32 -1, i32 -1, i32 -1>
  %333 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %329
  %334 = add nsw <4 x i32> %317, %332
  %335 = add nsw <4 x i32> %319, %333
  %336 = add <4 x i32> %330, <i32 4, i32 4, i32 4, i32 4>
  %337 = select i1 %307, <4 x i32> %330, <4 x i32> %334
  %338 = select i1 %307, <4 x i32> %336, <4 x i32> %335
  %339 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %328
  %340 = bitcast i32* %339 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %340, align 16
  %341 = getelementptr inbounds i32, i32* %339, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %338, <4 x i32>* %342, align 16
  %343 = or i64 %328, 8
  %344 = add <4 x i32> %330, <i32 8, i32 8, i32 8, i32 8>
  %345 = sub <4 x i32> <i32 -9, i32 -9, i32 -9, i32 -9>, %329
  %346 = sub <4 x i32> <i32 -13, i32 -13, i32 -13, i32 -13>, %329
  %347 = add nsw <4 x i32> %317, %345
  %348 = add nsw <4 x i32> %319, %346
  %349 = add <4 x i32> %330, <i32 12, i32 12, i32 12, i32 12>
  %350 = select i1 %307, <4 x i32> %344, <4 x i32> %347
  %351 = select i1 %307, <4 x i32> %349, <4 x i32> %348
  %352 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %343
  %353 = bitcast i32* %352 to <4 x i32>*
  store <4 x i32> %350, <4 x i32>* %353, align 16
  %354 = getelementptr inbounds i32, i32* %352, i64 4
  %355 = bitcast i32* %354 to <4 x i32>*
  store <4 x i32> %351, <4 x i32>* %355, align 16
  %356 = add i64 %328, 16
  %357 = add <4 x i32> %329, <i32 16, i32 16, i32 16, i32 16>
  %358 = add <4 x i32> %330, <i32 16, i32 16, i32 16, i32 16>
  %359 = add i64 %331, -2
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %327, !llvm.loop !15

361:                                              ; preds = %327, %313
  %362 = phi i64 [ 0, %313 ], [ %356, %327 ]
  %363 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %313 ], [ %357, %327 ]
  %364 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %313 ], [ %358, %327 ]
  %365 = icmp eq i64 %323, 0
  br i1 %365, label %378, label %366

366:                                              ; preds = %361
  %367 = xor <4 x i32> %363, <i32 -1, i32 -1, i32 -1, i32 -1>
  %368 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %363
  %369 = add nsw <4 x i32> %317, %367
  %370 = add nsw <4 x i32> %319, %368
  %371 = add <4 x i32> %364, <i32 4, i32 4, i32 4, i32 4>
  %372 = select i1 %307, <4 x i32> %364, <4 x i32> %369
  %373 = select i1 %307, <4 x i32> %371, <4 x i32> %370
  %374 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %362
  %375 = bitcast i32* %374 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %375, align 16
  %376 = getelementptr inbounds i32, i32* %374, i64 4
  %377 = bitcast i32* %376 to <4 x i32>*
  store <4 x i32> %373, <4 x i32>* %377, align 16
  br label %378

378:                                              ; preds = %361, %366
  %379 = icmp eq i64 %314, %308
  br i1 %379, label %393, label %310

380:                                              ; preds = %300
  store i32 %297, i32* %3, align 4
  %381 = icmp eq i32 %11, 1
  br i1 %381, label %303, label %580

382:                                              ; preds = %310, %382
  %383 = phi i64 [ %390, %382 ], [ %311, %310 ]
  %384 = phi i32 [ %391, %382 ], [ %312, %310 ]
  %385 = xor i32 %384, -1
  %386 = add nsw i32 %14, %385
  %387 = trunc i64 %383 to i32
  %388 = select i1 %307, i32 %387, i32 %386
  %389 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %383
  store i32 %388, i32* %389, align 4
  %390 = add nuw nsw i64 %383, 1
  %391 = add nuw nsw i32 %384, 1
  %392 = icmp eq i64 %390, %308
  br i1 %392, label %393, label %382, !llvm.loop !16

393:                                              ; preds = %382, %378
  %394 = and i32 %0, 16384
  %395 = icmp ne i32 %394, 0
  %396 = icmp ugt i32 %14, 1
  %397 = and i1 %395, %396
  br i1 %397, label %398, label %500

398:                                              ; preds = %393
  %399 = load i32, i32* %301, align 16
  %400 = icmp eq i32 %298, 0
  br i1 %400, label %497, label %401

401:                                              ; preds = %398
  %402 = zext i32 %298 to i64
  %403 = icmp ult i32 %298, 8
  br i1 %403, label %488, label %404

404:                                              ; preds = %401
  %405 = and i64 %402, 4294967288
  %406 = add nsw i64 %405, -8
  %407 = lshr exact i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = and i64 %408, 3
  %410 = icmp ult i64 %406, 24
  br i1 %410, label %466, label %411

411:                                              ; preds = %404
  %412 = sub nsw i64 %408, %409
  br label %413

413:                                              ; preds = %413, %411
  %414 = phi i64 [ 0, %411 ], [ %463, %413 ]
  %415 = phi i64 [ %412, %411 ], [ %464, %413 ]
  %416 = or i64 %414, 1
  %417 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %416
  %418 = bitcast i32* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 4
  %420 = getelementptr inbounds i32, i32* %417, i64 4
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4
  %423 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %414
  %424 = bitcast i32* %423 to <4 x i32>*
  store <4 x i32> %419, <4 x i32>* %424, align 16
  %425 = getelementptr inbounds i32, i32* %423, i64 4
  %426 = bitcast i32* %425 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 16
  %427 = or i64 %414, 8
  %428 = or i64 %414, 9
  %429 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %428
  %430 = bitcast i32* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 4
  %432 = getelementptr inbounds i32, i32* %429, i64 4
  %433 = bitcast i32* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 4
  %435 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %427
  %436 = bitcast i32* %435 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %436, align 16
  %437 = getelementptr inbounds i32, i32* %435, i64 4
  %438 = bitcast i32* %437 to <4 x i32>*
  store <4 x i32> %434, <4 x i32>* %438, align 16
  %439 = or i64 %414, 16
  %440 = or i64 %414, 17
  %441 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %440
  %442 = bitcast i32* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 4
  %444 = getelementptr inbounds i32, i32* %441, i64 4
  %445 = bitcast i32* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 4
  %447 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %439
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %443, <4 x i32>* %448, align 16
  %449 = getelementptr inbounds i32, i32* %447, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %450, align 16
  %451 = or i64 %414, 24
  %452 = or i64 %414, 25
  %453 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %452
  %454 = bitcast i32* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 4
  %456 = getelementptr inbounds i32, i32* %453, i64 4
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 4
  %459 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %451
  %460 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> %455, <4 x i32>* %460, align 16
  %461 = getelementptr inbounds i32, i32* %459, i64 4
  %462 = bitcast i32* %461 to <4 x i32>*
  store <4 x i32> %458, <4 x i32>* %462, align 16
  %463 = add i64 %414, 32
  %464 = add i64 %415, -4
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %413, !llvm.loop !17

466:                                              ; preds = %413, %404
  %467 = phi i64 [ 0, %404 ], [ %463, %413 ]
  %468 = icmp eq i64 %409, 0
  br i1 %468, label %486, label %469

469:                                              ; preds = %466, %469
  %470 = phi i64 [ %483, %469 ], [ %467, %466 ]
  %471 = phi i64 [ %484, %469 ], [ %409, %466 ]
  %472 = or i64 %470, 1
  %473 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %472
  %474 = bitcast i32* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 4
  %476 = getelementptr inbounds i32, i32* %473, i64 4
  %477 = bitcast i32* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 4
  %479 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %470
  %480 = bitcast i32* %479 to <4 x i32>*
  store <4 x i32> %475, <4 x i32>* %480, align 16
  %481 = getelementptr inbounds i32, i32* %479, i64 4
  %482 = bitcast i32* %481 to <4 x i32>*
  store <4 x i32> %478, <4 x i32>* %482, align 16
  %483 = add i64 %470, 8
  %484 = add i64 %471, -1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %469, !llvm.loop !18

486:                                              ; preds = %469, %466
  %487 = icmp eq i64 %405, %402
  br i1 %487, label %497, label %488

488:                                              ; preds = %486, %401
  %489 = phi i64 [ 0, %401 ], [ %405, %486 ]
  br label %490

490:                                              ; preds = %488, %490
  %491 = phi i64 [ %492, %490 ], [ %489, %488 ]
  %492 = add nuw nsw i64 %491, 1
  %493 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %492
  %494 = load i32, i32* %493, align 4
  %495 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %491
  store i32 %494, i32* %495, align 4
  %496 = icmp eq i64 %492, %402
  br i1 %496, label %497, label %490, !llvm.loop !19

497:                                              ; preds = %490, %486, %398
  %498 = phi i64 [ 0, %398 ], [ %402, %486 ], [ %402, %490 ]
  %499 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %498
  store i32 %399, i32* %499, align 4
  br label %500

500:                                              ; preds = %497, %393
  %501 = icmp ugt i32 %17, 1
  %502 = icmp ne i32 %14, 0
  %503 = and i1 %501, %502
  br i1 %503, label %504, label %571

504:                                              ; preds = %500
  %505 = icmp ult i32 %14, 8
  br i1 %505, label %562, label %506

506:                                              ; preds = %504
  %507 = and i64 %308, 24
  %508 = insertelement <4 x i32> undef, i32 %17, i32 0
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> zeroinitializer
  %510 = insertelement <4 x i32> undef, i32 %17, i32 0
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> zeroinitializer
  %512 = add nsw i64 %507, -8
  %513 = lshr exact i64 %512, 3
  %514 = add nuw nsw i64 %513, 1
  %515 = and i64 %514, 1
  %516 = icmp eq i64 %512, 0
  br i1 %516, label %546, label %517

517:                                              ; preds = %506
  %518 = sub nuw nsw i64 %514, %515
  br label %519

519:                                              ; preds = %519, %517
  %520 = phi i64 [ 0, %517 ], [ %543, %519 ]
  %521 = phi i64 [ %518, %517 ], [ %544, %519 ]
  %522 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %520
  %523 = bitcast i32* %522 to <4 x i32>*
  %524 = load <4 x i32>, <4 x i32>* %523, align 16
  %525 = getelementptr inbounds i32, i32* %522, i64 4
  %526 = bitcast i32* %525 to <4 x i32>*
  %527 = load <4 x i32>, <4 x i32>* %526, align 16
  %528 = mul <4 x i32> %524, %509
  %529 = mul <4 x i32> %527, %511
  %530 = bitcast i32* %522 to <4 x i32>*
  store <4 x i32> %528, <4 x i32>* %530, align 16
  %531 = bitcast i32* %525 to <4 x i32>*
  store <4 x i32> %529, <4 x i32>* %531, align 16
  %532 = or i64 %520, 8
  %533 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %532
  %534 = bitcast i32* %533 to <4 x i32>*
  %535 = load <4 x i32>, <4 x i32>* %534, align 16
  %536 = getelementptr inbounds i32, i32* %533, i64 4
  %537 = bitcast i32* %536 to <4 x i32>*
  %538 = load <4 x i32>, <4 x i32>* %537, align 16
  %539 = mul <4 x i32> %535, %509
  %540 = mul <4 x i32> %538, %511
  %541 = bitcast i32* %533 to <4 x i32>*
  store <4 x i32> %539, <4 x i32>* %541, align 16
  %542 = bitcast i32* %536 to <4 x i32>*
  store <4 x i32> %540, <4 x i32>* %542, align 16
  %543 = add i64 %520, 16
  %544 = add i64 %521, -2
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %546, label %519, !llvm.loop !20

546:                                              ; preds = %519, %506
  %547 = phi i64 [ 0, %506 ], [ %543, %519 ]
  %548 = icmp eq i64 %515, 0
  br i1 %548, label %560, label %549

549:                                              ; preds = %546
  %550 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %547
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 16
  %553 = getelementptr inbounds i32, i32* %550, i64 4
  %554 = bitcast i32* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 16
  %556 = mul <4 x i32> %552, %509
  %557 = mul <4 x i32> %555, %511
  %558 = bitcast i32* %550 to <4 x i32>*
  store <4 x i32> %556, <4 x i32>* %558, align 16
  %559 = bitcast i32* %553 to <4 x i32>*
  store <4 x i32> %557, <4 x i32>* %559, align 16
  br label %560

560:                                              ; preds = %546, %549
  %561 = icmp eq i64 %507, %308
  br i1 %561, label %571, label %562

562:                                              ; preds = %560, %504
  %563 = phi i64 [ 0, %504 ], [ %507, %560 ]
  br label %564

564:                                              ; preds = %562, %564
  %565 = phi i64 [ %569, %564 ], [ %563, %562 ]
  %566 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %565
  %567 = load i32, i32* %566, align 4
  %568 = mul i32 %567, %17
  store i32 %568, i32* %566, align 4
  %569 = add nuw nsw i64 %565, 1
  %570 = icmp eq i64 %569, %308
  br i1 %570, label %571, label %564, !llvm.loop !21

571:                                              ; preds = %564, %560, %500, %303
  br i1 %302, label %579, label %572

572:                                              ; preds = %571
  %573 = zext i32 %13 to i64
  %574 = getelementptr [16 x i32], [16 x i32]* %5, i64 0, i64 %573
  %575 = bitcast i32* %574 to i8*
  %576 = shl nuw nsw i32 %10, 2
  %577 = and i32 %576, 28
  %578 = zext i32 %577 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %575, i64 %578, i1 false) #6
  br label %579

579:                                              ; preds = %572, %571, %296, %282, %281, %18
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #6
  ret void

580:                                              ; preds = %380
  %581 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 %297, i32* %581, align 4
  %582 = icmp eq i32 %11, 2
  br i1 %582, label %303, label %583

583:                                              ; preds = %580
  %584 = getelementptr inbounds i32, i32* %3, i64 2
  store i32 %297, i32* %584, align 4
  %585 = icmp eq i32 %11, 3
  br i1 %585, label %303, label %586

586:                                              ; preds = %583
  %587 = getelementptr inbounds i32, i32* %3, i64 3
  store i32 %297, i32* %587, align 4
  %588 = icmp eq i32 %11, 4
  br i1 %588, label %303, label %589

589:                                              ; preds = %586
  %590 = getelementptr inbounds i32, i32* %3, i64 4
  store i32 %297, i32* %590, align 4
  %591 = icmp eq i32 %11, 5
  br i1 %591, label %303, label %592

592:                                              ; preds = %589
  %593 = getelementptr inbounds i32, i32* %3, i64 5
  store i32 %297, i32* %593, align 4
  %594 = icmp eq i32 %11, 6
  br i1 %594, label %303, label %595

595:                                              ; preds = %592
  %596 = getelementptr inbounds i32, i32* %3, i64 6
  store i32 %297, i32* %596, align 4
  br label %303

597:                                              ; preds = %101
  %598 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 %17, i32* %598, align 4
  %599 = icmp eq i32 %11, 2
  br i1 %599, label %24, label %600

600:                                              ; preds = %597
  %601 = getelementptr inbounds i32, i32* %3, i64 2
  store i32 %17, i32* %601, align 4
  %602 = icmp eq i32 %11, 3
  br i1 %602, label %24, label %603

603:                                              ; preds = %600
  %604 = getelementptr inbounds i32, i32* %3, i64 3
  store i32 %17, i32* %604, align 4
  %605 = icmp eq i32 %11, 4
  br i1 %605, label %24, label %606

606:                                              ; preds = %603
  %607 = getelementptr inbounds i32, i32* %3, i64 4
  store i32 %17, i32* %607, align 4
  %608 = icmp eq i32 %11, 5
  br i1 %608, label %24, label %609

609:                                              ; preds = %606
  %610 = getelementptr inbounds i32, i32* %3, i64 5
  store i32 %17, i32* %610, align 4
  %611 = icmp eq i32 %11, 6
  br i1 %611, label %24, label %612

612:                                              ; preds = %609
  %613 = getelementptr inbounds i32, i32* %3, i64 6
  store i32 %17, i32* %613, align 4
  br label %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @copy8(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = load i8, i8* %1, align 1
  store i8 %3, i8* %0, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from8to16(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = or i16 %5, %4
  %7 = bitcast i8* %0 to i16*
  store i16 %6, i16* %7, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from8to16SE(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = or i16 %5, %4
  %7 = bitcast i8* %0 to i16*
  store i16 %6, i16* %7, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @from8toHLF(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = load i8, i8* %1, align 1
  %4 = uitofp i8 %3 to float
  %5 = fdiv float %4, 2.550000e+02
  %6 = tail call zeroext i16 @_cmsFloat2Half(float %5) #6
  %7 = bitcast i8* %0 to i16*
  store i16 %6, i16* %7, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from8toFLT(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = load i8, i8* %1, align 1
  %4 = uitofp i8 %3 to float
  %5 = fdiv float %4, 2.550000e+02
  %6 = bitcast i8* %0 to float*
  store float %5, float* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from8toDBL(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = load i8, i8* %1, align 1
  %4 = uitofp i8 %3 to double
  %5 = fdiv double %4, 2.550000e+02
  %6 = bitcast i8* %0 to double*
  store double %5, double* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from16to8(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = zext i16 %4 to i32
  %6 = mul nuw i32 %5, 65281
  %7 = add nuw i32 %6, 8388608
  %8 = lshr i32 %7, 24
  %9 = trunc i32 %8 to i8
  store i8 %9, i8* %0, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @copy16(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i16*
  %4 = bitcast i8* %0 to i16*
  %5 = load i16, i16* %3, align 1
  store i16 %5, i16* %4, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @from16to16(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call i16 @llvm.bswap.i16(i16 %4)
  %6 = bitcast i8* %0 to i16*
  store i16 %5, i16* %6, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @from16toHLF(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = uitofp i16 %4 to float
  %6 = fdiv float %5, 6.553500e+04
  %7 = tail call zeroext i16 @_cmsFloat2Half(float %6) #6
  %8 = bitcast i8* %0 to i16*
  store i16 %7, i16* %8, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from16toFLT(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = uitofp i16 %4 to float
  %6 = fdiv float %5, 6.553500e+04
  %7 = bitcast i8* %0 to float*
  store float %6, float* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @from16toDBL(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = uitofp i16 %4 to float
  %6 = fdiv float %5, 6.553500e+04
  %7 = fpext float %6 to double
  %8 = bitcast i8* %0 to double*
  store double %7, double* %8, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @from16SEto8(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call i16 @llvm.bswap.i16(i16 %4)
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %0, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @from16SEtoHLF(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call i16 @llvm.bswap.i16(i16 %4)
  %6 = uitofp i16 %5 to float
  %7 = fdiv float %6, 6.553500e+04
  %8 = tail call zeroext i16 @_cmsFloat2Half(float %7) #6
  %9 = bitcast i8* %0 to i16*
  store i16 %8, i16* %9, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @from16SEtoFLT(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call i16 @llvm.bswap.i16(i16 %4)
  %6 = uitofp i16 %5 to float
  %7 = fdiv float %6, 6.553500e+04
  %8 = bitcast i8* %0 to float*
  store float %7, float* %8, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @from16SEtoDBL(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call i16 @llvm.bswap.i16(i16 %4)
  %6 = uitofp i16 %5 to float
  %7 = fdiv float %6, 6.553500e+04
  %8 = fpext float %7 to double
  %9 = bitcast i8* %0 to double*
  store double %8, double* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromHLFto8(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call float @_cmsHalf2Float(i16 zeroext %4) #6
  %6 = fmul float %5, 2.550000e+02
  %7 = fpext float %6 to double
  %8 = fadd double %7, 5.000000e-01
  %9 = fcmp ugt double %8, 0.000000e+00
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = fcmp ult double %8, 2.550000e+02
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = fadd double %8, -3.276700e+04
  %14 = tail call double @llvm.floor.f64(double %13) #6
  %15 = fptosi double %14 to i32
  %16 = trunc i32 %15 to i8
  %17 = add i8 %16, -1
  br label %18

18:                                               ; preds = %2, %10, %12
  %19 = phi i8 [ %17, %12 ], [ 0, %2 ], [ -1, %10 ]
  store i8 %19, i8* %0, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromHLFto16(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call float @_cmsHalf2Float(i16 zeroext %4) #6
  %6 = fmul float %5, 6.553500e+04
  %7 = fpext float %6 to double
  %8 = fadd double %7, 5.000000e-01
  %9 = fcmp ugt double %8, 0.000000e+00
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = fcmp ult double %8, 6.553500e+04
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = fadd double %8, -3.276700e+04
  %14 = tail call double @llvm.floor.f64(double %13) #6
  %15 = fptosi double %14 to i32
  %16 = trunc i32 %15 to i16
  %17 = add i16 %16, 32767
  br label %18

18:                                               ; preds = %2, %10, %12
  %19 = phi i16 [ %17, %12 ], [ 0, %2 ], [ -1, %10 ]
  %20 = bitcast i8* %0 to i16*
  store i16 %19, i16* %20, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromHLFto16SE(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call float @_cmsHalf2Float(i16 zeroext %4) #6
  %6 = fmul float %5, 6.553500e+04
  %7 = fpext float %6 to double
  %8 = fadd double %7, 5.000000e-01
  %9 = fcmp ugt double %8, 0.000000e+00
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = fcmp ult double %8, 6.553500e+04
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = fadd double %8, -3.276700e+04
  %14 = tail call double @llvm.floor.f64(double %13) #6
  %15 = fptosi double %14 to i32
  %16 = trunc i32 %15 to i16
  %17 = add i16 %16, 32767
  br label %18

18:                                               ; preds = %2, %10, %12
  %19 = phi i16 [ %17, %12 ], [ 0, %2 ], [ -1, %10 ]
  %20 = tail call i16 @llvm.bswap.i16(i16 %19)
  %21 = bitcast i8* %0 to i16*
  store i16 %20, i16* %21, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromHLFtoFLT(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call float @_cmsHalf2Float(i16 zeroext %4) #6
  %6 = bitcast i8* %0 to float*
  store float %5, float* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromHLFtoDBL(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = tail call float @_cmsHalf2Float(i16 zeroext %4) #6
  %6 = fpext float %5 to double
  %7 = bitcast i8* %0 to double*
  store double %6, double* %7, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromFLTto8(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, 2.550000e+02
  %6 = fpext float %5 to double
  %7 = fadd double %6, 5.000000e-01
  %8 = fcmp ugt double %7, 0.000000e+00
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = fcmp ult double %7, 2.550000e+02
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = fadd double %7, -3.276700e+04
  %13 = tail call double @llvm.floor.f64(double %12) #6
  %14 = fptosi double %13 to i32
  %15 = trunc i32 %14 to i8
  %16 = add i8 %15, -1
  br label %17

17:                                               ; preds = %2, %9, %11
  %18 = phi i8 [ %16, %11 ], [ 0, %2 ], [ -1, %9 ]
  store i8 %18, i8* %0, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromFLTto16(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, 6.553500e+04
  %6 = fpext float %5 to double
  %7 = fadd double %6, 5.000000e-01
  %8 = fcmp ugt double %7, 0.000000e+00
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = fcmp ult double %7, 6.553500e+04
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = fadd double %7, -3.276700e+04
  %13 = tail call double @llvm.floor.f64(double %12) #6
  %14 = fptosi double %13 to i32
  %15 = trunc i32 %14 to i16
  %16 = add i16 %15, 32767
  br label %17

17:                                               ; preds = %2, %9, %11
  %18 = phi i16 [ %16, %11 ], [ 0, %2 ], [ -1, %9 ]
  %19 = bitcast i8* %0 to i16*
  store i16 %18, i16* %19, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromFLTto16SE(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, 6.553500e+04
  %6 = fpext float %5 to double
  %7 = fadd double %6, 5.000000e-01
  %8 = fcmp ugt double %7, 0.000000e+00
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = fcmp ult double %7, 6.553500e+04
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = fadd double %7, -3.276700e+04
  %13 = tail call double @llvm.floor.f64(double %12) #6
  %14 = fptosi double %13 to i32
  %15 = trunc i32 %14 to i16
  %16 = add i16 %15, 32767
  br label %17

17:                                               ; preds = %2, %9, %11
  %18 = phi i16 [ %16, %11 ], [ 0, %2 ], [ -1, %9 ]
  %19 = tail call i16 @llvm.bswap.i16(i16 %18)
  %20 = bitcast i8* %0 to i16*
  store i16 %19, i16* %20, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromFLTtoHLF(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 4
  %5 = tail call zeroext i16 @_cmsFloat2Half(float %4) #6
  %6 = bitcast i8* %0 to i16*
  store i16 %5, i16* %6, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @copy32(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i32*
  %4 = bitcast i8* %0 to i32*
  %5 = load i32, i32* %3, align 1
  store i32 %5, i32* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fromFLTtoDBL(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = bitcast i8* %0 to double*
  store double %5, double* %6, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromDBLto8(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to double*
  %4 = load double, double* %3, align 8
  %5 = fmul double %4, 2.550000e+02
  %6 = fadd double %5, 5.000000e-01
  %7 = fcmp ugt double %6, 0.000000e+00
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = fcmp ult double %6, 2.550000e+02
  br i1 %9, label %10, label %16

10:                                               ; preds = %8
  %11 = fadd double %6, -3.276700e+04
  %12 = tail call double @llvm.floor.f64(double %11) #6
  %13 = fptosi double %12 to i32
  %14 = trunc i32 %13 to i8
  %15 = add i8 %14, -1
  br label %16

16:                                               ; preds = %2, %8, %10
  %17 = phi i8 [ %15, %10 ], [ 0, %2 ], [ -1, %8 ]
  store i8 %17, i8* %0, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromDBLto16(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to double*
  %4 = load double, double* %3, align 8
  %5 = fmul double %4, 6.553500e+04
  %6 = fadd double %5, 5.000000e-01
  %7 = fcmp ugt double %6, 0.000000e+00
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = fcmp ult double %6, 6.553500e+04
  br i1 %9, label %10, label %16

10:                                               ; preds = %8
  %11 = fadd double %6, -3.276700e+04
  %12 = tail call double @llvm.floor.f64(double %11) #6
  %13 = fptosi double %12 to i32
  %14 = trunc i32 %13 to i16
  %15 = add i16 %14, 32767
  br label %16

16:                                               ; preds = %2, %8, %10
  %17 = phi i16 [ %15, %10 ], [ 0, %2 ], [ -1, %8 ]
  %18 = bitcast i8* %0 to i16*
  store i16 %17, i16* %18, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fromDBLto16SE(i8* nocapture, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %1 to double*
  %4 = load double, double* %3, align 8
  %5 = fmul double %4, 6.553500e+04
  %6 = fadd double %5, 5.000000e-01
  %7 = fcmp ugt double %6, 0.000000e+00
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = fcmp ult double %6, 6.553500e+04
  br i1 %9, label %10, label %16

10:                                               ; preds = %8
  %11 = fadd double %6, -3.276700e+04
  %12 = tail call double @llvm.floor.f64(double %11) #6
  %13 = fptosi double %12 to i32
  %14 = trunc i32 %13 to i16
  %15 = add i16 %14, 32767
  br label %16

16:                                               ; preds = %2, %8, %10
  %17 = phi i16 [ %15, %10 ], [ 0, %2 ], [ -1, %8 ]
  %18 = tail call i16 @llvm.bswap.i16(i16 %17)
  %19 = bitcast i8* %0 to i16*
  store i16 %18, i16* %19, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fromDBLtoHLF(i8* nocapture, i8* nocapture readonly) #0 {
  %3 = bitcast i8* %1 to double*
  %4 = load double, double* %3, align 8
  %5 = fptrunc double %4 to float
  %6 = tail call zeroext i16 @_cmsFloat2Half(float %5) #6
  %7 = bitcast i8* %0 to i16*
  store i16 %6, i16* %7, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fromDBLtoFLT(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to double*
  %4 = load double, double* %3, align 8
  %5 = fptrunc double %4 to float
  %6 = bitcast i8* %0 to float*
  store float %5, float* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @copy64(i8* nocapture, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to i64*
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %3, align 1
  store i64 %5, i64* %4, align 1
  ret void
}

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #4

declare zeroext i16 @_cmsFloat2Half(float) local_unnamed_addr #4

declare float @_cmsHalf2Float(i16 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !5, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !5, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !5, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !5, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !5, !3}
