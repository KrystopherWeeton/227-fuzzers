; ModuleID = '../../media/cast/common/clock_drift_smoother.cc'
source_filename = "../../media/cast/common/clock_drift_smoother.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::cast::ClockDriftSmoother" = type { %"class.base::TimeDelta", %"class.base::TimeTicks", double }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base9TimeDeltadvES0_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN5media4cast18ClockDriftSmootherC1EN4base9TimeDeltaE = hidden unnamed_addr alias void (%"class.media::cast::ClockDriftSmoother"*, i64), void (%"class.media::cast::ClockDriftSmoother"*, i64)* @_ZN5media4cast18ClockDriftSmootherC2EN4base9TimeDeltaE
@_ZN5media4cast18ClockDriftSmootherD1Ev = hidden unnamed_addr alias void (%"class.media::cast::ClockDriftSmoother"*), void (%"class.media::cast::ClockDriftSmoother"*)* @_ZN5media4cast18ClockDriftSmootherD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media4cast18ClockDriftSmootherC2EN4base9TimeDeltaE(%"class.media::cast::ClockDriftSmoother"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media4cast18ClockDriftSmootherD2Ev(%"class.media::cast::ClockDriftSmoother"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5media4cast18ClockDriftSmoother7CurrentEv(%"class.media::cast::ClockDriftSmoother"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  %4 = fcmp oge double %3, 0.000000e+00
  %5 = fadd double %3, 5.000000e-01
  %6 = tail call double @llvm.floor.f64(double %5) #8
  %7 = fadd double %3, -5.000000e-01
  %8 = tail call double @llvm.ceil.f64(double %7) #8
  %9 = select i1 %4, double %6, double %8
  %10 = fcmp ult double %9, 0xC3E0000000000000
  %11 = fcmp ugt double %9, 0x43DFFFFFFFFFFFFF
  %12 = fcmp ogt double %9, 0xC3E0000000000000
  %13 = select i1 %12, double %9, double 0xC3E0000000000000
  %14 = fptosi double %13 to i64
  %15 = select i1 %10, i64 0, i64 9223372036854775807
  %16 = select i1 %11, i64 %15, i64 %14
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast18ClockDriftSmoother5ResetEN4base9TimeTicksENS2_9TimeDeltaE(%"class.media::cast::ClockDriftSmoother"* nocapture, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %1, i64* %6, align 8
  %7 = call double @_ZNK4base9TimeDelta15InMicrosecondsFEv(%"class.base::TimeDelta"* nonnull %4) #8
  %8 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 2
  store double %7, double* %8, align 8
  ret void
}

declare double @_ZNK4base9TimeDelta15InMicrosecondsFEv(%"class.base::TimeDelta"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast18ClockDriftSmoother6UpdateEN4base9TimeTicksENS2_9TimeDeltaE(%"class.media::cast::ClockDriftSmoother"* nocapture, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = alloca %"class.base::TimeDelta", align 8
  %8 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %2, i64* %14, align 8
  %15 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %1, i64* %15, align 8
  %16 = call double @_ZNK4base9TimeDelta15InMicrosecondsFEv(%"class.base::TimeDelta"* nonnull %5) #8
  %17 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 2
  store double %16, double* %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  br label %51

18:                                               ; preds = %3
  %19 = bitcast %"class.base::TimeDelta"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %7, i64 0, i32 0
  %21 = sub nsw i64 %1, %10
  store i64 %21, i64* %20, align 8
  store i64 %1, i64* %9, align 8
  %22 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, -9223372036854775807
  %25 = icmp ult i64 %24, 2
  br i1 %25, label %33, label %26

26:                                               ; preds = %18
  %27 = icmp slt i64 %23, 0
  %28 = select i1 %27, i64 -9223372036854775808, i64 9223372036854775807
  %29 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %21, i64 %23) #8
  %30 = extractvalue { i64, i1 } %29, 1
  %31 = extractvalue { i64, i1 } %29, 0
  %32 = select i1 %30, i64 %28, i64 %31, !prof !2
  br label %41

33:                                               ; preds = %18
  %34 = add i64 %21, -9223372036854775807
  %35 = icmp ugt i64 %34, 1
  %36 = icmp eq i64 %21, %23
  %37 = or i1 %35, %36
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0)) #8
  %40 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  br label %41

41:                                               ; preds = %26, %33, %38
  %42 = phi i64 [ %32, %26 ], [ %23, %33 ], [ %23, %38 ]
  %43 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %7, i64 %42)
  %44 = call double @_ZNK4base9TimeDelta15InMicrosecondsFEv(%"class.base::TimeDelta"* nonnull %6) #8
  %45 = fmul double %43, %44
  %46 = fsub double 1.000000e+00, %43
  %47 = getelementptr inbounds %"class.media::cast::ClockDriftSmoother", %"class.media::cast::ClockDriftSmoother"* %0, i64 0, i32 2
  %48 = load double, double* %47, align 8
  %49 = fmul double %46, %48
  %50 = fadd double %45, %49
  store double %50, double* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %51

51:                                               ; preds = %41, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5media4cast18ClockDriftSmoother22GetDefaultTimeConstantEv() local_unnamed_addr #1 align 2 {
  ret i64 30000000
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
