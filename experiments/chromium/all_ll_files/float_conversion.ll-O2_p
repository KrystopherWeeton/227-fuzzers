; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/str_format/float_conversion.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/str_format/float_conversion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::uint128" = type { i64, i64 }
%"class.absl::str_format_internal::FormatConversionSpecImpl" = type { i8, i8, i32, i32 }
%"class.absl::str_format_internal::FormatSinkImpl" = type { %"class.absl::str_format_internal::FormatRawSinkImpl", i64, i8*, [1024 x i8] }
%"class.absl::str_format_internal::FormatRawSinkImpl" = type { i8*, void (i8*, i8*, i64)* }
%"class.absl::string_view" = type { i8*, i64 }
%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed" = type <{ %"class.absl::uint128", i32, [12 x i8] }>
%"struct.absl::str_format_internal::(anonymous namespace)::Buffer" = type { [85 x i8], i8*, i8* }
%"struct.absl::str_format_internal::(anonymous namespace)::FormatState" = type { i8, i32, %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%class.anon.1 = type <{ %"class.absl::FunctionRef", %"class.absl::uint128", i32, [12 x i8] }>
%"class.absl::FunctionRef" = type { %"union.absl::functional_internal::VoidPtr", void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)* }
%"union.absl::functional_internal::VoidPtr" = type { i8* }
%"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal" = type { i32, i32, [9 x i8], i32, %"class.absl::Span" }
%"class.absl::Span" = type { i32*, i64 }
%class.anon = type { %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* }
%class.anon.7 = type <{ %"class.absl::FunctionRef.5", %"class.absl::uint128", i32, [12 x i8] }>
%"class.absl::FunctionRef.5" = type { %"union.absl::functional_internal::VoidPtr", void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)* }
%"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator" = type { i32, i32, %"class.absl::Span" }
%class.anon.6 = type { %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, i32* }

@.str = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"*.*\00", align 1
@.str.26 = private unnamed_addr constant [33 x i8] c"0123456789ABCDEF0123456789abcdef\00", align 1
@_ZZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit = internal global %"class.absl::uint128" zeroinitializer, align 16
@_ZGVZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit = internal global i64 0, align 8
@switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE = private unnamed_addr constant [9 x [4 x i8]*] [[4 x i8]* @.str, [4 x i8]* @.str.1, [4 x i8]* @.str, [4 x i8]* @.str.1, [4 x i8]* @.str, [4 x i8]* @.str.1, [4 x i8]* @.str, [4 x i8]* @.str.1, [4 x i8]* @.str], align 8
@switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.30 = private unnamed_addr constant [9 x [4 x i8]*] [[4 x i8]* @.str.2, [4 x i8]* @.str.3, [4 x i8]* @.str.2, [4 x i8]* @.str.3, [4 x i8]* @.str.2, [4 x i8]* @.str.3, [4 x i8]* @.str.2, [4 x i8]* @.str.3, [4 x i8]* @.str.2], align 8
@switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.32 = private unnamed_addr constant [9 x i8] c"EeEeEeEeE", align 1
@switch.table._ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE = private unnamed_addr constant [18 x i8] c"csdiouxXfFeEgGaAnp", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEeRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %4 = alloca [171 x i8], align 16
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [20 x i8], align 16
  %9 = alloca [34 x i8], align 16
  %10 = alloca %"class.absl::string_view", align 8
  %11 = alloca i32, align 4
  %12 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", align 16
  %13 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", align 8
  %14 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", align 8
  %15 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", align 8
  %16 = bitcast x86_fp80 %0 to i80
  %17 = icmp slt i80 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %3
  %19 = fsub x86_fp80 0xK80000000000000000000, %0
  br label %30

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = and i8 %22, 2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %20
  %26 = and i8 %22, 4
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #13
  store i32 -1431655766, i32* %7, align 4
  br label %36

30:                                               ; preds = %25, %20, %18
  %31 = phi i8 [ 43, %20 ], [ 45, %18 ], [ 32, %25 ]
  %32 = phi x86_fp80 [ %0, %20 ], [ %19, %18 ], [ %0, %25 ]
  %33 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #13
  store i32 -1431655766, i32* %7, align 4
  %34 = bitcast i32* %7 to [4 x i8]*
  %35 = getelementptr inbounds [4 x i8], [4 x i8]* %34, i64 0, i64 1
  store i8 %31, i8* %33, align 4
  br label %36

36:                                               ; preds = %30, %28
  %37 = phi i8* [ %33, %30 ], [ %29, %28 ]
  %38 = phi x86_fp80 [ %32, %30 ], [ %0, %28 ]
  %39 = phi i8 [ %31, %30 ], [ 0, %28 ]
  %40 = phi i8* [ %35, %30 ], [ %29, %28 ]
  %41 = fcmp uno x86_fp80 %38, 0xK00000000000000000000
  br i1 %41, label %42, label %51

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %44 = load i8, i8* %43, align 4
  %45 = add i8 %44, -7
  %46 = icmp ult i8 %45, 9
  br i1 %46, label %47, label %64

47:                                               ; preds = %42
  %48 = sext i8 %45 to i64
  %49 = getelementptr inbounds [9 x [4 x i8]*], [9 x [4 x i8]*]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE, i64 0, i64 %48
  %50 = load [4 x i8]*, [4 x i8]** %49, align 8
  br label %64

51:                                               ; preds = %36
  %52 = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %38) #14
  %53 = fcmp oeq x86_fp80 %52, 0xK7FFF8000000000000000
  br i1 %53, label %55, label %54

54:                                               ; preds = %51
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #13
  br label %81

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %57 = load i8, i8* %56, align 4
  %58 = add i8 %57, -7
  %59 = icmp ult i8 %58, 9
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = sext i8 %58 to i64
  %62 = getelementptr inbounds [9 x [4 x i8]*], [9 x [4 x i8]*]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.30, i64 0, i64 %61
  %63 = load [4 x i8]*, [4 x i8]** %62, align 8
  br label %64

64:                                               ; preds = %55, %60, %42, %47
  %65 = phi [4 x i8]* [ @.str.1, %42 ], [ %50, %47 ], [ @.str.3, %55 ], [ %63, %60 ]
  %66 = getelementptr inbounds [4 x i8], [4 x i8]* %65, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %66, i64 3, i1 false) #13
  %67 = getelementptr inbounds i8, i8* %40, i64 3
  %68 = ptrtoint i8* %67 to i64
  %69 = ptrtoint i32* %7 to i64
  %70 = sub i64 %68, %69
  %71 = icmp sgt i64 %70, -1
  br i1 %71, label %73, label %72, !prof !2

72:                                               ; preds = %64
  call void @llvm.trap() #13
  unreachable

73:                                               ; preds = %64
  %74 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = and i8 %77, 1
  %79 = icmp ne i8 %78, 0
  %80 = call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %2, i8* nonnull %37, i64 %70, i32 %75, i32 -1, i1 zeroext %79) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #13
  br i1 %80, label %776, label %81

81:                                               ; preds = %73, %54
  %82 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 3
  %83 = load i32, i32* %82, align 4
  %84 = icmp slt i32 %83, 0
  %85 = select i1 %84, i32 6, i32 %83
  %86 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #13
  store i32 0, i32* %11, align 4
  %87 = bitcast %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #13
  %88 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %12, i64 0, i32 0, i32 0
  %89 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %12, i64 0, i32 0, i32 1
  %90 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %12, i64 0, i32 1
  %91 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %87, i8 -86, i64 32, i1 false) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91) #13, !noalias !3
  store i32 -1431655766, i32* %6, align 4, !noalias !3
  %92 = call x86_fp80 @frexpl(x86_fp80 %38, i32* nonnull %6) #13, !noalias !3
  %93 = call x86_fp80 @ldexpl(x86_fp80 %92, i32 64) #13, !noalias !3
  %94 = load i32, i32* %6, align 4, !noalias !3
  %95 = add nsw i32 %94, -64
  %96 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %12, i64 0, i32 0
  call void @_ZN4absl7uint128C1Ee(%"class.absl::uint128"* nonnull %96, x86_fp80 %93) #13
  store i32 %95, i32* %90, align 16, !alias.scope !3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #13, !noalias !3
  %97 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %97) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %97, i8 -86, i64 104, i1 false) #13
  %98 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %99 = load i8, i8* %98, align 4
  %100 = or i8 %99, 1
  switch i8 %100, label %774 [
    i8 9, label %101
    i8 11, label %287
    i8 13, label %354
    i8 15, label %499
  ]

101:                                              ; preds = %81
  %102 = load i64, i64* %88, align 16
  %103 = load i64, i64* %89, align 8
  %104 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #13
  store i8 %39, i8* %104, align 8
  %105 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 1
  store i32 %85, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 2
  store %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %106, align 8
  %107 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 3
  store %"class.absl::str_format_internal::FormatSinkImpl"* %2, %"class.absl::str_format_internal::FormatSinkImpl"** %107, align 8
  %108 = icmp sgt i32 %95, -1
  br i1 %108, label %109, label %126

109:                                              ; preds = %101
  %110 = icmp eq i64 %103, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %109
  %112 = call i64 @llvm.ctlz.i64(i64 %103, i1 true) #13, !range !6
  %113 = trunc i64 %112 to i32
  br label %120

114:                                              ; preds = %109
  %115 = icmp eq i64 %102, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %114
  %117 = call i64 @llvm.ctlz.i64(i64 %102, i1 true) #13, !range !6
  %118 = trunc i64 %117 to i32
  %119 = or i32 %118, 64
  br label %120

120:                                              ; preds = %116, %114, %111
  %121 = phi i32 [ %113, %111 ], [ %119, %116 ], [ 128, %114 ]
  %122 = add nuw i32 %94, 64
  %123 = sub i32 %122, %121
  %124 = icmp sgt i32 %123, 128
  br i1 %124, label %125, label %130, !prof !7

125:                                              ; preds = %120
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFPositiveExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64 %102, i64 %103, i32 %95, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %14) #13
  br label %286

126:                                              ; preds = %101
  %127 = icmp slt i32 %95, -128
  br i1 %127, label %128, label %130, !prof !7

128:                                              ; preds = %126
  %129 = sub i32 64, %94
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFNegativeExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64 %102, i64 %103, i32 %129, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %14) #13
  br label %286

130:                                              ; preds = %126, %120
  %131 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131) #13
  %132 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 171, i8* nonnull %132) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %132, i8 -86, i64 171, i1 false) #13
  %133 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 42
  store i8 46, i8* %133, align 2
  %134 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 43
  br i1 %108, label %135, label %206

135:                                              ; preds = %130
  %136 = icmp eq i64 %103, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %135
  %138 = call i64 @llvm.ctlz.i64(i64 %103, i1 true) #13, !range !6
  %139 = trunc i64 %138 to i32
  br label %146

140:                                              ; preds = %135
  %141 = icmp eq i64 %102, 0
  br i1 %141, label %146, label %142

142:                                              ; preds = %140
  %143 = call i64 @llvm.ctlz.i64(i64 %102, i1 true) #13, !range !6
  %144 = trunc i64 %143 to i32
  %145 = or i32 %144, 64
  br label %146

146:                                              ; preds = %142, %140, %137
  %147 = phi i32 [ %139, %137 ], [ %145, %142 ], [ 128, %140 ]
  %148 = add nuw i32 %94, 64
  %149 = sub i32 %148, %147
  %150 = icmp slt i32 %149, 65
  br i1 %150, label %151, label %163

151:                                              ; preds = %146
  %152 = zext i32 %95 to i64
  %153 = shl i64 %102, %152
  br label %154

154:                                              ; preds = %154, %151
  %155 = phi i64 [ %153, %151 ], [ %158, %154 ]
  %156 = phi i8* [ %133, %151 ], [ %161, %154 ]
  %157 = urem i64 %155, 10
  %158 = udiv i64 %155, 10
  %159 = trunc i64 %157 to i8
  %160 = or i8 %159, 48
  %161 = getelementptr inbounds i8, i8* %156, i64 -1
  store i8 %160, i8* %161, align 1
  %162 = icmp ult i64 %155, 10
  br i1 %162, label %259, label %154

163:                                              ; preds = %146
  %164 = zext i64 %103 to i128
  %165 = shl nuw i128 %164, 64
  %166 = zext i64 %102 to i128
  %167 = or i128 %165, %166
  %168 = zext i32 %95 to i128
  %169 = shl i128 %167, %168
  %170 = trunc i128 %169 to i64
  %171 = lshr i128 %169, 64
  %172 = trunc i128 %171 to i64
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %194, label %174

174:                                              ; preds = %163, %174
  %175 = phi i8* [ %192, %174 ], [ %133, %163 ]
  %176 = phi i64 [ %189, %174 ], [ %170, %163 ]
  %177 = phi i64 [ %179, %174 ], [ %172, %163 ]
  %178 = urem i64 %177, 10
  %179 = udiv i64 %177, 10
  %180 = urem i64 %176, 10
  %181 = mul nuw nsw i64 %178, 6
  %182 = add nuw nsw i64 %181, %180
  %183 = udiv i64 %176, 10
  %184 = mul i64 %178, 1844674407370955161
  %185 = add nuw i64 %184, %183
  %186 = trunc i64 %182 to i8
  %187 = udiv i8 %186, 10
  %188 = zext i8 %187 to i64
  %189 = add i64 %185, %188
  %190 = urem i8 %186, 10
  %191 = or i8 %190, 48
  %192 = getelementptr inbounds i8, i8* %175, i64 -1
  store i8 %191, i8* %192, align 1
  %193 = icmp ult i64 %177, 10
  br i1 %193, label %194, label %174

194:                                              ; preds = %174, %163
  %195 = phi i64 [ %170, %163 ], [ %189, %174 ]
  %196 = phi i8* [ %133, %163 ], [ %192, %174 ]
  br label %197

197:                                              ; preds = %194, %197
  %198 = phi i64 [ %201, %197 ], [ %195, %194 ]
  %199 = phi i8* [ %204, %197 ], [ %196, %194 ]
  %200 = urem i64 %198, 10
  %201 = udiv i64 %198, 10
  %202 = trunc i64 %200 to i8
  %203 = or i8 %202, 48
  %204 = getelementptr inbounds i8, i8* %199, i64 -1
  store i8 %203, i8* %204, align 1
  %205 = icmp ult i64 %198, 10
  br i1 %205, label %259, label %197

206:                                              ; preds = %130
  %207 = sub nsw i32 64, %94
  %208 = icmp sgt i32 %95, -128
  br i1 %208, label %209, label %240

209:                                              ; preds = %206
  %210 = zext i64 %103 to i128
  %211 = shl nuw i128 %210, 64
  %212 = zext i64 %102 to i128
  %213 = or i128 %211, %212
  %214 = zext i32 %207 to i128
  %215 = lshr i128 %213, %214
  %216 = trunc i128 %215 to i64
  %217 = lshr i128 %215, 64
  %218 = trunc i128 %217 to i64
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %240, label %220

220:                                              ; preds = %209, %220
  %221 = phi i8* [ %238, %220 ], [ %133, %209 ]
  %222 = phi i64 [ %235, %220 ], [ %216, %209 ]
  %223 = phi i64 [ %225, %220 ], [ %218, %209 ]
  %224 = urem i64 %223, 10
  %225 = udiv i64 %223, 10
  %226 = urem i64 %222, 10
  %227 = mul nuw nsw i64 %224, 6
  %228 = add nuw nsw i64 %227, %226
  %229 = udiv i64 %222, 10
  %230 = mul i64 %224, 1844674407370955161
  %231 = add nuw i64 %230, %229
  %232 = trunc i64 %228 to i8
  %233 = udiv i8 %232, 10
  %234 = zext i8 %233 to i64
  %235 = add i64 %231, %234
  %236 = urem i8 %232, 10
  %237 = or i8 %236, 48
  %238 = getelementptr inbounds i8, i8* %221, i64 -1
  store i8 %237, i8* %238, align 1
  %239 = icmp ult i64 %223, 10
  br i1 %239, label %240, label %220

240:                                              ; preds = %220, %209, %206
  %241 = phi i64 [ 0, %206 ], [ %216, %209 ], [ %235, %220 ]
  %242 = phi i8* [ %133, %206 ], [ %133, %209 ], [ %238, %220 ]
  br label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %247, %243 ], [ %241, %240 ]
  %245 = phi i8* [ %250, %243 ], [ %242, %240 ]
  %246 = urem i64 %244, 10
  %247 = udiv i64 %244, 10
  %248 = trunc i64 %246 to i8
  %249 = or i8 %248, 48
  %250 = getelementptr inbounds i8, i8* %245, i64 -1
  store i8 %249, i8* %250, align 1
  %251 = icmp ult i64 %244, 10
  br i1 %251, label %252, label %243

252:                                              ; preds = %243
  %253 = getelementptr inbounds i8, i8* %245, i64 -2
  store i8 48, i8* %253, align 1
  %254 = load i32, i32* %105, align 4
  %255 = call fastcc i8* @_ZN4absl19str_format_internal12_GLOBAL__N_125PrintFractionalDigitsFastENS_7uint128EPcii(i64 %102, i64 %103, i8* %134, i32 %207, i32 %254) #13
  %256 = load i8, i8* %253, align 1
  %257 = icmp eq i8 %256, 48
  %258 = select i1 %257, i8* %250, i8* %253
  br label %259

259:                                              ; preds = %197, %154, %252
  %260 = phi i8* [ %255, %252 ], [ %134, %154 ], [ %134, %197 ]
  %261 = phi i8* [ %258, %252 ], [ %161, %154 ], [ %204, %197 ]
  %262 = ptrtoint i8* %260 to i64
  %263 = ptrtoint i8* %261 to i64
  %264 = sub i64 %262, %263
  %265 = load i32, i32* %105, align 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %274

267:                                              ; preds = %259
  %268 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %106, align 8
  %269 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %268, i64 0, i32 1
  %270 = load i8, i8* %269, align 1
  %271 = and i8 %270, 8
  %272 = icmp eq i8 %271, 0
  %273 = add i64 %264, -1
  br i1 %272, label %275, label %274

274:                                              ; preds = %267, %259
  br label %275

275:                                              ; preds = %274, %267
  %276 = phi i64 [ %264, %274 ], [ %273, %267 ]
  %277 = icmp sgt i64 %276, -1
  br i1 %277, label %279, label %278, !prof !2

278:                                              ; preds = %275
  call void @llvm.trap() #13
  unreachable

279:                                              ; preds = %275
  %280 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i8** %280, align 8
  %281 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %282 = ptrtoint i8* %134 to i64
  %283 = sub i64 %282, %262
  %284 = trunc i64 %283 to i32
  %285 = add i32 %265, %284
  store i64 0, i64* %281, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110FinalPrintERKNS1_11FormatStateENS_11string_viewEiiS5_(%"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %14, i8* %261, i64 %276, i32 0, i32 %285, %"class.absl::string_view"* nonnull byval(%"class.absl::string_view") align 8 %5) #13
  call void @llvm.lifetime.end.p0i8(i64 171, i8* nonnull %132) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %131) #13
  br label %286

286:                                              ; preds = %279, %128, %125
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #13
  br label %774

287:                                              ; preds = %81
  %288 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EeEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* nonnull byval(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed") align 16 %12, i32 %85, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* nonnull %13, i32* nonnull %11) #13
  br i1 %288, label %291, label %289

289:                                              ; preds = %287
  %290 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIeEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80 %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2) #13
  br label %774

291:                                              ; preds = %287
  %292 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %293 = load i8, i8* %292, align 1
  %294 = and i8 %293, 8
  %295 = icmp eq i8 %294, 0
  br i1 %295, label %296, label %303

296:                                              ; preds = %291
  %297 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 2
  %298 = load i8*, i8** %297, align 8
  %299 = getelementptr inbounds i8, i8* %298, i64 -1
  %300 = load i8, i8* %299, align 1
  %301 = icmp eq i8 %300, 46
  br i1 %301, label %302, label %303

302:                                              ; preds = %296
  store i8* %299, i8** %297, align 8
  br label %303

303:                                              ; preds = %302, %296, %291
  %304 = load i32, i32* %11, align 4
  %305 = load i8, i8* %98, align 4
  %306 = add i8 %305, -7
  %307 = icmp ult i8 %306, 9
  br i1 %307, label %308, label %312

308:                                              ; preds = %303
  %309 = sext i8 %306 to i64
  %310 = getelementptr inbounds [9 x i8], [9 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.32, i64 0, i64 %309
  %311 = load i8, i8* %310, align 1
  br label %312

312:                                              ; preds = %308, %303
  %313 = phi i8 [ 101, %303 ], [ %311, %308 ]
  %314 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 2
  %315 = load i8*, i8** %314, align 8
  %316 = getelementptr inbounds i8, i8* %315, i64 1
  store i8* %316, i8** %314, align 8
  store i8 %313, i8* %315, align 1
  %317 = icmp slt i32 %304, 0
  %318 = load i8*, i8** %314, align 8
  %319 = getelementptr inbounds i8, i8* %318, i64 1
  store i8* %319, i8** %314, align 8
  br i1 %317, label %320, label %322

320:                                              ; preds = %312
  store i8 45, i8* %318, align 1
  %321 = sub nsw i32 0, %304
  br label %323

322:                                              ; preds = %312
  store i8 43, i8* %318, align 1
  br label %323

323:                                              ; preds = %322, %320
  %324 = phi i32 [ %321, %320 ], [ %304, %322 ]
  %325 = icmp sgt i32 %324, 99
  br i1 %325, label %326, label %343

326:                                              ; preds = %323
  %327 = udiv i32 %324, 100
  %328 = trunc i32 %327 to i8
  %329 = add i8 %328, 48
  %330 = load i8*, i8** %314, align 8
  %331 = getelementptr inbounds i8, i8* %330, i64 1
  store i8* %331, i8** %314, align 8
  store i8 %329, i8* %330, align 1
  %332 = udiv i32 %324, 10
  %333 = urem i32 %332, 10
  %334 = trunc i32 %333 to i8
  %335 = or i8 %334, 48
  %336 = load i8*, i8** %314, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 1
  store i8* %337, i8** %314, align 8
  store i8 %335, i8* %336, align 1
  %338 = urem i32 %324, 10
  %339 = trunc i32 %338 to i8
  %340 = or i8 %339, 48
  %341 = load i8*, i8** %314, align 8
  %342 = getelementptr inbounds i8, i8* %341, i64 1
  store i8* %342, i8** %314, align 8
  store i8 %340, i8* %341, align 1
  br label %763

343:                                              ; preds = %323
  %344 = sdiv i32 %324, 10
  %345 = trunc i32 %344 to i8
  %346 = add i8 %345, 48
  %347 = load i8*, i8** %314, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 1
  store i8* %348, i8** %314, align 8
  store i8 %346, i8* %347, align 1
  %349 = srem i32 %324, 10
  %350 = trunc i32 %349 to i8
  %351 = add nsw i8 %350, 48
  %352 = load i8*, i8** %314, align 8
  %353 = getelementptr inbounds i8, i8* %352, i64 1
  store i8* %353, i8** %314, align 8
  store i8 %351, i8* %352, align 1
  br label %763

354:                                              ; preds = %81
  %355 = icmp sgt i32 %85, 1
  %356 = select i1 %355, i32 %85, i32 1
  %357 = add nsw i32 %356, -1
  %358 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EeEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* nonnull byval(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed") align 16 %12, i32 %357, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* nonnull %13, i32* nonnull %11) #13
  br i1 %358, label %361, label %359

359:                                              ; preds = %354
  %360 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIeEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80 %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2) #13
  br label %774

361:                                              ; preds = %354
  %362 = load i32, i32* %11, align 4
  %363 = icmp sgt i32 %356, %362
  %364 = icmp sgt i32 %362, -5
  %365 = and i1 %363, %364
  br i1 %365, label %366, label %432

366:                                              ; preds = %361
  %367 = icmp slt i32 %362, 0
  br i1 %367, label %368, label %413

368:                                              ; preds = %366
  %369 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 1
  %370 = load i8*, i8** %369, align 8
  %371 = load i8, i8* %370, align 1
  %372 = getelementptr inbounds i8, i8* %370, i64 1
  store i8 %371, i8* %372, align 1
  %373 = icmp eq i32 %362, -1
  %374 = load i8*, i8** %369, align 8
  %375 = getelementptr inbounds i8, i8* %374, i64 -1
  store i8* %375, i8** %369, align 8
  br i1 %373, label %410, label %376

376:                                              ; preds = %368
  %377 = sub i32 -2, %362
  %378 = and i32 %362, 3
  %379 = xor i32 %378, 3
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %390, label %381

381:                                              ; preds = %376, %381
  %382 = phi i8* [ %386, %381 ], [ %374, %376 ]
  %383 = phi i32 [ %385, %381 ], [ %362, %376 ]
  %384 = phi i32 [ %388, %381 ], [ %379, %376 ]
  store i8 48, i8* %382, align 1
  %385 = add nuw nsw i32 %383, 1
  %386 = load i8*, i8** %369, align 8
  %387 = getelementptr inbounds i8, i8* %386, i64 -1
  store i8* %387, i8** %369, align 8
  %388 = add i32 %384, -1
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %381, !llvm.loop !8

390:                                              ; preds = %381, %376
  %391 = phi i8* [ undef, %376 ], [ %386, %381 ]
  %392 = phi i8* [ %374, %376 ], [ %386, %381 ]
  %393 = phi i32 [ %362, %376 ], [ %385, %381 ]
  %394 = icmp ult i32 %377, 3
  br i1 %394, label %408, label %395

395:                                              ; preds = %390, %395
  %396 = phi i8* [ %405, %395 ], [ %392, %390 ]
  %397 = phi i32 [ %404, %395 ], [ %393, %390 ]
  store i8 48, i8* %396, align 1
  %398 = load i8*, i8** %369, align 8
  %399 = getelementptr inbounds i8, i8* %398, i64 -1
  store i8* %399, i8** %369, align 8
  store i8 48, i8* %398, align 1
  %400 = load i8*, i8** %369, align 8
  %401 = getelementptr inbounds i8, i8* %400, i64 -1
  store i8* %401, i8** %369, align 8
  store i8 48, i8* %400, align 1
  %402 = load i8*, i8** %369, align 8
  %403 = getelementptr inbounds i8, i8* %402, i64 -1
  store i8* %403, i8** %369, align 8
  store i8 48, i8* %402, align 1
  %404 = add nuw nsw i32 %397, 4
  %405 = load i8*, i8** %369, align 8
  %406 = getelementptr inbounds i8, i8* %405, i64 -1
  store i8* %406, i8** %369, align 8
  %407 = icmp eq i32 %404, -1
  br i1 %407, label %408, label %395

408:                                              ; preds = %395, %390
  %409 = phi i8* [ %391, %390 ], [ %405, %395 ]
  store i32 -1, i32* %11, align 4
  br label %410

410:                                              ; preds = %408, %368
  %411 = phi i8* [ %409, %408 ], [ %374, %368 ]
  store i8 46, i8* %411, align 1
  %412 = load i8*, i8** %369, align 8
  store i8 48, i8* %412, align 1
  br label %431

413:                                              ; preds = %366
  %414 = icmp eq i32 %362, 0
  br i1 %414, label %431, label %415

415:                                              ; preds = %413
  %416 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 1
  %417 = load i8*, i8** %416, align 8
  %418 = getelementptr inbounds i8, i8* %417, i64 1
  %419 = getelementptr inbounds i8, i8* %417, i64 2
  %420 = sext i32 %362 to i64
  %421 = getelementptr inbounds i8, i8* %417, i64 %420
  %422 = getelementptr inbounds i8, i8* %421, i64 2
  %423 = load i8, i8* %418, align 1
  %424 = ptrtoint i8* %422 to i64
  %425 = ptrtoint i8* %419 to i64
  %426 = sub i64 %424, %425
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %429, label %428

428:                                              ; preds = %415
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %418, i8* align 1 %419, i64 %426, i1 false) #13
  br label %429

429:                                              ; preds = %428, %415
  %430 = getelementptr inbounds i8, i8* %418, i64 %426
  store i8 %423, i8* %430, align 1
  br label %431

431:                                              ; preds = %429, %413, %410
  store i32 0, i32* %11, align 4
  br label %432

432:                                              ; preds = %431, %361
  %433 = phi i32 [ 0, %431 ], [ %362, %361 ]
  %434 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %435 = load i8, i8* %434, align 1
  %436 = and i8 %435, 8
  %437 = icmp eq i8 %436, 0
  br i1 %437, label %438, label %447

438:                                              ; preds = %432
  %439 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 2
  %440 = load i8*, i8** %439, align 8
  br label %441

441:                                              ; preds = %445, %438
  %442 = phi i8* [ %440, %438 ], [ %443, %445 ]
  %443 = getelementptr inbounds i8, i8* %442, i64 -1
  %444 = load i8, i8* %443, align 1
  switch i8 %444, label %447 [
    i8 48, label %445
    i8 46, label %446
  ]

445:                                              ; preds = %441
  store i8* %443, i8** %439, align 8
  br label %441

446:                                              ; preds = %441
  store i8* %443, i8** %439, align 8
  br label %447

447:                                              ; preds = %441, %446, %432
  %448 = icmp eq i32 %433, 0
  br i1 %448, label %763, label %449

449:                                              ; preds = %447
  %450 = load i8, i8* %98, align 4
  %451 = add i8 %450, -7
  %452 = icmp ult i8 %451, 9
  br i1 %452, label %453, label %457

453:                                              ; preds = %449
  %454 = sext i8 %451 to i64
  %455 = getelementptr inbounds [9 x i8], [9 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.32, i64 0, i64 %454
  %456 = load i8, i8* %455, align 1
  br label %457

457:                                              ; preds = %453, %449
  %458 = phi i8 [ 101, %449 ], [ %456, %453 ]
  %459 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 2
  %460 = load i8*, i8** %459, align 8
  %461 = getelementptr inbounds i8, i8* %460, i64 1
  store i8* %461, i8** %459, align 8
  store i8 %458, i8* %460, align 1
  %462 = icmp slt i32 %433, 0
  %463 = load i8*, i8** %459, align 8
  %464 = getelementptr inbounds i8, i8* %463, i64 1
  store i8* %464, i8** %459, align 8
  br i1 %462, label %465, label %467

465:                                              ; preds = %457
  store i8 45, i8* %463, align 1
  %466 = sub nsw i32 0, %433
  br label %468

467:                                              ; preds = %457
  store i8 43, i8* %463, align 1
  br label %468

468:                                              ; preds = %467, %465
  %469 = phi i32 [ %466, %465 ], [ %433, %467 ]
  %470 = icmp sgt i32 %469, 99
  br i1 %470, label %471, label %488

471:                                              ; preds = %468
  %472 = udiv i32 %469, 100
  %473 = trunc i32 %472 to i8
  %474 = add i8 %473, 48
  %475 = load i8*, i8** %459, align 8
  %476 = getelementptr inbounds i8, i8* %475, i64 1
  store i8* %476, i8** %459, align 8
  store i8 %474, i8* %475, align 1
  %477 = udiv i32 %469, 10
  %478 = urem i32 %477, 10
  %479 = trunc i32 %478 to i8
  %480 = or i8 %479, 48
  %481 = load i8*, i8** %459, align 8
  %482 = getelementptr inbounds i8, i8* %481, i64 1
  store i8* %482, i8** %459, align 8
  store i8 %480, i8* %481, align 1
  %483 = urem i32 %469, 10
  %484 = trunc i32 %483 to i8
  %485 = or i8 %484, 48
  %486 = load i8*, i8** %459, align 8
  %487 = getelementptr inbounds i8, i8* %486, i64 1
  store i8* %487, i8** %459, align 8
  store i8 %485, i8* %486, align 1
  br label %763

488:                                              ; preds = %468
  %489 = sdiv i32 %469, 10
  %490 = trunc i32 %489 to i8
  %491 = add i8 %490, 48
  %492 = load i8*, i8** %459, align 8
  %493 = getelementptr inbounds i8, i8* %492, i64 1
  store i8* %493, i8** %459, align 8
  store i8 %491, i8* %492, align 1
  %494 = srem i32 %469, 10
  %495 = trunc i32 %494 to i8
  %496 = add nsw i8 %495, 48
  %497 = load i8*, i8** %459, align 8
  %498 = getelementptr inbounds i8, i8* %497, i64 1
  store i8* %498, i8** %459, align 8
  store i8 %496, i8* %497, align 1
  br label %763

499:                                              ; preds = %81
  %500 = icmp eq i8 %99, 15
  %501 = load i64, i64* %88, align 16
  %502 = load i64, i64* %89, align 8
  %503 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %15, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %503) #13
  store i8 %39, i8* %503, align 8
  %504 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %15, i64 0, i32 1
  store i32 %85, i32* %504, align 4
  %505 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %15, i64 0, i32 2
  store %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %505, align 8
  %506 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %15, i64 0, i32 3
  store %"class.absl::str_format_internal::FormatSinkImpl"* %2, %"class.absl::str_format_internal::FormatSinkImpl"** %506, align 8
  %507 = bitcast %"class.absl::string_view"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %507) #13
  %508 = load i32, i32* %82, align 4
  %509 = icmp sgt i32 %508, -1
  %510 = add nsw i32 %94, 64
  %511 = load atomic i8, i8* bitcast (i64* @_ZGVZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit to i8*) acquire, align 8
  %512 = icmp eq i8 %511, 0
  br i1 %512, label %513, label %518, !prof !10

513:                                              ; preds = %499
  %514 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit) #13
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %518, label %516

516:                                              ; preds = %513
  store <2 x i64> <i64 0, i64 -9223372036854775808>, <2 x i64>* bitcast (%"class.absl::uint128"* @_ZZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit to <2 x i64>*), align 16
  %517 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* bitcast (%"class.absl::uint128"* @_ZZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit to i8*)) #13
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit) #13
  br label %518

518:                                              ; preds = %516, %513, %499
  %519 = or i64 %502, %501
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %558, label %521

521:                                              ; preds = %518
  %522 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit, i64 0, i32 0), align 16
  %523 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZZN4absl19str_format_internal12_GLOBAL__N_116FormatANormalizeINS_7uint128EEEvNS1_18HexFloatTypeParamsEPhPT_PiE11kHighIntBit, i64 0, i32 1), align 8
  br label %524

524:                                              ; preds = %545, %521
  %525 = phi i64 [ %501, %521 ], [ %550, %545 ]
  %526 = phi i64 [ %502, %521 ], [ %552, %545 ]
  %527 = phi i32 [ %510, %521 ], [ %553, %545 ]
  %528 = and i64 %526, %523
  %529 = and i64 %525, %522
  %530 = or i64 %528, %529
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %532, label %558

532:                                              ; preds = %524
  %533 = icmp sgt i32 %527, -16382
  br i1 %533, label %545, label %534, !prof !2

534:                                              ; preds = %532
  %535 = sub nuw nsw i32 -16382, %527
  %536 = zext i64 %526 to i128
  %537 = shl nuw i128 %536, 64
  %538 = zext i64 %525 to i128
  %539 = or i128 %537, %538
  %540 = zext i32 %535 to i128
  %541 = lshr i128 %539, %540
  %542 = trunc i128 %541 to i64
  %543 = lshr i128 %541, 64
  %544 = trunc i128 %543 to i64
  br label %574

545:                                              ; preds = %532
  %546 = zext i64 %526 to i128
  %547 = shl nuw i128 %546, 64
  %548 = zext i64 %525 to i128
  %549 = or i128 %547, %548
  %550 = shl i64 %525, 1
  %551 = lshr i128 %549, 63
  %552 = trunc i128 %551 to i64
  %553 = add nsw i32 %527, -1
  %554 = or i64 %550, %552
  %555 = icmp eq i64 %554, 0
  br i1 %555, label %556, label %524

556:                                              ; preds = %545
  %557 = trunc i128 %551 to i64
  br label %558

558:                                              ; preds = %524, %556, %518
  %559 = phi i32 [ %510, %518 ], [ %553, %556 ], [ %527, %524 ]
  %560 = phi i64 [ %502, %518 ], [ %557, %556 ], [ %526, %524 ]
  %561 = phi i64 [ %501, %518 ], [ %550, %556 ], [ %525, %524 ]
  %562 = phi i32 [ %510, %518 ], [ %553, %556 ], [ 4, %524 ]
  %563 = phi i64 [ 0, %518 ], [ 0, %556 ], [ %526, %524 ]
  %564 = zext i64 %561 to i128
  %565 = lshr i64 %563, 60
  %566 = trunc i64 %565 to i8
  %567 = sub nsw i32 %559, %562
  %568 = zext i64 %560 to i128
  %569 = shl nuw i128 %568, 64
  %570 = or i128 %569, %564
  %571 = shl i64 %561, 4
  %572 = lshr i128 %570, 60
  %573 = trunc i128 %572 to i64
  br label %574

574:                                              ; preds = %558, %534
  %575 = phi i64 [ %573, %558 ], [ %544, %534 ]
  %576 = phi i8 [ %566, %558 ], [ 0, %534 ]
  %577 = phi i32 [ %567, %558 ], [ -16382, %534 ]
  %578 = phi i64 [ %571, %558 ], [ %542, %534 ]
  br i1 %509, label %579, label %674

579:                                              ; preds = %574
  %580 = load i32, i32* %504, align 4
  %581 = icmp slt i32 %580, 32
  br i1 %581, label %582, label %665

582:                                              ; preds = %579
  %583 = shl i32 %580, 2
  %584 = sub i32 128, %583
  %585 = sub i32 124, %583
  %586 = icmp sgt i32 %583, 0
  %587 = select i1 %586, i32 %583, i32 0
  %588 = zext i32 %587 to i128
  %589 = lshr i128 -1, %588
  %590 = trunc i128 %589 to i64
  %591 = lshr i128 %589, 64
  %592 = trunc i128 %591 to i64
  %593 = and i64 %575, %592
  %594 = and i64 %578, %590
  %595 = zext i32 %585 to i128
  %596 = shl i128 8, %595
  %597 = trunc i128 %596 to i64
  %598 = lshr i128 %596, 64
  %599 = trunc i128 %598 to i64
  %600 = icmp ne i64 %594, %597
  %601 = icmp ne i64 %593, %599
  %602 = or i1 %600, %601
  br i1 %602, label %603, label %609

603:                                              ; preds = %582
  %604 = zext i64 %593 to i128
  %605 = shl nuw i128 %604, 64
  %606 = zext i64 %594 to i128
  %607 = or i128 %605, %606
  %608 = icmp ult i128 %596, %607
  br i1 %608, label %630, label %658

609:                                              ; preds = %582
  %610 = icmp eq i32 %580, 0
  br i1 %610, label %626, label %611

611:                                              ; preds = %609
  %612 = zext i32 %584 to i128
  %613 = shl i128 15, %612
  %614 = trunc i128 %613 to i64
  %615 = lshr i128 %613, 64
  %616 = trunc i128 %615 to i64
  %617 = and i64 %575, %616
  %618 = and i64 %578, %614
  %619 = zext i64 %617 to i128
  %620 = shl nuw i128 %619, 64
  %621 = zext i64 %618 to i128
  %622 = or i128 %620, %621
  %623 = lshr i128 %622, %612
  %624 = trunc i128 %623 to i8
  %625 = and i8 %624, 15
  br label %626

626:                                              ; preds = %611, %609
  %627 = phi i8 [ %625, %611 ], [ %576, %609 ]
  %628 = and i8 %627, 1
  %629 = icmp eq i8 %628, 0
  br i1 %629, label %658, label %630

630:                                              ; preds = %626, %603
  %631 = icmp slt i32 %580, 1
  br i1 %631, label %638, label %632

632:                                              ; preds = %630
  %633 = zext i32 %584 to i128
  %634 = shl i128 1, %633
  %635 = trunc i128 %634 to i64
  %636 = lshr i128 %634, 64
  %637 = trunc i128 %636 to i64
  br label %638

638:                                              ; preds = %632, %630
  %639 = phi i64 [ %637, %632 ], [ 0, %630 ]
  %640 = phi i64 [ %635, %632 ], [ 0, %630 ]
  %641 = add i64 %639, %575
  %642 = add i64 %640, %578
  %643 = icmp ult i64 %642, %578
  %644 = zext i1 %643 to i64
  %645 = add i64 %641, %644
  %646 = icmp slt i64 %575, 0
  %647 = icmp sgt i64 %645, -1
  %648 = and i1 %646, %647
  %649 = or i1 %631, %648
  %650 = zext i1 %649 to i8
  %651 = add nuw nsw i8 %576, %650
  %652 = icmp ugt i8 %651, 15
  %653 = add nsw i32 %577, 4
  %654 = select i1 %652, i8 1, i8 %651, !prof !7
  %655 = select i1 %652, i32 %653, i32 %577, !prof !7
  %656 = select i1 %652, i64 0, i64 %645, !prof !7
  %657 = select i1 %652, i64 0, i64 %642, !prof !7
  br label %658

658:                                              ; preds = %638, %626, %603
  %659 = phi i8 [ %576, %603 ], [ %576, %626 ], [ %654, %638 ]
  %660 = phi i32 [ %577, %603 ], [ %577, %626 ], [ %655, %638 ]
  %661 = phi i64 [ %575, %603 ], [ %575, %626 ], [ %656, %638 ]
  %662 = phi i64 [ %578, %603 ], [ %578, %626 ], [ %657, %638 ]
  %663 = xor i64 %592, -1
  %664 = xor i64 %590, -1
  br label %665

665:                                              ; preds = %658, %579
  %666 = phi i8 [ %659, %658 ], [ %576, %579 ]
  %667 = phi i32 [ %660, %658 ], [ %577, %579 ]
  %668 = phi i64 [ %661, %658 ], [ %575, %579 ]
  %669 = phi i64 [ %662, %658 ], [ %578, %579 ]
  %670 = phi i64 [ %663, %658 ], [ -1, %579 ]
  %671 = phi i64 [ %664, %658 ], [ -1, %579 ]
  %672 = and i64 %670, %668
  %673 = and i64 %671, %669
  br label %674

674:                                              ; preds = %665, %574
  %675 = phi i8 [ %666, %665 ], [ %576, %574 ]
  %676 = phi i32 [ %667, %665 ], [ %577, %574 ]
  %677 = phi i64 [ %672, %665 ], [ %575, %574 ]
  %678 = phi i64 [ %673, %665 ], [ %578, %574 ]
  %679 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %679) #13
  %680 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 1
  %681 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 2
  %682 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 3
  %683 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 4
  %684 = select i1 %500, i64 0, i64 16
  %685 = getelementptr inbounds [33 x i8], [33 x i8]* @.str.26, i64 0, i64 %684
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %679, i8 -86, i64 20, i1 false) #13
  store i8 48, i8* %679, align 16
  %686 = select i1 %500, i8 88, i8 120
  store i8 %686, i8* %680, align 1
  %687 = zext i8 %675 to i64
  %688 = getelementptr inbounds i8, i8* %685, i64 %687
  %689 = load i8, i8* %688, align 1
  store i8 %689, i8* %681, align 2
  br i1 %509, label %690, label %693

690:                                              ; preds = %674
  %691 = load i32, i32* %504, align 4
  %692 = icmp sgt i32 %691, 0
  br i1 %692, label %705, label %699

693:                                              ; preds = %674
  %694 = zext i64 %677 to i128
  %695 = shl nuw i128 %694, 64
  %696 = zext i64 %678 to i128
  %697 = or i128 %695, %696
  %698 = icmp eq i128 %697, 0
  br i1 %698, label %699, label %705

699:                                              ; preds = %693, %690
  %700 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %505, align 8
  %701 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %700, i64 0, i32 1
  %702 = load i8, i8* %701, align 1
  %703 = and i8 %702, 8
  %704 = icmp eq i8 %703, 0
  br i1 %704, label %706, label %705

705:                                              ; preds = %699, %693, %690
  store i8 46, i8* %682, align 1
  br label %706

706:                                              ; preds = %705, %699
  %707 = phi i8* [ %683, %705 ], [ %682, %699 ]
  %708 = zext i64 %677 to i128
  %709 = shl nuw i128 %708, 64
  %710 = zext i64 %678 to i128
  %711 = or i128 %709, %710
  %712 = icmp eq i128 %711, 0
  br i1 %712, label %735, label %713

713:                                              ; preds = %706
  %714 = lshr i128 %711, 60
  %715 = trunc i128 %714 to i64
  br label %716

716:                                              ; preds = %716, %713
  %717 = phi i64 [ %734, %716 ], [ %715, %713 ]
  %718 = phi i8* [ %725, %716 ], [ %707, %713 ]
  %719 = phi i32 [ %727, %716 ], [ 0, %713 ]
  %720 = phi i64 [ %726, %716 ], [ %678, %713 ]
  %721 = phi i64 [ %717, %716 ], [ %677, %713 ]
  %722 = lshr i64 %721, 60
  %723 = getelementptr inbounds i8, i8* %685, i64 %722
  %724 = load i8, i8* %723, align 1
  %725 = getelementptr inbounds i8, i8* %718, i64 1
  store i8 %724, i8* %718, align 1
  %726 = shl i64 %720, 4
  %727 = add nuw nsw i32 %719, 1
  %728 = zext i64 %717 to i128
  %729 = shl nuw i128 %728, 64
  %730 = zext i64 %726 to i128
  %731 = or i128 %729, %730
  %732 = icmp eq i128 %731, 0
  %733 = lshr i128 %731, 60
  %734 = trunc i128 %733 to i64
  br i1 %732, label %735, label %716

735:                                              ; preds = %716, %706
  %736 = phi i32 [ 0, %706 ], [ %727, %716 ]
  %737 = phi i8* [ %707, %706 ], [ %725, %716 ]
  %738 = load i32, i32* %504, align 4
  %739 = sub nsw i32 %738, %736
  %740 = select i1 %509, i32 %739, i32 0
  %741 = ptrtoint i8* %737 to i64
  %742 = ptrtoint [20 x i8]* %8 to i64
  %743 = sub i64 %741, %742
  %744 = icmp sgt i64 %743, -1
  br i1 %744, label %746, label %745, !prof !2

745:                                              ; preds = %735
  call void @llvm.trap() #13
  unreachable

746:                                              ; preds = %735
  %747 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %747) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %747, i8 -86, i64 34, i1 false) #13
  %748 = select i1 %500, i8 80, i8 112
  store i8 %748, i8* %747, align 16
  %749 = icmp sgt i32 %676, -1
  %750 = select i1 %749, i8 43, i8 45
  %751 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 1
  store i8 %750, i8* %751, align 1
  %752 = icmp slt i32 %676, 0
  %753 = sub nsw i32 0, %676
  %754 = select i1 %752, i32 %753, i32 %676
  %755 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 2
  %756 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %754, i8* %755) #13
  %757 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %10, i64 0, i32 0
  store i8* %747, i8** %757, align 8
  %758 = call i64 @strlen(i8* nonnull %747) #13
  %759 = icmp sgt i64 %758, -1
  br i1 %759, label %761, label %760, !prof !2

760:                                              ; preds = %746
  call void @llvm.trap() #13
  unreachable

761:                                              ; preds = %746
  %762 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %10, i64 0, i32 1
  store i64 %758, i64* %762, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110FinalPrintERKNS1_11FormatStateENS_11string_viewEiiS5_(%"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %15, i8* nonnull %679, i64 %743, i32 2, i32 %740, %"class.absl::string_view"* nonnull byval(%"class.absl::string_view") align 8 %10) #13
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %747) #13
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %679) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %507) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %503) #13
  br label %774

763:                                              ; preds = %488, %471, %447, %343, %326
  %764 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 1
  %765 = load i8*, i8** %764, align 8
  %766 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %13, i64 0, i32 2
  %767 = bitcast i8** %766 to i64*
  %768 = load i64, i64* %767, align 8
  %769 = ptrtoint i8* %765 to i64
  %770 = sub i64 %768, %769
  %771 = icmp sgt i64 %770, -1
  br i1 %771, label %773, label %772, !prof !2

772:                                              ; preds = %763
  call void @llvm.trap() #13
  unreachable

773:                                              ; preds = %763
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_117WriteBufferToSinkEcNS_11string_viewERKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext %39, i8* %765, i64 %770, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2) #13
  br label %774

774:                                              ; preds = %773, %761, %359, %289, %286, %81
  %775 = phi i1 [ true, %286 ], [ true, %773 ], [ %290, %289 ], [ %360, %359 ], [ true, %761 ], [ false, %81 ]
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %97) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #13
  br label %776

776:                                              ; preds = %73, %774
  %777 = phi i1 [ %775, %774 ], [ true, %73 ]
  ret i1 %777
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEfRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(float, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %4 = fpext float %0 to double
  %5 = tail call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %4, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %4 = alloca [171 x i8], align 16
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [20 x i8], align 16
  %9 = alloca [34 x i8], align 16
  %10 = alloca %"class.absl::string_view", align 8
  %11 = alloca i32, align 4
  %12 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", align 8
  %13 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", align 8
  %14 = alloca %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", align 8
  %15 = bitcast double %0 to i64
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = fsub double -0.000000e+00, %0
  br label %29

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = and i8 %21, 2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %19
  %25 = and i8 %21, 4
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #13
  store i32 -1431655766, i32* %7, align 4
  br label %35

29:                                               ; preds = %24, %19, %17
  %30 = phi i8 [ 43, %19 ], [ 45, %17 ], [ 32, %24 ]
  %31 = phi double [ %0, %19 ], [ %18, %17 ], [ %0, %24 ]
  %32 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #13
  store i32 -1431655766, i32* %7, align 4
  %33 = bitcast i32* %7 to [4 x i8]*
  %34 = getelementptr inbounds [4 x i8], [4 x i8]* %33, i64 0, i64 1
  store i8 %30, i8* %32, align 4
  br label %35

35:                                               ; preds = %27, %29
  %36 = phi i8* [ %32, %29 ], [ %28, %27 ]
  %37 = phi double [ %31, %29 ], [ %0, %27 ]
  %38 = phi i8 [ %30, %29 ], [ 0, %27 ]
  %39 = phi i8* [ %34, %29 ], [ %28, %27 ]
  %40 = fcmp uno double %37, 0.000000e+00
  br i1 %40, label %41, label %50

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %43 = load i8, i8* %42, align 4
  %44 = add i8 %43, -7
  %45 = icmp ult i8 %44, 9
  br i1 %45, label %46, label %63

46:                                               ; preds = %41
  %47 = sext i8 %44 to i64
  %48 = getelementptr inbounds [9 x [4 x i8]*], [9 x [4 x i8]*]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE, i64 0, i64 %47
  %49 = load [4 x i8]*, [4 x i8]** %48, align 8
  br label %63

50:                                               ; preds = %35
  %51 = tail call double @llvm.fabs.f64(double %37) #14
  %52 = fcmp oeq double %51, 0x7FF0000000000000
  br i1 %52, label %54, label %53

53:                                               ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #13
  br label %80

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %56 = load i8, i8* %55, align 4
  %57 = add i8 %56, -7
  %58 = icmp ult i8 %57, 9
  br i1 %58, label %59, label %63

59:                                               ; preds = %54
  %60 = sext i8 %57 to i64
  %61 = getelementptr inbounds [9 x [4 x i8]*], [9 x [4 x i8]*]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.30, i64 0, i64 %60
  %62 = load [4 x i8]*, [4 x i8]** %61, align 8
  br label %63

63:                                               ; preds = %54, %59, %41, %46
  %64 = phi [4 x i8]* [ @.str.1, %41 ], [ %49, %46 ], [ @.str.3, %54 ], [ %62, %59 ]
  %65 = getelementptr inbounds [4 x i8], [4 x i8]* %64, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %65, i64 3, i1 false) #13
  %66 = getelementptr inbounds i8, i8* %39, i64 3
  %67 = ptrtoint i8* %66 to i64
  %68 = ptrtoint i32* %7 to i64
  %69 = sub i64 %67, %68
  %70 = icmp sgt i64 %69, -1
  br i1 %70, label %72, label %71, !prof !2

71:                                               ; preds = %63
  call void @llvm.trap() #13
  unreachable

72:                                               ; preds = %63
  %73 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = and i8 %76, 1
  %78 = icmp ne i8 %77, 0
  %79 = call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %2, i8* nonnull %36, i64 %69, i32 %74, i32 -1, i1 zeroext %78) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #13
  br i1 %79, label %683, label %80

80:                                               ; preds = %53, %72
  %81 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = icmp slt i32 %82, 0
  %84 = select i1 %83, i32 6, i32 %82
  %85 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #13
  store i32 0, i32* %11, align 4
  %86 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #13
  store i32 -1431655766, i32* %6, align 4
  %87 = call double @frexp(double %37, i32* nonnull %6) #13
  %88 = call double @ldexp(double %87, i32 53) #13
  %89 = load i32, i32* %6, align 4
  %90 = add nsw i32 %89, -53
  %91 = fptoui double %88 to i64
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #13
  %92 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %92) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 104, i1 false)
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %94 = load i8, i8* %93, align 4
  %95 = or i8 %94, 1
  switch i8 %95, label %681 [
    i8 9, label %96
    i8 11, label %296
    i8 13, label %363
    i8 15, label %508
  ]

96:                                               ; preds = %80
  %97 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97) #13
  store i8 %38, i8* %97, align 8
  %98 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %13, i64 0, i32 1
  store i32 %84, i32* %98, align 4
  %99 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %13, i64 0, i32 2
  store %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %99, align 8
  %100 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %13, i64 0, i32 3
  store %"class.absl::str_format_internal::FormatSinkImpl"* %2, %"class.absl::str_format_internal::FormatSinkImpl"** %100, align 8
  %101 = icmp sgt i32 %90, -1
  br i1 %101, label %102, label %113

102:                                              ; preds = %96
  %103 = icmp eq i64 %91, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %102
  %105 = call i64 @llvm.ctlz.i64(i64 %91, i1 true) #13, !range !6
  %106 = trunc i64 %105 to i32
  br label %107

107:                                              ; preds = %104, %102
  %108 = phi i32 [ %106, %104 ], [ 64, %102 ]
  %109 = add nuw i32 %89, 11
  %110 = sub i32 %109, %108
  %111 = icmp sgt i32 %110, 128
  br i1 %111, label %112, label %117, !prof !7

112:                                              ; preds = %107
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFPositiveExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64 %91, i64 0, i32 %90, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %13) #13
  br label %295

113:                                              ; preds = %96
  %114 = icmp slt i32 %90, -128
  br i1 %114, label %115, label %117, !prof !7

115:                                              ; preds = %113
  %116 = sub i32 53, %89
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFNegativeExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64 %91, i64 0, i32 %116, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %13) #13
  br label %295

117:                                              ; preds = %113, %107
  %118 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #13
  %119 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 171, i8* nonnull %119) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %119, i8 -86, i64 171, i1 false) #13
  %120 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 42
  store i8 46, i8* %120, align 2
  %121 = getelementptr inbounds [171 x i8], [171 x i8]* %4, i64 0, i64 43
  br i1 %101, label %122, label %184

122:                                              ; preds = %117
  %123 = icmp eq i64 %91, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %122
  %125 = call i64 @llvm.ctlz.i64(i64 %91, i1 true) #13, !range !6
  %126 = trunc i64 %125 to i32
  %127 = sub nuw nsw i32 64, %126
  br label %128

128:                                              ; preds = %124, %122
  %129 = phi i32 [ %127, %124 ], [ 0, %122 ]
  %130 = add nsw i32 %129, %90
  %131 = icmp slt i32 %130, 65
  br i1 %131, label %132, label %144

132:                                              ; preds = %128
  %133 = zext i32 %90 to i64
  %134 = shl i64 %91, %133
  br label %135

135:                                              ; preds = %135, %132
  %136 = phi i64 [ %134, %132 ], [ %139, %135 ]
  %137 = phi i8* [ %120, %132 ], [ %142, %135 ]
  %138 = urem i64 %136, 10
  %139 = udiv i64 %136, 10
  %140 = trunc i64 %138 to i8
  %141 = or i8 %140, 48
  %142 = getelementptr inbounds i8, i8* %137, i64 -1
  store i8 %141, i8* %142, align 1
  %143 = icmp ult i64 %136, 10
  br i1 %143, label %268, label %135

144:                                              ; preds = %128
  %145 = zext i64 %91 to i128
  %146 = zext i32 %90 to i128
  %147 = shl i128 %145, %146
  %148 = trunc i128 %147 to i64
  %149 = lshr i128 %147, 64
  %150 = trunc i128 %149 to i64
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %172, label %152

152:                                              ; preds = %144, %152
  %153 = phi i8* [ %170, %152 ], [ %120, %144 ]
  %154 = phi i64 [ %167, %152 ], [ %148, %144 ]
  %155 = phi i64 [ %157, %152 ], [ %150, %144 ]
  %156 = urem i64 %155, 10
  %157 = udiv i64 %155, 10
  %158 = urem i64 %154, 10
  %159 = mul nuw nsw i64 %156, 6
  %160 = add nuw nsw i64 %159, %158
  %161 = udiv i64 %154, 10
  %162 = mul i64 %156, 1844674407370955161
  %163 = add nuw i64 %162, %161
  %164 = trunc i64 %160 to i8
  %165 = udiv i8 %164, 10
  %166 = zext i8 %165 to i64
  %167 = add i64 %163, %166
  %168 = urem i8 %164, 10
  %169 = or i8 %168, 48
  %170 = getelementptr inbounds i8, i8* %153, i64 -1
  store i8 %169, i8* %170, align 1
  %171 = icmp ult i64 %155, 10
  br i1 %171, label %172, label %152

172:                                              ; preds = %152, %144
  %173 = phi i64 [ %148, %144 ], [ %167, %152 ]
  %174 = phi i8* [ %120, %144 ], [ %170, %152 ]
  br label %175

175:                                              ; preds = %172, %175
  %176 = phi i64 [ %179, %175 ], [ %173, %172 ]
  %177 = phi i8* [ %182, %175 ], [ %174, %172 ]
  %178 = urem i64 %176, 10
  %179 = udiv i64 %176, 10
  %180 = trunc i64 %178 to i8
  %181 = or i8 %180, 48
  %182 = getelementptr inbounds i8, i8* %177, i64 -1
  store i8 %181, i8* %182, align 1
  %183 = icmp ult i64 %176, 10
  br i1 %183, label %268, label %175

184:                                              ; preds = %117
  %185 = sub nsw i32 53, %89
  %186 = icmp sgt i32 %90, -64
  %187 = zext i32 %185 to i64
  %188 = lshr i64 %91, %187
  %189 = select i1 %186, i64 %188, i64 0
  br label %190

190:                                              ; preds = %184, %190
  %191 = phi i64 [ %194, %190 ], [ %189, %184 ]
  %192 = phi i8* [ %197, %190 ], [ %120, %184 ]
  %193 = urem i64 %191, 10
  %194 = udiv i64 %191, 10
  %195 = trunc i64 %193 to i8
  %196 = or i8 %195, 48
  %197 = getelementptr inbounds i8, i8* %192, i64 -1
  store i8 %196, i8* %197, align 1
  %198 = icmp ult i64 %191, 10
  br i1 %198, label %199, label %190

199:                                              ; preds = %190
  %200 = getelementptr inbounds i8, i8* %192, i64 -2
  store i8 48, i8* %200, align 1
  %201 = icmp sgt i32 %90, -65
  %202 = load i32, i32* %98, align 4
  br i1 %201, label %203, label %261

203:                                              ; preds = %199
  %204 = add nsw i32 %89, 11
  %205 = zext i32 %204 to i64
  %206 = shl i64 %91, %205
  %207 = icmp sgt i32 %202, 0
  br i1 %207, label %208, label %228

208:                                              ; preds = %203
  %209 = add nsw i32 %202, -1
  %210 = zext i32 %209 to i64
  %211 = add nuw nsw i64 %210, 43
  %212 = getelementptr [171 x i8], [171 x i8]* %4, i64 0, i64 %211
  br label %213

213:                                              ; preds = %217, %208
  %214 = phi i8* [ %224, %217 ], [ %121, %208 ]
  %215 = phi i64 [ %220, %217 ], [ %206, %208 ]
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %263, label %217

217:                                              ; preds = %213
  %218 = zext i64 %215 to i128
  %219 = mul nuw nsw i128 %218, 10
  %220 = trunc i128 %219 to i64
  %221 = lshr i128 %219, 64
  %222 = trunc i128 %221 to i8
  %223 = or i8 %222, 48
  %224 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 %223, i8* %214, align 1
  %225 = icmp eq i8* %214, %212
  br i1 %225, label %226, label %213

226:                                              ; preds = %217
  %227 = trunc i128 %219 to i64
  br label %228

228:                                              ; preds = %226, %203
  %229 = phi i64 [ %206, %203 ], [ %227, %226 ]
  %230 = phi i8* [ %121, %203 ], [ %224, %226 ]
  %231 = icmp sgt i64 %229, -1
  br i1 %231, label %263, label %232

232:                                              ; preds = %228
  %233 = icmp eq i64 %229, -9223372036854775808
  %234 = getelementptr inbounds i8, i8* %230, i64 -1
  br i1 %233, label %243, label %235

235:                                              ; preds = %232, %239
  %236 = phi i8* [ %240, %239 ], [ %234, %232 ]
  %237 = load i8, i8* %236, align 1
  switch i8 %237, label %241 [
    i8 57, label %238
    i8 46, label %239
  ]

238:                                              ; preds = %235
  store i8 48, i8* %236, align 1
  br label %239

239:                                              ; preds = %238, %235
  %240 = getelementptr inbounds i8, i8* %236, i64 -1
  br label %235

241:                                              ; preds = %235
  %242 = add i8 %237, 1
  store i8 %242, i8* %236, align 1
  br label %263

243:                                              ; preds = %232
  %244 = load i8, i8* %234, align 1
  %245 = icmp eq i8 %244, 46
  %246 = getelementptr inbounds i8, i8* %230, i64 -2
  %247 = select i1 %245, i8* %246, i8* %234
  %248 = load i8, i8* %247, align 1
  %249 = sext i8 %248 to i32
  %250 = srem i32 %249, 2
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %252, label %263

252:                                              ; preds = %243, %256
  %253 = phi i8 [ %258, %256 ], [ %248, %243 ]
  %254 = phi i8* [ %257, %256 ], [ %247, %243 ]
  switch i8 %253, label %259 [
    i8 57, label %255
    i8 46, label %256
  ]

255:                                              ; preds = %252
  store i8 48, i8* %254, align 1
  br label %256

256:                                              ; preds = %255, %252
  %257 = getelementptr inbounds i8, i8* %254, i64 -1
  %258 = load i8, i8* %257, align 1
  br label %252

259:                                              ; preds = %252
  %260 = add i8 %253, 1
  store i8 %260, i8* %254, align 1
  br label %263

261:                                              ; preds = %199
  %262 = call fastcc i8* @_ZN4absl19str_format_internal12_GLOBAL__N_125PrintFractionalDigitsFastENS_7uint128EPcii(i64 %91, i64 0, i8* %121, i32 %185, i32 %202) #13
  br label %263

263:                                              ; preds = %213, %261, %259, %243, %241, %228
  %264 = phi i8* [ %262, %261 ], [ %230, %259 ], [ %230, %243 ], [ %230, %228 ], [ %230, %241 ], [ %214, %213 ]
  %265 = load i8, i8* %200, align 1
  %266 = icmp eq i8 %265, 48
  %267 = select i1 %266, i8* %197, i8* %200
  br label %268

268:                                              ; preds = %175, %135, %263
  %269 = phi i8* [ %264, %263 ], [ %121, %135 ], [ %121, %175 ]
  %270 = phi i8* [ %267, %263 ], [ %142, %135 ], [ %182, %175 ]
  %271 = ptrtoint i8* %269 to i64
  %272 = ptrtoint i8* %270 to i64
  %273 = sub i64 %271, %272
  %274 = load i32, i32* %98, align 4
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %283

276:                                              ; preds = %268
  %277 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %99, align 8
  %278 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %277, i64 0, i32 1
  %279 = load i8, i8* %278, align 1
  %280 = and i8 %279, 8
  %281 = icmp eq i8 %280, 0
  %282 = add i64 %273, -1
  br i1 %281, label %284, label %283

283:                                              ; preds = %276, %268
  br label %284

284:                                              ; preds = %283, %276
  %285 = phi i64 [ %273, %283 ], [ %282, %276 ]
  %286 = icmp sgt i64 %285, -1
  br i1 %286, label %288, label %287, !prof !2

287:                                              ; preds = %284
  call void @llvm.trap() #13
  unreachable

288:                                              ; preds = %284
  %289 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i8** %289, align 8
  %290 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %291 = ptrtoint i8* %121 to i64
  %292 = sub i64 %291, %271
  %293 = trunc i64 %292 to i32
  %294 = add i32 %274, %293
  store i64 0, i64* %290, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110FinalPrintERKNS1_11FormatStateENS_11string_viewEiiS5_(%"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %13, i8* %270, i64 %285, i32 0, i32 %294, %"class.absl::string_view"* nonnull byval(%"class.absl::string_view") align 8 %5) #13
  call void @llvm.lifetime.end.p0i8(i64 171, i8* nonnull %119) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #13
  br label %295

295:                                              ; preds = %112, %115, %288
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97) #13
  br label %681

296:                                              ; preds = %80
  %297 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EdEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(i64 %91, i32 %90, i32 %84, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* nonnull %12, i32* nonnull %11)
  br i1 %297, label %300, label %298

298:                                              ; preds = %296
  %299 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2)
  br label %681

300:                                              ; preds = %296
  %301 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %302 = load i8, i8* %301, align 1
  %303 = and i8 %302, 8
  %304 = icmp eq i8 %303, 0
  br i1 %304, label %305, label %312

305:                                              ; preds = %300
  %306 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 2
  %307 = load i8*, i8** %306, align 8
  %308 = getelementptr inbounds i8, i8* %307, i64 -1
  %309 = load i8, i8* %308, align 1
  %310 = icmp eq i8 %309, 46
  br i1 %310, label %311, label %312

311:                                              ; preds = %305
  store i8* %308, i8** %306, align 8
  br label %312

312:                                              ; preds = %300, %311, %305
  %313 = load i32, i32* %11, align 4
  %314 = load i8, i8* %93, align 4
  %315 = add i8 %314, -7
  %316 = icmp ult i8 %315, 9
  br i1 %316, label %317, label %321

317:                                              ; preds = %312
  %318 = sext i8 %315 to i64
  %319 = getelementptr inbounds [9 x i8], [9 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.32, i64 0, i64 %318
  %320 = load i8, i8* %319, align 1
  br label %321

321:                                              ; preds = %317, %312
  %322 = phi i8 [ 101, %312 ], [ %320, %317 ]
  %323 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 2
  %324 = load i8*, i8** %323, align 8
  %325 = getelementptr inbounds i8, i8* %324, i64 1
  store i8* %325, i8** %323, align 8
  store i8 %322, i8* %324, align 1
  %326 = icmp slt i32 %313, 0
  %327 = load i8*, i8** %323, align 8
  %328 = getelementptr inbounds i8, i8* %327, i64 1
  store i8* %328, i8** %323, align 8
  br i1 %326, label %329, label %331

329:                                              ; preds = %321
  store i8 45, i8* %327, align 1
  %330 = sub nsw i32 0, %313
  br label %332

331:                                              ; preds = %321
  store i8 43, i8* %327, align 1
  br label %332

332:                                              ; preds = %331, %329
  %333 = phi i32 [ %330, %329 ], [ %313, %331 ]
  %334 = icmp sgt i32 %333, 99
  br i1 %334, label %335, label %352

335:                                              ; preds = %332
  %336 = udiv i32 %333, 100
  %337 = trunc i32 %336 to i8
  %338 = add i8 %337, 48
  %339 = load i8*, i8** %323, align 8
  %340 = getelementptr inbounds i8, i8* %339, i64 1
  store i8* %340, i8** %323, align 8
  store i8 %338, i8* %339, align 1
  %341 = udiv i32 %333, 10
  %342 = urem i32 %341, 10
  %343 = trunc i32 %342 to i8
  %344 = or i8 %343, 48
  %345 = load i8*, i8** %323, align 8
  %346 = getelementptr inbounds i8, i8* %345, i64 1
  store i8* %346, i8** %323, align 8
  store i8 %344, i8* %345, align 1
  %347 = urem i32 %333, 10
  %348 = trunc i32 %347 to i8
  %349 = or i8 %348, 48
  %350 = load i8*, i8** %323, align 8
  %351 = getelementptr inbounds i8, i8* %350, i64 1
  store i8* %351, i8** %323, align 8
  store i8 %349, i8* %350, align 1
  br label %670

352:                                              ; preds = %332
  %353 = sdiv i32 %333, 10
  %354 = trunc i32 %353 to i8
  %355 = add i8 %354, 48
  %356 = load i8*, i8** %323, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 1
  store i8* %357, i8** %323, align 8
  store i8 %355, i8* %356, align 1
  %358 = srem i32 %333, 10
  %359 = trunc i32 %358 to i8
  %360 = add nsw i8 %359, 48
  %361 = load i8*, i8** %323, align 8
  %362 = getelementptr inbounds i8, i8* %361, i64 1
  store i8* %362, i8** %323, align 8
  store i8 %360, i8* %361, align 1
  br label %670

363:                                              ; preds = %80
  %364 = icmp sgt i32 %84, 1
  %365 = select i1 %364, i32 %84, i32 1
  %366 = add nsw i32 %365, -1
  %367 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EdEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(i64 %91, i32 %90, i32 %366, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* nonnull %12, i32* nonnull %11)
  br i1 %367, label %370, label %368

368:                                              ; preds = %363
  %369 = call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2)
  br label %681

370:                                              ; preds = %363
  %371 = load i32, i32* %11, align 4
  %372 = icmp sgt i32 %365, %371
  %373 = icmp sgt i32 %371, -5
  %374 = and i1 %372, %373
  br i1 %374, label %375, label %441

375:                                              ; preds = %370
  %376 = icmp slt i32 %371, 0
  br i1 %376, label %377, label %422

377:                                              ; preds = %375
  %378 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 1
  %379 = load i8*, i8** %378, align 8
  %380 = load i8, i8* %379, align 1
  %381 = getelementptr inbounds i8, i8* %379, i64 1
  store i8 %380, i8* %381, align 1
  %382 = icmp eq i32 %371, -1
  %383 = load i8*, i8** %378, align 8
  %384 = getelementptr inbounds i8, i8* %383, i64 -1
  store i8* %384, i8** %378, align 8
  br i1 %382, label %419, label %385

385:                                              ; preds = %377
  %386 = sub i32 -2, %371
  %387 = and i32 %371, 3
  %388 = xor i32 %387, 3
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %399, label %390

390:                                              ; preds = %385, %390
  %391 = phi i8* [ %395, %390 ], [ %383, %385 ]
  %392 = phi i32 [ %394, %390 ], [ %371, %385 ]
  %393 = phi i32 [ %397, %390 ], [ %388, %385 ]
  store i8 48, i8* %391, align 1
  %394 = add nuw nsw i32 %392, 1
  %395 = load i8*, i8** %378, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 -1
  store i8* %396, i8** %378, align 8
  %397 = add i32 %393, -1
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %390, !llvm.loop !11

399:                                              ; preds = %390, %385
  %400 = phi i8* [ undef, %385 ], [ %395, %390 ]
  %401 = phi i8* [ %383, %385 ], [ %395, %390 ]
  %402 = phi i32 [ %371, %385 ], [ %394, %390 ]
  %403 = icmp ult i32 %386, 3
  br i1 %403, label %417, label %404

404:                                              ; preds = %399, %404
  %405 = phi i8* [ %414, %404 ], [ %401, %399 ]
  %406 = phi i32 [ %413, %404 ], [ %402, %399 ]
  store i8 48, i8* %405, align 1
  %407 = load i8*, i8** %378, align 8
  %408 = getelementptr inbounds i8, i8* %407, i64 -1
  store i8* %408, i8** %378, align 8
  store i8 48, i8* %407, align 1
  %409 = load i8*, i8** %378, align 8
  %410 = getelementptr inbounds i8, i8* %409, i64 -1
  store i8* %410, i8** %378, align 8
  store i8 48, i8* %409, align 1
  %411 = load i8*, i8** %378, align 8
  %412 = getelementptr inbounds i8, i8* %411, i64 -1
  store i8* %412, i8** %378, align 8
  store i8 48, i8* %411, align 1
  %413 = add nuw nsw i32 %406, 4
  %414 = load i8*, i8** %378, align 8
  %415 = getelementptr inbounds i8, i8* %414, i64 -1
  store i8* %415, i8** %378, align 8
  %416 = icmp eq i32 %413, -1
  br i1 %416, label %417, label %404

417:                                              ; preds = %404, %399
  %418 = phi i8* [ %400, %399 ], [ %414, %404 ]
  store i32 -1, i32* %11, align 4
  br label %419

419:                                              ; preds = %377, %417
  %420 = phi i8* [ %418, %417 ], [ %383, %377 ]
  store i8 46, i8* %420, align 1
  %421 = load i8*, i8** %378, align 8
  store i8 48, i8* %421, align 1
  br label %440

422:                                              ; preds = %375
  %423 = icmp eq i32 %371, 0
  br i1 %423, label %440, label %424

424:                                              ; preds = %422
  %425 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 1
  %426 = load i8*, i8** %425, align 8
  %427 = getelementptr inbounds i8, i8* %426, i64 1
  %428 = getelementptr inbounds i8, i8* %426, i64 2
  %429 = sext i32 %371 to i64
  %430 = getelementptr inbounds i8, i8* %426, i64 %429
  %431 = getelementptr inbounds i8, i8* %430, i64 2
  %432 = load i8, i8* %427, align 1
  %433 = ptrtoint i8* %431 to i64
  %434 = ptrtoint i8* %428 to i64
  %435 = sub i64 %433, %434
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %438, label %437

437:                                              ; preds = %424
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %427, i8* align 1 %428, i64 %435, i1 false) #13
  br label %438

438:                                              ; preds = %437, %424
  %439 = getelementptr inbounds i8, i8* %427, i64 %435
  store i8 %432, i8* %439, align 1
  br label %440

440:                                              ; preds = %438, %422, %419
  store i32 0, i32* %11, align 4
  br label %441

441:                                              ; preds = %440, %370
  %442 = phi i32 [ 0, %440 ], [ %371, %370 ]
  %443 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %444 = load i8, i8* %443, align 1
  %445 = and i8 %444, 8
  %446 = icmp eq i8 %445, 0
  br i1 %446, label %447, label %456

447:                                              ; preds = %441
  %448 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 2
  %449 = load i8*, i8** %448, align 8
  br label %450

450:                                              ; preds = %447, %454
  %451 = phi i8* [ %449, %447 ], [ %452, %454 ]
  %452 = getelementptr inbounds i8, i8* %451, i64 -1
  %453 = load i8, i8* %452, align 1
  switch i8 %453, label %456 [
    i8 48, label %454
    i8 46, label %455
  ]

454:                                              ; preds = %450
  store i8* %452, i8** %448, align 8
  br label %450

455:                                              ; preds = %450
  store i8* %452, i8** %448, align 8
  br label %456

456:                                              ; preds = %450, %441, %455
  %457 = icmp eq i32 %442, 0
  br i1 %457, label %670, label %458

458:                                              ; preds = %456
  %459 = load i8, i8* %93, align 4
  %460 = add i8 %459, -7
  %461 = icmp ult i8 %460, 9
  br i1 %461, label %462, label %466

462:                                              ; preds = %458
  %463 = sext i8 %460 to i64
  %464 = getelementptr inbounds [9 x i8], [9 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE.32, i64 0, i64 %463
  %465 = load i8, i8* %464, align 1
  br label %466

466:                                              ; preds = %462, %458
  %467 = phi i8 [ 101, %458 ], [ %465, %462 ]
  %468 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 2
  %469 = load i8*, i8** %468, align 8
  %470 = getelementptr inbounds i8, i8* %469, i64 1
  store i8* %470, i8** %468, align 8
  store i8 %467, i8* %469, align 1
  %471 = icmp slt i32 %442, 0
  %472 = load i8*, i8** %468, align 8
  %473 = getelementptr inbounds i8, i8* %472, i64 1
  store i8* %473, i8** %468, align 8
  br i1 %471, label %474, label %476

474:                                              ; preds = %466
  store i8 45, i8* %472, align 1
  %475 = sub nsw i32 0, %442
  br label %477

476:                                              ; preds = %466
  store i8 43, i8* %472, align 1
  br label %477

477:                                              ; preds = %476, %474
  %478 = phi i32 [ %475, %474 ], [ %442, %476 ]
  %479 = icmp sgt i32 %478, 99
  br i1 %479, label %480, label %497

480:                                              ; preds = %477
  %481 = udiv i32 %478, 100
  %482 = trunc i32 %481 to i8
  %483 = add i8 %482, 48
  %484 = load i8*, i8** %468, align 8
  %485 = getelementptr inbounds i8, i8* %484, i64 1
  store i8* %485, i8** %468, align 8
  store i8 %483, i8* %484, align 1
  %486 = udiv i32 %478, 10
  %487 = urem i32 %486, 10
  %488 = trunc i32 %487 to i8
  %489 = or i8 %488, 48
  %490 = load i8*, i8** %468, align 8
  %491 = getelementptr inbounds i8, i8* %490, i64 1
  store i8* %491, i8** %468, align 8
  store i8 %489, i8* %490, align 1
  %492 = urem i32 %478, 10
  %493 = trunc i32 %492 to i8
  %494 = or i8 %493, 48
  %495 = load i8*, i8** %468, align 8
  %496 = getelementptr inbounds i8, i8* %495, i64 1
  store i8* %496, i8** %468, align 8
  store i8 %494, i8* %495, align 1
  br label %670

497:                                              ; preds = %477
  %498 = sdiv i32 %478, 10
  %499 = trunc i32 %498 to i8
  %500 = add i8 %499, 48
  %501 = load i8*, i8** %468, align 8
  %502 = getelementptr inbounds i8, i8* %501, i64 1
  store i8* %502, i8** %468, align 8
  store i8 %500, i8* %501, align 1
  %503 = srem i32 %478, 10
  %504 = trunc i32 %503 to i8
  %505 = add nsw i8 %504, 48
  %506 = load i8*, i8** %468, align 8
  %507 = getelementptr inbounds i8, i8* %506, i64 1
  store i8* %507, i8** %468, align 8
  store i8 %505, i8* %506, align 1
  br label %670

508:                                              ; preds = %80
  %509 = icmp eq i8 %94, 15
  %510 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %510) #13
  store i8 %38, i8* %510, align 8
  %511 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 1
  store i32 %84, i32* %511, align 4
  %512 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 2
  store %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %512, align 8
  %513 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %14, i64 0, i32 3
  store %"class.absl::str_format_internal::FormatSinkImpl"* %2, %"class.absl::str_format_internal::FormatSinkImpl"** %513, align 8
  %514 = bitcast %"class.absl::string_view"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %514)
  %515 = load i32, i32* %81, align 4
  %516 = icmp sgt i32 %515, -1
  %517 = add nsw i32 %89, 11
  %518 = icmp sgt i64 %91, 0
  br i1 %518, label %519, label %531

519:                                              ; preds = %508, %527
  %520 = phi i32 [ %529, %527 ], [ %517, %508 ]
  %521 = phi i64 [ %528, %527 ], [ %91, %508 ]
  %522 = icmp sgt i32 %520, -1022
  br i1 %522, label %527, label %523, !prof !2

523:                                              ; preds = %519
  %524 = sub nuw nsw i32 -1022, %520
  %525 = zext i32 %524 to i64
  %526 = lshr i64 %521, %525
  br label %540

527:                                              ; preds = %519
  %528 = shl i64 %521, 1
  %529 = add nsw i32 %520, -1
  %530 = icmp sgt i64 %528, 0
  br i1 %530, label %519, label %531

531:                                              ; preds = %527, %508
  %532 = phi i64 [ %91, %508 ], [ %528, %527 ]
  %533 = phi i32 [ %517, %508 ], [ %529, %527 ]
  %534 = lshr i64 %532, 63
  %535 = trunc i64 %534 to i8
  %536 = icmp eq i64 %532, 0
  %537 = select i1 %536, i32 %533, i32 1
  %538 = sub nsw i32 %533, %537
  %539 = shl i64 %532, 1
  br label %540

540:                                              ; preds = %531, %523
  %541 = phi i64 [ %539, %531 ], [ %526, %523 ]
  %542 = phi i32 [ %538, %531 ], [ -1022, %523 ]
  %543 = phi i8 [ %535, %531 ], [ 0, %523 ]
  br i1 %516, label %544, label %601

544:                                              ; preds = %540
  %545 = icmp slt i32 %84, 16
  br i1 %545, label %546, label %595

546:                                              ; preds = %544
  %547 = shl i32 %84, 2
  %548 = sub i32 64, %547
  %549 = sub i32 60, %547
  %550 = icmp sgt i32 %547, 0
  %551 = select i1 %550, i32 %547, i32 0
  %552 = zext i32 %551 to i64
  %553 = lshr i64 -1, %552
  %554 = and i64 %541, %553
  %555 = zext i32 %549 to i64
  %556 = shl i64 8, %555
  %557 = icmp eq i64 %554, %556
  br i1 %557, label %560, label %558

558:                                              ; preds = %546
  %559 = icmp ugt i64 %554, %556
  br i1 %559, label %573, label %590

560:                                              ; preds = %546
  %561 = icmp eq i32 %84, 0
  br i1 %561, label %569, label %562

562:                                              ; preds = %560
  %563 = zext i32 %548 to i64
  %564 = shl i64 15, %563
  %565 = and i64 %541, %564
  %566 = lshr i64 %565, %563
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 15
  br label %569

569:                                              ; preds = %562, %560
  %570 = phi i8 [ %568, %562 ], [ %543, %560 ]
  %571 = and i8 %570, 1
  %572 = icmp eq i8 %571, 0
  br i1 %572, label %590, label %573

573:                                              ; preds = %569, %558
  %574 = icmp slt i32 %84, 1
  %575 = zext i32 %548 to i64
  %576 = shl i64 1, %575
  %577 = select i1 %574, i64 0, i64 %576
  %578 = add i64 %541, %577
  %579 = icmp slt i64 %541, 0
  %580 = icmp sgt i64 %578, -1
  %581 = and i1 %579, %580
  %582 = or i1 %574, %581
  %583 = zext i1 %582 to i8
  %584 = add nuw nsw i8 %543, %583
  %585 = icmp ugt i8 %584, 15
  %586 = add nsw i32 %542, 4
  %587 = select i1 %585, i64 0, i64 %578, !prof !7
  %588 = select i1 %585, i32 %586, i32 %542, !prof !7
  %589 = select i1 %585, i8 1, i8 %584, !prof !7
  br label %590

590:                                              ; preds = %573, %569, %558
  %591 = phi i64 [ %541, %569 ], [ %541, %558 ], [ %587, %573 ]
  %592 = phi i32 [ %542, %569 ], [ %542, %558 ], [ %588, %573 ]
  %593 = phi i8 [ %543, %569 ], [ %543, %558 ], [ %589, %573 ]
  %594 = xor i64 %553, -1
  br label %595

595:                                              ; preds = %590, %544
  %596 = phi i64 [ %591, %590 ], [ %541, %544 ]
  %597 = phi i32 [ %592, %590 ], [ %542, %544 ]
  %598 = phi i8 [ %593, %590 ], [ %543, %544 ]
  %599 = phi i64 [ %594, %590 ], [ -1, %544 ]
  %600 = and i64 %599, %596
  br label %601

601:                                              ; preds = %595, %540
  %602 = phi i64 [ %600, %595 ], [ %541, %540 ]
  %603 = phi i32 [ %597, %595 ], [ %542, %540 ]
  %604 = phi i8 [ %598, %595 ], [ %543, %540 ]
  %605 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %605) #13
  %606 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 1
  %607 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 2
  %608 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 3
  %609 = getelementptr inbounds [20 x i8], [20 x i8]* %8, i64 0, i64 4
  %610 = select i1 %509, i64 0, i64 16
  %611 = getelementptr inbounds [33 x i8], [33 x i8]* @.str.26, i64 0, i64 %610
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %605, i8 -86, i64 20, i1 false) #13
  store i8 48, i8* %605, align 16
  %612 = select i1 %509, i8 88, i8 120
  store i8 %612, i8* %606, align 1
  %613 = zext i8 %604 to i64
  %614 = getelementptr inbounds i8, i8* %611, i64 %613
  %615 = load i8, i8* %614, align 1
  store i8 %615, i8* %607, align 2
  br i1 %516, label %616, label %618

616:                                              ; preds = %601
  %617 = icmp sgt i32 %84, 0
  br i1 %617, label %625, label %620

618:                                              ; preds = %601
  %619 = icmp eq i64 %602, 0
  br i1 %619, label %620, label %625

620:                                              ; preds = %618, %616
  %621 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %622 = load i8, i8* %621, align 1
  %623 = and i8 %622, 8
  %624 = icmp eq i8 %623, 0
  br i1 %624, label %626, label %625

625:                                              ; preds = %620, %618, %616
  store i8 46, i8* %608, align 1
  br label %626

626:                                              ; preds = %625, %620
  %627 = phi i8* [ %609, %625 ], [ %608, %620 ]
  %628 = icmp eq i64 %602, 0
  br i1 %628, label %642, label %629

629:                                              ; preds = %626, %629
  %630 = phi i8* [ %636, %629 ], [ %627, %626 ]
  %631 = phi i32 [ %638, %629 ], [ 0, %626 ]
  %632 = phi i64 [ %637, %629 ], [ %602, %626 ]
  %633 = lshr i64 %632, 60
  %634 = getelementptr inbounds i8, i8* %611, i64 %633
  %635 = load i8, i8* %634, align 1
  %636 = getelementptr inbounds i8, i8* %630, i64 1
  store i8 %635, i8* %630, align 1
  %637 = shl i64 %632, 4
  %638 = add nuw nsw i32 %631, 1
  %639 = icmp eq i64 %637, 0
  br i1 %639, label %640, label %629

640:                                              ; preds = %629
  %641 = load i32, i32* %511, align 4
  br label %642

642:                                              ; preds = %640, %626
  %643 = phi i32 [ %84, %626 ], [ %641, %640 ]
  %644 = phi i32 [ 0, %626 ], [ %638, %640 ]
  %645 = phi i8* [ %627, %626 ], [ %636, %640 ]
  %646 = sub nsw i32 %643, %644
  %647 = select i1 %516, i32 %646, i32 0
  %648 = ptrtoint i8* %645 to i64
  %649 = ptrtoint [20 x i8]* %8 to i64
  %650 = sub i64 %648, %649
  %651 = icmp sgt i64 %650, -1
  br i1 %651, label %653, label %652, !prof !2

652:                                              ; preds = %642
  call void @llvm.trap() #13
  unreachable

653:                                              ; preds = %642
  %654 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 34, i8* nonnull %654) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %654, i8 -86, i64 34, i1 false) #13
  %655 = select i1 %509, i8 80, i8 112
  store i8 %655, i8* %654, align 16
  %656 = icmp sgt i32 %603, -1
  %657 = select i1 %656, i8 43, i8 45
  %658 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 1
  store i8 %657, i8* %658, align 1
  %659 = icmp slt i32 %603, 0
  %660 = sub nsw i32 0, %603
  %661 = select i1 %659, i32 %660, i32 %603
  %662 = getelementptr inbounds [34 x i8], [34 x i8]* %9, i64 0, i64 2
  %663 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %661, i8* %662) #13
  %664 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %10, i64 0, i32 0
  store i8* %654, i8** %664, align 8
  %665 = call i64 @strlen(i8* nonnull %654) #13
  %666 = icmp sgt i64 %665, -1
  br i1 %666, label %668, label %667, !prof !2

667:                                              ; preds = %653
  call void @llvm.trap() #13
  unreachable

668:                                              ; preds = %653
  %669 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %10, i64 0, i32 1
  store i64 %665, i64* %669, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110FinalPrintERKNS1_11FormatStateENS_11string_viewEiiS5_(%"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nonnull dereferenceable(24) %14, i8* nonnull %605, i64 %650, i32 2, i32 %647, %"class.absl::string_view"* nonnull byval(%"class.absl::string_view") align 8 %10) #13
  call void @llvm.lifetime.end.p0i8(i64 34, i8* nonnull %654) #13
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %605) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %514)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %510) #13
  br label %681

670:                                              ; preds = %497, %480, %352, %335, %456
  %671 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 1
  %672 = load i8*, i8** %671, align 8
  %673 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %12, i64 0, i32 2
  %674 = bitcast i8** %673 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = ptrtoint i8* %672 to i64
  %677 = sub i64 %675, %676
  %678 = icmp sgt i64 %677, -1
  br i1 %678, label %680, label %679, !prof !2

679:                                              ; preds = %670
  call void @llvm.trap() #13
  unreachable

680:                                              ; preds = %670
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_117WriteBufferToSinkEcNS_11string_viewERKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext %38, i8* %672, i64 %677, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2)
  br label %681

681:                                              ; preds = %80, %680, %668, %368, %298, %295
  %682 = phi i1 [ true, %295 ], [ true, %680 ], [ %299, %298 ], [ %369, %368 ], [ true, %668 ], [ false, %80 ]
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %92) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #13
  br label %683

683:                                              ; preds = %72, %681
  %684 = phi i1 [ %682, %681 ], [ true, %72 ]
  ret i1 %684
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %4 = tail call fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_111FloatToSinkIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12) %1, %"class.absl::str_format_internal::FormatSinkImpl"* %2)
  ret i1 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EeEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* nocapture readonly byval(%"struct.absl::str_format_internal::(anonymous namespace)::Decomposed") align 16, i32, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"*, i32* nocapture) unnamed_addr #2 {
  %5 = icmp sgt i32 %1, 39
  br i1 %5, label %771, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %0, i64 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 41
  %12 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 2
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 1
  store i8* %11, i8** %13, align 8
  %14 = icmp sgt i32 %10, -1
  %15 = ptrtoint i8* %11 to i64
  br i1 %14, label %16, label %154

16:                                               ; preds = %6
  %17 = icmp eq i32 %10, 0
  br i1 %17, label %18, label %386

18:                                               ; preds = %16
  %19 = icmp eq i64 %8, 0
  br i1 %19, label %60, label %20

20:                                               ; preds = %18
  %21 = urem i64 %8, 10
  %22 = udiv i64 %8, 10
  %23 = trunc i64 %21 to i8
  %24 = or i8 %23, 48
  %25 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 40
  store i8* %25, i8** %13, align 8
  store i8 %24, i8* %25, align 1
  %26 = icmp ult i64 %8, 10
  br i1 %26, label %33, label %27

27:                                               ; preds = %20
  %28 = urem i64 %22, 10
  %29 = trunc i64 %28 to i8
  %30 = or i8 %29, 48
  %31 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 39
  store i8* %31, i8** %13, align 8
  store i8 %30, i8* %31, align 1
  %32 = icmp ult i64 %8, 100
  br i1 %32, label %44, label %35

33:                                               ; preds = %20
  %34 = ptrtoint i8* %25 to i64
  br label %49

35:                                               ; preds = %27, %35
  %36 = phi i64 [ %38, %35 ], [ %22, %27 ]
  %37 = load i8*, i8** %13, align 8
  %38 = udiv i64 %36, 10
  %39 = urem i64 %38, 10
  %40 = trunc i64 %39 to i8
  %41 = or i8 %40, 48
  %42 = getelementptr inbounds i8, i8* %37, i64 -1
  store i8* %42, i8** %13, align 8
  store i8 %41, i8* %42, align 1
  %43 = icmp ult i64 %36, 100
  br i1 %43, label %44, label %35

44:                                               ; preds = %35, %27
  %45 = bitcast i8** %12 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast i8** %13 to i64*
  %48 = load i64, i64* %47, align 8
  br label %49

49:                                               ; preds = %33, %44
  %50 = phi i64 [ %48, %44 ], [ %34, %33 ]
  %51 = phi i64 [ %46, %44 ], [ %15, %33 ]
  %52 = sub i64 %51, %50
  %53 = trunc i64 %52 to i32
  %54 = inttoptr i64 %50 to i8*
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 -1
  store i8* %56, i8** %13, align 8
  store i8 %55, i8* %56, align 1
  %57 = load i8*, i8** %13, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 46, i8* %58, align 1
  %59 = add i32 %53, -1
  br label %60

60:                                               ; preds = %49, %18
  %61 = phi i32 [ %59, %49 ], [ -1, %18 ]
  store i32 %61, i32* %3, align 4
  %62 = sub nsw i32 %1, %61
  %63 = sub nsw i32 0, %62
  %64 = icmp sgt i32 %62, -1
  br i1 %64, label %65, label %84

65:                                               ; preds = %60
  %66 = icmp eq i32 %62, 0
  br i1 %66, label %771, label %67

67:                                               ; preds = %65
  %68 = sub i32 %1, %61
  %69 = xor i32 %61, -1
  %70 = add i32 %69, %1
  %71 = and i32 %68, 3
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %67, %73
  %74 = phi i32 [ %76, %73 ], [ %62, %67 ]
  %75 = phi i32 [ %79, %73 ], [ %71, %67 ]
  %76 = add nsw i32 %74, -1
  %77 = load i8*, i8** %12, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %78, i8** %12, align 8
  store i8 48, i8* %77, align 1
  %79 = add i32 %75, -1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %73, !llvm.loop !12

81:                                               ; preds = %73, %67
  %82 = phi i32 [ %62, %67 ], [ %76, %73 ]
  %83 = icmp ult i32 %70, 3
  br i1 %83, label %771, label %142

84:                                               ; preds = %60
  %85 = load i8*, i8** %12, align 8
  %86 = sext i32 %63 to i64
  %87 = sub nsw i64 0, %86
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  store i8* %88, i8** %12, align 8
  %89 = load i8, i8* %88, align 1
  %90 = icmp sgt i8 %89, 53
  br i1 %90, label %116, label %91

91:                                               ; preds = %84
  %92 = icmp eq i8 %89, 53
  br i1 %92, label %93, label %771

93:                                               ; preds = %91
  %94 = icmp eq i32 %63, 1
  br i1 %94, label %104, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds i8, i8* %88, i64 1
  br label %99

97:                                               ; preds = %99
  %98 = icmp eq i8* %103, %85
  br i1 %98, label %104, label %99

99:                                               ; preds = %97, %95
  %100 = phi i8* [ %103, %97 ], [ %96, %95 ]
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 48
  %103 = getelementptr inbounds i8, i8* %100, i64 1
  br i1 %102, label %97, label %116

104:                                              ; preds = %97, %93
  %105 = getelementptr inbounds i8, i8* %88, i64 -1
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %106, 46
  br i1 %107, label %108, label %111

108:                                              ; preds = %104
  %109 = getelementptr inbounds i8, i8* %88, i64 -2
  %110 = load i8, i8* %109, align 1
  br label %111

111:                                              ; preds = %108, %104
  %112 = phi i8 [ %110, %108 ], [ %106, %104 ]
  %113 = sext i8 %112 to i32
  %114 = srem i32 %113, 2
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %771

116:                                              ; preds = %99, %111, %84
  %117 = getelementptr inbounds i8, i8* %88, i64 -1
  %118 = load i8*, i8** %13, align 8
  %119 = icmp ult i8* %117, %118
  br i1 %119, label %130, label %120

120:                                              ; preds = %116, %126
  %121 = phi i8* [ %127, %126 ], [ %118, %116 ]
  %122 = phi i8* [ %128, %126 ], [ %117, %116 ]
  %123 = load i8, i8* %122, align 1
  switch i8 %123, label %140 [
    i8 57, label %124
    i8 46, label %126
  ]

124:                                              ; preds = %120
  store i8 48, i8* %122, align 1
  %125 = load i8*, i8** %13, align 8
  br label %126

126:                                              ; preds = %124, %120
  %127 = phi i8* [ %121, %120 ], [ %125, %124 ]
  %128 = getelementptr inbounds i8, i8* %122, i64 -1
  %129 = icmp ult i8* %128, %127
  br i1 %129, label %130, label %120

130:                                              ; preds = %126, %116
  %131 = phi i8* [ %88, %116 ], [ %122, %126 ]
  %132 = phi i8* [ %117, %116 ], [ %128, %126 ]
  store i8 49, i8* %132, align 1
  store i8* %132, i8** %13, align 8
  %133 = getelementptr inbounds i8, i8* %131, i64 1
  %134 = load i8, i8* %131, align 1
  %135 = load i8, i8* %133, align 1
  store i8 %135, i8* %131, align 1
  store i8 %134, i8* %133, align 1
  %136 = load i32, i32* %3, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %3, align 4
  %138 = load i8*, i8** %12, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 -1
  store i8* %139, i8** %12, align 8
  br label %771

140:                                              ; preds = %120
  %141 = add i8 %123, 1
  store i8 %141, i8* %122, align 1
  br label %771

142:                                              ; preds = %81, %142
  %143 = phi i32 [ %150, %142 ], [ %82, %81 ]
  %144 = load i8*, i8** %12, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  store i8* %145, i8** %12, align 8
  store i8 48, i8* %144, align 1
  %146 = load i8*, i8** %12, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 1
  store i8* %147, i8** %12, align 8
  store i8 48, i8* %146, align 1
  %148 = load i8*, i8** %12, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  store i8* %149, i8** %12, align 8
  store i8 48, i8* %148, align 1
  %150 = add nsw i32 %143, -4
  %151 = load i8*, i8** %12, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 1
  store i8* %152, i8** %12, align 8
  store i8 48, i8* %151, align 1
  %153 = icmp sgt i32 %150, 0
  br i1 %153, label %142, label %771

154:                                              ; preds = %6
  %155 = icmp slt i32 %10, -60
  br i1 %155, label %386, label %156

156:                                              ; preds = %154
  %157 = sub nsw i32 0, %10
  %158 = zext i32 %157 to i64
  %159 = shl nsw i64 -1, %158
  %160 = xor i64 %159, -1
  %161 = lshr i64 %8, %158
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %178, label %163

163:                                              ; preds = %156
  %164 = urem i64 %161, 10
  %165 = udiv i64 %161, 10
  %166 = trunc i64 %164 to i8
  %167 = or i8 %166, 48
  %168 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 40
  store i8* %168, i8** %13, align 8
  store i8 %167, i8* %168, align 1
  %169 = icmp ult i64 %161, 10
  br i1 %169, label %176, label %170

170:                                              ; preds = %163
  %171 = urem i64 %165, 10
  %172 = trunc i64 %171 to i8
  %173 = or i8 %172, 48
  %174 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 39
  store i8* %174, i8** %13, align 8
  store i8 %173, i8* %174, align 1
  %175 = icmp ult i64 %161, 100
  br i1 %175, label %189, label %180

176:                                              ; preds = %163
  %177 = ptrtoint i8* %168 to i64
  br label %194

178:                                              ; preds = %156
  %179 = and i64 %8, %160
  br label %206

180:                                              ; preds = %170, %180
  %181 = phi i64 [ %183, %180 ], [ %165, %170 ]
  %182 = load i8*, i8** %13, align 8
  %183 = udiv i64 %181, 10
  %184 = urem i64 %183, 10
  %185 = trunc i64 %184 to i8
  %186 = or i8 %185, 48
  %187 = getelementptr inbounds i8, i8* %182, i64 -1
  store i8* %187, i8** %13, align 8
  store i8 %186, i8* %187, align 1
  %188 = icmp ult i64 %181, 100
  br i1 %188, label %189, label %180

189:                                              ; preds = %180, %170
  %190 = bitcast i8** %12 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = bitcast i8** %13 to i64*
  %193 = load i64, i64* %192, align 8
  br label %194

194:                                              ; preds = %176, %189
  %195 = phi i64 [ %193, %189 ], [ %177, %176 ]
  %196 = phi i64 [ %191, %189 ], [ %15, %176 ]
  %197 = sub i64 %196, %195
  %198 = trunc i64 %197 to i32
  %199 = inttoptr i64 %195 to i8*
  %200 = load i8, i8* %199, align 1
  %201 = getelementptr inbounds i8, i8* %199, i64 -1
  store i8* %201, i8** %13, align 8
  store i8 %200, i8* %201, align 1
  %202 = load i8*, i8** %13, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  store i8 46, i8* %203, align 1
  %204 = and i64 %8, %160
  %205 = icmp eq i32 %198, 0
  br i1 %205, label %206, label %226

206:                                              ; preds = %194, %178
  %207 = phi i64 [ %179, %178 ], [ %204, %194 ]
  store i32 0, i32* %3, align 4
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %216, label %209

209:                                              ; preds = %206, %209
  %210 = phi i32 [ %213, %209 ], [ 0, %206 ]
  %211 = phi i64 [ %212, %209 ], [ %207, %206 ]
  %212 = mul i64 %211, 10
  %213 = add nsw i32 %210, -1
  %214 = icmp ugt i64 %212, %160
  br i1 %214, label %215, label %209

215:                                              ; preds = %209
  store i32 %213, i32* %3, align 4
  br label %216

216:                                              ; preds = %215, %206
  %217 = phi i64 [ 0, %206 ], [ %212, %215 ]
  %218 = lshr i64 %217, %158
  %219 = trunc i64 %218 to i8
  %220 = add i8 %219, 48
  %221 = load i8*, i8** %13, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 -1
  store i8* %222, i8** %13, align 8
  store i8 %220, i8* %222, align 1
  %223 = load i8*, i8** %12, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 1
  store i8* %224, i8** %12, align 8
  store i8 46, i8* %223, align 1
  %225 = and i64 %217, %160
  br label %291

226:                                              ; preds = %194
  %227 = add nsw i32 %198, -1
  store i32 %227, i32* %3, align 4
  %228 = sub nsw i32 %1, %227
  %229 = sub nsw i32 0, %228
  %230 = icmp eq i64 %204, 0
  %231 = icmp sgt i32 %228, -1
  br i1 %231, label %291, label %232

232:                                              ; preds = %226
  %233 = load i8*, i8** %12, align 8
  %234 = sext i32 %229 to i64
  %235 = sub nsw i64 0, %234
  %236 = getelementptr inbounds i8, i8* %233, i64 %235
  store i8* %236, i8** %12, align 8
  %237 = load i8, i8* %236, align 1
  %238 = icmp sgt i8 %237, 53
  br i1 %238, label %265, label %239

239:                                              ; preds = %232
  %240 = icmp eq i8 %237, 53
  br i1 %240, label %241, label %771

241:                                              ; preds = %239
  br i1 %230, label %242, label %265

242:                                              ; preds = %241
  %243 = icmp eq i32 %229, 1
  br i1 %243, label %253, label %244

244:                                              ; preds = %242
  %245 = getelementptr inbounds i8, i8* %236, i64 1
  br label %248

246:                                              ; preds = %248
  %247 = icmp eq i8* %252, %233
  br i1 %247, label %253, label %248

248:                                              ; preds = %246, %244
  %249 = phi i8* [ %252, %246 ], [ %245, %244 ]
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 48
  %252 = getelementptr inbounds i8, i8* %249, i64 1
  br i1 %251, label %246, label %265

253:                                              ; preds = %246, %242
  %254 = getelementptr inbounds i8, i8* %236, i64 -1
  %255 = load i8, i8* %254, align 1
  %256 = icmp eq i8 %255, 46
  br i1 %256, label %257, label %260

257:                                              ; preds = %253
  %258 = getelementptr inbounds i8, i8* %236, i64 -2
  %259 = load i8, i8* %258, align 1
  br label %260

260:                                              ; preds = %257, %253
  %261 = phi i8 [ %259, %257 ], [ %255, %253 ]
  %262 = sext i8 %261 to i32
  %263 = srem i32 %262, 2
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %265, label %771

265:                                              ; preds = %248, %260, %241, %232
  %266 = getelementptr inbounds i8, i8* %236, i64 -1
  %267 = load i8*, i8** %13, align 8
  %268 = icmp ult i8* %266, %267
  br i1 %268, label %279, label %269

269:                                              ; preds = %265, %275
  %270 = phi i8* [ %276, %275 ], [ %267, %265 ]
  %271 = phi i8* [ %277, %275 ], [ %266, %265 ]
  %272 = load i8, i8* %271, align 1
  switch i8 %272, label %289 [
    i8 57, label %273
    i8 46, label %275
  ]

273:                                              ; preds = %269
  store i8 48, i8* %271, align 1
  %274 = load i8*, i8** %13, align 8
  br label %275

275:                                              ; preds = %273, %269
  %276 = phi i8* [ %270, %269 ], [ %274, %273 ]
  %277 = getelementptr inbounds i8, i8* %271, i64 -1
  %278 = icmp ult i8* %277, %276
  br i1 %278, label %279, label %269

279:                                              ; preds = %275, %265
  %280 = phi i8* [ %236, %265 ], [ %271, %275 ]
  %281 = phi i8* [ %266, %265 ], [ %277, %275 ]
  store i8 49, i8* %281, align 1
  store i8* %281, i8** %13, align 8
  %282 = getelementptr inbounds i8, i8* %280, i64 1
  %283 = load i8, i8* %280, align 1
  %284 = load i8, i8* %282, align 1
  store i8 %284, i8* %280, align 1
  store i8 %283, i8* %282, align 1
  %285 = load i32, i32* %3, align 4
  %286 = add nsw i32 %285, 1
  store i32 %286, i32* %3, align 4
  %287 = load i8*, i8** %12, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 -1
  store i8* %288, i8** %12, align 8
  br label %771

289:                                              ; preds = %269
  %290 = add i8 %272, 1
  store i8 %290, i8* %271, align 1
  br label %771

291:                                              ; preds = %226, %216
  %292 = phi i64 [ %225, %216 ], [ %204, %226 ]
  %293 = phi i32 [ %1, %216 ], [ %228, %226 ]
  %294 = icmp sgt i32 %293, 0
  %295 = mul i64 %292, 10
  %296 = lshr i64 %295, %158
  %297 = and i64 %295, %160
  br i1 %294, label %298, label %337

298:                                              ; preds = %291
  %299 = and i32 %293, 1
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %310, label %301

301:                                              ; preds = %298
  %302 = trunc i64 %296 to i8
  %303 = add i8 %302, 48
  %304 = load i8*, i8** %12, align 8
  %305 = getelementptr inbounds i8, i8* %304, i64 1
  store i8* %305, i8** %12, align 8
  store i8 %303, i8* %304, align 1
  %306 = add nsw i32 %293, -1
  %307 = mul i64 %297, 10
  %308 = lshr i64 %307, %158
  %309 = and i64 %307, %160
  br label %310

310:                                              ; preds = %298, %301
  %311 = phi i64 [ %297, %298 ], [ %309, %301 ]
  %312 = phi i64 [ %296, %298 ], [ %308, %301 ]
  %313 = phi i32 [ %293, %298 ], [ %306, %301 ]
  %314 = phi i64 [ undef, %298 ], [ %308, %301 ]
  %315 = phi i64 [ undef, %298 ], [ %309, %301 ]
  %316 = icmp eq i32 %293, 1
  br i1 %316, label %337, label %317

317:                                              ; preds = %310, %317
  %318 = phi i64 [ %336, %317 ], [ %311, %310 ]
  %319 = phi i64 [ %335, %317 ], [ %312, %310 ]
  %320 = phi i32 [ %332, %317 ], [ %313, %310 ]
  %321 = trunc i64 %319 to i8
  %322 = add i8 %321, 48
  %323 = load i8*, i8** %12, align 8
  %324 = getelementptr inbounds i8, i8* %323, i64 1
  store i8* %324, i8** %12, align 8
  store i8 %322, i8* %323, align 1
  %325 = mul i64 %318, 10
  %326 = lshr i64 %325, %158
  %327 = and i64 %325, %160
  %328 = trunc i64 %326 to i8
  %329 = add i8 %328, 48
  %330 = load i8*, i8** %12, align 8
  %331 = getelementptr inbounds i8, i8* %330, i64 1
  store i8* %331, i8** %12, align 8
  store i8 %329, i8* %330, align 1
  %332 = add nsw i32 %320, -2
  %333 = icmp sgt i32 %332, 0
  %334 = mul i64 %327, 10
  %335 = lshr i64 %334, %158
  %336 = and i64 %334, %160
  br i1 %333, label %317, label %337

337:                                              ; preds = %310, %317, %291
  %338 = phi i64 [ %296, %291 ], [ %314, %310 ], [ %335, %317 ]
  %339 = phi i64 [ %297, %291 ], [ %315, %310 ], [ %336, %317 ]
  %340 = trunc i64 %338 to i32
  %341 = icmp sgt i32 %340, 5
  br i1 %341, label %359, label %342

342:                                              ; preds = %337
  %343 = icmp eq i32 %340, 5
  br i1 %343, label %344, label %771

344:                                              ; preds = %342
  %345 = icmp eq i64 %339, 0
  br i1 %345, label %346, label %359

346:                                              ; preds = %344
  %347 = load i8*, i8** %12, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 -1
  %349 = load i8, i8* %348, align 1
  %350 = icmp eq i8 %349, 46
  br i1 %350, label %351, label %354

351:                                              ; preds = %346
  %352 = getelementptr inbounds i8, i8* %347, i64 -2
  %353 = load i8, i8* %352, align 1
  br label %354

354:                                              ; preds = %351, %346
  %355 = phi i8 [ %353, %351 ], [ %349, %346 ]
  %356 = sext i8 %355 to i32
  %357 = srem i32 %356, 2
  %358 = icmp eq i32 %357, 1
  br i1 %358, label %359, label %771

359:                                              ; preds = %354, %344, %337
  %360 = load i8*, i8** %12, align 8
  %361 = getelementptr inbounds i8, i8* %360, i64 -1
  %362 = load i8*, i8** %13, align 8
  %363 = icmp ult i8* %361, %362
  br i1 %363, label %374, label %364

364:                                              ; preds = %359, %370
  %365 = phi i8* [ %371, %370 ], [ %362, %359 ]
  %366 = phi i8* [ %372, %370 ], [ %361, %359 ]
  %367 = load i8, i8* %366, align 1
  switch i8 %367, label %384 [
    i8 57, label %368
    i8 46, label %370
  ]

368:                                              ; preds = %364
  store i8 48, i8* %366, align 1
  %369 = load i8*, i8** %13, align 8
  br label %370

370:                                              ; preds = %368, %364
  %371 = phi i8* [ %365, %364 ], [ %369, %368 ]
  %372 = getelementptr inbounds i8, i8* %366, i64 -1
  %373 = icmp ult i8* %372, %371
  br i1 %373, label %374, label %364

374:                                              ; preds = %370, %359
  %375 = phi i8* [ %360, %359 ], [ %366, %370 ]
  %376 = phi i8* [ %361, %359 ], [ %372, %370 ]
  store i8 49, i8* %376, align 1
  store i8* %376, i8** %13, align 8
  %377 = getelementptr inbounds i8, i8* %375, i64 1
  %378 = load i8, i8* %375, align 1
  %379 = load i8, i8* %377, align 1
  store i8 %379, i8* %375, align 1
  store i8 %378, i8* %377, align 1
  %380 = load i32, i32* %3, align 4
  %381 = add nsw i32 %380, 1
  store i32 %381, i32* %3, align 4
  %382 = load i8*, i8** %12, align 8
  %383 = getelementptr inbounds i8, i8* %382, i64 -1
  store i8* %383, i8** %12, align 8
  br label %771

384:                                              ; preds = %364
  %385 = add i8 %367, 1
  store i8 %385, i8* %366, align 1
  br label %771

386:                                              ; preds = %154, %16
  %387 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed", %"struct.absl::str_format_internal::(anonymous namespace)::Decomposed"* %0, i64 0, i32 0, i32 1
  %388 = load i64, i64* %387, align 8
  %389 = zext i64 %388 to i128
  %390 = shl nuw i128 %389, 64
  %391 = zext i64 %8 to i128
  %392 = or i128 %390, %391
  store i8* %11, i8** %12, align 8
  store i8* %11, i8** %13, align 8
  br i1 %14, label %393, label %534

393:                                              ; preds = %386
  %394 = icmp sgt i32 %10, 64
  br i1 %394, label %771, label %395

395:                                              ; preds = %393
  %396 = zext i32 %10 to i128
  %397 = shl i128 %392, %396
  %398 = icmp eq i128 %397, 0
  br i1 %398, label %440, label %399

399:                                              ; preds = %395
  %400 = udiv i128 %397, 10
  %401 = mul i128 %400, 10
  %402 = sub i128 %397, %401
  %403 = trunc i128 %402 to i8
  %404 = or i8 %403, 48
  %405 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 40
  store i8* %405, i8** %13, align 8
  store i8 %404, i8* %405, align 1
  %406 = icmp ult i128 %397, 10
  br i1 %406, label %413, label %407

407:                                              ; preds = %399
  %408 = urem i128 %400, 10
  %409 = trunc i128 %408 to i8
  %410 = or i8 %409, 48
  %411 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 39
  store i8* %411, i8** %13, align 8
  store i8 %410, i8* %411, align 1
  %412 = icmp ult i128 %397, 100
  br i1 %412, label %424, label %415

413:                                              ; preds = %399
  %414 = ptrtoint i8* %405 to i64
  br label %429

415:                                              ; preds = %407, %415
  %416 = phi i128 [ %418, %415 ], [ %400, %407 ]
  %417 = load i8*, i8** %13, align 8
  %418 = udiv i128 %416, 10
  %419 = urem i128 %418, 10
  %420 = trunc i128 %419 to i8
  %421 = or i8 %420, 48
  %422 = getelementptr inbounds i8, i8* %417, i64 -1
  store i8* %422, i8** %13, align 8
  store i8 %421, i8* %422, align 1
  %423 = icmp ult i128 %416, 100
  br i1 %423, label %424, label %415

424:                                              ; preds = %415, %407
  %425 = bitcast i8** %12 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = bitcast i8** %13 to i64*
  %428 = load i64, i64* %427, align 8
  br label %429

429:                                              ; preds = %413, %424
  %430 = phi i64 [ %428, %424 ], [ %414, %413 ]
  %431 = phi i64 [ %426, %424 ], [ %15, %413 ]
  %432 = sub i64 %431, %430
  %433 = trunc i64 %432 to i32
  %434 = inttoptr i64 %430 to i8*
  %435 = load i8, i8* %434, align 1
  %436 = getelementptr inbounds i8, i8* %434, i64 -1
  store i8* %436, i8** %13, align 8
  store i8 %435, i8* %436, align 1
  %437 = load i8*, i8** %13, align 8
  %438 = getelementptr inbounds i8, i8* %437, i64 1
  store i8 46, i8* %438, align 1
  %439 = add i32 %433, -1
  br label %440

440:                                              ; preds = %429, %395
  %441 = phi i32 [ %439, %429 ], [ -1, %395 ]
  store i32 %441, i32* %3, align 4
  %442 = sub nsw i32 %1, %441
  %443 = sub nsw i32 0, %442
  %444 = icmp sgt i32 %442, -1
  br i1 %444, label %445, label %464

445:                                              ; preds = %440
  %446 = icmp eq i32 %442, 0
  br i1 %446, label %771, label %447

447:                                              ; preds = %445
  %448 = sub i32 %1, %441
  %449 = xor i32 %441, -1
  %450 = add i32 %449, %1
  %451 = and i32 %448, 3
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %461, label %453

453:                                              ; preds = %447, %453
  %454 = phi i32 [ %456, %453 ], [ %442, %447 ]
  %455 = phi i32 [ %459, %453 ], [ %451, %447 ]
  %456 = add nsw i32 %454, -1
  %457 = load i8*, i8** %12, align 8
  %458 = getelementptr inbounds i8, i8* %457, i64 1
  store i8* %458, i8** %12, align 8
  store i8 48, i8* %457, align 1
  %459 = add i32 %455, -1
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %453, !llvm.loop !13

461:                                              ; preds = %453, %447
  %462 = phi i32 [ %442, %447 ], [ %456, %453 ]
  %463 = icmp ult i32 %450, 3
  br i1 %463, label %771, label %522

464:                                              ; preds = %440
  %465 = load i8*, i8** %12, align 8
  %466 = sext i32 %443 to i64
  %467 = sub nsw i64 0, %466
  %468 = getelementptr inbounds i8, i8* %465, i64 %467
  store i8* %468, i8** %12, align 8
  %469 = load i8, i8* %468, align 1
  %470 = icmp sgt i8 %469, 53
  br i1 %470, label %496, label %471

471:                                              ; preds = %464
  %472 = icmp eq i8 %469, 53
  br i1 %472, label %473, label %771

473:                                              ; preds = %471
  %474 = icmp eq i32 %443, 1
  br i1 %474, label %484, label %475

475:                                              ; preds = %473
  %476 = getelementptr inbounds i8, i8* %468, i64 1
  br label %479

477:                                              ; preds = %479
  %478 = icmp eq i8* %483, %465
  br i1 %478, label %484, label %479

479:                                              ; preds = %477, %475
  %480 = phi i8* [ %483, %477 ], [ %476, %475 ]
  %481 = load i8, i8* %480, align 1
  %482 = icmp eq i8 %481, 48
  %483 = getelementptr inbounds i8, i8* %480, i64 1
  br i1 %482, label %477, label %496

484:                                              ; preds = %477, %473
  %485 = getelementptr inbounds i8, i8* %468, i64 -1
  %486 = load i8, i8* %485, align 1
  %487 = icmp eq i8 %486, 46
  br i1 %487, label %488, label %491

488:                                              ; preds = %484
  %489 = getelementptr inbounds i8, i8* %468, i64 -2
  %490 = load i8, i8* %489, align 1
  br label %491

491:                                              ; preds = %488, %484
  %492 = phi i8 [ %490, %488 ], [ %486, %484 ]
  %493 = sext i8 %492 to i32
  %494 = srem i32 %493, 2
  %495 = icmp eq i32 %494, 1
  br i1 %495, label %496, label %771

496:                                              ; preds = %479, %491, %464
  %497 = getelementptr inbounds i8, i8* %468, i64 -1
  %498 = load i8*, i8** %13, align 8
  %499 = icmp ult i8* %497, %498
  br i1 %499, label %510, label %500

500:                                              ; preds = %496, %506
  %501 = phi i8* [ %507, %506 ], [ %498, %496 ]
  %502 = phi i8* [ %508, %506 ], [ %497, %496 ]
  %503 = load i8, i8* %502, align 1
  switch i8 %503, label %520 [
    i8 57, label %504
    i8 46, label %506
  ]

504:                                              ; preds = %500
  store i8 48, i8* %502, align 1
  %505 = load i8*, i8** %13, align 8
  br label %506

506:                                              ; preds = %504, %500
  %507 = phi i8* [ %501, %500 ], [ %505, %504 ]
  %508 = getelementptr inbounds i8, i8* %502, i64 -1
  %509 = icmp ult i8* %508, %507
  br i1 %509, label %510, label %500

510:                                              ; preds = %506, %496
  %511 = phi i8* [ %468, %496 ], [ %502, %506 ]
  %512 = phi i8* [ %497, %496 ], [ %508, %506 ]
  store i8 49, i8* %512, align 1
  store i8* %512, i8** %13, align 8
  %513 = getelementptr inbounds i8, i8* %511, i64 1
  %514 = load i8, i8* %511, align 1
  %515 = load i8, i8* %513, align 1
  store i8 %515, i8* %511, align 1
  store i8 %514, i8* %513, align 1
  %516 = load i32, i32* %3, align 4
  %517 = add nsw i32 %516, 1
  store i32 %517, i32* %3, align 4
  %518 = load i8*, i8** %12, align 8
  %519 = getelementptr inbounds i8, i8* %518, i64 -1
  store i8* %519, i8** %12, align 8
  br label %771

520:                                              ; preds = %500
  %521 = add i8 %503, 1
  store i8 %521, i8* %502, align 1
  br label %771

522:                                              ; preds = %461, %522
  %523 = phi i32 [ %530, %522 ], [ %462, %461 ]
  %524 = load i8*, i8** %12, align 8
  %525 = getelementptr inbounds i8, i8* %524, i64 1
  store i8* %525, i8** %12, align 8
  store i8 48, i8* %524, align 1
  %526 = load i8*, i8** %12, align 8
  %527 = getelementptr inbounds i8, i8* %526, i64 1
  store i8* %527, i8** %12, align 8
  store i8 48, i8* %526, align 1
  %528 = load i8*, i8** %12, align 8
  %529 = getelementptr inbounds i8, i8* %528, i64 1
  store i8* %529, i8** %12, align 8
  store i8 48, i8* %528, align 1
  %530 = add nsw i32 %523, -4
  %531 = load i8*, i8** %12, align 8
  %532 = getelementptr inbounds i8, i8* %531, i64 1
  store i8* %532, i8** %12, align 8
  store i8 48, i8* %531, align 1
  %533 = icmp sgt i32 %530, 0
  br i1 %533, label %522, label %771

534:                                              ; preds = %386
  %535 = icmp slt i32 %10, -124
  br i1 %535, label %771, label %536

536:                                              ; preds = %534
  %537 = sub nsw i32 0, %10
  %538 = zext i32 %537 to i128
  %539 = shl nsw i128 -1, %538
  %540 = xor i128 %539, -1
  %541 = lshr i128 %392, %538
  %542 = icmp eq i128 %541, 0
  br i1 %542, label %559, label %543

543:                                              ; preds = %536
  %544 = udiv i128 %541, 10
  %545 = mul i128 %544, 10
  %546 = sub i128 %541, %545
  %547 = trunc i128 %546 to i8
  %548 = or i8 %547, 48
  %549 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 40
  store i8* %549, i8** %13, align 8
  store i8 %548, i8* %549, align 1
  %550 = icmp ult i128 %541, 10
  br i1 %550, label %557, label %551

551:                                              ; preds = %543
  %552 = urem i128 %544, 10
  %553 = trunc i128 %552 to i8
  %554 = or i8 %553, 48
  %555 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %2, i64 0, i32 0, i64 39
  store i8* %555, i8** %13, align 8
  store i8 %554, i8* %555, align 1
  %556 = icmp ult i128 %541, 100
  br i1 %556, label %570, label %561

557:                                              ; preds = %543
  %558 = ptrtoint i8* %549 to i64
  br label %575

559:                                              ; preds = %536
  %560 = and i128 %392, %540
  br label %587

561:                                              ; preds = %551, %561
  %562 = phi i128 [ %564, %561 ], [ %544, %551 ]
  %563 = load i8*, i8** %13, align 8
  %564 = udiv i128 %562, 10
  %565 = urem i128 %564, 10
  %566 = trunc i128 %565 to i8
  %567 = or i8 %566, 48
  %568 = getelementptr inbounds i8, i8* %563, i64 -1
  store i8* %568, i8** %13, align 8
  store i8 %567, i8* %568, align 1
  %569 = icmp ult i128 %562, 100
  br i1 %569, label %570, label %561

570:                                              ; preds = %561, %551
  %571 = bitcast i8** %12 to i64*
  %572 = load i64, i64* %571, align 8
  %573 = bitcast i8** %13 to i64*
  %574 = load i64, i64* %573, align 8
  br label %575

575:                                              ; preds = %557, %570
  %576 = phi i64 [ %574, %570 ], [ %558, %557 ]
  %577 = phi i64 [ %572, %570 ], [ %15, %557 ]
  %578 = sub i64 %577, %576
  %579 = trunc i64 %578 to i32
  %580 = inttoptr i64 %576 to i8*
  %581 = load i8, i8* %580, align 1
  %582 = getelementptr inbounds i8, i8* %580, i64 -1
  store i8* %582, i8** %13, align 8
  store i8 %581, i8* %582, align 1
  %583 = load i8*, i8** %13, align 8
  %584 = getelementptr inbounds i8, i8* %583, i64 1
  store i8 46, i8* %584, align 1
  %585 = and i128 %392, %540
  %586 = icmp eq i32 %579, 0
  br i1 %586, label %587, label %607

587:                                              ; preds = %575, %559
  %588 = phi i128 [ %560, %559 ], [ %585, %575 ]
  store i32 0, i32* %3, align 4
  %589 = icmp eq i128 %588, 0
  br i1 %589, label %597, label %590

590:                                              ; preds = %587, %590
  %591 = phi i32 [ %594, %590 ], [ 0, %587 ]
  %592 = phi i128 [ %593, %590 ], [ %588, %587 ]
  %593 = mul i128 %592, 10
  %594 = add nsw i32 %591, -1
  %595 = icmp ugt i128 %593, %540
  br i1 %595, label %596, label %590

596:                                              ; preds = %590
  store i32 %594, i32* %3, align 4
  br label %597

597:                                              ; preds = %596, %587
  %598 = phi i128 [ 0, %587 ], [ %593, %596 ]
  %599 = lshr i128 %598, %538
  %600 = trunc i128 %599 to i8
  %601 = add i8 %600, 48
  %602 = load i8*, i8** %13, align 8
  %603 = getelementptr inbounds i8, i8* %602, i64 -1
  store i8* %603, i8** %13, align 8
  store i8 %601, i8* %603, align 1
  %604 = load i8*, i8** %12, align 8
  %605 = getelementptr inbounds i8, i8* %604, i64 1
  store i8* %605, i8** %12, align 8
  store i8 46, i8* %604, align 1
  %606 = and i128 %598, %540
  br label %672

607:                                              ; preds = %575
  %608 = add nsw i32 %579, -1
  store i32 %608, i32* %3, align 4
  %609 = sub nsw i32 %1, %608
  %610 = sub nsw i32 0, %609
  %611 = icmp eq i128 %585, 0
  %612 = icmp sgt i32 %609, -1
  br i1 %612, label %672, label %613

613:                                              ; preds = %607
  %614 = load i8*, i8** %12, align 8
  %615 = sext i32 %610 to i64
  %616 = sub nsw i64 0, %615
  %617 = getelementptr inbounds i8, i8* %614, i64 %616
  store i8* %617, i8** %12, align 8
  %618 = load i8, i8* %617, align 1
  %619 = icmp sgt i8 %618, 53
  br i1 %619, label %646, label %620

620:                                              ; preds = %613
  %621 = icmp eq i8 %618, 53
  br i1 %621, label %622, label %771

622:                                              ; preds = %620
  br i1 %611, label %623, label %646

623:                                              ; preds = %622
  %624 = icmp eq i32 %610, 1
  br i1 %624, label %634, label %625

625:                                              ; preds = %623
  %626 = getelementptr inbounds i8, i8* %617, i64 1
  br label %629

627:                                              ; preds = %629
  %628 = icmp eq i8* %633, %614
  br i1 %628, label %634, label %629

629:                                              ; preds = %627, %625
  %630 = phi i8* [ %633, %627 ], [ %626, %625 ]
  %631 = load i8, i8* %630, align 1
  %632 = icmp eq i8 %631, 48
  %633 = getelementptr inbounds i8, i8* %630, i64 1
  br i1 %632, label %627, label %646

634:                                              ; preds = %627, %623
  %635 = getelementptr inbounds i8, i8* %617, i64 -1
  %636 = load i8, i8* %635, align 1
  %637 = icmp eq i8 %636, 46
  br i1 %637, label %638, label %641

638:                                              ; preds = %634
  %639 = getelementptr inbounds i8, i8* %617, i64 -2
  %640 = load i8, i8* %639, align 1
  br label %641

641:                                              ; preds = %638, %634
  %642 = phi i8 [ %640, %638 ], [ %636, %634 ]
  %643 = sext i8 %642 to i32
  %644 = srem i32 %643, 2
  %645 = icmp eq i32 %644, 1
  br i1 %645, label %646, label %771

646:                                              ; preds = %629, %641, %622, %613
  %647 = getelementptr inbounds i8, i8* %617, i64 -1
  %648 = load i8*, i8** %13, align 8
  %649 = icmp ult i8* %647, %648
  br i1 %649, label %660, label %650

650:                                              ; preds = %646, %656
  %651 = phi i8* [ %657, %656 ], [ %648, %646 ]
  %652 = phi i8* [ %658, %656 ], [ %647, %646 ]
  %653 = load i8, i8* %652, align 1
  switch i8 %653, label %670 [
    i8 57, label %654
    i8 46, label %656
  ]

654:                                              ; preds = %650
  store i8 48, i8* %652, align 1
  %655 = load i8*, i8** %13, align 8
  br label %656

656:                                              ; preds = %654, %650
  %657 = phi i8* [ %651, %650 ], [ %655, %654 ]
  %658 = getelementptr inbounds i8, i8* %652, i64 -1
  %659 = icmp ult i8* %658, %657
  br i1 %659, label %660, label %650

660:                                              ; preds = %656, %646
  %661 = phi i8* [ %617, %646 ], [ %652, %656 ]
  %662 = phi i8* [ %647, %646 ], [ %658, %656 ]
  store i8 49, i8* %662, align 1
  store i8* %662, i8** %13, align 8
  %663 = getelementptr inbounds i8, i8* %661, i64 1
  %664 = load i8, i8* %661, align 1
  %665 = load i8, i8* %663, align 1
  store i8 %665, i8* %661, align 1
  store i8 %664, i8* %663, align 1
  %666 = load i32, i32* %3, align 4
  %667 = add nsw i32 %666, 1
  store i32 %667, i32* %3, align 4
  %668 = load i8*, i8** %12, align 8
  %669 = getelementptr inbounds i8, i8* %668, i64 -1
  store i8* %669, i8** %12, align 8
  br label %771

670:                                              ; preds = %650
  %671 = add i8 %653, 1
  store i8 %671, i8* %652, align 1
  br label %771

672:                                              ; preds = %607, %597
  %673 = phi i128 [ %606, %597 ], [ %585, %607 ]
  %674 = phi i32 [ %1, %597 ], [ %609, %607 ]
  %675 = icmp sgt i32 %674, 0
  %676 = mul i128 %673, 10
  %677 = lshr i128 %676, %538
  %678 = trunc i128 %677 to i32
  %679 = and i128 %676, %540
  br i1 %675, label %680, label %723

680:                                              ; preds = %672
  %681 = trunc i128 %677 to i8
  %682 = and i32 %674, 1
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %694, label %684

684:                                              ; preds = %680
  %685 = add i8 %681, 48
  %686 = load i8*, i8** %12, align 8
  %687 = getelementptr inbounds i8, i8* %686, i64 1
  store i8* %687, i8** %12, align 8
  store i8 %685, i8* %686, align 1
  %688 = add nsw i32 %674, -1
  %689 = mul i128 %679, 10
  %690 = lshr i128 %689, %538
  %691 = and i128 %689, %540
  %692 = trunc i128 %690 to i8
  %693 = trunc i128 %690 to i32
  br label %694

694:                                              ; preds = %680, %684
  %695 = phi i128 [ %679, %680 ], [ %691, %684 ]
  %696 = phi i8 [ %681, %680 ], [ %692, %684 ]
  %697 = phi i32 [ %674, %680 ], [ %688, %684 ]
  %698 = phi i32 [ undef, %680 ], [ %693, %684 ]
  %699 = phi i128 [ undef, %680 ], [ %691, %684 ]
  %700 = icmp eq i32 %674, 1
  br i1 %700, label %723, label %701

701:                                              ; preds = %694, %701
  %702 = phi i128 [ %719, %701 ], [ %695, %694 ]
  %703 = phi i8 [ %720, %701 ], [ %696, %694 ]
  %704 = phi i32 [ %715, %701 ], [ %697, %694 ]
  %705 = add i8 %703, 48
  %706 = load i8*, i8** %12, align 8
  %707 = getelementptr inbounds i8, i8* %706, i64 1
  store i8* %707, i8** %12, align 8
  store i8 %705, i8* %706, align 1
  %708 = mul i128 %702, 10
  %709 = lshr i128 %708, %538
  %710 = and i128 %708, %540
  %711 = trunc i128 %709 to i8
  %712 = add i8 %711, 48
  %713 = load i8*, i8** %12, align 8
  %714 = getelementptr inbounds i8, i8* %713, i64 1
  store i8* %714, i8** %12, align 8
  store i8 %712, i8* %713, align 1
  %715 = add nsw i32 %704, -2
  %716 = icmp sgt i32 %715, 0
  %717 = mul i128 %710, 10
  %718 = lshr i128 %717, %538
  %719 = and i128 %717, %540
  %720 = trunc i128 %718 to i8
  br i1 %716, label %701, label %721

721:                                              ; preds = %701
  %722 = trunc i128 %718 to i32
  br label %723

723:                                              ; preds = %721, %694, %672
  %724 = phi i32 [ %678, %672 ], [ %698, %694 ], [ %722, %721 ]
  %725 = phi i128 [ %679, %672 ], [ %699, %694 ], [ %719, %721 ]
  %726 = icmp sgt i32 %724, 5
  br i1 %726, label %744, label %727

727:                                              ; preds = %723
  %728 = icmp eq i32 %724, 5
  br i1 %728, label %729, label %771

729:                                              ; preds = %727
  %730 = icmp eq i128 %725, 0
  br i1 %730, label %731, label %744

731:                                              ; preds = %729
  %732 = load i8*, i8** %12, align 8
  %733 = getelementptr inbounds i8, i8* %732, i64 -1
  %734 = load i8, i8* %733, align 1
  %735 = icmp eq i8 %734, 46
  br i1 %735, label %736, label %739

736:                                              ; preds = %731
  %737 = getelementptr inbounds i8, i8* %732, i64 -2
  %738 = load i8, i8* %737, align 1
  br label %739

739:                                              ; preds = %736, %731
  %740 = phi i8 [ %738, %736 ], [ %734, %731 ]
  %741 = sext i8 %740 to i32
  %742 = srem i32 %741, 2
  %743 = icmp eq i32 %742, 1
  br i1 %743, label %744, label %771

744:                                              ; preds = %739, %729, %723
  %745 = load i8*, i8** %12, align 8
  %746 = getelementptr inbounds i8, i8* %745, i64 -1
  %747 = load i8*, i8** %13, align 8
  %748 = icmp ult i8* %746, %747
  br i1 %748, label %759, label %749

749:                                              ; preds = %744, %755
  %750 = phi i8* [ %756, %755 ], [ %747, %744 ]
  %751 = phi i8* [ %757, %755 ], [ %746, %744 ]
  %752 = load i8, i8* %751, align 1
  switch i8 %752, label %769 [
    i8 57, label %753
    i8 46, label %755
  ]

753:                                              ; preds = %749
  store i8 48, i8* %751, align 1
  %754 = load i8*, i8** %13, align 8
  br label %755

755:                                              ; preds = %753, %749
  %756 = phi i8* [ %750, %749 ], [ %754, %753 ]
  %757 = getelementptr inbounds i8, i8* %751, i64 -1
  %758 = icmp ult i8* %757, %756
  br i1 %758, label %759, label %749

759:                                              ; preds = %755, %744
  %760 = phi i8* [ %745, %744 ], [ %751, %755 ]
  %761 = phi i8* [ %746, %744 ], [ %757, %755 ]
  store i8 49, i8* %761, align 1
  store i8* %761, i8** %13, align 8
  %762 = getelementptr inbounds i8, i8* %760, i64 1
  %763 = load i8, i8* %760, align 1
  %764 = load i8, i8* %762, align 1
  store i8 %764, i8* %760, align 1
  store i8 %763, i8* %762, align 1
  %765 = load i32, i32* %3, align 4
  %766 = add nsw i32 %765, 1
  store i32 %766, i32* %3, align 4
  %767 = load i8*, i8** %12, align 8
  %768 = getelementptr inbounds i8, i8* %767, i64 -1
  store i8* %768, i8** %12, align 8
  br label %771

769:                                              ; preds = %749
  %770 = add i8 %752, 1
  store i8 %770, i8* %751, align 1
  br label %771

771:                                              ; preds = %461, %522, %81, %142, %65, %239, %289, %279, %260, %91, %140, %130, %111, %384, %374, %354, %342, %769, %759, %739, %727, %670, %660, %641, %620, %534, %520, %510, %491, %471, %445, %393, %4
  %772 = phi i1 [ false, %4 ], [ false, %393 ], [ false, %534 ], [ true, %727 ], [ true, %739 ], [ true, %759 ], [ true, %769 ], [ true, %491 ], [ true, %510 ], [ true, %520 ], [ true, %471 ], [ true, %641 ], [ true, %660 ], [ true, %670 ], [ true, %620 ], [ true, %445 ], [ true, %342 ], [ true, %354 ], [ true, %374 ], [ true, %384 ], [ true, %111 ], [ true, %130 ], [ true, %140 ], [ true, %91 ], [ true, %260 ], [ true, %279 ], [ true, %289 ], [ true, %239 ], [ true, %65 ], [ true, %142 ], [ true, %81 ], [ true, %522 ], [ true, %461 ]
  ret i1 %772
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIeEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nocapture readonly dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 %12, i32 -1
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #13
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  store i8 37, i8* %15, align 16
  %17 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %19 = load i8, i8* %18, align 1, !noalias !14
  call void @_ZN4absl19str_format_internal13FlagsToStringENS0_5FlagsE(%"class.std::__1::basic_string"* nonnull sret %5, i8 zeroext %19) #13
  %20 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp sgt i64 %26, -1
  br i1 %27, label %31, label %28, !prof !2

28:                                               ; preds = %24
  call void @llvm.trap() #13
  unreachable

29:                                               ; preds = %3
  %30 = zext i8 %22 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* nonnull align 8 %17, i64 %30, i1 false) #13
  br label %34

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %33, i64 %26, i1 false) #13
  call void @_ZdlPv(i8* %33) #15
  br label %34

34:                                               ; preds = %29, %31
  %35 = phi i64 [ %30, %29 ], [ %26, %31 ]
  %36 = getelementptr inbounds i8, i8* %16, i64 %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3, i1 false) #13
  %37 = getelementptr inbounds i8, i8* %36, i64 3
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8 76, i8* %37, align 1
  %39 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %40 = load i8, i8* %39, align 4
  %41 = icmp ult i8 %40, 18
  br i1 %41, label %42, label %46

42:                                               ; preds = %34
  %43 = sext i8 %40 to i64
  %44 = getelementptr inbounds [18 x i8], [18 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %42, %34
  %47 = phi i8 [ 0, %34 ], [ %45, %42 ]
  %48 = getelementptr inbounds i8, i8* %37, i64 2
  store i8 %47, i8* %38, align 1
  store i8 0, i8* %48, align 1
  %49 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = call i8* @_Znwm(i64 528) #15
  store i8* %52, i8** %50, align 8
  %53 = bitcast i64* %51 to <2 x i64>*
  store <2 x i64> <i64 512, i64 -9223372036854775280>, <2 x i64>* %53, align 8
  %54 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %52, i8 0, i64 513, i1 false)
  %56 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %52, i64 512, i8* nonnull %15, i32 %10, i32 %14, x86_fp80 %0) #13
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %117, label %58

58:                                               ; preds = %46
  %59 = sext i32 %56 to i64
  %60 = icmp ult i32 %56, 512
  br i1 %60, label %61, label %68

61:                                               ; preds = %81, %58
  %62 = phi i32 [ %56, %58 ], [ %79, %81 ]
  %63 = phi i64 [ %59, %58 ], [ %84, %81 ]
  %64 = phi i1 [ true, %58 ], [ %85, %81 ]
  %65 = load i8*, i8** %50, align 8
  %66 = select i1 %64, i8* %65, i8* %49
  %67 = icmp eq i32 %62, 0
  br i1 %67, label %117, label %89

68:                                               ; preds = %58, %81
  %69 = phi i32 [ %79, %81 ], [ %56, %58 ]
  %70 = add nuw nsw i32 %69, 1
  %71 = sext i32 %70 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* nonnull %6, i64 %71, i8 signext 0) #13
  %72 = load i8, i8* %55, align 1
  %73 = icmp slt i8 %72, 0
  %74 = load i8*, i8** %50, align 8
  %75 = load i64, i64* %51, align 8
  %76 = zext i8 %72 to i64
  %77 = select i1 %73, i8* %74, i8* %49
  %78 = select i1 %73, i64 %75, i64 %76
  %79 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %77, i64 %78, i8* nonnull %15, i32 %10, i32 %14, x86_fp80 %0) #13
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %117, label %81

81:                                               ; preds = %68
  %82 = load i8, i8* %55, align 1
  %83 = load i64, i64* %51, align 8
  %84 = sext i32 %79 to i64
  %85 = icmp slt i8 %82, 0
  %86 = zext i8 %82 to i64
  %87 = select i1 %85, i64 %83, i64 %86
  %88 = icmp ugt i64 %87, %84
  br i1 %88, label %61, label %68

89:                                               ; preds = %61
  %90 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %91, %63
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 3, i64 1024
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 2
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = ptrtoint i8* %93 to i64
  %98 = sub i64 %97, %96
  %99 = icmp ugt i64 %98, %63
  br i1 %99, label %113, label %100

100:                                              ; preds = %89
  %101 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 3, i64 0
  %102 = ptrtoint i8* %101 to i64
  %103 = sub i64 %96, %102
  %104 = icmp sgt i64 %103, -1
  br i1 %104, label %106, label %105, !prof !2

105:                                              ; preds = %100
  call void @llvm.trap() #13
  unreachable

106:                                              ; preds = %100
  %107 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 0, i32 1
  %108 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %107, align 8
  %109 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void %108(i8* %110, i8* %101, i64 %103) #13
  store i8* %101, i8** %94, align 8
  %111 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %107, align 8
  %112 = load i8*, i8** %109, align 8
  call void %111(i8* %112, i8* %66, i64 %63) #13
  br label %117

113:                                              ; preds = %89
  %114 = inttoptr i64 %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %66, i64 %63, i1 false) #13
  %115 = load i8*, i8** %94, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 %63
  store i8* %116, i8** %94, align 8
  br label %117

117:                                              ; preds = %68, %46, %113, %106, %61
  %118 = phi i1 [ true, %61 ], [ true, %106 ], [ true, %113 ], [ false, %46 ], [ false, %68 ]
  %119 = load i8, i8* %55, align 1
  %120 = icmp slt i8 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %117
  %122 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %122) #15
  br label %123

123:                                              ; preds = %117, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #13
  ret i1 %118
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_117WriteBufferToSinkEcNS_11string_viewERKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext, i8*, i64, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nocapture readonly dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %6 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %3, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %17

9:                                                ; preds = %5
  %10 = trunc i64 %2 to i32
  %11 = sub nsw i32 %7, %10
  %12 = icmp ne i8 %0, 0
  %13 = zext i1 %12 to i32
  %14 = sub i32 %11, %13
  %15 = icmp sgt i32 %14, 0
  %16 = select i1 %15, i32 %14, i32 0
  br label %17

17:                                               ; preds = %5, %9
  %18 = phi i32 [ %16, %9 ], [ 0, %5 ]
  %19 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %3, i64 0, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %72

23:                                               ; preds = %17
  %24 = and i8 %20, 16
  %25 = icmp ne i8 %24, 0
  %26 = select i1 %25, i32 %18, i32 0
  %27 = zext i32 %18 to i64
  %28 = icmp eq i32 %18, 0
  %29 = or i1 %28, %25
  br i1 %29, label %72, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %27
  store i64 %33, i64* %31, align 8
  %34 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %35 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %36 = bitcast i8** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint i8* %34 to i64
  %39 = sub i64 %38, %37
  %40 = icmp ult i64 %39, %27
  %41 = inttoptr i64 %37 to i8*
  br i1 %40, label %42, label %67

42:                                               ; preds = %30
  %43 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  br label %47

47:                                               ; preds = %63, %42
  %48 = phi i64 [ %37, %42 ], [ %44, %63 ]
  %49 = phi i8* [ %41, %42 ], [ %43, %63 ]
  %50 = phi i64 [ %39, %42 ], [ 1024, %63 ]
  %51 = phi i64 [ %27, %42 ], [ %52, %63 ]
  %52 = sub i64 %51, %50
  %53 = icmp eq i64 %50, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %47
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 32, i64 %50, i1 false) #13
  %55 = load i8*, i8** %35, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 %50
  store i8* %56, i8** %35, align 8
  %57 = ptrtoint i8* %56 to i64
  br label %58

58:                                               ; preds = %54, %47
  %59 = phi i64 [ %48, %47 ], [ %57, %54 ]
  %60 = sub i64 %59, %44
  %61 = icmp sgt i64 %60, -1
  br i1 %61, label %63, label %62, !prof !2

62:                                               ; preds = %58
  tail call void @llvm.trap() #13
  unreachable

63:                                               ; preds = %58
  %64 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %45, align 8
  %65 = load i8*, i8** %46, align 8
  tail call void %64(i8* %65, i8* %43, i64 %60) #13
  store i8* %43, i8** %35, align 8
  %66 = icmp ugt i64 %52, 1024
  br i1 %66, label %47, label %67

67:                                               ; preds = %63, %30
  %68 = phi i8* [ %41, %30 ], [ %43, %63 ]
  %69 = phi i64 [ %27, %30 ], [ %52, %63 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 32, i64 %69, i1 false) #13
  %70 = load i8*, i8** %35, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 %69
  store i8* %71, i8** %35, align 8
  br label %72

72:                                               ; preds = %17, %23, %67
  %73 = phi i32 [ %26, %23 ], [ %26, %67 ], [ 0, %17 ]
  %74 = phi i32 [ 0, %23 ], [ 0, %67 ], [ %18, %17 ]
  %75 = icmp eq i8 %0, 0
  br i1 %75, label %97, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %77, align 8
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %81 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = ptrtoint i8* %80 to i64
  %85 = icmp eq i64 %83, %84
  %86 = inttoptr i64 %83 to i8*
  br i1 %85, label %87, label %93

87:                                               ; preds = %76
  %88 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %89 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %91 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %90, align 8
  %92 = load i8*, i8** %89, align 8
  tail call void %91(i8* %92, i8* %88, i64 1024) #13
  store i8* %88, i8** %81, align 8
  br label %93

93:                                               ; preds = %87, %76
  %94 = phi i8* [ %86, %76 ], [ %88, %87 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %0, i64 1, i1 false) #13
  %95 = load i8*, i8** %81, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 1
  store i8* %96, i8** %81, align 8
  br label %97

97:                                               ; preds = %72, %93
  %98 = sext i32 %73 to i64
  %99 = icmp eq i32 %73, 0
  br i1 %99, label %142, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, %98
  store i64 %103, i64* %101, align 8
  %104 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %105 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %106 = bitcast i8** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = ptrtoint i8* %104 to i64
  %109 = sub i64 %108, %107
  %110 = icmp ult i64 %109, %98
  %111 = inttoptr i64 %107 to i8*
  br i1 %110, label %112, label %137

112:                                              ; preds = %100
  %113 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %114 = ptrtoint i8* %113 to i64
  %115 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %116 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  br label %117

117:                                              ; preds = %133, %112
  %118 = phi i64 [ %107, %112 ], [ %114, %133 ]
  %119 = phi i8* [ %111, %112 ], [ %113, %133 ]
  %120 = phi i64 [ %109, %112 ], [ 1024, %133 ]
  %121 = phi i64 [ %98, %112 ], [ %122, %133 ]
  %122 = sub i64 %121, %120
  %123 = icmp eq i64 %120, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %117
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 48, i64 %120, i1 false) #13
  %125 = load i8*, i8** %105, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 %120
  store i8* %126, i8** %105, align 8
  %127 = ptrtoint i8* %126 to i64
  br label %128

128:                                              ; preds = %124, %117
  %129 = phi i64 [ %118, %117 ], [ %127, %124 ]
  %130 = sub i64 %129, %114
  %131 = icmp sgt i64 %130, -1
  br i1 %131, label %133, label %132, !prof !2

132:                                              ; preds = %128
  tail call void @llvm.trap() #13
  unreachable

133:                                              ; preds = %128
  %134 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %115, align 8
  %135 = load i8*, i8** %116, align 8
  tail call void %134(i8* %135, i8* %113, i64 %130) #13
  store i8* %113, i8** %105, align 8
  %136 = icmp ugt i64 %122, 1024
  br i1 %136, label %117, label %137

137:                                              ; preds = %133, %100
  %138 = phi i8* [ %111, %100 ], [ %113, %133 ]
  %139 = phi i64 [ %98, %100 ], [ %122, %133 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 48, i64 %139, i1 false) #13
  %140 = load i8*, i8** %105, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 %139
  store i8* %141, i8** %105, align 8
  br label %142

142:                                              ; preds = %97, %137
  %143 = icmp eq i64 %2, 0
  br i1 %143, label %172, label %144

144:                                              ; preds = %142
  %145 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %146, %2
  store i64 %147, i64* %145, align 8
  %148 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %149 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %150 = bitcast i8** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = ptrtoint i8* %148 to i64
  %153 = sub i64 %152, %151
  %154 = icmp ugt i64 %153, %2
  br i1 %154, label %168, label %155

155:                                              ; preds = %144
  %156 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %157 = ptrtoint i8* %156 to i64
  %158 = sub i64 %151, %157
  %159 = icmp sgt i64 %158, -1
  br i1 %159, label %161, label %160, !prof !2

160:                                              ; preds = %155
  tail call void @llvm.trap() #13
  unreachable

161:                                              ; preds = %155
  %162 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %163 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %162, align 8
  %164 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  %165 = load i8*, i8** %164, align 8
  tail call void %163(i8* %165, i8* %156, i64 %158) #13
  store i8* %156, i8** %149, align 8
  %166 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %162, align 8
  %167 = load i8*, i8** %164, align 8
  tail call void %166(i8* %167, i8* %1, i64 %2) #13
  br label %172

168:                                              ; preds = %144
  %169 = inttoptr i64 %151 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 %1, i64 %2, i1 false) #13
  %170 = load i8*, i8** %149, align 8
  %171 = getelementptr inbounds i8, i8* %170, i64 %2
  store i8* %171, i8** %149, align 8
  br label %172

172:                                              ; preds = %142, %161, %168
  %173 = sext i32 %74 to i64
  %174 = icmp eq i32 %74, 0
  br i1 %174, label %217, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, %173
  store i64 %178, i64* %176, align 8
  %179 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %180 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %181 = bitcast i8** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = ptrtoint i8* %179 to i64
  %184 = sub i64 %183, %182
  %185 = icmp ult i64 %184, %173
  %186 = inttoptr i64 %182 to i8*
  br i1 %185, label %187, label %212

187:                                              ; preds = %175
  %188 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %189 = ptrtoint i8* %188 to i64
  %190 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %191 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  br label %192

192:                                              ; preds = %208, %187
  %193 = phi i64 [ %182, %187 ], [ %189, %208 ]
  %194 = phi i8* [ %186, %187 ], [ %188, %208 ]
  %195 = phi i64 [ %184, %187 ], [ 1024, %208 ]
  %196 = phi i64 [ %173, %187 ], [ %197, %208 ]
  %197 = sub i64 %196, %195
  %198 = icmp eq i64 %195, 0
  br i1 %198, label %203, label %199

199:                                              ; preds = %192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 32, i64 %195, i1 false) #13
  %200 = load i8*, i8** %180, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 %195
  store i8* %201, i8** %180, align 8
  %202 = ptrtoint i8* %201 to i64
  br label %203

203:                                              ; preds = %199, %192
  %204 = phi i64 [ %193, %192 ], [ %202, %199 ]
  %205 = sub i64 %204, %189
  %206 = icmp sgt i64 %205, -1
  br i1 %206, label %208, label %207, !prof !2

207:                                              ; preds = %203
  tail call void @llvm.trap() #13
  unreachable

208:                                              ; preds = %203
  %209 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %190, align 8
  %210 = load i8*, i8** %191, align 8
  tail call void %209(i8* %210, i8* %188, i64 %205) #13
  store i8* %188, i8** %180, align 8
  %211 = icmp ugt i64 %197, 1024
  br i1 %211, label %192, label %212

212:                                              ; preds = %208, %175
  %213 = phi i8* [ %186, %175 ], [ %188, %208 ]
  %214 = phi i64 [ %173, %175 ], [ %197, %208 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 32, i64 %214, i1 false) #13
  %215 = load i8*, i8** %180, align 8
  %216 = getelementptr inbounds i8, i8* %215, i64 %214
  store i8* %216, i8** %180, align 8
  br label %217

217:                                              ; preds = %172, %212
  ret void
}

declare zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"*, i8*, i64, i32, i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.fabs.f80(x86_fp80) #4

declare void @_ZN4absl7uint128C1Ee(%"class.absl::uint128"*, x86_fp80) unnamed_addr #3

; Function Attrs: nofree nounwind
declare x86_fp80 @frexpl(x86_fp80, i32* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare x86_fp80 @ldexpl(x86_fp80, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFPositiveExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64, i64, i32, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* dereferenceable(24)) unnamed_addr #0 {
  %5 = alloca %class.anon.1, align 16
  %6 = alloca %class.anon, align 8
  %7 = bitcast %class.anon* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  %8 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  store %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %8, align 8
  %9 = add nsw i32 %2, 159
  %10 = sdiv i32 %9, 32
  %11 = mul nsw i32 %10, 11
  %12 = sdiv i32 %11, 10
  %13 = bitcast %class.anon.1* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #13
  %14 = bitcast %class.anon.1* %5 to %class.anon**
  store %class.anon* %6, %class.anon** %14, align 16
  %15 = getelementptr inbounds %class.anon.1, %class.anon.1* %5, i64 0, i32 0, i32 1
  store void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)* @"_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_122FormatFPositiveExpSlowENS_7uint128EiRKNS3_11FormatStateEE3$_0vJNS3_15BinaryToDecimalEEEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE", void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)** %15, align 8
  %16 = getelementptr inbounds %class.anon.1, %class.anon.1* %5, i64 0, i32 1, i32 0
  store i64 %0, i64* %16, align 16
  %17 = getelementptr inbounds %class.anon.1, %class.anon.1* %5, i64 0, i32 1, i32 1
  store i64 %1, i64* %17, align 8
  %18 = getelementptr inbounds %class.anon.1, %class.anon.1* %5, i64 0, i32 2
  store i32 %2, i32* %18, align 16
  %19 = add nsw i32 %12, 127
  %20 = sext i32 %19 to i64
  %21 = lshr i64 %20, 7
  switch i64 %21, label %27 [
    i64 1, label %22
    i64 2, label %23
    i64 3, label %24
    i64 4, label %25
    i64 5, label %26
  ]

22:                                               ; preds = %4
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm1EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %13, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %27

23:                                               ; preds = %4
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm2EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %13, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %27

24:                                               ; preds = %4
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm3EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %13, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %27

25:                                               ; preds = %4
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm4EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %13, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %27

26:                                               ; preds = %4
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm5EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %13, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %27

27:                                               ; preds = %4, %22, %23, %24, %25, %26
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_122FormatFNegativeExpSlowENS_7uint128EiRKNS1_11FormatStateE(i64, i64, i32, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* dereferenceable(24)) unnamed_addr #0 {
  %5 = alloca %class.anon.7, align 16
  %6 = alloca i32, align 4
  %7 = alloca %class.anon.6, align 8
  %8 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %4
  %12 = sext i32 %9 to i64
  %13 = add nsw i64 %12, 2
  %14 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 2
  %15 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %14, align 8
  br label %23

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 2
  %18 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %18, i64 0, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %16, %11
  %24 = phi %"class.absl::str_format_internal::FormatConversionSpecImpl"* [ %15, %11 ], [ %18, %16 ]
  %25 = phi i64 [ %13, %11 ], [ 2, %16 ]
  br label %26

26:                                               ; preds = %16, %23
  %27 = phi %"class.absl::str_format_internal::FormatConversionSpecImpl"* [ %24, %23 ], [ %18, %16 ]
  %28 = phi i64 [ %25, %23 ], [ 1, %16 ]
  %29 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 0
  %30 = load i8, i8* %29, align 8
  %31 = icmp ne i8 %30, 0
  %32 = zext i1 %31 to i64
  %33 = add nsw i64 %28, %32
  %34 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 2
  %35 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %27, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp sgt i32 %36, -1
  %38 = sext i32 %36 to i64
  %39 = icmp ult i64 %33, %38
  %40 = and i1 %37, %39
  br i1 %40, label %41, label %55

41:                                               ; preds = %26
  %42 = trunc i64 %33 to i32
  %43 = sub i32 %36, %42
  %44 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %27, i64 0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = and i8 %45, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %55

48:                                               ; preds = %41
  %49 = and i8 %45, 16
  %50 = icmp ne i8 %49, 0
  %51 = zext i32 %43 to i64
  %52 = shl nuw i64 %51, 32
  %53 = select i1 %50, i64 %52, i64 0
  %54 = select i1 %50, i64 0, i64 %51
  br label %55

55:                                               ; preds = %26, %41, %48
  %56 = phi i64 [ 0, %26 ], [ 0, %41 ], [ %54, %48 ]
  %57 = phi i64 [ 0, %26 ], [ 0, %41 ], [ %53, %48 ]
  %58 = phi i32 [ 0, %26 ], [ %43, %41 ], [ 0, %48 ]
  %59 = or i64 %57, %56
  %60 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, i64 0, i32 3
  %61 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  %62 = shl i64 %59, 32
  %63 = ashr exact i64 %62, 32
  %64 = icmp eq i64 %62, 0
  br i1 %64, label %108, label %65

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, %63
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 3, i64 1024
  %70 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 2
  %71 = bitcast i8** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = ptrtoint i8* %69 to i64
  %74 = sub i64 %73, %72
  %75 = icmp ult i64 %74, %63
  %76 = inttoptr i64 %72 to i8*
  br i1 %75, label %77, label %102

77:                                               ; preds = %65
  %78 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 3, i64 0
  %79 = ptrtoint i8* %78 to i64
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %61, i64 0, i32 0, i32 0
  br label %82

82:                                               ; preds = %98, %77
  %83 = phi i64 [ %72, %77 ], [ %79, %98 ]
  %84 = phi i8* [ %76, %77 ], [ %78, %98 ]
  %85 = phi i64 [ %74, %77 ], [ 1024, %98 ]
  %86 = phi i64 [ %63, %77 ], [ %87, %98 ]
  %87 = sub i64 %86, %85
  %88 = icmp eq i64 %85, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %82
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 32, i64 %85, i1 false) #13
  %90 = load i8*, i8** %70, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %85
  store i8* %91, i8** %70, align 8
  %92 = ptrtoint i8* %91 to i64
  br label %93

93:                                               ; preds = %89, %82
  %94 = phi i64 [ %83, %82 ], [ %92, %89 ]
  %95 = sub i64 %94, %79
  %96 = icmp sgt i64 %95, -1
  br i1 %96, label %98, label %97, !prof !2

97:                                               ; preds = %93
  tail call void @llvm.trap() #13
  unreachable

98:                                               ; preds = %93
  %99 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %80, align 8
  %100 = load i8*, i8** %81, align 8
  tail call void %99(i8* %100, i8* %78, i64 %95) #13
  store i8* %78, i8** %70, align 8
  %101 = icmp ugt i64 %87, 1024
  br i1 %101, label %82, label %102

102:                                              ; preds = %98, %65
  %103 = phi i8* [ %76, %65 ], [ %78, %98 ]
  %104 = phi i64 [ %63, %65 ], [ %87, %98 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 32, i64 %104, i1 false) #13
  %105 = load i8*, i8** %70, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 %104
  store i8* %106, i8** %70, align 8
  %107 = load i8, i8* %29, align 8
  br label %108

108:                                              ; preds = %55, %102
  %109 = phi i8 [ %30, %55 ], [ %107, %102 ]
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %138, label %111

111:                                              ; preds = %108
  %112 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  %113 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %113, align 8
  %116 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 3, i64 1024
  %117 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 2
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = ptrtoint i8* %116 to i64
  %121 = icmp eq i64 %119, %120
  %122 = inttoptr i64 %119 to i8*
  br i1 %121, label %123, label %134

123:                                              ; preds = %111
  %124 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 3, i64 0
  %125 = ptrtoint i8* %124 to i64
  %126 = sub i64 %119, %125
  %127 = icmp sgt i64 %126, -1
  br i1 %127, label %129, label %128, !prof !2

128:                                              ; preds = %123
  tail call void @llvm.trap() #13
  unreachable

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 0, i32 0
  %131 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %112, i64 0, i32 0, i32 1
  %132 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %131, align 8
  %133 = load i8*, i8** %130, align 8
  tail call void %132(i8* %133, i8* %124, i64 %126) #13
  store i8* %124, i8** %117, align 8
  br label %134

134:                                              ; preds = %129, %111
  %135 = phi i8* [ %122, %111 ], [ %124, %129 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %109, i64 1, i1 false) #13
  %136 = load i8*, i8** %117, align 8
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  store i8* %137, i8** %117, align 8
  br label %138

138:                                              ; preds = %108, %134
  %139 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  %140 = add i64 %59, 4294967296
  %141 = ashr i64 %140, 32
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %185, label %143

143:                                              ; preds = %138
  %144 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = add i64 %145, %141
  store i64 %146, i64* %144, align 8
  %147 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 3, i64 1024
  %148 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 2
  %149 = bitcast i8** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = ptrtoint i8* %147 to i64
  %152 = sub i64 %151, %150
  %153 = icmp ult i64 %152, %141
  %154 = inttoptr i64 %150 to i8*
  br i1 %153, label %155, label %180

155:                                              ; preds = %143
  %156 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 3, i64 0
  %157 = ptrtoint i8* %156 to i64
  %158 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 0, i32 1
  %159 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %139, i64 0, i32 0, i32 0
  br label %160

160:                                              ; preds = %176, %155
  %161 = phi i64 [ %150, %155 ], [ %157, %176 ]
  %162 = phi i8* [ %154, %155 ], [ %156, %176 ]
  %163 = phi i64 [ %152, %155 ], [ 1024, %176 ]
  %164 = phi i64 [ %141, %155 ], [ %165, %176 ]
  %165 = sub i64 %164, %163
  %166 = icmp eq i64 %163, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %162, i8 48, i64 %163, i1 false) #13
  %168 = load i8*, i8** %148, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %163
  store i8* %169, i8** %148, align 8
  %170 = ptrtoint i8* %169 to i64
  br label %171

171:                                              ; preds = %167, %160
  %172 = phi i64 [ %161, %160 ], [ %170, %167 ]
  %173 = sub i64 %172, %157
  %174 = icmp sgt i64 %173, -1
  br i1 %174, label %176, label %175, !prof !2

175:                                              ; preds = %171
  tail call void @llvm.trap() #13
  unreachable

176:                                              ; preds = %171
  %177 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %158, align 8
  %178 = load i8*, i8** %159, align 8
  tail call void %177(i8* %178, i8* %156, i64 %173) #13
  store i8* %156, i8** %148, align 8
  %179 = icmp ugt i64 %165, 1024
  br i1 %179, label %160, label %180

180:                                              ; preds = %176, %143
  %181 = phi i8* [ %154, %143 ], [ %156, %176 ]
  %182 = phi i64 [ %141, %143 ], [ %165, %176 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 48, i64 %182, i1 false) #13
  %183 = load i8*, i8** %148, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %182
  store i8* %184, i8** %148, align 8
  br label %185

185:                                              ; preds = %138, %180
  %186 = load i32, i32* %8, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %194

188:                                              ; preds = %185
  %189 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %34, align 8
  %190 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %189, i64 0, i32 1
  %191 = load i8, i8* %190, align 1
  %192 = and i8 %191, 8
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %222, label %194

194:                                              ; preds = %188, %185
  %195 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  %196 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = add i64 %197, 1
  store i64 %198, i64* %196, align 8
  %199 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 3, i64 1024
  %200 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 2
  %201 = bitcast i8** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = ptrtoint i8* %199 to i64
  %204 = icmp eq i64 %202, %203
  %205 = inttoptr i64 %202 to i8*
  br i1 %204, label %206, label %217

206:                                              ; preds = %194
  %207 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 3, i64 0
  %208 = ptrtoint i8* %207 to i64
  %209 = sub i64 %202, %208
  %210 = icmp sgt i64 %209, -1
  br i1 %210, label %212, label %211, !prof !2

211:                                              ; preds = %206
  tail call void @llvm.trap() #13
  unreachable

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 0, i32 0
  %214 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %195, i64 0, i32 0, i32 1
  %215 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %214, align 8
  %216 = load i8*, i8** %213, align 8
  tail call void %215(i8* %216, i8* %207, i64 %209) #13
  store i8* %207, i8** %200, align 8
  br label %217

217:                                              ; preds = %212, %194
  %218 = phi i8* [ %205, %194 ], [ %207, %212 ]
  store i8 46, i8* %218, align 1
  %219 = load i8*, i8** %200, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 1
  store i8* %220, i8** %200, align 8
  %221 = load i32, i32* %8, align 4
  br label %222

222:                                              ; preds = %188, %217
  %223 = phi i32 [ 0, %188 ], [ %221, %217 ]
  %224 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %224) #13
  store i32 %223, i32* %6, align 4
  %225 = bitcast %class.anon.6* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %225) #13
  %226 = getelementptr inbounds %class.anon.6, %class.anon.6* %7, i64 0, i32 0
  store %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %3, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %226, align 8
  %227 = getelementptr inbounds %class.anon.6, %class.anon.6* %7, i64 0, i32 1
  store i32* %6, i32** %227, align 8
  %228 = add nsw i32 %2, 95
  %229 = sdiv i32 %228, 32
  %230 = bitcast %class.anon.7* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %230) #13
  %231 = bitcast %class.anon.7* %5 to %class.anon.6**
  store %class.anon.6* %7, %class.anon.6** %231, align 16
  %232 = getelementptr inbounds %class.anon.7, %class.anon.7* %5, i64 0, i32 0, i32 1
  store void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)* @"_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_122FormatFNegativeExpSlowENS_7uint128EiRKNS3_11FormatStateEE3$_1vJNS3_24FractionalDigitGeneratorEEEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE", void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)** %232, align 8
  %233 = getelementptr inbounds %class.anon.7, %class.anon.7* %5, i64 0, i32 1, i32 0
  store i64 %0, i64* %233, align 16
  %234 = getelementptr inbounds %class.anon.7, %class.anon.7* %5, i64 0, i32 1, i32 1
  store i64 %1, i64* %234, align 8
  %235 = getelementptr inbounds %class.anon.7, %class.anon.7* %5, i64 0, i32 2
  store i32 %2, i32* %235, align 16
  %236 = add nsw i32 %229, 127
  %237 = sext i32 %236 to i64
  %238 = lshr i64 %237, 7
  switch i64 %238, label %244 [
    i64 1, label %239
    i64 2, label %240
    i64 3, label %241
    i64 4, label %242
    i64 5, label %243
  ]

239:                                              ; preds = %222
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm1EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %230, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %244

240:                                              ; preds = %222
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm2EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %230, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %244

241:                                              ; preds = %222
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm3EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %230, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %244

242:                                              ; preds = %222
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm4EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %230, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %244

243:                                              ; preds = %222
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm5EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8* nonnull %230, void (i8*, i32*, i64)* nonnull @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE) #13
  br label %244

244:                                              ; preds = %222, %239, %240, %241, %242, %243
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %230) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %225) #13
  %245 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  %246 = load i32, i32* %6, align 4
  %247 = sext i32 %246 to i64
  %248 = icmp eq i32 %246, 0
  br i1 %248, label %292, label %249

249:                                              ; preds = %244
  %250 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 1
  %251 = load i64, i64* %250, align 8
  %252 = add i64 %251, %247
  store i64 %252, i64* %250, align 8
  %253 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 3, i64 1024
  %254 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 2
  %255 = bitcast i8** %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = ptrtoint i8* %253 to i64
  %258 = sub i64 %257, %256
  %259 = icmp ult i64 %258, %247
  %260 = inttoptr i64 %256 to i8*
  br i1 %259, label %261, label %286

261:                                              ; preds = %249
  %262 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 3, i64 0
  %263 = ptrtoint i8* %262 to i64
  %264 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 0, i32 1
  %265 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %245, i64 0, i32 0, i32 0
  br label %266

266:                                              ; preds = %282, %261
  %267 = phi i64 [ %256, %261 ], [ %263, %282 ]
  %268 = phi i8* [ %260, %261 ], [ %262, %282 ]
  %269 = phi i64 [ %258, %261 ], [ 1024, %282 ]
  %270 = phi i64 [ %247, %261 ], [ %271, %282 ]
  %271 = sub i64 %270, %269
  %272 = icmp eq i64 %269, 0
  br i1 %272, label %277, label %273

273:                                              ; preds = %266
  call void @llvm.memset.p0i8.i64(i8* align 1 %268, i8 48, i64 %269, i1 false) #13
  %274 = load i8*, i8** %254, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 %269
  store i8* %275, i8** %254, align 8
  %276 = ptrtoint i8* %275 to i64
  br label %277

277:                                              ; preds = %273, %266
  %278 = phi i64 [ %267, %266 ], [ %276, %273 ]
  %279 = sub i64 %278, %263
  %280 = icmp sgt i64 %279, -1
  br i1 %280, label %282, label %281, !prof !2

281:                                              ; preds = %277
  call void @llvm.trap() #13
  unreachable

282:                                              ; preds = %277
  %283 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %264, align 8
  %284 = load i8*, i8** %265, align 8
  call void %283(i8* %284, i8* %262, i64 %279) #13
  store i8* %262, i8** %254, align 8
  %285 = icmp ugt i64 %271, 1024
  br i1 %285, label %266, label %286

286:                                              ; preds = %282, %249
  %287 = phi i8* [ %260, %249 ], [ %262, %282 ]
  %288 = phi i64 [ %247, %249 ], [ %271, %282 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %287, i8 48, i64 %288, i1 false) #13
  %289 = load i8*, i8** %254, align 8
  %290 = getelementptr inbounds i8, i8* %289, i64 %288
  store i8* %290, i8** %254, align 8
  %291 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %60, align 8
  br label %292

292:                                              ; preds = %244, %286
  %293 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %245, %244 ], [ %291, %286 ]
  %294 = sext i32 %58 to i64
  %295 = icmp eq i32 %58, 0
  br i1 %295, label %338, label %296

296:                                              ; preds = %292
  %297 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 1
  %298 = load i64, i64* %297, align 8
  %299 = add i64 %298, %294
  store i64 %299, i64* %297, align 8
  %300 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 3, i64 1024
  %301 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 2
  %302 = bitcast i8** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = ptrtoint i8* %300 to i64
  %305 = sub i64 %304, %303
  %306 = icmp ult i64 %305, %294
  %307 = inttoptr i64 %303 to i8*
  br i1 %306, label %308, label %333

308:                                              ; preds = %296
  %309 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 3, i64 0
  %310 = ptrtoint i8* %309 to i64
  %311 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 0, i32 1
  %312 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %293, i64 0, i32 0, i32 0
  br label %313

313:                                              ; preds = %329, %308
  %314 = phi i64 [ %303, %308 ], [ %310, %329 ]
  %315 = phi i8* [ %307, %308 ], [ %309, %329 ]
  %316 = phi i64 [ %305, %308 ], [ 1024, %329 ]
  %317 = phi i64 [ %294, %308 ], [ %318, %329 ]
  %318 = sub i64 %317, %316
  %319 = icmp eq i64 %316, 0
  br i1 %319, label %324, label %320

320:                                              ; preds = %313
  call void @llvm.memset.p0i8.i64(i8* align 1 %315, i8 32, i64 %316, i1 false) #13
  %321 = load i8*, i8** %301, align 8
  %322 = getelementptr inbounds i8, i8* %321, i64 %316
  store i8* %322, i8** %301, align 8
  %323 = ptrtoint i8* %322 to i64
  br label %324

324:                                              ; preds = %320, %313
  %325 = phi i64 [ %314, %313 ], [ %323, %320 ]
  %326 = sub i64 %325, %310
  %327 = icmp sgt i64 %326, -1
  br i1 %327, label %329, label %328, !prof !2

328:                                              ; preds = %324
  call void @llvm.trap() #13
  unreachable

329:                                              ; preds = %324
  %330 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %311, align 8
  %331 = load i8*, i8** %312, align 8
  call void %330(i8* %331, i8* %309, i64 %326) #13
  store i8* %309, i8** %301, align 8
  %332 = icmp ugt i64 %318, 1024
  br i1 %332, label %313, label %333

333:                                              ; preds = %329, %296
  %334 = phi i8* [ %307, %296 ], [ %309, %329 ]
  %335 = phi i64 [ %294, %296 ], [ %318, %329 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %334, i8 32, i64 %335, i1 false) #13
  %336 = load i8*, i8** %301, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 %335
  store i8* %337, i8** %301, align 8
  br label %338

338:                                              ; preds = %292, %333
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %224) #13
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm1EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8*, void (i8*, i32*, i64)*) unnamed_addr #6 align 2 {
  %3 = alloca [128 x i32], align 16
  %4 = bitcast [128 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 512, i1 false)
  %5 = getelementptr inbounds [128 x i32], [128 x i32]* %3, i64 0, i64 0
  call void %1(i8* %0, i32* nonnull %5, i64 128) #13
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #13
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm2EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8*, void (i8*, i32*, i64)*) unnamed_addr #6 align 2 {
  %3 = alloca [256 x i32], align 16
  %4 = bitcast [256 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 1024, i1 false)
  %5 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 0
  call void %1(i8* %0, i32* nonnull %5, i64 256) #13
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %4) #13
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm3EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8*, void (i8*, i32*, i64)*) unnamed_addr #6 align 2 {
  %3 = alloca [384 x i32], align 16
  %4 = bitcast [384 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 1536, i1 false)
  %5 = getelementptr inbounds [384 x i32], [384 x i32]* %3, i64 0, i64 0
  call void %1(i8* %0, i32* nonnull %5, i64 384) #13
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %4) #13
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm4EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8*, void (i8*, i32*, i64)*) unnamed_addr #6 align 2 {
  %3 = alloca [512 x i32], align 16
  %4 = bitcast [512 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 2048, i1 false)
  %5 = getelementptr inbounds [512 x i32], [512 x i32]* %3, i64 0, i64 0
  call void %1(i8* %0, i32* nonnull %5, i64 512) #13
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %4) #13
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110StackArray19RunWithCapacityImplILm5EEEvNS_11FunctionRefIFvNS_4SpanIjEEEEE(i8*, void (i8*, i32*, i64)*) unnamed_addr #6 align 2 {
  %3 = alloca [640 x i32], align 16
  %4 = bitcast [640 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2560, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 2560, i1 false)
  %5 = getelementptr inbounds [640 x i32], [640 x i32]* %3, i64 0, i64 0
  call void %1(i8* %0, i32* nonnull %5, i64 640) #13
  call void @llvm.lifetime.end.p0i8(i64 2560, i8* nonnull %4) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_115BinaryToDecimal13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE(i8* nocapture readonly, i32*, i64) #0 {
  %4 = alloca %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", align 8
  %5 = alloca %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", align 8
  %6 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #13
  %7 = getelementptr inbounds i8, i8* %0, i64 16
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds i8, i8* %0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 32
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 16
  %16 = ptrtoint i32* %1 to i64
  %17 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 3
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 4
  %19 = bitcast %"class.absl::Span"* %18 to i64*
  store i64 %16, i64* %19, align 8
  %20 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 4, i32 1
  store i64 %2, i64* %20, align 8
  %21 = sdiv i32 %15, 32
  %22 = add nsw i32 %15, 159
  %23 = sdiv i32 %22, 32
  %24 = mul nsw i32 %23, 11
  %25 = sdiv i32 %24, 10
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 0
  store i32 %25, i32* %27, align 8
  %28 = srem i32 %15, 32
  %29 = zext i64 %12 to i128
  %30 = shl nuw i128 %29, 64
  %31 = zext i64 %9 to i128
  %32 = or i128 %30, %31
  %33 = sext i32 %21 to i64
  %34 = icmp ult i64 %33, %2
  br i1 %34, label %36, label %35, !prof !2

35:                                               ; preds = %3
  tail call void @llvm.trap() #13
  unreachable

36:                                               ; preds = %3
  %37 = zext i32 %28 to i128
  %38 = shl i128 %32, %37
  %39 = trunc i128 %38 to i32
  %40 = getelementptr inbounds i32, i32* %1, i64 %33
  store i32 %39, i32* %40, align 4
  %41 = sub nsw i32 32, %28
  %42 = zext i32 %41 to i128
  %43 = lshr i128 %32, %42
  %44 = lshr i128 %43, 64
  %45 = or i128 %44, %43
  %46 = trunc i128 %45 to i64
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %36
  %49 = trunc i128 %44 to i64
  %50 = trunc i128 %43 to i64
  %51 = add i64 %2, -1
  br label %59

52:                                               ; preds = %66
  %53 = trunc i64 %63 to i32
  br label %54

54:                                               ; preds = %52, %36
  %55 = phi i32 [ %21, %36 ], [ %53, %52 ]
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %57, label %116

57:                                               ; preds = %54
  %58 = sext i32 %25 to i64
  br label %78

59:                                               ; preds = %66, %48
  %60 = phi i64 [ %33, %48 ], [ %63, %66 ]
  %61 = phi i64 [ %49, %48 ], [ %75, %66 ]
  %62 = phi i64 [ %50, %48 ], [ %74, %66 ]
  %63 = add nuw i64 %60, 1
  %64 = icmp eq i64 %60, %51
  br i1 %64, label %65, label %66, !prof !7

65:                                               ; preds = %59
  tail call void @llvm.trap() #13
  unreachable

66:                                               ; preds = %59
  %67 = trunc i64 %62 to i32
  %68 = getelementptr inbounds i32, i32* %1, i64 %63
  store i32 %67, i32* %68, align 4
  %69 = zext i64 %61 to i128
  %70 = shl nuw i128 %69, 64
  %71 = zext i64 %62 to i128
  %72 = or i128 %70, %71
  %73 = lshr i128 %72, 32
  %74 = trunc i128 %73 to i64
  %75 = lshr i64 %61, 32
  %76 = or i64 %75, %74
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %52, label %59

78:                                               ; preds = %90, %57
  %79 = phi i64 [ %58, %57 ], [ %87, %90 ]
  %80 = phi i32 [ %55, %57 ], [ %95, %90 ]
  %81 = sext i32 %80 to i64
  br label %98

82:                                               ; preds = %103
  %83 = trunc i64 %111 to i32
  %84 = icmp ult i64 %81, %2
  br i1 %84, label %86, label %85, !prof !2

85:                                               ; preds = %82
  tail call void @llvm.trap() #13
  unreachable

86:                                               ; preds = %82
  %87 = add i64 %79, -1
  %88 = icmp ult i64 %87, %2
  br i1 %88, label %90, label %89, !prof !2

89:                                               ; preds = %86
  tail call void @llvm.trap() #13
  unreachable

90:                                               ; preds = %86
  %91 = getelementptr inbounds i32, i32* %1, i64 %81
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 0
  %94 = zext i1 %93 to i32
  %95 = sub i32 %80, %94
  %96 = getelementptr inbounds i32, i32* %1, i64 %87
  store i32 %83, i32* %96, align 4
  %97 = icmp sgt i32 %95, -1
  br i1 %97, label %78, label %114

98:                                               ; preds = %103, %78
  %99 = phi i64 [ %81, %78 ], [ %112, %103 ]
  %100 = phi i64 [ 0, %78 ], [ %111, %103 ]
  %101 = icmp ult i64 %99, %2
  br i1 %101, label %103, label %102, !prof !2

102:                                              ; preds = %98
  tail call void @llvm.trap() #13
  unreachable

103:                                              ; preds = %98
  %104 = getelementptr inbounds i32, i32* %1, i64 %99
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %100, 32
  %108 = or i64 %107, %106
  %109 = udiv i64 %108, 1000000000
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %104, align 4
  %111 = urem i64 %108, 1000000000
  %112 = add nsw i64 %99, -1
  %113 = icmp sgt i64 %99, 0
  br i1 %113, label %98, label %82

114:                                              ; preds = %90
  %115 = trunc i64 %87 to i32
  store i32 %115, i32* %27, align 8
  br label %116

116:                                              ; preds = %114, %54
  %117 = phi i32 [ %115, %114 ], [ %25, %54 ]
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %27, align 8
  %119 = sext i32 %117 to i64
  %120 = icmp ult i64 %119, %2
  br i1 %120, label %122, label %121, !prof !2

121:                                              ; preds = %116
  tail call void @llvm.trap() #13
  unreachable

122:                                              ; preds = %116
  %123 = getelementptr inbounds i32, i32* %1, i64 %119
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %146, label %126

126:                                              ; preds = %122
  %127 = urem i32 %124, 10
  %128 = trunc i32 %127 to i8
  %129 = or i8 %128, 48
  store i32 1, i32* %17, align 4
  %130 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 2, i64 8
  store i8 %129, i8* %130, align 8
  %131 = icmp ult i32 %124, 10
  br i1 %131, label %146, label %132

132:                                              ; preds = %126, %144
  %133 = phi i32 [ %145, %144 ], [ 1, %126 ]
  %134 = phi i32 [ %135, %144 ], [ %124, %126 ]
  %135 = udiv i32 %134, 10
  %136 = urem i32 %135, 10
  %137 = trunc i32 %136 to i8
  %138 = or i8 %137, 48
  %139 = add nsw i32 %133, 1
  store i32 %139, i32* %17, align 4
  %140 = sub i32 8, %133
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %5, i64 0, i32 2, i64 %141
  store i8 %138, i8* %142, align 1
  %143 = icmp ult i32 %134, 100
  br i1 %143, label %146, label %144

144:                                              ; preds = %132
  %145 = load i32, i32* %17, align 4
  br label %132

146:                                              ; preds = %132, %122, %126
  %147 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %147) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %147, i8* nonnull align 8 %6, i64 40, i1 false) #13
  %148 = getelementptr inbounds i8, i8* %0, i64 8
  %149 = bitcast i8* %148 to void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)**
  %150 = load void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)*, void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"*)** %149, align 8
  %151 = bitcast i8* %0 to i8**
  %152 = load i8*, i8** %151, align 8
  call void %150(i8* %152, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* nonnull dereferenceable(40) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %147) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #13
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_122FormatFPositiveExpSlowENS_7uint128EiRKNS3_11FormatStateEE3$_0vJNS3_15BinaryToDecimalEEEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE"(i8* nocapture readonly, %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* nocapture readonly dereferenceable(40)) #0 {
  %3 = alloca %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", align 8
  %4 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %1 to i8*
  %5 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %4, i64 40, i1 false) #13
  %6 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %10, label %9, !prof !2

9:                                                ; preds = %2
  tail call void @llvm.trap() #13
  unreachable

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 %12, %14
  %16 = mul nsw i32 %15, 9
  %17 = add i32 %16, %7
  %18 = sext i32 %17 to i64
  %19 = bitcast i8* %0 to %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"**
  %20 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  %21 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %20, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %20, i64 0, i32 2
  %25 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %24, align 8
  br i1 %23, label %26, label %31

26:                                               ; preds = %10
  %27 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %25, i64 0, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = and i8 %28, 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %26, %10
  %32 = sext i32 %22 to i64
  %33 = add nsw i64 %32, 1
  br label %34

34:                                               ; preds = %31, %26
  %35 = phi i64 [ %33, %31 ], [ 0, %26 ]
  %36 = add nsw i64 %35, %18
  %37 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %20, i64 0, i32 0
  %38 = load i8, i8* %37, align 8
  %39 = icmp ne i8 %38, 0
  %40 = zext i1 %39 to i64
  %41 = add nsw i64 %36, %40
  %42 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %25, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp sgt i32 %43, -1
  %45 = sext i32 %43 to i64
  %46 = icmp ult i64 %41, %45
  %47 = and i1 %44, %46
  br i1 %47, label %48, label %62

48:                                               ; preds = %34
  %49 = trunc i64 %41 to i32
  %50 = sub i32 %43, %49
  %51 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %25, i64 0, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = and i8 %52, 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %62

55:                                               ; preds = %48
  %56 = and i8 %52, 16
  %57 = icmp ne i8 %56, 0
  %58 = zext i32 %50 to i64
  %59 = shl nuw i64 %58, 32
  %60 = select i1 %57, i64 %59, i64 0
  %61 = select i1 %57, i64 0, i64 %58
  br label %62

62:                                               ; preds = %55, %48, %34
  %63 = phi i64 [ 0, %34 ], [ 0, %48 ], [ %61, %55 ]
  %64 = phi i64 [ 0, %34 ], [ 0, %48 ], [ %60, %55 ]
  %65 = phi i32 [ 0, %34 ], [ %50, %48 ], [ 0, %55 ]
  %66 = or i64 %64, %63
  %67 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %20, i64 0, i32 3
  %68 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %67, align 8
  %69 = shl i64 %66, 32
  %70 = ashr exact i64 %69, 32
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %117, label %72

72:                                               ; preds = %62
  %73 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, %70
  store i64 %75, i64* %73, align 8
  %76 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 3, i64 1024
  %77 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 2
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = ptrtoint i8* %76 to i64
  %81 = sub i64 %80, %79
  %82 = icmp ult i64 %81, %70
  %83 = inttoptr i64 %79 to i8*
  br i1 %82, label %84, label %109

84:                                               ; preds = %72
  %85 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 3, i64 0
  %86 = ptrtoint i8* %85 to i64
  %87 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 0, i32 1
  %88 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %68, i64 0, i32 0, i32 0
  br label %89

89:                                               ; preds = %105, %84
  %90 = phi i64 [ %79, %84 ], [ %86, %105 ]
  %91 = phi i8* [ %83, %84 ], [ %85, %105 ]
  %92 = phi i64 [ %81, %84 ], [ 1024, %105 ]
  %93 = phi i64 [ %70, %84 ], [ %94, %105 ]
  %94 = sub i64 %93, %92
  %95 = icmp eq i64 %92, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %89
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 32, i64 %92, i1 false) #13
  %97 = load i8*, i8** %77, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 %92
  store i8* %98, i8** %77, align 8
  %99 = ptrtoint i8* %98 to i64
  br label %100

100:                                              ; preds = %96, %89
  %101 = phi i64 [ %90, %89 ], [ %99, %96 ]
  %102 = sub i64 %101, %86
  %103 = icmp sgt i64 %102, -1
  br i1 %103, label %105, label %104, !prof !2

104:                                              ; preds = %100
  tail call void @llvm.trap() #13
  unreachable

105:                                              ; preds = %100
  %106 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %87, align 8
  %107 = load i8*, i8** %88, align 8
  tail call void %106(i8* %107, i8* %85, i64 %102) #13
  store i8* %85, i8** %77, align 8
  %108 = icmp ugt i64 %94, 1024
  br i1 %108, label %89, label %109

109:                                              ; preds = %105, %72
  %110 = phi i8* [ %83, %72 ], [ %85, %105 ]
  %111 = phi i64 [ %70, %72 ], [ %94, %105 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 32, i64 %111, i1 false) #13
  %112 = load i8*, i8** %77, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 %111
  store i8* %113, i8** %77, align 8
  %114 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  %115 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %114, i64 0, i32 0
  %116 = load i8, i8* %115, align 8
  br label %117

117:                                              ; preds = %109, %62
  %118 = phi i8 [ %38, %62 ], [ %116, %109 ]
  %119 = phi %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* [ %20, %62 ], [ %114, %109 ]
  %120 = icmp eq i8 %118, 0
  br i1 %120, label %150, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %119, i64 0, i32 3
  %123 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %122, align 8
  %124 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %124, align 8
  %127 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 3, i64 1024
  %128 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 2
  %129 = bitcast i8** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = ptrtoint i8* %127 to i64
  %132 = icmp eq i64 %130, %131
  %133 = inttoptr i64 %130 to i8*
  br i1 %132, label %134, label %145

134:                                              ; preds = %121
  %135 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 3, i64 0
  %136 = ptrtoint i8* %135 to i64
  %137 = sub i64 %130, %136
  %138 = icmp sgt i64 %137, -1
  br i1 %138, label %140, label %139, !prof !2

139:                                              ; preds = %134
  tail call void @llvm.trap() #13
  unreachable

140:                                              ; preds = %134
  %141 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %123, i64 0, i32 0, i32 1
  %143 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %142, align 8
  %144 = load i8*, i8** %141, align 8
  tail call void %143(i8* %144, i8* %135, i64 %137) #13
  store i8* %135, i8** %128, align 8
  br label %145

145:                                              ; preds = %140, %121
  %146 = phi i8* [ %133, %121 ], [ %135, %140 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %118, i64 1, i1 false) #13
  %147 = load i8*, i8** %128, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %148, i8** %128, align 8
  %149 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  br label %150

150:                                              ; preds = %145, %117
  %151 = phi %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* [ %119, %117 ], [ %149, %145 ]
  %152 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %151, i64 0, i32 3
  %153 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %152, align 8
  %154 = ashr i64 %66, 32
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %198, label %156

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 1
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, %154
  store i64 %159, i64* %157, align 8
  %160 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 3, i64 1024
  %161 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 2
  %162 = bitcast i8** %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = ptrtoint i8* %160 to i64
  %165 = sub i64 %164, %163
  %166 = icmp ult i64 %165, %154
  %167 = inttoptr i64 %163 to i8*
  br i1 %166, label %168, label %193

168:                                              ; preds = %156
  %169 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 3, i64 0
  %170 = ptrtoint i8* %169 to i64
  %171 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 0, i32 1
  %172 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %153, i64 0, i32 0, i32 0
  br label %173

173:                                              ; preds = %189, %168
  %174 = phi i64 [ %163, %168 ], [ %170, %189 ]
  %175 = phi i8* [ %167, %168 ], [ %169, %189 ]
  %176 = phi i64 [ %165, %168 ], [ 1024, %189 ]
  %177 = phi i64 [ %154, %168 ], [ %178, %189 ]
  %178 = sub i64 %177, %176
  %179 = icmp eq i64 %176, 0
  br i1 %179, label %184, label %180

180:                                              ; preds = %173
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 48, i64 %176, i1 false) #13
  %181 = load i8*, i8** %161, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 %176
  store i8* %182, i8** %161, align 8
  %183 = ptrtoint i8* %182 to i64
  br label %184

184:                                              ; preds = %180, %173
  %185 = phi i64 [ %174, %173 ], [ %183, %180 ]
  %186 = sub i64 %185, %170
  %187 = icmp sgt i64 %186, -1
  br i1 %187, label %189, label %188, !prof !2

188:                                              ; preds = %184
  tail call void @llvm.trap() #13
  unreachable

189:                                              ; preds = %184
  %190 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %171, align 8
  %191 = load i8*, i8** %172, align 8
  tail call void %190(i8* %191, i8* %169, i64 %186) #13
  store i8* %169, i8** %161, align 8
  %192 = icmp ugt i64 %178, 1024
  br i1 %192, label %173, label %193

193:                                              ; preds = %189, %156
  %194 = phi i8* [ %167, %156 ], [ %169, %189 ]
  %195 = phi i64 [ %154, %156 ], [ %178, %189 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 48, i64 %195, i1 false) #13
  %196 = load i8*, i8** %161, align 8
  %197 = getelementptr inbounds i8, i8* %196, i64 %195
  store i8* %197, i8** %161, align 8
  br label %198

198:                                              ; preds = %193, %150
  %199 = load i32, i32* %6, align 4
  %200 = icmp sgt i32 %199, -1
  br i1 %200, label %201, label %205, !prof !2

201:                                              ; preds = %198
  %202 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 2, i64 9
  %203 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 4, i32 1
  %204 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 4, i32 0
  br label %206

205:                                              ; preds = %198
  tail call void @llvm.trap() #13
  unreachable

206:                                              ; preds = %257, %201
  %207 = phi i32 [ %199, %201 ], [ %268, %257 ]
  %208 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  %209 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %208, i64 0, i32 3
  %210 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %209, align 8
  %211 = sext i32 %207 to i64
  %212 = sub nsw i64 0, %211
  %213 = getelementptr inbounds i8, i8* %202, i64 %212
  %214 = icmp eq i32 %207, 0
  br i1 %214, label %243, label %215

215:                                              ; preds = %206
  %216 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = add i64 %217, %211
  store i64 %218, i64* %216, align 8
  %219 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 3, i64 1024
  %220 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 2
  %221 = bitcast i8** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = ptrtoint i8* %219 to i64
  %224 = sub i64 %223, %222
  %225 = icmp ugt i64 %224, %211
  br i1 %225, label %239, label %226

226:                                              ; preds = %215
  %227 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 3, i64 0
  %228 = ptrtoint i8* %227 to i64
  %229 = sub i64 %222, %228
  %230 = icmp sgt i64 %229, -1
  br i1 %230, label %232, label %231, !prof !2

231:                                              ; preds = %226
  call void @llvm.trap() #13
  unreachable

232:                                              ; preds = %226
  %233 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 0, i32 1
  %234 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %233, align 8
  %235 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %210, i64 0, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  call void %234(i8* %236, i8* %227, i64 %229) #13
  store i8* %227, i8** %220, align 8
  %237 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %233, align 8
  %238 = load i8*, i8** %235, align 8
  call void %237(i8* %238, i8* %213, i64 %211) #13
  br label %243

239:                                              ; preds = %215
  %240 = inttoptr i64 %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %240, i8* align 1 %213, i64 %211, i1 false) #13
  %241 = load i8*, i8** %220, align 8
  %242 = getelementptr inbounds i8, i8* %241, i64 %211
  store i8* %242, i8** %220, align 8
  br label %243

243:                                              ; preds = %239, %232, %206
  %244 = load i32, i32* %13, align 8
  %245 = load i32, i32* %11, align 4
  %246 = icmp slt i32 %244, %245
  br i1 %246, label %247, label %270

247:                                              ; preds = %243
  %248 = add nsw i32 %244, 1
  store i32 %248, i32* %13, align 8
  %249 = sext i32 %244 to i64
  %250 = load i64, i64* %203, align 8
  %251 = icmp ugt i64 %250, %249
  br i1 %251, label %253, label %252, !prof !2

252:                                              ; preds = %247
  call void @llvm.trap() #13
  unreachable

253:                                              ; preds = %247
  %254 = load i32*, i32** %204, align 8
  %255 = getelementptr inbounds i32, i32* %254, i64 %249
  %256 = load i32, i32* %255, align 4
  store i32 0, i32* %6, align 4
  br label %257

257:                                              ; preds = %257, %253
  %258 = phi i32 [ %256, %253 ], [ %267, %257 ]
  %259 = phi i32 [ 0, %253 ], [ %268, %257 ]
  %260 = urem i32 %258, 10
  %261 = trunc i32 %260 to i8
  %262 = or i8 %261, 48
  %263 = add nsw i32 %259, 1
  store i32 %263, i32* %6, align 4
  %264 = sub i32 8, %259
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal", %"class.absl::str_format_internal::(anonymous namespace)::BinaryToDecimal"* %3, i64 0, i32 2, i64 %265
  store i8 %262, i8* %266, align 1
  %267 = udiv i32 %258, 10
  %268 = load i32, i32* %6, align 4
  %269 = icmp slt i32 %268, 9
  br i1 %269, label %257, label %206

270:                                              ; preds = %243
  %271 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  %272 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %271, i64 0, i32 1
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %282

275:                                              ; preds = %270
  %276 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %271, i64 0, i32 2
  %277 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %276, align 8
  %278 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %277, i64 0, i32 1
  %279 = load i8, i8* %278, align 1
  %280 = and i8 %279, 8
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %360, label %282

282:                                              ; preds = %275, %270
  %283 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %271, i64 0, i32 3
  %284 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %283, align 8
  %285 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 1
  %286 = load i64, i64* %285, align 8
  %287 = add i64 %286, 1
  store i64 %287, i64* %285, align 8
  %288 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 3, i64 1024
  %289 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 2
  %290 = bitcast i8** %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = ptrtoint i8* %288 to i64
  %293 = icmp eq i64 %291, %292
  %294 = inttoptr i64 %291 to i8*
  br i1 %293, label %295, label %306

295:                                              ; preds = %282
  %296 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 3, i64 0
  %297 = ptrtoint i8* %296 to i64
  %298 = sub i64 %291, %297
  %299 = icmp sgt i64 %298, -1
  br i1 %299, label %301, label %300, !prof !2

300:                                              ; preds = %295
  call void @llvm.trap() #13
  unreachable

301:                                              ; preds = %295
  %302 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 0, i32 0
  %303 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %284, i64 0, i32 0, i32 1
  %304 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %303, align 8
  %305 = load i8*, i8** %302, align 8
  call void %304(i8* %305, i8* %296, i64 %298) #13
  store i8* %296, i8** %289, align 8
  br label %306

306:                                              ; preds = %301, %282
  %307 = phi i8* [ %294, %282 ], [ %296, %301 ]
  store i8 46, i8* %307, align 1
  %308 = load i8*, i8** %289, align 8
  %309 = getelementptr inbounds i8, i8* %308, i64 1
  store i8* %309, i8** %289, align 8
  %310 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  %311 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %310, i64 0, i32 1
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %310, i64 0, i32 3
  %314 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %313, align 8
  %315 = sext i32 %312 to i64
  %316 = icmp eq i32 %312, 0
  br i1 %316, label %364, label %317

317:                                              ; preds = %306
  %318 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 1
  %319 = load i64, i64* %318, align 8
  %320 = add i64 %319, %315
  store i64 %320, i64* %318, align 8
  %321 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 3, i64 1024
  %322 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 2
  %323 = bitcast i8** %322 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = ptrtoint i8* %321 to i64
  %326 = sub i64 %325, %324
  %327 = icmp ult i64 %326, %315
  %328 = inttoptr i64 %324 to i8*
  br i1 %327, label %329, label %354

329:                                              ; preds = %317
  %330 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 3, i64 0
  %331 = ptrtoint i8* %330 to i64
  %332 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 0, i32 1
  %333 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %314, i64 0, i32 0, i32 0
  br label %334

334:                                              ; preds = %350, %329
  %335 = phi i64 [ %324, %329 ], [ %331, %350 ]
  %336 = phi i8* [ %328, %329 ], [ %330, %350 ]
  %337 = phi i64 [ %326, %329 ], [ 1024, %350 ]
  %338 = phi i64 [ %315, %329 ], [ %339, %350 ]
  %339 = sub i64 %338, %337
  %340 = icmp eq i64 %337, 0
  br i1 %340, label %345, label %341

341:                                              ; preds = %334
  call void @llvm.memset.p0i8.i64(i8* align 1 %336, i8 48, i64 %337, i1 false) #13
  %342 = load i8*, i8** %322, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 %337
  store i8* %343, i8** %322, align 8
  %344 = ptrtoint i8* %343 to i64
  br label %345

345:                                              ; preds = %341, %334
  %346 = phi i64 [ %335, %334 ], [ %344, %341 ]
  %347 = sub i64 %346, %331
  %348 = icmp sgt i64 %347, -1
  br i1 %348, label %350, label %349, !prof !2

349:                                              ; preds = %345
  call void @llvm.trap() #13
  unreachable

350:                                              ; preds = %345
  %351 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %332, align 8
  %352 = load i8*, i8** %333, align 8
  call void %351(i8* %352, i8* %330, i64 %347) #13
  store i8* %330, i8** %322, align 8
  %353 = icmp ugt i64 %339, 1024
  br i1 %353, label %334, label %354

354:                                              ; preds = %350, %317
  %355 = phi i8* [ %328, %317 ], [ %330, %350 ]
  %356 = phi i64 [ %315, %317 ], [ %339, %350 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %355, i8 48, i64 %356, i1 false) #13
  %357 = load i8*, i8** %322, align 8
  %358 = getelementptr inbounds i8, i8* %357, i64 %356
  store i8* %358, i8** %322, align 8
  %359 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %19, align 8
  br label %360

360:                                              ; preds = %275, %354
  %361 = phi %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* [ %359, %354 ], [ %271, %275 ]
  %362 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %361, i64 0, i32 3
  %363 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %362, align 8
  br label %364

364:                                              ; preds = %360, %306
  %365 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %314, %306 ], [ %363, %360 ]
  %366 = sext i32 %65 to i64
  %367 = icmp eq i32 %65, 0
  br i1 %367, label %410, label %368

368:                                              ; preds = %364
  %369 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 1
  %370 = load i64, i64* %369, align 8
  %371 = add i64 %370, %366
  store i64 %371, i64* %369, align 8
  %372 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 3, i64 1024
  %373 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 2
  %374 = bitcast i8** %373 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = ptrtoint i8* %372 to i64
  %377 = sub i64 %376, %375
  %378 = icmp ult i64 %377, %366
  %379 = inttoptr i64 %375 to i8*
  br i1 %378, label %380, label %405

380:                                              ; preds = %368
  %381 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 3, i64 0
  %382 = ptrtoint i8* %381 to i64
  %383 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 0, i32 1
  %384 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %365, i64 0, i32 0, i32 0
  br label %385

385:                                              ; preds = %401, %380
  %386 = phi i64 [ %375, %380 ], [ %382, %401 ]
  %387 = phi i8* [ %379, %380 ], [ %381, %401 ]
  %388 = phi i64 [ %377, %380 ], [ 1024, %401 ]
  %389 = phi i64 [ %366, %380 ], [ %390, %401 ]
  %390 = sub i64 %389, %388
  %391 = icmp eq i64 %388, 0
  br i1 %391, label %396, label %392

392:                                              ; preds = %385
  call void @llvm.memset.p0i8.i64(i8* align 1 %387, i8 32, i64 %388, i1 false) #13
  %393 = load i8*, i8** %373, align 8
  %394 = getelementptr inbounds i8, i8* %393, i64 %388
  store i8* %394, i8** %373, align 8
  %395 = ptrtoint i8* %394 to i64
  br label %396

396:                                              ; preds = %392, %385
  %397 = phi i64 [ %386, %385 ], [ %395, %392 ]
  %398 = sub i64 %397, %382
  %399 = icmp sgt i64 %398, -1
  br i1 %399, label %401, label %400, !prof !2

400:                                              ; preds = %396
  call void @llvm.trap() #13
  unreachable

401:                                              ; preds = %396
  %402 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %383, align 8
  %403 = load i8*, i8** %384, align 8
  call void %402(i8* %403, i8* %381, i64 %398) #13
  store i8* %381, i8** %373, align 8
  %404 = icmp ugt i64 %390, 1024
  br i1 %404, label %385, label %405

405:                                              ; preds = %401, %368
  %406 = phi i8* [ %379, %368 ], [ %381, %401 ]
  %407 = phi i64 [ %366, %368 ], [ %390, %401 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %406, i8 32, i64 %407, i1 false) #13
  %408 = load i8*, i8** %373, align 8
  %409 = getelementptr inbounds i8, i8* %408, i64 %407
  store i8* %409, i8** %373, align 8
  br label %410

410:                                              ; preds = %364, %405
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_124FractionalDigitGenerator13RunConversionENS_7uint128EiNS_11FunctionRefIFvS4_EEEEUlNS_4SpanIjEEE_vJSA_EEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE(i8* nocapture readonly, i32*, i64) #0 {
  %4 = alloca %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 32
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 16
  %14 = ptrtoint i32* %1 to i64
  %15 = sdiv i32 %13, 32
  %16 = srem i32 %13, 32
  %17 = zext i64 %10 to i128
  %18 = shl nuw i128 %17, 64
  %19 = zext i64 %7 to i128
  %20 = or i128 %18, %19
  %21 = sext i32 %15 to i64
  %22 = icmp ult i64 %21, %2
  br i1 %22, label %24, label %23, !prof !2

23:                                               ; preds = %3
  tail call void @llvm.trap() #13
  unreachable

24:                                               ; preds = %3
  %25 = sub nsw i32 32, %16
  %26 = zext i32 %25 to i128
  %27 = shl i128 %20, %26
  %28 = trunc i128 %27 to i32
  %29 = getelementptr inbounds i32, i32* %1, i64 %21
  store i32 %28, i32* %29, align 4
  %30 = zext i32 %16 to i128
  %31 = lshr i128 %20, %30
  %32 = lshr i128 %31, 64
  %33 = or i128 %32, %31
  %34 = trunc i128 %33 to i64
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %24
  %37 = trunc i128 %32 to i64
  %38 = trunc i128 %31 to i64
  br label %62

39:                                               ; preds = %69, %24
  %40 = icmp slt i32 %13, -31
  br i1 %40, label %81, label %47

41:                                               ; preds = %52
  %42 = trunc i64 %59 to i32
  %43 = load i32, i32* %29, align 4
  %44 = icmp eq i32 %43, 0
  %45 = zext i1 %44 to i32
  %46 = sub nsw i32 %15, %45
  br label %81

47:                                               ; preds = %39, %52
  %48 = phi i64 [ %60, %52 ], [ %21, %39 ]
  %49 = phi i64 [ %59, %52 ], [ 0, %39 ]
  %50 = icmp ult i64 %48, %2
  br i1 %50, label %52, label %51, !prof !2

51:                                               ; preds = %47
  tail call void @llvm.trap() #13
  unreachable

52:                                               ; preds = %47
  %53 = getelementptr inbounds i32, i32* %1, i64 %48
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = mul nuw nsw i64 %55, 10
  %57 = add nuw nsw i64 %56, %49
  %58 = trunc i64 %57 to i32
  store i32 %58, i32* %53, align 4
  %59 = lshr i64 %57, 32
  %60 = add nsw i64 %48, -1
  %61 = icmp sgt i64 %48, 0
  br i1 %61, label %47, label %41

62:                                               ; preds = %69, %36
  %63 = phi i64 [ %21, %36 ], [ %66, %69 ]
  %64 = phi i64 [ %37, %36 ], [ %78, %69 ]
  %65 = phi i64 [ %38, %36 ], [ %77, %69 ]
  %66 = add i64 %63, -1
  %67 = icmp ult i64 %66, %2
  br i1 %67, label %69, label %68, !prof !2

68:                                               ; preds = %62
  tail call void @llvm.trap() #13
  unreachable

69:                                               ; preds = %62
  %70 = trunc i64 %65 to i32
  %71 = getelementptr inbounds i32, i32* %1, i64 %66
  store i32 %70, i32* %71, align 4
  %72 = zext i64 %64 to i128
  %73 = shl nuw i128 %72, 64
  %74 = zext i64 %65 to i128
  %75 = or i128 %73, %74
  %76 = lshr i128 %75, 32
  %77 = trunc i128 %76 to i64
  %78 = lshr i64 %64, 32
  %79 = or i64 %78, %77
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %39, label %62

81:                                               ; preds = %39, %41
  %82 = phi i32 [ %15, %39 ], [ %46, %41 ]
  %83 = phi i32 [ 0, %39 ], [ %42, %41 ]
  %84 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84) #13
  %85 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %4, i64 0, i32 0
  store i32 %83, i32* %85, align 8
  %86 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %4, i64 0, i32 1
  store i32 %82, i32* %86, align 4
  %87 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %4, i64 0, i32 2
  %88 = bitcast %"class.absl::Span"* %87 to i64*
  store i64 %14, i64* %88, align 8
  %89 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %4, i64 0, i32 2, i32 1
  store i64 %2, i64* %89, align 8
  %90 = getelementptr inbounds i8, i8* %0, i64 8
  %91 = bitcast i8* %90 to void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)**
  %92 = load void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)*, void (i8*, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"*)** %91, align 8
  %93 = bitcast i8* %0 to i8**
  %94 = load i8*, i8** %93, align 8
  call void %92(i8* %94, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* nonnull dereferenceable(24) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %84) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4absl19functional_internal12InvokeObjectIZNS_19str_format_internal12_GLOBAL__N_122FormatFNegativeExpSlowENS_7uint128EiRKNS3_11FormatStateEE3$_1vJNS3_24FractionalDigitGeneratorEEEET0_NS0_7VoidPtrEDpNS0_8ForwardTIT1_E4typeE"(i8* nocapture readonly, %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* nocapture readonly dereferenceable(24)) #0 {
  %3 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %1, i64 0, i32 2, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %1, i64 0, i32 2, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i8* %0 to %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"**
  %8 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %9 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %339, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = bitcast i8* %13 to i32**
  %15 = load i32*, i32** %14, align 8
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %339

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %1, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator", %"class.absl::str_format_internal::(anonymous namespace)::FractionalDigitGenerator"* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  br label %23

23:                                               ; preds = %190, %18
  %24 = phi i32 [ %102, %190 ], [ %22, %18 ]
  %25 = phi i32 [ %103, %190 ], [ %20, %18 ]
  %26 = icmp ne i32 %25, 0
  %27 = icmp sgt i32 %24, -1
  %28 = or i1 %27, %26
  br i1 %28, label %29, label %339

29:                                               ; preds = %23
  %30 = icmp slt i32 %24, 0
  br i1 %30, label %101, label %31

31:                                               ; preds = %29
  %32 = sext i32 %24 to i64
  br label %44

33:                                               ; preds = %49
  %34 = trunc i64 %56 to i32
  %35 = icmp ugt i64 %6, %32
  br i1 %35, label %37, label %36, !prof !2

36:                                               ; preds = %33
  tail call void @llvm.trap() #13
  unreachable

37:                                               ; preds = %33
  %38 = getelementptr inbounds i32, i32* %4, i64 %32
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i32
  %42 = sub i32 %24, %41
  %43 = icmp eq i32 %34, 9
  br i1 %43, label %59, label %101

44:                                               ; preds = %49, %31
  %45 = phi i64 [ %32, %31 ], [ %57, %49 ]
  %46 = phi i64 [ 0, %31 ], [ %56, %49 ]
  %47 = icmp ugt i64 %6, %45
  br i1 %47, label %49, label %48, !prof !2

48:                                               ; preds = %44
  tail call void @llvm.trap() #13
  unreachable

49:                                               ; preds = %44
  %50 = getelementptr inbounds i32, i32* %4, i64 %45
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = mul nuw nsw i64 %52, 10
  %54 = add nuw nsw i64 %53, %46
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %50, align 4
  %56 = lshr i64 %54, 32
  %57 = add nsw i64 %45, -1
  %58 = icmp sgt i64 %45, 0
  br i1 %58, label %44, label %33

59:                                               ; preds = %37, %70
  %60 = phi i32 [ %75, %70 ], [ %42, %37 ]
  %61 = phi i32 [ %76, %70 ], [ %42, %37 ]
  %62 = phi i32 [ %63, %70 ], [ 0, %37 ]
  %63 = add nuw nsw i32 %62, 1
  %64 = icmp slt i32 %61, 0
  br i1 %64, label %95, label %65

65:                                               ; preds = %59
  %66 = sext i32 %61 to i64
  br label %78

67:                                               ; preds = %83
  %68 = icmp ugt i64 %6, %66
  br i1 %68, label %70, label %69, !prof !2

69:                                               ; preds = %67
  tail call void @llvm.trap() #13
  unreachable

70:                                               ; preds = %67
  %71 = getelementptr inbounds i32, i32* %4, i64 %66
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  %74 = add nsw i32 %61, -1
  %75 = select i1 %73, i32 %74, i32 %60
  %76 = select i1 %73, i32 %74, i32 %61
  %77 = icmp eq i64 %90, 9
  br i1 %77, label %59, label %93

78:                                               ; preds = %83, %65
  %79 = phi i64 [ %66, %65 ], [ %91, %83 ]
  %80 = phi i64 [ 0, %65 ], [ %90, %83 ]
  %81 = icmp ugt i64 %6, %79
  br i1 %81, label %83, label %82, !prof !2

82:                                               ; preds = %78
  tail call void @llvm.trap() #13
  unreachable

83:                                               ; preds = %78
  %84 = getelementptr inbounds i32, i32* %4, i64 %79
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i64
  %87 = mul nuw nsw i64 %86, 10
  %88 = add nuw nsw i64 %87, %80
  %89 = trunc i64 %88 to i32
  store i32 %89, i32* %84, align 4
  %90 = lshr i64 %88, 32
  %91 = add nsw i64 %79, -1
  %92 = icmp sgt i64 %79, 0
  br i1 %92, label %78, label %67

93:                                               ; preds = %70
  %94 = trunc i64 %90 to i32
  br label %95

95:                                               ; preds = %59, %93
  %96 = phi i32 [ %75, %93 ], [ %60, %59 ]
  %97 = phi i32 [ %94, %93 ], [ 0, %59 ]
  %98 = phi i32 [ %76, %93 ], [ %61, %59 ]
  %99 = zext i32 %63 to i64
  %100 = shl nuw nsw i64 %99, 32
  br label %101

101:                                              ; preds = %95, %37, %29
  %102 = phi i32 [ %96, %95 ], [ %42, %37 ], [ %24, %29 ]
  %103 = phi i32 [ %97, %95 ], [ %34, %37 ], [ 0, %29 ]
  %104 = phi i32 [ %98, %95 ], [ %42, %37 ], [ %24, %29 ]
  %105 = phi i64 [ %100, %95 ], [ 0, %37 ], [ 0, %29 ]
  %106 = lshr exact i64 %105, 32
  %107 = trunc i64 %106 to i32
  %108 = add nsw i32 %107, 1
  %109 = load i32*, i32** %14, align 8
  %110 = load i32, i32* %109, align 4
  %111 = icmp slt i32 %108, %110
  br i1 %111, label %112, label %197

112:                                              ; preds = %101
  %113 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %114 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %113, i64 0, i32 3
  %115 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %114, align 8
  %116 = trunc i32 %25 to i8
  %117 = add i8 %116, 48
  %118 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 1
  %119 = load i64, i64* %118, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %118, align 8
  %121 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 3, i64 1024
  %122 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 2
  %123 = bitcast i8** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = ptrtoint i8* %121 to i64
  %126 = icmp eq i64 %124, %125
  %127 = inttoptr i64 %124 to i8*
  br i1 %126, label %128, label %139

128:                                              ; preds = %112
  %129 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 3, i64 0
  %130 = ptrtoint i8* %129 to i64
  %131 = sub i64 %124, %130
  %132 = icmp sgt i64 %131, -1
  br i1 %132, label %134, label %133, !prof !2

133:                                              ; preds = %128
  tail call void @llvm.trap() #13
  unreachable

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 0, i32 0
  %136 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %115, i64 0, i32 0, i32 1
  %137 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %136, align 8
  %138 = load i8*, i8** %135, align 8
  tail call void %137(i8* %138, i8* %129, i64 %131) #13
  store i8* %129, i8** %122, align 8
  br label %139

139:                                              ; preds = %134, %112
  %140 = phi i8* [ %127, %112 ], [ %129, %134 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %117, i64 1, i1 false) #13
  %141 = load i8*, i8** %122, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 1
  store i8* %142, i8** %122, align 8
  %143 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %144 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %143, i64 0, i32 3
  %145 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %144, align 8
  %146 = ashr exact i64 %105, 32
  %147 = icmp eq i64 %105, 0
  br i1 %147, label %190, label %148

148:                                              ; preds = %139
  %149 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, %146
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 3, i64 1024
  %153 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 2
  %154 = bitcast i8** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = ptrtoint i8* %152 to i64
  %157 = sub i64 %156, %155
  %158 = icmp ult i64 %157, %146
  %159 = inttoptr i64 %155 to i8*
  br i1 %158, label %160, label %185

160:                                              ; preds = %148
  %161 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 3, i64 0
  %162 = ptrtoint i8* %161 to i64
  %163 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %145, i64 0, i32 0, i32 0
  br label %165

165:                                              ; preds = %181, %160
  %166 = phi i64 [ %155, %160 ], [ %162, %181 ]
  %167 = phi i8* [ %159, %160 ], [ %161, %181 ]
  %168 = phi i64 [ %157, %160 ], [ 1024, %181 ]
  %169 = phi i64 [ %146, %160 ], [ %170, %181 ]
  %170 = sub i64 %169, %168
  %171 = icmp eq i64 %168, 0
  br i1 %171, label %176, label %172

172:                                              ; preds = %165
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %167, i8 57, i64 %168, i1 false) #13
  %173 = load i8*, i8** %153, align 8
  %174 = getelementptr inbounds i8, i8* %173, i64 %168
  store i8* %174, i8** %153, align 8
  %175 = ptrtoint i8* %174 to i64
  br label %176

176:                                              ; preds = %172, %165
  %177 = phi i64 [ %166, %165 ], [ %175, %172 ]
  %178 = sub i64 %177, %162
  %179 = icmp sgt i64 %178, -1
  br i1 %179, label %181, label %180, !prof !2

180:                                              ; preds = %176
  tail call void @llvm.trap() #13
  unreachable

181:                                              ; preds = %176
  %182 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %163, align 8
  %183 = load i8*, i8** %164, align 8
  tail call void %182(i8* %183, i8* %161, i64 %178) #13
  store i8* %161, i8** %153, align 8
  %184 = icmp ugt i64 %170, 1024
  br i1 %184, label %165, label %185

185:                                              ; preds = %181, %148
  %186 = phi i8* [ %159, %148 ], [ %161, %181 ]
  %187 = phi i64 [ %146, %148 ], [ %170, %181 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 57, i64 %187, i1 false) #13
  %188 = load i8*, i8** %153, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 %187
  store i8* %189, i8** %153, align 8
  br label %190

190:                                              ; preds = %185, %139
  %191 = load i32*, i32** %14, align 8
  %192 = load i32, i32* %191, align 4
  %193 = sub nsw i32 %192, %108
  store i32 %193, i32* %191, align 4
  %194 = load i32*, i32** %14, align 8
  %195 = load i32, i32* %194, align 4
  %196 = icmp sgt i32 %195, 0
  br i1 %196, label %23, label %339

197:                                              ; preds = %101
  %198 = trunc i64 %106 to i32
  %199 = icmp sle i32 %110, %198
  %200 = icmp sgt i32 %103, 5
  %201 = or i1 %200, %199
  br i1 %201, label %208, label %202

202:                                              ; preds = %197
  %203 = icmp eq i32 %103, 5
  br i1 %203, label %204, label %213

204:                                              ; preds = %202
  %205 = icmp slt i32 %104, 0
  %206 = icmp eq i32 %198, 0
  %207 = and i1 %205, %206
  br i1 %207, label %218, label %208

208:                                              ; preds = %204, %197
  %209 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %210 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %209, i64 0, i32 3
  %211 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %210, align 8
  %212 = trunc i32 %25 to i8
  br label %225

213:                                              ; preds = %202
  %214 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %215 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %214, i64 0, i32 3
  %216 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %215, align 8
  %217 = trunc i32 %25 to i8
  br label %257

218:                                              ; preds = %204
  %219 = srem i32 %25, 2
  %220 = icmp eq i32 %219, 1
  %221 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %222 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %221, i64 0, i32 3
  %223 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %222, align 8
  %224 = trunc i32 %25 to i8
  br i1 %220, label %225, label %257

225:                                              ; preds = %218, %208
  %226 = phi i8 [ %212, %208 ], [ %224, %218 ]
  %227 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %211, %208 ], [ %223, %218 ]
  %228 = add i8 %226, 49
  %229 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 1
  %230 = load i64, i64* %229, align 8
  %231 = add i64 %230, 1
  store i64 %231, i64* %229, align 8
  %232 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 3, i64 1024
  %233 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 2
  %234 = bitcast i8** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = ptrtoint i8* %232 to i64
  %237 = icmp eq i64 %235, %236
  %238 = inttoptr i64 %235 to i8*
  br i1 %237, label %239, label %250

239:                                              ; preds = %225
  %240 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 3, i64 0
  %241 = ptrtoint i8* %240 to i64
  %242 = sub i64 %235, %241
  %243 = icmp sgt i64 %242, -1
  br i1 %243, label %245, label %244, !prof !2

244:                                              ; preds = %239
  tail call void @llvm.trap() #13
  unreachable

245:                                              ; preds = %239
  %246 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 0, i32 0
  %247 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %227, i64 0, i32 0, i32 1
  %248 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %247, align 8
  %249 = load i8*, i8** %246, align 8
  tail call void %248(i8* %249, i8* %240, i64 %242) #13
  store i8* %240, i8** %233, align 8
  br label %250

250:                                              ; preds = %245, %225
  %251 = phi i8* [ %238, %225 ], [ %240, %245 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %251, i8 %228, i64 1, i1 false) #13
  %252 = load i8*, i8** %233, align 8
  %253 = getelementptr inbounds i8, i8* %252, i64 1
  store i8* %253, i8** %233, align 8
  %254 = load i32*, i32** %14, align 8
  %255 = load i32, i32* %254, align 4
  %256 = add nsw i32 %255, -1
  store i32 %256, i32* %254, align 4
  br label %339

257:                                              ; preds = %218, %213
  %258 = phi i8 [ %217, %213 ], [ %224, %218 ]
  %259 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %216, %213 ], [ %223, %218 ]
  %260 = add i8 %258, 48
  %261 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 1
  %262 = load i64, i64* %261, align 8
  %263 = add i64 %262, 1
  store i64 %263, i64* %261, align 8
  %264 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 3, i64 1024
  %265 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 2
  %266 = bitcast i8** %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = ptrtoint i8* %264 to i64
  %269 = icmp eq i64 %267, %268
  %270 = inttoptr i64 %267 to i8*
  br i1 %269, label %271, label %282

271:                                              ; preds = %257
  %272 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 3, i64 0
  %273 = ptrtoint i8* %272 to i64
  %274 = sub i64 %267, %273
  %275 = icmp sgt i64 %274, -1
  br i1 %275, label %277, label %276, !prof !2

276:                                              ; preds = %271
  tail call void @llvm.trap() #13
  unreachable

277:                                              ; preds = %271
  %278 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 0, i32 0
  %279 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %259, i64 0, i32 0, i32 1
  %280 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %279, align 8
  %281 = load i8*, i8** %278, align 8
  tail call void %280(i8* %281, i8* %272, i64 %274) #13
  store i8* %272, i8** %265, align 8
  br label %282

282:                                              ; preds = %277, %257
  %283 = phi i8* [ %270, %257 ], [ %272, %277 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %283, i8 %260, i64 1, i1 false) #13
  %284 = load i8*, i8** %265, align 8
  %285 = getelementptr inbounds i8, i8* %284, i64 1
  store i8* %285, i8** %265, align 8
  %286 = load %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"*, %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"** %7, align 8
  %287 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %286, i64 0, i32 3
  %288 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %287, align 8
  %289 = load i32*, i32** %14, align 8
  %290 = load i32, i32* %289, align 4
  %291 = add nsw i32 %290, -1
  %292 = sext i32 %291 to i64
  %293 = icmp eq i32 %291, 0
  br i1 %293, label %337, label %294

294:                                              ; preds = %282
  %295 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 1
  %296 = load i64, i64* %295, align 8
  %297 = add i64 %296, %292
  store i64 %297, i64* %295, align 8
  %298 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 3, i64 1024
  %299 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 2
  %300 = bitcast i8** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = ptrtoint i8* %298 to i64
  %303 = sub i64 %302, %301
  %304 = icmp ult i64 %303, %292
  %305 = inttoptr i64 %301 to i8*
  br i1 %304, label %306, label %331

306:                                              ; preds = %294
  %307 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 3, i64 0
  %308 = ptrtoint i8* %307 to i64
  %309 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 0, i32 1
  %310 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %288, i64 0, i32 0, i32 0
  br label %311

311:                                              ; preds = %327, %306
  %312 = phi i64 [ %301, %306 ], [ %308, %327 ]
  %313 = phi i8* [ %305, %306 ], [ %307, %327 ]
  %314 = phi i64 [ %303, %306 ], [ 1024, %327 ]
  %315 = phi i64 [ %292, %306 ], [ %316, %327 ]
  %316 = sub i64 %315, %314
  %317 = icmp eq i64 %314, 0
  br i1 %317, label %322, label %318

318:                                              ; preds = %311
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %313, i8 57, i64 %314, i1 false) #13
  %319 = load i8*, i8** %299, align 8
  %320 = getelementptr inbounds i8, i8* %319, i64 %314
  store i8* %320, i8** %299, align 8
  %321 = ptrtoint i8* %320 to i64
  br label %322

322:                                              ; preds = %318, %311
  %323 = phi i64 [ %312, %311 ], [ %321, %318 ]
  %324 = sub i64 %323, %308
  %325 = icmp sgt i64 %324, -1
  br i1 %325, label %327, label %326, !prof !2

326:                                              ; preds = %322
  tail call void @llvm.trap() #13
  unreachable

327:                                              ; preds = %322
  %328 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %309, align 8
  %329 = load i8*, i8** %310, align 8
  tail call void %328(i8* %329, i8* %307, i64 %324) #13
  store i8* %307, i8** %299, align 8
  %330 = icmp ugt i64 %316, 1024
  br i1 %330, label %311, label %331

331:                                              ; preds = %327, %294
  %332 = phi i8* [ %305, %294 ], [ %307, %327 ]
  %333 = phi i64 [ %292, %294 ], [ %316, %327 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %332, i8 57, i64 %333, i1 false) #13
  %334 = load i8*, i8** %299, align 8
  %335 = getelementptr inbounds i8, i8* %334, i64 %333
  store i8* %335, i8** %299, align 8
  %336 = load i32*, i32** %14, align 8
  br label %337

337:                                              ; preds = %331, %282
  %338 = phi i32* [ %289, %282 ], [ %336, %331 ]
  store i32 0, i32* %338, align 4
  br label %339

339:                                              ; preds = %23, %190, %2, %12, %250, %337
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @_ZN4absl19str_format_internal12_GLOBAL__N_125PrintFractionalDigitsFastENS_7uint128EPcii(i64, i64, i8*, i32, i32) unnamed_addr #0 {
  %6 = sub nsw i32 128, %3
  %7 = zext i64 %1 to i128
  %8 = shl nuw i128 %7, 64
  %9 = zext i64 %0 to i128
  %10 = or i128 %8, %9
  %11 = zext i32 %6 to i128
  %12 = shl i128 %10, %11
  %13 = trunc i128 %12 to i64
  %14 = lshr i128 %12, 64
  %15 = trunc i128 %14 to i64
  %16 = icmp sgt i32 %4, 0
  %17 = icmp ne i64 %13, 0
  %18 = and i1 %17, %16
  br i1 %18, label %25, label %19

19:                                               ; preds = %25, %5
  %20 = phi i64 [ %15, %5 ], [ %40, %25 ]
  %21 = phi i8* [ %2, %5 ], [ %45, %25 ]
  %22 = phi i32 [ %4, %5 ], [ %46, %25 ]
  %23 = phi i1 [ %17, %5 ], [ %48, %25 ]
  %24 = icmp sgt i32 %22, 0
  br i1 %24, label %50, label %67

25:                                               ; preds = %5, %25
  %26 = phi i32 [ %46, %25 ], [ %4, %5 ]
  %27 = phi i8* [ %45, %25 ], [ %2, %5 ]
  %28 = phi i64 [ %32, %25 ], [ %13, %5 ]
  %29 = phi i64 [ %40, %25 ], [ %15, %5 ]
  %30 = zext i64 %28 to i128
  %31 = mul nuw nsw i128 %30, 10
  %32 = trunc i128 %31 to i64
  %33 = lshr i128 %31, 64
  %34 = trunc i128 %33 to i64
  %35 = zext i64 %29 to i128
  %36 = mul nuw nsw i128 %35, 10
  %37 = trunc i128 %36 to i64
  %38 = lshr i128 %36, 64
  %39 = trunc i128 %38 to i8
  %40 = add i64 %34, %37
  %41 = icmp ult i64 %40, %37
  %42 = zext i1 %41 to i8
  %43 = or i8 %39, 48
  %44 = add nuw nsw i8 %43, %42
  %45 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 %44, i8* %27, align 1
  %46 = add nsw i32 %26, -1
  %47 = icmp sgt i32 %46, 0
  %48 = icmp ne i64 %32, 0
  %49 = and i1 %48, %47
  br i1 %49, label %25, label %19

50:                                               ; preds = %19, %55
  %51 = phi i32 [ %63, %55 ], [ %22, %19 ]
  %52 = phi i8* [ %62, %55 ], [ %21, %19 ]
  %53 = phi i64 [ %58, %55 ], [ %20, %19 ]
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %101, label %55

55:                                               ; preds = %50
  %56 = zext i64 %53 to i128
  %57 = mul nuw nsw i128 %56, 10
  %58 = trunc i128 %57 to i64
  %59 = lshr i128 %57, 64
  %60 = trunc i128 %59 to i8
  %61 = or i8 %60, 48
  %62 = getelementptr inbounds i8, i8* %52, i64 1
  store i8 %61, i8* %52, align 1
  %63 = add nsw i32 %51, -1
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %50, label %65

65:                                               ; preds = %55
  %66 = trunc i128 %57 to i64
  br label %67

67:                                               ; preds = %65, %19
  %68 = phi i64 [ %20, %19 ], [ %66, %65 ]
  %69 = phi i8* [ %21, %19 ], [ %62, %65 ]
  %70 = icmp sgt i64 %68, -1
  br i1 %70, label %101, label %71

71:                                               ; preds = %67
  %72 = icmp ne i64 %68, -9223372036854775808
  %73 = or i1 %23, %72
  %74 = getelementptr inbounds i8, i8* %69, i64 -1
  br i1 %73, label %75, label %83

75:                                               ; preds = %71, %79
  %76 = phi i8* [ %80, %79 ], [ %74, %71 ]
  %77 = load i8, i8* %76, align 1
  switch i8 %77, label %81 [
    i8 57, label %78
    i8 46, label %79
  ]

78:                                               ; preds = %75
  store i8 48, i8* %76, align 1
  br label %79

79:                                               ; preds = %78, %75
  %80 = getelementptr inbounds i8, i8* %76, i64 -1
  br label %75

81:                                               ; preds = %75
  %82 = add i8 %77, 1
  store i8 %82, i8* %76, align 1
  br label %101

83:                                               ; preds = %71
  %84 = load i8, i8* %74, align 1
  %85 = icmp eq i8 %84, 46
  %86 = getelementptr inbounds i8, i8* %69, i64 -2
  %87 = select i1 %85, i8* %86, i8* %74
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = srem i32 %89, 2
  %91 = icmp eq i32 %90, 1
  br i1 %91, label %92, label %101

92:                                               ; preds = %83, %96
  %93 = phi i8 [ %98, %96 ], [ %88, %83 ]
  %94 = phi i8* [ %97, %96 ], [ %87, %83 ]
  switch i8 %93, label %99 [
    i8 57, label %95
    i8 46, label %96
  ]

95:                                               ; preds = %92
  store i8 48, i8* %94, align 1
  br label %96

96:                                               ; preds = %95, %92
  %97 = getelementptr inbounds i8, i8* %94, i64 -1
  %98 = load i8, i8* %97, align 1
  br label %92

99:                                               ; preds = %92
  %100 = add i8 %93, 1
  store i8 %100, i8* %94, align 1
  br label %101

101:                                              ; preds = %50, %99, %83, %67, %81
  %102 = phi i8* [ %69, %99 ], [ %69, %83 ], [ %69, %67 ], [ %69, %81 ], [ %52, %50 ]
  ret i8* %102
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_110FinalPrintERKNS1_11FormatStateENS_11string_viewEiiS5_(%"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* nocapture readonly dereferenceable(24), i8*, i64, i32, i32, %"class.absl::string_view"* nocapture readonly byval(%"class.absl::string_view") align 8) unnamed_addr #0 {
  %7 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %0, i64 0, i32 2
  %8 = load %"class.absl::str_format_internal::FormatConversionSpecImpl"*, %"class.absl::str_format_internal::FormatConversionSpecImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  %12 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %0, i64 0, i32 0
  %13 = load i8, i8* %12, align 8
  br i1 %11, label %14, label %158

14:                                               ; preds = %6
  %15 = icmp eq i8 %13, 0
  br i1 %15, label %44, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %0, i64 0, i32 3
  %18 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %19, align 8
  %22 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 3, i64 1024
  %23 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 2
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i8* %22 to i64
  %27 = icmp eq i64 %25, %26
  %28 = inttoptr i64 %25 to i8*
  br i1 %27, label %29, label %40

29:                                               ; preds = %16
  %30 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 3, i64 0
  %31 = ptrtoint i8* %30 to i64
  %32 = sub i64 %25, %31
  %33 = icmp sgt i64 %32, -1
  br i1 %33, label %35, label %34, !prof !2

34:                                               ; preds = %29
  tail call void @llvm.trap() #13
  unreachable

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %18, i64 0, i32 0, i32 1
  %38 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %37, align 8
  %39 = load i8*, i8** %36, align 8
  tail call void %38(i8* %39, i8* %30, i64 %32) #13
  store i8* %30, i8** %23, align 8
  br label %40

40:                                               ; preds = %35, %16
  %41 = phi i8* [ %28, %16 ], [ %30, %35 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %13, i64 1, i1 false) #13
  %42 = load i8*, i8** %23, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8* %43, i8** %23, align 8
  br label %44

44:                                               ; preds = %14, %40
  %45 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %0, i64 0, i32 3
  %46 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %45, align 8
  %47 = icmp eq i64 %2, 0
  br i1 %47, label %76, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, %2
  store i64 %51, i64* %49, align 8
  %52 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 3, i64 1024
  %53 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 2
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = ptrtoint i8* %52 to i64
  %57 = sub i64 %56, %55
  %58 = icmp ugt i64 %57, %2
  br i1 %58, label %72, label %59

59:                                               ; preds = %48
  %60 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 3, i64 0
  %61 = ptrtoint i8* %60 to i64
  %62 = sub i64 %55, %61
  %63 = icmp sgt i64 %62, -1
  br i1 %63, label %65, label %64, !prof !2

64:                                               ; preds = %59
  tail call void @llvm.trap() #13
  unreachable

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 0, i32 1
  %67 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %66, align 8
  %68 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %46, i64 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  tail call void %67(i8* %69, i8* %60, i64 %62) #13
  store i8* %60, i8** %53, align 8
  %70 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %66, align 8
  %71 = load i8*, i8** %68, align 8
  tail call void %70(i8* %71, i8* %1, i64 %2) #13
  br label %76

72:                                               ; preds = %48
  %73 = inttoptr i64 %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %1, i64 %2, i1 false) #13
  %74 = load i8*, i8** %53, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 %2
  store i8* %75, i8** %53, align 8
  br label %76

76:                                               ; preds = %44, %65, %72
  %77 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %45, align 8
  %78 = sext i32 %4 to i64
  %79 = icmp eq i32 %4, 0
  br i1 %79, label %123, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, %78
  store i64 %83, i64* %81, align 8
  %84 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 3, i64 1024
  %85 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 2
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = ptrtoint i8* %84 to i64
  %89 = sub i64 %88, %87
  %90 = icmp ult i64 %89, %78
  %91 = inttoptr i64 %87 to i8*
  br i1 %90, label %92, label %117

92:                                               ; preds = %80
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 3, i64 0
  %94 = ptrtoint i8* %93 to i64
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 0, i32 1
  %96 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %77, i64 0, i32 0, i32 0
  br label %97

97:                                               ; preds = %113, %92
  %98 = phi i64 [ %87, %92 ], [ %94, %113 ]
  %99 = phi i8* [ %91, %92 ], [ %93, %113 ]
  %100 = phi i64 [ %89, %92 ], [ 1024, %113 ]
  %101 = phi i64 [ %78, %92 ], [ %102, %113 ]
  %102 = sub i64 %101, %100
  %103 = icmp eq i64 %100, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %97
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 48, i64 %100, i1 false) #13
  %105 = load i8*, i8** %85, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 %100
  store i8* %106, i8** %85, align 8
  %107 = ptrtoint i8* %106 to i64
  br label %108

108:                                              ; preds = %104, %97
  %109 = phi i64 [ %98, %97 ], [ %107, %104 ]
  %110 = sub i64 %109, %94
  %111 = icmp sgt i64 %110, -1
  br i1 %111, label %113, label %112, !prof !2

112:                                              ; preds = %108
  tail call void @llvm.trap() #13
  unreachable

113:                                              ; preds = %108
  %114 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %95, align 8
  %115 = load i8*, i8** %96, align 8
  tail call void %114(i8* %115, i8* %93, i64 %110) #13
  store i8* %93, i8** %85, align 8
  %116 = icmp ugt i64 %102, 1024
  br i1 %116, label %97, label %117

117:                                              ; preds = %113, %80
  %118 = phi i8* [ %91, %80 ], [ %93, %113 ]
  %119 = phi i64 [ %78, %80 ], [ %102, %113 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 48, i64 %119, i1 false) #13
  %120 = load i8*, i8** %85, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 %119
  store i8* %121, i8** %85, align 8
  %122 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %45, align 8
  br label %123

123:                                              ; preds = %76, %117
  %124 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %77, %76 ], [ %122, %117 ]
  %125 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %515, label %130

130:                                              ; preds = %123
  %131 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 1
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, %128
  store i64 %133, i64* %131, align 8
  %134 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 3, i64 1024
  %135 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 2
  %136 = bitcast i8** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = ptrtoint i8* %134 to i64
  %139 = sub i64 %138, %137
  %140 = icmp ugt i64 %139, %128
  br i1 %140, label %154, label %141

141:                                              ; preds = %130
  %142 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 3, i64 0
  %143 = ptrtoint i8* %142 to i64
  %144 = sub i64 %137, %143
  %145 = icmp sgt i64 %144, -1
  br i1 %145, label %147, label %146, !prof !2

146:                                              ; preds = %141
  tail call void @llvm.trap() #13
  unreachable

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 0, i32 1
  %149 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %148, align 8
  %150 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %124, i64 0, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  tail call void %149(i8* %151, i8* %142, i64 %144) #13
  store i8* %142, i8** %135, align 8
  %152 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %148, align 8
  %153 = load i8*, i8** %150, align 8
  tail call void %152(i8* %153, i8* %126, i64 %128) #13
  br label %515

154:                                              ; preds = %130
  %155 = inttoptr i64 %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %155, i8* align 1 %126, i64 %128, i1 false) #13
  %156 = load i8*, i8** %135, align 8
  %157 = getelementptr inbounds i8, i8* %156, i64 %128
  store i8* %157, i8** %135, align 8
  br label %515

158:                                              ; preds = %6
  %159 = icmp ne i8 %13, 0
  %160 = zext i1 %159 to i64
  %161 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %162 = load i64, i64* %161, align 8
  %163 = sext i32 %4 to i64
  %164 = add i64 %163, %2
  %165 = add i64 %164, %160
  %166 = add i64 %165, %162
  %167 = sext i32 %10 to i64
  %168 = icmp ult i64 %166, %167
  br i1 %168, label %169, label %183

169:                                              ; preds = %158
  %170 = trunc i64 %166 to i32
  %171 = sub i32 %10, %170
  %172 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %8, i64 0, i32 1
  %173 = load i8, i8* %172, align 1
  %174 = and i8 %173, 1
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %176, label %183

176:                                              ; preds = %169
  %177 = and i8 %173, 16
  %178 = icmp ne i8 %177, 0
  %179 = zext i32 %171 to i64
  %180 = shl nuw i64 %179, 32
  %181 = select i1 %178, i64 %180, i64 0
  %182 = select i1 %178, i64 0, i64 %179
  br label %183

183:                                              ; preds = %158, %169, %176
  %184 = phi i64 [ 0, %158 ], [ 0, %169 ], [ %182, %176 ]
  %185 = phi i64 [ 0, %158 ], [ 0, %169 ], [ %181, %176 ]
  %186 = phi i32 [ 0, %158 ], [ %171, %169 ], [ 0, %176 ]
  %187 = or i64 %185, %184
  %188 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::FormatState", %"struct.absl::str_format_internal::(anonymous namespace)::FormatState"* %0, i64 0, i32 3
  %189 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %190 = shl i64 %187, 32
  %191 = ashr exact i64 %190, 32
  %192 = icmp eq i64 %190, 0
  br i1 %192, label %236, label %193

193:                                              ; preds = %183
  %194 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = add i64 %195, %191
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 3, i64 1024
  %198 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 2
  %199 = bitcast i8** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = ptrtoint i8* %197 to i64
  %202 = sub i64 %201, %200
  %203 = icmp ult i64 %202, %191
  %204 = inttoptr i64 %200 to i8*
  br i1 %203, label %205, label %230

205:                                              ; preds = %193
  %206 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 3, i64 0
  %207 = ptrtoint i8* %206 to i64
  %208 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 0, i32 1
  %209 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %189, i64 0, i32 0, i32 0
  br label %210

210:                                              ; preds = %226, %205
  %211 = phi i64 [ %200, %205 ], [ %207, %226 ]
  %212 = phi i8* [ %204, %205 ], [ %206, %226 ]
  %213 = phi i64 [ %202, %205 ], [ 1024, %226 ]
  %214 = phi i64 [ %191, %205 ], [ %215, %226 ]
  %215 = sub i64 %214, %213
  %216 = icmp eq i64 %213, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %210
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 32, i64 %213, i1 false) #13
  %218 = load i8*, i8** %198, align 8
  %219 = getelementptr inbounds i8, i8* %218, i64 %213
  store i8* %219, i8** %198, align 8
  %220 = ptrtoint i8* %219 to i64
  br label %221

221:                                              ; preds = %217, %210
  %222 = phi i64 [ %211, %210 ], [ %220, %217 ]
  %223 = sub i64 %222, %207
  %224 = icmp sgt i64 %223, -1
  br i1 %224, label %226, label %225, !prof !2

225:                                              ; preds = %221
  tail call void @llvm.trap() #13
  unreachable

226:                                              ; preds = %221
  %227 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %208, align 8
  %228 = load i8*, i8** %209, align 8
  tail call void %227(i8* %228, i8* %206, i64 %223) #13
  store i8* %206, i8** %198, align 8
  %229 = icmp ugt i64 %215, 1024
  br i1 %229, label %210, label %230

230:                                              ; preds = %226, %193
  %231 = phi i8* [ %204, %193 ], [ %206, %226 ]
  %232 = phi i64 [ %191, %193 ], [ %215, %226 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %231, i8 32, i64 %232, i1 false) #13
  %233 = load i8*, i8** %198, align 8
  %234 = getelementptr inbounds i8, i8* %233, i64 %232
  store i8* %234, i8** %198, align 8
  %235 = load i8, i8* %12, align 8
  br label %236

236:                                              ; preds = %183, %230
  %237 = phi i8 [ %13, %183 ], [ %235, %230 ]
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %266, label %239

239:                                              ; preds = %236
  %240 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %241 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 1
  %242 = load i64, i64* %241, align 8
  %243 = add i64 %242, 1
  store i64 %243, i64* %241, align 8
  %244 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 3, i64 1024
  %245 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 2
  %246 = bitcast i8** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = ptrtoint i8* %244 to i64
  %249 = icmp eq i64 %247, %248
  %250 = inttoptr i64 %247 to i8*
  br i1 %249, label %251, label %262

251:                                              ; preds = %239
  %252 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 3, i64 0
  %253 = ptrtoint i8* %252 to i64
  %254 = sub i64 %247, %253
  %255 = icmp sgt i64 %254, -1
  br i1 %255, label %257, label %256, !prof !2

256:                                              ; preds = %251
  tail call void @llvm.trap() #13
  unreachable

257:                                              ; preds = %251
  %258 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 0, i32 0
  %259 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %240, i64 0, i32 0, i32 1
  %260 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %259, align 8
  %261 = load i8*, i8** %258, align 8
  tail call void %260(i8* %261, i8* %252, i64 %254) #13
  store i8* %252, i8** %245, align 8
  br label %262

262:                                              ; preds = %257, %239
  %263 = phi i8* [ %250, %239 ], [ %252, %257 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %263, i8 %237, i64 1, i1 false) #13
  %264 = load i8*, i8** %245, align 8
  %265 = getelementptr inbounds i8, i8* %264, i64 1
  store i8* %265, i8** %245, align 8
  br label %266

266:                                              ; preds = %236, %262
  %267 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %268 = sext i32 %3 to i64
  %269 = icmp ult i64 %268, %2
  %270 = select i1 %269, i64 %268, i64 %2
  %271 = icmp sgt i64 %270, -1
  br i1 %271, label %273, label %272, !prof !2

272:                                              ; preds = %266
  tail call void @llvm.trap() #13
  unreachable

273:                                              ; preds = %266
  %274 = icmp eq i64 %270, 0
  br i1 %274, label %303, label %275

275:                                              ; preds = %273
  %276 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 1
  %277 = load i64, i64* %276, align 8
  %278 = add i64 %277, %270
  store i64 %278, i64* %276, align 8
  %279 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 3, i64 1024
  %280 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 2
  %281 = bitcast i8** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = ptrtoint i8* %279 to i64
  %284 = sub i64 %283, %282
  %285 = icmp ugt i64 %284, %270
  br i1 %285, label %299, label %286

286:                                              ; preds = %275
  %287 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 3, i64 0
  %288 = ptrtoint i8* %287 to i64
  %289 = sub i64 %282, %288
  %290 = icmp sgt i64 %289, -1
  br i1 %290, label %292, label %291, !prof !2

291:                                              ; preds = %286
  tail call void @llvm.trap() #13
  unreachable

292:                                              ; preds = %286
  %293 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 0, i32 1
  %294 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %293, align 8
  %295 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %267, i64 0, i32 0, i32 0
  %296 = load i8*, i8** %295, align 8
  tail call void %294(i8* %296, i8* %287, i64 %289) #13
  store i8* %287, i8** %280, align 8
  %297 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %293, align 8
  %298 = load i8*, i8** %295, align 8
  tail call void %297(i8* %298, i8* %1, i64 %270) #13
  br label %303

299:                                              ; preds = %275
  %300 = inttoptr i64 %282 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %1, i64 %270, i1 false) #13
  %301 = load i8*, i8** %280, align 8
  %302 = getelementptr inbounds i8, i8* %301, i64 %270
  store i8* %302, i8** %280, align 8
  br label %303

303:                                              ; preds = %273, %292, %299
  %304 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %305 = ashr i64 %187, 32
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %350, label %307

307:                                              ; preds = %303
  %308 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 1
  %309 = load i64, i64* %308, align 8
  %310 = add i64 %309, %305
  store i64 %310, i64* %308, align 8
  %311 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 3, i64 1024
  %312 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 2
  %313 = bitcast i8** %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = ptrtoint i8* %311 to i64
  %316 = sub i64 %315, %314
  %317 = icmp ult i64 %316, %305
  %318 = inttoptr i64 %314 to i8*
  br i1 %317, label %319, label %344

319:                                              ; preds = %307
  %320 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 3, i64 0
  %321 = ptrtoint i8* %320 to i64
  %322 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 0, i32 1
  %323 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %304, i64 0, i32 0, i32 0
  br label %324

324:                                              ; preds = %340, %319
  %325 = phi i64 [ %314, %319 ], [ %321, %340 ]
  %326 = phi i8* [ %318, %319 ], [ %320, %340 ]
  %327 = phi i64 [ %316, %319 ], [ 1024, %340 ]
  %328 = phi i64 [ %305, %319 ], [ %329, %340 ]
  %329 = sub i64 %328, %327
  %330 = icmp eq i64 %327, 0
  br i1 %330, label %335, label %331

331:                                              ; preds = %324
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %326, i8 48, i64 %327, i1 false) #13
  %332 = load i8*, i8** %312, align 8
  %333 = getelementptr inbounds i8, i8* %332, i64 %327
  store i8* %333, i8** %312, align 8
  %334 = ptrtoint i8* %333 to i64
  br label %335

335:                                              ; preds = %331, %324
  %336 = phi i64 [ %325, %324 ], [ %334, %331 ]
  %337 = sub i64 %336, %321
  %338 = icmp sgt i64 %337, -1
  br i1 %338, label %340, label %339, !prof !2

339:                                              ; preds = %335
  tail call void @llvm.trap() #13
  unreachable

340:                                              ; preds = %335
  %341 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %322, align 8
  %342 = load i8*, i8** %323, align 8
  tail call void %341(i8* %342, i8* %320, i64 %337) #13
  store i8* %320, i8** %312, align 8
  %343 = icmp ugt i64 %329, 1024
  br i1 %343, label %324, label %344

344:                                              ; preds = %340, %307
  %345 = phi i8* [ %318, %307 ], [ %320, %340 ]
  %346 = phi i64 [ %305, %307 ], [ %329, %340 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %345, i8 48, i64 %346, i1 false) #13
  %347 = load i8*, i8** %312, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 %346
  store i8* %348, i8** %312, align 8
  %349 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  br label %350

350:                                              ; preds = %303, %344
  %351 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %304, %303 ], [ %349, %344 ]
  %352 = icmp ugt i64 %268, %2
  br i1 %352, label %353, label %354, !prof !7

353:                                              ; preds = %350
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #16
  unreachable

354:                                              ; preds = %350
  %355 = sub i64 %2, %268
  %356 = icmp sgt i64 %355, -1
  br i1 %356, label %358, label %357, !prof !2

357:                                              ; preds = %354
  tail call void @llvm.trap() #13
  unreachable

358:                                              ; preds = %354
  %359 = getelementptr inbounds i8, i8* %1, i64 %268
  %360 = icmp eq i64 %355, 0
  br i1 %360, label %389, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 1
  %363 = load i64, i64* %362, align 8
  %364 = add i64 %363, %355
  store i64 %364, i64* %362, align 8
  %365 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 3, i64 1024
  %366 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 2
  %367 = bitcast i8** %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = ptrtoint i8* %365 to i64
  %370 = sub i64 %369, %368
  %371 = icmp ugt i64 %370, %355
  br i1 %371, label %385, label %372

372:                                              ; preds = %361
  %373 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 3, i64 0
  %374 = ptrtoint i8* %373 to i64
  %375 = sub i64 %368, %374
  %376 = icmp sgt i64 %375, -1
  br i1 %376, label %378, label %377, !prof !2

377:                                              ; preds = %372
  tail call void @llvm.trap() #13
  unreachable

378:                                              ; preds = %372
  %379 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 0, i32 1
  %380 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %379, align 8
  %381 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %351, i64 0, i32 0, i32 0
  %382 = load i8*, i8** %381, align 8
  tail call void %380(i8* %382, i8* %373, i64 %375) #13
  store i8* %373, i8** %366, align 8
  %383 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %379, align 8
  %384 = load i8*, i8** %381, align 8
  tail call void %383(i8* %384, i8* %359, i64 %355) #13
  br label %389

385:                                              ; preds = %361
  %386 = inttoptr i64 %368 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %386, i8* align 1 %359, i64 %355, i1 false) #13
  %387 = load i8*, i8** %366, align 8
  %388 = getelementptr inbounds i8, i8* %387, i64 %355
  store i8* %388, i8** %366, align 8
  br label %389

389:                                              ; preds = %358, %378, %385
  %390 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %391 = icmp eq i32 %4, 0
  br i1 %391, label %435, label %392

392:                                              ; preds = %389
  %393 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 1
  %394 = load i64, i64* %393, align 8
  %395 = add i64 %394, %163
  store i64 %395, i64* %393, align 8
  %396 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 3, i64 1024
  %397 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 2
  %398 = bitcast i8** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = ptrtoint i8* %396 to i64
  %401 = sub i64 %400, %399
  %402 = icmp ult i64 %401, %163
  %403 = inttoptr i64 %399 to i8*
  br i1 %402, label %404, label %429

404:                                              ; preds = %392
  %405 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 3, i64 0
  %406 = ptrtoint i8* %405 to i64
  %407 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 0, i32 1
  %408 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %390, i64 0, i32 0, i32 0
  br label %409

409:                                              ; preds = %425, %404
  %410 = phi i64 [ %399, %404 ], [ %406, %425 ]
  %411 = phi i8* [ %403, %404 ], [ %405, %425 ]
  %412 = phi i64 [ %401, %404 ], [ 1024, %425 ]
  %413 = phi i64 [ %163, %404 ], [ %414, %425 ]
  %414 = sub i64 %413, %412
  %415 = icmp eq i64 %412, 0
  br i1 %415, label %420, label %416

416:                                              ; preds = %409
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %411, i8 48, i64 %412, i1 false) #13
  %417 = load i8*, i8** %397, align 8
  %418 = getelementptr inbounds i8, i8* %417, i64 %412
  store i8* %418, i8** %397, align 8
  %419 = ptrtoint i8* %418 to i64
  br label %420

420:                                              ; preds = %416, %409
  %421 = phi i64 [ %410, %409 ], [ %419, %416 ]
  %422 = sub i64 %421, %406
  %423 = icmp sgt i64 %422, -1
  br i1 %423, label %425, label %424, !prof !2

424:                                              ; preds = %420
  tail call void @llvm.trap() #13
  unreachable

425:                                              ; preds = %420
  %426 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %407, align 8
  %427 = load i8*, i8** %408, align 8
  tail call void %426(i8* %427, i8* %405, i64 %422) #13
  store i8* %405, i8** %397, align 8
  %428 = icmp ugt i64 %414, 1024
  br i1 %428, label %409, label %429

429:                                              ; preds = %425, %392
  %430 = phi i8* [ %403, %392 ], [ %405, %425 ]
  %431 = phi i64 [ %163, %392 ], [ %414, %425 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %430, i8 48, i64 %431, i1 false) #13
  %432 = load i8*, i8** %397, align 8
  %433 = getelementptr inbounds i8, i8* %432, i64 %431
  store i8* %433, i8** %397, align 8
  %434 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  br label %435

435:                                              ; preds = %389, %429
  %436 = phi %"class.absl::str_format_internal::FormatSinkImpl"* [ %390, %389 ], [ %434, %429 ]
  %437 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  %438 = load i8*, i8** %437, align 8
  %439 = load i64, i64* %161, align 8
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %469, label %441

441:                                              ; preds = %435
  %442 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 1
  %443 = load i64, i64* %442, align 8
  %444 = add i64 %443, %439
  store i64 %444, i64* %442, align 8
  %445 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 3, i64 1024
  %446 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 2
  %447 = bitcast i8** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = ptrtoint i8* %445 to i64
  %450 = sub i64 %449, %448
  %451 = icmp ugt i64 %450, %439
  br i1 %451, label %465, label %452

452:                                              ; preds = %441
  %453 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 3, i64 0
  %454 = ptrtoint i8* %453 to i64
  %455 = sub i64 %448, %454
  %456 = icmp sgt i64 %455, -1
  br i1 %456, label %458, label %457, !prof !2

457:                                              ; preds = %452
  tail call void @llvm.trap() #13
  unreachable

458:                                              ; preds = %452
  %459 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 0, i32 1
  %460 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %459, align 8
  %461 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %436, i64 0, i32 0, i32 0
  %462 = load i8*, i8** %461, align 8
  tail call void %460(i8* %462, i8* %453, i64 %455) #13
  store i8* %453, i8** %446, align 8
  %463 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %459, align 8
  %464 = load i8*, i8** %461, align 8
  tail call void %463(i8* %464, i8* %438, i64 %439) #13
  br label %469

465:                                              ; preds = %441
  %466 = inttoptr i64 %448 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %466, i8* align 1 %438, i64 %439, i1 false) #13
  %467 = load i8*, i8** %446, align 8
  %468 = getelementptr inbounds i8, i8* %467, i64 %439
  store i8* %468, i8** %446, align 8
  br label %469

469:                                              ; preds = %435, %458, %465
  %470 = load %"class.absl::str_format_internal::FormatSinkImpl"*, %"class.absl::str_format_internal::FormatSinkImpl"** %188, align 8
  %471 = sext i32 %186 to i64
  %472 = icmp eq i32 %186, 0
  br i1 %472, label %515, label %473

473:                                              ; preds = %469
  %474 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 1
  %475 = load i64, i64* %474, align 8
  %476 = add i64 %475, %471
  store i64 %476, i64* %474, align 8
  %477 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 3, i64 1024
  %478 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 2
  %479 = bitcast i8** %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = ptrtoint i8* %477 to i64
  %482 = sub i64 %481, %480
  %483 = icmp ult i64 %482, %471
  %484 = inttoptr i64 %480 to i8*
  br i1 %483, label %485, label %510

485:                                              ; preds = %473
  %486 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 3, i64 0
  %487 = ptrtoint i8* %486 to i64
  %488 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 0, i32 1
  %489 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %470, i64 0, i32 0, i32 0
  br label %490

490:                                              ; preds = %506, %485
  %491 = phi i64 [ %480, %485 ], [ %487, %506 ]
  %492 = phi i8* [ %484, %485 ], [ %486, %506 ]
  %493 = phi i64 [ %482, %485 ], [ 1024, %506 ]
  %494 = phi i64 [ %471, %485 ], [ %495, %506 ]
  %495 = sub i64 %494, %493
  %496 = icmp eq i64 %493, 0
  br i1 %496, label %501, label %497

497:                                              ; preds = %490
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %492, i8 32, i64 %493, i1 false) #13
  %498 = load i8*, i8** %478, align 8
  %499 = getelementptr inbounds i8, i8* %498, i64 %493
  store i8* %499, i8** %478, align 8
  %500 = ptrtoint i8* %499 to i64
  br label %501

501:                                              ; preds = %497, %490
  %502 = phi i64 [ %491, %490 ], [ %500, %497 ]
  %503 = sub i64 %502, %487
  %504 = icmp sgt i64 %503, -1
  br i1 %504, label %506, label %505, !prof !2

505:                                              ; preds = %501
  tail call void @llvm.trap() #13
  unreachable

506:                                              ; preds = %501
  %507 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %488, align 8
  %508 = load i8*, i8** %489, align 8
  tail call void %507(i8* %508, i8* %486, i64 %503) #13
  store i8* %486, i8** %478, align 8
  %509 = icmp ugt i64 %495, 1024
  br i1 %509, label %490, label %510

510:                                              ; preds = %506, %473
  %511 = phi i8* [ %484, %473 ], [ %486, %506 ]
  %512 = phi i64 [ %471, %473 ], [ %495, %506 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %511, i8 32, i64 %512, i1 false) #13
  %513 = load i8*, i8** %478, align 8
  %514 = getelementptr inbounds i8, i8* %513, i64 %512
  store i8* %514, i8** %478, align 8
  br label %515

515:                                              ; preds = %510, %469, %154, %147, %123
  ret void
}

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #5

declare void @_ZN4absl19str_format_internal13FlagsToStringENS0_5FlagsE(%"class.std::__1::basic_string"* sret, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #12

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #12

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_113FloatToBufferILNS1_11FormatStyleE1EdEEbNS1_10DecomposedIT0_EEiPNS1_6BufferEPi(i64, i32, i32, %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"*, i32* nocapture) unnamed_addr #2 {
  %6 = icmp sgt i32 %2, 39
  br i1 %6, label %725, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 41
  %9 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 2
  store i8* %8, i8** %9, align 8
  %10 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 1
  store i8* %8, i8** %10, align 8
  %11 = icmp sgt i32 %1, -1
  %12 = ptrtoint i8* %8 to i64
  br i1 %11, label %13, label %153

13:                                               ; preds = %7
  %14 = icmp sgt i32 %1, 11
  br i1 %14, label %385, label %15

15:                                               ; preds = %13
  %16 = zext i32 %1 to i64
  %17 = shl i64 %0, %16
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %59, label %19

19:                                               ; preds = %15
  %20 = urem i64 %17, 10
  %21 = udiv i64 %17, 10
  %22 = trunc i64 %20 to i8
  %23 = or i8 %22, 48
  %24 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 40
  store i8* %24, i8** %10, align 8
  store i8 %23, i8* %24, align 1
  %25 = icmp ult i64 %17, 10
  br i1 %25, label %32, label %26

26:                                               ; preds = %19
  %27 = urem i64 %21, 10
  %28 = trunc i64 %27 to i8
  %29 = or i8 %28, 48
  %30 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 39
  store i8* %30, i8** %10, align 8
  store i8 %29, i8* %30, align 1
  %31 = icmp ult i64 %17, 100
  br i1 %31, label %43, label %34

32:                                               ; preds = %19
  %33 = ptrtoint i8* %24 to i64
  br label %48

34:                                               ; preds = %26, %34
  %35 = phi i64 [ %37, %34 ], [ %21, %26 ]
  %36 = load i8*, i8** %10, align 8
  %37 = udiv i64 %35, 10
  %38 = urem i64 %37, 10
  %39 = trunc i64 %38 to i8
  %40 = or i8 %39, 48
  %41 = getelementptr inbounds i8, i8* %36, i64 -1
  store i8* %41, i8** %10, align 8
  store i8 %40, i8* %41, align 1
  %42 = icmp ult i64 %35, 100
  br i1 %42, label %43, label %34

43:                                               ; preds = %34, %26
  %44 = bitcast i8** %9 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast i8** %10 to i64*
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %32, %43
  %49 = phi i64 [ %47, %43 ], [ %33, %32 ]
  %50 = phi i64 [ %45, %43 ], [ %12, %32 ]
  %51 = sub i64 %50, %49
  %52 = trunc i64 %51 to i32
  %53 = inttoptr i64 %49 to i8*
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 -1
  store i8* %55, i8** %10, align 8
  store i8 %54, i8* %55, align 1
  %56 = load i8*, i8** %10, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 46, i8* %57, align 1
  %58 = add i32 %52, -1
  br label %59

59:                                               ; preds = %48, %15
  %60 = phi i32 [ %58, %48 ], [ -1, %15 ]
  store i32 %60, i32* %4, align 4
  %61 = sub nsw i32 %2, %60
  %62 = sub nsw i32 0, %61
  %63 = icmp sgt i32 %61, -1
  br i1 %63, label %64, label %83

64:                                               ; preds = %59
  %65 = icmp eq i32 %61, 0
  br i1 %65, label %725, label %66

66:                                               ; preds = %64
  %67 = sub i32 %2, %60
  %68 = xor i32 %60, -1
  %69 = add i32 %68, %2
  %70 = and i32 %67, 3
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %80, label %72

72:                                               ; preds = %66, %72
  %73 = phi i32 [ %75, %72 ], [ %61, %66 ]
  %74 = phi i32 [ %78, %72 ], [ %70, %66 ]
  %75 = add nsw i32 %73, -1
  %76 = load i8*, i8** %9, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 1
  store i8* %77, i8** %9, align 8
  store i8 48, i8* %76, align 1
  %78 = add i32 %74, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %72, !llvm.loop !17

80:                                               ; preds = %72, %66
  %81 = phi i32 [ %61, %66 ], [ %75, %72 ]
  %82 = icmp ult i32 %69, 3
  br i1 %82, label %725, label %141

83:                                               ; preds = %59
  %84 = load i8*, i8** %9, align 8
  %85 = sext i32 %62 to i64
  %86 = sub nsw i64 0, %85
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  store i8* %87, i8** %9, align 8
  %88 = load i8, i8* %87, align 1
  %89 = icmp sgt i8 %88, 53
  br i1 %89, label %115, label %90

90:                                               ; preds = %83
  %91 = icmp eq i8 %88, 53
  br i1 %91, label %92, label %725

92:                                               ; preds = %90
  %93 = icmp eq i32 %62, 1
  br i1 %93, label %103, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds i8, i8* %87, i64 1
  br label %98

96:                                               ; preds = %98
  %97 = icmp eq i8* %102, %84
  br i1 %97, label %103, label %98

98:                                               ; preds = %96, %94
  %99 = phi i8* [ %102, %96 ], [ %95, %94 ]
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 48
  %102 = getelementptr inbounds i8, i8* %99, i64 1
  br i1 %101, label %96, label %115

103:                                              ; preds = %96, %92
  %104 = getelementptr inbounds i8, i8* %87, i64 -1
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 46
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = getelementptr inbounds i8, i8* %87, i64 -2
  %109 = load i8, i8* %108, align 1
  br label %110

110:                                              ; preds = %107, %103
  %111 = phi i8 [ %109, %107 ], [ %105, %103 ]
  %112 = sext i8 %111 to i32
  %113 = srem i32 %112, 2
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %725

115:                                              ; preds = %98, %110, %83
  %116 = getelementptr inbounds i8, i8* %87, i64 -1
  %117 = load i8*, i8** %10, align 8
  %118 = icmp ult i8* %116, %117
  br i1 %118, label %129, label %119

119:                                              ; preds = %115, %125
  %120 = phi i8* [ %126, %125 ], [ %117, %115 ]
  %121 = phi i8* [ %127, %125 ], [ %116, %115 ]
  %122 = load i8, i8* %121, align 1
  switch i8 %122, label %139 [
    i8 57, label %123
    i8 46, label %125
  ]

123:                                              ; preds = %119
  store i8 48, i8* %121, align 1
  %124 = load i8*, i8** %10, align 8
  br label %125

125:                                              ; preds = %123, %119
  %126 = phi i8* [ %120, %119 ], [ %124, %123 ]
  %127 = getelementptr inbounds i8, i8* %121, i64 -1
  %128 = icmp ult i8* %127, %126
  br i1 %128, label %129, label %119

129:                                              ; preds = %125, %115
  %130 = phi i8* [ %87, %115 ], [ %121, %125 ]
  %131 = phi i8* [ %116, %115 ], [ %127, %125 ]
  store i8 49, i8* %131, align 1
  store i8* %131, i8** %10, align 8
  %132 = getelementptr inbounds i8, i8* %130, i64 1
  %133 = load i8, i8* %130, align 1
  %134 = load i8, i8* %132, align 1
  store i8 %134, i8* %130, align 1
  store i8 %133, i8* %132, align 1
  %135 = load i32, i32* %4, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %4, align 4
  %137 = load i8*, i8** %9, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 -1
  store i8* %138, i8** %9, align 8
  br label %725

139:                                              ; preds = %119
  %140 = add i8 %122, 1
  store i8 %140, i8* %121, align 1
  br label %725

141:                                              ; preds = %80, %141
  %142 = phi i32 [ %149, %141 ], [ %81, %80 ]
  %143 = load i8*, i8** %9, align 8
  %144 = getelementptr inbounds i8, i8* %143, i64 1
  store i8* %144, i8** %9, align 8
  store i8 48, i8* %143, align 1
  %145 = load i8*, i8** %9, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 1
  store i8* %146, i8** %9, align 8
  store i8 48, i8* %145, align 1
  %147 = load i8*, i8** %9, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %148, i8** %9, align 8
  store i8 48, i8* %147, align 1
  %149 = add nsw i32 %142, -4
  %150 = load i8*, i8** %9, align 8
  %151 = getelementptr inbounds i8, i8* %150, i64 1
  store i8* %151, i8** %9, align 8
  store i8 48, i8* %150, align 1
  %152 = icmp sgt i32 %149, 0
  br i1 %152, label %141, label %725

153:                                              ; preds = %7
  %154 = icmp slt i32 %1, -60
  br i1 %154, label %527, label %155

155:                                              ; preds = %153
  %156 = sub nsw i32 0, %1
  %157 = zext i32 %156 to i64
  %158 = shl nsw i64 -1, %157
  %159 = xor i64 %158, -1
  %160 = lshr i64 %0, %157
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %177, label %162

162:                                              ; preds = %155
  %163 = urem i64 %160, 10
  %164 = udiv i64 %160, 10
  %165 = trunc i64 %163 to i8
  %166 = or i8 %165, 48
  %167 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 40
  store i8* %167, i8** %10, align 8
  store i8 %166, i8* %167, align 1
  %168 = icmp ult i64 %160, 10
  br i1 %168, label %175, label %169

169:                                              ; preds = %162
  %170 = urem i64 %164, 10
  %171 = trunc i64 %170 to i8
  %172 = or i8 %171, 48
  %173 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 39
  store i8* %173, i8** %10, align 8
  store i8 %172, i8* %173, align 1
  %174 = icmp ult i64 %160, 100
  br i1 %174, label %188, label %179

175:                                              ; preds = %162
  %176 = ptrtoint i8* %167 to i64
  br label %193

177:                                              ; preds = %155
  %178 = and i64 %159, %0
  br label %205

179:                                              ; preds = %169, %179
  %180 = phi i64 [ %182, %179 ], [ %164, %169 ]
  %181 = load i8*, i8** %10, align 8
  %182 = udiv i64 %180, 10
  %183 = urem i64 %182, 10
  %184 = trunc i64 %183 to i8
  %185 = or i8 %184, 48
  %186 = getelementptr inbounds i8, i8* %181, i64 -1
  store i8* %186, i8** %10, align 8
  store i8 %185, i8* %186, align 1
  %187 = icmp ult i64 %180, 100
  br i1 %187, label %188, label %179

188:                                              ; preds = %179, %169
  %189 = bitcast i8** %9 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast i8** %10 to i64*
  %192 = load i64, i64* %191, align 8
  br label %193

193:                                              ; preds = %175, %188
  %194 = phi i64 [ %192, %188 ], [ %176, %175 ]
  %195 = phi i64 [ %190, %188 ], [ %12, %175 ]
  %196 = sub i64 %195, %194
  %197 = trunc i64 %196 to i32
  %198 = inttoptr i64 %194 to i8*
  %199 = load i8, i8* %198, align 1
  %200 = getelementptr inbounds i8, i8* %198, i64 -1
  store i8* %200, i8** %10, align 8
  store i8 %199, i8* %200, align 1
  %201 = load i8*, i8** %10, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 1
  store i8 46, i8* %202, align 1
  %203 = and i64 %159, %0
  %204 = icmp eq i32 %197, 0
  br i1 %204, label %205, label %225

205:                                              ; preds = %193, %177
  %206 = phi i64 [ %178, %177 ], [ %203, %193 ]
  store i32 0, i32* %4, align 4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %215, label %208

208:                                              ; preds = %205, %208
  %209 = phi i32 [ %212, %208 ], [ 0, %205 ]
  %210 = phi i64 [ %211, %208 ], [ %206, %205 ]
  %211 = mul i64 %210, 10
  %212 = add nsw i32 %209, -1
  %213 = icmp ugt i64 %211, %159
  br i1 %213, label %214, label %208

214:                                              ; preds = %208
  store i32 %212, i32* %4, align 4
  br label %215

215:                                              ; preds = %214, %205
  %216 = phi i64 [ 0, %205 ], [ %211, %214 ]
  %217 = lshr i64 %216, %157
  %218 = trunc i64 %217 to i8
  %219 = add i8 %218, 48
  %220 = load i8*, i8** %10, align 8
  %221 = getelementptr inbounds i8, i8* %220, i64 -1
  store i8* %221, i8** %10, align 8
  store i8 %219, i8* %221, align 1
  %222 = load i8*, i8** %9, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 1
  store i8* %223, i8** %9, align 8
  store i8 46, i8* %222, align 1
  %224 = and i64 %216, %159
  br label %290

225:                                              ; preds = %193
  %226 = add nsw i32 %197, -1
  store i32 %226, i32* %4, align 4
  %227 = sub nsw i32 %2, %226
  %228 = sub nsw i32 0, %227
  %229 = icmp eq i64 %203, 0
  %230 = icmp sgt i32 %227, -1
  br i1 %230, label %290, label %231

231:                                              ; preds = %225
  %232 = load i8*, i8** %9, align 8
  %233 = sext i32 %228 to i64
  %234 = sub nsw i64 0, %233
  %235 = getelementptr inbounds i8, i8* %232, i64 %234
  store i8* %235, i8** %9, align 8
  %236 = load i8, i8* %235, align 1
  %237 = icmp sgt i8 %236, 53
  br i1 %237, label %264, label %238

238:                                              ; preds = %231
  %239 = icmp eq i8 %236, 53
  br i1 %239, label %240, label %725

240:                                              ; preds = %238
  br i1 %229, label %241, label %264

241:                                              ; preds = %240
  %242 = icmp eq i32 %228, 1
  br i1 %242, label %252, label %243

243:                                              ; preds = %241
  %244 = getelementptr inbounds i8, i8* %235, i64 1
  br label %247

245:                                              ; preds = %247
  %246 = icmp eq i8* %251, %232
  br i1 %246, label %252, label %247

247:                                              ; preds = %245, %243
  %248 = phi i8* [ %251, %245 ], [ %244, %243 ]
  %249 = load i8, i8* %248, align 1
  %250 = icmp eq i8 %249, 48
  %251 = getelementptr inbounds i8, i8* %248, i64 1
  br i1 %250, label %245, label %264

252:                                              ; preds = %245, %241
  %253 = getelementptr inbounds i8, i8* %235, i64 -1
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, 46
  br i1 %255, label %256, label %259

256:                                              ; preds = %252
  %257 = getelementptr inbounds i8, i8* %235, i64 -2
  %258 = load i8, i8* %257, align 1
  br label %259

259:                                              ; preds = %256, %252
  %260 = phi i8 [ %258, %256 ], [ %254, %252 ]
  %261 = sext i8 %260 to i32
  %262 = srem i32 %261, 2
  %263 = icmp eq i32 %262, 1
  br i1 %263, label %264, label %725

264:                                              ; preds = %247, %259, %240, %231
  %265 = getelementptr inbounds i8, i8* %235, i64 -1
  %266 = load i8*, i8** %10, align 8
  %267 = icmp ult i8* %265, %266
  br i1 %267, label %278, label %268

268:                                              ; preds = %264, %274
  %269 = phi i8* [ %275, %274 ], [ %266, %264 ]
  %270 = phi i8* [ %276, %274 ], [ %265, %264 ]
  %271 = load i8, i8* %270, align 1
  switch i8 %271, label %288 [
    i8 57, label %272
    i8 46, label %274
  ]

272:                                              ; preds = %268
  store i8 48, i8* %270, align 1
  %273 = load i8*, i8** %10, align 8
  br label %274

274:                                              ; preds = %272, %268
  %275 = phi i8* [ %269, %268 ], [ %273, %272 ]
  %276 = getelementptr inbounds i8, i8* %270, i64 -1
  %277 = icmp ult i8* %276, %275
  br i1 %277, label %278, label %268

278:                                              ; preds = %274, %264
  %279 = phi i8* [ %235, %264 ], [ %270, %274 ]
  %280 = phi i8* [ %265, %264 ], [ %276, %274 ]
  store i8 49, i8* %280, align 1
  store i8* %280, i8** %10, align 8
  %281 = getelementptr inbounds i8, i8* %279, i64 1
  %282 = load i8, i8* %279, align 1
  %283 = load i8, i8* %281, align 1
  store i8 %283, i8* %279, align 1
  store i8 %282, i8* %281, align 1
  %284 = load i32, i32* %4, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %4, align 4
  %286 = load i8*, i8** %9, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 -1
  store i8* %287, i8** %9, align 8
  br label %725

288:                                              ; preds = %268
  %289 = add i8 %271, 1
  store i8 %289, i8* %270, align 1
  br label %725

290:                                              ; preds = %225, %215
  %291 = phi i64 [ %224, %215 ], [ %203, %225 ]
  %292 = phi i32 [ %2, %215 ], [ %227, %225 ]
  %293 = icmp sgt i32 %292, 0
  %294 = mul i64 %291, 10
  %295 = lshr i64 %294, %157
  %296 = and i64 %294, %159
  br i1 %293, label %297, label %336

297:                                              ; preds = %290
  %298 = and i32 %292, 1
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %309, label %300

300:                                              ; preds = %297
  %301 = trunc i64 %295 to i8
  %302 = add i8 %301, 48
  %303 = load i8*, i8** %9, align 8
  %304 = getelementptr inbounds i8, i8* %303, i64 1
  store i8* %304, i8** %9, align 8
  store i8 %302, i8* %303, align 1
  %305 = add nsw i32 %292, -1
  %306 = mul i64 %296, 10
  %307 = lshr i64 %306, %157
  %308 = and i64 %306, %159
  br label %309

309:                                              ; preds = %297, %300
  %310 = phi i64 [ %296, %297 ], [ %308, %300 ]
  %311 = phi i64 [ %295, %297 ], [ %307, %300 ]
  %312 = phi i32 [ %292, %297 ], [ %305, %300 ]
  %313 = phi i64 [ undef, %297 ], [ %307, %300 ]
  %314 = phi i64 [ undef, %297 ], [ %308, %300 ]
  %315 = icmp eq i32 %292, 1
  br i1 %315, label %336, label %316

316:                                              ; preds = %309, %316
  %317 = phi i64 [ %335, %316 ], [ %310, %309 ]
  %318 = phi i64 [ %334, %316 ], [ %311, %309 ]
  %319 = phi i32 [ %331, %316 ], [ %312, %309 ]
  %320 = trunc i64 %318 to i8
  %321 = add i8 %320, 48
  %322 = load i8*, i8** %9, align 8
  %323 = getelementptr inbounds i8, i8* %322, i64 1
  store i8* %323, i8** %9, align 8
  store i8 %321, i8* %322, align 1
  %324 = mul i64 %317, 10
  %325 = lshr i64 %324, %157
  %326 = and i64 %324, %159
  %327 = trunc i64 %325 to i8
  %328 = add i8 %327, 48
  %329 = load i8*, i8** %9, align 8
  %330 = getelementptr inbounds i8, i8* %329, i64 1
  store i8* %330, i8** %9, align 8
  store i8 %328, i8* %329, align 1
  %331 = add nsw i32 %319, -2
  %332 = icmp sgt i32 %331, 0
  %333 = mul i64 %326, 10
  %334 = lshr i64 %333, %157
  %335 = and i64 %333, %159
  br i1 %332, label %316, label %336

336:                                              ; preds = %309, %316, %290
  %337 = phi i64 [ %295, %290 ], [ %313, %309 ], [ %334, %316 ]
  %338 = phi i64 [ %296, %290 ], [ %314, %309 ], [ %335, %316 ]
  %339 = trunc i64 %337 to i32
  %340 = icmp sgt i32 %339, 5
  br i1 %340, label %358, label %341

341:                                              ; preds = %336
  %342 = icmp eq i32 %339, 5
  br i1 %342, label %343, label %725

343:                                              ; preds = %341
  %344 = icmp eq i64 %338, 0
  br i1 %344, label %345, label %358

345:                                              ; preds = %343
  %346 = load i8*, i8** %9, align 8
  %347 = getelementptr inbounds i8, i8* %346, i64 -1
  %348 = load i8, i8* %347, align 1
  %349 = icmp eq i8 %348, 46
  br i1 %349, label %350, label %353

350:                                              ; preds = %345
  %351 = getelementptr inbounds i8, i8* %346, i64 -2
  %352 = load i8, i8* %351, align 1
  br label %353

353:                                              ; preds = %350, %345
  %354 = phi i8 [ %352, %350 ], [ %348, %345 ]
  %355 = sext i8 %354 to i32
  %356 = srem i32 %355, 2
  %357 = icmp eq i32 %356, 1
  br i1 %357, label %358, label %725

358:                                              ; preds = %353, %343, %336
  %359 = load i8*, i8** %9, align 8
  %360 = getelementptr inbounds i8, i8* %359, i64 -1
  %361 = load i8*, i8** %10, align 8
  %362 = icmp ult i8* %360, %361
  br i1 %362, label %373, label %363

363:                                              ; preds = %358, %369
  %364 = phi i8* [ %370, %369 ], [ %361, %358 ]
  %365 = phi i8* [ %371, %369 ], [ %360, %358 ]
  %366 = load i8, i8* %365, align 1
  switch i8 %366, label %383 [
    i8 57, label %367
    i8 46, label %369
  ]

367:                                              ; preds = %363
  store i8 48, i8* %365, align 1
  %368 = load i8*, i8** %10, align 8
  br label %369

369:                                              ; preds = %367, %363
  %370 = phi i8* [ %364, %363 ], [ %368, %367 ]
  %371 = getelementptr inbounds i8, i8* %365, i64 -1
  %372 = icmp ult i8* %371, %370
  br i1 %372, label %373, label %363

373:                                              ; preds = %369, %358
  %374 = phi i8* [ %359, %358 ], [ %365, %369 ]
  %375 = phi i8* [ %360, %358 ], [ %371, %369 ]
  store i8 49, i8* %375, align 1
  store i8* %375, i8** %10, align 8
  %376 = getelementptr inbounds i8, i8* %374, i64 1
  %377 = load i8, i8* %374, align 1
  %378 = load i8, i8* %376, align 1
  store i8 %378, i8* %374, align 1
  store i8 %377, i8* %376, align 1
  %379 = load i32, i32* %4, align 4
  %380 = add nsw i32 %379, 1
  store i32 %380, i32* %4, align 4
  %381 = load i8*, i8** %9, align 8
  %382 = getelementptr inbounds i8, i8* %381, i64 -1
  store i8* %382, i8** %9, align 8
  br label %725

383:                                              ; preds = %363
  %384 = add i8 %366, 1
  store i8 %384, i8* %365, align 1
  br label %725

385:                                              ; preds = %13
  store i8* %8, i8** %9, align 8
  store i8* %8, i8** %10, align 8
  %386 = icmp sgt i32 %1, 75
  br i1 %386, label %725, label %387

387:                                              ; preds = %385
  %388 = zext i64 %0 to i128
  %389 = zext i32 %1 to i128
  %390 = shl i128 %388, %389
  %391 = icmp eq i128 %390, 0
  br i1 %391, label %433, label %392

392:                                              ; preds = %387
  %393 = udiv i128 %390, 10
  %394 = mul i128 %393, 10
  %395 = sub i128 %390, %394
  %396 = trunc i128 %395 to i8
  %397 = or i8 %396, 48
  %398 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 40
  store i8* %398, i8** %10, align 8
  store i8 %397, i8* %398, align 1
  %399 = icmp ult i128 %390, 10
  br i1 %399, label %406, label %400

400:                                              ; preds = %392
  %401 = urem i128 %393, 10
  %402 = trunc i128 %401 to i8
  %403 = or i8 %402, 48
  %404 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 39
  store i8* %404, i8** %10, align 8
  store i8 %403, i8* %404, align 1
  %405 = icmp ult i128 %390, 100
  br i1 %405, label %417, label %408

406:                                              ; preds = %392
  %407 = ptrtoint i8* %398 to i64
  br label %422

408:                                              ; preds = %400, %408
  %409 = phi i128 [ %411, %408 ], [ %393, %400 ]
  %410 = load i8*, i8** %10, align 8
  %411 = udiv i128 %409, 10
  %412 = urem i128 %411, 10
  %413 = trunc i128 %412 to i8
  %414 = or i8 %413, 48
  %415 = getelementptr inbounds i8, i8* %410, i64 -1
  store i8* %415, i8** %10, align 8
  store i8 %414, i8* %415, align 1
  %416 = icmp ult i128 %409, 100
  br i1 %416, label %417, label %408

417:                                              ; preds = %408, %400
  %418 = bitcast i8** %9 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i8** %10 to i64*
  %421 = load i64, i64* %420, align 8
  br label %422

422:                                              ; preds = %406, %417
  %423 = phi i64 [ %421, %417 ], [ %407, %406 ]
  %424 = phi i64 [ %419, %417 ], [ %12, %406 ]
  %425 = sub i64 %424, %423
  %426 = trunc i64 %425 to i32
  %427 = inttoptr i64 %423 to i8*
  %428 = load i8, i8* %427, align 1
  %429 = getelementptr inbounds i8, i8* %427, i64 -1
  store i8* %429, i8** %10, align 8
  store i8 %428, i8* %429, align 1
  %430 = load i8*, i8** %10, align 8
  %431 = getelementptr inbounds i8, i8* %430, i64 1
  store i8 46, i8* %431, align 1
  %432 = add i32 %426, -1
  br label %433

433:                                              ; preds = %422, %387
  %434 = phi i32 [ %432, %422 ], [ -1, %387 ]
  store i32 %434, i32* %4, align 4
  %435 = sub nsw i32 %2, %434
  %436 = sub nsw i32 0, %435
  %437 = icmp sgt i32 %435, -1
  br i1 %437, label %438, label %457

438:                                              ; preds = %433
  %439 = icmp eq i32 %435, 0
  br i1 %439, label %725, label %440

440:                                              ; preds = %438
  %441 = sub i32 %2, %434
  %442 = xor i32 %434, -1
  %443 = add i32 %442, %2
  %444 = and i32 %441, 3
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %454, label %446

446:                                              ; preds = %440, %446
  %447 = phi i32 [ %449, %446 ], [ %435, %440 ]
  %448 = phi i32 [ %452, %446 ], [ %444, %440 ]
  %449 = add nsw i32 %447, -1
  %450 = load i8*, i8** %9, align 8
  %451 = getelementptr inbounds i8, i8* %450, i64 1
  store i8* %451, i8** %9, align 8
  store i8 48, i8* %450, align 1
  %452 = add i32 %448, -1
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %446, !llvm.loop !18

454:                                              ; preds = %446, %440
  %455 = phi i32 [ %435, %440 ], [ %449, %446 ]
  %456 = icmp ult i32 %443, 3
  br i1 %456, label %725, label %515

457:                                              ; preds = %433
  %458 = load i8*, i8** %9, align 8
  %459 = sext i32 %436 to i64
  %460 = sub nsw i64 0, %459
  %461 = getelementptr inbounds i8, i8* %458, i64 %460
  store i8* %461, i8** %9, align 8
  %462 = load i8, i8* %461, align 1
  %463 = icmp sgt i8 %462, 53
  br i1 %463, label %489, label %464

464:                                              ; preds = %457
  %465 = icmp eq i8 %462, 53
  br i1 %465, label %466, label %725

466:                                              ; preds = %464
  %467 = icmp eq i32 %436, 1
  br i1 %467, label %477, label %468

468:                                              ; preds = %466
  %469 = getelementptr inbounds i8, i8* %461, i64 1
  br label %472

470:                                              ; preds = %472
  %471 = icmp eq i8* %476, %458
  br i1 %471, label %477, label %472

472:                                              ; preds = %470, %468
  %473 = phi i8* [ %476, %470 ], [ %469, %468 ]
  %474 = load i8, i8* %473, align 1
  %475 = icmp eq i8 %474, 48
  %476 = getelementptr inbounds i8, i8* %473, i64 1
  br i1 %475, label %470, label %489

477:                                              ; preds = %470, %466
  %478 = getelementptr inbounds i8, i8* %461, i64 -1
  %479 = load i8, i8* %478, align 1
  %480 = icmp eq i8 %479, 46
  br i1 %480, label %481, label %484

481:                                              ; preds = %477
  %482 = getelementptr inbounds i8, i8* %461, i64 -2
  %483 = load i8, i8* %482, align 1
  br label %484

484:                                              ; preds = %481, %477
  %485 = phi i8 [ %483, %481 ], [ %479, %477 ]
  %486 = sext i8 %485 to i32
  %487 = srem i32 %486, 2
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %489, label %725

489:                                              ; preds = %472, %484, %457
  %490 = getelementptr inbounds i8, i8* %461, i64 -1
  %491 = load i8*, i8** %10, align 8
  %492 = icmp ult i8* %490, %491
  br i1 %492, label %503, label %493

493:                                              ; preds = %489, %499
  %494 = phi i8* [ %500, %499 ], [ %491, %489 ]
  %495 = phi i8* [ %501, %499 ], [ %490, %489 ]
  %496 = load i8, i8* %495, align 1
  switch i8 %496, label %513 [
    i8 57, label %497
    i8 46, label %499
  ]

497:                                              ; preds = %493
  store i8 48, i8* %495, align 1
  %498 = load i8*, i8** %10, align 8
  br label %499

499:                                              ; preds = %497, %493
  %500 = phi i8* [ %494, %493 ], [ %498, %497 ]
  %501 = getelementptr inbounds i8, i8* %495, i64 -1
  %502 = icmp ult i8* %501, %500
  br i1 %502, label %503, label %493

503:                                              ; preds = %499, %489
  %504 = phi i8* [ %461, %489 ], [ %495, %499 ]
  %505 = phi i8* [ %490, %489 ], [ %501, %499 ]
  store i8 49, i8* %505, align 1
  store i8* %505, i8** %10, align 8
  %506 = getelementptr inbounds i8, i8* %504, i64 1
  %507 = load i8, i8* %504, align 1
  %508 = load i8, i8* %506, align 1
  store i8 %508, i8* %504, align 1
  store i8 %507, i8* %506, align 1
  %509 = load i32, i32* %4, align 4
  %510 = add nsw i32 %509, 1
  store i32 %510, i32* %4, align 4
  %511 = load i8*, i8** %9, align 8
  %512 = getelementptr inbounds i8, i8* %511, i64 -1
  store i8* %512, i8** %9, align 8
  br label %725

513:                                              ; preds = %493
  %514 = add i8 %496, 1
  store i8 %514, i8* %495, align 1
  br label %725

515:                                              ; preds = %454, %515
  %516 = phi i32 [ %523, %515 ], [ %455, %454 ]
  %517 = load i8*, i8** %9, align 8
  %518 = getelementptr inbounds i8, i8* %517, i64 1
  store i8* %518, i8** %9, align 8
  store i8 48, i8* %517, align 1
  %519 = load i8*, i8** %9, align 8
  %520 = getelementptr inbounds i8, i8* %519, i64 1
  store i8* %520, i8** %9, align 8
  store i8 48, i8* %519, align 1
  %521 = load i8*, i8** %9, align 8
  %522 = getelementptr inbounds i8, i8* %521, i64 1
  store i8* %522, i8** %9, align 8
  store i8 48, i8* %521, align 1
  %523 = add nsw i32 %516, -4
  %524 = load i8*, i8** %9, align 8
  %525 = getelementptr inbounds i8, i8* %524, i64 1
  store i8* %525, i8** %9, align 8
  store i8 48, i8* %524, align 1
  %526 = icmp sgt i32 %523, 0
  br i1 %526, label %515, label %725

527:                                              ; preds = %153
  %528 = zext i64 %0 to i128
  store i8* %8, i8** %9, align 8
  store i8* %8, i8** %10, align 8
  %529 = icmp slt i32 %1, -124
  br i1 %529, label %725, label %530

530:                                              ; preds = %527
  %531 = sub nsw i32 0, %1
  %532 = zext i32 %531 to i128
  %533 = shl nsw i128 -1, %532
  %534 = xor i128 %533, -1
  %535 = lshr i128 %528, %532
  %536 = icmp eq i128 %535, 0
  br i1 %536, label %537, label %540

537:                                              ; preds = %530
  %538 = and i128 %534, %528
  store i32 0, i32* %4, align 4
  %539 = icmp eq i128 %538, 0
  br i1 %539, label %558, label %551

540:                                              ; preds = %530
  %541 = trunc i128 %535 to i8
  %542 = urem i8 %541, 10
  %543 = or i8 %542, 48
  %544 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 40
  store i8* %544, i8** %10, align 8
  store i8 %543, i8* %544, align 1
  %545 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 39
  store i8* %545, i8** %10, align 8
  store i8 %543, i8* %545, align 1
  %546 = getelementptr inbounds %"struct.absl::str_format_internal::(anonymous namespace)::Buffer", %"struct.absl::str_format_internal::(anonymous namespace)::Buffer"* %3, i64 0, i32 0, i64 40
  store i8 46, i8* %546, align 1
  %547 = and i128 %534, %528
  store i32 0, i32* %4, align 4
  %548 = sub nsw i32 0, %2
  %549 = icmp eq i128 %547, 0
  %550 = icmp sgt i32 %2, -1
  br i1 %550, label %627, label %568

551:                                              ; preds = %537, %551
  %552 = phi i32 [ %555, %551 ], [ 0, %537 ]
  %553 = phi i128 [ %554, %551 ], [ %538, %537 ]
  %554 = mul i128 %553, 10
  %555 = add nsw i32 %552, -1
  %556 = icmp ugt i128 %554, %534
  br i1 %556, label %557, label %551

557:                                              ; preds = %551
  store i32 %555, i32* %4, align 4
  br label %558

558:                                              ; preds = %557, %537
  %559 = phi i128 [ 0, %537 ], [ %554, %557 ]
  %560 = lshr i128 %559, %532
  %561 = trunc i128 %560 to i8
  %562 = add i8 %561, 48
  %563 = load i8*, i8** %10, align 8
  %564 = getelementptr inbounds i8, i8* %563, i64 -1
  store i8* %564, i8** %10, align 8
  store i8 %562, i8* %564, align 1
  %565 = load i8*, i8** %9, align 8
  %566 = getelementptr inbounds i8, i8* %565, i64 1
  store i8* %566, i8** %9, align 8
  store i8 46, i8* %565, align 1
  %567 = and i128 %559, %534
  br label %627

568:                                              ; preds = %540
  %569 = load i8*, i8** %9, align 8
  %570 = sext i32 %548 to i64
  %571 = sub nsw i64 0, %570
  %572 = getelementptr inbounds i8, i8* %569, i64 %571
  store i8* %572, i8** %9, align 8
  %573 = load i8, i8* %572, align 1
  %574 = icmp sgt i8 %573, 53
  br i1 %574, label %601, label %575

575:                                              ; preds = %568
  %576 = icmp eq i8 %573, 53
  br i1 %576, label %577, label %725

577:                                              ; preds = %575
  br i1 %549, label %578, label %601

578:                                              ; preds = %577
  %579 = icmp eq i32 %548, 1
  br i1 %579, label %589, label %580

580:                                              ; preds = %578
  %581 = getelementptr inbounds i8, i8* %572, i64 1
  br label %584

582:                                              ; preds = %584
  %583 = icmp eq i8* %588, %569
  br i1 %583, label %589, label %584

584:                                              ; preds = %582, %580
  %585 = phi i8* [ %588, %582 ], [ %581, %580 ]
  %586 = load i8, i8* %585, align 1
  %587 = icmp eq i8 %586, 48
  %588 = getelementptr inbounds i8, i8* %585, i64 1
  br i1 %587, label %582, label %601

589:                                              ; preds = %582, %578
  %590 = getelementptr inbounds i8, i8* %572, i64 -1
  %591 = load i8, i8* %590, align 1
  %592 = icmp eq i8 %591, 46
  br i1 %592, label %593, label %596

593:                                              ; preds = %589
  %594 = getelementptr inbounds i8, i8* %572, i64 -2
  %595 = load i8, i8* %594, align 1
  br label %596

596:                                              ; preds = %593, %589
  %597 = phi i8 [ %595, %593 ], [ %591, %589 ]
  %598 = sext i8 %597 to i32
  %599 = srem i32 %598, 2
  %600 = icmp eq i32 %599, 1
  br i1 %600, label %601, label %725

601:                                              ; preds = %584, %596, %577, %568
  %602 = getelementptr inbounds i8, i8* %572, i64 -1
  %603 = load i8*, i8** %10, align 8
  %604 = icmp ult i8* %602, %603
  br i1 %604, label %615, label %605

605:                                              ; preds = %601, %611
  %606 = phi i8* [ %612, %611 ], [ %603, %601 ]
  %607 = phi i8* [ %613, %611 ], [ %602, %601 ]
  %608 = load i8, i8* %607, align 1
  switch i8 %608, label %625 [
    i8 57, label %609
    i8 46, label %611
  ]

609:                                              ; preds = %605
  store i8 48, i8* %607, align 1
  %610 = load i8*, i8** %10, align 8
  br label %611

611:                                              ; preds = %609, %605
  %612 = phi i8* [ %606, %605 ], [ %610, %609 ]
  %613 = getelementptr inbounds i8, i8* %607, i64 -1
  %614 = icmp ult i8* %613, %612
  br i1 %614, label %615, label %605

615:                                              ; preds = %611, %601
  %616 = phi i8* [ %572, %601 ], [ %607, %611 ]
  %617 = phi i8* [ %602, %601 ], [ %613, %611 ]
  store i8 49, i8* %617, align 1
  store i8* %617, i8** %10, align 8
  %618 = getelementptr inbounds i8, i8* %616, i64 1
  %619 = load i8, i8* %616, align 1
  %620 = load i8, i8* %618, align 1
  store i8 %620, i8* %616, align 1
  store i8 %619, i8* %618, align 1
  %621 = load i32, i32* %4, align 4
  %622 = add nsw i32 %621, 1
  store i32 %622, i32* %4, align 4
  %623 = load i8*, i8** %9, align 8
  %624 = getelementptr inbounds i8, i8* %623, i64 -1
  store i8* %624, i8** %9, align 8
  br label %725

625:                                              ; preds = %605
  %626 = add i8 %608, 1
  store i8 %626, i8* %607, align 1
  br label %725

627:                                              ; preds = %540, %558
  %628 = phi i128 [ %567, %558 ], [ %547, %540 ]
  %629 = icmp sgt i32 %2, 0
  %630 = mul i128 %628, 10
  %631 = lshr i128 %630, %532
  %632 = trunc i128 %631 to i32
  %633 = and i128 %630, %534
  br i1 %629, label %634, label %677

634:                                              ; preds = %627
  %635 = trunc i128 %631 to i8
  %636 = and i32 %2, 1
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %648, label %638

638:                                              ; preds = %634
  %639 = add i8 %635, 48
  %640 = load i8*, i8** %9, align 8
  %641 = getelementptr inbounds i8, i8* %640, i64 1
  store i8* %641, i8** %9, align 8
  store i8 %639, i8* %640, align 1
  %642 = add nsw i32 %2, -1
  %643 = mul i128 %633, 10
  %644 = lshr i128 %643, %532
  %645 = and i128 %643, %534
  %646 = trunc i128 %644 to i8
  %647 = trunc i128 %644 to i32
  br label %648

648:                                              ; preds = %634, %638
  %649 = phi i128 [ %633, %634 ], [ %645, %638 ]
  %650 = phi i8 [ %635, %634 ], [ %646, %638 ]
  %651 = phi i32 [ %2, %634 ], [ %642, %638 ]
  %652 = phi i32 [ undef, %634 ], [ %647, %638 ]
  %653 = phi i128 [ undef, %634 ], [ %645, %638 ]
  %654 = icmp eq i32 %2, 1
  br i1 %654, label %677, label %655

655:                                              ; preds = %648, %655
  %656 = phi i128 [ %673, %655 ], [ %649, %648 ]
  %657 = phi i8 [ %674, %655 ], [ %650, %648 ]
  %658 = phi i32 [ %669, %655 ], [ %651, %648 ]
  %659 = add i8 %657, 48
  %660 = load i8*, i8** %9, align 8
  %661 = getelementptr inbounds i8, i8* %660, i64 1
  store i8* %661, i8** %9, align 8
  store i8 %659, i8* %660, align 1
  %662 = mul i128 %656, 10
  %663 = lshr i128 %662, %532
  %664 = and i128 %662, %534
  %665 = trunc i128 %663 to i8
  %666 = add i8 %665, 48
  %667 = load i8*, i8** %9, align 8
  %668 = getelementptr inbounds i8, i8* %667, i64 1
  store i8* %668, i8** %9, align 8
  store i8 %666, i8* %667, align 1
  %669 = add nsw i32 %658, -2
  %670 = icmp sgt i32 %669, 0
  %671 = mul i128 %664, 10
  %672 = lshr i128 %671, %532
  %673 = and i128 %671, %534
  %674 = trunc i128 %672 to i8
  br i1 %670, label %655, label %675

675:                                              ; preds = %655
  %676 = trunc i128 %672 to i32
  br label %677

677:                                              ; preds = %675, %648, %627
  %678 = phi i32 [ %632, %627 ], [ %652, %648 ], [ %676, %675 ]
  %679 = phi i128 [ %633, %627 ], [ %653, %648 ], [ %673, %675 ]
  %680 = icmp sgt i32 %678, 5
  br i1 %680, label %698, label %681

681:                                              ; preds = %677
  %682 = icmp eq i32 %678, 5
  br i1 %682, label %683, label %725

683:                                              ; preds = %681
  %684 = icmp eq i128 %679, 0
  br i1 %684, label %685, label %698

685:                                              ; preds = %683
  %686 = load i8*, i8** %9, align 8
  %687 = getelementptr inbounds i8, i8* %686, i64 -1
  %688 = load i8, i8* %687, align 1
  %689 = icmp eq i8 %688, 46
  br i1 %689, label %690, label %693

690:                                              ; preds = %685
  %691 = getelementptr inbounds i8, i8* %686, i64 -2
  %692 = load i8, i8* %691, align 1
  br label %693

693:                                              ; preds = %690, %685
  %694 = phi i8 [ %692, %690 ], [ %688, %685 ]
  %695 = sext i8 %694 to i32
  %696 = srem i32 %695, 2
  %697 = icmp eq i32 %696, 1
  br i1 %697, label %698, label %725

698:                                              ; preds = %693, %683, %677
  %699 = load i8*, i8** %9, align 8
  %700 = getelementptr inbounds i8, i8* %699, i64 -1
  %701 = load i8*, i8** %10, align 8
  %702 = icmp ult i8* %700, %701
  br i1 %702, label %713, label %703

703:                                              ; preds = %698, %709
  %704 = phi i8* [ %710, %709 ], [ %701, %698 ]
  %705 = phi i8* [ %711, %709 ], [ %700, %698 ]
  %706 = load i8, i8* %705, align 1
  switch i8 %706, label %723 [
    i8 57, label %707
    i8 46, label %709
  ]

707:                                              ; preds = %703
  store i8 48, i8* %705, align 1
  %708 = load i8*, i8** %10, align 8
  br label %709

709:                                              ; preds = %707, %703
  %710 = phi i8* [ %704, %703 ], [ %708, %707 ]
  %711 = getelementptr inbounds i8, i8* %705, i64 -1
  %712 = icmp ult i8* %711, %710
  br i1 %712, label %713, label %703

713:                                              ; preds = %709, %698
  %714 = phi i8* [ %699, %698 ], [ %705, %709 ]
  %715 = phi i8* [ %700, %698 ], [ %711, %709 ]
  store i8 49, i8* %715, align 1
  store i8* %715, i8** %10, align 8
  %716 = getelementptr inbounds i8, i8* %714, i64 1
  %717 = load i8, i8* %714, align 1
  %718 = load i8, i8* %716, align 1
  store i8 %718, i8* %714, align 1
  store i8 %717, i8* %716, align 1
  %719 = load i32, i32* %4, align 4
  %720 = add nsw i32 %719, 1
  store i32 %720, i32* %4, align 4
  %721 = load i8*, i8** %9, align 8
  %722 = getelementptr inbounds i8, i8* %721, i64 -1
  store i8* %722, i8** %9, align 8
  br label %725

723:                                              ; preds = %703
  %724 = add i8 %706, 1
  store i8 %724, i8* %705, align 1
  br label %725

725:                                              ; preds = %80, %141, %454, %515, %64, %238, %288, %278, %259, %90, %139, %129, %110, %383, %373, %353, %341, %723, %713, %693, %681, %625, %615, %596, %575, %527, %513, %503, %484, %464, %438, %385, %5
  %726 = phi i1 [ false, %5 ], [ false, %385 ], [ false, %527 ], [ true, %681 ], [ true, %693 ], [ true, %713 ], [ true, %723 ], [ true, %484 ], [ true, %503 ], [ true, %513 ], [ true, %464 ], [ true, %596 ], [ true, %615 ], [ true, %625 ], [ true, %575 ], [ true, %438 ], [ true, %341 ], [ true, %353 ], [ true, %373 ], [ true, %383 ], [ true, %110 ], [ true, %129 ], [ true, %139 ], [ true, %90 ], [ true, %259 ], [ true, %278 ], [ true, %288 ], [ true, %238 ], [ true, %64 ], [ true, %515 ], [ true, %454 ], [ true, %141 ], [ true, %80 ]
  ret i1 %726
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nocapture readonly dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 %12, i32 -1
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #13
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  store i8 37, i8* %15, align 16
  %17 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 1
  %19 = load i8, i8* %18, align 1, !noalias !19
  call void @_ZN4absl19str_format_internal13FlagsToStringENS0_5FlagsE(%"class.std::__1::basic_string"* nonnull sret %5, i8 zeroext %19) #13
  %20 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp sgt i64 %26, -1
  br i1 %27, label %31, label %28, !prof !2

28:                                               ; preds = %24
  call void @llvm.trap() #13
  unreachable

29:                                               ; preds = %3
  %30 = zext i8 %22 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* nonnull align 8 %17, i64 %30, i1 false) #13
  br label %34

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %33, i64 %26, i1 false) #13
  call void @_ZdlPv(i8* %33) #15
  br label %34

34:                                               ; preds = %29, %31
  %35 = phi i64 [ %30, %29 ], [ %26, %31 ]
  %36 = getelementptr inbounds i8, i8* %16, i64 %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3, i1 false) #13
  %37 = getelementptr inbounds i8, i8* %36, i64 3
  %38 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %1, i64 0, i32 0
  %39 = load i8, i8* %38, align 4
  %40 = icmp ult i8 %39, 18
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = sext i8 %39 to i64
  %43 = getelementptr inbounds [18 x i8], [18 x i8]* @switch.table._ZN4absl19str_format_internal12_GLOBAL__N_118FallbackToSnprintfIdEEbT_RKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  br label %45

45:                                               ; preds = %41, %34
  %46 = phi i8 [ 0, %34 ], [ %44, %41 ]
  %47 = getelementptr inbounds i8, i8* %37, i64 1
  store i8 %46, i8* %37, align 1
  store i8 0, i8* %47, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #13
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = call i8* @_Znwm(i64 528) #15
  store i8* %51, i8** %49, align 8
  %52 = bitcast i64* %50 to <2 x i64>*
  store <2 x i64> <i64 512, i64 -9223372036854775280>, <2 x i64>* %52, align 8
  %53 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %51, i8 0, i64 513, i1 false)
  %55 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %51, i64 512, i8* nonnull %15, i32 %10, i32 %14, double %0) #13
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %116, label %57

57:                                               ; preds = %45
  %58 = sext i32 %55 to i64
  %59 = icmp ult i32 %55, 512
  br i1 %59, label %60, label %67

60:                                               ; preds = %80, %57
  %61 = phi i32 [ %55, %57 ], [ %78, %80 ]
  %62 = phi i64 [ %58, %57 ], [ %83, %80 ]
  %63 = phi i1 [ true, %57 ], [ %84, %80 ]
  %64 = load i8*, i8** %49, align 8
  %65 = select i1 %63, i8* %64, i8* %48
  %66 = icmp eq i32 %61, 0
  br i1 %66, label %116, label %88

67:                                               ; preds = %57, %80
  %68 = phi i32 [ %78, %80 ], [ %55, %57 ]
  %69 = add nuw nsw i32 %68, 1
  %70 = sext i32 %69 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* nonnull %6, i64 %70, i8 signext 0) #13
  %71 = load i8, i8* %54, align 1
  %72 = icmp slt i8 %71, 0
  %73 = load i8*, i8** %49, align 8
  %74 = load i64, i64* %50, align 8
  %75 = zext i8 %71 to i64
  %76 = select i1 %72, i8* %73, i8* %48
  %77 = select i1 %72, i64 %74, i64 %75
  %78 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %76, i64 %77, i8* nonnull %15, i32 %10, i32 %14, double %0) #13
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %116, label %80

80:                                               ; preds = %67
  %81 = load i8, i8* %54, align 1
  %82 = load i64, i64* %50, align 8
  %83 = sext i32 %78 to i64
  %84 = icmp slt i8 %81, 0
  %85 = zext i8 %81 to i64
  %86 = select i1 %84, i64 %82, i64 %85
  %87 = icmp ugt i64 %86, %83
  br i1 %87, label %60, label %67

88:                                               ; preds = %60
  %89 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, %62
  store i64 %91, i64* %89, align 8
  %92 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 3, i64 1024
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 2
  %94 = bitcast i8** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = ptrtoint i8* %92 to i64
  %97 = sub i64 %96, %95
  %98 = icmp ugt i64 %97, %62
  br i1 %98, label %112, label %99

99:                                               ; preds = %88
  %100 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 3, i64 0
  %101 = ptrtoint i8* %100 to i64
  %102 = sub i64 %95, %101
  %103 = icmp sgt i64 %102, -1
  br i1 %103, label %105, label %104, !prof !2

104:                                              ; preds = %99
  call void @llvm.trap() #13
  unreachable

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 0, i32 1
  %107 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %106, align 8
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %2, i64 0, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  call void %107(i8* %109, i8* %100, i64 %102) #13
  store i8* %100, i8** %93, align 8
  %110 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %106, align 8
  %111 = load i8*, i8** %108, align 8
  call void %110(i8* %111, i8* %65, i64 %62) #13
  br label %116

112:                                              ; preds = %88
  %113 = inttoptr i64 %95 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %65, i64 %62, i1 false) #13
  %114 = load i8*, i8** %93, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 %62
  store i8* %115, i8** %93, align 8
  br label %116

116:                                              ; preds = %67, %45, %112, %105, %60
  %117 = phi i1 [ true, %60 ], [ true, %105 ], [ true, %112 ], [ false, %45 ], [ false, %67 ]
  %118 = load i8, i8* %54, align 1
  %119 = icmp slt i8 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %116
  %121 = load i8*, i8** %49, align 8
  call void @_ZdlPv(i8* %121) #15
  br label %122

122:                                              ; preds = %116, %120
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #13
  ret i1 %117
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @ldexp(double, i32) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { nounwind }
attributes #14 = { nounwind readnone }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4absl19str_format_internal12_GLOBAL__N_19DecomposeIeEENS1_10DecomposedIT_EES4_: argument 0"}
!5 = distinct !{!5, !"_ZN4absl19str_format_internal12_GLOBAL__N_19DecomposeIeEENS1_10DecomposedIT_EES4_"}
!6 = !{i64 0, i64 65}
!7 = !{!"branch_weights", i32 1, i32 2000}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{!"branch_weights", i32 1, i32 1048575}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN4absl19str_format_internal30FormatConversionSpecImplFriend13FlagsToStringERKNS0_24FormatConversionSpecImplE: argument 0"}
!16 = distinct !{!16, !"_ZN4absl19str_format_internal30FormatConversionSpecImplFriend13FlagsToStringERKNS0_24FormatConversionSpecImplE"}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !9}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN4absl19str_format_internal30FormatConversionSpecImplFriend13FlagsToStringERKNS0_24FormatConversionSpecImplE: argument 0"}
!21 = distinct !{!21, !"_ZN4absl19str_format_internal30FormatConversionSpecImplFriend13FlagsToStringERKNS0_24FormatConversionSpecImplE"}
