; ModuleID = '../../net/dns/mapped_host_resolver.cc'
source_filename = "../../net/dns/mapped_host_resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::MappedHostResolver" = type { %"class.net::HostResolver", %"class.std::__1::unique_ptr", %"class.net::HostMappingRules" }
%"class.net::HostResolver" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::HostResolver"* }
%"class.net::HostMappingRules" = type { %"class.std::__1::vector", %"class.std::__1::vector.4" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::HostMappingRules::MapRule"*, %"struct.net::HostMappingRules::MapRule"*, %"class.std::__1::__compressed_pair.1" }
%"struct.net::HostMappingRules::MapRule" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.net::HostMappingRules::MapRule"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.net::HostMappingRules::ExclusionRule"*, %"struct.net::HostMappingRules::ExclusionRule"*, %"class.std::__1::__compressed_pair.6" }
%"struct.net::HostMappingRules::ExclusionRule" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.net::HostMappingRules::ExclusionRule"* }
%"class.net::HostResolver::ResolveHostRequest" = type { i32 (...)** }
%"class.net::HostPortPair" = type <{ %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.22 }
%union.anon.22 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.23" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.23" = type { %"class.absl::optional_internal::optional_data.24" }
%"class.absl::optional_internal::optional_data.24" = type { %"class.absl::optional_internal::optional_data_base.25" }
%"class.absl::optional_internal::optional_data_base.25" = type { %"class.absl::optional_internal::optional_data_dtor_base.26" }
%"class.absl::optional_internal::optional_data_dtor_base.26" = type { i8, %union.anon.27 }
%union.anon.27 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.net::NetLogWithSource" = type opaque
%"class.absl::optional.28" = type opaque
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.net::HostResolver::ProbeRequest" = type { i32 (...)** }
%"class.net::HostCache" = type { %"class.std::__1::map", i64, i32, i64, %"class.net::HostCache::PersistenceDelegate"*, %"class.base::TickClock"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i64 }
%"class.net::HostCache::PersistenceDelegate" = type { i32 (...)** }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.43" }
%"union.absl::variant_internal::DestructibleUnionImpl.43" = type { %"union.absl::variant_internal::DestructibleUnionImpl.44" }
%"union.absl::variant_internal::DestructibleUnionImpl.44" = type { %"union.absl::variant_internal::DestructibleUnionImpl.45" }
%"union.absl::variant_internal::DestructibleUnionImpl.45" = type { %"union.absl::variant_internal::DestructibleUnionImpl.46" }
%"union.absl::variant_internal::DestructibleUnionImpl.46" = type { %"class.std::__1::basic_string" }
%"class.net::URLRequestContext" = type opaque
%"class.net::HostResolverManager" = type opaque

@_ZTVN3net18MappedHostResolverE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolverD2Ev to i8*), i8* bitcast (void (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolverD0Ev to i8*), i8* bitcast (void (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolver10OnShutdownEv to i8*), i8* bitcast (%"class.net::HostResolver::ResolveHostRequest"* (%"class.net::MappedHostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)* @_ZN3net18MappedHostResolver13CreateRequestERKNS_12HostPortPairERKNS_19NetworkIsolationKeyERKNS_16NetLogWithSourceERKN4absl8optionalINS_12HostResolver21ResolveHostParametersEEE to i8*), i8* bitcast (%"class.net::HostResolver::ProbeRequest"* (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolver21CreateDohProbeRequestEv to i8*), i8* bitcast (void ()* @_ZN3net12HostResolver18CreateMdnsListenerERKNS_12HostPortPairENS_12DnsQueryTypeE to i8*), i8* bitcast (%"class.net::HostCache"* (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolver12GetHostCacheEv to i8*), i8* bitcast (void (%"class.base::Value"*, %"class.net::MappedHostResolver"*)* @_ZNK3net18MappedHostResolver19GetDnsConfigAsValueEv to i8*), i8* bitcast (void (%"class.net::MappedHostResolver"*, %"class.net::URLRequestContext"*)* @_ZN3net18MappedHostResolver17SetRequestContextEPNS_17URLRequestContextE to i8*), i8* bitcast (%"class.net::HostResolverManager"* (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolver20GetManagerForTestingEv to i8*), i8* bitcast (%"class.net::URLRequestContext"* (%"class.net::HostResolver"*)* @_ZNK3net12HostResolver20GetContextForTestingEv to i8*)] }, align 8
@.str = private unnamed_addr constant [10 x i8] c"~NOTFOUND\00", align 1

@_ZN3net18MappedHostResolverC1ENSt3__110unique_ptrINS_12HostResolverENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.net::MappedHostResolver"*, %"class.net::HostResolver"*), void (%"class.net::MappedHostResolver"*, %"class.net::HostResolver"*)* @_ZN3net18MappedHostResolverC2ENSt3__110unique_ptrINS_12HostResolverENS1_14default_deleteIS3_EEEE
@_ZN3net18MappedHostResolverD1Ev = hidden unnamed_addr alias void (%"class.net::MappedHostResolver"*), void (%"class.net::MappedHostResolver"*)* @_ZN3net18MappedHostResolverD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18MappedHostResolverC2ENSt3__110unique_ptrINS_12HostResolverENS1_14default_deleteIS3_EEEE(%"class.net::MappedHostResolver"*, %"class.net::HostResolver"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.net::HostResolver"* %1 to i64
  %4 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0
  tail call void @_ZN3net12HostResolverC2Ev(%"class.net::HostResolver"* %4) #5
  %5 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN3net18MappedHostResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 2
  tail call void @_ZN3net16HostMappingRulesC1Ev(%"class.net::HostMappingRules"* %8) #5
  ret void
}

declare void @_ZN3net12HostResolverC2Ev(%"class.net::HostResolver"*) unnamed_addr #1

declare void @_ZN3net16HostMappingRulesC1Ev(%"class.net::HostMappingRules"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18MappedHostResolverD2Ev(%"class.net::MappedHostResolver"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN3net18MappedHostResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 2
  tail call void @_ZN3net16HostMappingRulesD1Ev(%"class.net::HostMappingRules"* %3) #5
  %4 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %4, align 8
  store %"class.net::HostResolver"* null, %"class.net::HostResolver"** %4, align 8
  %6 = icmp eq %"class.net::HostResolver"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.net::HostResolver"* %5 to void (%"class.net::HostResolver"*)***
  %9 = load void (%"class.net::HostResolver"*)**, void (%"class.net::HostResolver"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %9, i64 1
  %11 = load void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %10, align 8
  tail call void %11(%"class.net::HostResolver"* nonnull %5) #5
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0
  tail call void @_ZN3net12HostResolverD2Ev(%"class.net::HostResolver"* %13) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net16HostMappingRulesD1Ev(%"class.net::HostMappingRules"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net12HostResolverD2Ev(%"class.net::HostResolver"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18MappedHostResolverD0Ev(%"class.net::MappedHostResolver"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN3net18MappedHostResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 2
  tail call void @_ZN3net16HostMappingRulesD1Ev(%"class.net::HostMappingRules"* %3) #5
  %4 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %4, align 8
  store %"class.net::HostResolver"* null, %"class.net::HostResolver"** %4, align 8
  %6 = icmp eq %"class.net::HostResolver"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.net::HostResolver"* %5 to void (%"class.net::HostResolver"*)***
  %9 = load void (%"class.net::HostResolver"*)**, void (%"class.net::HostResolver"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %9, i64 1
  %11 = load void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %10, align 8
  tail call void %11(%"class.net::HostResolver"* nonnull %5) #5
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 0
  tail call void @_ZN3net12HostResolverD2Ev(%"class.net::HostResolver"* %13) #5
  %14 = bitcast %"class.net::MappedHostResolver"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18MappedHostResolver10OnShutdownEv(%"class.net::MappedHostResolver"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %2, align 8
  %4 = bitcast %"class.net::HostResolver"* %3 to void (%"class.net::HostResolver"*)***
  %5 = load void (%"class.net::HostResolver"*)**, void (%"class.net::HostResolver"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %5, i64 2
  %7 = load void (%"class.net::HostResolver"*)*, void (%"class.net::HostResolver"*)** %6, align 8
  tail call void %7(%"class.net::HostResolver"* %3) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::HostResolver::ResolveHostRequest"* @_ZN3net18MappedHostResolver13CreateRequestERKNS_12HostPortPairERKNS_19NetworkIsolationKeyERKNS_16NetLogWithSourceERKN4absl8optionalINS_12HostResolver21ResolveHostParametersEEE(%"class.net::MappedHostResolver"*, %"class.net::HostPortPair"* nocapture readonly dereferenceable(32), %"class.net::NetworkIsolationKey"* dereferenceable(184), %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*) unnamed_addr #0 align 2 {
  %6 = alloca %"class.net::HostPortPair", align 8
  %7 = bitcast %"class.net::HostPortPair"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #5
  %8 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %6, i64 0, i32 1
  %11 = bitcast %"class.net::HostPortPair"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = bitcast %"class.net::HostPortPair"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = load i8, i8* %12, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %5
  %17 = bitcast %"class.net::HostPortPair"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %17, i64 24, i1 false) #5
  br label %24

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %6, i64 0, i32 0
  %20 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %19, i8* %21, i64 %23) #5
  br label %24

24:                                               ; preds = %16, %18
  %25 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 1
  %26 = load i16, i16* %25, align 8
  store i16 %26, i16* %10, align 8
  %27 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 2
  %28 = call zeroext i1 @_ZNK3net16HostMappingRules11RewriteHostEPNS_12HostPortPairE(%"class.net::HostMappingRules"* %27, %"class.net::HostPortPair"* nonnull %6) #5
  %29 = bitcast %"class.net::HostPortPair"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = load i64, i64* %9, align 8
  %34 = zext i8 %31 to i64
  %35 = select i1 %32, i64 %33, i64 %34
  %36 = icmp eq i64 %35, 9
  br i1 %36, label %37, label %43

37:                                               ; preds = %24
  %38 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %6, i64 0, i32 0
  %39 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %38, i64 0, i64 -1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i64 9) #5
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = call %"class.net::HostResolver::ResolveHostRequest"* @_ZN3net12HostResolver20CreateFailingRequestEi(i32 -105) #5
  br label %51

43:                                               ; preds = %24, %37
  %44 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %45 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %44, align 8
  %46 = bitcast %"class.net::HostResolver"* %45 to %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)***
  %47 = load %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)**, %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)*, %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)** %47, i64 3
  %49 = load %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)*, %"class.net::HostResolver::ResolveHostRequest"* (%"class.net::HostResolver"*, %"class.net::HostPortPair"*, %"class.net::NetworkIsolationKey"*, %"class.net::NetLogWithSource"*, %"class.absl::optional.28"*)** %48, align 8
  %50 = call %"class.net::HostResolver::ResolveHostRequest"* %49(%"class.net::HostResolver"* %45, %"class.net::HostPortPair"* nonnull dereferenceable(32) %6, %"class.net::NetworkIsolationKey"* dereferenceable(184) %2, %"class.net::NetLogWithSource"* %3, %"class.absl::optional.28"* %4) #5
  br label %51

51:                                               ; preds = %43, %41
  %52 = phi %"class.net::HostResolver::ResolveHostRequest"* [ %42, %41 ], [ %50, %43 ]
  %53 = load i8, i8* %30, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  %56 = load i8*, i8** %8, align 8
  call void @_ZdlPv(i8* %56) #6
  br label %57

57:                                               ; preds = %51, %55
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #5
  ret %"class.net::HostResolver::ResolveHostRequest"* %52
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZNK3net16HostMappingRules11RewriteHostEPNS_12HostPortPairE(%"class.net::HostMappingRules"*, %"class.net::HostPortPair"*) local_unnamed_addr #1

declare %"class.net::HostResolver::ResolveHostRequest"* @_ZN3net12HostResolver20CreateFailingRequestEi(i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::HostResolver::ProbeRequest"* @_ZN3net18MappedHostResolver21CreateDohProbeRequestEv(%"class.net::MappedHostResolver"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %2, align 8
  %4 = bitcast %"class.net::HostResolver"* %3 to %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)***
  %5 = load %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)**, %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)*, %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)** %5, i64 4
  %7 = load %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)*, %"class.net::HostResolver::ProbeRequest"* (%"class.net::HostResolver"*)** %6, align 8
  %8 = tail call %"class.net::HostResolver::ProbeRequest"* %7(%"class.net::HostResolver"* %3) #5
  ret %"class.net::HostResolver::ProbeRequest"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::HostCache"* @_ZN3net18MappedHostResolver12GetHostCacheEv(%"class.net::MappedHostResolver"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %2, align 8
  %4 = bitcast %"class.net::HostResolver"* %3 to %"class.net::HostCache"* (%"class.net::HostResolver"*)***
  %5 = load %"class.net::HostCache"* (%"class.net::HostResolver"*)**, %"class.net::HostCache"* (%"class.net::HostResolver"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.net::HostCache"* (%"class.net::HostResolver"*)*, %"class.net::HostCache"* (%"class.net::HostResolver"*)** %5, i64 6
  %7 = load %"class.net::HostCache"* (%"class.net::HostResolver"*)*, %"class.net::HostCache"* (%"class.net::HostResolver"*)** %6, align 8
  %8 = tail call %"class.net::HostCache"* %7(%"class.net::HostResolver"* %3) #5
  ret %"class.net::HostCache"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net18MappedHostResolver19GetDnsConfigAsValueEv(%"class.base::Value"* noalias sret, %"class.net::MappedHostResolver"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %3, align 8
  %5 = bitcast %"class.net::HostResolver"* %4 to void (%"class.base::Value"*, %"class.net::HostResolver"*)***
  %6 = load void (%"class.base::Value"*, %"class.net::HostResolver"*)**, void (%"class.base::Value"*, %"class.net::HostResolver"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.base::Value"*, %"class.net::HostResolver"*)*, void (%"class.base::Value"*, %"class.net::HostResolver"*)** %6, i64 7
  %8 = load void (%"class.base::Value"*, %"class.net::HostResolver"*)*, void (%"class.base::Value"*, %"class.net::HostResolver"*)** %7, align 8
  tail call void %8(%"class.base::Value"* sret %0, %"class.net::HostResolver"* %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18MappedHostResolver17SetRequestContextEPNS_17URLRequestContextE(%"class.net::MappedHostResolver"* nocapture readonly, %"class.net::URLRequestContext"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %3, align 8
  %5 = bitcast %"class.net::HostResolver"* %4 to void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)***
  %6 = load void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)**, void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)*, void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)** %6, i64 8
  %8 = load void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)*, void (%"class.net::HostResolver"*, %"class.net::URLRequestContext"*)** %7, align 8
  tail call void %8(%"class.net::HostResolver"* %4, %"class.net::URLRequestContext"* %1) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::HostResolverManager"* @_ZN3net18MappedHostResolver20GetManagerForTestingEv(%"class.net::MappedHostResolver"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MappedHostResolver", %"class.net::MappedHostResolver"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.net::HostResolver"*, %"class.net::HostResolver"** %2, align 8
  %4 = bitcast %"class.net::HostResolver"* %3 to %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)***
  %5 = load %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)**, %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)*, %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)** %5, i64 9
  %7 = load %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)*, %"class.net::HostResolverManager"* (%"class.net::HostResolver"*)** %6, align 8
  %8 = tail call %"class.net::HostResolverManager"* %7(%"class.net::HostResolver"* %3) #5
  ret %"class.net::HostResolverManager"* %8
}

declare void @_ZN3net12HostResolver18CreateMdnsListenerERKNS_12HostPortPairENS_12DnsQueryTypeE() unnamed_addr

declare %"class.net::URLRequestContext"* @_ZNK3net12HostResolver20GetContextForTestingEv(%"class.net::HostResolver"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
