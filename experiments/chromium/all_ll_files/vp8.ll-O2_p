; ModuleID = '../../third_party/ffmpeg/libavcodec/vp8.c'
source_filename = "../../third_party/ffmpeg/libavcodec/vp8.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecHWConfigInternal = type { %struct.AVCodecHWConfig, %struct.AVHWAccel* }
%struct.AVCodecHWConfig = type { i32, i32, i32 }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, {}*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.MpegEncContext = type opaque
%struct.VP56mv = type { i16, i16 }
%struct.VP8Context = type { %struct.VP8ThreadData*, %struct.AVCodecContext*, i32, i32, [4 x %struct.VP8Frame*], [4 x %struct.VP8Frame*], %struct.VP8Frame*, %struct.VP8Frame*, i16, i16, i64, i64, i8, i8, i8, i8, %struct.VP8mvbounds, [4 x i8], [3 x i32], %struct.anon.2, %struct.anon.3, %struct.VP8Macroblock*, i8*, [4 x i8], [4 x %struct.anon.4], %struct.anon.5, %struct.anon.6, [32 x i8]*, [9 x i8]*, %struct.VP56RangeCoder, %struct.anon.7, i32, [2 x %struct.anon.8], %struct.VP8Macroblock*, i32, i32, i32, i32, i32, i32, [8 x %struct.VP56RangeCoder], [8 x i32], %struct.VideoDSPContext, %struct.VP8DSPContext, %struct.H264PredContext, [3 x [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]], [5 x %struct.VP8Frame], i8, i8, i32, i32, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, [2 x [2 x i16]], [4 x i8], [4 x i8], [4 x [3 x i8]], [4 x [4 x i8]] }
%struct.VP8ThreadData = type { [6 x [4 x [16 x i16]]], [16 x i16], [6 x [4 x i8]], [9 x i8], i32, %union.pthread_mutex_t, %union.pthread_cond_t, i32, i32, [8 x i8], [672 x i8], %struct.VP8FilterStrength*, %struct.VP8mvbounds, [8 x i8] }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.VP8FilterStrength = type { i8, i8, i8 }
%struct.VP8Frame = type { %struct.ThreadFrame, %struct.AVBufferRef*, %struct.AVBufferRef*, i8* }
%struct.ThreadFrame = type { %struct.AVFrame*, [2 x %struct.AVCodecContext*], %struct.AVBufferRef* }
%struct.VP8mvbounds = type { %struct.VP8intmv, %struct.VP8intmv }
%struct.VP8intmv = type { i32, i32 }
%struct.anon.2 = type { i8, i8, i8, i8, [4 x i8], [4 x i8] }
%struct.anon.3 = type { i8, i8, i8 }
%struct.anon.4 = type { [2 x i16], [2 x i16], [2 x i16] }
%struct.anon.5 = type { i32, i32, i32, i32, i32, i32 }
%struct.anon.6 = type { i8, i8, [8 x i8], [4 x i8] }
%struct.VP56RangeCoder = type { i32, i32, i8*, i8*, i32, i32 }
%struct.anon.7 = type { i8*, i32, i32, i32 }
%struct.anon.8 = type { [3 x i8], i8, i8, i8, i8, [4 x i8], [3 x i8], [4 x [16 x [3 x [11 x i8]]]], [2 x [19 x i8]], [16 x i8] }
%struct.VP8Macroblock = type { i8, i8, i8, i8, i8, i8, [16 x i8], [2 x i8], [4 x i8], %struct.VP56mv, [16 x %struct.VP56mv] }
%struct.VideoDSPContext = type { void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i32)* }
%struct.VP8DSPContext = type { void ([4 x [16 x i16]]*, i16*)*, void ([4 x [16 x i16]]*, i16*)*, void (i8*, i16*, i64)*, void (i8*, i16*, i64)*, void (i8*, [16 x i16]*, i64)*, void (i8*, [16 x i16]*, i64)*, void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i64, i32)*, void (i8*, i64, i32)*, [3 x [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]], [3 x [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]] }
%struct.H264PredContext = type { [15 x void (i8*, i8*, i64)*], [12 x void (i8*, i32, i32, i64)*], [11 x void (i8*, i64)*], [9 x void (i8*, i64)*], [2 x void (i8*, i16*, i64)*], [2 x void (i8*, i16*, i64)*], [2 x void (i8*, i16*, i32, i32, i64)*], [3 x void (i8*, i32*, i16*, i64)*], [3 x void (i8*, i32*, i16*, i64)*] }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }
%struct.v = type { [2 x i64] }
%struct.v.9 = type { [2 x i64] }

@vp8_dct_cat3_prob = internal constant [4 x i8] c"\AD\94\8C\00", align 1
@vp8_dct_cat4_prob = internal constant [5 x i8] c"\B0\9B\8C\87\00", align 1
@vp8_dct_cat5_prob = internal constant [6 x i8] c"\B4\9D\8D\86\82\00", align 1
@vp8_dct_cat6_prob = internal constant [12 x i8] c"\FE\FE\F3\E6\C4\B1\99\8C\85\82\81\00", align 1
@ff_vp8_dct_cat_prob = hidden local_unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp8_dct_cat3_prob, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @vp8_dct_cat4_prob, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp8_dct_cat5_prob, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @vp8_dct_cat6_prob, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"vp8\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"On2 VP8\00", align 1
@.compoundliteral = internal constant [1 x %struct.AVCodecHWConfigInternal*] zeroinitializer, align 8
@ff_vp8_decoder = hidden local_unnamed_addr global { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 0, i32 139, i32 12290, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 6688, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* @vp8_decode_update_thread_context, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @ff_vp8_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @ff_vp8_decode_frame, i32 (%struct.AVCodecContext*)* @ff_vp8_decode_free, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @vp8_decode_flush, i32 64, i8* null, %struct.AVCodecHWConfigInternal** getelementptr inbounds ([1 x %struct.AVCodecHWConfigInternal*], [1 x %struct.AVCodecHWConfigInternal*]* @.compoundliteral, i32 0, i32 0), i32* null }, align 8
@.str.2 = private unnamed_addr constant [49 x i8] c"Discarding interframe without a prior keyframe!\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"Upscaling\00", align 1
@vp8_pred8x8c_prob_inter = internal unnamed_addr constant [3 x i8] c"\A2e\CC", align 1
@ff_zigzag_scan = external local_unnamed_addr constant [17 x i8], align 16
@vp8_token_default_probs = internal unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]] [[8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\FD\88\FE\FF\E4\DB\80\80\80\80\80", [11 x i8] c"\BD\81\F2\FF\E3\D5\FF\DB\80\80\80", [11 x i8] c"j~\E3\FC\D6\D1\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01b\F8\FF\EC\E2\FF\FF\80\80\80", [11 x i8] c"\B5\85\EE\FE\DD\EA\FF\9A\80\80\80", [11 x i8] c"N\86\CA\F7\C6\B4\FF\DB\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B9\F9\FF\F3\FF\80\80\80\80\80", [11 x i8] c"\B8\96\F7\FF\EC\E0\80\80\80\80\80", [11 x i8] c"Mn\D8\FF\EC\E6\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01e\FB\FF\F1\FF\80\80\80\80\80", [11 x i8] c"\AA\8B\F1\FC\EC\D1\FF\FF\80\80\80", [11 x i8] c"%t\C4\F3\E4\FF\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\CC\FE\FF\F5\FF\80\80\80\80\80", [11 x i8] c"\CF\A0\FA\FF\EE\80\80\80\80\80\80", [11 x i8] c"fg\E7\FF\D3\AB\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\98\FC\FF\F0\FF\80\80\80\80\80", [11 x i8] c"\B1\87\F3\FF\EA\E1\80\80\80\80\80", [11 x i8] c"P\81\D3\FF\C2\E0\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F6\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\C6#\ED\DF\C1\BB\A2\A0\91\9B>", [11 x i8] c"\83-\C6\DD\AC\B0\DC\9D\FC\DD\01", [11 x i8] c"D/\92\D0\95\A7\DD\A2\FF\DF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\95\F1\FF\DD\E0\FF\FF\80\80\80", [11 x i8] c"\B8\8D\EA\FD\DE\DC\FF\C7\80\80\80", [11 x i8] c"Qc\B5\F2\B0\BE\F9\CA\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\81\E8\FD\D6\C5\F2\C4\FF\FF\80", [11 x i8] c"cy\D2\FA\C9\C6\FF\CA\80\80\80", [11 x i8] c"\17[\A3\F2\AA\BB\F7\D2\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\C8\F6\FF\EA\FF\80\80\80\80\80", [11 x i8] c"m\B2\F1\FF\E7\F5\FF\FF\80\80\80", [11 x i8] c",\82\C9\FD\CD\C0\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\84\EF\FB\DB\D1\FF\A5\80\80\80", [11 x i8] c"^\88\E1\FB\DA\BE\FF\FF\80\80\80", [11 x i8] c"\16d\AE\F5\BA\A1\FF\C7\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B6\F9\FF\E8\EB\80\80\80\80\80", [11 x i8] c"|\8F\F1\FF\E3\EA\80\80\80\80\80", [11 x i8] c"#M\B5\FB\C1\D3\FF\CD\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\9D\F7\FF\EC\E7\FF\FF\80\80\80", [11 x i8] c"y\8D\EB\FF\E1\E3\FF\FF\80\80\80", [11 x i8] c"-c\BC\FB\C3\D9\FF\E0\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FB\FF\D5\FF\80\80\80\80\80", [11 x i8] c"\CB\01\F8\FF\FF\80\80\80\80\80\80", [11 x i8] c"\89\01\B1\FF\E0\FF\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\FD\09\F8\FB\CF\D0\FF\C0\80\80\80", [11 x i8] c"\AF\0D\E0\F3\C1\B9\F9\C6\FF\FF\80", [11 x i8] c"I\11\AB\DD\A1\B3\EC\A7\FF\EA\80"], [3 x [11 x i8]] [[11 x i8] c"\01_\F7\FD\D4\B7\FF\FF\80\80\80", [11 x i8] c"\EFZ\F4\FA\D3\D1\FF\FF\80\80\80", [11 x i8] c"\9BM\C3\F8\BC\C3\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\18\EF\FB\DA\DB\FF\CD\80\80\80", [11 x i8] c"\C93\DB\FF\C4\BA\80\80\80\80\80", [11 x i8] c"E.\BE\EF\C9\DA\FF\E4\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\BF\FB\FF\FF\80\80\80\80\80\80", [11 x i8] c"\DF\A5\F9\FF\D5\FF\80\80\80\80\80", [11 x i8] c"\8D|\F8\FF\FF\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\10\F8\FF\FF\80\80\80\80\80\80", [11 x i8] c"\BE$\E6\FF\EC\FF\80\80\80\80\80", [11 x i8] c"\95\01\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\E2\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F7\C0\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F0\80\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\86\FC\FF\FF\80\80\80\80\80\80", [11 x i8] c"\D5>\FA\FF\FF\80\80\80\80\80\80", [11 x i8] c"7]\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\CA\18\D5\EB\BA\BF\DC\A0\F0\AF\FF", [11 x i8] c"~&\B6\E8\A9\B8\E4\AE\FF\BB\80", [11 x i8] c"=.\8A\DB\97\B2\F0\AA\FF\D8\80"], [3 x [11 x i8]] [[11 x i8] c"\01p\E6\FA\C7\BF\F7\9F\FF\FF\80", [11 x i8] c"\A6m\E4\FC\D3\D7\FF\AE\80\80\80", [11 x i8] c"'M\A2\E8\AC\B4\F5\B2\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\014\DC\F6\C6\C7\F9\DC\FF\FF\80", [11 x i8] c"|J\BF\F3\B7\C1\FA\DD\FF\FF\80", [11 x i8] c"\18G\82\DB\9A\AA\F3\B6\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B6\E1\F9\DB\F0\FF\E0\80\80\80", [11 x i8] c"\95\96\E2\FC\D8\CD\FF\AB\80\80\80", [11 x i8] c"\1Cl\AA\F2\B7\C2\FE\DF\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01Q\E6\FC\CC\CB\FF\C0\80\80\80", [11 x i8] c"{f\D1\F7\BC\C4\FF\E9\80\80\80", [11 x i8] c"\14_\99\F3\A4\AD\FF\CB\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\DE\F8\FF\D8\D5\80\80\80\80\80", [11 x i8] c"\A8\AF\F6\FC\EB\CD\FF\FF\80\80\80", [11 x i8] c"/t\D7\FF\D3\D4\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01y\EC\FD\D4\D6\FF\FF\80\80\80", [11 x i8] c"\8DT\D5\FC\C9\CA\FF\DB\80\80\80", [11 x i8] c"*P\A0\F0\A2\B9\FF\CD\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F4\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\EE\01\FF\80\80\80\80\80\80\80\80"]]], align 16
@ff_vp56_norm_shift = external local_unnamed_addr constant [256 x i8], align 16
@vp8_token_update_probs = internal unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]] [[8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\B0\F6\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\DF\F1\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F4\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EA\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F6\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F8\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FD\FF\FE\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FE\FF\FE\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\D9\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\E1\FC\F1\FD\FF\FF\FE\FF\FF\FF\FF", [11 x i8] c"\EA\FA\F1\FA\FD\FF\FD\FE\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\DF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EE\FD\FE\FE\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F8\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F7\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\BA\FB\FA\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EA\FB\F4\FE\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FB\F3\FD\FE\FF\FE\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EC\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FD\FD\FE\FE\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\F8\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FE\FC\FE\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F8\FE\F9\FD\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F6\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FE\FB\FE\FE\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F8\FE\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FB\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F5\FB\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FB\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FC\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]]], align 16
@vp8_coeff_band_indexes = internal unnamed_addr constant <{ <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, [10 x i8], <{ i8, i8, [8 x i8] }> }> <{ <{ i8, i8, [8 x i8] }> <{ i8 0, i8 -1, [8 x i8] zeroinitializer }>, <{ i8, i8, [8 x i8] }> <{ i8 1, i8 -1, [8 x i8] zeroinitializer }>, <{ i8, i8, [8 x i8] }> <{ i8 2, i8 -1, [8 x i8] zeroinitializer }>, <{ i8, i8, [8 x i8] }> <{ i8 3, i8 -1, [8 x i8] zeroinitializer }>, <{ i8, i8, [8 x i8] }> <{ i8 5, i8 -1, [8 x i8] zeroinitializer }>, <{ i8, i8, [8 x i8] }> <{ i8 6, i8 -1, [8 x i8] zeroinitializer }>, [10 x i8] c"\04\07\08\09\0A\0B\0C\0D\0E\FF", <{ i8, i8, [8 x i8] }> <{ i8 15, i8 -1, [8 x i8] zeroinitializer }> }>, align 16
@vp8_mv_update_prob = internal unnamed_addr constant [2 x [19 x i8]] [[19 x i8] c"\ED\F6\FD\FD\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FA\FA\FC\FE\FE", [19 x i8] c"\E7\F3\F5\FD\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FB\FB\FE\FE\FE"], align 16
@.str.7 = private unnamed_addr constant [34 x i8] c"Insufficent data (%d) for header\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"Unknown profile %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [39 x i8] c"Header size larger than data provided\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Invalid start code 0x%x\0A\00", align 1
@vp8_mv_default_prob = internal unnamed_addr constant [2 x [19 x i8]] [[19 x i8] c"\A2\80\E1\92\AC\93\D6'\9C\80\81\84K\91\B2\CE\EF\FE\FE", [19 x i8] c"\A4\80\CC\AAw\EB\8C\E6\E4\80\82\82J\94\B4\CB\EC\FE\FE"], align 16
@.str.11 = private unnamed_addr constant [24 x i8] c"Unspecified colorspace\0A\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"Invalid partitions\0A\00", align 1
@vp8_dc_qlookup = internal unnamed_addr constant [128 x i8] c"\04\05\06\07\08\09\0A\0A\0B\0C\0D\0E\0F\10\11\11\12\13\14\14\15\15\16\16\17\17\18\19\19\1A\1B\1C\1D\1E\1F !\22#$%%&'()*+,-../0123456789:;<=>?@ABCDEFGHIJKLLMNOPQRSTUVWXY[]_`bdefhjlnprtvz|~\80\82\84\86\88\8A\8C\8F\91\94\97\9A\9D", align 16
@vp8_ac_qlookup = internal unnamed_addr constant [128 x i16] [i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 60, i16 62, i16 64, i16 66, i16 68, i16 70, i16 72, i16 74, i16 76, i16 78, i16 80, i16 82, i16 84, i16 86, i16 88, i16 90, i16 92, i16 94, i16 96, i16 98, i16 100, i16 102, i16 104, i16 106, i16 108, i16 110, i16 112, i16 114, i16 116, i16 119, i16 122, i16 125, i16 128, i16 131, i16 134, i16 137, i16 140, i16 143, i16 146, i16 149, i16 152, i16 155, i16 158, i16 161, i16 164, i16 167, i16 170, i16 173, i16 177, i16 181, i16 185, i16 189, i16 193, i16 197, i16 201, i16 205, i16 209, i16 213, i16 217, i16 221, i16 225, i16 229, i16 234, i16 239, i16 245, i16 249, i16 254, i16 259, i16 264, i16 269, i16 274, i16 279, i16 284], align 16
@.str.13 = private unnamed_addr constant [25 x i8] c"Ran out of free frames!\0A\00", align 1
@vp8_pred16x16_tree_intra = internal unnamed_addr constant [4 x [2 x i8]] [[2 x i8] c"\FC\01", [2 x i8] c"\02\03", [2 x i8] c"\00\FE", [2 x i8] c"\FF\FD"], align 1
@vp8_pred16x16_prob_intra = internal unnamed_addr constant [4 x i8] c"\91\9C\A3\80", align 1
@vp8_pred4x4_mode = internal unnamed_addr constant [4 x i8] c"\02\01\00\09", align 1
@vp8_pred8x8c_tree = internal unnamed_addr constant [3 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\FE\02", [2 x i8] c"\FF\FD"], align 1
@vp8_pred8x8c_prob_intra = internal unnamed_addr constant [3 x i8] c"\8Er\B7", align 1
@vp8_pred16x16_tree_inter = internal unnamed_addr constant [4 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\FF", [2 x i8] c"\FD\FC"], align 1
@vp8_pred4x4_prob_intra = internal unnamed_addr constant [10 x [10 x [9 x i8]]] [[10 x [9 x i8]] [[9 x i8] c"'5\C8W\1A\15+\E8\AB", [9 x i8] c"8\223hrf\1D]M", [9 x i8] c"XX\93\96*.-\C4\CD", [9 x i8] c"k6 \1A3\01Q+\1F", [9 x i8] c"'\1CU\AB:\A5Zb@", [9 x i8] c"\22\16t\CE\17\22+\A6I", [9 x i8] c"\22\13\15f\84\BC\10L|", [9 x i8] c"D\19j\16@\AB$\E1r", [9 x i8] c">\12N_U9203", [9 x i8] c"+a\B7uU&#\B3="], [10 x [9 x i8]] [[9 x i8] c"pqMU\B3\FF&xr", [9 x i8] c"(*\01\C4\F5\D1\0A\19m", [9 x i8] c"\C1e#\9F\D7oY.o", [9 x i8] c"dP\08+\9A\013\1AG", [9 x i8] c"X+\1D\8C\A6\D5%+\9A", [9 x i8] c"=?\1E\9BC-D\01\D1", [9 x i8] c")(\05f\D3\B7\04\01\DD", [9 x i8] c"\8ENN\10\FF\80\22\C5\AB", [9 x i8] c"32\11\A8\D1\C0\17\19R", [9 x i8] c"<\94\1F\AC\DB\E4\15\12o"], [10 x [9 x i8]] [[9 x i8] c"\AFE\8FPURH\9Bg", [9 x i8] c"8:\0A\AB\DA\BD\11\0D\98", [9 x i8] c"\E7x0Ysqx\98p", [9 x i8] c"\90G\0A&\AB\D5\90\22\1A", [9 x i8] c"r\1A\11\A3,\C3\15\0A\AD", [9 x i8] c"y\18P\C3\1A>,@U", [9 x i8] c"?\14\08rr\D0\0C\09\E2", [9 x i8] c"\AA.7\13\88\A0!\CEG", [9 x i8] c"Q(\0B`\B6T\1D\10$", [9 x i8] c"\98\B3@~\AAv.F_"], [10 x [9 x i8]] [[9 x i8] c"KO{/3\80Q\AB\01", [9 x i8] c"9\11\05Gf95)1", [9 x i8] c"}b*XhUu\AFR", [9 x i8] c"s\15\02\0Af\FF\A6\17\06", [9 x i8] c"&!\0Dy9I\1A\01U", [9 x i8] c")\0AC\8AMnZ/r", [9 x i8] c"9\12\0Aff\D5\22\14+", [9 x i8] c"e\1D\10\0AU\80e\C4\1A", [9 x i8] c"u\14\0F$\A3\80D\01\1A", [9 x i8] c"_T5Y\80dqe-"], [10 x [9 x i8]] [[9 x i8] c"?;Z\B4;\A6]I\9A", [9 x i8] c"((\15t\8F\D1\22'\AF", [9 x i8] c"\8A\1F$\AB\1B\A6&,\E5", [9 x i8] c"9.\16\18\80\016\11%", [9 x i8] c"/\0F\10\B7\22\DF1-\B7", [9 x i8] c".\11!\B7\06b\0F \B7", [9 x i8] c"(\03\09s3\C0\12\06\DF", [9 x i8] c"A Is\1C\80\17\80\CD", [9 x i8] c"W%\09s;M@\15/", [9 x i8] c"CW:\A9Rs\1A;\B3"], [10 x [9 x i8]] [[9 x i8] c"69p\B8\05)&\A6\D5", [9 x i8] c"\1E\22\1A\85\98t\0A \86", [9 x i8] c"h7,\DA\0965\82\E2", [9 x i8] c"K \0C3\C0\FF\A0+3", [9 x i8] c"'\135\DD\1Ar I\FF", [9 x i8] c"\1F\09A\EA\02\0F\01vI", [9 x i8] c"8\15\17o;\CD-%\C0", [9 x i8] c"X\1F#CfU7\BAU", [9 x i8] c"7&F|If\01\22b", [9 x i8] c"@ZF\CD()\17\1A9"], [10 x [9 x i8]] [[9 x i8] c"V(@\87\94\E0-\B7\80", [9 x i8] c"\16\1A\11\83\F0\9A\0E\01\D1", [9 x i8] c"\A42\1F\89\9A\85\19#\DA", [9 x i8] c"S\0C\0D6\C0\FFD/\1C", [9 x i8] c"-\10\15[@\DE\07\01\C5", [9 x i8] c"8\15'\9B<\8A\17f\D5", [9 x i8] c"\12\0B\07?\90\AB\04\04\F6", [9 x i8] c"U\1AUU\80\80 \92\AB", [9 x i8] c"#\1B\0A\92\AE\AB\0C\1A\80", [9 x i8] c"3g,\83\83{\1F\06\9E"], [10 x [9 x i8]] [[9 x i8] c"D-\80\22\01/\0B\F5\AB", [9 x i8] c">\11\13F\92U7>F", [9 x i8] c"f=G%\225\1F\F3\C0", [9 x i8] c"K\0F\09\09@\FF\B8w\10", [9 x i8] c"%+%\9Ad\A3U\A0\01", [9 x i8] c"?\09\5C\88\1C@ \C9U", [9 x i8] c"8\08\11\84\89\FF7t\80", [9 x i8] c"V\06\1C\05@\FF\19\F8\01", [9 x i8] c":\0F\14R\879\1Ay(", [9 x i8] c"E<G&Iw\1C\DE%"], [10 x [9 x i8]] [[9 x i8] c"eK\80\8Bv\92t\80U", [9 x i8] c"8)\0F\B0\ECU%\09>", [9 x i8] c"\BEP#c\B4P~6-", [9 x i8] c"\92$\13\1E\AB\FFa\1B\14", [9 x i8] c"G\1E\11wv\FF\11\12\8A", [9 x i8] c"e&<\8A7F+\1A\8E", [9 x i8] c" )\14u\97\8E\14\15\A3", [9 x i8] c"\8A-=>\DB\01Q\BC@", [9 x i8] c"p\13\0C=\C3\800\04\18", [9 x i8] c"U~/W\B03)\14 "], [10 x [9 x i8]] [[9 x i8] c"Bf\A7cJ>(\EA\80", [9 x i8] c")5\09\B2\F1\8D\1A\08k", [9 x i8] c"\86\B7Y\89bej\A5\94", [9 x i8] c"hO\0C\1B\D9\FFW\11\07", [9 x i8] c"J+\1A\92I\A61\17\9D", [9 x i8] c"A&i\A034\1Fs\80", [9 x i8] c"/)\0En\B6\B7\15\11\C2", [9 x i8] c"WDG,r3\0F\BA\17", [9 x i8] c"B-\19f\C5\BD\17\12\16", [9 x i8] c"H\BBd\82\9Do KP"]], align 16
@vp8_pred4x4_tree = internal unnamed_addr constant [9 x [2 x i8]] [[2 x i8] c"\FE\01", [2 x i8] c"\F7\02", [2 x i8] c"\00\03", [2 x i8] c"\04\06", [2 x i8] c"\FF\05", [2 x i8] c"\FC\FB", [2 x i8] c"\FD\07", [2 x i8] c"\F9\08", [2 x i8] c"\FA\F8"], align 16
@vp8_pred4x4_prob_inter = internal unnamed_addr constant [9 x i8] c"xZO\85WUPo\97", align 1
@vp8_mbsplits = internal unnamed_addr constant [5 x [16 x i8]] [[16 x i8] c"\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01", [16 x i8] c"\00\00\01\01\00\00\01\01\00\00\01\01\00\00\01\01", [16 x i8] c"\00\00\01\01\00\00\01\01\02\02\03\03\02\02\03\03", [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F", [16 x i8] zeroinitializer], align 16
@vp8_mbsplit_count = internal unnamed_addr constant [4 x i8] c"\02\02\04\10", align 1
@vp8_mbfirstidx = internal unnamed_addr constant <{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, [16 x i8] }> <{ <{ i8, i8, [14 x i8] }> <{ i8 0, i8 8, [14 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 0, i8 2, [14 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 2, i8 8, i8 10, [12 x i8] zeroinitializer }>, [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F" }>, align 16
@vp8_submv_prob = internal unnamed_addr constant [5 x [3 x i8]] [[3 x i8] c"\93\88\12", [3 x i8] c"j\91\01", [3 x i8] c"\B3y\01", [3 x i8] c"\DF\01\22", [3 x i8] c"\D0\01\01"], align 1
@vp8_mode_contexts = internal unnamed_addr constant [6 x [4 x i32]] [[4 x i32] [i32 7, i32 1, i32 1, i32 143], [4 x i32] [i32 14, i32 18, i32 14, i32 107], [4 x i32] [i32 135, i32 64, i32 57, i32 68], [4 x i32] [i32 60, i32 56, i32 128, i32 65], [4 x i32] [i32 159, i32 134, i32 128, i32 34], [4 x i32] [i32 234, i32 188, i32 128, i32 28]], align 16
@subpel_idx = internal unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\00\01\02\01\02\01\02\01", [8 x i8] c"\00\03\05\03\05\03\05\03", [8 x i8] c"\00\02\03\02\03\02\03\02"], align 16
@filter_mb.hev_thresh_lut = internal unnamed_addr constant [2 x [64 x i8]] [[64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03", [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_vp8_decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #0 {
  %5 = alloca [4 x %struct.VP56mv], align 16
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %10 = bitcast i8** %9 to %struct.VP8Context**
  %11 = load %struct.VP8Context*, %struct.VP8Context** %10, align 8
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %13 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29
  %17 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 1
  %18 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %19 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %18, i64 0, i32 20
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %18, i64 0, i32 21
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %14, 3
  %24 = bitcast %struct.AVCodecContext* %18 to i8*
  br i1 %23, label %25, label %26

25:                                               ; preds = %4
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 %14) #7
  br label %5373

26:                                               ; preds = %4
  %27 = load i8, i8* %15, align 1
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 12
  store i8 %29, i8* %30, align 8
  %31 = load i8, i8* %15, align 1
  %32 = lshr i8 %31, 1
  %33 = and i8 %32, 7
  %34 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 15
  store i8 %33, i8* %34, align 1
  %35 = load i8, i8* %15, align 1
  %36 = lshr i8 %35, 4
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 34
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %15, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 16
  %45 = getelementptr inbounds i8, i8* %15, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 8
  %49 = or i32 %48, %44
  %50 = load i8, i8* %15, align 1
  %51 = zext i8 %50 to i32
  %52 = or i32 %49, %51
  %53 = lshr i32 %52, 5
  %54 = getelementptr inbounds i8, i8* %15, i64 3
  %55 = add nsw i32 %14, -3
  %56 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 31
  store i32 %53, i32* %56, align 8
  %57 = icmp ugt i8 %33, 3
  br i1 %57, label %58, label %61

58:                                               ; preds = %26
  %59 = zext i8 %33 to i32
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 24, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i32 %59) #7
  %60 = load i8, i8* %34, align 1
  br label %61

61:                                               ; preds = %58, %26
  %62 = phi i8 [ %60, %58 ], [ %33, %26 ]
  %63 = icmp eq i8 %62, 0
  %64 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 45, i64 0
  %65 = bitcast [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]* %64 to i8*
  %66 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 43, i32 17, i64 0
  %67 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 43, i32 16, i64 0
  %68 = select i1 %63, [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]* %67, [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]* %66
  %69 = bitcast [3 x [3 x void (i8*, i64, i8*, i64, i32, i32, i32)*]]* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %69, i64 216, i1 false) #7
  %70 = load i8, i8* %30, align 8
  %71 = zext i8 %70 to i32
  %72 = mul nsw i32 %71, -7
  %73 = add nsw i32 %72, %55
  %74 = icmp sgt i32 %53, %73
  br i1 %74, label %75, label %78

75:                                               ; preds = %61
  %76 = bitcast %struct.AVCodecContext** %17 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %77, i32 16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0)) #7
  br label %5373

78:                                               ; preds = %61
  %79 = icmp eq i8 %70, 0
  br i1 %79, label %157, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %15, i64 5
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl nuw nsw i32 %83, 16
  %85 = getelementptr inbounds i8, i8* %15, i64 4
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %87, 8
  %89 = or i32 %88, %84
  %90 = load i8, i8* %54, align 1
  %91 = zext i8 %90 to i32
  %92 = or i32 %89, %91
  %93 = icmp eq i32 %92, 2752925
  br i1 %93, label %97, label %94

94:                                               ; preds = %80
  %95 = bitcast %struct.AVCodecContext** %17 to i8**
  %96 = load i8*, i8** %95, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %96, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i32 %92) #7
  br label %5373

97:                                               ; preds = %80
  %98 = getelementptr inbounds i8, i8* %15, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 1
  %101 = and i16 %100, 16383
  %102 = zext i16 %101 to i32
  %103 = getelementptr inbounds i8, i8* %15, i64 8
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 1
  %106 = and i16 %105, 16383
  %107 = zext i16 %106 to i32
  %108 = getelementptr inbounds i8, i8* %15, i64 7
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds i8, i8* %15, i64 9
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds i8, i8* %15, i64 10
  %113 = add nsw i32 %14, -10
  %114 = or i8 %111, %109
  %115 = icmp ugt i8 %114, 63
  br i1 %115, label %116, label %119

116:                                              ; preds = %97
  %117 = bitcast %struct.AVCodecContext** %17 to i8**
  %118 = load i8*, i8** %117, align 8
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* %118, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0)) #7
  br label %119

119:                                              ; preds = %116, %97
  %120 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 37
  store i32 0, i32* %120, align 4
  %121 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 36
  store i32 0, i32* %121, align 8
  br label %122

122:                                              ; preds = %122, %119
  %123 = phi i64 [ 0, %119 ], [ %148, %122 ]
  %124 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 0, i64 0, i64 0
  %125 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 8 %125, i64 33, i1 false) #7
  %126 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 1, i64 0, i64 0
  %127 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 1, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %126, i8* align 1 %127, i64 33, i1 false) #7
  %128 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 2, i64 0, i64 0
  %129 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 2, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 2 %129, i64 33, i1 false) #7
  %130 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 3, i64 0, i64 0
  %131 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 3, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %131, i64 33, i1 false) #7
  %132 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 4, i64 0, i64 0
  %133 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 6, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 2 %133, i64 33, i1 false) #7
  %134 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 5, i64 0, i64 0
  %135 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 4, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* align 4 %135, i64 33, i1 false) #7
  %136 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 6, i64 0, i64 0
  %137 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 5, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %136, i8* align 1 %137, i64 33, i1 false) #7
  %138 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 7, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 2 %133, i64 33, i1 false) #7
  %139 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 8, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 2 %133, i64 33, i1 false) #7
  %140 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 9, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 2 %133, i64 33, i1 false) #7
  %141 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 10, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %141, i8* align 2 %133, i64 33, i1 false) #7
  %142 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 11, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 2 %133, i64 33, i1 false) #7
  %143 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 12, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %143, i8* align 2 %133, i64 33, i1 false) #7
  %144 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 13, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 2 %133, i64 33, i1 false) #7
  %145 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 14, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 2 %133, i64 33, i1 false) #7
  %146 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %123, i64 15, i64 0, i64 0
  %147 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_default_probs, i64 0, i64 %123, i64 7, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %147, i64 33, i1 false) #7
  %148 = add nuw nsw i64 %123, 1
  %149 = icmp eq i64 %148, 4
  br i1 %149, label %150, label %122

150:                                              ; preds = %122
  %151 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 5, i64 0
  %152 = bitcast i8* %151 to i32*
  store i32 629954160, i32* %152, align 1
  %153 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 6, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %153, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @vp8_pred8x8c_prob_inter, i64 0, i64 0), i64 3, i1 false) #7
  %154 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 8, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %154, i8* align 16 getelementptr inbounds ([2 x [19 x i8]], [2 x [19 x i8]]* @vp8_mv_default_prob, i64 0, i64 0, i64 0), i64 38, i1 false) #7
  %155 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %155, i8 0, i64 12, i1 false) #7
  %156 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 26, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %156, i8 0, i64 14, i1 false) #7
  br label %157

157:                                              ; preds = %150, %78
  %158 = phi i8* [ %112, %150 ], [ %54, %78 ]
  %159 = phi i32 [ %113, %150 ], [ %55, %78 ]
  %160 = phi i32 [ %102, %150 ], [ %20, %78 ]
  %161 = phi i32 [ %107, %150 ], [ %22, %78 ]
  %162 = tail call i32 @ff_vp56_init_range_decoder(%struct.VP56RangeCoder* %16, i8* %158, i32 %53) #7
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %5373, label %164

164:                                              ; preds = %157
  %165 = zext i32 %53 to i64
  %166 = getelementptr inbounds i8, i8* %158, i64 %165
  %167 = sub nsw i32 %159, %53
  %168 = load i8, i8* %30, align 8
  %169 = icmp eq i8 %168, 0
  %170 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %16, i64 0, i32 0
  %171 = load i32, i32* %170, align 8
  br i1 %169, label %172, label %177

172:                                              ; preds = %164
  %173 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 4
  %176 = load i32, i32* %175, align 8
  br label %267

177:                                              ; preds = %164
  %178 = sext i32 %171 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 4
  %185 = load i32, i32* %184, align 8
  %186 = shl i32 %171, %181
  store i32 %186, i32* %170, align 8
  %187 = shl i32 %185, %181
  %188 = add nsw i32 %183, %181
  %189 = icmp sgt i32 %188, -1
  br i1 %189, label %190, label %205

190:                                              ; preds = %177
  %191 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %192 = load i8*, i8** %191, align 8
  %193 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %194 = load i8*, i8** %193, align 8
  %195 = icmp ult i8* %192, %194
  br i1 %195, label %196, label %205

196:                                              ; preds = %190
  %197 = getelementptr inbounds i8, i8* %192, i64 2
  store i8* %197, i8** %191, align 8
  %198 = bitcast i8* %192 to i16*
  %199 = load i16, i16* %198, align 1
  %200 = tail call i16 @llvm.bswap.i16(i16 %199) #7
  %201 = zext i16 %200 to i32
  %202 = shl i32 %201, %188
  %203 = or i32 %202, %187
  %204 = add nsw i32 %188, -16
  br label %205

205:                                              ; preds = %196, %190, %177
  %206 = phi i32 [ %204, %196 ], [ %188, %190 ], [ %188, %177 ]
  %207 = phi i32 [ %203, %196 ], [ %187, %190 ], [ %187, %177 ]
  store i32 %206, i32* %182, align 4
  %208 = shl i32 %186, 7
  %209 = add i32 %208, -128
  %210 = ashr i32 %209, 8
  %211 = add nsw i32 %210, 1
  %212 = shl i32 %211, 16
  %213 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %212, i32 %211, i32 %207, i32 0, i32 %186, i32 %207) #8, !srcloc !2
  %214 = extractvalue { i32, i32, i32 } %213, 0
  %215 = extractvalue { i32, i32, i32 } %213, 1
  %216 = extractvalue { i32, i32, i32 } %213, 2
  store i32 %215, i32* %170, align 8
  store i32 %216, i32* %184, align 8
  %217 = trunc i32 %214 to i8
  %218 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 47
  store i8 %217, i8* %218, align 8
  %219 = icmp eq i8 %217, 0
  br i1 %219, label %226, label %220

220:                                              ; preds = %205
  %221 = bitcast %struct.AVCodecContext** %17 to i8**
  %222 = load i8*, i8** %221, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %222, i32 24, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #7
  %223 = load i32, i32* %170, align 8
  %224 = load i32, i32* %182, align 4
  %225 = load i32, i32* %184, align 8
  br label %226

226:                                              ; preds = %220, %205
  %227 = phi i32 [ %216, %205 ], [ %225, %220 ]
  %228 = phi i32 [ %206, %205 ], [ %224, %220 ]
  %229 = phi i32 [ %215, %205 ], [ %223, %220 ]
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = shl i32 %229, %233
  store i32 %234, i32* %170, align 8
  %235 = shl i32 %227, %233
  %236 = add nsw i32 %228, %233
  %237 = icmp sgt i32 %236, -1
  br i1 %237, label %238, label %253

238:                                              ; preds = %226
  %239 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %240 = load i8*, i8** %239, align 8
  %241 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %242 = load i8*, i8** %241, align 8
  %243 = icmp ult i8* %240, %242
  br i1 %243, label %244, label %253

244:                                              ; preds = %238
  %245 = getelementptr inbounds i8, i8* %240, i64 2
  store i8* %245, i8** %239, align 8
  %246 = bitcast i8* %240 to i16*
  %247 = load i16, i16* %246, align 1
  %248 = tail call i16 @llvm.bswap.i16(i16 %247) #7
  %249 = zext i16 %248 to i32
  %250 = shl i32 %249, %236
  %251 = or i32 %250, %235
  %252 = add nsw i32 %236, -16
  br label %253

253:                                              ; preds = %244, %238, %226
  %254 = phi i32 [ %252, %244 ], [ %236, %238 ], [ %236, %226 ]
  %255 = phi i32 [ %251, %244 ], [ %235, %238 ], [ %235, %226 ]
  store i32 %254, i32* %182, align 4
  %256 = shl i32 %234, 7
  %257 = add i32 %256, -128
  %258 = ashr i32 %257, 8
  %259 = add nsw i32 %258, 1
  %260 = shl i32 %259, 16
  %261 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %260, i32 %259, i32 %255, i32 0, i32 %234, i32 %255) #8, !srcloc !2
  %262 = extractvalue { i32, i32, i32 } %261, 0
  %263 = extractvalue { i32, i32, i32 } %261, 1
  %264 = extractvalue { i32, i32, i32 } %261, 2
  store i32 %263, i32* %170, align 8
  store i32 %264, i32* %184, align 8
  %265 = trunc i32 %262 to i8
  %266 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 48
  store i8 %265, i8* %266, align 1
  br label %267

267:                                              ; preds = %253, %172
  %268 = phi i32 [ %176, %172 ], [ %264, %253 ]
  %269 = phi i32 [ %174, %172 ], [ %254, %253 ]
  %270 = phi i32 [ %171, %172 ], [ %263, %253 ]
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 1
  %276 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 4
  %277 = shl i32 %270, %274
  store i32 %277, i32* %170, align 8
  %278 = shl i32 %268, %274
  %279 = add nsw i32 %269, %274
  %280 = icmp sgt i32 %279, -1
  br i1 %280, label %281, label %296

281:                                              ; preds = %267
  %282 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %283 = load i8*, i8** %282, align 8
  %284 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %285 = load i8*, i8** %284, align 8
  %286 = icmp ult i8* %283, %285
  br i1 %286, label %287, label %296

287:                                              ; preds = %281
  %288 = getelementptr inbounds i8, i8* %283, i64 2
  store i8* %288, i8** %282, align 8
  %289 = bitcast i8* %283 to i16*
  %290 = load i16, i16* %289, align 1
  %291 = tail call i16 @llvm.bswap.i16(i16 %290) #7
  %292 = zext i16 %291 to i32
  %293 = shl i32 %292, %279
  %294 = or i32 %293, %278
  %295 = add nsw i32 %279, -16
  br label %296

296:                                              ; preds = %287, %281, %267
  %297 = phi i32 [ %295, %287 ], [ %279, %281 ], [ %279, %267 ]
  %298 = phi i32 [ %294, %287 ], [ %278, %281 ], [ %278, %267 ]
  store i32 %297, i32* %275, align 4
  %299 = shl i32 %277, 7
  %300 = add i32 %299, -128
  %301 = ashr i32 %300, 8
  %302 = add nsw i32 %301, 1
  %303 = shl i32 %302, 16
  %304 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %303, i32 %302, i32 %298, i32 0, i32 %277, i32 %298) #8, !srcloc !2
  %305 = extractvalue { i32, i32, i32 } %304, 0
  %306 = extractvalue { i32, i32, i32 } %304, 1
  %307 = extractvalue { i32, i32, i32 } %304, 2
  store i32 %306, i32* %170, align 8
  store i32 %307, i32* %276, align 8
  %308 = trunc i32 %305 to i8
  %309 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 0
  store i8 %308, i8* %309, align 4
  %310 = icmp eq i8 %308, 0
  br i1 %310, label %554, label %311

311:                                              ; preds = %296
  %312 = sext i32 %306 to i64
  %313 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %312
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i32
  %316 = shl i32 %306, %315
  store i32 %316, i32* %170, align 8
  %317 = shl i32 %307, %315
  %318 = add nsw i32 %297, %315
  %319 = icmp sgt i32 %318, -1
  br i1 %319, label %320, label %335

320:                                              ; preds = %311
  %321 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %322 = load i8*, i8** %321, align 8
  %323 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %324 = load i8*, i8** %323, align 8
  %325 = icmp ult i8* %322, %324
  br i1 %325, label %326, label %335

326:                                              ; preds = %320
  %327 = getelementptr inbounds i8, i8* %322, i64 2
  store i8* %327, i8** %321, align 8
  %328 = bitcast i8* %322 to i16*
  %329 = load i16, i16* %328, align 1
  %330 = tail call i16 @llvm.bswap.i16(i16 %329) #7
  %331 = zext i16 %330 to i32
  %332 = shl i32 %331, %318
  %333 = or i32 %332, %317
  %334 = add nsw i32 %318, -16
  br label %335

335:                                              ; preds = %326, %320, %311
  %336 = phi i32 [ %334, %326 ], [ %318, %320 ], [ %318, %311 ]
  %337 = phi i32 [ %333, %326 ], [ %317, %320 ], [ %317, %311 ]
  store i32 %336, i32* %275, align 4
  %338 = shl i32 %316, 7
  %339 = add i32 %338, -128
  %340 = ashr i32 %339, 8
  %341 = add nsw i32 %340, 1
  %342 = shl i32 %341, 16
  %343 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %342, i32 %341, i32 %337, i32 0, i32 %316, i32 %337) #8, !srcloc !2
  %344 = extractvalue { i32, i32, i32 } %343, 0
  %345 = extractvalue { i32, i32, i32 } %343, 1
  %346 = extractvalue { i32, i32, i32 } %343, 2
  store i32 %346, i32* %276, align 8
  %347 = trunc i32 %344 to i8
  %348 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 2
  store i8 %347, i8* %348, align 2
  %349 = sext i32 %345 to i64
  %350 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %349
  %351 = load i8, i8* %350, align 1
  %352 = zext i8 %351 to i32
  %353 = shl i32 %345, %352
  store i32 %353, i32* %170, align 8
  %354 = shl i32 %346, %352
  %355 = add nsw i32 %336, %352
  %356 = icmp sgt i32 %355, -1
  br i1 %356, label %357, label %372

357:                                              ; preds = %335
  %358 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %359 = load i8*, i8** %358, align 8
  %360 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %361 = load i8*, i8** %360, align 8
  %362 = icmp ult i8* %359, %361
  br i1 %362, label %363, label %372

363:                                              ; preds = %357
  %364 = getelementptr inbounds i8, i8* %359, i64 2
  store i8* %364, i8** %358, align 8
  %365 = bitcast i8* %359 to i16*
  %366 = load i16, i16* %365, align 1
  %367 = tail call i16 @llvm.bswap.i16(i16 %366) #7
  %368 = zext i16 %367 to i32
  %369 = shl i32 %368, %355
  %370 = or i32 %369, %354
  %371 = add nsw i32 %355, -16
  br label %372

372:                                              ; preds = %363, %357, %335
  %373 = phi i32 [ %371, %363 ], [ %355, %357 ], [ %355, %335 ]
  %374 = phi i32 [ %370, %363 ], [ %354, %357 ], [ %354, %335 ]
  store i32 %373, i32* %275, align 4
  %375 = shl i32 %353, 7
  %376 = add i32 %375, -128
  %377 = ashr i32 %376, 8
  %378 = add nsw i32 %377, 1
  %379 = shl i32 %378, 16
  %380 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %379, i32 %378, i32 %374, i32 0, i32 %353, i32 %374) #8, !srcloc !2
  %381 = extractvalue { i32, i32, i32 } %380, 0
  %382 = extractvalue { i32, i32, i32 } %380, 1
  %383 = extractvalue { i32, i32, i32 } %380, 2
  store i32 %382, i32* %170, align 8
  store i32 %383, i32* %276, align 8
  %384 = trunc i32 %381 to i8
  %385 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 3
  store i8 %384, i8* %385, align 1
  %386 = icmp eq i8 %384, 0
  br i1 %386, label %450, label %387

387:                                              ; preds = %372
  %388 = sext i32 %382 to i64
  %389 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = shl i32 %382, %391
  store i32 %392, i32* %170, align 8
  %393 = shl i32 %383, %391
  %394 = add nsw i32 %373, %391
  %395 = icmp sgt i32 %394, -1
  br i1 %395, label %396, label %411

396:                                              ; preds = %387
  %397 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %398 = load i8*, i8** %397, align 8
  %399 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %400 = load i8*, i8** %399, align 8
  %401 = icmp ult i8* %398, %400
  br i1 %401, label %402, label %411

402:                                              ; preds = %396
  %403 = getelementptr inbounds i8, i8* %398, i64 2
  store i8* %403, i8** %397, align 8
  %404 = bitcast i8* %398 to i16*
  %405 = load i16, i16* %404, align 1
  %406 = tail call i16 @llvm.bswap.i16(i16 %405) #7
  %407 = zext i16 %406 to i32
  %408 = shl i32 %407, %394
  %409 = or i32 %408, %393
  %410 = add nsw i32 %394, -16
  br label %411

411:                                              ; preds = %402, %396, %387
  %412 = phi i32 [ %410, %402 ], [ %394, %396 ], [ %394, %387 ]
  %413 = phi i32 [ %409, %402 ], [ %393, %396 ], [ %393, %387 ]
  store i32 %412, i32* %275, align 4
  %414 = shl i32 %392, 7
  %415 = add i32 %414, -128
  %416 = ashr i32 %415, 8
  %417 = add nsw i32 %416, 1
  %418 = shl i32 %417, 16
  %419 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %418, i32 %417, i32 %413, i32 0, i32 %392, i32 %413) #8, !srcloc !2
  %420 = extractvalue { i32, i32, i32 } %419, 0
  %421 = extractvalue { i32, i32, i32 } %419, 1
  %422 = extractvalue { i32, i32, i32 } %419, 2
  store i32 %421, i32* %170, align 8
  store i32 %422, i32* %276, align 8
  %423 = trunc i32 %420 to i8
  %424 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 1
  store i8 %423, i8* %424, align 1
  %425 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 7) #7
  %426 = trunc i32 %425 to i8
  %427 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 4, i64 0
  store i8 %426, i8* %427, align 1
  %428 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 7) #7
  %429 = trunc i32 %428 to i8
  %430 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 4, i64 1
  store i8 %429, i8* %430, align 1
  %431 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 7) #7
  %432 = trunc i32 %431 to i8
  %433 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 4, i64 2
  store i8 %432, i8* %433, align 1
  %434 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 7) #7
  %435 = trunc i32 %434 to i8
  %436 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 4, i64 3
  store i8 %435, i8* %436, align 1
  %437 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 6) #7
  %438 = trunc i32 %437 to i8
  %439 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 5, i64 0
  store i8 %438, i8* %439, align 1
  %440 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 6) #7
  %441 = trunc i32 %440 to i8
  %442 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 5, i64 1
  store i8 %441, i8* %442, align 1
  %443 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 6) #7
  %444 = trunc i32 %443 to i8
  %445 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 5, i64 2
  store i8 %444, i8* %445, align 1
  %446 = tail call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 6) #7
  %447 = trunc i32 %446 to i8
  %448 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 5, i64 3
  store i8 %447, i8* %448, align 1
  %449 = load i8, i8* %348, align 2
  br label %450

450:                                              ; preds = %411, %372
  %451 = phi i8 [ %449, %411 ], [ %347, %372 ]
  %452 = icmp eq i8 %451, 0
  br i1 %452, label %453, label %457

453:                                              ; preds = %450
  %454 = load i32, i32* %170, align 8
  %455 = load i32, i32* %275, align 4
  %456 = load i32, i32* %276, align 8
  br label %556

457:                                              ; preds = %450
  %458 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %459 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %460 = load i32, i32* %170, align 8
  %461 = load i32, i32* %275, align 4
  %462 = load i32, i32* %276, align 8
  br label %463

463:                                              ; preds = %545, %457
  %464 = phi i32 [ %462, %457 ], [ %546, %545 ]
  %465 = phi i32 [ %461, %457 ], [ %547, %545 ]
  %466 = phi i32 [ %460, %457 ], [ %548, %545 ]
  %467 = phi i64 [ 0, %457 ], [ %552, %545 ]
  %468 = sext i32 %466 to i64
  %469 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = shl i32 %466, %471
  store i32 %472, i32* %170, align 8
  %473 = shl i32 %464, %471
  %474 = add nsw i32 %465, %471
  %475 = icmp sgt i32 %474, -1
  br i1 %475, label %476, label %489

476:                                              ; preds = %463
  %477 = load i8*, i8** %458, align 8
  %478 = load i8*, i8** %459, align 8
  %479 = icmp ult i8* %477, %478
  br i1 %479, label %480, label %489

480:                                              ; preds = %476
  %481 = getelementptr inbounds i8, i8* %477, i64 2
  store i8* %481, i8** %458, align 8
  %482 = bitcast i8* %477 to i16*
  %483 = load i16, i16* %482, align 1
  %484 = tail call i16 @llvm.bswap.i16(i16 %483) #7
  %485 = zext i16 %484 to i32
  %486 = shl i32 %485, %474
  %487 = or i32 %486, %473
  %488 = add nsw i32 %474, -16
  br label %489

489:                                              ; preds = %480, %476, %463
  %490 = phi i32 [ %488, %480 ], [ %474, %476 ], [ %474, %463 ]
  %491 = phi i32 [ %487, %480 ], [ %473, %476 ], [ %473, %463 ]
  store i32 %490, i32* %275, align 4
  %492 = shl i32 %472, 7
  %493 = add i32 %492, -128
  %494 = ashr i32 %493, 8
  %495 = add nsw i32 %494, 1
  %496 = shl i32 %495, 16
  %497 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %496, i32 %495, i32 %491, i32 0, i32 %472, i32 %491) #8, !srcloc !2
  %498 = extractvalue { i32, i32, i32 } %497, 0
  %499 = extractvalue { i32, i32, i32 } %497, 1
  %500 = extractvalue { i32, i32, i32 } %497, 2
  store i32 %499, i32* %170, align 8
  store i32 %500, i32* %276, align 8
  %501 = icmp eq i32 %498, 0
  br i1 %501, label %545, label %502

502:                                              ; preds = %489, %531
  %503 = phi i32 [ %542, %531 ], [ %500, %489 ]
  %504 = phi i32 [ %532, %531 ], [ %490, %489 ]
  %505 = phi i32 [ %541, %531 ], [ %499, %489 ]
  %506 = phi i32 [ %543, %531 ], [ 0, %489 ]
  %507 = phi i32 [ %508, %531 ], [ 8, %489 ]
  %508 = add nsw i32 %507, -1
  %509 = shl i32 %506, 1
  %510 = sext i32 %505 to i64
  %511 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %510
  %512 = load i8, i8* %511, align 1
  %513 = zext i8 %512 to i32
  %514 = shl i32 %505, %513
  store i32 %514, i32* %170, align 8
  %515 = shl i32 %503, %513
  %516 = add nsw i32 %504, %513
  %517 = icmp sgt i32 %516, -1
  br i1 %517, label %518, label %531

518:                                              ; preds = %502
  %519 = load i8*, i8** %458, align 8
  %520 = load i8*, i8** %459, align 8
  %521 = icmp ult i8* %519, %520
  br i1 %521, label %522, label %531

522:                                              ; preds = %518
  %523 = getelementptr inbounds i8, i8* %519, i64 2
  store i8* %523, i8** %458, align 8
  %524 = bitcast i8* %519 to i16*
  %525 = load i16, i16* %524, align 1
  %526 = tail call i16 @llvm.bswap.i16(i16 %525) #7
  %527 = zext i16 %526 to i32
  %528 = shl i32 %527, %516
  %529 = or i32 %528, %515
  %530 = add nsw i32 %516, -16
  br label %531

531:                                              ; preds = %522, %518, %502
  %532 = phi i32 [ %530, %522 ], [ %516, %518 ], [ %516, %502 ]
  %533 = phi i32 [ %529, %522 ], [ %515, %518 ], [ %515, %502 ]
  store i32 %532, i32* %275, align 4
  %534 = shl i32 %514, 7
  %535 = add i32 %534, -128
  %536 = ashr i32 %535, 8
  %537 = add nsw i32 %536, 1
  %538 = shl i32 %537, 16
  %539 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %538, i32 %537, i32 %533, i32 0, i32 %514, i32 %533) #8, !srcloc !2
  %540 = extractvalue { i32, i32, i32 } %539, 0
  %541 = extractvalue { i32, i32, i32 } %539, 1
  %542 = extractvalue { i32, i32, i32 } %539, 2
  store i32 %541, i32* %170, align 8
  store i32 %542, i32* %276, align 8
  %543 = or i32 %540, %509
  %544 = icmp eq i32 %508, 0
  br i1 %544, label %545, label %502

545:                                              ; preds = %531, %489
  %546 = phi i32 [ %500, %489 ], [ %542, %531 ]
  %547 = phi i32 [ %490, %489 ], [ %532, %531 ]
  %548 = phi i32 [ %499, %489 ], [ %541, %531 ]
  %549 = phi i32 [ 255, %489 ], [ %543, %531 ]
  %550 = trunc i32 %549 to i8
  %551 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 0, i64 %467
  store i8 %550, i8* %551, align 1
  %552 = add nuw nsw i64 %467, 1
  %553 = icmp eq i64 %552, 3
  br i1 %553, label %556, label %463

554:                                              ; preds = %296
  %555 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 2
  store i8 0, i8* %555, align 2
  br label %556

556:                                              ; preds = %545, %554, %453
  %557 = phi i32 [ %456, %453 ], [ %307, %554 ], [ %546, %545 ]
  %558 = phi i32 [ %455, %453 ], [ %297, %554 ], [ %547, %545 ]
  %559 = phi i32 [ %454, %453 ], [ %306, %554 ], [ %548, %545 ]
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %560
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i32
  %564 = shl i32 %559, %563
  store i32 %564, i32* %170, align 8
  %565 = shl i32 %557, %563
  %566 = add nsw i32 %558, %563
  %567 = icmp sgt i32 %566, -1
  br i1 %567, label %568, label %583

568:                                              ; preds = %556
  %569 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %570 = load i8*, i8** %569, align 8
  %571 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  %572 = load i8*, i8** %571, align 8
  %573 = icmp ult i8* %570, %572
  br i1 %573, label %574, label %583

574:                                              ; preds = %568
  %575 = getelementptr inbounds i8, i8* %570, i64 2
  store i8* %575, i8** %569, align 8
  %576 = bitcast i8* %570 to i16*
  %577 = load i16, i16* %576, align 1
  %578 = tail call i16 @llvm.bswap.i16(i16 %577) #7
  %579 = zext i16 %578 to i32
  %580 = shl i32 %579, %566
  %581 = or i32 %580, %565
  %582 = add nsw i32 %566, -16
  br label %583

583:                                              ; preds = %574, %568, %556
  %584 = phi i32 [ %582, %574 ], [ %566, %568 ], [ %566, %556 ]
  %585 = phi i32 [ %581, %574 ], [ %565, %568 ], [ %565, %556 ]
  store i32 %584, i32* %275, align 4
  %586 = shl i32 %564, 7
  %587 = add i32 %586, -128
  %588 = ashr i32 %587, 8
  %589 = add nsw i32 %588, 1
  %590 = shl i32 %589, 16
  %591 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %590, i32 %589, i32 %585, i32 0, i32 %564, i32 %585) #8, !srcloc !2
  %592 = extractvalue { i32, i32, i32 } %591, 0
  %593 = extractvalue { i32, i32, i32 } %591, 1
  %594 = extractvalue { i32, i32, i32 } %591, 2
  store i32 %593, i32* %170, align 8
  store i32 %594, i32* %276, align 8
  %595 = trunc i32 %592 to i8
  %596 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 20, i32 0
  store i8 %595, i8* %596, align 8
  %597 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 2
  %598 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 3
  br label %599

599:                                              ; preds = %628, %583
  %600 = phi i32 [ %594, %583 ], [ %639, %628 ]
  %601 = phi i32 [ %584, %583 ], [ %629, %628 ]
  %602 = phi i32 [ %593, %583 ], [ %638, %628 ]
  %603 = phi i32 [ 0, %583 ], [ %640, %628 ]
  %604 = phi i32 [ 6, %583 ], [ %605, %628 ]
  %605 = add nsw i32 %604, -1
  %606 = shl i32 %603, 1
  %607 = sext i32 %602 to i64
  %608 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %607
  %609 = load i8, i8* %608, align 1
  %610 = zext i8 %609 to i32
  %611 = shl i32 %602, %610
  store i32 %611, i32* %170, align 8
  %612 = shl i32 %600, %610
  %613 = add nsw i32 %601, %610
  %614 = icmp sgt i32 %613, -1
  br i1 %614, label %615, label %628

615:                                              ; preds = %599
  %616 = load i8*, i8** %597, align 8
  %617 = load i8*, i8** %598, align 8
  %618 = icmp ult i8* %616, %617
  br i1 %618, label %619, label %628

619:                                              ; preds = %615
  %620 = getelementptr inbounds i8, i8* %616, i64 2
  store i8* %620, i8** %597, align 8
  %621 = bitcast i8* %616 to i16*
  %622 = load i16, i16* %621, align 1
  %623 = tail call i16 @llvm.bswap.i16(i16 %622) #7
  %624 = zext i16 %623 to i32
  %625 = shl i32 %624, %613
  %626 = or i32 %625, %612
  %627 = add nsw i32 %613, -16
  br label %628

628:                                              ; preds = %619, %615, %599
  %629 = phi i32 [ %627, %619 ], [ %613, %615 ], [ %613, %599 ]
  %630 = phi i32 [ %626, %619 ], [ %612, %615 ], [ %612, %599 ]
  store i32 %629, i32* %275, align 4
  %631 = shl i32 %611, 7
  %632 = add i32 %631, -128
  %633 = ashr i32 %632, 8
  %634 = add nsw i32 %633, 1
  %635 = shl i32 %634, 16
  %636 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %635, i32 %634, i32 %630, i32 0, i32 %611, i32 %630) #8, !srcloc !2
  %637 = extractvalue { i32, i32, i32 } %636, 0
  %638 = extractvalue { i32, i32, i32 } %636, 1
  %639 = extractvalue { i32, i32, i32 } %636, 2
  store i32 %638, i32* %170, align 8
  store i32 %639, i32* %276, align 8
  %640 = or i32 %637, %606
  %641 = icmp eq i32 %605, 0
  br i1 %641, label %642, label %599

642:                                              ; preds = %628
  %643 = trunc i32 %640 to i8
  %644 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 20, i32 1
  store i8 %643, i8* %644, align 1
  %645 = sext i32 %638 to i64
  %646 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %645
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i32
  %649 = shl i32 %638, %648
  store i32 %649, i32* %170, align 8
  %650 = shl i32 %639, %648
  %651 = add nsw i32 %629, %648
  %652 = icmp sgt i32 %651, -1
  br i1 %652, label %653, label %666

653:                                              ; preds = %642
  %654 = load i8*, i8** %597, align 8
  %655 = load i8*, i8** %598, align 8
  %656 = icmp ult i8* %654, %655
  br i1 %656, label %657, label %666

657:                                              ; preds = %653
  %658 = getelementptr inbounds i8, i8* %654, i64 2
  store i8* %658, i8** %597, align 8
  %659 = bitcast i8* %654 to i16*
  %660 = load i16, i16* %659, align 1
  %661 = tail call i16 @llvm.bswap.i16(i16 %660) #7
  %662 = zext i16 %661 to i32
  %663 = shl i32 %662, %651
  %664 = or i32 %663, %650
  %665 = add nsw i32 %651, -16
  br label %666

666:                                              ; preds = %657, %653, %642
  %667 = phi i32 [ %665, %657 ], [ %651, %653 ], [ %651, %642 ]
  %668 = phi i32 [ %664, %657 ], [ %650, %653 ], [ %650, %642 ]
  store i32 %667, i32* %275, align 4
  %669 = shl i32 %649, 7
  %670 = add i32 %669, -128
  %671 = ashr i32 %670, 8
  %672 = add nsw i32 %671, 1
  %673 = shl i32 %672, 16
  %674 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %673, i32 %672, i32 %668, i32 0, i32 %649, i32 %668) #8, !srcloc !2
  %675 = extractvalue { i32, i32, i32 } %674, 0
  %676 = extractvalue { i32, i32, i32 } %674, 1
  %677 = extractvalue { i32, i32, i32 } %674, 2
  store i32 %677, i32* %276, align 8
  %678 = shl i32 %675, 1
  %679 = sext i32 %676 to i64
  %680 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %679
  %681 = load i8, i8* %680, align 1
  %682 = zext i8 %681 to i32
  %683 = shl i32 %676, %682
  store i32 %683, i32* %170, align 8
  %684 = shl i32 %677, %682
  %685 = add nsw i32 %667, %682
  %686 = icmp sgt i32 %685, -1
  br i1 %686, label %2487, label %2500

687:                                              ; preds = %2535
  %688 = load i8*, i8** %597, align 8
  %689 = load i8*, i8** %598, align 8
  %690 = icmp ult i8* %688, %689
  br i1 %690, label %691, label %700

691:                                              ; preds = %687
  %692 = getelementptr inbounds i8, i8* %688, i64 2
  store i8* %692, i8** %597, align 8
  %693 = bitcast i8* %688 to i16*
  %694 = load i16, i16* %693, align 1
  %695 = tail call i16 @llvm.bswap.i16(i16 %694) #7
  %696 = zext i16 %695 to i32
  %697 = shl i32 %696, %2556
  %698 = or i32 %697, %2555
  %699 = add nsw i32 %2556, -16
  br label %700

700:                                              ; preds = %2535, %691, %687
  %701 = phi i32 [ %699, %691 ], [ %2556, %687 ], [ %2556, %2535 ]
  %702 = phi i32 [ %698, %691 ], [ %2555, %687 ], [ %2555, %2535 ]
  store i32 %701, i32* %275, align 4
  %703 = shl i32 %2554, 7
  %704 = add i32 %703, -128
  %705 = ashr i32 %704, 8
  %706 = add nsw i32 %705, 1
  %707 = shl i32 %706, 16
  %708 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %707, i32 %706, i32 %702, i32 0, i32 %2554, i32 %702) #8, !srcloc !2
  %709 = extractvalue { i32, i32, i32 } %708, 0
  %710 = extractvalue { i32, i32, i32 } %708, 1
  %711 = extractvalue { i32, i32, i32 } %708, 2
  store i32 %710, i32* %170, align 8
  store i32 %711, i32* %276, align 8
  %712 = trunc i32 %709 to i8
  %713 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 26, i32 0
  store i8 %712, i8* %713, align 4
  %714 = icmp eq i8 %712, 0
  br i1 %714, label %1018, label %715

715:                                              ; preds = %700
  %716 = sext i32 %710 to i64
  %717 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %716
  %718 = load i8, i8* %717, align 1
  %719 = zext i8 %718 to i32
  %720 = shl i32 %710, %719
  store i32 %720, i32* %170, align 8
  %721 = shl i32 %711, %719
  %722 = add nsw i32 %701, %719
  %723 = icmp sgt i32 %722, -1
  br i1 %723, label %724, label %737

724:                                              ; preds = %715
  %725 = load i8*, i8** %597, align 8
  %726 = load i8*, i8** %598, align 8
  %727 = icmp ult i8* %725, %726
  br i1 %727, label %728, label %737

728:                                              ; preds = %724
  %729 = getelementptr inbounds i8, i8* %725, i64 2
  store i8* %729, i8** %597, align 8
  %730 = bitcast i8* %725 to i16*
  %731 = load i16, i16* %730, align 1
  %732 = tail call i16 @llvm.bswap.i16(i16 %731) #7
  %733 = zext i16 %732 to i32
  %734 = shl i32 %733, %722
  %735 = or i32 %734, %721
  %736 = add nsw i32 %722, -16
  br label %737

737:                                              ; preds = %728, %724, %715
  %738 = phi i32 [ %736, %728 ], [ %722, %724 ], [ %722, %715 ]
  %739 = phi i32 [ %735, %728 ], [ %721, %724 ], [ %721, %715 ]
  store i32 %738, i32* %275, align 4
  %740 = shl i32 %720, 7
  %741 = add i32 %740, -128
  %742 = ashr i32 %741, 8
  %743 = add nsw i32 %742, 1
  %744 = shl i32 %743, 16
  %745 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %744, i32 %743, i32 %739, i32 0, i32 %720, i32 %739) #8, !srcloc !2
  %746 = extractvalue { i32, i32, i32 } %745, 0
  %747 = extractvalue { i32, i32, i32 } %745, 1
  %748 = extractvalue { i32, i32, i32 } %745, 2
  store i32 %747, i32* %170, align 8
  store i32 %748, i32* %276, align 8
  %749 = trunc i32 %746 to i8
  %750 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 26, i32 1
  store i8 %749, i8* %750, align 1
  %751 = icmp eq i8 %749, 0
  br i1 %751, label %1018, label %752

752:                                              ; preds = %737
  %753 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 0
  br label %754

754:                                              ; preds = %882, %752
  %755 = phi i32 [ %748, %752 ], [ %885, %882 ]
  %756 = phi i32 [ %738, %752 ], [ %884, %882 ]
  %757 = phi i32 [ %747, %752 ], [ %883, %882 ]
  %758 = phi i64 [ 0, %752 ], [ %880, %882 ]
  %759 = sext i32 %757 to i64
  %760 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %759
  %761 = load i8, i8* %760, align 1
  %762 = zext i8 %761 to i32
  %763 = shl i32 %757, %762
  store i32 %763, i32* %753, align 8
  %764 = shl i32 %755, %762
  %765 = add nsw i32 %756, %762
  %766 = icmp sgt i32 %765, -1
  br i1 %766, label %767, label %780

767:                                              ; preds = %754
  %768 = load i8*, i8** %597, align 8
  %769 = load i8*, i8** %598, align 8
  %770 = icmp ult i8* %768, %769
  br i1 %770, label %771, label %780

771:                                              ; preds = %767
  %772 = getelementptr inbounds i8, i8* %768, i64 2
  store i8* %772, i8** %597, align 8
  %773 = bitcast i8* %768 to i16*
  %774 = load i16, i16* %773, align 1
  %775 = tail call i16 @llvm.bswap.i16(i16 %774) #7
  %776 = zext i16 %775 to i32
  %777 = shl i32 %776, %765
  %778 = or i32 %777, %764
  %779 = add nsw i32 %765, -16
  br label %780

780:                                              ; preds = %771, %767, %754
  %781 = phi i32 [ %779, %771 ], [ %765, %767 ], [ %765, %754 ]
  %782 = phi i32 [ %778, %771 ], [ %764, %767 ], [ %764, %754 ]
  store i32 %781, i32* %275, align 4
  %783 = shl i32 %763, 7
  %784 = add i32 %783, -128
  %785 = ashr i32 %784, 8
  %786 = add nsw i32 %785, 1
  %787 = shl i32 %786, 16
  %788 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %787, i32 %786, i32 %782, i32 0, i32 %763, i32 %782) #8, !srcloc !2
  %789 = extractvalue { i32, i32, i32 } %788, 0
  %790 = extractvalue { i32, i32, i32 } %788, 1
  %791 = extractvalue { i32, i32, i32 } %788, 2
  store i32 %790, i32* %753, align 8
  store i32 %791, i32* %276, align 8
  %792 = icmp eq i32 %789, 0
  br i1 %792, label %879, label %793

793:                                              ; preds = %780, %822
  %794 = phi i32 [ %833, %822 ], [ %791, %780 ]
  %795 = phi i32 [ %823, %822 ], [ %781, %780 ]
  %796 = phi i32 [ %832, %822 ], [ %790, %780 ]
  %797 = phi i32 [ %834, %822 ], [ 0, %780 ]
  %798 = phi i32 [ %799, %822 ], [ 6, %780 ]
  %799 = add nsw i32 %798, -1
  %800 = shl i32 %797, 1
  %801 = sext i32 %796 to i64
  %802 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %801
  %803 = load i8, i8* %802, align 1
  %804 = zext i8 %803 to i32
  %805 = shl i32 %796, %804
  store i32 %805, i32* %753, align 8
  %806 = shl i32 %794, %804
  %807 = add nsw i32 %795, %804
  %808 = icmp sgt i32 %807, -1
  br i1 %808, label %809, label %822

809:                                              ; preds = %793
  %810 = load i8*, i8** %597, align 8
  %811 = load i8*, i8** %598, align 8
  %812 = icmp ult i8* %810, %811
  br i1 %812, label %813, label %822

813:                                              ; preds = %809
  %814 = getelementptr inbounds i8, i8* %810, i64 2
  store i8* %814, i8** %597, align 8
  %815 = bitcast i8* %810 to i16*
  %816 = load i16, i16* %815, align 1
  %817 = tail call i16 @llvm.bswap.i16(i16 %816) #7
  %818 = zext i16 %817 to i32
  %819 = shl i32 %818, %807
  %820 = or i32 %819, %806
  %821 = add nsw i32 %807, -16
  br label %822

822:                                              ; preds = %813, %809, %793
  %823 = phi i32 [ %821, %813 ], [ %807, %809 ], [ %807, %793 ]
  %824 = phi i32 [ %820, %813 ], [ %806, %809 ], [ %806, %793 ]
  store i32 %823, i32* %275, align 4
  %825 = shl i32 %805, 7
  %826 = add i32 %825, -128
  %827 = ashr i32 %826, 8
  %828 = add nsw i32 %827, 1
  %829 = shl i32 %828, 16
  %830 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %829, i32 %828, i32 %824, i32 0, i32 %805, i32 %824) #8, !srcloc !2
  %831 = extractvalue { i32, i32, i32 } %830, 0
  %832 = extractvalue { i32, i32, i32 } %830, 1
  %833 = extractvalue { i32, i32, i32 } %830, 2
  store i32 %832, i32* %753, align 8
  store i32 %833, i32* %276, align 8
  %834 = or i32 %831, %800
  %835 = icmp eq i32 %799, 0
  br i1 %835, label %836, label %793

836:                                              ; preds = %822
  %837 = trunc i32 %834 to i8
  %838 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 26, i32 3, i64 %758
  store i8 %837, i8* %838, align 1
  %839 = load i32, i32* %753, align 8
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %840
  %842 = load i8, i8* %841, align 1
  %843 = zext i8 %842 to i32
  %844 = load i32, i32* %275, align 4
  %845 = load i32, i32* %276, align 8
  %846 = shl i32 %839, %843
  store i32 %846, i32* %753, align 8
  %847 = shl i32 %845, %843
  %848 = add nsw i32 %844, %843
  %849 = icmp sgt i32 %848, -1
  br i1 %849, label %850, label %863

850:                                              ; preds = %836
  %851 = load i8*, i8** %597, align 8
  %852 = load i8*, i8** %598, align 8
  %853 = icmp ult i8* %851, %852
  br i1 %853, label %854, label %863

854:                                              ; preds = %850
  %855 = getelementptr inbounds i8, i8* %851, i64 2
  store i8* %855, i8** %597, align 8
  %856 = bitcast i8* %851 to i16*
  %857 = load i16, i16* %856, align 1
  %858 = tail call i16 @llvm.bswap.i16(i16 %857) #7
  %859 = zext i16 %858 to i32
  %860 = shl i32 %859, %848
  %861 = or i32 %860, %847
  %862 = add nsw i32 %848, -16
  br label %863

863:                                              ; preds = %854, %850, %836
  %864 = phi i32 [ %862, %854 ], [ %848, %850 ], [ %848, %836 ]
  %865 = phi i32 [ %861, %854 ], [ %847, %850 ], [ %847, %836 ]
  store i32 %864, i32* %275, align 4
  %866 = shl i32 %846, 7
  %867 = add i32 %866, -128
  %868 = ashr i32 %867, 8
  %869 = add nsw i32 %868, 1
  %870 = shl i32 %869, 16
  %871 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %870, i32 %869, i32 %865, i32 0, i32 %846, i32 %865) #8, !srcloc !2
  %872 = extractvalue { i32, i32, i32 } %871, 0
  %873 = extractvalue { i32, i32, i32 } %871, 1
  %874 = extractvalue { i32, i32, i32 } %871, 2
  store i32 %873, i32* %753, align 8
  store i32 %874, i32* %276, align 8
  %875 = icmp eq i32 %872, 0
  br i1 %875, label %879, label %876

876:                                              ; preds = %863
  %877 = load i8, i8* %838, align 1
  %878 = sub i8 0, %877
  store i8 %878, i8* %838, align 1
  br label %879

879:                                              ; preds = %876, %863, %780
  %880 = add nuw nsw i64 %758, 1
  %881 = icmp eq i64 %880, 4
  br i1 %881, label %886, label %882

882:                                              ; preds = %879
  %883 = load i32, i32* %753, align 8
  %884 = load i32, i32* %275, align 4
  %885 = load i32, i32* %276, align 8
  br label %754

886:                                              ; preds = %879, %1011
  %887 = phi i64 [ %1012, %1011 ], [ 4, %879 ]
  %888 = load i32, i32* %753, align 8
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %889
  %891 = load i8, i8* %890, align 1
  %892 = zext i8 %891 to i32
  %893 = load i32, i32* %275, align 4
  %894 = load i32, i32* %276, align 8
  %895 = shl i32 %888, %892
  store i32 %895, i32* %753, align 8
  %896 = shl i32 %894, %892
  %897 = add nsw i32 %893, %892
  %898 = icmp sgt i32 %897, -1
  br i1 %898, label %899, label %912

899:                                              ; preds = %886
  %900 = load i8*, i8** %597, align 8
  %901 = load i8*, i8** %598, align 8
  %902 = icmp ult i8* %900, %901
  br i1 %902, label %903, label %912

903:                                              ; preds = %899
  %904 = getelementptr inbounds i8, i8* %900, i64 2
  store i8* %904, i8** %597, align 8
  %905 = bitcast i8* %900 to i16*
  %906 = load i16, i16* %905, align 1
  %907 = tail call i16 @llvm.bswap.i16(i16 %906) #7
  %908 = zext i16 %907 to i32
  %909 = shl i32 %908, %897
  %910 = or i32 %909, %896
  %911 = add nsw i32 %897, -16
  br label %912

912:                                              ; preds = %903, %899, %886
  %913 = phi i32 [ %911, %903 ], [ %897, %899 ], [ %897, %886 ]
  %914 = phi i32 [ %910, %903 ], [ %896, %899 ], [ %896, %886 ]
  store i32 %913, i32* %275, align 4
  %915 = shl i32 %895, 7
  %916 = add i32 %915, -128
  %917 = ashr i32 %916, 8
  %918 = add nsw i32 %917, 1
  %919 = shl i32 %918, 16
  %920 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %919, i32 %918, i32 %914, i32 0, i32 %895, i32 %914) #8, !srcloc !2
  %921 = extractvalue { i32, i32, i32 } %920, 0
  %922 = extractvalue { i32, i32, i32 } %920, 1
  %923 = extractvalue { i32, i32, i32 } %920, 2
  store i32 %922, i32* %753, align 8
  store i32 %923, i32* %276, align 8
  %924 = icmp eq i32 %921, 0
  br i1 %924, label %1011, label %925

925:                                              ; preds = %912, %954
  %926 = phi i32 [ %965, %954 ], [ %923, %912 ]
  %927 = phi i32 [ %955, %954 ], [ %913, %912 ]
  %928 = phi i32 [ %964, %954 ], [ %922, %912 ]
  %929 = phi i32 [ %966, %954 ], [ 0, %912 ]
  %930 = phi i32 [ %931, %954 ], [ 6, %912 ]
  %931 = add nsw i32 %930, -1
  %932 = shl i32 %929, 1
  %933 = sext i32 %928 to i64
  %934 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %933
  %935 = load i8, i8* %934, align 1
  %936 = zext i8 %935 to i32
  %937 = shl i32 %928, %936
  store i32 %937, i32* %753, align 8
  %938 = shl i32 %926, %936
  %939 = add nsw i32 %927, %936
  %940 = icmp sgt i32 %939, -1
  br i1 %940, label %941, label %954

941:                                              ; preds = %925
  %942 = load i8*, i8** %597, align 8
  %943 = load i8*, i8** %598, align 8
  %944 = icmp ult i8* %942, %943
  br i1 %944, label %945, label %954

945:                                              ; preds = %941
  %946 = getelementptr inbounds i8, i8* %942, i64 2
  store i8* %946, i8** %597, align 8
  %947 = bitcast i8* %942 to i16*
  %948 = load i16, i16* %947, align 1
  %949 = tail call i16 @llvm.bswap.i16(i16 %948) #7
  %950 = zext i16 %949 to i32
  %951 = shl i32 %950, %939
  %952 = or i32 %951, %938
  %953 = add nsw i32 %939, -16
  br label %954

954:                                              ; preds = %945, %941, %925
  %955 = phi i32 [ %953, %945 ], [ %939, %941 ], [ %939, %925 ]
  %956 = phi i32 [ %952, %945 ], [ %938, %941 ], [ %938, %925 ]
  store i32 %955, i32* %275, align 4
  %957 = shl i32 %937, 7
  %958 = add i32 %957, -128
  %959 = ashr i32 %958, 8
  %960 = add nsw i32 %959, 1
  %961 = shl i32 %960, 16
  %962 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %961, i32 %960, i32 %956, i32 0, i32 %937, i32 %956) #8, !srcloc !2
  %963 = extractvalue { i32, i32, i32 } %962, 0
  %964 = extractvalue { i32, i32, i32 } %962, 1
  %965 = extractvalue { i32, i32, i32 } %962, 2
  store i32 %964, i32* %753, align 8
  store i32 %965, i32* %276, align 8
  %966 = or i32 %963, %932
  %967 = icmp eq i32 %931, 0
  br i1 %967, label %968, label %925

968:                                              ; preds = %954
  %969 = trunc i32 %966 to i8
  %970 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 26, i32 2, i64 %887
  store i8 %969, i8* %970, align 1
  %971 = load i32, i32* %753, align 8
  %972 = sext i32 %971 to i64
  %973 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %972
  %974 = load i8, i8* %973, align 1
  %975 = zext i8 %974 to i32
  %976 = load i32, i32* %275, align 4
  %977 = load i32, i32* %276, align 8
  %978 = shl i32 %971, %975
  store i32 %978, i32* %753, align 8
  %979 = shl i32 %977, %975
  %980 = add nsw i32 %976, %975
  %981 = icmp sgt i32 %980, -1
  br i1 %981, label %982, label %995

982:                                              ; preds = %968
  %983 = load i8*, i8** %597, align 8
  %984 = load i8*, i8** %598, align 8
  %985 = icmp ult i8* %983, %984
  br i1 %985, label %986, label %995

986:                                              ; preds = %982
  %987 = getelementptr inbounds i8, i8* %983, i64 2
  store i8* %987, i8** %597, align 8
  %988 = bitcast i8* %983 to i16*
  %989 = load i16, i16* %988, align 1
  %990 = tail call i16 @llvm.bswap.i16(i16 %989) #7
  %991 = zext i16 %990 to i32
  %992 = shl i32 %991, %980
  %993 = or i32 %992, %979
  %994 = add nsw i32 %980, -16
  br label %995

995:                                              ; preds = %986, %982, %968
  %996 = phi i32 [ %994, %986 ], [ %980, %982 ], [ %980, %968 ]
  %997 = phi i32 [ %993, %986 ], [ %979, %982 ], [ %979, %968 ]
  store i32 %996, i32* %275, align 4
  %998 = shl i32 %978, 7
  %999 = add i32 %998, -128
  %1000 = ashr i32 %999, 8
  %1001 = add nsw i32 %1000, 1
  %1002 = shl i32 %1001, 16
  %1003 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1002, i32 %1001, i32 %997, i32 0, i32 %978, i32 %997) #8, !srcloc !2
  %1004 = extractvalue { i32, i32, i32 } %1003, 0
  %1005 = extractvalue { i32, i32, i32 } %1003, 1
  %1006 = extractvalue { i32, i32, i32 } %1003, 2
  store i32 %1005, i32* %753, align 8
  store i32 %1006, i32* %276, align 8
  %1007 = icmp eq i32 %1004, 0
  br i1 %1007, label %1011, label %1008

1008:                                             ; preds = %995
  %1009 = load i8, i8* %970, align 1
  %1010 = sub i8 0, %1009
  store i8 %1010, i8* %970, align 1
  br label %1011

1011:                                             ; preds = %1008, %995, %912
  %1012 = add nuw nsw i64 %887, 1
  %1013 = icmp eq i64 %1012, 8
  br i1 %1013, label %1014, label %886

1014:                                             ; preds = %1011
  %1015 = load i32, i32* %753, align 8
  %1016 = load i32, i32* %275, align 4
  %1017 = load i32, i32* %276, align 8
  br label %1018

1018:                                             ; preds = %1014, %737, %700
  %1019 = phi i32 [ %1017, %1014 ], [ %748, %737 ], [ %711, %700 ]
  %1020 = phi i32 [ %1016, %1014 ], [ %738, %737 ], [ %701, %700 ]
  %1021 = phi i32 [ %1015, %1014 ], [ %747, %737 ], [ %710, %700 ]
  %1022 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 29, i32 0
  %1023 = sext i32 %1021 to i64
  %1024 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1023
  %1025 = load i8, i8* %1024, align 1
  %1026 = zext i8 %1025 to i32
  %1027 = shl i32 %1021, %1026
  store i32 %1027, i32* %1022, align 8
  %1028 = shl i32 %1019, %1026
  %1029 = add nsw i32 %1020, %1026
  %1030 = icmp sgt i32 %1029, -1
  br i1 %1030, label %1031, label %1044

1031:                                             ; preds = %1018
  %1032 = load i8*, i8** %597, align 8
  %1033 = load i8*, i8** %598, align 8
  %1034 = icmp ult i8* %1032, %1033
  br i1 %1034, label %1035, label %1044

1035:                                             ; preds = %1031
  %1036 = getelementptr inbounds i8, i8* %1032, i64 2
  store i8* %1036, i8** %597, align 8
  %1037 = bitcast i8* %1032 to i16*
  %1038 = load i16, i16* %1037, align 1
  %1039 = tail call i16 @llvm.bswap.i16(i16 %1038) #7
  %1040 = zext i16 %1039 to i32
  %1041 = shl i32 %1040, %1029
  %1042 = or i32 %1041, %1028
  %1043 = add nsw i32 %1029, -16
  br label %1044

1044:                                             ; preds = %1035, %1031, %1018
  %1045 = phi i32 [ %1043, %1035 ], [ %1029, %1031 ], [ %1029, %1018 ]
  %1046 = phi i32 [ %1042, %1035 ], [ %1028, %1031 ], [ %1028, %1018 ]
  store i32 %1045, i32* %275, align 4
  %1047 = shl i32 %1027, 7
  %1048 = add i32 %1047, -128
  %1049 = ashr i32 %1048, 8
  %1050 = add nsw i32 %1049, 1
  %1051 = shl i32 %1050, 16
  %1052 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1051, i32 %1050, i32 %1046, i32 0, i32 %1027, i32 %1046) #8, !srcloc !2
  %1053 = extractvalue { i32, i32, i32 } %1052, 0
  %1054 = extractvalue { i32, i32, i32 } %1052, 1
  %1055 = extractvalue { i32, i32, i32 } %1052, 2
  store i32 %1055, i32* %276, align 8
  %1056 = shl i32 %1053, 1
  %1057 = sext i32 %1054 to i64
  %1058 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1057
  %1059 = load i8, i8* %1058, align 1
  %1060 = zext i8 %1059 to i32
  %1061 = shl i32 %1054, %1060
  store i32 %1061, i32* %1022, align 8
  %1062 = shl i32 %1055, %1060
  %1063 = add nsw i32 %1045, %1060
  %1064 = icmp sgt i32 %1063, -1
  br i1 %1064, label %1106, label %1119

1065:                                             ; preds = %1119
  %1066 = add i32 %1134, -3
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds i8, i8* %166, i64 %1067
  %1069 = icmp sgt i32 %1132, 1
  br i1 %1069, label %1070, label %1141

1070:                                             ; preds = %1065, %1096
  %1071 = phi i64 [ %1099, %1096 ], [ 0, %1065 ]
  %1072 = phi i32 [ %1089, %1096 ], [ %1136, %1065 ]
  %1073 = phi i8* [ %1098, %1096 ], [ %1068, %1065 ]
  %1074 = mul nuw nsw i64 %1071, 3
  %1075 = and i64 %1074, 4294967295
  %1076 = getelementptr inbounds i8, i8* %166, i64 %1075
  %1077 = getelementptr inbounds i8, i8* %1076, i64 2
  %1078 = load i8, i8* %1077, align 1
  %1079 = zext i8 %1078 to i32
  %1080 = shl nuw nsw i32 %1079, 16
  %1081 = getelementptr inbounds i8, i8* %1076, i64 1
  %1082 = load i8, i8* %1081, align 1
  %1083 = zext i8 %1082 to i32
  %1084 = shl nuw nsw i32 %1083, 8
  %1085 = or i32 %1084, %1080
  %1086 = load i8, i8* %1076, align 1
  %1087 = zext i8 %1086 to i32
  %1088 = or i32 %1085, %1087
  %1089 = sub nsw i32 %1072, %1088
  %1090 = icmp slt i32 %1089, 0
  br i1 %1090, label %1138, label %1091

1091:                                             ; preds = %1070
  %1092 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 41, i64 %1071
  store i32 %1088, i32* %1092, align 4
  %1093 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 40, i64 %1071
  %1094 = tail call i32 @ff_vp56_init_range_decoder(%struct.VP56RangeCoder* %1093, i8* %1073, i32 %1088) #7
  %1095 = icmp slt i32 %1094, 0
  br i1 %1095, label %1138, label %1096

1096:                                             ; preds = %1091
  %1097 = zext i32 %1088 to i64
  %1098 = getelementptr inbounds i8, i8* %1073, i64 %1097
  %1099 = add nuw nsw i64 %1071, 1
  %1100 = load i32, i32* %1133, align 4
  %1101 = add nsw i32 %1100, -1
  %1102 = sext i32 %1101 to i64
  %1103 = icmp slt i64 %1099, %1102
  br i1 %1103, label %1070, label %1104

1104:                                             ; preds = %1096
  %1105 = and i64 %1099, 4294967295
  br label %1141

1106:                                             ; preds = %1044
  %1107 = load i8*, i8** %597, align 8
  %1108 = load i8*, i8** %598, align 8
  %1109 = icmp ult i8* %1107, %1108
  br i1 %1109, label %1110, label %1119

1110:                                             ; preds = %1106
  %1111 = getelementptr inbounds i8, i8* %1107, i64 2
  store i8* %1111, i8** %597, align 8
  %1112 = bitcast i8* %1107 to i16*
  %1113 = load i16, i16* %1112, align 1
  %1114 = tail call i16 @llvm.bswap.i16(i16 %1113) #7
  %1115 = zext i16 %1114 to i32
  %1116 = shl i32 %1115, %1063
  %1117 = or i32 %1116, %1062
  %1118 = add nsw i32 %1063, -16
  br label %1119

1119:                                             ; preds = %1110, %1106, %1044
  %1120 = phi i32 [ %1118, %1110 ], [ %1063, %1106 ], [ %1063, %1044 ]
  %1121 = phi i32 [ %1117, %1110 ], [ %1062, %1106 ], [ %1062, %1044 ]
  store i32 %1120, i32* %275, align 4
  %1122 = shl i32 %1061, 7
  %1123 = add i32 %1122, -128
  %1124 = ashr i32 %1123, 8
  %1125 = add nsw i32 %1124, 1
  %1126 = shl i32 %1125, 16
  %1127 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1126, i32 %1125, i32 %1121, i32 0, i32 %1061, i32 %1121) #8, !srcloc !2
  %1128 = extractvalue { i32, i32, i32 } %1127, 0
  %1129 = extractvalue { i32, i32, i32 } %1127, 1
  %1130 = extractvalue { i32, i32, i32 } %1127, 2
  store i32 %1129, i32* %1022, align 8
  store i32 %1130, i32* %276, align 8
  %1131 = or i32 %1128, %1056
  %1132 = shl i32 1, %1131
  %1133 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 39
  store i32 %1132, i32* %1133, align 4
  %1134 = shl i32 3, %1131
  %1135 = sub i32 3, %1134
  %1136 = add i32 %1135, %167
  %1137 = icmp slt i32 %1136, 0
  br i1 %1137, label %1138, label %1065

1138:                                             ; preds = %1091, %1070, %1119
  %1139 = bitcast %struct.AVCodecContext** %17 to i8**
  %1140 = load i8*, i8** %1139, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1140, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)) #7
  br label %5373

1141:                                             ; preds = %1104, %1065
  %1142 = phi i8* [ %1068, %1065 ], [ %1098, %1104 ]
  %1143 = phi i32 [ %1136, %1065 ], [ %1089, %1104 ]
  %1144 = phi i64 [ 0, %1065 ], [ %1105, %1104 ]
  %1145 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 41, i64 %1144
  store i32 %1143, i32* %1145, align 4
  %1146 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 40, i64 %1144
  %1147 = tail call i32 @ff_vp56_init_range_decoder(%struct.VP56RangeCoder* %1146, i8* %1142, i32 %1143) #7
  %1148 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 33
  %1149 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %1148, align 8
  %1150 = icmp eq %struct.VP8Macroblock* %1149, null
  %1151 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %1152 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 20
  %1153 = load i32, i32* %1152, align 4
  %1154 = xor i1 %1150, true
  %1155 = icmp eq i32 %160, %1153
  %1156 = and i1 %1155, %1154
  br i1 %1156, label %1157, label %1175

1157:                                             ; preds = %1141
  %1158 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 21
  %1159 = load i32, i32* %1158, align 8
  %1160 = icmp eq i32 %161, %1159
  br i1 %1160, label %1161, label %1176

1161:                                             ; preds = %1157
  %1162 = add nsw i32 %160, 15
  %1163 = sdiv i32 %1162, 16
  %1164 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 8
  %1165 = load i16, i16* %1164, align 8
  %1166 = zext i16 %1165 to i32
  %1167 = icmp eq i32 %1163, %1166
  br i1 %1167, label %1168, label %1176

1168:                                             ; preds = %1161
  %1169 = add nsw i32 %161, 15
  %1170 = sdiv i32 %1169, 16
  %1171 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 9
  %1172 = load i16, i16* %1171, align 2
  %1173 = zext i16 %1172 to i32
  %1174 = icmp eq i32 %1170, %1173
  br i1 %1174, label %1336, label %1176

1175:                                             ; preds = %1141
  br i1 %1155, label %1176, label %1196

1176:                                             ; preds = %1175, %1168, %1161, %1157
  %1177 = add nsw i32 %160, 15
  %1178 = sdiv i32 %1177, 16
  %1179 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 8
  %1180 = load i16, i16* %1179, align 8
  %1181 = zext i16 %1180 to i32
  %1182 = icmp eq i32 %1178, %1181
  br i1 %1182, label %1183, label %1191

1183:                                             ; preds = %1176
  %1184 = add nsw i32 %161, 15
  %1185 = sdiv i32 %1184, 16
  %1186 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 9
  %1187 = load i16, i16* %1186, align 2
  %1188 = zext i16 %1187 to i32
  %1189 = icmp eq i32 %1185, %1188
  %1190 = or i1 %1150, %1189
  br i1 %1190, label %1192, label %1196

1191:                                             ; preds = %1176
  br i1 %1150, label %1192, label %1196

1192:                                             ; preds = %1191, %1183
  %1193 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 21
  %1194 = load i32, i32* %1193, align 8
  %1195 = icmp eq i32 %1194, %161
  br i1 %1195, label %1203, label %1196

1196:                                             ; preds = %1192, %1191, %1183, %1175
  tail call fastcc void @vp8_decode_flush_impl(%struct.AVCodecContext* %1151, i32 1) #7
  %1197 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %1198 = tail call i32 @ff_set_dimensions(%struct.AVCodecContext* %1197, i32 %160, i32 %161) #7
  %1199 = icmp slt i32 %1198, 0
  br i1 %1199, label %5373, label %1200

1200:                                             ; preds = %1196
  %1201 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %1148, align 8
  %1202 = icmp ne %struct.VP8Macroblock* %1201, null
  br label %1203

1203:                                             ; preds = %1200, %1192
  %1204 = phi i1 [ %1202, %1200 ], [ false, %1192 ]
  %1205 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 2
  %1206 = load i32, i32* %1205, align 8
  %1207 = icmp eq i32 %1206, -1
  %1208 = or i1 %1204, %1207
  br i1 %1208, label %1209, label %1221

1209:                                             ; preds = %1203
  %1210 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 3
  %1211 = load i32, i32* %1210, align 4
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1213, label %1221

1213:                                             ; preds = %1209
  %1214 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1214) #7
  store i64 -4294967296, i64* %8, align 8
  %1215 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %1216 = bitcast i64* %8 to i32*
  %1217 = call i32 @ff_get_format(%struct.AVCodecContext* %1215, i32* nonnull %1216) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1214) #7
  store i32 %1217, i32* %1205, align 8
  %1218 = icmp slt i32 %1217, 0
  br i1 %1218, label %5373, label %1219

1219:                                             ; preds = %1213
  %1220 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 25
  store i32 %1217, i32* %1220, align 8
  br label %1221

1221:                                             ; preds = %1219, %1209, %1203
  %1222 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %1223 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1222, i64 0, i32 22
  %1224 = load i32, i32* %1223, align 4
  %1225 = add nsw i32 %1224, 15
  %1226 = sdiv i32 %1225, 16
  %1227 = trunc i32 %1226 to i16
  %1228 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 8
  store i16 %1227, i16* %1228, align 8
  %1229 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1222, i64 0, i32 23
  %1230 = load i32, i32* %1229, align 8
  %1231 = add nsw i32 %1230, 15
  %1232 = sdiv i32 %1231, 16
  %1233 = trunc i32 %1232 to i16
  %1234 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 9
  store i16 %1233, i16* %1234, align 2
  %1235 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 148
  %1236 = load i32, i32* %1235, align 8
  %1237 = icmp eq i32 %1236, 2
  br i1 %1237, label %1241, label %1238

1238:                                             ; preds = %1221
  %1239 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 50
  store i32 0, i32* %1239, align 8
  %1240 = and i32 %1226, 65535
  br label %1248

1241:                                             ; preds = %1221
  %1242 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1151, i64 0, i32 146
  %1243 = load i32, i32* %1242, align 8
  %1244 = icmp sgt i32 %1243, 1
  %1245 = zext i1 %1244 to i32
  %1246 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 50
  store i32 %1245, i32* %1246, align 8
  %1247 = and i32 %1226, 65535
  br i1 %1244, label %1264, label %1248

1248:                                             ; preds = %1241, %1238
  %1249 = phi i32 [ %1240, %1238 ], [ %1247, %1241 ]
  %1250 = phi i32* [ %1239, %1238 ], [ %1246, %1241 ]
  %1251 = shl nsw i32 %1232, 1
  %1252 = and i32 %1251, 131070
  %1253 = add nuw nsw i32 %1249, %1252
  %1254 = mul nuw nsw i32 %1253, 96
  %1255 = add nuw nsw i32 %1254, 96
  %1256 = zext i32 %1255 to i64
  %1257 = call noalias i8* @av_mallocz(i64 %1256) #7
  %1258 = bitcast %struct.VP8Macroblock** %1148 to i8**
  store i8* %1257, i8** %1258, align 8
  %1259 = load i16, i16* %1228, align 8
  %1260 = zext i16 %1259 to i64
  %1261 = shl nuw nsw i64 %1260, 2
  %1262 = call noalias i8* @av_mallocz(i64 %1261) #7
  %1263 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 22
  store i8* %1262, i8** %1263, align 8
  br label %1273

1264:                                             ; preds = %1241
  %1265 = add nuw nsw i32 %1247, 2
  %1266 = and i32 %1232, 65535
  %1267 = add nuw nsw i32 %1266, 2
  %1268 = mul nsw i32 %1267, %1265
  %1269 = zext i32 %1268 to i64
  %1270 = mul nuw nsw i64 %1269, 96
  %1271 = call noalias i8* @av_mallocz(i64 %1270) #7
  %1272 = bitcast %struct.VP8Macroblock** %1148 to i8**
  store i8* %1271, i8** %1272, align 8
  br label %1273

1273:                                             ; preds = %1264, %1248
  %1274 = phi i32* [ %1246, %1264 ], [ %1250, %1248 ]
  %1275 = load i16, i16* %1228, align 8
  %1276 = zext i16 %1275 to i64
  %1277 = mul nuw nsw i64 %1276, 9
  %1278 = call noalias i8* @av_mallocz(i64 %1277) #7
  %1279 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 28
  %1280 = bitcast [9 x i8]** %1279 to i8**
  store i8* %1278, i8** %1280, align 8
  %1281 = load i16, i16* %1228, align 8
  %1282 = zext i16 %1281 to i64
  %1283 = shl nuw nsw i64 %1282, 5
  %1284 = add nuw nsw i64 %1283, 32
  %1285 = call noalias i8* @av_mallocz(i64 %1284) #7
  %1286 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 27
  %1287 = bitcast [32 x i8]** %1286 to i8**
  store i8* %1285, i8** %1287, align 8
  %1288 = call noalias i8* @av_mallocz(i64 13184) #7
  %1289 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 0
  %1290 = bitcast %struct.VP8Context* %11 to i8**
  store i8* %1288, i8** %1290, align 8
  %1291 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %1148, align 8
  %1292 = icmp eq %struct.VP8Macroblock* %1291, null
  br i1 %1292, label %1309, label %1293

1293:                                             ; preds = %1273
  %1294 = load [9 x i8]*, [9 x i8]** %1279, align 8
  %1295 = icmp eq [9 x i8]* %1294, null
  br i1 %1295, label %1309, label %1296

1296:                                             ; preds = %1293
  %1297 = load [32 x i8]*, [32 x i8]** %1286, align 8
  %1298 = icmp eq [32 x i8]* %1297, null
  %1299 = icmp eq i8* %1288, null
  %1300 = or i1 %1299, %1298
  br i1 %1300, label %1309, label %1301

1301:                                             ; preds = %1296
  %1302 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 22
  %1303 = load i8*, i8** %1302, align 8
  %1304 = icmp eq i8* %1303, null
  br i1 %1304, label %1306, label %1305

1305:                                             ; preds = %1306, %1301
  br label %1310

1306:                                             ; preds = %1301
  %1307 = load i32, i32* %1274, align 8
  %1308 = icmp eq i32 %1307, 0
  br i1 %1308, label %1309, label %1305

1309:                                             ; preds = %1306, %1296, %1293, %1273
  call fastcc void @free_buffers(%struct.VP8Context* %11) #7
  br label %5373

1310:                                             ; preds = %1305, %1324
  %1311 = phi i64 [ %1330, %1324 ], [ 0, %1305 ]
  %1312 = load i16, i16* %1228, align 8
  %1313 = zext i16 %1312 to i64
  %1314 = mul nuw nsw i64 %1313, 3
  %1315 = call noalias i8* @av_mallocz(i64 %1314) #7
  %1316 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %1289, align 8
  %1317 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %1316, i64 %1311, i32 11
  %1318 = bitcast %struct.VP8FilterStrength** %1317 to i8**
  store i8* %1315, i8** %1318, align 16
  %1319 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %1289, align 8
  %1320 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %1319, i64 %1311, i32 11
  %1321 = load %struct.VP8FilterStrength*, %struct.VP8FilterStrength** %1320, align 16
  %1322 = icmp eq %struct.VP8FilterStrength* %1321, null
  br i1 %1322, label %1323, label %1324

1323:                                             ; preds = %1310
  call fastcc void @free_buffers(%struct.VP8Context* %11) #7
  br label %5373

1324:                                             ; preds = %1310
  %1325 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %1319, i64 %1311, i32 5
  %1326 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %1325, %union.pthread_mutexattr_t* null) #7
  %1327 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %1289, align 8
  %1328 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %1327, i64 %1311, i32 6
  %1329 = call i32 @pthread_cond_init(%union.pthread_cond_t* %1328, %union.pthread_condattr_t* null) #7
  %1330 = add nuw nsw i64 %1311, 1
  %1331 = icmp eq i64 %1330, 8
  br i1 %1331, label %1332, label %1310

1332:                                             ; preds = %1324
  %1333 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %1148, align 8
  %1334 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %1333, i64 1
  %1335 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 21
  store %struct.VP8Macroblock* %1334, %struct.VP8Macroblock** %1335, align 8
  br label %1336

1336:                                             ; preds = %1332, %1168
  %1337 = load i32, i32* %170, align 8
  %1338 = load i32, i32* %275, align 4
  %1339 = load i32, i32* %276, align 8
  br label %1340

1340:                                             ; preds = %1369, %1336
  %1341 = phi i32 [ %1339, %1336 ], [ %1380, %1369 ]
  %1342 = phi i32 [ %1338, %1336 ], [ %1370, %1369 ]
  %1343 = phi i32 [ %1337, %1336 ], [ %1379, %1369 ]
  %1344 = phi i32 [ 0, %1336 ], [ %1381, %1369 ]
  %1345 = phi i32 [ 7, %1336 ], [ %1346, %1369 ]
  %1346 = add nsw i32 %1345, -1
  %1347 = shl i32 %1344, 1
  %1348 = sext i32 %1343 to i64
  %1349 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1348
  %1350 = load i8, i8* %1349, align 1
  %1351 = zext i8 %1350 to i32
  %1352 = shl i32 %1343, %1351
  store i32 %1352, i32* %170, align 8
  %1353 = shl i32 %1341, %1351
  %1354 = add nsw i32 %1342, %1351
  %1355 = icmp sgt i32 %1354, -1
  br i1 %1355, label %1356, label %1369

1356:                                             ; preds = %1340
  %1357 = load i8*, i8** %597, align 8
  %1358 = load i8*, i8** %598, align 8
  %1359 = icmp ult i8* %1357, %1358
  br i1 %1359, label %1360, label %1369

1360:                                             ; preds = %1356
  %1361 = getelementptr inbounds i8, i8* %1357, i64 2
  store i8* %1361, i8** %597, align 8
  %1362 = bitcast i8* %1357 to i16*
  %1363 = load i16, i16* %1362, align 1
  %1364 = call i16 @llvm.bswap.i16(i16 %1363) #7
  %1365 = zext i16 %1364 to i32
  %1366 = shl i32 %1365, %1354
  %1367 = or i32 %1366, %1353
  %1368 = add nsw i32 %1354, -16
  br label %1369

1369:                                             ; preds = %1360, %1356, %1340
  %1370 = phi i32 [ %1368, %1360 ], [ %1354, %1356 ], [ %1354, %1340 ]
  %1371 = phi i32 [ %1367, %1360 ], [ %1353, %1356 ], [ %1353, %1340 ]
  store i32 %1370, i32* %275, align 4
  %1372 = shl i32 %1352, 7
  %1373 = add i32 %1372, -128
  %1374 = ashr i32 %1373, 8
  %1375 = add nsw i32 %1374, 1
  %1376 = shl i32 %1375, 16
  %1377 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1376, i32 %1375, i32 %1371, i32 0, i32 %1352, i32 %1371) #8, !srcloc !2
  %1378 = extractvalue { i32, i32, i32 } %1377, 0
  %1379 = extractvalue { i32, i32, i32 } %1377, 1
  %1380 = extractvalue { i32, i32, i32 } %1377, 2
  store i32 %1379, i32* %170, align 8
  store i32 %1380, i32* %276, align 8
  %1381 = or i32 %1378, %1347
  %1382 = icmp eq i32 %1346, 0
  br i1 %1382, label %1383, label %1340

1383:                                             ; preds = %1369
  %1384 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 0
  store i32 %1381, i32* %1384, align 4
  %1385 = call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 4) #7
  %1386 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 1
  store i32 %1385, i32* %1386, align 4
  %1387 = call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 4) #7
  %1388 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 2
  store i32 %1387, i32* %1388, align 4
  %1389 = call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 4) #7
  %1390 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 3
  store i32 %1389, i32* %1390, align 4
  %1391 = call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 4) #7
  %1392 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 4
  store i32 %1391, i32* %1392, align 4
  %1393 = call fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* %16, i32 4) #7
  %1394 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 25, i32 5
  store i32 %1393, i32* %1394, align 4
  %1395 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 1
  %1396 = load i8, i8* %309, align 4
  %1397 = icmp eq i8 %1396, 0
  br label %1398

1398:                                             ; preds = %1491, %1383
  %1399 = phi i64 [ 0, %1383 ], [ %1501, %1491 ]
  br i1 %1397, label %1409, label %1400

1400:                                             ; preds = %1398
  %1401 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 4, i64 %1399
  %1402 = load i8, i8* %1401, align 1
  %1403 = sext i8 %1402 to i32
  %1404 = load i8, i8* %1395, align 1
  %1405 = icmp eq i8 %1404, 0
  br i1 %1405, label %1406, label %1411

1406:                                             ; preds = %1400
  %1407 = load i32, i32* %1384, align 4
  %1408 = add nsw i32 %1407, %1403
  br label %1411

1409:                                             ; preds = %1398
  %1410 = load i32, i32* %1384, align 4
  br label %1411

1411:                                             ; preds = %1409, %1406, %1400
  %1412 = phi i32 [ %1403, %1400 ], [ %1408, %1406 ], [ %1410, %1409 ]
  %1413 = load i32, i32* %1386, align 4
  %1414 = add nsw i32 %1413, %1412
  %1415 = icmp ult i32 %1414, 128
  br i1 %1415, label %1420, label %1416

1416:                                             ; preds = %1411
  %1417 = ashr i32 %1414, 31
  %1418 = or i32 %1417, -128
  %1419 = xor i32 %1418, -1
  br label %1420

1420:                                             ; preds = %1416, %1411
  %1421 = phi i32 [ %1419, %1416 ], [ %1414, %1411 ]
  %1422 = zext i32 %1421 to i64
  %1423 = getelementptr inbounds [128 x i8], [128 x i8]* @vp8_dc_qlookup, i64 0, i64 %1422
  %1424 = load i8, i8* %1423, align 1
  %1425 = zext i8 %1424 to i16
  %1426 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 0, i64 0
  store i16 %1425, i16* %1426, align 4
  %1427 = icmp ult i32 %1412, 128
  br i1 %1427, label %1432, label %1428

1428:                                             ; preds = %1420
  %1429 = ashr i32 %1412, 31
  %1430 = or i32 %1429, -128
  %1431 = xor i32 %1430, -1
  br label %1432

1432:                                             ; preds = %1428, %1420
  %1433 = phi i32 [ %1431, %1428 ], [ %1412, %1420 ]
  %1434 = zext i32 %1433 to i64
  %1435 = getelementptr inbounds [128 x i16], [128 x i16]* @vp8_ac_qlookup, i64 0, i64 %1434
  %1436 = load i16, i16* %1435, align 2
  %1437 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 0, i64 1
  store i16 %1436, i16* %1437, align 2
  %1438 = load i32, i32* %1388, align 4
  %1439 = add nsw i32 %1438, %1412
  %1440 = icmp ult i32 %1439, 128
  br i1 %1440, label %1445, label %1441

1441:                                             ; preds = %1432
  %1442 = ashr i32 %1439, 31
  %1443 = or i32 %1442, -128
  %1444 = xor i32 %1443, -1
  br label %1445

1445:                                             ; preds = %1441, %1432
  %1446 = phi i32 [ %1444, %1441 ], [ %1439, %1432 ]
  %1447 = zext i32 %1446 to i64
  %1448 = getelementptr inbounds [128 x i8], [128 x i8]* @vp8_dc_qlookup, i64 0, i64 %1447
  %1449 = load i8, i8* %1448, align 1
  %1450 = zext i8 %1449 to i16
  %1451 = shl nuw nsw i16 %1450, 1
  %1452 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 1, i64 0
  store i16 %1451, i16* %1452, align 4
  %1453 = load i32, i32* %1390, align 4
  %1454 = add nsw i32 %1453, %1412
  %1455 = icmp ult i32 %1454, 128
  br i1 %1455, label %1460, label %1456

1456:                                             ; preds = %1445
  %1457 = ashr i32 %1454, 31
  %1458 = or i32 %1457, -128
  %1459 = xor i32 %1458, -1
  br label %1460

1460:                                             ; preds = %1456, %1445
  %1461 = phi i32 [ %1459, %1456 ], [ %1454, %1445 ]
  %1462 = zext i32 %1461 to i64
  %1463 = getelementptr inbounds [128 x i16], [128 x i16]* @vp8_ac_qlookup, i64 0, i64 %1462
  %1464 = load i16, i16* %1463, align 2
  %1465 = zext i16 %1464 to i32
  %1466 = mul nsw i32 %1465, 101581
  %1467 = lshr i32 %1466, 16
  %1468 = trunc i32 %1467 to i16
  %1469 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 1, i64 1
  store i16 %1468, i16* %1469, align 2
  %1470 = load i32, i32* %1392, align 4
  %1471 = add nsw i32 %1470, %1412
  %1472 = icmp ult i32 %1471, 128
  br i1 %1472, label %1477, label %1473

1473:                                             ; preds = %1460
  %1474 = ashr i32 %1471, 31
  %1475 = or i32 %1474, -128
  %1476 = xor i32 %1475, -1
  br label %1477

1477:                                             ; preds = %1473, %1460
  %1478 = phi i32 [ %1476, %1473 ], [ %1471, %1460 ]
  %1479 = zext i32 %1478 to i64
  %1480 = getelementptr inbounds [128 x i8], [128 x i8]* @vp8_dc_qlookup, i64 0, i64 %1479
  %1481 = load i8, i8* %1480, align 1
  %1482 = zext i8 %1481 to i16
  %1483 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 2, i64 0
  store i16 %1482, i16* %1483, align 4
  %1484 = load i32, i32* %1394, align 4
  %1485 = add nsw i32 %1484, %1412
  %1486 = icmp ult i32 %1485, 128
  br i1 %1486, label %1491, label %1487

1487:                                             ; preds = %1477
  %1488 = ashr i32 %1485, 31
  %1489 = or i32 %1488, -128
  %1490 = xor i32 %1489, -1
  br label %1491

1491:                                             ; preds = %1487, %1477
  %1492 = phi i32 [ %1490, %1487 ], [ %1485, %1477 ]
  %1493 = zext i32 %1492 to i64
  %1494 = getelementptr inbounds [128 x i16], [128 x i16]* @vp8_ac_qlookup, i64 0, i64 %1493
  %1495 = load i16, i16* %1494, align 2
  %1496 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 24, i64 %1399, i32 2, i64 1
  store i16 %1495, i16* %1496, align 2
  %1497 = icmp ugt i16 %1468, 8
  %1498 = select i1 %1497, i16 %1468, i16 8
  store i16 %1498, i16* %1469, align 2
  %1499 = icmp ult i16 %1482, 132
  %1500 = select i1 %1499, i16 %1482, i16 132
  store i16 %1500, i16* %1483, align 4
  %1501 = add nuw nsw i64 %1399, 1
  %1502 = icmp eq i64 %1501, 4
  br i1 %1502, label %1503, label %1398

1503:                                             ; preds = %1491
  %1504 = load i8, i8* %30, align 8
  %1505 = icmp eq i8 %1504, 0
  br i1 %1505, label %1510, label %1506

1506:                                             ; preds = %1503
  %1507 = load i32, i32* %170, align 8
  %1508 = load i32, i32* %275, align 4
  %1509 = load i32, i32* %276, align 8
  br label %1657

1510:                                             ; preds = %1503
  %1511 = load i32, i32* %1022, align 8
  %1512 = sext i32 %1511 to i64
  %1513 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1512
  %1514 = load i8, i8* %1513, align 1
  %1515 = zext i8 %1514 to i32
  %1516 = load i32, i32* %275, align 4
  %1517 = load i32, i32* %276, align 8
  %1518 = shl i32 %1511, %1515
  store i32 %1518, i32* %1022, align 8
  %1519 = shl i32 %1517, %1515
  %1520 = add nsw i32 %1516, %1515
  %1521 = icmp sgt i32 %1520, -1
  br i1 %1521, label %1522, label %1535

1522:                                             ; preds = %1510
  %1523 = load i8*, i8** %597, align 8
  %1524 = load i8*, i8** %598, align 8
  %1525 = icmp ult i8* %1523, %1524
  br i1 %1525, label %1526, label %1535

1526:                                             ; preds = %1522
  %1527 = getelementptr inbounds i8, i8* %1523, i64 2
  store i8* %1527, i8** %597, align 8
  %1528 = bitcast i8* %1523 to i16*
  %1529 = load i16, i16* %1528, align 1
  %1530 = call i16 @llvm.bswap.i16(i16 %1529) #7
  %1531 = zext i16 %1530 to i32
  %1532 = shl i32 %1531, %1520
  %1533 = or i32 %1532, %1519
  %1534 = add nsw i32 %1520, -16
  br label %1535

1535:                                             ; preds = %1526, %1522, %1510
  %1536 = phi i32 [ %1534, %1526 ], [ %1520, %1522 ], [ %1520, %1510 ]
  %1537 = phi i32 [ %1533, %1526 ], [ %1519, %1522 ], [ %1519, %1510 ]
  store i32 %1536, i32* %275, align 4
  %1538 = shl i32 %1518, 7
  %1539 = add i32 %1538, -128
  %1540 = ashr i32 %1539, 8
  %1541 = add nsw i32 %1540, 1
  %1542 = shl i32 %1541, 16
  %1543 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1542, i32 %1541, i32 %1537, i32 0, i32 %1518, i32 %1537) #8, !srcloc !2
  %1544 = extractvalue { i32, i32, i32 } %1543, 0
  %1545 = extractvalue { i32, i32, i32 } %1543, 1
  %1546 = extractvalue { i32, i32, i32 } %1543, 2
  store i32 %1546, i32* %276, align 8
  %1547 = sext i32 %1545 to i64
  %1548 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1547
  %1549 = load i8, i8* %1548, align 1
  %1550 = zext i8 %1549 to i32
  %1551 = shl i32 %1545, %1550
  store i32 %1551, i32* %1022, align 8
  %1552 = shl i32 %1546, %1550
  %1553 = add nsw i32 %1536, %1550
  %1554 = icmp sgt i32 %1553, -1
  br i1 %1554, label %1555, label %1568

1555:                                             ; preds = %1535
  %1556 = load i8*, i8** %597, align 8
  %1557 = load i8*, i8** %598, align 8
  %1558 = icmp ult i8* %1556, %1557
  br i1 %1558, label %1559, label %1568

1559:                                             ; preds = %1555
  %1560 = getelementptr inbounds i8, i8* %1556, i64 2
  store i8* %1560, i8** %597, align 8
  %1561 = bitcast i8* %1556 to i16*
  %1562 = load i16, i16* %1561, align 1
  %1563 = call i16 @llvm.bswap.i16(i16 %1562) #7
  %1564 = zext i16 %1563 to i32
  %1565 = shl i32 %1564, %1553
  %1566 = or i32 %1565, %1552
  %1567 = add nsw i32 %1553, -16
  br label %1568

1568:                                             ; preds = %1559, %1555, %1535
  %1569 = phi i32 [ %1567, %1559 ], [ %1553, %1555 ], [ %1553, %1535 ]
  %1570 = phi i32 [ %1566, %1559 ], [ %1552, %1555 ], [ %1552, %1535 ]
  store i32 %1569, i32* %275, align 4
  %1571 = shl i32 %1551, 7
  %1572 = add i32 %1571, -128
  %1573 = ashr i32 %1572, 8
  %1574 = add nsw i32 %1573, 1
  %1575 = shl i32 %1574, 16
  %1576 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1575, i32 %1574, i32 %1570, i32 0, i32 %1551, i32 %1570) #8, !srcloc !2
  %1577 = extractvalue { i32, i32, i32 } %1576, 0
  %1578 = extractvalue { i32, i32, i32 } %1576, 1
  %1579 = extractvalue { i32, i32, i32 } %1576, 2
  store i32 %1578, i32* %1022, align 8
  store i32 %1579, i32* %276, align 8
  %1580 = call fastcc i32 @ref_to_update(%struct.VP8Context* %11, i32 %1544, i32 2) #7
  %1581 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 36
  store i32 %1580, i32* %1581, align 8
  %1582 = call fastcc i32 @ref_to_update(%struct.VP8Context* %11, i32 %1577, i32 3) #7
  %1583 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 37
  store i32 %1582, i32* %1583, align 4
  %1584 = load i32, i32* %170, align 8
  %1585 = sext i32 %1584 to i64
  %1586 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1585
  %1587 = load i8, i8* %1586, align 1
  %1588 = zext i8 %1587 to i32
  %1589 = load i32, i32* %275, align 4
  %1590 = load i32, i32* %276, align 8
  %1591 = shl i32 %1584, %1588
  store i32 %1591, i32* %170, align 8
  %1592 = shl i32 %1590, %1588
  %1593 = add nsw i32 %1589, %1588
  %1594 = icmp sgt i32 %1593, -1
  br i1 %1594, label %1595, label %1608

1595:                                             ; preds = %1568
  %1596 = load i8*, i8** %597, align 8
  %1597 = load i8*, i8** %598, align 8
  %1598 = icmp ult i8* %1596, %1597
  br i1 %1598, label %1599, label %1608

1599:                                             ; preds = %1595
  %1600 = getelementptr inbounds i8, i8* %1596, i64 2
  store i8* %1600, i8** %597, align 8
  %1601 = bitcast i8* %1596 to i16*
  %1602 = load i16, i16* %1601, align 1
  %1603 = call i16 @llvm.bswap.i16(i16 %1602) #7
  %1604 = zext i16 %1603 to i32
  %1605 = shl i32 %1604, %1593
  %1606 = or i32 %1605, %1592
  %1607 = add nsw i32 %1593, -16
  br label %1608

1608:                                             ; preds = %1599, %1595, %1568
  %1609 = phi i32 [ %1607, %1599 ], [ %1593, %1595 ], [ %1593, %1568 ]
  %1610 = phi i32 [ %1606, %1599 ], [ %1592, %1595 ], [ %1592, %1568 ]
  store i32 %1609, i32* %275, align 4
  %1611 = shl i32 %1591, 7
  %1612 = add i32 %1611, -128
  %1613 = ashr i32 %1612, 8
  %1614 = add nsw i32 %1613, 1
  %1615 = shl i32 %1614, 16
  %1616 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1615, i32 %1614, i32 %1610, i32 0, i32 %1591, i32 %1610) #8, !srcloc !2
  %1617 = extractvalue { i32, i32, i32 } %1616, 0
  %1618 = extractvalue { i32, i32, i32 } %1616, 1
  %1619 = extractvalue { i32, i32, i32 } %1616, 2
  store i32 %1619, i32* %276, align 8
  %1620 = trunc i32 %1617 to i8
  %1621 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 17, i64 2
  store i8 %1620, i8* %1621, align 2
  %1622 = sext i32 %1618 to i64
  %1623 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1622
  %1624 = load i8, i8* %1623, align 1
  %1625 = zext i8 %1624 to i32
  %1626 = shl i32 %1618, %1625
  store i32 %1626, i32* %170, align 8
  %1627 = shl i32 %1619, %1625
  %1628 = add nsw i32 %1609, %1625
  %1629 = icmp sgt i32 %1628, -1
  br i1 %1629, label %1630, label %1643

1630:                                             ; preds = %1608
  %1631 = load i8*, i8** %597, align 8
  %1632 = load i8*, i8** %598, align 8
  %1633 = icmp ult i8* %1631, %1632
  br i1 %1633, label %1634, label %1643

1634:                                             ; preds = %1630
  %1635 = getelementptr inbounds i8, i8* %1631, i64 2
  store i8* %1635, i8** %597, align 8
  %1636 = bitcast i8* %1631 to i16*
  %1637 = load i16, i16* %1636, align 1
  %1638 = call i16 @llvm.bswap.i16(i16 %1637) #7
  %1639 = zext i16 %1638 to i32
  %1640 = shl i32 %1639, %1628
  %1641 = or i32 %1640, %1627
  %1642 = add nsw i32 %1628, -16
  br label %1643

1643:                                             ; preds = %1634, %1630, %1608
  %1644 = phi i32 [ %1642, %1634 ], [ %1628, %1630 ], [ %1628, %1608 ]
  %1645 = phi i32 [ %1641, %1634 ], [ %1627, %1630 ], [ %1627, %1608 ]
  store i32 %1644, i32* %275, align 4
  %1646 = shl i32 %1626, 7
  %1647 = add i32 %1646, -128
  %1648 = ashr i32 %1647, 8
  %1649 = add nsw i32 %1648, 1
  %1650 = shl i32 %1649, 16
  %1651 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1650, i32 %1649, i32 %1645, i32 0, i32 %1626, i32 %1645) #8, !srcloc !2
  %1652 = extractvalue { i32, i32, i32 } %1651, 0
  %1653 = extractvalue { i32, i32, i32 } %1651, 1
  %1654 = extractvalue { i32, i32, i32 } %1651, 2
  store i32 %1653, i32* %170, align 8
  store i32 %1654, i32* %276, align 8
  %1655 = trunc i32 %1652 to i8
  %1656 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 17, i64 3
  store i8 %1655, i8* %1656, align 1
  br label %1657

1657:                                             ; preds = %1643, %1506
  %1658 = phi i32 [ %1509, %1506 ], [ %1654, %1643 ]
  %1659 = phi i32 [ %1508, %1506 ], [ %1644, %1643 ]
  %1660 = phi i32 [ %1507, %1506 ], [ %1653, %1643 ]
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1661
  %1663 = load i8, i8* %1662, align 1
  %1664 = zext i8 %1663 to i32
  %1665 = shl i32 %1660, %1664
  store i32 %1665, i32* %170, align 8
  %1666 = shl i32 %1658, %1664
  %1667 = add nsw i32 %1659, %1664
  %1668 = icmp sgt i32 %1667, -1
  br i1 %1668, label %1669, label %1682

1669:                                             ; preds = %1657
  %1670 = load i8*, i8** %597, align 8
  %1671 = load i8*, i8** %598, align 8
  %1672 = icmp ult i8* %1670, %1671
  br i1 %1672, label %1673, label %1682

1673:                                             ; preds = %1669
  %1674 = getelementptr inbounds i8, i8* %1670, i64 2
  store i8* %1674, i8** %597, align 8
  %1675 = bitcast i8* %1670 to i16*
  %1676 = load i16, i16* %1675, align 1
  %1677 = call i16 @llvm.bswap.i16(i16 %1676) #7
  %1678 = zext i16 %1677 to i32
  %1679 = shl i32 %1678, %1667
  %1680 = or i32 %1679, %1666
  %1681 = add nsw i32 %1667, -16
  br label %1682

1682:                                             ; preds = %1673, %1669, %1657
  %1683 = phi i32 [ %1681, %1673 ], [ %1667, %1669 ], [ %1667, %1657 ]
  %1684 = phi i32 [ %1680, %1673 ], [ %1666, %1669 ], [ %1666, %1657 ]
  store i32 %1683, i32* %275, align 4
  %1685 = shl i32 %1665, 7
  %1686 = add i32 %1685, -128
  %1687 = ashr i32 %1686, 8
  %1688 = add nsw i32 %1687, 1
  %1689 = shl i32 %1688, 16
  %1690 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1689, i32 %1688, i32 %1684, i32 0, i32 %1665, i32 %1684) #8, !srcloc !2
  %1691 = extractvalue { i32, i32, i32 } %1690, 0
  %1692 = extractvalue { i32, i32, i32 } %1690, 1
  %1693 = extractvalue { i32, i32, i32 } %1690, 2
  store i32 %1692, i32* %170, align 8
  store i32 %1693, i32* %276, align 8
  %1694 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 38
  store i32 %1691, i32* %1694, align 8
  %1695 = icmp eq i32 %1691, 0
  br i1 %1695, label %1696, label %1699

1696:                                             ; preds = %1682
  %1697 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 1, i32 0, i64 0
  %1698 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1697, i8* align 4 %1698, i64 2180, i1 false) #7
  br label %1699

1699:                                             ; preds = %1696, %1682
  %1700 = load i8, i8* %30, align 8
  %1701 = icmp eq i8 %1700, 0
  br i1 %1701, label %1702, label %1738

1702:                                             ; preds = %1699
  %1703 = sext i32 %1692 to i64
  %1704 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1703
  %1705 = load i8, i8* %1704, align 1
  %1706 = zext i8 %1705 to i32
  %1707 = shl i32 %1692, %1706
  store i32 %1707, i32* %170, align 8
  %1708 = shl i32 %1693, %1706
  %1709 = add nsw i32 %1683, %1706
  %1710 = icmp sgt i32 %1709, -1
  br i1 %1710, label %1711, label %1724

1711:                                             ; preds = %1702
  %1712 = load i8*, i8** %597, align 8
  %1713 = load i8*, i8** %598, align 8
  %1714 = icmp ult i8* %1712, %1713
  br i1 %1714, label %1715, label %1724

1715:                                             ; preds = %1711
  %1716 = getelementptr inbounds i8, i8* %1712, i64 2
  store i8* %1716, i8** %597, align 8
  %1717 = bitcast i8* %1712 to i16*
  %1718 = load i16, i16* %1717, align 1
  %1719 = call i16 @llvm.bswap.i16(i16 %1718) #7
  %1720 = zext i16 %1719 to i32
  %1721 = shl i32 %1720, %1709
  %1722 = or i32 %1721, %1708
  %1723 = add nsw i32 %1709, -16
  br label %1724

1724:                                             ; preds = %1715, %1711, %1702
  %1725 = phi i32 [ %1723, %1715 ], [ %1709, %1711 ], [ %1709, %1702 ]
  %1726 = phi i32 [ %1722, %1715 ], [ %1708, %1711 ], [ %1708, %1702 ]
  store i32 %1725, i32* %275, align 4
  %1727 = shl i32 %1707, 7
  %1728 = add i32 %1727, -128
  %1729 = ashr i32 %1728, 8
  %1730 = add nsw i32 %1729, 1
  %1731 = shl i32 %1730, 16
  %1732 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1731, i32 %1730, i32 %1726, i32 0, i32 %1707, i32 %1726) #8, !srcloc !2
  %1733 = extractvalue { i32, i32, i32 } %1732, 0
  %1734 = extractvalue { i32, i32, i32 } %1732, 1
  %1735 = extractvalue { i32, i32, i32 } %1732, 2
  store i32 %1734, i32* %170, align 8
  store i32 %1735, i32* %276, align 8
  %1736 = icmp ne i32 %1733, 0
  %1737 = zext i1 %1736 to i32
  br label %1738

1738:                                             ; preds = %1724, %1699
  %1739 = phi i32 [ 1, %1699 ], [ %1737, %1724 ]
  %1740 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 35
  store i32 %1739, i32* %1740, align 4
  br label %1741

1741:                                             ; preds = %1856, %1738
  %1742 = phi i64 [ 0, %1738 ], [ %1857, %1856 ]
  br label %1743

1743:                                             ; preds = %1853, %1741
  %1744 = phi i64 [ 0, %1741 ], [ %1854, %1853 ]
  %1745 = getelementptr inbounds [8 x [10 x i8]], [8 x [10 x i8]]* bitcast (<{ <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, [10 x i8], <{ i8, i8, [8 x i8] }> }>* @vp8_coeff_band_indexes to [8 x [10 x i8]]*), i64 0, i64 %1744, i64 0
  br label %1746

1746:                                             ; preds = %1850, %1743
  %1747 = phi i64 [ 0, %1743 ], [ %1851, %1850 ]
  br label %1748

1748:                                             ; preds = %1847, %1746
  %1749 = phi i64 [ 0, %1746 ], [ %1848, %1847 ]
  %1750 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_token_update_probs, i64 0, i64 %1742, i64 %1744, i64 %1747, i64 %1749
  %1751 = load i8, i8* %1750, align 1
  %1752 = zext i8 %1751 to i32
  %1753 = load i32, i32* %1022, align 8
  %1754 = sext i32 %1753 to i64
  %1755 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1754
  %1756 = load i8, i8* %1755, align 1
  %1757 = zext i8 %1756 to i32
  %1758 = load i32, i32* %275, align 4
  %1759 = load i32, i32* %276, align 8
  %1760 = shl i32 %1753, %1757
  store i32 %1760, i32* %1022, align 8
  %1761 = shl i32 %1759, %1757
  %1762 = add nsw i32 %1758, %1757
  %1763 = icmp sgt i32 %1762, -1
  br i1 %1763, label %1764, label %1777

1764:                                             ; preds = %1748
  %1765 = load i8*, i8** %597, align 8
  %1766 = load i8*, i8** %598, align 8
  %1767 = icmp ult i8* %1765, %1766
  br i1 %1767, label %1768, label %1777

1768:                                             ; preds = %1764
  %1769 = getelementptr inbounds i8, i8* %1765, i64 2
  store i8* %1769, i8** %597, align 8
  %1770 = bitcast i8* %1765 to i16*
  %1771 = load i16, i16* %1770, align 1
  %1772 = call i16 @llvm.bswap.i16(i16 %1771) #7
  %1773 = zext i16 %1772 to i32
  %1774 = shl i32 %1773, %1762
  %1775 = or i32 %1774, %1761
  %1776 = add nsw i32 %1762, -16
  br label %1777

1777:                                             ; preds = %1768, %1764, %1748
  %1778 = phi i32 [ %1776, %1768 ], [ %1762, %1764 ], [ %1762, %1748 ]
  %1779 = phi i32 [ %1775, %1768 ], [ %1761, %1764 ], [ %1761, %1748 ]
  store i32 %1778, i32* %275, align 4
  %1780 = add nsw i32 %1760, -1
  %1781 = mul nsw i32 %1780, %1752
  %1782 = ashr i32 %1781, 8
  %1783 = add nsw i32 %1782, 1
  %1784 = shl i32 %1783, 16
  %1785 = icmp ult i32 %1779, %1784
  br i1 %1785, label %1786, label %1787

1786:                                             ; preds = %1777
  store i32 %1783, i32* %1022, align 8
  store i32 %1779, i32* %276, align 8
  br label %1847

1787:                                             ; preds = %1777
  %1788 = sub i32 %1760, %1783
  store i32 %1788, i32* %1022, align 8
  %1789 = sub i32 %1779, %1784
  store i32 %1789, i32* %276, align 8
  br label %1790

1790:                                             ; preds = %1819, %1787
  %1791 = phi i32 [ %1789, %1787 ], [ %1830, %1819 ]
  %1792 = phi i32 [ %1778, %1787 ], [ %1820, %1819 ]
  %1793 = phi i32 [ %1788, %1787 ], [ %1829, %1819 ]
  %1794 = phi i32 [ 0, %1787 ], [ %1831, %1819 ]
  %1795 = phi i32 [ 8, %1787 ], [ %1796, %1819 ]
  %1796 = add nsw i32 %1795, -1
  %1797 = shl i32 %1794, 1
  %1798 = sext i32 %1793 to i64
  %1799 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1798
  %1800 = load i8, i8* %1799, align 1
  %1801 = zext i8 %1800 to i32
  %1802 = shl i32 %1793, %1801
  store i32 %1802, i32* %1022, align 8
  %1803 = shl i32 %1791, %1801
  %1804 = add nsw i32 %1792, %1801
  %1805 = icmp sgt i32 %1804, -1
  br i1 %1805, label %1806, label %1819

1806:                                             ; preds = %1790
  %1807 = load i8*, i8** %597, align 8
  %1808 = load i8*, i8** %598, align 8
  %1809 = icmp ult i8* %1807, %1808
  br i1 %1809, label %1810, label %1819

1810:                                             ; preds = %1806
  %1811 = getelementptr inbounds i8, i8* %1807, i64 2
  store i8* %1811, i8** %597, align 8
  %1812 = bitcast i8* %1807 to i16*
  %1813 = load i16, i16* %1812, align 1
  %1814 = call i16 @llvm.bswap.i16(i16 %1813) #7
  %1815 = zext i16 %1814 to i32
  %1816 = shl i32 %1815, %1804
  %1817 = or i32 %1816, %1803
  %1818 = add nsw i32 %1804, -16
  br label %1819

1819:                                             ; preds = %1810, %1806, %1790
  %1820 = phi i32 [ %1818, %1810 ], [ %1804, %1806 ], [ %1804, %1790 ]
  %1821 = phi i32 [ %1817, %1810 ], [ %1803, %1806 ], [ %1803, %1790 ]
  store i32 %1820, i32* %275, align 4
  %1822 = shl i32 %1802, 7
  %1823 = add i32 %1822, -128
  %1824 = ashr i32 %1823, 8
  %1825 = add nsw i32 %1824, 1
  %1826 = shl i32 %1825, 16
  %1827 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1826, i32 %1825, i32 %1821, i32 0, i32 %1802, i32 %1821) #8, !srcloc !2
  %1828 = extractvalue { i32, i32, i32 } %1827, 0
  %1829 = extractvalue { i32, i32, i32 } %1827, 1
  %1830 = extractvalue { i32, i32, i32 } %1827, 2
  store i32 %1829, i32* %1022, align 8
  store i32 %1830, i32* %276, align 8
  %1831 = or i32 %1828, %1797
  %1832 = icmp eq i32 %1796, 0
  br i1 %1832, label %1833, label %1790

1833:                                             ; preds = %1819
  %1834 = load i8, i8* %1745, align 2
  %1835 = icmp sgt i8 %1834, -1
  br i1 %1835, label %1836, label %1847

1836:                                             ; preds = %1833
  %1837 = trunc i32 %1831 to i8
  br label %1838

1838:                                             ; preds = %1838, %1836
  %1839 = phi i64 [ 0, %1836 ], [ %1843, %1838 ]
  %1840 = phi i8 [ %1834, %1836 ], [ %1845, %1838 ]
  %1841 = sext i8 %1840 to i64
  %1842 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 7, i64 %1742, i64 %1841, i64 %1747, i64 %1749
  store i8 %1837, i8* %1842, align 1
  %1843 = add nuw i64 %1839, 1
  %1844 = getelementptr inbounds [8 x [10 x i8]], [8 x [10 x i8]]* bitcast (<{ <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, <{ i8, i8, [8 x i8] }>, [10 x i8], <{ i8, i8, [8 x i8] }> }>* @vp8_coeff_band_indexes to [8 x [10 x i8]]*), i64 0, i64 %1744, i64 %1843
  %1845 = load i8, i8* %1844, align 1
  %1846 = icmp sgt i8 %1845, -1
  br i1 %1846, label %1838, label %1847

1847:                                             ; preds = %1838, %1833, %1786
  %1848 = add nuw nsw i64 %1749, 1
  %1849 = icmp eq i64 %1848, 11
  br i1 %1849, label %1850, label %1748

1850:                                             ; preds = %1847
  %1851 = add nuw nsw i64 %1747, 1
  %1852 = icmp eq i64 %1851, 3
  br i1 %1852, label %1853, label %1746

1853:                                             ; preds = %1850
  %1854 = add nuw nsw i64 %1744, 1
  %1855 = icmp eq i64 %1854, 8
  br i1 %1855, label %1856, label %1743

1856:                                             ; preds = %1853
  %1857 = add nuw nsw i64 %1742, 1
  %1858 = icmp eq i64 %1857, 4
  br i1 %1858, label %1859, label %1741

1859:                                             ; preds = %1856
  %1860 = load i32, i32* %170, align 8
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1861
  %1863 = load i8, i8* %1862, align 1
  %1864 = zext i8 %1863 to i32
  %1865 = load i32, i32* %275, align 4
  %1866 = load i32, i32* %276, align 8
  %1867 = shl i32 %1860, %1864
  store i32 %1867, i32* %170, align 8
  %1868 = shl i32 %1866, %1864
  %1869 = add nsw i32 %1865, %1864
  %1870 = icmp sgt i32 %1869, -1
  br i1 %1870, label %1871, label %1884

1871:                                             ; preds = %1859
  %1872 = load i8*, i8** %597, align 8
  %1873 = load i8*, i8** %598, align 8
  %1874 = icmp ult i8* %1872, %1873
  br i1 %1874, label %1875, label %1884

1875:                                             ; preds = %1871
  %1876 = getelementptr inbounds i8, i8* %1872, i64 2
  store i8* %1876, i8** %597, align 8
  %1877 = bitcast i8* %1872 to i16*
  %1878 = load i16, i16* %1877, align 1
  %1879 = call i16 @llvm.bswap.i16(i16 %1878) #7
  %1880 = zext i16 %1879 to i32
  %1881 = shl i32 %1880, %1869
  %1882 = or i32 %1881, %1868
  %1883 = add nsw i32 %1869, -16
  br label %1884

1884:                                             ; preds = %1875, %1871, %1859
  %1885 = phi i32 [ %1883, %1875 ], [ %1869, %1871 ], [ %1869, %1859 ]
  %1886 = phi i32 [ %1882, %1875 ], [ %1868, %1871 ], [ %1868, %1859 ]
  store i32 %1885, i32* %275, align 4
  %1887 = shl i32 %1867, 7
  %1888 = add i32 %1887, -128
  %1889 = ashr i32 %1888, 8
  %1890 = add nsw i32 %1889, 1
  %1891 = shl i32 %1890, 16
  %1892 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1891, i32 %1890, i32 %1886, i32 0, i32 %1867, i32 %1886) #8, !srcloc !2
  %1893 = extractvalue { i32, i32, i32 } %1892, 0
  %1894 = extractvalue { i32, i32, i32 } %1892, 1
  %1895 = extractvalue { i32, i32, i32 } %1892, 2
  store i32 %1894, i32* %170, align 8
  store i32 %1895, i32* %276, align 8
  %1896 = trunc i32 %1893 to i8
  %1897 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 14
  store i8 %1896, i8* %1897, align 2
  %1898 = icmp eq i8 %1896, 0
  br i1 %1898, label %1945, label %1899

1899:                                             ; preds = %1884, %1928
  %1900 = phi i32 [ %1939, %1928 ], [ %1895, %1884 ]
  %1901 = phi i32 [ %1929, %1928 ], [ %1885, %1884 ]
  %1902 = phi i32 [ %1938, %1928 ], [ %1894, %1884 ]
  %1903 = phi i32 [ %1940, %1928 ], [ 0, %1884 ]
  %1904 = phi i32 [ %1905, %1928 ], [ 8, %1884 ]
  %1905 = add nsw i32 %1904, -1
  %1906 = shl i32 %1903, 1
  %1907 = sext i32 %1902 to i64
  %1908 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1907
  %1909 = load i8, i8* %1908, align 1
  %1910 = zext i8 %1909 to i32
  %1911 = shl i32 %1902, %1910
  store i32 %1911, i32* %170, align 8
  %1912 = shl i32 %1900, %1910
  %1913 = add nsw i32 %1901, %1910
  %1914 = icmp sgt i32 %1913, -1
  br i1 %1914, label %1915, label %1928

1915:                                             ; preds = %1899
  %1916 = load i8*, i8** %597, align 8
  %1917 = load i8*, i8** %598, align 8
  %1918 = icmp ult i8* %1916, %1917
  br i1 %1918, label %1919, label %1928

1919:                                             ; preds = %1915
  %1920 = getelementptr inbounds i8, i8* %1916, i64 2
  store i8* %1920, i8** %597, align 8
  %1921 = bitcast i8* %1916 to i16*
  %1922 = load i16, i16* %1921, align 1
  %1923 = call i16 @llvm.bswap.i16(i16 %1922) #7
  %1924 = zext i16 %1923 to i32
  %1925 = shl i32 %1924, %1913
  %1926 = or i32 %1925, %1912
  %1927 = add nsw i32 %1913, -16
  br label %1928

1928:                                             ; preds = %1919, %1915, %1899
  %1929 = phi i32 [ %1927, %1919 ], [ %1913, %1915 ], [ %1913, %1899 ]
  %1930 = phi i32 [ %1926, %1919 ], [ %1912, %1915 ], [ %1912, %1899 ]
  store i32 %1929, i32* %275, align 4
  %1931 = shl i32 %1911, 7
  %1932 = add i32 %1931, -128
  %1933 = ashr i32 %1932, 8
  %1934 = add nsw i32 %1933, 1
  %1935 = shl i32 %1934, 16
  %1936 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1935, i32 %1934, i32 %1930, i32 0, i32 %1911, i32 %1930) #8, !srcloc !2
  %1937 = extractvalue { i32, i32, i32 } %1936, 0
  %1938 = extractvalue { i32, i32, i32 } %1936, 1
  %1939 = extractvalue { i32, i32, i32 } %1936, 2
  store i32 %1938, i32* %170, align 8
  store i32 %1939, i32* %276, align 8
  %1940 = or i32 %1937, %1906
  %1941 = icmp eq i32 %1905, 0
  br i1 %1941, label %1942, label %1899

1942:                                             ; preds = %1928
  %1943 = trunc i32 %1940 to i8
  %1944 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 1
  store i8 %1943, i8* %1944, align 1
  br label %1945

1945:                                             ; preds = %1942, %1884
  %1946 = phi i32 [ %1895, %1884 ], [ %1939, %1942 ]
  %1947 = phi i32 [ %1885, %1884 ], [ %1929, %1942 ]
  %1948 = phi i32 [ %1894, %1884 ], [ %1938, %1942 ]
  %1949 = load i8, i8* %30, align 8
  %1950 = icmp eq i8 %1949, 0
  br i1 %1950, label %1951, label %2370

1951:                                             ; preds = %1945, %1980
  %1952 = phi i32 [ %1991, %1980 ], [ %1946, %1945 ]
  %1953 = phi i32 [ %1981, %1980 ], [ %1947, %1945 ]
  %1954 = phi i32 [ %1990, %1980 ], [ %1948, %1945 ]
  %1955 = phi i32 [ %1992, %1980 ], [ 0, %1945 ]
  %1956 = phi i32 [ %1957, %1980 ], [ 8, %1945 ]
  %1957 = add nsw i32 %1956, -1
  %1958 = shl i32 %1955, 1
  %1959 = sext i32 %1954 to i64
  %1960 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1959
  %1961 = load i8, i8* %1960, align 1
  %1962 = zext i8 %1961 to i32
  %1963 = shl i32 %1954, %1962
  store i32 %1963, i32* %170, align 8
  %1964 = shl i32 %1952, %1962
  %1965 = add nsw i32 %1953, %1962
  %1966 = icmp sgt i32 %1965, -1
  br i1 %1966, label %1967, label %1980

1967:                                             ; preds = %1951
  %1968 = load i8*, i8** %597, align 8
  %1969 = load i8*, i8** %598, align 8
  %1970 = icmp ult i8* %1968, %1969
  br i1 %1970, label %1971, label %1980

1971:                                             ; preds = %1967
  %1972 = getelementptr inbounds i8, i8* %1968, i64 2
  store i8* %1972, i8** %597, align 8
  %1973 = bitcast i8* %1968 to i16*
  %1974 = load i16, i16* %1973, align 1
  %1975 = call i16 @llvm.bswap.i16(i16 %1974) #7
  %1976 = zext i16 %1975 to i32
  %1977 = shl i32 %1976, %1965
  %1978 = or i32 %1977, %1964
  %1979 = add nsw i32 %1965, -16
  br label %1980

1980:                                             ; preds = %1971, %1967, %1951
  %1981 = phi i32 [ %1979, %1971 ], [ %1965, %1967 ], [ %1965, %1951 ]
  %1982 = phi i32 [ %1978, %1971 ], [ %1964, %1967 ], [ %1964, %1951 ]
  store i32 %1981, i32* %275, align 4
  %1983 = shl i32 %1963, 7
  %1984 = add i32 %1983, -128
  %1985 = ashr i32 %1984, 8
  %1986 = add nsw i32 %1985, 1
  %1987 = shl i32 %1986, 16
  %1988 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1987, i32 %1986, i32 %1982, i32 0, i32 %1963, i32 %1982) #8, !srcloc !2
  %1989 = extractvalue { i32, i32, i32 } %1988, 0
  %1990 = extractvalue { i32, i32, i32 } %1988, 1
  %1991 = extractvalue { i32, i32, i32 } %1988, 2
  store i32 %1990, i32* %170, align 8
  store i32 %1991, i32* %276, align 8
  %1992 = or i32 %1989, %1958
  %1993 = icmp eq i32 %1957, 0
  br i1 %1993, label %1994, label %1951

1994:                                             ; preds = %1980
  %1995 = trunc i32 %1992 to i8
  %1996 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 2
  store i8 %1995, i8* %1996, align 4
  br label %1997

1997:                                             ; preds = %2026, %1994
  %1998 = phi i32 [ %1991, %1994 ], [ %2037, %2026 ]
  %1999 = phi i32 [ %1981, %1994 ], [ %2027, %2026 ]
  %2000 = phi i32 [ %1990, %1994 ], [ %2036, %2026 ]
  %2001 = phi i32 [ 0, %1994 ], [ %2038, %2026 ]
  %2002 = phi i32 [ 8, %1994 ], [ %2003, %2026 ]
  %2003 = add nsw i32 %2002, -1
  %2004 = shl i32 %2001, 1
  %2005 = sext i32 %2000 to i64
  %2006 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2005
  %2007 = load i8, i8* %2006, align 1
  %2008 = zext i8 %2007 to i32
  %2009 = shl i32 %2000, %2008
  store i32 %2009, i32* %170, align 8
  %2010 = shl i32 %1998, %2008
  %2011 = add nsw i32 %1999, %2008
  %2012 = icmp sgt i32 %2011, -1
  br i1 %2012, label %2013, label %2026

2013:                                             ; preds = %1997
  %2014 = load i8*, i8** %597, align 8
  %2015 = load i8*, i8** %598, align 8
  %2016 = icmp ult i8* %2014, %2015
  br i1 %2016, label %2017, label %2026

2017:                                             ; preds = %2013
  %2018 = getelementptr inbounds i8, i8* %2014, i64 2
  store i8* %2018, i8** %597, align 8
  %2019 = bitcast i8* %2014 to i16*
  %2020 = load i16, i16* %2019, align 1
  %2021 = call i16 @llvm.bswap.i16(i16 %2020) #7
  %2022 = zext i16 %2021 to i32
  %2023 = shl i32 %2022, %2011
  %2024 = or i32 %2023, %2010
  %2025 = add nsw i32 %2011, -16
  br label %2026

2026:                                             ; preds = %2017, %2013, %1997
  %2027 = phi i32 [ %2025, %2017 ], [ %2011, %2013 ], [ %2011, %1997 ]
  %2028 = phi i32 [ %2024, %2017 ], [ %2010, %2013 ], [ %2010, %1997 ]
  store i32 %2027, i32* %275, align 4
  %2029 = shl i32 %2009, 7
  %2030 = add i32 %2029, -128
  %2031 = ashr i32 %2030, 8
  %2032 = add nsw i32 %2031, 1
  %2033 = shl i32 %2032, 16
  %2034 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2033, i32 %2032, i32 %2028, i32 0, i32 %2009, i32 %2028) #8, !srcloc !2
  %2035 = extractvalue { i32, i32, i32 } %2034, 0
  %2036 = extractvalue { i32, i32, i32 } %2034, 1
  %2037 = extractvalue { i32, i32, i32 } %2034, 2
  store i32 %2036, i32* %170, align 8
  store i32 %2037, i32* %276, align 8
  %2038 = or i32 %2035, %2004
  %2039 = icmp eq i32 %2003, 0
  br i1 %2039, label %2040, label %1997

2040:                                             ; preds = %2026
  %2041 = trunc i32 %2038 to i8
  %2042 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 3
  store i8 %2041, i8* %2042, align 1
  br label %2043

2043:                                             ; preds = %2072, %2040
  %2044 = phi i32 [ %2037, %2040 ], [ %2083, %2072 ]
  %2045 = phi i32 [ %2027, %2040 ], [ %2073, %2072 ]
  %2046 = phi i32 [ %2036, %2040 ], [ %2082, %2072 ]
  %2047 = phi i32 [ 0, %2040 ], [ %2084, %2072 ]
  %2048 = phi i32 [ 8, %2040 ], [ %2049, %2072 ]
  %2049 = add nsw i32 %2048, -1
  %2050 = shl i32 %2047, 1
  %2051 = sext i32 %2046 to i64
  %2052 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2051
  %2053 = load i8, i8* %2052, align 1
  %2054 = zext i8 %2053 to i32
  %2055 = shl i32 %2046, %2054
  store i32 %2055, i32* %170, align 8
  %2056 = shl i32 %2044, %2054
  %2057 = add nsw i32 %2045, %2054
  %2058 = icmp sgt i32 %2057, -1
  br i1 %2058, label %2059, label %2072

2059:                                             ; preds = %2043
  %2060 = load i8*, i8** %597, align 8
  %2061 = load i8*, i8** %598, align 8
  %2062 = icmp ult i8* %2060, %2061
  br i1 %2062, label %2063, label %2072

2063:                                             ; preds = %2059
  %2064 = getelementptr inbounds i8, i8* %2060, i64 2
  store i8* %2064, i8** %597, align 8
  %2065 = bitcast i8* %2060 to i16*
  %2066 = load i16, i16* %2065, align 1
  %2067 = call i16 @llvm.bswap.i16(i16 %2066) #7
  %2068 = zext i16 %2067 to i32
  %2069 = shl i32 %2068, %2057
  %2070 = or i32 %2069, %2056
  %2071 = add nsw i32 %2057, -16
  br label %2072

2072:                                             ; preds = %2063, %2059, %2043
  %2073 = phi i32 [ %2071, %2063 ], [ %2057, %2059 ], [ %2057, %2043 ]
  %2074 = phi i32 [ %2070, %2063 ], [ %2056, %2059 ], [ %2056, %2043 ]
  store i32 %2073, i32* %275, align 4
  %2075 = shl i32 %2055, 7
  %2076 = add i32 %2075, -128
  %2077 = ashr i32 %2076, 8
  %2078 = add nsw i32 %2077, 1
  %2079 = shl i32 %2078, 16
  %2080 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2079, i32 %2078, i32 %2074, i32 0, i32 %2055, i32 %2074) #8, !srcloc !2
  %2081 = extractvalue { i32, i32, i32 } %2080, 0
  %2082 = extractvalue { i32, i32, i32 } %2080, 1
  %2083 = extractvalue { i32, i32, i32 } %2080, 2
  store i32 %2082, i32* %170, align 8
  store i32 %2083, i32* %276, align 8
  %2084 = or i32 %2081, %2050
  %2085 = icmp eq i32 %2049, 0
  br i1 %2085, label %2086, label %2043

2086:                                             ; preds = %2072
  %2087 = trunc i32 %2084 to i8
  %2088 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 4
  store i8 %2087, i8* %2088, align 2
  %2089 = sext i32 %2082 to i64
  %2090 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2089
  %2091 = load i8, i8* %2090, align 1
  %2092 = zext i8 %2091 to i32
  %2093 = shl i32 %2082, %2092
  store i32 %2093, i32* %1022, align 8
  %2094 = shl i32 %2083, %2092
  %2095 = add nsw i32 %2073, %2092
  %2096 = icmp sgt i32 %2095, -1
  br i1 %2096, label %2097, label %2110

2097:                                             ; preds = %2086
  %2098 = load i8*, i8** %597, align 8
  %2099 = load i8*, i8** %598, align 8
  %2100 = icmp ult i8* %2098, %2099
  br i1 %2100, label %2101, label %2110

2101:                                             ; preds = %2097
  %2102 = getelementptr inbounds i8, i8* %2098, i64 2
  store i8* %2102, i8** %597, align 8
  %2103 = bitcast i8* %2098 to i16*
  %2104 = load i16, i16* %2103, align 1
  %2105 = call i16 @llvm.bswap.i16(i16 %2104) #7
  %2106 = zext i16 %2105 to i32
  %2107 = shl i32 %2106, %2095
  %2108 = or i32 %2107, %2094
  %2109 = add nsw i32 %2095, -16
  br label %2110

2110:                                             ; preds = %2101, %2097, %2086
  %2111 = phi i32 [ %2109, %2101 ], [ %2095, %2097 ], [ %2095, %2086 ]
  %2112 = phi i32 [ %2108, %2101 ], [ %2094, %2097 ], [ %2094, %2086 ]
  store i32 %2111, i32* %275, align 4
  %2113 = shl i32 %2093, 7
  %2114 = add i32 %2113, -128
  %2115 = ashr i32 %2114, 8
  %2116 = add nsw i32 %2115, 1
  %2117 = shl i32 %2116, 16
  %2118 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2117, i32 %2116, i32 %2112, i32 0, i32 %2093, i32 %2112) #8, !srcloc !2
  %2119 = extractvalue { i32, i32, i32 } %2118, 0
  %2120 = extractvalue { i32, i32, i32 } %2118, 1
  %2121 = extractvalue { i32, i32, i32 } %2118, 2
  store i32 %2120, i32* %1022, align 8
  store i32 %2121, i32* %276, align 8
  %2122 = icmp eq i32 %2119, 0
  br i1 %2122, label %2176, label %2123

2123:                                             ; preds = %2110, %2171
  %2124 = phi i32 [ %2168, %2171 ], [ %2121, %2110 ]
  %2125 = phi i32 [ %2158, %2171 ], [ %2111, %2110 ]
  %2126 = phi i32 [ %2167, %2171 ], [ %2120, %2110 ]
  %2127 = phi i64 [ %2174, %2171 ], [ 0, %2110 ]
  br label %2128

2128:                                             ; preds = %2157, %2123
  %2129 = phi i32 [ %2124, %2123 ], [ %2168, %2157 ]
  %2130 = phi i32 [ %2125, %2123 ], [ %2158, %2157 ]
  %2131 = phi i32 [ %2126, %2123 ], [ %2167, %2157 ]
  %2132 = phi i32 [ 0, %2123 ], [ %2169, %2157 ]
  %2133 = phi i32 [ 8, %2123 ], [ %2134, %2157 ]
  %2134 = add nsw i32 %2133, -1
  %2135 = shl i32 %2132, 1
  %2136 = sext i32 %2131 to i64
  %2137 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2136
  %2138 = load i8, i8* %2137, align 1
  %2139 = zext i8 %2138 to i32
  %2140 = shl i32 %2131, %2139
  store i32 %2140, i32* %1022, align 8
  %2141 = shl i32 %2129, %2139
  %2142 = add nsw i32 %2130, %2139
  %2143 = icmp sgt i32 %2142, -1
  br i1 %2143, label %2144, label %2157

2144:                                             ; preds = %2128
  %2145 = load i8*, i8** %597, align 8
  %2146 = load i8*, i8** %598, align 8
  %2147 = icmp ult i8* %2145, %2146
  br i1 %2147, label %2148, label %2157

2148:                                             ; preds = %2144
  %2149 = getelementptr inbounds i8, i8* %2145, i64 2
  store i8* %2149, i8** %597, align 8
  %2150 = bitcast i8* %2145 to i16*
  %2151 = load i16, i16* %2150, align 1
  %2152 = call i16 @llvm.bswap.i16(i16 %2151) #7
  %2153 = zext i16 %2152 to i32
  %2154 = shl i32 %2153, %2142
  %2155 = or i32 %2154, %2141
  %2156 = add nsw i32 %2142, -16
  br label %2157

2157:                                             ; preds = %2148, %2144, %2128
  %2158 = phi i32 [ %2156, %2148 ], [ %2142, %2144 ], [ %2142, %2128 ]
  %2159 = phi i32 [ %2155, %2148 ], [ %2141, %2144 ], [ %2141, %2128 ]
  store i32 %2158, i32* %275, align 4
  %2160 = shl i32 %2140, 7
  %2161 = add i32 %2160, -128
  %2162 = ashr i32 %2161, 8
  %2163 = add nsw i32 %2162, 1
  %2164 = shl i32 %2163, 16
  %2165 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2164, i32 %2163, i32 %2159, i32 0, i32 %2140, i32 %2159) #8, !srcloc !2
  %2166 = extractvalue { i32, i32, i32 } %2165, 0
  %2167 = extractvalue { i32, i32, i32 } %2165, 1
  %2168 = extractvalue { i32, i32, i32 } %2165, 2
  store i32 %2167, i32* %1022, align 8
  store i32 %2168, i32* %276, align 8
  %2169 = or i32 %2166, %2135
  %2170 = icmp eq i32 %2134, 0
  br i1 %2170, label %2171, label %2128

2171:                                             ; preds = %2157
  %2172 = trunc i32 %2169 to i8
  %2173 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 5, i64 %2127
  store i8 %2172, i8* %2173, align 1
  %2174 = add nuw nsw i64 %2127, 1
  %2175 = icmp eq i64 %2174, 4
  br i1 %2175, label %2176, label %2123

2176:                                             ; preds = %2171, %2110
  %2177 = phi i32 [ %2121, %2110 ], [ %2168, %2171 ]
  %2178 = phi i32 [ %2111, %2110 ], [ %2158, %2171 ]
  %2179 = phi i32 [ %2120, %2110 ], [ %2167, %2171 ]
  %2180 = sext i32 %2179 to i64
  %2181 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2180
  %2182 = load i8, i8* %2181, align 1
  %2183 = zext i8 %2182 to i32
  %2184 = shl i32 %2179, %2183
  store i32 %2184, i32* %1022, align 8
  %2185 = shl i32 %2177, %2183
  %2186 = add nsw i32 %2178, %2183
  %2187 = icmp sgt i32 %2186, -1
  br i1 %2187, label %2188, label %2201

2188:                                             ; preds = %2176
  %2189 = load i8*, i8** %597, align 8
  %2190 = load i8*, i8** %598, align 8
  %2191 = icmp ult i8* %2189, %2190
  br i1 %2191, label %2192, label %2201

2192:                                             ; preds = %2188
  %2193 = getelementptr inbounds i8, i8* %2189, i64 2
  store i8* %2193, i8** %597, align 8
  %2194 = bitcast i8* %2189 to i16*
  %2195 = load i16, i16* %2194, align 1
  %2196 = call i16 @llvm.bswap.i16(i16 %2195) #7
  %2197 = zext i16 %2196 to i32
  %2198 = shl i32 %2197, %2186
  %2199 = or i32 %2198, %2185
  %2200 = add nsw i32 %2186, -16
  br label %2201

2201:                                             ; preds = %2192, %2188, %2176
  %2202 = phi i32 [ %2200, %2192 ], [ %2186, %2188 ], [ %2186, %2176 ]
  %2203 = phi i32 [ %2199, %2192 ], [ %2185, %2188 ], [ %2185, %2176 ]
  store i32 %2202, i32* %275, align 4
  %2204 = shl i32 %2184, 7
  %2205 = add i32 %2204, -128
  %2206 = ashr i32 %2205, 8
  %2207 = add nsw i32 %2206, 1
  %2208 = shl i32 %2207, 16
  %2209 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2208, i32 %2207, i32 %2203, i32 0, i32 %2184, i32 %2203) #8, !srcloc !2
  %2210 = extractvalue { i32, i32, i32 } %2209, 0
  %2211 = extractvalue { i32, i32, i32 } %2209, 1
  %2212 = extractvalue { i32, i32, i32 } %2209, 2
  store i32 %2211, i32* %1022, align 8
  store i32 %2212, i32* %276, align 8
  %2213 = icmp eq i32 %2210, 0
  br i1 %2213, label %2214, label %2218

2214:                                             ; preds = %2484, %2201
  %2215 = phi i32 [ %2481, %2484 ], [ %2212, %2201 ]
  %2216 = phi i32 [ %2471, %2484 ], [ %2202, %2201 ]
  %2217 = phi i32 [ %2480, %2484 ], [ %2211, %2201 ]
  br label %2264

2218:                                             ; preds = %2201, %2247
  %2219 = phi i32 [ %2258, %2247 ], [ %2212, %2201 ]
  %2220 = phi i32 [ %2248, %2247 ], [ %2202, %2201 ]
  %2221 = phi i32 [ %2257, %2247 ], [ %2211, %2201 ]
  %2222 = phi i32 [ %2259, %2247 ], [ 0, %2201 ]
  %2223 = phi i32 [ %2224, %2247 ], [ 8, %2201 ]
  %2224 = add nsw i32 %2223, -1
  %2225 = shl i32 %2222, 1
  %2226 = sext i32 %2221 to i64
  %2227 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2226
  %2228 = load i8, i8* %2227, align 1
  %2229 = zext i8 %2228 to i32
  %2230 = shl i32 %2221, %2229
  store i32 %2230, i32* %1022, align 8
  %2231 = shl i32 %2219, %2229
  %2232 = add nsw i32 %2220, %2229
  %2233 = icmp sgt i32 %2232, -1
  br i1 %2233, label %2234, label %2247

2234:                                             ; preds = %2218
  %2235 = load i8*, i8** %597, align 8
  %2236 = load i8*, i8** %598, align 8
  %2237 = icmp ult i8* %2235, %2236
  br i1 %2237, label %2238, label %2247

2238:                                             ; preds = %2234
  %2239 = getelementptr inbounds i8, i8* %2235, i64 2
  store i8* %2239, i8** %597, align 8
  %2240 = bitcast i8* %2235 to i16*
  %2241 = load i16, i16* %2240, align 1
  %2242 = call i16 @llvm.bswap.i16(i16 %2241) #7
  %2243 = zext i16 %2242 to i32
  %2244 = shl i32 %2243, %2232
  %2245 = or i32 %2244, %2231
  %2246 = add nsw i32 %2232, -16
  br label %2247

2247:                                             ; preds = %2238, %2234, %2218
  %2248 = phi i32 [ %2246, %2238 ], [ %2232, %2234 ], [ %2232, %2218 ]
  %2249 = phi i32 [ %2245, %2238 ], [ %2231, %2234 ], [ %2231, %2218 ]
  store i32 %2248, i32* %275, align 4
  %2250 = shl i32 %2230, 7
  %2251 = add i32 %2250, -128
  %2252 = ashr i32 %2251, 8
  %2253 = add nsw i32 %2252, 1
  %2254 = shl i32 %2253, 16
  %2255 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2254, i32 %2253, i32 %2249, i32 0, i32 %2230, i32 %2249) #8, !srcloc !2
  %2256 = extractvalue { i32, i32, i32 } %2255, 0
  %2257 = extractvalue { i32, i32, i32 } %2255, 1
  %2258 = extractvalue { i32, i32, i32 } %2255, 2
  store i32 %2257, i32* %1022, align 8
  store i32 %2258, i32* %276, align 8
  %2259 = or i32 %2256, %2225
  %2260 = icmp eq i32 %2224, 0
  br i1 %2260, label %2261, label %2218

2261:                                             ; preds = %2247
  %2262 = trunc i32 %2259 to i8
  %2263 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 6, i64 0
  store i8 %2262, i8* %2263, align 1
  br label %2395

2264:                                             ; preds = %2214, %2367
  %2265 = phi i32 [ %2362, %2367 ], [ %2215, %2214 ]
  %2266 = phi i32 [ %2363, %2367 ], [ %2216, %2214 ]
  %2267 = phi i32 [ %2364, %2367 ], [ %2217, %2214 ]
  %2268 = phi i64 [ %2368, %2367 ], [ 0, %2214 ]
  br label %2269

2269:                                             ; preds = %2361, %2264
  %2270 = phi i32 [ %2265, %2264 ], [ %2362, %2361 ]
  %2271 = phi i32 [ %2266, %2264 ], [ %2363, %2361 ]
  %2272 = phi i32 [ %2267, %2264 ], [ %2364, %2361 ]
  %2273 = phi i64 [ 0, %2264 ], [ %2365, %2361 ]
  %2274 = getelementptr inbounds [2 x [19 x i8]], [2 x [19 x i8]]* @vp8_mv_update_prob, i64 0, i64 %2268, i64 %2273
  %2275 = load i8, i8* %2274, align 1
  %2276 = zext i8 %2275 to i32
  %2277 = sext i32 %2272 to i64
  %2278 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2277
  %2279 = load i8, i8* %2278, align 1
  %2280 = zext i8 %2279 to i32
  %2281 = shl i32 %2272, %2280
  store i32 %2281, i32* %1022, align 8
  %2282 = shl i32 %2270, %2280
  %2283 = add nsw i32 %2271, %2280
  %2284 = icmp sgt i32 %2283, -1
  br i1 %2284, label %2285, label %2298

2285:                                             ; preds = %2269
  %2286 = load i8*, i8** %597, align 8
  %2287 = load i8*, i8** %598, align 8
  %2288 = icmp ult i8* %2286, %2287
  br i1 %2288, label %2289, label %2298

2289:                                             ; preds = %2285
  %2290 = getelementptr inbounds i8, i8* %2286, i64 2
  store i8* %2290, i8** %597, align 8
  %2291 = bitcast i8* %2286 to i16*
  %2292 = load i16, i16* %2291, align 1
  %2293 = call i16 @llvm.bswap.i16(i16 %2292) #7
  %2294 = zext i16 %2293 to i32
  %2295 = shl i32 %2294, %2283
  %2296 = or i32 %2295, %2282
  %2297 = add nsw i32 %2283, -16
  br label %2298

2298:                                             ; preds = %2289, %2285, %2269
  %2299 = phi i32 [ %2297, %2289 ], [ %2283, %2285 ], [ %2283, %2269 ]
  %2300 = phi i32 [ %2296, %2289 ], [ %2282, %2285 ], [ %2282, %2269 ]
  store i32 %2299, i32* %275, align 4
  %2301 = add nsw i32 %2281, -1
  %2302 = mul nsw i32 %2301, %2276
  %2303 = ashr i32 %2302, 8
  %2304 = add nsw i32 %2303, 1
  %2305 = shl i32 %2304, 16
  %2306 = icmp ult i32 %2300, %2305
  br i1 %2306, label %2307, label %2308

2307:                                             ; preds = %2298
  store i32 %2304, i32* %1022, align 8
  store i32 %2300, i32* %276, align 8
  br label %2361

2308:                                             ; preds = %2298
  %2309 = sub i32 %2281, %2304
  store i32 %2309, i32* %1022, align 8
  %2310 = sub i32 %2300, %2305
  store i32 %2310, i32* %276, align 8
  br label %2311

2311:                                             ; preds = %2340, %2308
  %2312 = phi i32 [ %2310, %2308 ], [ %2351, %2340 ]
  %2313 = phi i32 [ %2299, %2308 ], [ %2341, %2340 ]
  %2314 = phi i32 [ %2309, %2308 ], [ %2350, %2340 ]
  %2315 = phi i32 [ 0, %2308 ], [ %2352, %2340 ]
  %2316 = phi i32 [ 7, %2308 ], [ %2317, %2340 ]
  %2317 = add nsw i32 %2316, -1
  %2318 = shl i32 %2315, 1
  %2319 = sext i32 %2314 to i64
  %2320 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2319
  %2321 = load i8, i8* %2320, align 1
  %2322 = zext i8 %2321 to i32
  %2323 = shl i32 %2314, %2322
  store i32 %2323, i32* %1022, align 8
  %2324 = shl i32 %2312, %2322
  %2325 = add nsw i32 %2313, %2322
  %2326 = icmp sgt i32 %2325, -1
  br i1 %2326, label %2327, label %2340

2327:                                             ; preds = %2311
  %2328 = load i8*, i8** %597, align 8
  %2329 = load i8*, i8** %598, align 8
  %2330 = icmp ult i8* %2328, %2329
  br i1 %2330, label %2331, label %2340

2331:                                             ; preds = %2327
  %2332 = getelementptr inbounds i8, i8* %2328, i64 2
  store i8* %2332, i8** %597, align 8
  %2333 = bitcast i8* %2328 to i16*
  %2334 = load i16, i16* %2333, align 1
  %2335 = call i16 @llvm.bswap.i16(i16 %2334) #7
  %2336 = zext i16 %2335 to i32
  %2337 = shl i32 %2336, %2325
  %2338 = or i32 %2337, %2324
  %2339 = add nsw i32 %2325, -16
  br label %2340

2340:                                             ; preds = %2331, %2327, %2311
  %2341 = phi i32 [ %2339, %2331 ], [ %2325, %2327 ], [ %2325, %2311 ]
  %2342 = phi i32 [ %2338, %2331 ], [ %2324, %2327 ], [ %2324, %2311 ]
  store i32 %2341, i32* %275, align 4
  %2343 = shl i32 %2323, 7
  %2344 = add i32 %2343, -128
  %2345 = ashr i32 %2344, 8
  %2346 = add nsw i32 %2345, 1
  %2347 = shl i32 %2346, 16
  %2348 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2347, i32 %2346, i32 %2342, i32 0, i32 %2323, i32 %2342) #8, !srcloc !2
  %2349 = extractvalue { i32, i32, i32 } %2348, 0
  %2350 = extractvalue { i32, i32, i32 } %2348, 1
  %2351 = extractvalue { i32, i32, i32 } %2348, 2
  store i32 %2350, i32* %1022, align 8
  store i32 %2351, i32* %276, align 8
  %2352 = or i32 %2349, %2318
  %2353 = icmp eq i32 %2317, 0
  br i1 %2353, label %2354, label %2311

2354:                                             ; preds = %2340
  %2355 = shl i32 %2352, 1
  %2356 = icmp eq i32 %2355, 0
  %2357 = zext i1 %2356 to i32
  %2358 = or i32 %2355, %2357
  %2359 = trunc i32 %2358 to i8
  %2360 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 8, i64 %2268, i64 %2273
  store i8 %2359, i8* %2360, align 1
  br label %2361

2361:                                             ; preds = %2354, %2307
  %2362 = phi i32 [ %2300, %2307 ], [ %2351, %2354 ]
  %2363 = phi i32 [ %2299, %2307 ], [ %2341, %2354 ]
  %2364 = phi i32 [ %2304, %2307 ], [ %2350, %2354 ]
  %2365 = add nuw nsw i64 %2273, 1
  %2366 = icmp eq i64 %2365, 19
  br i1 %2366, label %2367, label %2269

2367:                                             ; preds = %2361
  %2368 = add nuw nsw i64 %2268, 1
  %2369 = icmp eq i64 %2368, 2
  br i1 %2369, label %2370, label %2264

2370:                                             ; preds = %2367, %1945
  %2371 = phi i32 [ %1946, %1945 ], [ %2362, %2367 ]
  %2372 = phi i32 [ %1947, %1945 ], [ %2363, %2367 ]
  %2373 = phi i32 [ %1948, %1945 ], [ %2364, %2367 ]
  %2374 = sext i32 %2373 to i64
  %2375 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2374
  %2376 = load i8, i8* %2375, align 1
  %2377 = zext i8 %2376 to i32
  %2378 = shl i32 %2373, %2377
  store i32 %2378, i32* %170, align 8
  %2379 = shl i32 %2371, %2377
  %2380 = add nsw i32 %2372, %2377
  %2381 = icmp sgt i32 %2380, -1
  %2382 = load i8*, i8** %597, align 8
  br i1 %2381, label %2383, label %2558

2383:                                             ; preds = %2370
  %2384 = load i8*, i8** %598, align 8
  %2385 = icmp ult i8* %2382, %2384
  br i1 %2385, label %2386, label %2558

2386:                                             ; preds = %2383
  %2387 = getelementptr inbounds i8, i8* %2382, i64 2
  store i8* %2387, i8** %597, align 8
  %2388 = bitcast i8* %2382 to i16*
  %2389 = load i16, i16* %2388, align 1
  %2390 = call i16 @llvm.bswap.i16(i16 %2389) #7
  %2391 = zext i16 %2390 to i32
  %2392 = shl i32 %2391, %2380
  %2393 = or i32 %2392, %2379
  %2394 = add nsw i32 %2380, -16
  br label %2558

2395:                                             ; preds = %2424, %2261
  %2396 = phi i32 [ %2258, %2261 ], [ %2435, %2424 ]
  %2397 = phi i32 [ %2248, %2261 ], [ %2425, %2424 ]
  %2398 = phi i32 [ %2257, %2261 ], [ %2434, %2424 ]
  %2399 = phi i32 [ 0, %2261 ], [ %2436, %2424 ]
  %2400 = phi i32 [ 8, %2261 ], [ %2401, %2424 ]
  %2401 = add nsw i32 %2400, -1
  %2402 = shl i32 %2399, 1
  %2403 = sext i32 %2398 to i64
  %2404 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2403
  %2405 = load i8, i8* %2404, align 1
  %2406 = zext i8 %2405 to i32
  %2407 = shl i32 %2398, %2406
  store i32 %2407, i32* %1022, align 8
  %2408 = shl i32 %2396, %2406
  %2409 = add nsw i32 %2397, %2406
  %2410 = icmp sgt i32 %2409, -1
  br i1 %2410, label %2411, label %2424

2411:                                             ; preds = %2395
  %2412 = load i8*, i8** %597, align 8
  %2413 = load i8*, i8** %598, align 8
  %2414 = icmp ult i8* %2412, %2413
  br i1 %2414, label %2415, label %2424

2415:                                             ; preds = %2411
  %2416 = getelementptr inbounds i8, i8* %2412, i64 2
  store i8* %2416, i8** %597, align 8
  %2417 = bitcast i8* %2412 to i16*
  %2418 = load i16, i16* %2417, align 1
  %2419 = call i16 @llvm.bswap.i16(i16 %2418) #7
  %2420 = zext i16 %2419 to i32
  %2421 = shl i32 %2420, %2409
  %2422 = or i32 %2421, %2408
  %2423 = add nsw i32 %2409, -16
  br label %2424

2424:                                             ; preds = %2415, %2411, %2395
  %2425 = phi i32 [ %2423, %2415 ], [ %2409, %2411 ], [ %2409, %2395 ]
  %2426 = phi i32 [ %2422, %2415 ], [ %2408, %2411 ], [ %2408, %2395 ]
  store i32 %2425, i32* %275, align 4
  %2427 = shl i32 %2407, 7
  %2428 = add i32 %2427, -128
  %2429 = ashr i32 %2428, 8
  %2430 = add nsw i32 %2429, 1
  %2431 = shl i32 %2430, 16
  %2432 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2431, i32 %2430, i32 %2426, i32 0, i32 %2407, i32 %2426) #8, !srcloc !2
  %2433 = extractvalue { i32, i32, i32 } %2432, 0
  %2434 = extractvalue { i32, i32, i32 } %2432, 1
  %2435 = extractvalue { i32, i32, i32 } %2432, 2
  store i32 %2434, i32* %1022, align 8
  store i32 %2435, i32* %276, align 8
  %2436 = or i32 %2433, %2402
  %2437 = icmp eq i32 %2401, 0
  br i1 %2437, label %2438, label %2395

2438:                                             ; preds = %2424
  %2439 = trunc i32 %2436 to i8
  %2440 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 6, i64 1
  store i8 %2439, i8* %2440, align 1
  br label %2441

2441:                                             ; preds = %2470, %2438
  %2442 = phi i32 [ %2435, %2438 ], [ %2481, %2470 ]
  %2443 = phi i32 [ %2425, %2438 ], [ %2471, %2470 ]
  %2444 = phi i32 [ %2434, %2438 ], [ %2480, %2470 ]
  %2445 = phi i32 [ 0, %2438 ], [ %2482, %2470 ]
  %2446 = phi i32 [ 8, %2438 ], [ %2447, %2470 ]
  %2447 = add nsw i32 %2446, -1
  %2448 = shl i32 %2445, 1
  %2449 = sext i32 %2444 to i64
  %2450 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2449
  %2451 = load i8, i8* %2450, align 1
  %2452 = zext i8 %2451 to i32
  %2453 = shl i32 %2444, %2452
  store i32 %2453, i32* %1022, align 8
  %2454 = shl i32 %2442, %2452
  %2455 = add nsw i32 %2443, %2452
  %2456 = icmp sgt i32 %2455, -1
  br i1 %2456, label %2457, label %2470

2457:                                             ; preds = %2441
  %2458 = load i8*, i8** %597, align 8
  %2459 = load i8*, i8** %598, align 8
  %2460 = icmp ult i8* %2458, %2459
  br i1 %2460, label %2461, label %2470

2461:                                             ; preds = %2457
  %2462 = getelementptr inbounds i8, i8* %2458, i64 2
  store i8* %2462, i8** %597, align 8
  %2463 = bitcast i8* %2458 to i16*
  %2464 = load i16, i16* %2463, align 1
  %2465 = call i16 @llvm.bswap.i16(i16 %2464) #7
  %2466 = zext i16 %2465 to i32
  %2467 = shl i32 %2466, %2455
  %2468 = or i32 %2467, %2454
  %2469 = add nsw i32 %2455, -16
  br label %2470

2470:                                             ; preds = %2461, %2457, %2441
  %2471 = phi i32 [ %2469, %2461 ], [ %2455, %2457 ], [ %2455, %2441 ]
  %2472 = phi i32 [ %2468, %2461 ], [ %2454, %2457 ], [ %2454, %2441 ]
  store i32 %2471, i32* %275, align 4
  %2473 = shl i32 %2453, 7
  %2474 = add i32 %2473, -128
  %2475 = ashr i32 %2474, 8
  %2476 = add nsw i32 %2475, 1
  %2477 = shl i32 %2476, 16
  %2478 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2477, i32 %2476, i32 %2472, i32 0, i32 %2453, i32 %2472) #8, !srcloc !2
  %2479 = extractvalue { i32, i32, i32 } %2478, 0
  %2480 = extractvalue { i32, i32, i32 } %2478, 1
  %2481 = extractvalue { i32, i32, i32 } %2478, 2
  store i32 %2480, i32* %1022, align 8
  store i32 %2481, i32* %276, align 8
  %2482 = or i32 %2479, %2448
  %2483 = icmp eq i32 %2447, 0
  br i1 %2483, label %2484, label %2441

2484:                                             ; preds = %2470
  %2485 = trunc i32 %2482 to i8
  %2486 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 6, i64 2
  store i8 %2485, i8* %2486, align 1
  br label %2214

2487:                                             ; preds = %666
  %2488 = load i8*, i8** %597, align 8
  %2489 = load i8*, i8** %598, align 8
  %2490 = icmp ult i8* %2488, %2489
  br i1 %2490, label %2491, label %2500

2491:                                             ; preds = %2487
  %2492 = getelementptr inbounds i8, i8* %2488, i64 2
  store i8* %2492, i8** %597, align 8
  %2493 = bitcast i8* %2488 to i16*
  %2494 = load i16, i16* %2493, align 1
  %2495 = tail call i16 @llvm.bswap.i16(i16 %2494) #7
  %2496 = zext i16 %2495 to i32
  %2497 = shl i32 %2496, %685
  %2498 = or i32 %2497, %684
  %2499 = add nsw i32 %685, -16
  br label %2500

2500:                                             ; preds = %2491, %2487, %666
  %2501 = phi i32 [ %2499, %2491 ], [ %685, %2487 ], [ %685, %666 ]
  %2502 = phi i32 [ %2498, %2491 ], [ %684, %2487 ], [ %684, %666 ]
  store i32 %2501, i32* %275, align 4
  %2503 = shl i32 %683, 7
  %2504 = add i32 %2503, -128
  %2505 = ashr i32 %2504, 8
  %2506 = add nsw i32 %2505, 1
  %2507 = shl i32 %2506, 16
  %2508 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2507, i32 %2506, i32 %2502, i32 0, i32 %683, i32 %2502) #8, !srcloc !2
  %2509 = extractvalue { i32, i32, i32 } %2508, 0
  %2510 = extractvalue { i32, i32, i32 } %2508, 1
  %2511 = extractvalue { i32, i32, i32 } %2508, 2
  store i32 %2511, i32* %276, align 8
  %2512 = or i32 %2509, %678
  %2513 = shl i32 %2512, 1
  %2514 = sext i32 %2510 to i64
  %2515 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2514
  %2516 = load i8, i8* %2515, align 1
  %2517 = zext i8 %2516 to i32
  %2518 = shl i32 %2510, %2517
  store i32 %2518, i32* %170, align 8
  %2519 = shl i32 %2511, %2517
  %2520 = add nsw i32 %2501, %2517
  %2521 = icmp sgt i32 %2520, -1
  br i1 %2521, label %2522, label %2535

2522:                                             ; preds = %2500
  %2523 = load i8*, i8** %597, align 8
  %2524 = load i8*, i8** %598, align 8
  %2525 = icmp ult i8* %2523, %2524
  br i1 %2525, label %2526, label %2535

2526:                                             ; preds = %2522
  %2527 = getelementptr inbounds i8, i8* %2523, i64 2
  store i8* %2527, i8** %597, align 8
  %2528 = bitcast i8* %2523 to i16*
  %2529 = load i16, i16* %2528, align 1
  %2530 = tail call i16 @llvm.bswap.i16(i16 %2529) #7
  %2531 = zext i16 %2530 to i32
  %2532 = shl i32 %2531, %2520
  %2533 = or i32 %2532, %2519
  %2534 = add nsw i32 %2520, -16
  br label %2535

2535:                                             ; preds = %2526, %2522, %2500
  %2536 = phi i32 [ %2534, %2526 ], [ %2520, %2522 ], [ %2520, %2500 ]
  %2537 = phi i32 [ %2533, %2526 ], [ %2519, %2522 ], [ %2519, %2500 ]
  store i32 %2536, i32* %275, align 4
  %2538 = shl i32 %2518, 7
  %2539 = add i32 %2538, -128
  %2540 = ashr i32 %2539, 8
  %2541 = add nsw i32 %2540, 1
  %2542 = shl i32 %2541, 16
  %2543 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2542, i32 %2541, i32 %2537, i32 0, i32 %2518, i32 %2537) #8, !srcloc !2
  %2544 = extractvalue { i32, i32, i32 } %2543, 0
  %2545 = extractvalue { i32, i32, i32 } %2543, 1
  %2546 = extractvalue { i32, i32, i32 } %2543, 2
  store i32 %2546, i32* %276, align 8
  %2547 = or i32 %2544, %2513
  %2548 = trunc i32 %2547 to i8
  %2549 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 20, i32 2
  store i8 %2548, i8* %2549, align 2
  %2550 = sext i32 %2545 to i64
  %2551 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2550
  %2552 = load i8, i8* %2551, align 1
  %2553 = zext i8 %2552 to i32
  %2554 = shl i32 %2545, %2553
  store i32 %2554, i32* %170, align 8
  %2555 = shl i32 %2546, %2553
  %2556 = add nsw i32 %2536, %2553
  %2557 = icmp sgt i32 %2556, -1
  br i1 %2557, label %687, label %700

2558:                                             ; preds = %2386, %2383, %2370
  %2559 = phi i8* [ %2387, %2386 ], [ %2382, %2383 ], [ %2382, %2370 ]
  %2560 = phi i32 [ %2394, %2386 ], [ %2380, %2383 ], [ %2380, %2370 ]
  %2561 = phi i32 [ %2393, %2386 ], [ %2379, %2383 ], [ %2379, %2370 ]
  store i32 %2560, i32* %275, align 4
  store i32 %2561, i32* %276, align 8
  %2562 = sdiv i32 %2560, 8
  %2563 = sext i32 %2562 to i64
  %2564 = getelementptr inbounds i8, i8* %2559, i64 %2563
  %2565 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 30, i32 0
  store i8* %2564, i8** %2565, align 8
  %2566 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 30, i32 1
  store i32 %2378, i32* %2566, align 8
  %2567 = lshr i32 %2561, 16
  %2568 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 30, i32 2
  store i32 %2567, i32* %2568, align 4
  %2569 = srem i32 %2560, 8
  %2570 = sub nsw i32 0, %2569
  %2571 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 30, i32 3
  store i32 %2570, i32* %2571, align 8
  %2572 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 3
  %2573 = load i32, i32* %2572, align 4
  %2574 = icmp eq i32 %2573, 0
  br i1 %2574, label %2575, label %2587

2575:                                             ; preds = %2558
  %2576 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 2
  %2577 = load i32, i32* %2576, align 8
  %2578 = icmp eq i32 %2577, -1
  br i1 %2578, label %2579, label %2587

2579:                                             ; preds = %2575
  %2580 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2580) #7
  store i64 -4294967296, i64* %7, align 8
  %2581 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %2582 = bitcast i64* %7 to i32*
  %2583 = call i32 @ff_get_format(%struct.AVCodecContext* %2581, i32* nonnull %2582) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2580) #7
  store i32 %2583, i32* %2576, align 8
  %2584 = icmp slt i32 %2583, 0
  br i1 %2584, label %5373, label %2585

2585:                                             ; preds = %2579
  %2586 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 %2583, i32* %2586, align 8
  br label %2587

2587:                                             ; preds = %2585, %2575, %2558
  %2588 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4
  %2589 = getelementptr inbounds [4 x %struct.VP8Frame*], [4 x %struct.VP8Frame*]* %2588, i64 0, i64 0
  %2590 = load %struct.VP8Frame*, %struct.VP8Frame** %2589, align 8
  %2591 = load i32, i32* %1740, align 4
  %2592 = icmp eq i32 %2591, 0
  br i1 %2592, label %2593, label %2601

2593:                                             ; preds = %2587
  %2594 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 36
  %2595 = load i32, i32* %2594, align 8
  %2596 = icmp eq i32 %2595, 0
  br i1 %2596, label %2601, label %2597

2597:                                             ; preds = %2593
  %2598 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 37
  %2599 = load i32, i32* %2598, align 4
  %2600 = icmp eq i32 %2599, 0
  br i1 %2600, label %2601, label %2605

2601:                                             ; preds = %2597, %2593, %2587
  %2602 = load i8, i8* %30, align 8
  %2603 = icmp eq i8 %2602, 0
  %2604 = select i1 %2603, i32 32, i32 48
  br label %2605

2605:                                             ; preds = %2601, %2597
  %2606 = phi i32 [ 1, %2601 ], [ 0, %2597 ]
  %2607 = phi i32 [ %2604, %2601 ], [ 8, %2597 ]
  %2608 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 157
  %2609 = load i32, i32* %2608, align 4
  %2610 = icmp slt i32 %2609, %2607
  br i1 %2610, label %2615, label %2611

2611:                                             ; preds = %2605
  store i32 1, i32* %40, align 8
  %2612 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 0
  %2613 = bitcast %struct.VP8Frame** %2612 to i8*
  %2614 = bitcast [4 x %struct.VP8Frame*]* %2588 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2613, i8* align 8 %2614, i64 32, i1 false) #7
  br label %5354

2615:                                             ; preds = %2605
  %2616 = load i8, i8* %644, align 1
  %2617 = icmp eq i8 %2616, 0
  br i1 %2617, label %2622, label %2618

2618:                                             ; preds = %2615
  %2619 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 155
  %2620 = load i32, i32* %2619, align 4
  %2621 = icmp slt i32 %2620, %2607
  br label %2622

2622:                                             ; preds = %2618, %2615
  %2623 = phi i1 [ false, %2615 ], [ %2621, %2618 ]
  %2624 = zext i1 %2623 to i8
  %2625 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 13
  store i8 %2624, i8* %2625, align 1
  %2626 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 1
  %2627 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 2
  %2628 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 3
  br label %2629

2629:                                             ; preds = %2654, %2622
  %2630 = phi i64 [ 0, %2622 ], [ %2655, %2654 ]
  %2631 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 %2630
  %2632 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2631, i64 0, i32 0, i32 0
  %2633 = load %struct.AVFrame*, %struct.AVFrame** %2632, align 8
  %2634 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2633, i64 0, i32 25, i64 0
  %2635 = load %struct.AVBufferRef*, %struct.AVBufferRef** %2634, align 8
  %2636 = icmp eq %struct.AVBufferRef* %2635, null
  %2637 = icmp eq %struct.VP8Frame* %2631, %2590
  %2638 = or i1 %2637, %2636
  br i1 %2638, label %2654, label %2639

2639:                                             ; preds = %2629
  %2640 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2641 = icmp eq %struct.VP8Frame* %2631, %2640
  br i1 %2641, label %2654, label %2642

2642:                                             ; preds = %2639
  %2643 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2644 = icmp eq %struct.VP8Frame* %2631, %2643
  br i1 %2644, label %2654, label %2645

2645:                                             ; preds = %2642
  %2646 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2647 = icmp eq %struct.VP8Frame* %2631, %2646
  br i1 %2647, label %2654, label %2648

2648:                                             ; preds = %2645
  %2649 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 %2630, i32 1
  call void @av_buffer_unref(%struct.AVBufferRef** %2649) #7
  %2650 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 %2630, i32 2
  call void @av_buffer_unref(%struct.AVBufferRef** %2650) #7
  %2651 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 %2630, i32 3
  store i8* null, i8** %2651, align 8
  %2652 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %2653 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2631, i64 0, i32 0
  call void @ff_thread_release_buffer(%struct.AVCodecContext* %2652, %struct.ThreadFrame* %2653) #7
  br label %2654

2654:                                             ; preds = %2648, %2645, %2642, %2639, %2629
  %2655 = add nuw nsw i64 %2630, 1
  %2656 = icmp eq i64 %2655, 5
  br i1 %2656, label %2657, label %2629

2657:                                             ; preds = %2654
  %2658 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 0
  %2659 = load %struct.VP8Frame*, %struct.VP8Frame** %2658, align 8
  %2660 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 0
  %2661 = icmp eq %struct.VP8Frame* %2660, %2659
  br i1 %2661, label %2671, label %2662

2662:                                             ; preds = %2657
  %2663 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2664 = icmp eq %struct.VP8Frame* %2660, %2663
  br i1 %2664, label %2671, label %2665

2665:                                             ; preds = %2662
  %2666 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2667 = icmp eq %struct.VP8Frame* %2660, %2666
  br i1 %2667, label %2671, label %2668

2668:                                             ; preds = %2665
  %2669 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2670 = icmp eq %struct.VP8Frame* %2660, %2669
  br i1 %2670, label %2671, label %2677

2671:                                             ; preds = %2668, %2665, %2662, %2657
  %2672 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 1
  %2673 = icmp eq %struct.VP8Frame* %2672, %2659
  br i1 %2673, label %2699, label %2690

2674:                                             ; preds = %2732, %2729, %2726, %2723
  %2675 = bitcast %struct.AVCodecContext** %17 to i8**
  %2676 = load i8*, i8** %2675, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %2676, i32 8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0)) #7
  call void @abort() #9
  unreachable

2677:                                             ; preds = %2732, %2720, %2708, %2696, %2668
  %2678 = phi %struct.VP8Frame* [ %2660, %2668 ], [ %2672, %2696 ], [ %2700, %2708 ], [ %2712, %2720 ], [ %2724, %2732 ]
  %2679 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 0, i32 0
  %2680 = load %struct.AVFrame*, %struct.AVFrame** %2679, align 8
  %2681 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2680, i64 0, i32 25, i64 0
  %2682 = load %struct.AVBufferRef*, %struct.AVBufferRef** %2681, align 8
  %2683 = icmp eq %struct.AVBufferRef* %2682, null
  br i1 %2683, label %2735, label %2684

2684:                                             ; preds = %2677
  %2685 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 1
  call void @av_buffer_unref(%struct.AVBufferRef** %2685) #7
  %2686 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 2
  call void @av_buffer_unref(%struct.AVBufferRef** %2686) #7
  %2687 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 3
  store i8* null, i8** %2687, align 8
  %2688 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %2689 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 0
  call void @ff_thread_release_buffer(%struct.AVCodecContext* %2688, %struct.ThreadFrame* %2689) #7
  br label %2735

2690:                                             ; preds = %2671
  %2691 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2692 = icmp eq %struct.VP8Frame* %2672, %2691
  br i1 %2692, label %2699, label %2693

2693:                                             ; preds = %2690
  %2694 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2695 = icmp eq %struct.VP8Frame* %2672, %2694
  br i1 %2695, label %2699, label %2696

2696:                                             ; preds = %2693
  %2697 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2698 = icmp eq %struct.VP8Frame* %2672, %2697
  br i1 %2698, label %2699, label %2677

2699:                                             ; preds = %2696, %2693, %2690, %2671
  %2700 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 2
  %2701 = icmp eq %struct.VP8Frame* %2700, %2659
  br i1 %2701, label %2711, label %2702

2702:                                             ; preds = %2699
  %2703 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2704 = icmp eq %struct.VP8Frame* %2700, %2703
  br i1 %2704, label %2711, label %2705

2705:                                             ; preds = %2702
  %2706 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2707 = icmp eq %struct.VP8Frame* %2700, %2706
  br i1 %2707, label %2711, label %2708

2708:                                             ; preds = %2705
  %2709 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2710 = icmp eq %struct.VP8Frame* %2700, %2709
  br i1 %2710, label %2711, label %2677

2711:                                             ; preds = %2708, %2705, %2702, %2699
  %2712 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 3
  %2713 = icmp eq %struct.VP8Frame* %2712, %2659
  br i1 %2713, label %2723, label %2714

2714:                                             ; preds = %2711
  %2715 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2716 = icmp eq %struct.VP8Frame* %2712, %2715
  br i1 %2716, label %2723, label %2717

2717:                                             ; preds = %2714
  %2718 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2719 = icmp eq %struct.VP8Frame* %2712, %2718
  br i1 %2719, label %2723, label %2720

2720:                                             ; preds = %2717
  %2721 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2722 = icmp eq %struct.VP8Frame* %2712, %2721
  br i1 %2722, label %2723, label %2677

2723:                                             ; preds = %2720, %2717, %2714, %2711
  %2724 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 46, i64 4
  %2725 = icmp eq %struct.VP8Frame* %2724, %2659
  br i1 %2725, label %2674, label %2726

2726:                                             ; preds = %2723
  %2727 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2728 = icmp eq %struct.VP8Frame* %2724, %2727
  br i1 %2728, label %2674, label %2729

2729:                                             ; preds = %2726
  %2730 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2731 = icmp eq %struct.VP8Frame* %2724, %2730
  br i1 %2731, label %2674, label %2732

2732:                                             ; preds = %2729
  %2733 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2734 = icmp eq %struct.VP8Frame* %2724, %2733
  br i1 %2734, label %2674, label %2677

2735:                                             ; preds = %2684, %2677
  store %struct.VP8Frame* %2678, %struct.VP8Frame** %2589, align 8
  %2736 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 47
  %2737 = load i8, i8* %2736, align 8
  %2738 = icmp eq i8 %2737, 0
  br i1 %2738, label %2739, label %2741

2739:                                             ; preds = %2735
  %2740 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 77
  store i32 5, i32* %2740, align 4
  br label %2741

2741:                                             ; preds = %2739, %2735
  %2742 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 48
  %2743 = load i8, i8* %2742, align 1
  %2744 = icmp eq i8 %2743, 0
  %2745 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 78
  %2746 = select i1 %2744, i32 1, i32 2
  store i32 %2746, i32* %2745, align 8
  %2747 = load i8, i8* %30, align 8
  %2748 = icmp eq i8 %2747, 0
  br i1 %2748, label %2749, label %2760

2749:                                             ; preds = %2741
  %2750 = load %struct.VP8Frame*, %struct.VP8Frame** %2626, align 8
  %2751 = icmp eq %struct.VP8Frame* %2750, null
  br i1 %2751, label %2758, label %2752

2752:                                             ; preds = %2749
  %2753 = load %struct.VP8Frame*, %struct.VP8Frame** %2627, align 8
  %2754 = icmp eq %struct.VP8Frame* %2753, null
  br i1 %2754, label %2758, label %2755

2755:                                             ; preds = %2752
  %2756 = load %struct.VP8Frame*, %struct.VP8Frame** %2628, align 8
  %2757 = icmp eq %struct.VP8Frame* %2756, null
  br i1 %2757, label %2758, label %2760

2758:                                             ; preds = %2755, %2752, %2749
  %2759 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %2759, i32 24, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %5373

2760:                                             ; preds = %2755, %2741
  %2761 = zext i8 %2747 to i32
  %2762 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 0
  %2763 = load %struct.AVFrame*, %struct.AVFrame** %2679, align 8
  %2764 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2763, i64 0, i32 7
  store i32 %2761, i32* %2764, align 8
  %2765 = load i8, i8* %30, align 8
  %2766 = icmp eq i8 %2765, 0
  %2767 = select i1 %2766, i32 2, i32 1
  %2768 = load %struct.AVFrame*, %struct.AVFrame** %2679, align 8
  %2769 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2768, i64 0, i32 8
  store i32 %2767, i32* %2769, align 4
  %2770 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %2771 = call i32 @ff_thread_get_buffer(%struct.AVCodecContext* %2770, %struct.ThreadFrame* %2762, i32 %2606) #7
  %2772 = icmp slt i32 %2771, 0
  br i1 %2772, label %5373, label %2773

2773:                                             ; preds = %2760
  %2774 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 8
  %2775 = load i16, i16* %2774, align 8
  %2776 = zext i16 %2775 to i32
  %2777 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 9
  %2778 = load i16, i16* %2777, align 2
  %2779 = zext i16 %2778 to i32
  %2780 = mul nuw nsw i32 %2779, %2776
  %2781 = call %struct.AVBufferRef* @av_buffer_allocz(i32 %2780) #7
  %2782 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 1
  store %struct.AVBufferRef* %2781, %struct.AVBufferRef** %2782, align 8
  %2783 = icmp eq %struct.AVBufferRef* %2781, null
  br i1 %2783, label %2803, label %2784

2784:                                             ; preds = %2773
  %2785 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  %2786 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %2785, i64 0, i32 137
  %2787 = load %struct.AVHWAccel*, %struct.AVHWAccel** %2786, align 8
  %2788 = icmp eq %struct.AVHWAccel* %2787, null
  br i1 %2788, label %2805, label %2789

2789:                                             ; preds = %2784
  %2790 = getelementptr inbounds %struct.AVHWAccel, %struct.AVHWAccel* %2787, i64 0, i32 10
  %2791 = load i32, i32* %2790, align 8
  %2792 = icmp eq i32 %2791, 0
  br i1 %2792, label %2805, label %2793

2793:                                             ; preds = %2789
  %2794 = call %struct.AVBufferRef* @av_buffer_allocz(i32 %2791) #7
  %2795 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 2
  store %struct.AVBufferRef* %2794, %struct.AVBufferRef** %2795, align 8
  %2796 = icmp eq %struct.AVBufferRef* %2794, null
  br i1 %2796, label %2803, label %2797

2797:                                             ; preds = %2793
  %2798 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %2794, i64 0, i32 1
  %2799 = bitcast i8** %2798 to i64*
  %2800 = load i64, i64* %2799, align 8
  %2801 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2678, i64 0, i32 3
  %2802 = bitcast i8** %2801 to i64*
  store i64 %2800, i64* %2802, align 8
  br label %2805

2803:                                             ; preds = %2793, %2773
  call void @av_buffer_unref(%struct.AVBufferRef** %2782) #7
  %2804 = load %struct.AVCodecContext*, %struct.AVCodecContext** %17, align 8
  call void @ff_thread_release_buffer(%struct.AVCodecContext* %2804, %struct.ThreadFrame* %2762) #7
  br label %5373

2805:                                             ; preds = %2797, %2789, %2784
  %2806 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 37
  %2807 = load i32, i32* %2806, align 4
  %2808 = icmp eq i32 %2807, -1
  %2809 = sext i32 %2807 to i64
  %2810 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 %2809
  %2811 = select i1 %2808, %struct.VP8Frame** %2628, %struct.VP8Frame** %2810
  %2812 = bitcast %struct.VP8Frame** %2811 to i64*
  %2813 = load i64, i64* %2812, align 8
  %2814 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 3
  %2815 = bitcast %struct.VP8Frame** %2814 to i64*
  store i64 %2813, i64* %2815, align 8
  %2816 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 36
  %2817 = load i32, i32* %2816, align 8
  %2818 = icmp eq i32 %2817, -1
  %2819 = sext i32 %2817 to i64
  %2820 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 %2819
  %2821 = select i1 %2818, %struct.VP8Frame** %2627, %struct.VP8Frame** %2820
  %2822 = bitcast %struct.VP8Frame** %2821 to i64*
  %2823 = load i64, i64* %2822, align 8
  %2824 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 2
  %2825 = bitcast %struct.VP8Frame** %2824 to i64*
  store i64 %2823, i64* %2825, align 8
  %2826 = load i32, i32* %1740, align 4
  %2827 = icmp eq i32 %2826, 0
  br i1 %2827, label %2830, label %2828

2828:                                             ; preds = %2805
  %2829 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 1
  store %struct.VP8Frame* %2678, %struct.VP8Frame** %2829, align 8
  br label %2835

2830:                                             ; preds = %2805
  %2831 = bitcast %struct.VP8Frame** %2626 to i64*
  %2832 = load i64, i64* %2831, align 8
  %2833 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 1
  %2834 = bitcast %struct.VP8Frame** %2833 to i64*
  store i64 %2832, i64* %2834, align 8
  br label %2835

2835:                                             ; preds = %2830, %2828
  %2836 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 0
  store %struct.VP8Frame* %2678, %struct.VP8Frame** %2836, align 8
  %2837 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %2838 = load %struct.AVCodec*, %struct.AVCodec** %2837, align 8
  %2839 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %2838, i64 0, i32 16
  %2840 = load i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)** %2839, align 8
  %2841 = icmp eq i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* %2840, null
  br i1 %2841, label %2843, label %2842

2842:                                             ; preds = %2835
  call void @ff_thread_finish_setup(%struct.AVCodecContext* %0) #7
  br label %2843

2843:                                             ; preds = %2842, %2835
  %2844 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 137
  %2845 = load %struct.AVHWAccel*, %struct.AVHWAccel** %2844, align 8
  %2846 = icmp eq %struct.AVHWAccel* %2845, null
  br i1 %2846, label %2868, label %2847

2847:                                             ; preds = %2843
  %2848 = getelementptr inbounds %struct.AVHWAccel, %struct.AVHWAccel* %2845, i64 0, i32 6
  %2849 = load i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)** %2848, align 8
  %2850 = load i8*, i8** %12, align 8
  %2851 = load i32, i32* %13, align 8
  %2852 = call i32 %2849(%struct.AVCodecContext* %0, i8* %2850, i32 %2851) #7
  %2853 = icmp slt i32 %2852, 0
  br i1 %2853, label %5373, label %2854

2854:                                             ; preds = %2847
  %2855 = load %struct.AVHWAccel*, %struct.AVHWAccel** %2844, align 8
  %2856 = getelementptr inbounds %struct.AVHWAccel, %struct.AVHWAccel* %2855, i64 0, i32 8
  %2857 = load i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)** %2856, align 8
  %2858 = load i8*, i8** %12, align 8
  %2859 = load i32, i32* %13, align 8
  %2860 = call i32 %2857(%struct.AVCodecContext* %0, i8* %2858, i32 %2859) #7
  %2861 = icmp slt i32 %2860, 0
  br i1 %2861, label %5373, label %2862

2862:                                             ; preds = %2854
  %2863 = load %struct.AVHWAccel*, %struct.AVHWAccel** %2844, align 8
  %2864 = getelementptr inbounds %struct.AVHWAccel, %struct.AVHWAccel* %2863, i64 0, i32 9
  %2865 = load i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)** %2864, align 8
  %2866 = call i32 %2865(%struct.AVCodecContext* %0) #7
  %2867 = icmp slt i32 %2866, 0
  br i1 %2867, label %5373, label %5351

2868:                                             ; preds = %2843
  %2869 = load %struct.AVFrame*, %struct.AVFrame** %2679, align 8
  %2870 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2869, i64 0, i32 1, i64 0
  %2871 = load i32, i32* %2870, align 8
  %2872 = sext i32 %2871 to i64
  %2873 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 10
  store i64 %2872, i64* %2873, align 8
  %2874 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2869, i64 0, i32 1, i64 1
  %2875 = load i32, i32* %2874, align 4
  %2876 = sext i32 %2875 to i64
  %2877 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 11
  store i64 %2876, i64* %2877, align 8
  %2878 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 28
  %2879 = bitcast [9 x i8]** %2878 to i8**
  %2880 = load i8*, i8** %2879, align 8
  %2881 = load i16, i16* %2774, align 8
  %2882 = zext i16 %2881 to i64
  %2883 = mul nuw nsw i64 %2882, 9
  call void @llvm.memset.p0i8.i64(i8* align 1 %2880, i8 0, i64 %2883, i1 false) #7
  %2884 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 50
  %2885 = load i32, i32* %2884, align 8
  %2886 = icmp eq i32 %2885, 0
  br i1 %2886, label %2887, label %2915

2887:                                             ; preds = %2868
  %2888 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 21
  %2889 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %2888, align 8
  %2890 = load i16, i16* %2777, align 2
  %2891 = zext i16 %2890 to i64
  %2892 = shl nuw nsw i64 %2891, 1
  %2893 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %2889, i64 %2892
  %2894 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %2893, i64 -1
  %2895 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %2894, i64 0, i32 0
  %2896 = load i16, i16* %2774, align 8
  %2897 = zext i16 %2896 to i64
  %2898 = mul nuw nsw i64 %2897, 96
  %2899 = add nuw nsw i64 %2898, 96
  call void @llvm.memset.p0i8.i64(i8* align 4 %2895, i8 0, i64 %2899, i1 false) #7
  %2900 = load i32, i32* %2884, align 8
  %2901 = icmp eq i32 %2900, 0
  br i1 %2901, label %2902, label %2915

2902:                                             ; preds = %2887
  %2903 = load i8, i8* %30, align 8
  %2904 = icmp eq i8 %2903, 0
  br i1 %2904, label %2905, label %2908

2905:                                             ; preds = %2902
  %2906 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 18, i64 0
  %2907 = bitcast i32* %2906 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2907, i8 0, i64 12, i1 false) #7
  br label %5301

2908:                                             ; preds = %2902
  %2909 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 22
  %2910 = load i8*, i8** %2909, align 8
  %2911 = load i16, i16* %2774, align 8
  %2912 = zext i16 %2911 to i64
  %2913 = shl nuw nsw i64 %2912, 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %2910, i8 2, i64 %2913, i1 false) #7
  %2914 = load i32, i32* %2884, align 8
  br label %2915

2915:                                             ; preds = %2908, %2887, %2868
  %2916 = phi i32 [ %2900, %2887 ], [ %2914, %2908 ], [ %2885, %2868 ]
  %2917 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 18, i64 0
  %2918 = bitcast i32* %2917 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2918, i8 0, i64 12, i1 false) #7
  %2919 = icmp eq i32 %2916, 1
  br i1 %2919, label %2920, label %5301

2920:                                             ; preds = %2915
  %2921 = icmp eq %struct.VP8Frame* %2590, null
  br i1 %2921, label %2931, label %2922

2922:                                             ; preds = %2920
  %2923 = load i8, i8* %309, align 4
  %2924 = icmp eq i8 %2923, 0
  br i1 %2924, label %2931, label %2925

2925:                                             ; preds = %2922
  %2926 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 19, i32 2
  %2927 = load i8, i8* %2926, align 2
  %2928 = icmp eq i8 %2927, 0
  br i1 %2928, label %2929, label %2931

2929:                                             ; preds = %2925
  %2930 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2590, i64 0, i32 0
  call void @ff_thread_await_progress(%struct.ThreadFrame* %2930, i32 1, i32 0) #7
  br label %2931

2931:                                             ; preds = %2929, %2925, %2922, %2920
  %2932 = load %struct.VP8Context*, %struct.VP8Context** %10, align 8
  %2933 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 16, i32 0, i32 1
  store i32 -64, i32* %2933, align 4
  %2934 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 9
  %2935 = load i16, i16* %2934, align 2
  %2936 = zext i16 %2935 to i32
  %2937 = shl nuw nsw i32 %2936, 6
  %2938 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 16, i32 1, i32 1
  store i32 %2937, i32* %2938, align 4
  %2939 = icmp eq i16 %2935, 0
  br i1 %2939, label %5301, label %2940

2940:                                             ; preds = %2931
  %2941 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 33
  %2942 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 8
  %2943 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 23, i64 0
  %2944 = bitcast i8* %2943 to i32*
  %2945 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 16, i32 0, i32 0
  %2946 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 16, i32 1, i32 0
  %2947 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29
  %2948 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29, i32 3
  %2949 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29, i32 2
  %2950 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29, i32 1
  %2951 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29, i32 5
  %2952 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2590, i64 0, i32 1
  %2953 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 19, i32 2
  %2954 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 0, i64 0
  %2955 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %2947, i64 0, i32 0
  %2956 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 29, i32 4
  %2957 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 19, i32 0
  %2958 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 14
  %2959 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 1
  %2960 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 12
  %2961 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 50
  %2962 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 22
  %2963 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 2
  %2964 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 3
  %2965 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 4
  %2966 = bitcast i32* %6 to [4 x i8]*
  %2967 = bitcast [4 x %struct.VP56mv]* %5 to i8*
  %2968 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 1
  %2969 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %2968, i64 0, i32 0
  %2970 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 1, i32 1
  %2971 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 2
  %2972 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %2971, i64 0, i32 0
  %2973 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 2, i32 1
  %2974 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 3
  %2975 = bitcast i32* %6 to i8*
  %2976 = bitcast [4 x %struct.VP56mv]* %5 to i32*
  %2977 = bitcast %struct.VP56mv* %2968 to i32*
  %2978 = bitcast %struct.VP56mv* %2971 to i32*
  %2979 = getelementptr inbounds [4 x i8], [4 x i8]* %2966, i64 0, i64 1
  %2980 = getelementptr inbounds [4 x i8], [4 x i8]* %2966, i64 0, i64 3
  %2981 = bitcast %struct.VP56mv* %2974 to i32*
  %2982 = getelementptr inbounds [4 x i8], [4 x i8]* %2966, i64 0, i64 2
  %2983 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 2, i32 0
  %2984 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 1, i32 0
  %2985 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 0
  %2986 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 9
  %2987 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 10
  %2988 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 11
  %2989 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 12
  %2990 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 2
  %2991 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 1
  %2992 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 0
  %2993 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 9
  %2994 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 10
  %2995 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 11
  %2996 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 12
  %2997 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 2
  %2998 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 1
  %2999 = load i16, i16* %2942, align 8
  br label %3000

3000:                                             ; preds = %5292, %2940
  %3001 = phi i16 [ %2935, %2940 ], [ %5293, %5292 ]
  %3002 = phi i32 [ %2937, %2940 ], [ %5298, %5292 ]
  %3003 = phi i32 [ -64, %2940 ], [ %5297, %5292 ]
  %3004 = phi i16 [ %2999, %2940 ], [ %5296, %5292 ]
  %3005 = phi i32 [ 0, %2940 ], [ %3008, %5292 ]
  %3006 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %2941, align 8
  %3007 = zext i16 %3004 to i32
  %3008 = add nuw nsw i32 %3005, 1
  store i32 33686018, i32* %2944, align 8
  store i32 -64, i32* %2945, align 4
  %3009 = shl nuw nsw i32 %3007, 6
  store i32 %3009, i32* %2946, align 4
  %3010 = icmp eq i16 %3004, 0
  br i1 %3010, label %5292, label %3011

3011:                                             ; preds = %3000
  %3012 = add nuw nsw i32 %3007, 1
  %3013 = mul nsw i32 %3012, %3008
  %3014 = add nuw nsw i32 %3013, 1
  %3015 = zext i32 %3014 to i64
  %3016 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3006, i64 %3015
  %3017 = icmp eq i32 %3005, 0
  %3018 = mul i32 %3005, %3007
  %3019 = sext i32 %3018 to i64
  br label %3020

3020:                                             ; preds = %5277, %3011
  %3021 = phi i64 [ 0, %3011 ], [ %5282, %5277 ]
  %3022 = phi i64 [ %3019, %3011 ], [ %5283, %5277 ]
  %3023 = phi i16 [ %3004, %3011 ], [ %5285, %5277 ]
  %3024 = phi %struct.VP8Macroblock* [ %3016, %3011 ], [ %5284, %5277 ]
  %3025 = load i8*, i8** %2948, align 8
  %3026 = load i8*, i8** %2949, align 8
  %3027 = icmp ugt i8* %3025, %3026
  br i1 %3027, label %3034, label %3028

3028:                                             ; preds = %3020
  %3029 = load i32, i32* %2950, align 4
  %3030 = icmp sgt i32 %3029, -1
  br i1 %3030, label %3031, label %3034

3031:                                             ; preds = %3028
  %3032 = load i32, i32* %2951, align 4
  %3033 = add nsw i32 %3032, 1
  store i32 %3033, i32* %2951, align 4
  br label %3036

3034:                                             ; preds = %3028, %3020
  %3035 = load i32, i32* %2951, align 4
  br label %3036

3036:                                             ; preds = %3034, %3031
  %3037 = phi i32 [ %3035, %3034 ], [ %3033, %3031 ]
  %3038 = icmp slt i32 %3037, 11
  br i1 %3038, label %3039, label %5373

3039:                                             ; preds = %3036
  br i1 %3017, label %3040, label %3047

3040:                                             ; preds = %3039
  %3041 = zext i16 %3023 to i64
  %3042 = sub nsw i64 0, %3041
  %3043 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1
  %3044 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3043, i64 %3042
  %3045 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3044, i64 0, i32 8
  %3046 = bitcast [4 x i8]* %3045 to i32*
  store i32 33686018, i32* %3046, align 4
  br label %3047

3047:                                             ; preds = %3040, %3039
  %3048 = load %struct.AVBufferRef*, %struct.AVBufferRef** %2782, align 8
  %3049 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %3048, i64 0, i32 1
  %3050 = load i8*, i8** %3049, align 8
  %3051 = getelementptr inbounds i8, i8* %3050, i64 %3022
  br i1 %2921, label %3059, label %3052

3052:                                             ; preds = %3047
  %3053 = load %struct.AVBufferRef*, %struct.AVBufferRef** %2952, align 8
  %3054 = icmp eq %struct.AVBufferRef* %3053, null
  br i1 %3054, label %3059, label %3055

3055:                                             ; preds = %3052
  %3056 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %3053, i64 0, i32 1
  %3057 = load i8*, i8** %3056, align 8
  %3058 = getelementptr inbounds i8, i8* %3057, i64 %3022
  br label %3059

3059:                                             ; preds = %3055, %3052, %3047
  %3060 = phi i8* [ %3058, %3055 ], [ null, %3052 ], [ null, %3047 ]
  %3061 = load i8, i8* %2953, align 2
  %3062 = icmp eq i8 %3061, 0
  br i1 %3062, label %3143, label %3063

3063:                                             ; preds = %3059
  %3064 = load i8, i8* %2954, align 4
  %3065 = load i32, i32* %2955, align 8
  %3066 = sext i32 %3065 to i64
  %3067 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3066
  %3068 = load i8, i8* %3067, align 1
  %3069 = zext i8 %3068 to i32
  %3070 = load i32, i32* %2950, align 4
  %3071 = load i32, i32* %2956, align 8
  %3072 = shl i32 %3065, %3069
  store i32 %3072, i32* %2955, align 8
  %3073 = shl i32 %3071, %3069
  %3074 = add nsw i32 %3070, %3069
  %3075 = icmp sgt i32 %3074, -1
  br i1 %3075, label %3076, label %3089

3076:                                             ; preds = %3063
  %3077 = load i8*, i8** %2949, align 8
  %3078 = load i8*, i8** %2948, align 8
  %3079 = icmp ult i8* %3077, %3078
  br i1 %3079, label %3080, label %3089

3080:                                             ; preds = %3076
  %3081 = getelementptr inbounds i8, i8* %3077, i64 2
  store i8* %3081, i8** %2949, align 8
  %3082 = bitcast i8* %3077 to i16*
  %3083 = load i16, i16* %3082, align 1
  %3084 = call i16 @llvm.bswap.i16(i16 %3083) #7
  %3085 = zext i16 %3084 to i32
  %3086 = shl i32 %3085, %3074
  %3087 = or i32 %3086, %3073
  %3088 = add nsw i32 %3074, -16
  br label %3089

3089:                                             ; preds = %3080, %3076, %3063
  %3090 = phi i32 [ %3088, %3080 ], [ %3074, %3076 ], [ %3074, %3063 ]
  %3091 = phi i32 [ %3087, %3080 ], [ %3073, %3076 ], [ %3073, %3063 ]
  store i32 %3090, i32* %2950, align 4
  %3092 = add nsw i32 %3072, -1
  %3093 = zext i8 %3064 to i32
  %3094 = mul nsw i32 %3092, %3093
  %3095 = ashr i32 %3094, 8
  %3096 = add nsw i32 %3095, 1
  %3097 = shl i32 %3096, 16
  %3098 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3097, i32 %3096, i32 %3091, i32 0, i32 %3072, i32 %3091) #8, !srcloc !2
  %3099 = extractvalue { i32, i32, i32 } %3098, 0
  %3100 = extractvalue { i32, i32, i32 } %3098, 1
  %3101 = extractvalue { i32, i32, i32 } %3098, 2
  store i32 %3100, i32* %2955, align 8
  store i32 %3101, i32* %2956, align 8
  %3102 = add nsw i32 %3099, 1
  %3103 = sext i32 %3102 to i64
  %3104 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 0, i64 %3103
  %3105 = load i8, i8* %3104, align 1
  %3106 = sext i32 %3100 to i64
  %3107 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3106
  %3108 = load i8, i8* %3107, align 1
  %3109 = zext i8 %3108 to i32
  %3110 = shl i32 %3100, %3109
  store i32 %3110, i32* %2955, align 8
  %3111 = shl i32 %3101, %3109
  %3112 = add nsw i32 %3090, %3109
  %3113 = icmp sgt i32 %3112, -1
  br i1 %3113, label %3114, label %3127

3114:                                             ; preds = %3089
  %3115 = load i8*, i8** %2949, align 8
  %3116 = load i8*, i8** %2948, align 8
  %3117 = icmp ult i8* %3115, %3116
  br i1 %3117, label %3118, label %3127

3118:                                             ; preds = %3114
  %3119 = getelementptr inbounds i8, i8* %3115, i64 2
  store i8* %3119, i8** %2949, align 8
  %3120 = bitcast i8* %3115 to i16*
  %3121 = load i16, i16* %3120, align 1
  %3122 = call i16 @llvm.bswap.i16(i16 %3121) #7
  %3123 = zext i16 %3122 to i32
  %3124 = shl i32 %3123, %3112
  %3125 = or i32 %3124, %3111
  %3126 = add nsw i32 %3112, -16
  br label %3127

3127:                                             ; preds = %3118, %3114, %3089
  %3128 = phi i32 [ %3126, %3118 ], [ %3112, %3114 ], [ %3112, %3089 ]
  %3129 = phi i32 [ %3125, %3118 ], [ %3111, %3114 ], [ %3111, %3089 ]
  store i32 %3128, i32* %2950, align 4
  %3130 = add nsw i32 %3110, -1
  %3131 = zext i8 %3105 to i32
  %3132 = mul nsw i32 %3130, %3131
  %3133 = ashr i32 %3132, 8
  %3134 = add nsw i32 %3133, 1
  %3135 = shl i32 %3134, 16
  %3136 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3135, i32 %3134, i32 %3129, i32 0, i32 %3110, i32 %3129) #8, !srcloc !2
  %3137 = extractvalue { i32, i32, i32 } %3136, 0
  %3138 = extractvalue { i32, i32, i32 } %3136, 1
  %3139 = extractvalue { i32, i32, i32 } %3136, 2
  store i32 %3138, i32* %2955, align 8
  store i32 %3139, i32* %2956, align 8
  %3140 = shl i32 %3099, 1
  %3141 = add nsw i32 %3137, %3140
  %3142 = trunc i32 %3141 to i8
  store i8 %3142, i8* %3051, align 1
  br label %3152

3143:                                             ; preds = %3059
  %3144 = load i8, i8* %2957, align 4
  %3145 = icmp eq i8 %3144, 0
  br i1 %3145, label %3146, label %3148

3146:                                             ; preds = %3143
  %3147 = load i8, i8* %3051, align 1
  br label %3152

3148:                                             ; preds = %3143
  %3149 = icmp eq i8* %3060, null
  %3150 = select i1 %3149, i8* %3051, i8* %3060
  %3151 = load i8, i8* %3150, align 1
  store i8 %3151, i8* %3051, align 1
  br label %3152

3152:                                             ; preds = %3148, %3146, %3127
  %3153 = phi i8 [ %3147, %3146 ], [ %3142, %3127 ], [ %3151, %3148 ]
  %3154 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 5
  store i8 %3153, i8* %3154, align 1
  %3155 = load i8, i8* %2958, align 2
  %3156 = icmp eq i8 %3155, 0
  br i1 %3156, label %3197, label %3157

3157:                                             ; preds = %3152
  %3158 = load i8, i8* %2959, align 1
  %3159 = load i32, i32* %2955, align 8
  %3160 = sext i32 %3159 to i64
  %3161 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3160
  %3162 = load i8, i8* %3161, align 1
  %3163 = zext i8 %3162 to i32
  %3164 = load i32, i32* %2950, align 4
  %3165 = load i32, i32* %2956, align 8
  %3166 = shl i32 %3159, %3163
  store i32 %3166, i32* %2955, align 8
  %3167 = shl i32 %3165, %3163
  %3168 = add nsw i32 %3164, %3163
  %3169 = icmp sgt i32 %3168, -1
  br i1 %3169, label %3170, label %3183

3170:                                             ; preds = %3157
  %3171 = load i8*, i8** %2949, align 8
  %3172 = load i8*, i8** %2948, align 8
  %3173 = icmp ult i8* %3171, %3172
  br i1 %3173, label %3174, label %3183

3174:                                             ; preds = %3170
  %3175 = getelementptr inbounds i8, i8* %3171, i64 2
  store i8* %3175, i8** %2949, align 8
  %3176 = bitcast i8* %3171 to i16*
  %3177 = load i16, i16* %3176, align 1
  %3178 = call i16 @llvm.bswap.i16(i16 %3177) #7
  %3179 = zext i16 %3178 to i32
  %3180 = shl i32 %3179, %3168
  %3181 = or i32 %3180, %3167
  %3182 = add nsw i32 %3168, -16
  br label %3183

3183:                                             ; preds = %3174, %3170, %3157
  %3184 = phi i32 [ %3182, %3174 ], [ %3168, %3170 ], [ %3168, %3157 ]
  %3185 = phi i32 [ %3181, %3174 ], [ %3167, %3170 ], [ %3167, %3157 ]
  store i32 %3184, i32* %2950, align 4
  %3186 = add nsw i32 %3166, -1
  %3187 = zext i8 %3158 to i32
  %3188 = mul nsw i32 %3186, %3187
  %3189 = ashr i32 %3188, 8
  %3190 = add nsw i32 %3189, 1
  %3191 = shl i32 %3190, 16
  %3192 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3191, i32 %3190, i32 %3185, i32 0, i32 %3166, i32 %3185) #8, !srcloc !2
  %3193 = extractvalue { i32, i32, i32 } %3192, 0
  %3194 = extractvalue { i32, i32, i32 } %3192, 1
  %3195 = extractvalue { i32, i32, i32 } %3192, 2
  store i32 %3194, i32* %2955, align 8
  store i32 %3195, i32* %2956, align 8
  %3196 = trunc i32 %3193 to i8
  br label %3197

3197:                                             ; preds = %3183, %3152
  %3198 = phi i8 [ %3196, %3183 ], [ 0, %3152 ]
  %3199 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 0
  store i8 %3198, i8* %3199, align 4
  %3200 = load i8, i8* %2960, align 8
  %3201 = icmp eq i8 %3200, 0
  br i1 %3201, label %3412, label %3202

3202:                                             ; preds = %3197
  %3203 = load i32, i32* %2955, align 8
  %3204 = load i32, i32* %2950, align 4
  %3205 = load i32, i32* %2956, align 8
  br label %3206

3206:                                             ; preds = %3234, %3202
  %3207 = phi i32 [ %3205, %3202 ], [ %3246, %3234 ]
  %3208 = phi i32 [ %3204, %3202 ], [ %3235, %3234 ]
  %3209 = phi i32 [ %3203, %3202 ], [ %3245, %3234 ]
  %3210 = phi i64 [ 0, %3202 ], [ %3250, %3234 ]
  %3211 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_pred16x16_prob_intra, i64 0, i64 %3210
  %3212 = load i8, i8* %3211, align 1
  %3213 = sext i32 %3209 to i64
  %3214 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3213
  %3215 = load i8, i8* %3214, align 1
  %3216 = zext i8 %3215 to i32
  %3217 = shl i32 %3209, %3216
  store i32 %3217, i32* %2955, align 8
  %3218 = shl i32 %3207, %3216
  %3219 = add nsw i32 %3208, %3216
  %3220 = icmp sgt i32 %3219, -1
  br i1 %3220, label %3221, label %3234

3221:                                             ; preds = %3206
  %3222 = load i8*, i8** %2949, align 8
  %3223 = load i8*, i8** %2948, align 8
  %3224 = icmp ult i8* %3222, %3223
  br i1 %3224, label %3225, label %3234

3225:                                             ; preds = %3221
  %3226 = getelementptr inbounds i8, i8* %3222, i64 2
  store i8* %3226, i8** %2949, align 8
  %3227 = bitcast i8* %3222 to i16*
  %3228 = load i16, i16* %3227, align 1
  %3229 = call i16 @llvm.bswap.i16(i16 %3228) #7
  %3230 = zext i16 %3229 to i32
  %3231 = shl i32 %3230, %3219
  %3232 = or i32 %3231, %3218
  %3233 = add nsw i32 %3219, -16
  br label %3234

3234:                                             ; preds = %3225, %3221, %3206
  %3235 = phi i32 [ %3233, %3225 ], [ %3219, %3221 ], [ %3219, %3206 ]
  %3236 = phi i32 [ %3232, %3225 ], [ %3218, %3221 ], [ %3218, %3206 ]
  store i32 %3235, i32* %2950, align 4
  %3237 = add nsw i32 %3217, -1
  %3238 = zext i8 %3212 to i32
  %3239 = mul nsw i32 %3237, %3238
  %3240 = ashr i32 %3239, 8
  %3241 = add nsw i32 %3240, 1
  %3242 = shl i32 %3241, 16
  %3243 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3242, i32 %3241, i32 %3236, i32 0, i32 %3217, i32 %3236) #8, !srcloc !2
  %3244 = extractvalue { i32, i32, i32 } %3243, 0
  %3245 = extractvalue { i32, i32, i32 } %3243, 1
  %3246 = extractvalue { i32, i32, i32 } %3243, 2
  store i32 %3245, i32* %2955, align 8
  store i32 %3246, i32* %2956, align 8
  %3247 = sext i32 %3244 to i64
  %3248 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @vp8_pred16x16_tree_intra, i64 0, i64 %3210, i64 %3247
  %3249 = load i8, i8* %3248, align 1
  %3250 = sext i8 %3249 to i64
  %3251 = icmp sgt i8 %3249, 0
  br i1 %3251, label %3206, label %3252

3252:                                             ; preds = %3234
  %3253 = sext i8 %3249 to i32
  %3254 = sub nsw i32 0, %3253
  %3255 = trunc i32 %3254 to i8
  %3256 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 1
  store i8 %3255, i8* %3256, align 1
  %3257 = and i32 %3254, 255
  %3258 = icmp eq i32 %3257, 4
  br i1 %3258, label %3259, label %3341

3259:                                             ; preds = %3252
  %3260 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 6, i64 0
  %3261 = load i16, i16* %2942, align 8
  %3262 = zext i16 %3261 to i64
  %3263 = sub nsw i64 0, %3262
  %3264 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1
  %3265 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3264, i64 %3263
  %3266 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 8, i64 0
  %3267 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3265, i64 0, i32 8
  %3268 = bitcast [4 x i8]* %3267 to i32*
  %3269 = bitcast i8* %3266 to i32*
  %3270 = load i32, i32* %3268, align 4
  store i32 %3270, i32* %3269, align 4
  br label %3271

3271:                                             ; preds = %3338, %3259
  %3272 = phi i64 [ 0, %3259 ], [ %3339, %3338 ]
  %3273 = phi i8* [ %3260, %3259 ], [ %3335, %3338 ]
  %3274 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 23, i64 %3272
  %3275 = load i8, i8* %3274, align 1
  br label %3276

3276:                                             ; preds = %3333, %3271
  %3277 = phi i8 [ %3275, %3271 ], [ %3334, %3333 ]
  %3278 = phi i64 [ 0, %3271 ], [ %3336, %3333 ]
  %3279 = phi i8* [ %3273, %3271 ], [ %3335, %3333 ]
  %3280 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 8, i64 %3278
  %3281 = load i8, i8* %3280, align 1
  %3282 = zext i8 %3281 to i64
  %3283 = zext i8 %3277 to i64
  %3284 = load i32, i32* %2955, align 8
  %3285 = load i32, i32* %2950, align 4
  %3286 = load i32, i32* %2956, align 8
  br label %3287

3287:                                             ; preds = %3315, %3276
  %3288 = phi i32 [ %3286, %3276 ], [ %3327, %3315 ]
  %3289 = phi i32 [ %3285, %3276 ], [ %3316, %3315 ]
  %3290 = phi i32 [ %3284, %3276 ], [ %3326, %3315 ]
  %3291 = phi i64 [ 0, %3276 ], [ %3331, %3315 ]
  %3292 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_pred4x4_prob_intra, i64 0, i64 %3282, i64 %3283, i64 %3291
  %3293 = load i8, i8* %3292, align 1
  %3294 = sext i32 %3290 to i64
  %3295 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3294
  %3296 = load i8, i8* %3295, align 1
  %3297 = zext i8 %3296 to i32
  %3298 = shl i32 %3290, %3297
  store i32 %3298, i32* %2955, align 8
  %3299 = shl i32 %3288, %3297
  %3300 = add nsw i32 %3289, %3297
  %3301 = icmp sgt i32 %3300, -1
  br i1 %3301, label %3302, label %3315

3302:                                             ; preds = %3287
  %3303 = load i8*, i8** %2949, align 8
  %3304 = load i8*, i8** %2948, align 8
  %3305 = icmp ult i8* %3303, %3304
  br i1 %3305, label %3306, label %3315

3306:                                             ; preds = %3302
  %3307 = getelementptr inbounds i8, i8* %3303, i64 2
  store i8* %3307, i8** %2949, align 8
  %3308 = bitcast i8* %3303 to i16*
  %3309 = load i16, i16* %3308, align 1
  %3310 = call i16 @llvm.bswap.i16(i16 %3309) #7
  %3311 = zext i16 %3310 to i32
  %3312 = shl i32 %3311, %3300
  %3313 = or i32 %3312, %3299
  %3314 = add nsw i32 %3300, -16
  br label %3315

3315:                                             ; preds = %3306, %3302, %3287
  %3316 = phi i32 [ %3314, %3306 ], [ %3300, %3302 ], [ %3300, %3287 ]
  %3317 = phi i32 [ %3313, %3306 ], [ %3299, %3302 ], [ %3299, %3287 ]
  store i32 %3316, i32* %2950, align 4
  %3318 = add nsw i32 %3298, -1
  %3319 = zext i8 %3293 to i32
  %3320 = mul nsw i32 %3318, %3319
  %3321 = ashr i32 %3320, 8
  %3322 = add nsw i32 %3321, 1
  %3323 = shl i32 %3322, 16
  %3324 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3323, i32 %3322, i32 %3317, i32 0, i32 %3298, i32 %3317) #8, !srcloc !2
  %3325 = extractvalue { i32, i32, i32 } %3324, 0
  %3326 = extractvalue { i32, i32, i32 } %3324, 1
  %3327 = extractvalue { i32, i32, i32 } %3324, 2
  store i32 %3326, i32* %2955, align 8
  store i32 %3327, i32* %2956, align 8
  %3328 = sext i32 %3325 to i64
  %3329 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @vp8_pred4x4_tree, i64 0, i64 %3291, i64 %3328
  %3330 = load i8, i8* %3329, align 1
  %3331 = sext i8 %3330 to i64
  %3332 = icmp sgt i8 %3330, 0
  br i1 %3332, label %3287, label %3333

3333:                                             ; preds = %3315
  %3334 = sub i8 0, %3330
  store i8 %3334, i8* %3279, align 1
  store i8 %3334, i8* %3280, align 1
  store i8 %3334, i8* %3274, align 1
  %3335 = getelementptr inbounds i8, i8* %3279, i64 1
  %3336 = add nuw nsw i64 %3278, 1
  %3337 = icmp eq i64 %3336, 4
  br i1 %3337, label %3338, label %3276

3338:                                             ; preds = %3333
  %3339 = add nuw nsw i64 %3272, 1
  %3340 = icmp eq i64 %3339, 4
  br i1 %3340, label %3358, label %3271

3341:                                             ; preds = %3252
  %3342 = zext i32 %3257 to i64
  %3343 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_pred4x4_mode, i64 0, i64 %3342
  %3344 = load i8, i8* %3343, align 1
  %3345 = zext i8 %3344 to i32
  %3346 = mul nuw i32 %3345, 16843009
  %3347 = load i32, i32* %2961, align 8
  %3348 = icmp eq i32 %3347, 0
  br i1 %3348, label %3351, label %3349

3349:                                             ; preds = %3341
  %3350 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 8, i64 0
  br label %3355

3351:                                             ; preds = %3341
  %3352 = load i8*, i8** %2962, align 8
  %3353 = shl nsw i64 %3021, 2
  %3354 = getelementptr inbounds i8, i8* %3352, i64 %3353
  br label %3355

3355:                                             ; preds = %3351, %3349
  %3356 = phi i8* [ %3354, %3351 ], [ %3350, %3349 ]
  %3357 = bitcast i8* %3356 to i32*
  store i32 %3346, i32* %3357, align 4
  store i32 %3346, i32* %2944, align 8
  br label %3358

3358:                                             ; preds = %3338, %3355
  %3359 = load i32, i32* %2955, align 8
  %3360 = load i32, i32* %2950, align 4
  %3361 = load i32, i32* %2956, align 8
  br label %3362

3362:                                             ; preds = %3390, %3358
  %3363 = phi i32 [ %3361, %3358 ], [ %3402, %3390 ]
  %3364 = phi i32 [ %3360, %3358 ], [ %3391, %3390 ]
  %3365 = phi i32 [ %3359, %3358 ], [ %3401, %3390 ]
  %3366 = phi i64 [ 0, %3358 ], [ %3406, %3390 ]
  %3367 = getelementptr inbounds [3 x i8], [3 x i8]* @vp8_pred8x8c_prob_intra, i64 0, i64 %3366
  %3368 = load i8, i8* %3367, align 1
  %3369 = sext i32 %3365 to i64
  %3370 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3369
  %3371 = load i8, i8* %3370, align 1
  %3372 = zext i8 %3371 to i32
  %3373 = shl i32 %3365, %3372
  store i32 %3373, i32* %2955, align 8
  %3374 = shl i32 %3363, %3372
  %3375 = add nsw i32 %3364, %3372
  %3376 = icmp sgt i32 %3375, -1
  br i1 %3376, label %3377, label %3390

3377:                                             ; preds = %3362
  %3378 = load i8*, i8** %2949, align 8
  %3379 = load i8*, i8** %2948, align 8
  %3380 = icmp ult i8* %3378, %3379
  br i1 %3380, label %3381, label %3390

3381:                                             ; preds = %3377
  %3382 = getelementptr inbounds i8, i8* %3378, i64 2
  store i8* %3382, i8** %2949, align 8
  %3383 = bitcast i8* %3378 to i16*
  %3384 = load i16, i16* %3383, align 1
  %3385 = call i16 @llvm.bswap.i16(i16 %3384) #7
  %3386 = zext i16 %3385 to i32
  %3387 = shl i32 %3386, %3375
  %3388 = or i32 %3387, %3374
  %3389 = add nsw i32 %3375, -16
  br label %3390

3390:                                             ; preds = %3381, %3377, %3362
  %3391 = phi i32 [ %3389, %3381 ], [ %3375, %3377 ], [ %3375, %3362 ]
  %3392 = phi i32 [ %3388, %3381 ], [ %3374, %3377 ], [ %3374, %3362 ]
  store i32 %3391, i32* %2950, align 4
  %3393 = add nsw i32 %3373, -1
  %3394 = zext i8 %3368 to i32
  %3395 = mul nsw i32 %3393, %3394
  %3396 = ashr i32 %3395, 8
  %3397 = add nsw i32 %3396, 1
  %3398 = shl i32 %3397, 16
  %3399 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3398, i32 %3397, i32 %3392, i32 0, i32 %3373, i32 %3392) #8, !srcloc !2
  %3400 = extractvalue { i32, i32, i32 } %3399, 0
  %3401 = extractvalue { i32, i32, i32 } %3399, 1
  %3402 = extractvalue { i32, i32, i32 } %3399, 2
  store i32 %3401, i32* %2955, align 8
  store i32 %3402, i32* %2956, align 8
  %3403 = sext i32 %3400 to i64
  %3404 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @vp8_pred8x8c_tree, i64 0, i64 %3366, i64 %3403
  %3405 = load i8, i8* %3404, align 1
  %3406 = sext i8 %3405 to i64
  %3407 = icmp sgt i8 %3405, 0
  br i1 %3407, label %3362, label %3408

3408:                                             ; preds = %3390
  %3409 = sub i8 0, %3405
  %3410 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 4
  store i8 %3409, i8* %3410, align 4
  %3411 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 2
  store i8 0, i8* %3411, align 2
  br label %5277

3412:                                             ; preds = %3197
  %3413 = load i8, i8* %2963, align 4
  %3414 = zext i8 %3413 to i32
  %3415 = load i32, i32* %2955, align 8
  %3416 = sext i32 %3415 to i64
  %3417 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3416
  %3418 = load i8, i8* %3417, align 1
  %3419 = zext i8 %3418 to i32
  %3420 = load i32, i32* %2950, align 4
  %3421 = load i32, i32* %2956, align 8
  %3422 = shl i32 %3415, %3419
  store i32 %3422, i32* %2955, align 8
  %3423 = shl i32 %3421, %3419
  %3424 = add nsw i32 %3420, %3419
  %3425 = icmp sgt i32 %3424, -1
  br i1 %3425, label %3426, label %3439

3426:                                             ; preds = %3412
  %3427 = load i8*, i8** %2949, align 8
  %3428 = load i8*, i8** %2948, align 8
  %3429 = icmp ult i8* %3427, %3428
  br i1 %3429, label %3430, label %3439

3430:                                             ; preds = %3426
  %3431 = getelementptr inbounds i8, i8* %3427, i64 2
  store i8* %3431, i8** %2949, align 8
  %3432 = bitcast i8* %3427 to i16*
  %3433 = load i16, i16* %3432, align 1
  %3434 = call i16 @llvm.bswap.i16(i16 %3433) #7
  %3435 = zext i16 %3434 to i32
  %3436 = shl i32 %3435, %3424
  %3437 = or i32 %3436, %3423
  %3438 = add nsw i32 %3424, -16
  br label %3439

3439:                                             ; preds = %3430, %3426, %3412
  %3440 = phi i32 [ %3438, %3430 ], [ %3424, %3426 ], [ %3424, %3412 ]
  %3441 = phi i32 [ %3437, %3430 ], [ %3423, %3426 ], [ %3423, %3412 ]
  store i32 %3440, i32* %2950, align 4
  %3442 = add nsw i32 %3422, -1
  %3443 = mul nsw i32 %3442, %3414
  %3444 = ashr i32 %3443, 8
  %3445 = add nsw i32 %3444, 1
  %3446 = shl i32 %3445, 16
  %3447 = icmp ult i32 %3441, %3446
  br i1 %3447, label %5099, label %3448

3448:                                             ; preds = %3439
  %3449 = sub i32 %3422, %3445
  %3450 = sub i32 %3441, %3446
  store i32 %3450, i32* %2956, align 8
  %3451 = load i8, i8* %2964, align 1
  %3452 = zext i8 %3451 to i32
  %3453 = sext i32 %3449 to i64
  %3454 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3453
  %3455 = load i8, i8* %3454, align 1
  %3456 = zext i8 %3455 to i32
  %3457 = shl i32 %3449, %3456
  store i32 %3457, i32* %2955, align 8
  %3458 = shl i32 %3450, %3456
  %3459 = add nsw i32 %3440, %3456
  %3460 = icmp sgt i32 %3459, -1
  br i1 %3460, label %3461, label %3474

3461:                                             ; preds = %3448
  %3462 = load i8*, i8** %2949, align 8
  %3463 = load i8*, i8** %2948, align 8
  %3464 = icmp ult i8* %3462, %3463
  br i1 %3464, label %3465, label %3474

3465:                                             ; preds = %3461
  %3466 = getelementptr inbounds i8, i8* %3462, i64 2
  store i8* %3466, i8** %2949, align 8
  %3467 = bitcast i8* %3462 to i16*
  %3468 = load i16, i16* %3467, align 1
  %3469 = call i16 @llvm.bswap.i16(i16 %3468) #7
  %3470 = zext i16 %3469 to i32
  %3471 = shl i32 %3470, %3459
  %3472 = or i32 %3471, %3458
  %3473 = add nsw i32 %3459, -16
  br label %3474

3474:                                             ; preds = %3465, %3461, %3448
  %3475 = phi i32 [ %3473, %3465 ], [ %3459, %3461 ], [ %3459, %3448 ]
  %3476 = phi i32 [ %3472, %3465 ], [ %3458, %3461 ], [ %3458, %3448 ]
  store i32 %3475, i32* %2950, align 4
  %3477 = add nsw i32 %3457, -1
  %3478 = mul nsw i32 %3477, %3452
  %3479 = ashr i32 %3478, 8
  %3480 = add nsw i32 %3479, 1
  %3481 = shl i32 %3480, 16
  %3482 = icmp ult i32 %3476, %3481
  br i1 %3482, label %3523, label %3483

3483:                                             ; preds = %3474
  %3484 = sub i32 %3457, %3480
  %3485 = sub i32 %3476, %3481
  store i32 %3485, i32* %2956, align 8
  %3486 = load i8, i8* %2965, align 2
  %3487 = sext i32 %3484 to i64
  %3488 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3487
  %3489 = load i8, i8* %3488, align 1
  %3490 = zext i8 %3489 to i32
  %3491 = shl i32 %3484, %3490
  store i32 %3491, i32* %2955, align 8
  %3492 = shl i32 %3485, %3490
  %3493 = add nsw i32 %3475, %3490
  %3494 = icmp sgt i32 %3493, -1
  br i1 %3494, label %3495, label %3508

3495:                                             ; preds = %3483
  %3496 = load i8*, i8** %2949, align 8
  %3497 = load i8*, i8** %2948, align 8
  %3498 = icmp ult i8* %3496, %3497
  br i1 %3498, label %3499, label %3508

3499:                                             ; preds = %3495
  %3500 = getelementptr inbounds i8, i8* %3496, i64 2
  store i8* %3500, i8** %2949, align 8
  %3501 = bitcast i8* %3496 to i16*
  %3502 = load i16, i16* %3501, align 1
  %3503 = call i16 @llvm.bswap.i16(i16 %3502) #7
  %3504 = zext i16 %3503 to i32
  %3505 = shl i32 %3504, %3493
  %3506 = or i32 %3505, %3492
  %3507 = add nsw i32 %3493, -16
  br label %3508

3508:                                             ; preds = %3499, %3495, %3483
  %3509 = phi i32 [ %3507, %3499 ], [ %3493, %3495 ], [ %3493, %3483 ]
  %3510 = phi i32 [ %3506, %3499 ], [ %3492, %3495 ], [ %3492, %3483 ]
  store i32 %3509, i32* %2950, align 4
  %3511 = add nsw i32 %3491, -1
  %3512 = zext i8 %3486 to i32
  %3513 = mul nsw i32 %3511, %3512
  %3514 = ashr i32 %3513, 8
  %3515 = add nsw i32 %3514, 1
  %3516 = shl i32 %3515, 16
  %3517 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3516, i32 %3515, i32 %3510, i32 0, i32 %3491, i32 %3510) #8, !srcloc !2
  %3518 = extractvalue { i32, i32, i32 } %3517, 0
  %3519 = extractvalue { i32, i32, i32 } %3517, 1
  %3520 = extractvalue { i32, i32, i32 } %3517, 2
  store i32 %3519, i32* %2955, align 8
  store i32 %3520, i32* %2956, align 8
  %3521 = icmp eq i32 %3518, 0
  %3522 = select i1 %3521, i8 2, i8 3
  br label %3524

3523:                                             ; preds = %3474
  store i32 %3480, i32* %2955, align 8
  store i32 %3476, i32* %2956, align 8
  br label %3524

3524:                                             ; preds = %3523, %3508
  %3525 = phi i8 [ 1, %3523 ], [ %3522, %3508 ]
  %3526 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 2
  store i8 %3525, i8* %3526, align 2
  %3527 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 2
  %3528 = zext i8 %3525 to i64
  %3529 = add nsw i64 %3528, -1
  %3530 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 18, i64 %3529
  %3531 = load i32, i32* %3530, align 4
  %3532 = add nsw i32 %3531, 1
  store i32 %3532, i32* %3530, align 4
  %3533 = load i8, i8* %3527, align 2
  %3534 = zext i8 %3533 to i64
  %3535 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 17, i64 %3534
  %3536 = load i8, i8* %3535, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2967) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2967, i8 -86, i64 16, i1 false) #7
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2975) #7
  store i32 0, i32* %6, align 4
  %3537 = load i16, i16* %2942, align 8
  %3538 = zext i16 %3537 to i64
  %3539 = sub nsw i64 0, %3538
  %3540 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 %3539
  %3541 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3540, i64 -1
  %3542 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3540, i64 -2
  store i32 0, i32* %2976, align 16
  store i32 0, i32* %2977, align 4
  store i32 0, i32* %2978, align 8
  %3543 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3541, i64 0, i32 2
  %3544 = load i8, i8* %3543, align 2
  %3545 = icmp eq i8 %3544, 0
  br i1 %3545, label %3565, label %3546

3546:                                             ; preds = %3524
  %3547 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3541, i64 0, i32 9
  %3548 = bitcast %struct.VP56mv* %3547 to i32*
  %3549 = load i32, i32* %3548, align 4
  %3550 = icmp eq i32 %3549, 0
  br i1 %3550, label %3564, label %3551

3551:                                             ; preds = %3546
  %3552 = zext i8 %3544 to i64
  %3553 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 17, i64 %3552
  %3554 = load i8, i8* %3553, align 1
  %3555 = icmp eq i8 %3536, %3554
  br i1 %3555, label %3562, label %3556

3556:                                             ; preds = %3551
  %3557 = xor i32 %3549, -1
  %3558 = and i32 %3557, 2147450879
  %3559 = add nuw i32 %3558, 65537
  %3560 = and i32 %3557, -2147450880
  %3561 = xor i32 %3559, %3560
  br label %3562

3562:                                             ; preds = %3556, %3551
  %3563 = phi i32 [ %3561, %3556 ], [ %3549, %3551 ]
  store i32 %3563, i32* %2977, align 4
  store i8 2, i8* %2979, align 1
  br label %3565

3564:                                             ; preds = %3546
  store i8 2, i8* %2975, align 4
  br label %3565

3565:                                             ; preds = %3564, %3562, %3524
  %3566 = phi i8 [ 2, %3524 ], [ 2, %3562 ], [ 4, %3564 ]
  %3567 = phi i32 [ 0, %3524 ], [ 1, %3562 ], [ 0, %3564 ]
  %3568 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1, i32 2
  %3569 = load i8, i8* %3568, align 2
  %3570 = icmp eq i8 %3569, 0
  br i1 %3570, label %3606, label %3571

3571:                                             ; preds = %3565
  %3572 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1, i32 9
  %3573 = bitcast %struct.VP56mv* %3572 to i32*
  %3574 = load i32, i32* %3573, align 4
  %3575 = icmp eq i32 %3574, 0
  br i1 %3575, label %3605, label %3576

3576:                                             ; preds = %3571
  %3577 = zext i8 %3569 to i64
  %3578 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 17, i64 %3577
  %3579 = load i8, i8* %3578, align 1
  %3580 = icmp eq i8 %3536, %3579
  br i1 %3580, label %3587, label %3581

3581:                                             ; preds = %3576
  %3582 = xor i32 %3574, -1
  %3583 = and i32 %3582, 2147450879
  %3584 = add nuw i32 %3583, 65537
  %3585 = and i32 %3582, -2147450880
  %3586 = xor i32 %3584, %3585
  br label %3587

3587:                                             ; preds = %3581, %3576
  %3588 = phi i32 [ %3586, %3581 ], [ %3574, %3576 ]
  %3589 = zext i32 %3567 to i64
  %3590 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3589
  %3591 = bitcast %struct.VP56mv* %3590 to i32*
  %3592 = load i32, i32* %3591, align 4
  %3593 = icmp eq i32 %3588, %3592
  br i1 %3593, label %3599, label %3594

3594:                                             ; preds = %3587
  %3595 = add nuw nsw i32 %3567, 1
  %3596 = zext i32 %3595 to i64
  %3597 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3596
  %3598 = bitcast %struct.VP56mv* %3597 to i32*
  store i32 %3588, i32* %3598, align 4
  br label %3599

3599:                                             ; preds = %3594, %3587
  %3600 = phi i32 [ %3595, %3594 ], [ %3567, %3587 ]
  %3601 = sext i32 %3600 to i64
  %3602 = getelementptr inbounds [4 x i8], [4 x i8]* %2966, i64 0, i64 %3601
  %3603 = load i8, i8* %3602, align 1
  %3604 = add i8 %3603, 2
  store i8 %3604, i8* %3602, align 1
  br label %3606

3605:                                             ; preds = %3571
  store i8 %3566, i8* %2975, align 4
  br label %3606

3606:                                             ; preds = %3605, %3599, %3565
  %3607 = phi i32 [ %3567, %3565 ], [ %3600, %3599 ], [ %3567, %3605 ]
  %3608 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3542, i64 0, i32 2
  %3609 = load i8, i8* %3608, align 2
  %3610 = icmp eq i8 %3609, 0
  br i1 %3610, label %3647, label %3611

3611:                                             ; preds = %3606
  %3612 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3542, i64 0, i32 9
  %3613 = bitcast %struct.VP56mv* %3612 to i32*
  %3614 = load i32, i32* %3613, align 4
  %3615 = icmp eq i32 %3614, 0
  br i1 %3615, label %3644, label %3616

3616:                                             ; preds = %3611
  %3617 = zext i8 %3609 to i64
  %3618 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 17, i64 %3617
  %3619 = load i8, i8* %3618, align 1
  %3620 = icmp eq i8 %3536, %3619
  br i1 %3620, label %3627, label %3621

3621:                                             ; preds = %3616
  %3622 = xor i32 %3614, -1
  %3623 = and i32 %3622, 2147450879
  %3624 = add nuw i32 %3623, 65537
  %3625 = and i32 %3622, -2147450880
  %3626 = xor i32 %3624, %3625
  br label %3627

3627:                                             ; preds = %3621, %3616
  %3628 = phi i32 [ %3626, %3621 ], [ %3614, %3616 ]
  %3629 = sext i32 %3607 to i64
  %3630 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3629
  %3631 = bitcast %struct.VP56mv* %3630 to i32*
  %3632 = load i32, i32* %3631, align 4
  %3633 = icmp eq i32 %3628, %3632
  br i1 %3633, label %3639, label %3634

3634:                                             ; preds = %3627
  %3635 = add nuw nsw i32 %3607, 1
  %3636 = sext i32 %3635 to i64
  %3637 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3636
  %3638 = bitcast %struct.VP56mv* %3637 to i32*
  store i32 %3628, i32* %3638, align 4
  br label %3639

3639:                                             ; preds = %3634, %3627
  %3640 = phi i64 [ %3629, %3627 ], [ %3636, %3634 ]
  %3641 = getelementptr inbounds [4 x i8], [4 x i8]* %2966, i64 0, i64 %3640
  %3642 = load i8, i8* %3641, align 1
  %3643 = add i8 %3642, 1
  store i8 %3643, i8* %3641, align 1
  br label %3647

3644:                                             ; preds = %3611
  %3645 = load i8, i8* %2975, align 4
  %3646 = add i8 %3645, 1
  store i8 %3646, i8* %2975, align 4
  br label %3647

3647:                                             ; preds = %3644, %3639, %3606
  %3648 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 3
  store i8 4, i8* %3648, align 1
  %3649 = load i8, i8* %2975, align 4
  %3650 = zext i8 %3649 to i64
  %3651 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %3650, i64 0
  %3652 = load i32, i32* %3651, align 16
  %3653 = load i32, i32* %2955, align 8
  %3654 = sext i32 %3653 to i64
  %3655 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3654
  %3656 = load i8, i8* %3655, align 1
  %3657 = zext i8 %3656 to i32
  %3658 = load i32, i32* %2950, align 4
  %3659 = load i32, i32* %2956, align 8
  %3660 = shl i32 %3653, %3657
  store i32 %3660, i32* %2955, align 8
  %3661 = shl i32 %3659, %3657
  %3662 = add nsw i32 %3658, %3657
  %3663 = icmp sgt i32 %3662, -1
  br i1 %3663, label %3664, label %3677

3664:                                             ; preds = %3647
  %3665 = load i8*, i8** %2949, align 8
  %3666 = load i8*, i8** %2948, align 8
  %3667 = icmp ult i8* %3665, %3666
  br i1 %3667, label %3668, label %3677

3668:                                             ; preds = %3664
  %3669 = getelementptr inbounds i8, i8* %3665, i64 2
  store i8* %3669, i8** %2949, align 8
  %3670 = bitcast i8* %3665 to i16*
  %3671 = load i16, i16* %3670, align 1
  %3672 = call i16 @llvm.bswap.i16(i16 %3671) #7
  %3673 = zext i16 %3672 to i32
  %3674 = shl i32 %3673, %3662
  %3675 = or i32 %3674, %3661
  %3676 = add nsw i32 %3662, -16
  br label %3677

3677:                                             ; preds = %3668, %3664, %3647
  %3678 = phi i32 [ %3676, %3668 ], [ %3662, %3664 ], [ %3662, %3647 ]
  %3679 = phi i32 [ %3675, %3668 ], [ %3661, %3664 ], [ %3661, %3647 ]
  store i32 %3678, i32* %2950, align 4
  %3680 = add nsw i32 %3660, -1
  %3681 = mul nsw i32 %3680, %3652
  %3682 = ashr i32 %3681, 8
  %3683 = add nsw i32 %3682, 1
  %3684 = shl i32 %3683, 16
  %3685 = icmp ult i32 %3679, %3684
  br i1 %3685, label %5092, label %3686

3686:                                             ; preds = %3677
  %3687 = sub i32 %3660, %3683
  store i32 %3687, i32* %2955, align 8
  %3688 = sub i32 %3679, %3684
  store i32 %3688, i32* %2956, align 8
  %3689 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 1
  store i8 6, i8* %3689, align 1
  %3690 = load i8, i8* %2980, align 1
  %3691 = icmp eq i8 %3690, 0
  br i1 %3691, label %3699, label %3692

3692:                                             ; preds = %3686
  %3693 = load i32, i32* %2977, align 4
  %3694 = load i32, i32* %2981, align 4
  %3695 = icmp eq i32 %3693, %3694
  br i1 %3695, label %3696, label %3699

3696:                                             ; preds = %3692
  %3697 = load i8, i8* %2979, align 1
  %3698 = add i8 %3697, 1
  store i8 %3698, i8* %2979, align 1
  br label %3699

3699:                                             ; preds = %3696, %3692, %3686
  %3700 = load i8, i8* %2982, align 2
  %3701 = load i8, i8* %2979, align 1
  %3702 = icmp ugt i8 %3700, %3701
  br i1 %3702, label %3703, label %3707

3703:                                             ; preds = %3699
  store i8 %3701, i8* %2982, align 2
  store i8 %3700, i8* %2979, align 1
  %3704 = load i16, i16* %2983, align 8
  %3705 = load i16, i16* %2973, align 2
  %3706 = load i32, i32* %2977, align 4
  store i32 %3706, i32* %2978, align 8
  store i16 %3704, i16* %2984, align 4
  store i16 %3705, i16* %2970, align 2
  br label %3707

3707:                                             ; preds = %3703, %3699
  %3708 = phi i8 [ %3701, %3703 ], [ %3700, %3699 ]
  %3709 = phi i8 [ %3700, %3703 ], [ %3701, %3699 ]
  %3710 = zext i8 %3709 to i64
  %3711 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %3710, i64 1
  %3712 = load i32, i32* %3711, align 4
  %3713 = load i32, i32* %2955, align 8
  %3714 = sext i32 %3713 to i64
  %3715 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3714
  %3716 = load i8, i8* %3715, align 1
  %3717 = zext i8 %3716 to i32
  %3718 = load i32, i32* %2950, align 4
  %3719 = load i32, i32* %2956, align 8
  %3720 = shl i32 %3713, %3717
  store i32 %3720, i32* %2955, align 8
  %3721 = shl i32 %3719, %3717
  %3722 = add nsw i32 %3718, %3717
  %3723 = icmp sgt i32 %3722, -1
  br i1 %3723, label %3724, label %3737

3724:                                             ; preds = %3707
  %3725 = load i8*, i8** %2949, align 8
  %3726 = load i8*, i8** %2948, align 8
  %3727 = icmp ult i8* %3725, %3726
  br i1 %3727, label %3728, label %3737

3728:                                             ; preds = %3724
  %3729 = getelementptr inbounds i8, i8* %3725, i64 2
  store i8* %3729, i8** %2949, align 8
  %3730 = bitcast i8* %3725 to i16*
  %3731 = load i16, i16* %3730, align 1
  %3732 = call i16 @llvm.bswap.i16(i16 %3731) #7
  %3733 = zext i16 %3732 to i32
  %3734 = shl i32 %3733, %3722
  %3735 = or i32 %3734, %3721
  %3736 = add nsw i32 %3722, -16
  br label %3737

3737:                                             ; preds = %3728, %3724, %3707
  %3738 = phi i32 [ %3736, %3728 ], [ %3722, %3724 ], [ %3722, %3707 ]
  %3739 = phi i32 [ %3735, %3728 ], [ %3721, %3724 ], [ %3721, %3707 ]
  store i32 %3738, i32* %2950, align 4
  %3740 = add nsw i32 %3720, -1
  %3741 = mul nsw i32 %3740, %3712
  %3742 = ashr i32 %3741, 8
  %3743 = add nsw i32 %3742, 1
  %3744 = shl i32 %3743, 16
  %3745 = icmp ult i32 %3739, %3744
  br i1 %3745, label %5050, label %3746

3746:                                             ; preds = %3737
  %3747 = sub i32 %3720, %3743
  %3748 = sub i32 %3739, %3744
  store i32 %3748, i32* %2956, align 8
  %3749 = zext i8 %3708 to i64
  %3750 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %3749, i64 2
  %3751 = load i32, i32* %3750, align 8
  %3752 = sext i32 %3747 to i64
  %3753 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3752
  %3754 = load i8, i8* %3753, align 1
  %3755 = zext i8 %3754 to i32
  %3756 = shl i32 %3747, %3755
  store i32 %3756, i32* %2955, align 8
  %3757 = shl i32 %3748, %3755
  %3758 = add nsw i32 %3738, %3755
  %3759 = icmp sgt i32 %3758, -1
  br i1 %3759, label %3760, label %3773

3760:                                             ; preds = %3746
  %3761 = load i8*, i8** %2949, align 8
  %3762 = load i8*, i8** %2948, align 8
  %3763 = icmp ult i8* %3761, %3762
  br i1 %3763, label %3764, label %3773

3764:                                             ; preds = %3760
  %3765 = getelementptr inbounds i8, i8* %3761, i64 2
  store i8* %3765, i8** %2949, align 8
  %3766 = bitcast i8* %3761 to i16*
  %3767 = load i16, i16* %3766, align 1
  %3768 = call i16 @llvm.bswap.i16(i16 %3767) #7
  %3769 = zext i16 %3768 to i32
  %3770 = shl i32 %3769, %3758
  %3771 = or i32 %3770, %3757
  %3772 = add nsw i32 %3758, -16
  br label %3773

3773:                                             ; preds = %3764, %3760, %3746
  %3774 = phi i32 [ %3772, %3764 ], [ %3758, %3760 ], [ %3758, %3746 ]
  %3775 = phi i32 [ %3771, %3764 ], [ %3757, %3760 ], [ %3757, %3746 ]
  store i32 %3774, i32* %2950, align 4
  %3776 = add nsw i32 %3756, -1
  %3777 = mul nsw i32 %3776, %3751
  %3778 = ashr i32 %3777, 8
  %3779 = add nsw i32 %3778, 1
  %3780 = shl i32 %3779, 16
  %3781 = icmp ult i32 %3775, %3780
  br i1 %3781, label %5008, label %3782

3782:                                             ; preds = %3773
  %3783 = sub i32 %3756, %3779
  store i32 %3783, i32* %2955, align 8
  %3784 = sub i32 %3775, %3780
  store i32 %3784, i32* %2956, align 8
  %3785 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9
  %3786 = icmp uge i8 %3709, %3649
  %3787 = zext i1 %3786 to i64
  %3788 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3787, i32 0
  %3789 = load i16, i16* %3788, align 4
  %3790 = sext i16 %3789 to i32
  %3791 = load i32, i32* %2945, align 4
  %3792 = icmp slt i32 %3791, 32767
  %3793 = select i1 %3792, i32 %3791, i32 32767
  %3794 = icmp sgt i32 %3793, -32768
  %3795 = select i1 %3794, i32 %3793, i32 -32768
  %3796 = load i32, i32* %2946, align 4
  %3797 = icmp slt i32 %3796, 32767
  %3798 = select i1 %3797, i32 %3796, i32 32767
  %3799 = icmp sgt i32 %3798, -32768
  %3800 = select i1 %3799, i32 %3798, i32 -32768
  %3801 = icmp sgt i32 %3795, %3790
  %3802 = icmp slt i32 %3800, %3790
  %3803 = select i1 %3802, i32 %3800, i32 %3790
  %3804 = select i1 %3801, i32 %3795, i32 %3803
  %3805 = trunc i32 %3804 to i16
  %3806 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %3785, i64 0, i32 0
  store i16 %3805, i16* %3806, align 4
  %3807 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %5, i64 0, i64 %3787, i32 1
  %3808 = load i16, i16* %3807, align 2
  %3809 = sext i16 %3808 to i32
  %3810 = load i32, i32* %2933, align 4
  %3811 = icmp slt i32 %3810, 32767
  %3812 = select i1 %3811, i32 %3810, i32 32767
  %3813 = icmp sgt i32 %3812, -32768
  %3814 = select i1 %3813, i32 %3812, i32 -32768
  %3815 = load i32, i32* %2938, align 4
  %3816 = icmp slt i32 %3815, 32767
  %3817 = select i1 %3816, i32 %3815, i32 32767
  %3818 = icmp sgt i32 %3817, -32768
  %3819 = select i1 %3818, i32 %3817, i32 -32768
  %3820 = icmp sgt i32 %3814, %3809
  %3821 = icmp slt i32 %3819, %3809
  %3822 = select i1 %3821, i32 %3819, i32 %3809
  %3823 = select i1 %3820, i32 %3814, i32 %3822
  %3824 = trunc i32 %3823 to i16
  %3825 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9, i32 1
  store i16 %3824, i16* %3825, align 2
  %3826 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1, i32 1
  %3827 = load i8, i8* %3826, align 1
  %3828 = icmp eq i8 %3827, 7
  %3829 = zext i1 %3828 to i8
  %3830 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3541, i64 0, i32 1
  %3831 = load i8, i8* %3830, align 1
  %3832 = icmp eq i8 %3831, 7
  %3833 = zext i1 %3832 to i8
  %3834 = add nuw nsw i8 %3833, %3829
  %3835 = shl nuw nsw i8 %3834, 1
  %3836 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3542, i64 0, i32 1
  %3837 = load i8, i8* %3836, align 1
  %3838 = icmp eq i8 %3837, 7
  %3839 = zext i1 %3838 to i8
  %3840 = or i8 %3835, %3839
  store i8 %3840, i8* %2980, align 1
  %3841 = zext i8 %3840 to i64
  %3842 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %3841, i64 3
  %3843 = load i32, i32* %3842, align 4
  %3844 = load i32, i32* %2955, align 8
  %3845 = sext i32 %3844 to i64
  %3846 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3845
  %3847 = load i8, i8* %3846, align 1
  %3848 = zext i8 %3847 to i32
  %3849 = load i32, i32* %2950, align 4
  %3850 = load i32, i32* %2956, align 8
  %3851 = shl i32 %3844, %3848
  store i32 %3851, i32* %2955, align 8
  %3852 = shl i32 %3850, %3848
  %3853 = add nsw i32 %3849, %3848
  %3854 = icmp sgt i32 %3853, -1
  br i1 %3854, label %3855, label %3868

3855:                                             ; preds = %3782
  %3856 = load i8*, i8** %2949, align 8
  %3857 = load i8*, i8** %2948, align 8
  %3858 = icmp ult i8* %3856, %3857
  br i1 %3858, label %3859, label %3868

3859:                                             ; preds = %3855
  %3860 = getelementptr inbounds i8, i8* %3856, i64 2
  store i8* %3860, i8** %2949, align 8
  %3861 = bitcast i8* %3856 to i16*
  %3862 = load i16, i16* %3861, align 1
  %3863 = call i16 @llvm.bswap.i16(i16 %3862) #7
  %3864 = zext i16 %3863 to i32
  %3865 = shl i32 %3864, %3853
  %3866 = or i32 %3865, %3852
  %3867 = add nsw i32 %3853, -16
  br label %3868

3868:                                             ; preds = %3859, %3855, %3782
  %3869 = phi i32 [ %3867, %3859 ], [ %3853, %3855 ], [ %3853, %3782 ]
  %3870 = phi i32 [ %3866, %3859 ], [ %3852, %3855 ], [ %3852, %3782 ]
  store i32 %3869, i32* %2950, align 4
  %3871 = add nsw i32 %3851, -1
  %3872 = mul nsw i32 %3871, %3843
  %3873 = ashr i32 %3872, 8
  %3874 = add nsw i32 %3873, 1
  %3875 = shl i32 %3874, 16
  %3876 = icmp ult i32 %3870, %3875
  br i1 %3876, label %4995, label %3877

3877:                                             ; preds = %3868
  %3878 = sub i32 %3851, %3874
  store i32 %3878, i32* %2955, align 8
  %3879 = sub i32 %3870, %3875
  store i32 %3879, i32* %2956, align 8
  store i8 7, i8* %3689, align 1
  %3880 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1, i32 3
  %3881 = load i8, i8* %3880, align 1
  %3882 = zext i8 %3881 to i64
  %3883 = load i16, i16* %2942, align 8
  %3884 = zext i16 %3883 to i64
  %3885 = xor i64 %3884, -1
  %3886 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 %3885, i32 3
  %3887 = load i8, i8* %3886, align 1
  %3888 = zext i8 %3887 to i64
  %3889 = load i32, i32* %2955, align 8
  %3890 = sext i32 %3889 to i64
  %3891 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3890
  %3892 = load i8, i8* %3891, align 1
  %3893 = zext i8 %3892 to i32
  %3894 = load i32, i32* %2950, align 4
  %3895 = load i32, i32* %2956, align 8
  %3896 = shl i32 %3889, %3893
  store i32 %3896, i32* %2955, align 8
  %3897 = shl i32 %3895, %3893
  %3898 = add nsw i32 %3894, %3893
  %3899 = icmp sgt i32 %3898, -1
  br i1 %3899, label %3900, label %3913

3900:                                             ; preds = %3877
  %3901 = load i8*, i8** %2949, align 8
  %3902 = load i8*, i8** %2948, align 8
  %3903 = icmp ult i8* %3901, %3902
  br i1 %3903, label %3904, label %3913

3904:                                             ; preds = %3900
  %3905 = getelementptr inbounds i8, i8* %3901, i64 2
  store i8* %3905, i8** %2949, align 8
  %3906 = bitcast i8* %3901 to i16*
  %3907 = load i16, i16* %3906, align 1
  %3908 = call i16 @llvm.bswap.i16(i16 %3907) #7
  %3909 = zext i16 %3908 to i32
  %3910 = shl i32 %3909, %3898
  %3911 = or i32 %3910, %3897
  %3912 = add nsw i32 %3898, -16
  br label %3913

3913:                                             ; preds = %3904, %3900, %3877
  %3914 = phi i32 [ %3912, %3904 ], [ %3898, %3900 ], [ %3898, %3877 ]
  %3915 = phi i32 [ %3911, %3904 ], [ %3897, %3900 ], [ %3897, %3877 ]
  store i32 %3914, i32* %2950, align 4
  %3916 = mul i32 %3896, 110
  %3917 = add i32 %3916, -110
  %3918 = ashr i32 %3917, 8
  %3919 = add nsw i32 %3918, 1
  %3920 = shl i32 %3919, 16
  %3921 = icmp ult i32 %3915, %3920
  br i1 %3921, label %3991, label %3922

3922:                                             ; preds = %3913
  %3923 = sub i32 %3896, %3919
  %3924 = sub i32 %3915, %3920
  store i32 %3924, i32* %2956, align 8
  %3925 = sext i32 %3923 to i64
  %3926 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3925
  %3927 = load i8, i8* %3926, align 1
  %3928 = zext i8 %3927 to i32
  %3929 = shl i32 %3923, %3928
  store i32 %3929, i32* %2955, align 8
  %3930 = shl i32 %3924, %3928
  %3931 = add nsw i32 %3914, %3928
  %3932 = icmp sgt i32 %3931, -1
  br i1 %3932, label %3933, label %3946

3933:                                             ; preds = %3922
  %3934 = load i8*, i8** %2949, align 8
  %3935 = load i8*, i8** %2948, align 8
  %3936 = icmp ult i8* %3934, %3935
  br i1 %3936, label %3937, label %3946

3937:                                             ; preds = %3933
  %3938 = getelementptr inbounds i8, i8* %3934, i64 2
  store i8* %3938, i8** %2949, align 8
  %3939 = bitcast i8* %3934 to i16*
  %3940 = load i16, i16* %3939, align 1
  %3941 = call i16 @llvm.bswap.i16(i16 %3940) #7
  %3942 = zext i16 %3941 to i32
  %3943 = shl i32 %3942, %3931
  %3944 = or i32 %3943, %3930
  %3945 = add nsw i32 %3931, -16
  br label %3946

3946:                                             ; preds = %3937, %3933, %3922
  %3947 = phi i32 [ %3945, %3937 ], [ %3931, %3933 ], [ %3931, %3922 ]
  %3948 = phi i32 [ %3944, %3937 ], [ %3930, %3933 ], [ %3930, %3922 ]
  store i32 %3947, i32* %2950, align 4
  %3949 = mul i32 %3929, 111
  %3950 = add i32 %3949, -111
  %3951 = ashr i32 %3950, 8
  %3952 = add nsw i32 %3951, 1
  %3953 = shl i32 %3952, 16
  %3954 = icmp ult i32 %3948, %3953
  br i1 %3954, label %3991, label %3955

3955:                                             ; preds = %3946
  %3956 = sub i32 %3929, %3952
  %3957 = sub i32 %3948, %3953
  store i32 %3957, i32* %2956, align 8
  %3958 = sext i32 %3956 to i64
  %3959 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3958
  %3960 = load i8, i8* %3959, align 1
  %3961 = zext i8 %3960 to i32
  %3962 = shl i32 %3956, %3961
  store i32 %3962, i32* %2955, align 8
  %3963 = shl i32 %3957, %3961
  %3964 = add nsw i32 %3947, %3961
  %3965 = icmp sgt i32 %3964, -1
  br i1 %3965, label %3966, label %3979

3966:                                             ; preds = %3955
  %3967 = load i8*, i8** %2949, align 8
  %3968 = load i8*, i8** %2948, align 8
  %3969 = icmp ult i8* %3967, %3968
  br i1 %3969, label %3970, label %3979

3970:                                             ; preds = %3966
  %3971 = getelementptr inbounds i8, i8* %3967, i64 2
  store i8* %3971, i8** %2949, align 8
  %3972 = bitcast i8* %3967 to i16*
  %3973 = load i16, i16* %3972, align 1
  %3974 = call i16 @llvm.bswap.i16(i16 %3973) #7
  %3975 = zext i16 %3974 to i32
  %3976 = shl i32 %3975, %3964
  %3977 = or i32 %3976, %3963
  %3978 = add nsw i32 %3964, -16
  br label %3979

3979:                                             ; preds = %3970, %3966, %3955
  %3980 = phi i32 [ %3978, %3970 ], [ %3964, %3966 ], [ %3964, %3955 ]
  %3981 = phi i32 [ %3977, %3970 ], [ %3963, %3966 ], [ %3963, %3955 ]
  store i32 %3980, i32* %2950, align 4
  %3982 = mul i32 %3962, 150
  %3983 = add i32 %3982, -150
  %3984 = ashr i32 %3983, 8
  %3985 = add nsw i32 %3984, 1
  %3986 = shl i32 %3985, 16
  %3987 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3986, i32 %3985, i32 %3981, i32 0, i32 %3962, i32 %3981) #8, !srcloc !2
  %3988 = extractvalue { i32, i32, i32 } %3987, 0
  %3989 = extractvalue { i32, i32, i32 } %3987, 1
  %3990 = extractvalue { i32, i32, i32 } %3987, 2
  br label %3991

3991:                                             ; preds = %3946, %3913, %3979
  %3992 = phi i32 [ %3989, %3979 ], [ %3919, %3913 ], [ %3952, %3946 ]
  %3993 = phi i32 [ %3990, %3979 ], [ %3915, %3913 ], [ %3948, %3946 ]
  %3994 = phi i32 [ %3988, %3979 ], [ 3, %3913 ], [ 2, %3946 ]
  store i32 %3992, i32* %2955, align 8
  store i32 %3993, i32* %2956, align 8
  %3995 = sext i32 %3994 to i64
  %3996 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_mbsplit_count, i64 0, i64 %3995
  %3997 = load i8, i8* %3996, align 1
  %3998 = trunc i32 %3994 to i8
  store i8 %3998, i8* %3648, align 1
  %3999 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9, i32 0
  %4000 = zext i8 %3997 to i64
  br label %4001

4001:                                             ; preds = %4986, %3991
  %4002 = phi i64 [ 0, %3991 ], [ %4987, %4986 ]
  %4003 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* bitcast (<{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, [16 x i8] }>* @vp8_mbfirstidx to [4 x [16 x i8]]*), i64 0, i64 %3995, i64 %4002
  %4004 = load i8, i8* %4003, align 1
  %4005 = zext i8 %4004 to i32
  %4006 = and i32 %4005, 3
  %4007 = icmp eq i32 %4006, 0
  br i1 %4007, label %4008, label %4012

4008:                                             ; preds = %4001
  %4009 = add nuw nsw i32 %4005, 3
  %4010 = zext i32 %4009 to i64
  %4011 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %3882, i64 %4010
  br label %4016

4012:                                             ; preds = %4001
  %4013 = add nsw i32 %4005, -1
  %4014 = sext i32 %4013 to i64
  %4015 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %3995, i64 %4014
  br label %4016

4016:                                             ; preds = %4012, %4008
  %4017 = phi i8* [ %4015, %4012 ], [ %4011, %4008 ]
  %4018 = phi i64 [ 0, %4012 ], [ -1, %4008 ]
  %4019 = load i8, i8* %4017, align 1
  %4020 = zext i8 %4019 to i64
  %4021 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 %4018, i32 10, i64 %4020
  %4022 = bitcast %struct.VP56mv* %4021 to i32*
  %4023 = load i32, i32* %4022, align 4
  %4024 = icmp ult i8 %4004, 4
  br i1 %4024, label %4025, label %4029

4025:                                             ; preds = %4016
  %4026 = add nuw nsw i32 %4005, 12
  %4027 = zext i32 %4026 to i64
  %4028 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %3888, i64 %4027
  br label %4033

4029:                                             ; preds = %4016
  %4030 = add nsw i32 %4005, -4
  %4031 = sext i32 %4030 to i64
  %4032 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %3995, i64 %4031
  br label %4033

4033:                                             ; preds = %4029, %4025
  %4034 = phi i8* [ %4032, %4029 ], [ %4028, %4025 ]
  %4035 = phi i64 [ 0, %4029 ], [ %3885, %4025 ]
  %4036 = load i8, i8* %4034, align 1
  %4037 = zext i8 %4036 to i64
  %4038 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 %4035, i32 10, i64 %4037
  %4039 = bitcast %struct.VP56mv* %4038 to i32*
  %4040 = load i32, i32* %4039, align 4
  %4041 = icmp eq i32 %4023, %4040
  br i1 %4041, label %4042, label %4046

4042:                                             ; preds = %4033
  %4043 = icmp eq i32 %4023, 0
  %4044 = select i1 %4043, i64 4, i64 3
  %4045 = getelementptr inbounds [5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 %4044, i64 0
  br label %4052

4046:                                             ; preds = %4033
  %4047 = icmp eq i32 %4040, 0
  br i1 %4047, label %4052, label %4048

4048:                                             ; preds = %4046
  %4049 = icmp eq i32 %4023, 0
  %4050 = zext i1 %4049 to i64
  %4051 = getelementptr inbounds [5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 %4050, i64 0
  br label %4052

4052:                                             ; preds = %4048, %4046, %4042
  %4053 = phi i8* [ %4045, %4042 ], [ %4051, %4048 ], [ getelementptr inbounds ([5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 2, i64 0), %4046 ]
  %4054 = load i8, i8* %4053, align 1
  %4055 = zext i8 %4054 to i32
  %4056 = load i32, i32* %2955, align 8
  %4057 = sext i32 %4056 to i64
  %4058 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4057
  %4059 = load i8, i8* %4058, align 1
  %4060 = zext i8 %4059 to i32
  %4061 = load i32, i32* %2950, align 4
  %4062 = load i32, i32* %2956, align 8
  %4063 = shl i32 %4056, %4060
  store i32 %4063, i32* %2955, align 8
  %4064 = shl i32 %4062, %4060
  %4065 = add nsw i32 %4061, %4060
  %4066 = icmp sgt i32 %4065, -1
  br i1 %4066, label %4067, label %4080

4067:                                             ; preds = %4052
  %4068 = load i8*, i8** %2949, align 8
  %4069 = load i8*, i8** %2948, align 8
  %4070 = icmp ult i8* %4068, %4069
  br i1 %4070, label %4071, label %4080

4071:                                             ; preds = %4067
  %4072 = getelementptr inbounds i8, i8* %4068, i64 2
  store i8* %4072, i8** %2949, align 8
  %4073 = bitcast i8* %4068 to i16*
  %4074 = load i16, i16* %4073, align 1
  %4075 = call i16 @llvm.bswap.i16(i16 %4074) #7
  %4076 = zext i16 %4075 to i32
  %4077 = shl i32 %4076, %4065
  %4078 = or i32 %4077, %4064
  %4079 = add nsw i32 %4065, -16
  br label %4080

4080:                                             ; preds = %4071, %4067, %4052
  %4081 = phi i32 [ %4079, %4071 ], [ %4065, %4067 ], [ %4065, %4052 ]
  %4082 = phi i32 [ %4078, %4071 ], [ %4064, %4067 ], [ %4064, %4052 ]
  store i32 %4081, i32* %2950, align 4
  %4083 = add nsw i32 %4063, -1
  %4084 = mul nsw i32 %4083, %4055
  %4085 = ashr i32 %4084, 8
  %4086 = add nsw i32 %4085, 1
  %4087 = shl i32 %4086, 16
  %4088 = icmp ult i32 %4082, %4087
  br i1 %4088, label %4983, label %4089

4089:                                             ; preds = %4080
  %4090 = sub i32 %4063, %4086
  store i32 %4090, i32* %2955, align 8
  %4091 = sub i32 %4082, %4087
  store i32 %4091, i32* %2956, align 8
  %4092 = getelementptr inbounds i8, i8* %4053, i64 1
  %4093 = load i8, i8* %4092, align 1
  %4094 = zext i8 %4093 to i32
  %4095 = sext i32 %4090 to i64
  %4096 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4095
  %4097 = load i8, i8* %4096, align 1
  %4098 = zext i8 %4097 to i32
  %4099 = shl i32 %4090, %4098
  store i32 %4099, i32* %2955, align 8
  %4100 = shl i32 %4091, %4098
  %4101 = add nsw i32 %4081, %4098
  %4102 = icmp sgt i32 %4101, -1
  br i1 %4102, label %4103, label %4116

4103:                                             ; preds = %4089
  %4104 = load i8*, i8** %2949, align 8
  %4105 = load i8*, i8** %2948, align 8
  %4106 = icmp ult i8* %4104, %4105
  br i1 %4106, label %4107, label %4116

4107:                                             ; preds = %4103
  %4108 = getelementptr inbounds i8, i8* %4104, i64 2
  store i8* %4108, i8** %2949, align 8
  %4109 = bitcast i8* %4104 to i16*
  %4110 = load i16, i16* %4109, align 1
  %4111 = call i16 @llvm.bswap.i16(i16 %4110) #7
  %4112 = zext i16 %4111 to i32
  %4113 = shl i32 %4112, %4101
  %4114 = or i32 %4113, %4100
  %4115 = add nsw i32 %4101, -16
  br label %4116

4116:                                             ; preds = %4107, %4103, %4089
  %4117 = phi i32 [ %4115, %4107 ], [ %4101, %4103 ], [ %4101, %4089 ]
  %4118 = phi i32 [ %4114, %4107 ], [ %4100, %4103 ], [ %4100, %4089 ]
  store i32 %4117, i32* %2950, align 4
  %4119 = add nsw i32 %4099, -1
  %4120 = mul nsw i32 %4119, %4094
  %4121 = ashr i32 %4120, 8
  %4122 = add nsw i32 %4121, 1
  %4123 = shl i32 %4122, 16
  %4124 = icmp ult i32 %4118, %4123
  br i1 %4124, label %4980, label %4125

4125:                                             ; preds = %4116
  %4126 = sub i32 %4099, %4122
  store i32 %4126, i32* %2955, align 8
  %4127 = sub i32 %4118, %4123
  store i32 %4127, i32* %2956, align 8
  %4128 = getelementptr inbounds i8, i8* %4053, i64 2
  %4129 = load i8, i8* %4128, align 1
  %4130 = zext i8 %4129 to i32
  %4131 = sext i32 %4126 to i64
  %4132 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4131
  %4133 = load i8, i8* %4132, align 1
  %4134 = zext i8 %4133 to i32
  %4135 = shl i32 %4126, %4134
  store i32 %4135, i32* %2955, align 8
  %4136 = shl i32 %4127, %4134
  %4137 = add nsw i32 %4117, %4134
  %4138 = icmp sgt i32 %4137, -1
  br i1 %4138, label %4139, label %4152

4139:                                             ; preds = %4125
  %4140 = load i8*, i8** %2949, align 8
  %4141 = load i8*, i8** %2948, align 8
  %4142 = icmp ult i8* %4140, %4141
  br i1 %4142, label %4143, label %4152

4143:                                             ; preds = %4139
  %4144 = getelementptr inbounds i8, i8* %4140, i64 2
  store i8* %4144, i8** %2949, align 8
  %4145 = bitcast i8* %4140 to i16*
  %4146 = load i16, i16* %4145, align 1
  %4147 = call i16 @llvm.bswap.i16(i16 %4146) #7
  %4148 = zext i16 %4147 to i32
  %4149 = shl i32 %4148, %4137
  %4150 = or i32 %4149, %4136
  %4151 = add nsw i32 %4137, -16
  br label %4152

4152:                                             ; preds = %4143, %4139, %4125
  %4153 = phi i32 [ %4151, %4143 ], [ %4137, %4139 ], [ %4137, %4125 ]
  %4154 = phi i32 [ %4150, %4143 ], [ %4136, %4139 ], [ %4136, %4125 ]
  store i32 %4153, i32* %2950, align 4
  %4155 = add nsw i32 %4135, -1
  %4156 = mul nsw i32 %4155, %4130
  %4157 = ashr i32 %4156, 8
  %4158 = add nsw i32 %4157, 1
  %4159 = shl i32 %4158, 16
  %4160 = icmp ult i32 %4154, %4159
  br i1 %4160, label %4977, label %4161

4161:                                             ; preds = %4152
  %4162 = sub i32 %4135, %4158
  store i32 %4162, i32* %2955, align 8
  %4163 = sub i32 %4154, %4159
  store i32 %4163, i32* %2956, align 8
  %4164 = load i16, i16* %3825, align 2
  %4165 = load i8, i8* %2985, align 1
  %4166 = zext i8 %4165 to i32
  %4167 = sext i32 %4162 to i64
  %4168 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4167
  %4169 = load i8, i8* %4168, align 1
  %4170 = zext i8 %4169 to i32
  %4171 = shl i32 %4162, %4170
  store i32 %4171, i32* %2955, align 8
  %4172 = shl i32 %4163, %4170
  %4173 = add nsw i32 %4153, %4170
  %4174 = icmp sgt i32 %4173, -1
  br i1 %4174, label %4175, label %4188

4175:                                             ; preds = %4161
  %4176 = load i8*, i8** %2949, align 8
  %4177 = load i8*, i8** %2948, align 8
  %4178 = icmp ult i8* %4176, %4177
  br i1 %4178, label %4179, label %4188

4179:                                             ; preds = %4175
  %4180 = getelementptr inbounds i8, i8* %4176, i64 2
  store i8* %4180, i8** %2949, align 8
  %4181 = bitcast i8* %4176 to i16*
  %4182 = load i16, i16* %4181, align 1
  %4183 = call i16 @llvm.bswap.i16(i16 %4182) #7
  %4184 = zext i16 %4183 to i32
  %4185 = shl i32 %4184, %4173
  %4186 = or i32 %4185, %4172
  %4187 = add nsw i32 %4173, -16
  br label %4188

4188:                                             ; preds = %4179, %4175, %4161
  %4189 = phi i32 [ %4187, %4179 ], [ %4173, %4175 ], [ %4173, %4161 ]
  %4190 = phi i32 [ %4186, %4179 ], [ %4172, %4175 ], [ %4172, %4161 ]
  store i32 %4189, i32* %2950, align 4
  %4191 = add nsw i32 %4171, -1
  %4192 = mul nsw i32 %4191, %4166
  %4193 = ashr i32 %4192, 8
  %4194 = add nsw i32 %4193, 1
  %4195 = shl i32 %4194, 16
  %4196 = icmp ult i32 %4190, %4195
  br i1 %4196, label %4337, label %4197

4197:                                             ; preds = %4188
  %4198 = sub i32 %4171, %4194
  %4199 = sub i32 %4190, %4195
  store i32 %4199, i32* %2956, align 8
  %4200 = load i8, i8* %2986, align 1
  %4201 = sext i32 %4198 to i64
  %4202 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4201
  %4203 = load i8, i8* %4202, align 1
  %4204 = zext i8 %4203 to i32
  %4205 = shl i32 %4198, %4204
  store i32 %4205, i32* %2955, align 8
  %4206 = shl i32 %4199, %4204
  %4207 = add nsw i32 %4189, %4204
  %4208 = icmp sgt i32 %4207, -1
  br i1 %4208, label %4209, label %4222

4209:                                             ; preds = %4197
  %4210 = load i8*, i8** %2949, align 8
  %4211 = load i8*, i8** %2948, align 8
  %4212 = icmp ult i8* %4210, %4211
  br i1 %4212, label %4213, label %4222

4213:                                             ; preds = %4209
  %4214 = getelementptr inbounds i8, i8* %4210, i64 2
  store i8* %4214, i8** %2949, align 8
  %4215 = bitcast i8* %4210 to i16*
  %4216 = load i16, i16* %4215, align 1
  %4217 = call i16 @llvm.bswap.i16(i16 %4216) #7
  %4218 = zext i16 %4217 to i32
  %4219 = shl i32 %4218, %4207
  %4220 = or i32 %4219, %4206
  %4221 = add nsw i32 %4207, -16
  br label %4222

4222:                                             ; preds = %4213, %4209, %4197
  %4223 = phi i32 [ %4221, %4213 ], [ %4207, %4209 ], [ %4207, %4197 ]
  %4224 = phi i32 [ %4220, %4213 ], [ %4206, %4209 ], [ %4206, %4197 ]
  store i32 %4223, i32* %2950, align 4
  %4225 = add nsw i32 %4205, -1
  %4226 = zext i8 %4200 to i32
  %4227 = mul nsw i32 %4225, %4226
  %4228 = ashr i32 %4227, 8
  %4229 = add nsw i32 %4228, 1
  %4230 = shl i32 %4229, 16
  %4231 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4230, i32 %4229, i32 %4224, i32 0, i32 %4205, i32 %4224) #8, !srcloc !2
  %4232 = extractvalue { i32, i32, i32 } %4231, 0
  %4233 = extractvalue { i32, i32, i32 } %4231, 1
  %4234 = extractvalue { i32, i32, i32 } %4231, 2
  store i32 %4234, i32* %2956, align 8
  %4235 = load i8, i8* %2987, align 1
  %4236 = sext i32 %4233 to i64
  %4237 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4236
  %4238 = load i8, i8* %4237, align 1
  %4239 = zext i8 %4238 to i32
  %4240 = shl i32 %4233, %4239
  store i32 %4240, i32* %2955, align 8
  %4241 = shl i32 %4234, %4239
  %4242 = add nsw i32 %4223, %4239
  %4243 = icmp sgt i32 %4242, -1
  br i1 %4243, label %4499, label %4512

4244:                                             ; preds = %4549, %4274
  %4245 = phi i32 [ %4561, %4549 ], [ %4286, %4274 ]
  %4246 = phi i32 [ %4550, %4549 ], [ %4275, %4274 ]
  %4247 = phi i32 [ %4560, %4549 ], [ %4285, %4274 ]
  %4248 = phi i64 [ 9, %4549 ], [ %4290, %4274 ]
  %4249 = phi i32 [ %4563, %4549 ], [ %4289, %4274 ]
  %4250 = add nuw nsw i64 %4248, 9
  %4251 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 0, i64 %4250
  %4252 = load i8, i8* %4251, align 1
  %4253 = sext i32 %4247 to i64
  %4254 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4253
  %4255 = load i8, i8* %4254, align 1
  %4256 = zext i8 %4255 to i32
  %4257 = shl i32 %4247, %4256
  store i32 %4257, i32* %2955, align 8
  %4258 = shl i32 %4245, %4256
  %4259 = add nsw i32 %4246, %4256
  %4260 = icmp sgt i32 %4259, -1
  br i1 %4260, label %4261, label %4274

4261:                                             ; preds = %4244
  %4262 = load i8*, i8** %2949, align 8
  %4263 = load i8*, i8** %2948, align 8
  %4264 = icmp ult i8* %4262, %4263
  br i1 %4264, label %4265, label %4274

4265:                                             ; preds = %4261
  %4266 = getelementptr inbounds i8, i8* %4262, i64 2
  store i8* %4266, i8** %2949, align 8
  %4267 = bitcast i8* %4262 to i16*
  %4268 = load i16, i16* %4267, align 1
  %4269 = call i16 @llvm.bswap.i16(i16 %4268) #7
  %4270 = zext i16 %4269 to i32
  %4271 = shl i32 %4270, %4259
  %4272 = or i32 %4271, %4258
  %4273 = add nsw i32 %4259, -16
  br label %4274

4274:                                             ; preds = %4265, %4261, %4244
  %4275 = phi i32 [ %4273, %4265 ], [ %4259, %4261 ], [ %4259, %4244 ]
  %4276 = phi i32 [ %4272, %4265 ], [ %4258, %4261 ], [ %4258, %4244 ]
  store i32 %4275, i32* %2950, align 4
  %4277 = add nsw i32 %4257, -1
  %4278 = zext i8 %4252 to i32
  %4279 = mul nsw i32 %4277, %4278
  %4280 = ashr i32 %4279, 8
  %4281 = add nsw i32 %4280, 1
  %4282 = shl i32 %4281, 16
  %4283 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4282, i32 %4281, i32 %4276, i32 0, i32 %4257, i32 %4276) #8, !srcloc !2
  %4284 = extractvalue { i32, i32, i32 } %4283, 0
  %4285 = extractvalue { i32, i32, i32 } %4283, 1
  %4286 = extractvalue { i32, i32, i32 } %4283, 2
  store i32 %4285, i32* %2955, align 8
  store i32 %4286, i32* %2956, align 8
  %4287 = trunc i64 %4248 to i32
  %4288 = shl i32 %4284, %4287
  %4289 = add nsw i32 %4288, %4249
  %4290 = add nsw i64 %4248, -1
  %4291 = icmp ugt i64 %4290, 3
  br i1 %4291, label %4244, label %4292

4292:                                             ; preds = %4274
  %4293 = and i32 %4289, 65520
  %4294 = icmp eq i32 %4293, 0
  br i1 %4294, label %4332, label %4295

4295:                                             ; preds = %4292
  %4296 = load i8, i8* %2989, align 1
  %4297 = sext i32 %4285 to i64
  %4298 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4297
  %4299 = load i8, i8* %4298, align 1
  %4300 = zext i8 %4299 to i32
  %4301 = shl i32 %4285, %4300
  store i32 %4301, i32* %2955, align 8
  %4302 = shl i32 %4286, %4300
  %4303 = add nsw i32 %4275, %4300
  %4304 = icmp sgt i32 %4303, -1
  br i1 %4304, label %4305, label %4318

4305:                                             ; preds = %4295
  %4306 = load i8*, i8** %2949, align 8
  %4307 = load i8*, i8** %2948, align 8
  %4308 = icmp ult i8* %4306, %4307
  br i1 %4308, label %4309, label %4318

4309:                                             ; preds = %4305
  %4310 = getelementptr inbounds i8, i8* %4306, i64 2
  store i8* %4310, i8** %2949, align 8
  %4311 = bitcast i8* %4306 to i16*
  %4312 = load i16, i16* %4311, align 1
  %4313 = call i16 @llvm.bswap.i16(i16 %4312) #7
  %4314 = zext i16 %4313 to i32
  %4315 = shl i32 %4314, %4303
  %4316 = or i32 %4315, %4302
  %4317 = add nsw i32 %4303, -16
  br label %4318

4318:                                             ; preds = %4309, %4305, %4295
  %4319 = phi i32 [ %4317, %4309 ], [ %4303, %4305 ], [ %4303, %4295 ]
  %4320 = phi i32 [ %4316, %4309 ], [ %4302, %4305 ], [ %4302, %4295 ]
  store i32 %4319, i32* %2950, align 4
  %4321 = add nsw i32 %4301, -1
  %4322 = zext i8 %4296 to i32
  %4323 = mul nsw i32 %4321, %4322
  %4324 = ashr i32 %4323, 8
  %4325 = add nsw i32 %4324, 1
  %4326 = shl i32 %4325, 16
  %4327 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4326, i32 %4325, i32 %4320, i32 0, i32 %4301, i32 %4320) #8, !srcloc !2
  %4328 = extractvalue { i32, i32, i32 } %4327, 0
  %4329 = extractvalue { i32, i32, i32 } %4327, 1
  %4330 = extractvalue { i32, i32, i32 } %4327, 2
  store i32 %4329, i32* %2955, align 8
  store i32 %4330, i32* %2956, align 8
  %4331 = icmp eq i32 %4328, 0
  br i1 %4331, label %4454, label %4332

4332:                                             ; preds = %4318, %4292
  %4333 = phi i32 [ %4330, %4318 ], [ %4286, %4292 ]
  %4334 = phi i32 [ %4319, %4318 ], [ %4275, %4292 ]
  %4335 = phi i32 [ %4329, %4318 ], [ %4285, %4292 ]
  %4336 = add nsw i32 %4289, 8
  br label %4454

4337:                                             ; preds = %4188
  store i32 %4190, i32* %2956, align 8
  %4338 = load i8, i8* %2990, align 1
  %4339 = sext i32 %4194 to i64
  %4340 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4339
  %4341 = load i8, i8* %4340, align 1
  %4342 = zext i8 %4341 to i32
  %4343 = shl i32 %4194, %4342
  store i32 %4343, i32* %2955, align 8
  %4344 = shl i32 %4190, %4342
  %4345 = add nsw i32 %4189, %4342
  %4346 = icmp sgt i32 %4345, -1
  br i1 %4346, label %4347, label %4360

4347:                                             ; preds = %4337
  %4348 = load i8*, i8** %2949, align 8
  %4349 = load i8*, i8** %2948, align 8
  %4350 = icmp ult i8* %4348, %4349
  br i1 %4350, label %4351, label %4360

4351:                                             ; preds = %4347
  %4352 = getelementptr inbounds i8, i8* %4348, i64 2
  store i8* %4352, i8** %2949, align 8
  %4353 = bitcast i8* %4348 to i16*
  %4354 = load i16, i16* %4353, align 1
  %4355 = call i16 @llvm.bswap.i16(i16 %4354) #7
  %4356 = zext i16 %4355 to i32
  %4357 = shl i32 %4356, %4345
  %4358 = or i32 %4357, %4344
  %4359 = add nsw i32 %4345, -16
  br label %4360

4360:                                             ; preds = %4351, %4347, %4337
  %4361 = phi i32 [ %4359, %4351 ], [ %4345, %4347 ], [ %4345, %4337 ]
  %4362 = phi i32 [ %4358, %4351 ], [ %4344, %4347 ], [ %4344, %4337 ]
  store i32 %4361, i32* %2950, align 4
  %4363 = add nsw i32 %4343, -1
  %4364 = zext i8 %4338 to i32
  %4365 = mul nsw i32 %4363, %4364
  %4366 = ashr i32 %4365, 8
  %4367 = add nsw i32 %4366, 1
  %4368 = shl i32 %4367, 16
  %4369 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4368, i32 %4367, i32 %4362, i32 0, i32 %4343, i32 %4362) #8, !srcloc !2
  %4370 = extractvalue { i32, i32, i32 } %4369, 0
  %4371 = extractvalue { i32, i32, i32 } %4369, 1
  %4372 = extractvalue { i32, i32, i32 } %4369, 2
  store i32 %4371, i32* %2955, align 8
  store i32 %4372, i32* %2956, align 8
  %4373 = mul nsw i32 %4370, 3
  %4374 = add nsw i32 %4373, 1
  %4375 = sext i32 %4374 to i64
  %4376 = getelementptr inbounds i8, i8* %2990, i64 %4375
  %4377 = shl i32 %4370, 2
  %4378 = load i8, i8* %4376, align 1
  %4379 = sext i32 %4371 to i64
  %4380 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4379
  %4381 = load i8, i8* %4380, align 1
  %4382 = zext i8 %4381 to i32
  %4383 = shl i32 %4371, %4382
  store i32 %4383, i32* %2955, align 8
  %4384 = shl i32 %4372, %4382
  %4385 = add nsw i32 %4361, %4382
  %4386 = icmp sgt i32 %4385, -1
  br i1 %4386, label %4387, label %4400

4387:                                             ; preds = %4360
  %4388 = load i8*, i8** %2949, align 8
  %4389 = load i8*, i8** %2948, align 8
  %4390 = icmp ult i8* %4388, %4389
  br i1 %4390, label %4391, label %4400

4391:                                             ; preds = %4387
  %4392 = getelementptr inbounds i8, i8* %4388, i64 2
  store i8* %4392, i8** %2949, align 8
  %4393 = bitcast i8* %4388 to i16*
  %4394 = load i16, i16* %4393, align 1
  %4395 = call i16 @llvm.bswap.i16(i16 %4394) #7
  %4396 = zext i16 %4395 to i32
  %4397 = shl i32 %4396, %4385
  %4398 = or i32 %4397, %4384
  %4399 = add nsw i32 %4385, -16
  br label %4400

4400:                                             ; preds = %4391, %4387, %4360
  %4401 = phi i32 [ %4399, %4391 ], [ %4385, %4387 ], [ %4385, %4360 ]
  %4402 = phi i32 [ %4398, %4391 ], [ %4384, %4387 ], [ %4384, %4360 ]
  store i32 %4401, i32* %2950, align 4
  %4403 = add nsw i32 %4383, -1
  %4404 = zext i8 %4378 to i32
  %4405 = mul nsw i32 %4403, %4404
  %4406 = ashr i32 %4405, 8
  %4407 = add nsw i32 %4406, 1
  %4408 = shl i32 %4407, 16
  %4409 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4408, i32 %4407, i32 %4402, i32 0, i32 %4383, i32 %4402) #8, !srcloc !2
  %4410 = extractvalue { i32, i32, i32 } %4409, 0
  %4411 = extractvalue { i32, i32, i32 } %4409, 1
  %4412 = extractvalue { i32, i32, i32 } %4409, 2
  store i32 %4411, i32* %2955, align 8
  store i32 %4412, i32* %2956, align 8
  %4413 = add nsw i32 %4410, 1
  %4414 = sext i32 %4413 to i64
  %4415 = getelementptr inbounds i8, i8* %4376, i64 %4414
  %4416 = shl i32 %4410, 1
  %4417 = add nsw i32 %4416, %4377
  %4418 = load i8, i8* %4415, align 1
  %4419 = sext i32 %4411 to i64
  %4420 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4419
  %4421 = load i8, i8* %4420, align 1
  %4422 = zext i8 %4421 to i32
  %4423 = shl i32 %4411, %4422
  store i32 %4423, i32* %2955, align 8
  %4424 = shl i32 %4412, %4422
  %4425 = add nsw i32 %4401, %4422
  %4426 = icmp sgt i32 %4425, -1
  br i1 %4426, label %4427, label %4440

4427:                                             ; preds = %4400
  %4428 = load i8*, i8** %2949, align 8
  %4429 = load i8*, i8** %2948, align 8
  %4430 = icmp ult i8* %4428, %4429
  br i1 %4430, label %4431, label %4440

4431:                                             ; preds = %4427
  %4432 = getelementptr inbounds i8, i8* %4428, i64 2
  store i8* %4432, i8** %2949, align 8
  %4433 = bitcast i8* %4428 to i16*
  %4434 = load i16, i16* %4433, align 1
  %4435 = call i16 @llvm.bswap.i16(i16 %4434) #7
  %4436 = zext i16 %4435 to i32
  %4437 = shl i32 %4436, %4425
  %4438 = or i32 %4437, %4424
  %4439 = add nsw i32 %4425, -16
  br label %4440

4440:                                             ; preds = %4431, %4427, %4400
  %4441 = phi i32 [ %4439, %4431 ], [ %4425, %4427 ], [ %4425, %4400 ]
  %4442 = phi i32 [ %4438, %4431 ], [ %4424, %4427 ], [ %4424, %4400 ]
  store i32 %4441, i32* %2950, align 4
  %4443 = add nsw i32 %4423, -1
  %4444 = zext i8 %4418 to i32
  %4445 = mul nsw i32 %4443, %4444
  %4446 = ashr i32 %4445, 8
  %4447 = add nsw i32 %4446, 1
  %4448 = shl i32 %4447, 16
  %4449 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4448, i32 %4447, i32 %4442, i32 0, i32 %4423, i32 %4442) #8, !srcloc !2
  %4450 = extractvalue { i32, i32, i32 } %4449, 0
  %4451 = extractvalue { i32, i32, i32 } %4449, 1
  %4452 = extractvalue { i32, i32, i32 } %4449, 2
  store i32 %4451, i32* %2955, align 8
  store i32 %4452, i32* %2956, align 8
  %4453 = add nsw i32 %4417, %4450
  br label %4454

4454:                                             ; preds = %4440, %4332, %4318
  %4455 = phi i32 [ %4452, %4440 ], [ %4333, %4332 ], [ %4330, %4318 ]
  %4456 = phi i32 [ %4441, %4440 ], [ %4334, %4332 ], [ %4319, %4318 ]
  %4457 = phi i32 [ %4451, %4440 ], [ %4335, %4332 ], [ %4329, %4318 ]
  %4458 = phi i32 [ %4453, %4440 ], [ %4336, %4332 ], [ %4289, %4318 ]
  %4459 = icmp eq i32 %4458, 0
  br i1 %4459, label %4564, label %4460

4460:                                             ; preds = %4454
  %4461 = load i8, i8* %2991, align 1
  %4462 = sext i32 %4457 to i64
  %4463 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4462
  %4464 = load i8, i8* %4463, align 1
  %4465 = zext i8 %4464 to i32
  %4466 = shl i32 %4457, %4465
  store i32 %4466, i32* %2955, align 8
  %4467 = shl i32 %4455, %4465
  %4468 = add nsw i32 %4456, %4465
  %4469 = icmp sgt i32 %4468, -1
  br i1 %4469, label %4470, label %4483

4470:                                             ; preds = %4460
  %4471 = load i8*, i8** %2949, align 8
  %4472 = load i8*, i8** %2948, align 8
  %4473 = icmp ult i8* %4471, %4472
  br i1 %4473, label %4474, label %4483

4474:                                             ; preds = %4470
  %4475 = getelementptr inbounds i8, i8* %4471, i64 2
  store i8* %4475, i8** %2949, align 8
  %4476 = bitcast i8* %4471 to i16*
  %4477 = load i16, i16* %4476, align 1
  %4478 = call i16 @llvm.bswap.i16(i16 %4477) #7
  %4479 = zext i16 %4478 to i32
  %4480 = shl i32 %4479, %4468
  %4481 = or i32 %4480, %4467
  %4482 = add nsw i32 %4468, -16
  br label %4483

4483:                                             ; preds = %4474, %4470, %4460
  %4484 = phi i32 [ %4482, %4474 ], [ %4468, %4470 ], [ %4468, %4460 ]
  %4485 = phi i32 [ %4481, %4474 ], [ %4467, %4470 ], [ %4467, %4460 ]
  store i32 %4484, i32* %2950, align 4
  %4486 = add nsw i32 %4466, -1
  %4487 = zext i8 %4461 to i32
  %4488 = mul nsw i32 %4486, %4487
  %4489 = ashr i32 %4488, 8
  %4490 = add nsw i32 %4489, 1
  %4491 = shl i32 %4490, 16
  %4492 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4491, i32 %4490, i32 %4485, i32 0, i32 %4466, i32 %4485) #8, !srcloc !2
  %4493 = extractvalue { i32, i32, i32 } %4492, 0
  %4494 = extractvalue { i32, i32, i32 } %4492, 1
  %4495 = extractvalue { i32, i32, i32 } %4492, 2
  store i32 %4494, i32* %2955, align 8
  store i32 %4495, i32* %2956, align 8
  %4496 = icmp eq i32 %4493, 0
  %4497 = sub nsw i32 0, %4458
  %4498 = select i1 %4496, i32 %4458, i32 %4497
  br label %4564

4499:                                             ; preds = %4222
  %4500 = load i8*, i8** %2949, align 8
  %4501 = load i8*, i8** %2948, align 8
  %4502 = icmp ult i8* %4500, %4501
  br i1 %4502, label %4503, label %4512

4503:                                             ; preds = %4499
  %4504 = getelementptr inbounds i8, i8* %4500, i64 2
  store i8* %4504, i8** %2949, align 8
  %4505 = bitcast i8* %4500 to i16*
  %4506 = load i16, i16* %4505, align 1
  %4507 = call i16 @llvm.bswap.i16(i16 %4506) #7
  %4508 = zext i16 %4507 to i32
  %4509 = shl i32 %4508, %4242
  %4510 = or i32 %4509, %4241
  %4511 = add nsw i32 %4242, -16
  br label %4512

4512:                                             ; preds = %4503, %4499, %4222
  %4513 = phi i32 [ %4511, %4503 ], [ %4242, %4499 ], [ %4242, %4222 ]
  %4514 = phi i32 [ %4510, %4503 ], [ %4241, %4499 ], [ %4241, %4222 ]
  store i32 %4513, i32* %2950, align 4
  %4515 = add nsw i32 %4240, -1
  %4516 = zext i8 %4235 to i32
  %4517 = mul nsw i32 %4515, %4516
  %4518 = ashr i32 %4517, 8
  %4519 = add nsw i32 %4518, 1
  %4520 = shl i32 %4519, 16
  %4521 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4520, i32 %4519, i32 %4514, i32 0, i32 %4240, i32 %4514) #8, !srcloc !2
  %4522 = extractvalue { i32, i32, i32 } %4521, 0
  %4523 = extractvalue { i32, i32, i32 } %4521, 1
  %4524 = extractvalue { i32, i32, i32 } %4521, 2
  store i32 %4524, i32* %2956, align 8
  %4525 = shl i32 %4522, 1
  %4526 = add nsw i32 %4525, %4232
  %4527 = load i8, i8* %2988, align 1
  %4528 = sext i32 %4523 to i64
  %4529 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4528
  %4530 = load i8, i8* %4529, align 1
  %4531 = zext i8 %4530 to i32
  %4532 = shl i32 %4523, %4531
  store i32 %4532, i32* %2955, align 8
  %4533 = shl i32 %4524, %4531
  %4534 = add nsw i32 %4513, %4531
  %4535 = icmp sgt i32 %4534, -1
  br i1 %4535, label %4536, label %4549

4536:                                             ; preds = %4512
  %4537 = load i8*, i8** %2949, align 8
  %4538 = load i8*, i8** %2948, align 8
  %4539 = icmp ult i8* %4537, %4538
  br i1 %4539, label %4540, label %4549

4540:                                             ; preds = %4536
  %4541 = getelementptr inbounds i8, i8* %4537, i64 2
  store i8* %4541, i8** %2949, align 8
  %4542 = bitcast i8* %4537 to i16*
  %4543 = load i16, i16* %4542, align 1
  %4544 = call i16 @llvm.bswap.i16(i16 %4543) #7
  %4545 = zext i16 %4544 to i32
  %4546 = shl i32 %4545, %4534
  %4547 = or i32 %4546, %4533
  %4548 = add nsw i32 %4534, -16
  br label %4549

4549:                                             ; preds = %4540, %4536, %4512
  %4550 = phi i32 [ %4548, %4540 ], [ %4534, %4536 ], [ %4534, %4512 ]
  %4551 = phi i32 [ %4547, %4540 ], [ %4533, %4536 ], [ %4533, %4512 ]
  store i32 %4550, i32* %2950, align 4
  %4552 = add nsw i32 %4532, -1
  %4553 = zext i8 %4527 to i32
  %4554 = mul nsw i32 %4552, %4553
  %4555 = ashr i32 %4554, 8
  %4556 = add nsw i32 %4555, 1
  %4557 = shl i32 %4556, 16
  %4558 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4557, i32 %4556, i32 %4551, i32 0, i32 %4532, i32 %4551) #8, !srcloc !2
  %4559 = extractvalue { i32, i32, i32 } %4558, 0
  %4560 = extractvalue { i32, i32, i32 } %4558, 1
  %4561 = extractvalue { i32, i32, i32 } %4558, 2
  store i32 %4560, i32* %2955, align 8
  store i32 %4561, i32* %2956, align 8
  %4562 = shl i32 %4559, 2
  %4563 = add nsw i32 %4526, %4562
  br label %4244

4564:                                             ; preds = %4483, %4454
  %4565 = phi i32 [ %4498, %4483 ], [ 0, %4454 ]
  %4566 = trunc i32 %4565 to i16
  %4567 = add i16 %4164, %4566
  %4568 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4002, i32 1
  store i16 %4567, i16* %4568, align 2
  %4569 = load i16, i16* %3999, align 4
  %4570 = load i8, i8* %2992, align 1
  %4571 = zext i8 %4570 to i32
  %4572 = load i32, i32* %2955, align 8
  %4573 = sext i32 %4572 to i64
  %4574 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4573
  %4575 = load i8, i8* %4574, align 1
  %4576 = zext i8 %4575 to i32
  %4577 = load i32, i32* %2950, align 4
  %4578 = load i32, i32* %2956, align 8
  %4579 = shl i32 %4572, %4576
  store i32 %4579, i32* %2955, align 8
  %4580 = shl i32 %4578, %4576
  %4581 = add nsw i32 %4577, %4576
  %4582 = icmp sgt i32 %4581, -1
  br i1 %4582, label %4583, label %4596

4583:                                             ; preds = %4564
  %4584 = load i8*, i8** %2949, align 8
  %4585 = load i8*, i8** %2948, align 8
  %4586 = icmp ult i8* %4584, %4585
  br i1 %4586, label %4587, label %4596

4587:                                             ; preds = %4583
  %4588 = getelementptr inbounds i8, i8* %4584, i64 2
  store i8* %4588, i8** %2949, align 8
  %4589 = bitcast i8* %4584 to i16*
  %4590 = load i16, i16* %4589, align 1
  %4591 = call i16 @llvm.bswap.i16(i16 %4590) #7
  %4592 = zext i16 %4591 to i32
  %4593 = shl i32 %4592, %4581
  %4594 = or i32 %4593, %4580
  %4595 = add nsw i32 %4581, -16
  br label %4596

4596:                                             ; preds = %4587, %4583, %4564
  %4597 = phi i32 [ %4595, %4587 ], [ %4581, %4583 ], [ %4581, %4564 ]
  %4598 = phi i32 [ %4594, %4587 ], [ %4580, %4583 ], [ %4580, %4564 ]
  store i32 %4597, i32* %2950, align 4
  %4599 = add nsw i32 %4579, -1
  %4600 = mul nsw i32 %4599, %4571
  %4601 = ashr i32 %4600, 8
  %4602 = add nsw i32 %4601, 1
  %4603 = shl i32 %4602, 16
  %4604 = icmp ult i32 %4598, %4603
  br i1 %4604, label %4745, label %4605

4605:                                             ; preds = %4596
  %4606 = sub i32 %4579, %4602
  %4607 = sub i32 %4598, %4603
  store i32 %4607, i32* %2956, align 8
  %4608 = load i8, i8* %2993, align 1
  %4609 = sext i32 %4606 to i64
  %4610 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4609
  %4611 = load i8, i8* %4610, align 1
  %4612 = zext i8 %4611 to i32
  %4613 = shl i32 %4606, %4612
  store i32 %4613, i32* %2955, align 8
  %4614 = shl i32 %4607, %4612
  %4615 = add nsw i32 %4597, %4612
  %4616 = icmp sgt i32 %4615, -1
  br i1 %4616, label %4617, label %4630

4617:                                             ; preds = %4605
  %4618 = load i8*, i8** %2949, align 8
  %4619 = load i8*, i8** %2948, align 8
  %4620 = icmp ult i8* %4618, %4619
  br i1 %4620, label %4621, label %4630

4621:                                             ; preds = %4617
  %4622 = getelementptr inbounds i8, i8* %4618, i64 2
  store i8* %4622, i8** %2949, align 8
  %4623 = bitcast i8* %4618 to i16*
  %4624 = load i16, i16* %4623, align 1
  %4625 = call i16 @llvm.bswap.i16(i16 %4624) #7
  %4626 = zext i16 %4625 to i32
  %4627 = shl i32 %4626, %4615
  %4628 = or i32 %4627, %4614
  %4629 = add nsw i32 %4615, -16
  br label %4630

4630:                                             ; preds = %4621, %4617, %4605
  %4631 = phi i32 [ %4629, %4621 ], [ %4615, %4617 ], [ %4615, %4605 ]
  %4632 = phi i32 [ %4628, %4621 ], [ %4614, %4617 ], [ %4614, %4605 ]
  store i32 %4631, i32* %2950, align 4
  %4633 = add nsw i32 %4613, -1
  %4634 = zext i8 %4608 to i32
  %4635 = mul nsw i32 %4633, %4634
  %4636 = ashr i32 %4635, 8
  %4637 = add nsw i32 %4636, 1
  %4638 = shl i32 %4637, 16
  %4639 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4638, i32 %4637, i32 %4632, i32 0, i32 %4613, i32 %4632) #8, !srcloc !2
  %4640 = extractvalue { i32, i32, i32 } %4639, 0
  %4641 = extractvalue { i32, i32, i32 } %4639, 1
  %4642 = extractvalue { i32, i32, i32 } %4639, 2
  store i32 %4642, i32* %2956, align 8
  %4643 = load i8, i8* %2994, align 1
  %4644 = sext i32 %4641 to i64
  %4645 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4644
  %4646 = load i8, i8* %4645, align 1
  %4647 = zext i8 %4646 to i32
  %4648 = shl i32 %4641, %4647
  store i32 %4648, i32* %2955, align 8
  %4649 = shl i32 %4642, %4647
  %4650 = add nsw i32 %4631, %4647
  %4651 = icmp sgt i32 %4650, -1
  br i1 %4651, label %4907, label %4920

4652:                                             ; preds = %4957, %4682
  %4653 = phi i32 [ %4969, %4957 ], [ %4694, %4682 ]
  %4654 = phi i32 [ %4958, %4957 ], [ %4683, %4682 ]
  %4655 = phi i32 [ %4968, %4957 ], [ %4693, %4682 ]
  %4656 = phi i64 [ 9, %4957 ], [ %4698, %4682 ]
  %4657 = phi i32 [ %4971, %4957 ], [ %4697, %4682 ]
  %4658 = add nuw nsw i64 %4656, 9
  %4659 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 8, i64 1, i64 %4658
  %4660 = load i8, i8* %4659, align 1
  %4661 = sext i32 %4655 to i64
  %4662 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4661
  %4663 = load i8, i8* %4662, align 1
  %4664 = zext i8 %4663 to i32
  %4665 = shl i32 %4655, %4664
  store i32 %4665, i32* %2955, align 8
  %4666 = shl i32 %4653, %4664
  %4667 = add nsw i32 %4654, %4664
  %4668 = icmp sgt i32 %4667, -1
  br i1 %4668, label %4669, label %4682

4669:                                             ; preds = %4652
  %4670 = load i8*, i8** %2949, align 8
  %4671 = load i8*, i8** %2948, align 8
  %4672 = icmp ult i8* %4670, %4671
  br i1 %4672, label %4673, label %4682

4673:                                             ; preds = %4669
  %4674 = getelementptr inbounds i8, i8* %4670, i64 2
  store i8* %4674, i8** %2949, align 8
  %4675 = bitcast i8* %4670 to i16*
  %4676 = load i16, i16* %4675, align 1
  %4677 = call i16 @llvm.bswap.i16(i16 %4676) #7
  %4678 = zext i16 %4677 to i32
  %4679 = shl i32 %4678, %4667
  %4680 = or i32 %4679, %4666
  %4681 = add nsw i32 %4667, -16
  br label %4682

4682:                                             ; preds = %4673, %4669, %4652
  %4683 = phi i32 [ %4681, %4673 ], [ %4667, %4669 ], [ %4667, %4652 ]
  %4684 = phi i32 [ %4680, %4673 ], [ %4666, %4669 ], [ %4666, %4652 ]
  store i32 %4683, i32* %2950, align 4
  %4685 = add nsw i32 %4665, -1
  %4686 = zext i8 %4660 to i32
  %4687 = mul nsw i32 %4685, %4686
  %4688 = ashr i32 %4687, 8
  %4689 = add nsw i32 %4688, 1
  %4690 = shl i32 %4689, 16
  %4691 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4690, i32 %4689, i32 %4684, i32 0, i32 %4665, i32 %4684) #8, !srcloc !2
  %4692 = extractvalue { i32, i32, i32 } %4691, 0
  %4693 = extractvalue { i32, i32, i32 } %4691, 1
  %4694 = extractvalue { i32, i32, i32 } %4691, 2
  store i32 %4693, i32* %2955, align 8
  store i32 %4694, i32* %2956, align 8
  %4695 = trunc i64 %4656 to i32
  %4696 = shl i32 %4692, %4695
  %4697 = add nsw i32 %4696, %4657
  %4698 = add nsw i64 %4656, -1
  %4699 = icmp ugt i64 %4698, 3
  br i1 %4699, label %4652, label %4700

4700:                                             ; preds = %4682
  %4701 = and i32 %4697, 65520
  %4702 = icmp eq i32 %4701, 0
  br i1 %4702, label %4740, label %4703

4703:                                             ; preds = %4700
  %4704 = load i8, i8* %2996, align 1
  %4705 = sext i32 %4693 to i64
  %4706 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4705
  %4707 = load i8, i8* %4706, align 1
  %4708 = zext i8 %4707 to i32
  %4709 = shl i32 %4693, %4708
  store i32 %4709, i32* %2955, align 8
  %4710 = shl i32 %4694, %4708
  %4711 = add nsw i32 %4683, %4708
  %4712 = icmp sgt i32 %4711, -1
  br i1 %4712, label %4713, label %4726

4713:                                             ; preds = %4703
  %4714 = load i8*, i8** %2949, align 8
  %4715 = load i8*, i8** %2948, align 8
  %4716 = icmp ult i8* %4714, %4715
  br i1 %4716, label %4717, label %4726

4717:                                             ; preds = %4713
  %4718 = getelementptr inbounds i8, i8* %4714, i64 2
  store i8* %4718, i8** %2949, align 8
  %4719 = bitcast i8* %4714 to i16*
  %4720 = load i16, i16* %4719, align 1
  %4721 = call i16 @llvm.bswap.i16(i16 %4720) #7
  %4722 = zext i16 %4721 to i32
  %4723 = shl i32 %4722, %4711
  %4724 = or i32 %4723, %4710
  %4725 = add nsw i32 %4711, -16
  br label %4726

4726:                                             ; preds = %4717, %4713, %4703
  %4727 = phi i32 [ %4725, %4717 ], [ %4711, %4713 ], [ %4711, %4703 ]
  %4728 = phi i32 [ %4724, %4717 ], [ %4710, %4713 ], [ %4710, %4703 ]
  store i32 %4727, i32* %2950, align 4
  %4729 = add nsw i32 %4709, -1
  %4730 = zext i8 %4704 to i32
  %4731 = mul nsw i32 %4729, %4730
  %4732 = ashr i32 %4731, 8
  %4733 = add nsw i32 %4732, 1
  %4734 = shl i32 %4733, 16
  %4735 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4734, i32 %4733, i32 %4728, i32 0, i32 %4709, i32 %4728) #8, !srcloc !2
  %4736 = extractvalue { i32, i32, i32 } %4735, 0
  %4737 = extractvalue { i32, i32, i32 } %4735, 1
  %4738 = extractvalue { i32, i32, i32 } %4735, 2
  store i32 %4737, i32* %2955, align 8
  store i32 %4738, i32* %2956, align 8
  %4739 = icmp eq i32 %4736, 0
  br i1 %4739, label %4862, label %4740

4740:                                             ; preds = %4726, %4700
  %4741 = phi i32 [ %4738, %4726 ], [ %4694, %4700 ]
  %4742 = phi i32 [ %4727, %4726 ], [ %4683, %4700 ]
  %4743 = phi i32 [ %4737, %4726 ], [ %4693, %4700 ]
  %4744 = add nsw i32 %4697, 8
  br label %4862

4745:                                             ; preds = %4596
  store i32 %4598, i32* %2956, align 8
  %4746 = load i8, i8* %2997, align 1
  %4747 = sext i32 %4602 to i64
  %4748 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4747
  %4749 = load i8, i8* %4748, align 1
  %4750 = zext i8 %4749 to i32
  %4751 = shl i32 %4602, %4750
  store i32 %4751, i32* %2955, align 8
  %4752 = shl i32 %4598, %4750
  %4753 = add nsw i32 %4597, %4750
  %4754 = icmp sgt i32 %4753, -1
  br i1 %4754, label %4755, label %4768

4755:                                             ; preds = %4745
  %4756 = load i8*, i8** %2949, align 8
  %4757 = load i8*, i8** %2948, align 8
  %4758 = icmp ult i8* %4756, %4757
  br i1 %4758, label %4759, label %4768

4759:                                             ; preds = %4755
  %4760 = getelementptr inbounds i8, i8* %4756, i64 2
  store i8* %4760, i8** %2949, align 8
  %4761 = bitcast i8* %4756 to i16*
  %4762 = load i16, i16* %4761, align 1
  %4763 = call i16 @llvm.bswap.i16(i16 %4762) #7
  %4764 = zext i16 %4763 to i32
  %4765 = shl i32 %4764, %4753
  %4766 = or i32 %4765, %4752
  %4767 = add nsw i32 %4753, -16
  br label %4768

4768:                                             ; preds = %4759, %4755, %4745
  %4769 = phi i32 [ %4767, %4759 ], [ %4753, %4755 ], [ %4753, %4745 ]
  %4770 = phi i32 [ %4766, %4759 ], [ %4752, %4755 ], [ %4752, %4745 ]
  store i32 %4769, i32* %2950, align 4
  %4771 = add nsw i32 %4751, -1
  %4772 = zext i8 %4746 to i32
  %4773 = mul nsw i32 %4771, %4772
  %4774 = ashr i32 %4773, 8
  %4775 = add nsw i32 %4774, 1
  %4776 = shl i32 %4775, 16
  %4777 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4776, i32 %4775, i32 %4770, i32 0, i32 %4751, i32 %4770) #8, !srcloc !2
  %4778 = extractvalue { i32, i32, i32 } %4777, 0
  %4779 = extractvalue { i32, i32, i32 } %4777, 1
  %4780 = extractvalue { i32, i32, i32 } %4777, 2
  store i32 %4779, i32* %2955, align 8
  store i32 %4780, i32* %2956, align 8
  %4781 = mul nsw i32 %4778, 3
  %4782 = add nsw i32 %4781, 1
  %4783 = sext i32 %4782 to i64
  %4784 = getelementptr inbounds i8, i8* %2997, i64 %4783
  %4785 = shl i32 %4778, 2
  %4786 = load i8, i8* %4784, align 1
  %4787 = sext i32 %4779 to i64
  %4788 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4787
  %4789 = load i8, i8* %4788, align 1
  %4790 = zext i8 %4789 to i32
  %4791 = shl i32 %4779, %4790
  store i32 %4791, i32* %2955, align 8
  %4792 = shl i32 %4780, %4790
  %4793 = add nsw i32 %4769, %4790
  %4794 = icmp sgt i32 %4793, -1
  br i1 %4794, label %4795, label %4808

4795:                                             ; preds = %4768
  %4796 = load i8*, i8** %2949, align 8
  %4797 = load i8*, i8** %2948, align 8
  %4798 = icmp ult i8* %4796, %4797
  br i1 %4798, label %4799, label %4808

4799:                                             ; preds = %4795
  %4800 = getelementptr inbounds i8, i8* %4796, i64 2
  store i8* %4800, i8** %2949, align 8
  %4801 = bitcast i8* %4796 to i16*
  %4802 = load i16, i16* %4801, align 1
  %4803 = call i16 @llvm.bswap.i16(i16 %4802) #7
  %4804 = zext i16 %4803 to i32
  %4805 = shl i32 %4804, %4793
  %4806 = or i32 %4805, %4792
  %4807 = add nsw i32 %4793, -16
  br label %4808

4808:                                             ; preds = %4799, %4795, %4768
  %4809 = phi i32 [ %4807, %4799 ], [ %4793, %4795 ], [ %4793, %4768 ]
  %4810 = phi i32 [ %4806, %4799 ], [ %4792, %4795 ], [ %4792, %4768 ]
  store i32 %4809, i32* %2950, align 4
  %4811 = add nsw i32 %4791, -1
  %4812 = zext i8 %4786 to i32
  %4813 = mul nsw i32 %4811, %4812
  %4814 = ashr i32 %4813, 8
  %4815 = add nsw i32 %4814, 1
  %4816 = shl i32 %4815, 16
  %4817 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4816, i32 %4815, i32 %4810, i32 0, i32 %4791, i32 %4810) #8, !srcloc !2
  %4818 = extractvalue { i32, i32, i32 } %4817, 0
  %4819 = extractvalue { i32, i32, i32 } %4817, 1
  %4820 = extractvalue { i32, i32, i32 } %4817, 2
  store i32 %4819, i32* %2955, align 8
  store i32 %4820, i32* %2956, align 8
  %4821 = add nsw i32 %4818, 1
  %4822 = sext i32 %4821 to i64
  %4823 = getelementptr inbounds i8, i8* %4784, i64 %4822
  %4824 = shl i32 %4818, 1
  %4825 = add nsw i32 %4824, %4785
  %4826 = load i8, i8* %4823, align 1
  %4827 = sext i32 %4819 to i64
  %4828 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4827
  %4829 = load i8, i8* %4828, align 1
  %4830 = zext i8 %4829 to i32
  %4831 = shl i32 %4819, %4830
  store i32 %4831, i32* %2955, align 8
  %4832 = shl i32 %4820, %4830
  %4833 = add nsw i32 %4809, %4830
  %4834 = icmp sgt i32 %4833, -1
  br i1 %4834, label %4835, label %4848

4835:                                             ; preds = %4808
  %4836 = load i8*, i8** %2949, align 8
  %4837 = load i8*, i8** %2948, align 8
  %4838 = icmp ult i8* %4836, %4837
  br i1 %4838, label %4839, label %4848

4839:                                             ; preds = %4835
  %4840 = getelementptr inbounds i8, i8* %4836, i64 2
  store i8* %4840, i8** %2949, align 8
  %4841 = bitcast i8* %4836 to i16*
  %4842 = load i16, i16* %4841, align 1
  %4843 = call i16 @llvm.bswap.i16(i16 %4842) #7
  %4844 = zext i16 %4843 to i32
  %4845 = shl i32 %4844, %4833
  %4846 = or i32 %4845, %4832
  %4847 = add nsw i32 %4833, -16
  br label %4848

4848:                                             ; preds = %4839, %4835, %4808
  %4849 = phi i32 [ %4847, %4839 ], [ %4833, %4835 ], [ %4833, %4808 ]
  %4850 = phi i32 [ %4846, %4839 ], [ %4832, %4835 ], [ %4832, %4808 ]
  store i32 %4849, i32* %2950, align 4
  %4851 = add nsw i32 %4831, -1
  %4852 = zext i8 %4826 to i32
  %4853 = mul nsw i32 %4851, %4852
  %4854 = ashr i32 %4853, 8
  %4855 = add nsw i32 %4854, 1
  %4856 = shl i32 %4855, 16
  %4857 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4856, i32 %4855, i32 %4850, i32 0, i32 %4831, i32 %4850) #8, !srcloc !2
  %4858 = extractvalue { i32, i32, i32 } %4857, 0
  %4859 = extractvalue { i32, i32, i32 } %4857, 1
  %4860 = extractvalue { i32, i32, i32 } %4857, 2
  store i32 %4859, i32* %2955, align 8
  store i32 %4860, i32* %2956, align 8
  %4861 = add nsw i32 %4825, %4858
  br label %4862

4862:                                             ; preds = %4848, %4740, %4726
  %4863 = phi i32 [ %4860, %4848 ], [ %4741, %4740 ], [ %4738, %4726 ]
  %4864 = phi i32 [ %4849, %4848 ], [ %4742, %4740 ], [ %4727, %4726 ]
  %4865 = phi i32 [ %4859, %4848 ], [ %4743, %4740 ], [ %4737, %4726 ]
  %4866 = phi i32 [ %4861, %4848 ], [ %4744, %4740 ], [ %4697, %4726 ]
  %4867 = icmp eq i32 %4866, 0
  br i1 %4867, label %4972, label %4868

4868:                                             ; preds = %4862
  %4869 = load i8, i8* %2998, align 1
  %4870 = sext i32 %4865 to i64
  %4871 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4870
  %4872 = load i8, i8* %4871, align 1
  %4873 = zext i8 %4872 to i32
  %4874 = shl i32 %4865, %4873
  store i32 %4874, i32* %2955, align 8
  %4875 = shl i32 %4863, %4873
  %4876 = add nsw i32 %4864, %4873
  %4877 = icmp sgt i32 %4876, -1
  br i1 %4877, label %4878, label %4891

4878:                                             ; preds = %4868
  %4879 = load i8*, i8** %2949, align 8
  %4880 = load i8*, i8** %2948, align 8
  %4881 = icmp ult i8* %4879, %4880
  br i1 %4881, label %4882, label %4891

4882:                                             ; preds = %4878
  %4883 = getelementptr inbounds i8, i8* %4879, i64 2
  store i8* %4883, i8** %2949, align 8
  %4884 = bitcast i8* %4879 to i16*
  %4885 = load i16, i16* %4884, align 1
  %4886 = call i16 @llvm.bswap.i16(i16 %4885) #7
  %4887 = zext i16 %4886 to i32
  %4888 = shl i32 %4887, %4876
  %4889 = or i32 %4888, %4875
  %4890 = add nsw i32 %4876, -16
  br label %4891

4891:                                             ; preds = %4882, %4878, %4868
  %4892 = phi i32 [ %4890, %4882 ], [ %4876, %4878 ], [ %4876, %4868 ]
  %4893 = phi i32 [ %4889, %4882 ], [ %4875, %4878 ], [ %4875, %4868 ]
  store i32 %4892, i32* %2950, align 4
  %4894 = add nsw i32 %4874, -1
  %4895 = zext i8 %4869 to i32
  %4896 = mul nsw i32 %4894, %4895
  %4897 = ashr i32 %4896, 8
  %4898 = add nsw i32 %4897, 1
  %4899 = shl i32 %4898, 16
  %4900 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4899, i32 %4898, i32 %4893, i32 0, i32 %4874, i32 %4893) #8, !srcloc !2
  %4901 = extractvalue { i32, i32, i32 } %4900, 0
  %4902 = extractvalue { i32, i32, i32 } %4900, 1
  %4903 = extractvalue { i32, i32, i32 } %4900, 2
  store i32 %4902, i32* %2955, align 8
  store i32 %4903, i32* %2956, align 8
  %4904 = icmp eq i32 %4901, 0
  %4905 = sub nsw i32 0, %4866
  %4906 = select i1 %4904, i32 %4866, i32 %4905
  br label %4972

4907:                                             ; preds = %4630
  %4908 = load i8*, i8** %2949, align 8
  %4909 = load i8*, i8** %2948, align 8
  %4910 = icmp ult i8* %4908, %4909
  br i1 %4910, label %4911, label %4920

4911:                                             ; preds = %4907
  %4912 = getelementptr inbounds i8, i8* %4908, i64 2
  store i8* %4912, i8** %2949, align 8
  %4913 = bitcast i8* %4908 to i16*
  %4914 = load i16, i16* %4913, align 1
  %4915 = call i16 @llvm.bswap.i16(i16 %4914) #7
  %4916 = zext i16 %4915 to i32
  %4917 = shl i32 %4916, %4650
  %4918 = or i32 %4917, %4649
  %4919 = add nsw i32 %4650, -16
  br label %4920

4920:                                             ; preds = %4911, %4907, %4630
  %4921 = phi i32 [ %4919, %4911 ], [ %4650, %4907 ], [ %4650, %4630 ]
  %4922 = phi i32 [ %4918, %4911 ], [ %4649, %4907 ], [ %4649, %4630 ]
  store i32 %4921, i32* %2950, align 4
  %4923 = add nsw i32 %4648, -1
  %4924 = zext i8 %4643 to i32
  %4925 = mul nsw i32 %4923, %4924
  %4926 = ashr i32 %4925, 8
  %4927 = add nsw i32 %4926, 1
  %4928 = shl i32 %4927, 16
  %4929 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4928, i32 %4927, i32 %4922, i32 0, i32 %4648, i32 %4922) #8, !srcloc !2
  %4930 = extractvalue { i32, i32, i32 } %4929, 0
  %4931 = extractvalue { i32, i32, i32 } %4929, 1
  %4932 = extractvalue { i32, i32, i32 } %4929, 2
  store i32 %4932, i32* %2956, align 8
  %4933 = shl i32 %4930, 1
  %4934 = add nsw i32 %4933, %4640
  %4935 = load i8, i8* %2995, align 1
  %4936 = sext i32 %4931 to i64
  %4937 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4936
  %4938 = load i8, i8* %4937, align 1
  %4939 = zext i8 %4938 to i32
  %4940 = shl i32 %4931, %4939
  store i32 %4940, i32* %2955, align 8
  %4941 = shl i32 %4932, %4939
  %4942 = add nsw i32 %4921, %4939
  %4943 = icmp sgt i32 %4942, -1
  br i1 %4943, label %4944, label %4957

4944:                                             ; preds = %4920
  %4945 = load i8*, i8** %2949, align 8
  %4946 = load i8*, i8** %2948, align 8
  %4947 = icmp ult i8* %4945, %4946
  br i1 %4947, label %4948, label %4957

4948:                                             ; preds = %4944
  %4949 = getelementptr inbounds i8, i8* %4945, i64 2
  store i8* %4949, i8** %2949, align 8
  %4950 = bitcast i8* %4945 to i16*
  %4951 = load i16, i16* %4950, align 1
  %4952 = call i16 @llvm.bswap.i16(i16 %4951) #7
  %4953 = zext i16 %4952 to i32
  %4954 = shl i32 %4953, %4942
  %4955 = or i32 %4954, %4941
  %4956 = add nsw i32 %4942, -16
  br label %4957

4957:                                             ; preds = %4948, %4944, %4920
  %4958 = phi i32 [ %4956, %4948 ], [ %4942, %4944 ], [ %4942, %4920 ]
  %4959 = phi i32 [ %4955, %4948 ], [ %4941, %4944 ], [ %4941, %4920 ]
  store i32 %4958, i32* %2950, align 4
  %4960 = add nsw i32 %4940, -1
  %4961 = zext i8 %4935 to i32
  %4962 = mul nsw i32 %4960, %4961
  %4963 = ashr i32 %4962, 8
  %4964 = add nsw i32 %4963, 1
  %4965 = shl i32 %4964, 16
  %4966 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4965, i32 %4964, i32 %4959, i32 0, i32 %4940, i32 %4959) #8, !srcloc !2
  %4967 = extractvalue { i32, i32, i32 } %4966, 0
  %4968 = extractvalue { i32, i32, i32 } %4966, 1
  %4969 = extractvalue { i32, i32, i32 } %4966, 2
  store i32 %4968, i32* %2955, align 8
  store i32 %4969, i32* %2956, align 8
  %4970 = shl i32 %4967, 2
  %4971 = add nsw i32 %4934, %4970
  br label %4652

4972:                                             ; preds = %4891, %4862
  %4973 = phi i32 [ %4906, %4891 ], [ 0, %4862 ]
  %4974 = trunc i32 %4973 to i16
  %4975 = add i16 %4569, %4974
  %4976 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4002, i32 0
  store i16 %4975, i16* %4976, align 4
  br label %4986

4977:                                             ; preds = %4152
  store i32 %4158, i32* %2955, align 8
  store i32 %4154, i32* %2956, align 8
  %4978 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4002
  %4979 = bitcast %struct.VP56mv* %4978 to i32*
  store i32 0, i32* %4979, align 4
  br label %4986

4980:                                             ; preds = %4116
  store i32 %4122, i32* %2955, align 8
  store i32 %4118, i32* %2956, align 8
  %4981 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4002
  %4982 = bitcast %struct.VP56mv* %4981 to i32*
  store i32 %4040, i32* %4982, align 4
  br label %4986

4983:                                             ; preds = %4080
  store i32 %4086, i32* %2955, align 8
  store i32 %4082, i32* %2956, align 8
  %4984 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4002
  %4985 = bitcast %struct.VP56mv* %4984 to i32*
  store i32 %4023, i32* %4985, align 4
  br label %4986

4986:                                             ; preds = %4983, %4980, %4977, %4972
  %4987 = add nuw nsw i64 %4002, 1
  %4988 = icmp ult i64 %4987, %4000
  br i1 %4988, label %4001, label %4989

4989:                                             ; preds = %4986
  %4990 = add nsw i64 %4000, -1
  %4991 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 %4990
  %4992 = bitcast %struct.VP56mv* %4991 to i32*
  %4993 = bitcast %struct.VP56mv* %3785 to i32*
  %4994 = load i32, i32* %4992, align 4
  store i32 %4994, i32* %4993, align 4
  br label %5098

4995:                                             ; preds = %3868
  store i32 %3874, i32* %2955, align 8
  store i32 %3870, i32* %2956, align 8
  %4996 = call fastcc i32 @vp8_read_mv_component(%struct.VP56RangeCoder* %2947, i8* %2985) #7
  %4997 = load i16, i16* %3825, align 2
  %4998 = trunc i32 %4996 to i16
  %4999 = add i16 %4997, %4998
  store i16 %4999, i16* %3825, align 2
  %5000 = call fastcc i32 @vp8_read_mv_component(%struct.VP56RangeCoder* %2947, i8* %2992) #7
  %5001 = load i16, i16* %3806, align 4
  %5002 = trunc i32 %5000 to i16
  %5003 = add i16 %5001, %5002
  store i16 %5003, i16* %3806, align 4
  %5004 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 0
  %5005 = bitcast %struct.VP56mv* %3785 to i32*
  %5006 = bitcast %struct.VP56mv* %5004 to i32*
  %5007 = load i32, i32* %5005, align 4
  store i32 %5007, i32* %5006, align 4
  br label %5098

5008:                                             ; preds = %3773
  store i32 %3779, i32* %2955, align 8
  store i32 %3775, i32* %2956, align 8
  %5009 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9
  %5010 = load i16, i16* %2972, align 8
  %5011 = sext i16 %5010 to i32
  %5012 = load i32, i32* %2945, align 4
  %5013 = icmp slt i32 %5012, 32767
  %5014 = select i1 %5013, i32 %5012, i32 32767
  %5015 = icmp sgt i32 %5014, -32768
  %5016 = select i1 %5015, i32 %5014, i32 -32768
  %5017 = load i32, i32* %2946, align 4
  %5018 = icmp slt i32 %5017, 32767
  %5019 = select i1 %5018, i32 %5017, i32 32767
  %5020 = icmp sgt i32 %5019, -32768
  %5021 = select i1 %5020, i32 %5019, i32 -32768
  %5022 = icmp sgt i32 %5016, %5011
  %5023 = icmp slt i32 %5021, %5011
  %5024 = select i1 %5023, i32 %5021, i32 %5011
  %5025 = select i1 %5022, i32 %5016, i32 %5024
  %5026 = trunc i32 %5025 to i16
  %5027 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %5009, i64 0, i32 0
  store i16 %5026, i16* %5027, align 4
  %5028 = load i16, i16* %2973, align 2
  %5029 = sext i16 %5028 to i32
  %5030 = load i32, i32* %2933, align 4
  %5031 = icmp slt i32 %5030, 32767
  %5032 = select i1 %5031, i32 %5030, i32 32767
  %5033 = icmp sgt i32 %5032, -32768
  %5034 = select i1 %5033, i32 %5032, i32 -32768
  %5035 = load i32, i32* %2938, align 4
  %5036 = icmp slt i32 %5035, 32767
  %5037 = select i1 %5036, i32 %5035, i32 32767
  %5038 = icmp sgt i32 %5037, -32768
  %5039 = select i1 %5038, i32 %5037, i32 -32768
  %5040 = icmp sgt i32 %5034, %5029
  %5041 = icmp slt i32 %5039, %5029
  %5042 = select i1 %5041, i32 %5039, i32 %5029
  %5043 = select i1 %5040, i32 %5034, i32 %5042
  %5044 = trunc i32 %5043 to i16
  %5045 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9, i32 1
  store i16 %5044, i16* %5045, align 2
  %5046 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 0
  %5047 = bitcast %struct.VP56mv* %5009 to i32*
  %5048 = bitcast %struct.VP56mv* %5046 to i32*
  %5049 = load i32, i32* %5047, align 4
  store i32 %5049, i32* %5048, align 4
  br label %5098

5050:                                             ; preds = %3737
  store i32 %3743, i32* %2955, align 8
  store i32 %3739, i32* %2956, align 8
  %5051 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9
  %5052 = load i16, i16* %2969, align 4
  %5053 = sext i16 %5052 to i32
  %5054 = load i32, i32* %2945, align 4
  %5055 = icmp slt i32 %5054, 32767
  %5056 = select i1 %5055, i32 %5054, i32 32767
  %5057 = icmp sgt i32 %5056, -32768
  %5058 = select i1 %5057, i32 %5056, i32 -32768
  %5059 = load i32, i32* %2946, align 4
  %5060 = icmp slt i32 %5059, 32767
  %5061 = select i1 %5060, i32 %5059, i32 32767
  %5062 = icmp sgt i32 %5061, -32768
  %5063 = select i1 %5062, i32 %5061, i32 -32768
  %5064 = icmp sgt i32 %5058, %5053
  %5065 = icmp slt i32 %5063, %5053
  %5066 = select i1 %5065, i32 %5063, i32 %5053
  %5067 = select i1 %5064, i32 %5058, i32 %5066
  %5068 = trunc i32 %5067 to i16
  %5069 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %5051, i64 0, i32 0
  store i16 %5068, i16* %5069, align 4
  %5070 = load i16, i16* %2970, align 2
  %5071 = sext i16 %5070 to i32
  %5072 = load i32, i32* %2933, align 4
  %5073 = icmp slt i32 %5072, 32767
  %5074 = select i1 %5073, i32 %5072, i32 32767
  %5075 = icmp sgt i32 %5074, -32768
  %5076 = select i1 %5075, i32 %5074, i32 -32768
  %5077 = load i32, i32* %2938, align 4
  %5078 = icmp slt i32 %5077, 32767
  %5079 = select i1 %5078, i32 %5077, i32 32767
  %5080 = icmp sgt i32 %5079, -32768
  %5081 = select i1 %5080, i32 %5079, i32 -32768
  %5082 = icmp sgt i32 %5076, %5071
  %5083 = icmp slt i32 %5081, %5071
  %5084 = select i1 %5083, i32 %5081, i32 %5071
  %5085 = select i1 %5082, i32 %5076, i32 %5084
  %5086 = trunc i32 %5085 to i16
  %5087 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9, i32 1
  store i16 %5086, i16* %5087, align 2
  %5088 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 0
  %5089 = bitcast %struct.VP56mv* %5051 to i32*
  %5090 = bitcast %struct.VP56mv* %5088 to i32*
  %5091 = load i32, i32* %5089, align 4
  store i32 %5091, i32* %5090, align 4
  br label %5098

5092:                                             ; preds = %3677
  store i32 %3683, i32* %2955, align 8
  store i32 %3679, i32* %2956, align 8
  %5093 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 1
  store i8 5, i8* %5093, align 1
  %5094 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 9
  %5095 = bitcast %struct.VP56mv* %5094 to i32*
  store i32 0, i32* %5095, align 4
  %5096 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 0
  %5097 = bitcast %struct.VP56mv* %5096 to i32*
  store i32 0, i32* %5097, align 4
  br label %5098

5098:                                             ; preds = %5092, %5050, %5008, %4995, %4989
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2975) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2967) #7
  br label %5277

5099:                                             ; preds = %3439
  store i32 %3445, i32* %2955, align 8
  store i32 %3441, i32* %2956, align 8
  br label %5100

5100:                                             ; preds = %5128, %5099
  %5101 = phi i32 [ %3441, %5099 ], [ %5140, %5128 ]
  %5102 = phi i32 [ %3440, %5099 ], [ %5129, %5128 ]
  %5103 = phi i32 [ %3445, %5099 ], [ %5139, %5128 ]
  %5104 = phi i64 [ 0, %5099 ], [ %5144, %5128 ]
  %5105 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 5, i64 %5104
  %5106 = load i8, i8* %5105, align 1
  %5107 = sext i32 %5103 to i64
  %5108 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %5107
  %5109 = load i8, i8* %5108, align 1
  %5110 = zext i8 %5109 to i32
  %5111 = shl i32 %5103, %5110
  store i32 %5111, i32* %2955, align 8
  %5112 = shl i32 %5101, %5110
  %5113 = add nsw i32 %5102, %5110
  %5114 = icmp sgt i32 %5113, -1
  br i1 %5114, label %5115, label %5128

5115:                                             ; preds = %5100
  %5116 = load i8*, i8** %2949, align 8
  %5117 = load i8*, i8** %2948, align 8
  %5118 = icmp ult i8* %5116, %5117
  br i1 %5118, label %5119, label %5128

5119:                                             ; preds = %5115
  %5120 = getelementptr inbounds i8, i8* %5116, i64 2
  store i8* %5120, i8** %2949, align 8
  %5121 = bitcast i8* %5116 to i16*
  %5122 = load i16, i16* %5121, align 1
  %5123 = call i16 @llvm.bswap.i16(i16 %5122) #7
  %5124 = zext i16 %5123 to i32
  %5125 = shl i32 %5124, %5113
  %5126 = or i32 %5125, %5112
  %5127 = add nsw i32 %5113, -16
  br label %5128

5128:                                             ; preds = %5119, %5115, %5100
  %5129 = phi i32 [ %5127, %5119 ], [ %5113, %5115 ], [ %5113, %5100 ]
  %5130 = phi i32 [ %5126, %5119 ], [ %5112, %5115 ], [ %5112, %5100 ]
  store i32 %5129, i32* %2950, align 4
  %5131 = add nsw i32 %5111, -1
  %5132 = zext i8 %5106 to i32
  %5133 = mul nsw i32 %5131, %5132
  %5134 = ashr i32 %5133, 8
  %5135 = add nsw i32 %5134, 1
  %5136 = shl i32 %5135, 16
  %5137 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %5136, i32 %5135, i32 %5130, i32 0, i32 %5111, i32 %5130) #8, !srcloc !2
  %5138 = extractvalue { i32, i32, i32 } %5137, 0
  %5139 = extractvalue { i32, i32, i32 } %5137, 1
  %5140 = extractvalue { i32, i32, i32 } %5137, 2
  store i32 %5139, i32* %2955, align 8
  store i32 %5140, i32* %2956, align 8
  %5141 = sext i32 %5138 to i64
  %5142 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @vp8_pred16x16_tree_inter, i64 0, i64 %5104, i64 %5141
  %5143 = load i8, i8* %5142, align 1
  %5144 = sext i8 %5143 to i64
  %5145 = icmp sgt i8 %5143, 0
  br i1 %5145, label %5100, label %5146

5146:                                             ; preds = %5128
  %5147 = sext i8 %5143 to i32
  %5148 = sub nsw i32 0, %5147
  %5149 = trunc i32 %5148 to i8
  %5150 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 1
  store i8 %5149, i8* %5150, align 1
  %5151 = and i32 %5148, 255
  %5152 = icmp eq i32 %5151, 4
  br i1 %5152, label %5153, label %5220

5153:                                             ; preds = %5146
  %5154 = load i16, i16* %2942, align 8
  %5155 = zext i16 %5154 to i64
  %5156 = sub nsw i64 0, %5155
  %5157 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 -1
  %5158 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %5157, i64 %5156
  %5159 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 8, i64 0
  %5160 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %5158, i64 0, i32 8
  %5161 = bitcast [4 x i8]* %5160 to i32*
  %5162 = bitcast i8* %5159 to i32*
  %5163 = load i32, i32* %5161, align 4
  store i32 %5163, i32* %5162, align 4
  br label %5164

5164:                                             ; preds = %5215, %5153
  %5165 = phi i64 [ 0, %5153 ], [ %5218, %5215 ]
  %5166 = load i32, i32* %2955, align 8
  %5167 = load i32, i32* %2950, align 4
  %5168 = load i32, i32* %2956, align 8
  br label %5169

5169:                                             ; preds = %5197, %5164
  %5170 = phi i32 [ %5168, %5164 ], [ %5209, %5197 ]
  %5171 = phi i32 [ %5167, %5164 ], [ %5198, %5197 ]
  %5172 = phi i32 [ %5166, %5164 ], [ %5208, %5197 ]
  %5173 = phi i64 [ 0, %5164 ], [ %5213, %5197 ]
  %5174 = getelementptr inbounds [9 x i8], [9 x i8]* @vp8_pred4x4_prob_inter, i64 0, i64 %5173
  %5175 = load i8, i8* %5174, align 1
  %5176 = sext i32 %5172 to i64
  %5177 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %5176
  %5178 = load i8, i8* %5177, align 1
  %5179 = zext i8 %5178 to i32
  %5180 = shl i32 %5172, %5179
  store i32 %5180, i32* %2955, align 8
  %5181 = shl i32 %5170, %5179
  %5182 = add nsw i32 %5171, %5179
  %5183 = icmp sgt i32 %5182, -1
  br i1 %5183, label %5184, label %5197

5184:                                             ; preds = %5169
  %5185 = load i8*, i8** %2949, align 8
  %5186 = load i8*, i8** %2948, align 8
  %5187 = icmp ult i8* %5185, %5186
  br i1 %5187, label %5188, label %5197

5188:                                             ; preds = %5184
  %5189 = getelementptr inbounds i8, i8* %5185, i64 2
  store i8* %5189, i8** %2949, align 8
  %5190 = bitcast i8* %5185 to i16*
  %5191 = load i16, i16* %5190, align 1
  %5192 = call i16 @llvm.bswap.i16(i16 %5191) #7
  %5193 = zext i16 %5192 to i32
  %5194 = shl i32 %5193, %5182
  %5195 = or i32 %5194, %5181
  %5196 = add nsw i32 %5182, -16
  br label %5197

5197:                                             ; preds = %5188, %5184, %5169
  %5198 = phi i32 [ %5196, %5188 ], [ %5182, %5184 ], [ %5182, %5169 ]
  %5199 = phi i32 [ %5195, %5188 ], [ %5181, %5184 ], [ %5181, %5169 ]
  store i32 %5198, i32* %2950, align 4
  %5200 = add nsw i32 %5180, -1
  %5201 = zext i8 %5175 to i32
  %5202 = mul nsw i32 %5200, %5201
  %5203 = ashr i32 %5202, 8
  %5204 = add nsw i32 %5203, 1
  %5205 = shl i32 %5204, 16
  %5206 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %5205, i32 %5204, i32 %5199, i32 0, i32 %5180, i32 %5199) #8, !srcloc !2
  %5207 = extractvalue { i32, i32, i32 } %5206, 0
  %5208 = extractvalue { i32, i32, i32 } %5206, 1
  %5209 = extractvalue { i32, i32, i32 } %5206, 2
  store i32 %5208, i32* %2955, align 8
  store i32 %5209, i32* %2956, align 8
  %5210 = sext i32 %5207 to i64
  %5211 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @vp8_pred4x4_tree, i64 0, i64 %5173, i64 %5210
  %5212 = load i8, i8* %5211, align 1
  %5213 = sext i8 %5212 to i64
  %5214 = icmp sgt i8 %5212, 0
  br i1 %5214, label %5169, label %5215

5215:                                             ; preds = %5197
  %5216 = sub i8 0, %5212
  %5217 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 6, i64 %5165
  store i8 %5216, i8* %5217, align 1
  %5218 = add nuw nsw i64 %5165, 1
  %5219 = icmp eq i64 %5218, 16
  br i1 %5219, label %5220, label %5164

5220:                                             ; preds = %5215, %5146
  %5221 = load i32, i32* %2955, align 8
  %5222 = load i32, i32* %2950, align 4
  %5223 = load i32, i32* %2956, align 8
  br label %5224

5224:                                             ; preds = %5252, %5220
  %5225 = phi i32 [ %5223, %5220 ], [ %5264, %5252 ]
  %5226 = phi i32 [ %5222, %5220 ], [ %5253, %5252 ]
  %5227 = phi i32 [ %5221, %5220 ], [ %5263, %5252 ]
  %5228 = phi i64 [ 0, %5220 ], [ %5268, %5252 ]
  %5229 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %2932, i64 0, i32 32, i64 0, i32 6, i64 %5228
  %5230 = load i8, i8* %5229, align 1
  %5231 = sext i32 %5227 to i64
  %5232 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %5231
  %5233 = load i8, i8* %5232, align 1
  %5234 = zext i8 %5233 to i32
  %5235 = shl i32 %5227, %5234
  store i32 %5235, i32* %2955, align 8
  %5236 = shl i32 %5225, %5234
  %5237 = add nsw i32 %5226, %5234
  %5238 = icmp sgt i32 %5237, -1
  br i1 %5238, label %5239, label %5252

5239:                                             ; preds = %5224
  %5240 = load i8*, i8** %2949, align 8
  %5241 = load i8*, i8** %2948, align 8
  %5242 = icmp ult i8* %5240, %5241
  br i1 %5242, label %5243, label %5252

5243:                                             ; preds = %5239
  %5244 = getelementptr inbounds i8, i8* %5240, i64 2
  store i8* %5244, i8** %2949, align 8
  %5245 = bitcast i8* %5240 to i16*
  %5246 = load i16, i16* %5245, align 1
  %5247 = call i16 @llvm.bswap.i16(i16 %5246) #7
  %5248 = zext i16 %5247 to i32
  %5249 = shl i32 %5248, %5237
  %5250 = or i32 %5249, %5236
  %5251 = add nsw i32 %5237, -16
  br label %5252

5252:                                             ; preds = %5243, %5239, %5224
  %5253 = phi i32 [ %5251, %5243 ], [ %5237, %5239 ], [ %5237, %5224 ]
  %5254 = phi i32 [ %5250, %5243 ], [ %5236, %5239 ], [ %5236, %5224 ]
  store i32 %5253, i32* %2950, align 4
  %5255 = add nsw i32 %5235, -1
  %5256 = zext i8 %5230 to i32
  %5257 = mul nsw i32 %5255, %5256
  %5258 = ashr i32 %5257, 8
  %5259 = add nsw i32 %5258, 1
  %5260 = shl i32 %5259, 16
  %5261 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %5260, i32 %5259, i32 %5254, i32 0, i32 %5235, i32 %5254) #8, !srcloc !2
  %5262 = extractvalue { i32, i32, i32 } %5261, 0
  %5263 = extractvalue { i32, i32, i32 } %5261, 1
  %5264 = extractvalue { i32, i32, i32 } %5261, 2
  store i32 %5263, i32* %2955, align 8
  store i32 %5264, i32* %2956, align 8
  %5265 = sext i32 %5262 to i64
  %5266 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @vp8_pred8x8c_tree, i64 0, i64 %5228, i64 %5265
  %5267 = load i8, i8* %5266, align 1
  %5268 = sext i8 %5267 to i64
  %5269 = icmp sgt i8 %5267, 0
  br i1 %5269, label %5224, label %5270

5270:                                             ; preds = %5252
  %5271 = sub i8 0, %5267
  %5272 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 4
  store i8 %5271, i8* %5272, align 4
  %5273 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 2
  store i8 0, i8* %5273, align 2
  %5274 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 3
  store i8 4, i8* %5274, align 1
  %5275 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 0, i32 10, i64 0
  %5276 = bitcast %struct.VP56mv* %5275 to i32*
  store i32 0, i32* %5276, align 4
  br label %5277

5277:                                             ; preds = %5270, %5098, %3408
  %5278 = load i32, i32* %2945, align 4
  %5279 = add nsw i32 %5278, -64
  store i32 %5279, i32* %2945, align 4
  %5280 = load i32, i32* %2946, align 4
  %5281 = add nsw i32 %5280, -64
  store i32 %5281, i32* %2946, align 4
  %5282 = add nuw nsw i64 %3021, 1
  %5283 = add nsw i64 %3022, 1
  %5284 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %3024, i64 1
  %5285 = load i16, i16* %2942, align 8
  %5286 = zext i16 %5285 to i64
  %5287 = icmp ult i64 %5282, %5286
  br i1 %5287, label %3020, label %5288

5288:                                             ; preds = %5277
  %5289 = load i32, i32* %2933, align 4
  %5290 = load i32, i32* %2938, align 4
  %5291 = load i16, i16* %2934, align 2
  br label %5292

5292:                                             ; preds = %5288, %3000
  %5293 = phi i16 [ %5291, %5288 ], [ %3001, %3000 ]
  %5294 = phi i32 [ %5290, %5288 ], [ %3002, %3000 ]
  %5295 = phi i32 [ %5289, %5288 ], [ %3003, %3000 ]
  %5296 = phi i16 [ %5285, %5288 ], [ 0, %3000 ]
  %5297 = add nsw i32 %5295, -64
  store i32 %5297, i32* %2933, align 4
  %5298 = add nsw i32 %5294, -64
  store i32 %5298, i32* %2938, align 4
  %5299 = zext i16 %5293 to i32
  %5300 = icmp ult i32 %3008, %5299
  br i1 %5300, label %3000, label %5301

5301:                                             ; preds = %5292, %2931, %2915, %2905
  %5302 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 148
  %5303 = load i32, i32* %5302, align 8
  %5304 = icmp eq i32 %5303, 1
  br i1 %5304, label %5311, label %5305

5305:                                             ; preds = %5301
  %5306 = load i32, i32* %1133, align 4
  %5307 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 146
  %5308 = load i32, i32* %5307, align 8
  %5309 = icmp sgt i32 %5306, %5308
  %5310 = select i1 %5309, i32 %5308, i32 %5306
  br label %5311

5311:                                             ; preds = %5305, %5301
  %5312 = phi i32 [ %5310, %5305 ], [ 1, %5301 ]
  %5313 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 49
  store i32 %5312, i32* %5313, align 4
  %5314 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 6
  store %struct.VP8Frame* %2678, %struct.VP8Frame** %5314, align 8
  %5315 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 7
  store %struct.VP8Frame* %2590, %struct.VP8Frame** %5315, align 8
  %5316 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 16, i32 0, i32 1
  store i32 -64, i32* %5316, align 4
  %5317 = load i16, i16* %2777, align 2
  %5318 = zext i16 %5317 to i32
  %5319 = shl nuw nsw i32 %5318, 6
  %5320 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 16, i32 1, i32 1
  store i32 %5319, i32* %5320, align 4
  %5321 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 0
  %5322 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5323 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5322, i64 0, i32 7
  store i32 0, i32* %5323, align 4
  %5324 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5322, i64 0, i32 8
  store i32 2147483647, i32* %5324, align 4
  %5325 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5326 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5325, i64 1, i32 7
  store i32 0, i32* %5326, align 4
  %5327 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5325, i64 1, i32 8
  store i32 2147483647, i32* %5327, align 4
  %5328 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5329 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5328, i64 2, i32 7
  store i32 0, i32* %5329, align 4
  %5330 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5328, i64 2, i32 8
  store i32 2147483647, i32* %5330, align 4
  %5331 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5332 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5331, i64 3, i32 7
  store i32 0, i32* %5332, align 4
  %5333 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5331, i64 3, i32 8
  store i32 2147483647, i32* %5333, align 4
  %5334 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5335 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5334, i64 4, i32 7
  store i32 0, i32* %5335, align 4
  %5336 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5334, i64 4, i32 8
  store i32 2147483647, i32* %5336, align 4
  %5337 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5338 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5337, i64 5, i32 7
  store i32 0, i32* %5338, align 4
  %5339 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5337, i64 5, i32 8
  store i32 2147483647, i32* %5339, align 4
  %5340 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5341 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5340, i64 6, i32 7
  store i32 0, i32* %5341, align 4
  %5342 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5340, i64 6, i32 8
  store i32 2147483647, i32* %5342, align 4
  %5343 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %5321, align 8
  %5344 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5343, i64 7, i32 7
  store i32 0, i32* %5344, align 4
  %5345 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %5343, i64 7, i32 8
  store i32 2147483647, i32* %5345, align 4
  %5346 = bitcast %struct.VP8Context* %11 to i8**
  %5347 = load i8*, i8** %5346, align 8
  %5348 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 151
  %5349 = load i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)** %5348, align 8
  %5350 = call i32 %5349(%struct.AVCodecContext* %0, i32 (%struct.AVCodecContext*, i8*, i32, i32)* nonnull @vp8_decode_mb_row_sliced, i8* %5347, i32* null, i32 %5312) #7
  br label %5351

5351:                                             ; preds = %5311, %2862
  call void @ff_thread_report_progress(%struct.ThreadFrame* %2762, i32 2147483647, i32 0) #7
  %5352 = bitcast [4 x %struct.VP8Frame*]* %2588 to i8*
  %5353 = bitcast %struct.VP8Frame** %2836 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5352, i8* align 8 %5353, i64 32, i1 false) #7
  br label %5354

5354:                                             ; preds = %5351, %2611
  %5355 = phi %struct.VP8Frame* [ inttoptr (i64 -6148914691236517206 to %struct.VP8Frame*), %2611 ], [ %2678, %5351 ]
  %5356 = load i32, i32* %1694, align 8
  %5357 = icmp eq i32 %5356, 0
  br i1 %5357, label %5358, label %5361

5358:                                             ; preds = %5354
  %5359 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 0, i32 0, i64 0
  %5360 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 32, i64 1, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5359, i8* align 4 %5360, i64 2180, i1 false) #7
  br label %5361

5361:                                             ; preds = %5358, %5354
  %5362 = load i32, i32* %40, align 8
  %5363 = icmp eq i32 %5362, 0
  br i1 %5363, label %5364, label %5371

5364:                                             ; preds = %5361
  %5365 = bitcast i8* %1 to %struct.AVFrame*
  %5366 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5355, i64 0, i32 0, i32 0
  %5367 = load %struct.AVFrame*, %struct.AVFrame** %5366, align 8
  %5368 = call i32 @av_frame_ref(%struct.AVFrame* %5365, %struct.AVFrame* %5367) #7
  %5369 = icmp slt i32 %5368, 0
  br i1 %5369, label %5379, label %5370

5370:                                             ; preds = %5364
  store i32 1, i32* %2, align 4
  br label %5371

5371:                                             ; preds = %5370, %5361
  %5372 = load i32, i32* %13, align 8
  br label %5379

5373:                                             ; preds = %3036, %2862, %2854, %2847, %2803, %2760, %2758, %2579, %1323, %1309, %1213, %1196, %1138, %157, %94, %75, %25
  %5374 = phi i32 [ %2852, %2847 ], [ %2860, %2854 ], [ %2866, %2862 ], [ -1094995529, %2758 ], [ -22, %2579 ], [ -12, %2803 ], [ %2771, %2760 ], [ -12, %1323 ], [ -12, %1309 ], [ %1198, %1196 ], [ -22, %1213 ], [ %162, %157 ], [ -1094995529, %1138 ], [ -1094995529, %94 ], [ -1094995529, %75 ], [ -1094995529, %25 ], [ -1094995529, %3036 ]
  %5375 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 5, i64 0
  %5376 = bitcast %struct.VP8Frame** %5375 to i8*
  %5377 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %11, i64 0, i32 4, i64 0
  %5378 = bitcast %struct.VP8Frame** %5377 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5376, i8* align 8 %5378, i64 32, i1 false) #7
  br label %5379

5379:                                             ; preds = %5364, %5371, %5373
  %5380 = phi i32 [ %5374, %5373 ], [ %5372, %5371 ], [ %5368, %5364 ]
  ret i32 %5380
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_vp8_decode_free(%struct.AVCodecContext* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.VP8Context**
  %4 = load %struct.VP8Context*, %struct.VP8Context** %3, align 8
  %5 = icmp eq %struct.VP8Context* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  tail call fastcc void @vp8_decode_flush_impl(%struct.AVCodecContext* %0, i32 1)
  br label %7

7:                                                ; preds = %7, %6
  %8 = phi i64 [ 0, %6 ], [ %10, %7 ]
  %9 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 %8, i32 0, i32 0
  tail call void @av_frame_free(%struct.AVFrame** %9) #7
  %10 = add nuw nsw i64 %8, 1
  %11 = icmp eq i64 %10, 5
  br i1 %11, label %12, label %7

12:                                               ; preds = %7, %1
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vp8_decode_flush_impl(%struct.AVCodecContext* nocapture readonly, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %4 = bitcast i8** %3 to %struct.VP8Context**
  %5 = load %struct.VP8Context*, %struct.VP8Context** %4, align 8
  %6 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 1
  %7 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 0, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %7) #7
  %8 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 0, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %8) #7
  %9 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 0, i32 3
  store i8* null, i8** %9, align 8
  %10 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8
  %11 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 0, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %10, %struct.ThreadFrame* %11) #7
  %12 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 1, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %12) #7
  %13 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 1, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %13) #7
  %14 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 1, i32 3
  store i8* null, i8** %14, align 8
  %15 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8
  %16 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 1, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %15, %struct.ThreadFrame* %16) #7
  %17 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 2, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %17) #7
  %18 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 2, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %18) #7
  %19 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 2, i32 3
  store i8* null, i8** %19, align 8
  %20 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8
  %21 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 2, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %20, %struct.ThreadFrame* %21) #7
  %22 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 3, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %22) #7
  %23 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 3, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %23) #7
  %24 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 3, i32 3
  store i8* null, i8** %24, align 8
  %25 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8
  %26 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 3, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %25, %struct.ThreadFrame* %26) #7
  %27 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 4, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %27) #7
  %28 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 4, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %28) #7
  %29 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 4, i32 3
  store i8* null, i8** %29, align 8
  %30 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8
  %31 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 4, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %30, %struct.ThreadFrame* %31) #7
  %32 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 4, i64 0
  %33 = bitcast %struct.VP8Frame** %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 32, i1 false)
  %34 = icmp eq i32 %1, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %2
  tail call fastcc void @free_buffers(%struct.VP8Context* %5)
  br label %36

36:                                               ; preds = %2, %35
  ret void
}

declare void @av_frame_free(%struct.AVFrame**) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_vp8_decode_init(%struct.AVCodecContext*) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.VP8Context**
  %4 = load %struct.VP8Context*, %struct.VP8Context** %3, align 8
  %5 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 1
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %5, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %7 = load %struct.AVCodec*, %struct.AVCodec** %6, align 8
  %8 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 179
  %11 = zext i1 %10 to i32
  %12 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 53
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 2
  store i32 -1, i32* %13, align 8
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 42
  tail call void @ff_videodsp_init(%struct.VideoDSPContext* %15, i32 8) #7
  %16 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 43
  tail call void @ff_vp78dsp_init(%struct.VP8DSPContext* %16) #7
  %17 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 44
  tail call void @ff_h264_pred_init(%struct.H264PredContext* %17, i32 139, i32 8, i32 1) #7
  tail call void @ff_vp8dsp_init(%struct.VP8DSPContext* %16) #7
  %18 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 51
  store i32 (%struct.AVCodecContext*, i8*, i32, i32)* @vp8_decode_mb_row_no_filter, i32 (%struct.AVCodecContext*, i8*, i32, i32)** %18, align 8
  %19 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 52
  store void (%struct.AVCodecContext*, i8*, i32, i32)* @vp8_filter_mb_row, void (%struct.AVCodecContext*, i8*, i32, i32)** %19, align 8
  %20 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 32, i64 0, i32 9, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @ff_zigzag_scan, i64 0, i64 0), i64 16, i1 false) #7
  %21 = tail call %struct.AVFrame* @av_frame_alloc() #7
  %22 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 0, i32 0, i32 0
  store %struct.AVFrame* %21, %struct.AVFrame** %22, align 8
  %23 = icmp eq %struct.AVFrame* %21, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %1
  %25 = tail call %struct.AVFrame* @av_frame_alloc() #7
  %26 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 1, i32 0, i32 0
  store %struct.AVFrame* %25, %struct.AVFrame** %26, align 8
  %27 = icmp eq %struct.AVFrame* %25, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %38, %34, %30, %24, %1
  %29 = tail call i32 @ff_vp8_decode_free(%struct.AVCodecContext* %0) #10
  br label %42

30:                                               ; preds = %24
  %31 = tail call %struct.AVFrame* @av_frame_alloc() #7
  %32 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 2, i32 0, i32 0
  store %struct.AVFrame* %31, %struct.AVFrame** %32, align 8
  %33 = icmp eq %struct.AVFrame* %31, null
  br i1 %33, label %28, label %34

34:                                               ; preds = %30
  %35 = tail call %struct.AVFrame* @av_frame_alloc() #7
  %36 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 3, i32 0, i32 0
  store %struct.AVFrame* %35, %struct.AVFrame** %36, align 8
  %37 = icmp eq %struct.AVFrame* %35, null
  br i1 %37, label %28, label %38

38:                                               ; preds = %34
  %39 = tail call %struct.AVFrame* @av_frame_alloc() #7
  %40 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %4, i64 0, i32 46, i64 4, i32 0, i32 0
  store %struct.AVFrame* %39, %struct.AVFrame** %40, align 8
  %41 = icmp eq %struct.AVFrame* %39, null
  br i1 %41, label %28, label %42

42:                                               ; preds = %28, %38
  %43 = phi i32 [ -12, %28 ], [ 0, %38 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_decode_update_thread_context(%struct.AVCodecContext* nocapture readonly, %struct.AVCodecContext* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %4 = bitcast i8** %3 to %struct.VP8Context**
  %5 = load %struct.VP8Context*, %struct.VP8Context** %4, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 6
  %7 = bitcast i8** %6 to %struct.VP8Context**
  %8 = load %struct.VP8Context*, %struct.VP8Context** %7, align 8
  %9 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 33
  %10 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %9, align 8
  %11 = icmp eq %struct.VP8Macroblock* %10, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 8
  %14 = load i16, i16* %13, align 8
  %15 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 8
  %16 = load i16, i16* %15, align 8
  %17 = icmp eq i16 %14, %16
  br i1 %17, label %18, label %24

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 9
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 9
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %20, %22
  br i1 %23, label %29, label %24

24:                                               ; preds = %18, %12
  tail call fastcc void @free_buffers(%struct.VP8Context* %5)
  %25 = load i16, i16* %13, align 8
  store i16 %25, i16* %15, align 8
  %26 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 9
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 9
  store i16 %27, i16* %28, align 2
  br label %29

29:                                               ; preds = %18, %2, %24
  %30 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 2
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 38
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  %36 = zext i1 %35 to i64
  %37 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 32, i64 0, i32 0, i64 0
  %38 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 32, i64 %36, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 2180, i1 false)
  %39 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 19, i32 0
  %40 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 19, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 12, i1 false)
  %41 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 26, i32 0
  %42 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 26, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 14, i1 false)
  %43 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 17, i64 0
  %44 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 17, i64 0
  %45 = bitcast i8* %44 to i32*
  %46 = bitcast i8* %43 to i32*
  %47 = load i32, i32* %45, align 4
  store i32 %47, i32* %46, align 4
  %48 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 1
  br label %49

49:                                               ; preds = %89, %29
  %50 = phi i64 [ 0, %29 ], [ %90, %89 ]
  %51 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 %50
  %52 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %51, i64 0, i32 0, i32 0
  %53 = load %struct.AVFrame*, %struct.AVFrame** %52, align 8
  %54 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %53, i64 0, i32 25, i64 0
  %55 = load %struct.AVBufferRef*, %struct.AVBufferRef** %54, align 8
  %56 = icmp eq %struct.AVBufferRef* %55, null
  br i1 %56, label %89, label %57

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %50, i32 1
  tail call void @av_buffer_unref(%struct.AVBufferRef** %58) #7
  %59 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %50, i32 2
  tail call void @av_buffer_unref(%struct.AVBufferRef** %59) #7
  %60 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %50, i32 3
  store i8* null, i8** %60, align 8
  %61 = load %struct.AVCodecContext*, %struct.AVCodecContext** %48, align 8
  %62 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %50, i32 0
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %61, %struct.ThreadFrame* %62) #7
  %63 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %51, i64 0, i32 0
  %64 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %62, %struct.ThreadFrame* %63) #7
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %145, label %66

66:                                               ; preds = %57
  %67 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 %50, i32 1
  %68 = load %struct.AVBufferRef*, %struct.AVBufferRef** %67, align 8
  %69 = icmp eq %struct.AVBufferRef* %68, null
  br i1 %69, label %75, label %70

70:                                               ; preds = %66
  %71 = tail call %struct.AVBufferRef* @av_buffer_ref(%struct.AVBufferRef* nonnull %68) #7
  store %struct.AVBufferRef* %71, %struct.AVBufferRef** %58, align 8
  %72 = icmp eq %struct.AVBufferRef* %71, null
  br i1 %72, label %73, label %75

73:                                               ; preds = %70
  tail call void @av_buffer_unref(%struct.AVBufferRef** %58) #7
  tail call void @av_buffer_unref(%struct.AVBufferRef** %59) #7
  store i8* null, i8** %60, align 8
  %74 = load %struct.AVCodecContext*, %struct.AVCodecContext** %48, align 8
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %74, %struct.ThreadFrame* %62) #7
  br label %145

75:                                               ; preds = %70, %66
  %76 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 %50, i32 3
  %77 = load i8*, i8** %76, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %89, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 %50, i32 2
  %81 = load %struct.AVBufferRef*, %struct.AVBufferRef** %80, align 8
  %82 = tail call %struct.AVBufferRef* @av_buffer_ref(%struct.AVBufferRef* %81) #7
  store %struct.AVBufferRef* %82, %struct.AVBufferRef** %59, align 8
  %83 = icmp eq %struct.AVBufferRef* %82, null
  br i1 %83, label %145, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %82, i64 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast i8** %60 to i64*
  store i64 %87, i64* %88, align 8
  br label %89

89:                                               ; preds = %75, %84, %49
  %90 = add nuw nsw i64 %50, 1
  %91 = icmp eq i64 %90, 5
  br i1 %91, label %92, label %49

92:                                               ; preds = %89
  %93 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 5, i64 0
  %94 = load %struct.VP8Frame*, %struct.VP8Frame** %93, align 8
  %95 = icmp eq %struct.VP8Frame* %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 0
  %98 = ptrtoint %struct.VP8Frame* %94 to i64
  %99 = ptrtoint %struct.VP8Frame* %97 to i64
  %100 = sub i64 %98, %99
  %101 = sdiv exact i64 %100, 56
  %102 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %101
  br label %103

103:                                              ; preds = %92, %96
  %104 = phi %struct.VP8Frame* [ %102, %96 ], [ null, %92 ]
  %105 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 4, i64 0
  store %struct.VP8Frame* %104, %struct.VP8Frame** %105, align 8
  %106 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 5, i64 1
  %107 = load %struct.VP8Frame*, %struct.VP8Frame** %106, align 8
  %108 = icmp eq %struct.VP8Frame* %107, null
  br i1 %108, label %116, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 0
  %111 = ptrtoint %struct.VP8Frame* %107 to i64
  %112 = ptrtoint %struct.VP8Frame* %110 to i64
  %113 = sub i64 %111, %112
  %114 = sdiv exact i64 %113, 56
  %115 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %114
  br label %116

116:                                              ; preds = %103, %109
  %117 = phi %struct.VP8Frame* [ %115, %109 ], [ null, %103 ]
  %118 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 4, i64 1
  store %struct.VP8Frame* %117, %struct.VP8Frame** %118, align 8
  %119 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 5, i64 2
  %120 = load %struct.VP8Frame*, %struct.VP8Frame** %119, align 8
  %121 = icmp eq %struct.VP8Frame* %120, null
  br i1 %121, label %129, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 0
  %124 = ptrtoint %struct.VP8Frame* %120 to i64
  %125 = ptrtoint %struct.VP8Frame* %123 to i64
  %126 = sub i64 %124, %125
  %127 = sdiv exact i64 %126, 56
  %128 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %127
  br label %129

129:                                              ; preds = %116, %122
  %130 = phi %struct.VP8Frame* [ %128, %122 ], [ null, %116 ]
  %131 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 4, i64 2
  store %struct.VP8Frame* %130, %struct.VP8Frame** %131, align 8
  %132 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 5, i64 3
  %133 = load %struct.VP8Frame*, %struct.VP8Frame** %132, align 8
  %134 = icmp eq %struct.VP8Frame* %133, null
  br i1 %134, label %142, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %8, i64 0, i32 46, i64 0
  %137 = ptrtoint %struct.VP8Frame* %133 to i64
  %138 = ptrtoint %struct.VP8Frame* %136 to i64
  %139 = sub i64 %137, %138
  %140 = sdiv exact i64 %139, 56
  %141 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 46, i64 %140
  br label %142

142:                                              ; preds = %129, %135
  %143 = phi %struct.VP8Frame* [ %141, %135 ], [ null, %129 ]
  %144 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %5, i64 0, i32 4, i64 3
  store %struct.VP8Frame* %143, %struct.VP8Frame** %144, align 8
  br label %145

145:                                              ; preds = %79, %57, %73, %142
  %146 = phi i32 [ 0, %142 ], [ -12, %73 ], [ %64, %57 ], [ -12, %79 ]
  ret i32 %146
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp8_decode_flush(%struct.AVCodecContext* nocapture readonly) #0 {
  tail call fastcc void @vp8_decode_flush_impl(%struct.AVCodecContext* %0, i32 0)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

declare void @ff_thread_finish_setup(%struct.AVCodecContext*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @ff_thread_await_progress(%struct.ThreadFrame*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_decode_mb_row_sliced(%struct.AVCodecContext*, i8*, i32, i32) #0 {
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.VP8Context**
  %7 = load %struct.VP8Context*, %struct.VP8Context** %6, align 8
  %8 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 0
  %9 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %8, align 8
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 6
  %12 = load %struct.VP8Frame*, %struct.VP8Frame** %11, align 8
  %13 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 49
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 4
  store i32 %3, i32* %15, align 4
  %16 = shl nsw i32 %3, 6
  %17 = sub nuw nsw i32 -64, %16
  %18 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 12, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 9
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = shl nuw nsw i32 %21, 6
  %23 = sub nsw i32 %22, %16
  %24 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 12, i32 1, i32 1
  store i32 %23, i32* %24, align 4
  %25 = load i16, i16* %19, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp sgt i32 %26, %2
  br i1 %27, label %28, label %84

28:                                               ; preds = %4
  %29 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 7
  %30 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 51
  %31 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 13
  %32 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 52
  %33 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 148
  %34 = icmp sgt i32 %14, 1
  %35 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 5
  %36 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 6
  %37 = shl nsw i32 %14, 6
  %38 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %12, i64 0, i32 0
  br label %39

39:                                               ; preds = %79, %28
  %40 = phi i32 [ %2, %28 ], [ %80, %79 ]
  %41 = shl i32 %40, 16
  store atomic i32 %41, i32* %29 seq_cst, align 16
  %42 = load i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i32 (%struct.AVCodecContext*, i8*, i32, i32)** %30, align 8
  %43 = tail call i32 %42(%struct.AVCodecContext* %0, i8* %1, i32 %2, i32 %3) #7
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %57

45:                                               ; preds = %39
  %46 = load i16, i16* %19, align 2
  %47 = zext i16 %46 to i32
  %48 = shl nuw i32 %47, 16
  %49 = or i32 %48, 65535
  %50 = load i32, i32* %33, align 8
  %51 = icmp eq i32 %50, 2
  %52 = and i1 %34, %51
  store atomic i32 %49, i32* %29 seq_cst, align 16
  br i1 %52, label %53, label %84

53:                                               ; preds = %45
  %54 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %35) #7
  %55 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %36) #7
  %56 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %35) #7
  br label %84

57:                                               ; preds = %39
  %58 = load i8, i8* %31, align 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = load void (%struct.AVCodecContext*, i8*, i32, i32)*, void (%struct.AVCodecContext*, i8*, i32, i32)** %32, align 8
  tail call void %61(%struct.AVCodecContext* %0, i8* %1, i32 %2, i32 %3) #7
  br label %62

62:                                               ; preds = %60, %57
  %63 = or i32 %41, 65535
  %64 = load i32, i32* %33, align 8
  %65 = icmp eq i32 %64, 2
  %66 = and i1 %34, %65
  store atomic i32 %63, i32* %29 seq_cst, align 16
  br i1 %66, label %67, label %71

67:                                               ; preds = %62
  %68 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %35) #7
  %69 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %36) #7
  %70 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %35) #7
  br label %71

71:                                               ; preds = %67, %62
  %72 = load i32, i32* %18, align 4
  %73 = sub nsw i32 %72, %37
  store i32 %73, i32* %18, align 4
  %74 = load i32, i32* %24, align 4
  %75 = sub nsw i32 %74, %37
  store i32 %75, i32* %24, align 4
  %76 = load i32, i32* %33, align 8
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %71
  tail call void @ff_thread_report_progress(%struct.ThreadFrame* %38, i32 %40, i32 0) #7
  br label %79

79:                                               ; preds = %78, %71
  %80 = add nsw i32 %40, %14
  %81 = load i16, i16* %19, align 2
  %82 = zext i16 %81 to i32
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %39, label %84

84:                                               ; preds = %79, %4, %45, %53
  %85 = phi i32 [ %43, %53 ], [ %43, %45 ], [ 0, %4 ], [ 0, %79 ]
  ret i32 %85
}

declare void @ff_thread_report_progress(%struct.ThreadFrame*, i32, i32) local_unnamed_addr #3

declare i32 @av_frame_ref(%struct.AVFrame*, %struct.AVFrame*) local_unnamed_addr #3

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #3

declare i32 @ff_vp56_init_range_decoder(%struct.VP56RangeCoder*, i8*, i32) local_unnamed_addr #3

declare i32 @ff_set_dimensions(%struct.AVCodecContext*, i32, i32) local_unnamed_addr #3

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @free_buffers(%struct.VP8Context*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 0
  %3 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %4 = icmp eq %struct.VP8ThreadData* %3, null
  br i1 %4, label %77, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %3, i64 0, i32 6
  %7 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %6) #7
  %8 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %9 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %8, i64 0, i32 5
  %10 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %9) #7
  %11 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %12 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %11, i64 0, i32 11
  %13 = bitcast %struct.VP8FilterStrength** %12 to i8*
  tail call void @av_freep(i8* %13) #7
  %14 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %15 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %14, i64 1, i32 6
  %16 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %15) #7
  %17 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %18 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %17, i64 1, i32 5
  %19 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %18) #7
  %20 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %21 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %20, i64 1, i32 11
  %22 = bitcast %struct.VP8FilterStrength** %21 to i8*
  tail call void @av_freep(i8* %22) #7
  %23 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %24 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %23, i64 2, i32 6
  %25 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %24) #7
  %26 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %27 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %26, i64 2, i32 5
  %28 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %27) #7
  %29 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %30 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %29, i64 2, i32 11
  %31 = bitcast %struct.VP8FilterStrength** %30 to i8*
  tail call void @av_freep(i8* %31) #7
  %32 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %33 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %32, i64 3, i32 6
  %34 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %33) #7
  %35 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %36 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %35, i64 3, i32 5
  %37 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %36) #7
  %38 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %39 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %38, i64 3, i32 11
  %40 = bitcast %struct.VP8FilterStrength** %39 to i8*
  tail call void @av_freep(i8* %40) #7
  %41 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %42 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %41, i64 4, i32 6
  %43 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %42) #7
  %44 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %45 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %44, i64 4, i32 5
  %46 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %45) #7
  %47 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %48 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %47, i64 4, i32 11
  %49 = bitcast %struct.VP8FilterStrength** %48 to i8*
  tail call void @av_freep(i8* %49) #7
  %50 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %51 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %50, i64 5, i32 6
  %52 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %51) #7
  %53 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %54 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %53, i64 5, i32 5
  %55 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %54) #7
  %56 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %57 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %56, i64 5, i32 11
  %58 = bitcast %struct.VP8FilterStrength** %57 to i8*
  tail call void @av_freep(i8* %58) #7
  %59 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %60 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %59, i64 6, i32 6
  %61 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %60) #7
  %62 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %63 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %62, i64 6, i32 5
  %64 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %63) #7
  %65 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %66 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %65, i64 6, i32 11
  %67 = bitcast %struct.VP8FilterStrength** %66 to i8*
  tail call void @av_freep(i8* %67) #7
  %68 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %69 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %68, i64 7, i32 6
  %70 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %69) #7
  %71 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %72 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %71, i64 7, i32 5
  %73 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %72) #7
  %74 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %2, align 8
  %75 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %74, i64 7, i32 11
  %76 = bitcast %struct.VP8FilterStrength** %75 to i8*
  tail call void @av_freep(i8* %76) #7
  br label %77

77:                                               ; preds = %5, %1
  %78 = bitcast %struct.VP8Context* %0 to i8*
  tail call void @av_freep(i8* %78) #7
  %79 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 33
  %80 = bitcast %struct.VP8Macroblock** %79 to i8*
  tail call void @av_freep(i8* %80) #7
  %81 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 22
  %82 = bitcast i8** %81 to i8*
  tail call void @av_freep(i8* %82) #7
  %83 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 28
  %84 = bitcast [9 x i8]** %83 to i8*
  tail call void @av_freep(i8* %84) #7
  %85 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 27
  %86 = bitcast [32 x i8]** %85 to i8*
  tail call void @av_freep(i8* %86) #7
  %87 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 21
  store %struct.VP8Macroblock* null, %struct.VP8Macroblock** %87, align 8
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #4

declare void @av_freep(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @vp8_rac_get_sint(%struct.VP56RangeCoder* nocapture, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %4, %8
  store i32 %13, i32* %3, align 8
  %14 = shl i32 %12, %8
  %15 = add nsw i32 %10, %8
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %17, label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ult i8* %19, %21
  br i1 %22, label %23, label %32

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %24, i8** %18, align 8
  %25 = bitcast i8* %19 to i16*
  %26 = load i16, i16* %25, align 1
  %27 = tail call i16 @llvm.bswap.i16(i16 %26) #7
  %28 = zext i16 %27 to i32
  %29 = shl i32 %28, %15
  %30 = or i32 %29, %14
  %31 = add nsw i32 %15, -16
  br label %32

32:                                               ; preds = %2, %17, %23
  %33 = phi i32 [ %31, %23 ], [ %15, %17 ], [ %15, %2 ]
  %34 = phi i32 [ %30, %23 ], [ %14, %17 ], [ %14, %2 ]
  store i32 %33, i32* %9, align 4
  %35 = shl i32 %13, 7
  %36 = add i32 %35, -128
  %37 = ashr i32 %36, 8
  %38 = add nsw i32 %37, 1
  %39 = shl i32 %38, 16
  %40 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %39, i32 %38, i32 %34, i32 0, i32 %13, i32 %34) #8, !srcloc !2
  %41 = extractvalue { i32, i32, i32 } %40, 0
  %42 = extractvalue { i32, i32, i32 } %40, 1
  %43 = extractvalue { i32, i32, i32 } %40, 2
  store i32 %42, i32* %3, align 8
  store i32 %43, i32* %11, align 8
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %136, label %45

45:                                               ; preds = %32
  %46 = icmp eq i32 %1, 0
  br i1 %46, label %93, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %49 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  br label %50

50:                                               ; preds = %79, %47
  %51 = phi i32 [ %43, %47 ], [ %90, %79 ]
  %52 = phi i32 [ %33, %47 ], [ %80, %79 ]
  %53 = phi i32 [ %42, %47 ], [ %89, %79 ]
  %54 = phi i32 [ 0, %47 ], [ %91, %79 ]
  %55 = phi i32 [ %1, %47 ], [ %56, %79 ]
  %56 = add nsw i32 %55, -1
  %57 = shl i32 %54, 1
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl i32 %53, %61
  store i32 %62, i32* %3, align 8
  %63 = shl i32 %51, %61
  %64 = add nsw i32 %52, %61
  %65 = icmp sgt i32 %64, -1
  br i1 %65, label %66, label %79

66:                                               ; preds = %50
  %67 = load i8*, i8** %48, align 8
  %68 = load i8*, i8** %49, align 8
  %69 = icmp ult i8* %67, %68
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = getelementptr inbounds i8, i8* %67, i64 2
  store i8* %71, i8** %48, align 8
  %72 = bitcast i8* %67 to i16*
  %73 = load i16, i16* %72, align 1
  %74 = tail call i16 @llvm.bswap.i16(i16 %73) #7
  %75 = zext i16 %74 to i32
  %76 = shl i32 %75, %64
  %77 = or i32 %76, %63
  %78 = add nsw i32 %64, -16
  br label %79

79:                                               ; preds = %70, %66, %50
  %80 = phi i32 [ %78, %70 ], [ %64, %66 ], [ %64, %50 ]
  %81 = phi i32 [ %77, %70 ], [ %63, %66 ], [ %63, %50 ]
  store i32 %80, i32* %9, align 4
  %82 = shl i32 %62, 7
  %83 = add i32 %82, -128
  %84 = ashr i32 %83, 8
  %85 = add nsw i32 %84, 1
  %86 = shl i32 %85, 16
  %87 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %86, i32 %85, i32 %81, i32 0, i32 %62, i32 %81) #8, !srcloc !2
  %88 = extractvalue { i32, i32, i32 } %87, 0
  %89 = extractvalue { i32, i32, i32 } %87, 1
  %90 = extractvalue { i32, i32, i32 } %87, 2
  store i32 %89, i32* %3, align 8
  store i32 %90, i32* %11, align 8
  %91 = or i32 %88, %57
  %92 = icmp eq i32 %56, 0
  br i1 %92, label %93, label %50

93:                                               ; preds = %79, %45
  %94 = phi i32 [ %43, %45 ], [ %90, %79 ]
  %95 = phi i32 [ %33, %45 ], [ %80, %79 ]
  %96 = phi i32 [ %42, %45 ], [ %89, %79 ]
  %97 = phi i32 [ 0, %45 ], [ %91, %79 ]
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl i32 %96, %101
  store i32 %102, i32* %3, align 8
  %103 = shl i32 %94, %101
  %104 = add nsw i32 %95, %101
  %105 = icmp sgt i32 %104, -1
  br i1 %105, label %106, label %121

106:                                              ; preds = %93
  %107 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %110 = load i8*, i8** %109, align 8
  %111 = icmp ult i8* %108, %110
  br i1 %111, label %112, label %121

112:                                              ; preds = %106
  %113 = getelementptr inbounds i8, i8* %108, i64 2
  store i8* %113, i8** %107, align 8
  %114 = bitcast i8* %108 to i16*
  %115 = load i16, i16* %114, align 1
  %116 = tail call i16 @llvm.bswap.i16(i16 %115) #7
  %117 = zext i16 %116 to i32
  %118 = shl i32 %117, %104
  %119 = or i32 %118, %103
  %120 = add nsw i32 %104, -16
  br label %121

121:                                              ; preds = %93, %106, %112
  %122 = phi i32 [ %120, %112 ], [ %104, %106 ], [ %104, %93 ]
  %123 = phi i32 [ %119, %112 ], [ %103, %106 ], [ %103, %93 ]
  store i32 %122, i32* %9, align 4
  %124 = shl i32 %102, 7
  %125 = add i32 %124, -128
  %126 = ashr i32 %125, 8
  %127 = add nsw i32 %126, 1
  %128 = shl i32 %127, 16
  %129 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %128, i32 %127, i32 %123, i32 0, i32 %102, i32 %123) #8, !srcloc !2
  %130 = extractvalue { i32, i32, i32 } %129, 0
  %131 = extractvalue { i32, i32, i32 } %129, 1
  %132 = extractvalue { i32, i32, i32 } %129, 2
  store i32 %131, i32* %3, align 8
  store i32 %132, i32* %11, align 8
  %133 = icmp eq i32 %130, 0
  %134 = sub nsw i32 0, %97
  %135 = select i1 %133, i32 %97, i32 %134
  br label %136

136:                                              ; preds = %32, %121
  %137 = phi i32 [ %135, %121 ], [ 0, %32 ]
  ret i32 %137
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ref_to_update(%struct.VP8Context* nocapture, i32, i32) unnamed_addr #0 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %5, label %60

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 29, i32 0
  %7 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 29, i32 1
  %8 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 29, i32 4
  %9 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 29, i32 2
  %10 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %0, i64 0, i32 29, i32 3
  %11 = load i32, i32* %6, align 8
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 8
  %14 = sext i32 %11 to i64
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 %11, %17
  store i32 %18, i32* %6, align 8
  %19 = shl i32 %13, %17
  %20 = add nsw i32 %12, %17
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %22, label %35

22:                                               ; preds = %5
  %23 = load i8*, i8** %9, align 8
  %24 = load i8*, i8** %10, align 8
  %25 = icmp ult i8* %23, %24
  br i1 %25, label %26, label %35

26:                                               ; preds = %22
  %27 = getelementptr inbounds i8, i8* %23, i64 2
  store i8* %27, i8** %9, align 8
  %28 = bitcast i8* %23 to i16*
  %29 = load i16, i16* %28, align 1
  %30 = tail call i16 @llvm.bswap.i16(i16 %29) #7
  %31 = zext i16 %30 to i32
  %32 = shl i32 %31, %20
  %33 = or i32 %32, %19
  %34 = add nsw i32 %20, -16
  br label %35

35:                                               ; preds = %26, %22, %5
  %36 = phi i32 [ %34, %26 ], [ %20, %22 ], [ %20, %5 ]
  %37 = phi i32 [ %33, %26 ], [ %19, %22 ], [ %19, %5 ]
  store i32 %36, i32* %7, align 4
  %38 = shl i32 %18, 7
  %39 = add i32 %38, -128
  %40 = ashr i32 %39, 8
  %41 = add nsw i32 %40, 1
  %42 = shl i32 %41, 16
  %43 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %42, i32 %41, i32 %37, i32 0, i32 %18, i32 %37) #8, !srcloc !2
  %44 = extractvalue { i32, i32, i32 } %43, 0
  %45 = extractvalue { i32, i32, i32 } %43, 1
  %46 = extractvalue { i32, i32, i32 } %43, 2
  store i32 %46, i32* %8, align 8
  %47 = shl i32 %44, 1
  %48 = sext i32 %45 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = shl i32 %45, %51
  store i32 %52, i32* %6, align 8
  %53 = shl i32 %46, %51
  %54 = add nsw i32 %36, %51
  %55 = icmp sgt i32 %54, -1
  br i1 %55, label %62, label %75

56:                                               ; preds = %75
  %57 = icmp eq i32 %2, 2
  %58 = select i1 %57, i32 3, i32 2
  br label %60

59:                                               ; preds = %75
  br label %60

60:                                               ; preds = %75, %3, %59, %56
  %61 = phi i32 [ -1, %59 ], [ %58, %56 ], [ 0, %3 ], [ %87, %75 ]
  ret i32 %61

62:                                               ; preds = %35
  %63 = load i8*, i8** %9, align 8
  %64 = load i8*, i8** %10, align 8
  %65 = icmp ult i8* %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %62
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  store i8* %67, i8** %9, align 8
  %68 = bitcast i8* %63 to i16*
  %69 = load i16, i16* %68, align 1
  %70 = tail call i16 @llvm.bswap.i16(i16 %69) #7
  %71 = zext i16 %70 to i32
  %72 = shl i32 %71, %54
  %73 = or i32 %72, %53
  %74 = add nsw i32 %54, -16
  br label %75

75:                                               ; preds = %66, %62, %35
  %76 = phi i32 [ %74, %66 ], [ %54, %62 ], [ %54, %35 ]
  %77 = phi i32 [ %73, %66 ], [ %53, %62 ], [ %53, %35 ]
  store i32 %76, i32* %7, align 4
  %78 = shl i32 %52, 7
  %79 = add i32 %78, -128
  %80 = ashr i32 %79, 8
  %81 = add nsw i32 %80, 1
  %82 = shl i32 %81, 16
  %83 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %82, i32 %81, i32 %77, i32 0, i32 %52, i32 %77) #8, !srcloc !2
  %84 = extractvalue { i32, i32, i32 } %83, 0
  %85 = extractvalue { i32, i32, i32 } %83, 1
  %86 = extractvalue { i32, i32, i32 } %83, 2
  store i32 %85, i32* %6, align 8
  store i32 %86, i32* %8, align 8
  %87 = or i32 %84, %47
  switch i32 %87, label %59 [
    i32 1, label %60
    i32 2, label %56
  ]
}

declare i32 @ff_get_format(%struct.AVCodecContext*, i32*) local_unnamed_addr #3

declare void @av_buffer_unref(%struct.AVBufferRef**) local_unnamed_addr #3

declare void @ff_thread_release_buffer(%struct.AVCodecContext*, %struct.ThreadFrame*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

declare i32 @ff_thread_get_buffer(%struct.AVCodecContext*, %struct.ThreadFrame*, i32) local_unnamed_addr #3

declare %struct.AVBufferRef* @av_buffer_allocz(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @vp8_read_mv_component(%struct.VP56RangeCoder*, i8* nocapture readonly) unnamed_addr #0 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = shl i32 %6, %10
  store i32 %15, i32* %5, align 8
  %16 = shl i32 %14, %10
  %17 = add nsw i32 %12, %10
  %18 = icmp sgt i32 %17, -1
  br i1 %18, label %19, label %34

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = icmp ult i8* %21, %23
  br i1 %24, label %25, label %34

25:                                               ; preds = %19
  %26 = getelementptr inbounds i8, i8* %21, i64 2
  store i8* %26, i8** %20, align 8
  %27 = bitcast i8* %21 to i16*
  %28 = load i16, i16* %27, align 1
  %29 = tail call i16 @llvm.bswap.i16(i16 %28) #7
  %30 = zext i16 %29 to i32
  %31 = shl i32 %30, %17
  %32 = or i32 %31, %16
  %33 = add nsw i32 %17, -16
  br label %34

34:                                               ; preds = %25, %19, %2
  %35 = phi i32 [ %33, %25 ], [ %17, %19 ], [ %17, %2 ]
  %36 = phi i32 [ %32, %25 ], [ %16, %19 ], [ %16, %2 ]
  store i32 %35, i32* %11, align 4
  %37 = add nsw i32 %15, -1
  %38 = mul nsw i32 %37, %4
  %39 = ashr i32 %38, 8
  %40 = add nsw i32 %39, 1
  %41 = shl i32 %40, 16
  %42 = icmp ult i32 %36, %41
  br i1 %42, label %188, label %43

43:                                               ; preds = %34
  %44 = sub i32 %15, %40
  store i32 %44, i32* %5, align 8
  %45 = sub i32 %36, %41
  store i32 %45, i32* %13, align 8
  %46 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %47 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %48 = getelementptr inbounds i8, i8* %1, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = sext i32 %44 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = shl i32 %44, %53
  store i32 %54, i32* %5, align 8
  %55 = shl i32 %45, %53
  %56 = add nsw i32 %35, %53
  %57 = icmp sgt i32 %56, -1
  br i1 %57, label %58, label %71

58:                                               ; preds = %43
  %59 = load i8*, i8** %46, align 8
  %60 = load i8*, i8** %47, align 8
  %61 = icmp ult i8* %59, %60
  br i1 %61, label %62, label %71

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, i8* %59, i64 2
  store i8* %63, i8** %46, align 8
  %64 = bitcast i8* %59 to i16*
  %65 = load i16, i16* %64, align 1
  %66 = tail call i16 @llvm.bswap.i16(i16 %65) #7
  %67 = zext i16 %66 to i32
  %68 = shl i32 %67, %56
  %69 = or i32 %68, %55
  %70 = add nsw i32 %56, -16
  br label %71

71:                                               ; preds = %62, %58, %43
  %72 = phi i32 [ %70, %62 ], [ %56, %58 ], [ %56, %43 ]
  %73 = phi i32 [ %69, %62 ], [ %55, %58 ], [ %55, %43 ]
  store i32 %72, i32* %11, align 4
  %74 = add nsw i32 %54, -1
  %75 = zext i8 %49 to i32
  %76 = mul nsw i32 %74, %75
  %77 = ashr i32 %76, 8
  %78 = add nsw i32 %77, 1
  %79 = shl i32 %78, 16
  %80 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %79, i32 %78, i32 %73, i32 0, i32 %54, i32 %73) #8, !srcloc !2
  %81 = extractvalue { i32, i32, i32 } %80, 0
  %82 = extractvalue { i32, i32, i32 } %80, 1
  %83 = extractvalue { i32, i32, i32 } %80, 2
  store i32 %82, i32* %5, align 8
  store i32 %83, i32* %13, align 8
  %84 = getelementptr inbounds i8, i8* %1, i64 10
  %85 = load i8, i8* %84, align 1
  %86 = sext i32 %82 to i64
  %87 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl i32 %82, %89
  store i32 %90, i32* %5, align 8
  %91 = shl i32 %83, %89
  %92 = add nsw i32 %72, %89
  %93 = icmp sgt i32 %92, -1
  br i1 %93, label %360, label %373

94:                                               ; preds = %411, %124
  %95 = phi i32 [ %423, %411 ], [ %136, %124 ]
  %96 = phi i32 [ %412, %411 ], [ %125, %124 ]
  %97 = phi i32 [ %422, %411 ], [ %135, %124 ]
  %98 = phi i64 [ 9, %411 ], [ %140, %124 ]
  %99 = phi i32 [ %425, %411 ], [ %139, %124 ]
  %100 = add nuw nsw i64 %98, 9
  %101 = getelementptr inbounds i8, i8* %1, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = sext i32 %97 to i64
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl i32 %97, %106
  store i32 %107, i32* %5, align 8
  %108 = shl i32 %95, %106
  %109 = add nsw i32 %96, %106
  %110 = icmp sgt i32 %109, -1
  br i1 %110, label %111, label %124

111:                                              ; preds = %94
  %112 = load i8*, i8** %46, align 8
  %113 = load i8*, i8** %47, align 8
  %114 = icmp ult i8* %112, %113
  br i1 %114, label %115, label %124

115:                                              ; preds = %111
  %116 = getelementptr inbounds i8, i8* %112, i64 2
  store i8* %116, i8** %46, align 8
  %117 = bitcast i8* %112 to i16*
  %118 = load i16, i16* %117, align 1
  %119 = tail call i16 @llvm.bswap.i16(i16 %118) #7
  %120 = zext i16 %119 to i32
  %121 = shl i32 %120, %109
  %122 = or i32 %121, %108
  %123 = add nsw i32 %109, -16
  br label %124

124:                                              ; preds = %115, %111, %94
  %125 = phi i32 [ %123, %115 ], [ %109, %111 ], [ %109, %94 ]
  %126 = phi i32 [ %122, %115 ], [ %108, %111 ], [ %108, %94 ]
  store i32 %125, i32* %11, align 4
  %127 = add nsw i32 %107, -1
  %128 = zext i8 %102 to i32
  %129 = mul nsw i32 %127, %128
  %130 = ashr i32 %129, 8
  %131 = add nsw i32 %130, 1
  %132 = shl i32 %131, 16
  %133 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %132, i32 %131, i32 %126, i32 0, i32 %107, i32 %126) #8, !srcloc !2
  %134 = extractvalue { i32, i32, i32 } %133, 0
  %135 = extractvalue { i32, i32, i32 } %133, 1
  %136 = extractvalue { i32, i32, i32 } %133, 2
  store i32 %135, i32* %5, align 8
  store i32 %136, i32* %13, align 8
  %137 = trunc i64 %98 to i32
  %138 = shl i32 %134, %137
  %139 = add nsw i32 %138, %99
  %140 = add nsw i64 %98, -1
  %141 = icmp ugt i64 %140, 3
  br i1 %141, label %94, label %142

142:                                              ; preds = %124
  %143 = and i32 %139, 65520
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %183, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds i8, i8* %1, i64 12
  %147 = load i8, i8* %146, align 1
  %148 = sext i32 %135 to i64
  %149 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl i32 %135, %151
  store i32 %152, i32* %5, align 8
  %153 = shl i32 %136, %151
  %154 = add nsw i32 %125, %151
  %155 = icmp sgt i32 %154, -1
  br i1 %155, label %156, label %169

156:                                              ; preds = %145
  %157 = load i8*, i8** %46, align 8
  %158 = load i8*, i8** %47, align 8
  %159 = icmp ult i8* %157, %158
  br i1 %159, label %160, label %169

160:                                              ; preds = %156
  %161 = getelementptr inbounds i8, i8* %157, i64 2
  store i8* %161, i8** %46, align 8
  %162 = bitcast i8* %157 to i16*
  %163 = load i16, i16* %162, align 1
  %164 = tail call i16 @llvm.bswap.i16(i16 %163) #7
  %165 = zext i16 %164 to i32
  %166 = shl i32 %165, %154
  %167 = or i32 %166, %153
  %168 = add nsw i32 %154, -16
  br label %169

169:                                              ; preds = %160, %156, %145
  %170 = phi i32 [ %168, %160 ], [ %154, %156 ], [ %154, %145 ]
  %171 = phi i32 [ %167, %160 ], [ %153, %156 ], [ %153, %145 ]
  store i32 %170, i32* %11, align 4
  %172 = add nsw i32 %152, -1
  %173 = zext i8 %147 to i32
  %174 = mul nsw i32 %172, %173
  %175 = ashr i32 %174, 8
  %176 = add nsw i32 %175, 1
  %177 = shl i32 %176, 16
  %178 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %177, i32 %176, i32 %171, i32 0, i32 %152, i32 %171) #8, !srcloc !2
  %179 = extractvalue { i32, i32, i32 } %178, 0
  %180 = extractvalue { i32, i32, i32 } %178, 1
  %181 = extractvalue { i32, i32, i32 } %178, 2
  store i32 %180, i32* %5, align 8
  store i32 %181, i32* %13, align 8
  %182 = icmp eq i32 %179, 0
  br i1 %182, label %312, label %183

183:                                              ; preds = %169, %142
  %184 = phi i32 [ %181, %169 ], [ %136, %142 ]
  %185 = phi i32 [ %170, %169 ], [ %125, %142 ]
  %186 = phi i32 [ %180, %169 ], [ %135, %142 ]
  %187 = add nsw i32 %139, 8
  br label %312

188:                                              ; preds = %34
  store i32 %40, i32* %5, align 8
  store i32 %36, i32* %13, align 8
  %189 = getelementptr inbounds i8, i8* %1, i64 2
  %190 = load i8, i8* %189, align 1
  %191 = sext i32 %40 to i64
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = shl i32 %40, %194
  store i32 %195, i32* %5, align 8
  %196 = shl i32 %36, %194
  %197 = add nsw i32 %35, %194
  %198 = icmp sgt i32 %197, -1
  br i1 %198, label %199, label %214

199:                                              ; preds = %188
  %200 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %203 = load i8*, i8** %202, align 8
  %204 = icmp ult i8* %201, %203
  br i1 %204, label %205, label %214

205:                                              ; preds = %199
  %206 = getelementptr inbounds i8, i8* %201, i64 2
  store i8* %206, i8** %200, align 8
  %207 = bitcast i8* %201 to i16*
  %208 = load i16, i16* %207, align 1
  %209 = tail call i16 @llvm.bswap.i16(i16 %208) #7
  %210 = zext i16 %209 to i32
  %211 = shl i32 %210, %197
  %212 = or i32 %211, %196
  %213 = add nsw i32 %197, -16
  br label %214

214:                                              ; preds = %205, %199, %188
  %215 = phi i32 [ %213, %205 ], [ %197, %199 ], [ %197, %188 ]
  %216 = phi i32 [ %212, %205 ], [ %196, %199 ], [ %196, %188 ]
  store i32 %215, i32* %11, align 4
  %217 = add nsw i32 %195, -1
  %218 = zext i8 %190 to i32
  %219 = mul nsw i32 %217, %218
  %220 = ashr i32 %219, 8
  %221 = add nsw i32 %220, 1
  %222 = shl i32 %221, 16
  %223 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %222, i32 %221, i32 %216, i32 0, i32 %195, i32 %216) #8, !srcloc !2
  %224 = extractvalue { i32, i32, i32 } %223, 0
  %225 = extractvalue { i32, i32, i32 } %223, 1
  %226 = extractvalue { i32, i32, i32 } %223, 2
  store i32 %225, i32* %5, align 8
  store i32 %226, i32* %13, align 8
  %227 = mul nsw i32 %224, 3
  %228 = add nsw i32 %227, 1
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %189, i64 %229
  %231 = shl i32 %224, 2
  %232 = load i8, i8* %230, align 1
  %233 = sext i32 %225 to i64
  %234 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = shl i32 %225, %236
  store i32 %237, i32* %5, align 8
  %238 = shl i32 %226, %236
  %239 = add nsw i32 %215, %236
  %240 = icmp sgt i32 %239, -1
  br i1 %240, label %241, label %256

241:                                              ; preds = %214
  %242 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %243 = load i8*, i8** %242, align 8
  %244 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %245 = load i8*, i8** %244, align 8
  %246 = icmp ult i8* %243, %245
  br i1 %246, label %247, label %256

247:                                              ; preds = %241
  %248 = getelementptr inbounds i8, i8* %243, i64 2
  store i8* %248, i8** %242, align 8
  %249 = bitcast i8* %243 to i16*
  %250 = load i16, i16* %249, align 1
  %251 = tail call i16 @llvm.bswap.i16(i16 %250) #7
  %252 = zext i16 %251 to i32
  %253 = shl i32 %252, %239
  %254 = or i32 %253, %238
  %255 = add nsw i32 %239, -16
  br label %256

256:                                              ; preds = %247, %241, %214
  %257 = phi i32 [ %255, %247 ], [ %239, %241 ], [ %239, %214 ]
  %258 = phi i32 [ %254, %247 ], [ %238, %241 ], [ %238, %214 ]
  store i32 %257, i32* %11, align 4
  %259 = add nsw i32 %237, -1
  %260 = zext i8 %232 to i32
  %261 = mul nsw i32 %259, %260
  %262 = ashr i32 %261, 8
  %263 = add nsw i32 %262, 1
  %264 = shl i32 %263, 16
  %265 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %264, i32 %263, i32 %258, i32 0, i32 %237, i32 %258) #8, !srcloc !2
  %266 = extractvalue { i32, i32, i32 } %265, 0
  %267 = extractvalue { i32, i32, i32 } %265, 1
  %268 = extractvalue { i32, i32, i32 } %265, 2
  store i32 %267, i32* %5, align 8
  store i32 %268, i32* %13, align 8
  %269 = add nsw i32 %266, 1
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %230, i64 %270
  %272 = shl i32 %266, 1
  %273 = add nsw i32 %272, %231
  %274 = load i8, i8* %271, align 1
  %275 = sext i32 %267 to i64
  %276 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = shl i32 %267, %278
  store i32 %279, i32* %5, align 8
  %280 = shl i32 %268, %278
  %281 = add nsw i32 %257, %278
  %282 = icmp sgt i32 %281, -1
  br i1 %282, label %283, label %298

283:                                              ; preds = %256
  %284 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %285 = load i8*, i8** %284, align 8
  %286 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %287 = load i8*, i8** %286, align 8
  %288 = icmp ult i8* %285, %287
  br i1 %288, label %289, label %298

289:                                              ; preds = %283
  %290 = getelementptr inbounds i8, i8* %285, i64 2
  store i8* %290, i8** %284, align 8
  %291 = bitcast i8* %285 to i16*
  %292 = load i16, i16* %291, align 1
  %293 = tail call i16 @llvm.bswap.i16(i16 %292) #7
  %294 = zext i16 %293 to i32
  %295 = shl i32 %294, %281
  %296 = or i32 %295, %280
  %297 = add nsw i32 %281, -16
  br label %298

298:                                              ; preds = %289, %283, %256
  %299 = phi i32 [ %297, %289 ], [ %281, %283 ], [ %281, %256 ]
  %300 = phi i32 [ %296, %289 ], [ %280, %283 ], [ %280, %256 ]
  store i32 %299, i32* %11, align 4
  %301 = add nsw i32 %279, -1
  %302 = zext i8 %274 to i32
  %303 = mul nsw i32 %301, %302
  %304 = ashr i32 %303, 8
  %305 = add nsw i32 %304, 1
  %306 = shl i32 %305, 16
  %307 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %306, i32 %305, i32 %300, i32 0, i32 %279, i32 %300) #8, !srcloc !2
  %308 = extractvalue { i32, i32, i32 } %307, 0
  %309 = extractvalue { i32, i32, i32 } %307, 1
  %310 = extractvalue { i32, i32, i32 } %307, 2
  store i32 %309, i32* %5, align 8
  store i32 %310, i32* %13, align 8
  %311 = add nsw i32 %273, %308
  br label %312

312:                                              ; preds = %298, %183, %169
  %313 = phi i32 [ %310, %298 ], [ %184, %183 ], [ %181, %169 ]
  %314 = phi i32 [ %299, %298 ], [ %185, %183 ], [ %170, %169 ]
  %315 = phi i32 [ %309, %298 ], [ %186, %183 ], [ %180, %169 ]
  %316 = phi i32 [ %311, %298 ], [ %187, %183 ], [ %139, %169 ]
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %426, label %318

318:                                              ; preds = %312
  %319 = getelementptr inbounds i8, i8* %1, i64 1
  %320 = load i8, i8* %319, align 1
  %321 = sext i32 %315 to i64
  %322 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i32
  %325 = shl i32 %315, %324
  store i32 %325, i32* %5, align 8
  %326 = shl i32 %313, %324
  %327 = add nsw i32 %314, %324
  %328 = icmp sgt i32 %327, -1
  br i1 %328, label %329, label %344

329:                                              ; preds = %318
  %330 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 2
  %331 = load i8*, i8** %330, align 8
  %332 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %0, i64 0, i32 3
  %333 = load i8*, i8** %332, align 8
  %334 = icmp ult i8* %331, %333
  br i1 %334, label %335, label %344

335:                                              ; preds = %329
  %336 = getelementptr inbounds i8, i8* %331, i64 2
  store i8* %336, i8** %330, align 8
  %337 = bitcast i8* %331 to i16*
  %338 = load i16, i16* %337, align 1
  %339 = tail call i16 @llvm.bswap.i16(i16 %338) #7
  %340 = zext i16 %339 to i32
  %341 = shl i32 %340, %327
  %342 = or i32 %341, %326
  %343 = add nsw i32 %327, -16
  br label %344

344:                                              ; preds = %335, %329, %318
  %345 = phi i32 [ %343, %335 ], [ %327, %329 ], [ %327, %318 ]
  %346 = phi i32 [ %342, %335 ], [ %326, %329 ], [ %326, %318 ]
  store i32 %345, i32* %11, align 4
  %347 = add nsw i32 %325, -1
  %348 = zext i8 %320 to i32
  %349 = mul nsw i32 %347, %348
  %350 = ashr i32 %349, 8
  %351 = add nsw i32 %350, 1
  %352 = shl i32 %351, 16
  %353 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %352, i32 %351, i32 %346, i32 0, i32 %325, i32 %346) #8, !srcloc !2
  %354 = extractvalue { i32, i32, i32 } %353, 0
  %355 = extractvalue { i32, i32, i32 } %353, 1
  %356 = extractvalue { i32, i32, i32 } %353, 2
  store i32 %355, i32* %5, align 8
  store i32 %356, i32* %13, align 8
  %357 = icmp eq i32 %354, 0
  %358 = sub nsw i32 0, %316
  %359 = select i1 %357, i32 %316, i32 %358
  br label %426

360:                                              ; preds = %71
  %361 = load i8*, i8** %46, align 8
  %362 = load i8*, i8** %47, align 8
  %363 = icmp ult i8* %361, %362
  br i1 %363, label %364, label %373

364:                                              ; preds = %360
  %365 = getelementptr inbounds i8, i8* %361, i64 2
  store i8* %365, i8** %46, align 8
  %366 = bitcast i8* %361 to i16*
  %367 = load i16, i16* %366, align 1
  %368 = tail call i16 @llvm.bswap.i16(i16 %367) #7
  %369 = zext i16 %368 to i32
  %370 = shl i32 %369, %92
  %371 = or i32 %370, %91
  %372 = add nsw i32 %92, -16
  br label %373

373:                                              ; preds = %364, %360, %71
  %374 = phi i32 [ %372, %364 ], [ %92, %360 ], [ %92, %71 ]
  %375 = phi i32 [ %371, %364 ], [ %91, %360 ], [ %91, %71 ]
  store i32 %374, i32* %11, align 4
  %376 = add nsw i32 %90, -1
  %377 = zext i8 %85 to i32
  %378 = mul nsw i32 %376, %377
  %379 = ashr i32 %378, 8
  %380 = add nsw i32 %379, 1
  %381 = shl i32 %380, 16
  %382 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %381, i32 %380, i32 %375, i32 0, i32 %90, i32 %375) #8, !srcloc !2
  %383 = extractvalue { i32, i32, i32 } %382, 0
  %384 = extractvalue { i32, i32, i32 } %382, 1
  %385 = extractvalue { i32, i32, i32 } %382, 2
  store i32 %384, i32* %5, align 8
  store i32 %385, i32* %13, align 8
  %386 = shl i32 %383, 1
  %387 = add nsw i32 %386, %81
  %388 = getelementptr inbounds i8, i8* %1, i64 11
  %389 = load i8, i8* %388, align 1
  %390 = sext i32 %384 to i64
  %391 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %390
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i32
  %394 = shl i32 %384, %393
  store i32 %394, i32* %5, align 8
  %395 = shl i32 %385, %393
  %396 = add nsw i32 %374, %393
  %397 = icmp sgt i32 %396, -1
  br i1 %397, label %398, label %411

398:                                              ; preds = %373
  %399 = load i8*, i8** %46, align 8
  %400 = load i8*, i8** %47, align 8
  %401 = icmp ult i8* %399, %400
  br i1 %401, label %402, label %411

402:                                              ; preds = %398
  %403 = getelementptr inbounds i8, i8* %399, i64 2
  store i8* %403, i8** %46, align 8
  %404 = bitcast i8* %399 to i16*
  %405 = load i16, i16* %404, align 1
  %406 = tail call i16 @llvm.bswap.i16(i16 %405) #7
  %407 = zext i16 %406 to i32
  %408 = shl i32 %407, %396
  %409 = or i32 %408, %395
  %410 = add nsw i32 %396, -16
  br label %411

411:                                              ; preds = %402, %398, %373
  %412 = phi i32 [ %410, %402 ], [ %396, %398 ], [ %396, %373 ]
  %413 = phi i32 [ %409, %402 ], [ %395, %398 ], [ %395, %373 ]
  store i32 %412, i32* %11, align 4
  %414 = add nsw i32 %394, -1
  %415 = zext i8 %389 to i32
  %416 = mul nsw i32 %414, %415
  %417 = ashr i32 %416, 8
  %418 = add nsw i32 %417, 1
  %419 = shl i32 %418, 16
  %420 = tail call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %419, i32 %418, i32 %413, i32 0, i32 %394, i32 %413) #8, !srcloc !2
  %421 = extractvalue { i32, i32, i32 } %420, 0
  %422 = extractvalue { i32, i32, i32 } %420, 1
  %423 = extractvalue { i32, i32, i32 } %420, 2
  store i32 %422, i32* %5, align 8
  store i32 %423, i32* %13, align 8
  %424 = shl i32 %421, 2
  %425 = add nsw i32 %387, %424
  br label %94

426:                                              ; preds = %312, %344
  %427 = phi i32 [ %359, %344 ], [ 0, %312 ]
  ret i32 %427
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

declare void @ff_videodsp_init(%struct.VideoDSPContext*, i32) local_unnamed_addr #3

declare void @ff_vp78dsp_init(%struct.VP8DSPContext*) local_unnamed_addr #3

declare void @ff_h264_pred_init(%struct.H264PredContext*, i32, i32, i32) local_unnamed_addr #3

declare void @ff_vp8dsp_init(%struct.VP8DSPContext*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_decode_mb_row_no_filter(%struct.AVCodecContext* nocapture readonly, i8* nocapture readnone, i32, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [40 x i8], align 4
  %8 = alloca [4 x %struct.VP56mv], align 16
  %9 = alloca i32, align 4
  %10 = alloca [3 x i8*], align 16
  %11 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %12 = bitcast i8** %11 to %struct.VP8Context**
  %13 = load %struct.VP8Context*, %struct.VP8Context** %12, align 8
  %14 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 0
  %15 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %14, align 8
  %16 = sext i32 %3 to i64
  %17 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16
  %18 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 7
  %19 = load atomic i32, i32* %18 seq_cst, align 16
  %20 = ashr i32 %19, 16
  %21 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 8
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 49
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 6
  %27 = load %struct.VP8Frame*, %struct.VP8Frame** %26, align 8
  %28 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 7
  %29 = load %struct.VP8Frame*, %struct.VP8Frame** %28, align 8
  %30 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 39
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, -1
  %33 = and i32 %32, %20
  %34 = sext i32 %33 to i64
  %35 = bitcast [3 x i8*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #7
  %36 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 0
  %37 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 1
  %38 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 2
  %39 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %27, i64 0, i32 0, i32 0
  %40 = load %struct.AVFrame*, %struct.AVFrame** %39, align 8
  %41 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %40, i64 0, i32 0, i64 0
  %42 = load i8*, i8** %41, align 8
  %43 = shl nsw i32 %20, 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 10
  %46 = load i64, i64* %45, align 8
  %47 = mul nsw i64 %46, %44
  %48 = getelementptr inbounds i8, i8* %42, i64 %47
  store i8* %48, i8** %36, align 16
  %49 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %40, i64 0, i32 0, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = shl nsw i32 %20, 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 11
  %54 = load i64, i64* %53, align 8
  %55 = mul nsw i64 %54, %52
  %56 = getelementptr inbounds i8, i8* %50, i64 %55
  store i8* %56, i8** %37, align 8
  %57 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %40, i64 0, i32 0, i64 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 %55
  store i8* %59, i8** %38, align 16
  %60 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 3
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 2
  %63 = load i8*, i8** %62, align 8
  %64 = icmp ugt i8* %61, %63
  br i1 %64, label %73, label %65

65:                                               ; preds = %4
  %66 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 5
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %70, align 4
  br label %73

73:                                               ; preds = %69, %65, %4
  %74 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %75, 11
  br i1 %76, label %77, label %7637

77:                                               ; preds = %73
  %78 = icmp eq i32 %20, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %77
  %80 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %14, align 8
  %81 = add i32 %25, -1
  %82 = add i32 %81, %2
  %83 = srem i32 %82, %25
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %80, i64 %84
  br label %86

86:                                               ; preds = %79, %77
  %87 = phi %struct.VP8ThreadData* [ %85, %79 ], [ %17, %77 ]
  %88 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 9
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = add nsw i32 %90, -1
  %92 = icmp eq i32 %20, %91
  br i1 %92, label %99, label %93

93:                                               ; preds = %86
  %94 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %14, align 8
  %95 = add nsw i32 %2, 1
  %96 = srem i32 %95, %25
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %94, i64 %97
  br label %99

99:                                               ; preds = %93, %86
  %100 = phi %struct.VP8ThreadData* [ %98, %93 ], [ %17, %86 ]
  %101 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 50
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %113

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 33
  %106 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %105, align 8
  %107 = add nuw nsw i32 %23, 1
  %108 = add nsw i32 %20, 1
  %109 = mul nsw i32 %107, %108
  %110 = add nsw i32 %109, 1
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %106, i64 %111
  br label %140

113:                                              ; preds = %99
  %114 = icmp eq %struct.VP8Frame* %29, null
  br i1 %114, label %127, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 0
  %117 = load i8, i8* %116, align 4
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %127, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 2
  %121 = load i8, i8* %120, align 2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %29, i64 0, i32 0
  tail call void @ff_thread_await_progress(%struct.ThreadFrame* %124, i32 %20, i32 0) #7
  %125 = load i16, i16* %88, align 2
  %126 = zext i16 %125 to i32
  br label %127

127:                                              ; preds = %123, %119, %115, %113
  %128 = phi i32 [ %90, %119 ], [ %90, %115 ], [ %90, %113 ], [ %126, %123 ]
  %129 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 21
  %130 = load %struct.VP8Macroblock*, %struct.VP8Macroblock** %129, align 8
  %131 = xor i32 %20, -1
  %132 = add nsw i32 %128, %131
  %133 = shl nsw i32 %132, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %130, i64 %134
  %136 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %135, i64 -1
  %137 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %136, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 96, i1 false) #7
  %138 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 23, i64 0
  %139 = bitcast i8* %138 to i32*
  store i32 33686018, i32* %139, align 8
  br label %140

140:                                              ; preds = %127, %104
  %141 = phi %struct.VP8Macroblock* [ %112, %104 ], [ %135, %127 ]
  %142 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 3, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 9, i1 false) #7
  %143 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 12, i32 0, i32 0
  store i32 -64, i32* %143, align 8
  %144 = load i16, i16* %21, align 8
  %145 = zext i16 %144 to i32
  %146 = shl nuw nsw i32 %145, 6
  %147 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 12, i32 1, i32 0
  store i32 %146, i32* %147, align 8
  %148 = load i16, i16* %21, align 8
  %149 = icmp eq i16 %148, 0
  br i1 %149, label %7637, label %150

150:                                              ; preds = %140
  %151 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 1
  %152 = icmp ne %struct.VP8ThreadData* %87, %17
  %153 = icmp eq i32 %3, 0
  %154 = add i32 %19, -65536
  %155 = and i32 %154, -65536
  %156 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %87, i64 0, i32 7
  %157 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %87, i64 0, i32 5
  %158 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 8
  %159 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %87, i64 0, i32 6
  %160 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 42, i32 1
  %161 = bitcast i8** %38 to i64*
  %162 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %27, i64 0, i32 1
  %163 = icmp eq %struct.VP8Frame* %29, null
  %164 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %29, i64 0, i32 1
  %165 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 29
  %166 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 2
  %167 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 0, i64 0
  %168 = getelementptr inbounds %struct.VP56RangeCoder, %struct.VP56RangeCoder* %165, i64 0, i32 0
  %169 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 29, i32 1
  %170 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 29, i32 4
  %171 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 29, i32 2
  %172 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 29, i32 3
  %173 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 0
  %174 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 14
  %175 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 1
  %176 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 12
  %177 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 22
  %178 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 23, i64 0
  %179 = bitcast i8* %178 to i32*
  %180 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 2
  %181 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 3
  %182 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 4
  %183 = bitcast i32* %9 to [4 x i8]*
  %184 = bitcast [4 x %struct.VP56mv]* %8 to i8*
  %185 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 1
  %186 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %185, i64 0, i32 0
  %187 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 1, i32 1
  %188 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 2
  %189 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %188, i64 0, i32 0
  %190 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 2, i32 1
  %191 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 3
  %192 = bitcast i32* %9 to i8*
  %193 = bitcast [4 x %struct.VP56mv]* %8 to i32*
  %194 = bitcast %struct.VP56mv* %185 to i32*
  %195 = bitcast %struct.VP56mv* %188 to i32*
  %196 = getelementptr inbounds [4 x i8], [4 x i8]* %183, i64 0, i64 1
  %197 = getelementptr inbounds [4 x i8], [4 x i8]* %183, i64 0, i64 3
  %198 = bitcast %struct.VP56mv* %191 to i32*
  %199 = getelementptr inbounds [4 x i8], [4 x i8]* %183, i64 0, i64 2
  %200 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 2, i32 0
  %201 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 1, i32 0
  %202 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 12, i32 0, i32 1
  %203 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 12, i32 1, i32 1
  %204 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 0
  %205 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 9
  %206 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 10
  %207 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 11
  %208 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 12
  %209 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 2
  %210 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 1
  %211 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 0
  %212 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 9
  %213 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 10
  %214 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 11
  %215 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 12
  %216 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 2
  %217 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 1
  %218 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 18, i64 0
  %219 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 4, i64 1
  %220 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 28
  %221 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 3, i64 8
  %222 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 1, i64 0
  %223 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 0
  %224 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 40, i64 %34, i32 4
  %225 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 1
  %226 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %17, i64 0, i32 0, i64 0
  %227 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 0
  %228 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 42, i32 0
  %229 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 0
  %230 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 0, i64 0
  %231 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 15
  %232 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 0, i64 0
  %233 = or i32 %43, 8
  %234 = add nsw i32 %233, 11
  %235 = ashr i32 %234, 4
  %236 = sext i32 %233 to i64
  %237 = or i32 %51, 4
  %238 = add nsw i32 %237, 7
  %239 = ashr i32 %238, 3
  %240 = sext i32 %237 to i64
  %241 = add nsw i32 %43, 19
  %242 = ashr i32 %241, 4
  %243 = add nsw i32 %51, 11
  %244 = ashr i32 %243, 3
  %245 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 0, i64 0, i64 0
  %246 = bitcast i32* %5 to i8*
  %247 = icmp ne i32 %20, 0
  %248 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 13
  %249 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 4
  %250 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 27
  %251 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 20, i32 0
  %252 = bitcast i32* %6 to i8*
  %253 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 0, i64 0
  %254 = bitcast i8* %253 to %struct.v*
  %255 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 0
  %256 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 12
  %257 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 4
  %258 = bitcast i8* %257 to i32*
  %259 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 3
  %260 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 11
  %261 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 19
  %262 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 27
  %263 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 35
  %264 = bitcast i8* %256 to i32*
  %265 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 20
  %266 = bitcast i8* %265 to i32*
  %267 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 28
  %268 = bitcast i8* %267 to i32*
  %269 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 36
  %270 = bitcast i8* %269 to i32*
  %271 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 3
  %272 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 2
  %273 = select i1 %247, i64 3, i64 1
  %274 = select i1 %247, i64 2, i64 8
  %275 = select i1 %78, i64 7, i64 2
  %276 = select i1 %247, i64 0, i64 4
  %277 = select i1 %247, i64 5, i64 6
  %278 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 18, i64 1
  %279 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 4, i64 2
  %280 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 3
  %281 = bitcast [9 x i8]* %280 to i64*
  %282 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 4
  %283 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 43, i32 5
  %284 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 11
  %285 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 1
  %286 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 20, i32 1
  %287 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 26, i32 0
  %288 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 20, i32 2
  %289 = icmp ne i32 %25, 1
  %290 = add nsw i32 %25, -1
  %291 = icmp eq i32 %290, %3
  %292 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 18, i64 2
  %293 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 4, i64 3
  %294 = and i32 %19, -65536
  %295 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 148
  %296 = icmp sgt i32 %25, 1
  %297 = icmp eq %struct.VP8ThreadData* %100, null
  %298 = icmp eq %struct.VP8ThreadData* %87, null
  %299 = or i1 %298, %297
  %300 = icmp eq %struct.VP8ThreadData* %100, %17
  %301 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %100, i64 0, i32 8
  %302 = xor i1 %152, true
  %303 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %87, i64 0, i32 8
  %304 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 5
  %305 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 6
  %306 = mul nsw i32 %20, %23
  %307 = sext i32 %306 to i64
  %308 = bitcast [3 x i8*]* %10 to <2 x i8*>*
  %309 = bitcast [3 x i8*]* %10 to <2 x i8*>*
  br label %310

310:                                              ; preds = %7630, %150
  %311 = phi i64 [ %307, %150 ], [ %7632, %7630 ]
  %312 = phi i64 [ 0, %150 ], [ %7631, %7630 ]
  %313 = phi i16 [ %148, %150 ], [ %7634, %7630 ]
  %314 = phi %struct.VP8Macroblock* [ %141, %150 ], [ %7633, %7630 ]
  %315 = zext i16 %313 to i32
  %316 = load i8*, i8** %60, align 8
  %317 = load i8*, i8** %62, align 8
  %318 = icmp ugt i8* %316, %317
  br i1 %318, label %325, label %319

319:                                              ; preds = %310
  %320 = load i32, i32* %151, align 4
  %321 = icmp sgt i32 %320, -1
  br i1 %321, label %322, label %325

322:                                              ; preds = %319
  %323 = load i32, i32* %74, align 4
  %324 = add nsw i32 %323, 1
  store i32 %324, i32* %74, align 4
  br label %327

325:                                              ; preds = %319, %310
  %326 = load i32, i32* %74, align 4
  br label %327

327:                                              ; preds = %325, %322
  %328 = phi i32 [ %326, %325 ], [ %324, %322 ]
  %329 = icmp slt i32 %328, 11
  br i1 %329, label %330, label %7637

330:                                              ; preds = %327
  %331 = trunc i64 %312 to i32
  br i1 %152, label %332, label %365

332:                                              ; preds = %330
  br i1 %153, label %348, label %333

333:                                              ; preds = %332
  %334 = add i32 %331, 1
  %335 = or i32 %334, %155
  %336 = load atomic i32, i32* %156 seq_cst, align 16
  %337 = icmp slt i32 %336, %335
  br i1 %337, label %338, label %365

338:                                              ; preds = %333
  %339 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %157) #7
  store atomic i32 %335, i32* %158 seq_cst, align 4
  %340 = load atomic i32, i32* %156 seq_cst, align 16
  %341 = icmp slt i32 %340, %335
  br i1 %341, label %342, label %346

342:                                              ; preds = %338, %342
  %343 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %159, %union.pthread_mutex_t* %157) #7
  %344 = load atomic i32, i32* %156 seq_cst, align 16
  %345 = icmp slt i32 %344, %335
  br i1 %345, label %342, label %346

346:                                              ; preds = %342, %338
  store atomic i32 2147483647, i32* %158 seq_cst, align 4
  %347 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %157) #7
  br label %365

348:                                              ; preds = %332
  %349 = add i32 %331, 4
  %350 = add i32 %349, %315
  %351 = and i32 %350, 65535
  %352 = or i32 %351, %155
  %353 = load atomic i32, i32* %156 seq_cst, align 16
  %354 = icmp slt i32 %353, %352
  br i1 %354, label %355, label %365

355:                                              ; preds = %348
  %356 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %157) #7
  store atomic i32 %352, i32* %158 seq_cst, align 4
  %357 = load atomic i32, i32* %156 seq_cst, align 16
  %358 = icmp slt i32 %357, %352
  br i1 %358, label %359, label %363

359:                                              ; preds = %355, %359
  %360 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %159, %union.pthread_mutex_t* %157) #7
  %361 = load atomic i32, i32* %156 seq_cst, align 16
  %362 = icmp slt i32 %361, %352
  br i1 %362, label %359, label %363

363:                                              ; preds = %359, %355
  store atomic i32 2147483647, i32* %158 seq_cst, align 4
  %364 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %157) #7
  br label %365

365:                                              ; preds = %330, %363, %348, %346, %333
  %366 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %367 = load i8*, i8** %36, align 16
  %368 = shl i64 %312, 2
  %369 = trunc i64 %368 to i32
  %370 = and i32 %369, 12
  %371 = zext i32 %370 to i64
  %372 = load i64, i64* %45, align 8
  %373 = mul nsw i64 %372, %371
  %374 = getelementptr inbounds i8, i8* %367, i64 64
  %375 = getelementptr inbounds i8, i8* %374, i64 %373
  call void %366(i8* %375, i64 %372, i32 4) #7
  %376 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %377 = load i8*, i8** %37, align 8
  %378 = and i32 %331, 7
  %379 = zext i32 %378 to i64
  %380 = load i64, i64* %53, align 8
  %381 = mul nsw i64 %380, %379
  %382 = getelementptr inbounds i8, i8* %377, i64 64
  %383 = getelementptr inbounds i8, i8* %382, i64 %381
  %384 = load i64, i64* %161, align 16
  %385 = ptrtoint i8* %377 to i64
  %386 = sub i64 %384, %385
  call void %376(i8* %383, i64 %386, i32 2) #7
  %387 = load i32, i32* %101, align 8
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %389, label %2590

389:                                              ; preds = %365
  %390 = load %struct.AVBufferRef*, %struct.AVBufferRef** %162, align 8
  %391 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %390, i64 0, i32 1
  %392 = load i8*, i8** %391, align 8
  %393 = getelementptr inbounds i8, i8* %392, i64 %311
  br i1 %163, label %401, label %394

394:                                              ; preds = %389
  %395 = load %struct.AVBufferRef*, %struct.AVBufferRef** %164, align 8
  %396 = icmp eq %struct.AVBufferRef* %395, null
  br i1 %396, label %401, label %397

397:                                              ; preds = %394
  %398 = getelementptr inbounds %struct.AVBufferRef, %struct.AVBufferRef* %395, i64 0, i32 1
  %399 = load i8*, i8** %398, align 8
  %400 = getelementptr inbounds i8, i8* %399, i64 %311
  br label %401

401:                                              ; preds = %397, %394, %389
  %402 = phi i8* [ %400, %397 ], [ null, %394 ], [ null, %389 ]
  %403 = load i8, i8* %166, align 2
  %404 = icmp eq i8 %403, 0
  br i1 %404, label %485, label %405

405:                                              ; preds = %401
  %406 = load i8, i8* %167, align 4
  %407 = load i32, i32* %168, align 8
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = load i32, i32* %169, align 4
  %413 = load i32, i32* %170, align 8
  %414 = shl i32 %407, %411
  store i32 %414, i32* %168, align 8
  %415 = shl i32 %413, %411
  %416 = add nsw i32 %412, %411
  %417 = icmp sgt i32 %416, -1
  br i1 %417, label %418, label %431

418:                                              ; preds = %405
  %419 = load i8*, i8** %171, align 8
  %420 = load i8*, i8** %172, align 8
  %421 = icmp ult i8* %419, %420
  br i1 %421, label %422, label %431

422:                                              ; preds = %418
  %423 = getelementptr inbounds i8, i8* %419, i64 2
  store i8* %423, i8** %171, align 8
  %424 = bitcast i8* %419 to i16*
  %425 = load i16, i16* %424, align 1
  %426 = call i16 @llvm.bswap.i16(i16 %425) #7
  %427 = zext i16 %426 to i32
  %428 = shl i32 %427, %416
  %429 = or i32 %428, %415
  %430 = add nsw i32 %416, -16
  br label %431

431:                                              ; preds = %422, %418, %405
  %432 = phi i32 [ %430, %422 ], [ %416, %418 ], [ %416, %405 ]
  %433 = phi i32 [ %429, %422 ], [ %415, %418 ], [ %415, %405 ]
  store i32 %432, i32* %169, align 4
  %434 = add nsw i32 %414, -1
  %435 = zext i8 %406 to i32
  %436 = mul nsw i32 %434, %435
  %437 = ashr i32 %436, 8
  %438 = add nsw i32 %437, 1
  %439 = shl i32 %438, 16
  %440 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %439, i32 %438, i32 %433, i32 0, i32 %414, i32 %433) #8, !srcloc !2
  %441 = extractvalue { i32, i32, i32 } %440, 0
  %442 = extractvalue { i32, i32, i32 } %440, 1
  %443 = extractvalue { i32, i32, i32 } %440, 2
  store i32 %442, i32* %168, align 8
  store i32 %443, i32* %170, align 8
  %444 = add nsw i32 %441, 1
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 0, i64 %445
  %447 = load i8, i8* %446, align 1
  %448 = sext i32 %442 to i64
  %449 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %448
  %450 = load i8, i8* %449, align 1
  %451 = zext i8 %450 to i32
  %452 = shl i32 %442, %451
  store i32 %452, i32* %168, align 8
  %453 = shl i32 %443, %451
  %454 = add nsw i32 %432, %451
  %455 = icmp sgt i32 %454, -1
  br i1 %455, label %456, label %469

456:                                              ; preds = %431
  %457 = load i8*, i8** %171, align 8
  %458 = load i8*, i8** %172, align 8
  %459 = icmp ult i8* %457, %458
  br i1 %459, label %460, label %469

460:                                              ; preds = %456
  %461 = getelementptr inbounds i8, i8* %457, i64 2
  store i8* %461, i8** %171, align 8
  %462 = bitcast i8* %457 to i16*
  %463 = load i16, i16* %462, align 1
  %464 = call i16 @llvm.bswap.i16(i16 %463) #7
  %465 = zext i16 %464 to i32
  %466 = shl i32 %465, %454
  %467 = or i32 %466, %453
  %468 = add nsw i32 %454, -16
  br label %469

469:                                              ; preds = %460, %456, %431
  %470 = phi i32 [ %468, %460 ], [ %454, %456 ], [ %454, %431 ]
  %471 = phi i32 [ %467, %460 ], [ %453, %456 ], [ %453, %431 ]
  store i32 %470, i32* %169, align 4
  %472 = add nsw i32 %452, -1
  %473 = zext i8 %447 to i32
  %474 = mul nsw i32 %472, %473
  %475 = ashr i32 %474, 8
  %476 = add nsw i32 %475, 1
  %477 = shl i32 %476, 16
  %478 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %477, i32 %476, i32 %471, i32 0, i32 %452, i32 %471) #8, !srcloc !2
  %479 = extractvalue { i32, i32, i32 } %478, 0
  %480 = extractvalue { i32, i32, i32 } %478, 1
  %481 = extractvalue { i32, i32, i32 } %478, 2
  store i32 %480, i32* %168, align 8
  store i32 %481, i32* %170, align 8
  %482 = shl i32 %441, 1
  %483 = add nsw i32 %479, %482
  %484 = trunc i32 %483 to i8
  store i8 %484, i8* %393, align 1
  br label %494

485:                                              ; preds = %401
  %486 = load i8, i8* %173, align 4
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %488, label %490

488:                                              ; preds = %485
  %489 = load i8, i8* %393, align 1
  br label %494

490:                                              ; preds = %485
  %491 = icmp eq i8* %402, null
  %492 = select i1 %491, i8* %393, i8* %402
  %493 = load i8, i8* %492, align 1
  store i8 %493, i8* %393, align 1
  br label %494

494:                                              ; preds = %490, %488, %469
  %495 = phi i8 [ %489, %488 ], [ %484, %469 ], [ %493, %490 ]
  %496 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 5
  store i8 %495, i8* %496, align 1
  %497 = load i8, i8* %174, align 2
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %539, label %499

499:                                              ; preds = %494
  %500 = load i8, i8* %175, align 1
  %501 = load i32, i32* %168, align 8
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = load i32, i32* %169, align 4
  %507 = load i32, i32* %170, align 8
  %508 = shl i32 %501, %505
  store i32 %508, i32* %168, align 8
  %509 = shl i32 %507, %505
  %510 = add nsw i32 %506, %505
  %511 = icmp sgt i32 %510, -1
  br i1 %511, label %512, label %525

512:                                              ; preds = %499
  %513 = load i8*, i8** %171, align 8
  %514 = load i8*, i8** %172, align 8
  %515 = icmp ult i8* %513, %514
  br i1 %515, label %516, label %525

516:                                              ; preds = %512
  %517 = getelementptr inbounds i8, i8* %513, i64 2
  store i8* %517, i8** %171, align 8
  %518 = bitcast i8* %513 to i16*
  %519 = load i16, i16* %518, align 1
  %520 = call i16 @llvm.bswap.i16(i16 %519) #7
  %521 = zext i16 %520 to i32
  %522 = shl i32 %521, %510
  %523 = or i32 %522, %509
  %524 = add nsw i32 %510, -16
  br label %525

525:                                              ; preds = %516, %512, %499
  %526 = phi i32 [ %524, %516 ], [ %510, %512 ], [ %510, %499 ]
  %527 = phi i32 [ %523, %516 ], [ %509, %512 ], [ %509, %499 ]
  store i32 %526, i32* %169, align 4
  %528 = add nsw i32 %508, -1
  %529 = zext i8 %500 to i32
  %530 = mul nsw i32 %528, %529
  %531 = ashr i32 %530, 8
  %532 = add nsw i32 %531, 1
  %533 = shl i32 %532, 16
  %534 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %533, i32 %532, i32 %527, i32 0, i32 %508, i32 %527) #8, !srcloc !2
  %535 = extractvalue { i32, i32, i32 } %534, 0
  %536 = extractvalue { i32, i32, i32 } %534, 1
  %537 = extractvalue { i32, i32, i32 } %534, 2
  store i32 %536, i32* %168, align 8
  store i32 %537, i32* %170, align 8
  %538 = trunc i32 %535 to i8
  br label %539

539:                                              ; preds = %525, %494
  %540 = phi i8 [ %538, %525 ], [ 0, %494 ]
  %541 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 0
  store i8 %540, i8* %541, align 4
  %542 = load i8, i8* %176, align 8
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %745, label %544

544:                                              ; preds = %539
  %545 = load i32, i32* %168, align 8
  %546 = load i32, i32* %169, align 4
  %547 = load i32, i32* %170, align 8
  br label %548

548:                                              ; preds = %576, %544
  %549 = phi i32 [ %547, %544 ], [ %588, %576 ]
  %550 = phi i32 [ %546, %544 ], [ %577, %576 ]
  %551 = phi i32 [ %545, %544 ], [ %587, %576 ]
  %552 = phi i64 [ 0, %544 ], [ %592, %576 ]
  %553 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_pred16x16_prob_intra, i64 0, i64 %552
  %554 = load i8, i8* %553, align 1
  %555 = sext i32 %551 to i64
  %556 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %555
  %557 = load i8, i8* %556, align 1
  %558 = zext i8 %557 to i32
  %559 = shl i32 %551, %558
  store i32 %559, i32* %168, align 8
  %560 = shl i32 %549, %558
  %561 = add nsw i32 %550, %558
  %562 = icmp sgt i32 %561, -1
  br i1 %562, label %563, label %576

563:                                              ; preds = %548
  %564 = load i8*, i8** %171, align 8
  %565 = load i8*, i8** %172, align 8
  %566 = icmp ult i8* %564, %565
  br i1 %566, label %567, label %576

567:                                              ; preds = %563
  %568 = getelementptr inbounds i8, i8* %564, i64 2
  store i8* %568, i8** %171, align 8
  %569 = bitcast i8* %564 to i16*
  %570 = load i16, i16* %569, align 1
  %571 = call i16 @llvm.bswap.i16(i16 %570) #7
  %572 = zext i16 %571 to i32
  %573 = shl i32 %572, %561
  %574 = or i32 %573, %560
  %575 = add nsw i32 %561, -16
  br label %576

576:                                              ; preds = %567, %563, %548
  %577 = phi i32 [ %575, %567 ], [ %561, %563 ], [ %561, %548 ]
  %578 = phi i32 [ %574, %567 ], [ %560, %563 ], [ %560, %548 ]
  store i32 %577, i32* %169, align 4
  %579 = add nsw i32 %559, -1
  %580 = zext i8 %554 to i32
  %581 = mul nsw i32 %579, %580
  %582 = ashr i32 %581, 8
  %583 = add nsw i32 %582, 1
  %584 = shl i32 %583, 16
  %585 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %584, i32 %583, i32 %578, i32 0, i32 %559, i32 %578) #8, !srcloc !2
  %586 = extractvalue { i32, i32, i32 } %585, 0
  %587 = extractvalue { i32, i32, i32 } %585, 1
  %588 = extractvalue { i32, i32, i32 } %585, 2
  store i32 %587, i32* %168, align 8
  store i32 %588, i32* %170, align 8
  %589 = sext i32 %586 to i64
  %590 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @vp8_pred16x16_tree_intra, i64 0, i64 %552, i64 %589
  %591 = load i8, i8* %590, align 1
  %592 = sext i8 %591 to i64
  %593 = icmp sgt i8 %591, 0
  br i1 %593, label %548, label %594

594:                                              ; preds = %576
  %595 = sext i8 %591 to i32
  %596 = sub nsw i32 0, %595
  %597 = trunc i32 %596 to i8
  %598 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  store i8 %597, i8* %598, align 1
  %599 = and i32 %596, 255
  %600 = icmp eq i32 %599, 4
  br i1 %600, label %601, label %675

601:                                              ; preds = %594
  %602 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 6, i64 0
  %603 = load i8*, i8** %177, align 8
  %604 = getelementptr inbounds i8, i8* %603, i64 %368
  br label %605

605:                                              ; preds = %672, %601
  %606 = phi i64 [ 0, %601 ], [ %673, %672 ]
  %607 = phi i8* [ %602, %601 ], [ %669, %672 ]
  %608 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 23, i64 %606
  %609 = load i8, i8* %608, align 1
  br label %610

610:                                              ; preds = %667, %605
  %611 = phi i8 [ %609, %605 ], [ %668, %667 ]
  %612 = phi i64 [ 0, %605 ], [ %670, %667 ]
  %613 = phi i8* [ %607, %605 ], [ %669, %667 ]
  %614 = getelementptr inbounds i8, i8* %604, i64 %612
  %615 = load i8, i8* %614, align 1
  %616 = zext i8 %615 to i64
  %617 = zext i8 %611 to i64
  %618 = load i32, i32* %168, align 8
  %619 = load i32, i32* %169, align 4
  %620 = load i32, i32* %170, align 8
  br label %621

621:                                              ; preds = %649, %610
  %622 = phi i32 [ %620, %610 ], [ %661, %649 ]
  %623 = phi i32 [ %619, %610 ], [ %650, %649 ]
  %624 = phi i32 [ %618, %610 ], [ %660, %649 ]
  %625 = phi i64 [ 0, %610 ], [ %665, %649 ]
  %626 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_pred4x4_prob_intra, i64 0, i64 %616, i64 %617, i64 %625
  %627 = load i8, i8* %626, align 1
  %628 = sext i32 %624 to i64
  %629 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %628
  %630 = load i8, i8* %629, align 1
  %631 = zext i8 %630 to i32
  %632 = shl i32 %624, %631
  store i32 %632, i32* %168, align 8
  %633 = shl i32 %622, %631
  %634 = add nsw i32 %623, %631
  %635 = icmp sgt i32 %634, -1
  br i1 %635, label %636, label %649

636:                                              ; preds = %621
  %637 = load i8*, i8** %171, align 8
  %638 = load i8*, i8** %172, align 8
  %639 = icmp ult i8* %637, %638
  br i1 %639, label %640, label %649

640:                                              ; preds = %636
  %641 = getelementptr inbounds i8, i8* %637, i64 2
  store i8* %641, i8** %171, align 8
  %642 = bitcast i8* %637 to i16*
  %643 = load i16, i16* %642, align 1
  %644 = call i16 @llvm.bswap.i16(i16 %643) #7
  %645 = zext i16 %644 to i32
  %646 = shl i32 %645, %634
  %647 = or i32 %646, %633
  %648 = add nsw i32 %634, -16
  br label %649

649:                                              ; preds = %640, %636, %621
  %650 = phi i32 [ %648, %640 ], [ %634, %636 ], [ %634, %621 ]
  %651 = phi i32 [ %647, %640 ], [ %633, %636 ], [ %633, %621 ]
  store i32 %650, i32* %169, align 4
  %652 = add nsw i32 %632, -1
  %653 = zext i8 %627 to i32
  %654 = mul nsw i32 %652, %653
  %655 = ashr i32 %654, 8
  %656 = add nsw i32 %655, 1
  %657 = shl i32 %656, 16
  %658 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %657, i32 %656, i32 %651, i32 0, i32 %632, i32 %651) #8, !srcloc !2
  %659 = extractvalue { i32, i32, i32 } %658, 0
  %660 = extractvalue { i32, i32, i32 } %658, 1
  %661 = extractvalue { i32, i32, i32 } %658, 2
  store i32 %660, i32* %168, align 8
  store i32 %661, i32* %170, align 8
  %662 = sext i32 %659 to i64
  %663 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @vp8_pred4x4_tree, i64 0, i64 %625, i64 %662
  %664 = load i8, i8* %663, align 1
  %665 = sext i8 %664 to i64
  %666 = icmp sgt i8 %664, 0
  br i1 %666, label %621, label %667

667:                                              ; preds = %649
  %668 = sub i8 0, %664
  store i8 %668, i8* %613, align 1
  store i8 %668, i8* %614, align 1
  store i8 %668, i8* %608, align 1
  %669 = getelementptr inbounds i8, i8* %613, i64 1
  %670 = add nuw nsw i64 %612, 1
  %671 = icmp eq i64 %670, 4
  br i1 %671, label %672, label %610

672:                                              ; preds = %667
  %673 = add nuw nsw i64 %606, 1
  %674 = icmp eq i64 %673, 4
  br i1 %674, label %691, label %605

675:                                              ; preds = %594
  %676 = zext i32 %599 to i64
  %677 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_pred4x4_mode, i64 0, i64 %676
  %678 = load i8, i8* %677, align 1
  %679 = zext i8 %678 to i32
  %680 = mul nuw i32 %679, 16843009
  %681 = load i32, i32* %101, align 8
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %685, label %683

683:                                              ; preds = %675
  %684 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 8, i64 0
  br label %688

685:                                              ; preds = %675
  %686 = load i8*, i8** %177, align 8
  %687 = getelementptr inbounds i8, i8* %686, i64 %368
  br label %688

688:                                              ; preds = %685, %683
  %689 = phi i8* [ %687, %685 ], [ %684, %683 ]
  %690 = bitcast i8* %689 to i32*
  store i32 %680, i32* %690, align 4
  store i32 %680, i32* %179, align 8
  br label %691

691:                                              ; preds = %672, %688
  %692 = load i32, i32* %168, align 8
  %693 = load i32, i32* %169, align 4
  %694 = load i32, i32* %170, align 8
  br label %695

695:                                              ; preds = %723, %691
  %696 = phi i32 [ %694, %691 ], [ %735, %723 ]
  %697 = phi i32 [ %693, %691 ], [ %724, %723 ]
  %698 = phi i32 [ %692, %691 ], [ %734, %723 ]
  %699 = phi i64 [ 0, %691 ], [ %739, %723 ]
  %700 = getelementptr inbounds [3 x i8], [3 x i8]* @vp8_pred8x8c_prob_intra, i64 0, i64 %699
  %701 = load i8, i8* %700, align 1
  %702 = sext i32 %698 to i64
  %703 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %702
  %704 = load i8, i8* %703, align 1
  %705 = zext i8 %704 to i32
  %706 = shl i32 %698, %705
  store i32 %706, i32* %168, align 8
  %707 = shl i32 %696, %705
  %708 = add nsw i32 %697, %705
  %709 = icmp sgt i32 %708, -1
  br i1 %709, label %710, label %723

710:                                              ; preds = %695
  %711 = load i8*, i8** %171, align 8
  %712 = load i8*, i8** %172, align 8
  %713 = icmp ult i8* %711, %712
  br i1 %713, label %714, label %723

714:                                              ; preds = %710
  %715 = getelementptr inbounds i8, i8* %711, i64 2
  store i8* %715, i8** %171, align 8
  %716 = bitcast i8* %711 to i16*
  %717 = load i16, i16* %716, align 1
  %718 = call i16 @llvm.bswap.i16(i16 %717) #7
  %719 = zext i16 %718 to i32
  %720 = shl i32 %719, %708
  %721 = or i32 %720, %707
  %722 = add nsw i32 %708, -16
  br label %723

723:                                              ; preds = %714, %710, %695
  %724 = phi i32 [ %722, %714 ], [ %708, %710 ], [ %708, %695 ]
  %725 = phi i32 [ %721, %714 ], [ %707, %710 ], [ %707, %695 ]
  store i32 %724, i32* %169, align 4
  %726 = add nsw i32 %706, -1
  %727 = zext i8 %701 to i32
  %728 = mul nsw i32 %726, %727
  %729 = ashr i32 %728, 8
  %730 = add nsw i32 %729, 1
  %731 = shl i32 %730, 16
  %732 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %731, i32 %730, i32 %725, i32 0, i32 %706, i32 %725) #8, !srcloc !2
  %733 = extractvalue { i32, i32, i32 } %732, 0
  %734 = extractvalue { i32, i32, i32 } %732, 1
  %735 = extractvalue { i32, i32, i32 } %732, 2
  store i32 %734, i32* %168, align 8
  store i32 %735, i32* %170, align 8
  %736 = sext i32 %733 to i64
  %737 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @vp8_pred8x8c_tree, i64 0, i64 %699, i64 %736
  %738 = load i8, i8* %737, align 1
  %739 = sext i8 %738 to i64
  %740 = icmp sgt i8 %738, 0
  br i1 %740, label %695, label %741

741:                                              ; preds = %723
  %742 = sub i8 0, %738
  %743 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 4
  store i8 %742, i8* %743, align 4
  %744 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  store i8 0, i8* %744, align 2
  br label %2590

745:                                              ; preds = %539
  %746 = load i8, i8* %180, align 4
  %747 = zext i8 %746 to i32
  %748 = load i32, i32* %168, align 8
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %749
  %751 = load i8, i8* %750, align 1
  %752 = zext i8 %751 to i32
  %753 = load i32, i32* %169, align 4
  %754 = load i32, i32* %170, align 8
  %755 = shl i32 %748, %752
  store i32 %755, i32* %168, align 8
  %756 = shl i32 %754, %752
  %757 = add nsw i32 %753, %752
  %758 = icmp sgt i32 %757, -1
  br i1 %758, label %759, label %772

759:                                              ; preds = %745
  %760 = load i8*, i8** %171, align 8
  %761 = load i8*, i8** %172, align 8
  %762 = icmp ult i8* %760, %761
  br i1 %762, label %763, label %772

763:                                              ; preds = %759
  %764 = getelementptr inbounds i8, i8* %760, i64 2
  store i8* %764, i8** %171, align 8
  %765 = bitcast i8* %760 to i16*
  %766 = load i16, i16* %765, align 1
  %767 = call i16 @llvm.bswap.i16(i16 %766) #7
  %768 = zext i16 %767 to i32
  %769 = shl i32 %768, %757
  %770 = or i32 %769, %756
  %771 = add nsw i32 %757, -16
  br label %772

772:                                              ; preds = %763, %759, %745
  %773 = phi i32 [ %771, %763 ], [ %757, %759 ], [ %757, %745 ]
  %774 = phi i32 [ %770, %763 ], [ %756, %759 ], [ %756, %745 ]
  store i32 %773, i32* %169, align 4
  %775 = add nsw i32 %755, -1
  %776 = mul nsw i32 %775, %747
  %777 = ashr i32 %776, 8
  %778 = add nsw i32 %777, 1
  %779 = shl i32 %778, 16
  %780 = icmp ult i32 %774, %779
  br i1 %780, label %2423, label %781

781:                                              ; preds = %772
  %782 = sub i32 %755, %778
  %783 = sub i32 %774, %779
  store i32 %783, i32* %170, align 8
  %784 = load i8, i8* %181, align 1
  %785 = zext i8 %784 to i32
  %786 = sext i32 %782 to i64
  %787 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %786
  %788 = load i8, i8* %787, align 1
  %789 = zext i8 %788 to i32
  %790 = shl i32 %782, %789
  store i32 %790, i32* %168, align 8
  %791 = shl i32 %783, %789
  %792 = add nsw i32 %773, %789
  %793 = icmp sgt i32 %792, -1
  br i1 %793, label %794, label %807

794:                                              ; preds = %781
  %795 = load i8*, i8** %171, align 8
  %796 = load i8*, i8** %172, align 8
  %797 = icmp ult i8* %795, %796
  br i1 %797, label %798, label %807

798:                                              ; preds = %794
  %799 = getelementptr inbounds i8, i8* %795, i64 2
  store i8* %799, i8** %171, align 8
  %800 = bitcast i8* %795 to i16*
  %801 = load i16, i16* %800, align 1
  %802 = call i16 @llvm.bswap.i16(i16 %801) #7
  %803 = zext i16 %802 to i32
  %804 = shl i32 %803, %792
  %805 = or i32 %804, %791
  %806 = add nsw i32 %792, -16
  br label %807

807:                                              ; preds = %798, %794, %781
  %808 = phi i32 [ %806, %798 ], [ %792, %794 ], [ %792, %781 ]
  %809 = phi i32 [ %805, %798 ], [ %791, %794 ], [ %791, %781 ]
  store i32 %808, i32* %169, align 4
  %810 = add nsw i32 %790, -1
  %811 = mul nsw i32 %810, %785
  %812 = ashr i32 %811, 8
  %813 = add nsw i32 %812, 1
  %814 = shl i32 %813, 16
  %815 = icmp ult i32 %809, %814
  br i1 %815, label %856, label %816

816:                                              ; preds = %807
  %817 = sub i32 %790, %813
  %818 = sub i32 %809, %814
  store i32 %818, i32* %170, align 8
  %819 = load i8, i8* %182, align 2
  %820 = sext i32 %817 to i64
  %821 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %820
  %822 = load i8, i8* %821, align 1
  %823 = zext i8 %822 to i32
  %824 = shl i32 %817, %823
  store i32 %824, i32* %168, align 8
  %825 = shl i32 %818, %823
  %826 = add nsw i32 %808, %823
  %827 = icmp sgt i32 %826, -1
  br i1 %827, label %828, label %841

828:                                              ; preds = %816
  %829 = load i8*, i8** %171, align 8
  %830 = load i8*, i8** %172, align 8
  %831 = icmp ult i8* %829, %830
  br i1 %831, label %832, label %841

832:                                              ; preds = %828
  %833 = getelementptr inbounds i8, i8* %829, i64 2
  store i8* %833, i8** %171, align 8
  %834 = bitcast i8* %829 to i16*
  %835 = load i16, i16* %834, align 1
  %836 = call i16 @llvm.bswap.i16(i16 %835) #7
  %837 = zext i16 %836 to i32
  %838 = shl i32 %837, %826
  %839 = or i32 %838, %825
  %840 = add nsw i32 %826, -16
  br label %841

841:                                              ; preds = %832, %828, %816
  %842 = phi i32 [ %840, %832 ], [ %826, %828 ], [ %826, %816 ]
  %843 = phi i32 [ %839, %832 ], [ %825, %828 ], [ %825, %816 ]
  store i32 %842, i32* %169, align 4
  %844 = add nsw i32 %824, -1
  %845 = zext i8 %819 to i32
  %846 = mul nsw i32 %844, %845
  %847 = ashr i32 %846, 8
  %848 = add nsw i32 %847, 1
  %849 = shl i32 %848, 16
  %850 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %849, i32 %848, i32 %843, i32 0, i32 %824, i32 %843) #8, !srcloc !2
  %851 = extractvalue { i32, i32, i32 } %850, 0
  %852 = extractvalue { i32, i32, i32 } %850, 1
  %853 = extractvalue { i32, i32, i32 } %850, 2
  store i32 %852, i32* %168, align 8
  store i32 %853, i32* %170, align 8
  %854 = icmp eq i32 %851, 0
  %855 = select i1 %854, i8 2, i8 3
  br label %857

856:                                              ; preds = %807
  store i32 %813, i32* %168, align 8
  store i32 %809, i32* %170, align 8
  br label %857

857:                                              ; preds = %856, %841
  %858 = phi i8 [ 1, %856 ], [ %855, %841 ]
  %859 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  store i8 %858, i8* %859, align 2
  %860 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  %861 = zext i8 %858 to i64
  %862 = add nsw i64 %861, -1
  %863 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 18, i64 %862
  %864 = load i32, i32* %863, align 4
  %865 = add nsw i32 %864, 1
  store i32 %865, i32* %863, align 4
  %866 = load i8, i8* %860, align 2
  %867 = zext i8 %866 to i64
  %868 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 17, i64 %867
  %869 = load i8, i8* %868, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %184) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %184, i8 -86, i64 16, i1 false) #7
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %192) #7
  store i32 0, i32* %9, align 4
  store i32 0, i32* %193, align 16
  store i32 0, i32* %194, align 4
  store i32 0, i32* %195, align 8
  %870 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 2, i32 2
  %871 = load i8, i8* %870, align 2
  %872 = icmp eq i8 %871, 0
  br i1 %872, label %892, label %873

873:                                              ; preds = %857
  %874 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 2, i32 9
  %875 = bitcast %struct.VP56mv* %874 to i32*
  %876 = load i32, i32* %875, align 4
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %891, label %878

878:                                              ; preds = %873
  %879 = zext i8 %871 to i64
  %880 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 17, i64 %879
  %881 = load i8, i8* %880, align 1
  %882 = icmp eq i8 %869, %881
  br i1 %882, label %889, label %883

883:                                              ; preds = %878
  %884 = xor i32 %876, -1
  %885 = and i32 %884, 2147450879
  %886 = add nuw i32 %885, 65537
  %887 = and i32 %884, -2147450880
  %888 = xor i32 %886, %887
  br label %889

889:                                              ; preds = %883, %878
  %890 = phi i32 [ %888, %883 ], [ %876, %878 ]
  store i32 %890, i32* %194, align 4
  store i8 2, i8* %196, align 1
  br label %892

891:                                              ; preds = %873
  store i8 2, i8* %192, align 4
  br label %892

892:                                              ; preds = %891, %889, %857
  %893 = phi i8 [ 2, %857 ], [ 2, %889 ], [ 4, %891 ]
  %894 = phi i32 [ 0, %857 ], [ 1, %889 ], [ 0, %891 ]
  %895 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 -1, i32 2
  %896 = load i8, i8* %895, align 2
  %897 = icmp eq i8 %896, 0
  br i1 %897, label %933, label %898

898:                                              ; preds = %892
  %899 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 -1, i32 9
  %900 = bitcast %struct.VP56mv* %899 to i32*
  %901 = load i32, i32* %900, align 4
  %902 = icmp eq i32 %901, 0
  br i1 %902, label %932, label %903

903:                                              ; preds = %898
  %904 = zext i8 %896 to i64
  %905 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 17, i64 %904
  %906 = load i8, i8* %905, align 1
  %907 = icmp eq i8 %869, %906
  br i1 %907, label %914, label %908

908:                                              ; preds = %903
  %909 = xor i32 %901, -1
  %910 = and i32 %909, 2147450879
  %911 = add nuw i32 %910, 65537
  %912 = and i32 %909, -2147450880
  %913 = xor i32 %911, %912
  br label %914

914:                                              ; preds = %908, %903
  %915 = phi i32 [ %913, %908 ], [ %901, %903 ]
  %916 = zext i32 %894 to i64
  %917 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %916
  %918 = bitcast %struct.VP56mv* %917 to i32*
  %919 = load i32, i32* %918, align 4
  %920 = icmp eq i32 %915, %919
  br i1 %920, label %926, label %921

921:                                              ; preds = %914
  %922 = add nuw nsw i32 %894, 1
  %923 = zext i32 %922 to i64
  %924 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %923
  %925 = bitcast %struct.VP56mv* %924 to i32*
  store i32 %915, i32* %925, align 4
  br label %926

926:                                              ; preds = %921, %914
  %927 = phi i32 [ %922, %921 ], [ %894, %914 ]
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds [4 x i8], [4 x i8]* %183, i64 0, i64 %928
  %930 = load i8, i8* %929, align 1
  %931 = add i8 %930, 2
  store i8 %931, i8* %929, align 1
  br label %933

932:                                              ; preds = %898
  store i8 %893, i8* %192, align 4
  br label %933

933:                                              ; preds = %932, %926, %892
  %934 = phi i32 [ %894, %892 ], [ %927, %926 ], [ %894, %932 ]
  %935 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 1, i32 2
  %936 = load i8, i8* %935, align 2
  %937 = icmp eq i8 %936, 0
  br i1 %937, label %974, label %938

938:                                              ; preds = %933
  %939 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 1, i32 9
  %940 = bitcast %struct.VP56mv* %939 to i32*
  %941 = load i32, i32* %940, align 4
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %971, label %943

943:                                              ; preds = %938
  %944 = zext i8 %936 to i64
  %945 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 17, i64 %944
  %946 = load i8, i8* %945, align 1
  %947 = icmp eq i8 %869, %946
  br i1 %947, label %954, label %948

948:                                              ; preds = %943
  %949 = xor i32 %941, -1
  %950 = and i32 %949, 2147450879
  %951 = add nuw i32 %950, 65537
  %952 = and i32 %949, -2147450880
  %953 = xor i32 %951, %952
  br label %954

954:                                              ; preds = %948, %943
  %955 = phi i32 [ %953, %948 ], [ %941, %943 ]
  %956 = sext i32 %934 to i64
  %957 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %956
  %958 = bitcast %struct.VP56mv* %957 to i32*
  %959 = load i32, i32* %958, align 4
  %960 = icmp eq i32 %955, %959
  br i1 %960, label %966, label %961

961:                                              ; preds = %954
  %962 = add nuw nsw i32 %934, 1
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %963
  %965 = bitcast %struct.VP56mv* %964 to i32*
  store i32 %955, i32* %965, align 4
  br label %966

966:                                              ; preds = %961, %954
  %967 = phi i64 [ %956, %954 ], [ %963, %961 ]
  %968 = getelementptr inbounds [4 x i8], [4 x i8]* %183, i64 0, i64 %967
  %969 = load i8, i8* %968, align 1
  %970 = add i8 %969, 1
  store i8 %970, i8* %968, align 1
  br label %974

971:                                              ; preds = %938
  %972 = load i8, i8* %192, align 4
  %973 = add i8 %972, 1
  store i8 %973, i8* %192, align 4
  br label %974

974:                                              ; preds = %971, %966, %933
  %975 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 3
  store i8 4, i8* %975, align 1
  %976 = load i8, i8* %192, align 4
  %977 = zext i8 %976 to i64
  %978 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %977, i64 0
  %979 = load i32, i32* %978, align 16
  %980 = load i32, i32* %168, align 8
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %981
  %983 = load i8, i8* %982, align 1
  %984 = zext i8 %983 to i32
  %985 = load i32, i32* %169, align 4
  %986 = load i32, i32* %170, align 8
  %987 = shl i32 %980, %984
  store i32 %987, i32* %168, align 8
  %988 = shl i32 %986, %984
  %989 = add nsw i32 %985, %984
  %990 = icmp sgt i32 %989, -1
  br i1 %990, label %991, label %1004

991:                                              ; preds = %974
  %992 = load i8*, i8** %171, align 8
  %993 = load i8*, i8** %172, align 8
  %994 = icmp ult i8* %992, %993
  br i1 %994, label %995, label %1004

995:                                              ; preds = %991
  %996 = getelementptr inbounds i8, i8* %992, i64 2
  store i8* %996, i8** %171, align 8
  %997 = bitcast i8* %992 to i16*
  %998 = load i16, i16* %997, align 1
  %999 = call i16 @llvm.bswap.i16(i16 %998) #7
  %1000 = zext i16 %999 to i32
  %1001 = shl i32 %1000, %989
  %1002 = or i32 %1001, %988
  %1003 = add nsw i32 %989, -16
  br label %1004

1004:                                             ; preds = %995, %991, %974
  %1005 = phi i32 [ %1003, %995 ], [ %989, %991 ], [ %989, %974 ]
  %1006 = phi i32 [ %1002, %995 ], [ %988, %991 ], [ %988, %974 ]
  store i32 %1005, i32* %169, align 4
  %1007 = add nsw i32 %987, -1
  %1008 = mul nsw i32 %1007, %979
  %1009 = ashr i32 %1008, 8
  %1010 = add nsw i32 %1009, 1
  %1011 = shl i32 %1010, 16
  %1012 = icmp ult i32 %1006, %1011
  br i1 %1012, label %2416, label %1013

1013:                                             ; preds = %1004
  %1014 = sub i32 %987, %1010
  store i32 %1014, i32* %168, align 8
  %1015 = sub i32 %1006, %1011
  store i32 %1015, i32* %170, align 8
  %1016 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  store i8 6, i8* %1016, align 1
  %1017 = load i8, i8* %197, align 1
  %1018 = icmp eq i8 %1017, 0
  br i1 %1018, label %1026, label %1019

1019:                                             ; preds = %1013
  %1020 = load i32, i32* %194, align 4
  %1021 = load i32, i32* %198, align 4
  %1022 = icmp eq i32 %1020, %1021
  br i1 %1022, label %1023, label %1026

1023:                                             ; preds = %1019
  %1024 = load i8, i8* %196, align 1
  %1025 = add i8 %1024, 1
  store i8 %1025, i8* %196, align 1
  br label %1026

1026:                                             ; preds = %1023, %1019, %1013
  %1027 = load i8, i8* %199, align 2
  %1028 = load i8, i8* %196, align 1
  %1029 = icmp ugt i8 %1027, %1028
  br i1 %1029, label %1030, label %1034

1030:                                             ; preds = %1026
  store i8 %1028, i8* %199, align 2
  store i8 %1027, i8* %196, align 1
  %1031 = load i16, i16* %200, align 8
  %1032 = load i16, i16* %190, align 2
  %1033 = load i32, i32* %194, align 4
  store i32 %1033, i32* %195, align 8
  store i16 %1031, i16* %201, align 4
  store i16 %1032, i16* %187, align 2
  br label %1034

1034:                                             ; preds = %1030, %1026
  %1035 = phi i8 [ %1028, %1030 ], [ %1027, %1026 ]
  %1036 = phi i8 [ %1027, %1030 ], [ %1028, %1026 ]
  %1037 = zext i8 %1036 to i64
  %1038 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1037, i64 1
  %1039 = load i32, i32* %1038, align 4
  %1040 = load i32, i32* %168, align 8
  %1041 = sext i32 %1040 to i64
  %1042 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1041
  %1043 = load i8, i8* %1042, align 1
  %1044 = zext i8 %1043 to i32
  %1045 = load i32, i32* %169, align 4
  %1046 = load i32, i32* %170, align 8
  %1047 = shl i32 %1040, %1044
  store i32 %1047, i32* %168, align 8
  %1048 = shl i32 %1046, %1044
  %1049 = add nsw i32 %1045, %1044
  %1050 = icmp sgt i32 %1049, -1
  br i1 %1050, label %1051, label %1064

1051:                                             ; preds = %1034
  %1052 = load i8*, i8** %171, align 8
  %1053 = load i8*, i8** %172, align 8
  %1054 = icmp ult i8* %1052, %1053
  br i1 %1054, label %1055, label %1064

1055:                                             ; preds = %1051
  %1056 = getelementptr inbounds i8, i8* %1052, i64 2
  store i8* %1056, i8** %171, align 8
  %1057 = bitcast i8* %1052 to i16*
  %1058 = load i16, i16* %1057, align 1
  %1059 = call i16 @llvm.bswap.i16(i16 %1058) #7
  %1060 = zext i16 %1059 to i32
  %1061 = shl i32 %1060, %1049
  %1062 = or i32 %1061, %1048
  %1063 = add nsw i32 %1049, -16
  br label %1064

1064:                                             ; preds = %1055, %1051, %1034
  %1065 = phi i32 [ %1063, %1055 ], [ %1049, %1051 ], [ %1049, %1034 ]
  %1066 = phi i32 [ %1062, %1055 ], [ %1048, %1051 ], [ %1048, %1034 ]
  store i32 %1065, i32* %169, align 4
  %1067 = add nsw i32 %1047, -1
  %1068 = mul nsw i32 %1067, %1039
  %1069 = ashr i32 %1068, 8
  %1070 = add nsw i32 %1069, 1
  %1071 = shl i32 %1070, 16
  %1072 = icmp ult i32 %1066, %1071
  br i1 %1072, label %2374, label %1073

1073:                                             ; preds = %1064
  %1074 = sub i32 %1047, %1070
  %1075 = sub i32 %1066, %1071
  store i32 %1075, i32* %170, align 8
  %1076 = zext i8 %1035 to i64
  %1077 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1076, i64 2
  %1078 = load i32, i32* %1077, align 8
  %1079 = sext i32 %1074 to i64
  %1080 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1079
  %1081 = load i8, i8* %1080, align 1
  %1082 = zext i8 %1081 to i32
  %1083 = shl i32 %1074, %1082
  store i32 %1083, i32* %168, align 8
  %1084 = shl i32 %1075, %1082
  %1085 = add nsw i32 %1065, %1082
  %1086 = icmp sgt i32 %1085, -1
  br i1 %1086, label %1087, label %1100

1087:                                             ; preds = %1073
  %1088 = load i8*, i8** %171, align 8
  %1089 = load i8*, i8** %172, align 8
  %1090 = icmp ult i8* %1088, %1089
  br i1 %1090, label %1091, label %1100

1091:                                             ; preds = %1087
  %1092 = getelementptr inbounds i8, i8* %1088, i64 2
  store i8* %1092, i8** %171, align 8
  %1093 = bitcast i8* %1088 to i16*
  %1094 = load i16, i16* %1093, align 1
  %1095 = call i16 @llvm.bswap.i16(i16 %1094) #7
  %1096 = zext i16 %1095 to i32
  %1097 = shl i32 %1096, %1085
  %1098 = or i32 %1097, %1084
  %1099 = add nsw i32 %1085, -16
  br label %1100

1100:                                             ; preds = %1091, %1087, %1073
  %1101 = phi i32 [ %1099, %1091 ], [ %1085, %1087 ], [ %1085, %1073 ]
  %1102 = phi i32 [ %1098, %1091 ], [ %1084, %1087 ], [ %1084, %1073 ]
  store i32 %1101, i32* %169, align 4
  %1103 = add nsw i32 %1083, -1
  %1104 = mul nsw i32 %1103, %1078
  %1105 = ashr i32 %1104, 8
  %1106 = add nsw i32 %1105, 1
  %1107 = shl i32 %1106, 16
  %1108 = icmp ult i32 %1102, %1107
  br i1 %1108, label %2332, label %1109

1109:                                             ; preds = %1100
  %1110 = sub i32 %1083, %1106
  store i32 %1110, i32* %168, align 8
  %1111 = sub i32 %1102, %1107
  store i32 %1111, i32* %170, align 8
  %1112 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9
  %1113 = icmp uge i8 %1036, %976
  %1114 = zext i1 %1113 to i64
  %1115 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %1114, i32 0
  %1116 = load i16, i16* %1115, align 4
  %1117 = sext i16 %1116 to i32
  %1118 = load i32, i32* %143, align 4
  %1119 = icmp slt i32 %1118, 32767
  %1120 = select i1 %1119, i32 %1118, i32 32767
  %1121 = icmp sgt i32 %1120, -32768
  %1122 = select i1 %1121, i32 %1120, i32 -32768
  %1123 = load i32, i32* %147, align 4
  %1124 = icmp slt i32 %1123, 32767
  %1125 = select i1 %1124, i32 %1123, i32 32767
  %1126 = icmp sgt i32 %1125, -32768
  %1127 = select i1 %1126, i32 %1125, i32 -32768
  %1128 = icmp sgt i32 %1122, %1117
  %1129 = icmp slt i32 %1127, %1117
  %1130 = select i1 %1129, i32 %1127, i32 %1117
  %1131 = select i1 %1128, i32 %1122, i32 %1130
  %1132 = trunc i32 %1131 to i16
  %1133 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %1112, i64 0, i32 0
  store i16 %1132, i16* %1133, align 4
  %1134 = getelementptr inbounds [4 x %struct.VP56mv], [4 x %struct.VP56mv]* %8, i64 0, i64 %1114, i32 1
  %1135 = load i16, i16* %1134, align 2
  %1136 = sext i16 %1135 to i32
  %1137 = load i32, i32* %202, align 4
  %1138 = icmp slt i32 %1137, 32767
  %1139 = select i1 %1138, i32 %1137, i32 32767
  %1140 = icmp sgt i32 %1139, -32768
  %1141 = select i1 %1140, i32 %1139, i32 -32768
  %1142 = load i32, i32* %203, align 4
  %1143 = icmp slt i32 %1142, 32767
  %1144 = select i1 %1143, i32 %1142, i32 32767
  %1145 = icmp sgt i32 %1144, -32768
  %1146 = select i1 %1145, i32 %1144, i32 -32768
  %1147 = icmp sgt i32 %1141, %1136
  %1148 = icmp slt i32 %1146, %1136
  %1149 = select i1 %1148, i32 %1146, i32 %1136
  %1150 = select i1 %1147, i32 %1141, i32 %1149
  %1151 = trunc i32 %1150 to i16
  %1152 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  store i16 %1151, i16* %1152, align 2
  %1153 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 -1, i32 1
  %1154 = load i8, i8* %1153, align 1
  %1155 = icmp eq i8 %1154, 7
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 2, i32 1
  %1158 = load i8, i8* %1157, align 1
  %1159 = icmp eq i8 %1158, 7
  %1160 = zext i1 %1159 to i8
  %1161 = add nuw nsw i8 %1160, %1156
  %1162 = shl nuw nsw i8 %1161, 1
  %1163 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 1, i32 1
  %1164 = load i8, i8* %1163, align 1
  %1165 = icmp eq i8 %1164, 7
  %1166 = zext i1 %1165 to i8
  %1167 = or i8 %1162, %1166
  store i8 %1167, i8* %197, align 1
  %1168 = zext i8 %1167 to i64
  %1169 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1168, i64 3
  %1170 = load i32, i32* %1169, align 4
  %1171 = load i32, i32* %168, align 8
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1172
  %1174 = load i8, i8* %1173, align 1
  %1175 = zext i8 %1174 to i32
  %1176 = load i32, i32* %169, align 4
  %1177 = load i32, i32* %170, align 8
  %1178 = shl i32 %1171, %1175
  store i32 %1178, i32* %168, align 8
  %1179 = shl i32 %1177, %1175
  %1180 = add nsw i32 %1176, %1175
  %1181 = icmp sgt i32 %1180, -1
  br i1 %1181, label %1182, label %1195

1182:                                             ; preds = %1109
  %1183 = load i8*, i8** %171, align 8
  %1184 = load i8*, i8** %172, align 8
  %1185 = icmp ult i8* %1183, %1184
  br i1 %1185, label %1186, label %1195

1186:                                             ; preds = %1182
  %1187 = getelementptr inbounds i8, i8* %1183, i64 2
  store i8* %1187, i8** %171, align 8
  %1188 = bitcast i8* %1183 to i16*
  %1189 = load i16, i16* %1188, align 1
  %1190 = call i16 @llvm.bswap.i16(i16 %1189) #7
  %1191 = zext i16 %1190 to i32
  %1192 = shl i32 %1191, %1180
  %1193 = or i32 %1192, %1179
  %1194 = add nsw i32 %1180, -16
  br label %1195

1195:                                             ; preds = %1186, %1182, %1109
  %1196 = phi i32 [ %1194, %1186 ], [ %1180, %1182 ], [ %1180, %1109 ]
  %1197 = phi i32 [ %1193, %1186 ], [ %1179, %1182 ], [ %1179, %1109 ]
  store i32 %1196, i32* %169, align 4
  %1198 = add nsw i32 %1178, -1
  %1199 = mul nsw i32 %1198, %1170
  %1200 = ashr i32 %1199, 8
  %1201 = add nsw i32 %1200, 1
  %1202 = shl i32 %1201, 16
  %1203 = icmp ult i32 %1197, %1202
  br i1 %1203, label %2319, label %1204

1204:                                             ; preds = %1195
  %1205 = sub i32 %1178, %1201
  store i32 %1205, i32* %168, align 8
  %1206 = sub i32 %1197, %1202
  store i32 %1206, i32* %170, align 8
  store i8 7, i8* %1016, align 1
  %1207 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 -1, i32 3
  %1208 = load i8, i8* %1207, align 1
  %1209 = zext i8 %1208 to i64
  %1210 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 2, i32 3
  %1211 = load i8, i8* %1210, align 1
  %1212 = zext i8 %1211 to i64
  %1213 = load i32, i32* %168, align 8
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1214
  %1216 = load i8, i8* %1215, align 1
  %1217 = zext i8 %1216 to i32
  %1218 = load i32, i32* %169, align 4
  %1219 = load i32, i32* %170, align 8
  %1220 = shl i32 %1213, %1217
  store i32 %1220, i32* %168, align 8
  %1221 = shl i32 %1219, %1217
  %1222 = add nsw i32 %1218, %1217
  %1223 = icmp sgt i32 %1222, -1
  br i1 %1223, label %1224, label %1237

1224:                                             ; preds = %1204
  %1225 = load i8*, i8** %171, align 8
  %1226 = load i8*, i8** %172, align 8
  %1227 = icmp ult i8* %1225, %1226
  br i1 %1227, label %1228, label %1237

1228:                                             ; preds = %1224
  %1229 = getelementptr inbounds i8, i8* %1225, i64 2
  store i8* %1229, i8** %171, align 8
  %1230 = bitcast i8* %1225 to i16*
  %1231 = load i16, i16* %1230, align 1
  %1232 = call i16 @llvm.bswap.i16(i16 %1231) #7
  %1233 = zext i16 %1232 to i32
  %1234 = shl i32 %1233, %1222
  %1235 = or i32 %1234, %1221
  %1236 = add nsw i32 %1222, -16
  br label %1237

1237:                                             ; preds = %1228, %1224, %1204
  %1238 = phi i32 [ %1236, %1228 ], [ %1222, %1224 ], [ %1222, %1204 ]
  %1239 = phi i32 [ %1235, %1228 ], [ %1221, %1224 ], [ %1221, %1204 ]
  store i32 %1238, i32* %169, align 4
  %1240 = mul i32 %1220, 110
  %1241 = add i32 %1240, -110
  %1242 = ashr i32 %1241, 8
  %1243 = add nsw i32 %1242, 1
  %1244 = shl i32 %1243, 16
  %1245 = icmp ult i32 %1239, %1244
  br i1 %1245, label %1315, label %1246

1246:                                             ; preds = %1237
  %1247 = sub i32 %1220, %1243
  %1248 = sub i32 %1239, %1244
  store i32 %1248, i32* %170, align 8
  %1249 = sext i32 %1247 to i64
  %1250 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1249
  %1251 = load i8, i8* %1250, align 1
  %1252 = zext i8 %1251 to i32
  %1253 = shl i32 %1247, %1252
  store i32 %1253, i32* %168, align 8
  %1254 = shl i32 %1248, %1252
  %1255 = add nsw i32 %1238, %1252
  %1256 = icmp sgt i32 %1255, -1
  br i1 %1256, label %1257, label %1270

1257:                                             ; preds = %1246
  %1258 = load i8*, i8** %171, align 8
  %1259 = load i8*, i8** %172, align 8
  %1260 = icmp ult i8* %1258, %1259
  br i1 %1260, label %1261, label %1270

1261:                                             ; preds = %1257
  %1262 = getelementptr inbounds i8, i8* %1258, i64 2
  store i8* %1262, i8** %171, align 8
  %1263 = bitcast i8* %1258 to i16*
  %1264 = load i16, i16* %1263, align 1
  %1265 = call i16 @llvm.bswap.i16(i16 %1264) #7
  %1266 = zext i16 %1265 to i32
  %1267 = shl i32 %1266, %1255
  %1268 = or i32 %1267, %1254
  %1269 = add nsw i32 %1255, -16
  br label %1270

1270:                                             ; preds = %1261, %1257, %1246
  %1271 = phi i32 [ %1269, %1261 ], [ %1255, %1257 ], [ %1255, %1246 ]
  %1272 = phi i32 [ %1268, %1261 ], [ %1254, %1257 ], [ %1254, %1246 ]
  store i32 %1271, i32* %169, align 4
  %1273 = mul i32 %1253, 111
  %1274 = add i32 %1273, -111
  %1275 = ashr i32 %1274, 8
  %1276 = add nsw i32 %1275, 1
  %1277 = shl i32 %1276, 16
  %1278 = icmp ult i32 %1272, %1277
  br i1 %1278, label %1315, label %1279

1279:                                             ; preds = %1270
  %1280 = sub i32 %1253, %1276
  %1281 = sub i32 %1272, %1277
  store i32 %1281, i32* %170, align 8
  %1282 = sext i32 %1280 to i64
  %1283 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1282
  %1284 = load i8, i8* %1283, align 1
  %1285 = zext i8 %1284 to i32
  %1286 = shl i32 %1280, %1285
  store i32 %1286, i32* %168, align 8
  %1287 = shl i32 %1281, %1285
  %1288 = add nsw i32 %1271, %1285
  %1289 = icmp sgt i32 %1288, -1
  br i1 %1289, label %1290, label %1303

1290:                                             ; preds = %1279
  %1291 = load i8*, i8** %171, align 8
  %1292 = load i8*, i8** %172, align 8
  %1293 = icmp ult i8* %1291, %1292
  br i1 %1293, label %1294, label %1303

1294:                                             ; preds = %1290
  %1295 = getelementptr inbounds i8, i8* %1291, i64 2
  store i8* %1295, i8** %171, align 8
  %1296 = bitcast i8* %1291 to i16*
  %1297 = load i16, i16* %1296, align 1
  %1298 = call i16 @llvm.bswap.i16(i16 %1297) #7
  %1299 = zext i16 %1298 to i32
  %1300 = shl i32 %1299, %1288
  %1301 = or i32 %1300, %1287
  %1302 = add nsw i32 %1288, -16
  br label %1303

1303:                                             ; preds = %1294, %1290, %1279
  %1304 = phi i32 [ %1302, %1294 ], [ %1288, %1290 ], [ %1288, %1279 ]
  %1305 = phi i32 [ %1301, %1294 ], [ %1287, %1290 ], [ %1287, %1279 ]
  store i32 %1304, i32* %169, align 4
  %1306 = mul i32 %1286, 150
  %1307 = add i32 %1306, -150
  %1308 = ashr i32 %1307, 8
  %1309 = add nsw i32 %1308, 1
  %1310 = shl i32 %1309, 16
  %1311 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1310, i32 %1309, i32 %1305, i32 0, i32 %1286, i32 %1305) #8, !srcloc !2
  %1312 = extractvalue { i32, i32, i32 } %1311, 0
  %1313 = extractvalue { i32, i32, i32 } %1311, 1
  %1314 = extractvalue { i32, i32, i32 } %1311, 2
  br label %1315

1315:                                             ; preds = %1270, %1237, %1303
  %1316 = phi i32 [ %1313, %1303 ], [ %1243, %1237 ], [ %1276, %1270 ]
  %1317 = phi i32 [ %1314, %1303 ], [ %1239, %1237 ], [ %1272, %1270 ]
  %1318 = phi i32 [ %1312, %1303 ], [ 3, %1237 ], [ 2, %1270 ]
  store i32 %1316, i32* %168, align 8
  store i32 %1317, i32* %170, align 8
  %1319 = sext i32 %1318 to i64
  %1320 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_mbsplit_count, i64 0, i64 %1319
  %1321 = load i8, i8* %1320, align 1
  %1322 = trunc i32 %1318 to i8
  store i8 %1322, i8* %975, align 1
  %1323 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 0
  %1324 = zext i8 %1321 to i64
  br label %1325

1325:                                             ; preds = %2310, %1315
  %1326 = phi i64 [ 0, %1315 ], [ %2311, %2310 ]
  %1327 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* bitcast (<{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, [16 x i8] }>* @vp8_mbfirstidx to [4 x [16 x i8]]*), i64 0, i64 %1319, i64 %1326
  %1328 = load i8, i8* %1327, align 1
  %1329 = zext i8 %1328 to i32
  %1330 = and i32 %1329, 3
  %1331 = icmp eq i32 %1330, 0
  br i1 %1331, label %1332, label %1336

1332:                                             ; preds = %1325
  %1333 = add nuw nsw i32 %1329, 3
  %1334 = zext i32 %1333 to i64
  %1335 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %1209, i64 %1334
  br label %1340

1336:                                             ; preds = %1325
  %1337 = add nsw i32 %1329, -1
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %1319, i64 %1338
  br label %1340

1340:                                             ; preds = %1336, %1332
  %1341 = phi i8* [ %1339, %1336 ], [ %1335, %1332 ]
  %1342 = phi i64 [ 0, %1336 ], [ -1, %1332 ]
  %1343 = load i8, i8* %1341, align 1
  %1344 = zext i8 %1343 to i64
  %1345 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 %1342, i32 10, i64 %1344
  %1346 = bitcast %struct.VP56mv* %1345 to i32*
  %1347 = load i32, i32* %1346, align 4
  %1348 = icmp ult i8 %1328, 4
  br i1 %1348, label %1349, label %1353

1349:                                             ; preds = %1340
  %1350 = add nuw nsw i32 %1329, 12
  %1351 = zext i32 %1350 to i64
  %1352 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %1212, i64 %1351
  br label %1357

1353:                                             ; preds = %1340
  %1354 = add nsw i32 %1329, -4
  %1355 = sext i32 %1354 to i64
  %1356 = getelementptr inbounds [5 x [16 x i8]], [5 x [16 x i8]]* @vp8_mbsplits, i64 0, i64 %1319, i64 %1355
  br label %1357

1357:                                             ; preds = %1353, %1349
  %1358 = phi i8* [ %1356, %1353 ], [ %1352, %1349 ]
  %1359 = phi i64 [ 0, %1353 ], [ 2, %1349 ]
  %1360 = load i8, i8* %1358, align 1
  %1361 = zext i8 %1360 to i64
  %1362 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 %1359, i32 10, i64 %1361
  %1363 = bitcast %struct.VP56mv* %1362 to i32*
  %1364 = load i32, i32* %1363, align 4
  %1365 = icmp eq i32 %1347, %1364
  br i1 %1365, label %1366, label %1370

1366:                                             ; preds = %1357
  %1367 = icmp eq i32 %1347, 0
  %1368 = select i1 %1367, i64 4, i64 3
  %1369 = getelementptr inbounds [5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 %1368, i64 0
  br label %1376

1370:                                             ; preds = %1357
  %1371 = icmp eq i32 %1364, 0
  br i1 %1371, label %1376, label %1372

1372:                                             ; preds = %1370
  %1373 = icmp eq i32 %1347, 0
  %1374 = zext i1 %1373 to i64
  %1375 = getelementptr inbounds [5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 %1374, i64 0
  br label %1376

1376:                                             ; preds = %1372, %1370, %1366
  %1377 = phi i8* [ %1369, %1366 ], [ %1375, %1372 ], [ getelementptr inbounds ([5 x [3 x i8]], [5 x [3 x i8]]* @vp8_submv_prob, i64 0, i64 2, i64 0), %1370 ]
  %1378 = load i8, i8* %1377, align 1
  %1379 = zext i8 %1378 to i32
  %1380 = load i32, i32* %168, align 8
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1381
  %1383 = load i8, i8* %1382, align 1
  %1384 = zext i8 %1383 to i32
  %1385 = load i32, i32* %169, align 4
  %1386 = load i32, i32* %170, align 8
  %1387 = shl i32 %1380, %1384
  store i32 %1387, i32* %168, align 8
  %1388 = shl i32 %1386, %1384
  %1389 = add nsw i32 %1385, %1384
  %1390 = icmp sgt i32 %1389, -1
  br i1 %1390, label %1391, label %1404

1391:                                             ; preds = %1376
  %1392 = load i8*, i8** %171, align 8
  %1393 = load i8*, i8** %172, align 8
  %1394 = icmp ult i8* %1392, %1393
  br i1 %1394, label %1395, label %1404

1395:                                             ; preds = %1391
  %1396 = getelementptr inbounds i8, i8* %1392, i64 2
  store i8* %1396, i8** %171, align 8
  %1397 = bitcast i8* %1392 to i16*
  %1398 = load i16, i16* %1397, align 1
  %1399 = call i16 @llvm.bswap.i16(i16 %1398) #7
  %1400 = zext i16 %1399 to i32
  %1401 = shl i32 %1400, %1389
  %1402 = or i32 %1401, %1388
  %1403 = add nsw i32 %1389, -16
  br label %1404

1404:                                             ; preds = %1395, %1391, %1376
  %1405 = phi i32 [ %1403, %1395 ], [ %1389, %1391 ], [ %1389, %1376 ]
  %1406 = phi i32 [ %1402, %1395 ], [ %1388, %1391 ], [ %1388, %1376 ]
  store i32 %1405, i32* %169, align 4
  %1407 = add nsw i32 %1387, -1
  %1408 = mul nsw i32 %1407, %1379
  %1409 = ashr i32 %1408, 8
  %1410 = add nsw i32 %1409, 1
  %1411 = shl i32 %1410, 16
  %1412 = icmp ult i32 %1406, %1411
  br i1 %1412, label %2307, label %1413

1413:                                             ; preds = %1404
  %1414 = sub i32 %1387, %1410
  store i32 %1414, i32* %168, align 8
  %1415 = sub i32 %1406, %1411
  store i32 %1415, i32* %170, align 8
  %1416 = getelementptr inbounds i8, i8* %1377, i64 1
  %1417 = load i8, i8* %1416, align 1
  %1418 = zext i8 %1417 to i32
  %1419 = sext i32 %1414 to i64
  %1420 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1419
  %1421 = load i8, i8* %1420, align 1
  %1422 = zext i8 %1421 to i32
  %1423 = shl i32 %1414, %1422
  store i32 %1423, i32* %168, align 8
  %1424 = shl i32 %1415, %1422
  %1425 = add nsw i32 %1405, %1422
  %1426 = icmp sgt i32 %1425, -1
  br i1 %1426, label %1427, label %1440

1427:                                             ; preds = %1413
  %1428 = load i8*, i8** %171, align 8
  %1429 = load i8*, i8** %172, align 8
  %1430 = icmp ult i8* %1428, %1429
  br i1 %1430, label %1431, label %1440

1431:                                             ; preds = %1427
  %1432 = getelementptr inbounds i8, i8* %1428, i64 2
  store i8* %1432, i8** %171, align 8
  %1433 = bitcast i8* %1428 to i16*
  %1434 = load i16, i16* %1433, align 1
  %1435 = call i16 @llvm.bswap.i16(i16 %1434) #7
  %1436 = zext i16 %1435 to i32
  %1437 = shl i32 %1436, %1425
  %1438 = or i32 %1437, %1424
  %1439 = add nsw i32 %1425, -16
  br label %1440

1440:                                             ; preds = %1431, %1427, %1413
  %1441 = phi i32 [ %1439, %1431 ], [ %1425, %1427 ], [ %1425, %1413 ]
  %1442 = phi i32 [ %1438, %1431 ], [ %1424, %1427 ], [ %1424, %1413 ]
  store i32 %1441, i32* %169, align 4
  %1443 = add nsw i32 %1423, -1
  %1444 = mul nsw i32 %1443, %1418
  %1445 = ashr i32 %1444, 8
  %1446 = add nsw i32 %1445, 1
  %1447 = shl i32 %1446, 16
  %1448 = icmp ult i32 %1442, %1447
  br i1 %1448, label %2304, label %1449

1449:                                             ; preds = %1440
  %1450 = sub i32 %1423, %1446
  store i32 %1450, i32* %168, align 8
  %1451 = sub i32 %1442, %1447
  store i32 %1451, i32* %170, align 8
  %1452 = getelementptr inbounds i8, i8* %1377, i64 2
  %1453 = load i8, i8* %1452, align 1
  %1454 = zext i8 %1453 to i32
  %1455 = sext i32 %1450 to i64
  %1456 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1455
  %1457 = load i8, i8* %1456, align 1
  %1458 = zext i8 %1457 to i32
  %1459 = shl i32 %1450, %1458
  store i32 %1459, i32* %168, align 8
  %1460 = shl i32 %1451, %1458
  %1461 = add nsw i32 %1441, %1458
  %1462 = icmp sgt i32 %1461, -1
  br i1 %1462, label %1463, label %1476

1463:                                             ; preds = %1449
  %1464 = load i8*, i8** %171, align 8
  %1465 = load i8*, i8** %172, align 8
  %1466 = icmp ult i8* %1464, %1465
  br i1 %1466, label %1467, label %1476

1467:                                             ; preds = %1463
  %1468 = getelementptr inbounds i8, i8* %1464, i64 2
  store i8* %1468, i8** %171, align 8
  %1469 = bitcast i8* %1464 to i16*
  %1470 = load i16, i16* %1469, align 1
  %1471 = call i16 @llvm.bswap.i16(i16 %1470) #7
  %1472 = zext i16 %1471 to i32
  %1473 = shl i32 %1472, %1461
  %1474 = or i32 %1473, %1460
  %1475 = add nsw i32 %1461, -16
  br label %1476

1476:                                             ; preds = %1467, %1463, %1449
  %1477 = phi i32 [ %1475, %1467 ], [ %1461, %1463 ], [ %1461, %1449 ]
  %1478 = phi i32 [ %1474, %1467 ], [ %1460, %1463 ], [ %1460, %1449 ]
  store i32 %1477, i32* %169, align 4
  %1479 = add nsw i32 %1459, -1
  %1480 = mul nsw i32 %1479, %1454
  %1481 = ashr i32 %1480, 8
  %1482 = add nsw i32 %1481, 1
  %1483 = shl i32 %1482, 16
  %1484 = icmp ult i32 %1478, %1483
  br i1 %1484, label %2301, label %1485

1485:                                             ; preds = %1476
  %1486 = sub i32 %1459, %1482
  store i32 %1486, i32* %168, align 8
  %1487 = sub i32 %1478, %1483
  store i32 %1487, i32* %170, align 8
  %1488 = load i16, i16* %1152, align 2
  %1489 = load i8, i8* %204, align 1
  %1490 = zext i8 %1489 to i32
  %1491 = sext i32 %1486 to i64
  %1492 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1491
  %1493 = load i8, i8* %1492, align 1
  %1494 = zext i8 %1493 to i32
  %1495 = shl i32 %1486, %1494
  store i32 %1495, i32* %168, align 8
  %1496 = shl i32 %1487, %1494
  %1497 = add nsw i32 %1477, %1494
  %1498 = icmp sgt i32 %1497, -1
  br i1 %1498, label %1499, label %1512

1499:                                             ; preds = %1485
  %1500 = load i8*, i8** %171, align 8
  %1501 = load i8*, i8** %172, align 8
  %1502 = icmp ult i8* %1500, %1501
  br i1 %1502, label %1503, label %1512

1503:                                             ; preds = %1499
  %1504 = getelementptr inbounds i8, i8* %1500, i64 2
  store i8* %1504, i8** %171, align 8
  %1505 = bitcast i8* %1500 to i16*
  %1506 = load i16, i16* %1505, align 1
  %1507 = call i16 @llvm.bswap.i16(i16 %1506) #7
  %1508 = zext i16 %1507 to i32
  %1509 = shl i32 %1508, %1497
  %1510 = or i32 %1509, %1496
  %1511 = add nsw i32 %1497, -16
  br label %1512

1512:                                             ; preds = %1503, %1499, %1485
  %1513 = phi i32 [ %1511, %1503 ], [ %1497, %1499 ], [ %1497, %1485 ]
  %1514 = phi i32 [ %1510, %1503 ], [ %1496, %1499 ], [ %1496, %1485 ]
  store i32 %1513, i32* %169, align 4
  %1515 = add nsw i32 %1495, -1
  %1516 = mul nsw i32 %1515, %1490
  %1517 = ashr i32 %1516, 8
  %1518 = add nsw i32 %1517, 1
  %1519 = shl i32 %1518, 16
  %1520 = icmp ult i32 %1514, %1519
  br i1 %1520, label %1661, label %1521

1521:                                             ; preds = %1512
  %1522 = sub i32 %1495, %1518
  %1523 = sub i32 %1514, %1519
  store i32 %1523, i32* %170, align 8
  %1524 = load i8, i8* %205, align 1
  %1525 = sext i32 %1522 to i64
  %1526 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1525
  %1527 = load i8, i8* %1526, align 1
  %1528 = zext i8 %1527 to i32
  %1529 = shl i32 %1522, %1528
  store i32 %1529, i32* %168, align 8
  %1530 = shl i32 %1523, %1528
  %1531 = add nsw i32 %1513, %1528
  %1532 = icmp sgt i32 %1531, -1
  br i1 %1532, label %1533, label %1546

1533:                                             ; preds = %1521
  %1534 = load i8*, i8** %171, align 8
  %1535 = load i8*, i8** %172, align 8
  %1536 = icmp ult i8* %1534, %1535
  br i1 %1536, label %1537, label %1546

1537:                                             ; preds = %1533
  %1538 = getelementptr inbounds i8, i8* %1534, i64 2
  store i8* %1538, i8** %171, align 8
  %1539 = bitcast i8* %1534 to i16*
  %1540 = load i16, i16* %1539, align 1
  %1541 = call i16 @llvm.bswap.i16(i16 %1540) #7
  %1542 = zext i16 %1541 to i32
  %1543 = shl i32 %1542, %1531
  %1544 = or i32 %1543, %1530
  %1545 = add nsw i32 %1531, -16
  br label %1546

1546:                                             ; preds = %1537, %1533, %1521
  %1547 = phi i32 [ %1545, %1537 ], [ %1531, %1533 ], [ %1531, %1521 ]
  %1548 = phi i32 [ %1544, %1537 ], [ %1530, %1533 ], [ %1530, %1521 ]
  store i32 %1547, i32* %169, align 4
  %1549 = add nsw i32 %1529, -1
  %1550 = zext i8 %1524 to i32
  %1551 = mul nsw i32 %1549, %1550
  %1552 = ashr i32 %1551, 8
  %1553 = add nsw i32 %1552, 1
  %1554 = shl i32 %1553, 16
  %1555 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1554, i32 %1553, i32 %1548, i32 0, i32 %1529, i32 %1548) #8, !srcloc !2
  %1556 = extractvalue { i32, i32, i32 } %1555, 0
  %1557 = extractvalue { i32, i32, i32 } %1555, 1
  %1558 = extractvalue { i32, i32, i32 } %1555, 2
  store i32 %1558, i32* %170, align 8
  %1559 = load i8, i8* %206, align 1
  %1560 = sext i32 %1557 to i64
  %1561 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1560
  %1562 = load i8, i8* %1561, align 1
  %1563 = zext i8 %1562 to i32
  %1564 = shl i32 %1557, %1563
  store i32 %1564, i32* %168, align 8
  %1565 = shl i32 %1558, %1563
  %1566 = add nsw i32 %1547, %1563
  %1567 = icmp sgt i32 %1566, -1
  br i1 %1567, label %1823, label %1836

1568:                                             ; preds = %1873, %1598
  %1569 = phi i32 [ %1885, %1873 ], [ %1610, %1598 ]
  %1570 = phi i32 [ %1874, %1873 ], [ %1599, %1598 ]
  %1571 = phi i32 [ %1884, %1873 ], [ %1609, %1598 ]
  %1572 = phi i64 [ 9, %1873 ], [ %1614, %1598 ]
  %1573 = phi i32 [ %1887, %1873 ], [ %1613, %1598 ]
  %1574 = add nuw nsw i64 %1572, 9
  %1575 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 0, i64 %1574
  %1576 = load i8, i8* %1575, align 1
  %1577 = sext i32 %1571 to i64
  %1578 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1577
  %1579 = load i8, i8* %1578, align 1
  %1580 = zext i8 %1579 to i32
  %1581 = shl i32 %1571, %1580
  store i32 %1581, i32* %168, align 8
  %1582 = shl i32 %1569, %1580
  %1583 = add nsw i32 %1570, %1580
  %1584 = icmp sgt i32 %1583, -1
  br i1 %1584, label %1585, label %1598

1585:                                             ; preds = %1568
  %1586 = load i8*, i8** %171, align 8
  %1587 = load i8*, i8** %172, align 8
  %1588 = icmp ult i8* %1586, %1587
  br i1 %1588, label %1589, label %1598

1589:                                             ; preds = %1585
  %1590 = getelementptr inbounds i8, i8* %1586, i64 2
  store i8* %1590, i8** %171, align 8
  %1591 = bitcast i8* %1586 to i16*
  %1592 = load i16, i16* %1591, align 1
  %1593 = call i16 @llvm.bswap.i16(i16 %1592) #7
  %1594 = zext i16 %1593 to i32
  %1595 = shl i32 %1594, %1583
  %1596 = or i32 %1595, %1582
  %1597 = add nsw i32 %1583, -16
  br label %1598

1598:                                             ; preds = %1589, %1585, %1568
  %1599 = phi i32 [ %1597, %1589 ], [ %1583, %1585 ], [ %1583, %1568 ]
  %1600 = phi i32 [ %1596, %1589 ], [ %1582, %1585 ], [ %1582, %1568 ]
  store i32 %1599, i32* %169, align 4
  %1601 = add nsw i32 %1581, -1
  %1602 = zext i8 %1576 to i32
  %1603 = mul nsw i32 %1601, %1602
  %1604 = ashr i32 %1603, 8
  %1605 = add nsw i32 %1604, 1
  %1606 = shl i32 %1605, 16
  %1607 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1606, i32 %1605, i32 %1600, i32 0, i32 %1581, i32 %1600) #8, !srcloc !2
  %1608 = extractvalue { i32, i32, i32 } %1607, 0
  %1609 = extractvalue { i32, i32, i32 } %1607, 1
  %1610 = extractvalue { i32, i32, i32 } %1607, 2
  store i32 %1609, i32* %168, align 8
  store i32 %1610, i32* %170, align 8
  %1611 = trunc i64 %1572 to i32
  %1612 = shl i32 %1608, %1611
  %1613 = add nsw i32 %1612, %1573
  %1614 = add nsw i64 %1572, -1
  %1615 = icmp ugt i64 %1614, 3
  br i1 %1615, label %1568, label %1616

1616:                                             ; preds = %1598
  %1617 = and i32 %1613, 65520
  %1618 = icmp eq i32 %1617, 0
  br i1 %1618, label %1656, label %1619

1619:                                             ; preds = %1616
  %1620 = load i8, i8* %208, align 1
  %1621 = sext i32 %1609 to i64
  %1622 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1621
  %1623 = load i8, i8* %1622, align 1
  %1624 = zext i8 %1623 to i32
  %1625 = shl i32 %1609, %1624
  store i32 %1625, i32* %168, align 8
  %1626 = shl i32 %1610, %1624
  %1627 = add nsw i32 %1599, %1624
  %1628 = icmp sgt i32 %1627, -1
  br i1 %1628, label %1629, label %1642

1629:                                             ; preds = %1619
  %1630 = load i8*, i8** %171, align 8
  %1631 = load i8*, i8** %172, align 8
  %1632 = icmp ult i8* %1630, %1631
  br i1 %1632, label %1633, label %1642

1633:                                             ; preds = %1629
  %1634 = getelementptr inbounds i8, i8* %1630, i64 2
  store i8* %1634, i8** %171, align 8
  %1635 = bitcast i8* %1630 to i16*
  %1636 = load i16, i16* %1635, align 1
  %1637 = call i16 @llvm.bswap.i16(i16 %1636) #7
  %1638 = zext i16 %1637 to i32
  %1639 = shl i32 %1638, %1627
  %1640 = or i32 %1639, %1626
  %1641 = add nsw i32 %1627, -16
  br label %1642

1642:                                             ; preds = %1633, %1629, %1619
  %1643 = phi i32 [ %1641, %1633 ], [ %1627, %1629 ], [ %1627, %1619 ]
  %1644 = phi i32 [ %1640, %1633 ], [ %1626, %1629 ], [ %1626, %1619 ]
  store i32 %1643, i32* %169, align 4
  %1645 = add nsw i32 %1625, -1
  %1646 = zext i8 %1620 to i32
  %1647 = mul nsw i32 %1645, %1646
  %1648 = ashr i32 %1647, 8
  %1649 = add nsw i32 %1648, 1
  %1650 = shl i32 %1649, 16
  %1651 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1650, i32 %1649, i32 %1644, i32 0, i32 %1625, i32 %1644) #8, !srcloc !2
  %1652 = extractvalue { i32, i32, i32 } %1651, 0
  %1653 = extractvalue { i32, i32, i32 } %1651, 1
  %1654 = extractvalue { i32, i32, i32 } %1651, 2
  store i32 %1653, i32* %168, align 8
  store i32 %1654, i32* %170, align 8
  %1655 = icmp eq i32 %1652, 0
  br i1 %1655, label %1778, label %1656

1656:                                             ; preds = %1642, %1616
  %1657 = phi i32 [ %1654, %1642 ], [ %1610, %1616 ]
  %1658 = phi i32 [ %1643, %1642 ], [ %1599, %1616 ]
  %1659 = phi i32 [ %1653, %1642 ], [ %1609, %1616 ]
  %1660 = add nsw i32 %1613, 8
  br label %1778

1661:                                             ; preds = %1512
  store i32 %1514, i32* %170, align 8
  %1662 = load i8, i8* %209, align 1
  %1663 = sext i32 %1518 to i64
  %1664 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1663
  %1665 = load i8, i8* %1664, align 1
  %1666 = zext i8 %1665 to i32
  %1667 = shl i32 %1518, %1666
  store i32 %1667, i32* %168, align 8
  %1668 = shl i32 %1514, %1666
  %1669 = add nsw i32 %1513, %1666
  %1670 = icmp sgt i32 %1669, -1
  br i1 %1670, label %1671, label %1684

1671:                                             ; preds = %1661
  %1672 = load i8*, i8** %171, align 8
  %1673 = load i8*, i8** %172, align 8
  %1674 = icmp ult i8* %1672, %1673
  br i1 %1674, label %1675, label %1684

1675:                                             ; preds = %1671
  %1676 = getelementptr inbounds i8, i8* %1672, i64 2
  store i8* %1676, i8** %171, align 8
  %1677 = bitcast i8* %1672 to i16*
  %1678 = load i16, i16* %1677, align 1
  %1679 = call i16 @llvm.bswap.i16(i16 %1678) #7
  %1680 = zext i16 %1679 to i32
  %1681 = shl i32 %1680, %1669
  %1682 = or i32 %1681, %1668
  %1683 = add nsw i32 %1669, -16
  br label %1684

1684:                                             ; preds = %1675, %1671, %1661
  %1685 = phi i32 [ %1683, %1675 ], [ %1669, %1671 ], [ %1669, %1661 ]
  %1686 = phi i32 [ %1682, %1675 ], [ %1668, %1671 ], [ %1668, %1661 ]
  store i32 %1685, i32* %169, align 4
  %1687 = add nsw i32 %1667, -1
  %1688 = zext i8 %1662 to i32
  %1689 = mul nsw i32 %1687, %1688
  %1690 = ashr i32 %1689, 8
  %1691 = add nsw i32 %1690, 1
  %1692 = shl i32 %1691, 16
  %1693 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1692, i32 %1691, i32 %1686, i32 0, i32 %1667, i32 %1686) #8, !srcloc !2
  %1694 = extractvalue { i32, i32, i32 } %1693, 0
  %1695 = extractvalue { i32, i32, i32 } %1693, 1
  %1696 = extractvalue { i32, i32, i32 } %1693, 2
  store i32 %1695, i32* %168, align 8
  store i32 %1696, i32* %170, align 8
  %1697 = mul nsw i32 %1694, 3
  %1698 = add nsw i32 %1697, 1
  %1699 = sext i32 %1698 to i64
  %1700 = getelementptr inbounds i8, i8* %209, i64 %1699
  %1701 = shl i32 %1694, 2
  %1702 = load i8, i8* %1700, align 1
  %1703 = sext i32 %1695 to i64
  %1704 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1703
  %1705 = load i8, i8* %1704, align 1
  %1706 = zext i8 %1705 to i32
  %1707 = shl i32 %1695, %1706
  store i32 %1707, i32* %168, align 8
  %1708 = shl i32 %1696, %1706
  %1709 = add nsw i32 %1685, %1706
  %1710 = icmp sgt i32 %1709, -1
  br i1 %1710, label %1711, label %1724

1711:                                             ; preds = %1684
  %1712 = load i8*, i8** %171, align 8
  %1713 = load i8*, i8** %172, align 8
  %1714 = icmp ult i8* %1712, %1713
  br i1 %1714, label %1715, label %1724

1715:                                             ; preds = %1711
  %1716 = getelementptr inbounds i8, i8* %1712, i64 2
  store i8* %1716, i8** %171, align 8
  %1717 = bitcast i8* %1712 to i16*
  %1718 = load i16, i16* %1717, align 1
  %1719 = call i16 @llvm.bswap.i16(i16 %1718) #7
  %1720 = zext i16 %1719 to i32
  %1721 = shl i32 %1720, %1709
  %1722 = or i32 %1721, %1708
  %1723 = add nsw i32 %1709, -16
  br label %1724

1724:                                             ; preds = %1715, %1711, %1684
  %1725 = phi i32 [ %1723, %1715 ], [ %1709, %1711 ], [ %1709, %1684 ]
  %1726 = phi i32 [ %1722, %1715 ], [ %1708, %1711 ], [ %1708, %1684 ]
  store i32 %1725, i32* %169, align 4
  %1727 = add nsw i32 %1707, -1
  %1728 = zext i8 %1702 to i32
  %1729 = mul nsw i32 %1727, %1728
  %1730 = ashr i32 %1729, 8
  %1731 = add nsw i32 %1730, 1
  %1732 = shl i32 %1731, 16
  %1733 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1732, i32 %1731, i32 %1726, i32 0, i32 %1707, i32 %1726) #8, !srcloc !2
  %1734 = extractvalue { i32, i32, i32 } %1733, 0
  %1735 = extractvalue { i32, i32, i32 } %1733, 1
  %1736 = extractvalue { i32, i32, i32 } %1733, 2
  store i32 %1735, i32* %168, align 8
  store i32 %1736, i32* %170, align 8
  %1737 = add nsw i32 %1734, 1
  %1738 = sext i32 %1737 to i64
  %1739 = getelementptr inbounds i8, i8* %1700, i64 %1738
  %1740 = shl i32 %1734, 1
  %1741 = add nsw i32 %1740, %1701
  %1742 = load i8, i8* %1739, align 1
  %1743 = sext i32 %1735 to i64
  %1744 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1743
  %1745 = load i8, i8* %1744, align 1
  %1746 = zext i8 %1745 to i32
  %1747 = shl i32 %1735, %1746
  store i32 %1747, i32* %168, align 8
  %1748 = shl i32 %1736, %1746
  %1749 = add nsw i32 %1725, %1746
  %1750 = icmp sgt i32 %1749, -1
  br i1 %1750, label %1751, label %1764

1751:                                             ; preds = %1724
  %1752 = load i8*, i8** %171, align 8
  %1753 = load i8*, i8** %172, align 8
  %1754 = icmp ult i8* %1752, %1753
  br i1 %1754, label %1755, label %1764

1755:                                             ; preds = %1751
  %1756 = getelementptr inbounds i8, i8* %1752, i64 2
  store i8* %1756, i8** %171, align 8
  %1757 = bitcast i8* %1752 to i16*
  %1758 = load i16, i16* %1757, align 1
  %1759 = call i16 @llvm.bswap.i16(i16 %1758) #7
  %1760 = zext i16 %1759 to i32
  %1761 = shl i32 %1760, %1749
  %1762 = or i32 %1761, %1748
  %1763 = add nsw i32 %1749, -16
  br label %1764

1764:                                             ; preds = %1755, %1751, %1724
  %1765 = phi i32 [ %1763, %1755 ], [ %1749, %1751 ], [ %1749, %1724 ]
  %1766 = phi i32 [ %1762, %1755 ], [ %1748, %1751 ], [ %1748, %1724 ]
  store i32 %1765, i32* %169, align 4
  %1767 = add nsw i32 %1747, -1
  %1768 = zext i8 %1742 to i32
  %1769 = mul nsw i32 %1767, %1768
  %1770 = ashr i32 %1769, 8
  %1771 = add nsw i32 %1770, 1
  %1772 = shl i32 %1771, 16
  %1773 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1772, i32 %1771, i32 %1766, i32 0, i32 %1747, i32 %1766) #8, !srcloc !2
  %1774 = extractvalue { i32, i32, i32 } %1773, 0
  %1775 = extractvalue { i32, i32, i32 } %1773, 1
  %1776 = extractvalue { i32, i32, i32 } %1773, 2
  store i32 %1775, i32* %168, align 8
  store i32 %1776, i32* %170, align 8
  %1777 = add nsw i32 %1741, %1774
  br label %1778

1778:                                             ; preds = %1764, %1656, %1642
  %1779 = phi i32 [ %1776, %1764 ], [ %1657, %1656 ], [ %1654, %1642 ]
  %1780 = phi i32 [ %1765, %1764 ], [ %1658, %1656 ], [ %1643, %1642 ]
  %1781 = phi i32 [ %1775, %1764 ], [ %1659, %1656 ], [ %1653, %1642 ]
  %1782 = phi i32 [ %1777, %1764 ], [ %1660, %1656 ], [ %1613, %1642 ]
  %1783 = icmp eq i32 %1782, 0
  br i1 %1783, label %1888, label %1784

1784:                                             ; preds = %1778
  %1785 = load i8, i8* %210, align 1
  %1786 = sext i32 %1781 to i64
  %1787 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1786
  %1788 = load i8, i8* %1787, align 1
  %1789 = zext i8 %1788 to i32
  %1790 = shl i32 %1781, %1789
  store i32 %1790, i32* %168, align 8
  %1791 = shl i32 %1779, %1789
  %1792 = add nsw i32 %1780, %1789
  %1793 = icmp sgt i32 %1792, -1
  br i1 %1793, label %1794, label %1807

1794:                                             ; preds = %1784
  %1795 = load i8*, i8** %171, align 8
  %1796 = load i8*, i8** %172, align 8
  %1797 = icmp ult i8* %1795, %1796
  br i1 %1797, label %1798, label %1807

1798:                                             ; preds = %1794
  %1799 = getelementptr inbounds i8, i8* %1795, i64 2
  store i8* %1799, i8** %171, align 8
  %1800 = bitcast i8* %1795 to i16*
  %1801 = load i16, i16* %1800, align 1
  %1802 = call i16 @llvm.bswap.i16(i16 %1801) #7
  %1803 = zext i16 %1802 to i32
  %1804 = shl i32 %1803, %1792
  %1805 = or i32 %1804, %1791
  %1806 = add nsw i32 %1792, -16
  br label %1807

1807:                                             ; preds = %1798, %1794, %1784
  %1808 = phi i32 [ %1806, %1798 ], [ %1792, %1794 ], [ %1792, %1784 ]
  %1809 = phi i32 [ %1805, %1798 ], [ %1791, %1794 ], [ %1791, %1784 ]
  store i32 %1808, i32* %169, align 4
  %1810 = add nsw i32 %1790, -1
  %1811 = zext i8 %1785 to i32
  %1812 = mul nsw i32 %1810, %1811
  %1813 = ashr i32 %1812, 8
  %1814 = add nsw i32 %1813, 1
  %1815 = shl i32 %1814, 16
  %1816 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1815, i32 %1814, i32 %1809, i32 0, i32 %1790, i32 %1809) #8, !srcloc !2
  %1817 = extractvalue { i32, i32, i32 } %1816, 0
  %1818 = extractvalue { i32, i32, i32 } %1816, 1
  %1819 = extractvalue { i32, i32, i32 } %1816, 2
  store i32 %1818, i32* %168, align 8
  store i32 %1819, i32* %170, align 8
  %1820 = icmp eq i32 %1817, 0
  %1821 = sub nsw i32 0, %1782
  %1822 = select i1 %1820, i32 %1782, i32 %1821
  br label %1888

1823:                                             ; preds = %1546
  %1824 = load i8*, i8** %171, align 8
  %1825 = load i8*, i8** %172, align 8
  %1826 = icmp ult i8* %1824, %1825
  br i1 %1826, label %1827, label %1836

1827:                                             ; preds = %1823
  %1828 = getelementptr inbounds i8, i8* %1824, i64 2
  store i8* %1828, i8** %171, align 8
  %1829 = bitcast i8* %1824 to i16*
  %1830 = load i16, i16* %1829, align 1
  %1831 = call i16 @llvm.bswap.i16(i16 %1830) #7
  %1832 = zext i16 %1831 to i32
  %1833 = shl i32 %1832, %1566
  %1834 = or i32 %1833, %1565
  %1835 = add nsw i32 %1566, -16
  br label %1836

1836:                                             ; preds = %1827, %1823, %1546
  %1837 = phi i32 [ %1835, %1827 ], [ %1566, %1823 ], [ %1566, %1546 ]
  %1838 = phi i32 [ %1834, %1827 ], [ %1565, %1823 ], [ %1565, %1546 ]
  store i32 %1837, i32* %169, align 4
  %1839 = add nsw i32 %1564, -1
  %1840 = zext i8 %1559 to i32
  %1841 = mul nsw i32 %1839, %1840
  %1842 = ashr i32 %1841, 8
  %1843 = add nsw i32 %1842, 1
  %1844 = shl i32 %1843, 16
  %1845 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1844, i32 %1843, i32 %1838, i32 0, i32 %1564, i32 %1838) #8, !srcloc !2
  %1846 = extractvalue { i32, i32, i32 } %1845, 0
  %1847 = extractvalue { i32, i32, i32 } %1845, 1
  %1848 = extractvalue { i32, i32, i32 } %1845, 2
  store i32 %1848, i32* %170, align 8
  %1849 = shl i32 %1846, 1
  %1850 = add nsw i32 %1849, %1556
  %1851 = load i8, i8* %207, align 1
  %1852 = sext i32 %1847 to i64
  %1853 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1852
  %1854 = load i8, i8* %1853, align 1
  %1855 = zext i8 %1854 to i32
  %1856 = shl i32 %1847, %1855
  store i32 %1856, i32* %168, align 8
  %1857 = shl i32 %1848, %1855
  %1858 = add nsw i32 %1837, %1855
  %1859 = icmp sgt i32 %1858, -1
  br i1 %1859, label %1860, label %1873

1860:                                             ; preds = %1836
  %1861 = load i8*, i8** %171, align 8
  %1862 = load i8*, i8** %172, align 8
  %1863 = icmp ult i8* %1861, %1862
  br i1 %1863, label %1864, label %1873

1864:                                             ; preds = %1860
  %1865 = getelementptr inbounds i8, i8* %1861, i64 2
  store i8* %1865, i8** %171, align 8
  %1866 = bitcast i8* %1861 to i16*
  %1867 = load i16, i16* %1866, align 1
  %1868 = call i16 @llvm.bswap.i16(i16 %1867) #7
  %1869 = zext i16 %1868 to i32
  %1870 = shl i32 %1869, %1858
  %1871 = or i32 %1870, %1857
  %1872 = add nsw i32 %1858, -16
  br label %1873

1873:                                             ; preds = %1864, %1860, %1836
  %1874 = phi i32 [ %1872, %1864 ], [ %1858, %1860 ], [ %1858, %1836 ]
  %1875 = phi i32 [ %1871, %1864 ], [ %1857, %1860 ], [ %1857, %1836 ]
  store i32 %1874, i32* %169, align 4
  %1876 = add nsw i32 %1856, -1
  %1877 = zext i8 %1851 to i32
  %1878 = mul nsw i32 %1876, %1877
  %1879 = ashr i32 %1878, 8
  %1880 = add nsw i32 %1879, 1
  %1881 = shl i32 %1880, 16
  %1882 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1881, i32 %1880, i32 %1875, i32 0, i32 %1856, i32 %1875) #8, !srcloc !2
  %1883 = extractvalue { i32, i32, i32 } %1882, 0
  %1884 = extractvalue { i32, i32, i32 } %1882, 1
  %1885 = extractvalue { i32, i32, i32 } %1882, 2
  store i32 %1884, i32* %168, align 8
  store i32 %1885, i32* %170, align 8
  %1886 = shl i32 %1883, 2
  %1887 = add nsw i32 %1850, %1886
  br label %1568

1888:                                             ; preds = %1807, %1778
  %1889 = phi i32 [ %1822, %1807 ], [ 0, %1778 ]
  %1890 = trunc i32 %1889 to i16
  %1891 = add i16 %1488, %1890
  %1892 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %1326, i32 1
  store i16 %1891, i16* %1892, align 2
  %1893 = load i16, i16* %1323, align 4
  %1894 = load i8, i8* %211, align 1
  %1895 = zext i8 %1894 to i32
  %1896 = load i32, i32* %168, align 8
  %1897 = sext i32 %1896 to i64
  %1898 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1897
  %1899 = load i8, i8* %1898, align 1
  %1900 = zext i8 %1899 to i32
  %1901 = load i32, i32* %169, align 4
  %1902 = load i32, i32* %170, align 8
  %1903 = shl i32 %1896, %1900
  store i32 %1903, i32* %168, align 8
  %1904 = shl i32 %1902, %1900
  %1905 = add nsw i32 %1901, %1900
  %1906 = icmp sgt i32 %1905, -1
  br i1 %1906, label %1907, label %1920

1907:                                             ; preds = %1888
  %1908 = load i8*, i8** %171, align 8
  %1909 = load i8*, i8** %172, align 8
  %1910 = icmp ult i8* %1908, %1909
  br i1 %1910, label %1911, label %1920

1911:                                             ; preds = %1907
  %1912 = getelementptr inbounds i8, i8* %1908, i64 2
  store i8* %1912, i8** %171, align 8
  %1913 = bitcast i8* %1908 to i16*
  %1914 = load i16, i16* %1913, align 1
  %1915 = call i16 @llvm.bswap.i16(i16 %1914) #7
  %1916 = zext i16 %1915 to i32
  %1917 = shl i32 %1916, %1905
  %1918 = or i32 %1917, %1904
  %1919 = add nsw i32 %1905, -16
  br label %1920

1920:                                             ; preds = %1911, %1907, %1888
  %1921 = phi i32 [ %1919, %1911 ], [ %1905, %1907 ], [ %1905, %1888 ]
  %1922 = phi i32 [ %1918, %1911 ], [ %1904, %1907 ], [ %1904, %1888 ]
  store i32 %1921, i32* %169, align 4
  %1923 = add nsw i32 %1903, -1
  %1924 = mul nsw i32 %1923, %1895
  %1925 = ashr i32 %1924, 8
  %1926 = add nsw i32 %1925, 1
  %1927 = shl i32 %1926, 16
  %1928 = icmp ult i32 %1922, %1927
  br i1 %1928, label %2069, label %1929

1929:                                             ; preds = %1920
  %1930 = sub i32 %1903, %1926
  %1931 = sub i32 %1922, %1927
  store i32 %1931, i32* %170, align 8
  %1932 = load i8, i8* %212, align 1
  %1933 = sext i32 %1930 to i64
  %1934 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1933
  %1935 = load i8, i8* %1934, align 1
  %1936 = zext i8 %1935 to i32
  %1937 = shl i32 %1930, %1936
  store i32 %1937, i32* %168, align 8
  %1938 = shl i32 %1931, %1936
  %1939 = add nsw i32 %1921, %1936
  %1940 = icmp sgt i32 %1939, -1
  br i1 %1940, label %1941, label %1954

1941:                                             ; preds = %1929
  %1942 = load i8*, i8** %171, align 8
  %1943 = load i8*, i8** %172, align 8
  %1944 = icmp ult i8* %1942, %1943
  br i1 %1944, label %1945, label %1954

1945:                                             ; preds = %1941
  %1946 = getelementptr inbounds i8, i8* %1942, i64 2
  store i8* %1946, i8** %171, align 8
  %1947 = bitcast i8* %1942 to i16*
  %1948 = load i16, i16* %1947, align 1
  %1949 = call i16 @llvm.bswap.i16(i16 %1948) #7
  %1950 = zext i16 %1949 to i32
  %1951 = shl i32 %1950, %1939
  %1952 = or i32 %1951, %1938
  %1953 = add nsw i32 %1939, -16
  br label %1954

1954:                                             ; preds = %1945, %1941, %1929
  %1955 = phi i32 [ %1953, %1945 ], [ %1939, %1941 ], [ %1939, %1929 ]
  %1956 = phi i32 [ %1952, %1945 ], [ %1938, %1941 ], [ %1938, %1929 ]
  store i32 %1955, i32* %169, align 4
  %1957 = add nsw i32 %1937, -1
  %1958 = zext i8 %1932 to i32
  %1959 = mul nsw i32 %1957, %1958
  %1960 = ashr i32 %1959, 8
  %1961 = add nsw i32 %1960, 1
  %1962 = shl i32 %1961, 16
  %1963 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %1962, i32 %1961, i32 %1956, i32 0, i32 %1937, i32 %1956) #8, !srcloc !2
  %1964 = extractvalue { i32, i32, i32 } %1963, 0
  %1965 = extractvalue { i32, i32, i32 } %1963, 1
  %1966 = extractvalue { i32, i32, i32 } %1963, 2
  store i32 %1966, i32* %170, align 8
  %1967 = load i8, i8* %213, align 1
  %1968 = sext i32 %1965 to i64
  %1969 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1968
  %1970 = load i8, i8* %1969, align 1
  %1971 = zext i8 %1970 to i32
  %1972 = shl i32 %1965, %1971
  store i32 %1972, i32* %168, align 8
  %1973 = shl i32 %1966, %1971
  %1974 = add nsw i32 %1955, %1971
  %1975 = icmp sgt i32 %1974, -1
  br i1 %1975, label %2231, label %2244

1976:                                             ; preds = %2281, %2006
  %1977 = phi i32 [ %2293, %2281 ], [ %2018, %2006 ]
  %1978 = phi i32 [ %2282, %2281 ], [ %2007, %2006 ]
  %1979 = phi i32 [ %2292, %2281 ], [ %2017, %2006 ]
  %1980 = phi i64 [ 9, %2281 ], [ %2022, %2006 ]
  %1981 = phi i32 [ %2295, %2281 ], [ %2021, %2006 ]
  %1982 = add nuw nsw i64 %1980, 9
  %1983 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 8, i64 1, i64 %1982
  %1984 = load i8, i8* %1983, align 1
  %1985 = sext i32 %1979 to i64
  %1986 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %1985
  %1987 = load i8, i8* %1986, align 1
  %1988 = zext i8 %1987 to i32
  %1989 = shl i32 %1979, %1988
  store i32 %1989, i32* %168, align 8
  %1990 = shl i32 %1977, %1988
  %1991 = add nsw i32 %1978, %1988
  %1992 = icmp sgt i32 %1991, -1
  br i1 %1992, label %1993, label %2006

1993:                                             ; preds = %1976
  %1994 = load i8*, i8** %171, align 8
  %1995 = load i8*, i8** %172, align 8
  %1996 = icmp ult i8* %1994, %1995
  br i1 %1996, label %1997, label %2006

1997:                                             ; preds = %1993
  %1998 = getelementptr inbounds i8, i8* %1994, i64 2
  store i8* %1998, i8** %171, align 8
  %1999 = bitcast i8* %1994 to i16*
  %2000 = load i16, i16* %1999, align 1
  %2001 = call i16 @llvm.bswap.i16(i16 %2000) #7
  %2002 = zext i16 %2001 to i32
  %2003 = shl i32 %2002, %1991
  %2004 = or i32 %2003, %1990
  %2005 = add nsw i32 %1991, -16
  br label %2006

2006:                                             ; preds = %1997, %1993, %1976
  %2007 = phi i32 [ %2005, %1997 ], [ %1991, %1993 ], [ %1991, %1976 ]
  %2008 = phi i32 [ %2004, %1997 ], [ %1990, %1993 ], [ %1990, %1976 ]
  store i32 %2007, i32* %169, align 4
  %2009 = add nsw i32 %1989, -1
  %2010 = zext i8 %1984 to i32
  %2011 = mul nsw i32 %2009, %2010
  %2012 = ashr i32 %2011, 8
  %2013 = add nsw i32 %2012, 1
  %2014 = shl i32 %2013, 16
  %2015 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2014, i32 %2013, i32 %2008, i32 0, i32 %1989, i32 %2008) #8, !srcloc !2
  %2016 = extractvalue { i32, i32, i32 } %2015, 0
  %2017 = extractvalue { i32, i32, i32 } %2015, 1
  %2018 = extractvalue { i32, i32, i32 } %2015, 2
  store i32 %2017, i32* %168, align 8
  store i32 %2018, i32* %170, align 8
  %2019 = trunc i64 %1980 to i32
  %2020 = shl i32 %2016, %2019
  %2021 = add nsw i32 %2020, %1981
  %2022 = add nsw i64 %1980, -1
  %2023 = icmp ugt i64 %2022, 3
  br i1 %2023, label %1976, label %2024

2024:                                             ; preds = %2006
  %2025 = and i32 %2021, 65520
  %2026 = icmp eq i32 %2025, 0
  br i1 %2026, label %2064, label %2027

2027:                                             ; preds = %2024
  %2028 = load i8, i8* %215, align 1
  %2029 = sext i32 %2017 to i64
  %2030 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2029
  %2031 = load i8, i8* %2030, align 1
  %2032 = zext i8 %2031 to i32
  %2033 = shl i32 %2017, %2032
  store i32 %2033, i32* %168, align 8
  %2034 = shl i32 %2018, %2032
  %2035 = add nsw i32 %2007, %2032
  %2036 = icmp sgt i32 %2035, -1
  br i1 %2036, label %2037, label %2050

2037:                                             ; preds = %2027
  %2038 = load i8*, i8** %171, align 8
  %2039 = load i8*, i8** %172, align 8
  %2040 = icmp ult i8* %2038, %2039
  br i1 %2040, label %2041, label %2050

2041:                                             ; preds = %2037
  %2042 = getelementptr inbounds i8, i8* %2038, i64 2
  store i8* %2042, i8** %171, align 8
  %2043 = bitcast i8* %2038 to i16*
  %2044 = load i16, i16* %2043, align 1
  %2045 = call i16 @llvm.bswap.i16(i16 %2044) #7
  %2046 = zext i16 %2045 to i32
  %2047 = shl i32 %2046, %2035
  %2048 = or i32 %2047, %2034
  %2049 = add nsw i32 %2035, -16
  br label %2050

2050:                                             ; preds = %2041, %2037, %2027
  %2051 = phi i32 [ %2049, %2041 ], [ %2035, %2037 ], [ %2035, %2027 ]
  %2052 = phi i32 [ %2048, %2041 ], [ %2034, %2037 ], [ %2034, %2027 ]
  store i32 %2051, i32* %169, align 4
  %2053 = add nsw i32 %2033, -1
  %2054 = zext i8 %2028 to i32
  %2055 = mul nsw i32 %2053, %2054
  %2056 = ashr i32 %2055, 8
  %2057 = add nsw i32 %2056, 1
  %2058 = shl i32 %2057, 16
  %2059 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2058, i32 %2057, i32 %2052, i32 0, i32 %2033, i32 %2052) #8, !srcloc !2
  %2060 = extractvalue { i32, i32, i32 } %2059, 0
  %2061 = extractvalue { i32, i32, i32 } %2059, 1
  %2062 = extractvalue { i32, i32, i32 } %2059, 2
  store i32 %2061, i32* %168, align 8
  store i32 %2062, i32* %170, align 8
  %2063 = icmp eq i32 %2060, 0
  br i1 %2063, label %2186, label %2064

2064:                                             ; preds = %2050, %2024
  %2065 = phi i32 [ %2062, %2050 ], [ %2018, %2024 ]
  %2066 = phi i32 [ %2051, %2050 ], [ %2007, %2024 ]
  %2067 = phi i32 [ %2061, %2050 ], [ %2017, %2024 ]
  %2068 = add nsw i32 %2021, 8
  br label %2186

2069:                                             ; preds = %1920
  store i32 %1922, i32* %170, align 8
  %2070 = load i8, i8* %216, align 1
  %2071 = sext i32 %1926 to i64
  %2072 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2071
  %2073 = load i8, i8* %2072, align 1
  %2074 = zext i8 %2073 to i32
  %2075 = shl i32 %1926, %2074
  store i32 %2075, i32* %168, align 8
  %2076 = shl i32 %1922, %2074
  %2077 = add nsw i32 %1921, %2074
  %2078 = icmp sgt i32 %2077, -1
  br i1 %2078, label %2079, label %2092

2079:                                             ; preds = %2069
  %2080 = load i8*, i8** %171, align 8
  %2081 = load i8*, i8** %172, align 8
  %2082 = icmp ult i8* %2080, %2081
  br i1 %2082, label %2083, label %2092

2083:                                             ; preds = %2079
  %2084 = getelementptr inbounds i8, i8* %2080, i64 2
  store i8* %2084, i8** %171, align 8
  %2085 = bitcast i8* %2080 to i16*
  %2086 = load i16, i16* %2085, align 1
  %2087 = call i16 @llvm.bswap.i16(i16 %2086) #7
  %2088 = zext i16 %2087 to i32
  %2089 = shl i32 %2088, %2077
  %2090 = or i32 %2089, %2076
  %2091 = add nsw i32 %2077, -16
  br label %2092

2092:                                             ; preds = %2083, %2079, %2069
  %2093 = phi i32 [ %2091, %2083 ], [ %2077, %2079 ], [ %2077, %2069 ]
  %2094 = phi i32 [ %2090, %2083 ], [ %2076, %2079 ], [ %2076, %2069 ]
  store i32 %2093, i32* %169, align 4
  %2095 = add nsw i32 %2075, -1
  %2096 = zext i8 %2070 to i32
  %2097 = mul nsw i32 %2095, %2096
  %2098 = ashr i32 %2097, 8
  %2099 = add nsw i32 %2098, 1
  %2100 = shl i32 %2099, 16
  %2101 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2100, i32 %2099, i32 %2094, i32 0, i32 %2075, i32 %2094) #8, !srcloc !2
  %2102 = extractvalue { i32, i32, i32 } %2101, 0
  %2103 = extractvalue { i32, i32, i32 } %2101, 1
  %2104 = extractvalue { i32, i32, i32 } %2101, 2
  store i32 %2103, i32* %168, align 8
  store i32 %2104, i32* %170, align 8
  %2105 = mul nsw i32 %2102, 3
  %2106 = add nsw i32 %2105, 1
  %2107 = sext i32 %2106 to i64
  %2108 = getelementptr inbounds i8, i8* %216, i64 %2107
  %2109 = shl i32 %2102, 2
  %2110 = load i8, i8* %2108, align 1
  %2111 = sext i32 %2103 to i64
  %2112 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2111
  %2113 = load i8, i8* %2112, align 1
  %2114 = zext i8 %2113 to i32
  %2115 = shl i32 %2103, %2114
  store i32 %2115, i32* %168, align 8
  %2116 = shl i32 %2104, %2114
  %2117 = add nsw i32 %2093, %2114
  %2118 = icmp sgt i32 %2117, -1
  br i1 %2118, label %2119, label %2132

2119:                                             ; preds = %2092
  %2120 = load i8*, i8** %171, align 8
  %2121 = load i8*, i8** %172, align 8
  %2122 = icmp ult i8* %2120, %2121
  br i1 %2122, label %2123, label %2132

2123:                                             ; preds = %2119
  %2124 = getelementptr inbounds i8, i8* %2120, i64 2
  store i8* %2124, i8** %171, align 8
  %2125 = bitcast i8* %2120 to i16*
  %2126 = load i16, i16* %2125, align 1
  %2127 = call i16 @llvm.bswap.i16(i16 %2126) #7
  %2128 = zext i16 %2127 to i32
  %2129 = shl i32 %2128, %2117
  %2130 = or i32 %2129, %2116
  %2131 = add nsw i32 %2117, -16
  br label %2132

2132:                                             ; preds = %2123, %2119, %2092
  %2133 = phi i32 [ %2131, %2123 ], [ %2117, %2119 ], [ %2117, %2092 ]
  %2134 = phi i32 [ %2130, %2123 ], [ %2116, %2119 ], [ %2116, %2092 ]
  store i32 %2133, i32* %169, align 4
  %2135 = add nsw i32 %2115, -1
  %2136 = zext i8 %2110 to i32
  %2137 = mul nsw i32 %2135, %2136
  %2138 = ashr i32 %2137, 8
  %2139 = add nsw i32 %2138, 1
  %2140 = shl i32 %2139, 16
  %2141 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2140, i32 %2139, i32 %2134, i32 0, i32 %2115, i32 %2134) #8, !srcloc !2
  %2142 = extractvalue { i32, i32, i32 } %2141, 0
  %2143 = extractvalue { i32, i32, i32 } %2141, 1
  %2144 = extractvalue { i32, i32, i32 } %2141, 2
  store i32 %2143, i32* %168, align 8
  store i32 %2144, i32* %170, align 8
  %2145 = add nsw i32 %2142, 1
  %2146 = sext i32 %2145 to i64
  %2147 = getelementptr inbounds i8, i8* %2108, i64 %2146
  %2148 = shl i32 %2142, 1
  %2149 = add nsw i32 %2148, %2109
  %2150 = load i8, i8* %2147, align 1
  %2151 = sext i32 %2143 to i64
  %2152 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2151
  %2153 = load i8, i8* %2152, align 1
  %2154 = zext i8 %2153 to i32
  %2155 = shl i32 %2143, %2154
  store i32 %2155, i32* %168, align 8
  %2156 = shl i32 %2144, %2154
  %2157 = add nsw i32 %2133, %2154
  %2158 = icmp sgt i32 %2157, -1
  br i1 %2158, label %2159, label %2172

2159:                                             ; preds = %2132
  %2160 = load i8*, i8** %171, align 8
  %2161 = load i8*, i8** %172, align 8
  %2162 = icmp ult i8* %2160, %2161
  br i1 %2162, label %2163, label %2172

2163:                                             ; preds = %2159
  %2164 = getelementptr inbounds i8, i8* %2160, i64 2
  store i8* %2164, i8** %171, align 8
  %2165 = bitcast i8* %2160 to i16*
  %2166 = load i16, i16* %2165, align 1
  %2167 = call i16 @llvm.bswap.i16(i16 %2166) #7
  %2168 = zext i16 %2167 to i32
  %2169 = shl i32 %2168, %2157
  %2170 = or i32 %2169, %2156
  %2171 = add nsw i32 %2157, -16
  br label %2172

2172:                                             ; preds = %2163, %2159, %2132
  %2173 = phi i32 [ %2171, %2163 ], [ %2157, %2159 ], [ %2157, %2132 ]
  %2174 = phi i32 [ %2170, %2163 ], [ %2156, %2159 ], [ %2156, %2132 ]
  store i32 %2173, i32* %169, align 4
  %2175 = add nsw i32 %2155, -1
  %2176 = zext i8 %2150 to i32
  %2177 = mul nsw i32 %2175, %2176
  %2178 = ashr i32 %2177, 8
  %2179 = add nsw i32 %2178, 1
  %2180 = shl i32 %2179, 16
  %2181 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2180, i32 %2179, i32 %2174, i32 0, i32 %2155, i32 %2174) #8, !srcloc !2
  %2182 = extractvalue { i32, i32, i32 } %2181, 0
  %2183 = extractvalue { i32, i32, i32 } %2181, 1
  %2184 = extractvalue { i32, i32, i32 } %2181, 2
  store i32 %2183, i32* %168, align 8
  store i32 %2184, i32* %170, align 8
  %2185 = add nsw i32 %2149, %2182
  br label %2186

2186:                                             ; preds = %2172, %2064, %2050
  %2187 = phi i32 [ %2184, %2172 ], [ %2065, %2064 ], [ %2062, %2050 ]
  %2188 = phi i32 [ %2173, %2172 ], [ %2066, %2064 ], [ %2051, %2050 ]
  %2189 = phi i32 [ %2183, %2172 ], [ %2067, %2064 ], [ %2061, %2050 ]
  %2190 = phi i32 [ %2185, %2172 ], [ %2068, %2064 ], [ %2021, %2050 ]
  %2191 = icmp eq i32 %2190, 0
  br i1 %2191, label %2296, label %2192

2192:                                             ; preds = %2186
  %2193 = load i8, i8* %217, align 1
  %2194 = sext i32 %2189 to i64
  %2195 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2194
  %2196 = load i8, i8* %2195, align 1
  %2197 = zext i8 %2196 to i32
  %2198 = shl i32 %2189, %2197
  store i32 %2198, i32* %168, align 8
  %2199 = shl i32 %2187, %2197
  %2200 = add nsw i32 %2188, %2197
  %2201 = icmp sgt i32 %2200, -1
  br i1 %2201, label %2202, label %2215

2202:                                             ; preds = %2192
  %2203 = load i8*, i8** %171, align 8
  %2204 = load i8*, i8** %172, align 8
  %2205 = icmp ult i8* %2203, %2204
  br i1 %2205, label %2206, label %2215

2206:                                             ; preds = %2202
  %2207 = getelementptr inbounds i8, i8* %2203, i64 2
  store i8* %2207, i8** %171, align 8
  %2208 = bitcast i8* %2203 to i16*
  %2209 = load i16, i16* %2208, align 1
  %2210 = call i16 @llvm.bswap.i16(i16 %2209) #7
  %2211 = zext i16 %2210 to i32
  %2212 = shl i32 %2211, %2200
  %2213 = or i32 %2212, %2199
  %2214 = add nsw i32 %2200, -16
  br label %2215

2215:                                             ; preds = %2206, %2202, %2192
  %2216 = phi i32 [ %2214, %2206 ], [ %2200, %2202 ], [ %2200, %2192 ]
  %2217 = phi i32 [ %2213, %2206 ], [ %2199, %2202 ], [ %2199, %2192 ]
  store i32 %2216, i32* %169, align 4
  %2218 = add nsw i32 %2198, -1
  %2219 = zext i8 %2193 to i32
  %2220 = mul nsw i32 %2218, %2219
  %2221 = ashr i32 %2220, 8
  %2222 = add nsw i32 %2221, 1
  %2223 = shl i32 %2222, 16
  %2224 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2223, i32 %2222, i32 %2217, i32 0, i32 %2198, i32 %2217) #8, !srcloc !2
  %2225 = extractvalue { i32, i32, i32 } %2224, 0
  %2226 = extractvalue { i32, i32, i32 } %2224, 1
  %2227 = extractvalue { i32, i32, i32 } %2224, 2
  store i32 %2226, i32* %168, align 8
  store i32 %2227, i32* %170, align 8
  %2228 = icmp eq i32 %2225, 0
  %2229 = sub nsw i32 0, %2190
  %2230 = select i1 %2228, i32 %2190, i32 %2229
  br label %2296

2231:                                             ; preds = %1954
  %2232 = load i8*, i8** %171, align 8
  %2233 = load i8*, i8** %172, align 8
  %2234 = icmp ult i8* %2232, %2233
  br i1 %2234, label %2235, label %2244

2235:                                             ; preds = %2231
  %2236 = getelementptr inbounds i8, i8* %2232, i64 2
  store i8* %2236, i8** %171, align 8
  %2237 = bitcast i8* %2232 to i16*
  %2238 = load i16, i16* %2237, align 1
  %2239 = call i16 @llvm.bswap.i16(i16 %2238) #7
  %2240 = zext i16 %2239 to i32
  %2241 = shl i32 %2240, %1974
  %2242 = or i32 %2241, %1973
  %2243 = add nsw i32 %1974, -16
  br label %2244

2244:                                             ; preds = %2235, %2231, %1954
  %2245 = phi i32 [ %2243, %2235 ], [ %1974, %2231 ], [ %1974, %1954 ]
  %2246 = phi i32 [ %2242, %2235 ], [ %1973, %2231 ], [ %1973, %1954 ]
  store i32 %2245, i32* %169, align 4
  %2247 = add nsw i32 %1972, -1
  %2248 = zext i8 %1967 to i32
  %2249 = mul nsw i32 %2247, %2248
  %2250 = ashr i32 %2249, 8
  %2251 = add nsw i32 %2250, 1
  %2252 = shl i32 %2251, 16
  %2253 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2252, i32 %2251, i32 %2246, i32 0, i32 %1972, i32 %2246) #8, !srcloc !2
  %2254 = extractvalue { i32, i32, i32 } %2253, 0
  %2255 = extractvalue { i32, i32, i32 } %2253, 1
  %2256 = extractvalue { i32, i32, i32 } %2253, 2
  store i32 %2256, i32* %170, align 8
  %2257 = shl i32 %2254, 1
  %2258 = add nsw i32 %2257, %1964
  %2259 = load i8, i8* %214, align 1
  %2260 = sext i32 %2255 to i64
  %2261 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2260
  %2262 = load i8, i8* %2261, align 1
  %2263 = zext i8 %2262 to i32
  %2264 = shl i32 %2255, %2263
  store i32 %2264, i32* %168, align 8
  %2265 = shl i32 %2256, %2263
  %2266 = add nsw i32 %2245, %2263
  %2267 = icmp sgt i32 %2266, -1
  br i1 %2267, label %2268, label %2281

2268:                                             ; preds = %2244
  %2269 = load i8*, i8** %171, align 8
  %2270 = load i8*, i8** %172, align 8
  %2271 = icmp ult i8* %2269, %2270
  br i1 %2271, label %2272, label %2281

2272:                                             ; preds = %2268
  %2273 = getelementptr inbounds i8, i8* %2269, i64 2
  store i8* %2273, i8** %171, align 8
  %2274 = bitcast i8* %2269 to i16*
  %2275 = load i16, i16* %2274, align 1
  %2276 = call i16 @llvm.bswap.i16(i16 %2275) #7
  %2277 = zext i16 %2276 to i32
  %2278 = shl i32 %2277, %2266
  %2279 = or i32 %2278, %2265
  %2280 = add nsw i32 %2266, -16
  br label %2281

2281:                                             ; preds = %2272, %2268, %2244
  %2282 = phi i32 [ %2280, %2272 ], [ %2266, %2268 ], [ %2266, %2244 ]
  %2283 = phi i32 [ %2279, %2272 ], [ %2265, %2268 ], [ %2265, %2244 ]
  store i32 %2282, i32* %169, align 4
  %2284 = add nsw i32 %2264, -1
  %2285 = zext i8 %2259 to i32
  %2286 = mul nsw i32 %2284, %2285
  %2287 = ashr i32 %2286, 8
  %2288 = add nsw i32 %2287, 1
  %2289 = shl i32 %2288, 16
  %2290 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2289, i32 %2288, i32 %2283, i32 0, i32 %2264, i32 %2283) #8, !srcloc !2
  %2291 = extractvalue { i32, i32, i32 } %2290, 0
  %2292 = extractvalue { i32, i32, i32 } %2290, 1
  %2293 = extractvalue { i32, i32, i32 } %2290, 2
  store i32 %2292, i32* %168, align 8
  store i32 %2293, i32* %170, align 8
  %2294 = shl i32 %2291, 2
  %2295 = add nsw i32 %2258, %2294
  br label %1976

2296:                                             ; preds = %2215, %2186
  %2297 = phi i32 [ %2230, %2215 ], [ 0, %2186 ]
  %2298 = trunc i32 %2297 to i16
  %2299 = add i16 %1893, %2298
  %2300 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %1326, i32 0
  store i16 %2299, i16* %2300, align 4
  br label %2310

2301:                                             ; preds = %1476
  store i32 %1482, i32* %168, align 8
  store i32 %1478, i32* %170, align 8
  %2302 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %1326
  %2303 = bitcast %struct.VP56mv* %2302 to i32*
  store i32 0, i32* %2303, align 4
  br label %2310

2304:                                             ; preds = %1440
  store i32 %1446, i32* %168, align 8
  store i32 %1442, i32* %170, align 8
  %2305 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %1326
  %2306 = bitcast %struct.VP56mv* %2305 to i32*
  store i32 %1364, i32* %2306, align 4
  br label %2310

2307:                                             ; preds = %1404
  store i32 %1410, i32* %168, align 8
  store i32 %1406, i32* %170, align 8
  %2308 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %1326
  %2309 = bitcast %struct.VP56mv* %2308 to i32*
  store i32 %1347, i32* %2309, align 4
  br label %2310

2310:                                             ; preds = %2307, %2304, %2301, %2296
  %2311 = add nuw nsw i64 %1326, 1
  %2312 = icmp ult i64 %2311, %1324
  br i1 %2312, label %1325, label %2313

2313:                                             ; preds = %2310
  %2314 = add nsw i64 %1324, -1
  %2315 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %2314
  %2316 = bitcast %struct.VP56mv* %2315 to i32*
  %2317 = bitcast %struct.VP56mv* %1112 to i32*
  %2318 = load i32, i32* %2316, align 4
  store i32 %2318, i32* %2317, align 4
  br label %2422

2319:                                             ; preds = %1195
  store i32 %1201, i32* %168, align 8
  store i32 %1197, i32* %170, align 8
  %2320 = call fastcc i32 @vp8_read_mv_component(%struct.VP56RangeCoder* %165, i8* %204) #7
  %2321 = load i16, i16* %1152, align 2
  %2322 = trunc i32 %2320 to i16
  %2323 = add i16 %2321, %2322
  store i16 %2323, i16* %1152, align 2
  %2324 = call fastcc i32 @vp8_read_mv_component(%struct.VP56RangeCoder* %165, i8* %211) #7
  %2325 = load i16, i16* %1133, align 4
  %2326 = trunc i32 %2324 to i16
  %2327 = add i16 %2325, %2326
  store i16 %2327, i16* %1133, align 4
  %2328 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %2329 = bitcast %struct.VP56mv* %1112 to i32*
  %2330 = bitcast %struct.VP56mv* %2328 to i32*
  %2331 = load i32, i32* %2329, align 4
  store i32 %2331, i32* %2330, align 4
  br label %2422

2332:                                             ; preds = %1100
  store i32 %1106, i32* %168, align 8
  store i32 %1102, i32* %170, align 8
  %2333 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9
  %2334 = load i16, i16* %189, align 8
  %2335 = sext i16 %2334 to i32
  %2336 = load i32, i32* %143, align 4
  %2337 = icmp slt i32 %2336, 32767
  %2338 = select i1 %2337, i32 %2336, i32 32767
  %2339 = icmp sgt i32 %2338, -32768
  %2340 = select i1 %2339, i32 %2338, i32 -32768
  %2341 = load i32, i32* %147, align 4
  %2342 = icmp slt i32 %2341, 32767
  %2343 = select i1 %2342, i32 %2341, i32 32767
  %2344 = icmp sgt i32 %2343, -32768
  %2345 = select i1 %2344, i32 %2343, i32 -32768
  %2346 = icmp sgt i32 %2340, %2335
  %2347 = icmp slt i32 %2345, %2335
  %2348 = select i1 %2347, i32 %2345, i32 %2335
  %2349 = select i1 %2346, i32 %2340, i32 %2348
  %2350 = trunc i32 %2349 to i16
  %2351 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %2333, i64 0, i32 0
  store i16 %2350, i16* %2351, align 4
  %2352 = load i16, i16* %190, align 2
  %2353 = sext i16 %2352 to i32
  %2354 = load i32, i32* %202, align 4
  %2355 = icmp slt i32 %2354, 32767
  %2356 = select i1 %2355, i32 %2354, i32 32767
  %2357 = icmp sgt i32 %2356, -32768
  %2358 = select i1 %2357, i32 %2356, i32 -32768
  %2359 = load i32, i32* %203, align 4
  %2360 = icmp slt i32 %2359, 32767
  %2361 = select i1 %2360, i32 %2359, i32 32767
  %2362 = icmp sgt i32 %2361, -32768
  %2363 = select i1 %2362, i32 %2361, i32 -32768
  %2364 = icmp sgt i32 %2358, %2353
  %2365 = icmp slt i32 %2363, %2353
  %2366 = select i1 %2365, i32 %2363, i32 %2353
  %2367 = select i1 %2364, i32 %2358, i32 %2366
  %2368 = trunc i32 %2367 to i16
  %2369 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  store i16 %2368, i16* %2369, align 2
  %2370 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %2371 = bitcast %struct.VP56mv* %2333 to i32*
  %2372 = bitcast %struct.VP56mv* %2370 to i32*
  %2373 = load i32, i32* %2371, align 4
  store i32 %2373, i32* %2372, align 4
  br label %2422

2374:                                             ; preds = %1064
  store i32 %1070, i32* %168, align 8
  store i32 %1066, i32* %170, align 8
  %2375 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9
  %2376 = load i16, i16* %186, align 4
  %2377 = sext i16 %2376 to i32
  %2378 = load i32, i32* %143, align 4
  %2379 = icmp slt i32 %2378, 32767
  %2380 = select i1 %2379, i32 %2378, i32 32767
  %2381 = icmp sgt i32 %2380, -32768
  %2382 = select i1 %2381, i32 %2380, i32 -32768
  %2383 = load i32, i32* %147, align 4
  %2384 = icmp slt i32 %2383, 32767
  %2385 = select i1 %2384, i32 %2383, i32 32767
  %2386 = icmp sgt i32 %2385, -32768
  %2387 = select i1 %2386, i32 %2385, i32 -32768
  %2388 = icmp sgt i32 %2382, %2377
  %2389 = icmp slt i32 %2387, %2377
  %2390 = select i1 %2389, i32 %2387, i32 %2377
  %2391 = select i1 %2388, i32 %2382, i32 %2390
  %2392 = trunc i32 %2391 to i16
  %2393 = getelementptr inbounds %struct.VP56mv, %struct.VP56mv* %2375, i64 0, i32 0
  store i16 %2392, i16* %2393, align 4
  %2394 = load i16, i16* %187, align 2
  %2395 = sext i16 %2394 to i32
  %2396 = load i32, i32* %202, align 4
  %2397 = icmp slt i32 %2396, 32767
  %2398 = select i1 %2397, i32 %2396, i32 32767
  %2399 = icmp sgt i32 %2398, -32768
  %2400 = select i1 %2399, i32 %2398, i32 -32768
  %2401 = load i32, i32* %203, align 4
  %2402 = icmp slt i32 %2401, 32767
  %2403 = select i1 %2402, i32 %2401, i32 32767
  %2404 = icmp sgt i32 %2403, -32768
  %2405 = select i1 %2404, i32 %2403, i32 -32768
  %2406 = icmp sgt i32 %2400, %2395
  %2407 = icmp slt i32 %2405, %2395
  %2408 = select i1 %2407, i32 %2405, i32 %2395
  %2409 = select i1 %2406, i32 %2400, i32 %2408
  %2410 = trunc i32 %2409 to i16
  %2411 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  store i16 %2410, i16* %2411, align 2
  %2412 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %2413 = bitcast %struct.VP56mv* %2375 to i32*
  %2414 = bitcast %struct.VP56mv* %2412 to i32*
  %2415 = load i32, i32* %2413, align 4
  store i32 %2415, i32* %2414, align 4
  br label %2422

2416:                                             ; preds = %1004
  store i32 %1010, i32* %168, align 8
  store i32 %1006, i32* %170, align 8
  %2417 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  store i8 5, i8* %2417, align 1
  %2418 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9
  %2419 = bitcast %struct.VP56mv* %2418 to i32*
  store i32 0, i32* %2419, align 4
  %2420 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %2421 = bitcast %struct.VP56mv* %2420 to i32*
  store i32 0, i32* %2421, align 4
  br label %2422

2422:                                             ; preds = %2416, %2374, %2332, %2319, %2313
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %192) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %184) #7
  br label %2590

2423:                                             ; preds = %772
  store i32 %778, i32* %168, align 8
  store i32 %774, i32* %170, align 8
  br label %2424

2424:                                             ; preds = %2452, %2423
  %2425 = phi i32 [ %774, %2423 ], [ %2464, %2452 ]
  %2426 = phi i32 [ %773, %2423 ], [ %2453, %2452 ]
  %2427 = phi i32 [ %778, %2423 ], [ %2463, %2452 ]
  %2428 = phi i64 [ 0, %2423 ], [ %2468, %2452 ]
  %2429 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 5, i64 %2428
  %2430 = load i8, i8* %2429, align 1
  %2431 = sext i32 %2427 to i64
  %2432 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2431
  %2433 = load i8, i8* %2432, align 1
  %2434 = zext i8 %2433 to i32
  %2435 = shl i32 %2427, %2434
  store i32 %2435, i32* %168, align 8
  %2436 = shl i32 %2425, %2434
  %2437 = add nsw i32 %2426, %2434
  %2438 = icmp sgt i32 %2437, -1
  br i1 %2438, label %2439, label %2452

2439:                                             ; preds = %2424
  %2440 = load i8*, i8** %171, align 8
  %2441 = load i8*, i8** %172, align 8
  %2442 = icmp ult i8* %2440, %2441
  br i1 %2442, label %2443, label %2452

2443:                                             ; preds = %2439
  %2444 = getelementptr inbounds i8, i8* %2440, i64 2
  store i8* %2444, i8** %171, align 8
  %2445 = bitcast i8* %2440 to i16*
  %2446 = load i16, i16* %2445, align 1
  %2447 = call i16 @llvm.bswap.i16(i16 %2446) #7
  %2448 = zext i16 %2447 to i32
  %2449 = shl i32 %2448, %2437
  %2450 = or i32 %2449, %2436
  %2451 = add nsw i32 %2437, -16
  br label %2452

2452:                                             ; preds = %2443, %2439, %2424
  %2453 = phi i32 [ %2451, %2443 ], [ %2437, %2439 ], [ %2437, %2424 ]
  %2454 = phi i32 [ %2450, %2443 ], [ %2436, %2439 ], [ %2436, %2424 ]
  store i32 %2453, i32* %169, align 4
  %2455 = add nsw i32 %2435, -1
  %2456 = zext i8 %2430 to i32
  %2457 = mul nsw i32 %2455, %2456
  %2458 = ashr i32 %2457, 8
  %2459 = add nsw i32 %2458, 1
  %2460 = shl i32 %2459, 16
  %2461 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2460, i32 %2459, i32 %2454, i32 0, i32 %2435, i32 %2454) #8, !srcloc !2
  %2462 = extractvalue { i32, i32, i32 } %2461, 0
  %2463 = extractvalue { i32, i32, i32 } %2461, 1
  %2464 = extractvalue { i32, i32, i32 } %2461, 2
  store i32 %2463, i32* %168, align 8
  store i32 %2464, i32* %170, align 8
  %2465 = sext i32 %2462 to i64
  %2466 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @vp8_pred16x16_tree_inter, i64 0, i64 %2428, i64 %2465
  %2467 = load i8, i8* %2466, align 1
  %2468 = sext i8 %2467 to i64
  %2469 = icmp sgt i8 %2467, 0
  br i1 %2469, label %2424, label %2470

2470:                                             ; preds = %2452
  %2471 = sext i8 %2467 to i32
  %2472 = sub nsw i32 0, %2471
  %2473 = trunc i32 %2472 to i8
  %2474 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  store i8 %2473, i8* %2474, align 1
  %2475 = and i32 %2472, 255
  %2476 = icmp eq i32 %2475, 4
  br i1 %2476, label %2477, label %2533

2477:                                             ; preds = %2470, %2528
  %2478 = phi i64 [ %2531, %2528 ], [ 0, %2470 ]
  %2479 = load i32, i32* %168, align 8
  %2480 = load i32, i32* %169, align 4
  %2481 = load i32, i32* %170, align 8
  br label %2482

2482:                                             ; preds = %2510, %2477
  %2483 = phi i32 [ %2481, %2477 ], [ %2522, %2510 ]
  %2484 = phi i32 [ %2480, %2477 ], [ %2511, %2510 ]
  %2485 = phi i32 [ %2479, %2477 ], [ %2521, %2510 ]
  %2486 = phi i64 [ 0, %2477 ], [ %2526, %2510 ]
  %2487 = getelementptr inbounds [9 x i8], [9 x i8]* @vp8_pred4x4_prob_inter, i64 0, i64 %2486
  %2488 = load i8, i8* %2487, align 1
  %2489 = sext i32 %2485 to i64
  %2490 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2489
  %2491 = load i8, i8* %2490, align 1
  %2492 = zext i8 %2491 to i32
  %2493 = shl i32 %2485, %2492
  store i32 %2493, i32* %168, align 8
  %2494 = shl i32 %2483, %2492
  %2495 = add nsw i32 %2484, %2492
  %2496 = icmp sgt i32 %2495, -1
  br i1 %2496, label %2497, label %2510

2497:                                             ; preds = %2482
  %2498 = load i8*, i8** %171, align 8
  %2499 = load i8*, i8** %172, align 8
  %2500 = icmp ult i8* %2498, %2499
  br i1 %2500, label %2501, label %2510

2501:                                             ; preds = %2497
  %2502 = getelementptr inbounds i8, i8* %2498, i64 2
  store i8* %2502, i8** %171, align 8
  %2503 = bitcast i8* %2498 to i16*
  %2504 = load i16, i16* %2503, align 1
  %2505 = call i16 @llvm.bswap.i16(i16 %2504) #7
  %2506 = zext i16 %2505 to i32
  %2507 = shl i32 %2506, %2495
  %2508 = or i32 %2507, %2494
  %2509 = add nsw i32 %2495, -16
  br label %2510

2510:                                             ; preds = %2501, %2497, %2482
  %2511 = phi i32 [ %2509, %2501 ], [ %2495, %2497 ], [ %2495, %2482 ]
  %2512 = phi i32 [ %2508, %2501 ], [ %2494, %2497 ], [ %2494, %2482 ]
  store i32 %2511, i32* %169, align 4
  %2513 = add nsw i32 %2493, -1
  %2514 = zext i8 %2488 to i32
  %2515 = mul nsw i32 %2513, %2514
  %2516 = ashr i32 %2515, 8
  %2517 = add nsw i32 %2516, 1
  %2518 = shl i32 %2517, 16
  %2519 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2518, i32 %2517, i32 %2512, i32 0, i32 %2493, i32 %2512) #8, !srcloc !2
  %2520 = extractvalue { i32, i32, i32 } %2519, 0
  %2521 = extractvalue { i32, i32, i32 } %2519, 1
  %2522 = extractvalue { i32, i32, i32 } %2519, 2
  store i32 %2521, i32* %168, align 8
  store i32 %2522, i32* %170, align 8
  %2523 = sext i32 %2520 to i64
  %2524 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @vp8_pred4x4_tree, i64 0, i64 %2486, i64 %2523
  %2525 = load i8, i8* %2524, align 1
  %2526 = sext i8 %2525 to i64
  %2527 = icmp sgt i8 %2525, 0
  br i1 %2527, label %2482, label %2528

2528:                                             ; preds = %2510
  %2529 = sub i8 0, %2525
  %2530 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 6, i64 %2478
  store i8 %2529, i8* %2530, align 1
  %2531 = add nuw nsw i64 %2478, 1
  %2532 = icmp eq i64 %2531, 16
  br i1 %2532, label %2533, label %2477

2533:                                             ; preds = %2528, %2470
  %2534 = load i32, i32* %168, align 8
  %2535 = load i32, i32* %169, align 4
  %2536 = load i32, i32* %170, align 8
  br label %2537

2537:                                             ; preds = %2565, %2533
  %2538 = phi i32 [ %2536, %2533 ], [ %2577, %2565 ]
  %2539 = phi i32 [ %2535, %2533 ], [ %2566, %2565 ]
  %2540 = phi i32 [ %2534, %2533 ], [ %2576, %2565 ]
  %2541 = phi i64 [ 0, %2533 ], [ %2581, %2565 ]
  %2542 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 6, i64 %2541
  %2543 = load i8, i8* %2542, align 1
  %2544 = sext i32 %2540 to i64
  %2545 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2544
  %2546 = load i8, i8* %2545, align 1
  %2547 = zext i8 %2546 to i32
  %2548 = shl i32 %2540, %2547
  store i32 %2548, i32* %168, align 8
  %2549 = shl i32 %2538, %2547
  %2550 = add nsw i32 %2539, %2547
  %2551 = icmp sgt i32 %2550, -1
  br i1 %2551, label %2552, label %2565

2552:                                             ; preds = %2537
  %2553 = load i8*, i8** %171, align 8
  %2554 = load i8*, i8** %172, align 8
  %2555 = icmp ult i8* %2553, %2554
  br i1 %2555, label %2556, label %2565

2556:                                             ; preds = %2552
  %2557 = getelementptr inbounds i8, i8* %2553, i64 2
  store i8* %2557, i8** %171, align 8
  %2558 = bitcast i8* %2553 to i16*
  %2559 = load i16, i16* %2558, align 1
  %2560 = call i16 @llvm.bswap.i16(i16 %2559) #7
  %2561 = zext i16 %2560 to i32
  %2562 = shl i32 %2561, %2550
  %2563 = or i32 %2562, %2549
  %2564 = add nsw i32 %2550, -16
  br label %2565

2565:                                             ; preds = %2556, %2552, %2537
  %2566 = phi i32 [ %2564, %2556 ], [ %2550, %2552 ], [ %2550, %2537 ]
  %2567 = phi i32 [ %2563, %2556 ], [ %2549, %2552 ], [ %2549, %2537 ]
  store i32 %2566, i32* %169, align 4
  %2568 = add nsw i32 %2548, -1
  %2569 = zext i8 %2543 to i32
  %2570 = mul nsw i32 %2568, %2569
  %2571 = ashr i32 %2570, 8
  %2572 = add nsw i32 %2571, 1
  %2573 = shl i32 %2572, 16
  %2574 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2573, i32 %2572, i32 %2567, i32 0, i32 %2548, i32 %2567) #8, !srcloc !2
  %2575 = extractvalue { i32, i32, i32 } %2574, 0
  %2576 = extractvalue { i32, i32, i32 } %2574, 1
  %2577 = extractvalue { i32, i32, i32 } %2574, 2
  store i32 %2576, i32* %168, align 8
  store i32 %2577, i32* %170, align 8
  %2578 = sext i32 %2575 to i64
  %2579 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @vp8_pred8x8c_tree, i64 0, i64 %2541, i64 %2578
  %2580 = load i8, i8* %2579, align 1
  %2581 = sext i8 %2580 to i64
  %2582 = icmp sgt i8 %2580, 0
  br i1 %2582, label %2537, label %2583

2583:                                             ; preds = %2565
  %2584 = sub i8 0, %2580
  %2585 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 4
  store i8 %2584, i8* %2585, align 4
  %2586 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  store i8 0, i8* %2586, align 2
  %2587 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 3
  store i8 4, i8* %2587, align 1
  %2588 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %2589 = bitcast %struct.VP56mv* %2588 to i32*
  store i32 0, i32* %2589, align 4
  br label %2590

2590:                                             ; preds = %2583, %2422, %741, %365
  %2591 = load i32, i32* %218, align 4
  %2592 = trunc i64 %311 to i32
  %2593 = ashr i32 %2592, 5
  %2594 = icmp sgt i32 %2591, %2593
  br i1 %2594, label %2595, label %2640

2595:                                             ; preds = %2590
  %2596 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 0
  %2597 = load i16, i16* %2596, align 4
  %2598 = ashr i16 %2597, 2
  %2599 = sext i16 %2598 to i32
  %2600 = shl i32 %331, 4
  %2601 = or i32 %2600, 8
  %2602 = add i32 %2601, %2599
  %2603 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  %2604 = load i16, i16* %2603, align 2
  %2605 = ashr i16 %2604, 2
  %2606 = sext i16 %2605 to i32
  %2607 = add nsw i32 %43, %2606
  %2608 = load %struct.VP8Frame*, %struct.VP8Frame** %219, align 8
  %2609 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %2608, i64 0, i32 0, i32 0
  %2610 = load %struct.AVFrame*, %struct.AVFrame** %2609, align 8
  %2611 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2610, i64 0, i32 0, i64 0
  %2612 = add nsw i32 %2607, %370
  %2613 = load i64, i64* %45, align 8
  %2614 = trunc i64 %2613 to i32
  %2615 = mul i32 %2612, %2614
  %2616 = add i32 %2602, 64
  %2617 = add i32 %2616, %2615
  %2618 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %2619 = load i8*, i8** %2611, align 8
  %2620 = sext i32 %2617 to i64
  %2621 = getelementptr inbounds i8, i8* %2619, i64 %2620
  call void %2618(i8* %2621, i64 %2613, i32 4) #7
  %2622 = ashr i32 %2602, 1
  %2623 = ashr i32 %2607, 1
  %2624 = add nsw i32 %2623, %378
  %2625 = load i64, i64* %53, align 8
  %2626 = trunc i64 %2625 to i32
  %2627 = mul i32 %2624, %2626
  %2628 = add nsw i32 %2622, 64
  %2629 = add i32 %2628, %2627
  %2630 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %2631 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2610, i64 0, i32 0, i64 1
  %2632 = load i8*, i8** %2631, align 8
  %2633 = sext i32 %2629 to i64
  %2634 = getelementptr inbounds i8, i8* %2632, i64 %2633
  %2635 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2610, i64 0, i32 0, i64 2
  %2636 = bitcast i8** %2635 to i64*
  %2637 = load i64, i64* %2636, align 8
  %2638 = ptrtoint i8* %2632 to i64
  %2639 = sub i64 %2637, %2638
  call void %2630(i8* %2634, i64 %2639, i32 2) #7
  br label %2640

2640:                                             ; preds = %2595, %2590
  %2641 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 0
  %2642 = load i8, i8* %2641, align 4
  %2643 = icmp eq i8 %2642, 0
  br i1 %2643, label %2644, label %4705

2644:                                             ; preds = %2640
  %2645 = load [9 x i8]*, [9 x i8]** %220, align 8
  %2646 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 5
  %2647 = load i8, i8* %2646, align 1
  %2648 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  %2649 = load i8, i8* %2648, align 1
  switch i8 %2649, label %2650 [
    i8 4, label %3321
    i8 7, label %3321
  ]

2650:                                             ; preds = %2644
  %2651 = getelementptr inbounds [9 x i8], [9 x i8]* %2645, i64 %312, i64 8
  %2652 = load i8, i8* %2651, align 1
  %2653 = zext i8 %2652 to i64
  %2654 = load i8, i8* %221, align 1
  %2655 = zext i8 %2654 to i64
  %2656 = add nuw nsw i64 %2655, %2653
  %2657 = zext i8 %2647 to i64
  %2658 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 1, i64 0, i64 %2656, i64 0
  %2659 = load i8, i8* %2658, align 1
  %2660 = zext i8 %2659 to i32
  %2661 = load i32, i32* %223, align 8
  %2662 = sext i32 %2661 to i64
  %2663 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2662
  %2664 = load i8, i8* %2663, align 1
  %2665 = zext i8 %2664 to i32
  %2666 = load i32, i32* %151, align 4
  %2667 = load i32, i32* %224, align 8
  %2668 = shl i32 %2661, %2665
  store i32 %2668, i32* %223, align 8
  %2669 = shl i32 %2667, %2665
  %2670 = add nsw i32 %2666, %2665
  %2671 = icmp sgt i32 %2670, -1
  br i1 %2671, label %2672, label %2685

2672:                                             ; preds = %2650
  %2673 = load i8*, i8** %62, align 8
  %2674 = load i8*, i8** %60, align 8
  %2675 = icmp ult i8* %2673, %2674
  br i1 %2675, label %2676, label %2685

2676:                                             ; preds = %2672
  %2677 = getelementptr inbounds i8, i8* %2673, i64 2
  store i8* %2677, i8** %62, align 8
  %2678 = bitcast i8* %2673 to i16*
  %2679 = load i16, i16* %2678, align 1
  %2680 = call i16 @llvm.bswap.i16(i16 %2679) #7
  %2681 = zext i16 %2680 to i32
  %2682 = shl i32 %2681, %2670
  %2683 = or i32 %2682, %2669
  %2684 = add nsw i32 %2670, -16
  br label %2685

2685:                                             ; preds = %2676, %2672, %2650
  %2686 = phi i32 [ %2684, %2676 ], [ %2670, %2672 ], [ %2670, %2650 ]
  %2687 = phi i32 [ %2683, %2676 ], [ %2669, %2672 ], [ %2669, %2650 ]
  store i32 %2686, i32* %151, align 4
  %2688 = add nsw i32 %2668, -1
  %2689 = mul nsw i32 %2688, %2660
  %2690 = ashr i32 %2689, 8
  %2691 = add nsw i32 %2690, 1
  %2692 = shl i32 %2691, 16
  %2693 = icmp ult i32 %2687, %2692
  br i1 %2693, label %2694, label %2695

2694:                                             ; preds = %2685
  store i32 %2691, i32* %223, align 8
  store i32 %2687, i32* %224, align 8
  store i8 0, i8* %2651, align 1
  store i8 0, i8* %221, align 1
  br label %3321

2695:                                             ; preds = %2685
  %2696 = sub i32 %2668, %2691
  store i32 %2696, i32* %223, align 8
  %2697 = sub i32 %2687, %2692
  store i32 %2697, i32* %224, align 8
  %2698 = load i8*, i8** %62, align 8
  %2699 = load i8*, i8** %60, align 8
  %2700 = load i32, i32* %74, align 4
  br label %2736

2701:                                             ; preds = %3280
  %2702 = load i8, i8* %3260, align 1
  %2703 = zext i8 %2702 to i32
  %2704 = sext i32 %3291 to i64
  %2705 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2704
  %2706 = load i8, i8* %2705, align 1
  %2707 = zext i8 %2706 to i32
  %2708 = shl i32 %3291, %2707
  %2709 = shl i32 %3292, %2707
  %2710 = add nsw i32 %3282, %2707
  %2711 = icmp sgt i32 %2710, -1
  %2712 = icmp ult i8* %3281, %2699
  %2713 = and i1 %2712, %2711
  br i1 %2713, label %2714, label %2723

2714:                                             ; preds = %2701
  %2715 = getelementptr inbounds i8, i8* %3281, i64 2
  %2716 = bitcast i8* %3281 to i16*
  %2717 = load i16, i16* %2716, align 1
  %2718 = call i16 @llvm.bswap.i16(i16 %2717) #7
  %2719 = zext i16 %2718 to i32
  %2720 = shl i32 %2719, %2710
  %2721 = or i32 %2720, %2709
  %2722 = add nsw i32 %2710, -16
  br label %2723

2723:                                             ; preds = %2714, %2701
  %2724 = phi i8* [ %2715, %2714 ], [ %3281, %2701 ]
  %2725 = phi i32 [ %2722, %2714 ], [ %2710, %2701 ]
  %2726 = phi i32 [ %2721, %2714 ], [ %2709, %2701 ]
  %2727 = add nsw i32 %2708, -1
  %2728 = mul nsw i32 %2727, %2703
  %2729 = ashr i32 %2728, 8
  %2730 = add nsw i32 %2729, 1
  %2731 = shl i32 %2730, 16
  %2732 = icmp ult i32 %2726, %2731
  br i1 %2732, label %3309, label %2733

2733:                                             ; preds = %2723
  %2734 = sub i32 %2708, %2730
  %2735 = sub i32 %2726, %2731
  br label %2782

2736:                                             ; preds = %2782, %2695
  %2737 = phi i32 [ %2697, %2695 ], [ %2783, %2782 ]
  %2738 = phi i8* [ %2698, %2695 ], [ %2784, %2782 ]
  %2739 = phi i32 [ %2686, %2695 ], [ %2785, %2782 ]
  %2740 = phi i32 [ %2696, %2695 ], [ %2786, %2782 ]
  %2741 = phi i8* [ %2658, %2695 ], [ %2787, %2782 ]
  %2742 = phi i32 [ 0, %2695 ], [ %2788, %2782 ]
  %2743 = getelementptr inbounds i8, i8* %2741, i64 1
  %2744 = load i8, i8* %2743, align 1
  %2745 = zext i8 %2744 to i32
  %2746 = sext i32 %2740 to i64
  %2747 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2746
  %2748 = load i8, i8* %2747, align 1
  %2749 = zext i8 %2748 to i32
  %2750 = shl i32 %2740, %2749
  %2751 = shl i32 %2737, %2749
  %2752 = add nsw i32 %2739, %2749
  %2753 = icmp sgt i32 %2752, -1
  %2754 = icmp ult i8* %2738, %2699
  %2755 = and i1 %2754, %2753
  br i1 %2755, label %2756, label %2765

2756:                                             ; preds = %2736
  %2757 = getelementptr inbounds i8, i8* %2738, i64 2
  %2758 = bitcast i8* %2738 to i16*
  %2759 = load i16, i16* %2758, align 1
  %2760 = call i16 @llvm.bswap.i16(i16 %2759) #7
  %2761 = zext i16 %2760 to i32
  %2762 = shl i32 %2761, %2752
  %2763 = or i32 %2762, %2751
  %2764 = add nsw i32 %2752, -16
  br label %2765

2765:                                             ; preds = %2756, %2736
  %2766 = phi i8* [ %2757, %2756 ], [ %2738, %2736 ]
  %2767 = phi i32 [ %2764, %2756 ], [ %2752, %2736 ]
  %2768 = phi i32 [ %2763, %2756 ], [ %2751, %2736 ]
  %2769 = add nsw i32 %2750, -1
  %2770 = mul nsw i32 %2769, %2745
  %2771 = ashr i32 %2770, 8
  %2772 = add nsw i32 %2771, 1
  %2773 = shl i32 %2772, 16
  %2774 = icmp ult i32 %2768, %2773
  br i1 %2774, label %2775, label %2789

2775:                                             ; preds = %2765
  %2776 = add nsw i32 %2742, 1
  %2777 = icmp eq i32 %2776, 16
  br i1 %2777, label %2778, label %2779

2778:                                             ; preds = %2775
  store i32 %2772, i32* %223, align 8
  store i32 %2767, i32* %151, align 4
  store i8* %2766, i8** %62, align 8
  store i8* %2699, i8** %60, align 8
  store i32 %2768, i32* %224, align 8
  store i32 %2700, i32* %74, align 4
  store i8 1, i8* %2651, align 1
  store i8 1, i8* %221, align 1
  br label %3318

2779:                                             ; preds = %2775
  %2780 = sext i32 %2776 to i64
  %2781 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 1, i64 %2780, i64 0, i64 0
  br label %2782

2782:                                             ; preds = %2779, %2733
  %2783 = phi i32 [ %2768, %2779 ], [ %2735, %2733 ]
  %2784 = phi i8* [ %2766, %2779 ], [ %2724, %2733 ]
  %2785 = phi i32 [ %2767, %2779 ], [ %2725, %2733 ]
  %2786 = phi i32 [ %2772, %2779 ], [ %2734, %2733 ]
  %2787 = phi i8* [ %2781, %2779 ], [ %3260, %2733 ]
  %2788 = phi i32 [ %2776, %2779 ], [ %3307, %2733 ]
  br label %2736

2789:                                             ; preds = %2765
  %2790 = sub i32 %2750, %2772
  %2791 = sub i32 %2768, %2773
  %2792 = getelementptr inbounds i8, i8* %2741, i64 2
  %2793 = load i8, i8* %2792, align 1
  %2794 = zext i8 %2793 to i32
  %2795 = sext i32 %2790 to i64
  %2796 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2795
  %2797 = load i8, i8* %2796, align 1
  %2798 = zext i8 %2797 to i32
  %2799 = shl i32 %2790, %2798
  %2800 = shl i32 %2791, %2798
  %2801 = add nsw i32 %2767, %2798
  %2802 = icmp sgt i32 %2801, -1
  %2803 = icmp ult i8* %2766, %2699
  %2804 = and i1 %2803, %2802
  br i1 %2804, label %2805, label %2814

2805:                                             ; preds = %2789
  %2806 = getelementptr inbounds i8, i8* %2766, i64 2
  %2807 = bitcast i8* %2766 to i16*
  %2808 = load i16, i16* %2807, align 1
  %2809 = call i16 @llvm.bswap.i16(i16 %2808) #7
  %2810 = zext i16 %2809 to i32
  %2811 = shl i32 %2810, %2801
  %2812 = or i32 %2811, %2800
  %2813 = add nsw i32 %2801, -16
  br label %2814

2814:                                             ; preds = %2805, %2789
  %2815 = phi i8* [ %2806, %2805 ], [ %2766, %2789 ]
  %2816 = phi i32 [ %2813, %2805 ], [ %2801, %2789 ]
  %2817 = phi i32 [ %2812, %2805 ], [ %2800, %2789 ]
  %2818 = add nsw i32 %2799, -1
  %2819 = mul nsw i32 %2818, %2794
  %2820 = ashr i32 %2819, 8
  %2821 = add nsw i32 %2820, 1
  %2822 = shl i32 %2821, 16
  %2823 = icmp ult i32 %2817, %2822
  br i1 %2823, label %2824, label %2828

2824:                                             ; preds = %2814
  %2825 = add nsw i32 %2742, 1
  %2826 = sext i32 %2825 to i64
  %2827 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 1, i64 %2826, i64 1, i64 0
  br label %3254

2828:                                             ; preds = %2814
  %2829 = sub i32 %2799, %2821
  %2830 = sub i32 %2817, %2822
  %2831 = getelementptr inbounds i8, i8* %2741, i64 3
  %2832 = load i8, i8* %2831, align 1
  %2833 = zext i8 %2832 to i32
  %2834 = sext i32 %2829 to i64
  %2835 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2834
  %2836 = load i8, i8* %2835, align 1
  %2837 = zext i8 %2836 to i32
  %2838 = shl i32 %2829, %2837
  %2839 = shl i32 %2830, %2837
  %2840 = add nsw i32 %2816, %2837
  %2841 = icmp sgt i32 %2840, -1
  %2842 = icmp ult i8* %2815, %2699
  %2843 = and i1 %2842, %2841
  br i1 %2843, label %2844, label %2853

2844:                                             ; preds = %2828
  %2845 = getelementptr inbounds i8, i8* %2815, i64 2
  %2846 = bitcast i8* %2815 to i16*
  %2847 = load i16, i16* %2846, align 1
  %2848 = call i16 @llvm.bswap.i16(i16 %2847) #7
  %2849 = zext i16 %2848 to i32
  %2850 = shl i32 %2849, %2840
  %2851 = or i32 %2850, %2839
  %2852 = add nsw i32 %2840, -16
  br label %2853

2853:                                             ; preds = %2844, %2828
  %2854 = phi i8* [ %2845, %2844 ], [ %2815, %2828 ]
  %2855 = phi i32 [ %2852, %2844 ], [ %2840, %2828 ]
  %2856 = phi i32 [ %2851, %2844 ], [ %2839, %2828 ]
  %2857 = add nsw i32 %2838, -1
  %2858 = mul nsw i32 %2857, %2833
  %2859 = ashr i32 %2858, 8
  %2860 = add nsw i32 %2859, 1
  %2861 = shl i32 %2860, 16
  %2862 = icmp ult i32 %2856, %2861
  br i1 %2862, label %2863, label %2942

2863:                                             ; preds = %2853
  %2864 = getelementptr inbounds i8, i8* %2741, i64 4
  %2865 = load i8, i8* %2864, align 1
  %2866 = zext i8 %2865 to i32
  %2867 = sext i32 %2860 to i64
  %2868 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2867
  %2869 = load i8, i8* %2868, align 1
  %2870 = zext i8 %2869 to i32
  %2871 = shl i32 %2860, %2870
  %2872 = shl i32 %2856, %2870
  %2873 = add nsw i32 %2855, %2870
  %2874 = icmp sgt i32 %2873, -1
  %2875 = icmp ult i8* %2854, %2699
  %2876 = and i1 %2875, %2874
  br i1 %2876, label %2877, label %2886

2877:                                             ; preds = %2863
  %2878 = getelementptr inbounds i8, i8* %2854, i64 2
  %2879 = bitcast i8* %2854 to i16*
  %2880 = load i16, i16* %2879, align 1
  %2881 = call i16 @llvm.bswap.i16(i16 %2880) #7
  %2882 = zext i16 %2881 to i32
  %2883 = shl i32 %2882, %2873
  %2884 = or i32 %2883, %2872
  %2885 = add nsw i32 %2873, -16
  br label %2886

2886:                                             ; preds = %2877, %2863
  %2887 = phi i8* [ %2878, %2877 ], [ %2854, %2863 ]
  %2888 = phi i32 [ %2885, %2877 ], [ %2873, %2863 ]
  %2889 = phi i32 [ %2884, %2877 ], [ %2872, %2863 ]
  %2890 = add nsw i32 %2871, -1
  %2891 = mul nsw i32 %2890, %2866
  %2892 = ashr i32 %2891, 8
  %2893 = add nsw i32 %2892, 1
  %2894 = shl i32 %2893, 16
  %2895 = icmp ult i32 %2889, %2894
  br i1 %2895, label %2935, label %2896

2896:                                             ; preds = %2886
  %2897 = sub i32 %2871, %2893
  %2898 = sub i32 %2889, %2894
  %2899 = getelementptr inbounds i8, i8* %2741, i64 5
  %2900 = load i8, i8* %2899, align 1
  %2901 = sext i32 %2897 to i64
  %2902 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2901
  %2903 = load i8, i8* %2902, align 1
  %2904 = zext i8 %2903 to i32
  %2905 = shl i32 %2897, %2904
  %2906 = shl i32 %2898, %2904
  %2907 = add nsw i32 %2888, %2904
  %2908 = icmp sgt i32 %2907, -1
  %2909 = icmp ult i8* %2887, %2699
  %2910 = and i1 %2909, %2908
  br i1 %2910, label %2911, label %2920

2911:                                             ; preds = %2896
  %2912 = getelementptr inbounds i8, i8* %2887, i64 2
  %2913 = bitcast i8* %2887 to i16*
  %2914 = load i16, i16* %2913, align 1
  %2915 = call i16 @llvm.bswap.i16(i16 %2914) #7
  %2916 = zext i16 %2915 to i32
  %2917 = shl i32 %2916, %2907
  %2918 = or i32 %2917, %2906
  %2919 = add nsw i32 %2907, -16
  br label %2920

2920:                                             ; preds = %2911, %2896
  %2921 = phi i8* [ %2912, %2911 ], [ %2887, %2896 ]
  %2922 = phi i32 [ %2919, %2911 ], [ %2907, %2896 ]
  %2923 = phi i32 [ %2918, %2911 ], [ %2906, %2896 ]
  %2924 = add nsw i32 %2905, -1
  %2925 = zext i8 %2900 to i32
  %2926 = mul nsw i32 %2924, %2925
  %2927 = ashr i32 %2926, 8
  %2928 = add nsw i32 %2927, 1
  %2929 = shl i32 %2928, 16
  %2930 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %2929, i32 %2928, i32 %2923, i32 0, i32 %2905, i32 %2923) #8, !srcloc !2
  %2931 = extractvalue { i32, i32, i32 } %2930, 0
  %2932 = extractvalue { i32, i32, i32 } %2930, 1
  %2933 = extractvalue { i32, i32, i32 } %2930, 2
  %2934 = add nsw i32 %2931, 1
  br label %2935

2935:                                             ; preds = %2920, %2886
  %2936 = phi i32 [ %2933, %2920 ], [ %2889, %2886 ]
  %2937 = phi i8* [ %2921, %2920 ], [ %2887, %2886 ]
  %2938 = phi i32 [ %2922, %2920 ], [ %2888, %2886 ]
  %2939 = phi i32 [ %2932, %2920 ], [ %2893, %2886 ]
  %2940 = phi i32 [ %2934, %2920 ], [ 0, %2886 ]
  %2941 = add nsw i32 %2940, 2
  br label %3245

2942:                                             ; preds = %2853
  %2943 = sub i32 %2838, %2860
  %2944 = sub i32 %2856, %2861
  %2945 = getelementptr inbounds i8, i8* %2741, i64 6
  %2946 = load i8, i8* %2945, align 1
  %2947 = zext i8 %2946 to i32
  %2948 = sext i32 %2943 to i64
  %2949 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2948
  %2950 = load i8, i8* %2949, align 1
  %2951 = zext i8 %2950 to i32
  %2952 = shl i32 %2943, %2951
  %2953 = shl i32 %2944, %2951
  %2954 = add nsw i32 %2855, %2951
  %2955 = icmp sgt i32 %2954, -1
  %2956 = icmp ult i8* %2854, %2699
  %2957 = and i1 %2956, %2955
  br i1 %2957, label %2958, label %2967

2958:                                             ; preds = %2942
  %2959 = getelementptr inbounds i8, i8* %2854, i64 2
  %2960 = bitcast i8* %2854 to i16*
  %2961 = load i16, i16* %2960, align 1
  %2962 = call i16 @llvm.bswap.i16(i16 %2961) #7
  %2963 = zext i16 %2962 to i32
  %2964 = shl i32 %2963, %2954
  %2965 = or i32 %2964, %2953
  %2966 = add nsw i32 %2954, -16
  br label %2967

2967:                                             ; preds = %2958, %2942
  %2968 = phi i8* [ %2959, %2958 ], [ %2854, %2942 ]
  %2969 = phi i32 [ %2966, %2958 ], [ %2954, %2942 ]
  %2970 = phi i32 [ %2965, %2958 ], [ %2953, %2942 ]
  %2971 = add nsw i32 %2952, -1
  %2972 = mul nsw i32 %2971, %2947
  %2973 = ashr i32 %2972, 8
  %2974 = add nsw i32 %2973, 1
  %2975 = shl i32 %2974, 16
  %2976 = icmp ult i32 %2970, %2975
  br i1 %2976, label %2977, label %3114

2977:                                             ; preds = %2967
  %2978 = getelementptr inbounds i8, i8* %2741, i64 7
  %2979 = load i8, i8* %2978, align 1
  %2980 = zext i8 %2979 to i32
  %2981 = sext i32 %2974 to i64
  %2982 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %2981
  %2983 = load i8, i8* %2982, align 1
  %2984 = zext i8 %2983 to i32
  %2985 = shl i32 %2974, %2984
  %2986 = shl i32 %2970, %2984
  %2987 = add nsw i32 %2969, %2984
  %2988 = icmp sgt i32 %2987, -1
  %2989 = icmp ult i8* %2968, %2699
  %2990 = and i1 %2989, %2988
  br i1 %2990, label %2991, label %3000

2991:                                             ; preds = %2977
  %2992 = getelementptr inbounds i8, i8* %2968, i64 2
  %2993 = bitcast i8* %2968 to i16*
  %2994 = load i16, i16* %2993, align 1
  %2995 = call i16 @llvm.bswap.i16(i16 %2994) #7
  %2996 = zext i16 %2995 to i32
  %2997 = shl i32 %2996, %2987
  %2998 = or i32 %2997, %2986
  %2999 = add nsw i32 %2987, -16
  br label %3000

3000:                                             ; preds = %2991, %2977
  %3001 = phi i8* [ %2992, %2991 ], [ %2968, %2977 ]
  %3002 = phi i32 [ %2999, %2991 ], [ %2987, %2977 ]
  %3003 = phi i32 [ %2998, %2991 ], [ %2986, %2977 ]
  %3004 = add nsw i32 %2985, -1
  %3005 = mul nsw i32 %3004, %2980
  %3006 = ashr i32 %3005, 8
  %3007 = add nsw i32 %3006, 1
  %3008 = shl i32 %3007, 16
  %3009 = icmp ult i32 %3003, %3008
  br i1 %3009, label %3010, label %3044

3010:                                             ; preds = %3000
  %3011 = sext i32 %3007 to i64
  %3012 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3011
  %3013 = load i8, i8* %3012, align 1
  %3014 = zext i8 %3013 to i32
  %3015 = shl i32 %3007, %3014
  %3016 = shl i32 %3003, %3014
  %3017 = add nsw i32 %3002, %3014
  %3018 = icmp sgt i32 %3017, -1
  %3019 = icmp ult i8* %3001, %2699
  %3020 = and i1 %3019, %3018
  br i1 %3020, label %3021, label %3030

3021:                                             ; preds = %3010
  %3022 = getelementptr inbounds i8, i8* %3001, i64 2
  %3023 = bitcast i8* %3001 to i16*
  %3024 = load i16, i16* %3023, align 1
  %3025 = call i16 @llvm.bswap.i16(i16 %3024) #7
  %3026 = zext i16 %3025 to i32
  %3027 = shl i32 %3026, %3017
  %3028 = or i32 %3027, %3016
  %3029 = add nsw i32 %3017, -16
  br label %3030

3030:                                             ; preds = %3021, %3010
  %3031 = phi i8* [ %3022, %3021 ], [ %3001, %3010 ]
  %3032 = phi i32 [ %3029, %3021 ], [ %3017, %3010 ]
  %3033 = phi i32 [ %3028, %3021 ], [ %3016, %3010 ]
  %3034 = mul i32 %3015, 159
  %3035 = add i32 %3034, -159
  %3036 = ashr i32 %3035, 8
  %3037 = add nsw i32 %3036, 1
  %3038 = shl i32 %3037, 16
  %3039 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3038, i32 %3037, i32 %3033, i32 0, i32 %3015, i32 %3033) #8, !srcloc !2
  %3040 = extractvalue { i32, i32, i32 } %3039, 0
  %3041 = extractvalue { i32, i32, i32 } %3039, 1
  %3042 = extractvalue { i32, i32, i32 } %3039, 2
  %3043 = add nsw i32 %3040, 5
  br label %3245

3044:                                             ; preds = %3000
  %3045 = sub i32 %2985, %3007
  %3046 = sub i32 %3003, %3008
  %3047 = sext i32 %3045 to i64
  %3048 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3047
  %3049 = load i8, i8* %3048, align 1
  %3050 = zext i8 %3049 to i32
  %3051 = shl i32 %3045, %3050
  %3052 = shl i32 %3046, %3050
  %3053 = add nsw i32 %3002, %3050
  %3054 = icmp sgt i32 %3053, -1
  %3055 = icmp ult i8* %3001, %2699
  %3056 = and i1 %3055, %3054
  br i1 %3056, label %3057, label %3066

3057:                                             ; preds = %3044
  %3058 = getelementptr inbounds i8, i8* %3001, i64 2
  %3059 = bitcast i8* %3001 to i16*
  %3060 = load i16, i16* %3059, align 1
  %3061 = call i16 @llvm.bswap.i16(i16 %3060) #7
  %3062 = zext i16 %3061 to i32
  %3063 = shl i32 %3062, %3053
  %3064 = or i32 %3063, %3052
  %3065 = add nsw i32 %3053, -16
  br label %3066

3066:                                             ; preds = %3057, %3044
  %3067 = phi i8* [ %3058, %3057 ], [ %3001, %3044 ]
  %3068 = phi i32 [ %3065, %3057 ], [ %3053, %3044 ]
  %3069 = phi i32 [ %3064, %3057 ], [ %3052, %3044 ]
  %3070 = mul i32 %3051, 165
  %3071 = add i32 %3070, -165
  %3072 = ashr i32 %3071, 8
  %3073 = add nsw i32 %3072, 1
  %3074 = shl i32 %3073, 16
  %3075 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3074, i32 %3073, i32 %3069, i32 0, i32 %3051, i32 %3069) #8, !srcloc !2
  %3076 = extractvalue { i32, i32, i32 } %3075, 0
  %3077 = extractvalue { i32, i32, i32 } %3075, 1
  %3078 = extractvalue { i32, i32, i32 } %3075, 2
  %3079 = shl i32 %3076, 1
  %3080 = add nsw i32 %3079, 7
  %3081 = sext i32 %3077 to i64
  %3082 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3081
  %3083 = load i8, i8* %3082, align 1
  %3084 = zext i8 %3083 to i32
  %3085 = shl i32 %3077, %3084
  %3086 = shl i32 %3078, %3084
  %3087 = add nsw i32 %3068, %3084
  %3088 = icmp sgt i32 %3087, -1
  %3089 = icmp ult i8* %3067, %2699
  %3090 = and i1 %3089, %3088
  br i1 %3090, label %3091, label %3100

3091:                                             ; preds = %3066
  %3092 = getelementptr inbounds i8, i8* %3067, i64 2
  %3093 = bitcast i8* %3067 to i16*
  %3094 = load i16, i16* %3093, align 1
  %3095 = call i16 @llvm.bswap.i16(i16 %3094) #7
  %3096 = zext i16 %3095 to i32
  %3097 = shl i32 %3096, %3087
  %3098 = or i32 %3097, %3086
  %3099 = add nsw i32 %3087, -16
  br label %3100

3100:                                             ; preds = %3091, %3066
  %3101 = phi i8* [ %3092, %3091 ], [ %3067, %3066 ]
  %3102 = phi i32 [ %3099, %3091 ], [ %3087, %3066 ]
  %3103 = phi i32 [ %3098, %3091 ], [ %3086, %3066 ]
  %3104 = mul i32 %3085, 145
  %3105 = add i32 %3104, -145
  %3106 = ashr i32 %3105, 8
  %3107 = add nsw i32 %3106, 1
  %3108 = shl i32 %3107, 16
  %3109 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3108, i32 %3107, i32 %3103, i32 0, i32 %3085, i32 %3103) #8, !srcloc !2
  %3110 = extractvalue { i32, i32, i32 } %3109, 0
  %3111 = extractvalue { i32, i32, i32 } %3109, 1
  %3112 = extractvalue { i32, i32, i32 } %3109, 2
  %3113 = add nsw i32 %3080, %3110
  br label %3245

3114:                                             ; preds = %2967
  %3115 = sub i32 %2952, %2974
  %3116 = sub i32 %2970, %2975
  %3117 = getelementptr inbounds i8, i8* %2741, i64 8
  %3118 = load i8, i8* %3117, align 1
  %3119 = sext i32 %3115 to i64
  %3120 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3119
  %3121 = load i8, i8* %3120, align 1
  %3122 = zext i8 %3121 to i32
  %3123 = shl i32 %3115, %3122
  %3124 = shl i32 %3116, %3122
  %3125 = add nsw i32 %2969, %3122
  %3126 = icmp sgt i32 %3125, -1
  %3127 = icmp ult i8* %2968, %2699
  %3128 = and i1 %3127, %3126
  br i1 %3128, label %3129, label %3138

3129:                                             ; preds = %3114
  %3130 = getelementptr inbounds i8, i8* %2968, i64 2
  %3131 = bitcast i8* %2968 to i16*
  %3132 = load i16, i16* %3131, align 1
  %3133 = call i16 @llvm.bswap.i16(i16 %3132) #7
  %3134 = zext i16 %3133 to i32
  %3135 = shl i32 %3134, %3125
  %3136 = or i32 %3135, %3124
  %3137 = add nsw i32 %3125, -16
  br label %3138

3138:                                             ; preds = %3129, %3114
  %3139 = phi i8* [ %3130, %3129 ], [ %2968, %3114 ]
  %3140 = phi i32 [ %3137, %3129 ], [ %3125, %3114 ]
  %3141 = phi i32 [ %3136, %3129 ], [ %3124, %3114 ]
  %3142 = add nsw i32 %3123, -1
  %3143 = zext i8 %3118 to i32
  %3144 = mul nsw i32 %3142, %3143
  %3145 = ashr i32 %3144, 8
  %3146 = add nsw i32 %3145, 1
  %3147 = shl i32 %3146, 16
  %3148 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3147, i32 %3146, i32 %3141, i32 0, i32 %3123, i32 %3141) #8, !srcloc !2
  %3149 = extractvalue { i32, i32, i32 } %3148, 0
  %3150 = extractvalue { i32, i32, i32 } %3148, 1
  %3151 = extractvalue { i32, i32, i32 } %3148, 2
  %3152 = add nsw i32 %3149, 9
  %3153 = sext i32 %3152 to i64
  %3154 = getelementptr inbounds i8, i8* %2741, i64 %3153
  %3155 = load i8, i8* %3154, align 1
  %3156 = sext i32 %3150 to i64
  %3157 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3156
  %3158 = load i8, i8* %3157, align 1
  %3159 = zext i8 %3158 to i32
  %3160 = shl i32 %3150, %3159
  %3161 = shl i32 %3151, %3159
  %3162 = add nsw i32 %3140, %3159
  %3163 = icmp sgt i32 %3162, -1
  %3164 = icmp ult i8* %3139, %2699
  %3165 = and i1 %3164, %3163
  br i1 %3165, label %3166, label %3175

3166:                                             ; preds = %3138
  %3167 = getelementptr inbounds i8, i8* %3139, i64 2
  %3168 = bitcast i8* %3139 to i16*
  %3169 = load i16, i16* %3168, align 1
  %3170 = call i16 @llvm.bswap.i16(i16 %3169) #7
  %3171 = zext i16 %3170 to i32
  %3172 = shl i32 %3171, %3162
  %3173 = or i32 %3172, %3161
  %3174 = add nsw i32 %3162, -16
  br label %3175

3175:                                             ; preds = %3166, %3138
  %3176 = phi i8* [ %3167, %3166 ], [ %3139, %3138 ]
  %3177 = phi i32 [ %3174, %3166 ], [ %3162, %3138 ]
  %3178 = phi i32 [ %3173, %3166 ], [ %3161, %3138 ]
  %3179 = add nsw i32 %3160, -1
  %3180 = zext i8 %3155 to i32
  %3181 = mul nsw i32 %3179, %3180
  %3182 = ashr i32 %3181, 8
  %3183 = add nsw i32 %3182, 1
  %3184 = shl i32 %3183, 16
  %3185 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3184, i32 %3183, i32 %3178, i32 0, i32 %3160, i32 %3178) #8, !srcloc !2
  %3186 = extractvalue { i32, i32, i32 } %3185, 0
  %3187 = extractvalue { i32, i32, i32 } %3185, 1
  %3188 = extractvalue { i32, i32, i32 } %3185, 2
  %3189 = shl i32 %3149, 1
  %3190 = add nsw i32 %3186, %3189
  %3191 = sext i32 %3190 to i64
  %3192 = getelementptr inbounds [4 x i8*], [4 x i8*]* @ff_vp8_dct_cat_prob, i64 0, i64 %3191
  %3193 = load i8*, i8** %3192, align 8
  %3194 = load i8, i8* %3193, align 1
  br label %3195

3195:                                             ; preds = %3224, %3175
  %3196 = phi i8* [ %3176, %3175 ], [ %3225, %3224 ]
  %3197 = phi i32 [ %3188, %3175 ], [ %3237, %3224 ]
  %3198 = phi i32 [ %3177, %3175 ], [ %3226, %3224 ]
  %3199 = phi i32 [ %3187, %3175 ], [ %3236, %3224 ]
  %3200 = phi i8 [ %3194, %3175 ], [ %3239, %3224 ]
  %3201 = phi i8* [ %3193, %3175 ], [ %3204, %3224 ]
  %3202 = phi i32 [ 0, %3175 ], [ %3238, %3224 ]
  %3203 = shl i32 %3202, 1
  %3204 = getelementptr inbounds i8, i8* %3201, i64 1
  %3205 = sext i32 %3199 to i64
  %3206 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3205
  %3207 = load i8, i8* %3206, align 1
  %3208 = zext i8 %3207 to i32
  %3209 = shl i32 %3199, %3208
  %3210 = shl i32 %3197, %3208
  %3211 = add nsw i32 %3198, %3208
  %3212 = icmp sgt i32 %3211, -1
  %3213 = icmp ult i8* %3196, %2699
  %3214 = and i1 %3213, %3212
  br i1 %3214, label %3215, label %3224

3215:                                             ; preds = %3195
  %3216 = getelementptr inbounds i8, i8* %3196, i64 2
  %3217 = bitcast i8* %3196 to i16*
  %3218 = load i16, i16* %3217, align 1
  %3219 = call i16 @llvm.bswap.i16(i16 %3218) #7
  %3220 = zext i16 %3219 to i32
  %3221 = shl i32 %3220, %3211
  %3222 = or i32 %3221, %3210
  %3223 = add nsw i32 %3211, -16
  br label %3224

3224:                                             ; preds = %3215, %3195
  %3225 = phi i8* [ %3216, %3215 ], [ %3196, %3195 ]
  %3226 = phi i32 [ %3223, %3215 ], [ %3211, %3195 ]
  %3227 = phi i32 [ %3222, %3215 ], [ %3210, %3195 ]
  %3228 = add nsw i32 %3209, -1
  %3229 = zext i8 %3200 to i32
  %3230 = mul nsw i32 %3228, %3229
  %3231 = ashr i32 %3230, 8
  %3232 = add nsw i32 %3231, 1
  %3233 = shl i32 %3232, 16
  %3234 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3233, i32 %3232, i32 %3227, i32 0, i32 %3209, i32 %3227) #8, !srcloc !2
  %3235 = extractvalue { i32, i32, i32 } %3234, 0
  %3236 = extractvalue { i32, i32, i32 } %3234, 1
  %3237 = extractvalue { i32, i32, i32 } %3234, 2
  %3238 = add nsw i32 %3235, %3203
  %3239 = load i8, i8* %3204, align 1
  %3240 = icmp eq i8 %3239, 0
  br i1 %3240, label %3241, label %3195

3241:                                             ; preds = %3224
  %3242 = shl i32 8, %3190
  %3243 = add nsw i32 %3242, 3
  %3244 = add nsw i32 %3243, %3238
  br label %3245

3245:                                             ; preds = %3241, %3100, %3030, %2935
  %3246 = phi i32 [ %2936, %2935 ], [ %3042, %3030 ], [ %3112, %3100 ], [ %3237, %3241 ]
  %3247 = phi i8* [ %2937, %2935 ], [ %3031, %3030 ], [ %3101, %3100 ], [ %3225, %3241 ]
  %3248 = phi i32 [ %2938, %2935 ], [ %3032, %3030 ], [ %3102, %3100 ], [ %3226, %3241 ]
  %3249 = phi i32 [ %2939, %2935 ], [ %3041, %3030 ], [ %3111, %3100 ], [ %3236, %3241 ]
  %3250 = phi i32 [ %2941, %2935 ], [ %3043, %3030 ], [ %3113, %3100 ], [ %3244, %3241 ]
  %3251 = add nsw i32 %2742, 1
  %3252 = sext i32 %3251 to i64
  %3253 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 1, i64 %3252, i64 2, i64 0
  br label %3254

3254:                                             ; preds = %3245, %2824
  %3255 = phi i32 [ %2817, %2824 ], [ %3246, %3245 ]
  %3256 = phi i8* [ %2815, %2824 ], [ %3247, %3245 ]
  %3257 = phi i32 [ %2816, %2824 ], [ %3248, %3245 ]
  %3258 = phi i32 [ %2821, %2824 ], [ %3249, %3245 ]
  %3259 = phi i32 [ 1, %2824 ], [ %3250, %3245 ]
  %3260 = phi i8* [ %2827, %2824 ], [ %3253, %3245 ]
  %3261 = sext i32 %3258 to i64
  %3262 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3261
  %3263 = load i8, i8* %3262, align 1
  %3264 = zext i8 %3263 to i32
  %3265 = shl i32 %3258, %3264
  %3266 = shl i32 %3255, %3264
  %3267 = add nsw i32 %3257, %3264
  %3268 = icmp sgt i32 %3267, -1
  %3269 = icmp ult i8* %3256, %2699
  %3270 = and i1 %3269, %3268
  br i1 %3270, label %3271, label %3280

3271:                                             ; preds = %3254
  %3272 = getelementptr inbounds i8, i8* %3256, i64 2
  %3273 = bitcast i8* %3256 to i16*
  %3274 = load i16, i16* %3273, align 1
  %3275 = call i16 @llvm.bswap.i16(i16 %3274) #7
  %3276 = zext i16 %3275 to i32
  %3277 = shl i32 %3276, %3267
  %3278 = or i32 %3277, %3266
  %3279 = add nsw i32 %3267, -16
  br label %3280

3280:                                             ; preds = %3271, %3254
  %3281 = phi i8* [ %3272, %3271 ], [ %3256, %3254 ]
  %3282 = phi i32 [ %3279, %3271 ], [ %3267, %3254 ]
  %3283 = phi i32 [ %3278, %3271 ], [ %3266, %3254 ]
  %3284 = shl i32 %3265, 7
  %3285 = add i32 %3284, -128
  %3286 = ashr i32 %3285, 8
  %3287 = add nsw i32 %3286, 1
  %3288 = shl i32 %3287, 16
  %3289 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3288, i32 %3287, i32 %3283, i32 0, i32 %3265, i32 %3283) #8, !srcloc !2
  %3290 = extractvalue { i32, i32, i32 } %3289, 0
  %3291 = extractvalue { i32, i32, i32 } %3289, 1
  %3292 = extractvalue { i32, i32, i32 } %3289, 2
  %3293 = icmp eq i32 %3290, 0
  %3294 = sub nsw i32 0, %3259
  %3295 = select i1 %3293, i32 %3259, i32 %3294
  %3296 = icmp ne i32 %2742, 0
  %3297 = zext i1 %3296 to i64
  %3298 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 24, i64 %2657, i32 1, i64 %3297
  %3299 = load i16, i16* %3298, align 2
  %3300 = trunc i32 %3295 to i16
  %3301 = mul i16 %3299, %3300
  %3302 = sext i32 %2742 to i64
  %3303 = getelementptr inbounds [17 x i8], [17 x i8]* @ff_zigzag_scan, i64 0, i64 %3302
  %3304 = load i8, i8* %3303, align 1
  %3305 = zext i8 %3304 to i64
  %3306 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 1, i64 %3305
  store i16 %3301, i16* %3306, align 2
  %3307 = add nsw i32 %2742, 1
  %3308 = icmp slt i32 %3307, 16
  br i1 %3308, label %2701, label %3309

3309:                                             ; preds = %3280, %2723
  %3310 = phi i32 [ %3292, %3280 ], [ %2726, %2723 ]
  %3311 = phi i8* [ %3281, %3280 ], [ %2724, %2723 ]
  %3312 = phi i32 [ %3282, %3280 ], [ %2725, %2723 ]
  %3313 = phi i32 [ %3291, %3280 ], [ %2730, %2723 ]
  store i32 %3313, i32* %223, align 8
  store i32 %3312, i32* %151, align 4
  store i8* %3311, i8** %62, align 8
  store i8* %2699, i8** %60, align 8
  store i32 %3310, i32* %224, align 8
  store i32 %2700, i32* %74, align 4
  %3314 = icmp ne i32 %3307, 0
  %3315 = zext i1 %3314 to i8
  store i8 %3315, i8* %2651, align 1
  store i8 %3315, i8* %221, align 1
  switch i32 %2742, label %3318 [
    i32 -1, label %3321
    i32 0, label %3316
  ]

3316:                                             ; preds = %3309
  %3317 = load void ([4 x [16 x i16]]*, i16*)*, void ([4 x [16 x i16]]*, i16*)** %225, align 8
  call void %3317([4 x [16 x i16]]* %226, i16* %222) #7
  br label %3321

3318:                                             ; preds = %3309, %2778
  %3319 = phi i32 [ 16, %2778 ], [ %3307, %3309 ]
  %3320 = load void ([4 x [16 x i16]]*, i16*)*, void ([4 x [16 x i16]]*, i16*)** %227, align 8
  call void %3320([4 x [16 x i16]]* %226, i16* %222) #7
  br label %3321

3321:                                             ; preds = %3318, %3316, %3309, %2694, %2644, %2644
  %3322 = phi i32 [ 0, %2644 ], [ 0, %2644 ], [ 1, %3309 ], [ 1, %3316 ], [ 1, %3318 ], [ 1, %2694 ]
  %3323 = phi i64 [ 3, %2644 ], [ 3, %2644 ], [ 0, %3309 ], [ 0, %3316 ], [ 0, %3318 ], [ 0, %2694 ]
  %3324 = phi i32 [ 0, %2644 ], [ 0, %2644 ], [ 0, %3309 ], [ 1, %3316 ], [ %3319, %3318 ], [ 0, %2694 ]
  %3325 = phi i32 [ 0, %2644 ], [ 0, %2644 ], [ 0, %3309 ], [ 1, %3316 ], [ 1, %3318 ], [ 0, %2694 ]
  %3326 = zext i8 %2647 to i64
  %3327 = zext i32 %3322 to i64
  br label %3328

3328:                                             ; preds = %4007, %3321
  %3329 = phi i64 [ 0, %3321 ], [ %4008, %4007 ]
  %3330 = phi i32 [ %3324, %3321 ], [ %4004, %4007 ]
  %3331 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 3, i64 %3329
  br label %3332

3332:                                             ; preds = %3997, %3328
  %3333 = phi i64 [ 0, %3328 ], [ %4005, %3997 ]
  %3334 = phi i32 [ %3330, %3328 ], [ %4004, %3997 ]
  %3335 = load i8, i8* %3331, align 1
  %3336 = zext i8 %3335 to i64
  %3337 = getelementptr inbounds [9 x i8], [9 x i8]* %2645, i64 %312, i64 %3333
  %3338 = load i8, i8* %3337, align 1
  %3339 = zext i8 %3338 to i64
  %3340 = add nuw nsw i64 %3339, %3336
  %3341 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 %3323, i64 %3327, i64 %3340, i64 0
  %3342 = load i8, i8* %3341, align 1
  %3343 = zext i8 %3342 to i32
  %3344 = load i32, i32* %223, align 8
  %3345 = sext i32 %3344 to i64
  %3346 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3345
  %3347 = load i8, i8* %3346, align 1
  %3348 = zext i8 %3347 to i32
  %3349 = load i32, i32* %151, align 4
  %3350 = load i32, i32* %224, align 8
  %3351 = shl i32 %3344, %3348
  store i32 %3351, i32* %223, align 8
  %3352 = shl i32 %3350, %3348
  %3353 = add nsw i32 %3349, %3348
  %3354 = icmp sgt i32 %3353, -1
  br i1 %3354, label %3355, label %3368

3355:                                             ; preds = %3332
  %3356 = load i8*, i8** %62, align 8
  %3357 = load i8*, i8** %60, align 8
  %3358 = icmp ult i8* %3356, %3357
  br i1 %3358, label %3359, label %3368

3359:                                             ; preds = %3355
  %3360 = getelementptr inbounds i8, i8* %3356, i64 2
  store i8* %3360, i8** %62, align 8
  %3361 = bitcast i8* %3356 to i16*
  %3362 = load i16, i16* %3361, align 1
  %3363 = call i16 @llvm.bswap.i16(i16 %3362) #7
  %3364 = zext i16 %3363 to i32
  %3365 = shl i32 %3364, %3353
  %3366 = or i32 %3365, %3352
  %3367 = add nsw i32 %3353, -16
  br label %3368

3368:                                             ; preds = %3359, %3355, %3332
  %3369 = phi i32 [ %3367, %3359 ], [ %3353, %3355 ], [ %3353, %3332 ]
  %3370 = phi i32 [ %3366, %3359 ], [ %3352, %3355 ], [ %3352, %3332 ]
  store i32 %3369, i32* %151, align 4
  %3371 = add nsw i32 %3351, -1
  %3372 = mul nsw i32 %3371, %3343
  %3373 = ashr i32 %3372, 8
  %3374 = add nsw i32 %3373, 1
  %3375 = shl i32 %3374, 16
  %3376 = icmp ult i32 %3370, %3375
  br i1 %3376, label %3377, label %3378

3377:                                             ; preds = %3368
  store i32 %3374, i32* %223, align 8
  store i32 %3370, i32* %224, align 8
  br label %3997

3378:                                             ; preds = %3368
  %3379 = sub i32 %3351, %3374
  store i32 %3379, i32* %223, align 8
  %3380 = sub i32 %3370, %3375
  store i32 %3380, i32* %224, align 8
  %3381 = load i8*, i8** %62, align 8
  %3382 = load i8*, i8** %60, align 8
  %3383 = load i32, i32* %74, align 4
  br label %3419

3384:                                             ; preds = %3962
  %3385 = load i8, i8* %3942, align 1
  %3386 = zext i8 %3385 to i32
  %3387 = sext i32 %3973 to i64
  %3388 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3387
  %3389 = load i8, i8* %3388, align 1
  %3390 = zext i8 %3389 to i32
  %3391 = shl i32 %3973, %3390
  %3392 = shl i32 %3974, %3390
  %3393 = add nsw i32 %3964, %3390
  %3394 = icmp sgt i32 %3393, -1
  %3395 = icmp ult i8* %3963, %3382
  %3396 = and i1 %3395, %3394
  br i1 %3396, label %3397, label %3406

3397:                                             ; preds = %3384
  %3398 = getelementptr inbounds i8, i8* %3963, i64 2
  %3399 = bitcast i8* %3963 to i16*
  %3400 = load i16, i16* %3399, align 1
  %3401 = call i16 @llvm.bswap.i16(i16 %3400) #7
  %3402 = zext i16 %3401 to i32
  %3403 = shl i32 %3402, %3393
  %3404 = or i32 %3403, %3392
  %3405 = add nsw i32 %3393, -16
  br label %3406

3406:                                             ; preds = %3397, %3384
  %3407 = phi i8* [ %3398, %3397 ], [ %3963, %3384 ]
  %3408 = phi i32 [ %3405, %3397 ], [ %3393, %3384 ]
  %3409 = phi i32 [ %3404, %3397 ], [ %3392, %3384 ]
  %3410 = add nsw i32 %3391, -1
  %3411 = mul nsw i32 %3410, %3386
  %3412 = ashr i32 %3411, 8
  %3413 = add nsw i32 %3412, 1
  %3414 = shl i32 %3413, 16
  %3415 = icmp ult i32 %3409, %3414
  br i1 %3415, label %3991, label %3416

3416:                                             ; preds = %3406
  %3417 = sub i32 %3391, %3413
  %3418 = sub i32 %3409, %3414
  br label %3464

3419:                                             ; preds = %3464, %3378
  %3420 = phi i32 [ %3380, %3378 ], [ %3465, %3464 ]
  %3421 = phi i8* [ %3381, %3378 ], [ %3466, %3464 ]
  %3422 = phi i32 [ %3369, %3378 ], [ %3467, %3464 ]
  %3423 = phi i32 [ %3379, %3378 ], [ %3468, %3464 ]
  %3424 = phi i8* [ %3341, %3378 ], [ %3469, %3464 ]
  %3425 = phi i32 [ %3322, %3378 ], [ %3470, %3464 ]
  %3426 = getelementptr inbounds i8, i8* %3424, i64 1
  %3427 = load i8, i8* %3426, align 1
  %3428 = zext i8 %3427 to i32
  %3429 = sext i32 %3423 to i64
  %3430 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3429
  %3431 = load i8, i8* %3430, align 1
  %3432 = zext i8 %3431 to i32
  %3433 = shl i32 %3423, %3432
  %3434 = shl i32 %3420, %3432
  %3435 = add nsw i32 %3422, %3432
  %3436 = icmp sgt i32 %3435, -1
  %3437 = icmp ult i8* %3421, %3382
  %3438 = and i1 %3437, %3436
  br i1 %3438, label %3439, label %3448

3439:                                             ; preds = %3419
  %3440 = getelementptr inbounds i8, i8* %3421, i64 2
  %3441 = bitcast i8* %3421 to i16*
  %3442 = load i16, i16* %3441, align 1
  %3443 = call i16 @llvm.bswap.i16(i16 %3442) #7
  %3444 = zext i16 %3443 to i32
  %3445 = shl i32 %3444, %3435
  %3446 = or i32 %3445, %3434
  %3447 = add nsw i32 %3435, -16
  br label %3448

3448:                                             ; preds = %3439, %3419
  %3449 = phi i8* [ %3440, %3439 ], [ %3421, %3419 ]
  %3450 = phi i32 [ %3447, %3439 ], [ %3435, %3419 ]
  %3451 = phi i32 [ %3446, %3439 ], [ %3434, %3419 ]
  %3452 = add nsw i32 %3433, -1
  %3453 = mul nsw i32 %3452, %3428
  %3454 = ashr i32 %3453, 8
  %3455 = add nsw i32 %3454, 1
  %3456 = shl i32 %3455, 16
  %3457 = icmp ult i32 %3451, %3456
  br i1 %3457, label %3458, label %3471

3458:                                             ; preds = %3448
  %3459 = add nsw i32 %3425, 1
  %3460 = icmp eq i32 %3459, 16
  br i1 %3460, label %3991, label %3461

3461:                                             ; preds = %3458
  %3462 = sext i32 %3459 to i64
  %3463 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 %3323, i64 %3462, i64 0, i64 0
  br label %3464

3464:                                             ; preds = %3461, %3416
  %3465 = phi i32 [ %3451, %3461 ], [ %3418, %3416 ]
  %3466 = phi i8* [ %3449, %3461 ], [ %3407, %3416 ]
  %3467 = phi i32 [ %3450, %3461 ], [ %3408, %3416 ]
  %3468 = phi i32 [ %3455, %3461 ], [ %3417, %3416 ]
  %3469 = phi i8* [ %3463, %3461 ], [ %3942, %3416 ]
  %3470 = phi i32 [ %3459, %3461 ], [ %3989, %3416 ]
  br label %3419

3471:                                             ; preds = %3448
  %3472 = sub i32 %3433, %3455
  %3473 = sub i32 %3451, %3456
  %3474 = getelementptr inbounds i8, i8* %3424, i64 2
  %3475 = load i8, i8* %3474, align 1
  %3476 = zext i8 %3475 to i32
  %3477 = sext i32 %3472 to i64
  %3478 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3477
  %3479 = load i8, i8* %3478, align 1
  %3480 = zext i8 %3479 to i32
  %3481 = shl i32 %3472, %3480
  %3482 = shl i32 %3473, %3480
  %3483 = add nsw i32 %3450, %3480
  %3484 = icmp sgt i32 %3483, -1
  %3485 = icmp ult i8* %3449, %3382
  %3486 = and i1 %3485, %3484
  br i1 %3486, label %3487, label %3496

3487:                                             ; preds = %3471
  %3488 = getelementptr inbounds i8, i8* %3449, i64 2
  %3489 = bitcast i8* %3449 to i16*
  %3490 = load i16, i16* %3489, align 1
  %3491 = call i16 @llvm.bswap.i16(i16 %3490) #7
  %3492 = zext i16 %3491 to i32
  %3493 = shl i32 %3492, %3483
  %3494 = or i32 %3493, %3482
  %3495 = add nsw i32 %3483, -16
  br label %3496

3496:                                             ; preds = %3487, %3471
  %3497 = phi i8* [ %3488, %3487 ], [ %3449, %3471 ]
  %3498 = phi i32 [ %3495, %3487 ], [ %3483, %3471 ]
  %3499 = phi i32 [ %3494, %3487 ], [ %3482, %3471 ]
  %3500 = add nsw i32 %3481, -1
  %3501 = mul nsw i32 %3500, %3476
  %3502 = ashr i32 %3501, 8
  %3503 = add nsw i32 %3502, 1
  %3504 = shl i32 %3503, 16
  %3505 = icmp ult i32 %3499, %3504
  br i1 %3505, label %3506, label %3510

3506:                                             ; preds = %3496
  %3507 = add nsw i32 %3425, 1
  %3508 = sext i32 %3507 to i64
  %3509 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 %3323, i64 %3508, i64 1, i64 0
  br label %3936

3510:                                             ; preds = %3496
  %3511 = sub i32 %3481, %3503
  %3512 = sub i32 %3499, %3504
  %3513 = getelementptr inbounds i8, i8* %3424, i64 3
  %3514 = load i8, i8* %3513, align 1
  %3515 = zext i8 %3514 to i32
  %3516 = sext i32 %3511 to i64
  %3517 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3516
  %3518 = load i8, i8* %3517, align 1
  %3519 = zext i8 %3518 to i32
  %3520 = shl i32 %3511, %3519
  %3521 = shl i32 %3512, %3519
  %3522 = add nsw i32 %3498, %3519
  %3523 = icmp sgt i32 %3522, -1
  %3524 = icmp ult i8* %3497, %3382
  %3525 = and i1 %3524, %3523
  br i1 %3525, label %3526, label %3535

3526:                                             ; preds = %3510
  %3527 = getelementptr inbounds i8, i8* %3497, i64 2
  %3528 = bitcast i8* %3497 to i16*
  %3529 = load i16, i16* %3528, align 1
  %3530 = call i16 @llvm.bswap.i16(i16 %3529) #7
  %3531 = zext i16 %3530 to i32
  %3532 = shl i32 %3531, %3522
  %3533 = or i32 %3532, %3521
  %3534 = add nsw i32 %3522, -16
  br label %3535

3535:                                             ; preds = %3526, %3510
  %3536 = phi i8* [ %3527, %3526 ], [ %3497, %3510 ]
  %3537 = phi i32 [ %3534, %3526 ], [ %3522, %3510 ]
  %3538 = phi i32 [ %3533, %3526 ], [ %3521, %3510 ]
  %3539 = add nsw i32 %3520, -1
  %3540 = mul nsw i32 %3539, %3515
  %3541 = ashr i32 %3540, 8
  %3542 = add nsw i32 %3541, 1
  %3543 = shl i32 %3542, 16
  %3544 = icmp ult i32 %3538, %3543
  br i1 %3544, label %3545, label %3624

3545:                                             ; preds = %3535
  %3546 = getelementptr inbounds i8, i8* %3424, i64 4
  %3547 = load i8, i8* %3546, align 1
  %3548 = zext i8 %3547 to i32
  %3549 = sext i32 %3542 to i64
  %3550 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3549
  %3551 = load i8, i8* %3550, align 1
  %3552 = zext i8 %3551 to i32
  %3553 = shl i32 %3542, %3552
  %3554 = shl i32 %3538, %3552
  %3555 = add nsw i32 %3537, %3552
  %3556 = icmp sgt i32 %3555, -1
  %3557 = icmp ult i8* %3536, %3382
  %3558 = and i1 %3557, %3556
  br i1 %3558, label %3559, label %3568

3559:                                             ; preds = %3545
  %3560 = getelementptr inbounds i8, i8* %3536, i64 2
  %3561 = bitcast i8* %3536 to i16*
  %3562 = load i16, i16* %3561, align 1
  %3563 = call i16 @llvm.bswap.i16(i16 %3562) #7
  %3564 = zext i16 %3563 to i32
  %3565 = shl i32 %3564, %3555
  %3566 = or i32 %3565, %3554
  %3567 = add nsw i32 %3555, -16
  br label %3568

3568:                                             ; preds = %3559, %3545
  %3569 = phi i8* [ %3560, %3559 ], [ %3536, %3545 ]
  %3570 = phi i32 [ %3567, %3559 ], [ %3555, %3545 ]
  %3571 = phi i32 [ %3566, %3559 ], [ %3554, %3545 ]
  %3572 = add nsw i32 %3553, -1
  %3573 = mul nsw i32 %3572, %3548
  %3574 = ashr i32 %3573, 8
  %3575 = add nsw i32 %3574, 1
  %3576 = shl i32 %3575, 16
  %3577 = icmp ult i32 %3571, %3576
  br i1 %3577, label %3617, label %3578

3578:                                             ; preds = %3568
  %3579 = sub i32 %3553, %3575
  %3580 = sub i32 %3571, %3576
  %3581 = getelementptr inbounds i8, i8* %3424, i64 5
  %3582 = load i8, i8* %3581, align 1
  %3583 = sext i32 %3579 to i64
  %3584 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3583
  %3585 = load i8, i8* %3584, align 1
  %3586 = zext i8 %3585 to i32
  %3587 = shl i32 %3579, %3586
  %3588 = shl i32 %3580, %3586
  %3589 = add nsw i32 %3570, %3586
  %3590 = icmp sgt i32 %3589, -1
  %3591 = icmp ult i8* %3569, %3382
  %3592 = and i1 %3591, %3590
  br i1 %3592, label %3593, label %3602

3593:                                             ; preds = %3578
  %3594 = getelementptr inbounds i8, i8* %3569, i64 2
  %3595 = bitcast i8* %3569 to i16*
  %3596 = load i16, i16* %3595, align 1
  %3597 = call i16 @llvm.bswap.i16(i16 %3596) #7
  %3598 = zext i16 %3597 to i32
  %3599 = shl i32 %3598, %3589
  %3600 = or i32 %3599, %3588
  %3601 = add nsw i32 %3589, -16
  br label %3602

3602:                                             ; preds = %3593, %3578
  %3603 = phi i8* [ %3594, %3593 ], [ %3569, %3578 ]
  %3604 = phi i32 [ %3601, %3593 ], [ %3589, %3578 ]
  %3605 = phi i32 [ %3600, %3593 ], [ %3588, %3578 ]
  %3606 = add nsw i32 %3587, -1
  %3607 = zext i8 %3582 to i32
  %3608 = mul nsw i32 %3606, %3607
  %3609 = ashr i32 %3608, 8
  %3610 = add nsw i32 %3609, 1
  %3611 = shl i32 %3610, 16
  %3612 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3611, i32 %3610, i32 %3605, i32 0, i32 %3587, i32 %3605) #8, !srcloc !2
  %3613 = extractvalue { i32, i32, i32 } %3612, 0
  %3614 = extractvalue { i32, i32, i32 } %3612, 1
  %3615 = extractvalue { i32, i32, i32 } %3612, 2
  %3616 = add nsw i32 %3613, 1
  br label %3617

3617:                                             ; preds = %3602, %3568
  %3618 = phi i32 [ %3615, %3602 ], [ %3571, %3568 ]
  %3619 = phi i8* [ %3603, %3602 ], [ %3569, %3568 ]
  %3620 = phi i32 [ %3604, %3602 ], [ %3570, %3568 ]
  %3621 = phi i32 [ %3614, %3602 ], [ %3575, %3568 ]
  %3622 = phi i32 [ %3616, %3602 ], [ 0, %3568 ]
  %3623 = add nsw i32 %3622, 2
  br label %3927

3624:                                             ; preds = %3535
  %3625 = sub i32 %3520, %3542
  %3626 = sub i32 %3538, %3543
  %3627 = getelementptr inbounds i8, i8* %3424, i64 6
  %3628 = load i8, i8* %3627, align 1
  %3629 = zext i8 %3628 to i32
  %3630 = sext i32 %3625 to i64
  %3631 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3630
  %3632 = load i8, i8* %3631, align 1
  %3633 = zext i8 %3632 to i32
  %3634 = shl i32 %3625, %3633
  %3635 = shl i32 %3626, %3633
  %3636 = add nsw i32 %3537, %3633
  %3637 = icmp sgt i32 %3636, -1
  %3638 = icmp ult i8* %3536, %3382
  %3639 = and i1 %3638, %3637
  br i1 %3639, label %3640, label %3649

3640:                                             ; preds = %3624
  %3641 = getelementptr inbounds i8, i8* %3536, i64 2
  %3642 = bitcast i8* %3536 to i16*
  %3643 = load i16, i16* %3642, align 1
  %3644 = call i16 @llvm.bswap.i16(i16 %3643) #7
  %3645 = zext i16 %3644 to i32
  %3646 = shl i32 %3645, %3636
  %3647 = or i32 %3646, %3635
  %3648 = add nsw i32 %3636, -16
  br label %3649

3649:                                             ; preds = %3640, %3624
  %3650 = phi i8* [ %3641, %3640 ], [ %3536, %3624 ]
  %3651 = phi i32 [ %3648, %3640 ], [ %3636, %3624 ]
  %3652 = phi i32 [ %3647, %3640 ], [ %3635, %3624 ]
  %3653 = add nsw i32 %3634, -1
  %3654 = mul nsw i32 %3653, %3629
  %3655 = ashr i32 %3654, 8
  %3656 = add nsw i32 %3655, 1
  %3657 = shl i32 %3656, 16
  %3658 = icmp ult i32 %3652, %3657
  br i1 %3658, label %3659, label %3796

3659:                                             ; preds = %3649
  %3660 = getelementptr inbounds i8, i8* %3424, i64 7
  %3661 = load i8, i8* %3660, align 1
  %3662 = zext i8 %3661 to i32
  %3663 = sext i32 %3656 to i64
  %3664 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3663
  %3665 = load i8, i8* %3664, align 1
  %3666 = zext i8 %3665 to i32
  %3667 = shl i32 %3656, %3666
  %3668 = shl i32 %3652, %3666
  %3669 = add nsw i32 %3651, %3666
  %3670 = icmp sgt i32 %3669, -1
  %3671 = icmp ult i8* %3650, %3382
  %3672 = and i1 %3671, %3670
  br i1 %3672, label %3673, label %3682

3673:                                             ; preds = %3659
  %3674 = getelementptr inbounds i8, i8* %3650, i64 2
  %3675 = bitcast i8* %3650 to i16*
  %3676 = load i16, i16* %3675, align 1
  %3677 = call i16 @llvm.bswap.i16(i16 %3676) #7
  %3678 = zext i16 %3677 to i32
  %3679 = shl i32 %3678, %3669
  %3680 = or i32 %3679, %3668
  %3681 = add nsw i32 %3669, -16
  br label %3682

3682:                                             ; preds = %3673, %3659
  %3683 = phi i8* [ %3674, %3673 ], [ %3650, %3659 ]
  %3684 = phi i32 [ %3681, %3673 ], [ %3669, %3659 ]
  %3685 = phi i32 [ %3680, %3673 ], [ %3668, %3659 ]
  %3686 = add nsw i32 %3667, -1
  %3687 = mul nsw i32 %3686, %3662
  %3688 = ashr i32 %3687, 8
  %3689 = add nsw i32 %3688, 1
  %3690 = shl i32 %3689, 16
  %3691 = icmp ult i32 %3685, %3690
  br i1 %3691, label %3692, label %3726

3692:                                             ; preds = %3682
  %3693 = sext i32 %3689 to i64
  %3694 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3693
  %3695 = load i8, i8* %3694, align 1
  %3696 = zext i8 %3695 to i32
  %3697 = shl i32 %3689, %3696
  %3698 = shl i32 %3685, %3696
  %3699 = add nsw i32 %3684, %3696
  %3700 = icmp sgt i32 %3699, -1
  %3701 = icmp ult i8* %3683, %3382
  %3702 = and i1 %3701, %3700
  br i1 %3702, label %3703, label %3712

3703:                                             ; preds = %3692
  %3704 = getelementptr inbounds i8, i8* %3683, i64 2
  %3705 = bitcast i8* %3683 to i16*
  %3706 = load i16, i16* %3705, align 1
  %3707 = call i16 @llvm.bswap.i16(i16 %3706) #7
  %3708 = zext i16 %3707 to i32
  %3709 = shl i32 %3708, %3699
  %3710 = or i32 %3709, %3698
  %3711 = add nsw i32 %3699, -16
  br label %3712

3712:                                             ; preds = %3703, %3692
  %3713 = phi i8* [ %3704, %3703 ], [ %3683, %3692 ]
  %3714 = phi i32 [ %3711, %3703 ], [ %3699, %3692 ]
  %3715 = phi i32 [ %3710, %3703 ], [ %3698, %3692 ]
  %3716 = mul i32 %3697, 159
  %3717 = add i32 %3716, -159
  %3718 = ashr i32 %3717, 8
  %3719 = add nsw i32 %3718, 1
  %3720 = shl i32 %3719, 16
  %3721 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3720, i32 %3719, i32 %3715, i32 0, i32 %3697, i32 %3715) #8, !srcloc !2
  %3722 = extractvalue { i32, i32, i32 } %3721, 0
  %3723 = extractvalue { i32, i32, i32 } %3721, 1
  %3724 = extractvalue { i32, i32, i32 } %3721, 2
  %3725 = add nsw i32 %3722, 5
  br label %3927

3726:                                             ; preds = %3682
  %3727 = sub i32 %3667, %3689
  %3728 = sub i32 %3685, %3690
  %3729 = sext i32 %3727 to i64
  %3730 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3729
  %3731 = load i8, i8* %3730, align 1
  %3732 = zext i8 %3731 to i32
  %3733 = shl i32 %3727, %3732
  %3734 = shl i32 %3728, %3732
  %3735 = add nsw i32 %3684, %3732
  %3736 = icmp sgt i32 %3735, -1
  %3737 = icmp ult i8* %3683, %3382
  %3738 = and i1 %3737, %3736
  br i1 %3738, label %3739, label %3748

3739:                                             ; preds = %3726
  %3740 = getelementptr inbounds i8, i8* %3683, i64 2
  %3741 = bitcast i8* %3683 to i16*
  %3742 = load i16, i16* %3741, align 1
  %3743 = call i16 @llvm.bswap.i16(i16 %3742) #7
  %3744 = zext i16 %3743 to i32
  %3745 = shl i32 %3744, %3735
  %3746 = or i32 %3745, %3734
  %3747 = add nsw i32 %3735, -16
  br label %3748

3748:                                             ; preds = %3739, %3726
  %3749 = phi i8* [ %3740, %3739 ], [ %3683, %3726 ]
  %3750 = phi i32 [ %3747, %3739 ], [ %3735, %3726 ]
  %3751 = phi i32 [ %3746, %3739 ], [ %3734, %3726 ]
  %3752 = mul i32 %3733, 165
  %3753 = add i32 %3752, -165
  %3754 = ashr i32 %3753, 8
  %3755 = add nsw i32 %3754, 1
  %3756 = shl i32 %3755, 16
  %3757 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3756, i32 %3755, i32 %3751, i32 0, i32 %3733, i32 %3751) #8, !srcloc !2
  %3758 = extractvalue { i32, i32, i32 } %3757, 0
  %3759 = extractvalue { i32, i32, i32 } %3757, 1
  %3760 = extractvalue { i32, i32, i32 } %3757, 2
  %3761 = shl i32 %3758, 1
  %3762 = add nsw i32 %3761, 7
  %3763 = sext i32 %3759 to i64
  %3764 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3763
  %3765 = load i8, i8* %3764, align 1
  %3766 = zext i8 %3765 to i32
  %3767 = shl i32 %3759, %3766
  %3768 = shl i32 %3760, %3766
  %3769 = add nsw i32 %3750, %3766
  %3770 = icmp sgt i32 %3769, -1
  %3771 = icmp ult i8* %3749, %3382
  %3772 = and i1 %3771, %3770
  br i1 %3772, label %3773, label %3782

3773:                                             ; preds = %3748
  %3774 = getelementptr inbounds i8, i8* %3749, i64 2
  %3775 = bitcast i8* %3749 to i16*
  %3776 = load i16, i16* %3775, align 1
  %3777 = call i16 @llvm.bswap.i16(i16 %3776) #7
  %3778 = zext i16 %3777 to i32
  %3779 = shl i32 %3778, %3769
  %3780 = or i32 %3779, %3768
  %3781 = add nsw i32 %3769, -16
  br label %3782

3782:                                             ; preds = %3773, %3748
  %3783 = phi i8* [ %3774, %3773 ], [ %3749, %3748 ]
  %3784 = phi i32 [ %3781, %3773 ], [ %3769, %3748 ]
  %3785 = phi i32 [ %3780, %3773 ], [ %3768, %3748 ]
  %3786 = mul i32 %3767, 145
  %3787 = add i32 %3786, -145
  %3788 = ashr i32 %3787, 8
  %3789 = add nsw i32 %3788, 1
  %3790 = shl i32 %3789, 16
  %3791 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3790, i32 %3789, i32 %3785, i32 0, i32 %3767, i32 %3785) #8, !srcloc !2
  %3792 = extractvalue { i32, i32, i32 } %3791, 0
  %3793 = extractvalue { i32, i32, i32 } %3791, 1
  %3794 = extractvalue { i32, i32, i32 } %3791, 2
  %3795 = add nsw i32 %3762, %3792
  br label %3927

3796:                                             ; preds = %3649
  %3797 = sub i32 %3634, %3656
  %3798 = sub i32 %3652, %3657
  %3799 = getelementptr inbounds i8, i8* %3424, i64 8
  %3800 = load i8, i8* %3799, align 1
  %3801 = sext i32 %3797 to i64
  %3802 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3801
  %3803 = load i8, i8* %3802, align 1
  %3804 = zext i8 %3803 to i32
  %3805 = shl i32 %3797, %3804
  %3806 = shl i32 %3798, %3804
  %3807 = add nsw i32 %3651, %3804
  %3808 = icmp sgt i32 %3807, -1
  %3809 = icmp ult i8* %3650, %3382
  %3810 = and i1 %3809, %3808
  br i1 %3810, label %3811, label %3820

3811:                                             ; preds = %3796
  %3812 = getelementptr inbounds i8, i8* %3650, i64 2
  %3813 = bitcast i8* %3650 to i16*
  %3814 = load i16, i16* %3813, align 1
  %3815 = call i16 @llvm.bswap.i16(i16 %3814) #7
  %3816 = zext i16 %3815 to i32
  %3817 = shl i32 %3816, %3807
  %3818 = or i32 %3817, %3806
  %3819 = add nsw i32 %3807, -16
  br label %3820

3820:                                             ; preds = %3811, %3796
  %3821 = phi i8* [ %3812, %3811 ], [ %3650, %3796 ]
  %3822 = phi i32 [ %3819, %3811 ], [ %3807, %3796 ]
  %3823 = phi i32 [ %3818, %3811 ], [ %3806, %3796 ]
  %3824 = add nsw i32 %3805, -1
  %3825 = zext i8 %3800 to i32
  %3826 = mul nsw i32 %3824, %3825
  %3827 = ashr i32 %3826, 8
  %3828 = add nsw i32 %3827, 1
  %3829 = shl i32 %3828, 16
  %3830 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3829, i32 %3828, i32 %3823, i32 0, i32 %3805, i32 %3823) #8, !srcloc !2
  %3831 = extractvalue { i32, i32, i32 } %3830, 0
  %3832 = extractvalue { i32, i32, i32 } %3830, 1
  %3833 = extractvalue { i32, i32, i32 } %3830, 2
  %3834 = add nsw i32 %3831, 9
  %3835 = sext i32 %3834 to i64
  %3836 = getelementptr inbounds i8, i8* %3424, i64 %3835
  %3837 = load i8, i8* %3836, align 1
  %3838 = sext i32 %3832 to i64
  %3839 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3838
  %3840 = load i8, i8* %3839, align 1
  %3841 = zext i8 %3840 to i32
  %3842 = shl i32 %3832, %3841
  %3843 = shl i32 %3833, %3841
  %3844 = add nsw i32 %3822, %3841
  %3845 = icmp sgt i32 %3844, -1
  %3846 = icmp ult i8* %3821, %3382
  %3847 = and i1 %3846, %3845
  br i1 %3847, label %3848, label %3857

3848:                                             ; preds = %3820
  %3849 = getelementptr inbounds i8, i8* %3821, i64 2
  %3850 = bitcast i8* %3821 to i16*
  %3851 = load i16, i16* %3850, align 1
  %3852 = call i16 @llvm.bswap.i16(i16 %3851) #7
  %3853 = zext i16 %3852 to i32
  %3854 = shl i32 %3853, %3844
  %3855 = or i32 %3854, %3843
  %3856 = add nsw i32 %3844, -16
  br label %3857

3857:                                             ; preds = %3848, %3820
  %3858 = phi i8* [ %3849, %3848 ], [ %3821, %3820 ]
  %3859 = phi i32 [ %3856, %3848 ], [ %3844, %3820 ]
  %3860 = phi i32 [ %3855, %3848 ], [ %3843, %3820 ]
  %3861 = add nsw i32 %3842, -1
  %3862 = zext i8 %3837 to i32
  %3863 = mul nsw i32 %3861, %3862
  %3864 = ashr i32 %3863, 8
  %3865 = add nsw i32 %3864, 1
  %3866 = shl i32 %3865, 16
  %3867 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3866, i32 %3865, i32 %3860, i32 0, i32 %3842, i32 %3860) #8, !srcloc !2
  %3868 = extractvalue { i32, i32, i32 } %3867, 0
  %3869 = extractvalue { i32, i32, i32 } %3867, 1
  %3870 = extractvalue { i32, i32, i32 } %3867, 2
  %3871 = shl i32 %3831, 1
  %3872 = add nsw i32 %3868, %3871
  %3873 = sext i32 %3872 to i64
  %3874 = getelementptr inbounds [4 x i8*], [4 x i8*]* @ff_vp8_dct_cat_prob, i64 0, i64 %3873
  %3875 = load i8*, i8** %3874, align 8
  %3876 = load i8, i8* %3875, align 1
  br label %3877

3877:                                             ; preds = %3906, %3857
  %3878 = phi i8* [ %3858, %3857 ], [ %3907, %3906 ]
  %3879 = phi i32 [ %3870, %3857 ], [ %3919, %3906 ]
  %3880 = phi i32 [ %3859, %3857 ], [ %3908, %3906 ]
  %3881 = phi i32 [ %3869, %3857 ], [ %3918, %3906 ]
  %3882 = phi i8 [ %3876, %3857 ], [ %3921, %3906 ]
  %3883 = phi i8* [ %3875, %3857 ], [ %3886, %3906 ]
  %3884 = phi i32 [ 0, %3857 ], [ %3920, %3906 ]
  %3885 = shl i32 %3884, 1
  %3886 = getelementptr inbounds i8, i8* %3883, i64 1
  %3887 = sext i32 %3881 to i64
  %3888 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3887
  %3889 = load i8, i8* %3888, align 1
  %3890 = zext i8 %3889 to i32
  %3891 = shl i32 %3881, %3890
  %3892 = shl i32 %3879, %3890
  %3893 = add nsw i32 %3880, %3890
  %3894 = icmp sgt i32 %3893, -1
  %3895 = icmp ult i8* %3878, %3382
  %3896 = and i1 %3895, %3894
  br i1 %3896, label %3897, label %3906

3897:                                             ; preds = %3877
  %3898 = getelementptr inbounds i8, i8* %3878, i64 2
  %3899 = bitcast i8* %3878 to i16*
  %3900 = load i16, i16* %3899, align 1
  %3901 = call i16 @llvm.bswap.i16(i16 %3900) #7
  %3902 = zext i16 %3901 to i32
  %3903 = shl i32 %3902, %3893
  %3904 = or i32 %3903, %3892
  %3905 = add nsw i32 %3893, -16
  br label %3906

3906:                                             ; preds = %3897, %3877
  %3907 = phi i8* [ %3898, %3897 ], [ %3878, %3877 ]
  %3908 = phi i32 [ %3905, %3897 ], [ %3893, %3877 ]
  %3909 = phi i32 [ %3904, %3897 ], [ %3892, %3877 ]
  %3910 = add nsw i32 %3891, -1
  %3911 = zext i8 %3882 to i32
  %3912 = mul nsw i32 %3910, %3911
  %3913 = ashr i32 %3912, 8
  %3914 = add nsw i32 %3913, 1
  %3915 = shl i32 %3914, 16
  %3916 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3915, i32 %3914, i32 %3909, i32 0, i32 %3891, i32 %3909) #8, !srcloc !2
  %3917 = extractvalue { i32, i32, i32 } %3916, 0
  %3918 = extractvalue { i32, i32, i32 } %3916, 1
  %3919 = extractvalue { i32, i32, i32 } %3916, 2
  %3920 = add nsw i32 %3917, %3885
  %3921 = load i8, i8* %3886, align 1
  %3922 = icmp eq i8 %3921, 0
  br i1 %3922, label %3923, label %3877

3923:                                             ; preds = %3906
  %3924 = shl i32 8, %3872
  %3925 = add nsw i32 %3924, 3
  %3926 = add nsw i32 %3925, %3920
  br label %3927

3927:                                             ; preds = %3923, %3782, %3712, %3617
  %3928 = phi i32 [ %3618, %3617 ], [ %3724, %3712 ], [ %3794, %3782 ], [ %3919, %3923 ]
  %3929 = phi i8* [ %3619, %3617 ], [ %3713, %3712 ], [ %3783, %3782 ], [ %3907, %3923 ]
  %3930 = phi i32 [ %3620, %3617 ], [ %3714, %3712 ], [ %3784, %3782 ], [ %3908, %3923 ]
  %3931 = phi i32 [ %3621, %3617 ], [ %3723, %3712 ], [ %3793, %3782 ], [ %3918, %3923 ]
  %3932 = phi i32 [ %3623, %3617 ], [ %3725, %3712 ], [ %3795, %3782 ], [ %3926, %3923 ]
  %3933 = add nsw i32 %3425, 1
  %3934 = sext i32 %3933 to i64
  %3935 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 %3323, i64 %3934, i64 2, i64 0
  br label %3936

3936:                                             ; preds = %3927, %3506
  %3937 = phi i32 [ %3499, %3506 ], [ %3928, %3927 ]
  %3938 = phi i8* [ %3497, %3506 ], [ %3929, %3927 ]
  %3939 = phi i32 [ %3498, %3506 ], [ %3930, %3927 ]
  %3940 = phi i32 [ %3503, %3506 ], [ %3931, %3927 ]
  %3941 = phi i32 [ 1, %3506 ], [ %3932, %3927 ]
  %3942 = phi i8* [ %3509, %3506 ], [ %3935, %3927 ]
  %3943 = sext i32 %3940 to i64
  %3944 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %3943
  %3945 = load i8, i8* %3944, align 1
  %3946 = zext i8 %3945 to i32
  %3947 = shl i32 %3940, %3946
  %3948 = shl i32 %3937, %3946
  %3949 = add nsw i32 %3939, %3946
  %3950 = icmp sgt i32 %3949, -1
  %3951 = icmp ult i8* %3938, %3382
  %3952 = and i1 %3951, %3950
  br i1 %3952, label %3953, label %3962

3953:                                             ; preds = %3936
  %3954 = getelementptr inbounds i8, i8* %3938, i64 2
  %3955 = bitcast i8* %3938 to i16*
  %3956 = load i16, i16* %3955, align 1
  %3957 = call i16 @llvm.bswap.i16(i16 %3956) #7
  %3958 = zext i16 %3957 to i32
  %3959 = shl i32 %3958, %3949
  %3960 = or i32 %3959, %3948
  %3961 = add nsw i32 %3949, -16
  br label %3962

3962:                                             ; preds = %3953, %3936
  %3963 = phi i8* [ %3954, %3953 ], [ %3938, %3936 ]
  %3964 = phi i32 [ %3961, %3953 ], [ %3949, %3936 ]
  %3965 = phi i32 [ %3960, %3953 ], [ %3948, %3936 ]
  %3966 = shl i32 %3947, 7
  %3967 = add i32 %3966, -128
  %3968 = ashr i32 %3967, 8
  %3969 = add nsw i32 %3968, 1
  %3970 = shl i32 %3969, 16
  %3971 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %3970, i32 %3969, i32 %3965, i32 0, i32 %3947, i32 %3965) #8, !srcloc !2
  %3972 = extractvalue { i32, i32, i32 } %3971, 0
  %3973 = extractvalue { i32, i32, i32 } %3971, 1
  %3974 = extractvalue { i32, i32, i32 } %3971, 2
  %3975 = icmp eq i32 %3972, 0
  %3976 = sub nsw i32 0, %3941
  %3977 = select i1 %3975, i32 %3941, i32 %3976
  %3978 = icmp ne i32 %3425, 0
  %3979 = zext i1 %3978 to i64
  %3980 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 24, i64 %3326, i32 0, i64 %3979
  %3981 = load i16, i16* %3980, align 2
  %3982 = trunc i32 %3977 to i16
  %3983 = mul i16 %3981, %3982
  %3984 = sext i32 %3425 to i64
  %3985 = getelementptr inbounds [17 x i8], [17 x i8]* @ff_zigzag_scan, i64 0, i64 %3984
  %3986 = load i8, i8* %3985, align 1
  %3987 = zext i8 %3986 to i64
  %3988 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %3329, i64 %3333, i64 %3987
  store i16 %3983, i16* %3988, align 2
  %3989 = add nsw i32 %3425, 1
  %3990 = icmp slt i32 %3989, 16
  br i1 %3990, label %3384, label %3991

3991:                                             ; preds = %3962, %3458, %3406
  %3992 = phi i32 [ %3451, %3458 ], [ %3974, %3962 ], [ %3409, %3406 ]
  %3993 = phi i8* [ %3449, %3458 ], [ %3963, %3962 ], [ %3407, %3406 ]
  %3994 = phi i32 [ %3450, %3458 ], [ %3964, %3962 ], [ %3408, %3406 ]
  %3995 = phi i32 [ %3455, %3458 ], [ %3973, %3962 ], [ %3413, %3406 ]
  %3996 = phi i32 [ 16, %3458 ], [ %3989, %3962 ], [ %3989, %3406 ]
  store i32 %3995, i32* %223, align 8
  store i32 %3994, i32* %151, align 4
  store i8* %3993, i8** %62, align 8
  store i8* %3382, i8** %60, align 8
  store i32 %3992, i32* %224, align 8
  store i32 %3383, i32* %74, align 4
  br label %3997

3997:                                             ; preds = %3991, %3377
  %3998 = phi i32 [ %3996, %3991 ], [ 0, %3377 ]
  %3999 = add nsw i32 %3998, %3325
  %4000 = trunc i32 %3999 to i8
  %4001 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 %3329, i64 %3333
  store i8 %4000, i8* %4001, align 1
  %4002 = icmp ne i32 %3998, 0
  %4003 = zext i1 %4002 to i8
  store i8 %4003, i8* %3331, align 1
  store i8 %4003, i8* %3337, align 1
  %4004 = add nsw i32 %3998, %3334
  %4005 = add nuw nsw i64 %3333, 1
  %4006 = icmp eq i64 %4005, 4
  br i1 %4006, label %4007, label %3332

4007:                                             ; preds = %3997
  %4008 = add nuw nsw i64 %3329, 1
  %4009 = icmp eq i64 %4008, 4
  br i1 %4009, label %4010, label %3328

4010:                                             ; preds = %4007, %4699
  %4011 = phi i64 [ %4700, %4699 ], [ 4, %4007 ]
  %4012 = phi i32 [ %4693, %4699 ], [ %4004, %4007 ]
  br label %4013

4013:                                             ; preds = %4696, %4010
  %4014 = phi i64 [ 0, %4010 ], [ %4697, %4696 ]
  %4015 = phi i32 [ %4012, %4010 ], [ %4693, %4696 ]
  %4016 = shl nuw i64 %4014, 1
  %4017 = add nuw nsw i64 %4016, %4011
  %4018 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 3, i64 %4017
  br label %4019

4019:                                             ; preds = %4687, %4013
  %4020 = phi i64 [ 0, %4013 ], [ %4694, %4687 ]
  %4021 = phi i32 [ %4015, %4013 ], [ %4693, %4687 ]
  %4022 = load i8, i8* %4018, align 1
  %4023 = zext i8 %4022 to i64
  %4024 = shl nuw nsw i64 %4020, 1
  %4025 = add nuw nsw i64 %4024, %4011
  %4026 = getelementptr inbounds [9 x i8], [9 x i8]* %2645, i64 %312, i64 %4025
  %4027 = load i8, i8* %4026, align 1
  %4028 = zext i8 %4027 to i64
  %4029 = add nuw nsw i64 %4028, %4023
  %4030 = add nuw nsw i64 %4020, %4016
  %4031 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 2, i64 0, i64 %4029, i64 0
  %4032 = load i8, i8* %4031, align 1
  %4033 = zext i8 %4032 to i32
  %4034 = load i32, i32* %223, align 8
  %4035 = sext i32 %4034 to i64
  %4036 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4035
  %4037 = load i8, i8* %4036, align 1
  %4038 = zext i8 %4037 to i32
  %4039 = load i32, i32* %151, align 4
  %4040 = load i32, i32* %224, align 8
  %4041 = shl i32 %4034, %4038
  store i32 %4041, i32* %223, align 8
  %4042 = shl i32 %4040, %4038
  %4043 = add nsw i32 %4039, %4038
  %4044 = icmp sgt i32 %4043, -1
  br i1 %4044, label %4045, label %4058

4045:                                             ; preds = %4019
  %4046 = load i8*, i8** %62, align 8
  %4047 = load i8*, i8** %60, align 8
  %4048 = icmp ult i8* %4046, %4047
  br i1 %4048, label %4049, label %4058

4049:                                             ; preds = %4045
  %4050 = getelementptr inbounds i8, i8* %4046, i64 2
  store i8* %4050, i8** %62, align 8
  %4051 = bitcast i8* %4046 to i16*
  %4052 = load i16, i16* %4051, align 1
  %4053 = call i16 @llvm.bswap.i16(i16 %4052) #7
  %4054 = zext i16 %4053 to i32
  %4055 = shl i32 %4054, %4043
  %4056 = or i32 %4055, %4042
  %4057 = add nsw i32 %4043, -16
  br label %4058

4058:                                             ; preds = %4049, %4045, %4019
  %4059 = phi i32 [ %4057, %4049 ], [ %4043, %4045 ], [ %4043, %4019 ]
  %4060 = phi i32 [ %4056, %4049 ], [ %4042, %4045 ], [ %4042, %4019 ]
  store i32 %4059, i32* %151, align 4
  %4061 = add nsw i32 %4041, -1
  %4062 = mul nsw i32 %4061, %4033
  %4063 = ashr i32 %4062, 8
  %4064 = add nsw i32 %4063, 1
  %4065 = shl i32 %4064, 16
  %4066 = icmp ult i32 %4060, %4065
  br i1 %4066, label %4067, label %4068

4067:                                             ; preds = %4058
  store i32 %4064, i32* %223, align 8
  store i32 %4060, i32* %224, align 8
  br label %4687

4068:                                             ; preds = %4058
  %4069 = sub i32 %4041, %4064
  store i32 %4069, i32* %223, align 8
  %4070 = sub i32 %4060, %4065
  store i32 %4070, i32* %224, align 8
  %4071 = load i8*, i8** %62, align 8
  %4072 = load i8*, i8** %60, align 8
  %4073 = load i32, i32* %74, align 4
  br label %4109

4074:                                             ; preds = %4652
  %4075 = load i8, i8* %4632, align 1
  %4076 = zext i8 %4075 to i32
  %4077 = sext i32 %4663 to i64
  %4078 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4077
  %4079 = load i8, i8* %4078, align 1
  %4080 = zext i8 %4079 to i32
  %4081 = shl i32 %4663, %4080
  %4082 = shl i32 %4664, %4080
  %4083 = add nsw i32 %4654, %4080
  %4084 = icmp sgt i32 %4083, -1
  %4085 = icmp ult i8* %4653, %4072
  %4086 = and i1 %4085, %4084
  br i1 %4086, label %4087, label %4096

4087:                                             ; preds = %4074
  %4088 = getelementptr inbounds i8, i8* %4653, i64 2
  %4089 = bitcast i8* %4653 to i16*
  %4090 = load i16, i16* %4089, align 1
  %4091 = call i16 @llvm.bswap.i16(i16 %4090) #7
  %4092 = zext i16 %4091 to i32
  %4093 = shl i32 %4092, %4083
  %4094 = or i32 %4093, %4082
  %4095 = add nsw i32 %4083, -16
  br label %4096

4096:                                             ; preds = %4087, %4074
  %4097 = phi i8* [ %4088, %4087 ], [ %4653, %4074 ]
  %4098 = phi i32 [ %4095, %4087 ], [ %4083, %4074 ]
  %4099 = phi i32 [ %4094, %4087 ], [ %4082, %4074 ]
  %4100 = add nsw i32 %4081, -1
  %4101 = mul nsw i32 %4100, %4076
  %4102 = ashr i32 %4101, 8
  %4103 = add nsw i32 %4102, 1
  %4104 = shl i32 %4103, 16
  %4105 = icmp ult i32 %4099, %4104
  br i1 %4105, label %4681, label %4106

4106:                                             ; preds = %4096
  %4107 = sub i32 %4081, %4103
  %4108 = sub i32 %4099, %4104
  br label %4154

4109:                                             ; preds = %4154, %4068
  %4110 = phi i32 [ %4070, %4068 ], [ %4155, %4154 ]
  %4111 = phi i8* [ %4071, %4068 ], [ %4156, %4154 ]
  %4112 = phi i32 [ %4059, %4068 ], [ %4157, %4154 ]
  %4113 = phi i32 [ %4069, %4068 ], [ %4158, %4154 ]
  %4114 = phi i8* [ %4031, %4068 ], [ %4159, %4154 ]
  %4115 = phi i32 [ 0, %4068 ], [ %4160, %4154 ]
  %4116 = getelementptr inbounds i8, i8* %4114, i64 1
  %4117 = load i8, i8* %4116, align 1
  %4118 = zext i8 %4117 to i32
  %4119 = sext i32 %4113 to i64
  %4120 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4119
  %4121 = load i8, i8* %4120, align 1
  %4122 = zext i8 %4121 to i32
  %4123 = shl i32 %4113, %4122
  %4124 = shl i32 %4110, %4122
  %4125 = add nsw i32 %4112, %4122
  %4126 = icmp sgt i32 %4125, -1
  %4127 = icmp ult i8* %4111, %4072
  %4128 = and i1 %4127, %4126
  br i1 %4128, label %4129, label %4138

4129:                                             ; preds = %4109
  %4130 = getelementptr inbounds i8, i8* %4111, i64 2
  %4131 = bitcast i8* %4111 to i16*
  %4132 = load i16, i16* %4131, align 1
  %4133 = call i16 @llvm.bswap.i16(i16 %4132) #7
  %4134 = zext i16 %4133 to i32
  %4135 = shl i32 %4134, %4125
  %4136 = or i32 %4135, %4124
  %4137 = add nsw i32 %4125, -16
  br label %4138

4138:                                             ; preds = %4129, %4109
  %4139 = phi i8* [ %4130, %4129 ], [ %4111, %4109 ]
  %4140 = phi i32 [ %4137, %4129 ], [ %4125, %4109 ]
  %4141 = phi i32 [ %4136, %4129 ], [ %4124, %4109 ]
  %4142 = add nsw i32 %4123, -1
  %4143 = mul nsw i32 %4142, %4118
  %4144 = ashr i32 %4143, 8
  %4145 = add nsw i32 %4144, 1
  %4146 = shl i32 %4145, 16
  %4147 = icmp ult i32 %4141, %4146
  br i1 %4147, label %4148, label %4161

4148:                                             ; preds = %4138
  %4149 = add nsw i32 %4115, 1
  %4150 = icmp eq i32 %4149, 16
  br i1 %4150, label %4681, label %4151

4151:                                             ; preds = %4148
  %4152 = sext i32 %4149 to i64
  %4153 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 2, i64 %4152, i64 0, i64 0
  br label %4154

4154:                                             ; preds = %4151, %4106
  %4155 = phi i32 [ %4141, %4151 ], [ %4108, %4106 ]
  %4156 = phi i8* [ %4139, %4151 ], [ %4097, %4106 ]
  %4157 = phi i32 [ %4140, %4151 ], [ %4098, %4106 ]
  %4158 = phi i32 [ %4145, %4151 ], [ %4107, %4106 ]
  %4159 = phi i8* [ %4153, %4151 ], [ %4632, %4106 ]
  %4160 = phi i32 [ %4149, %4151 ], [ %4679, %4106 ]
  br label %4109

4161:                                             ; preds = %4138
  %4162 = sub i32 %4123, %4145
  %4163 = sub i32 %4141, %4146
  %4164 = getelementptr inbounds i8, i8* %4114, i64 2
  %4165 = load i8, i8* %4164, align 1
  %4166 = zext i8 %4165 to i32
  %4167 = sext i32 %4162 to i64
  %4168 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4167
  %4169 = load i8, i8* %4168, align 1
  %4170 = zext i8 %4169 to i32
  %4171 = shl i32 %4162, %4170
  %4172 = shl i32 %4163, %4170
  %4173 = add nsw i32 %4140, %4170
  %4174 = icmp sgt i32 %4173, -1
  %4175 = icmp ult i8* %4139, %4072
  %4176 = and i1 %4175, %4174
  br i1 %4176, label %4177, label %4186

4177:                                             ; preds = %4161
  %4178 = getelementptr inbounds i8, i8* %4139, i64 2
  %4179 = bitcast i8* %4139 to i16*
  %4180 = load i16, i16* %4179, align 1
  %4181 = call i16 @llvm.bswap.i16(i16 %4180) #7
  %4182 = zext i16 %4181 to i32
  %4183 = shl i32 %4182, %4173
  %4184 = or i32 %4183, %4172
  %4185 = add nsw i32 %4173, -16
  br label %4186

4186:                                             ; preds = %4177, %4161
  %4187 = phi i8* [ %4178, %4177 ], [ %4139, %4161 ]
  %4188 = phi i32 [ %4185, %4177 ], [ %4173, %4161 ]
  %4189 = phi i32 [ %4184, %4177 ], [ %4172, %4161 ]
  %4190 = add nsw i32 %4171, -1
  %4191 = mul nsw i32 %4190, %4166
  %4192 = ashr i32 %4191, 8
  %4193 = add nsw i32 %4192, 1
  %4194 = shl i32 %4193, 16
  %4195 = icmp ult i32 %4189, %4194
  br i1 %4195, label %4196, label %4200

4196:                                             ; preds = %4186
  %4197 = add nsw i32 %4115, 1
  %4198 = sext i32 %4197 to i64
  %4199 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 2, i64 %4198, i64 1, i64 0
  br label %4626

4200:                                             ; preds = %4186
  %4201 = sub i32 %4171, %4193
  %4202 = sub i32 %4189, %4194
  %4203 = getelementptr inbounds i8, i8* %4114, i64 3
  %4204 = load i8, i8* %4203, align 1
  %4205 = zext i8 %4204 to i32
  %4206 = sext i32 %4201 to i64
  %4207 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4206
  %4208 = load i8, i8* %4207, align 1
  %4209 = zext i8 %4208 to i32
  %4210 = shl i32 %4201, %4209
  %4211 = shl i32 %4202, %4209
  %4212 = add nsw i32 %4188, %4209
  %4213 = icmp sgt i32 %4212, -1
  %4214 = icmp ult i8* %4187, %4072
  %4215 = and i1 %4214, %4213
  br i1 %4215, label %4216, label %4225

4216:                                             ; preds = %4200
  %4217 = getelementptr inbounds i8, i8* %4187, i64 2
  %4218 = bitcast i8* %4187 to i16*
  %4219 = load i16, i16* %4218, align 1
  %4220 = call i16 @llvm.bswap.i16(i16 %4219) #7
  %4221 = zext i16 %4220 to i32
  %4222 = shl i32 %4221, %4212
  %4223 = or i32 %4222, %4211
  %4224 = add nsw i32 %4212, -16
  br label %4225

4225:                                             ; preds = %4216, %4200
  %4226 = phi i8* [ %4217, %4216 ], [ %4187, %4200 ]
  %4227 = phi i32 [ %4224, %4216 ], [ %4212, %4200 ]
  %4228 = phi i32 [ %4223, %4216 ], [ %4211, %4200 ]
  %4229 = add nsw i32 %4210, -1
  %4230 = mul nsw i32 %4229, %4205
  %4231 = ashr i32 %4230, 8
  %4232 = add nsw i32 %4231, 1
  %4233 = shl i32 %4232, 16
  %4234 = icmp ult i32 %4228, %4233
  br i1 %4234, label %4235, label %4314

4235:                                             ; preds = %4225
  %4236 = getelementptr inbounds i8, i8* %4114, i64 4
  %4237 = load i8, i8* %4236, align 1
  %4238 = zext i8 %4237 to i32
  %4239 = sext i32 %4232 to i64
  %4240 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4239
  %4241 = load i8, i8* %4240, align 1
  %4242 = zext i8 %4241 to i32
  %4243 = shl i32 %4232, %4242
  %4244 = shl i32 %4228, %4242
  %4245 = add nsw i32 %4227, %4242
  %4246 = icmp sgt i32 %4245, -1
  %4247 = icmp ult i8* %4226, %4072
  %4248 = and i1 %4247, %4246
  br i1 %4248, label %4249, label %4258

4249:                                             ; preds = %4235
  %4250 = getelementptr inbounds i8, i8* %4226, i64 2
  %4251 = bitcast i8* %4226 to i16*
  %4252 = load i16, i16* %4251, align 1
  %4253 = call i16 @llvm.bswap.i16(i16 %4252) #7
  %4254 = zext i16 %4253 to i32
  %4255 = shl i32 %4254, %4245
  %4256 = or i32 %4255, %4244
  %4257 = add nsw i32 %4245, -16
  br label %4258

4258:                                             ; preds = %4249, %4235
  %4259 = phi i8* [ %4250, %4249 ], [ %4226, %4235 ]
  %4260 = phi i32 [ %4257, %4249 ], [ %4245, %4235 ]
  %4261 = phi i32 [ %4256, %4249 ], [ %4244, %4235 ]
  %4262 = add nsw i32 %4243, -1
  %4263 = mul nsw i32 %4262, %4238
  %4264 = ashr i32 %4263, 8
  %4265 = add nsw i32 %4264, 1
  %4266 = shl i32 %4265, 16
  %4267 = icmp ult i32 %4261, %4266
  br i1 %4267, label %4307, label %4268

4268:                                             ; preds = %4258
  %4269 = sub i32 %4243, %4265
  %4270 = sub i32 %4261, %4266
  %4271 = getelementptr inbounds i8, i8* %4114, i64 5
  %4272 = load i8, i8* %4271, align 1
  %4273 = sext i32 %4269 to i64
  %4274 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4273
  %4275 = load i8, i8* %4274, align 1
  %4276 = zext i8 %4275 to i32
  %4277 = shl i32 %4269, %4276
  %4278 = shl i32 %4270, %4276
  %4279 = add nsw i32 %4260, %4276
  %4280 = icmp sgt i32 %4279, -1
  %4281 = icmp ult i8* %4259, %4072
  %4282 = and i1 %4281, %4280
  br i1 %4282, label %4283, label %4292

4283:                                             ; preds = %4268
  %4284 = getelementptr inbounds i8, i8* %4259, i64 2
  %4285 = bitcast i8* %4259 to i16*
  %4286 = load i16, i16* %4285, align 1
  %4287 = call i16 @llvm.bswap.i16(i16 %4286) #7
  %4288 = zext i16 %4287 to i32
  %4289 = shl i32 %4288, %4279
  %4290 = or i32 %4289, %4278
  %4291 = add nsw i32 %4279, -16
  br label %4292

4292:                                             ; preds = %4283, %4268
  %4293 = phi i8* [ %4284, %4283 ], [ %4259, %4268 ]
  %4294 = phi i32 [ %4291, %4283 ], [ %4279, %4268 ]
  %4295 = phi i32 [ %4290, %4283 ], [ %4278, %4268 ]
  %4296 = add nsw i32 %4277, -1
  %4297 = zext i8 %4272 to i32
  %4298 = mul nsw i32 %4296, %4297
  %4299 = ashr i32 %4298, 8
  %4300 = add nsw i32 %4299, 1
  %4301 = shl i32 %4300, 16
  %4302 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4301, i32 %4300, i32 %4295, i32 0, i32 %4277, i32 %4295) #8, !srcloc !2
  %4303 = extractvalue { i32, i32, i32 } %4302, 0
  %4304 = extractvalue { i32, i32, i32 } %4302, 1
  %4305 = extractvalue { i32, i32, i32 } %4302, 2
  %4306 = add nsw i32 %4303, 1
  br label %4307

4307:                                             ; preds = %4292, %4258
  %4308 = phi i32 [ %4305, %4292 ], [ %4261, %4258 ]
  %4309 = phi i8* [ %4293, %4292 ], [ %4259, %4258 ]
  %4310 = phi i32 [ %4294, %4292 ], [ %4260, %4258 ]
  %4311 = phi i32 [ %4304, %4292 ], [ %4265, %4258 ]
  %4312 = phi i32 [ %4306, %4292 ], [ 0, %4258 ]
  %4313 = add nsw i32 %4312, 2
  br label %4617

4314:                                             ; preds = %4225
  %4315 = sub i32 %4210, %4232
  %4316 = sub i32 %4228, %4233
  %4317 = getelementptr inbounds i8, i8* %4114, i64 6
  %4318 = load i8, i8* %4317, align 1
  %4319 = zext i8 %4318 to i32
  %4320 = sext i32 %4315 to i64
  %4321 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4320
  %4322 = load i8, i8* %4321, align 1
  %4323 = zext i8 %4322 to i32
  %4324 = shl i32 %4315, %4323
  %4325 = shl i32 %4316, %4323
  %4326 = add nsw i32 %4227, %4323
  %4327 = icmp sgt i32 %4326, -1
  %4328 = icmp ult i8* %4226, %4072
  %4329 = and i1 %4328, %4327
  br i1 %4329, label %4330, label %4339

4330:                                             ; preds = %4314
  %4331 = getelementptr inbounds i8, i8* %4226, i64 2
  %4332 = bitcast i8* %4226 to i16*
  %4333 = load i16, i16* %4332, align 1
  %4334 = call i16 @llvm.bswap.i16(i16 %4333) #7
  %4335 = zext i16 %4334 to i32
  %4336 = shl i32 %4335, %4326
  %4337 = or i32 %4336, %4325
  %4338 = add nsw i32 %4326, -16
  br label %4339

4339:                                             ; preds = %4330, %4314
  %4340 = phi i8* [ %4331, %4330 ], [ %4226, %4314 ]
  %4341 = phi i32 [ %4338, %4330 ], [ %4326, %4314 ]
  %4342 = phi i32 [ %4337, %4330 ], [ %4325, %4314 ]
  %4343 = add nsw i32 %4324, -1
  %4344 = mul nsw i32 %4343, %4319
  %4345 = ashr i32 %4344, 8
  %4346 = add nsw i32 %4345, 1
  %4347 = shl i32 %4346, 16
  %4348 = icmp ult i32 %4342, %4347
  br i1 %4348, label %4349, label %4486

4349:                                             ; preds = %4339
  %4350 = getelementptr inbounds i8, i8* %4114, i64 7
  %4351 = load i8, i8* %4350, align 1
  %4352 = zext i8 %4351 to i32
  %4353 = sext i32 %4346 to i64
  %4354 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4353
  %4355 = load i8, i8* %4354, align 1
  %4356 = zext i8 %4355 to i32
  %4357 = shl i32 %4346, %4356
  %4358 = shl i32 %4342, %4356
  %4359 = add nsw i32 %4341, %4356
  %4360 = icmp sgt i32 %4359, -1
  %4361 = icmp ult i8* %4340, %4072
  %4362 = and i1 %4361, %4360
  br i1 %4362, label %4363, label %4372

4363:                                             ; preds = %4349
  %4364 = getelementptr inbounds i8, i8* %4340, i64 2
  %4365 = bitcast i8* %4340 to i16*
  %4366 = load i16, i16* %4365, align 1
  %4367 = call i16 @llvm.bswap.i16(i16 %4366) #7
  %4368 = zext i16 %4367 to i32
  %4369 = shl i32 %4368, %4359
  %4370 = or i32 %4369, %4358
  %4371 = add nsw i32 %4359, -16
  br label %4372

4372:                                             ; preds = %4363, %4349
  %4373 = phi i8* [ %4364, %4363 ], [ %4340, %4349 ]
  %4374 = phi i32 [ %4371, %4363 ], [ %4359, %4349 ]
  %4375 = phi i32 [ %4370, %4363 ], [ %4358, %4349 ]
  %4376 = add nsw i32 %4357, -1
  %4377 = mul nsw i32 %4376, %4352
  %4378 = ashr i32 %4377, 8
  %4379 = add nsw i32 %4378, 1
  %4380 = shl i32 %4379, 16
  %4381 = icmp ult i32 %4375, %4380
  br i1 %4381, label %4382, label %4416

4382:                                             ; preds = %4372
  %4383 = sext i32 %4379 to i64
  %4384 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4383
  %4385 = load i8, i8* %4384, align 1
  %4386 = zext i8 %4385 to i32
  %4387 = shl i32 %4379, %4386
  %4388 = shl i32 %4375, %4386
  %4389 = add nsw i32 %4374, %4386
  %4390 = icmp sgt i32 %4389, -1
  %4391 = icmp ult i8* %4373, %4072
  %4392 = and i1 %4391, %4390
  br i1 %4392, label %4393, label %4402

4393:                                             ; preds = %4382
  %4394 = getelementptr inbounds i8, i8* %4373, i64 2
  %4395 = bitcast i8* %4373 to i16*
  %4396 = load i16, i16* %4395, align 1
  %4397 = call i16 @llvm.bswap.i16(i16 %4396) #7
  %4398 = zext i16 %4397 to i32
  %4399 = shl i32 %4398, %4389
  %4400 = or i32 %4399, %4388
  %4401 = add nsw i32 %4389, -16
  br label %4402

4402:                                             ; preds = %4393, %4382
  %4403 = phi i8* [ %4394, %4393 ], [ %4373, %4382 ]
  %4404 = phi i32 [ %4401, %4393 ], [ %4389, %4382 ]
  %4405 = phi i32 [ %4400, %4393 ], [ %4388, %4382 ]
  %4406 = mul i32 %4387, 159
  %4407 = add i32 %4406, -159
  %4408 = ashr i32 %4407, 8
  %4409 = add nsw i32 %4408, 1
  %4410 = shl i32 %4409, 16
  %4411 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4410, i32 %4409, i32 %4405, i32 0, i32 %4387, i32 %4405) #8, !srcloc !2
  %4412 = extractvalue { i32, i32, i32 } %4411, 0
  %4413 = extractvalue { i32, i32, i32 } %4411, 1
  %4414 = extractvalue { i32, i32, i32 } %4411, 2
  %4415 = add nsw i32 %4412, 5
  br label %4617

4416:                                             ; preds = %4372
  %4417 = sub i32 %4357, %4379
  %4418 = sub i32 %4375, %4380
  %4419 = sext i32 %4417 to i64
  %4420 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4419
  %4421 = load i8, i8* %4420, align 1
  %4422 = zext i8 %4421 to i32
  %4423 = shl i32 %4417, %4422
  %4424 = shl i32 %4418, %4422
  %4425 = add nsw i32 %4374, %4422
  %4426 = icmp sgt i32 %4425, -1
  %4427 = icmp ult i8* %4373, %4072
  %4428 = and i1 %4427, %4426
  br i1 %4428, label %4429, label %4438

4429:                                             ; preds = %4416
  %4430 = getelementptr inbounds i8, i8* %4373, i64 2
  %4431 = bitcast i8* %4373 to i16*
  %4432 = load i16, i16* %4431, align 1
  %4433 = call i16 @llvm.bswap.i16(i16 %4432) #7
  %4434 = zext i16 %4433 to i32
  %4435 = shl i32 %4434, %4425
  %4436 = or i32 %4435, %4424
  %4437 = add nsw i32 %4425, -16
  br label %4438

4438:                                             ; preds = %4429, %4416
  %4439 = phi i8* [ %4430, %4429 ], [ %4373, %4416 ]
  %4440 = phi i32 [ %4437, %4429 ], [ %4425, %4416 ]
  %4441 = phi i32 [ %4436, %4429 ], [ %4424, %4416 ]
  %4442 = mul i32 %4423, 165
  %4443 = add i32 %4442, -165
  %4444 = ashr i32 %4443, 8
  %4445 = add nsw i32 %4444, 1
  %4446 = shl i32 %4445, 16
  %4447 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4446, i32 %4445, i32 %4441, i32 0, i32 %4423, i32 %4441) #8, !srcloc !2
  %4448 = extractvalue { i32, i32, i32 } %4447, 0
  %4449 = extractvalue { i32, i32, i32 } %4447, 1
  %4450 = extractvalue { i32, i32, i32 } %4447, 2
  %4451 = shl i32 %4448, 1
  %4452 = add nsw i32 %4451, 7
  %4453 = sext i32 %4449 to i64
  %4454 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4453
  %4455 = load i8, i8* %4454, align 1
  %4456 = zext i8 %4455 to i32
  %4457 = shl i32 %4449, %4456
  %4458 = shl i32 %4450, %4456
  %4459 = add nsw i32 %4440, %4456
  %4460 = icmp sgt i32 %4459, -1
  %4461 = icmp ult i8* %4439, %4072
  %4462 = and i1 %4461, %4460
  br i1 %4462, label %4463, label %4472

4463:                                             ; preds = %4438
  %4464 = getelementptr inbounds i8, i8* %4439, i64 2
  %4465 = bitcast i8* %4439 to i16*
  %4466 = load i16, i16* %4465, align 1
  %4467 = call i16 @llvm.bswap.i16(i16 %4466) #7
  %4468 = zext i16 %4467 to i32
  %4469 = shl i32 %4468, %4459
  %4470 = or i32 %4469, %4458
  %4471 = add nsw i32 %4459, -16
  br label %4472

4472:                                             ; preds = %4463, %4438
  %4473 = phi i8* [ %4464, %4463 ], [ %4439, %4438 ]
  %4474 = phi i32 [ %4471, %4463 ], [ %4459, %4438 ]
  %4475 = phi i32 [ %4470, %4463 ], [ %4458, %4438 ]
  %4476 = mul i32 %4457, 145
  %4477 = add i32 %4476, -145
  %4478 = ashr i32 %4477, 8
  %4479 = add nsw i32 %4478, 1
  %4480 = shl i32 %4479, 16
  %4481 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4480, i32 %4479, i32 %4475, i32 0, i32 %4457, i32 %4475) #8, !srcloc !2
  %4482 = extractvalue { i32, i32, i32 } %4481, 0
  %4483 = extractvalue { i32, i32, i32 } %4481, 1
  %4484 = extractvalue { i32, i32, i32 } %4481, 2
  %4485 = add nsw i32 %4452, %4482
  br label %4617

4486:                                             ; preds = %4339
  %4487 = sub i32 %4324, %4346
  %4488 = sub i32 %4342, %4347
  %4489 = getelementptr inbounds i8, i8* %4114, i64 8
  %4490 = load i8, i8* %4489, align 1
  %4491 = sext i32 %4487 to i64
  %4492 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4491
  %4493 = load i8, i8* %4492, align 1
  %4494 = zext i8 %4493 to i32
  %4495 = shl i32 %4487, %4494
  %4496 = shl i32 %4488, %4494
  %4497 = add nsw i32 %4341, %4494
  %4498 = icmp sgt i32 %4497, -1
  %4499 = icmp ult i8* %4340, %4072
  %4500 = and i1 %4499, %4498
  br i1 %4500, label %4501, label %4510

4501:                                             ; preds = %4486
  %4502 = getelementptr inbounds i8, i8* %4340, i64 2
  %4503 = bitcast i8* %4340 to i16*
  %4504 = load i16, i16* %4503, align 1
  %4505 = call i16 @llvm.bswap.i16(i16 %4504) #7
  %4506 = zext i16 %4505 to i32
  %4507 = shl i32 %4506, %4497
  %4508 = or i32 %4507, %4496
  %4509 = add nsw i32 %4497, -16
  br label %4510

4510:                                             ; preds = %4501, %4486
  %4511 = phi i8* [ %4502, %4501 ], [ %4340, %4486 ]
  %4512 = phi i32 [ %4509, %4501 ], [ %4497, %4486 ]
  %4513 = phi i32 [ %4508, %4501 ], [ %4496, %4486 ]
  %4514 = add nsw i32 %4495, -1
  %4515 = zext i8 %4490 to i32
  %4516 = mul nsw i32 %4514, %4515
  %4517 = ashr i32 %4516, 8
  %4518 = add nsw i32 %4517, 1
  %4519 = shl i32 %4518, 16
  %4520 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4519, i32 %4518, i32 %4513, i32 0, i32 %4495, i32 %4513) #8, !srcloc !2
  %4521 = extractvalue { i32, i32, i32 } %4520, 0
  %4522 = extractvalue { i32, i32, i32 } %4520, 1
  %4523 = extractvalue { i32, i32, i32 } %4520, 2
  %4524 = add nsw i32 %4521, 9
  %4525 = sext i32 %4524 to i64
  %4526 = getelementptr inbounds i8, i8* %4114, i64 %4525
  %4527 = load i8, i8* %4526, align 1
  %4528 = sext i32 %4522 to i64
  %4529 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4528
  %4530 = load i8, i8* %4529, align 1
  %4531 = zext i8 %4530 to i32
  %4532 = shl i32 %4522, %4531
  %4533 = shl i32 %4523, %4531
  %4534 = add nsw i32 %4512, %4531
  %4535 = icmp sgt i32 %4534, -1
  %4536 = icmp ult i8* %4511, %4072
  %4537 = and i1 %4536, %4535
  br i1 %4537, label %4538, label %4547

4538:                                             ; preds = %4510
  %4539 = getelementptr inbounds i8, i8* %4511, i64 2
  %4540 = bitcast i8* %4511 to i16*
  %4541 = load i16, i16* %4540, align 1
  %4542 = call i16 @llvm.bswap.i16(i16 %4541) #7
  %4543 = zext i16 %4542 to i32
  %4544 = shl i32 %4543, %4534
  %4545 = or i32 %4544, %4533
  %4546 = add nsw i32 %4534, -16
  br label %4547

4547:                                             ; preds = %4538, %4510
  %4548 = phi i8* [ %4539, %4538 ], [ %4511, %4510 ]
  %4549 = phi i32 [ %4546, %4538 ], [ %4534, %4510 ]
  %4550 = phi i32 [ %4545, %4538 ], [ %4533, %4510 ]
  %4551 = add nsw i32 %4532, -1
  %4552 = zext i8 %4527 to i32
  %4553 = mul nsw i32 %4551, %4552
  %4554 = ashr i32 %4553, 8
  %4555 = add nsw i32 %4554, 1
  %4556 = shl i32 %4555, 16
  %4557 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4556, i32 %4555, i32 %4550, i32 0, i32 %4532, i32 %4550) #8, !srcloc !2
  %4558 = extractvalue { i32, i32, i32 } %4557, 0
  %4559 = extractvalue { i32, i32, i32 } %4557, 1
  %4560 = extractvalue { i32, i32, i32 } %4557, 2
  %4561 = shl i32 %4521, 1
  %4562 = add nsw i32 %4558, %4561
  %4563 = sext i32 %4562 to i64
  %4564 = getelementptr inbounds [4 x i8*], [4 x i8*]* @ff_vp8_dct_cat_prob, i64 0, i64 %4563
  %4565 = load i8*, i8** %4564, align 8
  %4566 = load i8, i8* %4565, align 1
  br label %4567

4567:                                             ; preds = %4596, %4547
  %4568 = phi i8* [ %4548, %4547 ], [ %4597, %4596 ]
  %4569 = phi i32 [ %4560, %4547 ], [ %4609, %4596 ]
  %4570 = phi i32 [ %4549, %4547 ], [ %4598, %4596 ]
  %4571 = phi i32 [ %4559, %4547 ], [ %4608, %4596 ]
  %4572 = phi i8 [ %4566, %4547 ], [ %4611, %4596 ]
  %4573 = phi i8* [ %4565, %4547 ], [ %4576, %4596 ]
  %4574 = phi i32 [ 0, %4547 ], [ %4610, %4596 ]
  %4575 = shl i32 %4574, 1
  %4576 = getelementptr inbounds i8, i8* %4573, i64 1
  %4577 = sext i32 %4571 to i64
  %4578 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4577
  %4579 = load i8, i8* %4578, align 1
  %4580 = zext i8 %4579 to i32
  %4581 = shl i32 %4571, %4580
  %4582 = shl i32 %4569, %4580
  %4583 = add nsw i32 %4570, %4580
  %4584 = icmp sgt i32 %4583, -1
  %4585 = icmp ult i8* %4568, %4072
  %4586 = and i1 %4585, %4584
  br i1 %4586, label %4587, label %4596

4587:                                             ; preds = %4567
  %4588 = getelementptr inbounds i8, i8* %4568, i64 2
  %4589 = bitcast i8* %4568 to i16*
  %4590 = load i16, i16* %4589, align 1
  %4591 = call i16 @llvm.bswap.i16(i16 %4590) #7
  %4592 = zext i16 %4591 to i32
  %4593 = shl i32 %4592, %4583
  %4594 = or i32 %4593, %4582
  %4595 = add nsw i32 %4583, -16
  br label %4596

4596:                                             ; preds = %4587, %4567
  %4597 = phi i8* [ %4588, %4587 ], [ %4568, %4567 ]
  %4598 = phi i32 [ %4595, %4587 ], [ %4583, %4567 ]
  %4599 = phi i32 [ %4594, %4587 ], [ %4582, %4567 ]
  %4600 = add nsw i32 %4581, -1
  %4601 = zext i8 %4572 to i32
  %4602 = mul nsw i32 %4600, %4601
  %4603 = ashr i32 %4602, 8
  %4604 = add nsw i32 %4603, 1
  %4605 = shl i32 %4604, 16
  %4606 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4605, i32 %4604, i32 %4599, i32 0, i32 %4581, i32 %4599) #8, !srcloc !2
  %4607 = extractvalue { i32, i32, i32 } %4606, 0
  %4608 = extractvalue { i32, i32, i32 } %4606, 1
  %4609 = extractvalue { i32, i32, i32 } %4606, 2
  %4610 = add nsw i32 %4607, %4575
  %4611 = load i8, i8* %4576, align 1
  %4612 = icmp eq i8 %4611, 0
  br i1 %4612, label %4613, label %4567

4613:                                             ; preds = %4596
  %4614 = shl i32 8, %4562
  %4615 = add nsw i32 %4614, 3
  %4616 = add nsw i32 %4615, %4610
  br label %4617

4617:                                             ; preds = %4613, %4472, %4402, %4307
  %4618 = phi i32 [ %4308, %4307 ], [ %4414, %4402 ], [ %4484, %4472 ], [ %4609, %4613 ]
  %4619 = phi i8* [ %4309, %4307 ], [ %4403, %4402 ], [ %4473, %4472 ], [ %4597, %4613 ]
  %4620 = phi i32 [ %4310, %4307 ], [ %4404, %4402 ], [ %4474, %4472 ], [ %4598, %4613 ]
  %4621 = phi i32 [ %4311, %4307 ], [ %4413, %4402 ], [ %4483, %4472 ], [ %4608, %4613 ]
  %4622 = phi i32 [ %4313, %4307 ], [ %4415, %4402 ], [ %4485, %4472 ], [ %4616, %4613 ]
  %4623 = add nsw i32 %4115, 1
  %4624 = sext i32 %4623 to i64
  %4625 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 32, i64 0, i32 7, i64 2, i64 %4624, i64 2, i64 0
  br label %4626

4626:                                             ; preds = %4617, %4196
  %4627 = phi i32 [ %4189, %4196 ], [ %4618, %4617 ]
  %4628 = phi i8* [ %4187, %4196 ], [ %4619, %4617 ]
  %4629 = phi i32 [ %4188, %4196 ], [ %4620, %4617 ]
  %4630 = phi i32 [ %4193, %4196 ], [ %4621, %4617 ]
  %4631 = phi i32 [ 1, %4196 ], [ %4622, %4617 ]
  %4632 = phi i8* [ %4199, %4196 ], [ %4625, %4617 ]
  %4633 = sext i32 %4630 to i64
  %4634 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_vp56_norm_shift, i64 0, i64 %4633
  %4635 = load i8, i8* %4634, align 1
  %4636 = zext i8 %4635 to i32
  %4637 = shl i32 %4630, %4636
  %4638 = shl i32 %4627, %4636
  %4639 = add nsw i32 %4629, %4636
  %4640 = icmp sgt i32 %4639, -1
  %4641 = icmp ult i8* %4628, %4072
  %4642 = and i1 %4641, %4640
  br i1 %4642, label %4643, label %4652

4643:                                             ; preds = %4626
  %4644 = getelementptr inbounds i8, i8* %4628, i64 2
  %4645 = bitcast i8* %4628 to i16*
  %4646 = load i16, i16* %4645, align 1
  %4647 = call i16 @llvm.bswap.i16(i16 %4646) #7
  %4648 = zext i16 %4647 to i32
  %4649 = shl i32 %4648, %4639
  %4650 = or i32 %4649, %4638
  %4651 = add nsw i32 %4639, -16
  br label %4652

4652:                                             ; preds = %4643, %4626
  %4653 = phi i8* [ %4644, %4643 ], [ %4628, %4626 ]
  %4654 = phi i32 [ %4651, %4643 ], [ %4639, %4626 ]
  %4655 = phi i32 [ %4650, %4643 ], [ %4638, %4626 ]
  %4656 = shl i32 %4637, 7
  %4657 = add i32 %4656, -128
  %4658 = ashr i32 %4657, 8
  %4659 = add nsw i32 %4658, 1
  %4660 = shl i32 %4659, 16
  %4661 = call { i32, i32, i32 } asm "subl  $4, $1      \0A\09subl  $3, $2      \0A\09setae ${0:b}         \0A\09cmovb $4, $1      \0A\09cmovb $5, $2      \0A\09", "=q,=&r,=&r,r,r,r,0,1,2,~{dirflag},~{fpsr},~{flags}"(i32 %4660, i32 %4659, i32 %4655, i32 0, i32 %4637, i32 %4655) #8, !srcloc !2
  %4662 = extractvalue { i32, i32, i32 } %4661, 0
  %4663 = extractvalue { i32, i32, i32 } %4661, 1
  %4664 = extractvalue { i32, i32, i32 } %4661, 2
  %4665 = icmp eq i32 %4662, 0
  %4666 = sub nsw i32 0, %4631
  %4667 = select i1 %4665, i32 %4631, i32 %4666
  %4668 = icmp ne i32 %4115, 0
  %4669 = zext i1 %4668 to i64
  %4670 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 24, i64 %3326, i32 2, i64 %4669
  %4671 = load i16, i16* %4670, align 2
  %4672 = trunc i32 %4667 to i16
  %4673 = mul i16 %4671, %4672
  %4674 = sext i32 %4115 to i64
  %4675 = getelementptr inbounds [17 x i8], [17 x i8]* @ff_zigzag_scan, i64 0, i64 %4674
  %4676 = load i8, i8* %4675, align 1
  %4677 = zext i8 %4676 to i64
  %4678 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %4011, i64 %4030, i64 %4677
  store i16 %4673, i16* %4678, align 2
  %4679 = add nsw i32 %4115, 1
  %4680 = icmp slt i32 %4679, 16
  br i1 %4680, label %4074, label %4681

4681:                                             ; preds = %4652, %4148, %4096
  %4682 = phi i32 [ %4141, %4148 ], [ %4664, %4652 ], [ %4099, %4096 ]
  %4683 = phi i8* [ %4139, %4148 ], [ %4653, %4652 ], [ %4097, %4096 ]
  %4684 = phi i32 [ %4140, %4148 ], [ %4654, %4652 ], [ %4098, %4096 ]
  %4685 = phi i32 [ %4145, %4148 ], [ %4663, %4652 ], [ %4103, %4096 ]
  %4686 = phi i32 [ 16, %4148 ], [ %4679, %4652 ], [ %4679, %4096 ]
  store i32 %4685, i32* %223, align 8
  store i32 %4684, i32* %151, align 4
  store i8* %4683, i8** %62, align 8
  store i8* %4072, i8** %60, align 8
  store i32 %4682, i32* %224, align 8
  store i32 %4073, i32* %74, align 4
  br label %4687

4687:                                             ; preds = %4681, %4067
  %4688 = phi i32 [ %4686, %4681 ], [ 0, %4067 ]
  %4689 = trunc i32 %4688 to i8
  %4690 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 %4011, i64 %4030
  store i8 %4689, i8* %4690, align 1
  %4691 = icmp ne i32 %4688, 0
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %4018, align 1
  store i8 %4692, i8* %4026, align 1
  %4693 = add nsw i32 %4688, %4021
  %4694 = add nuw nsw i64 %4020, 1
  %4695 = icmp eq i64 %4694, 2
  br i1 %4695, label %4696, label %4019

4696:                                             ; preds = %4687
  %4697 = add nuw nsw i64 %4014, 1
  %4698 = icmp eq i64 %4697, 2
  br i1 %4698, label %4699, label %4013

4699:                                             ; preds = %4696
  %4700 = add nuw nsw i64 %4011, 1
  %4701 = icmp eq i64 %4700, 6
  br i1 %4701, label %4702, label %4010

4702:                                             ; preds = %4699
  %4703 = icmp eq i32 %4693, 0
  br i1 %4703, label %4704, label %4705

4704:                                             ; preds = %4702
  store i8 1, i8* %2641, align 4
  br label %4705

4705:                                             ; preds = %4704, %4702, %2640
  %4706 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 1
  %4707 = load i8, i8* %4706, align 1
  %4708 = icmp ult i8 %4707, 5
  br i1 %4708, label %4709, label %5055

4709:                                             ; preds = %4705
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %246) #7
  store i32 -1431655766, i32* %5, align 4
  br i1 %247, label %4710, label %4783

4710:                                             ; preds = %4709
  %4711 = load i8, i8* %248, align 1
  %4712 = icmp eq i8 %4711, 0
  br i1 %4712, label %4783, label %4713

4713:                                             ; preds = %4710
  %4714 = load i32, i32* %249, align 4
  %4715 = icmp eq i32 %4714, 0
  br i1 %4715, label %4716, label %4783

4716:                                             ; preds = %4713
  %4717 = load [32 x i8]*, [32 x i8]** %250, align 8
  %4718 = add nuw nsw i64 %312, 1
  %4719 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 0
  %4720 = load i8*, i8** %36, align 16
  %4721 = load i8*, i8** %37, align 8
  %4722 = load i8*, i8** %38, align 16
  %4723 = load i64, i64* %45, align 8
  %4724 = load i64, i64* %53, align 8
  %4725 = load i16, i16* %21, align 8
  %4726 = zext i16 %4725 to i64
  %4727 = load i8, i8* %251, align 8
  %4728 = sub i64 0, %4723
  %4729 = getelementptr inbounds i8, i8* %4720, i64 %4728
  %4730 = sub i64 0, %4724
  %4731 = getelementptr inbounds i8, i8* %4721, i64 %4730
  %4732 = getelementptr inbounds i8, i8* %4722, i64 %4730
  %4733 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 -24
  %4734 = bitcast i8* %4733 to i64*
  %4735 = load i64, i64* %4734, align 8
  %4736 = getelementptr inbounds i8, i8* %4729, i64 -8
  %4737 = bitcast i8* %4736 to i64*
  %4738 = load i64, i64* %4737, align 8
  store i64 %4738, i64* %4734, align 8
  store i64 %4735, i64* %4737, align 8
  %4739 = bitcast i8* %4719 to i64*
  %4740 = load i64, i64* %4739, align 8
  %4741 = bitcast i8* %4729 to i64*
  %4742 = load i64, i64* %4741, align 8
  store i64 %4742, i64* %4739, align 8
  store i64 %4740, i64* %4741, align 8
  %4743 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 8
  %4744 = bitcast i8* %4743 to i64*
  %4745 = load i64, i64* %4744, align 8
  %4746 = getelementptr inbounds i8, i8* %4729, i64 8
  %4747 = bitcast i8* %4746 to i64*
  %4748 = load i64, i64* %4747, align 8
  store i64 %4748, i64* %4744, align 8
  store i64 %4745, i64* %4747, align 8
  %4749 = add nsw i64 %4726, -1
  %4750 = icmp sgt i64 %4749, %312
  br i1 %4750, label %4751, label %4758

4751:                                             ; preds = %4716
  %4752 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 32
  %4753 = bitcast i8* %4752 to i64*
  %4754 = load i64, i64* %4753, align 8
  %4755 = getelementptr inbounds i8, i8* %4729, i64 16
  %4756 = bitcast i8* %4755 to i64*
  %4757 = load i64, i64* %4756, align 8
  store i64 %4757, i64* %4753, align 8
  store i64 %4754, i64* %4756, align 8
  br label %4758

4758:                                             ; preds = %4751, %4716
  %4759 = icmp eq i8 %4727, 0
  br i1 %4759, label %4760, label %4783

4760:                                             ; preds = %4758
  %4761 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 -16
  %4762 = bitcast i8* %4761 to i64*
  %4763 = load i64, i64* %4762, align 8
  %4764 = getelementptr inbounds i8, i8* %4731, i64 -8
  %4765 = bitcast i8* %4764 to i64*
  %4766 = load i64, i64* %4765, align 8
  store i64 %4766, i64* %4762, align 8
  store i64 %4763, i64* %4765, align 8
  %4767 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 -8
  %4768 = bitcast i8* %4767 to i64*
  %4769 = load i64, i64* %4768, align 8
  %4770 = getelementptr inbounds i8, i8* %4732, i64 -8
  %4771 = bitcast i8* %4770 to i64*
  %4772 = load i64, i64* %4771, align 8
  store i64 %4772, i64* %4768, align 8
  store i64 %4769, i64* %4771, align 8
  %4773 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 16
  %4774 = bitcast i8* %4773 to i64*
  %4775 = load i64, i64* %4774, align 8
  %4776 = bitcast i8* %4731 to i64*
  %4777 = load i64, i64* %4776, align 8
  store i64 %4777, i64* %4774, align 8
  store i64 %4775, i64* %4776, align 8
  %4778 = getelementptr inbounds [32 x i8], [32 x i8]* %4717, i64 %4718, i64 24
  %4779 = bitcast i8* %4778 to i64*
  %4780 = load i64, i64* %4779, align 8
  %4781 = bitcast i8* %4732 to i64*
  %4782 = load i64, i64* %4781, align 8
  store i64 %4782, i64* %4779, align 8
  store i64 %4780, i64* %4781, align 8
  br label %4783

4783:                                             ; preds = %4760, %4758, %4713, %4710, %4709
  %4784 = load i8, i8* %4706, align 1
  %4785 = icmp ult i8 %4784, 4
  br i1 %4785, label %4786, label %4803

4786:                                             ; preds = %4783
  switch i8 %4784, label %4797 [
    i8 0, label %4787
    i8 2, label %4790
    i8 1, label %4791
    i8 3, label %4794
  ]

4787:                                             ; preds = %4786
  %4788 = icmp eq i64 %312, 0
  %4789 = select i1 %4788, i64 %277, i64 %276
  br label %4797

4790:                                             ; preds = %4786
  br label %4797

4791:                                             ; preds = %4786
  %4792 = icmp eq i64 %312, 0
  %4793 = select i1 %4792, i64 8, i64 1
  br label %4797

4794:                                             ; preds = %4786
  %4795 = icmp eq i64 %312, 0
  %4796 = select i1 %4795, i64 %274, i64 %273
  br label %4797

4797:                                             ; preds = %4794, %4791, %4790, %4787, %4786
  %4798 = phi i64 [ %4796, %4794 ], [ %4793, %4791 ], [ %275, %4790 ], [ %4789, %4787 ], [ 0, %4786 ]
  %4799 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 44, i32 3, i64 %4798
  %4800 = load void (i8*, i64)*, void (i8*, i64)** %4799, align 8
  %4801 = load i8*, i8** %36, align 16
  %4802 = load i64, i64* %45, align 8
  call void %4800(i8* %4801, i64 %4802) #7
  br label %4962

4803:                                             ; preds = %4783
  %4804 = load i8*, i8** %36, align 16
  %4805 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 6, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %252) #7
  store i32 2139062143, i32* %6, align 4
  %4806 = load i64, i64* %45, align 8
  %4807 = sub i64 0, %4806
  %4808 = getelementptr inbounds i8, i8* %4804, i64 16
  %4809 = getelementptr inbounds i8, i8* %4808, i64 %4807
  br i1 %247, label %4810, label %4821

4810:                                             ; preds = %4803
  %4811 = load i16, i16* %21, align 8
  %4812 = zext i16 %4811 to i64
  %4813 = add nuw nsw i64 %4812, 4294967295
  %4814 = and i64 %4813, 4294967295
  %4815 = icmp eq i64 %4814, %312
  br i1 %4815, label %4816, label %4821

4816:                                             ; preds = %4810
  %4817 = getelementptr inbounds i8, i8* %4809, i64 -1
  %4818 = load i8, i8* %4817, align 1
  %4819 = zext i8 %4818 to i32
  %4820 = mul nuw i32 %4819, 16843009
  store i32 %4820, i32* %5, align 4
  br label %4821

4821:                                             ; preds = %4816, %4810, %4803
  %4822 = phi i8* [ %246, %4816 ], [ %4809, %4810 ], [ %4809, %4803 ]
  %4823 = load i8, i8* %2641, align 4
  %4824 = icmp eq i8 %4823, 0
  br i1 %4824, label %4827, label %4825

4825:                                             ; preds = %4821
  call void asm "pxor %xmm0, %xmm0  \0A\09movdqa   %xmm0, $0  \0A\09", "=*m,~{xmm0},~{dirflag},~{fpsr},~{flags}"(%struct.v* %254) #7, !srcloc !3
  %4826 = load i64, i64* %45, align 8
  br label %4827

4827:                                             ; preds = %4825, %4821
  %4828 = phi i64 [ %4826, %4825 ], [ %4806, %4821 ]
  br label %4829

4829:                                             ; preds = %4827, %4955
  %4830 = phi i64 [ %4953, %4955 ], [ %4828, %4827 ]
  %4831 = phi i64 [ %4959, %4955 ], [ 0, %4827 ]
  %4832 = phi i8* [ %4958, %4955 ], [ %4805, %4827 ]
  %4833 = phi i8* [ %4957, %4955 ], [ %4804, %4827 ]
  %4834 = getelementptr inbounds i8, i8* %4833, i64 4
  %4835 = sub i64 0, %4830
  %4836 = getelementptr inbounds i8, i8* %4834, i64 %4835
  %4837 = icmp eq i64 %4831, 0
  %4838 = trunc i64 %4831 to i32
  %4839 = add nsw i32 %20, %4838
  %4840 = icmp ne i32 %4839, 0
  %4841 = icmp eq i32 %4839, 0
  %4842 = select i1 %4840, i32 9, i32 14
  %4843 = select i1 %4840, i32 10, i32 13
  br label %4844

4844:                                             ; preds = %4950, %4829
  %4845 = phi i64 [ 0, %4829 ], [ %4952, %4950 ]
  %4846 = phi i64 [ %4830, %4829 ], [ %4953, %4950 ]
  %4847 = phi i8* [ %4836, %4829 ], [ %4951, %4950 ]
  %4848 = shl nsw i64 %4845, 2
  %4849 = getelementptr inbounds i8, i8* %4833, i64 %4848
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %255) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %255, i8 -86, i64 40, i1 false) #7
  %4850 = icmp eq i64 %4845, 3
  %4851 = or i1 %4837, %4850
  %4852 = and i1 %78, %4851
  %4853 = select i1 %4850, i8* %4822, i8* %4847
  %4854 = select i1 %4852, i8* %252, i8* %4853
  %4855 = getelementptr inbounds i8, i8* %4832, i64 %4845
  %4856 = load i8, i8* %4855, align 1
  %4857 = zext i8 %4856 to i32
  %4858 = trunc i64 %4845 to i32
  %4859 = add nuw nsw i32 %331, %4858
  switch i8 %4856, label %4917 [
    i8 0, label %4860
    i8 3, label %4868
    i8 7, label %4868
    i8 1, label %4870
    i8 8, label %4871
    i8 9, label %4874
    i8 2, label %4877
    i8 4, label %4877
    i8 5, label %4877
    i8 6, label %4877
  ]

4860:                                             ; preds = %4844
  %4861 = icmp eq i32 %4859, 0
  %4862 = and i1 %4840, %4861
  br i1 %4862, label %4863, label %4868

4863:                                             ; preds = %4860
  %4864 = sub i64 0, %4846
  %4865 = getelementptr inbounds i8, i8* %4849, i64 %4864
  %4866 = bitcast i8* %4865 to i32*
  %4867 = load i32, i32* %4866, align 4
  store i32 %4867, i32* %258, align 4
  br label %4887

4868:                                             ; preds = %4860, %4844, %4844
  %4869 = select i1 %4841, i32 12, i32 %4857
  br label %4917

4870:                                             ; preds = %4844
  br i1 %4841, label %4893, label %4871

4871:                                             ; preds = %4870, %4844
  %4872 = icmp eq i32 %4859, 0
  %4873 = select i1 %4872, i32 13, i32 %4857
  br label %4917

4874:                                             ; preds = %4844
  %4875 = icmp eq i32 %4859, 0
  %4876 = select i1 %4875, i32 %4843, i32 %4842
  br label %4917

4877:                                             ; preds = %4844, %4844, %4844, %4844
  %4878 = icmp ne i32 %4859, 0
  %4879 = and i1 %4840, %4878
  br i1 %4879, label %4917, label %4880

4880:                                             ; preds = %4877
  br i1 %4841, label %4893, label %4881

4881:                                             ; preds = %4880
  %4882 = sub i64 0, %4846
  %4883 = getelementptr inbounds i8, i8* %4849, i64 %4882
  %4884 = bitcast i8* %4883 to i32*
  %4885 = load i32, i32* %4884, align 4
  store i32 %4885, i32* %258, align 4
  %4886 = icmp eq i32 %4859, 0
  br i1 %4886, label %4887, label %4888

4887:                                             ; preds = %4881, %4863
  store i8 -127, i8* %259, align 1
  br label %4895

4888:                                             ; preds = %4881
  %4889 = xor i64 %4846, -1
  %4890 = add i64 %4848, %4889
  %4891 = getelementptr inbounds i8, i8* %4833, i64 %4890
  %4892 = load i8, i8* %4891, align 1
  store i8 %4892, i8* %259, align 1
  br label %4899

4893:                                             ; preds = %4880, %4870
  store i8 127, i8* %259, align 1
  store i32 2139062143, i32* %258, align 4
  %4894 = icmp eq i32 %4859, 0
  br i1 %4894, label %4895, label %4899

4895:                                             ; preds = %4893, %4887
  store i8 -127, i8* %263, align 1
  store i8 -127, i8* %262, align 1
  store i8 -127, i8* %261, align 1
  store i8 -127, i8* %260, align 1
  %4896 = zext i8 %4856 to i64
  %4897 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 44, i32 0, i64 %4896
  %4898 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %4897, align 8
  call void %4898(i8* %256, i8* %4854, i64 8) #7
  br label %4922

4899:                                             ; preds = %4893, %4888
  %4900 = add nsw i64 %4848, -1
  %4901 = getelementptr inbounds i8, i8* %4833, i64 %4900
  %4902 = load i8, i8* %4901, align 1
  store i8 %4902, i8* %260, align 1
  %4903 = add i64 %4900, %4846
  %4904 = getelementptr inbounds i8, i8* %4833, i64 %4903
  %4905 = load i8, i8* %4904, align 1
  store i8 %4905, i8* %261, align 1
  %4906 = shl i64 %4846, 1
  %4907 = add i64 %4900, %4906
  %4908 = getelementptr inbounds i8, i8* %4833, i64 %4907
  %4909 = load i8, i8* %4908, align 1
  store i8 %4909, i8* %262, align 1
  %4910 = mul nsw i64 %4846, 3
  %4911 = add i64 %4900, %4910
  %4912 = getelementptr inbounds i8, i8* %4833, i64 %4911
  %4913 = load i8, i8* %4912, align 1
  store i8 %4913, i8* %263, align 1
  %4914 = zext i8 %4856 to i64
  %4915 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 44, i32 0, i64 %4914
  %4916 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %4915, align 8
  call void %4916(i8* %256, i8* %4854, i64 8) #7
  br label %4922

4917:                                             ; preds = %4877, %4874, %4871, %4868, %4844
  %4918 = phi i32 [ %4857, %4844 ], [ %4857, %4877 ], [ %4869, %4868 ], [ %4873, %4871 ], [ %4876, %4874 ]
  %4919 = sext i32 %4918 to i64
  %4920 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 44, i32 0, i64 %4919
  %4921 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %4920, align 8
  call void %4921(i8* %4849, i8* %4854, i64 %4846) #7
  br label %4939

4922:                                             ; preds = %4899, %4895
  %4923 = load i32, i32* %264, align 4
  %4924 = bitcast i8* %4849 to i32*
  store i32 %4923, i32* %4924, align 4
  %4925 = load i32, i32* %266, align 4
  %4926 = load i64, i64* %45, align 8
  %4927 = getelementptr inbounds i8, i8* %4849, i64 %4926
  %4928 = bitcast i8* %4927 to i32*
  store i32 %4925, i32* %4928, align 4
  %4929 = load i32, i32* %268, align 4
  %4930 = load i64, i64* %45, align 8
  %4931 = shl nsw i64 %4930, 1
  %4932 = getelementptr inbounds i8, i8* %4849, i64 %4931
  %4933 = bitcast i8* %4932 to i32*
  store i32 %4929, i32* %4933, align 4
  %4934 = load i32, i32* %270, align 4
  %4935 = load i64, i64* %45, align 8
  %4936 = mul nsw i64 %4935, 3
  %4937 = getelementptr inbounds i8, i8* %4849, i64 %4936
  %4938 = bitcast i8* %4937 to i32*
  store i32 %4934, i32* %4938, align 4
  br label %4939

4939:                                             ; preds = %4922, %4917
  %4940 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 %4831, i64 %4845
  %4941 = load i8, i8* %4940, align 1
  switch i8 %4941, label %4946 [
    i8 0, label %4950
    i8 1, label %4942
  ]

4942:                                             ; preds = %4939
  %4943 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %4944 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %4831, i64 %4845, i64 0
  %4945 = load i64, i64* %45, align 8
  call void %4943(i8* %4849, i16* %4944, i64 %4945) #7
  br label %4950

4946:                                             ; preds = %4939
  %4947 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %4948 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %4831, i64 %4845, i64 0
  %4949 = load i64, i64* %45, align 8
  call void %4947(i8* %4849, i16* %4948, i64 %4949) #7
  br label %4950

4950:                                             ; preds = %4946, %4942, %4939
  %4951 = getelementptr inbounds i8, i8* %4854, i64 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %255) #7
  %4952 = add nuw nsw i64 %4845, 1
  %4953 = load i64, i64* %45, align 8
  %4954 = icmp eq i64 %4952, 4
  br i1 %4954, label %4955, label %4844

4955:                                             ; preds = %4950
  %4956 = shl nsw i64 %4953, 2
  %4957 = getelementptr inbounds i8, i8* %4833, i64 %4956
  %4958 = getelementptr inbounds i8, i8* %4832, i64 4
  %4959 = add nuw nsw i64 %4831, 1
  %4960 = icmp eq i64 %4959, 4
  br i1 %4960, label %4961, label %4829

4961:                                             ; preds = %4955
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252) #7
  br label %4962

4962:                                             ; preds = %4961, %4797
  %4963 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 4
  %4964 = load i8, i8* %4963, align 4
  %4965 = zext i8 %4964 to i64
  switch i8 %4964, label %4976 [
    i8 0, label %4966
    i8 2, label %4969
    i8 1, label %4970
    i8 3, label %4973
  ]

4966:                                             ; preds = %4962
  %4967 = icmp eq i64 %312, 0
  %4968 = select i1 %4967, i64 %277, i64 %276
  br label %4976

4969:                                             ; preds = %4962
  br label %4976

4970:                                             ; preds = %4962
  %4971 = icmp eq i64 %312, 0
  %4972 = select i1 %4971, i64 8, i64 1
  br label %4976

4973:                                             ; preds = %4962
  %4974 = icmp eq i64 %312, 0
  %4975 = select i1 %4974, i64 %274, i64 %273
  br label %4976

4976:                                             ; preds = %4973, %4970, %4969, %4966, %4962
  %4977 = phi i64 [ %4975, %4973 ], [ %4972, %4970 ], [ %275, %4969 ], [ %4968, %4966 ], [ %4965, %4962 ]
  %4978 = shl i64 %4977, 32
  %4979 = ashr exact i64 %4978, 32
  %4980 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 44, i32 2, i64 %4979
  %4981 = load void (i8*, i64)*, void (i8*, i64)** %4980, align 8
  %4982 = load i8*, i8** %37, align 8
  %4983 = load i64, i64* %53, align 8
  call void %4981(i8* %4982, i64 %4983) #7
  %4984 = load void (i8*, i64)*, void (i8*, i64)** %4980, align 8
  %4985 = load i8*, i8** %38, align 16
  %4986 = load i64, i64* %53, align 8
  call void %4984(i8* %4985, i64 %4986) #7
  br i1 %247, label %4987, label %5054

4987:                                             ; preds = %4976
  %4988 = load i8, i8* %248, align 1
  %4989 = icmp eq i8 %4988, 0
  br i1 %4989, label %5054, label %4990

4990:                                             ; preds = %4987
  %4991 = load i32, i32* %249, align 4
  %4992 = icmp eq i32 %4991, 0
  br i1 %4992, label %4993, label %5054

4993:                                             ; preds = %4990
  %4994 = load [32 x i8]*, [32 x i8]** %250, align 8
  %4995 = add nuw nsw i64 %312, 1
  %4996 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 0
  %4997 = load i8*, i8** %36, align 16
  %4998 = load i64, i64* %45, align 8
  %4999 = load i64, i64* %53, align 8
  %5000 = load i16, i16* %21, align 8
  %5001 = zext i16 %5000 to i64
  %5002 = load i8, i8* %251, align 8
  %5003 = sub i64 0, %4998
  %5004 = getelementptr inbounds i8, i8* %4997, i64 %5003
  %5005 = sub i64 0, %4999
  %5006 = getelementptr inbounds i8, i8* %4982, i64 %5005
  %5007 = getelementptr inbounds i8, i8* %4985, i64 %5005
  %5008 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 -24
  %5009 = bitcast i8* %5008 to i64*
  %5010 = load i64, i64* %5009, align 8
  %5011 = getelementptr inbounds i8, i8* %5004, i64 -8
  %5012 = bitcast i8* %5011 to i64*
  store i64 %5010, i64* %5012, align 8
  %5013 = bitcast i8* %4996 to i64*
  %5014 = load i64, i64* %5013, align 8
  %5015 = bitcast i8* %5004 to i64*
  store i64 %5014, i64* %5015, align 8
  %5016 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 8
  %5017 = bitcast i8* %5016 to i64*
  %5018 = load i64, i64* %5017, align 8
  %5019 = getelementptr inbounds i8, i8* %5004, i64 8
  %5020 = bitcast i8* %5019 to i64*
  %5021 = load i64, i64* %5020, align 8
  store i64 %5021, i64* %5017, align 8
  store i64 %5018, i64* %5020, align 8
  %5022 = add nsw i64 %5001, -1
  %5023 = icmp sgt i64 %5022, %312
  br i1 %5023, label %5024, label %5031

5024:                                             ; preds = %4993
  %5025 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 32
  %5026 = bitcast i8* %5025 to i64*
  %5027 = load i64, i64* %5026, align 8
  %5028 = getelementptr inbounds i8, i8* %5004, i64 16
  %5029 = bitcast i8* %5028 to i64*
  %5030 = load i64, i64* %5029, align 8
  store i64 %5030, i64* %5026, align 8
  store i64 %5027, i64* %5029, align 8
  br label %5031

5031:                                             ; preds = %5024, %4993
  %5032 = icmp eq i8 %5002, 0
  br i1 %5032, label %5033, label %5054

5033:                                             ; preds = %5031
  %5034 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 -16
  %5035 = bitcast i8* %5034 to i64*
  %5036 = load i64, i64* %5035, align 8
  %5037 = getelementptr inbounds i8, i8* %5006, i64 -8
  %5038 = bitcast i8* %5037 to i64*
  store i64 %5036, i64* %5038, align 8
  %5039 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 -8
  %5040 = bitcast i8* %5039 to i64*
  %5041 = load i64, i64* %5040, align 8
  %5042 = getelementptr inbounds i8, i8* %5007, i64 -8
  %5043 = bitcast i8* %5042 to i64*
  store i64 %5041, i64* %5043, align 8
  %5044 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 16
  %5045 = bitcast i8* %5044 to i64*
  %5046 = load i64, i64* %5045, align 8
  %5047 = bitcast i8* %5006 to i64*
  %5048 = load i64, i64* %5047, align 8
  store i64 %5048, i64* %5045, align 8
  store i64 %5046, i64* %5047, align 8
  %5049 = getelementptr inbounds [32 x i8], [32 x i8]* %4994, i64 %4995, i64 24
  %5050 = bitcast i8* %5049 to i64*
  %5051 = load i64, i64* %5050, align 8
  %5052 = bitcast i8* %5007 to i64*
  %5053 = load i64, i64* %5052, align 8
  store i64 %5053, i64* %5050, align 8
  store i64 %5051, i64* %5052, align 8
  br label %5054

5054:                                             ; preds = %5033, %5031, %4990, %4987, %4976
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %246) #7
  br label %7220

5055:                                             ; preds = %4705
  %5056 = shl i64 %312, 4
  %5057 = load i16, i16* %21, align 8
  %5058 = zext i16 %5057 to i32
  %5059 = shl nuw nsw i32 %5058, 4
  %5060 = load i16, i16* %88, align 2
  %5061 = zext i16 %5060 to i32
  %5062 = shl nuw nsw i32 %5061, 4
  %5063 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  %5064 = load i8, i8* %5063, align 2
  %5065 = zext i8 %5064 to i64
  %5066 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 4, i64 %5065
  %5067 = load %struct.VP8Frame*, %struct.VP8Frame** %5066, align 8
  %5068 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0
  %5069 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0
  %5070 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 3
  %5071 = load i8, i8* %5070, align 1
  switch i8 %5071, label %7220 [
    i8 4, label %5077
    i8 3, label %5072
    i8 0, label %5569
    i8 1, label %5982
    i8 2, label %6395
  ]

5072:                                             ; preds = %5055
  %5073 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0, i32 0
  %5074 = add nsw i32 %5059, -4
  %5075 = add nsw i32 %5062, -4
  %5076 = load i8*, i8** %36, align 16
  br label %5285

5077:                                             ; preds = %5055
  %5078 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9
  %5079 = bitcast %struct.VP56mv* %5078 to i32*
  %5080 = load i32, i32* %5079, align 4
  %5081 = lshr i32 %5080, 16
  %5082 = trunc i32 %5081 to i16
  %5083 = load i8*, i8** %36, align 16
  %5084 = load i64, i64* %45, align 8
  %5085 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0, i32 0
  %5086 = load %struct.AVFrame*, %struct.AVFrame** %5085, align 8
  %5087 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5086, i64 0, i32 0, i64 0
  %5088 = load i8*, i8** %5087, align 8
  %5089 = icmp eq i32 %5080, 0
  br i1 %5089, label %5170, label %5090

5090:                                             ; preds = %5077
  %5091 = shl i32 %5080, 16
  %5092 = shl i32 %5080, 1
  %5093 = and i32 %5092, 6
  %5094 = zext i32 %5093 to i64
  %5095 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5094
  %5096 = load i8, i8* %5095, align 2
  %5097 = zext i8 %5096 to i32
  %5098 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  %5099 = load i16, i16* %5098, align 2
  %5100 = sext i16 %5099 to i32
  %5101 = shl nsw i32 %5100, 1
  %5102 = and i32 %5101, 6
  %5103 = zext i32 %5102 to i64
  %5104 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5103
  %5105 = load i8, i8* %5104, align 2
  %5106 = zext i8 %5105 to i32
  %5107 = ashr i32 %5091, 18
  %5108 = trunc i64 %5056 to i32
  %5109 = add nsw i32 %5107, %5108
  %5110 = ashr i32 %5100, 2
  %5111 = add nsw i32 %5110, %43
  %5112 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5103
  %5113 = load i8, i8* %5112, align 2
  %5114 = zext i8 %5113 to i32
  %5115 = add nsw i32 %5111, 19
  %5116 = add nsw i32 %5115, %5114
  %5117 = ashr i32 %5116, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5117, i32 0) #7
  %5118 = sext i32 %5111 to i64
  %5119 = mul nsw i64 %5084, %5118
  %5120 = sext i32 %5109 to i64
  %5121 = add nsw i64 %5119, %5120
  %5122 = getelementptr inbounds i8, i8* %5088, i64 %5121
  %5123 = icmp slt i32 %5109, %5097
  br i1 %5123, label %5140, label %5124

5124:                                             ; preds = %5090
  %5125 = add nsw i32 %5059, -16
  %5126 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5094
  %5127 = load i8, i8* %5126, align 2
  %5128 = zext i8 %5127 to i32
  %5129 = sub nsw i32 %5125, %5128
  %5130 = icmp sge i32 %5109, %5129
  %5131 = icmp slt i32 %5111, %5106
  %5132 = or i1 %5131, %5130
  br i1 %5132, label %5140, label %5133

5133:                                             ; preds = %5124
  %5134 = add nsw i32 %5062, -16
  %5135 = sub nsw i32 %5134, %5114
  %5136 = icmp slt i32 %5111, %5135
  br i1 %5136, label %5137, label %5140

5137:                                             ; preds = %5133
  %5138 = zext i8 %5105 to i64
  %5139 = zext i8 %5096 to i64
  br label %5163

5140:                                             ; preds = %5133, %5124, %5090
  %5141 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5142 = zext i8 %5105 to i64
  %5143 = mul i64 %5084, %5142
  %5144 = sub i64 0, %5143
  %5145 = getelementptr inbounds i8, i8* %5122, i64 %5144
  %5146 = zext i8 %5096 to i64
  %5147 = sub nsw i64 0, %5146
  %5148 = getelementptr inbounds i8, i8* %5145, i64 %5147
  %5149 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5094
  %5150 = load i8, i8* %5149, align 2
  %5151 = zext i8 %5150 to i32
  %5152 = add nuw nsw i32 %5151, 16
  %5153 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5103
  %5154 = load i8, i8* %5153, align 2
  %5155 = zext i8 %5154 to i32
  %5156 = add nuw nsw i32 %5155, 16
  %5157 = sub nsw i32 %5109, %5097
  %5158 = sub nsw i32 %5111, %5106
  call void %5141(i8* %229, i8* %5148, i64 32, i64 %5084, i32 %5152, i32 %5156, i32 %5157, i32 %5158, i32 %5059, i32 %5062) #7
  %5159 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5146
  %5160 = shl nuw nsw i32 %5106, 5
  %5161 = zext i32 %5160 to i64
  %5162 = getelementptr inbounds i8, i8* %5159, i64 %5161
  br label %5163

5163:                                             ; preds = %5140, %5137
  %5164 = phi i64 [ %5139, %5137 ], [ %5146, %5140 ]
  %5165 = phi i64 [ %5138, %5137 ], [ %5142, %5140 ]
  %5166 = phi i8* [ %5122, %5137 ], [ %5162, %5140 ]
  %5167 = phi i64 [ %5084, %5137 ], [ 32, %5140 ]
  %5168 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 0, i64 %5165, i64 %5164
  %5169 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5168, align 8
  call void %5169(i8* %5083, i64 %5084, i8* %5166, i64 %5167, i32 16, i32 %5093, i32 %5102) #7
  br label %5175

5170:                                             ; preds = %5077
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %242, i32 0) #7
  %5171 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %245, align 8
  %5172 = mul nsw i64 %5084, %44
  %5173 = getelementptr inbounds i8, i8* %5088, i64 %5172
  %5174 = getelementptr inbounds i8, i8* %5173, i64 %5056
  call void %5171(i8* %5083, i64 %5084, i8* %5174, i64 %5084, i32 16, i32 0, i32 0) #7
  br label %5175

5175:                                             ; preds = %5170, %5163
  %5176 = load i8, i8* %231, align 1
  %5177 = icmp eq i8 %5176, 3
  %5178 = and i32 %5080, 65528
  %5179 = and i16 %5082, -8
  %5180 = select i1 %5177, i16 %5179, i16 %5082
  %5181 = select i1 %5177, i32 %5178, i32 %5080
  %5182 = ashr exact i64 %5056, 1
  %5183 = shl nuw nsw i32 %5058, 3
  %5184 = shl nuw nsw i32 %5061, 3
  %5185 = load i8*, i8** %37, align 8
  %5186 = load i64, i64* %53, align 8
  %5187 = load i8*, i8** %38, align 16
  %5188 = load %struct.AVFrame*, %struct.AVFrame** %5085, align 8
  %5189 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5188, i64 0, i32 0, i64 1
  %5190 = load i8*, i8** %5189, align 8
  %5191 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5188, i64 0, i32 0, i64 2
  %5192 = load i8*, i8** %5191, align 8
  %5193 = zext i16 %5180 to i32
  %5194 = shl nuw i32 %5193, 16
  %5195 = and i32 %5181, 65535
  %5196 = or i32 %5194, %5195
  %5197 = icmp eq i32 %5196, 0
  br i1 %5197, label %5277, label %5198

5198:                                             ; preds = %5175
  %5199 = shl i32 %5181, 16
  %5200 = and i32 %5181, 7
  %5201 = zext i32 %5200 to i64
  %5202 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5201
  %5203 = load i8, i8* %5202, align 1
  %5204 = zext i8 %5203 to i32
  %5205 = sext i16 %5180 to i32
  %5206 = and i32 %5205, 7
  %5207 = zext i32 %5206 to i64
  %5208 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5207
  %5209 = load i8, i8* %5208, align 1
  %5210 = zext i8 %5209 to i32
  %5211 = ashr i32 %5199, 19
  %5212 = trunc i64 %5182 to i32
  %5213 = add nsw i32 %5211, %5212
  %5214 = ashr i32 %5205, 3
  %5215 = add nsw i32 %5214, %51
  %5216 = sext i32 %5215 to i64
  %5217 = mul nsw i64 %5186, %5216
  %5218 = sext i32 %5213 to i64
  %5219 = add nsw i64 %5217, %5218
  %5220 = getelementptr inbounds i8, i8* %5190, i64 %5219
  %5221 = getelementptr inbounds i8, i8* %5192, i64 %5219
  %5222 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5207
  %5223 = load i8, i8* %5222, align 1
  %5224 = zext i8 %5223 to i32
  %5225 = add nsw i32 %5215, 11
  %5226 = add nsw i32 %5225, %5224
  %5227 = ashr i32 %5226, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5227, i32 0) #7
  %5228 = icmp slt i32 %5213, %5204
  br i1 %5228, label %5242, label %5229

5229:                                             ; preds = %5198
  %5230 = add nsw i32 %5183, -8
  %5231 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5201
  %5232 = load i8, i8* %5231, align 1
  %5233 = zext i8 %5232 to i32
  %5234 = sub nsw i32 %5230, %5233
  %5235 = icmp sge i32 %5213, %5234
  %5236 = icmp slt i32 %5215, %5210
  %5237 = or i1 %5236, %5235
  br i1 %5237, label %5242, label %5238

5238:                                             ; preds = %5229
  %5239 = add nsw i32 %5184, -8
  %5240 = sub nsw i32 %5239, %5224
  %5241 = icmp slt i32 %5215, %5240
  br i1 %5241, label %5271, label %5242

5242:                                             ; preds = %5238, %5229, %5198
  %5243 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5244 = zext i8 %5209 to i64
  %5245 = mul i64 %5186, %5244
  %5246 = sub i64 0, %5245
  %5247 = getelementptr inbounds i8, i8* %5220, i64 %5246
  %5248 = zext i8 %5203 to i64
  %5249 = sub nsw i64 0, %5248
  %5250 = getelementptr inbounds i8, i8* %5247, i64 %5249
  %5251 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5201
  %5252 = load i8, i8* %5251, align 1
  %5253 = zext i8 %5252 to i32
  %5254 = add nuw nsw i32 %5253, 8
  %5255 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5207
  %5256 = load i8, i8* %5255, align 1
  %5257 = zext i8 %5256 to i32
  %5258 = add nuw nsw i32 %5257, 8
  %5259 = sub nsw i32 %5213, %5204
  %5260 = sub nsw i32 %5215, %5210
  call void %5243(i8* %229, i8* %5250, i64 32, i64 %5186, i32 %5254, i32 %5258, i32 %5259, i32 %5260, i32 %5183, i32 %5184) #7
  %5261 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5248
  %5262 = shl nuw nsw i32 %5210, 5
  %5263 = zext i32 %5262 to i64
  %5264 = getelementptr inbounds i8, i8* %5261, i64 %5263
  %5265 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5244, i64 %5248
  %5266 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5265, align 8
  call void %5266(i8* %5185, i64 %5186, i8* %5264, i64 32, i32 8, i32 %5200, i32 %5206) #7
  %5267 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5268 = getelementptr inbounds i8, i8* %5221, i64 %5246
  %5269 = getelementptr inbounds i8, i8* %5268, i64 %5249
  call void %5267(i8* %229, i8* %5269, i64 32, i64 %5186, i32 %5254, i32 %5258, i32 %5259, i32 %5260, i32 %5183, i32 %5184) #7
  %5270 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5265, align 8
  call void %5270(i8* %5187, i64 %5186, i8* %5264, i64 32, i32 8, i32 %5200, i32 %5206) #7
  br label %7220

5271:                                             ; preds = %5238
  %5272 = zext i8 %5209 to i64
  %5273 = zext i8 %5203 to i64
  %5274 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5272, i64 %5273
  %5275 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5274, align 8
  call void %5275(i8* %5185, i64 %5186, i8* %5220, i64 %5186, i32 8, i32 %5200, i32 %5206) #7
  %5276 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5274, align 8
  call void %5276(i8* %5187, i64 %5186, i8* %5221, i64 %5186, i32 8, i32 %5200, i32 %5206) #7
  br label %7220

5277:                                             ; preds = %5175
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %244, i32 0) #7
  %5278 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5279 = mul nsw i64 %5186, %52
  %5280 = getelementptr inbounds i8, i8* %5190, i64 %5279
  %5281 = getelementptr inbounds i8, i8* %5280, i64 %5182
  call void %5278(i8* %5185, i64 %5186, i8* %5281, i64 %5186, i32 8, i32 0, i32 0) #7
  %5282 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5283 = getelementptr inbounds i8, i8* %5192, i64 %5279
  %5284 = getelementptr inbounds i8, i8* %5283, i64 %5182
  call void %5282(i8* %5187, i64 %5186, i8* %5284, i64 %5186, i32 8, i32 0, i32 0) #7
  br label %7220

5285:                                             ; preds = %5394, %5072
  %5286 = phi i64 [ 0, %5072 ], [ %5395, %5394 ]
  %5287 = shl nsw i64 %5286, 2
  %5288 = add nuw nsw i64 %5287, %44
  %5289 = trunc i64 %5288 to i32
  %5290 = add i32 %5289, 7
  %5291 = ashr i32 %5290, 4
  br label %5292

5292:                                             ; preds = %5391, %5285
  %5293 = phi i64 [ 0, %5285 ], [ %5392, %5391 ]
  %5294 = load i64, i64* %45, align 8
  %5295 = mul nsw i64 %5294, %5287
  %5296 = getelementptr inbounds i8, i8* %5076, i64 %5295
  %5297 = shl nsw i64 %5293, 2
  %5298 = getelementptr inbounds i8, i8* %5296, i64 %5297
  %5299 = add nuw nsw i64 %5293, %5287
  %5300 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5299
  %5301 = add nuw nsw i64 %5297, %5056
  %5302 = load %struct.AVFrame*, %struct.AVFrame** %5073, align 8
  %5303 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5302, i64 0, i32 0, i64 0
  %5304 = load i8*, i8** %5303, align 8
  %5305 = bitcast %struct.VP56mv* %5300 to i32*
  %5306 = load i32, i32* %5305, align 4
  %5307 = icmp eq i32 %5306, 0
  br i1 %5307, label %5386, label %5308

5308:                                             ; preds = %5292
  %5309 = shl i32 %5306, 16
  %5310 = shl i32 %5306, 1
  %5311 = and i32 %5310, 6
  %5312 = zext i32 %5311 to i64
  %5313 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5312
  %5314 = load i8, i8* %5313, align 2
  %5315 = zext i8 %5314 to i32
  %5316 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5299, i32 1
  %5317 = load i16, i16* %5316, align 2
  %5318 = sext i16 %5317 to i32
  %5319 = shl nsw i32 %5318, 1
  %5320 = and i32 %5319, 6
  %5321 = zext i32 %5320 to i64
  %5322 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5321
  %5323 = load i8, i8* %5322, align 2
  %5324 = zext i8 %5323 to i32
  %5325 = ashr i32 %5309, 18
  %5326 = trunc i64 %5301 to i32
  %5327 = add nsw i32 %5325, %5326
  %5328 = ashr i32 %5318, 2
  %5329 = add nsw i32 %5328, %5289
  %5330 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5321
  %5331 = load i8, i8* %5330, align 2
  %5332 = zext i8 %5331 to i32
  %5333 = add i32 %5329, 7
  %5334 = add i32 %5333, %5332
  %5335 = ashr i32 %5334, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5335, i32 0) #7
  %5336 = sext i32 %5329 to i64
  %5337 = mul nsw i64 %5294, %5336
  %5338 = sext i32 %5327 to i64
  %5339 = add nsw i64 %5337, %5338
  %5340 = getelementptr inbounds i8, i8* %5304, i64 %5339
  %5341 = icmp slt i32 %5327, %5315
  br i1 %5341, label %5356, label %5342

5342:                                             ; preds = %5308
  %5343 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5312
  %5344 = load i8, i8* %5343, align 2
  %5345 = zext i8 %5344 to i32
  %5346 = sub nsw i32 %5074, %5345
  %5347 = icmp slt i32 %5327, %5346
  %5348 = icmp sge i32 %5329, %5324
  %5349 = and i1 %5348, %5347
  %5350 = sub nsw i32 %5075, %5332
  %5351 = icmp slt i32 %5329, %5350
  %5352 = and i1 %5351, %5349
  br i1 %5352, label %5353, label %5356

5353:                                             ; preds = %5342
  %5354 = zext i8 %5323 to i64
  %5355 = zext i8 %5314 to i64
  br label %5379

5356:                                             ; preds = %5342, %5308
  %5357 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5358 = zext i8 %5323 to i64
  %5359 = mul i64 %5294, %5358
  %5360 = sub i64 0, %5359
  %5361 = getelementptr inbounds i8, i8* %5340, i64 %5360
  %5362 = zext i8 %5314 to i64
  %5363 = sub nsw i64 0, %5362
  %5364 = getelementptr inbounds i8, i8* %5361, i64 %5363
  %5365 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5312
  %5366 = load i8, i8* %5365, align 2
  %5367 = zext i8 %5366 to i32
  %5368 = add nuw nsw i32 %5367, 4
  %5369 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5321
  %5370 = load i8, i8* %5369, align 2
  %5371 = zext i8 %5370 to i32
  %5372 = add nuw nsw i32 %5371, 4
  %5373 = sub nsw i32 %5327, %5315
  %5374 = sub nsw i32 %5329, %5324
  call void %5357(i8* %229, i8* %5364, i64 32, i64 %5294, i32 %5368, i32 %5372, i32 %5373, i32 %5374, i32 %5059, i32 %5062) #7
  %5375 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5362
  %5376 = shl nuw nsw i32 %5324, 5
  %5377 = zext i32 %5376 to i64
  %5378 = getelementptr inbounds i8, i8* %5375, i64 %5377
  br label %5379

5379:                                             ; preds = %5356, %5353
  %5380 = phi i64 [ %5355, %5353 ], [ %5362, %5356 ]
  %5381 = phi i64 [ %5354, %5353 ], [ %5358, %5356 ]
  %5382 = phi i8* [ %5340, %5353 ], [ %5378, %5356 ]
  %5383 = phi i64 [ %5294, %5353 ], [ 32, %5356 ]
  %5384 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %5381, i64 %5380
  %5385 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5384, align 8
  call void %5385(i8* %5298, i64 %5294, i8* %5382, i64 %5383, i32 4, i32 %5311, i32 %5320) #7
  br label %5391

5386:                                             ; preds = %5292
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5291, i32 0) #7
  %5387 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %5388 = mul nsw i64 %5294, %5288
  %5389 = getelementptr inbounds i8, i8* %5304, i64 %5388
  %5390 = getelementptr inbounds i8, i8* %5389, i64 %5301
  call void %5387(i8* %5298, i64 %5294, i8* %5390, i64 %5294, i32 4, i32 0, i32 0) #7
  br label %5391

5391:                                             ; preds = %5386, %5379
  %5392 = add nuw nsw i64 %5293, 1
  %5393 = icmp eq i64 %5392, 4
  br i1 %5393, label %5394, label %5292

5394:                                             ; preds = %5391
  %5395 = add nuw nsw i64 %5286, 1
  %5396 = icmp eq i64 %5395, 4
  br i1 %5396, label %5397, label %5285

5397:                                             ; preds = %5394
  %5398 = ashr exact i64 %5056, 1
  %5399 = shl nuw nsw i32 %5058, 3
  %5400 = shl nuw nsw i32 %5061, 3
  %5401 = add nsw i32 %5399, -4
  %5402 = add nsw i32 %5400, -4
  %5403 = load i8*, i8** %37, align 8
  %5404 = load i8*, i8** %38, align 16
  br label %5405

5405:                                             ; preds = %5566, %5397
  %5406 = phi i64 [ 0, %5397 ], [ %5567, %5566 ]
  %5407 = shl i64 %5406, 3
  %5408 = or i64 %5407, 4
  %5409 = shl nsw i64 %5406, 2
  %5410 = add nuw nsw i64 %5409, %52
  %5411 = trunc i64 %5410 to i32
  %5412 = add i32 %5411, 7
  %5413 = ashr i32 %5412, 3
  br label %5414

5414:                                             ; preds = %5563, %5405
  %5415 = phi i64 [ 0, %5405 ], [ %5564, %5563 ]
  %5416 = shl nuw nsw i64 %5415, 1
  %5417 = add nuw nsw i64 %5416, %5407
  %5418 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5417, i32 0
  %5419 = load i16, i16* %5418, align 4
  %5420 = or i64 %5417, 1
  %5421 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5420, i32 0
  %5422 = load i16, i16* %5421, align 4
  %5423 = add i16 %5422, %5419
  %5424 = add nuw nsw i64 %5416, %5408
  %5425 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5424, i32 0
  %5426 = load i16, i16* %5425, align 4
  %5427 = add i16 %5423, %5426
  %5428 = or i64 %5424, 1
  %5429 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5428, i32 0
  %5430 = load i16, i16* %5429, align 4
  %5431 = add i16 %5427, %5430
  %5432 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5417, i32 1
  %5433 = load i16, i16* %5432, align 2
  %5434 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5420, i32 1
  %5435 = load i16, i16* %5434, align 2
  %5436 = add i16 %5435, %5433
  %5437 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5424, i32 1
  %5438 = load i16, i16* %5437, align 2
  %5439 = add i16 %5436, %5438
  %5440 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 %5428, i32 1
  %5441 = load i16, i16* %5440, align 2
  %5442 = add i16 %5439, %5441
  %5443 = sext i16 %5431 to i32
  %5444 = add nsw i32 %5443, 2
  %5445 = ashr i32 %5443, 15
  %5446 = add nsw i32 %5444, %5445
  %5447 = lshr i32 %5446, 2
  %5448 = sext i16 %5442 to i32
  %5449 = add nsw i32 %5448, 2
  %5450 = ashr i32 %5448, 15
  %5451 = add nsw i32 %5449, %5450
  %5452 = lshr i32 %5451, 2
  %5453 = trunc i32 %5452 to i16
  %5454 = load i8, i8* %231, align 1
  %5455 = icmp eq i8 %5454, 3
  %5456 = and i32 %5447, 65528
  %5457 = and i16 %5453, -8
  %5458 = select i1 %5455, i16 %5457, i16 %5453
  %5459 = select i1 %5455, i32 %5456, i32 %5447
  %5460 = load i64, i64* %53, align 8
  %5461 = mul nsw i64 %5460, %5409
  %5462 = getelementptr inbounds i8, i8* %5403, i64 %5461
  %5463 = shl nsw i64 %5415, 2
  %5464 = getelementptr inbounds i8, i8* %5462, i64 %5463
  %5465 = getelementptr inbounds i8, i8* %5404, i64 %5461
  %5466 = getelementptr inbounds i8, i8* %5465, i64 %5463
  %5467 = add nuw nsw i64 %5463, %5398
  %5468 = load %struct.AVFrame*, %struct.AVFrame** %5073, align 8
  %5469 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5468, i64 0, i32 0, i64 1
  %5470 = load i8*, i8** %5469, align 8
  %5471 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5468, i64 0, i32 0, i64 2
  %5472 = load i8*, i8** %5471, align 8
  %5473 = zext i16 %5458 to i32
  %5474 = shl nuw i32 %5473, 16
  %5475 = and i32 %5459, 65535
  %5476 = or i32 %5474, %5475
  %5477 = icmp eq i32 %5476, 0
  br i1 %5477, label %5555, label %5478

5478:                                             ; preds = %5414
  %5479 = shl i32 %5459, 16
  %5480 = and i32 %5459, 7
  %5481 = zext i32 %5480 to i64
  %5482 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5481
  %5483 = load i8, i8* %5482, align 1
  %5484 = zext i8 %5483 to i32
  %5485 = sext i16 %5458 to i32
  %5486 = and i32 %5485, 7
  %5487 = zext i32 %5486 to i64
  %5488 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5487
  %5489 = load i8, i8* %5488, align 1
  %5490 = zext i8 %5489 to i32
  %5491 = ashr i32 %5479, 19
  %5492 = trunc i64 %5467 to i32
  %5493 = add nsw i32 %5491, %5492
  %5494 = ashr i32 %5485, 3
  %5495 = add nsw i32 %5494, %5411
  %5496 = sext i32 %5495 to i64
  %5497 = mul nsw i64 %5460, %5496
  %5498 = sext i32 %5493 to i64
  %5499 = add nsw i64 %5497, %5498
  %5500 = getelementptr inbounds i8, i8* %5470, i64 %5499
  %5501 = getelementptr inbounds i8, i8* %5472, i64 %5499
  %5502 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5487
  %5503 = load i8, i8* %5502, align 1
  %5504 = zext i8 %5503 to i32
  %5505 = add i32 %5495, 7
  %5506 = add i32 %5505, %5504
  %5507 = ashr i32 %5506, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5507, i32 0) #7
  %5508 = icmp slt i32 %5493, %5484
  br i1 %5508, label %5520, label %5509

5509:                                             ; preds = %5478
  %5510 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5481
  %5511 = load i8, i8* %5510, align 1
  %5512 = zext i8 %5511 to i32
  %5513 = sub nsw i32 %5401, %5512
  %5514 = icmp slt i32 %5493, %5513
  %5515 = icmp sge i32 %5495, %5490
  %5516 = and i1 %5515, %5514
  %5517 = sub nsw i32 %5402, %5504
  %5518 = icmp slt i32 %5495, %5517
  %5519 = and i1 %5518, %5516
  br i1 %5519, label %5549, label %5520

5520:                                             ; preds = %5509, %5478
  %5521 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5522 = zext i8 %5489 to i64
  %5523 = mul i64 %5460, %5522
  %5524 = sub i64 0, %5523
  %5525 = getelementptr inbounds i8, i8* %5500, i64 %5524
  %5526 = zext i8 %5483 to i64
  %5527 = sub nsw i64 0, %5526
  %5528 = getelementptr inbounds i8, i8* %5525, i64 %5527
  %5529 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5481
  %5530 = load i8, i8* %5529, align 1
  %5531 = zext i8 %5530 to i32
  %5532 = add nuw nsw i32 %5531, 4
  %5533 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5487
  %5534 = load i8, i8* %5533, align 1
  %5535 = zext i8 %5534 to i32
  %5536 = add nuw nsw i32 %5535, 4
  %5537 = sub nsw i32 %5493, %5484
  %5538 = sub nsw i32 %5495, %5490
  call void %5521(i8* %229, i8* %5528, i64 32, i64 %5460, i32 %5532, i32 %5536, i32 %5537, i32 %5538, i32 %5399, i32 %5400) #7
  %5539 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5526
  %5540 = shl nuw nsw i32 %5490, 5
  %5541 = zext i32 %5540 to i64
  %5542 = getelementptr inbounds i8, i8* %5539, i64 %5541
  %5543 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %5522, i64 %5526
  %5544 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5543, align 8
  call void %5544(i8* %5464, i64 %5460, i8* %5542, i64 32, i32 4, i32 %5480, i32 %5486) #7
  %5545 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5546 = getelementptr inbounds i8, i8* %5501, i64 %5524
  %5547 = getelementptr inbounds i8, i8* %5546, i64 %5527
  call void %5545(i8* %229, i8* %5547, i64 32, i64 %5460, i32 %5532, i32 %5536, i32 %5537, i32 %5538, i32 %5399, i32 %5400) #7
  %5548 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5543, align 8
  call void %5548(i8* %5466, i64 %5460, i8* %5542, i64 32, i32 4, i32 %5480, i32 %5486) #7
  br label %5563

5549:                                             ; preds = %5509
  %5550 = zext i8 %5489 to i64
  %5551 = zext i8 %5483 to i64
  %5552 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %5550, i64 %5551
  %5553 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5552, align 8
  call void %5553(i8* %5464, i64 %5460, i8* %5500, i64 %5460, i32 4, i32 %5480, i32 %5486) #7
  %5554 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5552, align 8
  call void %5554(i8* %5466, i64 %5460, i8* %5501, i64 %5460, i32 4, i32 %5480, i32 %5486) #7
  br label %5563

5555:                                             ; preds = %5414
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5413, i32 0) #7
  %5556 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %5557 = mul nsw i64 %5460, %5410
  %5558 = getelementptr inbounds i8, i8* %5470, i64 %5557
  %5559 = getelementptr inbounds i8, i8* %5558, i64 %5467
  call void %5556(i8* %5464, i64 %5460, i8* %5559, i64 %5460, i32 4, i32 0, i32 0) #7
  %5560 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %5561 = getelementptr inbounds i8, i8* %5472, i64 %5557
  %5562 = getelementptr inbounds i8, i8* %5561, i64 %5467
  call void %5560(i8* %5466, i64 %5460, i8* %5562, i64 %5460, i32 4, i32 0, i32 0) #7
  br label %5563

5563:                                             ; preds = %5555, %5549, %5520
  %5564 = add nuw nsw i64 %5415, 1
  %5565 = icmp eq i64 %5564, 2
  br i1 %5565, label %5566, label %5414

5566:                                             ; preds = %5563
  %5567 = add nuw nsw i64 %5406, 1
  %5568 = icmp eq i64 %5567, 2
  br i1 %5568, label %7220, label %5405

5569:                                             ; preds = %5055
  %5570 = bitcast %struct.VP56mv* %5069 to i32*
  %5571 = load i32, i32* %5570, align 4
  %5572 = lshr i32 %5571, 16
  %5573 = trunc i32 %5572 to i16
  %5574 = load i8*, i8** %36, align 16
  %5575 = load i64, i64* %45, align 8
  %5576 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0, i32 0
  %5577 = load %struct.AVFrame*, %struct.AVFrame** %5576, align 8
  %5578 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5577, i64 0, i32 0, i64 0
  %5579 = load i8*, i8** %5578, align 8
  %5580 = icmp eq i32 %5571, 0
  br i1 %5580, label %5661, label %5581

5581:                                             ; preds = %5569
  %5582 = shl i32 %5571, 16
  %5583 = shl i32 %5571, 1
  %5584 = and i32 %5583, 6
  %5585 = zext i32 %5584 to i64
  %5586 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5585
  %5587 = load i8, i8* %5586, align 2
  %5588 = zext i8 %5587 to i32
  %5589 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0, i32 1
  %5590 = load i16, i16* %5589, align 2
  %5591 = sext i16 %5590 to i32
  %5592 = shl nsw i32 %5591, 1
  %5593 = and i32 %5592, 6
  %5594 = zext i32 %5593 to i64
  %5595 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5594
  %5596 = load i8, i8* %5595, align 2
  %5597 = zext i8 %5596 to i32
  %5598 = ashr i32 %5582, 18
  %5599 = trunc i64 %5056 to i32
  %5600 = add nsw i32 %5598, %5599
  %5601 = ashr i32 %5591, 2
  %5602 = add nsw i32 %5601, %43
  %5603 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5594
  %5604 = load i8, i8* %5603, align 2
  %5605 = zext i8 %5604 to i32
  %5606 = add nsw i32 %5602, 11
  %5607 = add nsw i32 %5606, %5605
  %5608 = ashr i32 %5607, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5608, i32 0) #7
  %5609 = sext i32 %5602 to i64
  %5610 = mul nsw i64 %5575, %5609
  %5611 = sext i32 %5600 to i64
  %5612 = add nsw i64 %5610, %5611
  %5613 = getelementptr inbounds i8, i8* %5579, i64 %5612
  %5614 = icmp slt i32 %5600, %5588
  br i1 %5614, label %5631, label %5615

5615:                                             ; preds = %5581
  %5616 = add nsw i32 %5059, -16
  %5617 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5585
  %5618 = load i8, i8* %5617, align 2
  %5619 = zext i8 %5618 to i32
  %5620 = sub nsw i32 %5616, %5619
  %5621 = icmp sge i32 %5600, %5620
  %5622 = icmp slt i32 %5602, %5597
  %5623 = or i1 %5622, %5621
  br i1 %5623, label %5631, label %5624

5624:                                             ; preds = %5615
  %5625 = add nsw i32 %5062, -8
  %5626 = sub nsw i32 %5625, %5605
  %5627 = icmp slt i32 %5602, %5626
  br i1 %5627, label %5628, label %5631

5628:                                             ; preds = %5624
  %5629 = zext i8 %5596 to i64
  %5630 = zext i8 %5587 to i64
  br label %5654

5631:                                             ; preds = %5624, %5615, %5581
  %5632 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5633 = zext i8 %5596 to i64
  %5634 = mul i64 %5575, %5633
  %5635 = sub i64 0, %5634
  %5636 = getelementptr inbounds i8, i8* %5613, i64 %5635
  %5637 = zext i8 %5587 to i64
  %5638 = sub nsw i64 0, %5637
  %5639 = getelementptr inbounds i8, i8* %5636, i64 %5638
  %5640 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5585
  %5641 = load i8, i8* %5640, align 2
  %5642 = zext i8 %5641 to i32
  %5643 = add nuw nsw i32 %5642, 16
  %5644 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5594
  %5645 = load i8, i8* %5644, align 2
  %5646 = zext i8 %5645 to i32
  %5647 = add nuw nsw i32 %5646, 8
  %5648 = sub nsw i32 %5600, %5588
  %5649 = sub nsw i32 %5602, %5597
  call void %5632(i8* %229, i8* %5639, i64 32, i64 %5575, i32 %5643, i32 %5647, i32 %5648, i32 %5649, i32 %5059, i32 %5062) #7
  %5650 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5637
  %5651 = shl nuw nsw i32 %5597, 5
  %5652 = zext i32 %5651 to i64
  %5653 = getelementptr inbounds i8, i8* %5650, i64 %5652
  br label %5654

5654:                                             ; preds = %5631, %5628
  %5655 = phi i64 [ %5630, %5628 ], [ %5637, %5631 ]
  %5656 = phi i64 [ %5629, %5628 ], [ %5633, %5631 ]
  %5657 = phi i8* [ %5613, %5628 ], [ %5653, %5631 ]
  %5658 = phi i64 [ %5575, %5628 ], [ 32, %5631 ]
  %5659 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 0, i64 %5656, i64 %5655
  %5660 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5659, align 8
  call void %5660(i8* %5574, i64 %5575, i8* %5657, i64 %5658, i32 8, i32 %5584, i32 %5593) #7
  br label %5666

5661:                                             ; preds = %5569
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %5662 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %245, align 8
  %5663 = mul nsw i64 %5575, %44
  %5664 = getelementptr inbounds i8, i8* %5579, i64 %5663
  %5665 = getelementptr inbounds i8, i8* %5664, i64 %5056
  call void %5662(i8* %5574, i64 %5575, i8* %5665, i64 %5575, i32 8, i32 0, i32 0) #7
  br label %5666

5666:                                             ; preds = %5661, %5654
  %5667 = load i8, i8* %231, align 1
  %5668 = icmp eq i8 %5667, 3
  %5669 = and i32 %5571, 65528
  %5670 = and i16 %5573, -8
  %5671 = select i1 %5668, i16 %5670, i16 %5573
  %5672 = select i1 %5668, i32 %5669, i32 %5571
  %5673 = ashr exact i64 %5056, 1
  %5674 = shl nuw nsw i32 %5058, 3
  %5675 = shl nuw nsw i32 %5061, 3
  %5676 = load i8*, i8** %37, align 8
  %5677 = load i64, i64* %53, align 8
  %5678 = load i8*, i8** %38, align 16
  %5679 = load %struct.AVFrame*, %struct.AVFrame** %5576, align 8
  %5680 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5679, i64 0, i32 0, i64 1
  %5681 = load i8*, i8** %5680, align 8
  %5682 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5679, i64 0, i32 0, i64 2
  %5683 = load i8*, i8** %5682, align 8
  %5684 = zext i16 %5671 to i32
  %5685 = shl nuw i32 %5684, 16
  %5686 = and i32 %5672, 65535
  %5687 = or i32 %5685, %5686
  %5688 = icmp eq i32 %5687, 0
  br i1 %5688, label %5768, label %5689

5689:                                             ; preds = %5666
  %5690 = shl i32 %5672, 16
  %5691 = and i32 %5672, 7
  %5692 = zext i32 %5691 to i64
  %5693 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5692
  %5694 = load i8, i8* %5693, align 1
  %5695 = zext i8 %5694 to i32
  %5696 = sext i16 %5671 to i32
  %5697 = and i32 %5696, 7
  %5698 = zext i32 %5697 to i64
  %5699 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5698
  %5700 = load i8, i8* %5699, align 1
  %5701 = zext i8 %5700 to i32
  %5702 = ashr i32 %5690, 19
  %5703 = trunc i64 %5673 to i32
  %5704 = add nsw i32 %5702, %5703
  %5705 = ashr i32 %5696, 3
  %5706 = add nsw i32 %5705, %51
  %5707 = sext i32 %5706 to i64
  %5708 = mul nsw i64 %5677, %5707
  %5709 = sext i32 %5704 to i64
  %5710 = add nsw i64 %5708, %5709
  %5711 = getelementptr inbounds i8, i8* %5681, i64 %5710
  %5712 = getelementptr inbounds i8, i8* %5683, i64 %5710
  %5713 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5698
  %5714 = load i8, i8* %5713, align 1
  %5715 = zext i8 %5714 to i32
  %5716 = add nsw i32 %5706, 7
  %5717 = add nsw i32 %5716, %5715
  %5718 = ashr i32 %5717, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5718, i32 0) #7
  %5719 = icmp slt i32 %5704, %5695
  br i1 %5719, label %5733, label %5720

5720:                                             ; preds = %5689
  %5721 = add nsw i32 %5674, -8
  %5722 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5692
  %5723 = load i8, i8* %5722, align 1
  %5724 = zext i8 %5723 to i32
  %5725 = sub nsw i32 %5721, %5724
  %5726 = icmp sge i32 %5704, %5725
  %5727 = icmp slt i32 %5706, %5701
  %5728 = or i1 %5727, %5726
  br i1 %5728, label %5733, label %5729

5729:                                             ; preds = %5720
  %5730 = add nsw i32 %5675, -4
  %5731 = sub nsw i32 %5730, %5715
  %5732 = icmp slt i32 %5706, %5731
  br i1 %5732, label %5762, label %5733

5733:                                             ; preds = %5729, %5720, %5689
  %5734 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5735 = zext i8 %5700 to i64
  %5736 = mul i64 %5677, %5735
  %5737 = sub i64 0, %5736
  %5738 = getelementptr inbounds i8, i8* %5711, i64 %5737
  %5739 = zext i8 %5694 to i64
  %5740 = sub nsw i64 0, %5739
  %5741 = getelementptr inbounds i8, i8* %5738, i64 %5740
  %5742 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5692
  %5743 = load i8, i8* %5742, align 1
  %5744 = zext i8 %5743 to i32
  %5745 = add nuw nsw i32 %5744, 8
  %5746 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5698
  %5747 = load i8, i8* %5746, align 1
  %5748 = zext i8 %5747 to i32
  %5749 = add nuw nsw i32 %5748, 4
  %5750 = sub nsw i32 %5704, %5695
  %5751 = sub nsw i32 %5706, %5701
  call void %5734(i8* %229, i8* %5741, i64 32, i64 %5677, i32 %5745, i32 %5749, i32 %5750, i32 %5751, i32 %5674, i32 %5675) #7
  %5752 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5739
  %5753 = shl nuw nsw i32 %5701, 5
  %5754 = zext i32 %5753 to i64
  %5755 = getelementptr inbounds i8, i8* %5752, i64 %5754
  %5756 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5735, i64 %5739
  %5757 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5756, align 8
  call void %5757(i8* %5676, i64 %5677, i8* %5755, i64 32, i32 4, i32 %5691, i32 %5697) #7
  %5758 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5759 = getelementptr inbounds i8, i8* %5712, i64 %5737
  %5760 = getelementptr inbounds i8, i8* %5759, i64 %5740
  call void %5758(i8* %229, i8* %5760, i64 32, i64 %5677, i32 %5745, i32 %5749, i32 %5750, i32 %5751, i32 %5674, i32 %5675) #7
  %5761 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5756, align 8
  call void %5761(i8* %5678, i64 %5677, i8* %5755, i64 32, i32 4, i32 %5691, i32 %5697) #7
  br label %5776

5762:                                             ; preds = %5729
  %5763 = zext i8 %5700 to i64
  %5764 = zext i8 %5694 to i64
  %5765 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5763, i64 %5764
  %5766 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5765, align 8
  call void %5766(i8* %5676, i64 %5677, i8* %5711, i64 %5677, i32 4, i32 %5691, i32 %5697) #7
  %5767 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5765, align 8
  call void %5767(i8* %5678, i64 %5677, i8* %5712, i64 %5677, i32 4, i32 %5691, i32 %5697) #7
  br label %5776

5768:                                             ; preds = %5666
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %5769 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5770 = mul nsw i64 %5677, %52
  %5771 = getelementptr inbounds i8, i8* %5681, i64 %5770
  %5772 = getelementptr inbounds i8, i8* %5771, i64 %5673
  call void %5769(i8* %5676, i64 %5677, i8* %5772, i64 %5677, i32 4, i32 0, i32 0) #7
  %5773 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5774 = getelementptr inbounds i8, i8* %5683, i64 %5770
  %5775 = getelementptr inbounds i8, i8* %5774, i64 %5673
  call void %5773(i8* %5678, i64 %5677, i8* %5775, i64 %5677, i32 4, i32 0, i32 0) #7
  br label %5776

5776:                                             ; preds = %5768, %5762, %5733
  %5777 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1
  %5778 = bitcast %struct.VP56mv* %5777 to i32*
  %5779 = load i32, i32* %5778, align 4
  %5780 = lshr i32 %5779, 16
  %5781 = trunc i32 %5780 to i16
  %5782 = load i64, i64* %45, align 8
  %5783 = shl nsw i64 %5782, 3
  %5784 = getelementptr inbounds i8, i8* %5574, i64 %5783
  %5785 = load %struct.AVFrame*, %struct.AVFrame** %5576, align 8
  %5786 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5785, i64 0, i32 0, i64 0
  %5787 = load i8*, i8** %5786, align 8
  %5788 = icmp eq i32 %5779, 0
  br i1 %5788, label %5869, label %5789

5789:                                             ; preds = %5776
  %5790 = shl i32 %5779, 16
  %5791 = shl i32 %5779, 1
  %5792 = and i32 %5791, 6
  %5793 = zext i32 %5792 to i64
  %5794 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5793
  %5795 = load i8, i8* %5794, align 2
  %5796 = zext i8 %5795 to i32
  %5797 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1, i32 1
  %5798 = load i16, i16* %5797, align 2
  %5799 = sext i16 %5798 to i32
  %5800 = shl nsw i32 %5799, 1
  %5801 = and i32 %5800, 6
  %5802 = zext i32 %5801 to i64
  %5803 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5802
  %5804 = load i8, i8* %5803, align 2
  %5805 = zext i8 %5804 to i32
  %5806 = ashr i32 %5790, 18
  %5807 = trunc i64 %5056 to i32
  %5808 = add nsw i32 %5806, %5807
  %5809 = ashr i32 %5799, 2
  %5810 = add nsw i32 %5809, %233
  %5811 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5802
  %5812 = load i8, i8* %5811, align 2
  %5813 = zext i8 %5812 to i32
  %5814 = add nsw i32 %5810, 11
  %5815 = add nsw i32 %5814, %5813
  %5816 = ashr i32 %5815, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5816, i32 0) #7
  %5817 = sext i32 %5810 to i64
  %5818 = mul nsw i64 %5782, %5817
  %5819 = sext i32 %5808 to i64
  %5820 = add nsw i64 %5818, %5819
  %5821 = getelementptr inbounds i8, i8* %5787, i64 %5820
  %5822 = icmp slt i32 %5808, %5796
  br i1 %5822, label %5839, label %5823

5823:                                             ; preds = %5789
  %5824 = add nsw i32 %5059, -16
  %5825 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5793
  %5826 = load i8, i8* %5825, align 2
  %5827 = zext i8 %5826 to i32
  %5828 = sub nsw i32 %5824, %5827
  %5829 = icmp sge i32 %5808, %5828
  %5830 = icmp slt i32 %5810, %5805
  %5831 = or i1 %5830, %5829
  br i1 %5831, label %5839, label %5832

5832:                                             ; preds = %5823
  %5833 = add nsw i32 %5062, -8
  %5834 = sub nsw i32 %5833, %5813
  %5835 = icmp slt i32 %5810, %5834
  br i1 %5835, label %5836, label %5839

5836:                                             ; preds = %5832
  %5837 = zext i8 %5804 to i64
  %5838 = zext i8 %5795 to i64
  br label %5862

5839:                                             ; preds = %5832, %5823, %5789
  %5840 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5841 = zext i8 %5804 to i64
  %5842 = mul i64 %5782, %5841
  %5843 = sub i64 0, %5842
  %5844 = getelementptr inbounds i8, i8* %5821, i64 %5843
  %5845 = zext i8 %5795 to i64
  %5846 = sub nsw i64 0, %5845
  %5847 = getelementptr inbounds i8, i8* %5844, i64 %5846
  %5848 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5793
  %5849 = load i8, i8* %5848, align 2
  %5850 = zext i8 %5849 to i32
  %5851 = add nuw nsw i32 %5850, 16
  %5852 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5802
  %5853 = load i8, i8* %5852, align 2
  %5854 = zext i8 %5853 to i32
  %5855 = add nuw nsw i32 %5854, 8
  %5856 = sub nsw i32 %5808, %5796
  %5857 = sub nsw i32 %5810, %5805
  call void %5840(i8* %229, i8* %5847, i64 32, i64 %5782, i32 %5851, i32 %5855, i32 %5856, i32 %5857, i32 %5059, i32 %5062) #7
  %5858 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5845
  %5859 = shl nuw nsw i32 %5805, 5
  %5860 = zext i32 %5859 to i64
  %5861 = getelementptr inbounds i8, i8* %5858, i64 %5860
  br label %5862

5862:                                             ; preds = %5839, %5836
  %5863 = phi i64 [ %5838, %5836 ], [ %5845, %5839 ]
  %5864 = phi i64 [ %5837, %5836 ], [ %5841, %5839 ]
  %5865 = phi i8* [ %5821, %5836 ], [ %5861, %5839 ]
  %5866 = phi i64 [ %5782, %5836 ], [ 32, %5839 ]
  %5867 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 0, i64 %5864, i64 %5863
  %5868 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5867, align 8
  call void %5868(i8* %5784, i64 %5782, i8* %5865, i64 %5866, i32 8, i32 %5792, i32 %5801) #7
  br label %5874

5869:                                             ; preds = %5776
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %235, i32 0) #7
  %5870 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %245, align 8
  %5871 = mul nsw i64 %5782, %236
  %5872 = getelementptr inbounds i8, i8* %5787, i64 %5871
  %5873 = getelementptr inbounds i8, i8* %5872, i64 %5056
  call void %5870(i8* %5784, i64 %5782, i8* %5873, i64 %5782, i32 8, i32 0, i32 0) #7
  br label %5874

5874:                                             ; preds = %5869, %5862
  %5875 = load i8, i8* %231, align 1
  %5876 = icmp eq i8 %5875, 3
  %5877 = and i32 %5779, 65528
  %5878 = and i16 %5781, -8
  %5879 = select i1 %5876, i16 %5878, i16 %5781
  %5880 = select i1 %5876, i32 %5877, i32 %5779
  %5881 = load i64, i64* %53, align 8
  %5882 = shl nsw i64 %5881, 2
  %5883 = getelementptr inbounds i8, i8* %5676, i64 %5882
  %5884 = getelementptr inbounds i8, i8* %5678, i64 %5882
  %5885 = load %struct.AVFrame*, %struct.AVFrame** %5576, align 8
  %5886 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5885, i64 0, i32 0, i64 1
  %5887 = load i8*, i8** %5886, align 8
  %5888 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5885, i64 0, i32 0, i64 2
  %5889 = load i8*, i8** %5888, align 8
  %5890 = zext i16 %5879 to i32
  %5891 = shl nuw i32 %5890, 16
  %5892 = and i32 %5880, 65535
  %5893 = or i32 %5891, %5892
  %5894 = icmp eq i32 %5893, 0
  br i1 %5894, label %5974, label %5895

5895:                                             ; preds = %5874
  %5896 = shl i32 %5880, 16
  %5897 = and i32 %5880, 7
  %5898 = zext i32 %5897 to i64
  %5899 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5898
  %5900 = load i8, i8* %5899, align 1
  %5901 = zext i8 %5900 to i32
  %5902 = sext i16 %5879 to i32
  %5903 = and i32 %5902, 7
  %5904 = zext i32 %5903 to i64
  %5905 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5904
  %5906 = load i8, i8* %5905, align 1
  %5907 = zext i8 %5906 to i32
  %5908 = ashr i32 %5896, 19
  %5909 = trunc i64 %5673 to i32
  %5910 = add nsw i32 %5908, %5909
  %5911 = ashr i32 %5902, 3
  %5912 = add nsw i32 %5911, %237
  %5913 = sext i32 %5912 to i64
  %5914 = mul nsw i64 %5881, %5913
  %5915 = sext i32 %5910 to i64
  %5916 = add nsw i64 %5914, %5915
  %5917 = getelementptr inbounds i8, i8* %5887, i64 %5916
  %5918 = getelementptr inbounds i8, i8* %5889, i64 %5916
  %5919 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5904
  %5920 = load i8, i8* %5919, align 1
  %5921 = zext i8 %5920 to i32
  %5922 = add nsw i32 %5912, 7
  %5923 = add nsw i32 %5922, %5921
  %5924 = ashr i32 %5923, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %5924, i32 0) #7
  %5925 = icmp slt i32 %5910, %5901
  br i1 %5925, label %5939, label %5926

5926:                                             ; preds = %5895
  %5927 = add nsw i32 %5674, -8
  %5928 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5898
  %5929 = load i8, i8* %5928, align 1
  %5930 = zext i8 %5929 to i32
  %5931 = sub nsw i32 %5927, %5930
  %5932 = icmp sge i32 %5910, %5931
  %5933 = icmp slt i32 %5912, %5907
  %5934 = or i1 %5933, %5932
  br i1 %5934, label %5939, label %5935

5935:                                             ; preds = %5926
  %5936 = add nsw i32 %5675, -4
  %5937 = sub nsw i32 %5936, %5921
  %5938 = icmp slt i32 %5912, %5937
  br i1 %5938, label %5968, label %5939

5939:                                             ; preds = %5935, %5926, %5895
  %5940 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5941 = zext i8 %5906 to i64
  %5942 = mul i64 %5881, %5941
  %5943 = sub i64 0, %5942
  %5944 = getelementptr inbounds i8, i8* %5917, i64 %5943
  %5945 = zext i8 %5900 to i64
  %5946 = sub nsw i64 0, %5945
  %5947 = getelementptr inbounds i8, i8* %5944, i64 %5946
  %5948 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5898
  %5949 = load i8, i8* %5948, align 1
  %5950 = zext i8 %5949 to i32
  %5951 = add nuw nsw i32 %5950, 8
  %5952 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5904
  %5953 = load i8, i8* %5952, align 1
  %5954 = zext i8 %5953 to i32
  %5955 = add nuw nsw i32 %5954, 4
  %5956 = sub nsw i32 %5910, %5901
  %5957 = sub nsw i32 %5912, %5907
  call void %5940(i8* %229, i8* %5947, i64 32, i64 %5881, i32 %5951, i32 %5955, i32 %5956, i32 %5957, i32 %5674, i32 %5675) #7
  %5958 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %5945
  %5959 = shl nuw nsw i32 %5907, 5
  %5960 = zext i32 %5959 to i64
  %5961 = getelementptr inbounds i8, i8* %5958, i64 %5960
  %5962 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5941, i64 %5945
  %5963 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5962, align 8
  call void %5963(i8* %5883, i64 %5881, i8* %5961, i64 32, i32 4, i32 %5897, i32 %5903) #7
  %5964 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %5965 = getelementptr inbounds i8, i8* %5918, i64 %5943
  %5966 = getelementptr inbounds i8, i8* %5965, i64 %5946
  call void %5964(i8* %229, i8* %5966, i64 32, i64 %5881, i32 %5951, i32 %5955, i32 %5956, i32 %5957, i32 %5674, i32 %5675) #7
  %5967 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5962, align 8
  call void %5967(i8* %5884, i64 %5881, i8* %5961, i64 32, i32 4, i32 %5897, i32 %5903) #7
  br label %7220

5968:                                             ; preds = %5935
  %5969 = zext i8 %5906 to i64
  %5970 = zext i8 %5900 to i64
  %5971 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %5969, i64 %5970
  %5972 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5971, align 8
  call void %5972(i8* %5883, i64 %5881, i8* %5917, i64 %5881, i32 4, i32 %5897, i32 %5903) #7
  %5973 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %5971, align 8
  call void %5973(i8* %5884, i64 %5881, i8* %5918, i64 %5881, i32 4, i32 %5897, i32 %5903) #7
  br label %7220

5974:                                             ; preds = %5874
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %239, i32 0) #7
  %5975 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5976 = mul nsw i64 %5881, %240
  %5977 = getelementptr inbounds i8, i8* %5887, i64 %5976
  %5978 = getelementptr inbounds i8, i8* %5977, i64 %5673
  call void %5975(i8* %5883, i64 %5881, i8* %5978, i64 %5881, i32 4, i32 0, i32 0) #7
  %5979 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %5980 = getelementptr inbounds i8, i8* %5889, i64 %5976
  %5981 = getelementptr inbounds i8, i8* %5980, i64 %5673
  call void %5979(i8* %5884, i64 %5881, i8* %5981, i64 %5881, i32 4, i32 0, i32 0) #7
  br label %7220

5982:                                             ; preds = %5055
  %5983 = bitcast %struct.VP56mv* %5069 to i32*
  %5984 = load i32, i32* %5983, align 4
  %5985 = lshr i32 %5984, 16
  %5986 = trunc i32 %5985 to i16
  %5987 = load i8*, i8** %36, align 16
  %5988 = load i64, i64* %45, align 8
  %5989 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0, i32 0
  %5990 = load %struct.AVFrame*, %struct.AVFrame** %5989, align 8
  %5991 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %5990, i64 0, i32 0, i64 0
  %5992 = load i8*, i8** %5991, align 8
  %5993 = icmp eq i32 %5984, 0
  br i1 %5993, label %6074, label %5994

5994:                                             ; preds = %5982
  %5995 = shl i32 %5984, 16
  %5996 = shl i32 %5984, 1
  %5997 = and i32 %5996, 6
  %5998 = zext i32 %5997 to i64
  %5999 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %5998
  %6000 = load i8, i8* %5999, align 2
  %6001 = zext i8 %6000 to i32
  %6002 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0, i32 1
  %6003 = load i16, i16* %6002, align 2
  %6004 = sext i16 %6003 to i32
  %6005 = shl nsw i32 %6004, 1
  %6006 = and i32 %6005, 6
  %6007 = zext i32 %6006 to i64
  %6008 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6007
  %6009 = load i8, i8* %6008, align 2
  %6010 = zext i8 %6009 to i32
  %6011 = ashr i32 %5995, 18
  %6012 = trunc i64 %5056 to i32
  %6013 = add nsw i32 %6011, %6012
  %6014 = ashr i32 %6004, 2
  %6015 = add nsw i32 %6014, %43
  %6016 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6007
  %6017 = load i8, i8* %6016, align 2
  %6018 = zext i8 %6017 to i32
  %6019 = add nsw i32 %6015, 19
  %6020 = add nsw i32 %6019, %6018
  %6021 = ashr i32 %6020, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6021, i32 0) #7
  %6022 = sext i32 %6015 to i64
  %6023 = mul nsw i64 %5988, %6022
  %6024 = sext i32 %6013 to i64
  %6025 = add nsw i64 %6023, %6024
  %6026 = getelementptr inbounds i8, i8* %5992, i64 %6025
  %6027 = icmp slt i32 %6013, %6001
  br i1 %6027, label %6044, label %6028

6028:                                             ; preds = %5994
  %6029 = add nsw i32 %5059, -8
  %6030 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %5998
  %6031 = load i8, i8* %6030, align 2
  %6032 = zext i8 %6031 to i32
  %6033 = sub nsw i32 %6029, %6032
  %6034 = icmp sge i32 %6013, %6033
  %6035 = icmp slt i32 %6015, %6010
  %6036 = or i1 %6035, %6034
  br i1 %6036, label %6044, label %6037

6037:                                             ; preds = %6028
  %6038 = add nsw i32 %5062, -16
  %6039 = sub nsw i32 %6038, %6018
  %6040 = icmp slt i32 %6015, %6039
  br i1 %6040, label %6041, label %6044

6041:                                             ; preds = %6037
  %6042 = zext i8 %6009 to i64
  %6043 = zext i8 %6000 to i64
  br label %6067

6044:                                             ; preds = %6037, %6028, %5994
  %6045 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6046 = zext i8 %6009 to i64
  %6047 = mul i64 %5988, %6046
  %6048 = sub i64 0, %6047
  %6049 = getelementptr inbounds i8, i8* %6026, i64 %6048
  %6050 = zext i8 %6000 to i64
  %6051 = sub nsw i64 0, %6050
  %6052 = getelementptr inbounds i8, i8* %6049, i64 %6051
  %6053 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %5998
  %6054 = load i8, i8* %6053, align 2
  %6055 = zext i8 %6054 to i32
  %6056 = add nuw nsw i32 %6055, 8
  %6057 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6007
  %6058 = load i8, i8* %6057, align 2
  %6059 = zext i8 %6058 to i32
  %6060 = add nuw nsw i32 %6059, 16
  %6061 = sub nsw i32 %6013, %6001
  %6062 = sub nsw i32 %6015, %6010
  call void %6045(i8* %229, i8* %6052, i64 32, i64 %5988, i32 %6056, i32 %6060, i32 %6061, i32 %6062, i32 %5059, i32 %5062) #7
  %6063 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6050
  %6064 = shl nuw nsw i32 %6010, 5
  %6065 = zext i32 %6064 to i64
  %6066 = getelementptr inbounds i8, i8* %6063, i64 %6065
  br label %6067

6067:                                             ; preds = %6044, %6041
  %6068 = phi i64 [ %6043, %6041 ], [ %6050, %6044 ]
  %6069 = phi i64 [ %6042, %6041 ], [ %6046, %6044 ]
  %6070 = phi i8* [ %6026, %6041 ], [ %6066, %6044 ]
  %6071 = phi i64 [ %5988, %6041 ], [ 32, %6044 ]
  %6072 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %6069, i64 %6068
  %6073 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6072, align 8
  call void %6073(i8* %5987, i64 %5988, i8* %6070, i64 %6071, i32 16, i32 %5997, i32 %6006) #7
  br label %6079

6074:                                             ; preds = %5982
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %242, i32 0) #7
  %6075 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %6076 = mul nsw i64 %5988, %44
  %6077 = getelementptr inbounds i8, i8* %5992, i64 %6076
  %6078 = getelementptr inbounds i8, i8* %6077, i64 %5056
  call void %6075(i8* %5987, i64 %5988, i8* %6078, i64 %5988, i32 16, i32 0, i32 0) #7
  br label %6079

6079:                                             ; preds = %6074, %6067
  %6080 = load i8, i8* %231, align 1
  %6081 = icmp eq i8 %6080, 3
  %6082 = and i32 %5984, 65528
  %6083 = and i16 %5986, -8
  %6084 = select i1 %6081, i16 %6083, i16 %5986
  %6085 = select i1 %6081, i32 %6082, i32 %5984
  %6086 = ashr exact i64 %5056, 1
  %6087 = shl nuw nsw i32 %5058, 3
  %6088 = shl nuw nsw i32 %5061, 3
  %6089 = load i8*, i8** %37, align 8
  %6090 = load i64, i64* %53, align 8
  %6091 = load i8*, i8** %38, align 16
  %6092 = load %struct.AVFrame*, %struct.AVFrame** %5989, align 8
  %6093 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6092, i64 0, i32 0, i64 1
  %6094 = load i8*, i8** %6093, align 8
  %6095 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6092, i64 0, i32 0, i64 2
  %6096 = load i8*, i8** %6095, align 8
  %6097 = zext i16 %6084 to i32
  %6098 = shl nuw i32 %6097, 16
  %6099 = and i32 %6085, 65535
  %6100 = or i32 %6098, %6099
  %6101 = icmp eq i32 %6100, 0
  br i1 %6101, label %6181, label %6102

6102:                                             ; preds = %6079
  %6103 = shl i32 %6085, 16
  %6104 = and i32 %6085, 7
  %6105 = zext i32 %6104 to i64
  %6106 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6105
  %6107 = load i8, i8* %6106, align 1
  %6108 = zext i8 %6107 to i32
  %6109 = sext i16 %6084 to i32
  %6110 = and i32 %6109, 7
  %6111 = zext i32 %6110 to i64
  %6112 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6111
  %6113 = load i8, i8* %6112, align 1
  %6114 = zext i8 %6113 to i32
  %6115 = ashr i32 %6103, 19
  %6116 = trunc i64 %6086 to i32
  %6117 = add nsw i32 %6115, %6116
  %6118 = ashr i32 %6109, 3
  %6119 = add nsw i32 %6118, %51
  %6120 = sext i32 %6119 to i64
  %6121 = mul nsw i64 %6090, %6120
  %6122 = sext i32 %6117 to i64
  %6123 = add nsw i64 %6121, %6122
  %6124 = getelementptr inbounds i8, i8* %6094, i64 %6123
  %6125 = getelementptr inbounds i8, i8* %6096, i64 %6123
  %6126 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6111
  %6127 = load i8, i8* %6126, align 1
  %6128 = zext i8 %6127 to i32
  %6129 = add nsw i32 %6119, 11
  %6130 = add nsw i32 %6129, %6128
  %6131 = ashr i32 %6130, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6131, i32 0) #7
  %6132 = icmp slt i32 %6117, %6108
  br i1 %6132, label %6146, label %6133

6133:                                             ; preds = %6102
  %6134 = add nsw i32 %6087, -4
  %6135 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6105
  %6136 = load i8, i8* %6135, align 1
  %6137 = zext i8 %6136 to i32
  %6138 = sub nsw i32 %6134, %6137
  %6139 = icmp sge i32 %6117, %6138
  %6140 = icmp slt i32 %6119, %6114
  %6141 = or i1 %6140, %6139
  br i1 %6141, label %6146, label %6142

6142:                                             ; preds = %6133
  %6143 = add nsw i32 %6088, -8
  %6144 = sub nsw i32 %6143, %6128
  %6145 = icmp slt i32 %6119, %6144
  br i1 %6145, label %6175, label %6146

6146:                                             ; preds = %6142, %6133, %6102
  %6147 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6148 = zext i8 %6113 to i64
  %6149 = mul i64 %6090, %6148
  %6150 = sub i64 0, %6149
  %6151 = getelementptr inbounds i8, i8* %6124, i64 %6150
  %6152 = zext i8 %6107 to i64
  %6153 = sub nsw i64 0, %6152
  %6154 = getelementptr inbounds i8, i8* %6151, i64 %6153
  %6155 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6105
  %6156 = load i8, i8* %6155, align 1
  %6157 = zext i8 %6156 to i32
  %6158 = add nuw nsw i32 %6157, 4
  %6159 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6111
  %6160 = load i8, i8* %6159, align 1
  %6161 = zext i8 %6160 to i32
  %6162 = add nuw nsw i32 %6161, 8
  %6163 = sub nsw i32 %6117, %6108
  %6164 = sub nsw i32 %6119, %6114
  call void %6147(i8* %229, i8* %6154, i64 32, i64 %6090, i32 %6158, i32 %6162, i32 %6163, i32 %6164, i32 %6087, i32 %6088) #7
  %6165 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6152
  %6166 = shl nuw nsw i32 %6114, 5
  %6167 = zext i32 %6166 to i64
  %6168 = getelementptr inbounds i8, i8* %6165, i64 %6167
  %6169 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6148, i64 %6152
  %6170 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6169, align 8
  call void %6170(i8* %6089, i64 %6090, i8* %6168, i64 32, i32 8, i32 %6104, i32 %6110) #7
  %6171 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6172 = getelementptr inbounds i8, i8* %6125, i64 %6150
  %6173 = getelementptr inbounds i8, i8* %6172, i64 %6153
  call void %6171(i8* %229, i8* %6173, i64 32, i64 %6090, i32 %6158, i32 %6162, i32 %6163, i32 %6164, i32 %6087, i32 %6088) #7
  %6174 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6169, align 8
  call void %6174(i8* %6091, i64 %6090, i8* %6168, i64 32, i32 8, i32 %6104, i32 %6110) #7
  br label %6189

6175:                                             ; preds = %6142
  %6176 = zext i8 %6113 to i64
  %6177 = zext i8 %6107 to i64
  %6178 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6176, i64 %6177
  %6179 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6178, align 8
  call void %6179(i8* %6089, i64 %6090, i8* %6124, i64 %6090, i32 8, i32 %6104, i32 %6110) #7
  %6180 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6178, align 8
  call void %6180(i8* %6091, i64 %6090, i8* %6125, i64 %6090, i32 8, i32 %6104, i32 %6110) #7
  br label %6189

6181:                                             ; preds = %6079
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %244, i32 0) #7
  %6182 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6183 = mul nsw i64 %6090, %52
  %6184 = getelementptr inbounds i8, i8* %6094, i64 %6183
  %6185 = getelementptr inbounds i8, i8* %6184, i64 %6086
  call void %6182(i8* %6089, i64 %6090, i8* %6185, i64 %6090, i32 8, i32 0, i32 0) #7
  %6186 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6187 = getelementptr inbounds i8, i8* %6096, i64 %6183
  %6188 = getelementptr inbounds i8, i8* %6187, i64 %6086
  call void %6186(i8* %6091, i64 %6090, i8* %6188, i64 %6090, i32 8, i32 0, i32 0) #7
  br label %6189

6189:                                             ; preds = %6181, %6175, %6146
  %6190 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1
  %6191 = bitcast %struct.VP56mv* %6190 to i32*
  %6192 = load i32, i32* %6191, align 4
  %6193 = lshr i32 %6192, 16
  %6194 = trunc i32 %6193 to i16
  %6195 = load i64, i64* %45, align 8
  %6196 = getelementptr inbounds i8, i8* %5987, i64 8
  %6197 = or i64 %5056, 8
  %6198 = load %struct.AVFrame*, %struct.AVFrame** %5989, align 8
  %6199 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6198, i64 0, i32 0, i64 0
  %6200 = load i8*, i8** %6199, align 8
  %6201 = icmp eq i32 %6192, 0
  br i1 %6201, label %6282, label %6202

6202:                                             ; preds = %6189
  %6203 = shl i32 %6192, 16
  %6204 = shl i32 %6192, 1
  %6205 = and i32 %6204, 6
  %6206 = zext i32 %6205 to i64
  %6207 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6206
  %6208 = load i8, i8* %6207, align 2
  %6209 = zext i8 %6208 to i32
  %6210 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1, i32 1
  %6211 = load i16, i16* %6210, align 2
  %6212 = sext i16 %6211 to i32
  %6213 = shl nsw i32 %6212, 1
  %6214 = and i32 %6213, 6
  %6215 = zext i32 %6214 to i64
  %6216 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6215
  %6217 = load i8, i8* %6216, align 2
  %6218 = zext i8 %6217 to i32
  %6219 = ashr i32 %6203, 18
  %6220 = trunc i64 %6197 to i32
  %6221 = add nsw i32 %6219, %6220
  %6222 = ashr i32 %6212, 2
  %6223 = add nsw i32 %6222, %43
  %6224 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6215
  %6225 = load i8, i8* %6224, align 2
  %6226 = zext i8 %6225 to i32
  %6227 = add nsw i32 %6223, 19
  %6228 = add nsw i32 %6227, %6226
  %6229 = ashr i32 %6228, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6229, i32 0) #7
  %6230 = sext i32 %6223 to i64
  %6231 = mul nsw i64 %6195, %6230
  %6232 = sext i32 %6221 to i64
  %6233 = add nsw i64 %6231, %6232
  %6234 = getelementptr inbounds i8, i8* %6200, i64 %6233
  %6235 = icmp slt i32 %6221, %6209
  br i1 %6235, label %6252, label %6236

6236:                                             ; preds = %6202
  %6237 = add nsw i32 %5059, -8
  %6238 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6206
  %6239 = load i8, i8* %6238, align 2
  %6240 = zext i8 %6239 to i32
  %6241 = sub nsw i32 %6237, %6240
  %6242 = icmp sge i32 %6221, %6241
  %6243 = icmp slt i32 %6223, %6218
  %6244 = or i1 %6243, %6242
  br i1 %6244, label %6252, label %6245

6245:                                             ; preds = %6236
  %6246 = add nsw i32 %5062, -16
  %6247 = sub nsw i32 %6246, %6226
  %6248 = icmp slt i32 %6223, %6247
  br i1 %6248, label %6249, label %6252

6249:                                             ; preds = %6245
  %6250 = zext i8 %6217 to i64
  %6251 = zext i8 %6208 to i64
  br label %6275

6252:                                             ; preds = %6245, %6236, %6202
  %6253 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6254 = zext i8 %6217 to i64
  %6255 = mul i64 %6195, %6254
  %6256 = sub i64 0, %6255
  %6257 = getelementptr inbounds i8, i8* %6234, i64 %6256
  %6258 = zext i8 %6208 to i64
  %6259 = sub nsw i64 0, %6258
  %6260 = getelementptr inbounds i8, i8* %6257, i64 %6259
  %6261 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6206
  %6262 = load i8, i8* %6261, align 2
  %6263 = zext i8 %6262 to i32
  %6264 = add nuw nsw i32 %6263, 8
  %6265 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6215
  %6266 = load i8, i8* %6265, align 2
  %6267 = zext i8 %6266 to i32
  %6268 = add nuw nsw i32 %6267, 16
  %6269 = sub nsw i32 %6221, %6209
  %6270 = sub nsw i32 %6223, %6218
  call void %6253(i8* %229, i8* %6260, i64 32, i64 %6195, i32 %6264, i32 %6268, i32 %6269, i32 %6270, i32 %5059, i32 %5062) #7
  %6271 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6258
  %6272 = shl nuw nsw i32 %6218, 5
  %6273 = zext i32 %6272 to i64
  %6274 = getelementptr inbounds i8, i8* %6271, i64 %6273
  br label %6275

6275:                                             ; preds = %6252, %6249
  %6276 = phi i64 [ %6251, %6249 ], [ %6258, %6252 ]
  %6277 = phi i64 [ %6250, %6249 ], [ %6254, %6252 ]
  %6278 = phi i8* [ %6234, %6249 ], [ %6274, %6252 ]
  %6279 = phi i64 [ %6195, %6249 ], [ 32, %6252 ]
  %6280 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %6277, i64 %6276
  %6281 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6280, align 8
  call void %6281(i8* %6196, i64 %6195, i8* %6278, i64 %6279, i32 16, i32 %6205, i32 %6214) #7
  br label %6287

6282:                                             ; preds = %6189
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %242, i32 0) #7
  %6283 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %6284 = mul nsw i64 %6195, %44
  %6285 = getelementptr inbounds i8, i8* %6200, i64 %6284
  %6286 = getelementptr inbounds i8, i8* %6285, i64 %6197
  call void %6283(i8* %6196, i64 %6195, i8* %6286, i64 %6195, i32 16, i32 0, i32 0) #7
  br label %6287

6287:                                             ; preds = %6282, %6275
  %6288 = load i8, i8* %231, align 1
  %6289 = icmp eq i8 %6288, 3
  %6290 = and i32 %6192, 65528
  %6291 = and i16 %6194, -8
  %6292 = select i1 %6289, i16 %6291, i16 %6194
  %6293 = select i1 %6289, i32 %6290, i32 %6192
  %6294 = load i64, i64* %53, align 8
  %6295 = getelementptr inbounds i8, i8* %6089, i64 4
  %6296 = getelementptr inbounds i8, i8* %6091, i64 4
  %6297 = or i64 %6086, 4
  %6298 = load %struct.AVFrame*, %struct.AVFrame** %5989, align 8
  %6299 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6298, i64 0, i32 0, i64 1
  %6300 = load i8*, i8** %6299, align 8
  %6301 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6298, i64 0, i32 0, i64 2
  %6302 = load i8*, i8** %6301, align 8
  %6303 = zext i16 %6292 to i32
  %6304 = shl nuw i32 %6303, 16
  %6305 = and i32 %6293, 65535
  %6306 = or i32 %6304, %6305
  %6307 = icmp eq i32 %6306, 0
  br i1 %6307, label %6387, label %6308

6308:                                             ; preds = %6287
  %6309 = shl i32 %6293, 16
  %6310 = and i32 %6293, 7
  %6311 = zext i32 %6310 to i64
  %6312 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6311
  %6313 = load i8, i8* %6312, align 1
  %6314 = zext i8 %6313 to i32
  %6315 = sext i16 %6292 to i32
  %6316 = and i32 %6315, 7
  %6317 = zext i32 %6316 to i64
  %6318 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6317
  %6319 = load i8, i8* %6318, align 1
  %6320 = zext i8 %6319 to i32
  %6321 = ashr i32 %6309, 19
  %6322 = trunc i64 %6297 to i32
  %6323 = add nsw i32 %6321, %6322
  %6324 = ashr i32 %6315, 3
  %6325 = add nsw i32 %6324, %51
  %6326 = sext i32 %6325 to i64
  %6327 = mul nsw i64 %6294, %6326
  %6328 = sext i32 %6323 to i64
  %6329 = add nsw i64 %6327, %6328
  %6330 = getelementptr inbounds i8, i8* %6300, i64 %6329
  %6331 = getelementptr inbounds i8, i8* %6302, i64 %6329
  %6332 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6317
  %6333 = load i8, i8* %6332, align 1
  %6334 = zext i8 %6333 to i32
  %6335 = add nsw i32 %6325, 11
  %6336 = add nsw i32 %6335, %6334
  %6337 = ashr i32 %6336, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6337, i32 0) #7
  %6338 = icmp slt i32 %6323, %6314
  br i1 %6338, label %6352, label %6339

6339:                                             ; preds = %6308
  %6340 = add nsw i32 %6087, -4
  %6341 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6311
  %6342 = load i8, i8* %6341, align 1
  %6343 = zext i8 %6342 to i32
  %6344 = sub nsw i32 %6340, %6343
  %6345 = icmp sge i32 %6323, %6344
  %6346 = icmp slt i32 %6325, %6320
  %6347 = or i1 %6346, %6345
  br i1 %6347, label %6352, label %6348

6348:                                             ; preds = %6339
  %6349 = add nsw i32 %6088, -8
  %6350 = sub nsw i32 %6349, %6334
  %6351 = icmp slt i32 %6325, %6350
  br i1 %6351, label %6381, label %6352

6352:                                             ; preds = %6348, %6339, %6308
  %6353 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6354 = zext i8 %6319 to i64
  %6355 = mul i64 %6294, %6354
  %6356 = sub i64 0, %6355
  %6357 = getelementptr inbounds i8, i8* %6330, i64 %6356
  %6358 = zext i8 %6313 to i64
  %6359 = sub nsw i64 0, %6358
  %6360 = getelementptr inbounds i8, i8* %6357, i64 %6359
  %6361 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6311
  %6362 = load i8, i8* %6361, align 1
  %6363 = zext i8 %6362 to i32
  %6364 = add nuw nsw i32 %6363, 4
  %6365 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6317
  %6366 = load i8, i8* %6365, align 1
  %6367 = zext i8 %6366 to i32
  %6368 = add nuw nsw i32 %6367, 8
  %6369 = sub nsw i32 %6323, %6314
  %6370 = sub nsw i32 %6325, %6320
  call void %6353(i8* %229, i8* %6360, i64 32, i64 %6294, i32 %6364, i32 %6368, i32 %6369, i32 %6370, i32 %6087, i32 %6088) #7
  %6371 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6358
  %6372 = shl nuw nsw i32 %6320, 5
  %6373 = zext i32 %6372 to i64
  %6374 = getelementptr inbounds i8, i8* %6371, i64 %6373
  %6375 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6354, i64 %6358
  %6376 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6375, align 8
  call void %6376(i8* %6295, i64 %6294, i8* %6374, i64 32, i32 8, i32 %6310, i32 %6316) #7
  %6377 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6378 = getelementptr inbounds i8, i8* %6331, i64 %6356
  %6379 = getelementptr inbounds i8, i8* %6378, i64 %6359
  call void %6377(i8* %229, i8* %6379, i64 32, i64 %6294, i32 %6364, i32 %6368, i32 %6369, i32 %6370, i32 %6087, i32 %6088) #7
  %6380 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6375, align 8
  call void %6380(i8* %6296, i64 %6294, i8* %6374, i64 32, i32 8, i32 %6310, i32 %6316) #7
  br label %7220

6381:                                             ; preds = %6348
  %6382 = zext i8 %6319 to i64
  %6383 = zext i8 %6313 to i64
  %6384 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6382, i64 %6383
  %6385 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6384, align 8
  call void %6385(i8* %6295, i64 %6294, i8* %6330, i64 %6294, i32 8, i32 %6310, i32 %6316) #7
  %6386 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6384, align 8
  call void %6386(i8* %6296, i64 %6294, i8* %6331, i64 %6294, i32 8, i32 %6310, i32 %6316) #7
  br label %7220

6387:                                             ; preds = %6287
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %244, i32 0) #7
  %6388 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6389 = mul nsw i64 %6294, %52
  %6390 = getelementptr inbounds i8, i8* %6300, i64 %6389
  %6391 = getelementptr inbounds i8, i8* %6390, i64 %6297
  call void %6388(i8* %6295, i64 %6294, i8* %6391, i64 %6294, i32 8, i32 0, i32 0) #7
  %6392 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6393 = getelementptr inbounds i8, i8* %6302, i64 %6389
  %6394 = getelementptr inbounds i8, i8* %6393, i64 %6297
  call void %6392(i8* %6296, i64 %6294, i8* %6394, i64 %6294, i32 8, i32 0, i32 0) #7
  br label %7220

6395:                                             ; preds = %5055
  %6396 = bitcast %struct.VP56mv* %5069 to i32*
  %6397 = load i32, i32* %6396, align 4
  %6398 = lshr i32 %6397, 16
  %6399 = trunc i32 %6398 to i16
  %6400 = load i8*, i8** %36, align 16
  %6401 = load i64, i64* %45, align 8
  %6402 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %5067, i64 0, i32 0, i32 0
  %6403 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6404 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6403, i64 0, i32 0, i64 0
  %6405 = load i8*, i8** %6404, align 8
  %6406 = icmp eq i32 %6397, 0
  br i1 %6406, label %6487, label %6407

6407:                                             ; preds = %6395
  %6408 = shl i32 %6397, 16
  %6409 = shl i32 %6397, 1
  %6410 = and i32 %6409, 6
  %6411 = zext i32 %6410 to i64
  %6412 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6411
  %6413 = load i8, i8* %6412, align 2
  %6414 = zext i8 %6413 to i32
  %6415 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 0, i32 1
  %6416 = load i16, i16* %6415, align 2
  %6417 = sext i16 %6416 to i32
  %6418 = shl nsw i32 %6417, 1
  %6419 = and i32 %6418, 6
  %6420 = zext i32 %6419 to i64
  %6421 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6420
  %6422 = load i8, i8* %6421, align 2
  %6423 = zext i8 %6422 to i32
  %6424 = ashr i32 %6408, 18
  %6425 = trunc i64 %5056 to i32
  %6426 = add nsw i32 %6424, %6425
  %6427 = ashr i32 %6417, 2
  %6428 = add nsw i32 %6427, %43
  %6429 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6420
  %6430 = load i8, i8* %6429, align 2
  %6431 = zext i8 %6430 to i32
  %6432 = add nsw i32 %6428, 11
  %6433 = add nsw i32 %6432, %6431
  %6434 = ashr i32 %6433, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6434, i32 0) #7
  %6435 = sext i32 %6428 to i64
  %6436 = mul nsw i64 %6401, %6435
  %6437 = sext i32 %6426 to i64
  %6438 = add nsw i64 %6436, %6437
  %6439 = getelementptr inbounds i8, i8* %6405, i64 %6438
  %6440 = icmp slt i32 %6426, %6414
  br i1 %6440, label %6457, label %6441

6441:                                             ; preds = %6407
  %6442 = add nsw i32 %5059, -8
  %6443 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6411
  %6444 = load i8, i8* %6443, align 2
  %6445 = zext i8 %6444 to i32
  %6446 = sub nsw i32 %6442, %6445
  %6447 = icmp sge i32 %6426, %6446
  %6448 = icmp slt i32 %6428, %6423
  %6449 = or i1 %6448, %6447
  br i1 %6449, label %6457, label %6450

6450:                                             ; preds = %6441
  %6451 = add nsw i32 %5062, -8
  %6452 = sub nsw i32 %6451, %6431
  %6453 = icmp slt i32 %6428, %6452
  br i1 %6453, label %6454, label %6457

6454:                                             ; preds = %6450
  %6455 = zext i8 %6422 to i64
  %6456 = zext i8 %6413 to i64
  br label %6480

6457:                                             ; preds = %6450, %6441, %6407
  %6458 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6459 = zext i8 %6422 to i64
  %6460 = mul i64 %6401, %6459
  %6461 = sub i64 0, %6460
  %6462 = getelementptr inbounds i8, i8* %6439, i64 %6461
  %6463 = zext i8 %6413 to i64
  %6464 = sub nsw i64 0, %6463
  %6465 = getelementptr inbounds i8, i8* %6462, i64 %6464
  %6466 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6411
  %6467 = load i8, i8* %6466, align 2
  %6468 = zext i8 %6467 to i32
  %6469 = add nuw nsw i32 %6468, 8
  %6470 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6420
  %6471 = load i8, i8* %6470, align 2
  %6472 = zext i8 %6471 to i32
  %6473 = add nuw nsw i32 %6472, 8
  %6474 = sub nsw i32 %6426, %6414
  %6475 = sub nsw i32 %6428, %6423
  call void %6458(i8* %229, i8* %6465, i64 32, i64 %6401, i32 %6469, i32 %6473, i32 %6474, i32 %6475, i32 %5059, i32 %5062) #7
  %6476 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6463
  %6477 = shl nuw nsw i32 %6423, 5
  %6478 = zext i32 %6477 to i64
  %6479 = getelementptr inbounds i8, i8* %6476, i64 %6478
  br label %6480

6480:                                             ; preds = %6457, %6454
  %6481 = phi i64 [ %6456, %6454 ], [ %6463, %6457 ]
  %6482 = phi i64 [ %6455, %6454 ], [ %6459, %6457 ]
  %6483 = phi i8* [ %6439, %6454 ], [ %6479, %6457 ]
  %6484 = phi i64 [ %6401, %6454 ], [ 32, %6457 ]
  %6485 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %6482, i64 %6481
  %6486 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6485, align 8
  call void %6486(i8* %6400, i64 %6401, i8* %6483, i64 %6484, i32 8, i32 %6410, i32 %6419) #7
  br label %6492

6487:                                             ; preds = %6395
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %6488 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %6489 = mul nsw i64 %6401, %44
  %6490 = getelementptr inbounds i8, i8* %6405, i64 %6489
  %6491 = getelementptr inbounds i8, i8* %6490, i64 %5056
  call void %6488(i8* %6400, i64 %6401, i8* %6491, i64 %6401, i32 8, i32 0, i32 0) #7
  br label %6492

6492:                                             ; preds = %6487, %6480
  %6493 = load i8, i8* %231, align 1
  %6494 = icmp eq i8 %6493, 3
  %6495 = and i32 %6397, 65528
  %6496 = and i16 %6399, -8
  %6497 = select i1 %6494, i16 %6496, i16 %6399
  %6498 = select i1 %6494, i32 %6495, i32 %6397
  %6499 = ashr exact i64 %5056, 1
  %6500 = shl nuw nsw i32 %5058, 3
  %6501 = shl nuw nsw i32 %5061, 3
  %6502 = load i8*, i8** %37, align 8
  %6503 = load i64, i64* %53, align 8
  %6504 = load i8*, i8** %38, align 16
  %6505 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6506 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6505, i64 0, i32 0, i64 1
  %6507 = load i8*, i8** %6506, align 8
  %6508 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6505, i64 0, i32 0, i64 2
  %6509 = load i8*, i8** %6508, align 8
  %6510 = zext i16 %6497 to i32
  %6511 = shl nuw i32 %6510, 16
  %6512 = and i32 %6498, 65535
  %6513 = or i32 %6511, %6512
  %6514 = icmp eq i32 %6513, 0
  br i1 %6514, label %6594, label %6515

6515:                                             ; preds = %6492
  %6516 = shl i32 %6498, 16
  %6517 = and i32 %6498, 7
  %6518 = zext i32 %6517 to i64
  %6519 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6518
  %6520 = load i8, i8* %6519, align 1
  %6521 = zext i8 %6520 to i32
  %6522 = sext i16 %6497 to i32
  %6523 = and i32 %6522, 7
  %6524 = zext i32 %6523 to i64
  %6525 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6524
  %6526 = load i8, i8* %6525, align 1
  %6527 = zext i8 %6526 to i32
  %6528 = ashr i32 %6516, 19
  %6529 = trunc i64 %6499 to i32
  %6530 = add nsw i32 %6528, %6529
  %6531 = ashr i32 %6522, 3
  %6532 = add nsw i32 %6531, %51
  %6533 = sext i32 %6532 to i64
  %6534 = mul nsw i64 %6503, %6533
  %6535 = sext i32 %6530 to i64
  %6536 = add nsw i64 %6534, %6535
  %6537 = getelementptr inbounds i8, i8* %6507, i64 %6536
  %6538 = getelementptr inbounds i8, i8* %6509, i64 %6536
  %6539 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6524
  %6540 = load i8, i8* %6539, align 1
  %6541 = zext i8 %6540 to i32
  %6542 = add nsw i32 %6532, 7
  %6543 = add nsw i32 %6542, %6541
  %6544 = ashr i32 %6543, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6544, i32 0) #7
  %6545 = icmp slt i32 %6530, %6521
  br i1 %6545, label %6559, label %6546

6546:                                             ; preds = %6515
  %6547 = add nsw i32 %6500, -4
  %6548 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6518
  %6549 = load i8, i8* %6548, align 1
  %6550 = zext i8 %6549 to i32
  %6551 = sub nsw i32 %6547, %6550
  %6552 = icmp sge i32 %6530, %6551
  %6553 = icmp slt i32 %6532, %6527
  %6554 = or i1 %6553, %6552
  br i1 %6554, label %6559, label %6555

6555:                                             ; preds = %6546
  %6556 = add nsw i32 %6501, -4
  %6557 = sub nsw i32 %6556, %6541
  %6558 = icmp slt i32 %6532, %6557
  br i1 %6558, label %6588, label %6559

6559:                                             ; preds = %6555, %6546, %6515
  %6560 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6561 = zext i8 %6526 to i64
  %6562 = mul i64 %6503, %6561
  %6563 = sub i64 0, %6562
  %6564 = getelementptr inbounds i8, i8* %6537, i64 %6563
  %6565 = zext i8 %6520 to i64
  %6566 = sub nsw i64 0, %6565
  %6567 = getelementptr inbounds i8, i8* %6564, i64 %6566
  %6568 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6518
  %6569 = load i8, i8* %6568, align 1
  %6570 = zext i8 %6569 to i32
  %6571 = add nuw nsw i32 %6570, 4
  %6572 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6524
  %6573 = load i8, i8* %6572, align 1
  %6574 = zext i8 %6573 to i32
  %6575 = add nuw nsw i32 %6574, 4
  %6576 = sub nsw i32 %6530, %6521
  %6577 = sub nsw i32 %6532, %6527
  call void %6560(i8* %229, i8* %6567, i64 32, i64 %6503, i32 %6571, i32 %6575, i32 %6576, i32 %6577, i32 %6500, i32 %6501) #7
  %6578 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6565
  %6579 = shl nuw nsw i32 %6527, 5
  %6580 = zext i32 %6579 to i64
  %6581 = getelementptr inbounds i8, i8* %6578, i64 %6580
  %6582 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6561, i64 %6565
  %6583 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6582, align 8
  call void %6583(i8* %6502, i64 %6503, i8* %6581, i64 32, i32 4, i32 %6517, i32 %6523) #7
  %6584 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6585 = getelementptr inbounds i8, i8* %6538, i64 %6563
  %6586 = getelementptr inbounds i8, i8* %6585, i64 %6566
  call void %6584(i8* %229, i8* %6586, i64 32, i64 %6503, i32 %6571, i32 %6575, i32 %6576, i32 %6577, i32 %6500, i32 %6501) #7
  %6587 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6582, align 8
  call void %6587(i8* %6504, i64 %6503, i8* %6581, i64 32, i32 4, i32 %6517, i32 %6523) #7
  br label %6602

6588:                                             ; preds = %6555
  %6589 = zext i8 %6526 to i64
  %6590 = zext i8 %6520 to i64
  %6591 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6589, i64 %6590
  %6592 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6591, align 8
  call void %6592(i8* %6502, i64 %6503, i8* %6537, i64 %6503, i32 4, i32 %6517, i32 %6523) #7
  %6593 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6591, align 8
  call void %6593(i8* %6504, i64 %6503, i8* %6538, i64 %6503, i32 4, i32 %6517, i32 %6523) #7
  br label %6602

6594:                                             ; preds = %6492
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %6595 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6596 = mul nsw i64 %6503, %52
  %6597 = getelementptr inbounds i8, i8* %6507, i64 %6596
  %6598 = getelementptr inbounds i8, i8* %6597, i64 %6499
  call void %6595(i8* %6502, i64 %6503, i8* %6598, i64 %6503, i32 4, i32 0, i32 0) #7
  %6599 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6600 = getelementptr inbounds i8, i8* %6509, i64 %6596
  %6601 = getelementptr inbounds i8, i8* %6600, i64 %6499
  call void %6599(i8* %6504, i64 %6503, i8* %6601, i64 %6503, i32 4, i32 0, i32 0) #7
  br label %6602

6602:                                             ; preds = %6594, %6588, %6559
  %6603 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1
  %6604 = bitcast %struct.VP56mv* %6603 to i32*
  %6605 = load i32, i32* %6604, align 4
  %6606 = lshr i32 %6605, 16
  %6607 = trunc i32 %6606 to i16
  %6608 = load i64, i64* %45, align 8
  %6609 = getelementptr inbounds i8, i8* %6400, i64 8
  %6610 = or i64 %5056, 8
  %6611 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6612 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6611, i64 0, i32 0, i64 0
  %6613 = load i8*, i8** %6612, align 8
  %6614 = icmp eq i32 %6605, 0
  br i1 %6614, label %6695, label %6615

6615:                                             ; preds = %6602
  %6616 = shl i32 %6605, 16
  %6617 = shl i32 %6605, 1
  %6618 = and i32 %6617, 6
  %6619 = zext i32 %6618 to i64
  %6620 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6619
  %6621 = load i8, i8* %6620, align 2
  %6622 = zext i8 %6621 to i32
  %6623 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 1, i32 1
  %6624 = load i16, i16* %6623, align 2
  %6625 = sext i16 %6624 to i32
  %6626 = shl nsw i32 %6625, 1
  %6627 = and i32 %6626, 6
  %6628 = zext i32 %6627 to i64
  %6629 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6628
  %6630 = load i8, i8* %6629, align 2
  %6631 = zext i8 %6630 to i32
  %6632 = ashr i32 %6616, 18
  %6633 = trunc i64 %6610 to i32
  %6634 = add nsw i32 %6632, %6633
  %6635 = ashr i32 %6625, 2
  %6636 = add nsw i32 %6635, %43
  %6637 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6628
  %6638 = load i8, i8* %6637, align 2
  %6639 = zext i8 %6638 to i32
  %6640 = add nsw i32 %6636, 11
  %6641 = add nsw i32 %6640, %6639
  %6642 = ashr i32 %6641, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6642, i32 0) #7
  %6643 = sext i32 %6636 to i64
  %6644 = mul nsw i64 %6608, %6643
  %6645 = sext i32 %6634 to i64
  %6646 = add nsw i64 %6644, %6645
  %6647 = getelementptr inbounds i8, i8* %6613, i64 %6646
  %6648 = icmp slt i32 %6634, %6622
  br i1 %6648, label %6665, label %6649

6649:                                             ; preds = %6615
  %6650 = add nsw i32 %5059, -8
  %6651 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6619
  %6652 = load i8, i8* %6651, align 2
  %6653 = zext i8 %6652 to i32
  %6654 = sub nsw i32 %6650, %6653
  %6655 = icmp sge i32 %6634, %6654
  %6656 = icmp slt i32 %6636, %6631
  %6657 = or i1 %6656, %6655
  br i1 %6657, label %6665, label %6658

6658:                                             ; preds = %6649
  %6659 = add nsw i32 %5062, -8
  %6660 = sub nsw i32 %6659, %6639
  %6661 = icmp slt i32 %6636, %6660
  br i1 %6661, label %6662, label %6665

6662:                                             ; preds = %6658
  %6663 = zext i8 %6630 to i64
  %6664 = zext i8 %6621 to i64
  br label %6688

6665:                                             ; preds = %6658, %6649, %6615
  %6666 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6667 = zext i8 %6630 to i64
  %6668 = mul i64 %6608, %6667
  %6669 = sub i64 0, %6668
  %6670 = getelementptr inbounds i8, i8* %6647, i64 %6669
  %6671 = zext i8 %6621 to i64
  %6672 = sub nsw i64 0, %6671
  %6673 = getelementptr inbounds i8, i8* %6670, i64 %6672
  %6674 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6619
  %6675 = load i8, i8* %6674, align 2
  %6676 = zext i8 %6675 to i32
  %6677 = add nuw nsw i32 %6676, 8
  %6678 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6628
  %6679 = load i8, i8* %6678, align 2
  %6680 = zext i8 %6679 to i32
  %6681 = add nuw nsw i32 %6680, 8
  %6682 = sub nsw i32 %6634, %6622
  %6683 = sub nsw i32 %6636, %6631
  call void %6666(i8* %229, i8* %6673, i64 32, i64 %6608, i32 %6677, i32 %6681, i32 %6682, i32 %6683, i32 %5059, i32 %5062) #7
  %6684 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6671
  %6685 = shl nuw nsw i32 %6631, 5
  %6686 = zext i32 %6685 to i64
  %6687 = getelementptr inbounds i8, i8* %6684, i64 %6686
  br label %6688

6688:                                             ; preds = %6665, %6662
  %6689 = phi i64 [ %6664, %6662 ], [ %6671, %6665 ]
  %6690 = phi i64 [ %6663, %6662 ], [ %6667, %6665 ]
  %6691 = phi i8* [ %6647, %6662 ], [ %6687, %6665 ]
  %6692 = phi i64 [ %6608, %6662 ], [ 32, %6665 ]
  %6693 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %6690, i64 %6689
  %6694 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6693, align 8
  call void %6694(i8* %6609, i64 %6608, i8* %6691, i64 %6692, i32 8, i32 %6618, i32 %6627) #7
  br label %6700

6695:                                             ; preds = %6602
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %6696 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %6697 = mul nsw i64 %6608, %44
  %6698 = getelementptr inbounds i8, i8* %6613, i64 %6697
  %6699 = getelementptr inbounds i8, i8* %6698, i64 %6610
  call void %6696(i8* %6609, i64 %6608, i8* %6699, i64 %6608, i32 8, i32 0, i32 0) #7
  br label %6700

6700:                                             ; preds = %6695, %6688
  %6701 = load i8, i8* %231, align 1
  %6702 = icmp eq i8 %6701, 3
  %6703 = and i32 %6605, 65528
  %6704 = and i16 %6607, -8
  %6705 = select i1 %6702, i16 %6704, i16 %6607
  %6706 = select i1 %6702, i32 %6703, i32 %6605
  %6707 = load i64, i64* %53, align 8
  %6708 = getelementptr inbounds i8, i8* %6502, i64 4
  %6709 = getelementptr inbounds i8, i8* %6504, i64 4
  %6710 = or i64 %6499, 4
  %6711 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6712 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6711, i64 0, i32 0, i64 1
  %6713 = load i8*, i8** %6712, align 8
  %6714 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6711, i64 0, i32 0, i64 2
  %6715 = load i8*, i8** %6714, align 8
  %6716 = zext i16 %6705 to i32
  %6717 = shl nuw i32 %6716, 16
  %6718 = and i32 %6706, 65535
  %6719 = or i32 %6717, %6718
  %6720 = icmp eq i32 %6719, 0
  br i1 %6720, label %6800, label %6721

6721:                                             ; preds = %6700
  %6722 = shl i32 %6706, 16
  %6723 = and i32 %6706, 7
  %6724 = zext i32 %6723 to i64
  %6725 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6724
  %6726 = load i8, i8* %6725, align 1
  %6727 = zext i8 %6726 to i32
  %6728 = sext i16 %6705 to i32
  %6729 = and i32 %6728, 7
  %6730 = zext i32 %6729 to i64
  %6731 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6730
  %6732 = load i8, i8* %6731, align 1
  %6733 = zext i8 %6732 to i32
  %6734 = ashr i32 %6722, 19
  %6735 = trunc i64 %6710 to i32
  %6736 = add nsw i32 %6734, %6735
  %6737 = ashr i32 %6728, 3
  %6738 = add nsw i32 %6737, %51
  %6739 = sext i32 %6738 to i64
  %6740 = mul nsw i64 %6707, %6739
  %6741 = sext i32 %6736 to i64
  %6742 = add nsw i64 %6740, %6741
  %6743 = getelementptr inbounds i8, i8* %6713, i64 %6742
  %6744 = getelementptr inbounds i8, i8* %6715, i64 %6742
  %6745 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6730
  %6746 = load i8, i8* %6745, align 1
  %6747 = zext i8 %6746 to i32
  %6748 = add nsw i32 %6738, 7
  %6749 = add nsw i32 %6748, %6747
  %6750 = ashr i32 %6749, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6750, i32 0) #7
  %6751 = icmp slt i32 %6736, %6727
  br i1 %6751, label %6765, label %6752

6752:                                             ; preds = %6721
  %6753 = add nsw i32 %6500, -4
  %6754 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6724
  %6755 = load i8, i8* %6754, align 1
  %6756 = zext i8 %6755 to i32
  %6757 = sub nsw i32 %6753, %6756
  %6758 = icmp sge i32 %6736, %6757
  %6759 = icmp slt i32 %6738, %6733
  %6760 = or i1 %6759, %6758
  br i1 %6760, label %6765, label %6761

6761:                                             ; preds = %6752
  %6762 = add nsw i32 %6501, -4
  %6763 = sub nsw i32 %6762, %6747
  %6764 = icmp slt i32 %6738, %6763
  br i1 %6764, label %6794, label %6765

6765:                                             ; preds = %6761, %6752, %6721
  %6766 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6767 = zext i8 %6732 to i64
  %6768 = mul i64 %6707, %6767
  %6769 = sub i64 0, %6768
  %6770 = getelementptr inbounds i8, i8* %6743, i64 %6769
  %6771 = zext i8 %6726 to i64
  %6772 = sub nsw i64 0, %6771
  %6773 = getelementptr inbounds i8, i8* %6770, i64 %6772
  %6774 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6724
  %6775 = load i8, i8* %6774, align 1
  %6776 = zext i8 %6775 to i32
  %6777 = add nuw nsw i32 %6776, 4
  %6778 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6730
  %6779 = load i8, i8* %6778, align 1
  %6780 = zext i8 %6779 to i32
  %6781 = add nuw nsw i32 %6780, 4
  %6782 = sub nsw i32 %6736, %6727
  %6783 = sub nsw i32 %6738, %6733
  call void %6766(i8* %229, i8* %6773, i64 32, i64 %6707, i32 %6777, i32 %6781, i32 %6782, i32 %6783, i32 %6500, i32 %6501) #7
  %6784 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6771
  %6785 = shl nuw nsw i32 %6733, 5
  %6786 = zext i32 %6785 to i64
  %6787 = getelementptr inbounds i8, i8* %6784, i64 %6786
  %6788 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6767, i64 %6771
  %6789 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6788, align 8
  call void %6789(i8* %6708, i64 %6707, i8* %6787, i64 32, i32 4, i32 %6723, i32 %6729) #7
  %6790 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6791 = getelementptr inbounds i8, i8* %6744, i64 %6769
  %6792 = getelementptr inbounds i8, i8* %6791, i64 %6772
  call void %6790(i8* %229, i8* %6792, i64 32, i64 %6707, i32 %6777, i32 %6781, i32 %6782, i32 %6783, i32 %6500, i32 %6501) #7
  %6793 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6788, align 8
  call void %6793(i8* %6709, i64 %6707, i8* %6787, i64 32, i32 4, i32 %6723, i32 %6729) #7
  br label %6808

6794:                                             ; preds = %6761
  %6795 = zext i8 %6732 to i64
  %6796 = zext i8 %6726 to i64
  %6797 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6795, i64 %6796
  %6798 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6797, align 8
  call void %6798(i8* %6708, i64 %6707, i8* %6743, i64 %6707, i32 4, i32 %6723, i32 %6729) #7
  %6799 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6797, align 8
  call void %6799(i8* %6709, i64 %6707, i8* %6744, i64 %6707, i32 4, i32 %6723, i32 %6729) #7
  br label %6808

6800:                                             ; preds = %6700
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %20, i32 0) #7
  %6801 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6802 = mul nsw i64 %6707, %52
  %6803 = getelementptr inbounds i8, i8* %6713, i64 %6802
  %6804 = getelementptr inbounds i8, i8* %6803, i64 %6710
  call void %6801(i8* %6708, i64 %6707, i8* %6804, i64 %6707, i32 4, i32 0, i32 0) #7
  %6805 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %6806 = getelementptr inbounds i8, i8* %6715, i64 %6802
  %6807 = getelementptr inbounds i8, i8* %6806, i64 %6710
  call void %6805(i8* %6709, i64 %6707, i8* %6807, i64 %6707, i32 4, i32 0, i32 0) #7
  br label %6808

6808:                                             ; preds = %6800, %6794, %6765
  %6809 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 2
  %6810 = bitcast %struct.VP56mv* %6809 to i32*
  %6811 = load i32, i32* %6810, align 4
  %6812 = lshr i32 %6811, 16
  %6813 = trunc i32 %6812 to i16
  %6814 = load i64, i64* %45, align 8
  %6815 = shl nsw i64 %6814, 3
  %6816 = getelementptr inbounds i8, i8* %6400, i64 %6815
  %6817 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6818 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6817, i64 0, i32 0, i64 0
  %6819 = load i8*, i8** %6818, align 8
  %6820 = icmp eq i32 %6811, 0
  br i1 %6820, label %6901, label %6821

6821:                                             ; preds = %6808
  %6822 = shl i32 %6811, 16
  %6823 = shl i32 %6811, 1
  %6824 = and i32 %6823, 6
  %6825 = zext i32 %6824 to i64
  %6826 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6825
  %6827 = load i8, i8* %6826, align 2
  %6828 = zext i8 %6827 to i32
  %6829 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 2, i32 1
  %6830 = load i16, i16* %6829, align 2
  %6831 = sext i16 %6830 to i32
  %6832 = shl nsw i32 %6831, 1
  %6833 = and i32 %6832, 6
  %6834 = zext i32 %6833 to i64
  %6835 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6834
  %6836 = load i8, i8* %6835, align 2
  %6837 = zext i8 %6836 to i32
  %6838 = ashr i32 %6822, 18
  %6839 = trunc i64 %5056 to i32
  %6840 = add nsw i32 %6838, %6839
  %6841 = ashr i32 %6831, 2
  %6842 = add nsw i32 %6841, %233
  %6843 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6834
  %6844 = load i8, i8* %6843, align 2
  %6845 = zext i8 %6844 to i32
  %6846 = add nsw i32 %6842, 11
  %6847 = add nsw i32 %6846, %6845
  %6848 = ashr i32 %6847, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6848, i32 0) #7
  %6849 = sext i32 %6842 to i64
  %6850 = mul nsw i64 %6814, %6849
  %6851 = sext i32 %6840 to i64
  %6852 = add nsw i64 %6850, %6851
  %6853 = getelementptr inbounds i8, i8* %6819, i64 %6852
  %6854 = icmp slt i32 %6840, %6828
  br i1 %6854, label %6871, label %6855

6855:                                             ; preds = %6821
  %6856 = add nsw i32 %5059, -8
  %6857 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6825
  %6858 = load i8, i8* %6857, align 2
  %6859 = zext i8 %6858 to i32
  %6860 = sub nsw i32 %6856, %6859
  %6861 = icmp sge i32 %6840, %6860
  %6862 = icmp slt i32 %6842, %6837
  %6863 = or i1 %6862, %6861
  br i1 %6863, label %6871, label %6864

6864:                                             ; preds = %6855
  %6865 = add nsw i32 %5062, -8
  %6866 = sub nsw i32 %6865, %6845
  %6867 = icmp slt i32 %6842, %6866
  br i1 %6867, label %6868, label %6871

6868:                                             ; preds = %6864
  %6869 = zext i8 %6836 to i64
  %6870 = zext i8 %6827 to i64
  br label %6894

6871:                                             ; preds = %6864, %6855, %6821
  %6872 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6873 = zext i8 %6836 to i64
  %6874 = mul i64 %6814, %6873
  %6875 = sub i64 0, %6874
  %6876 = getelementptr inbounds i8, i8* %6853, i64 %6875
  %6877 = zext i8 %6827 to i64
  %6878 = sub nsw i64 0, %6877
  %6879 = getelementptr inbounds i8, i8* %6876, i64 %6878
  %6880 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6825
  %6881 = load i8, i8* %6880, align 2
  %6882 = zext i8 %6881 to i32
  %6883 = add nuw nsw i32 %6882, 8
  %6884 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6834
  %6885 = load i8, i8* %6884, align 2
  %6886 = zext i8 %6885 to i32
  %6887 = add nuw nsw i32 %6886, 8
  %6888 = sub nsw i32 %6840, %6828
  %6889 = sub nsw i32 %6842, %6837
  call void %6872(i8* %229, i8* %6879, i64 32, i64 %6814, i32 %6883, i32 %6887, i32 %6888, i32 %6889, i32 %5059, i32 %5062) #7
  %6890 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6877
  %6891 = shl nuw nsw i32 %6837, 5
  %6892 = zext i32 %6891 to i64
  %6893 = getelementptr inbounds i8, i8* %6890, i64 %6892
  br label %6894

6894:                                             ; preds = %6871, %6868
  %6895 = phi i64 [ %6870, %6868 ], [ %6877, %6871 ]
  %6896 = phi i64 [ %6869, %6868 ], [ %6873, %6871 ]
  %6897 = phi i8* [ %6853, %6868 ], [ %6893, %6871 ]
  %6898 = phi i64 [ %6814, %6868 ], [ 32, %6871 ]
  %6899 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %6896, i64 %6895
  %6900 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6899, align 8
  call void %6900(i8* %6816, i64 %6814, i8* %6897, i64 %6898, i32 8, i32 %6824, i32 %6833) #7
  br label %6906

6901:                                             ; preds = %6808
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %235, i32 0) #7
  %6902 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %6903 = mul nsw i64 %6814, %236
  %6904 = getelementptr inbounds i8, i8* %6819, i64 %6903
  %6905 = getelementptr inbounds i8, i8* %6904, i64 %5056
  call void %6902(i8* %6816, i64 %6814, i8* %6905, i64 %6814, i32 8, i32 0, i32 0) #7
  br label %6906

6906:                                             ; preds = %6901, %6894
  %6907 = load i8, i8* %231, align 1
  %6908 = icmp eq i8 %6907, 3
  %6909 = and i32 %6811, 65528
  %6910 = and i16 %6813, -8
  %6911 = select i1 %6908, i16 %6910, i16 %6813
  %6912 = select i1 %6908, i32 %6909, i32 %6811
  %6913 = load i64, i64* %53, align 8
  %6914 = shl nsw i64 %6913, 2
  %6915 = getelementptr inbounds i8, i8* %6502, i64 %6914
  %6916 = getelementptr inbounds i8, i8* %6504, i64 %6914
  %6917 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %6918 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6917, i64 0, i32 0, i64 1
  %6919 = load i8*, i8** %6918, align 8
  %6920 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6917, i64 0, i32 0, i64 2
  %6921 = load i8*, i8** %6920, align 8
  %6922 = zext i16 %6911 to i32
  %6923 = shl nuw i32 %6922, 16
  %6924 = and i32 %6912, 65535
  %6925 = or i32 %6923, %6924
  %6926 = icmp eq i32 %6925, 0
  br i1 %6926, label %7006, label %6927

6927:                                             ; preds = %6906
  %6928 = shl i32 %6912, 16
  %6929 = and i32 %6912, 7
  %6930 = zext i32 %6929 to i64
  %6931 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6930
  %6932 = load i8, i8* %6931, align 1
  %6933 = zext i8 %6932 to i32
  %6934 = sext i16 %6911 to i32
  %6935 = and i32 %6934, 7
  %6936 = zext i32 %6935 to i64
  %6937 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %6936
  %6938 = load i8, i8* %6937, align 1
  %6939 = zext i8 %6938 to i32
  %6940 = ashr i32 %6928, 19
  %6941 = trunc i64 %6499 to i32
  %6942 = add nsw i32 %6940, %6941
  %6943 = ashr i32 %6934, 3
  %6944 = add nsw i32 %6943, %237
  %6945 = sext i32 %6944 to i64
  %6946 = mul nsw i64 %6913, %6945
  %6947 = sext i32 %6942 to i64
  %6948 = add nsw i64 %6946, %6947
  %6949 = getelementptr inbounds i8, i8* %6919, i64 %6948
  %6950 = getelementptr inbounds i8, i8* %6921, i64 %6948
  %6951 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6936
  %6952 = load i8, i8* %6951, align 1
  %6953 = zext i8 %6952 to i32
  %6954 = add nsw i32 %6944, 7
  %6955 = add nsw i32 %6954, %6953
  %6956 = ashr i32 %6955, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %6956, i32 0) #7
  %6957 = icmp slt i32 %6942, %6933
  br i1 %6957, label %6971, label %6958

6958:                                             ; preds = %6927
  %6959 = add nsw i32 %6500, -4
  %6960 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %6930
  %6961 = load i8, i8* %6960, align 1
  %6962 = zext i8 %6961 to i32
  %6963 = sub nsw i32 %6959, %6962
  %6964 = icmp sge i32 %6942, %6963
  %6965 = icmp slt i32 %6944, %6939
  %6966 = or i1 %6965, %6964
  br i1 %6966, label %6971, label %6967

6967:                                             ; preds = %6958
  %6968 = add nsw i32 %6501, -4
  %6969 = sub nsw i32 %6968, %6953
  %6970 = icmp slt i32 %6944, %6969
  br i1 %6970, label %7000, label %6971

6971:                                             ; preds = %6967, %6958, %6927
  %6972 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6973 = zext i8 %6938 to i64
  %6974 = mul i64 %6913, %6973
  %6975 = sub i64 0, %6974
  %6976 = getelementptr inbounds i8, i8* %6949, i64 %6975
  %6977 = zext i8 %6932 to i64
  %6978 = sub nsw i64 0, %6977
  %6979 = getelementptr inbounds i8, i8* %6976, i64 %6978
  %6980 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6930
  %6981 = load i8, i8* %6980, align 1
  %6982 = zext i8 %6981 to i32
  %6983 = add nuw nsw i32 %6982, 4
  %6984 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %6936
  %6985 = load i8, i8* %6984, align 1
  %6986 = zext i8 %6985 to i32
  %6987 = add nuw nsw i32 %6986, 4
  %6988 = sub nsw i32 %6942, %6933
  %6989 = sub nsw i32 %6944, %6939
  call void %6972(i8* %229, i8* %6979, i64 32, i64 %6913, i32 %6983, i32 %6987, i32 %6988, i32 %6989, i32 %6500, i32 %6501) #7
  %6990 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %6977
  %6991 = shl nuw nsw i32 %6939, 5
  %6992 = zext i32 %6991 to i64
  %6993 = getelementptr inbounds i8, i8* %6990, i64 %6992
  %6994 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %6973, i64 %6977
  %6995 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6994, align 8
  call void %6995(i8* %6915, i64 %6913, i8* %6993, i64 32, i32 4, i32 %6929, i32 %6935) #7
  %6996 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %6997 = getelementptr inbounds i8, i8* %6950, i64 %6975
  %6998 = getelementptr inbounds i8, i8* %6997, i64 %6978
  call void %6996(i8* %229, i8* %6998, i64 32, i64 %6913, i32 %6983, i32 %6987, i32 %6988, i32 %6989, i32 %6500, i32 %6501) #7
  %6999 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %6994, align 8
  call void %6999(i8* %6916, i64 %6913, i8* %6993, i64 32, i32 4, i32 %6929, i32 %6935) #7
  br label %7014

7000:                                             ; preds = %6967
  %7001 = zext i8 %6938 to i64
  %7002 = zext i8 %6932 to i64
  %7003 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %7001, i64 %7002
  %7004 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7003, align 8
  call void %7004(i8* %6915, i64 %6913, i8* %6949, i64 %6913, i32 4, i32 %6929, i32 %6935) #7
  %7005 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7003, align 8
  call void %7005(i8* %6916, i64 %6913, i8* %6950, i64 %6913, i32 4, i32 %6929, i32 %6935) #7
  br label %7014

7006:                                             ; preds = %6906
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %239, i32 0) #7
  %7007 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %7008 = mul nsw i64 %6913, %240
  %7009 = getelementptr inbounds i8, i8* %6919, i64 %7008
  %7010 = getelementptr inbounds i8, i8* %7009, i64 %6499
  call void %7007(i8* %6915, i64 %6913, i8* %7010, i64 %6913, i32 4, i32 0, i32 0) #7
  %7011 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %7012 = getelementptr inbounds i8, i8* %6921, i64 %7008
  %7013 = getelementptr inbounds i8, i8* %7012, i64 %6499
  call void %7011(i8* %6916, i64 %6913, i8* %7013, i64 %6913, i32 4, i32 0, i32 0) #7
  br label %7014

7014:                                             ; preds = %7006, %7000, %6971
  %7015 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 3
  %7016 = bitcast %struct.VP56mv* %7015 to i32*
  %7017 = load i32, i32* %7016, align 4
  %7018 = lshr i32 %7017, 16
  %7019 = trunc i32 %7018 to i16
  %7020 = load i64, i64* %45, align 8
  %7021 = shl nsw i64 %7020, 3
  %7022 = getelementptr inbounds i8, i8* %6609, i64 %7021
  %7023 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %7024 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7023, i64 0, i32 0, i64 0
  %7025 = load i8*, i8** %7024, align 8
  %7026 = icmp eq i32 %7017, 0
  br i1 %7026, label %7107, label %7027

7027:                                             ; preds = %7014
  %7028 = shl i32 %7017, 16
  %7029 = shl i32 %7017, 1
  %7030 = and i32 %7029, 6
  %7031 = zext i32 %7030 to i64
  %7032 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %7031
  %7033 = load i8, i8* %7032, align 2
  %7034 = zext i8 %7033 to i32
  %7035 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 10, i64 3, i32 1
  %7036 = load i16, i16* %7035, align 2
  %7037 = sext i16 %7036 to i32
  %7038 = shl nsw i32 %7037, 1
  %7039 = and i32 %7038, 6
  %7040 = zext i32 %7039 to i64
  %7041 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %7040
  %7042 = load i8, i8* %7041, align 2
  %7043 = zext i8 %7042 to i32
  %7044 = ashr i32 %7028, 18
  %7045 = trunc i64 %6610 to i32
  %7046 = add nsw i32 %7044, %7045
  %7047 = ashr i32 %7037, 2
  %7048 = add nsw i32 %7047, %233
  %7049 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %7040
  %7050 = load i8, i8* %7049, align 2
  %7051 = zext i8 %7050 to i32
  %7052 = add nsw i32 %7048, 11
  %7053 = add nsw i32 %7052, %7051
  %7054 = ashr i32 %7053, 4
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %7054, i32 0) #7
  %7055 = sext i32 %7048 to i64
  %7056 = mul nsw i64 %7020, %7055
  %7057 = sext i32 %7046 to i64
  %7058 = add nsw i64 %7056, %7057
  %7059 = getelementptr inbounds i8, i8* %7025, i64 %7058
  %7060 = icmp slt i32 %7046, %7034
  br i1 %7060, label %7077, label %7061

7061:                                             ; preds = %7027
  %7062 = add nsw i32 %5059, -8
  %7063 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %7031
  %7064 = load i8, i8* %7063, align 2
  %7065 = zext i8 %7064 to i32
  %7066 = sub nsw i32 %7062, %7065
  %7067 = icmp sge i32 %7046, %7066
  %7068 = icmp slt i32 %7048, %7043
  %7069 = or i1 %7068, %7067
  br i1 %7069, label %7077, label %7070

7070:                                             ; preds = %7061
  %7071 = add nsw i32 %5062, -8
  %7072 = sub nsw i32 %7071, %7051
  %7073 = icmp slt i32 %7048, %7072
  br i1 %7073, label %7074, label %7077

7074:                                             ; preds = %7070
  %7075 = zext i8 %7042 to i64
  %7076 = zext i8 %7033 to i64
  br label %7100

7077:                                             ; preds = %7070, %7061, %7027
  %7078 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %7079 = zext i8 %7042 to i64
  %7080 = mul i64 %7020, %7079
  %7081 = sub i64 0, %7080
  %7082 = getelementptr inbounds i8, i8* %7059, i64 %7081
  %7083 = zext i8 %7033 to i64
  %7084 = sub nsw i64 0, %7083
  %7085 = getelementptr inbounds i8, i8* %7082, i64 %7084
  %7086 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %7031
  %7087 = load i8, i8* %7086, align 2
  %7088 = zext i8 %7087 to i32
  %7089 = add nuw nsw i32 %7088, 8
  %7090 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %7040
  %7091 = load i8, i8* %7090, align 2
  %7092 = zext i8 %7091 to i32
  %7093 = add nuw nsw i32 %7092, 8
  %7094 = sub nsw i32 %7046, %7034
  %7095 = sub nsw i32 %7048, %7043
  call void %7078(i8* %229, i8* %7085, i64 32, i64 %7020, i32 %7089, i32 %7093, i32 %7094, i32 %7095, i32 %5059, i32 %5062) #7
  %7096 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %7083
  %7097 = shl nuw nsw i32 %7043, 5
  %7098 = zext i32 %7097 to i64
  %7099 = getelementptr inbounds i8, i8* %7096, i64 %7098
  br label %7100

7100:                                             ; preds = %7077, %7074
  %7101 = phi i64 [ %7076, %7074 ], [ %7083, %7077 ]
  %7102 = phi i64 [ %7075, %7074 ], [ %7079, %7077 ]
  %7103 = phi i8* [ %7059, %7074 ], [ %7099, %7077 ]
  %7104 = phi i64 [ %7020, %7074 ], [ 32, %7077 ]
  %7105 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 1, i64 %7102, i64 %7101
  %7106 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7105, align 8
  call void %7106(i8* %7022, i64 %7020, i8* %7103, i64 %7104, i32 8, i32 %7030, i32 %7039) #7
  br label %7112

7107:                                             ; preds = %7014
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %235, i32 0) #7
  %7108 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %230, align 8
  %7109 = mul nsw i64 %7020, %236
  %7110 = getelementptr inbounds i8, i8* %7025, i64 %7109
  %7111 = getelementptr inbounds i8, i8* %7110, i64 %6610
  call void %7108(i8* %7022, i64 %7020, i8* %7111, i64 %7020, i32 8, i32 0, i32 0) #7
  br label %7112

7112:                                             ; preds = %7107, %7100
  %7113 = load i8, i8* %231, align 1
  %7114 = icmp eq i8 %7113, 3
  %7115 = and i32 %7017, 65528
  %7116 = and i16 %7019, -8
  %7117 = select i1 %7114, i16 %7116, i16 %7019
  %7118 = select i1 %7114, i32 %7115, i32 %7017
  %7119 = load i64, i64* %53, align 8
  %7120 = shl nsw i64 %7119, 2
  %7121 = getelementptr inbounds i8, i8* %6708, i64 %7120
  %7122 = getelementptr inbounds i8, i8* %6709, i64 %7120
  %7123 = load %struct.AVFrame*, %struct.AVFrame** %6402, align 8
  %7124 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7123, i64 0, i32 0, i64 1
  %7125 = load i8*, i8** %7124, align 8
  %7126 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7123, i64 0, i32 0, i64 2
  %7127 = load i8*, i8** %7126, align 8
  %7128 = zext i16 %7117 to i32
  %7129 = shl nuw i32 %7128, 16
  %7130 = and i32 %7118, 65535
  %7131 = or i32 %7129, %7130
  %7132 = icmp eq i32 %7131, 0
  br i1 %7132, label %7212, label %7133

7133:                                             ; preds = %7112
  %7134 = shl i32 %7118, 16
  %7135 = and i32 %7118, 7
  %7136 = zext i32 %7135 to i64
  %7137 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %7136
  %7138 = load i8, i8* %7137, align 1
  %7139 = zext i8 %7138 to i32
  %7140 = sext i16 %7117 to i32
  %7141 = and i32 %7140, 7
  %7142 = zext i32 %7141 to i64
  %7143 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 0, i64 %7142
  %7144 = load i8, i8* %7143, align 1
  %7145 = zext i8 %7144 to i32
  %7146 = ashr i32 %7134, 19
  %7147 = trunc i64 %6710 to i32
  %7148 = add nsw i32 %7146, %7147
  %7149 = ashr i32 %7140, 3
  %7150 = add nsw i32 %7149, %237
  %7151 = sext i32 %7150 to i64
  %7152 = mul nsw i64 %7119, %7151
  %7153 = sext i32 %7148 to i64
  %7154 = add nsw i64 %7152, %7153
  %7155 = getelementptr inbounds i8, i8* %7125, i64 %7154
  %7156 = getelementptr inbounds i8, i8* %7127, i64 %7154
  %7157 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %7142
  %7158 = load i8, i8* %7157, align 1
  %7159 = zext i8 %7158 to i32
  %7160 = add nsw i32 %7150, 7
  %7161 = add nsw i32 %7160, %7159
  %7162 = ashr i32 %7161, 3
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %7162, i32 0) #7
  %7163 = icmp slt i32 %7148, %7139
  br i1 %7163, label %7177, label %7164

7164:                                             ; preds = %7133
  %7165 = add nsw i32 %6500, -4
  %7166 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 2, i64 %7136
  %7167 = load i8, i8* %7166, align 1
  %7168 = zext i8 %7167 to i32
  %7169 = sub nsw i32 %7165, %7168
  %7170 = icmp sge i32 %7148, %7169
  %7171 = icmp slt i32 %7150, %7145
  %7172 = or i1 %7171, %7170
  br i1 %7172, label %7177, label %7173

7173:                                             ; preds = %7164
  %7174 = add nsw i32 %6501, -4
  %7175 = sub nsw i32 %7174, %7159
  %7176 = icmp slt i32 %7150, %7175
  br i1 %7176, label %7206, label %7177

7177:                                             ; preds = %7173, %7164, %7133
  %7178 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %7179 = zext i8 %7144 to i64
  %7180 = mul i64 %7119, %7179
  %7181 = sub i64 0, %7180
  %7182 = getelementptr inbounds i8, i8* %7155, i64 %7181
  %7183 = zext i8 %7138 to i64
  %7184 = sub nsw i64 0, %7183
  %7185 = getelementptr inbounds i8, i8* %7182, i64 %7184
  %7186 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %7136
  %7187 = load i8, i8* %7186, align 1
  %7188 = zext i8 %7187 to i32
  %7189 = add nuw nsw i32 %7188, 4
  %7190 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* @subpel_idx, i64 0, i64 1, i64 %7142
  %7191 = load i8, i8* %7190, align 1
  %7192 = zext i8 %7191 to i32
  %7193 = add nuw nsw i32 %7192, 4
  %7194 = sub nsw i32 %7148, %7139
  %7195 = sub nsw i32 %7150, %7145
  call void %7178(i8* %229, i8* %7185, i64 32, i64 %7119, i32 %7189, i32 %7193, i32 %7194, i32 %7195, i32 %6500, i32 %6501) #7
  %7196 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 10, i64 %7183
  %7197 = shl nuw nsw i32 %7145, 5
  %7198 = zext i32 %7197 to i64
  %7199 = getelementptr inbounds i8, i8* %7196, i64 %7198
  %7200 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %7179, i64 %7183
  %7201 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7200, align 8
  call void %7201(i8* %7121, i64 %7119, i8* %7199, i64 32, i32 4, i32 %7135, i32 %7141) #7
  %7202 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %228, align 8
  %7203 = getelementptr inbounds i8, i8* %7156, i64 %7181
  %7204 = getelementptr inbounds i8, i8* %7203, i64 %7184
  call void %7202(i8* %229, i8* %7204, i64 32, i64 %7119, i32 %7189, i32 %7193, i32 %7194, i32 %7195, i32 %6500, i32 %6501) #7
  %7205 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7200, align 8
  call void %7205(i8* %7122, i64 %7119, i8* %7199, i64 32, i32 4, i32 %7135, i32 %7141) #7
  br label %7220

7206:                                             ; preds = %7173
  %7207 = zext i8 %7144 to i64
  %7208 = zext i8 %7138 to i64
  %7209 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 45, i64 2, i64 %7207, i64 %7208
  %7210 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7209, align 8
  call void %7210(i8* %7121, i64 %7119, i8* %7155, i64 %7119, i32 4, i32 %7135, i32 %7141) #7
  %7211 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %7209, align 8
  call void %7211(i8* %7122, i64 %7119, i8* %7156, i64 %7119, i32 4, i32 %7135, i32 %7141) #7
  br label %7220

7212:                                             ; preds = %7112
  call void @ff_thread_await_progress(%struct.ThreadFrame* %5068, i32 %239, i32 0) #7
  %7213 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %7214 = mul nsw i64 %7119, %240
  %7215 = getelementptr inbounds i8, i8* %7125, i64 %7214
  %7216 = getelementptr inbounds i8, i8* %7215, i64 %6710
  call void %7213(i8* %7121, i64 %7119, i8* %7216, i64 %7119, i32 4, i32 0, i32 0) #7
  %7217 = load void (i8*, i64, i8*, i64, i32, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32, i32)** %232, align 8
  %7218 = getelementptr inbounds i8, i8* %7127, i64 %7214
  %7219 = getelementptr inbounds i8, i8* %7218, i64 %6710
  call void %7217(i8* %7122, i64 %7119, i8* %7219, i64 %7119, i32 4, i32 0, i32 0) #7
  br label %7220

7220:                                             ; preds = %5566, %7212, %7206, %7177, %6387, %6381, %6352, %5974, %5968, %5939, %5277, %5271, %5242, %5055, %5054
  %7221 = load i32, i32* %278, align 4
  %7222 = icmp sgt i32 %7221, %2593
  br i1 %7222, label %7223, label %7268

7223:                                             ; preds = %7220
  %7224 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 0
  %7225 = load i16, i16* %7224, align 4
  %7226 = ashr i16 %7225, 2
  %7227 = sext i16 %7226 to i32
  %7228 = shl i32 %331, 4
  %7229 = or i32 %7228, 8
  %7230 = add i32 %7229, %7227
  %7231 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  %7232 = load i16, i16* %7231, align 2
  %7233 = ashr i16 %7232, 2
  %7234 = sext i16 %7233 to i32
  %7235 = add nsw i32 %43, %7234
  %7236 = load %struct.VP8Frame*, %struct.VP8Frame** %279, align 8
  %7237 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %7236, i64 0, i32 0, i32 0
  %7238 = load %struct.AVFrame*, %struct.AVFrame** %7237, align 8
  %7239 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7238, i64 0, i32 0, i64 0
  %7240 = add nsw i32 %7235, %370
  %7241 = load i64, i64* %45, align 8
  %7242 = trunc i64 %7241 to i32
  %7243 = mul i32 %7240, %7242
  %7244 = add i32 %7230, 64
  %7245 = add i32 %7244, %7243
  %7246 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %7247 = load i8*, i8** %7239, align 8
  %7248 = sext i32 %7245 to i64
  %7249 = getelementptr inbounds i8, i8* %7247, i64 %7248
  call void %7246(i8* %7249, i64 %7241, i32 4) #7
  %7250 = ashr i32 %7230, 1
  %7251 = ashr i32 %7235, 1
  %7252 = add nsw i32 %7251, %378
  %7253 = load i64, i64* %53, align 8
  %7254 = trunc i64 %7253 to i32
  %7255 = mul i32 %7252, %7254
  %7256 = add nsw i32 %7250, 64
  %7257 = add i32 %7256, %7255
  %7258 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %7259 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7238, i64 0, i32 0, i64 1
  %7260 = load i8*, i8** %7259, align 8
  %7261 = sext i32 %7257 to i64
  %7262 = getelementptr inbounds i8, i8* %7260, i64 %7261
  %7263 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7238, i64 0, i32 0, i64 2
  %7264 = bitcast i8** %7263 to i64*
  %7265 = load i64, i64* %7264, align 8
  %7266 = ptrtoint i8* %7260 to i64
  %7267 = sub i64 %7265, %7266
  call void %7258(i8* %7262, i64 %7267, i32 2) #7
  br label %7268

7268:                                             ; preds = %7223, %7220
  %7269 = load i8, i8* %2641, align 4
  %7270 = icmp eq i8 %7269, 0
  br i1 %7270, label %7271, label %7392

7271:                                             ; preds = %7268
  %7272 = load i8, i8* %4706, align 1
  %7273 = icmp eq i8 %7272, 4
  br i1 %7273, label %7318, label %7274

7274:                                             ; preds = %7271
  %7275 = load i8*, i8** %36, align 16
  br label %7276

7276:                                             ; preds = %7312, %7274
  %7277 = phi i64 [ 0, %7274 ], [ %7316, %7312 ]
  %7278 = phi i8* [ %7275, %7274 ], [ %7315, %7312 ]
  %7279 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 %7277, i64 0
  %7280 = bitcast i8* %7279 to i32*
  %7281 = load i32, i32* %7280, align 4
  %7282 = icmp eq i32 %7281, 0
  br i1 %7282, label %7312, label %7283

7283:                                             ; preds = %7276
  %7284 = and i32 %7281, -16843010
  %7285 = icmp eq i32 %7284, 0
  br i1 %7285, label %7308, label %7286

7286:                                             ; preds = %7283, %7302
  %7287 = phi i64 [ %7305, %7302 ], [ 0, %7283 ]
  %7288 = phi i32 [ %7303, %7302 ], [ %7281, %7283 ]
  %7289 = trunc i32 %7288 to i8
  switch i8 %7289, label %7296 [
    i8 1, label %7290
    i8 0, label %7302
  ]

7290:                                             ; preds = %7286
  %7291 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %7292 = shl nsw i64 %7287, 2
  %7293 = getelementptr inbounds i8, i8* %7278, i64 %7292
  %7294 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7277, i64 %7287, i64 0
  %7295 = load i64, i64* %45, align 8
  call void %7291(i8* %7293, i16* %7294, i64 %7295) #7
  br label %7302

7296:                                             ; preds = %7286
  %7297 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %7298 = shl nsw i64 %7287, 2
  %7299 = getelementptr inbounds i8, i8* %7278, i64 %7298
  %7300 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7277, i64 %7287, i64 0
  %7301 = load i64, i64* %45, align 8
  call void %7297(i8* %7299, i16* %7300, i64 %7301) #7
  br label %7302

7302:                                             ; preds = %7296, %7290, %7286
  %7303 = lshr i32 %7288, 8
  %7304 = icmp ne i32 %7303, 0
  %7305 = add nuw nsw i64 %7287, 1
  %7306 = icmp ult i64 %7305, 4
  %7307 = and i1 %7306, %7304
  br i1 %7307, label %7286, label %7312

7308:                                             ; preds = %7283
  %7309 = load void (i8*, [16 x i16]*, i64)*, void (i8*, [16 x i16]*, i64)** %282, align 8
  %7310 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7277, i64 0
  %7311 = load i64, i64* %45, align 8
  call void %7309(i8* %7278, [16 x i16]* %7310, i64 %7311) #7
  br label %7312

7312:                                             ; preds = %7302, %7308, %7276
  %7313 = load i64, i64* %45, align 8
  %7314 = shl nsw i64 %7313, 2
  %7315 = getelementptr inbounds i8, i8* %7278, i64 %7314
  %7316 = add nuw nsw i64 %7277, 1
  %7317 = icmp eq i64 %7316, 4
  br i1 %7317, label %7318, label %7276

7318:                                             ; preds = %7312, %7271
  br label %7319

7319:                                             ; preds = %7318, %7351
  %7320 = phi i64 [ %7326, %7351 ], [ 0, %7318 ]
  %7321 = add nuw nsw i64 %7320, 4
  %7322 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 2, i64 %7321, i64 0
  %7323 = bitcast i8* %7322 to i32*
  %7324 = load i32, i32* %7323, align 4
  %7325 = icmp eq i32 %7324, 0
  %7326 = add nuw nsw i64 %7320, 1
  br i1 %7325, label %7351, label %7327

7327:                                             ; preds = %7319
  %7328 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 %7326
  %7329 = load i8*, i8** %7328, align 8
  %7330 = and i32 %7324, -16843010
  %7331 = icmp eq i32 %7330, 0
  br i1 %7331, label %7347, label %7332

7332:                                             ; preds = %7327
  %7333 = trunc i32 %7324 to i8
  switch i8 %7333, label %7340 [
    i8 1, label %7336
    i8 0, label %7344
  ]

7334:                                             ; preds = %7344
  %7335 = trunc i32 %7345 to i8
  switch i8 %7335, label %7358 [
    i8 1, label %7353
    i8 0, label %7363
  ]

7336:                                             ; preds = %7332
  %7337 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %7338 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 0, i64 0
  %7339 = load i64, i64* %53, align 8
  call void %7337(i8* %7329, i16* %7338, i64 %7339) #7
  br label %7344

7340:                                             ; preds = %7332
  %7341 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %7342 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 0, i64 0
  %7343 = load i64, i64* %53, align 8
  call void %7341(i8* %7329, i16* %7342, i64 %7343) #7
  br label %7344

7344:                                             ; preds = %7340, %7336, %7332
  %7345 = lshr i32 %7324, 8
  %7346 = icmp eq i32 %7345, 0
  br i1 %7346, label %7351, label %7334

7347:                                             ; preds = %7327
  %7348 = load void (i8*, [16 x i16]*, i64)*, void (i8*, [16 x i16]*, i64)** %283, align 8
  %7349 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 0
  %7350 = load i64, i64* %53, align 8
  call void %7348(i8* %7329, [16 x i16]* %7349, i64 %7350) #7
  br label %7351

7351:                                             ; preds = %7387, %7382, %7380, %7377, %7363, %7347, %7344, %7319
  %7352 = icmp eq i64 %7326, 2
  br i1 %7352, label %7400, label %7319

7353:                                             ; preds = %7334
  %7354 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %7355 = getelementptr inbounds i8, i8* %7329, i64 4
  %7356 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 1, i64 0
  %7357 = load i64, i64* %53, align 8
  call void %7354(i8* %7355, i16* %7356, i64 %7357) #7
  br label %7363

7358:                                             ; preds = %7334
  %7359 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %7360 = getelementptr inbounds i8, i8* %7329, i64 4
  %7361 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 1, i64 0
  %7362 = load i64, i64* %53, align 8
  call void %7359(i8* %7360, i16* %7361, i64 %7362) #7
  br label %7363

7363:                                             ; preds = %7358, %7353, %7334
  %7364 = lshr i32 %7324, 16
  %7365 = icmp eq i32 %7364, 0
  br i1 %7365, label %7351, label %7366

7366:                                             ; preds = %7363
  %7367 = load i64, i64* %53, align 8
  %7368 = shl nsw i64 %7367, 2
  %7369 = getelementptr inbounds i8, i8* %7329, i64 %7368
  %7370 = trunc i32 %7364 to i8
  switch i8 %7370, label %7374 [
    i8 1, label %7371
    i8 0, label %7377
  ]

7371:                                             ; preds = %7366
  %7372 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %7373 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 2, i64 0
  call void %7372(i8* %7369, i16* %7373, i64 %7367) #7
  br label %7377

7374:                                             ; preds = %7366
  %7375 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %7376 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 2, i64 0
  call void %7375(i8* %7369, i16* %7376, i64 %7367) #7
  br label %7377

7377:                                             ; preds = %7374, %7371, %7366
  %7378 = lshr i32 %7324, 24
  %7379 = icmp eq i32 %7378, 0
  br i1 %7379, label %7351, label %7380

7380:                                             ; preds = %7377
  %7381 = trunc i32 %7378 to i8
  switch i8 %7381, label %7387 [
    i8 1, label %7382
    i8 0, label %7351
  ]

7382:                                             ; preds = %7380
  %7383 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %271, align 8
  %7384 = getelementptr inbounds i8, i8* %7369, i64 4
  %7385 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 3, i64 0
  %7386 = load i64, i64* %53, align 8
  call void %7383(i8* %7384, i16* %7385, i64 %7386) #7
  br label %7351

7387:                                             ; preds = %7380
  %7388 = load void (i8*, i16*, i64)*, void (i8*, i16*, i64)** %272, align 8
  %7389 = getelementptr inbounds i8, i8* %7369, i64 4
  %7390 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %15, i64 %16, i32 0, i64 %7321, i64 3, i64 0
  %7391 = load i64, i64* %53, align 8
  call void %7388(i8* %7389, i16* %7390, i64 %7391) #7
  br label %7351

7392:                                             ; preds = %7268
  store i64 0, i64* %281, align 8
  %7393 = load [9 x i8]*, [9 x i8]** %220, align 8
  %7394 = getelementptr inbounds [9 x i8], [9 x i8]* %7393, i64 %312, i64 0
  %7395 = bitcast i8* %7394 to i64*
  store i64 0, i64* %7395, align 1
  %7396 = load i8, i8* %4706, align 1
  switch i8 %7396, label %7397 [
    i8 4, label %7400
    i8 7, label %7400
  ]

7397:                                             ; preds = %7392
  store i8 0, i8* %221, align 8
  %7398 = load [9 x i8]*, [9 x i8]** %220, align 8
  %7399 = getelementptr inbounds [9 x i8], [9 x i8]* %7398, i64 %312, i64 8
  store i8 0, i8* %7399, align 1
  br label %7400

7400:                                             ; preds = %7351, %7397, %7392, %7392
  %7401 = load i8, i8* %248, align 1
  %7402 = icmp eq i8 %7401, 0
  br i1 %7402, label %7516, label %7403

7403:                                             ; preds = %7400
  %7404 = load %struct.VP8FilterStrength*, %struct.VP8FilterStrength** %284, align 16
  %7405 = load i8, i8* %173, align 4
  %7406 = icmp eq i8 %7405, 0
  br i1 %7406, label %7420, label %7407

7407:                                             ; preds = %7403
  %7408 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 5
  %7409 = load i8, i8* %7408, align 1
  %7410 = zext i8 %7409 to i64
  %7411 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 19, i32 5, i64 %7410
  %7412 = load i8, i8* %7411, align 1
  %7413 = sext i8 %7412 to i32
  %7414 = load i8, i8* %285, align 1
  %7415 = icmp eq i8 %7414, 0
  br i1 %7415, label %7416, label %7423

7416:                                             ; preds = %7407
  %7417 = load i8, i8* %286, align 1
  %7418 = zext i8 %7417 to i32
  %7419 = add nsw i32 %7418, %7413
  br label %7423

7420:                                             ; preds = %7403
  %7421 = load i8, i8* %286, align 1
  %7422 = zext i8 %7421 to i32
  br label %7423

7423:                                             ; preds = %7420, %7416, %7407
  %7424 = phi i32 [ %7413, %7407 ], [ %7419, %7416 ], [ %7422, %7420 ]
  %7425 = load i8, i8* %287, align 4
  %7426 = icmp eq i8 %7425, 0
  br i1 %7426, label %7441, label %7427

7427:                                             ; preds = %7423
  %7428 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 2
  %7429 = load i8, i8* %7428, align 2
  %7430 = zext i8 %7429 to i64
  %7431 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 26, i32 3, i64 %7430
  %7432 = load i8, i8* %7431, align 1
  %7433 = sext i8 %7432 to i32
  %7434 = add nsw i32 %7424, %7433
  %7435 = load i8, i8* %4706, align 1
  %7436 = zext i8 %7435 to i64
  %7437 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %13, i64 0, i32 26, i32 2, i64 %7436
  %7438 = load i8, i8* %7437, align 1
  %7439 = sext i8 %7438 to i32
  %7440 = add nsw i32 %7434, %7439
  br label %7441

7441:                                             ; preds = %7427, %7423
  %7442 = phi i32 [ %7440, %7427 ], [ %7424, %7423 ]
  %7443 = icmp ult i32 %7442, 64
  br i1 %7443, label %7448, label %7444

7444:                                             ; preds = %7441
  %7445 = ashr i32 %7442, 31
  %7446 = or i32 %7445, -64
  %7447 = xor i32 %7446, -1
  br label %7448

7448:                                             ; preds = %7444, %7441
  %7449 = phi i32 [ %7447, %7444 ], [ %7442, %7441 ]
  %7450 = load i8, i8* %288, align 2
  %7451 = icmp eq i8 %7450, 0
  br i1 %7451, label %7460, label %7452

7452:                                             ; preds = %7448
  %7453 = zext i8 %7450 to i32
  %7454 = add nuw nsw i32 %7453, 3
  %7455 = lshr i32 %7454, 2
  %7456 = ashr i32 %7449, %7455
  %7457 = sub nsw i32 9, %7453
  %7458 = icmp sgt i32 %7456, %7457
  %7459 = select i1 %7458, i32 %7457, i32 %7456
  br label %7460

7460:                                             ; preds = %7452, %7448
  %7461 = phi i32 [ %7459, %7452 ], [ %7449, %7448 ]
  %7462 = icmp sgt i32 %7461, 1
  %7463 = select i1 %7462, i32 %7461, i32 1
  %7464 = trunc i32 %7449 to i8
  %7465 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %7404, i64 %312, i32 0
  store i8 %7464, i8* %7465, align 1
  %7466 = trunc i32 %7463 to i8
  %7467 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %7404, i64 %312, i32 1
  store i8 %7466, i8* %7467, align 1
  %7468 = load i8, i8* %2641, align 4
  %7469 = icmp eq i8 %7468, 0
  br i1 %7469, label %7476, label %7470

7470:                                             ; preds = %7460
  %7471 = load i8, i8* %4706, align 1
  %7472 = icmp eq i8 %7471, 4
  br i1 %7472, label %7476, label %7473

7473:                                             ; preds = %7470
  %7474 = icmp eq i8 %7471, 7
  %7475 = zext i1 %7474 to i8
  br label %7476

7476:                                             ; preds = %7473, %7470, %7460
  %7477 = phi i8 [ 1, %7470 ], [ 1, %7460 ], [ %7475, %7473 ]
  %7478 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %7404, i64 %312, i32 2
  store i8 %7477, i8* %7478, align 1
  %7479 = load i8, i8* %248, align 1
  %7480 = icmp ne i8 %7479, 0
  %7481 = and i1 %289, %7480
  %7482 = and i1 %291, %7481
  br i1 %7482, label %7483, label %7516

7483:                                             ; preds = %7476
  %7484 = load i8, i8* %251, align 8
  %7485 = icmp eq i8 %7484, 0
  %7486 = load [32 x i8]*, [32 x i8]** %250, align 8
  %7487 = add nuw nsw i64 %312, 1
  %7488 = getelementptr inbounds [32 x i8], [32 x i8]* %7486, i64 %7487, i64 0
  %7489 = load i8*, i8** %36, align 16
  br i1 %7485, label %7496, label %7490

7490:                                             ; preds = %7483
  %7491 = load i64, i64* %45, align 8
  %7492 = mul nsw i64 %7491, 15
  %7493 = getelementptr inbounds i8, i8* %7489, i64 %7492
  %7494 = bitcast i8* %7488 to %struct.v.9*
  %7495 = bitcast i8* %7493 to %struct.v.9*
  call void asm "movaps   $1, %xmm0  \0A\09movaps   %xmm0, $0  \0A\09", "=*m,*m,~{xmm0},~{dirflag},~{fpsr},~{flags}"(%struct.v.9* %7494, %struct.v.9* %7495) #7, !srcloc !4
  br label %7516

7496:                                             ; preds = %7483
  %7497 = load i8*, i8** %37, align 8
  %7498 = load i8*, i8** %38, align 16
  %7499 = load i64, i64* %45, align 8
  %7500 = load i64, i64* %53, align 8
  %7501 = mul nsw i64 %7499, 15
  %7502 = getelementptr inbounds i8, i8* %7489, i64 %7501
  %7503 = bitcast i8* %7488 to %struct.v.9*
  %7504 = bitcast i8* %7502 to %struct.v.9*
  call void asm "movaps   $1, %xmm0  \0A\09movaps   %xmm0, $0  \0A\09", "=*m,*m,~{xmm0},~{dirflag},~{fpsr},~{flags}"(%struct.v.9* %7503, %struct.v.9* %7504) #7, !srcloc !4
  %7505 = mul nsw i64 %7500, 7
  %7506 = getelementptr inbounds i8, i8* %7497, i64 %7505
  %7507 = bitcast i8* %7506 to i64*
  %7508 = load i64, i64* %7507, align 8
  %7509 = getelementptr inbounds [32 x i8], [32 x i8]* %7486, i64 %7487, i64 16
  %7510 = bitcast i8* %7509 to i64*
  store i64 %7508, i64* %7510, align 8
  %7511 = getelementptr inbounds i8, i8* %7498, i64 %7505
  %7512 = bitcast i8* %7511 to i64*
  %7513 = load i64, i64* %7512, align 8
  %7514 = getelementptr inbounds [32 x i8], [32 x i8]* %7486, i64 %7487, i64 24
  %7515 = bitcast i8* %7514 to i64*
  store i64 %7513, i64* %7515, align 8
  br label %7516

7516:                                             ; preds = %7496, %7490, %7476, %7400
  %7517 = load i32, i32* %292, align 4
  %7518 = icmp sgt i32 %7517, %2593
  br i1 %7518, label %7519, label %7564

7519:                                             ; preds = %7516
  %7520 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 0
  %7521 = load i16, i16* %7520, align 4
  %7522 = ashr i16 %7521, 2
  %7523 = sext i16 %7522 to i32
  %7524 = shl i32 %331, 4
  %7525 = or i32 %7524, 8
  %7526 = add i32 %7525, %7523
  %7527 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 0, i32 9, i32 1
  %7528 = load i16, i16* %7527, align 2
  %7529 = ashr i16 %7528, 2
  %7530 = sext i16 %7529 to i32
  %7531 = add nsw i32 %43, %7530
  %7532 = load %struct.VP8Frame*, %struct.VP8Frame** %293, align 8
  %7533 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %7532, i64 0, i32 0, i32 0
  %7534 = load %struct.AVFrame*, %struct.AVFrame** %7533, align 8
  %7535 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7534, i64 0, i32 0, i64 0
  %7536 = add nsw i32 %7531, %370
  %7537 = load i64, i64* %45, align 8
  %7538 = trunc i64 %7537 to i32
  %7539 = mul i32 %7536, %7538
  %7540 = add i32 %7526, 64
  %7541 = add i32 %7540, %7539
  %7542 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %7543 = load i8*, i8** %7535, align 8
  %7544 = sext i32 %7541 to i64
  %7545 = getelementptr inbounds i8, i8* %7543, i64 %7544
  call void %7542(i8* %7545, i64 %7537, i32 4) #7
  %7546 = ashr i32 %7526, 1
  %7547 = ashr i32 %7531, 1
  %7548 = add nsw i32 %7547, %378
  %7549 = load i64, i64* %53, align 8
  %7550 = trunc i64 %7549 to i32
  %7551 = mul i32 %7548, %7550
  %7552 = add nsw i32 %7546, 64
  %7553 = add i32 %7552, %7551
  %7554 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %160, align 8
  %7555 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7534, i64 0, i32 0, i64 1
  %7556 = load i8*, i8** %7555, align 8
  %7557 = sext i32 %7553 to i64
  %7558 = getelementptr inbounds i8, i8* %7556, i64 %7557
  %7559 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %7534, i64 0, i32 0, i64 2
  %7560 = bitcast i8** %7559 to i64*
  %7561 = load i64, i64* %7560, align 8
  %7562 = ptrtoint i8* %7556 to i64
  %7563 = sub i64 %7561, %7562
  call void %7554(i8* %7558, i64 %7563, i32 2) #7
  br label %7564

7564:                                             ; preds = %7519, %7516
  %7565 = load <2 x i8*>, <2 x i8*>* %308, align 16
  %7566 = getelementptr i8, <2 x i8*> %7565, <2 x i64> <i64 16, i64 8>
  store <2 x i8*> %7566, <2 x i8*>* %309, align 16
  %7567 = load i8*, i8** %38, align 16
  %7568 = getelementptr inbounds i8, i8* %7567, i64 8
  store i8* %7568, i8** %38, align 16
  %7569 = load i32, i32* %143, align 8
  %7570 = add nsw i32 %7569, -64
  store i32 %7570, i32* %143, align 8
  %7571 = load i32, i32* %147, align 8
  %7572 = add nsw i32 %7571, -64
  store i32 %7572, i32* %147, align 8
  %7573 = load i16, i16* %21, align 8
  %7574 = zext i16 %7573 to i32
  %7575 = add nuw nsw i32 %7574, 1
  %7576 = zext i32 %7575 to i64
  %7577 = icmp eq i64 %312, %7576
  br i1 %7577, label %7578, label %7605

7578:                                             ; preds = %7564
  %7579 = add nuw nsw i32 %7574, 3
  %7580 = and i32 %7579, 65535
  %7581 = or i32 %7580, %294
  %7582 = load i32, i32* %295, align 8
  %7583 = icmp eq i32 %7582, 2
  %7584 = and i1 %296, %7583
  br i1 %299, label %7597, label %7585

7585:                                             ; preds = %7578
  br i1 %300, label %7590, label %7586

7586:                                             ; preds = %7585
  %7587 = load atomic i32, i32* %301 seq_cst, align 4
  %7588 = icmp sge i32 %7581, %7587
  %7589 = or i1 %7588, %302
  br i1 %7589, label %7594, label %7591

7590:                                             ; preds = %7585
  br i1 %152, label %7591, label %7594

7591:                                             ; preds = %7590, %7586
  %7592 = load atomic i32, i32* %303 seq_cst, align 4
  %7593 = icmp sge i32 %7581, %7592
  br label %7594

7594:                                             ; preds = %7591, %7590, %7586
  %7595 = phi i1 [ %7588, %7586 ], [ false, %7590 ], [ %7593, %7591 ]
  %7596 = zext i1 %7595 to i32
  br label %7597

7597:                                             ; preds = %7594, %7578
  %7598 = phi i32 [ %7596, %7594 ], [ 1, %7578 ]
  store atomic i32 %7581, i32* %18 seq_cst, align 16
  %7599 = icmp ne i32 %7598, 0
  %7600 = and i1 %7584, %7599
  br i1 %7600, label %7601, label %7630

7601:                                             ; preds = %7597
  %7602 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %304) #7
  %7603 = call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %305) #7
  %7604 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %304) #7
  br label %7630

7605:                                             ; preds = %7564
  %7606 = or i32 %294, %331
  %7607 = load i32, i32* %295, align 8
  %7608 = icmp eq i32 %7607, 2
  %7609 = and i1 %296, %7608
  br i1 %299, label %7622, label %7610

7610:                                             ; preds = %7605
  br i1 %300, label %7615, label %7611

7611:                                             ; preds = %7610
  %7612 = load atomic i32, i32* %301 seq_cst, align 4
  %7613 = icmp sge i32 %7606, %7612
  %7614 = or i1 %7613, %302
  br i1 %7614, label %7619, label %7616

7615:                                             ; preds = %7610
  br i1 %152, label %7616, label %7619

7616:                                             ; preds = %7615, %7611
  %7617 = load atomic i32, i32* %303 seq_cst, align 4
  %7618 = icmp sge i32 %7606, %7617
  br label %7619

7619:                                             ; preds = %7616, %7615, %7611
  %7620 = phi i1 [ %7613, %7611 ], [ false, %7615 ], [ %7618, %7616 ]
  %7621 = zext i1 %7620 to i32
  br label %7622

7622:                                             ; preds = %7619, %7605
  %7623 = phi i32 [ %7621, %7619 ], [ 1, %7605 ]
  store atomic i32 %7606, i32* %18 seq_cst, align 16
  %7624 = icmp ne i32 %7623, 0
  %7625 = and i1 %7609, %7624
  br i1 %7625, label %7626, label %7630

7626:                                             ; preds = %7622
  %7627 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %304) #7
  %7628 = call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %305) #7
  %7629 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %304) #7
  br label %7630

7630:                                             ; preds = %7626, %7622, %7601, %7597
  %7631 = add nuw nsw i64 %312, 1
  %7632 = add nsw i64 %311, 1
  %7633 = getelementptr inbounds %struct.VP8Macroblock, %struct.VP8Macroblock* %314, i64 1
  %7634 = load i16, i16* %21, align 8
  %7635 = zext i16 %7634 to i64
  %7636 = icmp ult i64 %7631, %7635
  br i1 %7636, label %310, label %7637

7637:                                             ; preds = %327, %7630, %73, %140
  %7638 = phi i32 [ -1094995529, %73 ], [ 0, %140 ], [ 0, %7630 ], [ -1094995529, %327 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #7
  ret i32 %7638
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp8_filter_mb_row(%struct.AVCodecContext* nocapture readonly, i8* nocapture readnone, i32, i32) #0 {
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.VP8Context**
  %7 = load %struct.VP8Context*, %struct.VP8Context** %6, align 8
  %8 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 0
  %9 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %8, align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10
  %12 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 7
  %13 = load atomic i32, i32* %12 seq_cst, align 16
  %14 = ashr i32 %13, 16
  %15 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 49
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 6
  %18 = load %struct.VP8Frame*, %struct.VP8Frame** %17, align 8
  %19 = getelementptr inbounds %struct.VP8Frame, %struct.VP8Frame* %18, i64 0, i32 0, i32 0
  %20 = load %struct.AVFrame*, %struct.AVFrame** %19, align 8
  %21 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %20, i64 0, i32 0, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = shl nsw i32 %14, 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 10
  %26 = load i64, i64* %25, align 8
  %27 = mul nsw i64 %26, %24
  %28 = getelementptr inbounds i8, i8* %22, i64 %27
  %29 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %20, i64 0, i32 0, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = shl nsw i32 %14, 3
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 11
  %34 = load i64, i64* %33, align 8
  %35 = mul nsw i64 %34, %32
  %36 = getelementptr inbounds i8, i8* %30, i64 %35
  %37 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %20, i64 0, i32 0, i64 2
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %35
  %40 = icmp eq i32 %14, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %4
  %42 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %8, align 8
  %43 = add i32 %2, -1
  %44 = add i32 %43, %16
  %45 = srem i32 %44, %16
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %42, i64 %46
  br label %48

48:                                               ; preds = %41, %4
  %49 = phi %struct.VP8ThreadData* [ %47, %41 ], [ %11, %4 ]
  %50 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 9
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nsw i32 %52, -1
  %54 = icmp eq i32 %14, %53
  br i1 %54, label %61, label %55

55:                                               ; preds = %48
  %56 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %8, align 8
  %57 = add nsw i32 %2, 1
  %58 = srem i32 %57, %16
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %56, i64 %59
  br label %61

61:                                               ; preds = %55, %48
  %62 = phi %struct.VP8ThreadData* [ %60, %55 ], [ %11, %48 ]
  %63 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 8
  %64 = load i16, i16* %63, align 8
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %320, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 11
  %68 = icmp ne %struct.VP8ThreadData* %49, %11
  %69 = add i32 %13, -65536
  %70 = and i32 %69, -65536
  %71 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %49, i64 0, i32 7
  %72 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %49, i64 0, i32 5
  %73 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 8
  %74 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %49, i64 0, i32 6
  %75 = icmp ne %struct.VP8ThreadData* %62, %11
  %76 = add i32 %13, 65536
  %77 = and i32 %76, -65536
  %78 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %62, i64 0, i32 7
  %79 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %62, i64 0, i32 5
  %80 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %62, i64 0, i32 6
  %81 = icmp eq i32 %16, 1
  %82 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 20, i32 0
  %83 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 27
  %84 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 15
  %85 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 14
  %86 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 12
  %87 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 7
  %88 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 9
  %89 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 11
  %90 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 13
  %91 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 6
  %92 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 8
  %93 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 10
  %94 = getelementptr inbounds %struct.VP8Context, %struct.VP8Context* %7, i64 0, i32 43, i32 12
  %95 = and i32 %13, -65536
  %96 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 148
  %97 = icmp sgt i32 %16, 1
  %98 = icmp eq %struct.VP8ThreadData* %62, null
  %99 = icmp eq %struct.VP8ThreadData* %49, null
  %100 = or i1 %99, %98
  %101 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %62, i64 0, i32 8
  %102 = xor i1 %68, true
  %103 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %49, i64 0, i32 8
  %104 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 5
  %105 = getelementptr inbounds %struct.VP8ThreadData, %struct.VP8ThreadData* %9, i64 %10, i32 6
  br label %106

106:                                              ; preds = %315, %66
  %107 = phi i64 [ 0, %66 ], [ %316, %315 ]
  %108 = phi i16 [ %64, %66 ], [ %317, %315 ]
  %109 = phi i8* [ %28, %66 ], [ %282, %315 ]
  %110 = phi i8* [ %36, %66 ], [ %283, %315 ]
  %111 = phi i8* [ %39, %66 ], [ %284, %315 ]
  %112 = load %struct.VP8FilterStrength*, %struct.VP8FilterStrength** %67, align 16
  br i1 %68, label %113, label %132

113:                                              ; preds = %106
  %114 = zext i16 %108 to i32
  %115 = trunc i64 %107 to i32
  %116 = add i32 %115, 4
  %117 = add i32 %116, %114
  %118 = and i32 %117, 65535
  %119 = or i32 %118, %70
  %120 = load atomic i32, i32* %71 seq_cst, align 16
  %121 = icmp slt i32 %120, %119
  br i1 %121, label %122, label %132

122:                                              ; preds = %113
  %123 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %72) #7
  store atomic i32 %119, i32* %73 seq_cst, align 4
  %124 = load atomic i32, i32* %71 seq_cst, align 16
  %125 = icmp slt i32 %124, %119
  br i1 %125, label %126, label %130

126:                                              ; preds = %122, %126
  %127 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %74, %union.pthread_mutex_t* %72) #7
  %128 = load atomic i32, i32* %71 seq_cst, align 16
  %129 = icmp slt i32 %128, %119
  br i1 %129, label %126, label %130

130:                                              ; preds = %126, %122
  store atomic i32 2147483647, i32* %73 seq_cst, align 4
  %131 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %72) #7
  br label %132

132:                                              ; preds = %130, %113, %106
  br i1 %75, label %133, label %152

133:                                              ; preds = %132
  %134 = load %struct.VP8ThreadData*, %struct.VP8ThreadData** %8, align 8
  %135 = icmp eq %struct.VP8ThreadData* %62, %134
  br i1 %135, label %152, label %136

136:                                              ; preds = %133
  %137 = trunc i64 %107 to i32
  %138 = add i32 %137, 1
  %139 = or i32 %138, %77
  %140 = load atomic i32, i32* %78 seq_cst, align 16
  %141 = icmp slt i32 %140, %139
  br i1 %141, label %142, label %152

142:                                              ; preds = %136
  %143 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %79) #7
  store atomic i32 %139, i32* %73 seq_cst, align 4
  %144 = load atomic i32, i32* %78 seq_cst, align 16
  %145 = icmp slt i32 %144, %139
  br i1 %145, label %146, label %150

146:                                              ; preds = %142, %146
  %147 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %80, %union.pthread_mutex_t* %79) #7
  %148 = load atomic i32, i32* %78 seq_cst, align 16
  %149 = icmp slt i32 %148, %139
  br i1 %149, label %146, label %150

150:                                              ; preds = %146, %142
  store atomic i32 2147483647, i32* %73 seq_cst, align 4
  %151 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %79) #7
  br label %152

152:                                              ; preds = %150, %136, %133, %132
  br i1 %81, label %153, label %182

153:                                              ; preds = %152
  %154 = load i8, i8* %82, align 8
  %155 = icmp eq i8 %154, 0
  %156 = load [32 x i8]*, [32 x i8]** %83, align 8
  %157 = add nuw nsw i64 %107, 1
  %158 = getelementptr inbounds [32 x i8], [32 x i8]* %156, i64 %157, i64 0
  %159 = load i64, i64* %25, align 8
  br i1 %155, label %165, label %160

160:                                              ; preds = %153
  %161 = mul nsw i64 %159, 15
  %162 = getelementptr inbounds i8, i8* %109, i64 %161
  %163 = bitcast i8* %158 to %struct.v.9*
  %164 = bitcast i8* %162 to %struct.v.9*
  tail call void asm "movaps   $1, %xmm0  \0A\09movaps   %xmm0, $0  \0A\09", "=*m,*m,~{xmm0},~{dirflag},~{fpsr},~{flags}"(%struct.v.9* %163, %struct.v.9* %164) #7, !srcloc !4
  br label %182

165:                                              ; preds = %153
  %166 = load i64, i64* %33, align 8
  %167 = mul nsw i64 %159, 15
  %168 = getelementptr inbounds i8, i8* %109, i64 %167
  %169 = bitcast i8* %158 to %struct.v.9*
  %170 = bitcast i8* %168 to %struct.v.9*
  tail call void asm "movaps   $1, %xmm0  \0A\09movaps   %xmm0, $0  \0A\09", "=*m,*m,~{xmm0},~{dirflag},~{fpsr},~{flags}"(%struct.v.9* %169, %struct.v.9* %170) #7, !srcloc !4
  %171 = mul nsw i64 %166, 7
  %172 = getelementptr inbounds i8, i8* %110, i64 %171
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds [32 x i8], [32 x i8]* %156, i64 %157, i64 16
  %176 = bitcast i8* %175 to i64*
  store i64 %174, i64* %176, align 8
  %177 = getelementptr inbounds i8, i8* %111, i64 %171
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds [32 x i8], [32 x i8]* %156, i64 %157, i64 24
  %181 = bitcast i8* %180 to i64*
  store i64 %179, i64* %181, align 8
  br label %182

182:                                              ; preds = %165, %160, %152
  %183 = load i8, i8* %82, align 8
  %184 = icmp eq i8 %183, 0
  %185 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %112, i64 %107, i32 0
  %186 = load i8, i8* %185, align 1
  br i1 %184, label %226, label %187

187:                                              ; preds = %182
  %188 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %112, i64 %107, i32 2
  %189 = load i8, i8* %188, align 1
  %190 = load i64, i64* %25, align 8
  %191 = icmp eq i8 %186, 0
  br i1 %191, label %281, label %192

192:                                              ; preds = %187
  %193 = zext i8 %186 to i32
  %194 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %112, i64 %107, i32 1
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = shl nuw nsw i32 %193, 1
  %198 = add nuw nsw i32 %197, %196
  %199 = add nuw nsw i32 %198, 4
  %200 = icmp eq i64 %107, 0
  br i1 %200, label %203, label %201

201:                                              ; preds = %192
  %202 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %84, align 8
  tail call void %202(i8* %109, i64 %190, i32 %199) #7
  br label %203

203:                                              ; preds = %201, %192
  %204 = icmp ne i8 %189, 0
  br i1 %204, label %205, label %212

205:                                              ; preds = %203
  %206 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %84, align 8
  %207 = getelementptr inbounds i8, i8* %109, i64 4
  tail call void %206(i8* %207, i64 %190, i32 %198) #7
  %208 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %84, align 8
  %209 = getelementptr inbounds i8, i8* %109, i64 8
  tail call void %208(i8* %209, i64 %190, i32 %198) #7
  %210 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %84, align 8
  %211 = getelementptr inbounds i8, i8* %109, i64 12
  tail call void %210(i8* %211, i64 %190, i32 %198) #7
  br label %212

212:                                              ; preds = %205, %203
  br i1 %40, label %215, label %213

213:                                              ; preds = %212
  %214 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %85, align 8
  tail call void %214(i8* %109, i64 %190, i32 %199) #7
  br label %215

215:                                              ; preds = %213, %212
  br i1 %204, label %216, label %281

216:                                              ; preds = %215
  %217 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %85, align 8
  %218 = shl nsw i64 %190, 2
  %219 = getelementptr inbounds i8, i8* %109, i64 %218
  tail call void %217(i8* %219, i64 %190, i32 %198) #7
  %220 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %85, align 8
  %221 = shl nsw i64 %190, 3
  %222 = getelementptr inbounds i8, i8* %109, i64 %221
  tail call void %220(i8* %222, i64 %190, i32 %198) #7
  %223 = load void (i8*, i64, i32)*, void (i8*, i64, i32)** %85, align 8
  %224 = mul nsw i64 %190, 12
  %225 = getelementptr inbounds i8, i8* %109, i64 %224
  tail call void %223(i8* %225, i64 %190, i32 %198) #7
  br label %281

226:                                              ; preds = %182
  %227 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %112, i64 %107, i32 1
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i32
  %230 = getelementptr inbounds %struct.VP8FilterStrength, %struct.VP8FilterStrength* %112, i64 %107, i32 2
  %231 = load i8, i8* %230, align 1
  %232 = load i64, i64* %25, align 8
  %233 = load i64, i64* %33, align 8
  %234 = icmp eq i8 %186, 0
  br i1 %234, label %281, label %235

235:                                              ; preds = %226
  %236 = zext i8 %186 to i32
  %237 = shl nuw nsw i32 %236, 1
  %238 = add nuw nsw i32 %237, %229
  %239 = add nuw nsw i32 %238, 4
  %240 = load i8, i8* %86, align 8
  %241 = zext i8 %240 to i64
  %242 = zext i8 %186 to i64
  %243 = getelementptr inbounds [2 x [64 x i8]], [2 x [64 x i8]]* @filter_mb.hev_thresh_lut, i64 0, i64 %241, i64 %242
  %244 = load i8, i8* %243, align 1
  %245 = zext i8 %244 to i32
  %246 = icmp eq i64 %107, 0
  br i1 %246, label %250, label %247

247:                                              ; preds = %235
  %248 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %87, align 8
  tail call void %248(i8* %109, i64 %232, i32 %239, i32 %229, i32 %245) #7
  %249 = load void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)** %88, align 8
  tail call void %249(i8* %110, i8* %111, i64 %233, i32 %239, i32 %229, i32 %245) #7
  br label %250

250:                                              ; preds = %247, %235
  %251 = icmp ne i8 %231, 0
  br i1 %251, label %252, label %262

252:                                              ; preds = %250
  %253 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %89, align 8
  %254 = getelementptr inbounds i8, i8* %109, i64 4
  tail call void %253(i8* %254, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %255 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %89, align 8
  %256 = getelementptr inbounds i8, i8* %109, i64 8
  tail call void %255(i8* %256, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %257 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %89, align 8
  %258 = getelementptr inbounds i8, i8* %109, i64 12
  tail call void %257(i8* %258, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %259 = load void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)** %90, align 8
  %260 = getelementptr inbounds i8, i8* %110, i64 4
  %261 = getelementptr inbounds i8, i8* %111, i64 4
  tail call void %259(i8* %260, i8* %261, i64 %233, i32 %238, i32 %229, i32 %245) #7
  br label %262

262:                                              ; preds = %252, %250
  br i1 %40, label %266, label %263

263:                                              ; preds = %262
  %264 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %91, align 8
  tail call void %264(i8* %109, i64 %232, i32 %239, i32 %229, i32 %245) #7
  %265 = load void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)** %92, align 8
  tail call void %265(i8* %110, i8* %111, i64 %233, i32 %239, i32 %229, i32 %245) #7
  br label %266

266:                                              ; preds = %263, %262
  br i1 %251, label %267, label %281

267:                                              ; preds = %266
  %268 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %93, align 8
  %269 = shl nsw i64 %232, 2
  %270 = getelementptr inbounds i8, i8* %109, i64 %269
  tail call void %268(i8* %270, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %271 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %93, align 8
  %272 = shl nsw i64 %232, 3
  %273 = getelementptr inbounds i8, i8* %109, i64 %272
  tail call void %271(i8* %273, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %274 = load void (i8*, i64, i32, i32, i32)*, void (i8*, i64, i32, i32, i32)** %93, align 8
  %275 = mul nsw i64 %232, 12
  %276 = getelementptr inbounds i8, i8* %109, i64 %275
  tail call void %274(i8* %276, i64 %232, i32 %238, i32 %229, i32 %245) #7
  %277 = load void (i8*, i8*, i64, i32, i32, i32)*, void (i8*, i8*, i64, i32, i32, i32)** %94, align 8
  %278 = shl nsw i64 %233, 2
  %279 = getelementptr inbounds i8, i8* %110, i64 %278
  %280 = getelementptr inbounds i8, i8* %111, i64 %278
  tail call void %277(i8* %279, i8* %280, i64 %233, i32 %238, i32 %229, i32 %245) #7
  br label %281

281:                                              ; preds = %267, %266, %226, %216, %215, %187
  %282 = getelementptr inbounds i8, i8* %109, i64 16
  %283 = getelementptr inbounds i8, i8* %110, i64 8
  %284 = getelementptr inbounds i8, i8* %111, i64 8
  %285 = load i16, i16* %63, align 8
  %286 = zext i16 %285 to i32
  %287 = trunc i64 %107 to i32
  %288 = add i32 %287, 3
  %289 = add i32 %288, %286
  %290 = and i32 %289, 65535
  %291 = or i32 %290, %95
  %292 = load i32, i32* %96, align 8
  %293 = icmp eq i32 %292, 2
  %294 = and i1 %97, %293
  br i1 %100, label %307, label %295

295:                                              ; preds = %281
  br i1 %75, label %296, label %300

296:                                              ; preds = %295
  %297 = load atomic i32, i32* %101 seq_cst, align 4
  %298 = icmp sge i32 %291, %297
  %299 = or i1 %298, %102
  br i1 %299, label %304, label %301

300:                                              ; preds = %295
  br i1 %68, label %301, label %304

301:                                              ; preds = %300, %296
  %302 = load atomic i32, i32* %103 seq_cst, align 4
  %303 = icmp sge i32 %291, %302
  br label %304

304:                                              ; preds = %301, %300, %296
  %305 = phi i1 [ %298, %296 ], [ false, %300 ], [ %303, %301 ]
  %306 = zext i1 %305 to i32
  br label %307

307:                                              ; preds = %304, %281
  %308 = phi i32 [ %306, %304 ], [ 1, %281 ]
  store atomic i32 %291, i32* %12 seq_cst, align 16
  %309 = icmp ne i32 %308, 0
  %310 = and i1 %294, %309
  br i1 %310, label %311, label %315

311:                                              ; preds = %307
  %312 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %104) #7
  %313 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %105) #7
  %314 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %104) #7
  br label %315

315:                                              ; preds = %311, %307
  %316 = add nuw nsw i64 %107, 1
  %317 = load i16, i16* %63, align 8
  %318 = zext i16 %317 to i64
  %319 = icmp ult i64 %316, %318
  br i1 %319, label %106, label %320

320:                                              ; preds = %315, %61
  ret void
}

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #3

declare %struct.AVFrame* @av_frame_alloc() local_unnamed_addr #3

declare i32 @ff_thread_ref_frame(%struct.ThreadFrame*, %struct.ThreadFrame*) local_unnamed_addr #3

declare %struct.AVBufferRef* @av_buffer_ref(%struct.AVBufferRef*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }
attributes #9 = { noreturn nounwind }
attributes #10 = { cold nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 2236041, i32 2236062, i32 2236095, i32 2236128, i32 2236161, i32 2236194}
!3 = !{i32 2114709, i32 2114733, i32 2114773}
!4 = !{i32 2114377, i32 2114401, i32 2114441}
