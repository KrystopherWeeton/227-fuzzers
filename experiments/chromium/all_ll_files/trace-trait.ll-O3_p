; ModuleID = '../../v8/src/heap/cppgc/trace-trait.cc'
source_filename = "../../v8/src/heap/cppgc/trace-trait.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cppgc::internal::GCInfoTable" = type { %"class.v8::PageAllocator"*, %"struct.cppgc::internal::GCInfo"*, i8*, i16, i16, %"class.v8::base::Mutex" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"struct.cppgc::internal::GCInfo" = type { void (i8*)*, void (%"class.cppgc::Visitor"*, i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.cppgc::Visitor" = type opaque
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.cppgc::internal::BasePage" = type <{ %"class.cppgc::internal::HeapBase"*, %"class.cppgc::internal::BaseSpace"*, i8, [7 x i8] }>
%"class.cppgc::internal::HeapBase" = type opaque
%"class.cppgc::internal::BaseSpace" = type opaque
%"class.cppgc::internal::LargePage" = type { %"class.cppgc::internal::BasePage.base", i64 }
%"class.cppgc::internal::BasePage.base" = type <{ %"class.cppgc::internal::HeapBase"*, %"class.cppgc::internal::BaseSpace"*, i8 }>
%"class.cppgc::internal::HeapObjectHeader" = type { i32, i16, i16 }
%"class.cppgc::internal::ObjectStartBitmap" = type { i8*, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [2048 x i8] }

@_ZN5cppgc8internal17GlobalGCInfoTable13global_table_E = external local_unnamed_addr global %"class.cppgc::internal::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, void (%"class.cppgc::Visitor"*, i8*)* } @_ZN5cppgc8internal30TraceTraitFromInnerAddressImpl18GetTraceDescriptorEPKv(i8*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint i8* %0 to i64
  %3 = and i64 %2, -131072
  %4 = or i64 %3, 4096
  %5 = inttoptr i64 %4 to %"class.cppgc::internal::BasePage"*
  %6 = getelementptr inbounds %"class.cppgc::internal::BasePage", %"class.cppgc::internal::BasePage"* %5, i64 0, i32 2
  %7 = load i8, i8* %6, align 16
  %8 = icmp eq i8 %7, 1
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = inttoptr i64 %4 to %"class.cppgc::internal::LargePage"*
  %11 = tail call %"class.cppgc::internal::HeapObjectHeader"* @_ZNK5cppgc8internal9LargePage12ObjectHeaderEv(%"class.cppgc::internal::LargePage"* nonnull %10) #3
  br label %58

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.cppgc::internal::BasePage", %"class.cppgc::internal::BasePage"* %5, i64 1, i32 1
  %14 = bitcast %"class.cppgc::internal::BaseSpace"** %13 to %"class.cppgc::internal::ObjectStartBitmap"*
  %15 = bitcast %"class.cppgc::internal::BaseSpace"** %13 to i8**
  %16 = bitcast %"class.cppgc::internal::BaseSpace"** %13 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %2, %17
  %19 = lshr i64 %18, 3
  %20 = lshr i64 %18, 6
  %21 = getelementptr inbounds %"class.cppgc::internal::ObjectStartBitmap", %"class.cppgc::internal::ObjectStartBitmap"* %14, i64 0, i32 1, i32 0, i64 %20
  %22 = load atomic i8, i8* %21 acquire, align 1
  %23 = trunc i64 %19 to i32
  %24 = and i32 %23, 7
  %25 = shl i32 2, %24
  %26 = trunc i32 %25 to i8
  %27 = add i8 %26, -1
  %28 = and i8 %27, %22
  %29 = icmp eq i8 %28, 0
  %30 = icmp ne i64 %20, 0
  %31 = and i1 %30, %29
  br i1 %31, label %32, label %40

32:                                               ; preds = %12, %32
  %33 = phi i64 [ %34, %32 ], [ %20, %12 ]
  %34 = add nsw i64 %33, -1
  %35 = getelementptr inbounds %"class.cppgc::internal::ObjectStartBitmap", %"class.cppgc::internal::ObjectStartBitmap"* %14, i64 0, i32 1, i32 0, i64 %34
  %36 = load atomic i8, i8* %35 acquire, align 1
  %37 = icmp eq i8 %36, 0
  %38 = icmp ne i64 %34, 0
  %39 = and i1 %38, %37
  br i1 %39, label %32, label %40

40:                                               ; preds = %32, %12
  %41 = phi i64 [ %20, %12 ], [ %34, %32 ]
  %42 = phi i8 [ %28, %12 ], [ %36, %32 ]
  %43 = phi i1 [ %29, %12 ], [ %37, %32 ]
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = zext i8 %42 to i32
  %46 = tail call i32 @llvm.ctlz.i32(i32 %45, i1 true) #3, !range !2
  %47 = add nsw i32 %46, -24
  %48 = sext i32 %47 to i64
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi i64 [ %48, %44 ], [ 8, %40 ]
  %51 = shl i64 %41, 3
  %52 = or i64 %51, 7
  %53 = sub i64 %52, %50
  %54 = shl i64 %53, 3
  %55 = load i8*, i8** %15, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 %54
  %57 = bitcast i8* %56 to %"class.cppgc::internal::HeapObjectHeader"*
  br label %58

58:                                               ; preds = %9, %49
  %59 = phi %"class.cppgc::internal::HeapObjectHeader"* [ %11, %9 ], [ %57, %49 ]
  %60 = getelementptr inbounds %"class.cppgc::internal::HeapObjectHeader", %"class.cppgc::internal::HeapObjectHeader"* %59, i64 1
  %61 = bitcast %"class.cppgc::internal::HeapObjectHeader"* %60 to i8*
  %62 = getelementptr inbounds %"class.cppgc::internal::HeapObjectHeader", %"class.cppgc::internal::HeapObjectHeader"* %59, i64 0, i32 1
  %63 = load atomic i16, i16* %62 acquire, align 2
  %64 = lshr i16 %63, 2
  %65 = load %"class.cppgc::internal::GCInfoTable"*, %"class.cppgc::internal::GCInfoTable"** @_ZN5cppgc8internal17GlobalGCInfoTable13global_table_E, align 8
  %66 = getelementptr inbounds %"class.cppgc::internal::GCInfoTable", %"class.cppgc::internal::GCInfoTable"* %65, i64 0, i32 1
  %67 = load %"struct.cppgc::internal::GCInfo"*, %"struct.cppgc::internal::GCInfo"** %66, align 8
  %68 = zext i16 %64 to i64
  %69 = getelementptr inbounds %"struct.cppgc::internal::GCInfo", %"struct.cppgc::internal::GCInfo"* %67, i64 %68, i32 1
  %70 = load void (%"class.cppgc::Visitor"*, i8*)*, void (%"class.cppgc::Visitor"*, i8*)** %69, align 8
  %71 = insertvalue { i8*, void (%"class.cppgc::Visitor"*, i8*)* } undef, i8* %61, 0
  %72 = insertvalue { i8*, void (%"class.cppgc::Visitor"*, i8*)* } %71, void (%"class.cppgc::Visitor"*, i8*)* %70, 1
  ret { i8*, void (%"class.cppgc::Visitor"*, i8*)* } %72
}

declare %"class.cppgc::internal::HeapObjectHeader"* @_ZNK5cppgc8internal9LargePage12ObjectHeaderEv(%"class.cppgc::internal::LargePage"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 24, i32 33}
