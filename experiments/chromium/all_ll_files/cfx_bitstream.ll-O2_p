; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_bitstream.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_bitstream.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_BitStream = type { i32, i32, %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }

@_ZN13CFX_BitStreamC1EN6pdfium4spanIKhEE = hidden unnamed_addr alias void (%class.CFX_BitStream*, %"class.pdfium::span"*), void (%class.CFX_BitStream*, %"class.pdfium::span"*)* @_ZN13CFX_BitStreamC2EN6pdfium4spanIKhEE
@_ZN13CFX_BitStreamD1Ev = hidden unnamed_addr alias void (%class.CFX_BitStream*), void (%class.CFX_BitStream*)* @_ZN13CFX_BitStreamD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_BitStreamC2EN6pdfium4spanIKhEE(%class.CFX_BitStream* nocapture, %"class.pdfium::span"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 0
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = shl i32 %7, 3
  store i32 %8, i32* %4, align 4
  %9 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 2
  %10 = bitcast %"class.pdfium::span"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.fxcrt::UnownedPtr"* %9 to i64*
  store i64 %11, i64* %12, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN13CFX_BitStreamD2Ev(%class.CFX_BitStream* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFX_BitStream9ByteAlignEv(%class.CFX_BitStream* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, 7
  %5 = and i32 %4, -8
  store i32 %5, i32* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN13CFX_BitStream7GetBitsEj(%class.CFX_BitStream* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, %1
  br i1 %5, label %190, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %4, %1
  %10 = icmp ugt i32 %8, %9
  br i1 %10, label %190, label %11

11:                                               ; preds = %6
  %12 = and i32 %8, 7
  %13 = lshr i32 %8, 3
  %14 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %0, i64 0, i32 2, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = zext i32 %13 to i64
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i32 %1, 1
  br i1 %19, label %20, label %28

20:                                               ; preds = %11
  %21 = zext i8 %18 to i32
  %22 = xor i32 %12, 7
  %23 = shl i32 1, %22
  %24 = and i32 %23, %21
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = add i32 %8, 1
  store i32 %27, i32* %7, align 8
  br label %190

28:                                               ; preds = %11
  %29 = icmp eq i32 %12, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %28
  %31 = sub nuw nsw i32 8, %12
  %32 = icmp ult i32 %31, %1
  br i1 %32, label %33, label %41

33:                                               ; preds = %30
  %34 = sub i32 %1, %31
  %35 = zext i8 %18 to i32
  %36 = shl nsw i32 -1, %31
  %37 = xor i32 %36, -1
  %38 = and i32 %35, %37
  %39 = shl i32 %38, %34
  %40 = add nuw nsw i32 %13, 1
  br label %48

41:                                               ; preds = %30
  %42 = zext i8 %18 to i32
  %43 = lshr i32 255, %12
  %44 = and i32 %43, %42
  %45 = sub i32 %31, %1
  %46 = lshr i32 %44, %45
  %47 = add i32 %8, %1
  store i32 %47, i32* %7, align 8
  br label %190

48:                                               ; preds = %33, %28
  %49 = phi i32 [ %13, %28 ], [ %40, %33 ]
  %50 = phi i32 [ %1, %28 ], [ %34, %33 ]
  %51 = phi i32 [ 0, %28 ], [ %39, %33 ]
  %52 = icmp ugt i32 %50, 7
  br i1 %52, label %53, label %174

53:                                               ; preds = %48
  %54 = zext i32 %49 to i64
  %55 = add i32 %50, -8
  %56 = lshr i32 %55, 3
  %57 = add nuw nsw i32 %56, %49
  %58 = lshr i32 %55, 3
  %59 = add nuw nsw i32 %58, 1
  %60 = zext i32 %59 to i64
  %61 = icmp ult i32 %59, 8
  br i1 %61, label %154, label %62

62:                                               ; preds = %53
  %63 = and i64 %60, 1073741816
  %64 = add nuw nsw i64 %63, %54
  %65 = trunc i64 %63 to i32
  %66 = mul i32 %65, -8
  %67 = add i32 %50, %66
  %68 = insertelement <4 x i32> undef, i32 %50, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = add <4 x i32> %69, <i32 0, i32 -8, i32 -16, i32 -24>
  %71 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %51, i32 0
  %72 = add nsw i64 %63, -8
  %73 = lshr exact i64 %72, 3
  %74 = add nuw nsw i64 %73, 1
  %75 = and i64 %74, 1
  %76 = icmp eq i64 %72, 0
  br i1 %76, label %120, label %77

77:                                               ; preds = %62
  %78 = sub nuw nsw i64 %74, %75
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi i64 [ 0, %77 ], [ %116, %79 ]
  %81 = phi <4 x i32> [ %71, %77 ], [ %114, %79 ]
  %82 = phi <4 x i32> [ zeroinitializer, %77 ], [ %115, %79 ]
  %83 = phi <4 x i32> [ %70, %77 ], [ %117, %79 ]
  %84 = phi i64 [ %78, %77 ], [ %118, %79 ]
  %85 = add i64 %80, %54
  %86 = add <4 x i32> %83, <i32 -8, i32 -8, i32 -8, i32 -8>
  %87 = add <4 x i32> %83, <i32 -40, i32 -40, i32 -40, i32 -40>
  %88 = getelementptr inbounds i8, i8* %15, i64 %85
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1
  %91 = getelementptr inbounds i8, i8* %88, i64 4
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %90 to <4 x i32>
  %95 = zext <4 x i8> %93 to <4 x i32>
  %96 = shl <4 x i32> %94, %86
  %97 = shl <4 x i32> %95, %87
  %98 = or <4 x i32> %96, %81
  %99 = or <4 x i32> %97, %82
  %100 = or i64 %80, 8
  %101 = add i64 %100, %54
  %102 = add <4 x i32> %83, <i32 -72, i32 -72, i32 -72, i32 -72>
  %103 = add <4 x i32> %83, <i32 -104, i32 -104, i32 -104, i32 -104>
  %104 = getelementptr inbounds i8, i8* %15, i64 %101
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = getelementptr inbounds i8, i8* %104, i64 4
  %108 = bitcast i8* %107 to <4 x i8>*
  %109 = load <4 x i8>, <4 x i8>* %108, align 1
  %110 = zext <4 x i8> %106 to <4 x i32>
  %111 = zext <4 x i8> %109 to <4 x i32>
  %112 = shl <4 x i32> %110, %102
  %113 = shl <4 x i32> %111, %103
  %114 = or <4 x i32> %112, %98
  %115 = or <4 x i32> %113, %99
  %116 = add i64 %80, 16
  %117 = add <4 x i32> %83, <i32 -128, i32 -128, i32 -128, i32 -128>
  %118 = add i64 %84, -2
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %79, !llvm.loop !2

120:                                              ; preds = %79, %62
  %121 = phi <4 x i32> [ undef, %62 ], [ %114, %79 ]
  %122 = phi <4 x i32> [ undef, %62 ], [ %115, %79 ]
  %123 = phi i64 [ 0, %62 ], [ %116, %79 ]
  %124 = phi <4 x i32> [ %71, %62 ], [ %114, %79 ]
  %125 = phi <4 x i32> [ zeroinitializer, %62 ], [ %115, %79 ]
  %126 = phi <4 x i32> [ %70, %62 ], [ %117, %79 ]
  %127 = icmp eq i64 %75, 0
  br i1 %127, label %144, label %128

128:                                              ; preds = %120
  %129 = add i64 %123, %54
  %130 = getelementptr inbounds i8, i8* %15, i64 %129
  %131 = getelementptr inbounds i8, i8* %130, i64 4
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = add <4 x i32> %126, <i32 -40, i32 -40, i32 -40, i32 -40>
  %136 = shl <4 x i32> %134, %135
  %137 = or <4 x i32> %136, %125
  %138 = bitcast i8* %130 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = add <4 x i32> %126, <i32 -8, i32 -8, i32 -8, i32 -8>
  %142 = shl <4 x i32> %140, %141
  %143 = or <4 x i32> %142, %124
  br label %144

144:                                              ; preds = %120, %128
  %145 = phi <4 x i32> [ %121, %120 ], [ %143, %128 ]
  %146 = phi <4 x i32> [ %122, %120 ], [ %137, %128 ]
  %147 = or <4 x i32> %146, %145
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %149 = or <4 x i32> %147, %148
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %151 = or <4 x i32> %149, %150
  %152 = extractelement <4 x i32> %151, i32 0
  %153 = icmp eq i64 %63, %60
  br i1 %153, label %170, label %154

154:                                              ; preds = %144, %53
  %155 = phi i64 [ %54, %53 ], [ %64, %144 ]
  %156 = phi i32 [ %51, %53 ], [ %152, %144 ]
  %157 = phi i32 [ %50, %53 ], [ %67, %144 ]
  br label %158

158:                                              ; preds = %154, %158
  %159 = phi i64 [ %163, %158 ], [ %155, %154 ]
  %160 = phi i32 [ %168, %158 ], [ %156, %154 ]
  %161 = phi i32 [ %162, %158 ], [ %157, %154 ]
  %162 = add i32 %161, -8
  %163 = add nuw nsw i64 %159, 1
  %164 = getelementptr inbounds i8, i8* %15, i64 %159
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = shl i32 %166, %162
  %168 = or i32 %167, %160
  %169 = icmp ugt i32 %162, 7
  br i1 %169, label %158, label %170, !llvm.loop !4

170:                                              ; preds = %158, %144
  %171 = phi i32 [ %152, %144 ], [ %168, %158 ]
  %172 = and i32 %55, 7
  %173 = add i32 %57, 1
  br label %174

174:                                              ; preds = %170, %48
  %175 = phi i32 [ %49, %48 ], [ %173, %170 ]
  %176 = phi i32 [ %50, %48 ], [ %172, %170 ]
  %177 = phi i32 [ %51, %48 ], [ %171, %170 ]
  %178 = icmp eq i32 %176, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %174
  %180 = zext i32 %175 to i64
  %181 = getelementptr inbounds i8, i8* %15, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = sub nuw nsw i32 8, %176
  %185 = lshr i32 %183, %184
  %186 = or i32 %185, %177
  br label %187

187:                                              ; preds = %174, %179
  %188 = phi i32 [ %186, %179 ], [ %177, %174 ]
  %189 = add i32 %8, %1
  store i32 %189, i32* %7, align 8
  br label %190

190:                                              ; preds = %41, %20, %187, %2, %6
  %191 = phi i32 [ 0, %6 ], [ 0, %2 ], [ %26, %20 ], [ %188, %187 ], [ %46, %41 ]
  ret i32 %191
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
