; ModuleID = '../../third_party/ffmpeg/libavutil/parseutils.c'
source_filename = "../../third_party/ffmpeg/libavutil/parseutils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VideoSizeAbbr = type { i8*, i32, i32 }
%struct.VideoRateAbbr = type { i8*, %struct.AVRational }
%struct.AVRational = type { i32, i32 }
%struct.ColorEntry = type { i8*, [3 x i8] }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }

@.str = private unnamed_addr constant [8 x i8] c"%d:%d%c\00", align 1
@video_size_abbrs = internal unnamed_addr constant [53 x %struct.VideoSizeAbbr] [%struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i32 720, i32 480 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), i32 720, i32 576 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 352, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 352, i32 288 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i32 640, i32 480 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i32 768, i32 576 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i32 352, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i32 352, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i32 128, i32 96 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 176, i32 144 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i32 352, i32 288 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i32 704, i32 576 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i32 1408, i32 1152 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i32 160, i32 120 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i32 320, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i32 640, i32 480 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 800, i32 600 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i32 0, i32 0), i32 1024, i32 768 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i32 1600, i32 1200 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i32 2048, i32 1536 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i32 1280, i32 1024 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i32 2560, i32 2048 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i32 0, i32 0), i32 5120, i32 4096 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i32 852, i32 480 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i32 1366, i32 768 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i32 0, i32 0), i32 1600, i32 1024 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0), i32 1920, i32 1200 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0), i32 2560, i32 1600 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 3200, i32 2048 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i32 3840, i32 2400 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i32 0, i32 0), i32 6400, i32 4096 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), i32 7680, i32 4800 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i32 0, i32 0), i32 320, i32 200 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i32 0, i32 0), i32 640, i32 350 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), i32 852, i32 480 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 1280, i32 720 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i32 0, i32 0), i32 1920, i32 1080 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2048, i32 1080 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0), i32 2048, i32 1080 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), i32 1998, i32 1080 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), i32 2048, i32 858 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 4096, i32 2160 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i32 0, i32 0), i32 4096, i32 2160 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i32 0, i32 0), i32 3996, i32 2160 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i32 4096, i32 1716 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i32 0, i32 0), i32 640, i32 360 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i32 240, i32 160 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i32 400, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i32 0, i32 0), i32 432, i32 240 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0), i32 480, i32 320 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i32 960, i32 540 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i32 0, i32 0), i32 3840, i32 2160 }, %struct.VideoSizeAbbr { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), i32 7680, i32 4320 }], align 16
@video_rate_abbrs = internal unnamed_addr constant [8 x %struct.VideoRateAbbr] [%struct.VideoRateAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), %struct.AVRational { i32 30000, i32 1001 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), %struct.AVRational { i32 25, i32 1 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), %struct.AVRational { i32 30000, i32 1001 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), %struct.AVRational { i32 25, i32 1 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), %struct.AVRational { i32 30000, i32 1001 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), %struct.AVRational { i32 25, i32 1 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), %struct.AVRational { i32 24, i32 1 } }, %struct.VideoRateAbbr { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), %struct.AVRational { i32 24000, i32 1001 } }], align 16
@.str.1 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"bikeshed\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"0123456789ABCDEFabcdef\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"Invalid 0xRRGGBB[AA] color string: '%s'\0A\00", align 1
@color_table = internal constant [140 x %struct.ColorEntry] [%struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0), [3 x i8] c"\F0\F8\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.72, i32 0, i32 0), [3 x i8] c"\FA\EB\D7" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0), [3 x i8] c"\00\FF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.74, i32 0, i32 0), [3 x i8] c"\7F\FF\D4" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i32 0, i32 0), [3 x i8] c"\F0\FF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), [3 x i8] c"\F5\F5\DC" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0), [3 x i8] c"\FF\E4\C4" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0), [3 x i8] zeroinitializer }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.79, i32 0, i32 0), [3 x i8] c"\FF\EB\CD" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), [3 x i8] c"\00\00\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0), [3 x i8] c"\8A+\E2" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82, i32 0, i32 0), [3 x i8] c"\A5**" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), [3 x i8] c"\DE\B8\87" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), [3 x i8] c"_\9E\A0" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0), [3 x i8] c"\7F\FF\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i32 0, i32 0), [3 x i8] c"\D2i\1E" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0), [3 x i8] c"\FF\7FP" }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.88, i32 0, i32 0), [3 x i8] c"d\95\ED" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89, i32 0, i32 0), [3 x i8] c"\FF\F8\DC" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), [3 x i8] c"\DC\14<" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i32 0, i32 0), [3 x i8] c"\00\FF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.92, i32 0, i32 0), [3 x i8] c"\00\00\8B" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i32 0, i32 0), [3 x i8] c"\00\8B\8B" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.94, i32 0, i32 0), [3 x i8] c"\B8\86\0B" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i32 0, i32 0), [3 x i8] c"\A9\A9\A9" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i32 0, i32 0), [3 x i8] c"\00d\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.97, i32 0, i32 0), [3 x i8] c"\BD\B7k" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.98, i32 0, i32 0), [3 x i8] c"\8B\00\8B" }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.99, i32 0, i32 0), [3 x i8] c"Uk/" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.100, i32 0, i32 0), [3 x i8] c"\FF\8C\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.101, i32 0, i32 0), [3 x i8] c"\992\CC" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102, i32 0, i32 0), [3 x i8] c"\8B\00\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i32 0, i32 0), [3 x i8] c"\E9\96z" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i32 0, i32 0), [3 x i8] c"\8F\BC\8F" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.105, i32 0, i32 0), [3 x i8] c"H=\8B" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), [3 x i8] c"/OO" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), [3 x i8] c"\00\CE\D1" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.108, i32 0, i32 0), [3 x i8] c"\94\00\D3" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), [3 x i8] c"\FF\14\93" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), [3 x i8] c"\00\BF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.111, i32 0, i32 0), [3 x i8] c"iii" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.112, i32 0, i32 0), [3 x i8] c"\1E\90\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.113, i32 0, i32 0), [3 x i8] c"\B2\22\22" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.114, i32 0, i32 0), [3 x i8] c"\FF\FA\F0" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.115, i32 0, i32 0), [3 x i8] c"\22\8B\22" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.116, i32 0, i32 0), [3 x i8] c"\FF\00\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.117, i32 0, i32 0), [3 x i8] c"\DC\DC\DC" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.118, i32 0, i32 0), [3 x i8] c"\F8\F8\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.119, i32 0, i32 0), [3 x i8] c"\FF\D7\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.120, i32 0, i32 0), [3 x i8] c"\DA\A5 " }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), [3 x i8] c"\80\80\80" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.122, i32 0, i32 0), [3 x i8] c"\00\80\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.123, i32 0, i32 0), [3 x i8] c"\AD\FF/" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124, i32 0, i32 0), [3 x i8] c"\F0\FF\F0" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.125, i32 0, i32 0), [3 x i8] c"\FFi\B4" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i32 0, i32 0), [3 x i8] c"\CD\5C\5C" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.127, i32 0, i32 0), [3 x i8] c"K\00\82" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.128, i32 0, i32 0), [3 x i8] c"\FF\FF\F0" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.129, i32 0, i32 0), [3 x i8] c"\F0\E6\8C" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0), [3 x i8] c"\E6\E6\FA" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.131, i32 0, i32 0), [3 x i8] c"\FF\F0\F5" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132, i32 0, i32 0), [3 x i8] c"|\FC\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.133, i32 0, i32 0), [3 x i8] c"\FF\FA\CD" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134, i32 0, i32 0), [3 x i8] c"\AD\D8\E6" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i32 0, i32 0), [3 x i8] c"\F0\80\80" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136, i32 0, i32 0), [3 x i8] c"\E0\FF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.137, i32 0, i32 0), [3 x i8] c"\FA\FA\D2" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i32 0, i32 0), [3 x i8] c"\90\EE\90" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i32 0, i32 0), [3 x i8] c"\D3\D3\D3" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.140, i32 0, i32 0), [3 x i8] c"\FF\B6\C1" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i32 0, i32 0), [3 x i8] c"\FF\A0z" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.142, i32 0, i32 0), [3 x i8] c" \B2\AA" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.143, i32 0, i32 0), [3 x i8] c"\87\CE\FA" }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.144, i32 0, i32 0), [3 x i8] c"w\88\99" }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.145, i32 0, i32 0), [3 x i8] c"\B0\C4\DE" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.146, i32 0, i32 0), [3 x i8] c"\FF\FF\E0" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.147, i32 0, i32 0), [3 x i8] c"\00\FF\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.148, i32 0, i32 0), [3 x i8] c"2\CD2" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.149, i32 0, i32 0), [3 x i8] c"\FA\F0\E6" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.150, i32 0, i32 0), [3 x i8] c"\FF\00\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.151, i32 0, i32 0), [3 x i8] c"\80\00\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.152, i32 0, i32 0), [3 x i8] c"f\CD\AA" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.153, i32 0, i32 0), [3 x i8] c"\00\00\CD" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154, i32 0, i32 0), [3 x i8] c"\BAU\D3" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.155, i32 0, i32 0), [3 x i8] c"\93p\D8" }, %struct.ColorEntry { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.156, i32 0, i32 0), [3 x i8] c"<\B3q" }, %struct.ColorEntry { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.157, i32 0, i32 0), [3 x i8] c"{h\EE" }, %struct.ColorEntry { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.158, i32 0, i32 0), [3 x i8] c"\00\FA\9A" }, %struct.ColorEntry { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.159, i32 0, i32 0), [3 x i8] c"H\D1\CC" }, %struct.ColorEntry { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), [3 x i8] c"\C7\15\85" }, %struct.ColorEntry { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.161, i32 0, i32 0), [3 x i8] c"\19\19p" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.162, i32 0, i32 0), [3 x i8] c"\F5\FF\FA" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.163, i32 0, i32 0), [3 x i8] c"\FF\E4\E1" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.164, i32 0, i32 0), [3 x i8] c"\FF\E4\B5" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.165, i32 0, i32 0), [3 x i8] c"\FF\DE\AD" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166, i32 0, i32 0), [3 x i8] c"\00\00\80" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.167, i32 0, i32 0), [3 x i8] c"\FD\F5\E6" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.168, i32 0, i32 0), [3 x i8] c"\80\80\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.169, i32 0, i32 0), [3 x i8] c"k\8E#" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), [3 x i8] c"\FF\A5\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.171, i32 0, i32 0), [3 x i8] c"\FFE\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.172, i32 0, i32 0), [3 x i8] c"\DAp\D6" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.173, i32 0, i32 0), [3 x i8] c"\EE\E8\AA" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174, i32 0, i32 0), [3 x i8] c"\98\FB\98" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.175, i32 0, i32 0), [3 x i8] c"\AF\EE\EE" }, %struct.ColorEntry { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.176, i32 0, i32 0), [3 x i8] c"\D8p\93" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.177, i32 0, i32 0), [3 x i8] c"\FF\EF\D5" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.178, i32 0, i32 0), [3 x i8] c"\FF\DA\B9" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.179, i32 0, i32 0), [3 x i8] c"\CD\85?" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.180, i32 0, i32 0), [3 x i8] c"\FF\C0\CB" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.181, i32 0, i32 0), [3 x i8] c"\DD\A0\DD" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.182, i32 0, i32 0), [3 x i8] c"\B0\E0\E6" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.183, i32 0, i32 0), [3 x i8] c"\80\00\80" }, %struct.ColorEntry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.184, i32 0, i32 0), [3 x i8] c"\FF\00\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185, i32 0, i32 0), [3 x i8] c"\BC\8F\8F" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.186, i32 0, i32 0), [3 x i8] c"Ai\E1" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.187, i32 0, i32 0), [3 x i8] c"\8BE\13" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.188, i32 0, i32 0), [3 x i8] c"\FA\80r" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.189, i32 0, i32 0), [3 x i8] c"\F4\A4`" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.190, i32 0, i32 0), [3 x i8] c".\8BW" }, %struct.ColorEntry { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.191, i32 0, i32 0), [3 x i8] c"\FF\F5\EE" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.192, i32 0, i32 0), [3 x i8] c"\A0R-" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.193, i32 0, i32 0), [3 x i8] c"\C0\C0\C0" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.194, i32 0, i32 0), [3 x i8] c"\87\CE\EB" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.195, i32 0, i32 0), [3 x i8] c"jZ\CD" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.196, i32 0, i32 0), [3 x i8] c"p\80\90" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.197, i32 0, i32 0), [3 x i8] c"\FF\FA\FA" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.198, i32 0, i32 0), [3 x i8] c"\00\FF\7F" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.199, i32 0, i32 0), [3 x i8] c"F\82\B4" }, %struct.ColorEntry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.200, i32 0, i32 0), [3 x i8] c"\D2\B4\8C" }, %struct.ColorEntry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i32 0, i32 0), [3 x i8] c"\00\80\80" }, %struct.ColorEntry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.202, i32 0, i32 0), [3 x i8] c"\D8\BF\D8" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0), [3 x i8] c"\FFcG" }, %struct.ColorEntry { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.204, i32 0, i32 0), [3 x i8] c"@\E0\D0" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i32 0, i32 0), [3 x i8] c"\EE\82\EE" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.206, i32 0, i32 0), [3 x i8] c"\F5\DE\B3" }, %struct.ColorEntry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207, i32 0, i32 0), [3 x i8] c"\FF\FF\FF" }, %struct.ColorEntry { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.208, i32 0, i32 0), [3 x i8] c"\F5\F5\F5" }, %struct.ColorEntry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.209, i32 0, i32 0), [3 x i8] c"\FF\FF\00" }, %struct.ColorEntry { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.210, i32 0, i32 0), [3 x i8] c"\9A\CD2" }], align 16
@.str.6 = private unnamed_addr constant [24 x i8] c"Cannot find color '%s'\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"Invalid alpha value specifier '%s' in '%s'\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"%Y - %m - %d\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"%Y%m%d\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"%H%M%S\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"%H%M\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"%H\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"now\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"%J:%M:%S\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"%M:%S\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"ntsc\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"pal\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"qntsc\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"qpal\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"sntsc\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"spal\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"film\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"ntsc-film\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"sqcif\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"qcif\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"cif\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"4cif\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"16cif\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"qqvga\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"qvga\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"vga\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"svga\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"xga\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"uxga\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"qxga\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"sxga\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"qsxga\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"hsxga\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"wvga\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"wxga\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"wsxga\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"wuxga\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"woxga\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"wqsxga\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"wquxga\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c"whsxga\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"whuxga\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"cga\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"ega\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"hd480\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"hd720\00", align 1
@.str.54 = private unnamed_addr constant [7 x i8] c"hd1080\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"2k\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"2kdci\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"2kflat\00", align 1
@.str.58 = private unnamed_addr constant [8 x i8] c"2kscope\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"4k\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"4kdci\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"4kflat\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"4kscope\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"nhd\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"hqvga\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"wqvga\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"fwqvga\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"hvga\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"qhd\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"uhd2160\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"uhd4320\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"AliceBlue\00", align 1
@.str.72 = private unnamed_addr constant [13 x i8] c"AntiqueWhite\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"Aqua\00", align 1
@.str.74 = private unnamed_addr constant [11 x i8] c"Aquamarine\00", align 1
@.str.75 = private unnamed_addr constant [6 x i8] c"Azure\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"Beige\00", align 1
@.str.77 = private unnamed_addr constant [7 x i8] c"Bisque\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Black\00", align 1
@.str.79 = private unnamed_addr constant [15 x i8] c"BlanchedAlmond\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"Blue\00", align 1
@.str.81 = private unnamed_addr constant [11 x i8] c"BlueViolet\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"Brown\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"BurlyWood\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"CadetBlue\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"Chartreuse\00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"Chocolate\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"Coral\00", align 1
@.str.88 = private unnamed_addr constant [15 x i8] c"CornflowerBlue\00", align 1
@.str.89 = private unnamed_addr constant [9 x i8] c"Cornsilk\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"Crimson\00", align 1
@.str.91 = private unnamed_addr constant [5 x i8] c"Cyan\00", align 1
@.str.92 = private unnamed_addr constant [9 x i8] c"DarkBlue\00", align 1
@.str.93 = private unnamed_addr constant [9 x i8] c"DarkCyan\00", align 1
@.str.94 = private unnamed_addr constant [14 x i8] c"DarkGoldenRod\00", align 1
@.str.95 = private unnamed_addr constant [9 x i8] c"DarkGray\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"DarkGreen\00", align 1
@.str.97 = private unnamed_addr constant [10 x i8] c"DarkKhaki\00", align 1
@.str.98 = private unnamed_addr constant [12 x i8] c"DarkMagenta\00", align 1
@.str.99 = private unnamed_addr constant [15 x i8] c"DarkOliveGreen\00", align 1
@.str.100 = private unnamed_addr constant [11 x i8] c"Darkorange\00", align 1
@.str.101 = private unnamed_addr constant [11 x i8] c"DarkOrchid\00", align 1
@.str.102 = private unnamed_addr constant [8 x i8] c"DarkRed\00", align 1
@.str.103 = private unnamed_addr constant [11 x i8] c"DarkSalmon\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"DarkSeaGreen\00", align 1
@.str.105 = private unnamed_addr constant [14 x i8] c"DarkSlateBlue\00", align 1
@.str.106 = private unnamed_addr constant [14 x i8] c"DarkSlateGray\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"DarkTurquoise\00", align 1
@.str.108 = private unnamed_addr constant [11 x i8] c"DarkViolet\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"DeepPink\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"DeepSkyBlue\00", align 1
@.str.111 = private unnamed_addr constant [8 x i8] c"DimGray\00", align 1
@.str.112 = private unnamed_addr constant [11 x i8] c"DodgerBlue\00", align 1
@.str.113 = private unnamed_addr constant [10 x i8] c"FireBrick\00", align 1
@.str.114 = private unnamed_addr constant [12 x i8] c"FloralWhite\00", align 1
@.str.115 = private unnamed_addr constant [12 x i8] c"ForestGreen\00", align 1
@.str.116 = private unnamed_addr constant [8 x i8] c"Fuchsia\00", align 1
@.str.117 = private unnamed_addr constant [10 x i8] c"Gainsboro\00", align 1
@.str.118 = private unnamed_addr constant [11 x i8] c"GhostWhite\00", align 1
@.str.119 = private unnamed_addr constant [5 x i8] c"Gold\00", align 1
@.str.120 = private unnamed_addr constant [10 x i8] c"GoldenRod\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"Gray\00", align 1
@.str.122 = private unnamed_addr constant [6 x i8] c"Green\00", align 1
@.str.123 = private unnamed_addr constant [12 x i8] c"GreenYellow\00", align 1
@.str.124 = private unnamed_addr constant [9 x i8] c"HoneyDew\00", align 1
@.str.125 = private unnamed_addr constant [8 x i8] c"HotPink\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"IndianRed\00", align 1
@.str.127 = private unnamed_addr constant [7 x i8] c"Indigo\00", align 1
@.str.128 = private unnamed_addr constant [6 x i8] c"Ivory\00", align 1
@.str.129 = private unnamed_addr constant [6 x i8] c"Khaki\00", align 1
@.str.130 = private unnamed_addr constant [9 x i8] c"Lavender\00", align 1
@.str.131 = private unnamed_addr constant [14 x i8] c"LavenderBlush\00", align 1
@.str.132 = private unnamed_addr constant [10 x i8] c"LawnGreen\00", align 1
@.str.133 = private unnamed_addr constant [13 x i8] c"LemonChiffon\00", align 1
@.str.134 = private unnamed_addr constant [10 x i8] c"LightBlue\00", align 1
@.str.135 = private unnamed_addr constant [11 x i8] c"LightCoral\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"LightCyan\00", align 1
@.str.137 = private unnamed_addr constant [21 x i8] c"LightGoldenRodYellow\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"LightGreen\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"LightGrey\00", align 1
@.str.140 = private unnamed_addr constant [10 x i8] c"LightPink\00", align 1
@.str.141 = private unnamed_addr constant [12 x i8] c"LightSalmon\00", align 1
@.str.142 = private unnamed_addr constant [14 x i8] c"LightSeaGreen\00", align 1
@.str.143 = private unnamed_addr constant [13 x i8] c"LightSkyBlue\00", align 1
@.str.144 = private unnamed_addr constant [15 x i8] c"LightSlateGray\00", align 1
@.str.145 = private unnamed_addr constant [15 x i8] c"LightSteelBlue\00", align 1
@.str.146 = private unnamed_addr constant [12 x i8] c"LightYellow\00", align 1
@.str.147 = private unnamed_addr constant [5 x i8] c"Lime\00", align 1
@.str.148 = private unnamed_addr constant [10 x i8] c"LimeGreen\00", align 1
@.str.149 = private unnamed_addr constant [6 x i8] c"Linen\00", align 1
@.str.150 = private unnamed_addr constant [8 x i8] c"Magenta\00", align 1
@.str.151 = private unnamed_addr constant [7 x i8] c"Maroon\00", align 1
@.str.152 = private unnamed_addr constant [17 x i8] c"MediumAquaMarine\00", align 1
@.str.153 = private unnamed_addr constant [11 x i8] c"MediumBlue\00", align 1
@.str.154 = private unnamed_addr constant [13 x i8] c"MediumOrchid\00", align 1
@.str.155 = private unnamed_addr constant [13 x i8] c"MediumPurple\00", align 1
@.str.156 = private unnamed_addr constant [15 x i8] c"MediumSeaGreen\00", align 1
@.str.157 = private unnamed_addr constant [16 x i8] c"MediumSlateBlue\00", align 1
@.str.158 = private unnamed_addr constant [18 x i8] c"MediumSpringGreen\00", align 1
@.str.159 = private unnamed_addr constant [16 x i8] c"MediumTurquoise\00", align 1
@.str.160 = private unnamed_addr constant [16 x i8] c"MediumVioletRed\00", align 1
@.str.161 = private unnamed_addr constant [13 x i8] c"MidnightBlue\00", align 1
@.str.162 = private unnamed_addr constant [10 x i8] c"MintCream\00", align 1
@.str.163 = private unnamed_addr constant [10 x i8] c"MistyRose\00", align 1
@.str.164 = private unnamed_addr constant [9 x i8] c"Moccasin\00", align 1
@.str.165 = private unnamed_addr constant [12 x i8] c"NavajoWhite\00", align 1
@.str.166 = private unnamed_addr constant [5 x i8] c"Navy\00", align 1
@.str.167 = private unnamed_addr constant [8 x i8] c"OldLace\00", align 1
@.str.168 = private unnamed_addr constant [6 x i8] c"Olive\00", align 1
@.str.169 = private unnamed_addr constant [10 x i8] c"OliveDrab\00", align 1
@.str.170 = private unnamed_addr constant [7 x i8] c"Orange\00", align 1
@.str.171 = private unnamed_addr constant [10 x i8] c"OrangeRed\00", align 1
@.str.172 = private unnamed_addr constant [7 x i8] c"Orchid\00", align 1
@.str.173 = private unnamed_addr constant [14 x i8] c"PaleGoldenRod\00", align 1
@.str.174 = private unnamed_addr constant [10 x i8] c"PaleGreen\00", align 1
@.str.175 = private unnamed_addr constant [14 x i8] c"PaleTurquoise\00", align 1
@.str.176 = private unnamed_addr constant [14 x i8] c"PaleVioletRed\00", align 1
@.str.177 = private unnamed_addr constant [11 x i8] c"PapayaWhip\00", align 1
@.str.178 = private unnamed_addr constant [10 x i8] c"PeachPuff\00", align 1
@.str.179 = private unnamed_addr constant [5 x i8] c"Peru\00", align 1
@.str.180 = private unnamed_addr constant [5 x i8] c"Pink\00", align 1
@.str.181 = private unnamed_addr constant [5 x i8] c"Plum\00", align 1
@.str.182 = private unnamed_addr constant [11 x i8] c"PowderBlue\00", align 1
@.str.183 = private unnamed_addr constant [7 x i8] c"Purple\00", align 1
@.str.184 = private unnamed_addr constant [4 x i8] c"Red\00", align 1
@.str.185 = private unnamed_addr constant [10 x i8] c"RosyBrown\00", align 1
@.str.186 = private unnamed_addr constant [10 x i8] c"RoyalBlue\00", align 1
@.str.187 = private unnamed_addr constant [12 x i8] c"SaddleBrown\00", align 1
@.str.188 = private unnamed_addr constant [7 x i8] c"Salmon\00", align 1
@.str.189 = private unnamed_addr constant [11 x i8] c"SandyBrown\00", align 1
@.str.190 = private unnamed_addr constant [9 x i8] c"SeaGreen\00", align 1
@.str.191 = private unnamed_addr constant [9 x i8] c"SeaShell\00", align 1
@.str.192 = private unnamed_addr constant [7 x i8] c"Sienna\00", align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"Silver\00", align 1
@.str.194 = private unnamed_addr constant [8 x i8] c"SkyBlue\00", align 1
@.str.195 = private unnamed_addr constant [10 x i8] c"SlateBlue\00", align 1
@.str.196 = private unnamed_addr constant [10 x i8] c"SlateGray\00", align 1
@.str.197 = private unnamed_addr constant [5 x i8] c"Snow\00", align 1
@.str.198 = private unnamed_addr constant [12 x i8] c"SpringGreen\00", align 1
@.str.199 = private unnamed_addr constant [10 x i8] c"SteelBlue\00", align 1
@.str.200 = private unnamed_addr constant [4 x i8] c"Tan\00", align 1
@.str.201 = private unnamed_addr constant [5 x i8] c"Teal\00", align 1
@.str.202 = private unnamed_addr constant [8 x i8] c"Thistle\00", align 1
@.str.203 = private unnamed_addr constant [7 x i8] c"Tomato\00", align 1
@.str.204 = private unnamed_addr constant [10 x i8] c"Turquoise\00", align 1
@.str.205 = private unnamed_addr constant [7 x i8] c"Violet\00", align 1
@.str.206 = private unnamed_addr constant [6 x i8] c"Wheat\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"White\00", align 1
@.str.208 = private unnamed_addr constant [11 x i8] c"WhiteSmoke\00", align 1
@.str.209 = private unnamed_addr constant [7 x i8] c"Yellow\00", align 1
@.str.210 = private unnamed_addr constant [12 x i8] c"YellowGreen\00", align 1
@.str.211 = private unnamed_addr constant [8 x i8] c"january\00", align 1
@.str.212 = private unnamed_addr constant [9 x i8] c"february\00", align 1
@.str.213 = private unnamed_addr constant [6 x i8] c"march\00", align 1
@.str.214 = private unnamed_addr constant [6 x i8] c"april\00", align 1
@.str.215 = private unnamed_addr constant [4 x i8] c"may\00", align 1
@.str.216 = private unnamed_addr constant [5 x i8] c"june\00", align 1
@.str.217 = private unnamed_addr constant [5 x i8] c"july\00", align 1
@.str.218 = private unnamed_addr constant [7 x i8] c"august\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"september\00", align 1
@.str.220 = private unnamed_addr constant [8 x i8] c"october\00", align 1
@.str.221 = private unnamed_addr constant [9 x i8] c"november\00", align 1
@.str.222 = private unnamed_addr constant [9 x i8] c"december\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_parse_ratio(%struct.AVRational*, i8*, i32, i32, i8*) local_unnamed_addr #0 {
  %6 = alloca i8, align 1
  %7 = alloca double, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #10
  store i8 -86, i8* %6, align 1
  %8 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %0, i64 0, i32 0
  %9 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %0, i64 0, i32 1
  %10 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32* %8, i32* %9, i8* nonnull %6) #10
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %21, label %12

12:                                               ; preds = %5
  %13 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  %14 = call i32 @av_expr_parse_and_eval(double* nonnull %7, i8* %1, i8** null, double* null, i8** null, double (i8*, double)** null, i8** null, double (i8*, double, double)** null, i8* null, i32 %3, i8* %4) #10
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = load double, double* %7, align 8
  %18 = call i64 @av_d2q(double %17, i32 %2) #11
  %19 = bitcast %struct.AVRational* %0 to i64*
  store i64 %18, i64* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  br label %28

20:                                               ; preds = %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  br label %28

21:                                               ; preds = %5
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = load i32, i32* %9, align 4
  %25 = sext i32 %24 to i64
  %26 = sext i32 %2 to i64
  %27 = call i32 @av_reduce(i32* %8, i32* %9, i64 %23, i64 %25, i64 %26) #10
  br label %28

28:                                               ; preds = %21, %16, %20
  %29 = phi i32 [ %14, %20 ], [ 0, %16 ], [ 0, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #10
  ret i32 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) local_unnamed_addr #2

declare i32 @av_expr_parse_and_eval(double*, i8*, i8**, double*, i8**, double (i8*, double)**, i8**, double (i8*, double, double)**, i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i64 @av_d2q(double, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @av_reduce(i32*, i32*, i64, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_parse_video_size(i32* nocapture, i32* nocapture, i8*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  br label %6

6:                                                ; preds = %18, %3
  %7 = phi i64 [ 0, %3 ], [ %19, %18 ]
  %8 = getelementptr inbounds [53 x %struct.VideoSizeAbbr], [53 x %struct.VideoSizeAbbr]* @video_size_abbrs, i64 0, i64 %7, i32 0
  %9 = load i8*, i8** %8, align 16
  %10 = tail call i32 @strcmp(i8* %9, i8* %2) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %6
  %13 = and i64 %7, 4294967295
  %14 = getelementptr inbounds [53 x %struct.VideoSizeAbbr], [53 x %struct.VideoSizeAbbr]* @video_size_abbrs, i64 0, i64 %13, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds [53 x %struct.VideoSizeAbbr], [53 x %struct.VideoSizeAbbr]* @video_size_abbrs, i64 0, i64 %13, i32 2
  %17 = load i32, i32* %16, align 4
  br label %36

18:                                               ; preds = %6
  %19 = add nuw nsw i64 %7, 1
  %20 = icmp eq i64 %19, 53
  br i1 %20, label %21, label %6

21:                                               ; preds = %18
  %22 = call i64 @strtol(i8* %2, i8** nonnull %4, i32 10) #10
  %23 = trunc i64 %22 to i32
  %24 = load i8*, i8** %4, align 8
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %28, i8** %4, align 8
  br label %29

29:                                               ; preds = %21, %27
  %30 = phi i8* [ %24, %21 ], [ %28, %27 ]
  %31 = call i64 @strtol(i8* %30, i8** nonnull %4, i32 10) #10
  %32 = trunc i64 %31 to i32
  %33 = load i8*, i8** %4, align 8
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %12, %29
  %37 = phi i32 [ %23, %29 ], [ %15, %12 ]
  %38 = phi i32 [ %32, %29 ], [ %17, %12 ]
  %39 = icmp slt i32 %37, 1
  %40 = icmp slt i32 %38, 1
  %41 = or i1 %39, %40
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  store i32 %37, i32* %0, align 4
  store i32 %38, i32* %1, align 4
  br label %43

43:                                               ; preds = %36, %29, %42
  %44 = phi i32 [ 0, %42 ], [ -22, %29 ], [ -22, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret i32 %44
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_parse_video_rate(%struct.AVRational*, i8*) local_unnamed_addr #0 {
  %3 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i8* %1) #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i8* %1) #12
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %25

8:                                                ; preds = %40, %37, %34, %31, %28, %25, %5, %2
  %9 = phi i64 [ 0, %2 ], [ 1, %5 ], [ 2, %25 ], [ 3, %28 ], [ 4, %31 ], [ 5, %34 ], [ 6, %37 ], [ 7, %40 ]
  %10 = getelementptr inbounds [8 x %struct.VideoRateAbbr], [8 x %struct.VideoRateAbbr]* @video_rate_abbrs, i64 0, i64 %9, i32 1
  %11 = bitcast %struct.AVRational* %10 to i64*
  %12 = bitcast %struct.AVRational* %0 to i64*
  %13 = load i64, i64* %11, align 8
  store i64 %13, i64* %12, align 4
  br label %23

14:                                               ; preds = %43
  %15 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 1
  %22 = select i1 %21, i32 -22, i32 0
  ret i32 %22

23:                                               ; preds = %14, %43, %8
  %24 = phi i32 [ 0, %8 ], [ %44, %43 ], [ -22, %14 ]
  ret i32 %24

25:                                               ; preds = %5
  %26 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8* %1) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %8, label %28

28:                                               ; preds = %25
  %29 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0), i8* %1) #12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %8, label %31

31:                                               ; preds = %28
  %32 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0), i8* %1) #12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %8, label %34

34:                                               ; preds = %31
  %35 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i8* %1) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %8, label %37

37:                                               ; preds = %34
  %38 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i8* %1) #12
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %8, label %40

40:                                               ; preds = %37
  %41 = tail call i32 @strcmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8* %1) #12
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %8, label %43

43:                                               ; preds = %40
  %44 = tail call i32 @av_parse_ratio(%struct.AVRational* %0, i8* %1, i32 1001000, i32 64, i8* null)
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %23, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_parse_color(i8* nocapture, i8*, i32, i8*) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = alloca [128 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %9 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 128, i1 false)
  %10 = load i8, i8* %1, align 1
  %11 = icmp eq i8 %10, 35
  br i1 %11, label %16, label %12

12:                                               ; preds = %4
  %13 = tail call i32 @strncmp(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #12
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 2, i32 0
  br label %16

16:                                               ; preds = %12, %4
  %17 = phi i32 [ 1, %4 ], [ %15, %12 ]
  %18 = icmp slt i32 %2, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = tail call i64 @strlen(i8* %1) #12
  %21 = trunc i64 %20 to i32
  br label %22

22:                                               ; preds = %19, %16
  %23 = phi i32 [ %21, %19 ], [ %2, %16 ]
  %24 = zext i32 %17 to i64
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = sub nsw i32 %23, %17
  %27 = add nsw i32 %26, 1
  %28 = icmp ult i32 %27, 128
  %29 = select i1 %28, i32 %27, i32 128
  %30 = zext i32 %29 to i64
  %31 = call i64 @av_strlcpy(i8* nonnull %9, i8* %25, i64 %30) #10
  %32 = call i8* @strchr(i8* nonnull %9, i32 64) #12
  store i8* %32, i8** %5, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %22
  %35 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %35, i8** %5, align 8
  store i8 0, i8* %32, align 1
  br label %36

36:                                               ; preds = %22, %34
  %37 = phi i8* [ null, %22 ], [ %35, %34 ]
  %38 = call i64 @strlen(i8* nonnull %9) #12
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 -1, i8* %40, align 1
  %41 = call i32 @av_strcasecmp(i8* nonnull %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #10
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %36
  %44 = call i32 @av_strcasecmp(i8* nonnull %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)) #10
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %57

46:                                               ; preds = %43, %36
  %47 = call i32 @av_get_random_seed() #10
  %48 = lshr i32 %47, 24
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %0, align 1
  %50 = lshr i32 %47, 16
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %51, i8* %52, align 1
  %53 = lshr i32 %47, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %54, i8* %55, align 1
  %56 = trunc i32 %47 to i8
  store i8 %56, i8* %40, align 1
  br label %108

57:                                               ; preds = %43
  %58 = icmp eq i32 %17, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %57
  %60 = call i64 @strspn(i8* nonnull %9, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #12
  %61 = shl i64 %38, 32
  %62 = ashr exact i64 %61, 32
  %63 = icmp eq i64 %60, %62
  br i1 %63, label %64, label %85

64:                                               ; preds = %57, %59
  %65 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %66 = call i64 @strtoul(i8* nonnull %9, i8** nonnull %7, i32 16) #10
  %67 = trunc i64 %66 to i32
  %68 = load i8*, i8** %7, align 8
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %64
  switch i32 %39, label %72 [
    i32 8, label %73
    i32 6, label %76
  ]

72:                                               ; preds = %71, %64
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #10
  br label %137

73:                                               ; preds = %71
  %74 = trunc i64 %66 to i8
  store i8 %74, i8* %40, align 1
  %75 = lshr i32 %67, 8
  br label %76

76:                                               ; preds = %71, %73
  %77 = phi i32 [ %75, %73 ], [ %67, %71 ]
  %78 = lshr i32 %77, 16
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %0, align 1
  %80 = lshr i32 %77, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %81, i8* %82, align 1
  %83 = trunc i32 %77 to i8
  %84 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %83, i8* %84, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #10
  br label %108

85:                                               ; preds = %59, %99
  %86 = phi i64 [ %101, %99 ], [ 140, %59 ]
  %87 = phi i64 [ %100, %99 ], [ 0, %59 ]
  %88 = add i64 %87, %86
  %89 = lshr i64 %88, 1
  %90 = getelementptr [140 x %struct.ColorEntry], [140 x %struct.ColorEntry]* @color_table, i64 0, i64 %89
  %91 = getelementptr inbounds %struct.ColorEntry, %struct.ColorEntry* %90, i64 0, i32 0
  %92 = load i8*, i8** %91, align 16
  %93 = call i32 @av_strcasecmp(i8* nonnull %9, i8* %92) #10
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %85
  %96 = icmp eq i32 %93, 0
  br i1 %96, label %103, label %97

97:                                               ; preds = %95
  %98 = add nuw i64 %89, 1
  br label %99

99:                                               ; preds = %97, %85
  %100 = phi i64 [ %98, %97 ], [ %87, %85 ]
  %101 = phi i64 [ %86, %97 ], [ %89, %85 ]
  %102 = icmp ult i64 %100, %101
  br i1 %102, label %85, label %105

103:                                              ; preds = %95
  %104 = icmp eq %struct.ColorEntry* %90, null
  br i1 %104, label %105, label %106

105:                                              ; preds = %99, %103
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i8* nonnull %9) #10
  br label %137

106:                                              ; preds = %103
  %107 = getelementptr [140 x %struct.ColorEntry], [140 x %struct.ColorEntry]* @color_table, i64 0, i64 %89, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 8 %107, i64 3, i1 false)
  br label %108

108:                                              ; preds = %76, %106, %46
  %109 = icmp eq i8* %37, null
  br i1 %109, label %137, label %110

110:                                              ; preds = %108
  %111 = call i32 @strncmp(i8* nonnull %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #12
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %110
  %114 = call i64 @strtoul(i8* nonnull %37, i8** nonnull %5, i32 16) #10
  %115 = uitofp i64 %114 to double
  br label %123

116:                                              ; preds = %110
  %117 = call nsz double @strtod(i8* nonnull %37, i8** nonnull %5) #10
  %118 = fcmp nsz olt double %117, 0.000000e+00
  %119 = fcmp nsz ogt double %117, 1.000000e+00
  %120 = or i1 %118, %119
  %121 = fmul nsz double %117, 2.550000e+02
  %122 = select i1 %120, double 2.560000e+02, double %121
  br label %123

123:                                              ; preds = %116, %113
  %124 = phi double [ %115, %113 ], [ %122, %116 ]
  %125 = load i8*, i8** %5, align 8
  %126 = icmp eq i8* %125, %37
  br i1 %126, label %134, label %127

127:                                              ; preds = %123
  %128 = load i8, i8* %125, align 1
  %129 = icmp ne i8 %128, 0
  %130 = fcmp nsz ogt double %124, 2.550000e+02
  %131 = or i1 %130, %129
  %132 = fcmp nsz olt double %124, 0.000000e+00
  %133 = or i1 %132, %131
  br i1 %133, label %134, label %135

134:                                              ; preds = %127, %123
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0), i8* nonnull %37, i8* %1) #10
  br label %137

135:                                              ; preds = %127
  %136 = fptoui double %124 to i8
  store i8 %136, i8* %40, align 1
  br label %137

137:                                              ; preds = %108, %135, %134, %72, %105
  %138 = phi i32 [ -22, %105 ], [ -22, %72 ], [ -22, %134 ], [ 0, %135 ], [ 0, %108 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  ret i32 %138
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

declare i64 @av_strlcpy(i8*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #5

declare i32 @av_strcasecmp(i8*, i8*) local_unnamed_addr #3

declare i32 @av_get_random_seed() local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i64 @strspn(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @av_get_known_color_name(i32, i8**) local_unnamed_addr #7 {
  %3 = icmp ugt i32 %0, 139
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = sext i32 %0 to i64
  %6 = icmp eq i8** %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds [140 x %struct.ColorEntry], [140 x %struct.ColorEntry]* @color_table, i64 0, i64 %5, i32 1, i64 0
  store i8* %8, i8** %1, align 8
  br label %9

9:                                                ; preds = %4, %7
  %10 = getelementptr inbounds [140 x %struct.ColorEntry], [140 x %struct.ColorEntry]* @color_table, i64 0, i64 %5, i32 0
  %11 = load i8*, i8** %10, align 16
  br label %12

12:                                               ; preds = %2, %9
  %13 = phi i8* [ %11, %9 ], [ null, %2 ]
  ret i8* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @av_small_strptime(i8*, i8* nocapture readonly, %struct.tm* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 4
  %5 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 3
  %6 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 5
  %7 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 0
  %8 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 1
  %9 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 2
  br label %10

10:                                               ; preds = %97, %3
  %11 = phi i8* [ %0, %3 ], [ %98, %97 ]
  %12 = phi i8* [ %1, %3 ], [ %99, %97 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = load i8, i8* %12, align 1
  switch i8 %14, label %15 [
    i8 0, label %226
    i8 37, label %39
  ]

15:                                               ; preds = %10
  %16 = sext i8 %14 to i32
  switch i32 %16, label %19 [
    i32 32, label %17
    i32 13, label %17
    i32 12, label %17
    i32 10, label %17
    i32 9, label %17
  ]

17:                                               ; preds = %15, %15, %15, %15, %15
  %18 = load i8, i8* %11, align 1
  br label %22

19:                                               ; preds = %15
  %20 = icmp eq i8 %14, 11
  %21 = load i8, i8* %11, align 1
  br i1 %20, label %22, label %35

22:                                               ; preds = %19, %17
  %23 = phi i8 [ %18, %17 ], [ %21, %19 ]
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %97, label %25

25:                                               ; preds = %22, %31
  %26 = phi i8 [ %33, %31 ], [ %23, %22 ]
  %27 = phi i8* [ %32, %31 ], [ %11, %22 ]
  %28 = sext i8 %26 to i32
  switch i32 %28, label %29 [
    i32 32, label %31
    i32 13, label %31
    i32 12, label %31
    i32 10, label %31
    i32 9, label %31
  ]

29:                                               ; preds = %25
  %30 = icmp eq i8 %26, 11
  br i1 %30, label %31, label %97

31:                                               ; preds = %29, %25, %25, %25, %25, %25
  %32 = getelementptr inbounds i8, i8* %27, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %97, label %25

35:                                               ; preds = %19
  %36 = icmp eq i8 %21, %14
  br i1 %36, label %37, label %226

37:                                               ; preds = %35
  %38 = getelementptr inbounds i8, i8* %11, i64 1
  br label %97

39:                                               ; preds = %10
  %40 = getelementptr inbounds i8, i8* %12, i64 2
  %41 = load i8, i8* %13, align 1
  %42 = sext i8 %41 to i32
  switch i32 %42, label %226 [
    i32 72, label %68
    i32 74, label %68
    i32 77, label %63
    i32 83, label %58
    i32 89, label %53
    i32 109, label %48
    i32 100, label %43
    i32 84, label %166
    i32 98, label %169
    i32 66, label %169
    i32 104, label %169
    i32 37, label %222
  ]

43:                                               ; preds = %39
  %44 = load i8, i8* %11, align 1
  %45 = sext i8 %44 to i32
  %46 = add nsw i32 %45, -48
  %47 = icmp ugt i32 %46, 9
  br i1 %47, label %226, label %152

48:                                               ; preds = %39
  %49 = load i8, i8* %11, align 1
  %50 = sext i8 %49 to i32
  %51 = add nsw i32 %50, -48
  %52 = icmp ugt i32 %51, 9
  br i1 %52, label %226, label %138

53:                                               ; preds = %39
  %54 = load i8, i8* %11, align 1
  %55 = sext i8 %54 to i32
  %56 = add nsw i32 %55, -48
  %57 = icmp ugt i32 %56, 9
  br i1 %57, label %226, label %126

58:                                               ; preds = %39
  %59 = load i8, i8* %11, align 1
  %60 = sext i8 %59 to i32
  %61 = add nsw i32 %60, -48
  %62 = icmp ugt i32 %61, 9
  br i1 %62, label %226, label %113

63:                                               ; preds = %39
  %64 = load i8, i8* %11, align 1
  %65 = sext i8 %64 to i32
  %66 = add nsw i32 %65, -48
  %67 = icmp ugt i32 %66, 9
  br i1 %67, label %226, label %100

68:                                               ; preds = %39, %39
  %69 = icmp eq i8 %41, 72
  %70 = select i1 %69, i32 23, i32 2147483647
  %71 = select i1 %69, i32 2, i32 4
  br label %72

72:                                               ; preds = %248, %68
  %73 = phi i8* [ %11, %68 ], [ %251, %248 ]
  %74 = phi i32 [ 0, %68 ], [ %250, %248 ]
  %75 = phi i32 [ 0, %68 ], [ %252, %248 ]
  %76 = load i8, i8* %73, align 1
  %77 = sext i8 %76 to i32
  %78 = add nsw i32 %77, -48
  %79 = icmp ugt i32 %78, 9
  br i1 %79, label %90, label %80

80:                                               ; preds = %72
  %81 = mul nsw i32 %74, 10
  %82 = add i32 %78, %81
  %83 = getelementptr inbounds i8, i8* %73, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = add nsw i32 %85, -48
  %87 = icmp ugt i32 %86, 9
  br i1 %87, label %88, label %248

88:                                               ; preds = %80
  %89 = getelementptr inbounds i8, i8* %73, i64 1
  br label %90

90:                                               ; preds = %72, %248, %88
  %91 = phi i32 [ %82, %88 ], [ %250, %248 ], [ %74, %72 ]
  %92 = phi i8* [ %89, %88 ], [ %251, %248 ], [ %73, %72 ]
  %93 = icmp eq i8* %92, %11
  %94 = icmp ugt i32 %91, %70
  %95 = or i1 %94, %93
  br i1 %95, label %226, label %96

96:                                               ; preds = %90
  store i32 %91, i32* %9, align 8
  br label %97

97:                                               ; preds = %31, %29, %96, %110, %123, %136, %149, %163, %220, %222, %166, %37, %22
  %98 = phi i8* [ %38, %37 ], [ %11, %22 ], [ %223, %222 ], [ %221, %220 ], [ %167, %166 ], [ %165, %163 ], [ %151, %149 ], [ %134, %136 ], [ %125, %123 ], [ %112, %110 ], [ %92, %96 ], [ %32, %31 ], [ %27, %29 ]
  %99 = phi i8* [ %13, %37 ], [ %13, %22 ], [ %40, %222 ], [ %40, %220 ], [ %40, %166 ], [ %40, %163 ], [ %40, %149 ], [ %40, %136 ], [ %40, %123 ], [ %40, %110 ], [ %40, %96 ], [ %13, %29 ], [ %13, %31 ]
  br label %10

100:                                              ; preds = %63
  %101 = getelementptr inbounds i8, i8* %11, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = add nsw i32 %103, -48
  %105 = icmp ugt i32 %104, 9
  %106 = mul nsw i32 %66, 10
  %107 = add nuw nsw i32 %104, %106
  %108 = select i1 %105, i32 %66, i32 %107
  %109 = icmp ugt i32 %108, 59
  br i1 %109, label %226, label %110

110:                                              ; preds = %100
  %111 = getelementptr inbounds i8, i8* %11, i64 2
  %112 = select i1 %105, i8* %101, i8* %111
  store i32 %108, i32* %8, align 4
  br label %97

113:                                              ; preds = %58
  %114 = getelementptr inbounds i8, i8* %11, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = add nsw i32 %116, -48
  %118 = icmp ugt i32 %117, 9
  %119 = mul nsw i32 %61, 10
  %120 = add nuw nsw i32 %117, %119
  %121 = select i1 %118, i32 %61, i32 %120
  %122 = icmp ugt i32 %121, 59
  br i1 %122, label %226, label %123

123:                                              ; preds = %113
  %124 = getelementptr inbounds i8, i8* %11, i64 2
  %125 = select i1 %118, i8* %114, i8* %124
  store i32 %121, i32* %7, align 8
  br label %97

126:                                              ; preds = %53
  %127 = getelementptr inbounds i8, i8* %11, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = add nsw i32 %129, -48
  %131 = icmp ugt i32 %130, 9
  br i1 %131, label %132, label %228

132:                                              ; preds = %244, %236, %228, %126
  %133 = phi i32 [ %56, %126 ], [ %230, %228 ], [ %238, %236 ], [ %246, %244 ]
  %134 = phi i8* [ %127, %126 ], [ %231, %228 ], [ %239, %236 ], [ %247, %244 ]
  %135 = icmp ugt i32 %133, 9999
  br i1 %135, label %226, label %136

136:                                              ; preds = %132
  %137 = add nsw i32 %133, -1900
  store i32 %137, i32* %6, align 4
  br label %97

138:                                              ; preds = %48
  %139 = getelementptr inbounds i8, i8* %11, i64 1
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  %142 = add nsw i32 %141, -48
  %143 = icmp ugt i32 %142, 9
  %144 = mul nsw i32 %51, 10
  %145 = add nuw nsw i32 %142, %144
  %146 = select i1 %143, i32 %51, i32 %145
  %147 = add nsw i32 %146, -1
  %148 = icmp ugt i32 %147, 11
  br i1 %148, label %226, label %149

149:                                              ; preds = %138
  %150 = getelementptr inbounds i8, i8* %11, i64 2
  %151 = select i1 %143, i8* %139, i8* %150
  store i32 %147, i32* %4, align 8
  br label %97

152:                                              ; preds = %43
  %153 = getelementptr inbounds i8, i8* %11, i64 1
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = add nsw i32 %155, -48
  %157 = icmp ugt i32 %156, 9
  %158 = mul nsw i32 %46, 10
  %159 = add nuw nsw i32 %156, %158
  %160 = select i1 %157, i32 %46, i32 %159
  %161 = add nsw i32 %160, -1
  %162 = icmp ugt i32 %161, 30
  br i1 %162, label %226, label %163

163:                                              ; preds = %152
  %164 = getelementptr inbounds i8, i8* %11, i64 2
  %165 = select i1 %157, i8* %153, i8* %164
  store i32 %160, i32* %5, align 4
  br label %97

166:                                              ; preds = %39
  %167 = tail call i8* @av_small_strptime(i8* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), %struct.tm* %2)
  %168 = icmp eq i8* %167, null
  br i1 %168, label %226, label %97

169:                                              ; preds = %39, %39, %39
  %170 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.211, i64 0, i64 0), i64 3) #10
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %187

172:                                              ; preds = %217, %214, %211, %208, %205, %202, %199, %196, %193, %190, %187, %169
  %173 = phi i32 [ 0, %169 ], [ 1, %187 ], [ 2, %190 ], [ 3, %193 ], [ 4, %196 ], [ 5, %199 ], [ 6, %202 ], [ 7, %205 ], [ 8, %208 ], [ 9, %211 ], [ 10, %214 ], [ 11, %217 ]
  %174 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.211, i64 0, i64 0), %169 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.212, i64 0, i64 0), %187 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.213, i64 0, i64 0), %190 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.214, i64 0, i64 0), %193 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.215, i64 0, i64 0), %196 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.216, i64 0, i64 0), %199 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.217, i64 0, i64 0), %202 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.218, i64 0, i64 0), %205 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i64 0, i64 0), %208 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.220, i64 0, i64 0), %211 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.221, i64 0, i64 0), %214 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.222, i64 0, i64 0), %217 ]
  %175 = getelementptr inbounds i8, i8* %174, i64 3
  %176 = tail call i64 @strlen(i8* %175) #12
  %177 = trunc i64 %176 to i32
  %178 = getelementptr inbounds i8, i8* %11, i64 3
  %179 = icmp sgt i32 %177, 0
  br i1 %179, label %180, label %220

180:                                              ; preds = %172
  %181 = shl i64 %176, 32
  %182 = ashr exact i64 %181, 32
  %183 = tail call i32 @av_strncasecmp(i8* %178, i8* %175, i64 %182) #10
  %184 = icmp eq i32 %183, 0
  %185 = getelementptr inbounds i8, i8* %178, i64 %182
  %186 = select i1 %184, i8* %185, i8* %178
  br label %220

187:                                              ; preds = %169
  %188 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.212, i64 0, i64 0), i64 3) #10
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %172, label %190

190:                                              ; preds = %187
  %191 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.213, i64 0, i64 0), i64 3) #10
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %172, label %193

193:                                              ; preds = %190
  %194 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.214, i64 0, i64 0), i64 3) #10
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %172, label %196

196:                                              ; preds = %193
  %197 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.215, i64 0, i64 0), i64 3) #10
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %172, label %199

199:                                              ; preds = %196
  %200 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.216, i64 0, i64 0), i64 3) #10
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %172, label %202

202:                                              ; preds = %199
  %203 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.217, i64 0, i64 0), i64 3) #10
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %172, label %205

205:                                              ; preds = %202
  %206 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.218, i64 0, i64 0), i64 3) #10
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %172, label %208

208:                                              ; preds = %205
  %209 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i64 0, i64 0), i64 3) #10
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %172, label %211

211:                                              ; preds = %208
  %212 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.220, i64 0, i64 0), i64 3) #10
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %172, label %214

214:                                              ; preds = %211
  %215 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.221, i64 0, i64 0), i64 3) #10
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %172, label %217

217:                                              ; preds = %214
  %218 = tail call i32 @av_strncasecmp(i8* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.222, i64 0, i64 0), i64 3) #10
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %172, label %226

220:                                              ; preds = %180, %172
  %221 = phi i8* [ %178, %172 ], [ %186, %180 ]
  store i32 %173, i32* %4, align 8
  br label %97

222:                                              ; preds = %39
  %223 = getelementptr inbounds i8, i8* %11, i64 1
  %224 = load i8, i8* %11, align 1
  %225 = icmp eq i8 %224, 37
  br i1 %225, label %97, label %226

226:                                              ; preds = %63, %58, %53, %48, %43, %152, %138, %132, %113, %100, %90, %10, %217, %39, %222, %166, %35
  %227 = phi i8* [ null, %35 ], [ null, %166 ], [ null, %222 ], [ null, %39 ], [ null, %217 ], [ %11, %10 ], [ null, %90 ], [ null, %100 ], [ null, %113 ], [ null, %132 ], [ null, %138 ], [ null, %152 ], [ null, %43 ], [ null, %48 ], [ null, %53 ], [ null, %58 ], [ null, %63 ]
  ret i8* %227

228:                                              ; preds = %126
  %229 = mul nsw i32 %56, 10
  %230 = add nuw nsw i32 %130, %229
  %231 = getelementptr inbounds i8, i8* %11, i64 2
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = add nsw i32 %233, -48
  %235 = icmp ugt i32 %234, 9
  br i1 %235, label %132, label %236

236:                                              ; preds = %228
  %237 = mul nsw i32 %230, 10
  %238 = add nuw nsw i32 %234, %237
  %239 = getelementptr inbounds i8, i8* %11, i64 3
  %240 = load i8, i8* %239, align 1
  %241 = sext i8 %240 to i32
  %242 = add nsw i32 %241, -48
  %243 = icmp ugt i32 %242, 9
  br i1 %243, label %132, label %244

244:                                              ; preds = %236
  %245 = mul nsw i32 %238, 10
  %246 = add nuw nsw i32 %242, %245
  %247 = getelementptr inbounds i8, i8* %11, i64 4
  br label %132

248:                                              ; preds = %80
  %249 = mul nsw i32 %82, 10
  %250 = add i32 %86, %249
  %251 = getelementptr inbounds i8, i8* %73, i64 2
  %252 = add nuw nsw i32 %75, 2
  %253 = icmp eq i32 %252, %71
  br i1 %253, label %90, label %72
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @av_timegm(%struct.tm* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, 1
  %7 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %6, 3
  %10 = add nsw i32 %5, 13
  %11 = select i1 %9, i32 1899, i32 1900
  %12 = add nsw i32 %11, %3
  %13 = select i1 %9, i32 %10, i32 %6
  %14 = mul nsw i32 %13, 153
  %15 = add nsw i32 %14, -457
  %16 = sdiv i32 %15, 5
  %17 = mul nsw i32 %12, 365
  %18 = sdiv i32 %12, 4
  %19 = sdiv i32 %12, -100
  %20 = sdiv i32 %12, 400
  %21 = add i32 %8, -719469
  %22 = add i32 %21, %17
  %23 = add i32 %22, %18
  %24 = add i32 %23, %19
  %25 = add i32 %24, %20
  %26 = add i32 %25, %16
  %27 = sext i32 %26 to i64
  %28 = mul nsw i64 %27, 86400
  %29 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = mul nsw i32 %30, 3600
  %32 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = mul nsw i32 %33, 60
  %35 = add nsw i32 %34, %31
  %36 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = add nsw i32 %35, %37
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %28, %39
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_parse_time(i64* nocapture, i8*, i32) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca %struct.tm, align 8
  %6 = alloca %struct.tm, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.tm, align 8
  %9 = alloca [44 x i8], align 4
  %10 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  store i64 -6148914691236517206, i64* %4, align 8
  %11 = bitcast %struct.tm* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 56, i1 false)
  %12 = bitcast %struct.tm* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 56, i1 false)
  store i64 -9223372036854775808, i64* %0, align 8
  %13 = icmp ne i32 %2, 0
  br i1 %13, label %49, label %14

14:                                               ; preds = %3
  %15 = tail call i64 @av_gettime() #10
  %16 = sdiv i64 %15, 1000000
  store i64 %16, i64* %4, align 8
  %17 = tail call i32 @av_strcasecmp(i8* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = call i8* @av_small_strptime(i8* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), %struct.tm* nonnull %5)
  %21 = icmp eq i8* %20, null
  br i1 %21, label %23, label %25

22:                                               ; preds = %14
  store i64 %15, i64* %0, align 8
  br label %265

23:                                               ; preds = %19
  %24 = call i8* @av_small_strptime(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), %struct.tm* nonnull %5)
  br label %25

25:                                               ; preds = %23, %19
  %26 = phi i8* [ %20, %19 ], [ %24, %23 ]
  %27 = icmp eq i8* %26, null
  %28 = select i1 %27, i8* %1, i8* %26
  %29 = zext i1 %27 to i32
  %30 = load i8, i8* %28, align 1
  switch i8 %30, label %33 [
    i8 84, label %31
    i8 116, label %31
  ]

31:                                               ; preds = %25, %25
  %32 = getelementptr inbounds i8, i8* %28, i64 1
  br label %42

33:                                               ; preds = %25, %39
  %34 = phi i8 [ %41, %39 ], [ %30, %25 ]
  %35 = phi i8* [ %40, %39 ], [ %28, %25 ]
  %36 = sext i8 %34 to i32
  switch i32 %36, label %37 [
    i32 32, label %39
    i32 13, label %39
    i32 12, label %39
    i32 10, label %39
    i32 9, label %39
  ]

37:                                               ; preds = %33
  %38 = icmp eq i8 %34, 11
  br i1 %38, label %39, label %42

39:                                               ; preds = %37, %33, %33, %33, %33, %33
  %40 = getelementptr inbounds i8, i8* %35, i64 1
  %41 = load i8, i8* %40, align 1
  br label %33

42:                                               ; preds = %37, %31
  %43 = phi i8* [ %32, %31 ], [ %35, %37 ]
  %44 = call i8* @av_small_strptime(i8* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), %struct.tm* nonnull %5)
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %88

46:                                               ; preds = %42
  %47 = call i8* @av_small_strptime(i8* %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), %struct.tm* nonnull %5)
  %48 = icmp eq i8* %47, null
  br i1 %48, label %265, label %88

49:                                               ; preds = %3
  %50 = load i8, i8* %1, align 1
  %51 = icmp eq i8 %50, 45
  %52 = getelementptr inbounds i8, i8* %1, i64 1
  %53 = select i1 %51, i8* %52, i8* %1
  %54 = zext i1 %51 to i32
  %55 = call i8* @av_small_strptime(i8* %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), %struct.tm* nonnull %5)
  %56 = icmp eq i8* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  br label %74

60:                                               ; preds = %49
  %61 = call i8* @av_small_strptime(i8* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), %struct.tm* nonnull %5)
  %62 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 2
  store i32 0, i32* %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %64, label %74

64:                                               ; preds = %60
  %65 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %66 = tail call i32* @__errno_location() #11
  store i32 0, i32* %66, align 4
  %67 = call i64 @strtoll(i8* %53, i8** nonnull %7, i32 10) #10
  %68 = load i8*, i8** %7, align 8
  %69 = icmp eq i8* %68, %53
  br i1 %69, label %70, label %71

70:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #10
  br label %265

71:                                               ; preds = %64
  %72 = load i32, i32* %66, align 4
  %73 = icmp eq i32 %72, 34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #10
  br i1 %73, label %265, label %86

74:                                               ; preds = %57, %60
  %75 = phi i32 [ 0, %60 ], [ %59, %57 ]
  %76 = phi i8* [ %61, %60 ], [ %55, %57 ]
  %77 = mul nsw i32 %75, 3600
  %78 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = mul nsw i32 %79, 60
  %81 = add nsw i32 %80, %77
  %82 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = add nsw i32 %81, %83
  %85 = sext i32 %84 to i64
  br label %88

86:                                               ; preds = %71
  %87 = icmp eq i8* %68, null
  br i1 %87, label %265, label %88

88:                                               ; preds = %42, %46, %74, %86
  %89 = phi i32 [ %54, %86 ], [ %54, %74 ], [ 0, %46 ], [ 0, %42 ]
  %90 = phi i32 [ 0, %86 ], [ 0, %74 ], [ %29, %46 ], [ %29, %42 ]
  %91 = phi i64 [ %67, %86 ], [ %85, %74 ], [ -6148914691236517206, %46 ], [ -6148914691236517206, %42 ]
  %92 = phi i8* [ %68, %86 ], [ %76, %74 ], [ %47, %46 ], [ %44, %42 ]
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %93, 46
  br i1 %94, label %95, label %118

95:                                               ; preds = %88
  %96 = getelementptr inbounds i8, i8* %92, i64 1
  %97 = load i8, i8* %96, align 1
  %98 = sext i8 %97 to i32
  %99 = add nsw i32 %98, -48
  %100 = icmp ugt i32 %99, 9
  br i1 %100, label %108, label %101

101:                                              ; preds = %95
  %102 = mul nsw i32 %99, 100000
  %103 = getelementptr inbounds i8, i8* %92, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = add nsw i32 %105, -48
  %107 = icmp ugt i32 %106, 9
  br i1 %107, label %108, label %270

108:                                              ; preds = %302, %294, %286, %278, %270, %101, %95
  %109 = phi i32 [ 0, %95 ], [ %102, %101 ], [ %272, %270 ], [ %280, %278 ], [ %288, %286 ], [ %296, %294 ], [ %303, %302 ]
  %110 = phi i8* [ %96, %95 ], [ %103, %101 ], [ %273, %270 ], [ %281, %278 ], [ %289, %286 ], [ %297, %294 ], [ %304, %302 ]
  br label %111

111:                                              ; preds = %111, %108
  %112 = phi i8* [ %110, %108 ], [ %117, %111 ]
  %113 = load i8, i8* %112, align 1
  %114 = sext i8 %113 to i32
  %115 = add nsw i32 %114, -48
  %116 = icmp ugt i32 %115, 9
  %117 = getelementptr inbounds i8, i8* %112, i64 1
  br i1 %116, label %118, label %111

118:                                              ; preds = %111, %88
  %119 = phi i8 [ %93, %88 ], [ %113, %111 ]
  %120 = phi i8* [ %92, %88 ], [ %112, %111 ]
  %121 = phi i32 [ 0, %88 ], [ %109, %111 ]
  br i1 %13, label %122, label %140

122:                                              ; preds = %118
  switch i8 %119, label %136 [
    i8 109, label %123
    i8 117, label %130
  ]

123:                                              ; preds = %122
  %124 = getelementptr inbounds i8, i8* %120, i64 1
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 115
  br i1 %126, label %127, label %136

127:                                              ; preds = %123
  %128 = sdiv i32 %121, 1000
  %129 = getelementptr inbounds i8, i8* %120, i64 2
  br label %239

130:                                              ; preds = %122
  %131 = getelementptr inbounds i8, i8* %120, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 115
  br i1 %133, label %134, label %136

134:                                              ; preds = %130
  %135 = getelementptr inbounds i8, i8* %120, i64 2
  br label %239

136:                                              ; preds = %122, %123, %130
  %137 = icmp eq i8 %119, 115
  %138 = getelementptr inbounds i8, i8* %120, i64 1
  %139 = select i1 %137, i8* %138, i8* %120
  br label %239

140:                                              ; preds = %118
  %141 = or i8 %119, 32
  %142 = icmp eq i8 %141, 122
  %143 = zext i1 %142 to i32
  %144 = zext i1 %142 to i64
  %145 = getelementptr inbounds i8, i8* %120, i64 %144
  %146 = icmp ne i32 %90, 0
  %147 = or i1 %146, %142
  br i1 %147, label %171, label %148

148:                                              ; preds = %140
  %149 = load i8, i8* %145, align 1
  switch i8 %149, label %171 [
    i8 43, label %150
    i8 45, label %150
  ]

150:                                              ; preds = %148, %148
  %151 = bitcast %struct.tm* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %151) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 56, i1 false)
  %152 = load i8, i8* %145, align 1
  %153 = icmp eq i8 %152, 43
  %154 = getelementptr inbounds i8, i8* %145, i64 1
  %155 = call i8* @av_small_strptime(i8* %154, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), %struct.tm* nonnull %8)
  %156 = icmp eq i8* %155, null
  br i1 %156, label %157, label %160

157:                                              ; preds = %150
  %158 = call i8* @av_small_strptime(i8* %154, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), %struct.tm* nonnull %8)
  %159 = icmp eq i8* %158, null
  br i1 %159, label %267, label %160

160:                                              ; preds = %150, %157, %267
  %161 = phi i8* [ %155, %150 ], [ %158, %157 ], [ %268, %267 ]
  %162 = getelementptr inbounds %struct.tm, %struct.tm* %8, i64 0, i32 2
  %163 = load i32, i32* %162, align 8
  %164 = mul nsw i32 %163, 60
  %165 = getelementptr inbounds %struct.tm, %struct.tm* %8, i64 0, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %164, %166
  %168 = select i1 %153, i32 -60, i32 60
  %169 = mul i32 %168, %167
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %151) #10
  %170 = sext i32 %169 to i64
  br label %171

171:                                              ; preds = %160, %148, %140
  %172 = phi i8* [ %145, %140 ], [ %145, %148 ], [ %161, %160 ]
  %173 = phi i32 [ %143, %140 ], [ %143, %148 ], [ 1, %160 ]
  %174 = phi i64 [ 0, %140 ], [ 0, %148 ], [ %170, %160 ]
  br i1 %146, label %175, label %188

175:                                              ; preds = %171
  %176 = getelementptr inbounds [44 x i8], [44 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %176)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %176, i8 -86, i64 44, i1 false)
  %177 = icmp eq i32 %173, 0
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = call %struct.tm* @gmtime_r(i64* nonnull %4, %struct.tm* nonnull %6) #10
  br label %182

180:                                              ; preds = %175
  %181 = call %struct.tm* @localtime_r(i64* nonnull %4, %struct.tm* nonnull %6) #10
  br label %182

182:                                              ; preds = %180, %178
  %183 = phi %struct.tm* [ %181, %180 ], [ %179, %178 ]
  %184 = getelementptr inbounds %struct.tm, %struct.tm* %183, i64 0, i32 3
  %185 = bitcast i32* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %176, i8* align 4 %185, i64 44, i1 false)
  %186 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 3
  %187 = bitcast i32* %186 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %187, i8* nonnull align 4 %176, i64 44, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %176)
  br label %188

188:                                              ; preds = %182, %171
  %189 = icmp ne i32 %173, 0
  %190 = xor i1 %189, true
  %191 = sext i1 %190 to i32
  %192 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 8
  store i32 %191, i32* %192, align 8
  br i1 %189, label %193, label %233

193:                                              ; preds = %188
  %194 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 5
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 4
  %197 = load i32, i32* %196, align 8
  %198 = add nsw i32 %197, 1
  %199 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 3
  %200 = load i32, i32* %199, align 4
  %201 = icmp slt i32 %198, 3
  %202 = add nsw i32 %197, 13
  %203 = select i1 %201, i32 1899, i32 1900
  %204 = add nsw i32 %203, %195
  %205 = select i1 %201, i32 %202, i32 %198
  %206 = mul nsw i32 %205, 153
  %207 = add nsw i32 %206, -457
  %208 = sdiv i32 %207, 5
  %209 = mul nsw i32 %204, 365
  %210 = sdiv i32 %204, 4
  %211 = sdiv i32 %204, -100
  %212 = sdiv i32 %204, 400
  %213 = add i32 %200, -719469
  %214 = add i32 %213, %209
  %215 = add i32 %214, %210
  %216 = add i32 %215, %211
  %217 = add i32 %216, %212
  %218 = add i32 %217, %208
  %219 = sext i32 %218 to i64
  %220 = mul nsw i64 %219, 86400
  %221 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 2
  %222 = load i32, i32* %221, align 8
  %223 = mul nsw i32 %222, 3600
  %224 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 1
  %225 = load i32, i32* %224, align 4
  %226 = mul nsw i32 %225, 60
  %227 = add nsw i32 %226, %223
  %228 = getelementptr inbounds %struct.tm, %struct.tm* %5, i64 0, i32 0
  %229 = load i32, i32* %228, align 8
  %230 = add nsw i32 %227, %229
  %231 = sext i32 %230 to i64
  %232 = add nsw i64 %220, %231
  br label %235

233:                                              ; preds = %188
  %234 = call i64 @mktime(%struct.tm* nonnull %5) #10
  br label %235

235:                                              ; preds = %193, %233
  %236 = phi i64 [ %232, %193 ], [ %234, %233 ]
  %237 = add nsw i64 %236, %174
  br label %239

238:                                              ; preds = %267
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %151) #10
  br label %265

239:                                              ; preds = %235, %136, %127, %134
  %240 = phi i8* [ %129, %127 ], [ %135, %134 ], [ %139, %136 ], [ %172, %235 ]
  %241 = phi i64 [ %91, %127 ], [ %91, %134 ], [ %91, %136 ], [ %237, %235 ]
  %242 = phi i32 [ %128, %127 ], [ 0, %134 ], [ %121, %136 ], [ %121, %235 ]
  %243 = phi i64 [ 1000, %127 ], [ 1, %134 ], [ 1000000, %136 ], [ 1000000, %235 ]
  %244 = load i8, i8* %240, align 1
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %246, label %265

246:                                              ; preds = %239
  %247 = udiv i64 9223372036854775807, %243
  %248 = icmp slt i64 %247, %241
  br i1 %248, label %265, label %249

249:                                              ; preds = %246
  %250 = sdiv i64 -9223372036854775808, %243
  %251 = icmp slt i64 %241, %250
  br i1 %251, label %265, label %252

252:                                              ; preds = %249
  %253 = mul nsw i64 %243, %241
  %254 = sext i32 %242 to i64
  %255 = sub nsw i64 9223372036854775807, %254
  %256 = icmp slt i64 %255, %253
  br i1 %256, label %265, label %257

257:                                              ; preds = %252
  %258 = add nsw i64 %253, %254
  %259 = icmp eq i64 %258, -9223372036854775808
  %260 = icmp ne i32 %89, 0
  %261 = and i1 %260, %259
  br i1 %261, label %265, label %262

262:                                              ; preds = %257
  %263 = sub nsw i64 0, %258
  %264 = select i1 %260, i64 %263, i64 %258
  store i64 %264, i64* %0, align 8
  br label %265

265:                                              ; preds = %46, %71, %238, %70, %257, %252, %246, %249, %239, %86, %262, %22
  %266 = phi i32 [ 0, %262 ], [ -22, %238 ], [ -34, %71 ], [ 0, %22 ], [ -22, %86 ], [ -22, %239 ], [ -34, %249 ], [ -34, %246 ], [ -34, %252 ], [ -34, %257 ], [ -22, %70 ], [ -22, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %12) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  ret i32 %266

267:                                              ; preds = %157
  %268 = call i8* @av_small_strptime(i8* %154, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), %struct.tm* nonnull %8)
  %269 = icmp eq i8* %268, null
  br i1 %269, label %238, label %160

270:                                              ; preds = %101
  %271 = mul nsw i32 %106, 10000
  %272 = add nuw nsw i32 %271, %102
  %273 = getelementptr inbounds i8, i8* %92, i64 3
  %274 = load i8, i8* %273, align 1
  %275 = sext i8 %274 to i32
  %276 = add nsw i32 %275, -48
  %277 = icmp ugt i32 %276, 9
  br i1 %277, label %108, label %278

278:                                              ; preds = %270
  %279 = mul nsw i32 %276, 1000
  %280 = add nuw nsw i32 %279, %272
  %281 = getelementptr inbounds i8, i8* %92, i64 4
  %282 = load i8, i8* %281, align 1
  %283 = sext i8 %282 to i32
  %284 = add nsw i32 %283, -48
  %285 = icmp ugt i32 %284, 9
  br i1 %285, label %108, label %286

286:                                              ; preds = %278
  %287 = mul nsw i32 %284, 100
  %288 = add nuw nsw i32 %287, %280
  %289 = getelementptr inbounds i8, i8* %92, i64 5
  %290 = load i8, i8* %289, align 1
  %291 = sext i8 %290 to i32
  %292 = add nsw i32 %291, -48
  %293 = icmp ugt i32 %292, 9
  br i1 %293, label %108, label %294

294:                                              ; preds = %286
  %295 = mul nsw i32 %292, 10
  %296 = add nuw nsw i32 %295, %288
  %297 = getelementptr inbounds i8, i8* %92, i64 6
  %298 = load i8, i8* %297, align 1
  %299 = sext i8 %298 to i32
  %300 = add nsw i32 %299, -48
  %301 = icmp ugt i32 %300, 9
  br i1 %301, label %108, label %302

302:                                              ; preds = %294
  %303 = add nuw nsw i32 %300, %296
  %304 = getelementptr inbounds i8, i8* %92, i64 7
  br label %108
}

declare i64 @av_gettime() local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare %struct.tm* @gmtime_r(i64*, %struct.tm*) local_unnamed_addr #9

; Function Attrs: nounwind
declare %struct.tm* @localtime_r(i64*, %struct.tm*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i64 @mktime(%struct.tm* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_find_info_tag(i8*, i32, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca [128 x i8], align 16
  %6 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 128, i1 false)
  %7 = load i8, i8* %3, align 1
  %8 = icmp eq i8 %7, 63
  %9 = getelementptr inbounds i8, i8* %3, i64 1
  %10 = select i1 %8, i8* %9, i8* %3
  %11 = ptrtoint [128 x i8]* %5 to i64
  %12 = ptrtoint i8* %0 to i64
  %13 = add nsw i32 %1, -1
  %14 = sext i32 %13 to i64
  br label %15

15:                                               ; preds = %25, %4
  %16 = phi i8* [ %10, %4 ], [ %28, %25 ]
  %17 = phi i8* [ %6, %4 ], [ %27, %25 ]
  %18 = load i8, i8* %16, align 1
  switch i8 %18, label %19 [
    i8 0, label %29
    i8 61, label %29
    i8 38, label %29
  ]

19:                                               ; preds = %15
  %20 = ptrtoint i8* %17 to i64
  %21 = sub i64 %20, %11
  %22 = icmp ult i64 %21, 127
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %18, i8* %17, align 1
  br label %25

25:                                               ; preds = %19, %23, %51
  %26 = phi i8* [ %47, %51 ], [ %16, %23 ], [ %16, %19 ]
  %27 = phi i8* [ %6, %51 ], [ %24, %23 ], [ %17, %19 ]
  %28 = getelementptr inbounds i8, i8* %26, i64 1
  br label %15

29:                                               ; preds = %15, %15, %15
  store i8 0, i8* %17, align 1
  %30 = icmp eq i8 %18, 61
  br i1 %30, label %31, label %46

31:                                               ; preds = %29, %42
  %32 = phi i8* [ %39, %42 ], [ %16, %29 ]
  %33 = phi i8* [ %44, %42 ], [ %0, %29 ]
  %34 = ptrtoint i8* %33 to i64
  %35 = sub i64 %34, %12
  %36 = icmp slt i64 %35, %14
  br label %37

37:                                               ; preds = %31, %41
  %38 = phi i8* [ %39, %41 ], [ %32, %31 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  %40 = load i8, i8* %39, align 1
  switch i8 %40, label %41 [
    i8 38, label %46
    i8 0, label %46
  ]

41:                                               ; preds = %37
  br i1 %36, label %42, label %37

42:                                               ; preds = %41
  %43 = icmp eq i8 %40, 43
  %44 = getelementptr inbounds i8, i8* %33, i64 1
  %45 = select i1 %43, i8 32, i8 %40
  store i8 %45, i8* %33, align 1
  br label %31

46:                                               ; preds = %37, %37, %29
  %47 = phi i8* [ %16, %29 ], [ %39, %37 ], [ %39, %37 ]
  %48 = phi i8* [ %0, %29 ], [ %33, %37 ], [ %33, %37 ]
  store i8 0, i8* %48, align 1
  %49 = call i32 @strcmp(i8* nonnull %6, i8* %2) #12
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = load i8, i8* %47, align 1
  %53 = icmp eq i8 %52, 38
  br i1 %53, label %25, label %54

54:                                               ; preds = %51, %46
  %55 = phi i32 [ 1, %46 ], [ 0, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #10
  ret i32 %55
}

declare i32 @av_strncasecmp(i8*, i8*, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readnone }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
