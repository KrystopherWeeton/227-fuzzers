; ModuleID = '../../third_party/boringssl/src/crypto/evp/scrypt.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/scrypt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block_t = type { [16 x i32] }
%struct.env_md_st = type opaque

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/crypto/evp/scrypt.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PBE_scrypt(i8*, i64, i8*, i64, i64, i64, i64, i64, i8*, i64) local_unnamed_addr #0 {
  %11 = icmp eq i64 %5, 0
  %12 = icmp eq i64 %6, 0
  %13 = or i1 %11, %12
  br i1 %13, label %30, label %14

14:                                               ; preds = %10
  %15 = udiv i64 1073741823, %5
  %16 = icmp ult i64 %15, %6
  %17 = icmp ult i64 %4, 2
  %18 = or i1 %17, %16
  br i1 %18, label %30, label %19

19:                                               ; preds = %14
  %20 = tail call i64 @llvm.ctpop.i64(i64 %4), !range !2
  %21 = icmp ugt i64 %20, 1
  %22 = icmp ugt i64 %4, 4294967296
  %23 = or i1 %22, %21
  br i1 %23, label %30, label %24

24:                                               ; preds = %19
  %25 = shl i64 %5, 4
  %26 = icmp ugt i64 %25, 63
  %27 = lshr i64 %4, %25
  %28 = icmp eq i64 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %31, label %30

30:                                               ; preds = %24, %19, %14, %10
  tail call void @ERR_put_error(i32 6, i32 0, i32 133, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 157) #4
  br label %151

31:                                               ; preds = %24
  %32 = icmp eq i64 %7, 0
  %33 = select i1 %32, i64 33554432, i64 %7
  %34 = shl i64 %5, 1
  %35 = shl i64 %5, 7
  %36 = udiv i64 %33, %35
  %37 = add i64 %6, 1
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %43, label %39

39:                                               ; preds = %31
  %40 = xor i64 %6, -1
  %41 = add i64 %36, %40
  %42 = icmp ult i64 %41, %4
  br i1 %42, label %43, label %44

43:                                               ; preds = %39, %31
  tail call void @ERR_put_error(i32 6, i32 0, i32 132, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 170) #4
  br label %151

44:                                               ; preds = %39
  %45 = shl i64 %6, 1
  %46 = mul i64 %45, %5
  %47 = shl i64 %46, 6
  %48 = shl i64 %4, 1
  %49 = mul i64 %48, %5
  %50 = add i64 %49, %34
  %51 = add i64 %50, %46
  %52 = shl i64 %51, 6
  %53 = tail call i8* @OPENSSL_malloc(i64 %52) #4
  %54 = bitcast i8* %53 to %struct.block_t*
  %55 = icmp eq i8* %53, null
  br i1 %55, label %56, label %57

56:                                               ; preds = %44
  tail call void @ERR_put_error(i32 6, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 183) #4
  br label %151

57:                                               ; preds = %44
  %58 = getelementptr inbounds %struct.block_t, %struct.block_t* %54, i64 %46
  %59 = getelementptr inbounds %struct.block_t, %struct.block_t* %58, i64 %34
  %60 = tail call %struct.env_md_st* @EVP_sha256() #4
  %61 = tail call i32 @PKCS5_PBKDF2_HMAC(i8* %0, i64 %1, i8* %2, i64 %3, i32 1, %struct.env_md_st* %60, i64 %47, i8* nonnull %53) #4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %149, label %63

63:                                               ; preds = %57
  %64 = icmp eq i64 %35, 0
  %65 = bitcast %struct.block_t* %59 to i8*
  %66 = add nsw i64 %4, -1
  %67 = mul i64 %34, %66
  %68 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %67
  %69 = add i64 %34, -1
  %70 = trunc i64 %66 to i32
  %71 = icmp eq i64 %34, 0
  br label %77

72:                                               ; preds = %146
  %73 = tail call %struct.env_md_st* @EVP_sha256() #4
  %74 = tail call i32 @PKCS5_PBKDF2_HMAC(i8* %0, i64 %1, i8* nonnull %53, i64 %47, i32 1, %struct.env_md_st* %73, i64 %9, i8* %8) #4
  %75 = icmp ne i32 %74, 0
  %76 = zext i1 %75 to i32
  br label %149

77:                                               ; preds = %146, %63
  %78 = phi i64 [ 0, %63 ], [ %147, %146 ]
  %79 = mul i64 %78, %34
  %80 = getelementptr inbounds %struct.block_t, %struct.block_t* %54, i64 %79
  br i1 %64, label %83, label %81

81:                                               ; preds = %77
  %82 = bitcast %struct.block_t* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %82, i64 %35, i1 false) #4
  br label %83

83:                                               ; preds = %77, %81
  br label %86

84:                                               ; preds = %86
  tail call fastcc void @scryptBlockMix(%struct.block_t* %80, %struct.block_t* %68, i64 %5) #4
  %85 = getelementptr inbounds %struct.block_t, %struct.block_t* %80, i64 %69, i32 0, i64 0
  br label %95

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %93, %86 ], [ 1, %83 ]
  %88 = mul i64 %87, %34
  %89 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %88
  %90 = add i64 %87, -1
  %91 = mul i64 %90, %34
  %92 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %91
  tail call fastcc void @scryptBlockMix(%struct.block_t* %89, %struct.block_t* %92, i64 %5) #4
  %93 = add nuw i64 %87, 1
  %94 = icmp eq i64 %93, %4
  br i1 %94, label %84, label %86

95:                                               ; preds = %102, %84
  %96 = phi i64 [ 0, %84 ], [ %103, %102 ]
  br i1 %71, label %102, label %97

97:                                               ; preds = %95
  %98 = load i32, i32* %85, align 4
  %99 = and i32 %98, %70
  %100 = zext i32 %99 to i64
  %101 = mul i64 %34, %100
  br label %105

102:                                              ; preds = %105, %95
  tail call fastcc void @scryptBlockMix(%struct.block_t* %80, %struct.block_t* %58, i64 %5) #4
  %103 = add nuw i64 %96, 1
  %104 = icmp eq i64 %103, %4
  br i1 %104, label %146, label %95

105:                                              ; preds = %105, %97
  %106 = phi i64 [ 0, %97 ], [ %144, %105 ]
  %107 = add i64 %106, %101
  %108 = getelementptr inbounds %struct.block_t, %struct.block_t* %80, i64 %106, i32 0, i64 0
  %109 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %107, i32 0, i64 0
  %110 = getelementptr inbounds %struct.block_t, %struct.block_t* %58, i64 %106, i32 0, i64 0
  %111 = bitcast i32* %108 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4
  %113 = bitcast i32* %109 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4
  %115 = xor <4 x i32> %114, %112
  %116 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %116, align 4
  %117 = getelementptr inbounds %struct.block_t, %struct.block_t* %80, i64 %106, i32 0, i64 4
  %118 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %107, i32 0, i64 4
  %119 = getelementptr inbounds %struct.block_t, %struct.block_t* %58, i64 %106, i32 0, i64 4
  %120 = bitcast i32* %117 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4
  %122 = bitcast i32* %118 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = xor <4 x i32> %123, %121
  %125 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %125, align 4
  %126 = getelementptr inbounds %struct.block_t, %struct.block_t* %80, i64 %106, i32 0, i64 8
  %127 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %107, i32 0, i64 8
  %128 = getelementptr inbounds %struct.block_t, %struct.block_t* %58, i64 %106, i32 0, i64 8
  %129 = bitcast i32* %126 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4
  %131 = bitcast i32* %127 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = xor <4 x i32> %132, %130
  %134 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %134, align 4
  %135 = getelementptr inbounds %struct.block_t, %struct.block_t* %80, i64 %106, i32 0, i64 12
  %136 = getelementptr inbounds %struct.block_t, %struct.block_t* %59, i64 %107, i32 0, i64 12
  %137 = getelementptr inbounds %struct.block_t, %struct.block_t* %58, i64 %106, i32 0, i64 12
  %138 = bitcast i32* %135 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4
  %140 = bitcast i32* %136 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = xor <4 x i32> %141, %139
  %143 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 4
  %144 = add nuw i64 %106, 1
  %145 = icmp eq i64 %144, %34
  br i1 %145, label %102, label %105

146:                                              ; preds = %102
  %147 = add nuw i64 %78, 1
  %148 = icmp eq i64 %147, %6
  br i1 %148, label %72, label %77

149:                                              ; preds = %72, %57
  %150 = phi i32 [ 0, %57 ], [ %76, %72 ]
  tail call void @OPENSSL_free(i8* nonnull %53) #4
  br label %151

151:                                              ; preds = %43, %149, %56, %30
  %152 = phi i32 [ 0, %30 ], [ 0, %43 ], [ 0, %56 ], [ %150, %149 ]
  ret i32 %152
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare i32 @PKCS5_PBKDF2_HMAC(i8*, i64, i8*, i64, i32, %struct.env_md_st*, i64, i8*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha256() local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @scryptBlockMix(%struct.block_t* nocapture, %struct.block_t* nocapture readonly, i64) unnamed_addr #0 {
  %4 = shl i64 %2, 1
  %5 = add i64 %4, -1
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %5, i32 0, i64 12
  %9 = bitcast i32* %8 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %5, i32 0, i64 8
  %12 = bitcast i32* %11 to <4 x i32>*
  %13 = load <4 x i32>, <4 x i32>* %12, align 1
  %14 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %5, i32 0, i64 4
  %15 = bitcast i32* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 1
  %17 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %5, i32 0, i64 0
  %18 = bitcast i32* %17 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 1
  br label %21

20:                                               ; preds = %239, %3
  ret void

21:                                               ; preds = %239, %7
  %22 = phi i64 [ %272, %239 ], [ 0, %7 ]
  %23 = phi <4 x i32> [ %244, %239 ], [ %19, %7 ]
  %24 = phi <4 x i32> [ %249, %239 ], [ %16, %7 ]
  %25 = phi <4 x i32> [ %254, %239 ], [ %13, %7 ]
  %26 = phi <4 x i32> [ %259, %239 ], [ %10, %7 ]
  %27 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %22, i32 0, i64 0
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4
  %30 = xor <4 x i32> %29, %23
  %31 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %22, i32 0, i64 4
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4
  %34 = xor <4 x i32> %33, %24
  %35 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %22, i32 0, i64 8
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4
  %38 = xor <4 x i32> %37, %25
  %39 = getelementptr inbounds %struct.block_t, %struct.block_t* %1, i64 %22, i32 0, i64 12
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = xor <4 x i32> %41, %26
  %43 = extractelement <4 x i32> %30, i32 0
  %44 = extractelement <4 x i32> %30, i32 1
  %45 = extractelement <4 x i32> %30, i32 2
  %46 = extractelement <4 x i32> %30, i32 3
  %47 = extractelement <4 x i32> %34, i32 0
  %48 = extractelement <4 x i32> %34, i32 1
  %49 = extractelement <4 x i32> %34, i32 2
  %50 = extractelement <4 x i32> %34, i32 3
  %51 = extractelement <4 x i32> %38, i32 0
  %52 = extractelement <4 x i32> %38, i32 1
  %53 = extractelement <4 x i32> %38, i32 2
  %54 = extractelement <4 x i32> %38, i32 3
  %55 = extractelement <4 x i32> %42, i32 0
  %56 = extractelement <4 x i32> %42, i32 1
  %57 = extractelement <4 x i32> %42, i32 2
  %58 = extractelement <4 x i32> %42, i32 3
  br label %59

59:                                               ; preds = %59, %21
  %60 = phi i32 [ %50, %21 ], [ %186, %59 ]
  %61 = phi i32 [ %46, %21 ], [ %171, %59 ]
  %62 = phi i32 [ %54, %21 ], [ %201, %59 ]
  %63 = phi i32 [ %58, %21 ], [ %236, %59 ]
  %64 = phi i32 [ %45, %21 ], [ %166, %59 ]
  %65 = phi i32 [ %57, %21 ], [ %231, %59 ]
  %66 = phi i32 [ %49, %21 ], [ %181, %59 ]
  %67 = phi i32 [ %53, %21 ], [ %216, %59 ]
  %68 = phi i32 [ %56, %21 ], [ %226, %59 ]
  %69 = phi i32 [ %52, %21 ], [ %211, %59 ]
  %70 = phi i32 [ %44, %21 ], [ %161, %59 ]
  %71 = phi i32 [ %48, %21 ], [ %196, %59 ]
  %72 = phi i32 [ %51, %21 ], [ %206, %59 ]
  %73 = phi i32 [ %47, %21 ], [ %191, %59 ]
  %74 = phi i32 [ %55, %21 ], [ %221, %59 ]
  %75 = phi i32 [ %43, %21 ], [ %176, %59 ]
  %76 = phi i32 [ 8, %21 ], [ %237, %59 ]
  %77 = add i32 %75, %74
  %78 = shl i32 %77, 7
  %79 = lshr i32 %77, 25
  %80 = or i32 %78, %79
  %81 = xor i32 %80, %73
  %82 = add i32 %81, %75
  %83 = shl i32 %82, 9
  %84 = lshr i32 %82, 23
  %85 = or i32 %83, %84
  %86 = xor i32 %85, %72
  %87 = add i32 %86, %81
  %88 = shl i32 %87, 13
  %89 = lshr i32 %87, 19
  %90 = or i32 %88, %89
  %91 = xor i32 %90, %74
  %92 = add i32 %91, %86
  %93 = shl i32 %92, 18
  %94 = lshr i32 %92, 14
  %95 = or i32 %93, %94
  %96 = xor i32 %95, %75
  %97 = add i32 %71, %70
  %98 = shl i32 %97, 7
  %99 = lshr i32 %97, 25
  %100 = or i32 %98, %99
  %101 = xor i32 %100, %69
  %102 = add i32 %101, %71
  %103 = shl i32 %102, 9
  %104 = lshr i32 %102, 23
  %105 = or i32 %103, %104
  %106 = xor i32 %105, %68
  %107 = add i32 %106, %101
  %108 = shl i32 %107, 13
  %109 = lshr i32 %107, 19
  %110 = or i32 %108, %109
  %111 = xor i32 %110, %70
  %112 = add i32 %111, %106
  %113 = shl i32 %112, 18
  %114 = lshr i32 %112, 14
  %115 = or i32 %113, %114
  %116 = xor i32 %115, %71
  %117 = add i32 %67, %66
  %118 = shl i32 %117, 7
  %119 = lshr i32 %117, 25
  %120 = or i32 %118, %119
  %121 = xor i32 %120, %65
  %122 = add i32 %121, %67
  %123 = shl i32 %122, 9
  %124 = lshr i32 %122, 23
  %125 = or i32 %123, %124
  %126 = xor i32 %125, %64
  %127 = add i32 %126, %121
  %128 = shl i32 %127, 13
  %129 = lshr i32 %127, 19
  %130 = or i32 %128, %129
  %131 = xor i32 %130, %66
  %132 = add i32 %131, %126
  %133 = shl i32 %132, 18
  %134 = lshr i32 %132, 14
  %135 = or i32 %133, %134
  %136 = xor i32 %135, %67
  %137 = add i32 %63, %62
  %138 = shl i32 %137, 7
  %139 = lshr i32 %137, 25
  %140 = or i32 %138, %139
  %141 = xor i32 %140, %61
  %142 = add i32 %141, %63
  %143 = shl i32 %142, 9
  %144 = lshr i32 %142, 23
  %145 = or i32 %143, %144
  %146 = xor i32 %145, %60
  %147 = add i32 %146, %141
  %148 = shl i32 %147, 13
  %149 = lshr i32 %147, 19
  %150 = or i32 %148, %149
  %151 = xor i32 %150, %62
  %152 = add i32 %151, %146
  %153 = shl i32 %152, 18
  %154 = lshr i32 %152, 14
  %155 = or i32 %153, %154
  %156 = xor i32 %155, %63
  %157 = add i32 %96, %141
  %158 = shl i32 %157, 7
  %159 = lshr i32 %157, 25
  %160 = or i32 %158, %159
  %161 = xor i32 %160, %111
  %162 = add i32 %161, %96
  %163 = shl i32 %162, 9
  %164 = lshr i32 %162, 23
  %165 = or i32 %163, %164
  %166 = xor i32 %165, %126
  %167 = add i32 %166, %161
  %168 = shl i32 %167, 13
  %169 = lshr i32 %167, 19
  %170 = or i32 %168, %169
  %171 = xor i32 %170, %141
  %172 = add i32 %171, %166
  %173 = shl i32 %172, 18
  %174 = lshr i32 %172, 14
  %175 = or i32 %173, %174
  %176 = xor i32 %175, %96
  %177 = add i32 %116, %81
  %178 = shl i32 %177, 7
  %179 = lshr i32 %177, 25
  %180 = or i32 %178, %179
  %181 = xor i32 %180, %131
  %182 = add i32 %181, %116
  %183 = shl i32 %182, 9
  %184 = lshr i32 %182, 23
  %185 = or i32 %183, %184
  %186 = xor i32 %185, %146
  %187 = add i32 %186, %181
  %188 = shl i32 %187, 13
  %189 = lshr i32 %187, 19
  %190 = or i32 %188, %189
  %191 = xor i32 %190, %81
  %192 = add i32 %191, %186
  %193 = shl i32 %192, 18
  %194 = lshr i32 %192, 14
  %195 = or i32 %193, %194
  %196 = xor i32 %195, %116
  %197 = add i32 %136, %101
  %198 = shl i32 %197, 7
  %199 = lshr i32 %197, 25
  %200 = or i32 %198, %199
  %201 = xor i32 %200, %151
  %202 = add i32 %201, %136
  %203 = shl i32 %202, 9
  %204 = lshr i32 %202, 23
  %205 = or i32 %203, %204
  %206 = xor i32 %205, %86
  %207 = add i32 %206, %201
  %208 = shl i32 %207, 13
  %209 = lshr i32 %207, 19
  %210 = or i32 %208, %209
  %211 = xor i32 %210, %101
  %212 = add i32 %211, %206
  %213 = shl i32 %212, 18
  %214 = lshr i32 %212, 14
  %215 = or i32 %213, %214
  %216 = xor i32 %215, %136
  %217 = add i32 %156, %121
  %218 = shl i32 %217, 7
  %219 = lshr i32 %217, 25
  %220 = or i32 %218, %219
  %221 = xor i32 %91, %220
  %222 = add i32 %221, %156
  %223 = shl i32 %222, 9
  %224 = lshr i32 %222, 23
  %225 = or i32 %223, %224
  %226 = xor i32 %225, %106
  %227 = add i32 %226, %221
  %228 = shl i32 %227, 13
  %229 = lshr i32 %227, 19
  %230 = or i32 %228, %229
  %231 = xor i32 %230, %121
  %232 = add i32 %231, %226
  %233 = shl i32 %232, 18
  %234 = lshr i32 %232, 14
  %235 = or i32 %233, %234
  %236 = xor i32 %235, %156
  %237 = add nsw i32 %76, -2
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %59

239:                                              ; preds = %59
  %240 = insertelement <4 x i32> undef, i32 %176, i32 0
  %241 = insertelement <4 x i32> %240, i32 %161, i32 1
  %242 = insertelement <4 x i32> %241, i32 %166, i32 2
  %243 = insertelement <4 x i32> %242, i32 %171, i32 3
  %244 = add <4 x i32> %243, %30
  %245 = insertelement <4 x i32> undef, i32 %191, i32 0
  %246 = insertelement <4 x i32> %245, i32 %196, i32 1
  %247 = insertelement <4 x i32> %246, i32 %181, i32 2
  %248 = insertelement <4 x i32> %247, i32 %186, i32 3
  %249 = add <4 x i32> %248, %34
  %250 = insertelement <4 x i32> undef, i32 %206, i32 0
  %251 = insertelement <4 x i32> %250, i32 %211, i32 1
  %252 = insertelement <4 x i32> %251, i32 %216, i32 2
  %253 = insertelement <4 x i32> %252, i32 %201, i32 3
  %254 = add <4 x i32> %253, %38
  %255 = insertelement <4 x i32> undef, i32 %221, i32 0
  %256 = insertelement <4 x i32> %255, i32 %226, i32 1
  %257 = insertelement <4 x i32> %256, i32 %231, i32 2
  %258 = insertelement <4 x i32> %257, i32 %236, i32 3
  %259 = add <4 x i32> %258, %42
  %260 = lshr i64 %22, 1
  %261 = and i64 %22, 1
  %262 = mul nuw i64 %261, %2
  %263 = add i64 %262, %260
  %264 = getelementptr inbounds %struct.block_t, %struct.block_t* %0, i64 %263, i32 0, i64 0
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %265, align 1
  %266 = getelementptr inbounds %struct.block_t, %struct.block_t* %0, i64 %263, i32 0, i64 4
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %267, align 1
  %268 = getelementptr inbounds %struct.block_t, %struct.block_t* %0, i64 %263, i32 0, i64 8
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %269, align 1
  %270 = getelementptr inbounds %struct.block_t, %struct.block_t* %0, i64 %263, i32 0, i64 12
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %271, align 1
  %272 = add nuw i64 %22, 1
  %273 = icmp eq i64 %272, %4
  br i1 %273, label %20, label %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
