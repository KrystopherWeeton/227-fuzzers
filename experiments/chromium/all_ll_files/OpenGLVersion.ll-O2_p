; ModuleID = '../../third_party/dawn/src/dawn_native/opengl/OpenGLVersion.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/opengl/OpenGLVersion.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.Result = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dawn_native::ErrorData"* }
%"class.dawn_native::ErrorData" = type { i32, %"class.std::__1::basic_string", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"class.std::__1::__compressed_pair.3" }
%"struct.dawn_native::ErrorData::BacktraceRecord" = type { i8*, i8*, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"* }
%"struct.dawn_native::opengl::OpenGLVersion" = type { i32, i32, i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@.str = private unnamed_addr constant [12 x i8] c"glGetString\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Couldn't load glGetString\00", align 1
@.str.2 = private unnamed_addr constant [64 x i8] c"../../third_party/dawn/src/dawn_native/opengl/OpenGLVersion.cpp\00", align 1
@__func__._ZN11dawn_native6opengl13OpenGLVersion10InitializeEPFPvPKcE = private unnamed_addr constant [11 x i8] c"Initialize\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"OpenGL ES\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl13OpenGLVersion10InitializeEPFPvPKcE(%class.Result* noalias nocapture sret, %"struct.dawn_native::opengl::OpenGLVersion"* nocapture, i8* (i8*)* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = tail call i8* %2(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #11
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %23

8:                                                ; preds = %3
  %9 = tail call i8* @_Znwm(i64 32) #12
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast i64* %11 to <2 x i64>*
  store <2 x i64> <i64 25, i64 -9223372036854775776>, <2 x i64>* %12, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %9, i8* align 1 getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i64 25, i1 false) #11
  %13 = getelementptr inbounds i8, i8* %9, i64 25
  store i8 0, i8* %13, align 1
  %14 = call %"class.dawn_native::ErrorData"* @_ZN11dawn_native9ErrorData6CreateENS_17InternalErrorTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcSA_i(i32 2, %"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN11dawn_native6opengl13OpenGLVersion10InitializeEPFPvPKcE, i64 0, i64 0), i32 25) #11
  %15 = ptrtoint %"class.dawn_native::ErrorData"* %14 to i64
  %16 = bitcast %class.Result* %0 to i64*
  store i64 %15, i64* %16, align 8
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %126

21:                                               ; preds = %8
  %22 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %22) #12
  br label %126

23:                                               ; preds = %3
  %24 = bitcast i8* %6 to i8* (i32)*
  %25 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #11
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %29 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 24, i1 false)
  %30 = tail call i8* %24(i32 7938) #11
  %31 = tail call i64 @strlen(i8* %30) #11
  %32 = icmp ugt i64 %31, -17
  br i1 %32, label %33, label %35

33:                                               ; preds = %23
  %34 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %34) #13
  unreachable

35:                                               ; preds = %23
  %36 = icmp ult i64 %31, 23
  br i1 %36, label %43, label %37

37:                                               ; preds = %35
  %38 = add nuw i64 %31, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #12
  store i8* %40, i8** %26, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %28, align 8
  store i64 %31, i64* %27, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %48

43:                                               ; preds = %35
  %44 = trunc i64 %31 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  %47 = icmp eq i64 %31, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %43, %37
  %49 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %45, %43 ], [ %42, %37 ]
  %50 = phi i8* [ %25, %43 ], [ %40, %37 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* align 1 %30, i64 %31, i1 false) #11
  br label %51

51:                                               ; preds = %43, %48
  %52 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %45, %43 ], [ %49, %48 ]
  %53 = phi i8* [ %25, %43 ], [ %50, %48 ]
  %54 = getelementptr inbounds i8, i8* %53, i64 %31
  store i8 0, i8* %54, align 1
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp slt i8 %56, 0
  %58 = load i8*, i8** %26, align 8
  %59 = select i1 %57, i8* %58, i8* %25
  %60 = load i64, i64* %27, align 8
  %61 = zext i8 %56 to i64
  %62 = select i1 %57, i64 %60, i64 %61
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = ptrtoint i8* %59 to i64
  %66 = icmp slt i64 %62, 9
  %67 = ptrtoint i8* %58 to i64
  %68 = trunc i64 %67 to i32
  br i1 %66, label %87, label %69

69:                                               ; preds = %51, %80
  %70 = phi i64 [ %83, %80 ], [ %62, %51 ]
  %71 = phi i8* [ %81, %80 ], [ %59, %51 ]
  %72 = add nsw i64 %70, -8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %69
  %75 = call i8* @memchr(i8* %71, i32 79, i64 %72) #11
  %76 = icmp eq i8* %75, null
  br i1 %76, label %87, label %77

77:                                               ; preds = %74
  %78 = call i32 @bcmp(i8* nonnull %75, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 9) #11
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %75, i64 1
  %82 = ptrtoint i8* %81 to i64
  %83 = sub i64 %64, %82
  %84 = icmp slt i64 %83, 9
  br i1 %84, label %87, label %69

85:                                               ; preds = %77
  %86 = icmp eq i8* %75, %63
  br i1 %86, label %87, label %89

87:                                               ; preds = %80, %74, %69, %51, %85
  %88 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %1, i64 0, i32 2
  br label %103

89:                                               ; preds = %85
  %90 = ptrtoint i8* %75 to i64
  %91 = sub i64 %90, %65
  %92 = icmp eq i64 %91, -1
  %93 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %1, i64 0, i32 2
  br i1 %92, label %103, label %94

94:                                               ; preds = %89
  store i32 1, i32* %93, align 4
  %95 = select i1 %57, i8* %58, i8* %25
  %96 = select i1 %57, i8* %58, i8* %25
  %97 = getelementptr inbounds i8, i8* %95, i64 10
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = add nsw i32 %99, -48
  %101 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %1, i64 0, i32 0
  store i32 %100, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %96, i64 12
  br label %117

103:                                              ; preds = %87, %89
  %104 = phi i32* [ %88, %87 ], [ %93, %89 ]
  store i32 0, i32* %104, align 4
  br i1 %57, label %105, label %108

105:                                              ; preds = %103
  %106 = load i8, i8* %58, align 1
  %107 = sext i8 %106 to i32
  br label %111

108:                                              ; preds = %103
  %109 = shl i32 %68, 24
  %110 = ashr exact i32 %109, 24
  br label %111

111:                                              ; preds = %105, %108
  %112 = phi i32 [ %107, %105 ], [ %110, %108 ]
  %113 = phi i8* [ %58, %105 ], [ %25, %108 ]
  %114 = add nsw i32 %112, -48
  %115 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %1, i64 0, i32 0
  store i32 %114, i32* %115, align 4
  %116 = getelementptr inbounds i8, i8* %113, i64 2
  br label %117

117:                                              ; preds = %111, %94
  %118 = phi i8* [ %116, %111 ], [ %102, %94 ]
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = add nsw i32 %120, -48
  %122 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %1, i64 0, i32 1
  store i32 %121, i32* %122, align 4
  %123 = bitcast %class.Result* %0 to i64*
  store i64 0, i64* %123, align 8
  br i1 %57, label %124, label %125

124:                                              ; preds = %117
  call void @_ZdlPv(i8* %58) #12
  br label %125

125:                                              ; preds = %117, %124
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #11
  br label %126

126:                                              ; preds = %21, %8, %125
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.dawn_native::ErrorData"* @_ZN11dawn_native9ErrorData6CreateENS_17InternalErrorTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcSA_i(i32, %"class.std::__1::basic_string"*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11dawn_native6opengl13OpenGLVersion9IsDesktopEv(%"struct.dawn_native::opengl::OpenGLVersion"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11dawn_native6opengl13OpenGLVersion4IsESEv(%"struct.dawn_native::opengl::OpenGLVersion"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 1
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11dawn_native6opengl13OpenGLVersion8GetMajorEv(%"struct.dawn_native::opengl::OpenGLVersion"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11dawn_native6opengl13OpenGLVersion8GetMinorEv(%"struct.dawn_native::opengl::OpenGLVersion"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11dawn_native6opengl13OpenGLVersion9IsAtLeastEjj(%"struct.dawn_native::opengl::OpenGLVersion"*, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLVersion", %"struct.dawn_native::opengl::OpenGLVersion"* %0, i64 0, i32 1
  %6 = load i32, i32* %4, align 4
  %7 = icmp ult i32 %6, %1
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = icmp ugt i32 %6, %1
  br i1 %9, label %13, label %10

10:                                               ; preds = %8
  %11 = load i32, i32* %5, align 4
  %12 = icmp uge i32 %11, %2
  br label %13

13:                                               ; preds = %3, %8, %10
  %14 = phi i1 [ %12, %10 ], [ false, %3 ], [ true, %8 ]
  ret i1 %14
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
