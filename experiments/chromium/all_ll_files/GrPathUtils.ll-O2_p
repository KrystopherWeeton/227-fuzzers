; ModuleID = '../../third_party/skia/src/gpu/geometry/GrPathUtils.cpp'
source_filename = "../../third_party/skia/src/gpu/geometry/GrPathUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.GrPathUtils::QuadUVMatrix" = type { [6 x float] }
%class.SkTArray = type { %struct.SkPoint*, i64 }

$_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z19max_bezier_verticesj(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 10
  %3 = select i1 %2, i32 %0, i32 10
  %4 = shl i32 1, %3
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN11GrPathUtils19scaleToleranceToSrcEfRK8SkMatrixRK6SkRect(float, %class.SkMatrix* dereferenceable(40), %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 {
  %4 = alloca %class.SkMatrix, align 16
  %5 = tail call float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix* %1) #8
  %6 = fcmp olt float %5, 0.000000e+00
  br i1 %6, label %7, label %55

7:                                                ; preds = %3
  %8 = bitcast %class.SkMatrix* %4 to i8*
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 5
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 6
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 7
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %19 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %20 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %21 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #8
  %22 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %22, align 16
  %23 = bitcast float* %13 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %23, align 16
  store float 1.000000e+00, float* %17, align 16
  store i32 16, i32* %9, align 4
  %24 = load float, float* %19, align 4
  %25 = load float, float* %20, align 4
  %26 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %4, float %24, float %25) #8
  %27 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %4, %class.SkMatrix* dereferenceable(40) %1) #8
  %28 = call float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix* nonnull %4, float 1.000000e+00) #8
  %29 = fcmp olt float %5, %28
  %30 = select i1 %29, float %28, float %5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #8
  %31 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %31, align 16
  store float 1.000000e+00, float* %13, align 16
  store float 0.000000e+00, float* %14, align 4
  store float 0.000000e+00, float* %15, align 8
  store float 0.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 16
  store i32 16, i32* %9, align 4
  %32 = load float, float* %18, align 4
  %33 = load float, float* %20, align 4
  %34 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %4, float %32, float %33) #8
  %35 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %4, %class.SkMatrix* dereferenceable(40) %1) #8
  %36 = call float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix* nonnull %4, float 1.000000e+00) #8
  %37 = fcmp olt float %30, %36
  %38 = select i1 %37, float %36, float %30
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #8
  %39 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %39, align 16
  store float 1.000000e+00, float* %13, align 16
  store float 0.000000e+00, float* %14, align 4
  store float 0.000000e+00, float* %15, align 8
  store float 0.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 16
  store i32 16, i32* %9, align 4
  %40 = load float, float* %19, align 4
  %41 = load float, float* %21, align 4
  %42 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %4, float %40, float %41) #8
  %43 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %4, %class.SkMatrix* dereferenceable(40) %1) #8
  %44 = call float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix* nonnull %4, float 1.000000e+00) #8
  %45 = fcmp olt float %38, %44
  %46 = select i1 %45, float %44, float %38
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #8
  store float 1.000000e+00, float* %10, align 16
  store float 0.000000e+00, float* %11, align 4
  %47 = bitcast float* %12 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %47, align 8
  store float 0.000000e+00, float* %15, align 8
  store float 0.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 16
  store i32 16, i32* %9, align 4
  %48 = load float, float* %18, align 4
  %49 = load float, float* %21, align 4
  %50 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %4, float %48, float %49) #8
  %51 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %4, %class.SkMatrix* dereferenceable(40) %1) #8
  %52 = call float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix* nonnull %4, float 1.000000e+00) #8
  %53 = fcmp olt float %46, %52
  %54 = select i1 %53, float %52, float %46
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #8
  br label %55

55:                                               ; preds = %7, %3
  %56 = phi float [ %54, %7 ], [ %5, %3 ]
  %57 = fcmp ugt float %56, 0.000000e+00
  br i1 %57, label %69, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %60 = bitcast float* %59 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 4
  %62 = bitcast %struct.SkRect* %2 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 4
  %64 = fsub <2 x float> %61, %63
  %65 = extractelement <2 x float> %64, i32 0
  %66 = extractelement <2 x float> %64, i32 1
  %67 = fcmp olt float %65, %66
  %68 = select i1 %67, float %66, float %65
  br label %71

69:                                               ; preds = %55
  %70 = fdiv float %0, %56
  br label %71

71:                                               ; preds = %69, %58
  %72 = phi float [ %68, %58 ], [ %70, %69 ]
  %73 = fcmp olt float %72, 0x3F1A36E2E0000000
  %74 = select i1 %73, float 0x3F1A36E2E0000000, float %72
  ret float %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

declare float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix*, float) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrPathUtils19quadraticPointCountEPK7SkPointf(%struct.SkPoint* nocapture readonly, float) local_unnamed_addr #4 {
  %3 = fdiv float 1.000000e+00, %1
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %7 = bitcast %struct.SkPoint* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %10 = bitcast %struct.SkPoint* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fmul <2 x float> %8, <float -2.000000e+00, float -2.000000e+00>
  %13 = fadd <2 x float> %5, %12
  %14 = fadd <2 x float> %11, %13
  %15 = fmul <2 x float> %14, %14
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %18 = fadd float %16, %17
  %19 = fmul float %3, %3
  %20 = fmul float %19, 6.250000e-02
  %21 = fmul float %20, %18
  %22 = bitcast float %21 to i32
  %23 = add i32 %22, 8388607
  %24 = ashr i32 %23, 23
  %25 = add nsw i32 %24, -127
  %26 = ashr i32 %25, 31
  %27 = xor i32 %26, -1
  %28 = and i32 %25, %27
  %29 = add nsw i32 %28, 3
  %30 = ashr i32 %29, 2
  %31 = icmp ult i32 %30, 10
  %32 = select i1 %31, i32 %30, i32 10
  %33 = shl i32 1, %32
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrPathUtils23generateQuadraticPointsERK7SkPointS2_S2_fPPS0_j(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint**, i32) local_unnamed_addr #1 {
  %7 = alloca <4 x float>, align 16
  %8 = bitcast <4 x float>* %7 to [2 x %struct.SkPoint]*
  %9 = alloca %struct.SkPoint, align 4
  %10 = icmp ult i32 %5, 2
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = tail call float @_ZN11SkPointPriv31DistanceToLineSegmentBetweenSqdERK7SkPointS2_S2_(%struct.SkPoint* dereferenceable(8) %1, %struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %2) #8
  %13 = fcmp olt float %12, %3
  br i1 %13, label %14, label %21

14:                                               ; preds = %11, %6
  %15 = bitcast %struct.SkPoint** %4 to i64**
  %16 = load i64*, i64** %15, align 8
  %17 = bitcast %struct.SkPoint* %2 to i64*
  %18 = load i64, i64* %17, align 4
  store i64 %18, i64* %16, align 4
  %19 = load %struct.SkPoint*, %struct.SkPoint** %4, align 8
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %19, i64 1
  store %struct.SkPoint* %20, %struct.SkPoint** %4, align 8
  br label %57

21:                                               ; preds = %11
  %22 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #8
  %23 = bitcast <4 x float>* %7 to %struct.SkPoint*
  %24 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %8, i64 0, i64 1
  %25 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = extractelement <2 x float> %28, i32 0
  %34 = extractelement <2 x float> %28, i32 1
  %35 = shufflevector <2 x float> %26, <2 x float> %28, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = insertelement <4 x float> undef, float %33, i32 0
  %37 = insertelement <4 x float> %36, float %34, i32 1
  %38 = insertelement <4 x float> %37, float %30, i32 2
  %39 = insertelement <4 x float> %38, float %32, i32 3
  %40 = fadd <4 x float> %35, %39
  %41 = fmul <4 x float> %40, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %41, <4 x float>* %7, align 16
  %42 = bitcast %struct.SkPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 0
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  %45 = extractelement <4 x float> %41, i32 0
  %46 = extractelement <4 x float> %41, i32 2
  %47 = fadd float %45, %46
  %48 = fmul float %47, 5.000000e-01
  store float %48, float* %43, align 4
  %49 = extractelement <4 x float> %41, i32 1
  %50 = extractelement <4 x float> %41, i32 3
  %51 = fadd float %49, %50
  %52 = fmul float %51, 5.000000e-01
  store float %52, float* %44, align 4
  %53 = lshr i32 %5, 1
  %54 = call i32 @_ZN11GrPathUtils23generateQuadraticPointsERK7SkPointS2_S2_fPPS0_j(%struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* nonnull dereferenceable(8) %23, %struct.SkPoint* nonnull dereferenceable(8) %9, float %3, %struct.SkPoint** %4, i32 %53)
  %55 = call i32 @_ZN11GrPathUtils23generateQuadraticPointsERK7SkPointS2_S2_fPPS0_j(%struct.SkPoint* nonnull dereferenceable(8) %9, %struct.SkPoint* dereferenceable(8) %24, %struct.SkPoint* dereferenceable(8) %2, float %3, %struct.SkPoint** %4, i32 %53)
  %56 = add i32 %55, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #8
  br label %57

57:                                               ; preds = %21, %14
  %58 = phi i32 [ 1, %14 ], [ %56, %21 ]
  ret i32 %58
}

declare float @_ZN11SkPointPriv31DistanceToLineSegmentBetweenSqdERK7SkPointS2_S2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrPathUtils15cubicPointCountEPK7SkPointf(%struct.SkPoint* nocapture readonly, float) local_unnamed_addr #5 {
  %3 = fdiv float 1.000000e+00, %1
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 1
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %7 = bitcast %struct.SkPoint* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 1
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %10 = bitcast %struct.SkPoint* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 1
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %13 = bitcast %struct.SkPoint* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = shufflevector <2 x float> %14, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %17 = shufflevector <4 x float> %15, <4 x float> %16, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %18 = shufflevector <2 x float> %8, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %20 = shufflevector <4 x float> %18, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %21 = shufflevector <2 x float> %5, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <2 x float> %8, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %23 = shufflevector <4 x float> %21, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %24 = fmul <4 x float> %20, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %25 = fadd <4 x float> %23, %24
  %26 = fadd <4 x float> %17, %25
  %27 = fmul <4 x float> %26, %26
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 0, i32 2>
  %29 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 1, i32 3>
  %30 = fadd <2 x float> %28, %29
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = fcmp olt float %31, %32
  %34 = select i1 %33, float %32, float %31
  %35 = fmul float %3, %3
  %36 = fmul float %35, 5.625000e-01
  %37 = fmul float %36, %34
  %38 = bitcast float %37 to i32
  %39 = add i32 %38, 8388607
  %40 = ashr i32 %39, 23
  %41 = add nsw i32 %40, -127
  %42 = ashr i32 %41, 31
  %43 = xor i32 %42, -1
  %44 = and i32 %41, %43
  %45 = add nsw i32 %44, 3
  %46 = ashr i32 %45, 2
  %47 = icmp ult i32 %46, 10
  %48 = select i1 %47, i32 %46, i32 10
  %49 = shl i32 1, %48
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrPathUtils19generateCubicPointsERK7SkPointS2_S2_S2_fPPS0_j(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint**, i32) local_unnamed_addr #1 {
  %8 = alloca [3 x %struct.SkPoint], align 16
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to [2 x %struct.SkPoint]*
  %11 = alloca %struct.SkPoint, align 4
  %12 = icmp ult i32 %6, 2
  br i1 %12, label %19, label %13

13:                                               ; preds = %7
  %14 = tail call float @_ZN11SkPointPriv31DistanceToLineSegmentBetweenSqdERK7SkPointS2_S2_(%struct.SkPoint* dereferenceable(8) %1, %struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %3) #8
  %15 = fcmp olt float %14, %4
  br i1 %15, label %16, label %26

16:                                               ; preds = %13
  %17 = tail call float @_ZN11SkPointPriv31DistanceToLineSegmentBetweenSqdERK7SkPointS2_S2_(%struct.SkPoint* dereferenceable(8) %2, %struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %3) #8
  %18 = fcmp olt float %17, %4
  br i1 %18, label %19, label %26

19:                                               ; preds = %16, %7
  %20 = bitcast %struct.SkPoint** %5 to i64**
  %21 = load i64*, i64** %20, align 8
  %22 = bitcast %struct.SkPoint* %3 to i64*
  %23 = load i64, i64* %22, align 4
  store i64 %23, i64* %21, align 4
  %24 = load %struct.SkPoint*, %struct.SkPoint** %5, align 8
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %24, i64 1
  store %struct.SkPoint* %25, %struct.SkPoint** %5, align 8
  br label %84

26:                                               ; preds = %16, %13
  %27 = bitcast [3 x %struct.SkPoint]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #8
  %28 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %8, i64 0, i64 0
  %29 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %8, i64 0, i64 2
  %30 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %8, i64 0, i64 2, i32 1
  %31 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %38 = load float, float* %37, align 4
  %39 = extractelement <2 x float> %34, i32 0
  %40 = extractelement <2 x float> %34, i32 1
  %41 = shufflevector <2 x float> %32, <2 x float> %34, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %42 = insertelement <4 x float> undef, float %39, i32 0
  %43 = insertelement <4 x float> %42, float %40, i32 1
  %44 = insertelement <4 x float> %43, float %36, i32 2
  %45 = insertelement <4 x float> %44, float %38, i32 3
  %46 = fadd <4 x float> %41, %45
  %47 = fmul <4 x float> %46, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = bitcast [3 x %struct.SkPoint]* %8 to <4 x float>*
  store <4 x float> %47, <4 x float>* %48, align 16
  %49 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %8, i64 0, i64 2, i32 0
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fadd float %36, %51
  %53 = fmul float %52, 5.000000e-01
  store float %53, float* %49, align 16
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  %55 = load float, float* %54, align 4
  %56 = fadd float %38, %55
  %57 = fmul float %56, 5.000000e-01
  store float %57, float* %30, align 4
  %58 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #8
  %59 = bitcast <4 x float>* %9 to %struct.SkPoint*
  %60 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %10, i64 0, i64 1
  %61 = extractelement <4 x float> %47, i32 2
  %62 = extractelement <4 x float> %47, i32 3
  %63 = insertelement <4 x float> undef, float %61, i32 0
  %64 = insertelement <4 x float> %63, float %62, i32 1
  %65 = insertelement <4 x float> %64, float %53, i32 2
  %66 = insertelement <4 x float> %65, float %57, i32 3
  %67 = fadd <4 x float> %47, %66
  %68 = fmul <4 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %68, <4 x float>* %9, align 16
  %69 = bitcast %struct.SkPoint* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #8
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 0
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 1
  %72 = extractelement <4 x float> %68, i32 0
  %73 = extractelement <4 x float> %68, i32 2
  %74 = fadd float %72, %73
  %75 = fmul float %74, 5.000000e-01
  store float %75, float* %70, align 4
  %76 = extractelement <4 x float> %68, i32 1
  %77 = extractelement <4 x float> %68, i32 3
  %78 = fadd float %76, %77
  %79 = fmul float %78, 5.000000e-01
  store float %79, float* %71, align 4
  %80 = lshr i32 %6, 1
  %81 = call i32 @_ZN11GrPathUtils19generateCubicPointsERK7SkPointS2_S2_S2_fPPS0_j(%struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* nonnull dereferenceable(8) %28, %struct.SkPoint* nonnull dereferenceable(8) %59, %struct.SkPoint* nonnull dereferenceable(8) %11, float %4, %struct.SkPoint** %5, i32 %80)
  %82 = call i32 @_ZN11GrPathUtils19generateCubicPointsERK7SkPointS2_S2_S2_fPPS0_j(%struct.SkPoint* nonnull dereferenceable(8) %11, %struct.SkPoint* dereferenceable(8) %60, %struct.SkPoint* dereferenceable(8) %29, %struct.SkPoint* dereferenceable(8) %3, float %4, %struct.SkPoint** %5, i32 %80)
  %83 = add i32 %82, %81
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #8
  br label %84

84:                                               ; preds = %26, %19
  %85 = phi i32 [ 1, %19 ], [ %83, %26 ]
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrPathUtils12QuadUVMatrix3setEPK7SkPoint(%"class.GrPathUtils::QuadUVMatrix"*, %struct.SkPoint* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = shufflevector <2 x float> %4, <2 x float> %7, <2 x i32> <i32 1, i32 2>
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = shufflevector <2 x float> %4, <2 x float> %7, <2 x i32> <i32 0, i32 3>
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = shufflevector <2 x double> %11, <2 x double> %9, <2 x i32> <i32 0, i32 2>
  %17 = shufflevector <2 x double> %11, <2 x double> %9, <2 x i32> <i32 1, i32 3>
  %18 = fmul <2 x double> %16, %17
  %19 = extractelement <2 x double> %18, i32 0
  %20 = extractelement <2 x double> %18, i32 1
  %21 = fsub double %19, %20
  %22 = fmul <2 x double> %9, %15
  %23 = extractelement <2 x double> %22, i32 0
  %24 = fadd double %21, %23
  %25 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %26 = shufflevector <2 x double> %25, <2 x double> %15, <2 x i32> <i32 0, i32 2>
  %27 = fmul <2 x double> %26, %11
  %28 = extractelement <2 x double> %27, i32 0
  %29 = fsub double %24, %28
  %30 = extractelement <2 x double> %22, i32 1
  %31 = fadd double %30, %29
  %32 = extractelement <2 x double> %27, i32 1
  %33 = fsub double %31, %32
  %34 = fptrunc double %33 to float
  %35 = bitcast float %34 to i32
  %36 = and i32 %35, 2139095040
  %37 = icmp eq i32 %36, 2139095040
  %38 = tail call float @llvm.fabs.f32(float %34) #8
  %39 = fcmp ole float %38, 0x3E70000000000000
  %40 = or i1 %39, %37
  br i1 %40, label %41, label %95

41:                                               ; preds = %2
  %42 = fsub <2 x float> %4, %7
  %43 = fmul <2 x float> %42, %42
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = fadd float %44, %45
  %47 = fsub <2 x float> %7, %14
  %48 = fmul <2 x float> %47, %47
  %49 = extractelement <2 x float> %48, i32 0
  %50 = extractelement <2 x float> %48, i32 1
  %51 = fadd float %49, %50
  %52 = fcmp ogt float %51, %46
  %53 = zext i1 %52 to i32
  %54 = select i1 %52, float %51, float %46
  %55 = fsub <2 x float> %14, %4
  %56 = fmul <2 x float> %55, %55
  %57 = extractelement <2 x float> %56, i32 0
  %58 = extractelement <2 x float> %56, i32 1
  %59 = fadd float %57, %58
  %60 = fcmp ogt float %59, %54
  %61 = select i1 %60, i32 2, i32 %53
  %62 = select i1 %60, float %59, float %54
  %63 = fcmp ogt float %62, 0.000000e+00
  br i1 %63, label %64, label %92

64:                                               ; preds = %41
  %65 = trunc i32 %61 to i8
  %66 = add nuw nsw i8 %65, 1
  %67 = urem i8 %66, 3
  %68 = zext i8 %67 to i64
  %69 = zext i32 %61 to i64
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %68, i32 0
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %69, i32 0
  %73 = load float, float* %72, align 4
  %74 = fsub float %71, %73
  %75 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %68, i32 1
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %69, i32 1
  %78 = load float, float* %77, align 4
  %79 = fsub float %76, %78
  %80 = fsub float -0.000000e+00, %74
  %81 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 0
  store float 0.000000e+00, float* %81, align 4
  %82 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %82, align 4
  %83 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %83, align 4
  %84 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 3
  store float %79, float* %84, align 4
  %85 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 4
  store float %80, float* %85, align 4
  %86 = load float, float* %72, align 4
  %87 = fmul float %79, %86
  %88 = load float, float* %77, align 4
  %89 = fmul float %88, %80
  %90 = fadd float %87, %89
  %91 = fsub float -0.000000e+00, %90
  br label %142

92:                                               ; preds = %41
  %93 = bitcast %"class.GrPathUtils::QuadUVMatrix"* %0 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+02, float 0.000000e+00>, <4 x float>* %93, align 4
  %94 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 4
  store float 0.000000e+00, float* %94, align 4
  br label %142

95:                                               ; preds = %2
  %96 = fdiv double 1.000000e+00, %33
  %97 = shufflevector <2 x double> %25, <2 x double> %11, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x double> %9, <2 x double> %15, <2 x i32> <i32 0, i32 2>
  %99 = fsub <2 x double> %97, %98
  %100 = fsub <2 x double> %22, %27
  %101 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %102 = fsub <2 x double> %9, %101
  %103 = shufflevector <2 x double> %102, <2 x double> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %104 = fmul <2 x double> %99, <double 5.000000e-01, double 5.000000e-01>
  %105 = fadd <2 x double> %102, %104
  %106 = extractelement <2 x double> %100, i32 0
  %107 = fmul double %106, 5.000000e-01
  %108 = fadd double %21, %107
  %109 = extractelement <2 x double> %105, i32 0
  %110 = insertelement <4 x double> undef, double %109, i32 0
  %111 = extractelement <2 x double> %105, i32 1
  %112 = insertelement <4 x double> %110, double %111, i32 1
  %113 = insertelement <4 x double> %112, double %108, i32 2
  %114 = shufflevector <4 x double> %113, <4 x double> %103, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %115 = insertelement <4 x double> undef, double %96, i32 0
  %116 = shufflevector <4 x double> %115, <4 x double> undef, <4 x i32> zeroinitializer
  %117 = fmul <4 x double> %114, %116
  %118 = fptrunc <4 x double> %117 to <4 x float>
  %119 = extractelement <2 x double> %102, i32 1
  %120 = fmul double %119, %96
  %121 = fptrunc double %120 to float
  %122 = fmul double %21, %96
  %123 = fptrunc double %122 to float
  %124 = extractelement <2 x double> %100, i32 1
  %125 = fadd double %124, %106
  %126 = fadd double %21, %125
  %127 = fmul double %126, %96
  %128 = fptrunc double %127 to float
  %129 = fcmp une float %128, 1.000000e+00
  br i1 %129, label %130, label %139

130:                                              ; preds = %95
  %131 = fdiv float 1.000000e+00, %128
  %132 = insertelement <4 x float> undef, float %131, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = fmul <4 x float> %133, %118
  %135 = bitcast %"class.GrPathUtils::QuadUVMatrix"* %0 to <4 x float>*
  store <4 x float> %134, <4 x float>* %135, align 4
  %136 = fmul float %131, %121
  %137 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 4
  store float %136, float* %137, align 4
  %138 = fmul float %131, %123
  br label %142

139:                                              ; preds = %95
  %140 = bitcast %"class.GrPathUtils::QuadUVMatrix"* %0 to <4 x float>*
  store <4 x float> %118, <4 x float>* %140, align 4
  %141 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 4
  store float %121, float* %141, align 4
  br label %142

142:                                              ; preds = %130, %139, %64, %92
  %143 = phi float [ %138, %130 ], [ %123, %139 ], [ %91, %64 ], [ 1.000000e+02, %92 ]
  %144 = getelementptr inbounds %"class.GrPathUtils::QuadUVMatrix", %"class.GrPathUtils::QuadUVMatrix"* %0, i64 0, i32 0, i64 5
  store float %143, float* %144, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrPathUtils11getConicKLMEPK7SkPointfP8SkMatrix(%struct.SkPoint* nocapture readonly, float, %class.SkMatrix*) local_unnamed_addr #1 {
  %4 = fmul float %1, 2.000000e+00
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fsub float %6, %8
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  store i32 128, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  store float %9, float* %11, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %15 = load float, float* %14, align 4
  %16 = fsub float %13, %15
  store i32 128, i32* %10, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  store float %16, float* %17, align 4
  %18 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = shufflevector <2 x float> %19, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %21 = bitcast float* %14 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fmul <2 x float> %22, %20
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fsub float %24, %25
  store i32 128, i32* %10, align 4
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  store float %26, float* %27, align 4
  %28 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %29 = load float, float* %28, align 4
  %30 = load float, float* %7, align 4
  %31 = fsub float %29, %30
  %32 = fmul float %4, %31
  store i32 128, i32* %10, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  store float %32, float* %33, align 4
  %34 = load float, float* %12, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %36 = load float, float* %35, align 4
  %37 = fsub float %34, %36
  %38 = fmul float %4, %37
  store i32 128, i32* %10, align 4
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  store float %38, float* %39, align 4
  %40 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  %42 = shufflevector <2 x float> %41, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %43 = bitcast float* %35 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 4
  %45 = fmul <2 x float> %44, %42
  %46 = extractelement <2 x float> %45, i32 0
  %47 = extractelement <2 x float> %45, i32 1
  %48 = fsub float %46, %47
  %49 = fmul float %4, %48
  store i32 128, i32* %10, align 4
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  store float %49, float* %50, align 4
  %51 = load float, float* %5, align 4
  %52 = load float, float* %28, align 4
  %53 = fsub float %51, %52
  %54 = fmul float %4, %53
  store i32 128, i32* %10, align 4
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  store float %54, float* %55, align 4
  %56 = load float, float* %35, align 4
  %57 = load float, float* %14, align 4
  %58 = fsub float %56, %57
  %59 = fmul float %4, %58
  store i32 128, i32* %10, align 4
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  store float %59, float* %60, align 4
  %61 = bitcast float* %35 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 4
  %63 = shufflevector <2 x float> %62, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %64 = bitcast float* %14 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 4
  %66 = fmul <2 x float> %65, %63
  %67 = extractelement <2 x float> %66, i32 0
  %68 = extractelement <2 x float> %66, i32 1
  %69 = fsub float %67, %68
  %70 = fmul float %4, %69
  %71 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  %72 = tail call float @llvm.fabs.f32(float %9)
  %73 = fcmp ogt float %72, 0.000000e+00
  %74 = select i1 %73, float %72, float 0.000000e+00
  %75 = tail call float @llvm.fabs.f32(float %16)
  %76 = fcmp olt float %74, %75
  %77 = select i1 %76, float %75, float %74
  %78 = tail call float @llvm.fabs.f32(float %26)
  %79 = fcmp olt float %77, %78
  %80 = select i1 %79, float %78, float %77
  %81 = tail call float @llvm.fabs.f32(float %32)
  %82 = fcmp olt float %80, %81
  %83 = select i1 %82, float %81, float %80
  %84 = tail call float @llvm.fabs.f32(float %38)
  %85 = fcmp olt float %83, %84
  %86 = select i1 %85, float %84, float %83
  %87 = tail call float @llvm.fabs.f32(float %49)
  %88 = fcmp olt float %86, %87
  %89 = select i1 %88, float %87, float %86
  %90 = tail call float @llvm.fabs.f32(float %54)
  %91 = fcmp olt float %89, %90
  %92 = select i1 %91, float %90, float %89
  %93 = tail call float @llvm.fabs.f32(float %59)
  %94 = fcmp olt float %92, %93
  %95 = select i1 %94, float %93, float %92
  %96 = tail call float @llvm.fabs.f32(float %70)
  %97 = fcmp olt float %95, %96
  %98 = select i1 %97, float %96, float %95
  %99 = fdiv float 1.000000e+01, %98
  %100 = bitcast %class.SkMatrix* %2 to <2 x float>*
  %101 = load <2 x float>, <2 x float>* %100, align 4
  %102 = insertelement <4 x float> undef, float %99, i32 0
  %103 = shufflevector <4 x float> %102, <4 x float> undef, <4 x i32> zeroinitializer
  %104 = extractelement <2 x float> %101, i32 0
  %105 = insertelement <4 x float> undef, float %104, i32 0
  %106 = extractelement <2 x float> %101, i32 1
  %107 = insertelement <4 x float> %105, float %106, i32 1
  %108 = insertelement <4 x float> %107, float %26, i32 2
  %109 = insertelement <4 x float> %108, float %32, i32 3
  %110 = fmul <4 x float> %103, %109
  %111 = bitcast %class.SkMatrix* %2 to <4 x float>*
  store <4 x float> %110, <4 x float>* %111, align 4
  %112 = insertelement <4 x float> undef, float %38, i32 0
  %113 = insertelement <4 x float> %112, float %49, i32 1
  %114 = insertelement <4 x float> %113, float %54, i32 2
  %115 = insertelement <4 x float> %114, float %59, i32 3
  %116 = fmul <4 x float> %103, %115
  %117 = bitcast float* %39 to <4 x float>*
  store <4 x float> %116, <4 x float>* %117, align 4
  store i32 128, i32* %10, align 4
  %118 = fmul float %99, %70
  store float %118, float* %71, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrPathUtils19convertCubicToQuadsEPK7SkPointfP8SkTArrayIS0_Lb1EE(%struct.SkPoint*, float, %class.SkTArray*) local_unnamed_addr #1 {
  %4 = alloca [10 x %struct.SkPoint], align 16
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, 0.000000e+00
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %7, %9
  %11 = fcmp ord float %10, 0.000000e+00
  br i1 %11, label %12, label %56

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 0.000000e+00
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %17 = load float, float* %16, align 4
  %18 = fmul float %15, %17
  %19 = fcmp ord float %18, 0.000000e+00
  br i1 %19, label %20, label %56

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 0.000000e+00
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %25 = load float, float* %24, align 4
  %26 = fmul float %23, %25
  %27 = fcmp ord float %26, 0.000000e+00
  br i1 %27, label %28, label %56

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, 0.000000e+00
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %33 = load float, float* %32, align 4
  %34 = fmul float %31, %33
  %35 = fcmp ord float %34, 0.000000e+00
  br i1 %35, label %36, label %56

36:                                               ; preds = %28
  %37 = bitcast float %1 to i32
  %38 = and i32 %37, 2139095040
  %39 = icmp eq i32 %38, 2139095040
  br i1 %39, label %56, label %40

40:                                               ; preds = %36
  %41 = bitcast [10 x %struct.SkPoint]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %41) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -1, i64 80, i1 false)
  %42 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %4, i64 0, i64 0
  %43 = call i32 @_Z24SkChopCubicAtInflectionsPK7SkPointPS_(%struct.SkPoint* %0, %struct.SkPoint* nonnull %42) #8
  %44 = fmul float %1, %1
  %45 = icmp sgt i32 %43, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %40
  %47 = zext i32 %43 to i64
  br label %49

48:                                               ; preds = %49, %40
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %41) #8
  br label %56

49:                                               ; preds = %49, %46
  %50 = phi i64 [ 0, %46 ], [ %54, %49 ]
  %51 = mul i64 %50, 3
  %52 = and i64 %51, 4294967295
  %53 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %4, i64 0, i64 %52
  call fastcc void @_ZN12_GLOBAL__N_133convert_noninflect_cubic_to_quadsEPK7SkPointfP8SkTArrayIS0_Lb1EEibb(%struct.SkPoint* %53, float %44, %class.SkTArray* %2, i32 0, i1 zeroext true, i1 zeroext true)
  %54 = add nuw nsw i64 %50, 1
  %55 = icmp eq i64 %54, %47
  br i1 %55, label %48, label %49

56:                                               ; preds = %36, %3, %12, %20, %28, %48
  ret void
}

declare i32 @_Z24SkChopCubicAtInflectionsPK7SkPointPS_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_133convert_noninflect_cubic_to_quadsEPK7SkPointfP8SkTArrayIS0_Lb1EEibb(%struct.SkPoint*, float, %class.SkTArray*, i32, i1 zeroext, i1 zeroext) unnamed_addr #4 {
  %7 = alloca <2 x float>, align 8
  %8 = bitcast <2 x float>* %7 to %struct.SkPoint*
  %9 = alloca <2 x float>, align 8
  %10 = bitcast <2 x float>* %9 to %struct.SkPoint*
  %11 = alloca [7 x %struct.SkPoint], align 16
  %12 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fsub <2 x float> %15, %17
  store <2 x float> %18, <2 x float>* %7, align 8
  %19 = bitcast <2 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %22 = bitcast %struct.SkPoint* %20 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = bitcast float* %21 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fsub <2 x float> %25, %23
  %27 = extractelement <2 x float> %26, i32 0
  %28 = extractelement <2 x float> %26, i32 1
  store <2 x float> %26, <2 x float>* %9, align 8
  %29 = fmul <2 x float> %18, %18
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  %32 = fadd float %30, %31
  %33 = fcmp olt float %32, 0x3F30000000000000
  %34 = fmul float %27, %27
  %35 = fmul float %28, %28
  %36 = fadd float %34, %35
  br i1 %33, label %37, label %63

37:                                               ; preds = %6
  %38 = fcmp olt float %36, 0x3F30000000000000
  br i1 %38, label %39, label %61

39:                                               ; preds = %37
  tail call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %2, i32 3, i32 1) #8
  %40 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 0
  %41 = load %struct.SkPoint*, %struct.SkPoint** %40, align 8
  %42 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = lshr i64 %43, 1
  %45 = and i64 %44, 2147483647
  %46 = add i64 %43, 6
  %47 = and i64 %46, 4294967294
  %48 = and i64 %43, -4294967295
  %49 = or i64 %47, %48
  store i64 %49, i64* %42, align 8
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 %45
  %51 = bitcast %struct.SkPoint* %0 to i64*
  %52 = bitcast %struct.SkPoint* %50 to i64*
  %53 = load i64, i64* %51, align 4
  store i64 %53, i64* %52, align 4
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %50, i64 1
  %55 = bitcast %struct.SkPoint* %54 to i64*
  %56 = load i64, i64* %51, align 4
  store i64 %56, i64* %55, align 4
  %57 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %50, i64 2
  %58 = bitcast %struct.SkPoint* %20 to i64*
  %59 = bitcast %struct.SkPoint* %57 to i64*
  %60 = load i64, i64* %58, align 4
  store i64 %60, i64* %59, align 4
  br label %121

61:                                               ; preds = %37
  %62 = fsub <2 x float> %25, %17
  store <2 x float> %62, <2 x float>* %7, align 8
  br label %63

63:                                               ; preds = %6, %61
  %64 = fcmp olt float %36, 0x3F30000000000000
  br i1 %64, label %65, label %67

65:                                               ; preds = %63
  %66 = fsub <2 x float> %15, %23
  store <2 x float> %66, <2 x float>* %9, align 8
  br label %67

67:                                               ; preds = %65, %63
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %8, float 1.500000e+00, %struct.SkPoint* nonnull %8) #8
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %10, float 1.500000e+00, %struct.SkPoint* nonnull %10) #8
  %68 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 4
  %70 = load <2 x float>, <2 x float>* %7, align 8
  %71 = fadd <2 x float> %69, %70
  %72 = bitcast %struct.SkPoint* %20 to <2 x float>*
  %73 = load <2 x float>, <2 x float>* %72, align 4
  %74 = load <2 x float>, <2 x float>* %9, align 8
  %75 = fadd <2 x float> %73, %74
  %76 = icmp sgt i32 %3, 10
  br i1 %76, label %87, label %77

77:                                               ; preds = %67
  %78 = extractelement <2 x float> %75, i32 0
  %79 = extractelement <2 x float> %75, i32 1
  %80 = extractelement <2 x float> %71, i32 0
  %81 = extractelement <2 x float> %71, i32 1
  %82 = fsub float %80, %78
  %83 = fsub float %81, %79
  %84 = fmul float %82, %82
  %85 = fmul float %83, %83
  %86 = fadd float %84, %85
  br label %87

87:                                               ; preds = %67, %77
  %88 = phi float [ %86, %77 ], [ 0.000000e+00, %67 ]
  %89 = fcmp olt float %88, %1
  br i1 %89, label %90, label %116

90:                                               ; preds = %87
  %91 = xor i1 %4, %5
  %92 = fadd <2 x float> %71, %75
  %93 = fmul <2 x float> %92, <float 5.000000e-01, float 5.000000e-01>
  %94 = select i1 %4, <2 x float> %71, <2 x float> %75
  %95 = select i1 %91, <2 x float> %94, <2 x float> %93
  call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %2, i32 3, i32 1) #8
  %96 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 0
  %97 = load %struct.SkPoint*, %struct.SkPoint** %96, align 8
  %98 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = lshr i64 %99, 1
  %101 = and i64 %100, 2147483647
  %102 = add i64 %99, 6
  %103 = and i64 %102, 4294967294
  %104 = and i64 %99, -4294967295
  %105 = or i64 %103, %104
  store i64 %105, i64* %98, align 8
  %106 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %97, i64 %101
  %107 = bitcast %struct.SkPoint* %0 to i64*
  %108 = bitcast %struct.SkPoint* %106 to i64*
  %109 = load i64, i64* %107, align 4
  store i64 %109, i64* %108, align 4
  %110 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %106, i64 1
  %111 = bitcast %struct.SkPoint* %110 to <2 x float>*
  store <2 x float> %95, <2 x float>* %111, align 4
  %112 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %106, i64 2
  %113 = bitcast %struct.SkPoint* %20 to i64*
  %114 = bitcast %struct.SkPoint* %112 to i64*
  %115 = load i64, i64* %113, align 4
  store i64 %115, i64* %114, align 4
  br label %121

116:                                              ; preds = %87
  %117 = bitcast [7 x %struct.SkPoint]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %117) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %117, i8 -1, i64 56, i1 false)
  %118 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %11, i64 0, i64 0
  call void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint* %0, %struct.SkPoint* nonnull %118) #8
  %119 = add nsw i32 %3, 1
  call fastcc void @_ZN12_GLOBAL__N_133convert_noninflect_cubic_to_quadsEPK7SkPointfP8SkTArrayIS0_Lb1EEibb(%struct.SkPoint* nonnull %118, float %1, %class.SkTArray* %2, i32 %119, i1 zeroext %4, i1 zeroext false)
  %120 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %11, i64 0, i64 3
  call fastcc void @_ZN12_GLOBAL__N_133convert_noninflect_cubic_to_quadsEPK7SkPointfP8SkTArrayIS0_Lb1EEibb(%struct.SkPoint* %120, float %1, %class.SkTArray* %2, i32 %119, i1 zeroext false, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %117) #8
  br label %121

121:                                              ; preds = %90, %116, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11GrPathUtils38convertCubicToQuadsConstrainToTangentsEPK7SkPointf20SkPathFirstDirectionP8SkTArrayIS0_Lb1EE(%struct.SkPoint*, float, i32, %class.SkTArray*) local_unnamed_addr #1 {
  %5 = alloca [10 x %struct.SkPoint], align 16
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fmul float %7, 0.000000e+00
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = fcmp ord float %11, 0.000000e+00
  br i1 %12, label %13, label %57

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fmul float %15, 0.000000e+00
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %18 = load float, float* %17, align 4
  %19 = fmul float %16, %18
  %20 = fcmp ord float %19, 0.000000e+00
  br i1 %20, label %21, label %57

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, 0.000000e+00
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %26 = load float, float* %25, align 4
  %27 = fmul float %24, %26
  %28 = fcmp ord float %27, 0.000000e+00
  br i1 %28, label %29, label %57

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %31 = load float, float* %30, align 4
  %32 = fmul float %31, 0.000000e+00
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %34 = load float, float* %33, align 4
  %35 = fmul float %32, %34
  %36 = fcmp ord float %35, 0.000000e+00
  br i1 %36, label %37, label %57

37:                                               ; preds = %29
  %38 = bitcast float %1 to i32
  %39 = and i32 %38, 2139095040
  %40 = icmp eq i32 %39, 2139095040
  br i1 %40, label %57, label %41

41:                                               ; preds = %37
  %42 = bitcast [10 x %struct.SkPoint]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %42) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -1, i64 80, i1 false)
  %43 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %5, i64 0, i64 0
  %44 = call i32 @_Z24SkChopCubicAtInflectionsPK7SkPointPS_(%struct.SkPoint* %0, %struct.SkPoint* nonnull %43) #8
  %45 = fmul float %1, %1
  %46 = icmp sgt i32 %44, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %41
  %48 = zext i32 %44 to i64
  br label %50

49:                                               ; preds = %50, %41
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %42) #8
  br label %57

50:                                               ; preds = %50, %47
  %51 = phi i64 [ 0, %47 ], [ %55, %50 ]
  %52 = mul i64 %51, 3
  %53 = and i64 %52, 4294967295
  %54 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %5, i64 0, i64 %53
  call fastcc void @_ZN12_GLOBAL__N_149convert_noninflect_cubic_to_quads_with_constraintEPK7SkPointf20SkPathFirstDirectionP8SkTArrayIS0_Lb1EEi(%struct.SkPoint* %54, float %45, i32 %2, %class.SkTArray* %3, i32 0)
  %55 = add nuw nsw i64 %51, 1
  %56 = icmp eq i64 %55, %48
  br i1 %56, label %49, label %50

57:                                               ; preds = %37, %4, %13, %21, %29, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_149convert_noninflect_cubic_to_quads_with_constraintEPK7SkPointf20SkPathFirstDirectionP8SkTArrayIS0_Lb1EEi(%struct.SkPoint*, float, i32, %class.SkTArray*, i32) unnamed_addr #4 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %struct.SkPoint*
  %12 = alloca [7 x %struct.SkPoint], align 16
  %13 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #8
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %17 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = bitcast float* %14 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fsub <2 x float> %20, %18
  store <2 x float> %21, <2 x float>* %6, align 8
  %22 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #8
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %25 = bitcast %struct.SkPoint* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = bitcast float* %24 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = fsub <2 x float> %28, %26
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  store <2 x float> %29, <2 x float>* %8, align 8
  %32 = fmul <2 x float> %21, %21
  %33 = extractelement <2 x float> %32, i32 0
  %34 = extractelement <2 x float> %32, i32 1
  %35 = fadd float %33, %34
  %36 = fcmp olt float %35, 0x3F30000000000000
  %37 = fmul float %30, %30
  %38 = fmul float %31, %31
  %39 = fadd float %37, %38
  br i1 %36, label %40, label %66

40:                                               ; preds = %5
  %41 = fcmp olt float %39, 0x3F30000000000000
  br i1 %41, label %42, label %64

42:                                               ; preds = %40
  tail call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %3, i32 3, i32 1) #8
  %43 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  %44 = load %struct.SkPoint*, %struct.SkPoint** %43, align 8
  %45 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = lshr i64 %46, 1
  %48 = and i64 %47, 2147483647
  %49 = add i64 %46, 6
  %50 = and i64 %49, 4294967294
  %51 = and i64 %46, -4294967295
  %52 = or i64 %50, %51
  store i64 %52, i64* %45, align 8
  %53 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %44, i64 %48
  %54 = bitcast %struct.SkPoint* %0 to i64*
  %55 = bitcast %struct.SkPoint* %53 to i64*
  %56 = load i64, i64* %54, align 4
  store i64 %56, i64* %55, align 4
  %57 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %53, i64 1
  %58 = bitcast %struct.SkPoint* %57 to i64*
  %59 = load i64, i64* %54, align 4
  store i64 %59, i64* %58, align 4
  %60 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %53, i64 2
  %61 = bitcast %struct.SkPoint* %23 to i64*
  %62 = bitcast %struct.SkPoint* %60 to i64*
  %63 = load i64, i64* %61, align 4
  store i64 %63, i64* %62, align 4
  br label %320

64:                                               ; preds = %40
  %65 = fsub <2 x float> %28, %18
  store <2 x float> %65, <2 x float>* %6, align 8
  br label %66

66:                                               ; preds = %5, %64
  %67 = phi <2 x float> [ %65, %64 ], [ %21, %5 ]
  %68 = fcmp olt float %39, 0x3F30000000000000
  br i1 %68, label %69, label %76

69:                                               ; preds = %66
  %70 = fsub <2 x float> %20, %26
  %71 = extractelement <2 x float> %70, i32 0
  %72 = extractelement <2 x float> %70, i32 1
  store <2 x float> %70, <2 x float>* %8, align 8
  %73 = fmul float %71, %71
  %74 = fmul float %72, %72
  %75 = fadd float %73, %74
  br label %76

76:                                               ; preds = %69, %66
  %77 = phi float [ %75, %69 ], [ %39, %66 ]
  %78 = phi <2 x float> [ %70, %69 ], [ %29, %66 ]
  %79 = fsub <2 x float> %18, %26
  %80 = fcmp olt float %77, 0x3F30000000000000
  br i1 %80, label %112, label %81

81:                                               ; preds = %76
  %82 = fmul <2 x float> %67, %67
  %83 = extractelement <2 x float> %82, i32 0
  %84 = extractelement <2 x float> %82, i32 1
  %85 = fadd float %83, %84
  %86 = fcmp olt float %85, 0x3F30000000000000
  br i1 %86, label %112, label %87

87:                                               ; preds = %81
  %88 = fmul <2 x float> %79, %79
  %89 = extractelement <2 x float> %88, i32 0
  %90 = extractelement <2 x float> %88, i32 1
  %91 = fadd float %89, %90
  %92 = fcmp ogt float %91, 0x3F30000000000000
  br i1 %92, label %93, label %181

93:                                               ; preds = %87
  %94 = fdiv float 1.000000e+00, %91
  %95 = shufflevector <2 x float> %79, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %96 = shufflevector <2 x float> %78, <2 x float> %67, <2 x i32> <i32 0, i32 2>
  %97 = fmul <2 x float> %95, %96
  %98 = shufflevector <2 x float> %79, <2 x float> undef, <2 x i32> zeroinitializer
  %99 = shufflevector <2 x float> %78, <2 x float> %67, <2 x i32> <i32 1, i32 3>
  %100 = fmul <2 x float> %98, %99
  %101 = fsub <2 x float> %97, %100
  %102 = fmul <2 x float> %101, %101
  %103 = insertelement <2 x float> undef, float %94, i32 0
  %104 = shufflevector <2 x float> %103, <2 x float> undef, <2 x i32> zeroinitializer
  %105 = fmul <2 x float> %104, %102
  %106 = insertelement <2 x float> undef, float %1, i32 0
  %107 = shufflevector <2 x float> %106, <2 x float> undef, <2 x i32> zeroinitializer
  %108 = fcmp olt <2 x float> %105, %107
  %109 = extractelement <2 x i1> %108, i32 0
  %110 = extractelement <2 x i1> %108, i32 1
  %111 = and i1 %109, %110
  br i1 %111, label %112, label %181

112:                                              ; preds = %76, %93, %81
  %113 = fadd <2 x float> %18, %67
  %114 = fadd <2 x float> %26, %78
  %115 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #8
  %116 = fadd <2 x float> %114, %113
  store <2 x float> %116, <2 x float>* %10, align 8
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %11, float 5.000000e-01, %struct.SkPoint* nonnull %11) #8
  %117 = load <2 x float>, <2 x float>* %8, align 8
  %118 = fmul <2 x float> %79, %117
  %119 = extractelement <2 x float> %118, i32 0
  %120 = extractelement <2 x float> %118, i32 1
  %121 = fadd float %119, %120
  %122 = fcmp olt float %121, 0.000000e+00
  br i1 %122, label %130, label %123

123:                                              ; preds = %112
  %124 = load <2 x float>, <2 x float>* %6, align 8
  %125 = fmul <2 x float> %79, %124
  %126 = extractelement <2 x float> %125, i32 0
  %127 = extractelement <2 x float> %125, i32 1
  %128 = fadd float %126, %127
  %129 = fcmp ogt float %128, 0.000000e+00
  br i1 %129, label %130, label %156

130:                                              ; preds = %123, %112
  call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %3, i32 6, i32 1) #8
  %131 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  %132 = load %struct.SkPoint*, %struct.SkPoint** %131, align 8
  %133 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = lshr i64 %134, 1
  %136 = and i64 %135, 2147483647
  %137 = add i64 %134, 12
  %138 = and i64 %137, 4294967294
  %139 = and i64 %134, -4294967295
  %140 = or i64 %138, %139
  store i64 %140, i64* %133, align 8
  %141 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %132, i64 %136
  %142 = bitcast %struct.SkPoint* %0 to i64*
  %143 = bitcast %struct.SkPoint* %141 to i64*
  %144 = load i64, i64* %142, align 4
  store i64 %144, i64* %143, align 4
  %145 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 1
  %146 = bitcast %struct.SkPoint* %145 to <2 x float>*
  store <2 x float> %113, <2 x float>* %146, align 4
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 2
  %148 = bitcast <2 x float>* %10 to i64*
  %149 = bitcast %struct.SkPoint* %147 to i64*
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %149, align 4
  %151 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 3
  %152 = bitcast %struct.SkPoint* %151 to i64*
  store i64 %150, i64* %152, align 4
  %153 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 4
  %154 = bitcast %struct.SkPoint* %153 to <2 x float>*
  store <2 x float> %114, <2 x float>* %154, align 4
  %155 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 5
  br label %176

156:                                              ; preds = %123
  call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %3, i32 3, i32 1) #8
  %157 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  %158 = load %struct.SkPoint*, %struct.SkPoint** %157, align 8
  %159 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = lshr i64 %160, 1
  %162 = and i64 %161, 2147483647
  %163 = add i64 %160, 6
  %164 = and i64 %163, 4294967294
  %165 = and i64 %160, -4294967295
  %166 = or i64 %164, %165
  store i64 %166, i64* %159, align 8
  %167 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %158, i64 %162
  %168 = bitcast %struct.SkPoint* %0 to i64*
  %169 = bitcast %struct.SkPoint* %167 to i64*
  %170 = load i64, i64* %168, align 4
  store i64 %170, i64* %169, align 4
  %171 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %167, i64 1
  %172 = bitcast <2 x float>* %10 to i64*
  %173 = bitcast %struct.SkPoint* %171 to i64*
  %174 = load i64, i64* %172, align 8
  store i64 %174, i64* %173, align 4
  %175 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %167, i64 2
  br label %176

176:                                              ; preds = %156, %130
  %177 = phi %struct.SkPoint* [ %175, %156 ], [ %155, %130 ]
  %178 = bitcast %struct.SkPoint* %23 to i64*
  %179 = bitcast %struct.SkPoint* %177 to i64*
  %180 = load i64, i64* %178, align 4
  store i64 %180, i64* %179, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #8
  br label %320

181:                                              ; preds = %87, %93
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %7, float 1.500000e+00, %struct.SkPoint* nonnull %7) #8
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %9, float 1.500000e+00, %struct.SkPoint* nonnull %9) #8
  %182 = load float, float* %15, align 4
  %183 = load float, float* %16, align 4
  %184 = load <2 x float>, <2 x float>* %6, align 8
  %185 = bitcast %struct.SkPoint* %23 to <2 x float>*
  %186 = load <2 x float>, <2 x float>* %185, align 4
  %187 = extractelement <2 x float> %186, i32 0
  %188 = insertelement <2 x float> undef, float %187, i32 0
  %189 = insertelement <2 x float> %188, float %182, i32 1
  %190 = load <2 x float>, <2 x float>* %8, align 8
  %191 = extractelement <2 x float> %190, i32 0
  %192 = extractelement <2 x float> %184, i32 0
  %193 = shufflevector <2 x float> %190, <2 x float> %184, <2 x i32> <i32 0, i32 2>
  %194 = fadd <2 x float> %189, %193
  %195 = extractelement <2 x float> %186, i32 1
  %196 = insertelement <2 x float> undef, float %195, i32 0
  %197 = insertelement <2 x float> %196, float %183, i32 1
  %198 = extractelement <2 x float> %190, i32 1
  %199 = shufflevector <2 x float> %190, <2 x float> undef, <2 x i32> <i32 1, i32 undef>
  %200 = extractelement <2 x float> %184, i32 1
  %201 = shufflevector <2 x float> %199, <2 x float> %184, <2 x i32> <i32 0, i32 3>
  %202 = fadd <2 x float> %197, %201
  %203 = icmp sgt i32 %4, 10
  br i1 %203, label %214, label %204

204:                                              ; preds = %181
  %205 = extractelement <2 x float> %194, i32 0
  %206 = extractelement <2 x float> %194, i32 1
  %207 = fsub float %206, %205
  %208 = extractelement <2 x float> %202, i32 0
  %209 = extractelement <2 x float> %202, i32 1
  %210 = fsub float %209, %208
  %211 = fmul float %207, %207
  %212 = fmul float %210, %210
  %213 = fadd float %211, %212
  br label %214

214:                                              ; preds = %181, %204
  %215 = phi float [ %213, %204 ], [ 0.000000e+00, %181 ]
  %216 = fcmp olt float %215, %1
  br i1 %216, label %217, label %315

217:                                              ; preds = %214
  %218 = shufflevector <2 x float> %194, <2 x float> %202, <2 x i32> <i32 1, i32 3>
  %219 = shufflevector <2 x float> %194, <2 x float> %202, <2 x i32> <i32 0, i32 2>
  %220 = fadd <2 x float> %218, %219
  %221 = fmul <2 x float> %220, <float 5.000000e-01, float 5.000000e-01>
  %222 = extractelement <2 x float> %221, i32 0
  %223 = extractelement <2 x float> %221, i32 1
  %224 = fsub float %222, %182
  %225 = fsub float %223, %183
  %226 = fmul float %200, %224
  %227 = fmul float %192, %225
  %228 = fsub float %226, %227
  %229 = icmp eq i32 %2, 0
  br i1 %229, label %230, label %232

230:                                              ; preds = %217
  %231 = fcmp ogt float %228, 0.000000e+00
  br i1 %231, label %250, label %234

232:                                              ; preds = %217
  %233 = fcmp olt float %228, 0.000000e+00
  br i1 %233, label %250, label %242

234:                                              ; preds = %230
  %235 = fsub <2 x float> %221, %186
  %236 = shufflevector <2 x float> %190, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %237 = fmul <2 x float> %236, %235
  %238 = extractelement <2 x float> %237, i32 0
  %239 = extractelement <2 x float> %237, i32 1
  %240 = fsub float %238, %239
  %241 = fcmp olt float %240, 0.000000e+00
  br i1 %241, label %250, label %293

242:                                              ; preds = %232
  %243 = fsub <2 x float> %221, %186
  %244 = shufflevector <2 x float> %190, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %245 = fmul <2 x float> %244, %243
  %246 = extractelement <2 x float> %245, i32 0
  %247 = extractelement <2 x float> %245, i32 1
  %248 = fsub float %246, %247
  %249 = fcmp ogt float %248, 0.000000e+00
  br i1 %249, label %250, label %293

250:                                              ; preds = %230, %232, %234, %242
  %251 = insertelement <2 x float> undef, float %200, i32 0
  %252 = fsub float -0.000000e+00, %192
  %253 = insertelement <2 x float> %251, float %252, i32 1
  store <2 x float> %253, <2 x float>* %6, align 8
  %254 = fmul float %182, %200
  %255 = fmul float %183, %252
  %256 = fadd float %254, %255
  %257 = fsub float -0.000000e+00, %191
  %258 = insertelement <2 x float> %199, float %257, i32 1
  store <2 x float> %258, <2 x float>* %8, align 8
  %259 = fmul float %187, %198
  %260 = fmul float %195, %257
  %261 = fadd float %259, %260
  %262 = insertelement <2 x float> undef, float %256, i32 0
  %263 = shufflevector <2 x float> %262, <2 x float> undef, <2 x i32> zeroinitializer
  %264 = fmul <2 x float> %190, %263
  %265 = insertelement <2 x float> undef, float %261, i32 0
  %266 = shufflevector <2 x float> %265, <2 x float> undef, <2 x i32> zeroinitializer
  %267 = fmul <2 x float> %184, %266
  %268 = fsub <2 x float> %267, %264
  %269 = fmul float %200, %257
  %270 = fmul float %198, %252
  %271 = fsub float %269, %270
  %272 = fdiv float 1.000000e+00, %271
  %273 = insertelement <2 x float> undef, float %272, i32 0
  %274 = shufflevector <2 x float> %273, <2 x float> undef, <2 x i32> zeroinitializer
  %275 = fmul <2 x float> %268, %274
  %276 = icmp slt i32 %4, 11
  br i1 %276, label %277, label %293

277:                                              ; preds = %250
  %278 = shufflevector <2 x float> %275, <2 x float> undef, <2 x i32> zeroinitializer
  %279 = fsub <2 x float> %194, %278
  %280 = shufflevector <2 x float> %275, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %281 = fsub <2 x float> %202, %280
  %282 = fmul <2 x float> %279, %279
  %283 = fmul <2 x float> %281, %281
  %284 = fadd <2 x float> %282, %283
  %285 = extractelement <2 x float> %284, i32 0
  %286 = extractelement <2 x float> %284, i32 1
  %287 = fmul float %286, %285
  %288 = call float @sqrtf(float %287) #8
  %289 = fmul float %288, 2.000000e+00
  %290 = fadd float %286, %289
  %291 = fadd float %285, %290
  %292 = fcmp ogt float %291, %1
  br i1 %292, label %315, label %293

293:                                              ; preds = %242, %234, %250, %277
  %294 = phi <2 x float> [ %275, %277 ], [ %275, %250 ], [ %221, %234 ], [ %221, %242 ]
  call void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %3, i32 3, i32 1) #8
  %295 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  %296 = load %struct.SkPoint*, %struct.SkPoint** %295, align 8
  %297 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 1
  %298 = load i64, i64* %297, align 8
  %299 = lshr i64 %298, 1
  %300 = and i64 %299, 2147483647
  %301 = add i64 %298, 6
  %302 = and i64 %301, 4294967294
  %303 = and i64 %298, -4294967295
  %304 = or i64 %302, %303
  store i64 %304, i64* %297, align 8
  %305 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %296, i64 %300
  %306 = bitcast %struct.SkPoint* %0 to i64*
  %307 = bitcast %struct.SkPoint* %305 to i64*
  %308 = load i64, i64* %306, align 4
  store i64 %308, i64* %307, align 4
  %309 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %305, i64 1
  %310 = bitcast %struct.SkPoint* %309 to <2 x float>*
  store <2 x float> %294, <2 x float>* %310, align 4
  %311 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %305, i64 2
  %312 = bitcast %struct.SkPoint* %23 to i64*
  %313 = bitcast %struct.SkPoint* %311 to i64*
  %314 = load i64, i64* %312, align 4
  store i64 %314, i64* %313, align 4
  br label %320

315:                                              ; preds = %277, %214
  %316 = bitcast [7 x %struct.SkPoint]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %316) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %316, i8 -1, i64 56, i1 false)
  %317 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %12, i64 0, i64 0
  call void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint* %0, %struct.SkPoint* nonnull %317) #8
  %318 = add nsw i32 %4, 1
  call fastcc void @_ZN12_GLOBAL__N_149convert_noninflect_cubic_to_quads_with_constraintEPK7SkPointf20SkPathFirstDirectionP8SkTArrayIS0_Lb1EEi(%struct.SkPoint* nonnull %317, float %1, i32 %2, %class.SkTArray* %3, i32 %318)
  %319 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %12, i64 0, i64 3
  call fastcc void @_ZN12_GLOBAL__N_149convert_noninflect_cubic_to_quads_with_constraintEPK7SkPointf20SkPathFirstDirectionP8SkTArrayIS0_Lb1EEi(%struct.SkPoint* %319, float %1, i32 %2, %class.SkTArray* %3, i32 %318)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %316) #8
  br label %320

320:                                              ; preds = %176, %293, %315, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11GrPathUtils23findCubicConvex180ChopsEPK7SkPointPfPb(%struct.SkPoint* nocapture readonly, float* nocapture, i8* nocapture) local_unnamed_addr #4 {
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %7 = bitcast %struct.SkPoint* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %10 = bitcast %struct.SkPoint* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %13 = bitcast %struct.SkPoint* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fsub <2 x float> %8, %5
  %16 = fsub <2 x float> %11, %8
  %17 = fsub <2 x float> %14, %5
  %18 = fsub <2 x float> %16, %15
  %19 = fmul <2 x float> %16, <float -3.000000e+00, float -3.000000e+00>
  %20 = fadd <2 x float> %19, %17
  %21 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %22 = fmul <2 x float> %21, %20
  %23 = extractelement <2 x float> %22, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = fsub float %23, %24
  %26 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %27 = fmul <2 x float> %26, %20
  %28 = extractelement <2 x float> %27, i32 0
  %29 = extractelement <2 x float> %27, i32 1
  %30 = fsub float %28, %29
  %31 = fmul <2 x float> %26, %18
  %32 = extractelement <2 x float> %31, i32 0
  %33 = extractelement <2 x float> %31, i32 1
  %34 = fsub float %32, %33
  %35 = fmul float %30, -5.000000e-01
  %36 = fmul float %35, %35
  %37 = fmul float %34, %25
  %38 = fsub float %36, %37
  %39 = fmul float %25, 0x3F30000000000000
  %40 = fmul float %39, %39
  %41 = fsub float -0.000000e+00, %40
  %42 = fcmp olt float %38, %41
  br i1 %42, label %43, label %49

43:                                               ; preds = %3
  store i8 0, i8* %2, align 1
  %44 = fdiv float %34, %35
  %45 = fadd float %44, 0xBF40000000000000
  %46 = bitcast float %45 to i32
  %47 = icmp ult i32 %46, 1065336832
  br i1 %47, label %48, label %134

48:                                               ; preds = %43
  store float %44, float* %1, align 4
  br label %134

49:                                               ; preds = %3
  %50 = fcmp ole float %38, %40
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %2, align 1
  br i1 %50, label %52, label %94

52:                                               ; preds = %49
  %53 = fcmp une float %25, 0.000000e+00
  %54 = fcmp une float %35, 0.000000e+00
  %55 = or i1 %53, %54
  %56 = fcmp une float %34, 0.000000e+00
  %57 = or i1 %56, %55
  br i1 %57, label %58, label %64

58:                                               ; preds = %52
  %59 = fdiv float %35, %25
  %60 = fadd float %59, 0xBF40000000000000
  %61 = bitcast float %60 to i32
  %62 = icmp ult i32 %61, 1065336832
  br i1 %62, label %63, label %134

63:                                               ; preds = %58
  store float %59, float* %1, align 4
  br label %134

64:                                               ; preds = %52
  %65 = fcmp oeq <2 x float> %15, zeroinitializer
  %66 = fsub <2 x float> %11, %5
  %67 = select <2 x i1> %65, <2 x float> %66, <2 x float> %15
  %68 = bitcast <2 x float> %67 to <2 x i32>
  %69 = extractelement <2 x i32> %68, i32 0
  %70 = extractelement <2 x i32> %68, i32 1
  %71 = zext i32 %70 to i64
  %72 = shl nuw i64 %71, 32
  %73 = zext i32 %69 to i64
  %74 = or i64 %72, %73
  %75 = bitcast i64 %74 to <2 x float>
  %76 = fmul <2 x float> %20, %75
  %77 = extractelement <2 x float> %76, i32 0
  %78 = extractelement <2 x float> %76, i32 1
  %79 = fadd float %77, %78
  %80 = fmul <2 x float> %18, %75
  %81 = extractelement <2 x float> %80, i32 0
  %82 = extractelement <2 x float> %80, i32 1
  %83 = fadd float %81, %82
  %84 = fsub float -0.000000e+00, %83
  %85 = fmul <2 x float> %15, %75
  %86 = extractelement <2 x float> %85, i32 0
  %87 = extractelement <2 x float> %85, i32 1
  %88 = fadd float %86, %87
  %89 = fmul float %83, %83
  %90 = fmul float %79, %88
  %91 = fsub float %89, %90
  %92 = fcmp olt float %91, 0.000000e+00
  %93 = select i1 %92, float 0.000000e+00, float %91
  br label %94

94:                                               ; preds = %64, %49
  %95 = phi float [ %93, %64 ], [ %38, %49 ]
  %96 = phi float [ %84, %64 ], [ %35, %49 ]
  %97 = phi float [ %88, %64 ], [ %34, %49 ]
  %98 = phi float [ %79, %64 ], [ %25, %49 ]
  %99 = tail call float @sqrtf(float %95) #8
  %100 = tail call float @llvm.copysign.f32(float %99, float %96)
  %101 = fadd float %96, %100
  %102 = insertelement <2 x float> undef, float %101, i32 0
  %103 = insertelement <2 x float> %102, float %97, i32 1
  %104 = insertelement <2 x float> undef, float %98, i32 0
  %105 = insertelement <2 x float> %104, float %101, i32 1
  %106 = fdiv <2 x float> %103, %105
  %107 = fcmp ogt <2 x float> %106, <float 0x3F40000000000000, float 0x3F40000000000000>
  %108 = fcmp olt <2 x float> %106, <float 0x3FEFFC0000000000, float 0x3FEFFC0000000000>
  %109 = and <2 x i1> %108, %107
  %110 = sext <2 x i1> %109 to <2 x i32>
  %111 = extractelement <2 x i32> %110, i32 0
  %112 = extractelement <2 x i32> %110, i32 1
  %113 = icmp eq i32 %111, 0
  %114 = icmp ne i32 %112, 0
  br i1 %113, label %129, label %115

115:                                              ; preds = %94
  br i1 %114, label %116, label %125

116:                                              ; preds = %115
  %117 = extractelement <2 x float> %106, i32 0
  %118 = extractelement <2 x float> %106, i32 1
  %119 = fcmp une float %117, %118
  br i1 %119, label %120, label %125

120:                                              ; preds = %116
  %121 = fcmp ogt float %117, %118
  %122 = shufflevector <2 x float> %106, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %123 = select i1 %121, <2 x float> %122, <2 x float> %106
  %124 = bitcast float* %1 to <2 x float>*
  store <2 x float> %123, <2 x float>* %124, align 1
  br label %134

125:                                              ; preds = %116, %115
  %126 = bitcast <2 x float> %106 to <2 x i32>
  %127 = extractelement <2 x i32> %126, i32 0
  %128 = bitcast float* %1 to i32*
  store i32 %127, i32* %128, align 4
  br label %134

129:                                              ; preds = %94
  br i1 %114, label %130, label %134

130:                                              ; preds = %129
  %131 = bitcast <2 x float> %106 to <2 x i32>
  %132 = extractelement <2 x i32> %131, i32 1
  %133 = bitcast float* %1 to i32*
  store i32 %132, i32* %133, align 4
  br label %134

134:                                              ; preds = %120, %125, %130, %129, %63, %58, %48, %43
  %135 = phi i32 [ 1, %48 ], [ 0, %43 ], [ 1, %63 ], [ 0, %58 ], [ 2, %120 ], [ 1, %125 ], [ 1, %130 ], [ 0, %129 ]
  ret i32 %135
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #6

declare void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI7SkPointLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #8
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #8
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #8
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

declare void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint*, float, %struct.SkPoint*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
