; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_huffman.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_huffman.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderEE4huff = internal unnamed_addr constant [16 x %"struct.jxl::HuffmanCode"] [%"struct.jxl::HuffmanCode" { i8 2, i16 0 }, %"struct.jxl::HuffmanCode" { i8 2, i16 4 }, %"struct.jxl::HuffmanCode" { i8 2, i16 3 }, %"struct.jxl::HuffmanCode" { i8 3, i16 2 }, %"struct.jxl::HuffmanCode" { i8 2, i16 0 }, %"struct.jxl::HuffmanCode" { i8 2, i16 4 }, %"struct.jxl::HuffmanCode" { i8 2, i16 3 }, %"struct.jxl::HuffmanCode" { i8 4, i16 1 }, %"struct.jxl::HuffmanCode" { i8 2, i16 0 }, %"struct.jxl::HuffmanCode" { i8 2, i16 4 }, %"struct.jxl::HuffmanCode" { i8 2, i16 3 }, %"struct.jxl::HuffmanCode" { i8 3, i16 2 }, %"struct.jxl::HuffmanCode" { i8 2, i16 0 }, %"struct.jxl::HuffmanCode" { i8 2, i16 4 }, %"struct.jxl::HuffmanCode" { i8 2, i16 3 }, %"struct.jxl::HuffmanCode" { i8 4, i16 5 }], align 16
@_ZN3jxlL20kCodeLengthCodeOrderE = internal unnamed_addr constant [18 x i8] c"\01\02\03\04\00\05\11\06\10\07\08\09\0A\0B\0C\0D\0E\0F", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl22ReadHuffmanCodeLengthsEPKhiPhPNS_9BitReaderE(i8*, i32, i8* nocapture, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %5 = alloca [32 x %"struct.jxl::HuffmanCode"], align 16
  %6 = alloca [16 x i16], align 16
  %7 = getelementptr inbounds [32 x %"struct.jxl::HuffmanCode"], [32 x %"struct.jxl::HuffmanCode"]* %5, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 32, i1 false)
  %9 = load i8, i8* %0, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = add i16 %12, 1
  store i16 %13, i16* %11, align 2
  %14 = getelementptr inbounds i8, i8* %0, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = add i16 %18, 1
  store i16 %19, i16* %17, align 2
  %20 = getelementptr inbounds i8, i8* %0, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = add i16 %24, 1
  store i16 %25, i16* %23, align 2
  %26 = getelementptr inbounds i8, i8* %0, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = add i16 %30, 1
  store i16 %31, i16* %29, align 2
  %32 = getelementptr inbounds i8, i8* %0, i64 4
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %36, 1
  store i16 %37, i16* %35, align 2
  %38 = getelementptr inbounds i8, i8* %0, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = add i16 %42, 1
  store i16 %43, i16* %41, align 2
  %44 = getelementptr inbounds i8, i8* %0, i64 6
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = add i16 %48, 1
  store i16 %49, i16* %47, align 2
  %50 = getelementptr inbounds i8, i8* %0, i64 7
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = add i16 %54, 1
  store i16 %55, i16* %53, align 2
  %56 = getelementptr inbounds i8, i8* %0, i64 8
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = add i16 %60, 1
  store i16 %61, i16* %59, align 2
  %62 = getelementptr inbounds i8, i8* %0, i64 9
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = add i16 %66, 1
  store i16 %67, i16* %65, align 2
  %68 = getelementptr inbounds i8, i8* %0, i64 10
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = add i16 %72, 1
  store i16 %73, i16* %71, align 2
  %74 = getelementptr inbounds i8, i8* %0, i64 11
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = add i16 %78, 1
  store i16 %79, i16* %77, align 2
  %80 = getelementptr inbounds i8, i8* %0, i64 12
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = add i16 %84, 1
  store i16 %85, i16* %83, align 2
  %86 = getelementptr inbounds i8, i8* %0, i64 13
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = add i16 %90, 1
  store i16 %91, i16* %89, align 2
  %92 = getelementptr inbounds i8, i8* %0, i64 14
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = add i16 %96, 1
  store i16 %97, i16* %95, align 2
  %98 = getelementptr inbounds i8, i8* %0, i64 15
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = add i16 %102, 1
  store i16 %103, i16* %101, align 2
  %104 = getelementptr inbounds i8, i8* %0, i64 16
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %108, 1
  store i16 %109, i16* %107, align 2
  %110 = getelementptr inbounds i8, i8* %0, i64 17
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = add i16 %114, 1
  store i16 %115, i16* %113, align 2
  %116 = getelementptr inbounds [32 x %"struct.jxl::HuffmanCode"], [32 x %"struct.jxl::HuffmanCode"]* %5, i64 0, i64 0
  %117 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %118 = call i32 @_ZN3jxl17BuildHuffmanTableEPNS_11HuffmanCodeEiPKhmPt(%"struct.jxl::HuffmanCode"* nonnull %116, i32 5, i8* %0, i64 18, i16* nonnull %117) #10
  %119 = icmp ne i32 %118, 0
  %120 = icmp sgt i32 %1, 0
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %239

122:                                              ; preds = %4
  %123 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 2
  %124 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 3
  %125 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 1
  %126 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 0
  br label %127

127:                                              ; preds = %122, %223
  %128 = phi i32 [ 32768, %122 ], [ %228, %223 ]
  %129 = phi i8 [ 0, %122 ], [ %227, %223 ]
  %130 = phi i32 [ 0, %122 ], [ %226, %223 ]
  %131 = phi i8 [ 8, %122 ], [ %225, %223 ]
  %132 = phi i32 [ 0, %122 ], [ %224, %223 ]
  %133 = load i8*, i8** %123, align 8
  %134 = load i8*, i8** %124, align 8
  %135 = icmp ugt i8* %133, %134
  br i1 %135, label %136, label %139, !prof !2

136:                                              ; preds = %127
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %3) #10
  %137 = load i64, i64* %126, align 8
  %138 = load i64, i64* %125, align 8
  br label %150

139:                                              ; preds = %127
  %140 = bitcast i8* %133 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = load i64, i64* %125, align 8
  %143 = shl i64 %141, %142
  %144 = load i64, i64* %126, align 8
  %145 = or i64 %144, %143
  store i64 %145, i64* %126, align 8
  %146 = sub i64 63, %142
  %147 = lshr i64 %146, 3
  %148 = getelementptr inbounds i8, i8* %133, i64 %147
  store i8* %148, i8** %123, align 8
  %149 = or i64 %142, 56
  store i64 %149, i64* %125, align 8
  br label %150

150:                                              ; preds = %136, %139
  %151 = phi i64 [ %138, %136 ], [ %149, %139 ]
  %152 = phi i64 [ %137, %136 ], [ %145, %139 ]
  %153 = and i64 %152, 31
  %154 = getelementptr inbounds [32 x %"struct.jxl::HuffmanCode"], [32 x %"struct.jxl::HuffmanCode"]* %5, i64 0, i64 %153, i32 0
  %155 = load i8, i8* %154, align 4
  %156 = zext i8 %155 to i64
  %157 = sub i64 %151, %156
  store i64 %157, i64* %125, align 8
  %158 = lshr i64 %152, %156
  store i64 %158, i64* %126, align 8
  %159 = getelementptr inbounds [32 x %"struct.jxl::HuffmanCode"], [32 x %"struct.jxl::HuffmanCode"]* %5, i64 0, i64 %153, i32 1
  %160 = load i16, i16* %159, align 2
  %161 = trunc i16 %160 to i8
  %162 = and i16 %160, 255
  %163 = zext i16 %162 to i32
  %164 = icmp ult i16 %162, 16
  br i1 %164, label %165, label %173

165:                                              ; preds = %150
  %166 = add nsw i32 %132, 1
  %167 = sext i32 %132 to i64
  %168 = getelementptr inbounds i8, i8* %2, i64 %167
  store i8 %161, i8* %168, align 1
  %169 = icmp eq i16 %162, 0
  br i1 %169, label %223, label %170

170:                                              ; preds = %165
  %171 = lshr i32 32768, %163
  %172 = sub nsw i32 %128, %171
  br label %223

173:                                              ; preds = %150
  %174 = add nsw i32 %163, -14
  %175 = icmp eq i16 %162, 16
  %176 = select i1 %175, i8 %131, i8 0
  %177 = icmp eq i8 %129, %176
  %178 = select i1 %177, i32 %130, i32 0
  %179 = icmp sgt i32 %178, 0
  %180 = add nsw i32 %178, -2
  %181 = shl i32 %180, %174
  %182 = select i1 %179, i32 %181, i32 %178
  %183 = sext i32 %174 to i64
  %184 = load i8*, i8** %123, align 8
  %185 = load i8*, i8** %124, align 8
  %186 = icmp ugt i8* %184, %185
  br i1 %186, label %187, label %190, !prof !2

187:                                              ; preds = %173
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %3) #10
  %188 = load i64, i64* %126, align 8
  %189 = load i64, i64* %125, align 8
  br label %199

190:                                              ; preds = %173
  %191 = bitcast i8* %184 to i64*
  %192 = load i64, i64* %191, align 1
  %193 = shl i64 %192, %157
  %194 = or i64 %193, %158
  store i64 %194, i64* %126, align 8
  %195 = sub i64 63, %157
  %196 = lshr i64 %195, 3
  %197 = getelementptr inbounds i8, i8* %184, i64 %196
  store i8* %197, i8** %123, align 8
  %198 = or i64 %157, 56
  store i64 %198, i64* %125, align 8
  br label %199

199:                                              ; preds = %187, %190
  %200 = phi i64 [ %189, %187 ], [ %198, %190 ]
  %201 = phi i64 [ %188, %187 ], [ %194, %190 ]
  %202 = shl nsw i64 -1, %183
  %203 = xor i64 %202, 4294967295
  %204 = and i64 %201, %203
  %205 = sub i64 %200, %183
  store i64 %205, i64* %125, align 8
  %206 = lshr i64 %201, %183
  store i64 %206, i64* %126, align 8
  %207 = trunc i64 %204 to i32
  %208 = add i32 %182, 3
  %209 = add i32 %208, %207
  %210 = sub nsw i32 %209, %178
  %211 = add nsw i32 %210, %132
  %212 = icmp sgt i32 %211, %1
  br i1 %212, label %239, label %213

213:                                              ; preds = %199
  %214 = sext i32 %132 to i64
  %215 = getelementptr inbounds i8, i8* %2, i64 %214
  %216 = sext i32 %210 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %215, i8 %176, i64 %216, i1 false)
  %217 = icmp eq i8 %176, 0
  br i1 %217, label %223, label %218

218:                                              ; preds = %213
  %219 = zext i8 %176 to i32
  %220 = sub nsw i32 15, %219
  %221 = shl i32 %210, %220
  %222 = sub nsw i32 %128, %221
  br label %223

223:                                              ; preds = %218, %213, %170, %165
  %224 = phi i32 [ %166, %170 ], [ %166, %165 ], [ %211, %213 ], [ %211, %218 ]
  %225 = phi i8 [ %161, %170 ], [ %131, %165 ], [ %131, %213 ], [ %131, %218 ]
  %226 = phi i32 [ 0, %170 ], [ 0, %165 ], [ %209, %213 ], [ %209, %218 ]
  %227 = phi i8 [ %129, %170 ], [ %129, %165 ], [ 0, %213 ], [ %131, %218 ]
  %228 = phi i32 [ %172, %170 ], [ %128, %165 ], [ %128, %213 ], [ %222, %218 ]
  %229 = icmp slt i32 %224, %1
  %230 = icmp sgt i32 %228, 0
  %231 = and i1 %229, %230
  br i1 %231, label %127, label %232

232:                                              ; preds = %223
  %233 = icmp eq i32 %228, 0
  br i1 %233, label %234, label %239

234:                                              ; preds = %232
  %235 = sext i32 %224 to i64
  %236 = getelementptr inbounds i8, i8* %2, i64 %235
  %237 = sub nsw i32 %1, %224
  %238 = sext i32 %237 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %236, i8 0, i64 %238, i1 false)
  br label %239

239:                                              ; preds = %199, %4, %232, %234
  %240 = phi i32 [ 1, %234 ], [ 0, %4 ], [ 0, %232 ], [ 0, %199 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #10
  ret i32 %240
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3jxl17BuildHuffmanTableEPNS_11HuffmanCodeEiPKhmPt(%"struct.jxl::HuffmanCode"*, i32, i8*, i64, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, i64, %"class.jxl::BitReader"*) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca [18 x i8], align 16
  %6 = alloca [16 x i16], align 16
  %7 = icmp ugt i64 %1, 32768
  br i1 %7, label %444, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ugt i8* %10, %12
  br i1 %13, label %14, label %19, !prof !2

14:                                               ; preds = %8
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  br label %32

19:                                               ; preds = %8
  %20 = bitcast i8* %10 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = shl i64 %21, %23
  %25 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = or i64 %26, %24
  store i64 %27, i64* %25, align 8
  %28 = sub i64 63, %23
  %29 = lshr i64 %28, 3
  %30 = getelementptr inbounds i8, i8* %10, i64 %29
  store i8* %30, i8** %9, align 8
  %31 = or i64 %23, 56
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %14, %19
  %33 = phi i64 [ %18, %14 ], [ %31, %19 ]
  %34 = phi i64 [ %16, %14 ], [ %27, %19 ]
  %35 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %36 = and i64 %34, 3
  %37 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %38 = add i64 %33, -2
  store i64 %38, i64* %37, align 8
  %39 = lshr i64 %34, 2
  store i64 %39, i64* %35, align 8
  %40 = icmp eq i64 %36, 1
  br i1 %40, label %41, label %277

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = bitcast %"struct.jxl::HuffmanCode"** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"struct.jxl::HuffmanDecodingData"* %0 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = ashr exact i64 %47, 2
  %49 = icmp ult i64 %48, 256
  %50 = inttoptr i64 %46 to %"struct.jxl::HuffmanCode"*
  br i1 %49, label %51, label %56

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0
  %53 = sub nuw nsw i64 256, %48
  tail call void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %52, i64 %53) #10
  %54 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0, i32 0, i32 0
  %55 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %54, align 8
  br label %60

56:                                               ; preds = %41
  %57 = icmp eq i64 %47, 1024
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %50, i64 256
  store %"struct.jxl::HuffmanCode"* %59, %"struct.jxl::HuffmanCode"** %42, align 8
  br label %60

60:                                               ; preds = %56, %51, %58
  %61 = phi %"struct.jxl::HuffmanCode"* [ %50, %56 ], [ %55, %51 ], [ %50, %58 ]
  %62 = bitcast i64* %4 to [4 x i16]*
  %63 = icmp ugt i64 %1, 1
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = add nsw i64 %1, -1
  %66 = tail call i64 @llvm.ctlz.i64(i64 %65, i1 true) #10, !range !3
  %67 = sub nuw nsw i64 64, %66
  br label %68

68:                                               ; preds = %64, %60
  %69 = phi i64 [ %67, %64 ], [ 0, %60 ]
  %70 = load i8*, i8** %9, align 8
  %71 = load i8*, i8** %11, align 8
  %72 = icmp ugt i8* %70, %71
  br i1 %72, label %73, label %76, !prof !2

73:                                               ; preds = %68
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %74 = load i64, i64* %35, align 8
  %75 = load i64, i64* %37, align 8
  br label %87

76:                                               ; preds = %68
  %77 = bitcast i8* %70 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = load i64, i64* %37, align 8
  %80 = shl i64 %78, %79
  %81 = load i64, i64* %35, align 8
  %82 = or i64 %81, %80
  store i64 %82, i64* %35, align 8
  %83 = sub i64 63, %79
  %84 = lshr i64 %83, 3
  %85 = getelementptr inbounds i8, i8* %70, i64 %84
  store i8* %85, i8** %9, align 8
  %86 = or i64 %79, 56
  store i64 %86, i64* %37, align 8
  br label %87

87:                                               ; preds = %76, %73
  %88 = phi i64 [ %75, %73 ], [ %86, %76 ]
  %89 = phi i64 [ %74, %73 ], [ %82, %76 ]
  %90 = and i64 %89, 3
  %91 = add i64 %88, -2
  store i64 %91, i64* %37, align 8
  %92 = lshr i64 %89, 2
  store i64 %92, i64* %35, align 8
  %93 = add nuw nsw i64 %90, 1
  %94 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #10
  store i64 0, i64* %4, align 8
  %95 = shl nsw i64 -1, %69
  %96 = xor i64 %95, -1
  br label %99

97:                                               ; preds = %126
  %98 = icmp eq i64 %90, 0
  br i1 %98, label %171, label %133

99:                                               ; preds = %126, %87
  %100 = phi i64 [ %92, %87 ], [ %123, %126 ]
  %101 = phi i64 [ %91, %87 ], [ %122, %126 ]
  %102 = phi i64 [ 0, %87 ], [ %129, %126 ]
  %103 = load i8*, i8** %9, align 8
  %104 = load i8*, i8** %11, align 8
  %105 = icmp ugt i8* %103, %104
  br i1 %105, label %106, label %109, !prof !2

106:                                              ; preds = %99
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %107 = load i64, i64* %35, align 8
  %108 = load i64, i64* %37, align 8
  br label %118

109:                                              ; preds = %99
  %110 = bitcast i8* %103 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = shl i64 %111, %101
  %113 = or i64 %112, %100
  store i64 %113, i64* %35, align 8
  %114 = sub i64 63, %101
  %115 = lshr i64 %114, 3
  %116 = getelementptr inbounds i8, i8* %103, i64 %115
  store i8* %116, i8** %9, align 8
  %117 = or i64 %101, 56
  store i64 %117, i64* %37, align 8
  br label %118

118:                                              ; preds = %109, %106
  %119 = phi i64 [ %108, %106 ], [ %117, %109 ]
  %120 = phi i64 [ %107, %106 ], [ %113, %109 ]
  %121 = and i64 %120, %96
  %122 = sub i64 %119, %69
  store i64 %122, i64* %37, align 8
  %123 = lshr i64 %120, %69
  store i64 %123, i64* %35, align 8
  %124 = and i64 %121, 65535
  %125 = icmp ult i64 %124, %1
  br i1 %125, label %126, label %275

126:                                              ; preds = %118
  %127 = trunc i64 %121 to i16
  %128 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 %102
  store i16 %127, i16* %128, align 2
  %129 = add nuw nsw i64 %102, 1
  %130 = icmp eq i64 %129, %93
  br i1 %130, label %97, label %99

131:                                              ; preds = %136
  %132 = icmp eq i64 %90, 1
  br i1 %132, label %144, label %462

133:                                              ; preds = %97
  %134 = bitcast i64* %4 to i16*
  %135 = load i16, i16* %134, align 8
  br label %139

136:                                              ; preds = %139
  %137 = add nuw nsw i64 %140, 1
  %138 = icmp eq i64 %137, %93
  br i1 %138, label %131, label %139

139:                                              ; preds = %136, %133
  %140 = phi i64 [ 1, %133 ], [ %137, %136 ]
  %141 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = icmp eq i16 %135, %142
  br i1 %143, label %275, label %136

144:                                              ; preds = %483, %473, %131
  %145 = icmp eq i64 %93, 4
  br i1 %145, label %146, label %169

146:                                              ; preds = %144
  %147 = load i8*, i8** %9, align 8
  %148 = load i8*, i8** %11, align 8
  %149 = icmp ugt i8* %147, %148
  br i1 %149, label %150, label %153, !prof !2

150:                                              ; preds = %146
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %151 = load i64, i64* %35, align 8
  %152 = load i64, i64* %37, align 8
  br label %162

153:                                              ; preds = %146
  %154 = bitcast i8* %147 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = shl i64 %155, %122
  %157 = or i64 %156, %123
  store i64 %157, i64* %35, align 8
  %158 = sub i64 63, %122
  %159 = lshr i64 %158, 3
  %160 = getelementptr inbounds i8, i8* %147, i64 %159
  store i8* %160, i8** %9, align 8
  %161 = or i64 %122, 56
  store i64 %161, i64* %37, align 8
  br label %162

162:                                              ; preds = %153, %150
  %163 = phi i64 [ %152, %150 ], [ %161, %153 ]
  %164 = phi i64 [ %151, %150 ], [ %157, %153 ]
  %165 = and i64 %164, 1
  %166 = add i64 %163, -1
  store i64 %166, i64* %37, align 8
  %167 = lshr i64 %164, 1
  store i64 %167, i64* %35, align 8
  %168 = or i64 %165, 4
  br label %169

169:                                              ; preds = %162, %144
  %170 = phi i64 [ %168, %162 ], [ %93, %144 ]
  switch i64 %170, label %275 [
    i64 1, label %171
    i64 2, label %174
    i64 3, label %186
    i64 4, label %204
    i64 5, label %217
  ]

171:                                              ; preds = %169, %97
  %172 = bitcast i64* %4 to i16*
  %173 = load i16, i16* %172, align 8
  br label %245

174:                                              ; preds = %169
  %175 = bitcast i64* %4 to i16*
  %176 = load i16, i16* %175, align 8
  %177 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 1
  %178 = load i16, i16* %177, align 2
  %179 = icmp ugt i16 %176, %178
  br i1 %179, label %180, label %181

180:                                              ; preds = %174
  store i16 %176, i16* %177, align 2
  store i16 %178, i16* %175, align 8
  br label %181

181:                                              ; preds = %180, %174
  %182 = phi i16 [ %176, %180 ], [ %178, %174 ]
  %183 = phi i16 [ %178, %180 ], [ %176, %174 ]
  %184 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  store i8 1, i8* %184, align 2
  %185 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 1
  store i16 %183, i16* %185, align 2
  br label %245

186:                                              ; preds = %169
  %187 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 1
  %188 = load i16, i16* %187, align 2
  %189 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 2
  %190 = load i16, i16* %189, align 4
  %191 = icmp ugt i16 %188, %190
  br i1 %191, label %192, label %193

192:                                              ; preds = %186
  store i16 %188, i16* %189, align 4
  store i16 %190, i16* %187, align 2
  br label %193

193:                                              ; preds = %192, %186
  %194 = phi i16 [ %188, %192 ], [ %190, %186 ]
  %195 = phi i16 [ %190, %192 ], [ %188, %186 ]
  %196 = bitcast i64* %4 to i16*
  %197 = load i16, i16* %196, align 8
  %198 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  store i8 1, i8* %198, align 2
  %199 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 1
  store i16 %197, i16* %199, align 2
  %200 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 0
  store i8 1, i8* %200, align 2
  %201 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 1
  store i16 %197, i16* %201, align 2
  %202 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 0
  store i8 2, i8* %202, align 2
  %203 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 1
  store i16 %195, i16* %203, align 2
  br label %245

204:                                              ; preds = %169
  %205 = bitcast i64* %4 to i16*
  %206 = load i16, i16* %205, align 8
  %207 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 1
  %208 = load i16, i16* %207, align 2
  %209 = icmp ugt i16 %206, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %204
  store i16 %206, i16* %207, align 2
  store i16 %208, i16* %205, align 8
  br label %211

211:                                              ; preds = %210, %204
  %212 = phi i16 [ %208, %204 ], [ %206, %210 ]
  %213 = phi i16 [ %206, %204 ], [ %208, %210 ]
  %214 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 2
  %215 = load i16, i16* %214, align 4
  %216 = icmp ugt i16 %213, %215
  br i1 %216, label %450, label %451

217:                                              ; preds = %169
  %218 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 2
  %219 = load i16, i16* %218, align 4
  %220 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 3
  %221 = load i16, i16* %220, align 2
  %222 = icmp ugt i16 %219, %221
  br i1 %222, label %223, label %224

223:                                              ; preds = %217
  store i16 %219, i16* %220, align 2
  store i16 %221, i16* %218, align 4
  br label %224

224:                                              ; preds = %223, %217
  %225 = phi i16 [ %219, %223 ], [ %221, %217 ]
  %226 = phi i16 [ %221, %223 ], [ %219, %217 ]
  %227 = bitcast i64* %4 to i16*
  %228 = load i16, i16* %227, align 8
  %229 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  store i8 1, i8* %229, align 2
  %230 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 1
  store i16 %228, i16* %230, align 2
  %231 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 0
  store i8 2, i8* %233, align 2
  %234 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 1
  store i16 %232, i16* %234, align 2
  %235 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 0
  store i8 1, i8* %235, align 2
  %236 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 1
  store i16 %228, i16* %236, align 2
  %237 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 3, i32 0
  store i8 3, i8* %237, align 2
  %238 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 3, i32 1
  store i16 %226, i16* %238, align 2
  %239 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 4, i32 0
  store i8 1, i8* %239, align 2
  %240 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 4, i32 1
  store i16 %228, i16* %240, align 2
  %241 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 5, i32 0
  store i8 2, i8* %241, align 2
  %242 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 5, i32 1
  store i16 %232, i16* %242, align 2
  %243 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 6, i32 0
  store i8 1, i8* %243, align 2
  %244 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 6, i32 1
  store i16 %228, i16* %244, align 2
  br label %245

245:                                              ; preds = %265, %224, %193, %181, %171
  %246 = phi i64 [ 3, %265 ], [ 7, %224 ], [ 3, %193 ], [ 1, %181 ], [ 0, %171 ]
  %247 = phi i8 [ 2, %265 ], [ 3, %224 ], [ 2, %193 ], [ 1, %181 ], [ 0, %171 ]
  %248 = phi i16 [ %274, %265 ], [ %225, %224 ], [ %194, %193 ], [ %182, %181 ], [ %173, %171 ]
  %249 = phi i64 [ 4, %265 ], [ 8, %224 ], [ 4, %193 ], [ 2, %181 ], [ 1, %171 ]
  %250 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 %246, i32 0
  store i8 %247, i8* %250, align 2
  %251 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 %246, i32 1
  store i16 %248, i16* %251, align 2
  %252 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  br label %253

253:                                              ; preds = %253, %245
  %254 = phi i64 [ %249, %245 ], [ %257, %253 ]
  %255 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 %254, i32 0
  %256 = shl i64 %254, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %255, i8* align 2 %252, i64 %256, i1 false) #10
  %257 = shl i64 %254, 1
  %258 = icmp eq i64 %257, 256
  br i1 %258, label %275, label %253

259:                                              ; preds = %458
  store i16 %212, i16* %214, align 4
  store i16 %452, i16* %207, align 2
  br label %260

260:                                              ; preds = %259, %458
  %261 = phi i16 [ %212, %259 ], [ %452, %458 ]
  %262 = phi i16 [ %452, %259 ], [ %212, %458 ]
  %263 = icmp ugt i16 %262, %460
  br i1 %263, label %446, label %447

264:                                              ; preds = %447
  store i16 %261, i16* %454, align 2
  store i16 %448, i16* %214, align 4
  br label %265

265:                                              ; preds = %264, %447
  %266 = phi i16 [ %448, %264 ], [ %261, %447 ]
  %267 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  store i8 2, i8* %267, align 2
  %268 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 1
  store i16 %459, i16* %268, align 2
  %269 = load i16, i16* %207, align 2
  %270 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 0
  store i8 2, i8* %270, align 2
  %271 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 2, i32 1
  store i16 %269, i16* %271, align 2
  %272 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 0
  store i8 2, i8* %272, align 2
  %273 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 1, i32 1
  store i16 %266, i16* %273, align 2
  %274 = load i16, i16* %454, align 2
  br label %245

275:                                              ; preds = %118, %139, %465, %478, %253, %169
  %276 = phi i1 [ false, %169 ], [ true, %253 ], [ false, %478 ], [ false, %465 ], [ false, %139 ], [ false, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  br label %444

277:                                              ; preds = %32
  %278 = icmp eq i64 %1, 0
  br i1 %278, label %281, label %279

279:                                              ; preds = %277
  %280 = tail call i8* @_Znwm(i64 %1) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %280, i8 0, i64 %1, i1 false)
  br label %281

281:                                              ; preds = %277, %279
  %282 = phi i8* [ null, %277 ], [ %280, %279 ]
  %283 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %283) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %283, i8 0, i64 18, i1 false)
  br label %288

284:                                              ; preds = %334
  %285 = icmp eq i32 %336, 1
  %286 = icmp eq i32 %335, 0
  %287 = or i1 %286, %285
  br i1 %287, label %341, label %440

288:                                              ; preds = %281, %334
  %289 = phi i64 [ %39, %281 ], [ %319, %334 ]
  %290 = phi i64 [ %38, %281 ], [ %318, %334 ]
  %291 = phi i64 [ %36, %281 ], [ %337, %334 ]
  %292 = phi i32 [ 0, %281 ], [ %336, %334 ]
  %293 = phi i32 [ 32, %281 ], [ %335, %334 ]
  %294 = getelementptr inbounds [18 x i8], [18 x i8]* @_ZN3jxlL20kCodeLengthCodeOrderE, i64 0, i64 %291
  %295 = load i8, i8* %294, align 1
  %296 = load i8*, i8** %9, align 8
  %297 = load i8*, i8** %11, align 8
  %298 = icmp ugt i8* %296, %297
  br i1 %298, label %299, label %302, !prof !2

299:                                              ; preds = %288
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %300 = load i64, i64* %35, align 8
  %301 = load i64, i64* %37, align 8
  br label %311

302:                                              ; preds = %288
  %303 = bitcast i8* %296 to i64*
  %304 = load i64, i64* %303, align 1
  %305 = shl i64 %304, %290
  %306 = or i64 %289, %305
  store i64 %306, i64* %35, align 8
  %307 = sub i64 63, %290
  %308 = lshr i64 %307, 3
  %309 = getelementptr inbounds i8, i8* %296, i64 %308
  store i8* %309, i8** %9, align 8
  %310 = or i64 %290, 56
  store i64 %310, i64* %37, align 8
  br label %311

311:                                              ; preds = %299, %302
  %312 = phi i64 [ %301, %299 ], [ %310, %302 ]
  %313 = phi i64 [ %300, %299 ], [ %306, %302 ]
  %314 = and i64 %313, 15
  %315 = getelementptr inbounds [16 x %"struct.jxl::HuffmanCode"], [16 x %"struct.jxl::HuffmanCode"]* @_ZZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderEE4huff, i64 0, i64 %314, i32 0
  %316 = load i8, i8* %315, align 4
  %317 = zext i8 %316 to i64
  %318 = sub i64 %312, %317
  store i64 %318, i64* %37, align 8
  %319 = lshr i64 %313, %317
  store i64 %319, i64* %35, align 8
  %320 = getelementptr inbounds [16 x %"struct.jxl::HuffmanCode"], [16 x %"struct.jxl::HuffmanCode"]* @_ZZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderEE4huff, i64 0, i64 %314, i32 1
  %321 = load i16, i16* %320, align 2
  %322 = trunc i16 %321 to i8
  %323 = zext i8 %295 to i64
  %324 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 %323
  store i8 %322, i8* %324, align 1
  %325 = lshr i64 61166, %314
  %326 = and i64 %325, 1
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %334, label %328

328:                                              ; preds = %311
  %329 = and i16 %321, 255
  %330 = zext i16 %329 to i32
  %331 = lshr i32 32, %330
  %332 = sub nsw i32 %293, %331
  %333 = add nsw i32 %292, 1
  br label %334

334:                                              ; preds = %311, %328
  %335 = phi i32 [ %332, %328 ], [ %293, %311 ]
  %336 = phi i32 [ %333, %328 ], [ %292, %311 ]
  %337 = add nuw nsw i64 %291, 1
  %338 = icmp ult i64 %337, 18
  %339 = icmp sgt i32 %335, 0
  %340 = and i1 %339, %338
  br i1 %340, label %288, label %284

341:                                              ; preds = %284
  %342 = trunc i64 %1 to i32
  %343 = call i32 @_ZN3jxl22ReadHuffmanCodeLengthsEPKhiPhPNS_9BitReaderE(i8* nonnull %283, i32 %342, i8* %282, %"class.jxl::BitReader"* %2)
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %440, label %345

345:                                              ; preds = %341
  %346 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %346) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %346, i8 0, i64 32, i1 false)
  br i1 %278, label %368, label %347

347:                                              ; preds = %345
  %348 = add i64 %1, -1
  %349 = and i64 %1, 3
  %350 = icmp ult i64 %348, 3
  br i1 %350, label %353, label %351

351:                                              ; preds = %347
  %352 = sub i64 %1, %349
  br label %407

353:                                              ; preds = %407, %347
  %354 = phi i64 [ 0, %347 ], [ %437, %407 ]
  %355 = icmp eq i64 %349, 0
  br i1 %355, label %368, label %356

356:                                              ; preds = %353, %356
  %357 = phi i64 [ %365, %356 ], [ %354, %353 ]
  %358 = phi i64 [ %366, %356 ], [ %349, %353 ]
  %359 = getelementptr inbounds i8, i8* %282, i64 %357
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i64
  %362 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %361
  %363 = load i16, i16* %362, align 2
  %364 = add i16 %363, 1
  store i16 %364, i16* %362, align 2
  %365 = add nuw i64 %357, 1
  %366 = add i64 %358, -1
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %368, label %356, !llvm.loop !4

368:                                              ; preds = %353, %356, %345
  %369 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0
  %370 = add i64 %1, 376
  %371 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0, i32 0, i32 1
  %372 = bitcast %"struct.jxl::HuffmanCode"** %371 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = bitcast %"struct.jxl::HuffmanDecodingData"* %0 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = sub i64 %373, %375
  %377 = ashr exact i64 %376, 2
  %378 = icmp ugt i64 %370, %377
  %379 = inttoptr i64 %375 to %"struct.jxl::HuffmanCode"*
  br i1 %378, label %380, label %384

380:                                              ; preds = %368
  %381 = sub i64 %370, %377
  call void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %369, i64 %381) #10
  %382 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0, i32 0, i32 0
  %383 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %382, align 8
  br label %388

384:                                              ; preds = %368
  %385 = icmp ult i64 %370, %377
  br i1 %385, label %386, label %388

386:                                              ; preds = %384
  %387 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %379, i64 %370
  store %"struct.jxl::HuffmanCode"* %387, %"struct.jxl::HuffmanCode"** %371, align 8
  br label %388

388:                                              ; preds = %380, %384, %386
  %389 = phi %"struct.jxl::HuffmanCode"* [ %383, %380 ], [ %379, %384 ], [ %379, %386 ]
  %390 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %391 = call i32 @_ZN3jxl17BuildHuffmanTableEPNS_11HuffmanCodeEiPKhmPt(%"struct.jxl::HuffmanCode"* %389, i32 8, i8* %282, i64 %1, i16* nonnull %390) #10
  %392 = zext i32 %391 to i64
  %393 = load i64, i64* %372, align 8
  %394 = load i64, i64* %374, align 8
  %395 = sub i64 %393, %394
  %396 = ashr exact i64 %395, 2
  %397 = icmp ult i64 %396, %392
  %398 = inttoptr i64 %394 to %"struct.jxl::HuffmanCode"*
  br i1 %397, label %399, label %401

399:                                              ; preds = %388
  %400 = sub nsw i64 %392, %396
  call void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %369, i64 %400) #10
  br label %405

401:                                              ; preds = %388
  %402 = icmp ugt i64 %396, %392
  br i1 %402, label %403, label %405

403:                                              ; preds = %401
  %404 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %398, i64 %392
  store %"struct.jxl::HuffmanCode"* %404, %"struct.jxl::HuffmanCode"** %371, align 8
  br label %405

405:                                              ; preds = %399, %401, %403
  %406 = icmp ne i32 %391, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %346) #10
  br label %440

407:                                              ; preds = %407, %351
  %408 = phi i64 [ 0, %351 ], [ %437, %407 ]
  %409 = phi i64 [ %352, %351 ], [ %438, %407 ]
  %410 = getelementptr inbounds i8, i8* %282, i64 %408
  %411 = load i8, i8* %410, align 1
  %412 = zext i8 %411 to i64
  %413 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %412
  %414 = load i16, i16* %413, align 2
  %415 = add i16 %414, 1
  store i16 %415, i16* %413, align 2
  %416 = or i64 %408, 1
  %417 = getelementptr inbounds i8, i8* %282, i64 %416
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i64
  %420 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %419
  %421 = load i16, i16* %420, align 2
  %422 = add i16 %421, 1
  store i16 %422, i16* %420, align 2
  %423 = or i64 %408, 2
  %424 = getelementptr inbounds i8, i8* %282, i64 %423
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i64
  %427 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = add i16 %428, 1
  store i16 %429, i16* %427, align 2
  %430 = or i64 %408, 3
  %431 = getelementptr inbounds i8, i8* %282, i64 %430
  %432 = load i8, i8* %431, align 1
  %433 = zext i8 %432 to i64
  %434 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %433
  %435 = load i16, i16* %434, align 2
  %436 = add i16 %435, 1
  store i16 %436, i16* %434, align 2
  %437 = add nuw i64 %408, 4
  %438 = add i64 %409, -4
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %353, label %407

440:                                              ; preds = %284, %405, %341
  %441 = phi i1 [ false, %341 ], [ false, %284 ], [ %406, %405 ]
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %283) #10
  %442 = icmp eq i8* %282, null
  br i1 %442, label %444, label %443

443:                                              ; preds = %440
  call void @_ZdlPv(i8* nonnull %282) #11
  br label %444

444:                                              ; preds = %443, %440, %275, %3
  %445 = phi i1 [ false, %3 ], [ %276, %275 ], [ %441, %440 ], [ %441, %443 ]
  ret i1 %445

446:                                              ; preds = %260
  store i16 %262, i16* %454, align 2
  store i16 %460, i16* %207, align 2
  br label %447

447:                                              ; preds = %446, %260
  %448 = phi i16 [ %262, %446 ], [ %460, %260 ]
  %449 = icmp ugt i16 %261, %448
  br i1 %449, label %264, label %265

450:                                              ; preds = %211
  store i16 %213, i16* %214, align 4
  store i16 %215, i16* %205, align 8
  br label %451

451:                                              ; preds = %450, %211
  %452 = phi i16 [ %215, %211 ], [ %213, %450 ]
  %453 = phi i16 [ %213, %211 ], [ %215, %450 ]
  %454 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 3
  %455 = load i16, i16* %454, align 2
  %456 = icmp ugt i16 %453, %455
  br i1 %456, label %457, label %458

457:                                              ; preds = %451
  store i16 %453, i16* %454, align 2
  store i16 %455, i16* %205, align 8
  br label %458

458:                                              ; preds = %457, %451
  %459 = phi i16 [ %455, %457 ], [ %453, %451 ]
  %460 = phi i16 [ %453, %457 ], [ %455, %451 ]
  %461 = icmp ugt i16 %212, %452
  br i1 %461, label %259, label %260

462:                                              ; preds = %131
  %463 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 1
  %464 = load i16, i16* %463, align 2
  br label %465

465:                                              ; preds = %470, %462
  %466 = phi i64 [ 2, %462 ], [ %471, %470 ]
  %467 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 %466
  %468 = load i16, i16* %467, align 2
  %469 = icmp eq i16 %464, %468
  br i1 %469, label %275, label %470

470:                                              ; preds = %465
  %471 = add nuw nsw i64 %466, 1
  %472 = icmp eq i64 %471, %93
  br i1 %472, label %473, label %465

473:                                              ; preds = %470
  %474 = icmp eq i64 %90, 2
  br i1 %474, label %144, label %475

475:                                              ; preds = %473
  %476 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 2
  %477 = load i16, i16* %476, align 4
  br label %478

478:                                              ; preds = %483, %475
  %479 = phi i64 [ 3, %475 ], [ %484, %483 ]
  %480 = getelementptr inbounds [4 x i16], [4 x i16]* %62, i64 0, i64 %479
  %481 = load i16, i16* %480, align 2
  %482 = icmp eq i16 %477, %481
  br i1 %482, label %275, label %483

483:                                              ; preds = %478
  %484 = add nuw nsw i64 %479, 1
  %485 = icmp eq i64 %484, %93
  br i1 %485, label %144, label %478
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* nocapture readonly, %"class.jxl::BitReader"* nocapture) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %3, align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 255
  %8 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %4, i64 %7
  %9 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %8, i64 0, i32 0
  %10 = load i8, i8* %9, align 2
  %11 = icmp ugt i8 %10, 8
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %32

15:                                               ; preds = %2
  %16 = zext i8 %10 to i64
  %17 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, -8
  store i64 %19, i64* %17, align 8
  %20 = lshr i64 %6, 8
  store i64 %20, i64* %5, align 8
  %21 = add nsw i64 %16, -8
  %22 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %4, i64 %7, i32 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i64
  %25 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %8, i64 %24
  %26 = shl nsw i64 -1, %21
  %27 = xor i64 %26, -1
  %28 = and i64 %20, %27
  %29 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %25, i64 %28
  %30 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %29, i64 0, i32 0
  %31 = load i8, i8* %30, align 2
  br label %32

32:                                               ; preds = %12, %15
  %33 = phi i64 [ %20, %15 ], [ %6, %12 ]
  %34 = phi i64 [ %19, %15 ], [ %14, %12 ]
  %35 = phi i8 [ %31, %15 ], [ %10, %12 ]
  %36 = phi %"struct.jxl::HuffmanCode"* [ %29, %15 ], [ %8, %12 ]
  %37 = zext i8 %35 to i64
  %38 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %39 = sub i64 %34, %37
  store i64 %39, i64* %38, align 8
  %40 = lshr i64 %33, %37
  store i64 %40, i64* %5, align 8
  %41 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %36, i64 0, i32 1
  %42 = load i16, i16* %41, align 2
  ret i16 %42
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::HuffmanCode"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::HuffmanCode"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::HuffmanCode"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 %1
  %17 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 0, i32 0
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 %18, i32 0
  %20 = sub i64 0, %8
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = add i64 %22, 4
  %24 = and i64 %23, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %24, i1 false) #10
  %25 = ptrtoint %"struct.jxl::HuffmanCode"* %16 to i64
  br label %26

26:                                               ; preds = %12, %15
  %27 = phi i64 [ %25, %15 ], [ %8, %12 ]
  store i64 %27, i64* %7, align 8
  br label %83

28:                                               ; preds = %2
  %29 = bitcast %"class.std::__1::vector"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %8, %30
  %32 = ashr exact i64 %31, 2
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 4611686018427387903
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #12
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %5, %30
  %39 = ashr exact i64 %38, 2
  %40 = icmp ult i64 %39, 2305843009213693951
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = ashr exact i64 %38, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %41
  %47 = icmp ugt i64 %44, 4611686018427387903
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #12
  unreachable

49:                                               ; preds = %37, %46
  %50 = phi i64 [ %44, %46 ], [ 4611686018427387903, %37 ]
  %51 = shl i64 %50, 2
  %52 = tail call i8* @_Znwm(i64 %51) #11
  %53 = bitcast i8* %52 to %"struct.jxl::HuffmanCode"*
  br label %54

54:                                               ; preds = %41, %49
  %55 = phi i64 [ %50, %49 ], [ 0, %41 ]
  %56 = phi %"struct.jxl::HuffmanCode"* [ %53, %49 ], [ null, %41 ]
  %57 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %56, i64 %32
  %58 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 0, i32 0
  %59 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %56, i64 %55
  %60 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 %1
  %61 = shl nsw i64 %1, 2
  call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %61, i1 false)
  %62 = ptrtoint %"struct.jxl::HuffmanCode"* %59 to i64
  %63 = ptrtoint %"struct.jxl::HuffmanCode"* %60 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %64, align 8
  %66 = load i64, i64* %7, align 8
  %67 = ptrtoint %"struct.jxl::HuffmanCode"* %65 to i64
  %68 = sub i64 %66, %67
  %69 = ashr exact i64 %68, 2
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 %70
  %72 = ptrtoint %"struct.jxl::HuffmanCode"* %71 to i64
  %73 = icmp sgt i64 %68, 0
  br i1 %73, label %74, label %78

74:                                               ; preds = %54
  %75 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %71, i64 0, i32 0
  %76 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %65, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %75, i8* align 2 %76, i64 %68, i1 false) #10
  %77 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %64, align 8
  br label %78

78:                                               ; preds = %54, %74
  %79 = phi %"struct.jxl::HuffmanCode"* [ %65, %54 ], [ %77, %74 ]
  store i64 %72, i64* %29, align 8
  store i64 %63, i64* %7, align 8
  store i64 %62, i64* %4, align 8
  %80 = icmp eq %"struct.jxl::HuffmanCode"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %79, i64 0, i32 0
  tail call void @_ZdlPv(i8* %82) #11
  br label %83

83:                                               ; preds = %81, %78, %26
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i64 0, i64 65}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
