; ModuleID = '../../cc/input/snap_selection_strategy.cc'
source_filename = "../../cc/input/snap_selection_strategy.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::SnapSelectionStrategy" = type { i32 (...)**, %"class.gfx::ScrollOffset" }
%"class.gfx::ScrollOffset" = type { float, float }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"struct.cc::ElementId" = type { i64 }
%"class.cc::EndPositionStrategy" = type { %"class.cc::SnapSelectionStrategy", i8, i8, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.cc::SnapSearchResult" }
%"class.cc::SnapSearchResult" = type { float, %"class.gfx::RangeF", %"struct.cc::ElementId" }
%"class.gfx::RangeF" = type { float, float }
%"class.cc::DirectionStrategy" = type <{ %"class.cc::SnapSelectionStrategy", %"class.gfx::ScrollOffset", i32, i8, [3 x i8] }>
%"class.cc::EndAndDirectionStrategy" = type <{ %"class.cc::SnapSelectionStrategy", %"class.gfx::ScrollOffset", i8, [7 x i8] }>

$_ZN2cc21SnapSelectionStrategyD0Ev = comdat any

$_ZN2cc21SnapSelectionStrategyD2Ev = comdat any

$_ZN2cc19EndPositionStrategyD0Ev = comdat any

$_ZN2cc17DirectionStrategyD0Ev = comdat any

$_ZN2cc23EndAndDirectionStrategyD0Ev = comdat any

@_ZTVN2cc21SnapSelectionStrategyE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::SnapSelectionStrategy"*)* @_ZN2cc21SnapSelectionStrategyD2Ev to i8*), i8* bitcast (void (%"class.cc::SnapSelectionStrategy"*)* @_ZN2cc21SnapSelectionStrategyD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy27ShouldPrioritizeSnapTargetsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*, i32, %"struct.cc::SnapAreaData"*)* @_ZNK2cc21SnapSelectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy20HasIntendedDirectionEv to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy21ShouldRespectSnapStopEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy22UsingFractionalOffsetsEv to i8*)] }, align 8
@_ZTVN2cc19EndPositionStrategyE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::SnapSelectionStrategy"*)* @_ZN2cc21SnapSelectionStrategyD2Ev to i8*), i8* bitcast (void (%"class.cc::EndPositionStrategy"*)* @_ZN2cc19EndPositionStrategyD0Ev to i8*), i8* bitcast (i1 (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy13ShouldSnapOnXEv to i8*), i8* bitcast (i1 (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy13ShouldSnapOnYEv to i8*), i8* bitcast (i1 (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy27ShouldPrioritizeSnapTargetsEv to i8*), i8* bitcast (<2 x float> (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy17intended_positionEv to i8*), i8* bitcast (<2 x float> (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy13base_positionEv to i8*), i8* bitcast (i1 (%"class.cc::EndPositionStrategy"*, i32, float)* @_ZNK2cc19EndPositionStrategy19IsValidSnapPositionENS_10SearchAxisEf to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*, i32, %"struct.cc::SnapAreaData"*)* @_ZNK2cc21SnapSelectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE to i8*), i8* bitcast (i1 (%"class.cc::EndPositionStrategy"*)* @_ZNK2cc19EndPositionStrategy20HasIntendedDirectionEv to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy21ShouldRespectSnapStopEv to i8*), i8* bitcast (%"class.absl::optional"* (%"class.cc::EndPositionStrategy"*, %"class.absl::optional"*, %"class.absl::optional"*)* @_ZNK2cc19EndPositionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_ to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy22UsingFractionalOffsetsEv to i8*)] }, align 8
@_ZTVN2cc17DirectionStrategyE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::SnapSelectionStrategy"*)* @_ZN2cc21SnapSelectionStrategyD2Ev to i8*), i8* bitcast (void (%"class.cc::DirectionStrategy"*)* @_ZN2cc17DirectionStrategyD0Ev to i8*), i8* bitcast (i1 (%"class.cc::DirectionStrategy"*)* @_ZNK2cc17DirectionStrategy13ShouldSnapOnXEv to i8*), i8* bitcast (i1 (%"class.cc::DirectionStrategy"*)* @_ZNK2cc17DirectionStrategy13ShouldSnapOnYEv to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy27ShouldPrioritizeSnapTargetsEv to i8*), i8* bitcast (<2 x float> (%"class.cc::DirectionStrategy"*)* @_ZNK2cc17DirectionStrategy17intended_positionEv to i8*), i8* bitcast (<2 x float> (%"class.cc::DirectionStrategy"*)* @_ZNK2cc17DirectionStrategy13base_positionEv to i8*), i8* bitcast (i1 (%"class.cc::DirectionStrategy"*, i32, float)* @_ZNK2cc17DirectionStrategy19IsValidSnapPositionENS_10SearchAxisEf to i8*), i8* bitcast (i1 (%"class.cc::DirectionStrategy"*, i32, %"struct.cc::SnapAreaData"*)* @_ZNK2cc17DirectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy20HasIntendedDirectionEv to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy21ShouldRespectSnapStopEv to i8*), i8* bitcast (%"class.absl::optional"* (%"class.cc::DirectionStrategy"*, %"class.absl::optional"*, %"class.absl::optional"*)* @_ZNK2cc17DirectionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_ to i8*), i8* bitcast (i1 (%"class.cc::DirectionStrategy"*)* @_ZNK2cc17DirectionStrategy22UsingFractionalOffsetsEv to i8*)] }, align 8
@_ZTVN2cc23EndAndDirectionStrategyE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::SnapSelectionStrategy"*)* @_ZN2cc21SnapSelectionStrategyD2Ev to i8*), i8* bitcast (void (%"class.cc::EndAndDirectionStrategy"*)* @_ZN2cc23EndAndDirectionStrategyD0Ev to i8*), i8* bitcast (i1 (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy13ShouldSnapOnXEv to i8*), i8* bitcast (i1 (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy13ShouldSnapOnYEv to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy27ShouldPrioritizeSnapTargetsEv to i8*), i8* bitcast (<2 x float> (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy17intended_positionEv to i8*), i8* bitcast (<2 x float> (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy13base_positionEv to i8*), i8* bitcast (i1 (%"class.cc::EndAndDirectionStrategy"*, i32, float)* @_ZNK2cc23EndAndDirectionStrategy19IsValidSnapPositionENS_10SearchAxisEf to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*, i32, %"struct.cc::SnapAreaData"*)* @_ZNK2cc21SnapSelectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE to i8*), i8* bitcast (i1 (%"class.cc::SnapSelectionStrategy"*)* @_ZNK2cc21SnapSelectionStrategy20HasIntendedDirectionEv to i8*), i8* bitcast (i1 (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy21ShouldRespectSnapStopEv to i8*), i8* bitcast (%"class.absl::optional"* (%"class.cc::EndAndDirectionStrategy"*, %"class.absl::optional"*, %"class.absl::optional"*)* @_ZNK2cc23EndAndDirectionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_ to i8*), i8* bitcast (i1 (%"class.cc::EndAndDirectionStrategy"*)* @_ZNK2cc23EndAndDirectionStrategy22UsingFractionalOffsetsEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::SnapSelectionStrategy"* @_ZN2cc21SnapSelectionStrategy20CreateForEndPositionERKN3gfx12ScrollOffsetEbbNS_25SnapTargetsPrioritizationE(%"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8), i1 zeroext, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = zext i1 %1 to i8
  %6 = zext i1 %2 to i8
  %7 = tail call i8* @_Znwm(i64 24) #10
  %8 = bitcast i8* %7 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = bitcast %"class.gfx::ScrollOffset"* %0 to i64*
  %11 = bitcast i8* %9 to i64*
  %12 = load i64, i64* %10, align 4
  store i64 %12, i64* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2cc19EndPositionStrategyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 16
  store i8 %5, i8* %13, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 17
  store i8 %6, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %7, i64 20
  %16 = bitcast i8* %15 to i32*
  store i32 %3, i32* %16, align 4
  %17 = bitcast i8* %7 to %"class.cc::SnapSelectionStrategy"*
  ret %"class.cc::SnapSelectionStrategy"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::SnapSelectionStrategy"* @_ZN2cc21SnapSelectionStrategy18CreateForDirectionEN3gfx12ScrollOffsetES2_bNS_20SnapStopAlwaysFilterE(<2 x float>, <2 x float>, i1 zeroext, i32) local_unnamed_addr #1 align 2 {
  %5 = zext i1 %2 to i8
  %6 = tail call i8* @_Znwm(i64 32) #10
  %7 = bitcast i8* %6 to i32 (...)***
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  store <2 x float> %0, <2 x float>* %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2cc17DirectionStrategyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds i8, i8* %6, i64 16
  %11 = bitcast i8* %10 to <2 x float>*
  store <2 x float> %1, <2 x float>* %11, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 24
  %13 = bitcast i8* %12 to i32*
  store i32 %3, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 28
  store i8 %5, i8* %14, align 4
  %15 = bitcast i8* %6 to %"class.cc::SnapSelectionStrategy"*
  ret %"class.cc::SnapSelectionStrategy"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::SnapSelectionStrategy"* @_ZN2cc21SnapSelectionStrategy24CreateForEndAndDirectionEN3gfx12ScrollOffsetES2_b(<2 x float>, <2 x float>, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = zext i1 %2 to i8
  %5 = tail call i8* @_Znwm(i64 32) #10
  %6 = bitcast i8* %5 to i32 (...)***
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to <2 x float>*
  store <2 x float> %0, <2 x float>* %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2cc23EndAndDirectionStrategyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %9 = getelementptr inbounds i8, i8* %5, i64 16
  %10 = bitcast i8* %9 to <2 x float>*
  store <2 x float> %1, <2 x float>* %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 24
  store i8 %4, i8* %11, align 8
  %12 = bitcast i8* %5 to %"class.cc::SnapSelectionStrategy"*
  ret %"class.cc::SnapSelectionStrategy"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::SnapSelectionStrategy"* @_ZN2cc21SnapSelectionStrategy22CreateForTargetElementEN3gfx12ScrollOffsetE(<2 x float>) local_unnamed_addr #1 align 2 {
  %2 = tail call i8* @_Znwm(i64 24) #10
  %3 = bitcast i8* %2 to i32 (...)***
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to <2 x float>*
  store <2 x float> %0, <2 x float>* %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2cc19EndPositionStrategyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 16
  store i8 1, i8* %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 17
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 20
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4
  %10 = bitcast i8* %2 to %"class.cc::SnapSelectionStrategy"*
  ret %"class.cc::SnapSelectionStrategy"* %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc21SnapSelectionStrategy20HasIntendedDirectionEv(%"class.cc::SnapSelectionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc21SnapSelectionStrategy21ShouldRespectSnapStopEv(%"class.cc::SnapSelectionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc21SnapSelectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE(%"class.cc::SnapSelectionStrategy"* nocapture readnone, i32, %"struct.cc::SnapAreaData"* nocapture readonly dereferenceable(40)) unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %"struct.cc::SnapAreaData", %"struct.cc::SnapAreaData"* %2, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"struct.cc::SnapAreaData", %"struct.cc::SnapAreaData"* %2, i64 0, i32 0, i32 0
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %6, align 4
  %9 = select i1 %4, i32 %7, i32 %8
  %10 = icmp ne i32 %9, 0
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc21SnapSelectionStrategy27ShouldPrioritizeSnapTargetsEv(%"class.cc::SnapSelectionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc21SnapSelectionStrategy22UsingFractionalOffsetsEv(%"class.cc::SnapSelectionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc19EndPositionStrategy13ShouldSnapOnXEv(%"class.cc::EndPositionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc19EndPositionStrategy13ShouldSnapOnYEv(%"class.cc::EndPositionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc19EndPositionStrategy17intended_positionEv(%"class.cc::EndPositionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 8
  ret <2 x float> %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc19EndPositionStrategy13base_positionEv(%"class.cc::EndPositionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 8
  ret <2 x float> %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc19EndPositionStrategy19IsValidSnapPositionENS_10SearchAxisEf(%"class.cc::EndPositionStrategy"* nocapture readonly, i32, float) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp ne i8 %5, 0
  %7 = icmp eq i32 %1, 0
  %8 = and i1 %7, %6
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp ne i8 %11, 0
  %13 = icmp eq i32 %1, 1
  %14 = and i1 %13, %12
  br label %15

15:                                               ; preds = %9, %3
  %16 = phi i1 [ true, %3 ], [ %14, %9 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc19EndPositionStrategy20HasIntendedDirectionEv(%"class.cc::EndPositionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc19EndPositionStrategy27ShouldPrioritizeSnapTargetsEv(%"class.cc::EndPositionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndPositionStrategy", %"class.cc::EndPositionStrategy"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 1
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(32) %"class.absl::optional"* @_ZNK2cc19EndPositionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_(%"class.cc::EndPositionStrategy"* nocapture readnone, %"class.absl::optional"* readnone dereferenceable(32), %"class.absl::optional"* readonly dereferenceable(32)) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, %"class.absl::optional"* %1, %"class.absl::optional"* %2
  ret %"class.absl::optional"* %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17DirectionStrategy13ShouldSnapOnXEv(%"class.cc::DirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17DirectionStrategy13ShouldSnapOnYEv(%"class.cc::DirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 1
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc17DirectionStrategy17intended_positionEv(%"class.cc::DirectionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fadd <2 x float> %7, %4
  ret <2 x float> %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc17DirectionStrategy13base_positionEv(%"class.cc::DirectionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 8
  ret <2 x float> %4
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17DirectionStrategy19IsValidSnapPositionENS_10SearchAxisEf(%"class.cc::DirectionStrategy"* nocapture readonly, i32, float) unnamed_addr #5 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %5, label %29

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load float, float* %6, align 4
  %8 = fsub float %2, %7
  %9 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %5
  %13 = fcmp ogt float %8, 0.000000e+00
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = tail call float @llvm.floor.f32(float %8) #11
  br label %18

16:                                               ; preds = %12
  %17 = tail call float @llvm.ceil.f32(float %8) #11
  br label %18

18:                                               ; preds = %14, %16, %5
  %19 = phi float [ %8, %5 ], [ %15, %14 ], [ %17, %16 ]
  %20 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 0
  %21 = load float, float* %20, align 4
  %22 = fcmp ogt float %21, 0.000000e+00
  %23 = fcmp ogt float %19, 0.000000e+00
  %24 = and i1 %23, %22
  br i1 %24, label %53, label %25

25:                                               ; preds = %18
  %26 = fcmp olt float %21, 0.000000e+00
  %27 = fcmp olt float %19, 0.000000e+00
  %28 = and i1 %27, %26
  br label %53

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 0, i32 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = fsub float %2, %31
  %33 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %42

36:                                               ; preds = %29
  %37 = fcmp ogt float %32, 0.000000e+00
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call float @llvm.floor.f32(float %32) #11
  br label %42

40:                                               ; preds = %36
  %41 = tail call float @llvm.ceil.f32(float %32) #11
  br label %42

42:                                               ; preds = %38, %40, %29
  %43 = phi float [ %32, %29 ], [ %39, %38 ], [ %41, %40 ]
  %44 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 1
  %45 = load float, float* %44, align 4
  %46 = fcmp ogt float %45, 0.000000e+00
  %47 = fcmp ogt float %43, 0.000000e+00
  %48 = and i1 %47, %46
  br i1 %48, label %53, label %49

49:                                               ; preds = %42
  %50 = fcmp olt float %45, 0.000000e+00
  %51 = fcmp olt float %43, 0.000000e+00
  %52 = and i1 %51, %50
  br label %53

53:                                               ; preds = %42, %49, %18, %25
  %54 = phi i1 [ true, %18 ], [ %28, %25 ], [ true, %42 ], [ %52, %49 ]
  ret i1 %54
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17DirectionStrategy15IsValidSnapAreaENS_10SearchAxisERKNS_12SnapAreaDataE(%"class.cc::DirectionStrategy"* nocapture readonly, i32, %"struct.cc::SnapAreaData"* nocapture readonly dereferenceable(40)) unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %"struct.cc::SnapAreaData", %"struct.cc::SnapAreaData"* %2, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"struct.cc::SnapAreaData", %"struct.cc::SnapAreaData"* %2, i64 0, i32 0, i32 0
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %6, align 4
  %9 = select i1 %4, i32 %7, i32 %8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.cc::SnapAreaData", %"struct.cc::SnapAreaData"* %2, i64 0, i32 2
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp ne i8 %17, 0
  br label %19

19:                                               ; preds = %3, %11, %15
  %20 = phi i1 [ false, %3 ], [ true, %11 ], [ %18, %15 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.absl::optional"* @_ZNK2cc17DirectionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_(%"class.cc::DirectionStrategy"* nocapture readonly, %"class.absl::optional"* readonly dereferenceable(32), %"class.absl::optional"* readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %38, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 0
  %13 = load float, float* %12, align 4
  %14 = fcmp ogt float %13, 0.000000e+00
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 1
  %17 = load float, float* %16, align 4
  %18 = fcmp ogt float %17, 0.000000e+00
  br i1 %18, label %19, label %25

19:                                               ; preds = %15, %11
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %21 = load float, float* %20, align 8
  %22 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %23 = load float, float* %22, align 8
  %24 = fcmp olt float %21, %23
  br i1 %24, label %38, label %25

25:                                               ; preds = %19, %15
  %26 = fcmp olt float %13, 0.000000e+00
  br i1 %26, label %31, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 1, i32 1
  %29 = load float, float* %28, align 4
  %30 = fcmp olt float %29, 0.000000e+00
  br i1 %30, label %31, label %37

31:                                               ; preds = %27, %25
  %32 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %33 = load float, float* %32, align 8
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %35 = load float, float* %34, align 8
  %36 = fcmp ogt float %33, %35
  br i1 %36, label %38, label %37

37:                                               ; preds = %31, %27
  br label %38

38:                                               ; preds = %7, %3, %31, %19, %37
  %39 = phi %"class.absl::optional"* [ %2, %37 ], [ %2, %3 ], [ %1, %7 ], [ %1, %19 ], [ %1, %31 ]
  ret %"class.absl::optional"* %39
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17DirectionStrategy22UsingFractionalOffsetsEv(%"class.cc::DirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::DirectionStrategy", %"class.cc::DirectionStrategy"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc23EndAndDirectionStrategy13ShouldSnapOnXEv(%"class.cc::EndAndDirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc23EndAndDirectionStrategy13ShouldSnapOnYEv(%"class.cc::EndAndDirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 1
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc23EndAndDirectionStrategy17intended_positionEv(%"class.cc::EndAndDirectionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fadd <2 x float> %7, %4
  ret <2 x float> %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK2cc23EndAndDirectionStrategy13base_positionEv(%"class.cc::EndAndDirectionStrategy"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fadd <2 x float> %7, %4
  ret <2 x float> %8
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc23EndAndDirectionStrategy19IsValidSnapPositionENS_10SearchAxisEf(%"class.cc::EndAndDirectionStrategy"* nocapture readonly, i32, float) unnamed_addr #5 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %5, label %23

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load float, float* %6, align 4
  %8 = fsub float %2, %7
  %9 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 2
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = tail call float @llvm.round.f32(float %8) #11
  %13 = select i1 %11, float %12, float %8
  %14 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %15, 0.000000e+00
  %17 = fcmp ogt float %13, 0.000000e+00
  %18 = and i1 %16, %17
  br i1 %18, label %41, label %19

19:                                               ; preds = %5
  %20 = fcmp olt float %15, 0.000000e+00
  %21 = fcmp olt float %13, 0.000000e+00
  %22 = and i1 %20, %21
  br label %41

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 0, i32 1, i32 1
  %25 = load float, float* %24, align 4
  %26 = fsub float %2, %25
  %27 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 2
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  %30 = tail call float @llvm.round.f32(float %26) #11
  %31 = select i1 %29, float %30, float %26
  %32 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 1, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = fcmp ogt float %31, 0.000000e+00
  %36 = and i1 %34, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %23
  %38 = fcmp olt float %33, 0.000000e+00
  %39 = fcmp olt float %31, 0.000000e+00
  %40 = and i1 %38, %39
  br label %41

41:                                               ; preds = %23, %37, %5, %19
  %42 = phi i1 [ true, %5 ], [ %22, %19 ], [ true, %23 ], [ %40, %37 ]
  ret i1 %42
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2cc23EndAndDirectionStrategy21ShouldRespectSnapStopEv(%"class.cc::EndAndDirectionStrategy"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(32) %"class.absl::optional"* @_ZNK2cc23EndAndDirectionStrategy14PickBestResultERKN4absl8optionalINS_16SnapSearchResultEEES6_(%"class.cc::EndAndDirectionStrategy"* nocapture readnone, %"class.absl::optional"* readnone dereferenceable(32), %"class.absl::optional"* readonly dereferenceable(32)) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, %"class.absl::optional"* %1, %"class.absl::optional"* %2
  ret %"class.absl::optional"* %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc23EndAndDirectionStrategy22UsingFractionalOffsetsEv(%"class.cc::EndAndDirectionStrategy"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::EndAndDirectionStrategy", %"class.cc::EndAndDirectionStrategy"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc21SnapSelectionStrategyD0Ev(%"class.cc::SnapSelectionStrategy"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc21SnapSelectionStrategyD2Ev(%"class.cc::SnapSelectionStrategy"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc19EndPositionStrategyD0Ev(%"class.cc::EndPositionStrategy"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.cc::EndPositionStrategy"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc17DirectionStrategyD0Ev(%"class.cc::DirectionStrategy"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.cc::DirectionStrategy"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc23EndAndDirectionStrategyD0Ev(%"class.cc::EndAndDirectionStrategy"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.cc::EndAndDirectionStrategy"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
