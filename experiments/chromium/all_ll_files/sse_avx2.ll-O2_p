; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/sse_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/sse_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @aom_sse_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  switch i32 %4, label %331 [
    i32 4, label %30
    i32 8, label %23
    i32 16, label %16
    i32 32, label %13
    i32 64, label %10
    i32 128, label %7
  ]

7:                                                ; preds = %6
  %8 = sext i32 %1 to i64
  %9 = sext i32 %3 to i64
  br label %244

10:                                               ; preds = %6
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  br label %197

13:                                               ; preds = %6
  %14 = sext i32 %1 to i64
  %15 = sext i32 %3 to i64
  br label %170

16:                                               ; preds = %6
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  br label %127

23:                                               ; preds = %6
  %24 = sext i32 %1 to i64
  %25 = sext i32 %3 to i64
  %26 = shl i32 %1, 1
  %27 = sext i32 %26 to i64
  %28 = shl i32 %3, 1
  %29 = sext i32 %28 to i64
  br label %97

30:                                               ; preds = %6
  %31 = sext i32 %1 to i64
  %32 = shl nsw i32 %1, 1
  %33 = sext i32 %32 to i64
  %34 = mul nsw i32 %1, 3
  %35 = sext i32 %34 to i64
  %36 = sext i32 %3 to i64
  %37 = shl nsw i32 %3, 1
  %38 = sext i32 %37 to i64
  %39 = mul nsw i32 %3, 3
  %40 = sext i32 %39 to i64
  %41 = shl i32 %1, 2
  %42 = sext i32 %41 to i64
  %43 = shl i32 %3, 2
  %44 = sext i32 %43 to i64
  br label %45

45:                                               ; preds = %30, %45
  %46 = phi <8 x i32> [ %92, %45 ], [ zeroinitializer, %30 ]
  %47 = phi i32 [ %95, %45 ], [ 0, %30 ]
  %48 = phi i8* [ %94, %45 ], [ %2, %30 ]
  %49 = phi i8* [ %93, %45 ], [ %0, %30 ]
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = getelementptr inbounds i8, i8* %49, i64 %31
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 1
  %56 = getelementptr inbounds i8, i8* %49, i64 %33
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 1
  %59 = insertelement <4 x i32> undef, i32 %58, i32 0
  %60 = getelementptr inbounds i8, i8* %49, i64 %35
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = bitcast i8* %48 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = insertelement <4 x i32> undef, i32 %64, i32 0
  %66 = getelementptr inbounds i8, i8* %48, i64 %36
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = getelementptr inbounds i8, i8* %48, i64 %38
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = insertelement <4 x i32> undef, i32 %71, i32 0
  %73 = getelementptr inbounds i8, i8* %48, i64 %40
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 1
  %76 = insertelement <4 x i32> %52, i32 %55, i32 1
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = insertelement <4 x i32> %59, i32 %62, i32 1
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <2 x i64> %77, <2 x i64> %79, <2 x i32> <i32 0, i32 2>
  %81 = insertelement <4 x i32> %65, i32 %68, i32 1
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = insertelement <4 x i32> %72, i32 %75, i32 1
  %84 = bitcast <4 x i32> %83 to <2 x i64>
  %85 = shufflevector <2 x i64> %82, <2 x i64> %84, <2 x i32> <i32 0, i32 2>
  %86 = bitcast <2 x i64> %80 to <16 x i8>
  %87 = zext <16 x i8> %86 to <16 x i16>
  %88 = bitcast <2 x i64> %85 to <16 x i8>
  %89 = zext <16 x i8> %88 to <16 x i16>
  %90 = sub nsw <16 x i16> %87, %89
  %91 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %90) #2
  %92 = add <8 x i32> %91, %46
  %93 = getelementptr inbounds i8, i8* %49, i64 %42
  %94 = getelementptr inbounds i8, i8* %48, i64 %44
  %95 = add nuw nsw i32 %47, 4
  %96 = icmp slt i32 %95, %5
  br i1 %96, label %45, label %504

97:                                               ; preds = %23, %97
  %98 = phi <8 x i32> [ %122, %97 ], [ zeroinitializer, %23 ]
  %99 = phi i32 [ %125, %97 ], [ 0, %23 ]
  %100 = phi i8* [ %124, %97 ], [ %2, %23 ]
  %101 = phi i8* [ %123, %97 ], [ %0, %23 ]
  %102 = bitcast i8* %101 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i8, i8* %101, i64 %24
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = bitcast i8* %100 to i64*
  %109 = load i64, i64* %108, align 1
  %110 = insertelement <2 x i64> undef, i64 %109, i32 0
  %111 = getelementptr inbounds i8, i8* %100, i64 %25
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> %104, i64 %107, i32 1
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = zext <16 x i8> %115 to <16 x i16>
  %117 = insertelement <2 x i64> %110, i64 %113, i32 1
  %118 = bitcast <2 x i64> %117 to <16 x i8>
  %119 = zext <16 x i8> %118 to <16 x i16>
  %120 = sub nsw <16 x i16> %116, %119
  %121 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %120, <16 x i16> %120) #2
  %122 = add <8 x i32> %121, %98
  %123 = getelementptr inbounds i8, i8* %101, i64 %27
  %124 = getelementptr inbounds i8, i8* %100, i64 %29
  %125 = add nuw nsw i32 %99, 2
  %126 = icmp slt i32 %125, %5
  br i1 %126, label %97, label %504

127:                                              ; preds = %16, %127
  %128 = phi <8 x i32> [ %165, %127 ], [ zeroinitializer, %16 ]
  %129 = phi i32 [ %168, %127 ], [ 0, %16 ]
  %130 = phi i8* [ %167, %127 ], [ %2, %16 ]
  %131 = phi i8* [ %166, %127 ], [ %0, %16 ]
  %132 = bitcast i8* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 1
  %134 = getelementptr inbounds i8, i8* %131, i64 %17
  %135 = bitcast i8* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 1
  %137 = bitcast i8* %130 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1
  %139 = getelementptr inbounds i8, i8* %130, i64 %18
  %140 = bitcast i8* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 1
  %142 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %143 = bitcast <4 x i64> %142 to <8 x i32>
  %144 = shufflevector <4 x i32> %136, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <8 x i32> %143, <8 x i32> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %146 = shufflevector <2 x i64> %138, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %147 = bitcast <4 x i64> %146 to <8 x i32>
  %148 = shufflevector <4 x i32> %141, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = shufflevector <8 x i32> %147, <8 x i32> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %150 = bitcast <8 x i32> %145 to <32 x i8>
  %151 = shufflevector <32 x i8> %150, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %152 = shufflevector <32 x i8> %150, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %153 = bitcast <8 x i32> %149 to <32 x i8>
  %154 = shufflevector <32 x i8> %153, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %155 = shufflevector <32 x i8> %153, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %156 = bitcast <32 x i8> %151 to <16 x i16>
  %157 = bitcast <32 x i8> %154 to <16 x i16>
  %158 = sub <16 x i16> %156, %157
  %159 = bitcast <32 x i8> %152 to <16 x i16>
  %160 = bitcast <32 x i8> %155 to <16 x i16>
  %161 = sub <16 x i16> %159, %160
  %162 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %158, <16 x i16> %158) #2
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %161) #2
  %164 = add <8 x i32> %162, %128
  %165 = add <8 x i32> %164, %163
  %166 = getelementptr inbounds i8, i8* %131, i64 %20
  %167 = getelementptr inbounds i8, i8* %130, i64 %22
  %168 = add nuw nsw i32 %129, 2
  %169 = icmp slt i32 %168, %5
  br i1 %169, label %127, label %504

170:                                              ; preds = %13, %170
  %171 = phi <8 x i32> [ %192, %170 ], [ zeroinitializer, %13 ]
  %172 = phi i32 [ %195, %170 ], [ 0, %13 ]
  %173 = phi i8* [ %194, %170 ], [ %2, %13 ]
  %174 = phi i8* [ %193, %170 ], [ %0, %13 ]
  %175 = bitcast i8* %174 to <32 x i8>*
  %176 = load <32 x i8>, <32 x i8>* %175, align 1
  %177 = bitcast i8* %173 to <32 x i8>*
  %178 = load <32 x i8>, <32 x i8>* %177, align 1
  %179 = shufflevector <32 x i8> %176, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %180 = shufflevector <32 x i8> %176, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %181 = shufflevector <32 x i8> %178, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %182 = shufflevector <32 x i8> %178, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %183 = bitcast <32 x i8> %179 to <16 x i16>
  %184 = bitcast <32 x i8> %181 to <16 x i16>
  %185 = sub <16 x i16> %183, %184
  %186 = bitcast <32 x i8> %180 to <16 x i16>
  %187 = bitcast <32 x i8> %182 to <16 x i16>
  %188 = sub <16 x i16> %186, %187
  %189 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %185) #2
  %190 = add <8 x i32> %189, %171
  %191 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %188, <16 x i16> %188) #2
  %192 = add <8 x i32> %190, %191
  %193 = getelementptr inbounds i8, i8* %174, i64 %14
  %194 = getelementptr inbounds i8, i8* %173, i64 %15
  %195 = add nuw nsw i32 %172, 1
  %196 = icmp slt i32 %195, %5
  br i1 %196, label %170, label %504

197:                                              ; preds = %10, %197
  %198 = phi <8 x i32> [ %239, %197 ], [ zeroinitializer, %10 ]
  %199 = phi i32 [ %242, %197 ], [ 0, %10 ]
  %200 = phi i8* [ %241, %197 ], [ %2, %10 ]
  %201 = phi i8* [ %240, %197 ], [ %0, %10 ]
  %202 = bitcast i8* %201 to <32 x i8>*
  %203 = load <32 x i8>, <32 x i8>* %202, align 1
  %204 = bitcast i8* %200 to <32 x i8>*
  %205 = load <32 x i8>, <32 x i8>* %204, align 1
  %206 = shufflevector <32 x i8> %203, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %207 = shufflevector <32 x i8> %203, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %208 = shufflevector <32 x i8> %205, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %209 = shufflevector <32 x i8> %205, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %210 = bitcast <32 x i8> %206 to <16 x i16>
  %211 = bitcast <32 x i8> %208 to <16 x i16>
  %212 = sub <16 x i16> %210, %211
  %213 = bitcast <32 x i8> %207 to <16 x i16>
  %214 = bitcast <32 x i8> %209 to <16 x i16>
  %215 = sub <16 x i16> %213, %214
  %216 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %212, <16 x i16> %212) #2
  %217 = add <8 x i32> %216, %198
  %218 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %215, <16 x i16> %215) #2
  %219 = add <8 x i32> %217, %218
  %220 = getelementptr inbounds i8, i8* %201, i64 32
  %221 = getelementptr inbounds i8, i8* %200, i64 32
  %222 = bitcast i8* %220 to <32 x i8>*
  %223 = load <32 x i8>, <32 x i8>* %222, align 1
  %224 = bitcast i8* %221 to <32 x i8>*
  %225 = load <32 x i8>, <32 x i8>* %224, align 1
  %226 = shufflevector <32 x i8> %223, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %227 = shufflevector <32 x i8> %223, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %228 = shufflevector <32 x i8> %225, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %229 = shufflevector <32 x i8> %225, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %230 = bitcast <32 x i8> %226 to <16 x i16>
  %231 = bitcast <32 x i8> %228 to <16 x i16>
  %232 = sub <16 x i16> %230, %231
  %233 = bitcast <32 x i8> %227 to <16 x i16>
  %234 = bitcast <32 x i8> %229 to <16 x i16>
  %235 = sub <16 x i16> %233, %234
  %236 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %232, <16 x i16> %232) #2
  %237 = add <8 x i32> %219, %236
  %238 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %235, <16 x i16> %235) #2
  %239 = add <8 x i32> %237, %238
  %240 = getelementptr inbounds i8, i8* %201, i64 %11
  %241 = getelementptr inbounds i8, i8* %200, i64 %12
  %242 = add nuw nsw i32 %199, 1
  %243 = icmp slt i32 %242, %5
  br i1 %243, label %197, label %504

244:                                              ; preds = %7, %244
  %245 = phi <8 x i32> [ %326, %244 ], [ zeroinitializer, %7 ]
  %246 = phi i32 [ %329, %244 ], [ 0, %7 ]
  %247 = phi i8* [ %328, %244 ], [ %2, %7 ]
  %248 = phi i8* [ %327, %244 ], [ %0, %7 ]
  %249 = bitcast i8* %248 to <32 x i8>*
  %250 = load <32 x i8>, <32 x i8>* %249, align 1
  %251 = bitcast i8* %247 to <32 x i8>*
  %252 = load <32 x i8>, <32 x i8>* %251, align 1
  %253 = shufflevector <32 x i8> %250, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %254 = shufflevector <32 x i8> %250, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %255 = shufflevector <32 x i8> %252, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %256 = shufflevector <32 x i8> %252, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %257 = bitcast <32 x i8> %253 to <16 x i16>
  %258 = bitcast <32 x i8> %255 to <16 x i16>
  %259 = sub <16 x i16> %257, %258
  %260 = bitcast <32 x i8> %254 to <16 x i16>
  %261 = bitcast <32 x i8> %256 to <16 x i16>
  %262 = sub <16 x i16> %260, %261
  %263 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %259, <16 x i16> %259) #2
  %264 = add <8 x i32> %263, %245
  %265 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %262, <16 x i16> %262) #2
  %266 = add <8 x i32> %264, %265
  %267 = getelementptr inbounds i8, i8* %248, i64 32
  %268 = getelementptr inbounds i8, i8* %247, i64 32
  %269 = bitcast i8* %267 to <32 x i8>*
  %270 = load <32 x i8>, <32 x i8>* %269, align 1
  %271 = bitcast i8* %268 to <32 x i8>*
  %272 = load <32 x i8>, <32 x i8>* %271, align 1
  %273 = shufflevector <32 x i8> %270, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %274 = shufflevector <32 x i8> %270, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %275 = shufflevector <32 x i8> %272, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %276 = shufflevector <32 x i8> %272, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %277 = bitcast <32 x i8> %273 to <16 x i16>
  %278 = bitcast <32 x i8> %275 to <16 x i16>
  %279 = sub <16 x i16> %277, %278
  %280 = bitcast <32 x i8> %274 to <16 x i16>
  %281 = bitcast <32 x i8> %276 to <16 x i16>
  %282 = sub <16 x i16> %280, %281
  %283 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> %279) #2
  %284 = add <8 x i32> %266, %283
  %285 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %282, <16 x i16> %282) #2
  %286 = add <8 x i32> %284, %285
  %287 = getelementptr inbounds i8, i8* %248, i64 64
  %288 = getelementptr inbounds i8, i8* %247, i64 64
  %289 = bitcast i8* %287 to <32 x i8>*
  %290 = load <32 x i8>, <32 x i8>* %289, align 1
  %291 = bitcast i8* %288 to <32 x i8>*
  %292 = load <32 x i8>, <32 x i8>* %291, align 1
  %293 = shufflevector <32 x i8> %290, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %294 = shufflevector <32 x i8> %290, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %295 = shufflevector <32 x i8> %292, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %296 = shufflevector <32 x i8> %292, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %297 = bitcast <32 x i8> %293 to <16 x i16>
  %298 = bitcast <32 x i8> %295 to <16 x i16>
  %299 = sub <16 x i16> %297, %298
  %300 = bitcast <32 x i8> %294 to <16 x i16>
  %301 = bitcast <32 x i8> %296 to <16 x i16>
  %302 = sub <16 x i16> %300, %301
  %303 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %299, <16 x i16> %299) #2
  %304 = add <8 x i32> %286, %303
  %305 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %302) #2
  %306 = add <8 x i32> %304, %305
  %307 = getelementptr inbounds i8, i8* %248, i64 96
  %308 = getelementptr inbounds i8, i8* %247, i64 96
  %309 = bitcast i8* %307 to <32 x i8>*
  %310 = load <32 x i8>, <32 x i8>* %309, align 1
  %311 = bitcast i8* %308 to <32 x i8>*
  %312 = load <32 x i8>, <32 x i8>* %311, align 1
  %313 = shufflevector <32 x i8> %310, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %314 = shufflevector <32 x i8> %310, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %315 = shufflevector <32 x i8> %312, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %316 = shufflevector <32 x i8> %312, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %317 = bitcast <32 x i8> %313 to <16 x i16>
  %318 = bitcast <32 x i8> %315 to <16 x i16>
  %319 = sub <16 x i16> %317, %318
  %320 = bitcast <32 x i8> %314 to <16 x i16>
  %321 = bitcast <32 x i8> %316 to <16 x i16>
  %322 = sub <16 x i16> %320, %321
  %323 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %319, <16 x i16> %319) #2
  %324 = add <8 x i32> %306, %323
  %325 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %322, <16 x i16> %322) #2
  %326 = add <8 x i32> %324, %325
  %327 = getelementptr inbounds i8, i8* %248, i64 %8
  %328 = getelementptr inbounds i8, i8* %247, i64 %9
  %329 = add nuw nsw i32 %246, 1
  %330 = icmp slt i32 %329, %5
  br i1 %330, label %244, label %504

331:                                              ; preds = %6
  %332 = and i32 %4, 7
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %349, label %334

334:                                              ; preds = %331
  %335 = sext i32 %1 to i64
  %336 = sext i32 %3 to i64
  %337 = shl i32 %1, 1
  %338 = sext i32 %337 to i64
  %339 = shl i32 %3, 1
  %340 = sext i32 %339 to i64
  %341 = mul nsw i32 %1, 3
  %342 = sext i32 %341 to i64
  %343 = mul nsw i32 %3, 3
  %344 = sext i32 %343 to i64
  %345 = shl i32 %1, 2
  %346 = sext i32 %345 to i64
  %347 = shl i32 %3, 2
  %348 = sext i32 %347 to i64
  br label %395

349:                                              ; preds = %331
  %350 = shl i32 %1, 1
  %351 = sext i32 %350 to i64
  %352 = sext i32 %1 to i64
  %353 = sext i32 %3 to i64
  %354 = shl i32 %3, 1
  %355 = sext i32 %354 to i64
  %356 = sext i32 %4 to i64
  br label %357

357:                                              ; preds = %349, %390
  %358 = phi <8 x i32> [ %387, %390 ], [ zeroinitializer, %349 ]
  %359 = phi i32 [ %393, %390 ], [ 0, %349 ]
  %360 = phi i8* [ %392, %390 ], [ %2, %349 ]
  %361 = phi i8* [ %391, %390 ], [ %0, %349 ]
  br label %362

362:                                              ; preds = %362, %357
  %363 = phi i64 [ %388, %362 ], [ 0, %357 ]
  %364 = phi <8 x i32> [ %387, %362 ], [ %358, %357 ]
  %365 = getelementptr inbounds i8, i8* %361, i64 %363
  %366 = getelementptr inbounds i8, i8* %360, i64 %363
  %367 = bitcast i8* %365 to i64*
  %368 = load i64, i64* %367, align 1
  %369 = insertelement <2 x i64> undef, i64 %368, i32 0
  %370 = getelementptr inbounds i8, i8* %365, i64 %352
  %371 = bitcast i8* %370 to i64*
  %372 = load i64, i64* %371, align 1
  %373 = bitcast i8* %366 to i64*
  %374 = load i64, i64* %373, align 1
  %375 = insertelement <2 x i64> undef, i64 %374, i32 0
  %376 = getelementptr inbounds i8, i8* %366, i64 %353
  %377 = bitcast i8* %376 to i64*
  %378 = load i64, i64* %377, align 1
  %379 = insertelement <2 x i64> %369, i64 %372, i32 1
  %380 = bitcast <2 x i64> %379 to <16 x i8>
  %381 = zext <16 x i8> %380 to <16 x i16>
  %382 = insertelement <2 x i64> %375, i64 %378, i32 1
  %383 = bitcast <2 x i64> %382 to <16 x i8>
  %384 = zext <16 x i8> %383 to <16 x i16>
  %385 = sub nsw <16 x i16> %381, %384
  %386 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %385, <16 x i16> %385) #2
  %387 = add <8 x i32> %386, %364
  %388 = add nuw nsw i64 %363, 8
  %389 = icmp slt i64 %388, %356
  br i1 %389, label %362, label %390

390:                                              ; preds = %362
  %391 = getelementptr inbounds i8, i8* %361, i64 %351
  %392 = getelementptr inbounds i8, i8* %360, i64 %355
  %393 = add nuw nsw i32 %359, 2
  %394 = icmp slt i32 %393, %5
  br i1 %394, label %357, label %504

395:                                              ; preds = %334, %453
  %396 = phi <8 x i32> [ %499, %453 ], [ zeroinitializer, %334 ]
  %397 = phi i32 [ %502, %453 ], [ 0, %334 ]
  %398 = phi i8* [ %501, %453 ], [ %2, %334 ]
  %399 = phi i8* [ %500, %453 ], [ %0, %334 ]
  br label %400

400:                                              ; preds = %400, %395
  %401 = phi i64 [ %449, %400 ], [ 0, %395 ]
  %402 = phi <8 x i32> [ %448, %400 ], [ %396, %395 ]
  %403 = getelementptr inbounds i8, i8* %399, i64 %401
  %404 = getelementptr inbounds i8, i8* %398, i64 %401
  %405 = bitcast i8* %403 to i64*
  %406 = load i64, i64* %405, align 1
  %407 = insertelement <2 x i64> undef, i64 %406, i32 0
  %408 = getelementptr inbounds i8, i8* %403, i64 %335
  %409 = bitcast i8* %408 to i64*
  %410 = load i64, i64* %409, align 1
  %411 = bitcast i8* %404 to i64*
  %412 = load i64, i64* %411, align 1
  %413 = insertelement <2 x i64> undef, i64 %412, i32 0
  %414 = getelementptr inbounds i8, i8* %404, i64 %336
  %415 = bitcast i8* %414 to i64*
  %416 = load i64, i64* %415, align 1
  %417 = insertelement <2 x i64> %407, i64 %410, i32 1
  %418 = bitcast <2 x i64> %417 to <16 x i8>
  %419 = zext <16 x i8> %418 to <16 x i16>
  %420 = insertelement <2 x i64> %413, i64 %416, i32 1
  %421 = bitcast <2 x i64> %420 to <16 x i8>
  %422 = zext <16 x i8> %421 to <16 x i16>
  %423 = sub nsw <16 x i16> %419, %422
  %424 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %423, <16 x i16> %423) #2
  %425 = add <8 x i32> %424, %402
  %426 = getelementptr inbounds i8, i8* %403, i64 %338
  %427 = getelementptr inbounds i8, i8* %404, i64 %340
  %428 = bitcast i8* %426 to i64*
  %429 = load i64, i64* %428, align 1
  %430 = insertelement <2 x i64> undef, i64 %429, i32 0
  %431 = getelementptr inbounds i8, i8* %426, i64 %335
  %432 = bitcast i8* %431 to i64*
  %433 = load i64, i64* %432, align 1
  %434 = bitcast i8* %427 to i64*
  %435 = load i64, i64* %434, align 1
  %436 = insertelement <2 x i64> undef, i64 %435, i32 0
  %437 = getelementptr inbounds i8, i8* %427, i64 %336
  %438 = bitcast i8* %437 to i64*
  %439 = load i64, i64* %438, align 1
  %440 = insertelement <2 x i64> %430, i64 %433, i32 1
  %441 = bitcast <2 x i64> %440 to <16 x i8>
  %442 = zext <16 x i8> %441 to <16 x i16>
  %443 = insertelement <2 x i64> %436, i64 %439, i32 1
  %444 = bitcast <2 x i64> %443 to <16 x i8>
  %445 = zext <16 x i8> %444 to <16 x i16>
  %446 = sub nsw <16 x i16> %442, %445
  %447 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %446, <16 x i16> %446) #2
  %448 = add <8 x i32> %425, %447
  %449 = add nuw i64 %401, 8
  %450 = trunc i64 %401 to i32
  %451 = add i32 %450, 12
  %452 = icmp slt i32 %451, %4
  br i1 %452, label %400, label %453

453:                                              ; preds = %400
  %454 = and i64 %449, 4294967288
  %455 = getelementptr inbounds i8, i8* %399, i64 %454
  %456 = getelementptr inbounds i8, i8* %398, i64 %454
  %457 = bitcast i8* %455 to i32*
  %458 = load i32, i32* %457, align 1
  %459 = insertelement <4 x i32> undef, i32 %458, i32 0
  %460 = getelementptr inbounds i8, i8* %455, i64 %335
  %461 = bitcast i8* %460 to i32*
  %462 = load i32, i32* %461, align 1
  %463 = getelementptr inbounds i8, i8* %455, i64 %338
  %464 = bitcast i8* %463 to i32*
  %465 = load i32, i32* %464, align 1
  %466 = insertelement <4 x i32> undef, i32 %465, i32 0
  %467 = getelementptr inbounds i8, i8* %455, i64 %342
  %468 = bitcast i8* %467 to i32*
  %469 = load i32, i32* %468, align 1
  %470 = bitcast i8* %456 to i32*
  %471 = load i32, i32* %470, align 1
  %472 = insertelement <4 x i32> undef, i32 %471, i32 0
  %473 = getelementptr inbounds i8, i8* %456, i64 %336
  %474 = bitcast i8* %473 to i32*
  %475 = load i32, i32* %474, align 1
  %476 = getelementptr inbounds i8, i8* %456, i64 %340
  %477 = bitcast i8* %476 to i32*
  %478 = load i32, i32* %477, align 1
  %479 = insertelement <4 x i32> undef, i32 %478, i32 0
  %480 = getelementptr inbounds i8, i8* %456, i64 %344
  %481 = bitcast i8* %480 to i32*
  %482 = load i32, i32* %481, align 1
  %483 = insertelement <4 x i32> %459, i32 %462, i32 1
  %484 = bitcast <4 x i32> %483 to <2 x i64>
  %485 = insertelement <4 x i32> %466, i32 %469, i32 1
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  %487 = shufflevector <2 x i64> %484, <2 x i64> %486, <2 x i32> <i32 0, i32 2>
  %488 = insertelement <4 x i32> %472, i32 %475, i32 1
  %489 = bitcast <4 x i32> %488 to <2 x i64>
  %490 = insertelement <4 x i32> %479, i32 %482, i32 1
  %491 = bitcast <4 x i32> %490 to <2 x i64>
  %492 = shufflevector <2 x i64> %489, <2 x i64> %491, <2 x i32> <i32 0, i32 2>
  %493 = bitcast <2 x i64> %487 to <16 x i8>
  %494 = zext <16 x i8> %493 to <16 x i16>
  %495 = bitcast <2 x i64> %492 to <16 x i8>
  %496 = zext <16 x i8> %495 to <16 x i16>
  %497 = sub nsw <16 x i16> %494, %496
  %498 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %497, <16 x i16> %497) #2
  %499 = add <8 x i32> %498, %448
  %500 = getelementptr inbounds i8, i8* %399, i64 %346
  %501 = getelementptr inbounds i8, i8* %398, i64 %348
  %502 = add nuw nsw i32 %397, 4
  %503 = icmp slt i32 %502, %5
  br i1 %503, label %395, label %504

504:                                              ; preds = %244, %197, %170, %127, %97, %45, %453, %390
  %505 = phi <8 x i32> [ %387, %390 ], [ %499, %453 ], [ %92, %45 ], [ %122, %97 ], [ %165, %127 ], [ %192, %170 ], [ %239, %197 ], [ %326, %244 ]
  %506 = shufflevector <8 x i32> %505, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %507 = bitcast <8 x i32> %506 to <4 x i64>
  %508 = shufflevector <8 x i32> %505, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %509 = bitcast <8 x i32> %508 to <4 x i64>
  %510 = add <4 x i64> %509, %507
  %511 = shufflevector <4 x i64> %510, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %512 = shufflevector <4 x i64> %510, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %513 = add <2 x i64> %512, %511
  %514 = bitcast <2 x i64> %513 to <16 x i8>
  %515 = shufflevector <16 x i8> %514, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %516 = bitcast <16 x i8> %515 to <2 x i64>
  %517 = add <2 x i64> %513, %516
  %518 = extractelement <2 x i64> %517, i32 0
  ret i64 %518
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
