; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/SimplifyLoopConditions.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/SimplifyLoopConditions.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TSymbolTable" = type opaque
%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser" = type { %"class.sh::TLValueTrackingTraverser.base", i8, i8, %"class.sh::IntermNodePatternMatcher" }
%"class.sh::TLValueTrackingTraverser.base" = type <{ %"class.sh::TIntermTraverser", i8, i8 }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::IntermNodePatternMatcher" = type { i32 }
%"class.sh::TLValueTrackingTraverser" = type <{ %"class.sh::TIntermTraverser", i8, i8, [6 x i8] }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.28", i8, [7 x i8] }>
%"class.sh::TVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.39", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.41" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE = comdat any

@_ZTVN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE0ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00F\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE0ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 5, i32 0, i32 0, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.27"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE0ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh22SimplifyLoopConditionsEPNS_9TCompilerEPNS_11TIntermNodeEjPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*, i32, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 160, i1 false)
  %7 = bitcast %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5 to %"class.sh::TLValueTrackingTraverser"*
  call void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %3) #6
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5, i64 0, i32 1
  store i8 0, i8* %9, align 2
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5, i64 0, i32 2
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5, i64 0, i32 3
  call void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"* %11, i32 %2) #6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %5, i64 0, i32 0, i32 0
  %13 = bitcast %"class.sh::TIntermNode"* %1 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %14 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %14, i64 2
  %16 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %15, align 8
  call void %16(%"class.sh::TIntermNode"* %1, %"class.sh::TIntermTraverser"* nonnull %12) #6
  %17 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %12, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1) #6
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #6
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"*, i32) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverserD0Ev(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %41, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %41

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector.0"* %13 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = icmp ult i64 %20, 2
  br i1 %21, label %27, label %22

22:                                               ; preds = %11
  %23 = inttoptr i64 %18 to %"class.sh::TIntermNode"**
  %24 = add nsw i64 %20, -2
  %25 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %24
  %26 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %25, align 8
  br label %27

27:                                               ; preds = %11, %22
  %28 = phi %"class.sh::TIntermNode"* [ %26, %22 ], [ null, %11 ]
  %29 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 1
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 2
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = icmp ne i8 %34, 0
  br label %36

36:                                               ; preds = %27, %32
  %37 = phi i1 [ true, %27 ], [ %35, %32 ]
  %38 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_13TIntermBinaryEPNS_11TIntermNodeEb(%"class.sh::IntermNodePatternMatcher"* %12, %"class.sh::TIntermBinary"* %2, %"class.sh::TIntermNode"* %28, i1 zeroext %37) #6
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %8, align 2
  %40 = xor i1 %38, true
  br label %41

41:                                               ; preds = %7, %3, %36
  %42 = phi i1 [ %40, %36 ], [ false, %3 ], [ false, %7 ]
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 3
  %13 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_12TIntermUnaryE(%"class.sh::IntermNodePatternMatcher"* %12, %"class.sh::TIntermUnary"* %2) #6
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %8, align 2
  %15 = xor i1 %13, true
  br label %16

16:                                               ; preds = %7, %3, %11
  %17 = phi i1 [ %15, %11 ], [ false, %3 ], [ false, %7 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 3
  %13 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_14TIntermTernaryE(%"class.sh::IntermNodePatternMatcher"* %12, %"class.sh::TIntermTernary"* %2) #6
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %8, align 2
  %15 = xor i1 %13, true
  br label %16

16:                                               ; preds = %7, %3, %11
  %17 = phi i1 [ %15, %11 ], [ false, %3 ], [ false, %7 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %32, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %32

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector.0"* %13 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = icmp ult i64 %20, 2
  br i1 %21, label %27, label %22

22:                                               ; preds = %11
  %23 = inttoptr i64 %18 to %"class.sh::TIntermNode"**
  %24 = add nsw i64 %20, -2
  %25 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %24
  %26 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %25, align 8
  br label %27

27:                                               ; preds = %11, %22
  %28 = phi %"class.sh::TIntermNode"* [ %26, %22 ], [ null, %11 ]
  %29 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"* %12, %"class.sh::TIntermAggregate"* %2, %"class.sh::TIntermNode"* %28) #6
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %8, align 2
  %31 = xor i1 %29, true
  br label %32

32:                                               ; preds = %7, %3, %27
  %33 = phi i1 [ %31, %27 ], [ false, %3 ], [ false, %7 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 3
  %13 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_18TIntermDeclarationE(%"class.sh::IntermNodePatternMatcher"* %12, %"class.sh::TIntermDeclaration"* %2) #6
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %8, align 2
  %15 = xor i1 %13, true
  br label %16

16:                                               ; preds = %7, %3, %11
  %17 = phi i1 [ %15, %11 ], [ false, %3 ], [ false, %7 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131SimplifyLoopConditionsTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %4) #6
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 2
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 1
  store i8 0, i8* %7, align 2
  %8 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 2
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %10 = icmp eq %"class.sh::TIntermNode"* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.sh::TIntermNode"* %9 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %13 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %13, i64 2
  %15 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %14, align 8
  tail call void %15(%"class.sh::TIntermNode"* nonnull %9, %"class.sh::TIntermTraverser"* %3) #6
  %16 = load i8, i8* %7, align 2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %2, %11
  %19 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 3
  %20 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %19, align 8
  %21 = icmp eq %"class.sh::TIntermTyped"* %20, null
  br i1 %21, label %30, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %20, i64 0, i32 0
  %24 = bitcast %"class.sh::TIntermTyped"* %20 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %25 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %25, i64 2
  %27 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %26, align 8
  tail call void %27(%"class.sh::TIntermNode"* %23, %"class.sh::TIntermTraverser"* %3) #6
  %28 = load i8, i8* %7, align 2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %18, %22
  %31 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 4
  %32 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %31, align 8
  %33 = icmp eq %"class.sh::TIntermTyped"* %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  store i8 0, i8* %6, align 1
  br label %2465

35:                                               ; preds = %22, %11
  store i8 0, i8* %6, align 1
  br label %44

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %32, i64 0, i32 0
  %38 = bitcast %"class.sh::TIntermTyped"* %32 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %39 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %39, i64 2
  %41 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %40, align 8
  tail call void %41(%"class.sh::TIntermNode"* %37, %"class.sh::TIntermTraverser"* %3) #6
  %42 = load i8, i8* %7, align 2
  store i8 0, i8* %6, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %2465, label %44

44:                                               ; preds = %35, %36
  %45 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 8
  %46 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %45, align 8
  %47 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %46, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE0ELh1ELh1EEE to %"class.sh::TType"*)) #6
  %48 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  switch i32 %49, label %2465 [
    i32 1, label %50
    i32 2, label %542
    i32 0, label %1030
  ]

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 3
  %52 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %51, align 8
  %53 = bitcast %"class.sh::TIntermTyped"* %52 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %54 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %54, i64 23
  %56 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %55, align 8
  %57 = tail call %"class.sh::TIntermTyped"* %56(%"class.sh::TIntermTyped"* %52) #6
  %58 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %57) #6
  %59 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %58, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %59) #6
  %60 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %61 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %60, i64 64) #6
  %62 = bitcast i8* %61 to %"class.sh::TIntermBlock"*
  %63 = bitcast i8* %61 to i32 (...)***
  %64 = getelementptr inbounds i8, i8* %61, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 16, i1 false) #6
  %65 = getelementptr inbounds i8, i8* %61, i64 24
  %66 = bitcast i8* %65 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %63, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %67 = getelementptr inbounds i8, i8* %61, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 25, i1 false) #6
  %68 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %69 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %68, align 8
  %70 = icmp eq %"class.sh::TIntermBlock"* %69, null
  %71 = bitcast i8* %61 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  br i1 %70, label %301, label %72

72:                                               ; preds = %50
  %73 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**), align 8
  %74 = tail call %"class.sh::TVector"* %73(%"class.sh::TIntermBlock"* %62) #6
  %75 = bitcast %"class.sh::TIntermBlock"** %68 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %74, i64 0, i32 0, i32 0, i32 1
  %78 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %77, align 8
  %79 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %74, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %80 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %79, align 8
  %81 = icmp ult %"class.sh::TIntermNode"** %78, %80
  %82 = ptrtoint %"class.sh::TIntermNode"** %80 to i64
  br i1 %81, label %83, label %88

83:                                               ; preds = %72
  %84 = bitcast %"class.sh::TIntermNode"** %78 to i64*
  store i64 %76, i64* %84, align 8
  %85 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 1
  %86 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %87 = bitcast %"class.sh::TIntermNode"*** %77 to i64*
  store i64 %86, i64* %87, align 8
  br label %301

88:                                               ; preds = %72
  %89 = ptrtoint %"class.sh::TIntermNode"** %78 to i64
  %90 = bitcast %"class.sh::TIntermNode"*** %77 to i64*
  %91 = bitcast %"class.sh::TVector"* %74 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = ashr exact i64 %93, 3
  %95 = add nsw i64 %94, 1
  %96 = icmp ugt i64 %95, 2305843009213693951
  br i1 %96, label %97, label %99

97:                                               ; preds = %88
  %98 = bitcast %"class.sh::TVector"* %74 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %98) #7
  unreachable

99:                                               ; preds = %88
  %100 = bitcast %"class.sh::TIntermNode"*** %79 to i64*
  %101 = sub i64 %82, %92
  %102 = ashr exact i64 %101, 3
  %103 = icmp ult i64 %102, 1152921504606846975
  br i1 %103, label %104, label %109

104:                                              ; preds = %99
  %105 = ashr exact i64 %101, 2
  %106 = icmp ult i64 %105, %95
  %107 = select i1 %106, i64 %95, i64 %105
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %115, label %109

109:                                              ; preds = %104, %99
  %110 = phi i64 [ %107, %104 ], [ 2305843009213693951, %99 ]
  %111 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %112 = shl i64 %110, 3
  %113 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %111, i64 %112) #6
  %114 = bitcast i8* %113 to %"class.sh::TIntermNode"**
  br label %115

115:                                              ; preds = %109, %104
  %116 = phi i64 [ %110, %109 ], [ 0, %104 ]
  %117 = phi %"class.sh::TIntermNode"** [ %114, %109 ], [ null, %104 ]
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %94
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %116
  %120 = ptrtoint %"class.sh::TIntermNode"** %119 to i64
  %121 = bitcast %"class.sh::TIntermNode"** %118 to i64*
  store i64 %76, i64* %121, align 8
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 1
  %123 = ptrtoint %"class.sh::TIntermNode"** %122 to i64
  %124 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %74, i64 0, i32 0, i32 0, i32 0
  %125 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %124, align 8
  %126 = ptrtoint %"class.sh::TIntermNode"** %125 to i64
  %127 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %77, align 8
  %128 = icmp eq %"class.sh::TIntermNode"** %127, %125
  br i1 %128, label %298, label %129

129:                                              ; preds = %115
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %131 = ptrtoint %"class.sh::TIntermNode"** %130 to i64
  %132 = sub i64 %131, %126
  %133 = lshr i64 %132, 3
  %134 = add nuw nsw i64 %133, 1
  %135 = icmp ult i64 %134, 4
  br i1 %135, label %228, label %136

136:                                              ; preds = %129
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %138 = ptrtoint %"class.sh::TIntermNode"** %137 to i64
  %139 = sub i64 %138, %126
  %140 = lshr i64 %139, 3
  %141 = xor i64 %140, -1
  %142 = add nsw i64 %94, %141
  %143 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %142
  %144 = xor i64 %140, -1
  %145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 %144
  %146 = icmp ult %"class.sh::TIntermNode"** %143, %127
  %147 = icmp ult %"class.sh::TIntermNode"** %145, %118
  %148 = and i1 %146, %147
  br i1 %148, label %228, label %149

149:                                              ; preds = %136
  %150 = and i64 %134, 4611686018427387900
  %151 = sub nsw i64 0, %150
  %152 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 %151
  %153 = sub nsw i64 0, %150
  %154 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 %153
  %155 = add nsw i64 %150, -4
  %156 = lshr exact i64 %155, 2
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 1
  %159 = icmp eq i64 %155, 0
  br i1 %159, label %204, label %160

160:                                              ; preds = %149
  %161 = sub nuw nsw i64 %157, %158
  %162 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %165 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  br label %166

166:                                              ; preds = %166, %160
  %167 = phi i64 [ 0, %160 ], [ %201, %166 ]
  %168 = phi i64 [ %161, %160 ], [ %202, %166 ]
  %169 = sub i64 0, %167
  %170 = sub i64 0, %167
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 %169
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 %170
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !3
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -2
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !3
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %181 = bitcast %"class.sh::TIntermNode"** %180 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %181, align 8, !alias.scope !6, !noalias !3
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -2
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = bitcast %"class.sh::TIntermNode"** %183 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %184, align 8, !alias.scope !6, !noalias !3
  %185 = sub nuw nsw i64 -4, %167
  %186 = sub nuw nsw i64 -4, %167
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 %185
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %186
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %190 = bitcast %"class.sh::TIntermNode"** %189 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 8, !alias.scope !3
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -2
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 -1
  %194 = bitcast %"class.sh::TIntermNode"** %193 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 8, !alias.scope !3
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %197 = bitcast %"class.sh::TIntermNode"** %196 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %197, align 8, !alias.scope !6, !noalias !3
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -2
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %198, i64 -1
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %200, align 8, !alias.scope !6, !noalias !3
  %201 = add i64 %167, 8
  %202 = add i64 %168, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %166, !llvm.loop !8

204:                                              ; preds = %166, %149
  %205 = phi i64 [ 0, %149 ], [ %201, %166 ]
  %206 = icmp eq i64 %158, 0
  br i1 %206, label %226, label %207

207:                                              ; preds = %204
  %208 = sub i64 0, %205
  %209 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %210 = sub i64 0, %205
  %211 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 %208
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 %210
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 -1
  %215 = bitcast %"class.sh::TIntermNode"** %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !3
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 -2
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 -1
  %219 = bitcast %"class.sh::TIntermNode"** %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 8, !alias.scope !3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 -1
  %222 = bitcast %"class.sh::TIntermNode"** %221 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %222, align 8, !alias.scope !6, !noalias !3
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 -2
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %225 = bitcast %"class.sh::TIntermNode"** %224 to <2 x i64>*
  store <2 x i64> %220, <2 x i64>* %225, align 8, !alias.scope !6, !noalias !3
  br label %226

226:                                              ; preds = %204, %207
  %227 = icmp eq i64 %134, %150
  br i1 %227, label %298, label %228

228:                                              ; preds = %226, %136, %129
  %229 = phi %"class.sh::TIntermNode"** [ %118, %136 ], [ %118, %129 ], [ %152, %226 ]
  %230 = phi %"class.sh::TIntermNode"** [ %127, %136 ], [ %127, %129 ], [ %154, %226 ]
  %231 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, i64 -1
  %232 = ptrtoint %"class.sh::TIntermNode"** %231 to i64
  %233 = sub i64 %232, %126
  %234 = lshr i64 %233, 3
  %235 = add nuw nsw i64 %234, 1
  %236 = and i64 %235, 7
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %249, label %238

238:                                              ; preds = %228, %238
  %239 = phi %"class.sh::TIntermNode"** [ %242, %238 ], [ %229, %228 ]
  %240 = phi %"class.sh::TIntermNode"** [ %243, %238 ], [ %230, %228 ]
  %241 = phi i64 [ %247, %238 ], [ %236, %228 ]
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -1
  %244 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = add i64 %241, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %238, !llvm.loop !10

249:                                              ; preds = %238, %228
  %250 = phi %"class.sh::TIntermNode"** [ undef, %228 ], [ %242, %238 ]
  %251 = phi %"class.sh::TIntermNode"** [ %229, %228 ], [ %242, %238 ]
  %252 = phi %"class.sh::TIntermNode"** [ %230, %228 ], [ %243, %238 ]
  %253 = icmp ult i64 %233, 56
  br i1 %253, label %298, label %254

254:                                              ; preds = %249, %254
  %255 = phi %"class.sh::TIntermNode"** [ %292, %254 ], [ %251, %249 ]
  %256 = phi %"class.sh::TIntermNode"** [ %293, %254 ], [ %252, %249 ]
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -1
  %258 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -1
  %259 = bitcast %"class.sh::TIntermNode"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -2
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -2
  %264 = bitcast %"class.sh::TIntermNode"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -3
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -3
  %269 = bitcast %"class.sh::TIntermNode"** %268 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -4
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -4
  %274 = bitcast %"class.sh::TIntermNode"** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  store i64 %275, i64* %276, align 8
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -5
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -5
  %279 = bitcast %"class.sh::TIntermNode"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -6
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -6
  %284 = bitcast %"class.sh::TIntermNode"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.sh::TIntermNode"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -7
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -7
  %289 = bitcast %"class.sh::TIntermNode"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -8
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -8
  %294 = bitcast %"class.sh::TIntermNode"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.sh::TIntermNode"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = icmp eq %"class.sh::TIntermNode"** %293, %125
  br i1 %297, label %298, label %254, !llvm.loop !12

298:                                              ; preds = %249, %254, %226, %115
  %299 = phi %"class.sh::TIntermNode"** [ %118, %115 ], [ %152, %226 ], [ %250, %249 ], [ %292, %254 ]
  %300 = ptrtoint %"class.sh::TIntermNode"** %299 to i64
  store i64 %300, i64* %91, align 8
  store i64 %123, i64* %90, align 8
  store i64 %120, i64* %100, align 8
  br label %301

301:                                              ; preds = %50, %298, %83
  %302 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %71, align 8
  %303 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %302, i64 27
  %304 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %303, align 8
  %305 = tail call %"class.sh::TVector"* %304(%"class.sh::TIntermBlock"* %62) #6
  %306 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %51, align 8
  %307 = bitcast %"class.sh::TIntermTyped"* %306 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %308 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %307, align 8
  %309 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %308, i64 23
  %310 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %309, align 8
  %311 = tail call %"class.sh::TIntermTyped"* %310(%"class.sh::TIntermTyped"* %306) #6
  %312 = tail call %"class.sh::TIntermBinary"* @_ZN2sh24CreateTempAssignmentNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %311) #6
  %313 = ptrtoint %"class.sh::TIntermBinary"* %312 to i64
  %314 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %305, i64 0, i32 0, i32 0, i32 1
  %315 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %314, align 8
  %316 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %305, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %317 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %316, align 8
  %318 = icmp ult %"class.sh::TIntermNode"** %315, %317
  %319 = ptrtoint %"class.sh::TIntermNode"** %317 to i64
  br i1 %318, label %320, label %325

320:                                              ; preds = %301
  %321 = bitcast %"class.sh::TIntermNode"** %315 to i64*
  store i64 %313, i64* %321, align 8
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 1
  %323 = ptrtoint %"class.sh::TIntermNode"** %322 to i64
  %324 = bitcast %"class.sh::TIntermNode"*** %314 to i64*
  store i64 %323, i64* %324, align 8
  br label %538

325:                                              ; preds = %301
  %326 = ptrtoint %"class.sh::TIntermNode"** %315 to i64
  %327 = bitcast %"class.sh::TIntermNode"*** %314 to i64*
  %328 = bitcast %"class.sh::TVector"* %305 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = sub i64 %326, %329
  %331 = ashr exact i64 %330, 3
  %332 = add nsw i64 %331, 1
  %333 = icmp ugt i64 %332, 2305843009213693951
  br i1 %333, label %334, label %336

334:                                              ; preds = %325
  %335 = bitcast %"class.sh::TVector"* %305 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %335) #7
  unreachable

336:                                              ; preds = %325
  %337 = bitcast %"class.sh::TIntermNode"*** %316 to i64*
  %338 = sub i64 %319, %329
  %339 = ashr exact i64 %338, 3
  %340 = icmp ult i64 %339, 1152921504606846975
  br i1 %340, label %341, label %346

341:                                              ; preds = %336
  %342 = ashr exact i64 %338, 2
  %343 = icmp ult i64 %342, %332
  %344 = select i1 %343, i64 %332, i64 %342
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %352, label %346

346:                                              ; preds = %341, %336
  %347 = phi i64 [ %344, %341 ], [ 2305843009213693951, %336 ]
  %348 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %349 = shl i64 %347, 3
  %350 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %348, i64 %349) #6
  %351 = bitcast i8* %350 to %"class.sh::TIntermNode"**
  br label %352

352:                                              ; preds = %346, %341
  %353 = phi i64 [ %347, %346 ], [ 0, %341 ]
  %354 = phi %"class.sh::TIntermNode"** [ %351, %346 ], [ null, %341 ]
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %331
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %353
  %357 = ptrtoint %"class.sh::TIntermNode"** %356 to i64
  %358 = bitcast %"class.sh::TIntermNode"** %355 to i64*
  store i64 %313, i64* %358, align 8
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 1
  %360 = ptrtoint %"class.sh::TIntermNode"** %359 to i64
  %361 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %305, i64 0, i32 0, i32 0, i32 0
  %362 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %361, align 8
  %363 = ptrtoint %"class.sh::TIntermNode"** %362 to i64
  %364 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %314, align 8
  %365 = icmp eq %"class.sh::TIntermNode"** %364, %362
  br i1 %365, label %535, label %366

366:                                              ; preds = %352
  %367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %368 = ptrtoint %"class.sh::TIntermNode"** %367 to i64
  %369 = sub i64 %368, %363
  %370 = lshr i64 %369, 3
  %371 = add nuw nsw i64 %370, 1
  %372 = icmp ult i64 %371, 4
  br i1 %372, label %465, label %373

373:                                              ; preds = %366
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %375 = ptrtoint %"class.sh::TIntermNode"** %374 to i64
  %376 = sub i64 %375, %363
  %377 = lshr i64 %376, 3
  %378 = xor i64 %377, -1
  %379 = add nsw i64 %331, %378
  %380 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %379
  %381 = xor i64 %377, -1
  %382 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 %381
  %383 = icmp ult %"class.sh::TIntermNode"** %380, %364
  %384 = icmp ult %"class.sh::TIntermNode"** %382, %355
  %385 = and i1 %383, %384
  br i1 %385, label %465, label %386

386:                                              ; preds = %373
  %387 = and i64 %371, 4611686018427387900
  %388 = sub nsw i64 0, %387
  %389 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 %388
  %390 = sub nsw i64 0, %387
  %391 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 %390
  %392 = add nsw i64 %387, -4
  %393 = lshr exact i64 %392, 2
  %394 = add nuw nsw i64 %393, 1
  %395 = and i64 %394, 1
  %396 = icmp eq i64 %392, 0
  br i1 %396, label %443, label %397

397:                                              ; preds = %386
  %398 = sub nuw nsw i64 %394, %395
  %399 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %400 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %401 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %402 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  br label %403

403:                                              ; preds = %403, %397
  %404 = phi i64 [ 0, %397 ], [ %438, %403 ]
  %405 = phi i64 [ %398, %397 ], [ %439, %403 ]
  %406 = sub i64 0, %404
  %407 = sub i64 0, %404
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 %406
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 %407
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %411 = bitcast %"class.sh::TIntermNode"** %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 8, !alias.scope !13
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -2
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 -1
  %415 = bitcast %"class.sh::TIntermNode"** %414 to <2 x i64>*
  %416 = load <2 x i64>, <2 x i64>* %415, align 8, !alias.scope !13
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 -1
  %418 = bitcast %"class.sh::TIntermNode"** %417 to <2 x i64>*
  store <2 x i64> %412, <2 x i64>* %418, align 8, !alias.scope !16, !noalias !13
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 -2
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %419, i64 -1
  %421 = bitcast %"class.sh::TIntermNode"** %420 to <2 x i64>*
  store <2 x i64> %416, <2 x i64>* %421, align 8, !alias.scope !16, !noalias !13
  %422 = sub nuw nsw i64 -4, %404
  %423 = sub nuw nsw i64 -4, %404
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 %422
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %402, i64 %423
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %427 = bitcast %"class.sh::TIntermNode"** %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8, !alias.scope !13
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -2
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 -1
  %431 = bitcast %"class.sh::TIntermNode"** %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 8, !alias.scope !13
  %433 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -1
  %434 = bitcast %"class.sh::TIntermNode"** %433 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %434, align 8, !alias.scope !16, !noalias !13
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 -1
  %437 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %432, <2 x i64>* %437, align 8, !alias.scope !16, !noalias !13
  %438 = add i64 %404, 8
  %439 = add i64 %405, -2
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %403, !llvm.loop !18

441:                                              ; preds = %403
  %442 = sub nuw nsw i64 -8, %404
  br label %443

443:                                              ; preds = %441, %386
  %444 = phi i64 [ 0, %386 ], [ %442, %441 ]
  %445 = icmp eq i64 %395, 0
  br i1 %445, label %463, label %446

446:                                              ; preds = %443
  %447 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %447, i64 %444
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 %444
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -1
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !13
  %454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -2
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %454, i64 -1
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  %457 = load <2 x i64>, <2 x i64>* %456, align 8, !alias.scope !13
  %458 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -1
  %459 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %459, align 8, !alias.scope !16, !noalias !13
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -2
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -1
  %462 = bitcast %"class.sh::TIntermNode"** %461 to <2 x i64>*
  store <2 x i64> %457, <2 x i64>* %462, align 8, !alias.scope !16, !noalias !13
  br label %463

463:                                              ; preds = %443, %446
  %464 = icmp eq i64 %371, %387
  br i1 %464, label %535, label %465

465:                                              ; preds = %463, %373, %366
  %466 = phi %"class.sh::TIntermNode"** [ %355, %373 ], [ %355, %366 ], [ %389, %463 ]
  %467 = phi %"class.sh::TIntermNode"** [ %364, %373 ], [ %364, %366 ], [ %391, %463 ]
  %468 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -1
  %469 = ptrtoint %"class.sh::TIntermNode"** %468 to i64
  %470 = sub i64 %469, %363
  %471 = lshr i64 %470, 3
  %472 = add nuw nsw i64 %471, 1
  %473 = and i64 %472, 7
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %486, label %475

475:                                              ; preds = %465, %475
  %476 = phi %"class.sh::TIntermNode"** [ %479, %475 ], [ %466, %465 ]
  %477 = phi %"class.sh::TIntermNode"** [ %480, %475 ], [ %467, %465 ]
  %478 = phi i64 [ %484, %475 ], [ %473, %465 ]
  %479 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %476, i64 -1
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %477, i64 -1
  %481 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"class.sh::TIntermNode"** %479 to i64*
  store i64 %482, i64* %483, align 8
  %484 = add i64 %478, -1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %475, !llvm.loop !19

486:                                              ; preds = %475, %465
  %487 = phi %"class.sh::TIntermNode"** [ undef, %465 ], [ %479, %475 ]
  %488 = phi %"class.sh::TIntermNode"** [ %466, %465 ], [ %479, %475 ]
  %489 = phi %"class.sh::TIntermNode"** [ %467, %465 ], [ %480, %475 ]
  %490 = icmp ult i64 %470, 56
  br i1 %490, label %535, label %491

491:                                              ; preds = %486, %491
  %492 = phi %"class.sh::TIntermNode"** [ %529, %491 ], [ %488, %486 ]
  %493 = phi %"class.sh::TIntermNode"** [ %530, %491 ], [ %489, %486 ]
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -1
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -1
  %496 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -2
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -2
  %501 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -3
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -3
  %506 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -4
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -4
  %511 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -5
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -5
  %516 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -6
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -6
  %521 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -7
  %525 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -7
  %526 = bitcast %"class.sh::TIntermNode"** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -8
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -8
  %531 = bitcast %"class.sh::TIntermNode"** %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = bitcast %"class.sh::TIntermNode"** %529 to i64*
  store i64 %532, i64* %533, align 8
  %534 = icmp eq %"class.sh::TIntermNode"** %530, %362
  br i1 %534, label %535, label %491, !llvm.loop !20

535:                                              ; preds = %486, %491, %463, %352
  %536 = phi %"class.sh::TIntermNode"** [ %355, %352 ], [ %389, %463 ], [ %487, %486 ], [ %529, %491 ]
  %537 = ptrtoint %"class.sh::TIntermNode"** %536 to i64
  store i64 %537, i64* %328, align 8
  store i64 %360, i64* %327, align 8
  store i64 %357, i64* %337, align 8
  br label %538

538:                                              ; preds = %320, %535
  %539 = bitcast %"class.sh::TIntermBlock"** %68 to i8**
  store i8* %61, i8** %539, align 8
  %540 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %47) #6
  %541 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %540, i64 0, i32 0
  store %"class.sh::TIntermTyped"* %541, %"class.sh::TIntermTyped"** %51, align 8
  br label %2465

542:                                              ; preds = %44
  %543 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateBoolNodeEb(i1 zeroext true) #6
  %544 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %543, i64 0, i32 0, i32 0
  %545 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %544) #6
  %546 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %545, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %546) #6
  %547 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %548 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %547, i64 64) #6
  %549 = bitcast i8* %548 to %"class.sh::TIntermBlock"*
  %550 = bitcast i8* %548 to i32 (...)***
  %551 = getelementptr inbounds i8, i8* %548, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %551, i8 0, i64 16, i1 false) #6
  %552 = getelementptr inbounds i8, i8* %548, i64 24
  %553 = bitcast i8* %552 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %550, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %553, align 8
  %554 = getelementptr inbounds i8, i8* %548, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %554, i8 0, i64 25, i1 false) #6
  %555 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %556 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %555, align 8
  %557 = icmp eq %"class.sh::TIntermBlock"* %556, null
  %558 = bitcast i8* %548 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  br i1 %557, label %788, label %559

559:                                              ; preds = %542
  %560 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**), align 8
  %561 = tail call %"class.sh::TVector"* %560(%"class.sh::TIntermBlock"* %549) #6
  %562 = bitcast %"class.sh::TIntermBlock"** %555 to i64*
  %563 = load i64, i64* %562, align 8
  %564 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %561, i64 0, i32 0, i32 0, i32 1
  %565 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %564, align 8
  %566 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %561, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %567 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %566, align 8
  %568 = icmp ult %"class.sh::TIntermNode"** %565, %567
  %569 = ptrtoint %"class.sh::TIntermNode"** %567 to i64
  br i1 %568, label %570, label %575

570:                                              ; preds = %559
  %571 = bitcast %"class.sh::TIntermNode"** %565 to i64*
  store i64 %563, i64* %571, align 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %565, i64 1
  %573 = ptrtoint %"class.sh::TIntermNode"** %572 to i64
  %574 = bitcast %"class.sh::TIntermNode"*** %564 to i64*
  store i64 %573, i64* %574, align 8
  br label %788

575:                                              ; preds = %559
  %576 = ptrtoint %"class.sh::TIntermNode"** %565 to i64
  %577 = bitcast %"class.sh::TIntermNode"*** %564 to i64*
  %578 = bitcast %"class.sh::TVector"* %561 to i64*
  %579 = load i64, i64* %578, align 8
  %580 = sub i64 %576, %579
  %581 = ashr exact i64 %580, 3
  %582 = add nsw i64 %581, 1
  %583 = icmp ugt i64 %582, 2305843009213693951
  br i1 %583, label %584, label %586

584:                                              ; preds = %575
  %585 = bitcast %"class.sh::TVector"* %561 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %585) #7
  unreachable

586:                                              ; preds = %575
  %587 = bitcast %"class.sh::TIntermNode"*** %566 to i64*
  %588 = sub i64 %569, %579
  %589 = ashr exact i64 %588, 3
  %590 = icmp ult i64 %589, 1152921504606846975
  br i1 %590, label %591, label %596

591:                                              ; preds = %586
  %592 = ashr exact i64 %588, 2
  %593 = icmp ult i64 %592, %582
  %594 = select i1 %593, i64 %582, i64 %592
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %602, label %596

596:                                              ; preds = %591, %586
  %597 = phi i64 [ %594, %591 ], [ 2305843009213693951, %586 ]
  %598 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %599 = shl i64 %597, 3
  %600 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %598, i64 %599) #6
  %601 = bitcast i8* %600 to %"class.sh::TIntermNode"**
  br label %602

602:                                              ; preds = %596, %591
  %603 = phi i64 [ %597, %596 ], [ 0, %591 ]
  %604 = phi %"class.sh::TIntermNode"** [ %601, %596 ], [ null, %591 ]
  %605 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %604, i64 %581
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %604, i64 %603
  %607 = ptrtoint %"class.sh::TIntermNode"** %606 to i64
  %608 = bitcast %"class.sh::TIntermNode"** %605 to i64*
  store i64 %563, i64* %608, align 8
  %609 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %605, i64 1
  %610 = ptrtoint %"class.sh::TIntermNode"** %609 to i64
  %611 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %561, i64 0, i32 0, i32 0, i32 0
  %612 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %611, align 8
  %613 = ptrtoint %"class.sh::TIntermNode"** %612 to i64
  %614 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %564, align 8
  %615 = icmp eq %"class.sh::TIntermNode"** %614, %612
  br i1 %615, label %785, label %616

616:                                              ; preds = %602
  %617 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 -1
  %618 = ptrtoint %"class.sh::TIntermNode"** %617 to i64
  %619 = sub i64 %618, %613
  %620 = lshr i64 %619, 3
  %621 = add nuw nsw i64 %620, 1
  %622 = icmp ult i64 %621, 4
  br i1 %622, label %715, label %623

623:                                              ; preds = %616
  %624 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 -1
  %625 = ptrtoint %"class.sh::TIntermNode"** %624 to i64
  %626 = sub i64 %625, %613
  %627 = lshr i64 %626, 3
  %628 = xor i64 %627, -1
  %629 = add nsw i64 %581, %628
  %630 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %604, i64 %629
  %631 = xor i64 %627, -1
  %632 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 %631
  %633 = icmp ult %"class.sh::TIntermNode"** %630, %614
  %634 = icmp ult %"class.sh::TIntermNode"** %632, %605
  %635 = and i1 %633, %634
  br i1 %635, label %715, label %636

636:                                              ; preds = %623
  %637 = and i64 %621, 4611686018427387900
  %638 = sub nsw i64 0, %637
  %639 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %605, i64 %638
  %640 = sub nsw i64 0, %637
  %641 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 %640
  %642 = add nsw i64 %637, -4
  %643 = lshr exact i64 %642, 2
  %644 = add nuw nsw i64 %643, 1
  %645 = and i64 %644, 1
  %646 = icmp eq i64 %642, 0
  br i1 %646, label %691, label %647

647:                                              ; preds = %636
  %648 = sub nuw nsw i64 %644, %645
  %649 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %605, i64 -1
  %650 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 -1
  %651 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %605, i64 -1
  %652 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 -1
  br label %653

653:                                              ; preds = %653, %647
  %654 = phi i64 [ 0, %647 ], [ %688, %653 ]
  %655 = phi i64 [ %648, %647 ], [ %689, %653 ]
  %656 = sub i64 0, %654
  %657 = sub i64 0, %654
  %658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %649, i64 %656
  %659 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %650, i64 %657
  %660 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %659, i64 -1
  %661 = bitcast %"class.sh::TIntermNode"** %660 to <2 x i64>*
  %662 = load <2 x i64>, <2 x i64>* %661, align 8, !alias.scope !21
  %663 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %659, i64 -2
  %664 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %663, i64 -1
  %665 = bitcast %"class.sh::TIntermNode"** %664 to <2 x i64>*
  %666 = load <2 x i64>, <2 x i64>* %665, align 8, !alias.scope !21
  %667 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %658, i64 -1
  %668 = bitcast %"class.sh::TIntermNode"** %667 to <2 x i64>*
  store <2 x i64> %662, <2 x i64>* %668, align 8, !alias.scope !24, !noalias !21
  %669 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %658, i64 -2
  %670 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %669, i64 -1
  %671 = bitcast %"class.sh::TIntermNode"** %670 to <2 x i64>*
  store <2 x i64> %666, <2 x i64>* %671, align 8, !alias.scope !24, !noalias !21
  %672 = sub nuw nsw i64 -4, %654
  %673 = sub nuw nsw i64 -4, %654
  %674 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %651, i64 %672
  %675 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %652, i64 %673
  %676 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %675, i64 -1
  %677 = bitcast %"class.sh::TIntermNode"** %676 to <2 x i64>*
  %678 = load <2 x i64>, <2 x i64>* %677, align 8, !alias.scope !21
  %679 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %675, i64 -2
  %680 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %679, i64 -1
  %681 = bitcast %"class.sh::TIntermNode"** %680 to <2 x i64>*
  %682 = load <2 x i64>, <2 x i64>* %681, align 8, !alias.scope !21
  %683 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %674, i64 -1
  %684 = bitcast %"class.sh::TIntermNode"** %683 to <2 x i64>*
  store <2 x i64> %678, <2 x i64>* %684, align 8, !alias.scope !24, !noalias !21
  %685 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %674, i64 -2
  %686 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %685, i64 -1
  %687 = bitcast %"class.sh::TIntermNode"** %686 to <2 x i64>*
  store <2 x i64> %682, <2 x i64>* %687, align 8, !alias.scope !24, !noalias !21
  %688 = add i64 %654, 8
  %689 = add i64 %655, -2
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %691, label %653, !llvm.loop !26

691:                                              ; preds = %653, %636
  %692 = phi i64 [ 0, %636 ], [ %688, %653 ]
  %693 = icmp eq i64 %645, 0
  br i1 %693, label %713, label %694

694:                                              ; preds = %691
  %695 = sub i64 0, %692
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %605, i64 -1
  %697 = sub i64 0, %692
  %698 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %614, i64 -1
  %699 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %696, i64 %695
  %700 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %698, i64 %697
  %701 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 -1
  %702 = bitcast %"class.sh::TIntermNode"** %701 to <2 x i64>*
  %703 = load <2 x i64>, <2 x i64>* %702, align 8, !alias.scope !21
  %704 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 -2
  %705 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %704, i64 -1
  %706 = bitcast %"class.sh::TIntermNode"** %705 to <2 x i64>*
  %707 = load <2 x i64>, <2 x i64>* %706, align 8, !alias.scope !21
  %708 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 -1
  %709 = bitcast %"class.sh::TIntermNode"** %708 to <2 x i64>*
  store <2 x i64> %703, <2 x i64>* %709, align 8, !alias.scope !24, !noalias !21
  %710 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 -2
  %711 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 -1
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  store <2 x i64> %707, <2 x i64>* %712, align 8, !alias.scope !24, !noalias !21
  br label %713

713:                                              ; preds = %691, %694
  %714 = icmp eq i64 %621, %637
  br i1 %714, label %785, label %715

715:                                              ; preds = %713, %623, %616
  %716 = phi %"class.sh::TIntermNode"** [ %605, %623 ], [ %605, %616 ], [ %639, %713 ]
  %717 = phi %"class.sh::TIntermNode"** [ %614, %623 ], [ %614, %616 ], [ %641, %713 ]
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %717, i64 -1
  %719 = ptrtoint %"class.sh::TIntermNode"** %718 to i64
  %720 = sub i64 %719, %613
  %721 = lshr i64 %720, 3
  %722 = add nuw nsw i64 %721, 1
  %723 = and i64 %722, 7
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %736, label %725

725:                                              ; preds = %715, %725
  %726 = phi %"class.sh::TIntermNode"** [ %729, %725 ], [ %716, %715 ]
  %727 = phi %"class.sh::TIntermNode"** [ %730, %725 ], [ %717, %715 ]
  %728 = phi i64 [ %734, %725 ], [ %723, %715 ]
  %729 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %726, i64 -1
  %730 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 -1
  %731 = bitcast %"class.sh::TIntermNode"** %730 to i64*
  %732 = load i64, i64* %731, align 8
  %733 = bitcast %"class.sh::TIntermNode"** %729 to i64*
  store i64 %732, i64* %733, align 8
  %734 = add i64 %728, -1
  %735 = icmp eq i64 %734, 0
  br i1 %735, label %736, label %725, !llvm.loop !27

736:                                              ; preds = %725, %715
  %737 = phi %"class.sh::TIntermNode"** [ undef, %715 ], [ %729, %725 ]
  %738 = phi %"class.sh::TIntermNode"** [ %716, %715 ], [ %729, %725 ]
  %739 = phi %"class.sh::TIntermNode"** [ %717, %715 ], [ %730, %725 ]
  %740 = icmp ult i64 %720, 56
  br i1 %740, label %785, label %741

741:                                              ; preds = %736, %741
  %742 = phi %"class.sh::TIntermNode"** [ %779, %741 ], [ %738, %736 ]
  %743 = phi %"class.sh::TIntermNode"** [ %780, %741 ], [ %739, %736 ]
  %744 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -1
  %745 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -1
  %746 = bitcast %"class.sh::TIntermNode"** %745 to i64*
  %747 = load i64, i64* %746, align 8
  %748 = bitcast %"class.sh::TIntermNode"** %744 to i64*
  store i64 %747, i64* %748, align 8
  %749 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -2
  %750 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -2
  %751 = bitcast %"class.sh::TIntermNode"** %750 to i64*
  %752 = load i64, i64* %751, align 8
  %753 = bitcast %"class.sh::TIntermNode"** %749 to i64*
  store i64 %752, i64* %753, align 8
  %754 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -3
  %755 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -3
  %756 = bitcast %"class.sh::TIntermNode"** %755 to i64*
  %757 = load i64, i64* %756, align 8
  %758 = bitcast %"class.sh::TIntermNode"** %754 to i64*
  store i64 %757, i64* %758, align 8
  %759 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -4
  %760 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -4
  %761 = bitcast %"class.sh::TIntermNode"** %760 to i64*
  %762 = load i64, i64* %761, align 8
  %763 = bitcast %"class.sh::TIntermNode"** %759 to i64*
  store i64 %762, i64* %763, align 8
  %764 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -5
  %765 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -5
  %766 = bitcast %"class.sh::TIntermNode"** %765 to i64*
  %767 = load i64, i64* %766, align 8
  %768 = bitcast %"class.sh::TIntermNode"** %764 to i64*
  store i64 %767, i64* %768, align 8
  %769 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -6
  %770 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -6
  %771 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %772 = load i64, i64* %771, align 8
  %773 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  store i64 %772, i64* %773, align 8
  %774 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -7
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -7
  %776 = bitcast %"class.sh::TIntermNode"** %775 to i64*
  %777 = load i64, i64* %776, align 8
  %778 = bitcast %"class.sh::TIntermNode"** %774 to i64*
  store i64 %777, i64* %778, align 8
  %779 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -8
  %780 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -8
  %781 = bitcast %"class.sh::TIntermNode"** %780 to i64*
  %782 = load i64, i64* %781, align 8
  %783 = bitcast %"class.sh::TIntermNode"** %779 to i64*
  store i64 %782, i64* %783, align 8
  %784 = icmp eq %"class.sh::TIntermNode"** %780, %612
  br i1 %784, label %785, label %741, !llvm.loop !28

785:                                              ; preds = %736, %741, %713, %602
  %786 = phi %"class.sh::TIntermNode"** [ %605, %602 ], [ %639, %713 ], [ %737, %736 ], [ %779, %741 ]
  %787 = ptrtoint %"class.sh::TIntermNode"** %786 to i64
  store i64 %787, i64* %578, align 8
  store i64 %610, i64* %577, align 8
  store i64 %607, i64* %587, align 8
  br label %788

788:                                              ; preds = %542, %785, %570
  %789 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %558, align 8
  %790 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %789, i64 27
  %791 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %790, align 8
  %792 = tail call %"class.sh::TVector"* %791(%"class.sh::TIntermBlock"* %549) #6
  %793 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 3
  %794 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %793, align 8
  %795 = bitcast %"class.sh::TIntermTyped"* %794 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %796 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %795, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %796, i64 23
  %798 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %797, align 8
  %799 = tail call %"class.sh::TIntermTyped"* %798(%"class.sh::TIntermTyped"* %794) #6
  %800 = tail call %"class.sh::TIntermBinary"* @_ZN2sh24CreateTempAssignmentNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %799) #6
  %801 = ptrtoint %"class.sh::TIntermBinary"* %800 to i64
  %802 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %792, i64 0, i32 0, i32 0, i32 1
  %803 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %802, align 8
  %804 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %792, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %805 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %804, align 8
  %806 = icmp ult %"class.sh::TIntermNode"** %803, %805
  %807 = ptrtoint %"class.sh::TIntermNode"** %805 to i64
  br i1 %806, label %808, label %813

808:                                              ; preds = %788
  %809 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  store i64 %801, i64* %809, align 8
  %810 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %803, i64 1
  %811 = ptrtoint %"class.sh::TIntermNode"** %810 to i64
  %812 = bitcast %"class.sh::TIntermNode"*** %802 to i64*
  store i64 %811, i64* %812, align 8
  br label %1026

813:                                              ; preds = %788
  %814 = ptrtoint %"class.sh::TIntermNode"** %803 to i64
  %815 = bitcast %"class.sh::TIntermNode"*** %802 to i64*
  %816 = bitcast %"class.sh::TVector"* %792 to i64*
  %817 = load i64, i64* %816, align 8
  %818 = sub i64 %814, %817
  %819 = ashr exact i64 %818, 3
  %820 = add nsw i64 %819, 1
  %821 = icmp ugt i64 %820, 2305843009213693951
  br i1 %821, label %822, label %824

822:                                              ; preds = %813
  %823 = bitcast %"class.sh::TVector"* %792 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %823) #7
  unreachable

824:                                              ; preds = %813
  %825 = bitcast %"class.sh::TIntermNode"*** %804 to i64*
  %826 = sub i64 %807, %817
  %827 = ashr exact i64 %826, 3
  %828 = icmp ult i64 %827, 1152921504606846975
  br i1 %828, label %829, label %834

829:                                              ; preds = %824
  %830 = ashr exact i64 %826, 2
  %831 = icmp ult i64 %830, %820
  %832 = select i1 %831, i64 %820, i64 %830
  %833 = icmp eq i64 %832, 0
  br i1 %833, label %840, label %834

834:                                              ; preds = %829, %824
  %835 = phi i64 [ %832, %829 ], [ 2305843009213693951, %824 ]
  %836 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %837 = shl i64 %835, 3
  %838 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %836, i64 %837) #6
  %839 = bitcast i8* %838 to %"class.sh::TIntermNode"**
  br label %840

840:                                              ; preds = %834, %829
  %841 = phi i64 [ %835, %834 ], [ 0, %829 ]
  %842 = phi %"class.sh::TIntermNode"** [ %839, %834 ], [ null, %829 ]
  %843 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %842, i64 %819
  %844 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %842, i64 %841
  %845 = ptrtoint %"class.sh::TIntermNode"** %844 to i64
  %846 = bitcast %"class.sh::TIntermNode"** %843 to i64*
  store i64 %801, i64* %846, align 8
  %847 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 1
  %848 = ptrtoint %"class.sh::TIntermNode"** %847 to i64
  %849 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %792, i64 0, i32 0, i32 0, i32 0
  %850 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %849, align 8
  %851 = ptrtoint %"class.sh::TIntermNode"** %850 to i64
  %852 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %802, align 8
  %853 = icmp eq %"class.sh::TIntermNode"** %852, %850
  br i1 %853, label %1023, label %854

854:                                              ; preds = %840
  %855 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 -1
  %856 = ptrtoint %"class.sh::TIntermNode"** %855 to i64
  %857 = sub i64 %856, %851
  %858 = lshr i64 %857, 3
  %859 = add nuw nsw i64 %858, 1
  %860 = icmp ult i64 %859, 4
  br i1 %860, label %953, label %861

861:                                              ; preds = %854
  %862 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 -1
  %863 = ptrtoint %"class.sh::TIntermNode"** %862 to i64
  %864 = sub i64 %863, %851
  %865 = lshr i64 %864, 3
  %866 = xor i64 %865, -1
  %867 = add nsw i64 %819, %866
  %868 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %842, i64 %867
  %869 = xor i64 %865, -1
  %870 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 %869
  %871 = icmp ult %"class.sh::TIntermNode"** %868, %852
  %872 = icmp ult %"class.sh::TIntermNode"** %870, %843
  %873 = and i1 %871, %872
  br i1 %873, label %953, label %874

874:                                              ; preds = %861
  %875 = and i64 %859, 4611686018427387900
  %876 = sub nsw i64 0, %875
  %877 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 %876
  %878 = sub nsw i64 0, %875
  %879 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 %878
  %880 = add nsw i64 %875, -4
  %881 = lshr exact i64 %880, 2
  %882 = add nuw nsw i64 %881, 1
  %883 = and i64 %882, 1
  %884 = icmp eq i64 %880, 0
  br i1 %884, label %931, label %885

885:                                              ; preds = %874
  %886 = sub nuw nsw i64 %882, %883
  %887 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 -1
  %888 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 -1
  %889 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 -1
  %890 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 -1
  br label %891

891:                                              ; preds = %891, %885
  %892 = phi i64 [ 0, %885 ], [ %926, %891 ]
  %893 = phi i64 [ %886, %885 ], [ %927, %891 ]
  %894 = sub i64 0, %892
  %895 = sub i64 0, %892
  %896 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %887, i64 %894
  %897 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %888, i64 %895
  %898 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %897, i64 -1
  %899 = bitcast %"class.sh::TIntermNode"** %898 to <2 x i64>*
  %900 = load <2 x i64>, <2 x i64>* %899, align 8, !alias.scope !29
  %901 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %897, i64 -2
  %902 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %901, i64 -1
  %903 = bitcast %"class.sh::TIntermNode"** %902 to <2 x i64>*
  %904 = load <2 x i64>, <2 x i64>* %903, align 8, !alias.scope !29
  %905 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %896, i64 -1
  %906 = bitcast %"class.sh::TIntermNode"** %905 to <2 x i64>*
  store <2 x i64> %900, <2 x i64>* %906, align 8, !alias.scope !32, !noalias !29
  %907 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %896, i64 -2
  %908 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %907, i64 -1
  %909 = bitcast %"class.sh::TIntermNode"** %908 to <2 x i64>*
  store <2 x i64> %904, <2 x i64>* %909, align 8, !alias.scope !32, !noalias !29
  %910 = sub nuw nsw i64 -4, %892
  %911 = sub nuw nsw i64 -4, %892
  %912 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %889, i64 %910
  %913 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %890, i64 %911
  %914 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %913, i64 -1
  %915 = bitcast %"class.sh::TIntermNode"** %914 to <2 x i64>*
  %916 = load <2 x i64>, <2 x i64>* %915, align 8, !alias.scope !29
  %917 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %913, i64 -2
  %918 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %917, i64 -1
  %919 = bitcast %"class.sh::TIntermNode"** %918 to <2 x i64>*
  %920 = load <2 x i64>, <2 x i64>* %919, align 8, !alias.scope !29
  %921 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %912, i64 -1
  %922 = bitcast %"class.sh::TIntermNode"** %921 to <2 x i64>*
  store <2 x i64> %916, <2 x i64>* %922, align 8, !alias.scope !32, !noalias !29
  %923 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %912, i64 -2
  %924 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %923, i64 -1
  %925 = bitcast %"class.sh::TIntermNode"** %924 to <2 x i64>*
  store <2 x i64> %920, <2 x i64>* %925, align 8, !alias.scope !32, !noalias !29
  %926 = add i64 %892, 8
  %927 = add i64 %893, -2
  %928 = icmp eq i64 %927, 0
  br i1 %928, label %929, label %891, !llvm.loop !34

929:                                              ; preds = %891
  %930 = sub nuw nsw i64 -8, %892
  br label %931

931:                                              ; preds = %929, %874
  %932 = phi i64 [ 0, %874 ], [ %930, %929 ]
  %933 = icmp eq i64 %883, 0
  br i1 %933, label %951, label %934

934:                                              ; preds = %931
  %935 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 -1
  %936 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %852, i64 -1
  %937 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %935, i64 %932
  %938 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %936, i64 %932
  %939 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %938, i64 -1
  %940 = bitcast %"class.sh::TIntermNode"** %939 to <2 x i64>*
  %941 = load <2 x i64>, <2 x i64>* %940, align 8, !alias.scope !29
  %942 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %938, i64 -2
  %943 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %942, i64 -1
  %944 = bitcast %"class.sh::TIntermNode"** %943 to <2 x i64>*
  %945 = load <2 x i64>, <2 x i64>* %944, align 8, !alias.scope !29
  %946 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %937, i64 -1
  %947 = bitcast %"class.sh::TIntermNode"** %946 to <2 x i64>*
  store <2 x i64> %941, <2 x i64>* %947, align 8, !alias.scope !32, !noalias !29
  %948 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %937, i64 -2
  %949 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %948, i64 -1
  %950 = bitcast %"class.sh::TIntermNode"** %949 to <2 x i64>*
  store <2 x i64> %945, <2 x i64>* %950, align 8, !alias.scope !32, !noalias !29
  br label %951

951:                                              ; preds = %931, %934
  %952 = icmp eq i64 %859, %875
  br i1 %952, label %1023, label %953

953:                                              ; preds = %951, %861, %854
  %954 = phi %"class.sh::TIntermNode"** [ %843, %861 ], [ %843, %854 ], [ %877, %951 ]
  %955 = phi %"class.sh::TIntermNode"** [ %852, %861 ], [ %852, %854 ], [ %879, %951 ]
  %956 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %955, i64 -1
  %957 = ptrtoint %"class.sh::TIntermNode"** %956 to i64
  %958 = sub i64 %957, %851
  %959 = lshr i64 %958, 3
  %960 = add nuw nsw i64 %959, 1
  %961 = and i64 %960, 7
  %962 = icmp eq i64 %961, 0
  br i1 %962, label %974, label %963

963:                                              ; preds = %953, %963
  %964 = phi %"class.sh::TIntermNode"** [ %967, %963 ], [ %954, %953 ]
  %965 = phi %"class.sh::TIntermNode"** [ %968, %963 ], [ %955, %953 ]
  %966 = phi i64 [ %972, %963 ], [ %961, %953 ]
  %967 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %964, i64 -1
  %968 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %965, i64 -1
  %969 = bitcast %"class.sh::TIntermNode"** %968 to i64*
  %970 = load i64, i64* %969, align 8
  %971 = bitcast %"class.sh::TIntermNode"** %967 to i64*
  store i64 %970, i64* %971, align 8
  %972 = add i64 %966, -1
  %973 = icmp eq i64 %972, 0
  br i1 %973, label %974, label %963, !llvm.loop !35

974:                                              ; preds = %963, %953
  %975 = phi %"class.sh::TIntermNode"** [ undef, %953 ], [ %967, %963 ]
  %976 = phi %"class.sh::TIntermNode"** [ %954, %953 ], [ %967, %963 ]
  %977 = phi %"class.sh::TIntermNode"** [ %955, %953 ], [ %968, %963 ]
  %978 = icmp ult i64 %958, 56
  br i1 %978, label %1023, label %979

979:                                              ; preds = %974, %979
  %980 = phi %"class.sh::TIntermNode"** [ %1017, %979 ], [ %976, %974 ]
  %981 = phi %"class.sh::TIntermNode"** [ %1018, %979 ], [ %977, %974 ]
  %982 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -1
  %983 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -1
  %984 = bitcast %"class.sh::TIntermNode"** %983 to i64*
  %985 = load i64, i64* %984, align 8
  %986 = bitcast %"class.sh::TIntermNode"** %982 to i64*
  store i64 %985, i64* %986, align 8
  %987 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -2
  %988 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -2
  %989 = bitcast %"class.sh::TIntermNode"** %988 to i64*
  %990 = load i64, i64* %989, align 8
  %991 = bitcast %"class.sh::TIntermNode"** %987 to i64*
  store i64 %990, i64* %991, align 8
  %992 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -3
  %993 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -3
  %994 = bitcast %"class.sh::TIntermNode"** %993 to i64*
  %995 = load i64, i64* %994, align 8
  %996 = bitcast %"class.sh::TIntermNode"** %992 to i64*
  store i64 %995, i64* %996, align 8
  %997 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -4
  %998 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -4
  %999 = bitcast %"class.sh::TIntermNode"** %998 to i64*
  %1000 = load i64, i64* %999, align 8
  %1001 = bitcast %"class.sh::TIntermNode"** %997 to i64*
  store i64 %1000, i64* %1001, align 8
  %1002 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -5
  %1003 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -5
  %1004 = bitcast %"class.sh::TIntermNode"** %1003 to i64*
  %1005 = load i64, i64* %1004, align 8
  %1006 = bitcast %"class.sh::TIntermNode"** %1002 to i64*
  store i64 %1005, i64* %1006, align 8
  %1007 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -6
  %1008 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -6
  %1009 = bitcast %"class.sh::TIntermNode"** %1008 to i64*
  %1010 = load i64, i64* %1009, align 8
  %1011 = bitcast %"class.sh::TIntermNode"** %1007 to i64*
  store i64 %1010, i64* %1011, align 8
  %1012 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -7
  %1013 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -7
  %1014 = bitcast %"class.sh::TIntermNode"** %1013 to i64*
  %1015 = load i64, i64* %1014, align 8
  %1016 = bitcast %"class.sh::TIntermNode"** %1012 to i64*
  store i64 %1015, i64* %1016, align 8
  %1017 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %980, i64 -8
  %1018 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %981, i64 -8
  %1019 = bitcast %"class.sh::TIntermNode"** %1018 to i64*
  %1020 = load i64, i64* %1019, align 8
  %1021 = bitcast %"class.sh::TIntermNode"** %1017 to i64*
  store i64 %1020, i64* %1021, align 8
  %1022 = icmp eq %"class.sh::TIntermNode"** %1018, %850
  br i1 %1022, label %1023, label %979, !llvm.loop !36

1023:                                             ; preds = %974, %979, %951, %840
  %1024 = phi %"class.sh::TIntermNode"** [ %843, %840 ], [ %877, %951 ], [ %975, %974 ], [ %1017, %979 ]
  %1025 = ptrtoint %"class.sh::TIntermNode"** %1024 to i64
  store i64 %1025, i64* %816, align 8
  store i64 %848, i64* %815, align 8
  store i64 %845, i64* %825, align 8
  br label %1026

1026:                                             ; preds = %808, %1023
  %1027 = bitcast %"class.sh::TIntermBlock"** %555 to i8**
  store i8* %548, i8** %1027, align 8
  %1028 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %47) #6
  %1029 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1028, i64 0, i32 0
  store %"class.sh::TIntermTyped"* %1029, %"class.sh::TIntermTyped"** %793, align 8
  br label %2465

1030:                                             ; preds = %44
  %1031 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1032 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1031, i64 64) #6
  %1033 = bitcast i8* %1032 to %"class.sh::TIntermBlock"*
  %1034 = bitcast i8* %1032 to i32 (...)***
  %1035 = getelementptr inbounds i8, i8* %1032, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1035, i8 0, i64 16, i1 false) #6
  %1036 = getelementptr inbounds i8, i8* %1032, i64 24
  %1037 = bitcast i8* %1036 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1034, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1037, align 8
  %1038 = getelementptr inbounds i8, i8* %1032, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1038, i8 0, i64 25, i1 false) #6
  %1039 = bitcast i8* %1032 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %1040 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**), align 8
  %1041 = tail call %"class.sh::TVector"* %1040(%"class.sh::TIntermBlock"* %1033) #6
  %1042 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %1043 = icmp eq %"class.sh::TIntermNode"* %1042, null
  br i1 %1043, label %1270, label %1044

1044:                                             ; preds = %1030
  %1045 = ptrtoint %"class.sh::TIntermNode"* %1042 to i64
  %1046 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 1
  %1047 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1046, align 8
  %1048 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1049 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1048, align 8
  %1050 = icmp ult %"class.sh::TIntermNode"** %1047, %1049
  %1051 = ptrtoint %"class.sh::TIntermNode"** %1049 to i64
  br i1 %1050, label %1052, label %1057

1052:                                             ; preds = %1044
  %1053 = bitcast %"class.sh::TIntermNode"** %1047 to i64*
  store i64 %1045, i64* %1053, align 8
  %1054 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1047, i64 1
  %1055 = ptrtoint %"class.sh::TIntermNode"** %1054 to i64
  %1056 = bitcast %"class.sh::TIntermNode"*** %1046 to i64*
  store i64 %1055, i64* %1056, align 8
  br label %1270

1057:                                             ; preds = %1044
  %1058 = ptrtoint %"class.sh::TIntermNode"** %1047 to i64
  %1059 = bitcast %"class.sh::TIntermNode"*** %1046 to i64*
  %1060 = bitcast %"class.sh::TVector"* %1041 to i64*
  %1061 = load i64, i64* %1060, align 8
  %1062 = sub i64 %1058, %1061
  %1063 = ashr exact i64 %1062, 3
  %1064 = add nsw i64 %1063, 1
  %1065 = icmp ugt i64 %1064, 2305843009213693951
  br i1 %1065, label %1066, label %1068

1066:                                             ; preds = %1057
  %1067 = bitcast %"class.sh::TVector"* %1041 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1067) #7
  unreachable

1068:                                             ; preds = %1057
  %1069 = bitcast %"class.sh::TIntermNode"*** %1048 to i64*
  %1070 = sub i64 %1051, %1061
  %1071 = ashr exact i64 %1070, 3
  %1072 = icmp ult i64 %1071, 1152921504606846975
  br i1 %1072, label %1073, label %1078

1073:                                             ; preds = %1068
  %1074 = ashr exact i64 %1070, 2
  %1075 = icmp ult i64 %1074, %1064
  %1076 = select i1 %1075, i64 %1064, i64 %1074
  %1077 = icmp eq i64 %1076, 0
  br i1 %1077, label %1084, label %1078

1078:                                             ; preds = %1073, %1068
  %1079 = phi i64 [ %1076, %1073 ], [ 2305843009213693951, %1068 ]
  %1080 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1081 = shl i64 %1079, 3
  %1082 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1080, i64 %1081) #6
  %1083 = bitcast i8* %1082 to %"class.sh::TIntermNode"**
  br label %1084

1084:                                             ; preds = %1078, %1073
  %1085 = phi i64 [ %1079, %1078 ], [ 0, %1073 ]
  %1086 = phi %"class.sh::TIntermNode"** [ %1083, %1078 ], [ null, %1073 ]
  %1087 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1086, i64 %1063
  %1088 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1086, i64 %1085
  %1089 = ptrtoint %"class.sh::TIntermNode"** %1088 to i64
  %1090 = bitcast %"class.sh::TIntermNode"** %1087 to i64*
  store i64 %1045, i64* %1090, align 8
  %1091 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1087, i64 1
  %1092 = ptrtoint %"class.sh::TIntermNode"** %1091 to i64
  %1093 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 0
  %1094 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1093, align 8
  %1095 = ptrtoint %"class.sh::TIntermNode"** %1094 to i64
  %1096 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1046, align 8
  %1097 = icmp eq %"class.sh::TIntermNode"** %1096, %1094
  br i1 %1097, label %1267, label %1098

1098:                                             ; preds = %1084
  %1099 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 -1
  %1100 = ptrtoint %"class.sh::TIntermNode"** %1099 to i64
  %1101 = sub i64 %1100, %1095
  %1102 = lshr i64 %1101, 3
  %1103 = add nuw nsw i64 %1102, 1
  %1104 = icmp ult i64 %1103, 4
  br i1 %1104, label %1197, label %1105

1105:                                             ; preds = %1098
  %1106 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 -1
  %1107 = ptrtoint %"class.sh::TIntermNode"** %1106 to i64
  %1108 = sub i64 %1107, %1095
  %1109 = lshr i64 %1108, 3
  %1110 = xor i64 %1109, -1
  %1111 = add nsw i64 %1063, %1110
  %1112 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1086, i64 %1111
  %1113 = xor i64 %1109, -1
  %1114 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 %1113
  %1115 = icmp ult %"class.sh::TIntermNode"** %1112, %1096
  %1116 = icmp ult %"class.sh::TIntermNode"** %1114, %1087
  %1117 = and i1 %1115, %1116
  br i1 %1117, label %1197, label %1118

1118:                                             ; preds = %1105
  %1119 = and i64 %1103, 4611686018427387900
  %1120 = sub nsw i64 0, %1119
  %1121 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1087, i64 %1120
  %1122 = sub nsw i64 0, %1119
  %1123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 %1122
  %1124 = add nsw i64 %1119, -4
  %1125 = lshr exact i64 %1124, 2
  %1126 = add nuw nsw i64 %1125, 1
  %1127 = and i64 %1126, 1
  %1128 = icmp eq i64 %1124, 0
  br i1 %1128, label %1173, label %1129

1129:                                             ; preds = %1118
  %1130 = sub nuw nsw i64 %1126, %1127
  %1131 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1087, i64 -1
  %1132 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 -1
  %1133 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1087, i64 -1
  %1134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 -1
  br label %1135

1135:                                             ; preds = %1135, %1129
  %1136 = phi i64 [ 0, %1129 ], [ %1170, %1135 ]
  %1137 = phi i64 [ %1130, %1129 ], [ %1171, %1135 ]
  %1138 = sub i64 0, %1136
  %1139 = sub i64 0, %1136
  %1140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1131, i64 %1138
  %1141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1132, i64 %1139
  %1142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1141, i64 -1
  %1143 = bitcast %"class.sh::TIntermNode"** %1142 to <2 x i64>*
  %1144 = load <2 x i64>, <2 x i64>* %1143, align 8, !alias.scope !37
  %1145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1141, i64 -2
  %1146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1145, i64 -1
  %1147 = bitcast %"class.sh::TIntermNode"** %1146 to <2 x i64>*
  %1148 = load <2 x i64>, <2 x i64>* %1147, align 8, !alias.scope !37
  %1149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1140, i64 -1
  %1150 = bitcast %"class.sh::TIntermNode"** %1149 to <2 x i64>*
  store <2 x i64> %1144, <2 x i64>* %1150, align 8, !alias.scope !40, !noalias !37
  %1151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1140, i64 -2
  %1152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1151, i64 -1
  %1153 = bitcast %"class.sh::TIntermNode"** %1152 to <2 x i64>*
  store <2 x i64> %1148, <2 x i64>* %1153, align 8, !alias.scope !40, !noalias !37
  %1154 = sub nuw nsw i64 -4, %1136
  %1155 = sub nuw nsw i64 -4, %1136
  %1156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1133, i64 %1154
  %1157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1134, i64 %1155
  %1158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1157, i64 -1
  %1159 = bitcast %"class.sh::TIntermNode"** %1158 to <2 x i64>*
  %1160 = load <2 x i64>, <2 x i64>* %1159, align 8, !alias.scope !37
  %1161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1157, i64 -2
  %1162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1161, i64 -1
  %1163 = bitcast %"class.sh::TIntermNode"** %1162 to <2 x i64>*
  %1164 = load <2 x i64>, <2 x i64>* %1163, align 8, !alias.scope !37
  %1165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1156, i64 -1
  %1166 = bitcast %"class.sh::TIntermNode"** %1165 to <2 x i64>*
  store <2 x i64> %1160, <2 x i64>* %1166, align 8, !alias.scope !40, !noalias !37
  %1167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1156, i64 -2
  %1168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1167, i64 -1
  %1169 = bitcast %"class.sh::TIntermNode"** %1168 to <2 x i64>*
  store <2 x i64> %1164, <2 x i64>* %1169, align 8, !alias.scope !40, !noalias !37
  %1170 = add i64 %1136, 8
  %1171 = add i64 %1137, -2
  %1172 = icmp eq i64 %1171, 0
  br i1 %1172, label %1173, label %1135, !llvm.loop !42

1173:                                             ; preds = %1135, %1118
  %1174 = phi i64 [ 0, %1118 ], [ %1170, %1135 ]
  %1175 = icmp eq i64 %1127, 0
  br i1 %1175, label %1195, label %1176

1176:                                             ; preds = %1173
  %1177 = sub i64 0, %1174
  %1178 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1087, i64 -1
  %1179 = sub i64 0, %1174
  %1180 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1096, i64 -1
  %1181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1178, i64 %1177
  %1182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1180, i64 %1179
  %1183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1182, i64 -1
  %1184 = bitcast %"class.sh::TIntermNode"** %1183 to <2 x i64>*
  %1185 = load <2 x i64>, <2 x i64>* %1184, align 8, !alias.scope !37
  %1186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1182, i64 -2
  %1187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1186, i64 -1
  %1188 = bitcast %"class.sh::TIntermNode"** %1187 to <2 x i64>*
  %1189 = load <2 x i64>, <2 x i64>* %1188, align 8, !alias.scope !37
  %1190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1181, i64 -1
  %1191 = bitcast %"class.sh::TIntermNode"** %1190 to <2 x i64>*
  store <2 x i64> %1185, <2 x i64>* %1191, align 8, !alias.scope !40, !noalias !37
  %1192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1181, i64 -2
  %1193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1192, i64 -1
  %1194 = bitcast %"class.sh::TIntermNode"** %1193 to <2 x i64>*
  store <2 x i64> %1189, <2 x i64>* %1194, align 8, !alias.scope !40, !noalias !37
  br label %1195

1195:                                             ; preds = %1173, %1176
  %1196 = icmp eq i64 %1103, %1119
  br i1 %1196, label %1267, label %1197

1197:                                             ; preds = %1195, %1105, %1098
  %1198 = phi %"class.sh::TIntermNode"** [ %1087, %1105 ], [ %1087, %1098 ], [ %1121, %1195 ]
  %1199 = phi %"class.sh::TIntermNode"** [ %1096, %1105 ], [ %1096, %1098 ], [ %1123, %1195 ]
  %1200 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1199, i64 -1
  %1201 = ptrtoint %"class.sh::TIntermNode"** %1200 to i64
  %1202 = sub i64 %1201, %1095
  %1203 = lshr i64 %1202, 3
  %1204 = add nuw nsw i64 %1203, 1
  %1205 = and i64 %1204, 7
  %1206 = icmp eq i64 %1205, 0
  br i1 %1206, label %1218, label %1207

1207:                                             ; preds = %1197, %1207
  %1208 = phi %"class.sh::TIntermNode"** [ %1211, %1207 ], [ %1198, %1197 ]
  %1209 = phi %"class.sh::TIntermNode"** [ %1212, %1207 ], [ %1199, %1197 ]
  %1210 = phi i64 [ %1216, %1207 ], [ %1205, %1197 ]
  %1211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1208, i64 -1
  %1212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1209, i64 -1
  %1213 = bitcast %"class.sh::TIntermNode"** %1212 to i64*
  %1214 = load i64, i64* %1213, align 8
  %1215 = bitcast %"class.sh::TIntermNode"** %1211 to i64*
  store i64 %1214, i64* %1215, align 8
  %1216 = add i64 %1210, -1
  %1217 = icmp eq i64 %1216, 0
  br i1 %1217, label %1218, label %1207, !llvm.loop !43

1218:                                             ; preds = %1207, %1197
  %1219 = phi %"class.sh::TIntermNode"** [ undef, %1197 ], [ %1211, %1207 ]
  %1220 = phi %"class.sh::TIntermNode"** [ %1198, %1197 ], [ %1211, %1207 ]
  %1221 = phi %"class.sh::TIntermNode"** [ %1199, %1197 ], [ %1212, %1207 ]
  %1222 = icmp ult i64 %1202, 56
  br i1 %1222, label %1267, label %1223

1223:                                             ; preds = %1218, %1223
  %1224 = phi %"class.sh::TIntermNode"** [ %1261, %1223 ], [ %1220, %1218 ]
  %1225 = phi %"class.sh::TIntermNode"** [ %1262, %1223 ], [ %1221, %1218 ]
  %1226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -1
  %1227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -1
  %1228 = bitcast %"class.sh::TIntermNode"** %1227 to i64*
  %1229 = load i64, i64* %1228, align 8
  %1230 = bitcast %"class.sh::TIntermNode"** %1226 to i64*
  store i64 %1229, i64* %1230, align 8
  %1231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -2
  %1232 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -2
  %1233 = bitcast %"class.sh::TIntermNode"** %1232 to i64*
  %1234 = load i64, i64* %1233, align 8
  %1235 = bitcast %"class.sh::TIntermNode"** %1231 to i64*
  store i64 %1234, i64* %1235, align 8
  %1236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -3
  %1237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -3
  %1238 = bitcast %"class.sh::TIntermNode"** %1237 to i64*
  %1239 = load i64, i64* %1238, align 8
  %1240 = bitcast %"class.sh::TIntermNode"** %1236 to i64*
  store i64 %1239, i64* %1240, align 8
  %1241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -4
  %1242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -4
  %1243 = bitcast %"class.sh::TIntermNode"** %1242 to i64*
  %1244 = load i64, i64* %1243, align 8
  %1245 = bitcast %"class.sh::TIntermNode"** %1241 to i64*
  store i64 %1244, i64* %1245, align 8
  %1246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -5
  %1247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -5
  %1248 = bitcast %"class.sh::TIntermNode"** %1247 to i64*
  %1249 = load i64, i64* %1248, align 8
  %1250 = bitcast %"class.sh::TIntermNode"** %1246 to i64*
  store i64 %1249, i64* %1250, align 8
  %1251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -6
  %1252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -6
  %1253 = bitcast %"class.sh::TIntermNode"** %1252 to i64*
  %1254 = load i64, i64* %1253, align 8
  %1255 = bitcast %"class.sh::TIntermNode"** %1251 to i64*
  store i64 %1254, i64* %1255, align 8
  %1256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -7
  %1257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -7
  %1258 = bitcast %"class.sh::TIntermNode"** %1257 to i64*
  %1259 = load i64, i64* %1258, align 8
  %1260 = bitcast %"class.sh::TIntermNode"** %1256 to i64*
  store i64 %1259, i64* %1260, align 8
  %1261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1224, i64 -8
  %1262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1225, i64 -8
  %1263 = bitcast %"class.sh::TIntermNode"** %1262 to i64*
  %1264 = load i64, i64* %1263, align 8
  %1265 = bitcast %"class.sh::TIntermNode"** %1261 to i64*
  store i64 %1264, i64* %1265, align 8
  %1266 = icmp eq %"class.sh::TIntermNode"** %1262, %1094
  br i1 %1266, label %1267, label %1223, !llvm.loop !44

1267:                                             ; preds = %1218, %1223, %1195, %1084
  %1268 = phi %"class.sh::TIntermNode"** [ %1087, %1084 ], [ %1121, %1195 ], [ %1219, %1218 ], [ %1261, %1223 ]
  %1269 = ptrtoint %"class.sh::TIntermNode"** %1268 to i64
  store i64 %1269, i64* %1060, align 8
  store i64 %1092, i64* %1059, align 8
  store i64 %1089, i64* %1069, align 8
  br label %1270

1270:                                             ; preds = %1267, %1052, %1030
  %1271 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 3
  %1272 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1271, align 8
  %1273 = icmp eq %"class.sh::TIntermTyped"* %1272, null
  br i1 %1273, label %1280, label %1274

1274:                                             ; preds = %1270
  %1275 = bitcast %"class.sh::TIntermTyped"* %1272 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %1276 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %1275, align 8
  %1277 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1276, i64 23
  %1278 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1277, align 8
  %1279 = tail call %"class.sh::TIntermTyped"* %1278(%"class.sh::TIntermTyped"* nonnull %1272) #6
  br label %1283

1280:                                             ; preds = %1270
  %1281 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateBoolNodeEb(i1 zeroext true) #6
  %1282 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1281, i64 0, i32 0, i32 0
  br label %1283

1283:                                             ; preds = %1280, %1274
  %1284 = phi %"class.sh::TIntermTyped"* [ %1279, %1274 ], [ %1282, %1280 ]
  %1285 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %1284) #6
  %1286 = ptrtoint %"class.sh::TIntermDeclaration"* %1285 to i64
  %1287 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 1
  %1288 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1287, align 8
  %1289 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1290 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1289, align 8
  %1291 = icmp ult %"class.sh::TIntermNode"** %1288, %1290
  %1292 = ptrtoint %"class.sh::TIntermNode"** %1290 to i64
  br i1 %1291, label %1293, label %1298

1293:                                             ; preds = %1283
  %1294 = bitcast %"class.sh::TIntermNode"** %1288 to i64*
  store i64 %1286, i64* %1294, align 8
  %1295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1288, i64 1
  %1296 = ptrtoint %"class.sh::TIntermNode"** %1295 to i64
  %1297 = bitcast %"class.sh::TIntermNode"*** %1287 to i64*
  store i64 %1296, i64* %1297, align 8
  br label %1511

1298:                                             ; preds = %1283
  %1299 = ptrtoint %"class.sh::TIntermNode"** %1288 to i64
  %1300 = bitcast %"class.sh::TIntermNode"*** %1287 to i64*
  %1301 = bitcast %"class.sh::TVector"* %1041 to i64*
  %1302 = load i64, i64* %1301, align 8
  %1303 = sub i64 %1299, %1302
  %1304 = ashr exact i64 %1303, 3
  %1305 = add nsw i64 %1304, 1
  %1306 = icmp ugt i64 %1305, 2305843009213693951
  br i1 %1306, label %1307, label %1309

1307:                                             ; preds = %1298
  %1308 = bitcast %"class.sh::TVector"* %1041 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1308) #7
  unreachable

1309:                                             ; preds = %1298
  %1310 = bitcast %"class.sh::TIntermNode"*** %1289 to i64*
  %1311 = sub i64 %1292, %1302
  %1312 = ashr exact i64 %1311, 3
  %1313 = icmp ult i64 %1312, 1152921504606846975
  br i1 %1313, label %1314, label %1319

1314:                                             ; preds = %1309
  %1315 = ashr exact i64 %1311, 2
  %1316 = icmp ult i64 %1315, %1305
  %1317 = select i1 %1316, i64 %1305, i64 %1315
  %1318 = icmp eq i64 %1317, 0
  br i1 %1318, label %1325, label %1319

1319:                                             ; preds = %1314, %1309
  %1320 = phi i64 [ %1317, %1314 ], [ 2305843009213693951, %1309 ]
  %1321 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1322 = shl i64 %1320, 3
  %1323 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1321, i64 %1322) #6
  %1324 = bitcast i8* %1323 to %"class.sh::TIntermNode"**
  br label %1325

1325:                                             ; preds = %1319, %1314
  %1326 = phi i64 [ %1320, %1319 ], [ 0, %1314 ]
  %1327 = phi %"class.sh::TIntermNode"** [ %1324, %1319 ], [ null, %1314 ]
  %1328 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1327, i64 %1304
  %1329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1327, i64 %1326
  %1330 = ptrtoint %"class.sh::TIntermNode"** %1329 to i64
  %1331 = bitcast %"class.sh::TIntermNode"** %1328 to i64*
  store i64 %1286, i64* %1331, align 8
  %1332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 1
  %1333 = ptrtoint %"class.sh::TIntermNode"** %1332 to i64
  %1334 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1041, i64 0, i32 0, i32 0, i32 0
  %1335 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1334, align 8
  %1336 = ptrtoint %"class.sh::TIntermNode"** %1335 to i64
  %1337 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1287, align 8
  %1338 = icmp eq %"class.sh::TIntermNode"** %1337, %1335
  br i1 %1338, label %1508, label %1339

1339:                                             ; preds = %1325
  %1340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 -1
  %1341 = ptrtoint %"class.sh::TIntermNode"** %1340 to i64
  %1342 = sub i64 %1341, %1336
  %1343 = lshr i64 %1342, 3
  %1344 = add nuw nsw i64 %1343, 1
  %1345 = icmp ult i64 %1344, 4
  br i1 %1345, label %1438, label %1346

1346:                                             ; preds = %1339
  %1347 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 -1
  %1348 = ptrtoint %"class.sh::TIntermNode"** %1347 to i64
  %1349 = sub i64 %1348, %1336
  %1350 = lshr i64 %1349, 3
  %1351 = xor i64 %1350, -1
  %1352 = add nsw i64 %1304, %1351
  %1353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1327, i64 %1352
  %1354 = xor i64 %1350, -1
  %1355 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 %1354
  %1356 = icmp ult %"class.sh::TIntermNode"** %1353, %1337
  %1357 = icmp ult %"class.sh::TIntermNode"** %1355, %1328
  %1358 = and i1 %1356, %1357
  br i1 %1358, label %1438, label %1359

1359:                                             ; preds = %1346
  %1360 = and i64 %1344, 4611686018427387900
  %1361 = sub nsw i64 0, %1360
  %1362 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 %1361
  %1363 = sub nsw i64 0, %1360
  %1364 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 %1363
  %1365 = add nsw i64 %1360, -4
  %1366 = lshr exact i64 %1365, 2
  %1367 = add nuw nsw i64 %1366, 1
  %1368 = and i64 %1367, 1
  %1369 = icmp eq i64 %1365, 0
  br i1 %1369, label %1414, label %1370

1370:                                             ; preds = %1359
  %1371 = sub nuw nsw i64 %1367, %1368
  %1372 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 -1
  %1373 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 -1
  %1374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 -1
  %1375 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 -1
  br label %1376

1376:                                             ; preds = %1376, %1370
  %1377 = phi i64 [ 0, %1370 ], [ %1411, %1376 ]
  %1378 = phi i64 [ %1371, %1370 ], [ %1412, %1376 ]
  %1379 = sub i64 0, %1377
  %1380 = sub i64 0, %1377
  %1381 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1372, i64 %1379
  %1382 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1373, i64 %1380
  %1383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1382, i64 -1
  %1384 = bitcast %"class.sh::TIntermNode"** %1383 to <2 x i64>*
  %1385 = load <2 x i64>, <2 x i64>* %1384, align 8, !alias.scope !45
  %1386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1382, i64 -2
  %1387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -1
  %1388 = bitcast %"class.sh::TIntermNode"** %1387 to <2 x i64>*
  %1389 = load <2 x i64>, <2 x i64>* %1388, align 8, !alias.scope !45
  %1390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1381, i64 -1
  %1391 = bitcast %"class.sh::TIntermNode"** %1390 to <2 x i64>*
  store <2 x i64> %1385, <2 x i64>* %1391, align 8, !alias.scope !48, !noalias !45
  %1392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1381, i64 -2
  %1393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1392, i64 -1
  %1394 = bitcast %"class.sh::TIntermNode"** %1393 to <2 x i64>*
  store <2 x i64> %1389, <2 x i64>* %1394, align 8, !alias.scope !48, !noalias !45
  %1395 = sub nuw nsw i64 -4, %1377
  %1396 = sub nuw nsw i64 -4, %1377
  %1397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1374, i64 %1395
  %1398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1375, i64 %1396
  %1399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1398, i64 -1
  %1400 = bitcast %"class.sh::TIntermNode"** %1399 to <2 x i64>*
  %1401 = load <2 x i64>, <2 x i64>* %1400, align 8, !alias.scope !45
  %1402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1398, i64 -2
  %1403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1402, i64 -1
  %1404 = bitcast %"class.sh::TIntermNode"** %1403 to <2 x i64>*
  %1405 = load <2 x i64>, <2 x i64>* %1404, align 8, !alias.scope !45
  %1406 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1397, i64 -1
  %1407 = bitcast %"class.sh::TIntermNode"** %1406 to <2 x i64>*
  store <2 x i64> %1401, <2 x i64>* %1407, align 8, !alias.scope !48, !noalias !45
  %1408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1397, i64 -2
  %1409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1408, i64 -1
  %1410 = bitcast %"class.sh::TIntermNode"** %1409 to <2 x i64>*
  store <2 x i64> %1405, <2 x i64>* %1410, align 8, !alias.scope !48, !noalias !45
  %1411 = add i64 %1377, 8
  %1412 = add i64 %1378, -2
  %1413 = icmp eq i64 %1412, 0
  br i1 %1413, label %1414, label %1376, !llvm.loop !50

1414:                                             ; preds = %1376, %1359
  %1415 = phi i64 [ 0, %1359 ], [ %1411, %1376 ]
  %1416 = icmp eq i64 %1368, 0
  br i1 %1416, label %1436, label %1417

1417:                                             ; preds = %1414
  %1418 = sub i64 0, %1415
  %1419 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 -1
  %1420 = sub i64 0, %1415
  %1421 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1337, i64 -1
  %1422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1419, i64 %1418
  %1423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1421, i64 %1420
  %1424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1423, i64 -1
  %1425 = bitcast %"class.sh::TIntermNode"** %1424 to <2 x i64>*
  %1426 = load <2 x i64>, <2 x i64>* %1425, align 8, !alias.scope !45
  %1427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1423, i64 -2
  %1428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1427, i64 -1
  %1429 = bitcast %"class.sh::TIntermNode"** %1428 to <2 x i64>*
  %1430 = load <2 x i64>, <2 x i64>* %1429, align 8, !alias.scope !45
  %1431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1422, i64 -1
  %1432 = bitcast %"class.sh::TIntermNode"** %1431 to <2 x i64>*
  store <2 x i64> %1426, <2 x i64>* %1432, align 8, !alias.scope !48, !noalias !45
  %1433 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1422, i64 -2
  %1434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1433, i64 -1
  %1435 = bitcast %"class.sh::TIntermNode"** %1434 to <2 x i64>*
  store <2 x i64> %1430, <2 x i64>* %1435, align 8, !alias.scope !48, !noalias !45
  br label %1436

1436:                                             ; preds = %1414, %1417
  %1437 = icmp eq i64 %1344, %1360
  br i1 %1437, label %1508, label %1438

1438:                                             ; preds = %1436, %1346, %1339
  %1439 = phi %"class.sh::TIntermNode"** [ %1328, %1346 ], [ %1328, %1339 ], [ %1362, %1436 ]
  %1440 = phi %"class.sh::TIntermNode"** [ %1337, %1346 ], [ %1337, %1339 ], [ %1364, %1436 ]
  %1441 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1440, i64 -1
  %1442 = ptrtoint %"class.sh::TIntermNode"** %1441 to i64
  %1443 = sub i64 %1442, %1336
  %1444 = lshr i64 %1443, 3
  %1445 = add nuw nsw i64 %1444, 1
  %1446 = and i64 %1445, 7
  %1447 = icmp eq i64 %1446, 0
  br i1 %1447, label %1459, label %1448

1448:                                             ; preds = %1438, %1448
  %1449 = phi %"class.sh::TIntermNode"** [ %1452, %1448 ], [ %1439, %1438 ]
  %1450 = phi %"class.sh::TIntermNode"** [ %1453, %1448 ], [ %1440, %1438 ]
  %1451 = phi i64 [ %1457, %1448 ], [ %1446, %1438 ]
  %1452 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1449, i64 -1
  %1453 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1450, i64 -1
  %1454 = bitcast %"class.sh::TIntermNode"** %1453 to i64*
  %1455 = load i64, i64* %1454, align 8
  %1456 = bitcast %"class.sh::TIntermNode"** %1452 to i64*
  store i64 %1455, i64* %1456, align 8
  %1457 = add i64 %1451, -1
  %1458 = icmp eq i64 %1457, 0
  br i1 %1458, label %1459, label %1448, !llvm.loop !51

1459:                                             ; preds = %1448, %1438
  %1460 = phi %"class.sh::TIntermNode"** [ undef, %1438 ], [ %1452, %1448 ]
  %1461 = phi %"class.sh::TIntermNode"** [ %1439, %1438 ], [ %1452, %1448 ]
  %1462 = phi %"class.sh::TIntermNode"** [ %1440, %1438 ], [ %1453, %1448 ]
  %1463 = icmp ult i64 %1443, 56
  br i1 %1463, label %1508, label %1464

1464:                                             ; preds = %1459, %1464
  %1465 = phi %"class.sh::TIntermNode"** [ %1502, %1464 ], [ %1461, %1459 ]
  %1466 = phi %"class.sh::TIntermNode"** [ %1503, %1464 ], [ %1462, %1459 ]
  %1467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -1
  %1468 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -1
  %1469 = bitcast %"class.sh::TIntermNode"** %1468 to i64*
  %1470 = load i64, i64* %1469, align 8
  %1471 = bitcast %"class.sh::TIntermNode"** %1467 to i64*
  store i64 %1470, i64* %1471, align 8
  %1472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -2
  %1473 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -2
  %1474 = bitcast %"class.sh::TIntermNode"** %1473 to i64*
  %1475 = load i64, i64* %1474, align 8
  %1476 = bitcast %"class.sh::TIntermNode"** %1472 to i64*
  store i64 %1475, i64* %1476, align 8
  %1477 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -3
  %1478 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -3
  %1479 = bitcast %"class.sh::TIntermNode"** %1478 to i64*
  %1480 = load i64, i64* %1479, align 8
  %1481 = bitcast %"class.sh::TIntermNode"** %1477 to i64*
  store i64 %1480, i64* %1481, align 8
  %1482 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -4
  %1483 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -4
  %1484 = bitcast %"class.sh::TIntermNode"** %1483 to i64*
  %1485 = load i64, i64* %1484, align 8
  %1486 = bitcast %"class.sh::TIntermNode"** %1482 to i64*
  store i64 %1485, i64* %1486, align 8
  %1487 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -5
  %1488 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -5
  %1489 = bitcast %"class.sh::TIntermNode"** %1488 to i64*
  %1490 = load i64, i64* %1489, align 8
  %1491 = bitcast %"class.sh::TIntermNode"** %1487 to i64*
  store i64 %1490, i64* %1491, align 8
  %1492 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -6
  %1493 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -6
  %1494 = bitcast %"class.sh::TIntermNode"** %1493 to i64*
  %1495 = load i64, i64* %1494, align 8
  %1496 = bitcast %"class.sh::TIntermNode"** %1492 to i64*
  store i64 %1495, i64* %1496, align 8
  %1497 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -7
  %1498 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -7
  %1499 = bitcast %"class.sh::TIntermNode"** %1498 to i64*
  %1500 = load i64, i64* %1499, align 8
  %1501 = bitcast %"class.sh::TIntermNode"** %1497 to i64*
  store i64 %1500, i64* %1501, align 8
  %1502 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1465, i64 -8
  %1503 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1466, i64 -8
  %1504 = bitcast %"class.sh::TIntermNode"** %1503 to i64*
  %1505 = load i64, i64* %1504, align 8
  %1506 = bitcast %"class.sh::TIntermNode"** %1502 to i64*
  store i64 %1505, i64* %1506, align 8
  %1507 = icmp eq %"class.sh::TIntermNode"** %1503, %1335
  br i1 %1507, label %1508, label %1464, !llvm.loop !52

1508:                                             ; preds = %1459, %1464, %1436, %1325
  %1509 = phi %"class.sh::TIntermNode"** [ %1328, %1325 ], [ %1362, %1436 ], [ %1460, %1459 ], [ %1502, %1464 ]
  %1510 = ptrtoint %"class.sh::TIntermNode"** %1509 to i64
  store i64 %1510, i64* %1301, align 8
  store i64 %1333, i64* %1300, align 8
  store i64 %1330, i64* %1310, align 8
  br label %1511

1511:                                             ; preds = %1293, %1508
  %1512 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1513 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1512, i64 64) #6
  %1514 = bitcast i8* %1513 to %"class.sh::TIntermBlock"*
  %1515 = bitcast i8* %1513 to i32 (...)***
  %1516 = getelementptr inbounds i8, i8* %1513, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1516, i8 0, i64 16, i1 false) #6
  %1517 = getelementptr inbounds i8, i8* %1513, i64 24
  %1518 = bitcast i8* %1517 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1515, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1518, align 8
  %1519 = getelementptr inbounds i8, i8* %1513, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1519, i8 0, i64 25, i1 false) #6
  %1520 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %1521 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1520, align 8
  %1522 = icmp eq %"class.sh::TIntermBlock"* %1521, null
  br i1 %1522, label %1751, label %1523

1523:                                             ; preds = %1511
  %1524 = tail call %"class.sh::TVector"* %1040(%"class.sh::TIntermBlock"* %1514) #6
  %1525 = bitcast %"class.sh::TIntermBlock"** %1520 to i64*
  %1526 = load i64, i64* %1525, align 8
  %1527 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1524, i64 0, i32 0, i32 0, i32 1
  %1528 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1527, align 8
  %1529 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1524, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1530 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1529, align 8
  %1531 = icmp ult %"class.sh::TIntermNode"** %1528, %1530
  %1532 = ptrtoint %"class.sh::TIntermNode"** %1530 to i64
  br i1 %1531, label %1533, label %1538

1533:                                             ; preds = %1523
  %1534 = bitcast %"class.sh::TIntermNode"** %1528 to i64*
  store i64 %1526, i64* %1534, align 8
  %1535 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1528, i64 1
  %1536 = ptrtoint %"class.sh::TIntermNode"** %1535 to i64
  %1537 = bitcast %"class.sh::TIntermNode"*** %1527 to i64*
  store i64 %1536, i64* %1537, align 8
  br label %1751

1538:                                             ; preds = %1523
  %1539 = ptrtoint %"class.sh::TIntermNode"** %1528 to i64
  %1540 = bitcast %"class.sh::TIntermNode"*** %1527 to i64*
  %1541 = bitcast %"class.sh::TVector"* %1524 to i64*
  %1542 = load i64, i64* %1541, align 8
  %1543 = sub i64 %1539, %1542
  %1544 = ashr exact i64 %1543, 3
  %1545 = add nsw i64 %1544, 1
  %1546 = icmp ugt i64 %1545, 2305843009213693951
  br i1 %1546, label %1547, label %1549

1547:                                             ; preds = %1538
  %1548 = bitcast %"class.sh::TVector"* %1524 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1548) #7
  unreachable

1549:                                             ; preds = %1538
  %1550 = bitcast %"class.sh::TIntermNode"*** %1529 to i64*
  %1551 = sub i64 %1532, %1542
  %1552 = ashr exact i64 %1551, 3
  %1553 = icmp ult i64 %1552, 1152921504606846975
  br i1 %1553, label %1554, label %1559

1554:                                             ; preds = %1549
  %1555 = ashr exact i64 %1551, 2
  %1556 = icmp ult i64 %1555, %1545
  %1557 = select i1 %1556, i64 %1545, i64 %1555
  %1558 = icmp eq i64 %1557, 0
  br i1 %1558, label %1565, label %1559

1559:                                             ; preds = %1554, %1549
  %1560 = phi i64 [ %1557, %1554 ], [ 2305843009213693951, %1549 ]
  %1561 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1562 = shl i64 %1560, 3
  %1563 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1561, i64 %1562) #6
  %1564 = bitcast i8* %1563 to %"class.sh::TIntermNode"**
  br label %1565

1565:                                             ; preds = %1559, %1554
  %1566 = phi i64 [ %1560, %1559 ], [ 0, %1554 ]
  %1567 = phi %"class.sh::TIntermNode"** [ %1564, %1559 ], [ null, %1554 ]
  %1568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 %1544
  %1569 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 %1566
  %1570 = ptrtoint %"class.sh::TIntermNode"** %1569 to i64
  %1571 = bitcast %"class.sh::TIntermNode"** %1568 to i64*
  store i64 %1526, i64* %1571, align 8
  %1572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1568, i64 1
  %1573 = ptrtoint %"class.sh::TIntermNode"** %1572 to i64
  %1574 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1524, i64 0, i32 0, i32 0, i32 0
  %1575 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1574, align 8
  %1576 = ptrtoint %"class.sh::TIntermNode"** %1575 to i64
  %1577 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1527, align 8
  %1578 = icmp eq %"class.sh::TIntermNode"** %1577, %1575
  br i1 %1578, label %1748, label %1579

1579:                                             ; preds = %1565
  %1580 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 -1
  %1581 = ptrtoint %"class.sh::TIntermNode"** %1580 to i64
  %1582 = sub i64 %1581, %1576
  %1583 = lshr i64 %1582, 3
  %1584 = add nuw nsw i64 %1583, 1
  %1585 = icmp ult i64 %1584, 4
  br i1 %1585, label %1678, label %1586

1586:                                             ; preds = %1579
  %1587 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 -1
  %1588 = ptrtoint %"class.sh::TIntermNode"** %1587 to i64
  %1589 = sub i64 %1588, %1576
  %1590 = lshr i64 %1589, 3
  %1591 = xor i64 %1590, -1
  %1592 = add nsw i64 %1544, %1591
  %1593 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 %1592
  %1594 = xor i64 %1590, -1
  %1595 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 %1594
  %1596 = icmp ult %"class.sh::TIntermNode"** %1593, %1577
  %1597 = icmp ult %"class.sh::TIntermNode"** %1595, %1568
  %1598 = and i1 %1596, %1597
  br i1 %1598, label %1678, label %1599

1599:                                             ; preds = %1586
  %1600 = and i64 %1584, 4611686018427387900
  %1601 = sub nsw i64 0, %1600
  %1602 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1568, i64 %1601
  %1603 = sub nsw i64 0, %1600
  %1604 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 %1603
  %1605 = add nsw i64 %1600, -4
  %1606 = lshr exact i64 %1605, 2
  %1607 = add nuw nsw i64 %1606, 1
  %1608 = and i64 %1607, 1
  %1609 = icmp eq i64 %1605, 0
  br i1 %1609, label %1654, label %1610

1610:                                             ; preds = %1599
  %1611 = sub nuw nsw i64 %1607, %1608
  %1612 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1568, i64 -1
  %1613 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 -1
  %1614 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1568, i64 -1
  %1615 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 -1
  br label %1616

1616:                                             ; preds = %1616, %1610
  %1617 = phi i64 [ 0, %1610 ], [ %1651, %1616 ]
  %1618 = phi i64 [ %1611, %1610 ], [ %1652, %1616 ]
  %1619 = sub i64 0, %1617
  %1620 = sub i64 0, %1617
  %1621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1612, i64 %1619
  %1622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1613, i64 %1620
  %1623 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1622, i64 -1
  %1624 = bitcast %"class.sh::TIntermNode"** %1623 to <2 x i64>*
  %1625 = load <2 x i64>, <2 x i64>* %1624, align 8, !alias.scope !53
  %1626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1622, i64 -2
  %1627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1626, i64 -1
  %1628 = bitcast %"class.sh::TIntermNode"** %1627 to <2 x i64>*
  %1629 = load <2 x i64>, <2 x i64>* %1628, align 8, !alias.scope !53
  %1630 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1621, i64 -1
  %1631 = bitcast %"class.sh::TIntermNode"** %1630 to <2 x i64>*
  store <2 x i64> %1625, <2 x i64>* %1631, align 8, !alias.scope !56, !noalias !53
  %1632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1621, i64 -2
  %1633 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1632, i64 -1
  %1634 = bitcast %"class.sh::TIntermNode"** %1633 to <2 x i64>*
  store <2 x i64> %1629, <2 x i64>* %1634, align 8, !alias.scope !56, !noalias !53
  %1635 = sub nuw nsw i64 -4, %1617
  %1636 = sub nuw nsw i64 -4, %1617
  %1637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1614, i64 %1635
  %1638 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1615, i64 %1636
  %1639 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1638, i64 -1
  %1640 = bitcast %"class.sh::TIntermNode"** %1639 to <2 x i64>*
  %1641 = load <2 x i64>, <2 x i64>* %1640, align 8, !alias.scope !53
  %1642 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1638, i64 -2
  %1643 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1642, i64 -1
  %1644 = bitcast %"class.sh::TIntermNode"** %1643 to <2 x i64>*
  %1645 = load <2 x i64>, <2 x i64>* %1644, align 8, !alias.scope !53
  %1646 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1637, i64 -1
  %1647 = bitcast %"class.sh::TIntermNode"** %1646 to <2 x i64>*
  store <2 x i64> %1641, <2 x i64>* %1647, align 8, !alias.scope !56, !noalias !53
  %1648 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1637, i64 -2
  %1649 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1648, i64 -1
  %1650 = bitcast %"class.sh::TIntermNode"** %1649 to <2 x i64>*
  store <2 x i64> %1645, <2 x i64>* %1650, align 8, !alias.scope !56, !noalias !53
  %1651 = add i64 %1617, 8
  %1652 = add i64 %1618, -2
  %1653 = icmp eq i64 %1652, 0
  br i1 %1653, label %1654, label %1616, !llvm.loop !58

1654:                                             ; preds = %1616, %1599
  %1655 = phi i64 [ 0, %1599 ], [ %1651, %1616 ]
  %1656 = icmp eq i64 %1608, 0
  br i1 %1656, label %1676, label %1657

1657:                                             ; preds = %1654
  %1658 = sub i64 0, %1655
  %1659 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1568, i64 -1
  %1660 = sub i64 0, %1655
  %1661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 -1
  %1662 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1659, i64 %1658
  %1663 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1661, i64 %1660
  %1664 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1663, i64 -1
  %1665 = bitcast %"class.sh::TIntermNode"** %1664 to <2 x i64>*
  %1666 = load <2 x i64>, <2 x i64>* %1665, align 8, !alias.scope !53
  %1667 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1663, i64 -2
  %1668 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1667, i64 -1
  %1669 = bitcast %"class.sh::TIntermNode"** %1668 to <2 x i64>*
  %1670 = load <2 x i64>, <2 x i64>* %1669, align 8, !alias.scope !53
  %1671 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1662, i64 -1
  %1672 = bitcast %"class.sh::TIntermNode"** %1671 to <2 x i64>*
  store <2 x i64> %1666, <2 x i64>* %1672, align 8, !alias.scope !56, !noalias !53
  %1673 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1662, i64 -2
  %1674 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1673, i64 -1
  %1675 = bitcast %"class.sh::TIntermNode"** %1674 to <2 x i64>*
  store <2 x i64> %1670, <2 x i64>* %1675, align 8, !alias.scope !56, !noalias !53
  br label %1676

1676:                                             ; preds = %1654, %1657
  %1677 = icmp eq i64 %1584, %1600
  br i1 %1677, label %1748, label %1678

1678:                                             ; preds = %1676, %1586, %1579
  %1679 = phi %"class.sh::TIntermNode"** [ %1568, %1586 ], [ %1568, %1579 ], [ %1602, %1676 ]
  %1680 = phi %"class.sh::TIntermNode"** [ %1577, %1586 ], [ %1577, %1579 ], [ %1604, %1676 ]
  %1681 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1680, i64 -1
  %1682 = ptrtoint %"class.sh::TIntermNode"** %1681 to i64
  %1683 = sub i64 %1682, %1576
  %1684 = lshr i64 %1683, 3
  %1685 = add nuw nsw i64 %1684, 1
  %1686 = and i64 %1685, 7
  %1687 = icmp eq i64 %1686, 0
  br i1 %1687, label %1699, label %1688

1688:                                             ; preds = %1678, %1688
  %1689 = phi %"class.sh::TIntermNode"** [ %1692, %1688 ], [ %1679, %1678 ]
  %1690 = phi %"class.sh::TIntermNode"** [ %1693, %1688 ], [ %1680, %1678 ]
  %1691 = phi i64 [ %1697, %1688 ], [ %1686, %1678 ]
  %1692 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1689, i64 -1
  %1693 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1690, i64 -1
  %1694 = bitcast %"class.sh::TIntermNode"** %1693 to i64*
  %1695 = load i64, i64* %1694, align 8
  %1696 = bitcast %"class.sh::TIntermNode"** %1692 to i64*
  store i64 %1695, i64* %1696, align 8
  %1697 = add i64 %1691, -1
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1699, label %1688, !llvm.loop !59

1699:                                             ; preds = %1688, %1678
  %1700 = phi %"class.sh::TIntermNode"** [ undef, %1678 ], [ %1692, %1688 ]
  %1701 = phi %"class.sh::TIntermNode"** [ %1679, %1678 ], [ %1692, %1688 ]
  %1702 = phi %"class.sh::TIntermNode"** [ %1680, %1678 ], [ %1693, %1688 ]
  %1703 = icmp ult i64 %1683, 56
  br i1 %1703, label %1748, label %1704

1704:                                             ; preds = %1699, %1704
  %1705 = phi %"class.sh::TIntermNode"** [ %1742, %1704 ], [ %1701, %1699 ]
  %1706 = phi %"class.sh::TIntermNode"** [ %1743, %1704 ], [ %1702, %1699 ]
  %1707 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -1
  %1708 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -1
  %1709 = bitcast %"class.sh::TIntermNode"** %1708 to i64*
  %1710 = load i64, i64* %1709, align 8
  %1711 = bitcast %"class.sh::TIntermNode"** %1707 to i64*
  store i64 %1710, i64* %1711, align 8
  %1712 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -2
  %1713 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -2
  %1714 = bitcast %"class.sh::TIntermNode"** %1713 to i64*
  %1715 = load i64, i64* %1714, align 8
  %1716 = bitcast %"class.sh::TIntermNode"** %1712 to i64*
  store i64 %1715, i64* %1716, align 8
  %1717 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -3
  %1718 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -3
  %1719 = bitcast %"class.sh::TIntermNode"** %1718 to i64*
  %1720 = load i64, i64* %1719, align 8
  %1721 = bitcast %"class.sh::TIntermNode"** %1717 to i64*
  store i64 %1720, i64* %1721, align 8
  %1722 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -4
  %1723 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -4
  %1724 = bitcast %"class.sh::TIntermNode"** %1723 to i64*
  %1725 = load i64, i64* %1724, align 8
  %1726 = bitcast %"class.sh::TIntermNode"** %1722 to i64*
  store i64 %1725, i64* %1726, align 8
  %1727 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -5
  %1728 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -5
  %1729 = bitcast %"class.sh::TIntermNode"** %1728 to i64*
  %1730 = load i64, i64* %1729, align 8
  %1731 = bitcast %"class.sh::TIntermNode"** %1727 to i64*
  store i64 %1730, i64* %1731, align 8
  %1732 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -6
  %1733 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -6
  %1734 = bitcast %"class.sh::TIntermNode"** %1733 to i64*
  %1735 = load i64, i64* %1734, align 8
  %1736 = bitcast %"class.sh::TIntermNode"** %1732 to i64*
  store i64 %1735, i64* %1736, align 8
  %1737 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -7
  %1738 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -7
  %1739 = bitcast %"class.sh::TIntermNode"** %1738 to i64*
  %1740 = load i64, i64* %1739, align 8
  %1741 = bitcast %"class.sh::TIntermNode"** %1737 to i64*
  store i64 %1740, i64* %1741, align 8
  %1742 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1705, i64 -8
  %1743 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1706, i64 -8
  %1744 = bitcast %"class.sh::TIntermNode"** %1743 to i64*
  %1745 = load i64, i64* %1744, align 8
  %1746 = bitcast %"class.sh::TIntermNode"** %1742 to i64*
  store i64 %1745, i64* %1746, align 8
  %1747 = icmp eq %"class.sh::TIntermNode"** %1743, %1575
  br i1 %1747, label %1748, label %1704, !llvm.loop !60

1748:                                             ; preds = %1699, %1704, %1676, %1565
  %1749 = phi %"class.sh::TIntermNode"** [ %1568, %1565 ], [ %1602, %1676 ], [ %1700, %1699 ], [ %1742, %1704 ]
  %1750 = ptrtoint %"class.sh::TIntermNode"** %1749 to i64
  store i64 %1750, i64* %1541, align 8
  store i64 %1573, i64* %1540, align 8
  store i64 %1570, i64* %1550, align 8
  br label %1751

1751:                                             ; preds = %1748, %1533, %1511
  %1752 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 4
  %1753 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1752, align 8
  %1754 = icmp eq %"class.sh::TIntermTyped"* %1753, null
  br i1 %1754, label %1987, label %1755

1755:                                             ; preds = %1751
  %1756 = bitcast i8* %1513 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %1757 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %1756, align 8
  %1758 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %1757, i64 27
  %1759 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %1758, align 8
  %1760 = tail call %"class.sh::TVector"* %1759(%"class.sh::TIntermBlock"* %1514) #6
  %1761 = bitcast %"class.sh::TIntermTyped"** %1752 to i64*
  %1762 = load i64, i64* %1761, align 8
  %1763 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1760, i64 0, i32 0, i32 0, i32 1
  %1764 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1763, align 8
  %1765 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1760, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1766 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1765, align 8
  %1767 = icmp ult %"class.sh::TIntermNode"** %1764, %1766
  %1768 = ptrtoint %"class.sh::TIntermNode"** %1766 to i64
  br i1 %1767, label %1769, label %1774

1769:                                             ; preds = %1755
  %1770 = bitcast %"class.sh::TIntermNode"** %1764 to i64*
  store i64 %1762, i64* %1770, align 8
  %1771 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1764, i64 1
  %1772 = ptrtoint %"class.sh::TIntermNode"** %1771 to i64
  %1773 = bitcast %"class.sh::TIntermNode"*** %1763 to i64*
  store i64 %1772, i64* %1773, align 8
  br label %1987

1774:                                             ; preds = %1755
  %1775 = ptrtoint %"class.sh::TIntermNode"** %1764 to i64
  %1776 = bitcast %"class.sh::TIntermNode"*** %1763 to i64*
  %1777 = bitcast %"class.sh::TVector"* %1760 to i64*
  %1778 = load i64, i64* %1777, align 8
  %1779 = sub i64 %1775, %1778
  %1780 = ashr exact i64 %1779, 3
  %1781 = add nsw i64 %1780, 1
  %1782 = icmp ugt i64 %1781, 2305843009213693951
  br i1 %1782, label %1783, label %1785

1783:                                             ; preds = %1774
  %1784 = bitcast %"class.sh::TVector"* %1760 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1784) #7
  unreachable

1785:                                             ; preds = %1774
  %1786 = bitcast %"class.sh::TIntermNode"*** %1765 to i64*
  %1787 = sub i64 %1768, %1778
  %1788 = ashr exact i64 %1787, 3
  %1789 = icmp ult i64 %1788, 1152921504606846975
  br i1 %1789, label %1790, label %1795

1790:                                             ; preds = %1785
  %1791 = ashr exact i64 %1787, 2
  %1792 = icmp ult i64 %1791, %1781
  %1793 = select i1 %1792, i64 %1781, i64 %1791
  %1794 = icmp eq i64 %1793, 0
  br i1 %1794, label %1801, label %1795

1795:                                             ; preds = %1790, %1785
  %1796 = phi i64 [ %1793, %1790 ], [ 2305843009213693951, %1785 ]
  %1797 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %1798 = shl i64 %1796, 3
  %1799 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1797, i64 %1798) #6
  %1800 = bitcast i8* %1799 to %"class.sh::TIntermNode"**
  br label %1801

1801:                                             ; preds = %1795, %1790
  %1802 = phi i64 [ %1796, %1795 ], [ 0, %1790 ]
  %1803 = phi %"class.sh::TIntermNode"** [ %1800, %1795 ], [ null, %1790 ]
  %1804 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1803, i64 %1780
  %1805 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1803, i64 %1802
  %1806 = ptrtoint %"class.sh::TIntermNode"** %1805 to i64
  %1807 = bitcast %"class.sh::TIntermNode"** %1804 to i64*
  store i64 %1762, i64* %1807, align 8
  %1808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1804, i64 1
  %1809 = ptrtoint %"class.sh::TIntermNode"** %1808 to i64
  %1810 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1760, i64 0, i32 0, i32 0, i32 0
  %1811 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1810, align 8
  %1812 = ptrtoint %"class.sh::TIntermNode"** %1811 to i64
  %1813 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1763, align 8
  %1814 = icmp eq %"class.sh::TIntermNode"** %1813, %1811
  br i1 %1814, label %1984, label %1815

1815:                                             ; preds = %1801
  %1816 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 -1
  %1817 = ptrtoint %"class.sh::TIntermNode"** %1816 to i64
  %1818 = sub i64 %1817, %1812
  %1819 = lshr i64 %1818, 3
  %1820 = add nuw nsw i64 %1819, 1
  %1821 = icmp ult i64 %1820, 4
  br i1 %1821, label %1914, label %1822

1822:                                             ; preds = %1815
  %1823 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 -1
  %1824 = ptrtoint %"class.sh::TIntermNode"** %1823 to i64
  %1825 = sub i64 %1824, %1812
  %1826 = lshr i64 %1825, 3
  %1827 = xor i64 %1826, -1
  %1828 = add nsw i64 %1780, %1827
  %1829 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1803, i64 %1828
  %1830 = xor i64 %1826, -1
  %1831 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 %1830
  %1832 = icmp ult %"class.sh::TIntermNode"** %1829, %1813
  %1833 = icmp ult %"class.sh::TIntermNode"** %1831, %1804
  %1834 = and i1 %1832, %1833
  br i1 %1834, label %1914, label %1835

1835:                                             ; preds = %1822
  %1836 = and i64 %1820, 4611686018427387900
  %1837 = sub nsw i64 0, %1836
  %1838 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1804, i64 %1837
  %1839 = sub nsw i64 0, %1836
  %1840 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 %1839
  %1841 = add nsw i64 %1836, -4
  %1842 = lshr exact i64 %1841, 2
  %1843 = add nuw nsw i64 %1842, 1
  %1844 = and i64 %1843, 1
  %1845 = icmp eq i64 %1841, 0
  br i1 %1845, label %1890, label %1846

1846:                                             ; preds = %1835
  %1847 = sub nuw nsw i64 %1843, %1844
  %1848 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1804, i64 -1
  %1849 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 -1
  %1850 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1804, i64 -1
  %1851 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 -1
  br label %1852

1852:                                             ; preds = %1852, %1846
  %1853 = phi i64 [ 0, %1846 ], [ %1887, %1852 ]
  %1854 = phi i64 [ %1847, %1846 ], [ %1888, %1852 ]
  %1855 = sub i64 0, %1853
  %1856 = sub i64 0, %1853
  %1857 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1848, i64 %1855
  %1858 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1849, i64 %1856
  %1859 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1858, i64 -1
  %1860 = bitcast %"class.sh::TIntermNode"** %1859 to <2 x i64>*
  %1861 = load <2 x i64>, <2 x i64>* %1860, align 8, !alias.scope !61
  %1862 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1858, i64 -2
  %1863 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1862, i64 -1
  %1864 = bitcast %"class.sh::TIntermNode"** %1863 to <2 x i64>*
  %1865 = load <2 x i64>, <2 x i64>* %1864, align 8, !alias.scope !61
  %1866 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1857, i64 -1
  %1867 = bitcast %"class.sh::TIntermNode"** %1866 to <2 x i64>*
  store <2 x i64> %1861, <2 x i64>* %1867, align 8, !alias.scope !64, !noalias !61
  %1868 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1857, i64 -2
  %1869 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1868, i64 -1
  %1870 = bitcast %"class.sh::TIntermNode"** %1869 to <2 x i64>*
  store <2 x i64> %1865, <2 x i64>* %1870, align 8, !alias.scope !64, !noalias !61
  %1871 = sub nuw nsw i64 -4, %1853
  %1872 = sub nuw nsw i64 -4, %1853
  %1873 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1850, i64 %1871
  %1874 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1851, i64 %1872
  %1875 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1874, i64 -1
  %1876 = bitcast %"class.sh::TIntermNode"** %1875 to <2 x i64>*
  %1877 = load <2 x i64>, <2 x i64>* %1876, align 8, !alias.scope !61
  %1878 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1874, i64 -2
  %1879 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1878, i64 -1
  %1880 = bitcast %"class.sh::TIntermNode"** %1879 to <2 x i64>*
  %1881 = load <2 x i64>, <2 x i64>* %1880, align 8, !alias.scope !61
  %1882 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1873, i64 -1
  %1883 = bitcast %"class.sh::TIntermNode"** %1882 to <2 x i64>*
  store <2 x i64> %1877, <2 x i64>* %1883, align 8, !alias.scope !64, !noalias !61
  %1884 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1873, i64 -2
  %1885 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1884, i64 -1
  %1886 = bitcast %"class.sh::TIntermNode"** %1885 to <2 x i64>*
  store <2 x i64> %1881, <2 x i64>* %1886, align 8, !alias.scope !64, !noalias !61
  %1887 = add i64 %1853, 8
  %1888 = add i64 %1854, -2
  %1889 = icmp eq i64 %1888, 0
  br i1 %1889, label %1890, label %1852, !llvm.loop !66

1890:                                             ; preds = %1852, %1835
  %1891 = phi i64 [ 0, %1835 ], [ %1887, %1852 ]
  %1892 = icmp eq i64 %1844, 0
  br i1 %1892, label %1912, label %1893

1893:                                             ; preds = %1890
  %1894 = sub i64 0, %1891
  %1895 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1804, i64 -1
  %1896 = sub i64 0, %1891
  %1897 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1813, i64 -1
  %1898 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1895, i64 %1894
  %1899 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1897, i64 %1896
  %1900 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1899, i64 -1
  %1901 = bitcast %"class.sh::TIntermNode"** %1900 to <2 x i64>*
  %1902 = load <2 x i64>, <2 x i64>* %1901, align 8, !alias.scope !61
  %1903 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1899, i64 -2
  %1904 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1903, i64 -1
  %1905 = bitcast %"class.sh::TIntermNode"** %1904 to <2 x i64>*
  %1906 = load <2 x i64>, <2 x i64>* %1905, align 8, !alias.scope !61
  %1907 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1898, i64 -1
  %1908 = bitcast %"class.sh::TIntermNode"** %1907 to <2 x i64>*
  store <2 x i64> %1902, <2 x i64>* %1908, align 8, !alias.scope !64, !noalias !61
  %1909 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1898, i64 -2
  %1910 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1909, i64 -1
  %1911 = bitcast %"class.sh::TIntermNode"** %1910 to <2 x i64>*
  store <2 x i64> %1906, <2 x i64>* %1911, align 8, !alias.scope !64, !noalias !61
  br label %1912

1912:                                             ; preds = %1890, %1893
  %1913 = icmp eq i64 %1820, %1836
  br i1 %1913, label %1984, label %1914

1914:                                             ; preds = %1912, %1822, %1815
  %1915 = phi %"class.sh::TIntermNode"** [ %1804, %1822 ], [ %1804, %1815 ], [ %1838, %1912 ]
  %1916 = phi %"class.sh::TIntermNode"** [ %1813, %1822 ], [ %1813, %1815 ], [ %1840, %1912 ]
  %1917 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1916, i64 -1
  %1918 = ptrtoint %"class.sh::TIntermNode"** %1917 to i64
  %1919 = sub i64 %1918, %1812
  %1920 = lshr i64 %1919, 3
  %1921 = add nuw nsw i64 %1920, 1
  %1922 = and i64 %1921, 7
  %1923 = icmp eq i64 %1922, 0
  br i1 %1923, label %1935, label %1924

1924:                                             ; preds = %1914, %1924
  %1925 = phi %"class.sh::TIntermNode"** [ %1928, %1924 ], [ %1915, %1914 ]
  %1926 = phi %"class.sh::TIntermNode"** [ %1929, %1924 ], [ %1916, %1914 ]
  %1927 = phi i64 [ %1933, %1924 ], [ %1922, %1914 ]
  %1928 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1925, i64 -1
  %1929 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1926, i64 -1
  %1930 = bitcast %"class.sh::TIntermNode"** %1929 to i64*
  %1931 = load i64, i64* %1930, align 8
  %1932 = bitcast %"class.sh::TIntermNode"** %1928 to i64*
  store i64 %1931, i64* %1932, align 8
  %1933 = add i64 %1927, -1
  %1934 = icmp eq i64 %1933, 0
  br i1 %1934, label %1935, label %1924, !llvm.loop !67

1935:                                             ; preds = %1924, %1914
  %1936 = phi %"class.sh::TIntermNode"** [ undef, %1914 ], [ %1928, %1924 ]
  %1937 = phi %"class.sh::TIntermNode"** [ %1915, %1914 ], [ %1928, %1924 ]
  %1938 = phi %"class.sh::TIntermNode"** [ %1916, %1914 ], [ %1929, %1924 ]
  %1939 = icmp ult i64 %1919, 56
  br i1 %1939, label %1984, label %1940

1940:                                             ; preds = %1935, %1940
  %1941 = phi %"class.sh::TIntermNode"** [ %1978, %1940 ], [ %1937, %1935 ]
  %1942 = phi %"class.sh::TIntermNode"** [ %1979, %1940 ], [ %1938, %1935 ]
  %1943 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -1
  %1944 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -1
  %1945 = bitcast %"class.sh::TIntermNode"** %1944 to i64*
  %1946 = load i64, i64* %1945, align 8
  %1947 = bitcast %"class.sh::TIntermNode"** %1943 to i64*
  store i64 %1946, i64* %1947, align 8
  %1948 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -2
  %1949 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -2
  %1950 = bitcast %"class.sh::TIntermNode"** %1949 to i64*
  %1951 = load i64, i64* %1950, align 8
  %1952 = bitcast %"class.sh::TIntermNode"** %1948 to i64*
  store i64 %1951, i64* %1952, align 8
  %1953 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -3
  %1954 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -3
  %1955 = bitcast %"class.sh::TIntermNode"** %1954 to i64*
  %1956 = load i64, i64* %1955, align 8
  %1957 = bitcast %"class.sh::TIntermNode"** %1953 to i64*
  store i64 %1956, i64* %1957, align 8
  %1958 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -4
  %1959 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -4
  %1960 = bitcast %"class.sh::TIntermNode"** %1959 to i64*
  %1961 = load i64, i64* %1960, align 8
  %1962 = bitcast %"class.sh::TIntermNode"** %1958 to i64*
  store i64 %1961, i64* %1962, align 8
  %1963 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -5
  %1964 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -5
  %1965 = bitcast %"class.sh::TIntermNode"** %1964 to i64*
  %1966 = load i64, i64* %1965, align 8
  %1967 = bitcast %"class.sh::TIntermNode"** %1963 to i64*
  store i64 %1966, i64* %1967, align 8
  %1968 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -6
  %1969 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -6
  %1970 = bitcast %"class.sh::TIntermNode"** %1969 to i64*
  %1971 = load i64, i64* %1970, align 8
  %1972 = bitcast %"class.sh::TIntermNode"** %1968 to i64*
  store i64 %1971, i64* %1972, align 8
  %1973 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -7
  %1974 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -7
  %1975 = bitcast %"class.sh::TIntermNode"** %1974 to i64*
  %1976 = load i64, i64* %1975, align 8
  %1977 = bitcast %"class.sh::TIntermNode"** %1973 to i64*
  store i64 %1976, i64* %1977, align 8
  %1978 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1941, i64 -8
  %1979 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1942, i64 -8
  %1980 = bitcast %"class.sh::TIntermNode"** %1979 to i64*
  %1981 = load i64, i64* %1980, align 8
  %1982 = bitcast %"class.sh::TIntermNode"** %1978 to i64*
  store i64 %1981, i64* %1982, align 8
  %1983 = icmp eq %"class.sh::TIntermNode"** %1979, %1811
  br i1 %1983, label %1984, label %1940, !llvm.loop !68

1984:                                             ; preds = %1935, %1940, %1912, %1801
  %1985 = phi %"class.sh::TIntermNode"** [ %1804, %1801 ], [ %1838, %1912 ], [ %1936, %1935 ], [ %1978, %1940 ]
  %1986 = ptrtoint %"class.sh::TIntermNode"** %1985 to i64
  store i64 %1986, i64* %1777, align 8
  store i64 %1809, i64* %1776, align 8
  store i64 %1806, i64* %1786, align 8
  br label %1987

1987:                                             ; preds = %1984, %1769, %1751
  %1988 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1271, align 8
  %1989 = icmp eq %"class.sh::TIntermTyped"* %1988, null
  br i1 %1989, label %2228, label %1990

1990:                                             ; preds = %1987
  %1991 = bitcast i8* %1513 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %1992 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %1991, align 8
  %1993 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %1992, i64 27
  %1994 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %1993, align 8
  %1995 = tail call %"class.sh::TVector"* %1994(%"class.sh::TIntermBlock"* %1514) #6
  %1996 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1271, align 8
  %1997 = bitcast %"class.sh::TIntermTyped"* %1996 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %1998 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %1997, align 8
  %1999 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1998, i64 23
  %2000 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1999, align 8
  %2001 = tail call %"class.sh::TIntermTyped"* %2000(%"class.sh::TIntermTyped"* %1996) #6
  %2002 = tail call %"class.sh::TIntermBinary"* @_ZN2sh24CreateTempAssignmentNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %47, %"class.sh::TIntermTyped"* %2001) #6
  %2003 = ptrtoint %"class.sh::TIntermBinary"* %2002 to i64
  %2004 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1995, i64 0, i32 0, i32 0, i32 1
  %2005 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2004, align 8
  %2006 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1995, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2007 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2006, align 8
  %2008 = icmp ult %"class.sh::TIntermNode"** %2005, %2007
  %2009 = ptrtoint %"class.sh::TIntermNode"** %2007 to i64
  br i1 %2008, label %2010, label %2015

2010:                                             ; preds = %1990
  %2011 = bitcast %"class.sh::TIntermNode"** %2005 to i64*
  store i64 %2003, i64* %2011, align 8
  %2012 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2005, i64 1
  %2013 = ptrtoint %"class.sh::TIntermNode"** %2012 to i64
  %2014 = bitcast %"class.sh::TIntermNode"*** %2004 to i64*
  store i64 %2013, i64* %2014, align 8
  br label %2228

2015:                                             ; preds = %1990
  %2016 = ptrtoint %"class.sh::TIntermNode"** %2005 to i64
  %2017 = bitcast %"class.sh::TIntermNode"*** %2004 to i64*
  %2018 = bitcast %"class.sh::TVector"* %1995 to i64*
  %2019 = load i64, i64* %2018, align 8
  %2020 = sub i64 %2016, %2019
  %2021 = ashr exact i64 %2020, 3
  %2022 = add nsw i64 %2021, 1
  %2023 = icmp ugt i64 %2022, 2305843009213693951
  br i1 %2023, label %2024, label %2026

2024:                                             ; preds = %2015
  %2025 = bitcast %"class.sh::TVector"* %1995 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2025) #7
  unreachable

2026:                                             ; preds = %2015
  %2027 = bitcast %"class.sh::TIntermNode"*** %2006 to i64*
  %2028 = sub i64 %2009, %2019
  %2029 = ashr exact i64 %2028, 3
  %2030 = icmp ult i64 %2029, 1152921504606846975
  br i1 %2030, label %2031, label %2036

2031:                                             ; preds = %2026
  %2032 = ashr exact i64 %2028, 2
  %2033 = icmp ult i64 %2032, %2022
  %2034 = select i1 %2033, i64 %2022, i64 %2032
  %2035 = icmp eq i64 %2034, 0
  br i1 %2035, label %2042, label %2036

2036:                                             ; preds = %2031, %2026
  %2037 = phi i64 [ %2034, %2031 ], [ 2305843009213693951, %2026 ]
  %2038 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %2039 = shl i64 %2037, 3
  %2040 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2038, i64 %2039) #6
  %2041 = bitcast i8* %2040 to %"class.sh::TIntermNode"**
  br label %2042

2042:                                             ; preds = %2036, %2031
  %2043 = phi i64 [ %2037, %2036 ], [ 0, %2031 ]
  %2044 = phi %"class.sh::TIntermNode"** [ %2041, %2036 ], [ null, %2031 ]
  %2045 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2044, i64 %2021
  %2046 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2044, i64 %2043
  %2047 = ptrtoint %"class.sh::TIntermNode"** %2046 to i64
  %2048 = bitcast %"class.sh::TIntermNode"** %2045 to i64*
  store i64 %2003, i64* %2048, align 8
  %2049 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2045, i64 1
  %2050 = ptrtoint %"class.sh::TIntermNode"** %2049 to i64
  %2051 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1995, i64 0, i32 0, i32 0, i32 0
  %2052 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2051, align 8
  %2053 = ptrtoint %"class.sh::TIntermNode"** %2052 to i64
  %2054 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2004, align 8
  %2055 = icmp eq %"class.sh::TIntermNode"** %2054, %2052
  br i1 %2055, label %2225, label %2056

2056:                                             ; preds = %2042
  %2057 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 -1
  %2058 = ptrtoint %"class.sh::TIntermNode"** %2057 to i64
  %2059 = sub i64 %2058, %2053
  %2060 = lshr i64 %2059, 3
  %2061 = add nuw nsw i64 %2060, 1
  %2062 = icmp ult i64 %2061, 4
  br i1 %2062, label %2155, label %2063

2063:                                             ; preds = %2056
  %2064 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 -1
  %2065 = ptrtoint %"class.sh::TIntermNode"** %2064 to i64
  %2066 = sub i64 %2065, %2053
  %2067 = lshr i64 %2066, 3
  %2068 = xor i64 %2067, -1
  %2069 = add nsw i64 %2021, %2068
  %2070 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2044, i64 %2069
  %2071 = xor i64 %2067, -1
  %2072 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 %2071
  %2073 = icmp ult %"class.sh::TIntermNode"** %2070, %2054
  %2074 = icmp ult %"class.sh::TIntermNode"** %2072, %2045
  %2075 = and i1 %2073, %2074
  br i1 %2075, label %2155, label %2076

2076:                                             ; preds = %2063
  %2077 = and i64 %2061, 4611686018427387900
  %2078 = sub nsw i64 0, %2077
  %2079 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2045, i64 %2078
  %2080 = sub nsw i64 0, %2077
  %2081 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 %2080
  %2082 = add nsw i64 %2077, -4
  %2083 = lshr exact i64 %2082, 2
  %2084 = add nuw nsw i64 %2083, 1
  %2085 = and i64 %2084, 1
  %2086 = icmp eq i64 %2082, 0
  br i1 %2086, label %2131, label %2087

2087:                                             ; preds = %2076
  %2088 = sub nuw nsw i64 %2084, %2085
  %2089 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2045, i64 -1
  %2090 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 -1
  %2091 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2045, i64 -1
  %2092 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 -1
  br label %2093

2093:                                             ; preds = %2093, %2087
  %2094 = phi i64 [ 0, %2087 ], [ %2128, %2093 ]
  %2095 = phi i64 [ %2088, %2087 ], [ %2129, %2093 ]
  %2096 = sub i64 0, %2094
  %2097 = sub i64 0, %2094
  %2098 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2089, i64 %2096
  %2099 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2090, i64 %2097
  %2100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2099, i64 -1
  %2101 = bitcast %"class.sh::TIntermNode"** %2100 to <2 x i64>*
  %2102 = load <2 x i64>, <2 x i64>* %2101, align 8, !alias.scope !69
  %2103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2099, i64 -2
  %2104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2103, i64 -1
  %2105 = bitcast %"class.sh::TIntermNode"** %2104 to <2 x i64>*
  %2106 = load <2 x i64>, <2 x i64>* %2105, align 8, !alias.scope !69
  %2107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2098, i64 -1
  %2108 = bitcast %"class.sh::TIntermNode"** %2107 to <2 x i64>*
  store <2 x i64> %2102, <2 x i64>* %2108, align 8, !alias.scope !72, !noalias !69
  %2109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2098, i64 -2
  %2110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2109, i64 -1
  %2111 = bitcast %"class.sh::TIntermNode"** %2110 to <2 x i64>*
  store <2 x i64> %2106, <2 x i64>* %2111, align 8, !alias.scope !72, !noalias !69
  %2112 = sub nuw nsw i64 -4, %2094
  %2113 = sub nuw nsw i64 -4, %2094
  %2114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2091, i64 %2112
  %2115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2092, i64 %2113
  %2116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2115, i64 -1
  %2117 = bitcast %"class.sh::TIntermNode"** %2116 to <2 x i64>*
  %2118 = load <2 x i64>, <2 x i64>* %2117, align 8, !alias.scope !69
  %2119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2115, i64 -2
  %2120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2119, i64 -1
  %2121 = bitcast %"class.sh::TIntermNode"** %2120 to <2 x i64>*
  %2122 = load <2 x i64>, <2 x i64>* %2121, align 8, !alias.scope !69
  %2123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2114, i64 -1
  %2124 = bitcast %"class.sh::TIntermNode"** %2123 to <2 x i64>*
  store <2 x i64> %2118, <2 x i64>* %2124, align 8, !alias.scope !72, !noalias !69
  %2125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2114, i64 -2
  %2126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2125, i64 -1
  %2127 = bitcast %"class.sh::TIntermNode"** %2126 to <2 x i64>*
  store <2 x i64> %2122, <2 x i64>* %2127, align 8, !alias.scope !72, !noalias !69
  %2128 = add i64 %2094, 8
  %2129 = add i64 %2095, -2
  %2130 = icmp eq i64 %2129, 0
  br i1 %2130, label %2131, label %2093, !llvm.loop !74

2131:                                             ; preds = %2093, %2076
  %2132 = phi i64 [ 0, %2076 ], [ %2128, %2093 ]
  %2133 = icmp eq i64 %2085, 0
  br i1 %2133, label %2153, label %2134

2134:                                             ; preds = %2131
  %2135 = sub i64 0, %2132
  %2136 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2045, i64 -1
  %2137 = sub i64 0, %2132
  %2138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2054, i64 -1
  %2139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2136, i64 %2135
  %2140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2138, i64 %2137
  %2141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2140, i64 -1
  %2142 = bitcast %"class.sh::TIntermNode"** %2141 to <2 x i64>*
  %2143 = load <2 x i64>, <2 x i64>* %2142, align 8, !alias.scope !69
  %2144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2140, i64 -2
  %2145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2144, i64 -1
  %2146 = bitcast %"class.sh::TIntermNode"** %2145 to <2 x i64>*
  %2147 = load <2 x i64>, <2 x i64>* %2146, align 8, !alias.scope !69
  %2148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2139, i64 -1
  %2149 = bitcast %"class.sh::TIntermNode"** %2148 to <2 x i64>*
  store <2 x i64> %2143, <2 x i64>* %2149, align 8, !alias.scope !72, !noalias !69
  %2150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2139, i64 -2
  %2151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2150, i64 -1
  %2152 = bitcast %"class.sh::TIntermNode"** %2151 to <2 x i64>*
  store <2 x i64> %2147, <2 x i64>* %2152, align 8, !alias.scope !72, !noalias !69
  br label %2153

2153:                                             ; preds = %2131, %2134
  %2154 = icmp eq i64 %2061, %2077
  br i1 %2154, label %2225, label %2155

2155:                                             ; preds = %2153, %2063, %2056
  %2156 = phi %"class.sh::TIntermNode"** [ %2045, %2063 ], [ %2045, %2056 ], [ %2079, %2153 ]
  %2157 = phi %"class.sh::TIntermNode"** [ %2054, %2063 ], [ %2054, %2056 ], [ %2081, %2153 ]
  %2158 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2157, i64 -1
  %2159 = ptrtoint %"class.sh::TIntermNode"** %2158 to i64
  %2160 = sub i64 %2159, %2053
  %2161 = lshr i64 %2160, 3
  %2162 = add nuw nsw i64 %2161, 1
  %2163 = and i64 %2162, 7
  %2164 = icmp eq i64 %2163, 0
  br i1 %2164, label %2176, label %2165

2165:                                             ; preds = %2155, %2165
  %2166 = phi %"class.sh::TIntermNode"** [ %2169, %2165 ], [ %2156, %2155 ]
  %2167 = phi %"class.sh::TIntermNode"** [ %2170, %2165 ], [ %2157, %2155 ]
  %2168 = phi i64 [ %2174, %2165 ], [ %2163, %2155 ]
  %2169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2166, i64 -1
  %2170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2167, i64 -1
  %2171 = bitcast %"class.sh::TIntermNode"** %2170 to i64*
  %2172 = load i64, i64* %2171, align 8
  %2173 = bitcast %"class.sh::TIntermNode"** %2169 to i64*
  store i64 %2172, i64* %2173, align 8
  %2174 = add i64 %2168, -1
  %2175 = icmp eq i64 %2174, 0
  br i1 %2175, label %2176, label %2165, !llvm.loop !75

2176:                                             ; preds = %2165, %2155
  %2177 = phi %"class.sh::TIntermNode"** [ undef, %2155 ], [ %2169, %2165 ]
  %2178 = phi %"class.sh::TIntermNode"** [ %2156, %2155 ], [ %2169, %2165 ]
  %2179 = phi %"class.sh::TIntermNode"** [ %2157, %2155 ], [ %2170, %2165 ]
  %2180 = icmp ult i64 %2160, 56
  br i1 %2180, label %2225, label %2181

2181:                                             ; preds = %2176, %2181
  %2182 = phi %"class.sh::TIntermNode"** [ %2219, %2181 ], [ %2178, %2176 ]
  %2183 = phi %"class.sh::TIntermNode"** [ %2220, %2181 ], [ %2179, %2176 ]
  %2184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -1
  %2185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -1
  %2186 = bitcast %"class.sh::TIntermNode"** %2185 to i64*
  %2187 = load i64, i64* %2186, align 8
  %2188 = bitcast %"class.sh::TIntermNode"** %2184 to i64*
  store i64 %2187, i64* %2188, align 8
  %2189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -2
  %2190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -2
  %2191 = bitcast %"class.sh::TIntermNode"** %2190 to i64*
  %2192 = load i64, i64* %2191, align 8
  %2193 = bitcast %"class.sh::TIntermNode"** %2189 to i64*
  store i64 %2192, i64* %2193, align 8
  %2194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -3
  %2195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -3
  %2196 = bitcast %"class.sh::TIntermNode"** %2195 to i64*
  %2197 = load i64, i64* %2196, align 8
  %2198 = bitcast %"class.sh::TIntermNode"** %2194 to i64*
  store i64 %2197, i64* %2198, align 8
  %2199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -4
  %2200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -4
  %2201 = bitcast %"class.sh::TIntermNode"** %2200 to i64*
  %2202 = load i64, i64* %2201, align 8
  %2203 = bitcast %"class.sh::TIntermNode"** %2199 to i64*
  store i64 %2202, i64* %2203, align 8
  %2204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -5
  %2205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -5
  %2206 = bitcast %"class.sh::TIntermNode"** %2205 to i64*
  %2207 = load i64, i64* %2206, align 8
  %2208 = bitcast %"class.sh::TIntermNode"** %2204 to i64*
  store i64 %2207, i64* %2208, align 8
  %2209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -6
  %2210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -6
  %2211 = bitcast %"class.sh::TIntermNode"** %2210 to i64*
  %2212 = load i64, i64* %2211, align 8
  %2213 = bitcast %"class.sh::TIntermNode"** %2209 to i64*
  store i64 %2212, i64* %2213, align 8
  %2214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -7
  %2215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -7
  %2216 = bitcast %"class.sh::TIntermNode"** %2215 to i64*
  %2217 = load i64, i64* %2216, align 8
  %2218 = bitcast %"class.sh::TIntermNode"** %2214 to i64*
  store i64 %2217, i64* %2218, align 8
  %2219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -8
  %2220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2183, i64 -8
  %2221 = bitcast %"class.sh::TIntermNode"** %2220 to i64*
  %2222 = load i64, i64* %2221, align 8
  %2223 = bitcast %"class.sh::TIntermNode"** %2219 to i64*
  store i64 %2222, i64* %2223, align 8
  %2224 = icmp eq %"class.sh::TIntermNode"** %2220, %2052
  br i1 %2224, label %2225, label %2181, !llvm.loop !76

2225:                                             ; preds = %2176, %2181, %2153, %2042
  %2226 = phi %"class.sh::TIntermNode"** [ %2045, %2042 ], [ %2079, %2153 ], [ %2177, %2176 ], [ %2219, %2181 ]
  %2227 = ptrtoint %"class.sh::TIntermNode"** %2226 to i64
  store i64 %2227, i64* %2018, align 8
  store i64 %2050, i64* %2017, align 8
  store i64 %2047, i64* %2027, align 8
  br label %2228

2228:                                             ; preds = %2225, %2010, %1987
  %2229 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %2230 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2229, i64 64) #6
  %2231 = bitcast i8* %2230 to %"class.sh::TIntermLoop"*
  %2232 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %47) #6
  %2233 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %2232, i64 0, i32 0
  tail call void @_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"* %2231, i32 1, %"class.sh::TIntermNode"* null, %"class.sh::TIntermTyped"* %2233, %"class.sh::TIntermTyped"* null, %"class.sh::TIntermBlock"* %1514) #6
  %2234 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %1039, align 8
  %2235 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %2234, i64 27
  %2236 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %2235, align 8
  %2237 = tail call %"class.sh::TVector"* %2236(%"class.sh::TIntermBlock"* %1033) #6
  %2238 = ptrtoint i8* %2230 to i64
  %2239 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2237, i64 0, i32 0, i32 0, i32 1
  %2240 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2239, align 8
  %2241 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2237, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2242 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2241, align 8
  %2243 = icmp ult %"class.sh::TIntermNode"** %2240, %2242
  %2244 = ptrtoint %"class.sh::TIntermNode"** %2242 to i64
  br i1 %2243, label %2245, label %2250

2245:                                             ; preds = %2228
  %2246 = bitcast %"class.sh::TIntermNode"** %2240 to i64*
  store i64 %2238, i64* %2246, align 8
  %2247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2240, i64 1
  %2248 = ptrtoint %"class.sh::TIntermNode"** %2247 to i64
  %2249 = bitcast %"class.sh::TIntermNode"*** %2239 to i64*
  store i64 %2248, i64* %2249, align 8
  br label %2463

2250:                                             ; preds = %2228
  %2251 = ptrtoint %"class.sh::TIntermNode"** %2240 to i64
  %2252 = bitcast %"class.sh::TIntermNode"*** %2239 to i64*
  %2253 = bitcast %"class.sh::TVector"* %2237 to i64*
  %2254 = load i64, i64* %2253, align 8
  %2255 = sub i64 %2251, %2254
  %2256 = ashr exact i64 %2255, 3
  %2257 = add nsw i64 %2256, 1
  %2258 = icmp ugt i64 %2257, 2305843009213693951
  br i1 %2258, label %2259, label %2261

2259:                                             ; preds = %2250
  %2260 = bitcast %"class.sh::TVector"* %2237 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2260) #7
  unreachable

2261:                                             ; preds = %2250
  %2262 = bitcast %"class.sh::TIntermNode"*** %2241 to i64*
  %2263 = sub i64 %2244, %2254
  %2264 = ashr exact i64 %2263, 3
  %2265 = icmp ult i64 %2264, 1152921504606846975
  br i1 %2265, label %2266, label %2271

2266:                                             ; preds = %2261
  %2267 = ashr exact i64 %2263, 2
  %2268 = icmp ult i64 %2267, %2257
  %2269 = select i1 %2268, i64 %2257, i64 %2267
  %2270 = icmp eq i64 %2269, 0
  br i1 %2270, label %2277, label %2271

2271:                                             ; preds = %2266, %2261
  %2272 = phi i64 [ %2269, %2266 ], [ 2305843009213693951, %2261 ]
  %2273 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %2274 = shl i64 %2272, 3
  %2275 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2273, i64 %2274) #6
  %2276 = bitcast i8* %2275 to %"class.sh::TIntermNode"**
  br label %2277

2277:                                             ; preds = %2271, %2266
  %2278 = phi i64 [ %2272, %2271 ], [ 0, %2266 ]
  %2279 = phi %"class.sh::TIntermNode"** [ %2276, %2271 ], [ null, %2266 ]
  %2280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2279, i64 %2256
  %2281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2279, i64 %2278
  %2282 = ptrtoint %"class.sh::TIntermNode"** %2281 to i64
  %2283 = bitcast %"class.sh::TIntermNode"** %2280 to i64*
  store i64 %2238, i64* %2283, align 8
  %2284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2280, i64 1
  %2285 = ptrtoint %"class.sh::TIntermNode"** %2284 to i64
  %2286 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2237, i64 0, i32 0, i32 0, i32 0
  %2287 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2286, align 8
  %2288 = ptrtoint %"class.sh::TIntermNode"** %2287 to i64
  %2289 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2239, align 8
  %2290 = icmp eq %"class.sh::TIntermNode"** %2289, %2287
  br i1 %2290, label %2460, label %2291

2291:                                             ; preds = %2277
  %2292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 -1
  %2293 = ptrtoint %"class.sh::TIntermNode"** %2292 to i64
  %2294 = sub i64 %2293, %2288
  %2295 = lshr i64 %2294, 3
  %2296 = add nuw nsw i64 %2295, 1
  %2297 = icmp ult i64 %2296, 4
  br i1 %2297, label %2390, label %2298

2298:                                             ; preds = %2291
  %2299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 -1
  %2300 = ptrtoint %"class.sh::TIntermNode"** %2299 to i64
  %2301 = sub i64 %2300, %2288
  %2302 = lshr i64 %2301, 3
  %2303 = xor i64 %2302, -1
  %2304 = add nsw i64 %2256, %2303
  %2305 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2279, i64 %2304
  %2306 = xor i64 %2302, -1
  %2307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 %2306
  %2308 = icmp ult %"class.sh::TIntermNode"** %2305, %2289
  %2309 = icmp ult %"class.sh::TIntermNode"** %2307, %2280
  %2310 = and i1 %2308, %2309
  br i1 %2310, label %2390, label %2311

2311:                                             ; preds = %2298
  %2312 = and i64 %2296, 4611686018427387900
  %2313 = sub nsw i64 0, %2312
  %2314 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2280, i64 %2313
  %2315 = sub nsw i64 0, %2312
  %2316 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 %2315
  %2317 = add nsw i64 %2312, -4
  %2318 = lshr exact i64 %2317, 2
  %2319 = add nuw nsw i64 %2318, 1
  %2320 = and i64 %2319, 1
  %2321 = icmp eq i64 %2317, 0
  br i1 %2321, label %2368, label %2322

2322:                                             ; preds = %2311
  %2323 = sub nuw nsw i64 %2319, %2320
  %2324 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2280, i64 -1
  %2325 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 -1
  %2326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2280, i64 -1
  %2327 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 -1
  br label %2328

2328:                                             ; preds = %2328, %2322
  %2329 = phi i64 [ 0, %2322 ], [ %2363, %2328 ]
  %2330 = phi i64 [ %2323, %2322 ], [ %2364, %2328 ]
  %2331 = sub i64 0, %2329
  %2332 = sub i64 0, %2329
  %2333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2324, i64 %2331
  %2334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2325, i64 %2332
  %2335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2334, i64 -1
  %2336 = bitcast %"class.sh::TIntermNode"** %2335 to <2 x i64>*
  %2337 = load <2 x i64>, <2 x i64>* %2336, align 8, !alias.scope !77
  %2338 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2334, i64 -2
  %2339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2338, i64 -1
  %2340 = bitcast %"class.sh::TIntermNode"** %2339 to <2 x i64>*
  %2341 = load <2 x i64>, <2 x i64>* %2340, align 8, !alias.scope !77
  %2342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2333, i64 -1
  %2343 = bitcast %"class.sh::TIntermNode"** %2342 to <2 x i64>*
  store <2 x i64> %2337, <2 x i64>* %2343, align 8, !alias.scope !80, !noalias !77
  %2344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2333, i64 -2
  %2345 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2344, i64 -1
  %2346 = bitcast %"class.sh::TIntermNode"** %2345 to <2 x i64>*
  store <2 x i64> %2341, <2 x i64>* %2346, align 8, !alias.scope !80, !noalias !77
  %2347 = sub nuw nsw i64 -4, %2329
  %2348 = sub nuw nsw i64 -4, %2329
  %2349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2326, i64 %2347
  %2350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2327, i64 %2348
  %2351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2350, i64 -1
  %2352 = bitcast %"class.sh::TIntermNode"** %2351 to <2 x i64>*
  %2353 = load <2 x i64>, <2 x i64>* %2352, align 8, !alias.scope !77
  %2354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2350, i64 -2
  %2355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2354, i64 -1
  %2356 = bitcast %"class.sh::TIntermNode"** %2355 to <2 x i64>*
  %2357 = load <2 x i64>, <2 x i64>* %2356, align 8, !alias.scope !77
  %2358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2349, i64 -1
  %2359 = bitcast %"class.sh::TIntermNode"** %2358 to <2 x i64>*
  store <2 x i64> %2353, <2 x i64>* %2359, align 8, !alias.scope !80, !noalias !77
  %2360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2349, i64 -2
  %2361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2360, i64 -1
  %2362 = bitcast %"class.sh::TIntermNode"** %2361 to <2 x i64>*
  store <2 x i64> %2357, <2 x i64>* %2362, align 8, !alias.scope !80, !noalias !77
  %2363 = add i64 %2329, 8
  %2364 = add i64 %2330, -2
  %2365 = icmp eq i64 %2364, 0
  br i1 %2365, label %2366, label %2328, !llvm.loop !82

2366:                                             ; preds = %2328
  %2367 = sub nuw nsw i64 -8, %2329
  br label %2368

2368:                                             ; preds = %2366, %2311
  %2369 = phi i64 [ 0, %2311 ], [ %2367, %2366 ]
  %2370 = icmp eq i64 %2320, 0
  br i1 %2370, label %2388, label %2371

2371:                                             ; preds = %2368
  %2372 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2280, i64 -1
  %2373 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2289, i64 -1
  %2374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2372, i64 %2369
  %2375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2373, i64 %2369
  %2376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2375, i64 -1
  %2377 = bitcast %"class.sh::TIntermNode"** %2376 to <2 x i64>*
  %2378 = load <2 x i64>, <2 x i64>* %2377, align 8, !alias.scope !77
  %2379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2375, i64 -2
  %2380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2379, i64 -1
  %2381 = bitcast %"class.sh::TIntermNode"** %2380 to <2 x i64>*
  %2382 = load <2 x i64>, <2 x i64>* %2381, align 8, !alias.scope !77
  %2383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2374, i64 -1
  %2384 = bitcast %"class.sh::TIntermNode"** %2383 to <2 x i64>*
  store <2 x i64> %2378, <2 x i64>* %2384, align 8, !alias.scope !80, !noalias !77
  %2385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2374, i64 -2
  %2386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2385, i64 -1
  %2387 = bitcast %"class.sh::TIntermNode"** %2386 to <2 x i64>*
  store <2 x i64> %2382, <2 x i64>* %2387, align 8, !alias.scope !80, !noalias !77
  br label %2388

2388:                                             ; preds = %2368, %2371
  %2389 = icmp eq i64 %2296, %2312
  br i1 %2389, label %2460, label %2390

2390:                                             ; preds = %2388, %2298, %2291
  %2391 = phi %"class.sh::TIntermNode"** [ %2280, %2298 ], [ %2280, %2291 ], [ %2314, %2388 ]
  %2392 = phi %"class.sh::TIntermNode"** [ %2289, %2298 ], [ %2289, %2291 ], [ %2316, %2388 ]
  %2393 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2392, i64 -1
  %2394 = ptrtoint %"class.sh::TIntermNode"** %2393 to i64
  %2395 = sub i64 %2394, %2288
  %2396 = lshr i64 %2395, 3
  %2397 = add nuw nsw i64 %2396, 1
  %2398 = and i64 %2397, 7
  %2399 = icmp eq i64 %2398, 0
  br i1 %2399, label %2411, label %2400

2400:                                             ; preds = %2390, %2400
  %2401 = phi %"class.sh::TIntermNode"** [ %2404, %2400 ], [ %2391, %2390 ]
  %2402 = phi %"class.sh::TIntermNode"** [ %2405, %2400 ], [ %2392, %2390 ]
  %2403 = phi i64 [ %2409, %2400 ], [ %2398, %2390 ]
  %2404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2401, i64 -1
  %2405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2402, i64 -1
  %2406 = bitcast %"class.sh::TIntermNode"** %2405 to i64*
  %2407 = load i64, i64* %2406, align 8
  %2408 = bitcast %"class.sh::TIntermNode"** %2404 to i64*
  store i64 %2407, i64* %2408, align 8
  %2409 = add i64 %2403, -1
  %2410 = icmp eq i64 %2409, 0
  br i1 %2410, label %2411, label %2400, !llvm.loop !83

2411:                                             ; preds = %2400, %2390
  %2412 = phi %"class.sh::TIntermNode"** [ undef, %2390 ], [ %2404, %2400 ]
  %2413 = phi %"class.sh::TIntermNode"** [ %2391, %2390 ], [ %2404, %2400 ]
  %2414 = phi %"class.sh::TIntermNode"** [ %2392, %2390 ], [ %2405, %2400 ]
  %2415 = icmp ult i64 %2395, 56
  br i1 %2415, label %2460, label %2416

2416:                                             ; preds = %2411, %2416
  %2417 = phi %"class.sh::TIntermNode"** [ %2454, %2416 ], [ %2413, %2411 ]
  %2418 = phi %"class.sh::TIntermNode"** [ %2455, %2416 ], [ %2414, %2411 ]
  %2419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -1
  %2420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -1
  %2421 = bitcast %"class.sh::TIntermNode"** %2420 to i64*
  %2422 = load i64, i64* %2421, align 8
  %2423 = bitcast %"class.sh::TIntermNode"** %2419 to i64*
  store i64 %2422, i64* %2423, align 8
  %2424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -2
  %2425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -2
  %2426 = bitcast %"class.sh::TIntermNode"** %2425 to i64*
  %2427 = load i64, i64* %2426, align 8
  %2428 = bitcast %"class.sh::TIntermNode"** %2424 to i64*
  store i64 %2427, i64* %2428, align 8
  %2429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -3
  %2430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -3
  %2431 = bitcast %"class.sh::TIntermNode"** %2430 to i64*
  %2432 = load i64, i64* %2431, align 8
  %2433 = bitcast %"class.sh::TIntermNode"** %2429 to i64*
  store i64 %2432, i64* %2433, align 8
  %2434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -4
  %2435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -4
  %2436 = bitcast %"class.sh::TIntermNode"** %2435 to i64*
  %2437 = load i64, i64* %2436, align 8
  %2438 = bitcast %"class.sh::TIntermNode"** %2434 to i64*
  store i64 %2437, i64* %2438, align 8
  %2439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -5
  %2440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -5
  %2441 = bitcast %"class.sh::TIntermNode"** %2440 to i64*
  %2442 = load i64, i64* %2441, align 8
  %2443 = bitcast %"class.sh::TIntermNode"** %2439 to i64*
  store i64 %2442, i64* %2443, align 8
  %2444 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -6
  %2445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -6
  %2446 = bitcast %"class.sh::TIntermNode"** %2445 to i64*
  %2447 = load i64, i64* %2446, align 8
  %2448 = bitcast %"class.sh::TIntermNode"** %2444 to i64*
  store i64 %2447, i64* %2448, align 8
  %2449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -7
  %2450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -7
  %2451 = bitcast %"class.sh::TIntermNode"** %2450 to i64*
  %2452 = load i64, i64* %2451, align 8
  %2453 = bitcast %"class.sh::TIntermNode"** %2449 to i64*
  store i64 %2452, i64* %2453, align 8
  %2454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2417, i64 -8
  %2455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2418, i64 -8
  %2456 = bitcast %"class.sh::TIntermNode"** %2455 to i64*
  %2457 = load i64, i64* %2456, align 8
  %2458 = bitcast %"class.sh::TIntermNode"** %2454 to i64*
  store i64 %2457, i64* %2458, align 8
  %2459 = icmp eq %"class.sh::TIntermNode"** %2455, %2287
  br i1 %2459, label %2460, label %2416, !llvm.loop !84

2460:                                             ; preds = %2411, %2416, %2388, %2277
  %2461 = phi %"class.sh::TIntermNode"** [ %2280, %2277 ], [ %2314, %2388 ], [ %2412, %2411 ], [ %2454, %2416 ]
  %2462 = ptrtoint %"class.sh::TIntermNode"** %2461 to i64
  store i64 %2462, i64* %2253, align 8
  store i64 %2285, i64* %2252, align 8
  store i64 %2282, i64* %2262, align 8
  br label %2463

2463:                                             ; preds = %2245, %2460
  %2464 = bitcast i8* %1032 to %"class.sh::TIntermNode"*
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %2464, i32 1) #6
  br label %2465

2465:                                             ; preds = %34, %538, %2463, %1026, %44, %36
  store i8 0, i8* %7, align 2
  %2466 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %2467 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %2466, align 8
  %2468 = icmp eq %"class.sh::TIntermBlock"* %2467, null
  br i1 %2468, label %2470, label %2469

2469:                                             ; preds = %2465
  tail call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* nonnull %2467, %"class.sh::TIntermTraverser"* %3) #6
  br label %2470

2470:                                             ; preds = %2465, %2469
  %2471 = getelementptr inbounds %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser", %"class.sh::(anonymous namespace)::SimplifyLoopConditionsTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %2472 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2471, align 8
  %2473 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2472, i64 -1
  store %"class.sh::TIntermNode"** %2473, %"class.sh::TIntermNode"*** %2471, align 8
  ret void
}

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_13TIntermBinaryEPNS_11TIntermNodeEb(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_12TIntermUnaryE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermUnary"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_14TIntermTernaryE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermTernary"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_18TIntermDeclarationE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermDeclaration"*) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #2

declare %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.sh::TIntermBinary"* @_ZN2sh24CreateTempAssignmentNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateBoolNodeEb(i1 zeroext) local_unnamed_addr #2

declare void @_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = ptrtoint %"class.sh::TIntermNode"* %1 to i64
  %4 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %7 = bitcast %"class.sh::TIntermNode"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.0"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = lshr exact i64 %11, 3
  %13 = trunc i64 %12 to i32
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  store i32 %16, i32* %4, align 4
  %17 = inttoptr i64 %8 to %"class.sh::TIntermNode"**
  %18 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = icmp eq %"class.sh::TIntermNode"** %19, %17
  br i1 %20, label %25, label %21

21:                                               ; preds = %2
  %22 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %22, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, i64 1
  %24 = ptrtoint %"class.sh::TIntermNode"** %23 to i64
  store i64 %24, i64* %7, align 8
  br label %233

25:                                               ; preds = %2
  %26 = ptrtoint %"class.sh::TIntermNode"** %19 to i64
  %27 = sub i64 %26, %10
  %28 = ashr exact i64 %27, 3
  %29 = add nsw i64 %28, 1
  %30 = icmp ugt i64 %29, 2305843009213693951
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = bitcast %"class.std::__1::vector.0"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #7
  unreachable

33:                                               ; preds = %25
  %34 = bitcast %"class.sh::TIntermNode"*** %18 to i64*
  %35 = icmp ult i64 %28, 1152921504606846975
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = ashr exact i64 %27, 2
  %38 = icmp ult i64 %37, %29
  %39 = select i1 %38, i64 %29, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %36, %33
  %42 = phi i64 [ %39, %36 ], [ 2305843009213693951, %33 ]
  %43 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %44 = shl i64 %42, 3
  %45 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %43, i64 %44) #6
  %46 = bitcast i8* %45 to %"class.sh::TIntermNode"**
  br label %47

47:                                               ; preds = %41, %36
  %48 = phi i64 [ %42, %41 ], [ 0, %36 ]
  %49 = phi %"class.sh::TIntermNode"** [ %46, %41 ], [ null, %36 ]
  %50 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %28
  %51 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %48
  %52 = ptrtoint %"class.sh::TIntermNode"** %51 to i64
  %53 = bitcast %"class.sh::TIntermNode"** %50 to i64*
  store i64 %3, i64* %53, align 8
  %54 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 1
  %55 = ptrtoint %"class.sh::TIntermNode"** %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 0
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %56, align 8
  %58 = ptrtoint %"class.sh::TIntermNode"** %57 to i64
  %59 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %60 = icmp eq %"class.sh::TIntermNode"** %59, %57
  br i1 %60, label %230, label %61

61:                                               ; preds = %47
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %63 = ptrtoint %"class.sh::TIntermNode"** %62 to i64
  %64 = sub i64 %63, %58
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = icmp ult i64 %66, 4
  br i1 %67, label %160, label %68

68:                                               ; preds = %61
  %69 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %70 = ptrtoint %"class.sh::TIntermNode"** %69 to i64
  %71 = sub i64 %70, %58
  %72 = lshr i64 %71, 3
  %73 = xor i64 %72, -1
  %74 = add nsw i64 %28, %73
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %74
  %76 = xor i64 %72, -1
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 %76
  %78 = icmp ult %"class.sh::TIntermNode"** %75, %59
  %79 = icmp ult %"class.sh::TIntermNode"** %77, %50
  %80 = and i1 %78, %79
  br i1 %80, label %160, label %81

81:                                               ; preds = %68
  %82 = and i64 %66, 4611686018427387900
  %83 = sub nsw i64 0, %82
  %84 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %83
  %85 = sub nsw i64 0, %82
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 %85
  %87 = add nsw i64 %82, -4
  %88 = lshr exact i64 %87, 2
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %138, label %92

92:                                               ; preds = %81
  %93 = sub nuw nsw i64 %89, %90
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %95 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  br label %98

98:                                               ; preds = %98, %92
  %99 = phi i64 [ 0, %92 ], [ %133, %98 ]
  %100 = phi i64 [ %93, %92 ], [ %134, %98 ]
  %101 = sub i64 0, %99
  %102 = sub i64 0, %99
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %101
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 %102
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -1
  %106 = bitcast %"class.sh::TIntermNode"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !85
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -2
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -1
  %110 = bitcast %"class.sh::TIntermNode"** %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 8, !alias.scope !85
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %113 = bitcast %"class.sh::TIntermNode"** %112 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %113, align 8, !alias.scope !88, !noalias !85
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -2
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -1
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %116, align 8, !alias.scope !88, !noalias !85
  %117 = sub nuw nsw i64 -4, %99
  %118 = sub nuw nsw i64 -4, %99
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 %117
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 %118
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !85
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -1
  %126 = bitcast %"class.sh::TIntermNode"** %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !85
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %129, align 8, !alias.scope !88, !noalias !85
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %132, align 8, !alias.scope !88, !noalias !85
  %133 = add i64 %99, 8
  %134 = add i64 %100, -2
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %98, !llvm.loop !90

136:                                              ; preds = %98
  %137 = sub nuw nsw i64 -8, %99
  br label %138

138:                                              ; preds = %136, %81
  %139 = phi i64 [ 0, %81 ], [ %137, %136 ]
  %140 = icmp eq i64 %90, 0
  br i1 %140, label %158, label %141

141:                                              ; preds = %138
  %142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %143 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 %139
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 %139
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !85
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !85
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %154 = bitcast %"class.sh::TIntermNode"** %153 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %154, align 8, !alias.scope !88, !noalias !85
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -2
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -1
  %157 = bitcast %"class.sh::TIntermNode"** %156 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %157, align 8, !alias.scope !88, !noalias !85
  br label %158

158:                                              ; preds = %138, %141
  %159 = icmp eq i64 %66, %82
  br i1 %159, label %230, label %160

160:                                              ; preds = %158, %68, %61
  %161 = phi %"class.sh::TIntermNode"** [ %50, %68 ], [ %50, %61 ], [ %84, %158 ]
  %162 = phi %"class.sh::TIntermNode"** [ %59, %68 ], [ %59, %61 ], [ %86, %158 ]
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %164 = ptrtoint %"class.sh::TIntermNode"** %163 to i64
  %165 = sub i64 %164, %58
  %166 = lshr i64 %165, 3
  %167 = add nuw nsw i64 %166, 1
  %168 = and i64 %167, 7
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %160, %170
  %171 = phi %"class.sh::TIntermNode"** [ %174, %170 ], [ %161, %160 ]
  %172 = phi %"class.sh::TIntermNode"** [ %175, %170 ], [ %162, %160 ]
  %173 = phi i64 [ %179, %170 ], [ %168, %160 ]
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %176 = bitcast %"class.sh::TIntermNode"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast %"class.sh::TIntermNode"** %174 to i64*
  store i64 %177, i64* %178, align 8
  %179 = add i64 %173, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %170, !llvm.loop !91

181:                                              ; preds = %170, %160
  %182 = phi %"class.sh::TIntermNode"** [ undef, %160 ], [ %174, %170 ]
  %183 = phi %"class.sh::TIntermNode"** [ %161, %160 ], [ %174, %170 ]
  %184 = phi %"class.sh::TIntermNode"** [ %162, %160 ], [ %175, %170 ]
  %185 = icmp ult i64 %165, 56
  br i1 %185, label %230, label %186

186:                                              ; preds = %181, %186
  %187 = phi %"class.sh::TIntermNode"** [ %224, %186 ], [ %183, %181 ]
  %188 = phi %"class.sh::TIntermNode"** [ %225, %186 ], [ %184, %181 ]
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %191 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.sh::TIntermNode"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -2
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -2
  %196 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -3
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -3
  %201 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.sh::TIntermNode"** %199 to i64*
  store i64 %202, i64* %203, align 8
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -4
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -4
  %206 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.sh::TIntermNode"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -5
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -5
  %211 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -6
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -6
  %216 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -7
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -7
  %221 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TIntermNode"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -8
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.sh::TIntermNode"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = icmp eq %"class.sh::TIntermNode"** %225, %57
  br i1 %229, label %230, label %186, !llvm.loop !92

230:                                              ; preds = %181, %186, %158, %47
  %231 = phi %"class.sh::TIntermNode"** [ %50, %47 ], [ %84, %158 ], [ %182, %181 ], [ %224, %186 ]
  %232 = ptrtoint %"class.sh::TIntermNode"** %231 to i64
  store i64 %232, i64* %9, align 8
  store i64 %55, i64* %7, align 8
  store i64 %52, i64* %34, align 8
  br label %233

233:                                              ; preds = %21, %230
  %234 = load i32, i32* %4, align 4
  %235 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 5
  %236 = load i32, i32* %235, align 8
  %237 = icmp slt i32 %234, %236
  ret i1 %237
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !9}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !9}
!59 = distinct !{!59, !11}
!60 = distinct !{!60, !9}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !9}
!67 = distinct !{!67, !11}
!68 = distinct !{!68, !9}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !9}
!75 = distinct !{!75, !11}
!76 = distinct !{!76, !9}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !9}
!83 = distinct !{!83, !11}
!84 = distinct !{!84, !9}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !9}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !9}
