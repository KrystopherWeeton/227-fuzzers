; ModuleID = '../../third_party/lzma_sdk/7zCrc.c'
source_filename = "../../third_party/lzma_sdk/7zCrc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g_CrcUpdate = common hidden local_unnamed_addr global i32 (i32, i8*, i64, i32*)* null, align 8
@g_CrcTable = common hidden global [2048 x i32] zeroinitializer, align 16
@g_CrcUpdateT4 = common hidden local_unnamed_addr global i32 (i32, i8*, i64, i32*)* null, align 8
@g_CrcUpdateT8 = common hidden local_unnamed_addr global i32 (i32, i8*, i64, i32*)* null, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CrcUpdate(i32, i8*, i64) local_unnamed_addr #0 {
  %4 = load i32 (i32, i8*, i64, i32*)*, i32 (i32, i8*, i64, i32*)** @g_CrcUpdate, align 8
  %5 = tail call i32 %4(i32 %0, i8* %1, i64 %2, i32* getelementptr inbounds ([2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 0)) #3
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CrcCalc(i8*, i64) local_unnamed_addr #0 {
  %3 = load i32 (i32, i8*, i64, i32*)*, i32 (i32, i8*, i64, i32*)** @g_CrcUpdate, align 8
  %4 = tail call i32 %3(i32 -1, i8* %0, i64 %1, i32* getelementptr inbounds ([2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 0)) #3
  %5 = xor i32 %4, -1
  ret i32 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @CrcUpdateT1(i32, i8* readonly, i64, i32* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %76, label %7

7:                                                ; preds = %4
  %8 = add i64 %2, -1
  %9 = and i64 %2, 3
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %27, label %11

11:                                               ; preds = %7, %11
  %12 = phi i8* [ %24, %11 ], [ %1, %7 ]
  %13 = phi i32 [ %23, %11 ], [ %0, %7 ]
  %14 = phi i64 [ %25, %11 ], [ %9, %7 ]
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = and i32 %13, 255
  %18 = xor i32 %17, %16
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %3, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = lshr i32 %13, 8
  %23 = xor i32 %21, %22
  %24 = getelementptr inbounds i8, i8* %12, i64 1
  %25 = add i64 %14, -1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %11, !llvm.loop !2

27:                                               ; preds = %11, %7
  %28 = phi i32 [ undef, %7 ], [ %23, %11 ]
  %29 = phi i8* [ %1, %7 ], [ %24, %11 ]
  %30 = phi i32 [ %0, %7 ], [ %23, %11 ]
  %31 = icmp ult i64 %8, 3
  br i1 %31, label %76, label %32

32:                                               ; preds = %27, %32
  %33 = phi i8* [ %74, %32 ], [ %29, %27 ]
  %34 = phi i32 [ %73, %32 ], [ %30, %27 ]
  %35 = load i8, i8* %33, align 1
  %36 = zext i8 %35 to i32
  %37 = and i32 %34, 255
  %38 = xor i32 %37, %36
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %3, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %34, 8
  %43 = xor i32 %41, %42
  %44 = getelementptr inbounds i8, i8* %33, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = and i32 %43, 255
  %48 = xor i32 %47, %46
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %3, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = lshr i32 %43, 8
  %53 = xor i32 %51, %52
  %54 = getelementptr inbounds i8, i8* %33, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = and i32 %53, 255
  %58 = xor i32 %57, %56
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %3, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = lshr i32 %53, 8
  %63 = xor i32 %61, %62
  %64 = getelementptr inbounds i8, i8* %33, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = and i32 %63, 255
  %68 = xor i32 %67, %66
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %3, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %63, 8
  %73 = xor i32 %71, %72
  %74 = getelementptr inbounds i8, i8* %33, i64 4
  %75 = icmp eq i8* %74, %5
  br i1 %75, label %76, label %32

76:                                               ; preds = %27, %32, %4
  %77 = phi i32 [ %0, %4 ], [ %28, %27 ], [ %73, %32 ]
  ret i32 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CrcGenerateTable() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %46, %1 ]
  %3 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %0 ], [ %47, %1 ]
  %4 = lshr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %5 = and <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %6 = sub nsw <4 x i32> zeroinitializer, %5
  %7 = and <4 x i32> %6, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %8 = xor <4 x i32> %7, %4
  %9 = lshr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %10 = and <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %11 = sub nsw <4 x i32> zeroinitializer, %10
  %12 = and <4 x i32> %11, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %13 = xor <4 x i32> %12, %9
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = and <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %16 = sub nsw <4 x i32> zeroinitializer, %15
  %17 = and <4 x i32> %16, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %18 = xor <4 x i32> %17, %14
  %19 = lshr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = and <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> zeroinitializer, %20
  %22 = and <4 x i32> %21, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %23 = xor <4 x i32> %22, %19
  %24 = lshr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = and <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %26 = sub nsw <4 x i32> zeroinitializer, %25
  %27 = and <4 x i32> %26, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %28 = xor <4 x i32> %27, %24
  %29 = lshr <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %30 = and <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %31 = sub nsw <4 x i32> zeroinitializer, %30
  %32 = and <4 x i32> %31, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %33 = xor <4 x i32> %32, %29
  %34 = lshr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %35 = and <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %36 = sub nsw <4 x i32> zeroinitializer, %35
  %37 = and <4 x i32> %36, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %38 = xor <4 x i32> %37, %34
  %39 = lshr <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %40 = and <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  %41 = sub nsw <4 x i32> zeroinitializer, %40
  %42 = and <4 x i32> %41, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %43 = xor <4 x i32> %42, %39
  %44 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %2
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 16
  %46 = add i64 %2, 4
  %47 = add <4 x i32> %3, <i32 4, i32 4, i32 4, i32 4>
  %48 = icmp eq i64 %46, 256
  br i1 %48, label %49, label %1, !llvm.loop !4

49:                                               ; preds = %1, %49
  %50 = phi i64 [ %74, %49 ], [ 256, %1 ]
  %51 = add nuw nsw i64 %50, 4294967040
  %52 = and i64 %51, 4294967294
  %53 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %52
  %54 = load i32, i32* %53, align 8
  %55 = and i32 %54, 255
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = lshr i32 %54, 8
  %60 = xor i32 %58, %59
  %61 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %50
  store i32 %60, i32* %61, align 8
  %62 = or i64 %50, 1
  %63 = add nuw nsw i64 %50, 4294967041
  %64 = and i64 %63, 4294967295
  %65 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %66, 255
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = lshr i32 %66, 8
  %72 = xor i32 %70, %71
  %73 = getelementptr inbounds [2048 x i32], [2048 x i32]* @g_CrcTable, i64 0, i64 %62
  store i32 %72, i32* %73, align 4
  %74 = add nuw nsw i64 %50, 2
  %75 = icmp eq i64 %74, 2048
  br i1 %75, label %76, label %49

76:                                               ; preds = %49
  store i32 (i32, i8*, i64, i32*)* @CrcUpdateT4, i32 (i32, i8*, i64, i32*)** @g_CrcUpdateT4, align 8
  store i32 (i32, i8*, i64, i32*)* @CrcUpdateT4, i32 (i32, i8*, i64, i32*)** @g_CrcUpdate, align 8
  store i32 (i32, i8*, i64, i32*)* @CrcUpdateT8, i32 (i32, i8*, i64, i32*)** @g_CrcUpdateT8, align 8
  %77 = tail call i32 (...) @CPU_Is_InOrder() #3
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  store i32 (i32, i8*, i64, i32*)* @CrcUpdateT8, i32 (i32, i8*, i64, i32*)** @g_CrcUpdate, align 8
  br label %80

80:                                               ; preds = %76, %79
  ret void
}

declare i32 @CrcUpdateT4(i32, i8*, i64, i32*) #2

declare i32 @CrcUpdateT8(i32, i8*, i64, i32*) #2

declare i32 @CPU_Is_InOrder(...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
