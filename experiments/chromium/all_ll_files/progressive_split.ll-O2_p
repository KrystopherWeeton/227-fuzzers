; ModuleID = '../../third_party/libjxl/src/lib/jxl/progressive_split.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/progressive_split.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::AcStrategy" = type <{ i32, i8, [3 x i8] }>

$_ZN3jxl19ProgressiveSplitter19SplitACCoefficientsIiEEvPKT_mRKNS_10AcStrategyEmmmPA3_rPS2_ = comdat any

$_ZN3jxl19ProgressiveSplitter19SplitACCoefficientsIsEEvPKT_mRKNS_10AcStrategyEmmmPA3_rPS2_ = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN3jxl19ProgressiveSplitter19SplitACCoefficientsIiEEvPKT_mRKNS_10AcStrategyEmmmPA3_rPS2_(%"class.jxl::ProgressiveSplitter"*, i32* noalias, i64, %"class.jxl::AcStrategy"* dereferenceable(8), i64, i64, i64, [3 x i32*]*) local_unnamed_addr #0 comdat align 2 {
  %9 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  switch i64 %10, label %11 [
    i64 1, label %16
    i64 0, label %192
  ]

11:                                               ; preds = %8
  %12 = shl i64 %2, 2
  %13 = getelementptr inbounds %"class.jxl::AcStrategy", %"class.jxl::AcStrategy"* %3, i64 0, i32 0
  %14 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 2
  br label %36

16:                                               ; preds = %8
  %17 = shl i64 %2, 2
  %18 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 0, i64 0
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 %6
  %21 = bitcast i32* %20 to i8*
  %22 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 %17, i1 false)
  %23 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 0, i64 1
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 %6
  %26 = bitcast i32* %25 to i8*
  %27 = getelementptr inbounds i32, i32* %1, i64 %2
  %28 = bitcast i32* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 4 %28, i64 %17, i1 false)
  %29 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 0, i64 2
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 %6
  %32 = bitcast i32* %31 to i8*
  %33 = shl i64 %2, 1
  %34 = getelementptr inbounds i32, i32* %1, i64 %33
  %35 = bitcast i32* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %35, i64 %17, i1 false)
  br label %192

36:                                               ; preds = %11, %66
  %37 = phi i64 [ 0, %11 ], [ %73, %66 ]
  %38 = phi i32 [ 0, %11 ], [ %72, %66 ]
  %39 = phi i64 [ 0, %11 ], [ %71, %66 ]
  %40 = phi i64 [ 1, %11 ], [ %70, %66 ]
  %41 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 %37, i64 0
  %42 = load i32*, i32** %41, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 %6
  %44 = bitcast i32* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 %12, i1 false)
  %45 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 %37, i64 1
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 %6
  %48 = bitcast i32* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 %12, i1 false)
  %49 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 %37, i64 2
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 %6
  %52 = bitcast i32* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %52, i8 0, i64 %12, i1 false)
  %53 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 2
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp ne i8 %54, 0
  %56 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = icmp ne i64 %39, 0
  %62 = or i1 %61, %55
  %63 = zext i8 %54 to i32
  %64 = icmp eq i32 %38, 0
  %65 = shl i32 -1, %38
  br label %76

66:                                               ; preds = %189
  %67 = load i64, i64* %56, align 8
  %68 = icmp eq i64 %67, 0
  %69 = select i1 %68, i64 %60, i64 %40
  %70 = select i1 %55, i64 %40, i64 %69
  %71 = zext i8 %54 to i64
  %72 = trunc i64 %67 to i32
  %73 = add nuw i64 %37, 1
  %74 = load i64, i64* %9, align 8
  %75 = icmp ult i64 %73, %74
  br i1 %75, label %36, label %192

76:                                               ; preds = %189, %36
  %77 = phi i64 [ 0, %36 ], [ %190, %189 ]
  %78 = load i32, i32* %13, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %79
  %83 = load i8, i8* %82, align 1
  %84 = icmp ult i8 %83, %81
  %85 = select i1 %84, i8 %83, i8 %81
  %86 = zext i8 %85 to i64
  %87 = select i1 %84, i8 %81, i8 %83
  %88 = zext i8 %87 to i64
  br i1 %62, label %89, label %139

89:                                               ; preds = %76
  %90 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %14, align 8
  %91 = icmp eq %"class.jxl::Plane"* %90, null
  br i1 %91, label %136, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %136, label %96

96:                                               ; preds = %92
  %97 = load float, float* %15, align 8
  %98 = fcmp oeq float %97, 0.000000e+00
  br i1 %98, label %136, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = add i64 %86, %5
  %104 = icmp ult i64 %103, %102
  %105 = select i1 %104, i64 %103, i64 %102
  %106 = zext i32 %94 to i64
  %107 = add i64 %88, %4
  %108 = icmp ult i64 %107, %106
  %109 = select i1 %108, i64 %107, i64 %106
  %110 = icmp ugt i64 %105, %5
  br i1 %110, label %111, label %136

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 4
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %109, %4
  br label %117

117:                                              ; preds = %133, %111
  %118 = phi i64 [ %5, %111 ], [ %134, %133 ]
  %119 = mul i64 %118, %115
  %120 = getelementptr inbounds i8, i8* %113, i64 %119
  %121 = ptrtoint i8* %120 to i64
  %122 = and i64 %121, 63
  %123 = icmp eq i64 %122, 0
  tail call void @llvm.assume(i1 %123) #2
  %124 = bitcast i8* %120 to float*
  br i1 %116, label %127, label %133

125:                                              ; preds = %127
  %126 = icmp ult i64 %132, %109
  br i1 %126, label %127, label %133

127:                                              ; preds = %117, %125
  %128 = phi i64 [ %132, %125 ], [ %4, %117 ]
  %129 = getelementptr inbounds float, float* %124, i64 %128
  %130 = load float, float* %129, align 4
  %131 = fcmp ult float %130, %97
  %132 = add nuw i64 %128, 1
  br i1 %131, label %125, label %136

133:                                              ; preds = %125, %117
  %134 = add nuw i64 %118, 1
  %135 = icmp ult i64 %134, %105
  br i1 %135, label %117, label %136

136:                                              ; preds = %133, %127, %89, %92, %96, %99
  %137 = phi i32 [ 1, %96 ], [ 1, %92 ], [ 1, %89 ], [ 0, %99 ], [ 1, %127 ], [ 0, %133 ]
  %138 = icmp eq i32 %137, %63
  br i1 %138, label %139, label %189

139:                                              ; preds = %136, %76
  %140 = mul i64 %60, %86
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %189, label %142

142:                                              ; preds = %139
  %143 = mul i64 %60, %88
  %144 = icmp eq i64 %143, 0
  %145 = shl nuw nsw i64 %88, 3
  %146 = mul i64 %40, %88
  %147 = mul i64 %40, %86
  %148 = mul i64 %77, %2
  %149 = getelementptr inbounds [3 x i32*], [3 x i32*]* %7, i64 %37, i64 %77
  br label %150

150:                                              ; preds = %142, %155
  %151 = phi i64 [ 0, %142 ], [ %156, %155 ]
  br i1 %144, label %155, label %152

152:                                              ; preds = %150
  %153 = mul i64 %145, %151
  %154 = icmp ult i64 %151, %147
  br label %158

155:                                              ; preds = %186, %150
  %156 = add nuw i64 %151, 1
  %157 = icmp ult i64 %156, %140
  br i1 %157, label %150, label %189

158:                                              ; preds = %152, %186
  %159 = phi i64 [ 0, %152 ], [ %187, %186 ]
  %160 = add i64 %159, %153
  %161 = icmp ult i64 %159, %146
  %162 = and i1 %154, %161
  br i1 %162, label %186, label %163

163:                                              ; preds = %158
  %164 = add i64 %160, %148
  %165 = getelementptr inbounds i32, i32* %1, i64 %164
  %166 = load i32, i32* %165, align 4
  br i1 %64, label %175, label %167

167:                                              ; preds = %163
  %168 = lshr i32 %166, 31
  %169 = shl i32 %168, %38
  %170 = ashr i32 %166, 31
  %171 = add i32 %170, %166
  %172 = add i32 %171, %169
  %173 = and i32 %172, %65
  %174 = sub nsw i32 %166, %173
  br label %175

175:                                              ; preds = %163, %167
  %176 = phi i32 [ %174, %167 ], [ %166, %163 ]
  %177 = lshr i32 %176, 31
  %178 = shl i32 %177, %58
  %179 = ashr i32 %176, 31
  %180 = add i32 %179, %176
  %181 = add i32 %180, %178
  %182 = ashr i32 %181, %58
  %183 = load i32*, i32** %149, align 8
  %184 = add i64 %160, %6
  %185 = getelementptr inbounds i32, i32* %183, i64 %184
  store i32 %182, i32* %185, align 4
  br label %186

186:                                              ; preds = %158, %175
  %187 = add nuw i64 %159, 1
  %188 = icmp ult i64 %187, %143
  br i1 %188, label %158, label %155

189:                                              ; preds = %155, %139, %136
  %190 = add nuw nsw i64 %77, 1
  %191 = icmp eq i64 %190, 3
  br i1 %191, label %66, label %76

192:                                              ; preds = %66, %8, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3jxl19ProgressiveSplitter19SuperblockIsSalientEmmmm(%"class.jxl::ProgressiveSplitter"* nocapture readonly, i64, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 1
  %7 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %6, align 8
  %8 = icmp eq %"class.jxl::Plane"* %7, null
  br i1 %8, label %54, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %54, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 2
  %15 = load float, float* %14, align 8
  %16 = fcmp oeq float %15, 0.000000e+00
  br i1 %16, label %54, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = add i64 %3, %1
  %22 = icmp ult i64 %21, %20
  %23 = select i1 %22, i64 %21, i64 %20
  %24 = zext i32 %11 to i64
  %25 = add i64 %4, %2
  %26 = icmp ult i64 %25, %24
  %27 = select i1 %26, i64 %25, i64 %24
  %28 = icmp ugt i64 %23, %1
  br i1 %28, label %29, label %54

29:                                               ; preds = %17
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ugt i64 %27, %2
  br label %35

35:                                               ; preds = %29, %51
  %36 = phi i64 [ %1, %29 ], [ %52, %51 ]
  %37 = mul i64 %33, %36
  %38 = getelementptr inbounds i8, i8* %31, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #2
  %42 = bitcast i8* %38 to float*
  br i1 %34, label %45, label %51

43:                                               ; preds = %45
  %44 = icmp ult i64 %50, %27
  br i1 %44, label %45, label %51

45:                                               ; preds = %35, %43
  %46 = phi i64 [ %50, %43 ], [ %2, %35 ]
  %47 = getelementptr inbounds float, float* %42, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fcmp ult float %48, %15
  %50 = add nuw i64 %46, 1
  br i1 %49, label %43, label %54

51:                                               ; preds = %43, %35
  %52 = add nuw i64 %36, 1
  %53 = icmp ult i64 %52, %23
  br i1 %53, label %35, label %54

54:                                               ; preds = %51, %45, %17, %5, %9, %13
  %55 = phi i1 [ true, %13 ], [ true, %9 ], [ true, %5 ], [ false, %17 ], [ true, %45 ], [ false, %51 ]
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN3jxl19ProgressiveSplitter19SplitACCoefficientsIsEEvPKT_mRKNS_10AcStrategyEmmmPA3_rPS2_(%"class.jxl::ProgressiveSplitter"*, i16* noalias, i64, %"class.jxl::AcStrategy"* dereferenceable(8), i64, i64, i64, [3 x i16*]*) local_unnamed_addr #0 comdat align 2 {
  %9 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  switch i64 %10, label %11 [
    i64 1, label %16
    i64 0, label %197
  ]

11:                                               ; preds = %8
  %12 = shl i64 %2, 1
  %13 = getelementptr inbounds %"class.jxl::AcStrategy", %"class.jxl::AcStrategy"* %3, i64 0, i32 0
  %14 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 2
  br label %36

16:                                               ; preds = %8
  %17 = shl i64 %2, 1
  %18 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 0, i64 0
  %19 = load i16*, i16** %18, align 8
  %20 = getelementptr inbounds i16, i16* %19, i64 %6
  %21 = bitcast i16* %20 to i8*
  %22 = bitcast i16* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %21, i8* align 2 %22, i64 %17, i1 false)
  %23 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 0, i64 1
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds i16, i16* %24, i64 %6
  %26 = bitcast i16* %25 to i8*
  %27 = getelementptr inbounds i16, i16* %1, i64 %2
  %28 = bitcast i16* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %26, i8* align 2 %28, i64 %17, i1 false)
  %29 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 0, i64 2
  %30 = load i16*, i16** %29, align 8
  %31 = getelementptr inbounds i16, i16* %30, i64 %6
  %32 = bitcast i16* %31 to i8*
  %33 = shl i64 %2, 1
  %34 = getelementptr inbounds i16, i16* %1, i64 %33
  %35 = bitcast i16* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %32, i8* align 2 %35, i64 %17, i1 false)
  br label %197

36:                                               ; preds = %11, %66
  %37 = phi i64 [ 0, %11 ], [ %73, %66 ]
  %38 = phi i32 [ 0, %11 ], [ %72, %66 ]
  %39 = phi i64 [ 0, %11 ], [ %71, %66 ]
  %40 = phi i64 [ 1, %11 ], [ %70, %66 ]
  %41 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 %37, i64 0
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds i16, i16* %42, i64 %6
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %44, i8 0, i64 %12, i1 false)
  %45 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 %37, i64 1
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds i16, i16* %46, i64 %6
  %48 = bitcast i16* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %48, i8 0, i64 %12, i1 false)
  %49 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 %37, i64 2
  %50 = load i16*, i16** %49, align 8
  %51 = getelementptr inbounds i16, i16* %50, i64 %6
  %52 = bitcast i16* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %52, i8 0, i64 %12, i1 false)
  %53 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 2
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp ne i8 %54, 0
  %56 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds %"class.jxl::ProgressiveSplitter", %"class.jxl::ProgressiveSplitter"* %0, i64 0, i32 0, i32 1, i64 %37, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = icmp ne i64 %39, 0
  %62 = or i1 %61, %55
  %63 = zext i8 %54 to i32
  %64 = icmp eq i32 %38, 0
  %65 = shl i32 -1, %38
  br label %76

66:                                               ; preds = %194
  %67 = load i64, i64* %56, align 8
  %68 = icmp eq i64 %67, 0
  %69 = select i1 %68, i64 %60, i64 %40
  %70 = select i1 %55, i64 %40, i64 %69
  %71 = zext i8 %54 to i64
  %72 = trunc i64 %67 to i32
  %73 = add nuw i64 %37, 1
  %74 = load i64, i64* %9, align 8
  %75 = icmp ult i64 %73, %74
  br i1 %75, label %36, label %197

76:                                               ; preds = %194, %36
  %77 = phi i64 [ 0, %36 ], [ %195, %194 ]
  %78 = load i32, i32* %13, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %79
  %83 = load i8, i8* %82, align 1
  %84 = icmp ult i8 %83, %81
  %85 = select i1 %84, i8 %83, i8 %81
  %86 = zext i8 %85 to i64
  %87 = select i1 %84, i8 %81, i8 %83
  %88 = zext i8 %87 to i64
  br i1 %62, label %89, label %139

89:                                               ; preds = %76
  %90 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %14, align 8
  %91 = icmp eq %"class.jxl::Plane"* %90, null
  br i1 %91, label %136, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %136, label %96

96:                                               ; preds = %92
  %97 = load float, float* %15, align 8
  %98 = fcmp oeq float %97, 0.000000e+00
  br i1 %98, label %136, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = add i64 %86, %5
  %104 = icmp ult i64 %103, %102
  %105 = select i1 %104, i64 %103, i64 %102
  %106 = zext i32 %94 to i64
  %107 = add i64 %88, %4
  %108 = icmp ult i64 %107, %106
  %109 = select i1 %108, i64 %107, i64 %106
  %110 = icmp ugt i64 %105, %5
  br i1 %110, label %111, label %136

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %90, i64 0, i32 0, i32 4
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %109, %4
  br label %117

117:                                              ; preds = %133, %111
  %118 = phi i64 [ %5, %111 ], [ %134, %133 ]
  %119 = mul i64 %118, %115
  %120 = getelementptr inbounds i8, i8* %113, i64 %119
  %121 = ptrtoint i8* %120 to i64
  %122 = and i64 %121, 63
  %123 = icmp eq i64 %122, 0
  tail call void @llvm.assume(i1 %123) #2
  %124 = bitcast i8* %120 to float*
  br i1 %116, label %127, label %133

125:                                              ; preds = %127
  %126 = icmp ult i64 %132, %109
  br i1 %126, label %127, label %133

127:                                              ; preds = %117, %125
  %128 = phi i64 [ %132, %125 ], [ %4, %117 ]
  %129 = getelementptr inbounds float, float* %124, i64 %128
  %130 = load float, float* %129, align 4
  %131 = fcmp ult float %130, %97
  %132 = add nuw i64 %128, 1
  br i1 %131, label %125, label %136

133:                                              ; preds = %125, %117
  %134 = add nuw i64 %118, 1
  %135 = icmp ult i64 %134, %105
  br i1 %135, label %117, label %136

136:                                              ; preds = %133, %127, %89, %92, %96, %99
  %137 = phi i32 [ 1, %96 ], [ 1, %92 ], [ 1, %89 ], [ 0, %99 ], [ 1, %127 ], [ 0, %133 ]
  %138 = icmp eq i32 %137, %63
  br i1 %138, label %139, label %194

139:                                              ; preds = %136, %76
  %140 = mul i64 %60, %86
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %194, label %142

142:                                              ; preds = %139
  %143 = mul i64 %60, %88
  %144 = icmp eq i64 %143, 0
  %145 = shl nuw nsw i64 %88, 3
  %146 = mul i64 %40, %88
  %147 = mul i64 %40, %86
  %148 = mul i64 %77, %2
  %149 = getelementptr inbounds [3 x i16*], [3 x i16*]* %7, i64 %37, i64 %77
  br label %150

150:                                              ; preds = %142, %155
  %151 = phi i64 [ 0, %142 ], [ %156, %155 ]
  br i1 %144, label %155, label %152

152:                                              ; preds = %150
  %153 = mul i64 %145, %151
  %154 = icmp ult i64 %151, %147
  br label %158

155:                                              ; preds = %191, %150
  %156 = add nuw i64 %151, 1
  %157 = icmp ult i64 %156, %140
  br i1 %157, label %150, label %194

158:                                              ; preds = %152, %191
  %159 = phi i64 [ 0, %152 ], [ %192, %191 ]
  %160 = add i64 %159, %153
  %161 = icmp ult i64 %159, %146
  %162 = and i1 %154, %161
  br i1 %162, label %191, label %163

163:                                              ; preds = %158
  %164 = add i64 %160, %148
  %165 = getelementptr inbounds i16, i16* %1, i64 %164
  %166 = load i16, i16* %165, align 2
  br i1 %64, label %177, label %167

167:                                              ; preds = %163
  %168 = sext i16 %166 to i32
  %169 = lshr i32 %168, 31
  %170 = shl i32 %169, %38
  %171 = ashr i32 %168, 31
  %172 = add nsw i32 %171, %168
  %173 = add i32 %172, %170
  %174 = and i32 %173, %65
  %175 = trunc i32 %174 to i16
  %176 = sub i16 %166, %175
  br label %177

177:                                              ; preds = %163, %167
  %178 = phi i16 [ %176, %167 ], [ %166, %163 ]
  %179 = sext i16 %178 to i32
  %180 = lshr i32 %179, 31
  %181 = shl i32 %180, %58
  %182 = sub nsw i32 %181, %180
  %183 = shl i32 %182, 16
  %184 = ashr exact i32 %183, 16
  %185 = add nsw i32 %184, %179
  %186 = ashr i32 %185, %58
  %187 = trunc i32 %186 to i16
  %188 = load i16*, i16** %149, align 8
  %189 = add i64 %160, %6
  %190 = getelementptr inbounds i16, i16* %188, i64 %189
  store i16 %187, i16* %190, align 2
  br label %191

191:                                              ; preds = %158, %177
  %192 = add nuw i64 %159, 1
  %193 = icmp ult i64 %192, %143
  br i1 %193, label %158, label %155

194:                                              ; preds = %155, %139, %136
  %195 = add nuw nsw i64 %77, 1
  %196 = icmp eq i64 %195, 3
  br i1 %196, label %66, label %76

197:                                              ; preds = %66, %8, %16
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
