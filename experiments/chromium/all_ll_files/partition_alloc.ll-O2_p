; ModuleID = '../../base/allocator/partition_allocator/partition_alloc.cc'
source_filename = "../../base/allocator/partition_allocator/partition_alloc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::internal::PartitionAllocator" = type { %"struct.base::PartitionRoot" }
%"struct.base::PartitionRoot" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock", [4 x i8], [128 x %"struct.base::internal::PartitionBucket"], %"struct.base::internal::PartitionBucket", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionDirectMapExtent"*, [16 x %"struct.base::internal::SlotSpanMetadata"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock" = type { %"class.base::internal::SpinningMutex" }
%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.base::internal::PartitionBucket" = type { %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::PartitionBucket"*, i16, i16, i8, i8 }>
%"class.base::internal::PartitionFreelistEntry" = type { %"struct.base::internal::EncodedPartitionFreelistEntry"*, i64 }
%"struct.base::internal::EncodedPartitionFreelistEntry" = type { [8 x i8], [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"struct.base::internal::PartitionSuperPageExtentEntry" = type { %"struct.base::PartitionRoot"*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"* }
%"struct.base::internal::PartitionDirectMapExtent" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.base::internal::PartitionAllocator.32" = type { %"struct.base::PartitionRoot.33" }
%"struct.base::PartitionRoot.33" = type <{ i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock.34", [5 x i8], [128 x %"struct.base::internal::PartitionBucket.35"], %"struct.base::internal::PartitionBucket.35", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry.37"*, %"struct.base::internal::PartitionSuperPageExtentEntry.37"*, %"struct.base::internal::PartitionDirectMapExtent.38"*, [16 x %"struct.base::internal::SlotSpanMetadata.36"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock.34" = type { [4 x i8] }
%"struct.base::internal::PartitionBucket.35" = type { %"struct.base::internal::SlotSpanMetadata.36"*, %"struct.base::internal::SlotSpanMetadata.36"*, %"struct.base::internal::SlotSpanMetadata.36"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata.36" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata.36"*, %"struct.base::internal::PartitionBucket.35"*, i16, i16, i8, i8 }>
%"struct.base::internal::PartitionSuperPageExtentEntry.37" = type opaque
%"struct.base::internal::PartitionDirectMapExtent.38" = type opaque
%"class.base::PartitionAllocMemoryReclaimer" = type { %"class.std::__1::unique_ptr", %"class.base::Lock", %"class.std::__1::set", %"class.std::__1::set.22" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::RepeatingTimer"* }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.7", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.8" }
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.14", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.std::__1::set.22" = type { %"class.std::__1::__tree.23" }
%"class.std::__1::__tree.23" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.20" }

$_ZN4base8internal18PartitionAllocatorILb1EED5Ev = comdat any

$_ZN4base8internal18PartitionAllocatorILb1EE4initENS_16PartitionOptionsE = comdat any

$_ZN4base8internal18PartitionAllocatorILb0EED5Ev = comdat any

$_ZN4base8internal18PartitionAllocatorILb0EE4initENS_16PartitionOptionsE = comdat any

@.str = private unnamed_addr constant [140 x i8] c"../../base/allocator/partition_allocator/partition_alloc.cc(92) Check failed: opts.thread_cache == PartitionOptions::ThreadCache::kDisabled\00", align 1
@_ZN4base8internal23g_oom_handling_functionE = external local_unnamed_addr global void (i64)*, align 8

@_ZN4base8internal18PartitionAllocatorILb1EED1Ev = weak_odr hidden unnamed_addr alias void (%"struct.base::internal::PartitionAllocator"*), void (%"struct.base::internal::PartitionAllocator"*)* @_ZN4base8internal18PartitionAllocatorILb1EED2Ev
@_ZN4base8internal18PartitionAllocatorILb0EED1Ev = weak_odr hidden unnamed_addr alias void (%"struct.base::internal::PartitionAllocator.32"*), void (%"struct.base::internal::PartitionAllocator.32"*)* @_ZN4base8internal18PartitionAllocatorILb0EED2Ev

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal18PartitionAllocatorILb1EED2Ev(%"struct.base::internal::PartitionAllocator"*) unnamed_addr #0 comdat($_ZN4base8internal18PartitionAllocatorILb1EED5Ev) align 2 {
  %2 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #4
  %3 = getelementptr inbounds %"struct.base::internal::PartitionAllocator", %"struct.base::internal::PartitionAllocator"* %0, i64 0, i32 0
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer19UnregisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"* %2, %"struct.base::PartitionRoot"* %3) #4
  tail call void @_ZN4base13PartitionRootILb1EED1Ev(%"struct.base::PartitionRoot"* %3) #4
  ret void
}

declare %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() local_unnamed_addr #1

declare void @_ZN4base29PartitionAllocMemoryReclaimer19UnregisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"struct.base::PartitionRoot"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base13PartitionRootILb1EED1Ev(%"struct.base::PartitionRoot"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal18PartitionAllocatorILb1EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator"*, i40) local_unnamed_addr #0 comdat align 2 {
  %3 = and i40 %1, 65280
  %4 = icmp eq i40 %3, 0
  br i1 %4, label %6, label %5, !prof !2

5:                                                ; preds = %2
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str, i64 0, i64 0)) #4
  br label %6

6:                                                ; preds = %2, %5
  %7 = getelementptr inbounds %"struct.base::internal::PartitionAllocator", %"struct.base::internal::PartitionAllocator"* %0, i64 0, i32 0
  tail call void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"* %7, i40 %1) #4
  tail call void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"* %7) #4
  %8 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #4
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"* %8, %"struct.base::PartitionRoot"* %7) #4
  ret void
}

declare void @_ZN7logging8RawCheckEPKc(i8*) local_unnamed_addr #1

declare void @_ZN4base13PartitionRootILb1EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot"*, i40) local_unnamed_addr #1

declare void @_ZN4base13PartitionRootILb1EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot"*) local_unnamed_addr #1

declare void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb1EEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"struct.base::PartitionRoot"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal18PartitionAllocatorILb0EED2Ev(%"struct.base::internal::PartitionAllocator.32"*) unnamed_addr #0 comdat($_ZN4base8internal18PartitionAllocatorILb0EED5Ev) align 2 {
  %2 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #4
  %3 = getelementptr inbounds %"struct.base::internal::PartitionAllocator.32", %"struct.base::internal::PartitionAllocator.32"* %0, i64 0, i32 0
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer19UnregisterPartitionEPNS_13PartitionRootILb0EEE(%"class.base::PartitionAllocMemoryReclaimer"* %2, %"struct.base::PartitionRoot.33"* %3) #4
  tail call void @_ZN4base13PartitionRootILb0EED1Ev(%"struct.base::PartitionRoot.33"* %3) #4
  ret void
}

declare void @_ZN4base29PartitionAllocMemoryReclaimer19UnregisterPartitionEPNS_13PartitionRootILb0EEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"struct.base::PartitionRoot.33"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base13PartitionRootILb0EED1Ev(%"struct.base::PartitionRoot.33"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal18PartitionAllocatorILb0EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator.32"*, i40) local_unnamed_addr #0 comdat align 2 {
  %3 = and i40 %1, 65280
  %4 = icmp eq i40 %3, 0
  br i1 %4, label %6, label %5, !prof !2

5:                                                ; preds = %2
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str, i64 0, i64 0)) #4
  br label %6

6:                                                ; preds = %2, %5
  %7 = getelementptr inbounds %"struct.base::internal::PartitionAllocator.32", %"struct.base::internal::PartitionAllocator.32"* %0, i64 0, i32 0
  tail call void @_ZN4base13PartitionRootILb0EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot.33"* %7, i40 %1) #4
  tail call void @_ZN4base13PartitionRootILb0EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot.33"* %7) #4
  %8 = tail call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #4
  tail call void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb0EEE(%"class.base::PartitionAllocMemoryReclaimer"* %8, %"struct.base::PartitionRoot.33"* %7) #4
  ret void
}

declare void @_ZN4base13PartitionRootILb0EE4InitENS_16PartitionOptionsE(%"struct.base::PartitionRoot.33"*, i40) local_unnamed_addr #1

declare void @_ZN4base13PartitionRootILb0EE19ConfigureLazyCommitEv(%"struct.base::PartitionRoot.33"*) local_unnamed_addr #1

declare void @_ZN4base29PartitionAllocMemoryReclaimer17RegisterPartitionEPNS_13PartitionRootILb0EEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"struct.base::PartitionRoot.33"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base24PartitionAllocGlobalInitEPFvmE(void (i64)*) local_unnamed_addr #3 {
  store void (i64)* %0, void (i64)** @_ZN4base8internal23g_oom_handling_functionE, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base36PartitionAllocGlobalUninitForTestingEv() local_unnamed_addr #0 {
  tail call void @_ZN4base8internal6PCScan16UninitForTestingEv() #4
  store void (i64)* null, void (i64)** @_ZN4base8internal23g_oom_handling_functionE, align 8
  ret void
}

declare void @_ZN4base8internal6PCScan16UninitForTestingEv() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
