; ModuleID = '../../base/task/post_job.cc'
source_filename = "../../base/task/post_job.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::JobDelegate" = type <{ %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*, i8, [7 x i8] }>
%"class.base::internal::JobTaskSource" = type { %"class.base::internal::TaskSource.base", %"class.base::internal::CheckedLock", %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::JoinFlag", %"class.std::__1::unique_ptr", %"struct.std::__1::atomic.6", %"class.base::Location", %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.15", %"class.base::RepeatingCallback.16", %"class.base::TimeTicks", %"class.base::internal::PooledTaskRunnerDelegate"* }
%"class.base::internal::TaskSource.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::TaskTraits", %"struct.std::__1::atomic.1", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32 }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.5", [4 x i8] }>
%"class.base::RefCountedThreadSafe.5" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::internal::JobTaskSource::State" = type { %"struct.std::__1::atomic.6" }
%"class.base::internal::JobTaskSource::JoinFlag" = type { %"struct.std::__1::atomic.6" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.11, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.11 = type { i64 }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i32 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.14", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.15" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::RepeatingCallback.16" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"class.base::JobHandle" = type { %class.scoped_refptr.17 }
%class.scoped_refptr.17 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::TaskTraits", %"struct.std::__1::atomic.1", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"class.base::internal::TaskSource::Transaction" = type { %"class.base::internal::TaskSource"* }
%"class.base::ThreadPoolInstance" = type { i32 (...)** }
%"class.base::internal::ThreadPoolImpl" = type { %"class.base::ThreadPoolInstance", %"class.base::TaskExecutor", %"class.base::internal::ThreadGroup::Delegate", %"class.base::internal::PooledTaskRunnerDelegate", %"class.std::__1::unique_ptr.19", %"class.base::internal::ServiceThread", %"class.base::internal::DelayedTaskManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.85", i8, i8, %"struct.std::__1::atomic.108", i8, i8, i32, i32, %"class.base::internal::TrackedRefFactory.89" }
%"class.base::TaskExecutor" = type { i32 (...)** }
%"class.base::internal::ThreadGroup::Delegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.base::internal::TaskTrackerPosix"* }
%"class.base::internal::TaskTrackerPosix" = type { %"class.base::internal::TaskTracker", %class.scoped_refptr.58 }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr.27", %"struct.std::__1::atomic", %"struct.std::__1::atomic.33", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.37", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.24 }
%union.anon.24 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl.35" }
%"struct.std::__1::__cxx_atomic_impl.35" = type { %"struct.std::__1::__cxx_atomic_base_impl.36" }
%"struct.std::__1::__cxx_atomic_base_impl.36" = type { i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.40, i8, [7 x i8] }>
%class.scoped_refptr.40 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.41", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.41" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.42" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.51" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.50 }
%union.anon.50 = type { %"class.base::WaitableEvent" }
%"class.absl::optional.51" = type { %"class.absl::optional_internal::optional_data.52" }
%"class.absl::optional_internal::optional_data.52" = type { %"class.absl::optional_internal::optional_data_base.53" }
%"class.absl::optional_internal::optional_data_base.53" = type { %"class.absl::optional_internal::optional_data_dtor_base.54" }
%"class.absl::optional_internal::optional_data_dtor_base.54" = type { i8, %union.anon.55 }
%union.anon.55 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%class.scoped_refptr.58 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.5" }>
%"class.base::internal::ServiceThread" = type { %"class.base::Thread.base", [7 x i8] }
%"class.base::Thread.base" = type <{ %"class.base::PlatformThread::Delegate", i8, i8, i8, [5 x i8], %"class.base::Lock", %"class.base::PlatformThreadHandle", %"class.base::Lock", i32, [4 x i8], %"class.base::WaitableEvent", %"class.std::__1::unique_ptr.62", %"class.base::RunLoop"*, i32, [4 x i8], %"class.std::__1::basic_string", %"class.base::WaitableEvent", %"class.base::SequenceCheckerDoNothing" }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.base::Thread::Delegate"* }
%"class.base::Thread::Delegate" = type { i32 (...)** }
%"class.base::RunLoop" = type opaque
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::DelayedTaskManager" = type { %"class.base::RepeatingCallback.16", %"class.base::TickClock"*, %"class.base::internal::CheckedLock", %class.scoped_refptr.68, %"class.base::internal::IntrusiveHeap" }
%"class.base::TickClock" = type { i32 (...)** }
%class.scoped_refptr.68 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"class.std::__1::__compressed_pair.72" }
%"struct.base::internal::DelayedTaskManager::DelayedTask" = type <{ %"struct.base::internal::Task", %"class.base::OnceCallback.70", %class.scoped_refptr.71, i8, [7 x i8] }>
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.69", i32, [4 x i8], i8*, i32, i8 }>
%"struct.std::__1::array.69" = type { [4 x i8*] }
%"class.base::OnceCallback.70" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.71 = type { %"class.base::TaskRunner"* }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"* }
%"class.base::internal::PooledSingleThreadTaskRunnerManager" = type <{ %"class.base::internal::TrackedRef", %"class.base::internal::DelayedTaskManager"*, %"class.base::WorkerThreadObserver"*, %"class.base::internal::CheckedLock", %"class.std::__1::vector.77", i32, [4 x i8], [4 x [2 x %"class.base::internal::WorkerThread"*]], i8, [7 x i8] }>
%"class.base::WorkerThreadObserver" = type opaque
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %class.scoped_refptr.79*, %class.scoped_refptr.79*, %"class.std::__1::__compressed_pair.80" }
%class.scoped_refptr.79 = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe.117", [4 x i8], %class.scoped_refptr.79, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr.123", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::RefCountedThreadSafe.117" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.118" }
%"struct.std::__1::atomic.118" = type { %"struct.std::__1::__atomic_base.119" }
%"struct.std::__1::__atomic_base.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__cxx_atomic_impl.121" }
%"struct.std::__1::__cxx_atomic_impl.121" = type { %"struct.std::__1::__cxx_atomic_base_impl.122" }
%"struct.std::__1::__cxx_atomic_base_impl.122" = type { i8 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %class.scoped_refptr.79* }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.base::internal::ThreadGroup"* }
%"class.base::internal::ThreadGroup" = type { i32 (...)**, %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef.88", %"class.base::internal::CheckedLock", i8, [7 x i8], %"class.base::internal::PriorityQueue", %"struct.std::__1::atomic.101", %"class.base::internal::ThreadGroup"* }
%"class.base::internal::TrackedRef.88" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::internal::TrackedRefFactory.89"* }
%"class.base::internal::PriorityQueue" = type <{ %"class.base::internal::IntrusiveHeap.90", %"struct.std::__1::array.100", i8, [7 x i8] }>
%"class.base::internal::IntrusiveHeap.90" = type { %"class.base::IntrusiveHeap.91" }
%"class.base::IntrusiveHeap.91" = type { %"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" = type { %"class.std::__1::vector.93" }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.std::__1::__compressed_pair.95" }
%"class.base::internal::PriorityQueue::TaskSourceAndSortKey" = type opaque
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"* }
%"struct.std::__1::array.100" = type { [3 x i64] }
%"struct.std::__1::atomic.101" = type { %"struct.std::__1::__atomic_base.102" }
%"struct.std::__1::__atomic_base.102" = type { %"struct.std::__1::__cxx_atomic_impl.103" }
%"struct.std::__1::__cxx_atomic_impl.103" = type { %"struct.std::__1::__cxx_atomic_base_impl.104" }
%"struct.std::__1::__cxx_atomic_base_impl.104" = type { %"struct.base::internal::ThreadGroup::YieldSortKey" }
%"struct.base::internal::ThreadGroup::YieldSortKey" = type { i8, i8 }
%"struct.std::__1::atomic.108" = type { %"struct.std::__1::__atomic_base.109" }
%"struct.std::__1::__atomic_base.109" = type { %"struct.std::__1::__cxx_atomic_impl.110" }
%"struct.std::__1::__cxx_atomic_impl.110" = type { %"struct.std::__1::__cxx_atomic_base_impl.111" }
%"struct.std::__1::__cxx_atomic_base_impl.111" = type { i8 }
%"class.base::internal::TrackedRefFactory.89" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.112" }
%"class.absl::optional.112" = type { %"class.absl::optional_internal::optional_data.113" }
%"class.absl::optional_internal::optional_data.113" = type { %"class.absl::optional_internal::optional_data_base.114" }
%"class.absl::optional_internal::optional_data_base.114" = type { %"class.absl::optional_internal::optional_data_dtor_base.115" }
%"class.absl::optional_internal::optional_data_dtor_base.115" = type { i8, %union.anon.116 }
%union.anon.116 = type { %"class.base::internal::TrackedRef.88" }

@_ZN4base11JobDelegateC1EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE = hidden unnamed_addr alias void (%"class.base::JobDelegate"*, %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*), void (%"class.base::JobDelegate"*, %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*)* @_ZN4base11JobDelegateC2EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE
@_ZN4base11JobDelegateD1Ev = hidden unnamed_addr alias void (%"class.base::JobDelegate"*), void (%"class.base::JobDelegate"*)* @_ZN4base11JobDelegateD2Ev
@_ZN4base9JobHandleC1Ev = hidden unnamed_addr alias void (%"class.base::JobHandle"*), void (%"class.base::JobHandle"*)* @_ZN4base9JobHandleC2Ev
@_ZN4base9JobHandleC1E13scoped_refptrINS_8internal13JobTaskSourceEE = hidden unnamed_addr alias void (%"class.base::JobHandle"*, %"class.base::internal::JobTaskSource"*), void (%"class.base::JobHandle"*, %"class.base::internal::JobTaskSource"*)* @_ZN4base9JobHandleC2E13scoped_refptrINS_8internal13JobTaskSourceEE
@_ZN4base9JobHandleD1Ev = hidden unnamed_addr alias void (%"class.base::JobHandle"*), void (%"class.base::JobHandle"*)* @_ZN4base9JobHandleD2Ev
@_ZN4base9JobHandleC1EOS0_ = hidden unnamed_addr alias void (%"class.base::JobHandle"*, %"class.base::JobHandle"*), void (%"class.base::JobHandle"*, %"class.base::JobHandle"*)* @_ZN4base9JobHandleC2EOS0_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base11JobDelegateC2EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE(%"class.base::JobDelegate"* nocapture, %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 0
  store %"class.base::internal::JobTaskSource"* %1, %"class.base::internal::JobTaskSource"** %4, align 8
  %5 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 1
  store %"class.base::internal::PooledTaskRunnerDelegate"* %2, %"class.base::internal::PooledTaskRunnerDelegate"** %5, align 8
  %6 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 2
  store i8 -1, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11JobDelegateD2Ev(%"class.base::JobDelegate"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, -1
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 0
  %7 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %6, align 8
  tail call void @_ZN4base8internal13JobTaskSource13ReleaseTaskIdEh(%"class.base::internal::JobTaskSource"* %7, i8 zeroext %3) #8
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

declare void @_ZN4base8internal13JobTaskSource13ReleaseTaskIdEh(%"class.base::internal::JobTaskSource"*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base11JobDelegate11ShouldYieldEv(%"class.base::JobDelegate"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  %4 = tail call zeroext i1 @_ZN4base8internal13JobTaskSource11ShouldYieldEv(%"class.base::internal::JobTaskSource"* %3) #8
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 1
  %7 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %6, align 8
  %8 = icmp eq %"class.base::internal::PooledTaskRunnerDelegate"* %7, null
  br i1 %8, label %17, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.base::JobDelegate"* %0 to %"class.base::internal::TaskSource"**
  %11 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %10, align 8
  %12 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %7 to i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)***
  %13 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)**, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)** %13, i64 2
  %15 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.base::internal::PooledTaskRunnerDelegate"* nonnull %7, %"class.base::internal::TaskSource"* %11) #8
  br label %17

17:                                               ; preds = %5, %9, %1
  %18 = phi i1 [ true, %1 ], [ false, %5 ], [ %16, %9 ]
  ret i1 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZN4base8internal13JobTaskSource11ShouldYieldEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base11JobDelegate13YieldIfNeededEv(%"class.base::JobDelegate"* nocapture) local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11JobDelegate25NotifyConcurrencyIncreaseEv(%"class.base::JobDelegate"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  tail call void @_ZN4base8internal13JobTaskSource25NotifyConcurrencyIncreaseEv(%"class.base::internal::JobTaskSource"* %3) #8
  ret void
}

declare void @_ZN4base8internal13JobTaskSource25NotifyConcurrencyIncreaseEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN4base11JobDelegate9GetTaskIdEv(%"class.base::JobDelegate"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, -1
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::JobDelegate", %"class.base::JobDelegate"* %0, i64 0, i32 0
  %7 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %6, align 8
  %8 = tail call zeroext i8 @_ZN4base8internal13JobTaskSource13AcquireTaskIdEv(%"class.base::internal::JobTaskSource"* %7) #8
  store i8 %8, i8* %2, align 8
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i8 [ %8, %5 ], [ %3, %1 ]
  ret i8 %10
}

declare zeroext i8 @_ZN4base8internal13JobTaskSource13AcquireTaskIdEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base9JobHandleC2Ev(%"class.base::JobHandle"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::JobTaskSource"* null, %"class.base::internal::JobTaskSource"** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandleC2E13scoped_refptrINS_8internal13JobTaskSourceEE(%"class.base::JobHandle"* nocapture, %"class.base::internal::JobTaskSource"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.base::internal::JobTaskSource"* %1 to i64
  %4 = bitcast %"class.base::JobHandle"* %0 to i64*
  store i64 %3, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandleD2Ev(%"class.base::JobHandle"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  %4 = icmp eq %"class.base::internal::JobTaskSource"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::internal::TaskSource"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.base::internal::TaskSource"*)***
  %14 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %14, i64 4
  %16 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %15, align 8
  tail call void %16(%"class.base::internal::TaskSource"* nonnull %12) #8
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base9JobHandleC2EOS0_(%"class.base::JobHandle"* nocapture, %"class.base::JobHandle"* nocapture dereferenceable(8)) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.base::JobHandle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::JobHandle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::JobTaskSource"* null, %"class.base::internal::JobTaskSource"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::JobHandle"* @_ZN4base9JobHandleaSEOS0_(%"class.base::JobHandle"* returned, %"class.base::JobHandle"* nocapture dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.base::JobHandle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.base::internal::JobTaskSource"* null, %"class.base::internal::JobTaskSource"** %3, align 8
  %6 = bitcast %"class.base::JobHandle"* %0 to i64*
  %7 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.base::internal::JobTaskSource"* %8, null
  br i1 %9, label %22, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %8, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw sub i32* %12, i32 1 acq_rel
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %22

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 -2
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to %"class.base::internal::TaskSource"*
  %18 = bitcast %"class.base::RefCountedThreadSafe"* %16 to void (%"class.base::internal::TaskSource"*)***
  %19 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %19, i64 4
  %21 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %20, align 8
  tail call void %21(%"class.base::internal::TaskSource"* nonnull %17) #8
  br label %22

22:                                               ; preds = %2, %10, %15
  ret %"class.base::JobHandle"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base9JobHandle8IsActiveEv(%"class.base::JobHandle"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  %4 = tail call zeroext i1 @_ZNK4base8internal13JobTaskSource8IsActiveEv(%"class.base::internal::JobTaskSource"* %3) #8
  ret i1 %4
}

declare zeroext i1 @_ZNK4base8internal13JobTaskSource8IsActiveEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle14UpdatePriorityENS_12TaskPriorityE(%"class.base::JobHandle"* nocapture readonly, i8 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %4, i64 0, i32 11
  %6 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %5, align 8
  %7 = bitcast %"class.base::internal::JobTaskSource"* %4 to %"class.base::internal::TaskSource"*
  %8 = icmp eq %"class.base::internal::JobTaskSource"* %4, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  %13 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %6 to void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)***
  %14 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)**, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %14, i64 7
  %16 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %15, align 8
  tail call void %16(%"class.base::internal::PooledTaskRunnerDelegate"* %6, %"class.base::internal::TaskSource"* %7, i8 zeroext %1) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle25NotifyConcurrencyIncreaseEv(%"class.base::JobHandle"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  tail call void @_ZN4base8internal13JobTaskSource25NotifyConcurrencyIncreaseEv(%"class.base::internal::JobTaskSource"* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle4JoinEv(%"class.base::JobHandle"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = tail call zeroext i8 @_ZN4base8internal31GetTaskPriorityForCurrentThreadEv() #8
  %3 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %4, i64 0, i32 11
  %6 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %5, align 8
  %7 = bitcast %"class.base::internal::JobTaskSource"* %4 to %"class.base::internal::TaskSource"*
  %8 = icmp eq %"class.base::internal::JobTaskSource"* %4, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %6 to void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)***
  %14 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)**, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %14, i64 7
  %16 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %15, align 8
  tail call void %16(%"class.base::internal::PooledTaskRunnerDelegate"* %6, %"class.base::internal::TaskSource"* %7, i8 zeroext %2) #8
  %17 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  %18 = tail call zeroext i1 @_ZN4base8internal13JobTaskSource8WillJoinEv(%"class.base::internal::JobTaskSource"* %17) #8
  %19 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  br i1 %18, label %20, label %24

20:                                               ; preds = %12, %20
  %21 = phi %"class.base::internal::JobTaskSource"* [ %23, %20 ], [ %19, %12 ]
  %22 = tail call zeroext i1 @_ZN4base8internal13JobTaskSource11RunJoinTaskEv(%"class.base::internal::JobTaskSource"* %21) #8
  %23 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  br i1 %22, label %20, label %24

24:                                               ; preds = %20, %12
  %25 = phi %"class.base::internal::JobTaskSource"* [ %19, %12 ], [ %23, %20 ]
  %26 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %25, i64 0, i32 11
  %27 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %26, align 8
  %28 = icmp eq %"class.base::internal::JobTaskSource"* %25, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %25, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 1 monotonic
  br label %32

32:                                               ; preds = %24, %29
  %33 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %27 to void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)***
  %34 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)**, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %34, i64 5
  %36 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %35, align 8
  tail call void %36(%"class.base::internal::PooledTaskRunnerDelegate"* %27, %"class.base::internal::JobTaskSource"* %25) #8
  %37 = bitcast %"class.base::JobHandle"* %0 to i64*
  %38 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  store i64 0, i64* %37, align 8
  %39 = icmp eq %"class.base::internal::JobTaskSource"* %38, null
  br i1 %39, label %52, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %38, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %52

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %41, i64 -2
  %47 = bitcast %"class.base::RefCountedThreadSafe"* %46 to %"class.base::internal::TaskSource"*
  %48 = bitcast %"class.base::RefCountedThreadSafe"* %46 to void (%"class.base::internal::TaskSource"*)***
  %49 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %49, i64 4
  %51 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %50, align 8
  tail call void %51(%"class.base::internal::TaskSource"* nonnull %47) #8
  br label %52

52:                                               ; preds = %32, %40, %45
  ret void
}

declare zeroext i8 @_ZN4base8internal31GetTaskPriorityForCurrentThreadEv() local_unnamed_addr #2

declare zeroext i1 @_ZN4base8internal13JobTaskSource8WillJoinEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4base8internal13JobTaskSource11RunJoinTaskEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle6CancelEv(%"class.base::JobHandle"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  tail call void @_ZN4base8internal13JobTaskSource6CancelEPNS0_10TaskSource11TransactionE(%"class.base::internal::JobTaskSource"* %3, %"class.base::internal::TaskSource::Transaction"* null) #8
  %4 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  %5 = tail call zeroext i1 @_ZN4base8internal13JobTaskSource8WillJoinEv(%"class.base::internal::JobTaskSource"* %4) #8
  %6 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  %7 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %6, i64 0, i32 11
  %8 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %7, align 8
  %9 = icmp eq %"class.base::internal::JobTaskSource"* %6, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %1, %10
  %14 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %8 to void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)***
  %15 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)**, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %15, i64 5
  %17 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %16, align 8
  tail call void %17(%"class.base::internal::PooledTaskRunnerDelegate"* %8, %"class.base::internal::JobTaskSource"* %6) #8
  %18 = bitcast %"class.base::JobHandle"* %0 to i64*
  %19 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  store i64 0, i64* %18, align 8
  %20 = icmp eq %"class.base::internal::JobTaskSource"* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %19, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %33

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 -2
  %28 = bitcast %"class.base::RefCountedThreadSafe"* %27 to %"class.base::internal::TaskSource"*
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %27 to void (%"class.base::internal::TaskSource"*)***
  %30 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %30, i64 4
  %32 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %31, align 8
  tail call void %32(%"class.base::internal::TaskSource"* nonnull %28) #8
  br label %33

33:                                               ; preds = %13, %21, %26
  ret void
}

declare void @_ZN4base8internal13JobTaskSource6CancelEPNS0_10TaskSource11TransactionE(%"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle15CancelAndDetachEv(%"class.base::JobHandle"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  tail call void @_ZN4base8internal13JobTaskSource6CancelEPNS0_10TaskSource11TransactionE(%"class.base::internal::JobTaskSource"* %3, %"class.base::internal::TaskSource::Transaction"* null) #8
  %4 = bitcast %"class.base::JobHandle"* %0 to i64*
  %5 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %2, align 8
  store i64 0, i64* %4, align 8
  %6 = icmp eq %"class.base::internal::JobTaskSource"* %5, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %5, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %19

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %8, i64 -2
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %13 to %"class.base::internal::TaskSource"*
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %13 to void (%"class.base::internal::TaskSource"*)***
  %16 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %16, i64 4
  %18 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %17, align 8
  tail call void %18(%"class.base::internal::TaskSource"* nonnull %14) #8
  br label %19

19:                                               ; preds = %1, %7, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base9JobHandle6DetachEv(%"class.base::JobHandle"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.base::JobHandle"* %0 to i64*
  %3 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %3, align 8
  store i64 0, i64* %2, align 8
  %5 = icmp eq %"class.base::internal::JobTaskSource"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.base::internal::TaskSource"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.base::internal::TaskSource"*)***
  %15 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %15, i64 4
  %17 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %16, align 8
  tail call void %17(%"class.base::internal::TaskSource"* nonnull %13) #8
  br label %18

18:                                               ; preds = %1, %6, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base7PostJobERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS6_IFmmEEE(%"class.base::JobHandle"* noalias nocapture sret, %"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::RepeatingCallback.15"* nocapture, %"class.base::RepeatingCallback"* nocapture) local_unnamed_addr #1 {
  %6 = alloca %"class.base::RepeatingCallback.15", align 8
  %7 = alloca %"class.base::RepeatingCallback", align 8
  %8 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #8
  %9 = bitcast %"class.base::RepeatingCallback.15"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = bitcast %"class.base::RepeatingCallback"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = tail call i8* @_Znwm(i64 232) #9
  %12 = bitcast i8* %11 to %"class.base::internal::JobTaskSource"*
  %13 = getelementptr inbounds %"class.base::RepeatingCallback.15", %"class.base::RepeatingCallback.15"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.base::RepeatingCallback.15"* %3 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::RepeatingCallback.15"* %6 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = bitcast %"class.base::RepeatingCallback"* %4 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.base::RepeatingCallback"* %7 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %17, align 8
  %21 = icmp eq %"class.base::ThreadPoolInstance"* %8, null
  %22 = getelementptr inbounds %"class.base::ThreadPoolInstance", %"class.base::ThreadPoolInstance"* %8, i64 3
  %23 = bitcast %"class.base::ThreadPoolInstance"* %22 to %"class.base::internal::PooledTaskRunnerDelegate"*
  %24 = select i1 %21, %"class.base::internal::PooledTaskRunnerDelegate"* null, %"class.base::internal::PooledTaskRunnerDelegate"* %23
  call void @_ZN4base8internal13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS8_IFmmEEEPNS0_24PooledTaskRunnerDelegateE(%"class.base::internal::JobTaskSource"* nonnull %12, %"class.base::Location"* dereferenceable(32) %1, %"class.base::TaskTraits"* dereferenceable(15) %2, %"class.base::RepeatingCallback.15"* nonnull %6, %"class.base::RepeatingCallback"* nonnull %7, %"class.base::internal::PooledTaskRunnerDelegate"* %24) #8
  %25 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #8
  %26 = getelementptr inbounds %"class.base::RepeatingCallback.15", %"class.base::RepeatingCallback.15"* %6, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %26) #8
  %27 = getelementptr inbounds i8, i8* %11, i64 8
  %28 = bitcast i8* %27 to i32*
  %29 = atomicrmw add i32* %28, i32 1 monotonic
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  %30 = call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #8
  %31 = bitcast %"class.base::ThreadPoolInstance"* %30 to %"class.base::internal::ThreadPoolImpl"*
  %32 = atomicrmw add i32* %28, i32 1 monotonic
  %33 = bitcast %"class.base::ThreadPoolInstance"* %30 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)***
  %34 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)*** %33, align 8
  %35 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)** %34, i64 16
  %36 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::internal::JobTaskSource"*)** %35, align 8
  %37 = call zeroext i1 %36(%"class.base::internal::ThreadPoolImpl"* %31, %"class.base::internal::JobTaskSource"* nonnull %12) #8
  br i1 %37, label %38, label %41

38:                                               ; preds = %5
  %39 = ptrtoint i8* %11 to i64
  %40 = bitcast %"class.base::JobHandle"* %0 to i64*
  store i64 %39, i64* %40, align 8, !alias.scope !2
  br label %51

41:                                               ; preds = %5
  %42 = getelementptr inbounds %"class.base::JobHandle", %"class.base::JobHandle"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::JobTaskSource"* null, %"class.base::internal::JobTaskSource"** %42, align 8
  %43 = atomicrmw sub i32* %28, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = bitcast i8* %11 to %"class.base::internal::TaskSource"*
  %47 = bitcast i8* %11 to void (%"class.base::internal::TaskSource"*)***
  %48 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %48, i64 4
  %50 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %49, align 8
  call void %50(%"class.base::internal::TaskSource"* nonnull %46) #8
  br label %51

51:                                               ; preds = %38, %41, %45
  ret void
}

declare %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN4base8internal13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS8_IFmmEEEPNS0_24PooledTaskRunnerDelegateE(%"class.base::internal::JobTaskSource"*, %"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::RepeatingCallback.15"*, %"class.base::RepeatingCallback"*, %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4base8internal13JobTaskSource15CreateJobHandleE13scoped_refptrIS1_E: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal13JobTaskSource15CreateJobHandleE13scoped_refptrIS1_E"}
