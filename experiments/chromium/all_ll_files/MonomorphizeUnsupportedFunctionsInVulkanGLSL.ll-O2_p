; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/MonomorphizeUnsupportedFunctionsInVulkanGLSL.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/MonomorphizeUnsupportedFunctionsInVulkanGLSL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TFunction"*, %"struct.sh::(anonymous namespace)::FunctionData" }
%"struct.sh::(anonymous namespace)::FunctionData" = type { i8, %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TVector.169" }
%"class.sh::TVector.169" = type { %"class.std::__1::vector.170" }
%"class.std::__1::vector.170" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"**, %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.sh::TIntermFunctionDefinition"** }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::(anonymous namespace)::MonomorphizeTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, i64, i8, %"class.absl::flat_hash_map"* }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.141", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.148", %"class.std::__1::vector.155", %"class.sh::TVector.31", %"class.std::__1::vector.162" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.143" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.150" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.155" = type { %"class.std::__1::__vector_base.156" }
%"class.std::__1::__vector_base.156" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.157" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.162" = type { %"class.std::__1::__vector_base.163" }
%"class.std::__1::__vector_base.163" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.164" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser" = type { %"class.sh::TIntermTraverser", %"class.absl::flat_hash_map"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.200", i8, [7 x i8] }>
%"class.sh::TVector.200" = type { %"class.std::__1::vector.201" }
%"class.std::__1::vector.201" = type { %"class.std::__1::__vector_base.202" }
%"class.std::__1::__vector_base.202" = type { i32*, i32*, %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TVector.207" = type { %"class.std::__1::vector.208" }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"*, %"class.std::__1::__compressed_pair.210" }
%"struct.sh::(anonymous namespace)::Argument" = type { i64, %"class.sh::TIntermTyped"* }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"struct.sh::(anonymous namespace)::Argument"* }
%"class.absl::flat_hash_map.215" = type { %"class.absl::container_internal::raw_hash_map.216" }
%"class.absl::container_internal::raw_hash_map.216" = type { %"class.absl::container_internal::raw_hash_set.217" }
%"class.absl::container_internal::raw_hash_set.217" = type { i8*, %"union.absl::container_internal::map_slot_type.218"*, i64, i64, %"class.absl::container_internal::CompressedTuple.221" }
%"union.absl::container_internal::map_slot_type.218" = type { %"struct.std::__1::pair.219" }
%"struct.std::__1::pair.219" = type { %"class.sh::TVariable"*, %"class.sh::TIntermTyped"* }
%"class.absl::container_internal::CompressedTuple.221" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.222" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.222" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_ = comdat any

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_24TIntermFunctionPrototypeENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_25TIntermFunctionDefinitionENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh12_GLOBAL__N_121MonomorphizeTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::MonomorphizeTraverser"*)* @_ZN2sh12_GLOBAL__N_121MonomorphizeTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::MonomorphizeTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_121MonomorphizeTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i64 0 }, align 8
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh25TIntermFunctionDefinitionE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*)* @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.3 = private unnamed_addr constant [45 x i8] c"absl::container_internal::raw_hash_map<>::at\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh44MonomorphizeUnsupportedFunctionsInVulkanGLSLEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEm(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i64) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::TFunction"*, align 8
  %6 = alloca %"class.sh::TVector.31", align 8
  %7 = alloca %"class.sh::TVector.31", align 8
  %8 = alloca %"class.absl::flat_hash_map", align 8
  %9 = alloca %"class.sh::(anonymous namespace)::MonomorphizeTraverser", align 8
  %10 = alloca %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", align 8
  %11 = bitcast %"class.sh::TIntermBlock"* %1 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %12 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %12, i64 27
  %14 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %13, align 8
  %15 = tail call %"class.sh::TVector.31"* %14(%"class.sh::TIntermBlock"* %1) #7
  %16 = bitcast %"class.sh::TVector.31"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #7
  %20 = bitcast %"class.sh::TVector.31"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #7
  %21 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #7
  %24 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %15, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %15, i64 0, i32 0, i32 0, i32 1
  %27 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %26, align 8
  %28 = icmp eq %"class.sh::TIntermNode"** %25, %27
  br i1 %28, label %40, label %29

29:                                               ; preds = %4
  %30 = bitcast %"class.sh::TIntermNode"*** %22 to i64*
  %31 = bitcast %"class.sh::TVector.31"* %7 to i64*
  %32 = bitcast %"class.sh::TIntermNode"*** %23 to i64*
  %33 = bitcast %"class.sh::TIntermNode"*** %18 to i64*
  %34 = bitcast %"class.sh::TVector.31"* %6 to i64*
  %35 = bitcast %"class.sh::TIntermNode"*** %19 to i64*
  br label %57

36:                                               ; preds = %512
  %37 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %38 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %39 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  br label %40

40:                                               ; preds = %36, %4
  %41 = phi %"class.sh::TIntermNode"** [ %39, %36 ], [ null, %4 ]
  %42 = phi %"class.sh::TIntermNode"** [ %38, %36 ], [ null, %4 ]
  %43 = phi %"class.sh::TIntermNode"** [ %37, %36 ], [ null, %4 ]
  %44 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0
  %45 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector.32"* nonnull %44, %"class.sh::TIntermNode"** %43, %"class.sh::TIntermNode"** %42, %"class.sh::TIntermNode"** %41) #7
  call void @_ZN2sh12TIntermBlock18replaceAllChildrenERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVector.31"* nonnull dereferenceable(24) %6) #7
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %47 = icmp eq %"class.sh::TIntermNode"** %46, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %40
  %49 = ptrtoint %"class.sh::TIntermNode"** %46 to i64
  %50 = bitcast %"class.sh::TIntermNode"*** %22 to i64*
  store i64 %49, i64* %50, align 8
  br label %51

51:                                               ; preds = %48, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #7
  %52 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %53 = icmp eq %"class.sh::TIntermNode"** %52, null
  br i1 %53, label %515, label %54

54:                                               ; preds = %51
  %55 = ptrtoint %"class.sh::TIntermNode"** %52 to i64
  %56 = bitcast %"class.sh::TIntermNode"*** %18 to i64*
  store i64 %55, i64* %56, align 8
  br label %515

57:                                               ; preds = %512, %29
  %58 = phi %"class.sh::TIntermNode"** [ %25, %29 ], [ %513, %512 ]
  %59 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %58, align 8
  %60 = ptrtoint %"class.sh::TIntermNode"* %59 to i64
  %61 = bitcast %"class.sh::TIntermNode"* %59 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %62 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %62, i64 6
  %64 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %63, align 8
  %65 = tail call %"class.sh::TIntermFunctionDefinition"* %64(%"class.sh::TIntermNode"* %59) #7
  %66 = icmp eq %"class.sh::TIntermFunctionDefinition"* %65, null
  br i1 %66, label %67, label %74

67:                                               ; preds = %57
  %68 = bitcast %"class.sh::TIntermNode"* %59 to %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)***
  %69 = load %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)*** %68, align 8
  %70 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)** %69, i64 9
  %71 = load %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)** %70, align 8
  %72 = tail call %"class.sh::TIntermFunctionPrototype"* %71(%"class.sh::TIntermNode"* %59) #7
  %73 = icmp eq %"class.sh::TIntermFunctionPrototype"* %72, null
  br i1 %73, label %293, label %74

74:                                               ; preds = %67, %57
  %75 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %76 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %77 = icmp eq %"class.sh::TIntermNode"** %75, %76
  %78 = ptrtoint %"class.sh::TIntermNode"** %76 to i64
  br i1 %77, label %83, label %79

79:                                               ; preds = %74
  %80 = bitcast %"class.sh::TIntermNode"** %75 to i64*
  store i64 %60, i64* %80, align 8
  %81 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 1
  %82 = ptrtoint %"class.sh::TIntermNode"** %81 to i64
  store i64 %82, i64* %30, align 8
  br label %512

83:                                               ; preds = %74
  %84 = ptrtoint %"class.sh::TIntermNode"** %75 to i64
  %85 = load i64, i64* %31, align 8
  %86 = sub i64 %84, %85
  %87 = ashr exact i64 %86, 3
  %88 = add nsw i64 %87, 1
  %89 = icmp ugt i64 %88, 2305843009213693951
  br i1 %89, label %90, label %92

90:                                               ; preds = %83
  %91 = bitcast %"class.sh::TVector.31"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %91) #13
  unreachable

92:                                               ; preds = %83
  %93 = sub i64 %78, %85
  %94 = ashr exact i64 %93, 3
  %95 = icmp ult i64 %94, 1152921504606846975
  br i1 %95, label %96, label %101

96:                                               ; preds = %92
  %97 = ashr exact i64 %93, 2
  %98 = icmp ult i64 %97, %88
  %99 = select i1 %98, i64 %88, i64 %97
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %96, %92
  %102 = phi i64 [ %99, %96 ], [ 2305843009213693951, %92 ]
  %103 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %104 = shl i64 %102, 3
  %105 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %103, i64 %104) #7
  %106 = bitcast i8* %105 to %"class.sh::TIntermNode"**
  br label %107

107:                                              ; preds = %101, %96
  %108 = phi i64 [ %102, %101 ], [ 0, %96 ]
  %109 = phi %"class.sh::TIntermNode"** [ %106, %101 ], [ null, %96 ]
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 %87
  %111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 %108
  %112 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %113 = bitcast %"class.sh::TIntermNode"** %110 to i64*
  store i64 %60, i64* %113, align 8
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 1
  %115 = ptrtoint %"class.sh::TIntermNode"** %114 to i64
  %116 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %117 = ptrtoint %"class.sh::TIntermNode"** %116 to i64
  %118 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %119 = icmp eq %"class.sh::TIntermNode"** %118, %116
  br i1 %119, label %290, label %120

120:                                              ; preds = %107
  %121 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %122 = ptrtoint %"class.sh::TIntermNode"** %121 to i64
  %123 = sub i64 %122, %117
  %124 = lshr i64 %123, 3
  %125 = add nuw nsw i64 %124, 1
  %126 = icmp ult i64 %125, 4
  br i1 %126, label %220, label %127

127:                                              ; preds = %120
  %128 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -1
  %129 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %130 = ptrtoint %"class.sh::TIntermNode"** %129 to i64
  %131 = sub i64 %130, %117
  %132 = lshr i64 %131, 3
  %133 = sub nsw i64 %87, %132
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 %133
  %135 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %136 = sub nsw i64 0, %132
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 %136
  %138 = icmp ult %"class.sh::TIntermNode"** %134, %118
  %139 = icmp ult %"class.sh::TIntermNode"** %137, %110
  %140 = and i1 %138, %139
  br i1 %140, label %220, label %141

141:                                              ; preds = %127
  %142 = and i64 %125, 4611686018427387900
  %143 = sub nsw i64 0, %142
  %144 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 %143
  %145 = sub nsw i64 0, %142
  %146 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 %145
  %147 = add nsw i64 %142, -4
  %148 = lshr exact i64 %147, 2
  %149 = add nuw nsw i64 %148, 1
  %150 = and i64 %149, 1
  %151 = icmp eq i64 %147, 0
  br i1 %151, label %196, label %152

152:                                              ; preds = %141
  %153 = sub nuw nsw i64 %149, %150
  %154 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %155 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %156 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %157 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  br label %158

158:                                              ; preds = %158, %152
  %159 = phi i64 [ 0, %152 ], [ %193, %158 ]
  %160 = phi i64 [ %153, %152 ], [ %194, %158 ]
  %161 = sub i64 0, %159
  %162 = sub i64 0, %159
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %154, i64 %161
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 %162
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %166 = bitcast %"class.sh::TIntermNode"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !2
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -2
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %170 = bitcast %"class.sh::TIntermNode"** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !2
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 -1
  %173 = bitcast %"class.sh::TIntermNode"** %172 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %173, align 8, !alias.scope !5, !noalias !2
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 -2
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %174, i64 -1
  %176 = bitcast %"class.sh::TIntermNode"** %175 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %176, align 8, !alias.scope !5, !noalias !2
  %177 = sub nuw nsw i64 -4, %159
  %178 = sub nuw nsw i64 -4, %159
  %179 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 %177
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 %178
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -1
  %182 = bitcast %"class.sh::TIntermNode"** %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !2
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -2
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %186 = bitcast %"class.sh::TIntermNode"** %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8, !alias.scope !2
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -1
  %189 = bitcast %"class.sh::TIntermNode"** %188 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %189, align 8, !alias.scope !5, !noalias !2
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %192, align 8, !alias.scope !5, !noalias !2
  %193 = add i64 %159, 8
  %194 = add i64 %160, -2
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %158, !llvm.loop !7

196:                                              ; preds = %158, %141
  %197 = phi i64 [ 0, %141 ], [ %193, %158 ]
  %198 = icmp eq i64 %150, 0
  br i1 %198, label %218, label %199

199:                                              ; preds = %196
  %200 = sub i64 0, %197
  %201 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %202 = sub i64 0, %197
  %203 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 %200
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 %202
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -1
  %207 = bitcast %"class.sh::TIntermNode"** %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !alias.scope !2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -2
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 -1
  %211 = bitcast %"class.sh::TIntermNode"** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !2
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -1
  %214 = bitcast %"class.sh::TIntermNode"** %213 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %214, align 8, !alias.scope !5, !noalias !2
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -2
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -1
  %217 = bitcast %"class.sh::TIntermNode"** %216 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %217, align 8, !alias.scope !5, !noalias !2
  br label %218

218:                                              ; preds = %196, %199
  %219 = icmp eq i64 %125, %142
  br i1 %219, label %290, label %220

220:                                              ; preds = %218, %127, %120
  %221 = phi %"class.sh::TIntermNode"** [ %110, %127 ], [ %110, %120 ], [ %144, %218 ]
  %222 = phi %"class.sh::TIntermNode"** [ %118, %127 ], [ %118, %120 ], [ %146, %218 ]
  %223 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %222, i64 -1
  %224 = ptrtoint %"class.sh::TIntermNode"** %223 to i64
  %225 = sub i64 %224, %117
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = and i64 %227, 7
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %241, label %230

230:                                              ; preds = %220, %230
  %231 = phi %"class.sh::TIntermNode"** [ %234, %230 ], [ %221, %220 ]
  %232 = phi %"class.sh::TIntermNode"** [ %235, %230 ], [ %222, %220 ]
  %233 = phi i64 [ %239, %230 ], [ %228, %220 ]
  %234 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 -1
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %232, i64 -1
  %236 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.sh::TIntermNode"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = add i64 %233, -1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %230, !llvm.loop !9

241:                                              ; preds = %230, %220
  %242 = phi %"class.sh::TIntermNode"** [ undef, %220 ], [ %234, %230 ]
  %243 = phi %"class.sh::TIntermNode"** [ %221, %220 ], [ %234, %230 ]
  %244 = phi %"class.sh::TIntermNode"** [ %222, %220 ], [ %235, %230 ]
  %245 = icmp ult i64 %225, 56
  br i1 %245, label %290, label %246

246:                                              ; preds = %241, %246
  %247 = phi %"class.sh::TIntermNode"** [ %284, %246 ], [ %243, %241 ]
  %248 = phi %"class.sh::TIntermNode"** [ %285, %246 ], [ %244, %241 ]
  %249 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -1
  %251 = bitcast %"class.sh::TIntermNode"** %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"class.sh::TIntermNode"** %249 to i64*
  store i64 %252, i64* %253, align 8
  %254 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -2
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -2
  %256 = bitcast %"class.sh::TIntermNode"** %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.sh::TIntermNode"** %254 to i64*
  store i64 %257, i64* %258, align 8
  %259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -3
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -3
  %261 = bitcast %"class.sh::TIntermNode"** %260 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = bitcast %"class.sh::TIntermNode"** %259 to i64*
  store i64 %262, i64* %263, align 8
  %264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -4
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -4
  %266 = bitcast %"class.sh::TIntermNode"** %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast %"class.sh::TIntermNode"** %264 to i64*
  store i64 %267, i64* %268, align 8
  %269 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -5
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -5
  %271 = bitcast %"class.sh::TIntermNode"** %270 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = bitcast %"class.sh::TIntermNode"** %269 to i64*
  store i64 %272, i64* %273, align 8
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -6
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -6
  %276 = bitcast %"class.sh::TIntermNode"** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = bitcast %"class.sh::TIntermNode"** %274 to i64*
  store i64 %277, i64* %278, align 8
  %279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -7
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -7
  %281 = bitcast %"class.sh::TIntermNode"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"class.sh::TIntermNode"** %279 to i64*
  store i64 %282, i64* %283, align 8
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -8
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 -8
  %286 = bitcast %"class.sh::TIntermNode"** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %"class.sh::TIntermNode"** %284 to i64*
  store i64 %287, i64* %288, align 8
  %289 = icmp eq %"class.sh::TIntermNode"** %285, %116
  br i1 %289, label %290, label %246, !llvm.loop !11

290:                                              ; preds = %241, %246, %218, %107
  %291 = phi %"class.sh::TIntermNode"** [ %110, %107 ], [ %144, %218 ], [ %242, %241 ], [ %284, %246 ]
  %292 = ptrtoint %"class.sh::TIntermNode"** %291 to i64
  store i64 %292, i64* %31, align 8
  store i64 %115, i64* %30, align 8
  store i64 %112, i64* %32, align 8
  br label %512

293:                                              ; preds = %67
  %294 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %295 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %19, align 8
  %296 = icmp eq %"class.sh::TIntermNode"** %294, %295
  %297 = ptrtoint %"class.sh::TIntermNode"** %295 to i64
  br i1 %296, label %302, label %298

298:                                              ; preds = %293
  %299 = bitcast %"class.sh::TIntermNode"** %294 to i64*
  store i64 %60, i64* %299, align 8
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 1
  %301 = ptrtoint %"class.sh::TIntermNode"** %300 to i64
  store i64 %301, i64* %33, align 8
  br label %512

302:                                              ; preds = %293
  %303 = ptrtoint %"class.sh::TIntermNode"** %294 to i64
  %304 = load i64, i64* %34, align 8
  %305 = sub i64 %303, %304
  %306 = ashr exact i64 %305, 3
  %307 = add nsw i64 %306, 1
  %308 = icmp ugt i64 %307, 2305843009213693951
  br i1 %308, label %309, label %311

309:                                              ; preds = %302
  %310 = bitcast %"class.sh::TVector.31"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %310) #13
  unreachable

311:                                              ; preds = %302
  %312 = sub i64 %297, %304
  %313 = ashr exact i64 %312, 3
  %314 = icmp ult i64 %313, 1152921504606846975
  br i1 %314, label %315, label %320

315:                                              ; preds = %311
  %316 = ashr exact i64 %312, 2
  %317 = icmp ult i64 %316, %307
  %318 = select i1 %317, i64 %307, i64 %316
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %326, label %320

320:                                              ; preds = %315, %311
  %321 = phi i64 [ %318, %315 ], [ 2305843009213693951, %311 ]
  %322 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %323 = shl i64 %321, 3
  %324 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %322, i64 %323) #7
  %325 = bitcast i8* %324 to %"class.sh::TIntermNode"**
  br label %326

326:                                              ; preds = %320, %315
  %327 = phi i64 [ %321, %320 ], [ 0, %315 ]
  %328 = phi %"class.sh::TIntermNode"** [ %325, %320 ], [ null, %315 ]
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %328, i64 %306
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %328, i64 %327
  %331 = ptrtoint %"class.sh::TIntermNode"** %330 to i64
  %332 = bitcast %"class.sh::TIntermNode"** %329 to i64*
  store i64 %60, i64* %332, align 8
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 1
  %334 = ptrtoint %"class.sh::TIntermNode"** %333 to i64
  %335 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %336 = ptrtoint %"class.sh::TIntermNode"** %335 to i64
  %337 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %338 = icmp eq %"class.sh::TIntermNode"** %337, %335
  br i1 %338, label %509, label %339

339:                                              ; preds = %326
  %340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %341 = ptrtoint %"class.sh::TIntermNode"** %340 to i64
  %342 = sub i64 %341, %336
  %343 = lshr i64 %342, 3
  %344 = add nuw nsw i64 %343, 1
  %345 = icmp ult i64 %344, 4
  br i1 %345, label %439, label %346

346:                                              ; preds = %339
  %347 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %328, i64 -1
  %348 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %349 = ptrtoint %"class.sh::TIntermNode"** %348 to i64
  %350 = sub i64 %349, %336
  %351 = lshr i64 %350, 3
  %352 = sub nsw i64 %306, %351
  %353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %347, i64 %352
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %355 = sub nsw i64 0, %351
  %356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %355
  %357 = icmp ult %"class.sh::TIntermNode"** %353, %337
  %358 = icmp ult %"class.sh::TIntermNode"** %356, %329
  %359 = and i1 %357, %358
  br i1 %359, label %439, label %360

360:                                              ; preds = %346
  %361 = and i64 %344, 4611686018427387900
  %362 = sub nsw i64 0, %361
  %363 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 %362
  %364 = sub nsw i64 0, %361
  %365 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 %364
  %366 = add nsw i64 %361, -4
  %367 = lshr exact i64 %366, 2
  %368 = add nuw nsw i64 %367, 1
  %369 = and i64 %368, 1
  %370 = icmp eq i64 %366, 0
  br i1 %370, label %415, label %371

371:                                              ; preds = %360
  %372 = sub nuw nsw i64 %368, %369
  %373 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 -1
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %375 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 -1
  %376 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  br label %377

377:                                              ; preds = %377, %371
  %378 = phi i64 [ 0, %371 ], [ %412, %377 ]
  %379 = phi i64 [ %372, %371 ], [ %413, %377 ]
  %380 = sub i64 0, %378
  %381 = sub i64 0, %378
  %382 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %373, i64 %380
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 %381
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -1
  %385 = bitcast %"class.sh::TIntermNode"** %384 to <2 x i64>*
  %386 = load <2 x i64>, <2 x i64>* %385, align 8, !alias.scope !12
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -2
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -1
  %389 = bitcast %"class.sh::TIntermNode"** %388 to <2 x i64>*
  %390 = load <2 x i64>, <2 x i64>* %389, align 8, !alias.scope !12
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %382, i64 -1
  %392 = bitcast %"class.sh::TIntermNode"** %391 to <2 x i64>*
  store <2 x i64> %386, <2 x i64>* %392, align 8, !alias.scope !15, !noalias !12
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %382, i64 -2
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %395 = bitcast %"class.sh::TIntermNode"** %394 to <2 x i64>*
  store <2 x i64> %390, <2 x i64>* %395, align 8, !alias.scope !15, !noalias !12
  %396 = sub nuw nsw i64 -4, %378
  %397 = sub nuw nsw i64 -4, %378
  %398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 %396
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 %397
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %401 = bitcast %"class.sh::TIntermNode"** %400 to <2 x i64>*
  %402 = load <2 x i64>, <2 x i64>* %401, align 8, !alias.scope !12
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %403, i64 -1
  %405 = bitcast %"class.sh::TIntermNode"** %404 to <2 x i64>*
  %406 = load <2 x i64>, <2 x i64>* %405, align 8, !alias.scope !12
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -1
  %408 = bitcast %"class.sh::TIntermNode"** %407 to <2 x i64>*
  store <2 x i64> %402, <2 x i64>* %408, align 8, !alias.scope !15, !noalias !12
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -2
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %411 = bitcast %"class.sh::TIntermNode"** %410 to <2 x i64>*
  store <2 x i64> %406, <2 x i64>* %411, align 8, !alias.scope !15, !noalias !12
  %412 = add i64 %378, 8
  %413 = add i64 %379, -2
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %415, label %377, !llvm.loop !17

415:                                              ; preds = %377, %360
  %416 = phi i64 [ 0, %360 ], [ %412, %377 ]
  %417 = icmp eq i64 %369, 0
  br i1 %417, label %437, label %418

418:                                              ; preds = %415
  %419 = sub i64 0, %416
  %420 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 -1
  %421 = sub i64 0, %416
  %422 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %420, i64 %419
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 %421
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -1
  %426 = bitcast %"class.sh::TIntermNode"** %425 to <2 x i64>*
  %427 = load <2 x i64>, <2 x i64>* %426, align 8, !alias.scope !12
  %428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -2
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %428, i64 -1
  %430 = bitcast %"class.sh::TIntermNode"** %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !alias.scope !12
  %432 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 -1
  %433 = bitcast %"class.sh::TIntermNode"** %432 to <2 x i64>*
  store <2 x i64> %427, <2 x i64>* %433, align 8, !alias.scope !15, !noalias !12
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 -2
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %436 = bitcast %"class.sh::TIntermNode"** %435 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %436, align 8, !alias.scope !15, !noalias !12
  br label %437

437:                                              ; preds = %415, %418
  %438 = icmp eq i64 %344, %361
  br i1 %438, label %509, label %439

439:                                              ; preds = %437, %346, %339
  %440 = phi %"class.sh::TIntermNode"** [ %329, %346 ], [ %329, %339 ], [ %363, %437 ]
  %441 = phi %"class.sh::TIntermNode"** [ %337, %346 ], [ %337, %339 ], [ %365, %437 ]
  %442 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %441, i64 -1
  %443 = ptrtoint %"class.sh::TIntermNode"** %442 to i64
  %444 = sub i64 %443, %336
  %445 = lshr i64 %444, 3
  %446 = add nuw nsw i64 %445, 1
  %447 = and i64 %446, 7
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %460, label %449

449:                                              ; preds = %439, %449
  %450 = phi %"class.sh::TIntermNode"** [ %453, %449 ], [ %440, %439 ]
  %451 = phi %"class.sh::TIntermNode"** [ %454, %449 ], [ %441, %439 ]
  %452 = phi i64 [ %458, %449 ], [ %447, %439 ]
  %453 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -1
  %454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %451, i64 -1
  %455 = bitcast %"class.sh::TIntermNode"** %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = bitcast %"class.sh::TIntermNode"** %453 to i64*
  store i64 %456, i64* %457, align 8
  %458 = add i64 %452, -1
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %449, !llvm.loop !18

460:                                              ; preds = %449, %439
  %461 = phi %"class.sh::TIntermNode"** [ undef, %439 ], [ %453, %449 ]
  %462 = phi %"class.sh::TIntermNode"** [ %440, %439 ], [ %453, %449 ]
  %463 = phi %"class.sh::TIntermNode"** [ %441, %439 ], [ %454, %449 ]
  %464 = icmp ult i64 %444, 56
  br i1 %464, label %509, label %465

465:                                              ; preds = %460, %465
  %466 = phi %"class.sh::TIntermNode"** [ %503, %465 ], [ %462, %460 ]
  %467 = phi %"class.sh::TIntermNode"** [ %504, %465 ], [ %463, %460 ]
  %468 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -1
  %469 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -1
  %470 = bitcast %"class.sh::TIntermNode"** %469 to i64*
  %471 = load i64, i64* %470, align 8
  %472 = bitcast %"class.sh::TIntermNode"** %468 to i64*
  store i64 %471, i64* %472, align 8
  %473 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -2
  %474 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -2
  %475 = bitcast %"class.sh::TIntermNode"** %474 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = bitcast %"class.sh::TIntermNode"** %473 to i64*
  store i64 %476, i64* %477, align 8
  %478 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -3
  %479 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -3
  %480 = bitcast %"class.sh::TIntermNode"** %479 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = bitcast %"class.sh::TIntermNode"** %478 to i64*
  store i64 %481, i64* %482, align 8
  %483 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -4
  %484 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -4
  %485 = bitcast %"class.sh::TIntermNode"** %484 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = bitcast %"class.sh::TIntermNode"** %483 to i64*
  store i64 %486, i64* %487, align 8
  %488 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -5
  %489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -5
  %490 = bitcast %"class.sh::TIntermNode"** %489 to i64*
  %491 = load i64, i64* %490, align 8
  %492 = bitcast %"class.sh::TIntermNode"** %488 to i64*
  store i64 %491, i64* %492, align 8
  %493 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -6
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -6
  %495 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = bitcast %"class.sh::TIntermNode"** %493 to i64*
  store i64 %496, i64* %497, align 8
  %498 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -7
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -7
  %500 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = bitcast %"class.sh::TIntermNode"** %498 to i64*
  store i64 %501, i64* %502, align 8
  %503 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -8
  %505 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = bitcast %"class.sh::TIntermNode"** %503 to i64*
  store i64 %506, i64* %507, align 8
  %508 = icmp eq %"class.sh::TIntermNode"** %504, %335
  br i1 %508, label %509, label %465, !llvm.loop !19

509:                                              ; preds = %460, %465, %437, %326
  %510 = phi %"class.sh::TIntermNode"** [ %329, %326 ], [ %363, %437 ], [ %461, %460 ], [ %503, %465 ]
  %511 = ptrtoint %"class.sh::TIntermNode"** %510 to i64
  store i64 %511, i64* %34, align 8
  store i64 %334, i64* %33, align 8
  store i64 %331, i64* %35, align 8
  br label %512

512:                                              ; preds = %509, %298, %290, %79
  %513 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %58, i64 1
  %514 = icmp eq %"class.sh::TIntermNode"** %513, %27
  br i1 %514, label %36, label %57

515:                                              ; preds = %51, %54
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #7
  %516 = bitcast %"class.absl::flat_hash_map"* %8 to i8*
  %517 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %8, i64 0, i32 0, i32 0, i32 0
  %518 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %8, i64 0, i32 0, i32 0, i32 1
  %519 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %8, i64 0, i32 0, i32 0, i32 3
  %520 = bitcast %"union.absl::container_internal::map_slot_type"** %518 to i8*
  %521 = bitcast %"class.sh::TFunction"** %5 to i8*
  %522 = bitcast %"class.sh::TFunction"** %5 to i64*
  %523 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %8, i64 0, i32 0
  %524 = bitcast %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9 to i8*
  %525 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 0
  %526 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 0, i32 0
  %527 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 1
  %528 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 2
  %529 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 3
  %530 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %9, i64 0, i32 4
  %531 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %532 = bitcast %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %10 to i8*
  %533 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %10, i64 0, i32 0
  %534 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %10, i64 0, i32 0, i32 0
  %535 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %10, i64 0, i32 1
  br label %536

536:                                              ; preds = %610, %515
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %516) #7
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %517, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %520, i8 0, i64 32, i1 false) #7
  %537 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %11, align 8
  %538 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %537, i64 27
  %539 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %538, align 8
  %540 = call %"class.sh::TVector.31"* %539(%"class.sh::TIntermBlock"* %1) #7
  %541 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %540, i64 0, i32 0, i32 0, i32 0
  %542 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %541, align 8
  %543 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %540, i64 0, i32 0, i32 0, i32 1
  %544 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %543, align 8
  %545 = icmp eq %"class.sh::TIntermNode"** %542, %544
  br i1 %545, label %574, label %546

546:                                              ; preds = %536, %571
  %547 = phi %"class.sh::TIntermNode"** [ %572, %571 ], [ %542, %536 ]
  %548 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %547, align 8
  %549 = bitcast %"class.sh::TIntermNode"* %548 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %550 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %549, align 8
  %551 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %550, i64 6
  %552 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %551, align 8
  %553 = call %"class.sh::TIntermFunctionDefinition"* %552(%"class.sh::TIntermNode"* %548) #7
  %554 = icmp eq %"class.sh::TIntermFunctionDefinition"* %553, null
  br i1 %554, label %571, label %555

555:                                              ; preds = %546
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %521) #7
  %556 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %553, i64 0, i32 1
  %557 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %556, align 8
  %558 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %557, i64 0, i32 1
  %559 = bitcast %"class.sh::TFunction"** %558 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %522, align 8
  %561 = call fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* nonnull %523, %"class.sh::TFunction"** nonnull dereferenceable(8) %5) #7
  %562 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %561, i64 0, i32 0
  store i8 0, i8* %562, align 8
  %563 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %561, i64 0, i32 1
  store %"class.sh::TIntermFunctionDefinition"* %553, %"class.sh::TIntermFunctionDefinition"** %563, align 8
  %564 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %561, i64 0, i32 2
  %565 = getelementptr inbounds %"class.sh::TVector.169", %"class.sh::TVector.169"* %564, i64 0, i32 0, i32 0, i32 0
  %566 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %565, align 8
  %567 = icmp eq %"class.sh::TIntermFunctionDefinition"** %566, null
  %568 = bitcast %"class.sh::TVector.169"* %564 to i8*
  br i1 %567, label %570, label %569

569:                                              ; preds = %555
  call void @llvm.memset.p0i8.i64(i8* align 8 %568, i8 0, i64 24, i1 false) #7
  br label %570

570:                                              ; preds = %555, %569
  call void @llvm.memset.p0i8.i64(i8* align 8 %568, i8 0, i64 24, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %521) #7
  br label %571

571:                                              ; preds = %570, %546
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %547, i64 1
  %573 = icmp eq %"class.sh::TIntermNode"** %572, %544
  br i1 %573, label %574, label %546

574:                                              ; preds = %571, %536
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %524) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %524, i8 -86, i64 184, i1 false)
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %525, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_121MonomorphizeTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %526, align 8
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %527, align 8
  store i64 %3, i64* %528, align 8
  store i8 0, i8* %529, align 8
  store %"class.absl::flat_hash_map"* %8, %"class.absl::flat_hash_map"** %530, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %525) #7
  %575 = load i8, i8* %529, align 8, !range !20
  %576 = icmp eq i8 %575, 0
  br i1 %576, label %583, label %577

577:                                              ; preds = %574
  %578 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %525, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %531) #7
  br i1 %578, label %579, label %583

579:                                              ; preds = %577
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %532) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %532, i8 -86, i64 160, i1 false)
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %533, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %534, align 8
  store %"class.absl::flat_hash_map"* %8, %"class.absl::flat_hash_map"** %535, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %533) #7
  %580 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %533, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %531) #7
  %581 = xor i1 %580, true
  %582 = zext i1 %581 to i32
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %533) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %532) #7
  br label %583

583:                                              ; preds = %574, %577, %579
  %584 = phi i32 [ %582, %579 ], [ 3, %574 ], [ 1, %577 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %525) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %524) #7
  %585 = load i64, i64* %519, align 8
  %586 = icmp eq i64 %585, 0
  br i1 %586, label %610, label %589

587:                                              ; preds = %606
  %588 = load i8*, i8** %517, align 8
  call void @_ZdlPv(i8* %588) #14
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %517, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %520, i8 0, i64 32, i1 false) #7
  br label %610

589:                                              ; preds = %583, %606
  %590 = phi i64 [ %607, %606 ], [ %585, %583 ]
  %591 = phi i64 [ %608, %606 ], [ 0, %583 ]
  %592 = load i8*, i8** %517, align 8
  %593 = getelementptr inbounds i8, i8* %592, i64 %591
  %594 = load i8, i8* %593, align 1
  %595 = icmp sgt i8 %594, -1
  br i1 %595, label %596, label %606

596:                                              ; preds = %589
  %597 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %518, align 8
  %598 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %597, i64 %591, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %599 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %598, align 8
  %600 = icmp eq %"class.sh::TIntermFunctionDefinition"** %599, null
  br i1 %600, label %606, label %601

601:                                              ; preds = %596
  %602 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %599 to i64
  %603 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %597, i64 %591, i32 0, i32 1, i32 2, i32 0, i32 0, i32 1
  %604 = bitcast %"class.sh::TIntermFunctionDefinition"*** %603 to i64*
  store i64 %602, i64* %604, align 8
  %605 = load i64, i64* %519, align 8
  br label %606

606:                                              ; preds = %601, %596, %589
  %607 = phi i64 [ %605, %601 ], [ %590, %596 ], [ %590, %589 ]
  %608 = add i64 %591, 1
  %609 = icmp eq i64 %608, %607
  br i1 %609, label %587, label %589

610:                                              ; preds = %583, %587
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %516) #7
  switch i32 %584, label %614 [
    i32 0, label %536
    i32 3, label %612
    i32 1, label %611
  ]

611:                                              ; preds = %610
  br label %612

612:                                              ; preds = %610, %611
  %613 = phi i1 [ false, %611 ], [ true, %610 ]
  ret i1 %613

614:                                              ; preds = %610
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %834

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %359, label %24

24:                                               ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %213

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %208, label %31

31:                                               ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %31
  %40 = xor i64 %26, -1
  %41 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %40
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = sub i64 %42, %7
  %44 = lshr i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %45
  %47 = add nsw i64 %26, %44
  %48 = add nsw i64 %47, 1
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %48
  %50 = icmp ult %"class.sh::TIntermNode"** %18, %49
  %51 = icmp ult %"class.sh::TIntermNode"** %29, %46
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %54
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %65
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %65
  %69 = bitcast %"class.sh::TIntermNode"** %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !21
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 2
  %72 = bitcast %"class.sh::TIntermNode"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !21
  %74 = bitcast %"class.sh::TIntermNode"** %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !24, !noalias !21
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 2
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !24, !noalias !21
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %77
  %80 = bitcast %"class.sh::TIntermNode"** %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !21
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !21
  %85 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !24, !noalias !21
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 2
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !24, !noalias !21
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %88
  %91 = bitcast %"class.sh::TIntermNode"** %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !21
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !21
  %96 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !24, !noalias !21
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 2
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !24, !noalias !21
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %99
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !21
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !21
  %107 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !24, !noalias !21
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 2
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !24, !noalias !21
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !26

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %117
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %117
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !21
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 2
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !21
  %126 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !24, !noalias !21
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !24, !noalias !21
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !27

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %31
  %135 = phi %"class.sh::TIntermNode"** [ %18, %39 ], [ %18, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %29, %39 ], [ %29, %31 ], [ %56, %132 ]
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %139 = ptrtoint %"class.sh::TIntermNode"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.sh::TIntermNode"** [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.sh::TIntermNode"** [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.sh::TIntermNode"** %146 to i64*
  %150 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 1
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !28

156:                                              ; preds = %145, %134
  %157 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.sh::TIntermNode"** [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.sh::TIntermNode"** [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  %165 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 1
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 2
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 3
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 3
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 4
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 4
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 5
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 5
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 6
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 6
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 7
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 7
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 8
  %204 = icmp eq %"class.sh::TIntermNode"** %202, %3
  br i1 %204, label %205, label %161, !llvm.loop !29

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.sh::TIntermNode"** [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.sh::TIntermNode"** %206 to i64
  br label %208

208:                                              ; preds = %205, %28
  %209 = phi i64 [ %19, %28 ], [ %207, %205 ]
  store i64 %209, i64* %23, align 8
  %210 = icmp sgt i64 %25, 0
  br i1 %210, label %211, label %834

211:                                              ; preds = %208
  %212 = inttoptr i64 %209 to %"class.sh::TIntermNode"**
  br label %213

213:                                              ; preds = %211, %24
  %214 = phi i64 [ %209, %211 ], [ %19, %24 ]
  %215 = phi %"class.sh::TIntermNode"** [ %212, %211 ], [ %18, %24 ]
  %216 = phi %"class.sh::TIntermNode"** [ %29, %211 ], [ %3, %24 ]
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %214, %218
  %220 = ashr exact i64 %219, 3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %220
  %222 = icmp ult %"class.sh::TIntermNode"** %221, %18
  br i1 %222, label %223, label %336

223:                                              ; preds = %213
  %224 = sub nsw i64 0, %220
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = xor i64 %6, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %233, label %236

233:                                              ; preds = %331, %236, %223
  %234 = phi %"class.sh::TIntermNode"** [ %215, %236 ], [ %215, %223 ], [ %254, %331 ]
  %235 = phi %"class.sh::TIntermNode"** [ %221, %236 ], [ %221, %223 ], [ %255, %331 ]
  br label %344

236:                                              ; preds = %223
  %237 = sub nsw i64 0, %220
  %238 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %237
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i8*
  %240 = xor i64 %6, -1
  %241 = getelementptr i8, i8* %239, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %244
  %246 = add nsw i64 %220, %243
  %247 = add nsw i64 %246, 1
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %247
  %249 = icmp ult %"class.sh::TIntermNode"** %215, %248
  %250 = icmp ult %"class.sh::TIntermNode"** %221, %245
  %251 = and i1 %249, %250
  br i1 %251, label %233, label %252

252:                                              ; preds = %236
  %253 = and i64 %231, 4611686018427387900
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %253
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %253
  %256 = add nsw i64 %253, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 12
  br i1 %260, label %312, label %261

261:                                              ; preds = %252
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %264
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %264
  %268 = bitcast %"class.sh::TIntermNode"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !30
  %270 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, i64 2
  %271 = bitcast %"class.sh::TIntermNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !30
  %273 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !33, !noalias !30
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 2
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !33, !noalias !30
  %276 = or i64 %264, 4
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %276
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %276
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !30
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 2
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !30
  %284 = bitcast %"class.sh::TIntermNode"** %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !33, !noalias !30
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 2
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !33, !noalias !30
  %287 = or i64 %264, 8
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %287
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !30
  %292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !30
  %295 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !33, !noalias !30
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 2
  %297 = bitcast %"class.sh::TIntermNode"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !33, !noalias !30
  %298 = or i64 %264, 12
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %298
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %298
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !30
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 2
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !30
  %306 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !33, !noalias !30
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 2
  %308 = bitcast %"class.sh::TIntermNode"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !33, !noalias !30
  %309 = add i64 %264, 16
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !35

312:                                              ; preds = %263, %252
  %313 = phi i64 [ 0, %252 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %316
  %319 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %316
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !30
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 2
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !30
  %325 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %325, align 8, !alias.scope !33, !noalias !30
  %326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 2
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %327, align 8, !alias.scope !33, !noalias !30
  %328 = add i64 %316, 4
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !36

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %231, %253
  br i1 %332, label %333, label %233

333:                                              ; preds = %344, %331
  %334 = phi %"class.sh::TIntermNode"** [ %254, %331 ], [ %351, %344 ]
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  br label %336

336:                                              ; preds = %333, %213
  %337 = phi i64 [ %335, %333 ], [ %214, %213 ]
  store i64 %337, i64* %23, align 8
  %338 = icmp eq i64 %219, 0
  br i1 %338, label %353, label %339

339:                                              ; preds = %336
  %340 = sub nsw i64 0, %220
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %340
  %342 = bitcast %"class.sh::TIntermNode"** %341 to i8*
  %343 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %342, i8* align 8 %343, i64 %219, i1 false) #7
  br label %353

344:                                              ; preds = %233, %344
  %345 = phi %"class.sh::TIntermNode"** [ %351, %344 ], [ %234, %233 ]
  %346 = phi %"class.sh::TIntermNode"** [ %350, %344 ], [ %235, %233 ]
  %347 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 1
  %352 = icmp ult %"class.sh::TIntermNode"** %350, %18
  br i1 %352, label %344, label %333, !llvm.loop !37

353:                                              ; preds = %336, %339
  %354 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %355 = sub i64 %354, %7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %834, label %357

357:                                              ; preds = %353
  %358 = bitcast %"class.sh::TIntermNode"** %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %358, i64 %355, i1 false) #7
  br label %834

359:                                              ; preds = %13
  %360 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %19, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %11
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #13
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %16, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %6, %361
  %374 = ashr exact i64 %373, 3
  br label %382

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %6, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %372, %375
  %383 = phi i64 [ %374, %372 ], [ %380, %375 ]
  %384 = phi i64 [ 2305843009213693951, %372 ], [ %378, %375 ]
  %385 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %386 = shl i64 %384, 3
  %387 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %385, i64 %386) #7
  %388 = bitcast i8* %387 to %"class.sh::TIntermNode"**
  br label %389

389:                                              ; preds = %382, %375
  %390 = phi i64 [ %383, %382 ], [ %380, %375 ]
  %391 = phi i64 [ %384, %382 ], [ 0, %375 ]
  %392 = phi %"class.sh::TIntermNode"** [ %388, %382 ], [ null, %375 ]
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %390
  %394 = ptrtoint %"class.sh::TIntermNode"** %393 to i64
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %391
  %396 = ptrtoint %"class.sh::TIntermNode"** %395 to i64
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %11
  %398 = add i64 %10, -8
  %399 = lshr i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %418, label %403

403:                                              ; preds = %389, %403
  %404 = phi %"class.sh::TIntermNode"** [ %411, %403 ], [ %393, %389 ]
  %405 = phi i64 [ %412, %403 ], [ %394, %389 ]
  %406 = phi %"class.sh::TIntermNode"** [ %413, %403 ], [ %2, %389 ]
  %407 = phi i64 [ %414, %403 ], [ %401, %389 ]
  %408 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = inttoptr i64 %405 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 1
  %414 = add i64 %407, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %403, !llvm.loop !38

416:                                              ; preds = %403
  %417 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  br label %418

418:                                              ; preds = %389, %416
  %419 = phi %"class.sh::TIntermNode"** [ %393, %389 ], [ %411, %416 ]
  %420 = phi i64 [ %394, %389 ], [ %417, %416 ]
  %421 = phi %"class.sh::TIntermNode"** [ %2, %389 ], [ %413, %416 ]
  %422 = icmp ult i64 %398, 56
  br i1 %422, label %469, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"class.sh::TIntermNode"** [ %465, %423 ], [ %419, %418 ]
  %425 = phi i64 [ %466, %423 ], [ %420, %418 ]
  %426 = phi %"class.sh::TIntermNode"** [ %467, %423 ], [ %421, %418 ]
  %427 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = inttoptr i64 %425 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 1
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 2
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 3
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 3
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 4
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 4
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 5
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 5
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 6
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 6
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 7
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 7
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 8
  %466 = ptrtoint %"class.sh::TIntermNode"** %465 to i64
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 8
  %468 = icmp eq %"class.sh::TIntermNode"** %397, %465
  br i1 %468, label %469, label %423

469:                                              ; preds = %423, %418
  %470 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %471 = ptrtoint %"class.sh::TIntermNode"** %470 to i64
  %472 = icmp eq %"class.sh::TIntermNode"** %470, %1
  br i1 %472, label %645, label %473

473:                                              ; preds = %469
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %471
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %471
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %390, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %1
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %393
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !39
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !39
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !42, !noalias !39
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !42, !noalias !39
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !39
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !39
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !42, !noalias !39
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !42, !noalias !39
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !44

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !39
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !39
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !42, !noalias !39
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !42, !noalias !39
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %393, %480 ], [ %393, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %1, %480 ], [ %1, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %471
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !45

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %470
  br i1 %641, label %642, label %598, !llvm.loop !46

642:                                              ; preds = %593, %598, %570
  %643 = phi %"class.sh::TIntermNode"** [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  br label %645

645:                                              ; preds = %642, %469
  %646 = phi i64 [ %394, %469 ], [ %644, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %393, %469 ], [ %643, %642 ]
  %648 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %649 = icmp eq %"class.sh::TIntermNode"** %648, %1
  br i1 %649, label %650, label %652

650:                                              ; preds = %645
  %651 = ptrtoint %"class.sh::TIntermNode"** %647 to i64
  br label %830

652:                                              ; preds = %645
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %654 = ptrtoint %"class.sh::TIntermNode"** %653 to i64
  %655 = sub i64 %654, %6
  %656 = lshr i64 %655, 3
  %657 = add nuw nsw i64 %656, 1
  %658 = icmp ult i64 %657, 4
  br i1 %658, label %755, label %659

659:                                              ; preds = %652
  %660 = add nsw i64 %390, %11
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %662 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  %663 = sub i64 %662, %6
  %664 = lshr i64 %663, 3
  %665 = add nsw i64 %660, %664
  %666 = add nsw i64 %665, 1
  %667 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %666
  %668 = add nuw nsw i64 %664, 1
  %669 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %668
  %670 = icmp ult %"class.sh::TIntermNode"** %397, %669
  %671 = icmp ugt %"class.sh::TIntermNode"** %667, %1
  %672 = and i1 %670, %671
  br i1 %672, label %755, label %673

673:                                              ; preds = %659
  %674 = and i64 %657, 4611686018427387900
  %675 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %676 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %677 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %674
  %678 = add nsw i64 %674, -4
  %679 = lshr exact i64 %678, 2
  %680 = add nuw nsw i64 %679, 1
  %681 = and i64 %680, 3
  %682 = icmp ult i64 %678, 12
  br i1 %682, label %734, label %683

683:                                              ; preds = %673
  %684 = sub nsw i64 %680, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i64 [ 0, %683 ], [ %731, %685 ]
  %687 = phi i64 [ %684, %683 ], [ %732, %685 ]
  %688 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %686
  %689 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %686
  %690 = bitcast %"class.sh::TIntermNode"** %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 8, !alias.scope !47
  %692 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 2
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !47
  %695 = bitcast %"class.sh::TIntermNode"** %688 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %695, align 8, !alias.scope !50, !noalias !47
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 2
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %697, align 8, !alias.scope !50, !noalias !47
  %698 = or i64 %686, 4
  %699 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %698
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %698
  %701 = bitcast %"class.sh::TIntermNode"** %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8, !alias.scope !47
  %703 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 2
  %704 = bitcast %"class.sh::TIntermNode"** %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !alias.scope !47
  %706 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %702, <2 x i64>* %706, align 8, !alias.scope !50, !noalias !47
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 2
  %708 = bitcast %"class.sh::TIntermNode"** %707 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %708, align 8, !alias.scope !50, !noalias !47
  %709 = or i64 %686, 8
  %710 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %709
  %711 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %709
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 8, !alias.scope !47
  %714 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 2
  %715 = bitcast %"class.sh::TIntermNode"** %714 to <2 x i64>*
  %716 = load <2 x i64>, <2 x i64>* %715, align 8, !alias.scope !47
  %717 = bitcast %"class.sh::TIntermNode"** %710 to <2 x i64>*
  store <2 x i64> %713, <2 x i64>* %717, align 8, !alias.scope !50, !noalias !47
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 2
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %716, <2 x i64>* %719, align 8, !alias.scope !50, !noalias !47
  %720 = or i64 %686, 12
  %721 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %720
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !47
  %725 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %722, i64 2
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  %727 = load <2 x i64>, <2 x i64>* %726, align 8, !alias.scope !47
  %728 = bitcast %"class.sh::TIntermNode"** %721 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %728, align 8, !alias.scope !50, !noalias !47
  %729 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 2
  %730 = bitcast %"class.sh::TIntermNode"** %729 to <2 x i64>*
  store <2 x i64> %727, <2 x i64>* %730, align 8, !alias.scope !50, !noalias !47
  %731 = add i64 %686, 16
  %732 = add i64 %687, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %685, !llvm.loop !52

734:                                              ; preds = %685, %673
  %735 = phi i64 [ 0, %673 ], [ %731, %685 ]
  %736 = icmp eq i64 %681, 0
  br i1 %736, label %753, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %750, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %751, %737 ], [ %681, %734 ]
  %740 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %738
  %741 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %738
  %742 = bitcast %"class.sh::TIntermNode"** %741 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !47
  %744 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 2
  %745 = bitcast %"class.sh::TIntermNode"** %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !47
  %747 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %747, align 8, !alias.scope !50, !noalias !47
  %748 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %740, i64 2
  %749 = bitcast %"class.sh::TIntermNode"** %748 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %749, align 8, !alias.scope !50, !noalias !47
  %750 = add i64 %738, 4
  %751 = add i64 %739, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %737, !llvm.loop !53

753:                                              ; preds = %737, %734
  %754 = icmp eq i64 %657, %674
  br i1 %754, label %830, label %755

755:                                              ; preds = %753, %659, %652
  %756 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %675, %753 ]
  %757 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %676, %753 ]
  %758 = phi %"class.sh::TIntermNode"** [ %1, %659 ], [ %1, %652 ], [ %677, %753 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %759
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = and i64 %764, 7
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %779, label %767

767:                                              ; preds = %755, %767
  %768 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %756, %755 ]
  %769 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %757, %755 ]
  %770 = phi %"class.sh::TIntermNode"** [ %775, %767 ], [ %758, %755 ]
  %771 = phi i64 [ %777, %767 ], [ %765, %755 ]
  %772 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  %773 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %772, align 8
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %770, i64 1
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 1
  %777 = add i64 %771, -1
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %767, !llvm.loop !54

779:                                              ; preds = %767, %755
  %780 = phi %"class.sh::TIntermNode"** [ undef, %755 ], [ %776, %767 ]
  %781 = phi %"class.sh::TIntermNode"** [ %756, %755 ], [ %776, %767 ]
  %782 = phi %"class.sh::TIntermNode"** [ %757, %755 ], [ %776, %767 ]
  %783 = phi %"class.sh::TIntermNode"** [ %758, %755 ], [ %775, %767 ]
  %784 = icmp ult i64 %762, 56
  br i1 %784, label %830, label %785

785:                                              ; preds = %779, %785
  %786 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %781, %779 ]
  %787 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %782, %779 ]
  %788 = phi %"class.sh::TIntermNode"** [ %827, %785 ], [ %783, %779 ]
  %789 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %790 = bitcast %"class.sh::TIntermNode"** %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %789, align 8
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 1
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 1
  %794 = bitcast %"class.sh::TIntermNode"** %793 to i64*
  %795 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %794, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 2
  %798 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 2
  %799 = bitcast %"class.sh::TIntermNode"** %798 to i64*
  %800 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %799, align 8
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 3
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 3
  %804 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  %805 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %804, align 8
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 4
  %808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 4
  %809 = bitcast %"class.sh::TIntermNode"** %808 to i64*
  %810 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %809, align 8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 5
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 5
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %814, align 8
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 6
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 6
  %819 = bitcast %"class.sh::TIntermNode"** %818 to i64*
  %820 = bitcast %"class.sh::TIntermNode"** %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %819, align 8
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 7
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 7
  %824 = bitcast %"class.sh::TIntermNode"** %823 to i64*
  %825 = bitcast %"class.sh::TIntermNode"** %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 8
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 8
  %829 = icmp eq %"class.sh::TIntermNode"** %827, %648
  br i1 %829, label %830, label %785, !llvm.loop !55

830:                                              ; preds = %779, %785, %753, %650
  %831 = phi %"class.sh::TIntermNode"** [ %397, %650 ], [ %675, %753 ], [ %780, %779 ], [ %828, %785 ]
  %832 = phi i64 [ %651, %650 ], [ %646, %753 ], [ %646, %785 ], [ %646, %779 ]
  %833 = ptrtoint %"class.sh::TIntermNode"** %831 to i64
  store i64 %832, i64* %360, align 8
  store i64 %833, i64* %23, align 8
  store i64 %396, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %393

834:                                              ; preds = %208, %353, %357, %4
  ret %"class.sh::TIntermNode"** %1
}

declare void @_ZN2sh12TIntermBlock18replaceAllChildrenERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermBlock"*, %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"*, %"class.sh::TFunction"** nocapture readonly dereferenceable(8)) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0
  %4 = bitcast %"class.sh::TFunction"** %1 to i64*
  %5 = load i64, i64* %4, align 8, !noalias !56
  %6 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !56
  %7 = add i64 %6, %5
  %8 = zext i64 %7 to i128
  %9 = mul nuw i128 %8, 11376068507788127593
  %10 = lshr i128 %9, 64
  %11 = xor i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = add i64 %5, %12
  %14 = zext i64 %13 to i128
  %15 = mul nuw i128 %14, 11376068507788127593
  %16 = lshr i128 %15, 64
  %17 = xor i128 %16, %15
  %18 = trunc i128 %17 to i64
  %19 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8, !noalias !56
  %21 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %22 = load i64, i64* %21, align 8, !noalias !56
  %23 = lshr i64 %18, 7
  %24 = ptrtoint i8* %20 to i64
  %25 = lshr i64 %24, 12
  %26 = xor i64 %23, %25
  %27 = trunc i128 %17 to i8
  %28 = and i8 %27, 127
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %32 = inttoptr i64 %5 to %"class.sh::TFunction"*
  br label %33

33:                                               ; preds = %63, %2
  %34 = phi i64 [ %26, %2 ], [ %65, %63 ]
  %35 = phi i64 [ 0, %2 ], [ %64, %63 ]
  %36 = and i64 %34, %22
  %37 = getelementptr inbounds i8, i8* %20, i64 %36
  %38 = bitcast i8* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1, !noalias !56
  %40 = icmp eq <16 x i8> %30, %39
  %41 = bitcast <16 x i1> %40 to i16
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %33
  %44 = zext i16 %41 to i32
  %45 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !56
  br label %46

46:                                               ; preds = %55, %43
  %47 = phi i32 [ %44, %43 ], [ %57, %55 ]
  %48 = tail call i32 @llvm.cttz.i32(i32 %47, i1 false) #7, !range !61
  %49 = zext i32 %48 to i64
  %50 = add i64 %36, %49
  %51 = and i64 %50, %22
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %45, i64 %51, i32 0, i32 0
  %53 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %52, align 8, !noalias !56
  %54 = icmp eq %"class.sh::TFunction"* %53, %32
  br i1 %54, label %75, label %55, !prof !62

55:                                               ; preds = %46
  %56 = add i32 %47, -1
  %57 = and i32 %56, %47
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %46

59:                                               ; preds = %55, %33
  %60 = icmp eq <16 x i8> %39, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %66, !prof !63

63:                                               ; preds = %59
  %64 = add i64 %35, 16
  %65 = add i64 %64, %36
  br label %33

66:                                               ; preds = %59
  %67 = tail call fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %3, i64 %18) #7, !noalias !56
  %68 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !56
  %69 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67
  %70 = load i64, i64* %4, align 8, !noalias !56
  %71 = bitcast %"union.absl::container_internal::map_slot_type"* %69 to i64*
  store i64 %70, i64* %71, align 8, !noalias !56
  %72 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67, i32 0, i32 1, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 40, i1 false) #7, !noalias !56
  %73 = load i8*, i8** %19, align 8, !noalias !56
  %74 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !56
  br label %75

75:                                               ; preds = %46, %66
  %76 = phi %"union.absl::container_internal::map_slot_type"* [ %74, %66 ], [ %45, %46 ]
  %77 = phi i8* [ %73, %66 ], [ %20, %46 ]
  %78 = phi i64 [ %67, %66 ], [ %51, %46 ]
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  %80 = icmp ne i8* %79, null
  tail call void @llvm.assume(i1 %80) #7, !noalias !56
  %81 = load i8, i8* %79, align 1
  %82 = icmp sgt i8 %81, -1
  br i1 %82, label %84, label %83, !prof !62

83:                                               ; preds = %75
  tail call void @llvm.trap() #7
  unreachable

84:                                               ; preds = %75
  %85 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %76, i64 %78, i32 0, i32 1
  ret %"struct.sh::(anonymous namespace)::FunctionData"* %85
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !61
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !62

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !61
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 48
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #14
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %119, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %115
  br i1 %24, label %119, label %118

28:                                               ; preds = %25, %115
  %29 = phi i64 [ 0, %25 ], [ %116, %115 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %115

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !61
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = load i64, i64* %35, align 8
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 0
  %97 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false) #7
  %98 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 2
  %99 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 2
  %100 = bitcast %"class.sh::TVector.169"* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 24, i1 false) #7
  %101 = bitcast %"class.sh::TVector.169"* %99 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.sh::TVector.169"* %98 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 2, i32 0, i32 0, i32 1
  %105 = bitcast %"class.sh::TIntermFunctionDefinition"*** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 2, i32 0, i32 0, i32 1
  %108 = bitcast %"class.sh::TIntermFunctionDefinition"*** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast %"class.sh::TIntermFunctionDefinition"*** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %113 = bitcast %"class.sh::TIntermFunctionDefinition"*** %112 to i64*
  store i64 %111, i64* %113, align 8
  %114 = bitcast %"class.sh::TVector.169"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 24, i1 false) #7
  br label %115

115:                                              ; preds = %28, %74
  %116 = add nuw i64 %29, 1
  %117 = icmp eq i64 %116, %8
  br i1 %117, label %27, label %28

118:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #14
  br label %119

119:                                              ; preds = %2, %27, %118
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) unnamed_addr #6 align 2 {
  %2 = alloca { i8, %"class.sh::TIntermFunctionDefinition"* }, align 8
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %4, i64 %6) #7
  %7 = getelementptr inbounds { i8, %"class.sh::TIntermFunctionDefinition"* }, { i8, %"class.sh::TIntermFunctionDefinition"* }* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %12 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %21

13:                                               ; preds = %177, %1
  %14 = phi i64 [ 0, %1 ], [ %179, %177 ]
  %15 = lshr i64 %14, 3
  %16 = sub i64 %14, %15
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %19, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret void

21:                                               ; preds = %10, %177
  %22 = phi i64 [ %8, %10 ], [ %180, %177 ]
  %23 = phi i64 [ 0, %10 ], [ %179, %177 ]
  %24 = load i8*, i8** %3, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %23
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, -2
  br i1 %27, label %28, label %177

28:                                               ; preds = %21
  %29 = ptrtoint i8* %24 to i64
  %30 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %31 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %30, i64 %23, i32 0
  %32 = bitcast %"struct.std::__1::pair"* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %12, %33
  %35 = zext i64 %34 to i128
  %36 = mul nuw i128 %35, 11376068507788127593
  %37 = lshr i128 %36, 64
  %38 = xor i128 %37, %36
  %39 = trunc i128 %38 to i64
  %40 = add i64 %33, %39
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = lshr i64 %45, 7
  %47 = lshr i64 %29, 12
  %48 = xor i64 %46, %47
  %49 = and i64 %48, %22
  %50 = getelementptr inbounds i8, i8* %24, i64 %49
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1
  %53 = icmp slt <16 x i8> %52, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %28, %56
  %57 = phi i64 [ %61, %56 ], [ %49, %28 ]
  %58 = phi i64 [ %59, %56 ], [ 0, %28 ]
  %59 = add i64 %58, 16
  %60 = add i64 %59, %57
  %61 = and i64 %60, %22
  %62 = getelementptr inbounds i8, i8* %24, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = icmp slt <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %66 = bitcast <16 x i1> %65 to i16
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %56, label %68

68:                                               ; preds = %56, %28
  %69 = phi i64 [ %49, %28 ], [ %61, %56 ]
  %70 = phi i16 [ %54, %28 ], [ %66, %56 ]
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.cttz.i32(i32 %71, i1 false) #7, !range !61
  %73 = zext i32 %72 to i64
  %74 = add i64 %69, %73
  %75 = and i64 %74, %22
  %76 = sub i64 %75, %49
  %77 = sub i64 %23, %49
  %78 = xor i64 %76, %77
  %79 = and i64 %78, %22
  %80 = icmp ult i64 %79, 16
  br i1 %80, label %81, label %91, !prof !62

81:                                               ; preds = %68
  %82 = trunc i128 %44 to i8
  %83 = and i8 %82, 127
  store i8 %83, i8* %25, align 1
  %84 = load i8*, i8** %3, align 8
  %85 = add i64 %23, -15
  %86 = load i64, i64* %5, align 8
  %87 = and i64 %86, %85
  %88 = and i64 %86, 15
  %89 = add i64 %87, %88
  %90 = getelementptr inbounds i8, i8* %84, i64 %89
  store i8 %83, i8* %90, align 1
  br label %177

91:                                               ; preds = %68
  %92 = getelementptr inbounds i8, i8* %24, i64 %75
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %93, -128
  %95 = trunc i128 %44 to i8
  %96 = and i8 %95, 127
  store i8 %96, i8* %92, align 1
  %97 = load i8*, i8** %3, align 8
  %98 = add i64 %75, -15
  %99 = load i64, i64* %5, align 8
  %100 = and i64 %99, %98
  %101 = and i64 %99, 15
  %102 = add i64 %100, %101
  %103 = getelementptr inbounds i8, i8* %97, i64 %102
  store i8 %96, i8* %103, align 1
  %104 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  br i1 %94, label %105, label %134

105:                                              ; preds = %91
  %106 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %75
  %107 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23
  %108 = bitcast %"union.absl::container_internal::map_slot_type"* %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"union.absl::container_internal::map_slot_type"* %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %75, i32 0, i32 1, i32 0
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false) #7
  %113 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %75, i32 0, i32 1, i32 2
  %114 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 2
  %115 = bitcast %"class.sh::TVector.169"* %113 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 24, i1 false) #7
  %116 = bitcast %"class.sh::TVector.169"* %114 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 8
  %118 = bitcast %"class.sh::TVector.169"* %113 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %118, align 8
  %119 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast %"class.sh::TIntermFunctionDefinition"*** %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %75, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %123 = bitcast %"class.sh::TIntermFunctionDefinition"*** %122 to i64*
  store i64 %121, i64* %123, align 8
  %124 = bitcast %"class.sh::TVector.169"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 24, i1 false) #7
  %125 = load i8*, i8** %3, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 %23
  store i8 -128, i8* %126, align 1
  %127 = load i8*, i8** %3, align 8
  %128 = add i64 %23, -15
  %129 = load i64, i64* %5, align 8
  %130 = and i64 %129, %128
  %131 = and i64 %129, 15
  %132 = add i64 %130, %131
  %133 = getelementptr inbounds i8, i8* %127, i64 %132
  store i8 -128, i8* %133, align 1
  br label %177

134:                                              ; preds = %91
  %135 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23
  %136 = bitcast %"union.absl::container_internal::map_slot_type"* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %138, i64 16, i1 false)
  %139 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 2
  %140 = bitcast %"class.sh::TVector.169"* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8
  %142 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %23, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %143 = bitcast %"class.sh::TIntermFunctionDefinition"*** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.sh::TVector.169"* %139 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 24, i1 false) #7
  %146 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %147 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %23
  %148 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %75
  %149 = bitcast %"union.absl::container_internal::map_slot_type"* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"union.absl::container_internal::map_slot_type"* %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %23, i32 0, i32 1, i32 0
  %153 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %75, i32 0, i32 1, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 16, i1 false) #7
  %154 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %23, i32 0, i32 1, i32 2
  %155 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %75, i32 0, i32 1, i32 2
  %156 = bitcast %"class.sh::TVector.169"* %154 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 24, i1 false) #7
  %157 = bitcast %"class.sh::TVector.169"* %155 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8
  %159 = bitcast %"class.sh::TVector.169"* %154 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %159, align 8
  %160 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %75, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %161 = bitcast %"class.sh::TIntermFunctionDefinition"*** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %146, i64 %23, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %164 = bitcast %"class.sh::TIntermFunctionDefinition"*** %163 to i64*
  store i64 %162, i64* %164, align 8
  %165 = bitcast %"class.sh::TVector.169"* %155 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %165, i8 0, i64 24, i1 false) #7
  %166 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %167 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %166, i64 %75
  %168 = bitcast %"union.absl::container_internal::map_slot_type"* %167 to i64*
  store i64 %137, i64* %168, align 8
  %169 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %166, i64 %75, i32 0, i32 1, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %169, i8* nonnull align 8 %7, i64 16, i1 false)
  %170 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %166, i64 %75, i32 0, i32 1, i32 2
  %171 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %166, i64 %75, i32 0, i32 1, i32 2, i32 0, i32 0, i32 1
  %172 = bitcast %"class.sh::TIntermFunctionDefinition"*** %171 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 16, i1 false) #7
  %173 = bitcast %"class.sh::TVector.169"* %170 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %173, align 8
  %174 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %166, i64 %75, i32 0, i32 1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %175 = bitcast %"class.sh::TIntermFunctionDefinition"*** %174 to i64*
  store i64 %144, i64* %175, align 8
  %176 = add i64 %23, -1
  br label %177

177:                                              ; preds = %81, %134, %105, %21
  %178 = phi i64 [ %23, %21 ], [ %23, %81 ], [ %23, %105 ], [ %176, %134 ]
  %179 = add i64 %178, 1
  %180 = load i64, i64* %5, align 8
  %181 = icmp eq i64 %179, %180
  br i1 %181, label %13, label %21
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_121MonomorphizeTraverserD0Ev(%"class.sh::(anonymous namespace)::MonomorphizeTraverser"*) unnamed_addr #12 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_121MonomorphizeTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::MonomorphizeTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #5 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"class.sh::TVector.207", align 8
  %7 = alloca %"class.sh::TVector.31", align 8
  %8 = alloca %"class.sh::TVector.31", align 8
  %9 = alloca %"class.absl::flat_hash_map.215", align 8
  %10 = alloca %"class.sh::TFunction"*, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 1
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 1
  br i1 %13, label %14, label %1631

14:                                               ; preds = %3
  %15 = bitcast %"class.sh::TFunction"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7
  %16 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 5
  %17 = bitcast %"class.sh::TFunction"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TFunction"** %10 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 4
  %21 = bitcast %"class.absl::flat_hash_map"** %20 to %"class.absl::container_internal::raw_hash_map"**
  %22 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %21, align 8
  %23 = call fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %22, %"class.sh::TFunction"** nonnull dereferenceable(8) %10)
  %24 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %23, i64 0, i32 1
  %25 = load %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %24, align 8
  %26 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %23, i64 0, i32 0
  %27 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %16, align 8
  %28 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)***
  %29 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %29, i64 32
  %31 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.31"* %31(%"class.sh::TIntermAggregate"* %2) #7
  %33 = bitcast %"class.sh::TVector.207"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.sh::TVector.207", %"class.sh::TVector.207"* %6, i64 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.sh::TVector.207", %"class.sh::TVector.207"* %6, i64 0, i32 0, i32 0, i32 1
  %36 = getelementptr inbounds %"class.sh::TVector.207", %"class.sh::TVector.207"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #7
  %37 = bitcast %"class.sh::TVector.31"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #7
  %38 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 1
  %40 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 0, i64 24, i1 false) #7
  %41 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %32, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast %"class.sh::TIntermNode"*** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.sh::TVector.31"* %32 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  br i1 %46, label %566, label %47

47:                                               ; preds = %14
  %48 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %27, i64 0, i32 3
  %49 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 2
  %50 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 0, i32 8
  %51 = bitcast %"class.sh::TIntermDeclaration"** %4 to i8*
  %52 = bitcast %"class.sh::TIntermDeclaration"** %4 to i64*
  %53 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  %54 = bitcast %"class.sh::TVector.31"* %7 to i64*
  %55 = bitcast %"class.sh::TIntermNode"*** %40 to i64*
  %56 = bitcast %"struct.sh::(anonymous namespace)::Argument"** %35 to i64*
  %57 = bitcast %"class.sh::TVector.207"* %6 to i64*
  %58 = bitcast %"struct.sh::(anonymous namespace)::Argument"** %36 to i64*
  br label %63

59:                                               ; preds = %559
  %60 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %34, align 8
  %61 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %35, align 8
  %62 = icmp eq %"struct.sh::(anonymous namespace)::Argument"* %60, %61
  br i1 %62, label %566, label %567

63:                                               ; preds = %559, %47
  %64 = phi i64 [ %45, %47 ], [ %562, %559 ]
  %65 = phi i64 [ 0, %47 ], [ %560, %559 ]
  %66 = inttoptr i64 %64 to %"class.sh::TIntermNode"**
  %67 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %65
  %68 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, align 8
  %69 = bitcast %"class.sh::TIntermNode"* %68 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %70 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %69, align 8
  %71 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %70, i64 4
  %72 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %71, align 8
  %73 = call %"class.sh::TIntermTyped"* %72(%"class.sh::TIntermNode"* %68) #7
  %74 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %48, align 8
  %75 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %74, i64 %65
  %76 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %75, align 8
  %77 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %76, i64 0, i32 1
  %78 = load %"class.sh::TType"*, %"class.sh::TType"** %77, align 8
  %79 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = add i32 %80, -8
  %82 = icmp ult i32 %81, 43
  %83 = add i32 %80, -51
  %84 = icmp ult i32 %83, 33
  %85 = or i1 %82, %84
  %86 = icmp eq i32 %80, 6
  %87 = or i1 %86, %85
  br i1 %87, label %88, label %90

88:                                               ; preds = %63
  %89 = call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %78) #7
  br label %95

90:                                               ; preds = %63
  %91 = add i32 %80, -84
  %92 = icmp ult i32 %91, 6
  %93 = call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %78) #7
  %94 = or i1 %92, %93
  br i1 %94, label %95, label %559

95:                                               ; preds = %90, %88
  %96 = phi i1 [ %89, %88 ], [ %93, %90 ]
  %97 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %73, i64 0, i32 0
  %98 = bitcast %"class.sh::TIntermTyped"* %73 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %99 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %98, align 8
  %100 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %99, i64 13
  %101 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %100, align 8
  %102 = call %"class.sh::TIntermBinary"* %101(%"class.sh::TIntermNode"* %97) #7
  %103 = icmp eq %"class.sh::TIntermBinary"* %102, null
  br i1 %103, label %126, label %104

104:                                              ; preds = %95, %115
  %105 = phi i8 [ %116, %115 ], [ 0, %95 ]
  %106 = phi %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** [ %120, %115 ], [ %98, %95 ]
  %107 = phi %"class.sh::TIntermNode"* [ %119, %115 ], [ %97, %95 ]
  %108 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %106, align 8
  %109 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %108, i64 13
  %110 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %109, align 8
  %111 = call %"class.sh::TIntermBinary"* %110(%"class.sh::TIntermNode"* %107) #7
  %112 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %111, i64 0, i32 0, i32 1
  %113 = load i8, i8* %112, align 8
  switch i8 %113, label %115 [
    i8 47, label %559
    i8 46, label %114
  ]

114:                                              ; preds = %104
  br label %115

115:                                              ; preds = %114, %104
  %116 = phi i8 [ %105, %104 ], [ 1, %114 ]
  %117 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %111, i64 0, i32 2
  %118 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %117, align 8
  %119 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %118, i64 0, i32 0
  %120 = bitcast %"class.sh::TIntermTyped"* %118 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %121 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %120, align 8
  %122 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %121, i64 13
  %123 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %122, align 8
  %124 = call %"class.sh::TIntermBinary"* %123(%"class.sh::TIntermNode"* %119) #7
  %125 = icmp eq %"class.sh::TIntermBinary"* %124, null
  br i1 %125, label %126, label %104

126:                                              ; preds = %115, %95
  %127 = phi i8 [ 0, %95 ], [ %116, %115 ]
  %128 = phi %"class.sh::TIntermTyped"* [ %73, %95 ], [ %118, %115 ]
  %129 = phi %"class.sh::TIntermNode"* [ %97, %95 ], [ %119, %115 ]
  %130 = bitcast %"class.sh::TIntermTyped"* %128 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %131 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %130, align 8
  %132 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %131, i64 31
  %133 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %132, align 8
  %134 = call dereferenceable(184) %"class.sh::TType"* %133(%"class.sh::TIntermTyped"* %128) #7
  %135 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %134, i64 0, i32 2
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, 6
  br i1 %137, label %138, label %559

138:                                              ; preds = %126
  %139 = bitcast %"class.sh::TIntermTyped"* %128 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %140 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %139, align 8
  %141 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %140, i64 19
  %142 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %141, align 8
  %143 = call %"class.sh::TIntermSymbol"* %142(%"class.sh::TIntermNode"* %129) #7
  %144 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %143, i64 0, i32 1
  %145 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %144, align 8
  %146 = icmp eq %"class.sh::TVariable"* %145, null
  br i1 %146, label %559, label %147

147:                                              ; preds = %138
  %148 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %145, i64 0, i32 1
  %149 = load %"class.sh::TType"*, %"class.sh::TType"** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %149, i64 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = add i32 %151, -8
  %153 = icmp ult i32 %152, 43
  %154 = add i32 %151, -51
  %155 = icmp ult i32 %154, 33
  %156 = or i1 %153, %155
  br i1 %156, label %163, label %157

157:                                              ; preds = %147
  %158 = load %"class.sh::TType"*, %"class.sh::TType"** %77, align 8
  %159 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %158, i64 0, i32 10, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = icmp ne i64 %160, 0
  %162 = icmp eq i32 %151, 6
  br label %181

163:                                              ; preds = %147
  %164 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %149, i64 0, i32 10, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = icmp ugt i64 %165, 1
  %167 = load %"class.sh::TType"*, %"class.sh::TType"** %77, align 8
  %168 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %167, i64 0, i32 10, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = icmp ne i64 %169, 0
  %171 = icmp eq i32 %151, 10
  br i1 %171, label %172, label %176

172:                                              ; preds = %163
  %173 = load i64, i64* %49, align 8
  %174 = and i64 %173, 4398046511104
  %175 = icmp ne i64 %174, 0
  br label %181

176:                                              ; preds = %163
  br i1 %155, label %177, label %181

177:                                              ; preds = %176
  %178 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %149, i64 0, i32 7, i32 7
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 3
  br label %181

181:                                              ; preds = %177, %176, %172, %157
  %182 = phi i1 [ false, %176 ], [ false, %177 ], [ false, %157 ], [ %175, %172 ]
  %183 = phi i1 [ %166, %176 ], [ %166, %177 ], [ false, %157 ], [ %166, %172 ]
  %184 = phi i1 [ %170, %176 ], [ %170, %177 ], [ %161, %157 ], [ %170, %172 ]
  %185 = phi i1 [ false, %176 ], [ false, %177 ], [ %162, %157 ], [ false, %172 ]
  %186 = phi i1 [ false, %176 ], [ %180, %177 ], [ false, %157 ], [ false, %172 ]
  br i1 %96, label %196, label %187

187:                                              ; preds = %181
  %188 = icmp eq i8 %127, 0
  %189 = xor i1 %184, true
  %190 = or i1 %188, %189
  br i1 %190, label %191, label %196

191:                                              ; preds = %187
  %192 = and i1 %183, %184
  %193 = or i1 %192, %185
  %194 = or i1 %182, %193
  %195 = or i1 %186, %194
  br i1 %195, label %196, label %559

196:                                              ; preds = %191, %187, %181
  %197 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %50, align 8
  %198 = bitcast %"class.sh::TIntermTyped"* %73 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %199 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %198, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %199, i64 23
  %201 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %200, align 8
  %202 = call %"class.sh::TIntermTyped"* %201(%"class.sh::TIntermTyped"* %73) #7
  %203 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %202, i64 0, i32 0
  %204 = bitcast %"class.sh::TIntermTyped"* %202 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %205 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %204, align 8
  %206 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %205, i64 13
  %207 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %206, align 8
  %208 = call %"class.sh::TIntermBinary"* %207(%"class.sh::TIntermNode"* %203) #7
  %209 = icmp eq %"class.sh::TIntermBinary"* %208, null
  br i1 %209, label %465, label %210

210:                                              ; preds = %196, %455
  %211 = phi %"class.sh::TIntermBinary"* [ %463, %455 ], [ %208, %196 ]
  %212 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %211, i64 0, i32 0, i32 1
  %213 = load i8, i8* %212, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %211, i64 0, i32 3
  %215 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %214, align 8
  switch i8 %213, label %216 [
    i8 46, label %465
    i8 44, label %455
  ]

216:                                              ; preds = %210
  %217 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %215, i64 0, i32 0
  %218 = bitcast %"class.sh::TIntermTyped"* %215 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %219 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %218, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %219, i64 19
  %221 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %220, align 8
  %222 = call %"class.sh::TIntermSymbol"* %221(%"class.sh::TIntermNode"* %217) #7
  %223 = icmp eq %"class.sh::TIntermSymbol"* %222, null
  br i1 %223, label %224, label %455

224:                                              ; preds = %216
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #7
  store %"class.sh::TIntermDeclaration"* null, %"class.sh::TIntermDeclaration"** %4, align 8
  %225 = call %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"* %197, %"class.sh::TIntermTyped"* %215, i32 0, %"class.sh::TIntermDeclaration"** nonnull %4) #7
  %226 = load i64, i64* %52, align 8
  %227 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %39, align 8
  %228 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %229 = icmp ult %"class.sh::TIntermNode"** %227, %228
  %230 = ptrtoint %"class.sh::TIntermNode"** %228 to i64
  br i1 %229, label %231, label %235

231:                                              ; preds = %224
  %232 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  store i64 %226, i64* %232, align 8
  %233 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %227, i64 1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  store i64 %234, i64* %53, align 8
  br label %445

235:                                              ; preds = %224
  %236 = ptrtoint %"class.sh::TIntermNode"** %227 to i64
  %237 = load i64, i64* %54, align 8
  %238 = sub i64 %236, %237
  %239 = ashr exact i64 %238, 3
  %240 = add nsw i64 %239, 1
  %241 = icmp ugt i64 %240, 2305843009213693951
  br i1 %241, label %242, label %244

242:                                              ; preds = %235
  %243 = bitcast %"class.sh::TVector.31"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %243) #13
  unreachable

244:                                              ; preds = %235
  %245 = sub i64 %230, %237
  %246 = ashr exact i64 %245, 3
  %247 = icmp ult i64 %246, 1152921504606846975
  br i1 %247, label %248, label %253

248:                                              ; preds = %244
  %249 = ashr exact i64 %245, 2
  %250 = icmp ult i64 %249, %240
  %251 = select i1 %250, i64 %240, i64 %249
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %259, label %253

253:                                              ; preds = %248, %244
  %254 = phi i64 [ %251, %248 ], [ 2305843009213693951, %244 ]
  %255 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %256 = shl i64 %254, 3
  %257 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %255, i64 %256) #7
  %258 = bitcast i8* %257 to %"class.sh::TIntermNode"**
  br label %259

259:                                              ; preds = %253, %248
  %260 = phi i64 [ %254, %253 ], [ 0, %248 ]
  %261 = phi %"class.sh::TIntermNode"** [ %258, %253 ], [ null, %248 ]
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 %239
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 %260
  %264 = ptrtoint %"class.sh::TIntermNode"** %263 to i64
  %265 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %226, i64* %265, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 1
  %267 = ptrtoint %"class.sh::TIntermNode"** %266 to i64
  %268 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %269 = ptrtoint %"class.sh::TIntermNode"** %268 to i64
  %270 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %39, align 8
  %271 = icmp eq %"class.sh::TIntermNode"** %270, %268
  br i1 %271, label %442, label %272

272:                                              ; preds = %259
  %273 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %274 = ptrtoint %"class.sh::TIntermNode"** %273 to i64
  %275 = sub i64 %274, %269
  %276 = lshr i64 %275, 3
  %277 = add nuw nsw i64 %276, 1
  %278 = icmp ult i64 %277, 4
  br i1 %278, label %372, label %279

279:                                              ; preds = %272
  %280 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 -1
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %282 = ptrtoint %"class.sh::TIntermNode"** %281 to i64
  %283 = sub i64 %282, %269
  %284 = lshr i64 %283, 3
  %285 = sub nsw i64 %239, %284
  %286 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 %285
  %287 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %288 = sub nsw i64 0, %284
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 %288
  %290 = icmp ult %"class.sh::TIntermNode"** %286, %270
  %291 = icmp ult %"class.sh::TIntermNode"** %289, %262
  %292 = and i1 %290, %291
  br i1 %292, label %372, label %293

293:                                              ; preds = %279
  %294 = and i64 %277, 4611686018427387900
  %295 = sub nsw i64 0, %294
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 %295
  %297 = sub nsw i64 0, %294
  %298 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 %297
  %299 = add nsw i64 %294, -4
  %300 = lshr exact i64 %299, 2
  %301 = add nuw nsw i64 %300, 1
  %302 = and i64 %301, 1
  %303 = icmp eq i64 %299, 0
  br i1 %303, label %348, label %304

304:                                              ; preds = %293
  %305 = sub nuw nsw i64 %301, %302
  %306 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %308 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %309 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  br label %310

310:                                              ; preds = %310, %304
  %311 = phi i64 [ 0, %304 ], [ %345, %310 ]
  %312 = phi i64 [ %305, %304 ], [ %346, %310 ]
  %313 = sub i64 0, %311
  %314 = sub i64 0, %311
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %306, i64 %313
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 %314
  %317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %316, i64 -1
  %318 = bitcast %"class.sh::TIntermNode"** %317 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %318, align 8, !alias.scope !64
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %316, i64 -2
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %320, i64 -1
  %322 = bitcast %"class.sh::TIntermNode"** %321 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %322, align 8, !alias.scope !64
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 -1
  %325 = bitcast %"class.sh::TIntermNode"** %324 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %325, align 8, !alias.scope !67, !noalias !64
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 -2
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %326, i64 -1
  %328 = bitcast %"class.sh::TIntermNode"** %327 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %328, align 8, !alias.scope !67, !noalias !64
  %329 = sub nuw nsw i64 -4, %311
  %330 = sub nuw nsw i64 -4, %311
  %331 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 %329
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 %330
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -1
  %334 = bitcast %"class.sh::TIntermNode"** %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8, !alias.scope !64
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -2
  %337 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %336, i64 -1
  %338 = bitcast %"class.sh::TIntermNode"** %337 to <2 x i64>*
  %339 = load <2 x i64>, <2 x i64>* %338, align 8, !alias.scope !64
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %341 = bitcast %"class.sh::TIntermNode"** %340 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %341, align 8, !alias.scope !67, !noalias !64
  %342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -2
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %342, i64 -1
  %344 = bitcast %"class.sh::TIntermNode"** %343 to <2 x i64>*
  store <2 x i64> %339, <2 x i64>* %344, align 8, !alias.scope !67, !noalias !64
  %345 = add i64 %311, 8
  %346 = add i64 %312, -2
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %310, !llvm.loop !69

348:                                              ; preds = %310, %293
  %349 = phi i64 [ 0, %293 ], [ %345, %310 ]
  %350 = icmp eq i64 %302, 0
  br i1 %350, label %370, label %351

351:                                              ; preds = %348
  %352 = sub i64 0, %349
  %353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %354 = sub i64 0, %349
  %355 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %353, i64 %352
  %357 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 %354
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %359 = bitcast %"class.sh::TIntermNode"** %358 to <2 x i64>*
  %360 = load <2 x i64>, <2 x i64>* %359, align 8, !alias.scope !64
  %361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %362 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %361, i64 -1
  %363 = bitcast %"class.sh::TIntermNode"** %362 to <2 x i64>*
  %364 = load <2 x i64>, <2 x i64>* %363, align 8, !alias.scope !64
  %365 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %366 = bitcast %"class.sh::TIntermNode"** %365 to <2 x i64>*
  store <2 x i64> %360, <2 x i64>* %366, align 8, !alias.scope !67, !noalias !64
  %367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 -1
  %369 = bitcast %"class.sh::TIntermNode"** %368 to <2 x i64>*
  store <2 x i64> %364, <2 x i64>* %369, align 8, !alias.scope !67, !noalias !64
  br label %370

370:                                              ; preds = %348, %351
  %371 = icmp eq i64 %277, %294
  br i1 %371, label %442, label %372

372:                                              ; preds = %370, %279, %272
  %373 = phi %"class.sh::TIntermNode"** [ %262, %279 ], [ %262, %272 ], [ %296, %370 ]
  %374 = phi %"class.sh::TIntermNode"** [ %270, %279 ], [ %270, %272 ], [ %298, %370 ]
  %375 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 -1
  %376 = ptrtoint %"class.sh::TIntermNode"** %375 to i64
  %377 = sub i64 %376, %269
  %378 = lshr i64 %377, 3
  %379 = add nuw nsw i64 %378, 1
  %380 = and i64 %379, 7
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %393, label %382

382:                                              ; preds = %372, %382
  %383 = phi %"class.sh::TIntermNode"** [ %386, %382 ], [ %373, %372 ]
  %384 = phi %"class.sh::TIntermNode"** [ %387, %382 ], [ %374, %372 ]
  %385 = phi i64 [ %391, %382 ], [ %380, %372 ]
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -1
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %388 = bitcast %"class.sh::TIntermNode"** %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast %"class.sh::TIntermNode"** %386 to i64*
  store i64 %389, i64* %390, align 8
  %391 = add i64 %385, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %382, !llvm.loop !70

393:                                              ; preds = %382, %372
  %394 = phi %"class.sh::TIntermNode"** [ undef, %372 ], [ %386, %382 ]
  %395 = phi %"class.sh::TIntermNode"** [ %373, %372 ], [ %386, %382 ]
  %396 = phi %"class.sh::TIntermNode"** [ %374, %372 ], [ %387, %382 ]
  %397 = icmp ult i64 %377, 56
  br i1 %397, label %442, label %398

398:                                              ; preds = %393, %398
  %399 = phi %"class.sh::TIntermNode"** [ %436, %398 ], [ %395, %393 ]
  %400 = phi %"class.sh::TIntermNode"** [ %437, %398 ], [ %396, %393 ]
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %403 = bitcast %"class.sh::TIntermNode"** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast %"class.sh::TIntermNode"** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -2
  %408 = bitcast %"class.sh::TIntermNode"** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -3
  %412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -3
  %413 = bitcast %"class.sh::TIntermNode"** %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %"class.sh::TIntermNode"** %411 to i64*
  store i64 %414, i64* %415, align 8
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -4
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -4
  %418 = bitcast %"class.sh::TIntermNode"** %417 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.sh::TIntermNode"** %416 to i64*
  store i64 %419, i64* %420, align 8
  %421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -5
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -5
  %423 = bitcast %"class.sh::TIntermNode"** %422 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.sh::TIntermNode"** %421 to i64*
  store i64 %424, i64* %425, align 8
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -6
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -6
  %428 = bitcast %"class.sh::TIntermNode"** %427 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  store i64 %429, i64* %430, align 8
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -7
  %432 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -7
  %433 = bitcast %"class.sh::TIntermNode"** %432 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  store i64 %434, i64* %435, align 8
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -8
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -8
  %438 = bitcast %"class.sh::TIntermNode"** %437 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  store i64 %439, i64* %440, align 8
  %441 = icmp eq %"class.sh::TIntermNode"** %437, %268
  br i1 %441, label %442, label %398, !llvm.loop !71

442:                                              ; preds = %393, %398, %370, %259
  %443 = phi %"class.sh::TIntermNode"** [ %262, %259 ], [ %296, %370 ], [ %394, %393 ], [ %436, %398 ]
  %444 = ptrtoint %"class.sh::TIntermNode"** %443 to i64
  store i64 %444, i64* %54, align 8
  store i64 %267, i64* %53, align 8
  store i64 %264, i64* %55, align 8
  br label %445

445:                                              ; preds = %442, %231
  %446 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %447 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %446, i64 32) #7
  %448 = bitcast i8* %447 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %448, %"class.sh::TVariable"* %225) #7
  %449 = bitcast i8* %447 to %"class.sh::TIntermNode"*
  %450 = bitcast %"class.sh::TIntermBinary"* %211 to i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)***
  %451 = load i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)**, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*** %450, align 8
  %452 = getelementptr inbounds i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %451, i64 26
  %453 = load i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %452, align 8
  %454 = call zeroext i1 %453(%"class.sh::TIntermBinary"* nonnull %211, %"class.sh::TIntermNode"* %217, %"class.sh::TIntermNode"* %449) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #7
  br label %455

455:                                              ; preds = %445, %216, %210
  %456 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %211, i64 0, i32 2
  %457 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %456, align 8
  %458 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %457, i64 0, i32 0
  %459 = bitcast %"class.sh::TIntermTyped"* %457 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %460 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %459, align 8
  %461 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %460, i64 13
  %462 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %461, align 8
  %463 = call %"class.sh::TIntermBinary"* %462(%"class.sh::TIntermNode"* %458) #7
  %464 = icmp eq %"class.sh::TIntermBinary"* %463, null
  br i1 %464, label %465, label %210

465:                                              ; preds = %455, %210, %196
  %466 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %35, align 8
  %467 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %36, align 8
  %468 = icmp ult %"struct.sh::(anonymous namespace)::Argument"* %466, %467
  %469 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %467 to i64
  br i1 %468, label %470, label %475

470:                                              ; preds = %465
  %471 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %466, i64 0, i32 0
  store i64 %65, i64* %471, align 8
  %472 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %466, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %202, %"class.sh::TIntermTyped"** %472, align 8
  %473 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %466, i64 1
  %474 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %473 to i64
  store i64 %474, i64* %56, align 8
  br label %559

475:                                              ; preds = %465
  %476 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %466 to i64
  %477 = load i64, i64* %57, align 8
  %478 = sub i64 %476, %477
  %479 = ashr exact i64 %478, 4
  %480 = add nsw i64 %479, 1
  %481 = icmp ugt i64 %480, 1152921504606846975
  br i1 %481, label %482, label %484

482:                                              ; preds = %475
  %483 = bitcast %"class.sh::TVector.207"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %483) #13
  unreachable

484:                                              ; preds = %475
  %485 = sub i64 %469, %477
  %486 = ashr exact i64 %485, 4
  %487 = icmp ult i64 %486, 576460752303423487
  br i1 %487, label %488, label %493

488:                                              ; preds = %484
  %489 = ashr exact i64 %485, 3
  %490 = icmp ult i64 %489, %480
  %491 = select i1 %490, i64 %480, i64 %489
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %499, label %493

493:                                              ; preds = %488, %484
  %494 = phi i64 [ %491, %488 ], [ 1152921504606846975, %484 ]
  %495 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %496 = shl i64 %494, 4
  %497 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %495, i64 %496) #7
  %498 = bitcast i8* %497 to %"struct.sh::(anonymous namespace)::Argument"*
  br label %499

499:                                              ; preds = %493, %488
  %500 = phi i64 [ %494, %493 ], [ 0, %488 ]
  %501 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %498, %493 ], [ null, %488 ]
  %502 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %501, i64 %479
  %503 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %501, i64 %500
  %504 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %503 to i64
  %505 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %502, i64 0, i32 0
  store i64 %65, i64* %505, align 8
  %506 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %501, i64 %479, i32 1
  store %"class.sh::TIntermTyped"* %202, %"class.sh::TIntermTyped"** %506, align 8
  %507 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %502, i64 1
  %508 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %507 to i64
  %509 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %34, align 8
  %510 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %35, align 8
  %511 = icmp eq %"struct.sh::(anonymous namespace)::Argument"* %510, %509
  br i1 %511, label %556, label %512

512:                                              ; preds = %499
  %513 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %509 to i64
  %514 = getelementptr %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %510, i64 -1
  %515 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %514 to i64
  %516 = sub i64 %515, %513
  %517 = lshr i64 %516, 4
  %518 = add nuw nsw i64 %517, 1
  %519 = and i64 %518, 3
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %531, label %521

521:                                              ; preds = %512, %521
  %522 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %525, %521 ], [ %502, %512 ]
  %523 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %526, %521 ], [ %510, %512 ]
  %524 = phi i64 [ %529, %521 ], [ %519, %512 ]
  %525 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %522, i64 -1
  %526 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %523, i64 -1
  %527 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %525 to i8*
  %528 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %526 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %527, i8* align 8 %528, i64 16, i1 false) #7
  %529 = add i64 %524, -1
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %531, label %521, !llvm.loop !72

531:                                              ; preds = %521, %512
  %532 = phi %"struct.sh::(anonymous namespace)::Argument"* [ undef, %512 ], [ %525, %521 ]
  %533 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %502, %512 ], [ %525, %521 ]
  %534 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %510, %512 ], [ %526, %521 ]
  %535 = icmp ult i64 %516, 48
  br i1 %535, label %556, label %536

536:                                              ; preds = %531, %536
  %537 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %551, %536 ], [ %533, %531 ]
  %538 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %552, %536 ], [ %534, %531 ]
  %539 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %537, i64 -1
  %540 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %538, i64 -1
  %541 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %539 to i8*
  %542 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %540 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %541, i8* align 8 %542, i64 16, i1 false) #7
  %543 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %537, i64 -2
  %544 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %538, i64 -2
  %545 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %543 to i8*
  %546 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %544 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %545, i8* align 8 %546, i64 16, i1 false) #7
  %547 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %537, i64 -3
  %548 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %538, i64 -3
  %549 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %547 to i8*
  %550 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %549, i8* align 8 %550, i64 16, i1 false) #7
  %551 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %537, i64 -4
  %552 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %538, i64 -4
  %553 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %551 to i8*
  %554 = bitcast %"struct.sh::(anonymous namespace)::Argument"* %552 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %553, i8* align 8 %554, i64 16, i1 false) #7
  %555 = icmp eq %"struct.sh::(anonymous namespace)::Argument"* %552, %509
  br i1 %555, label %556, label %536

556:                                              ; preds = %531, %536, %499
  %557 = phi %"struct.sh::(anonymous namespace)::Argument"* [ %502, %499 ], [ %532, %531 ], [ %551, %536 ]
  %558 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %557 to i64
  store i64 %558, i64* %57, align 8
  store i64 %508, i64* %56, align 8
  store i64 %504, i64* %58, align 8
  br label %559

559:                                              ; preds = %104, %556, %470, %191, %138, %126, %90
  %560 = add nuw i64 %65, 1
  %561 = load i64, i64* %42, align 8
  %562 = load i64, i64* %44, align 8
  %563 = sub i64 %561, %562
  %564 = ashr exact i64 %563, 3
  %565 = icmp ult i64 %560, %564
  br i1 %565, label %63, label %59

566:                                              ; preds = %59, %14
  store i8 1, i8* %26, align 1
  br label %1388

567:                                              ; preds = %59
  %568 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 3
  store i8 1, i8* %568, align 8
  %569 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"* %569, %"class.sh::TVector.31"* nonnull dereferenceable(24) %7) #7
  %570 = bitcast %"class.sh::TVector.31"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %570) #7
  %571 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 0
  %572 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 1
  %573 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %570, i8 0, i64 24, i1 false) #7
  %574 = load i64, i64* %42, align 8
  %575 = load i64, i64* %44, align 8
  %576 = icmp eq i64 %574, %575
  br i1 %576, label %1087, label %577

577:                                              ; preds = %567
  %578 = bitcast %"class.sh::TIntermNode"*** %572 to i64*
  %579 = bitcast %"class.sh::TVector.31"* %8 to i64*
  %580 = bitcast %"class.sh::TIntermNode"*** %573 to i64*
  br label %581

581:                                              ; preds = %1079, %577
  %582 = phi i64 [ %575, %577 ], [ %1083, %1079 ]
  %583 = phi i64 [ 0, %577 ], [ %1080, %1079 ]
  %584 = phi i64 [ 0, %577 ], [ %1081, %1079 ]
  %585 = inttoptr i64 %582 to %"class.sh::TIntermNode"**
  %586 = load i64, i64* %56, align 8
  %587 = load i64, i64* %57, align 8
  %588 = sub i64 %586, %587
  %589 = ashr exact i64 %588, 4
  %590 = icmp ult i64 %583, %589
  %591 = inttoptr i64 %587 to %"struct.sh::(anonymous namespace)::Argument"*
  br i1 %590, label %592, label %596

592:                                              ; preds = %581
  %593 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %591, i64 %583, i32 0
  %594 = load i64, i64* %593, align 8
  %595 = icmp eq i64 %584, %594
  br i1 %595, label %820, label %596

596:                                              ; preds = %592, %581
  %597 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 %584
  %598 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %572, align 8
  %599 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %573, align 8
  %600 = icmp eq %"class.sh::TIntermNode"** %598, %599
  %601 = ptrtoint %"class.sh::TIntermNode"** %599 to i64
  br i1 %600, label %608, label %602

602:                                              ; preds = %596
  %603 = bitcast %"class.sh::TIntermNode"** %597 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %598 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %598, i64 1
  %607 = ptrtoint %"class.sh::TIntermNode"** %606 to i64
  store i64 %607, i64* %578, align 8
  br label %1079

608:                                              ; preds = %596
  %609 = ptrtoint %"class.sh::TIntermNode"** %598 to i64
  %610 = load i64, i64* %579, align 8
  %611 = sub i64 %609, %610
  %612 = ashr exact i64 %611, 3
  %613 = add nsw i64 %612, 1
  %614 = icmp ugt i64 %613, 2305843009213693951
  br i1 %614, label %615, label %617

615:                                              ; preds = %608
  %616 = bitcast %"class.sh::TVector.31"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %616) #13
  unreachable

617:                                              ; preds = %608
  %618 = sub i64 %601, %610
  %619 = ashr exact i64 %618, 3
  %620 = icmp ult i64 %619, 1152921504606846975
  br i1 %620, label %621, label %626

621:                                              ; preds = %617
  %622 = ashr exact i64 %618, 2
  %623 = icmp ult i64 %622, %613
  %624 = select i1 %623, i64 %613, i64 %622
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %632, label %626

626:                                              ; preds = %621, %617
  %627 = phi i64 [ %624, %621 ], [ 2305843009213693951, %617 ]
  %628 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %629 = shl i64 %627, 3
  %630 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %628, i64 %629) #7
  %631 = bitcast i8* %630 to %"class.sh::TIntermNode"**
  br label %632

632:                                              ; preds = %626, %621
  %633 = phi i64 [ %627, %626 ], [ 0, %621 ]
  %634 = phi %"class.sh::TIntermNode"** [ %631, %626 ], [ null, %621 ]
  %635 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %634, i64 %612
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %634, i64 %633
  %637 = ptrtoint %"class.sh::TIntermNode"** %636 to i64
  %638 = bitcast %"class.sh::TIntermNode"** %597 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %635 to i64*
  store i64 %639, i64* %640, align 8
  %641 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 1
  %642 = ptrtoint %"class.sh::TIntermNode"** %641 to i64
  %643 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %571, align 8
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  %645 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %572, align 8
  %646 = icmp eq %"class.sh::TIntermNode"** %645, %643
  br i1 %646, label %817, label %647

647:                                              ; preds = %632
  %648 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %649 = ptrtoint %"class.sh::TIntermNode"** %648 to i64
  %650 = sub i64 %649, %644
  %651 = lshr i64 %650, 3
  %652 = add nuw nsw i64 %651, 1
  %653 = icmp ult i64 %652, 4
  br i1 %653, label %747, label %654

654:                                              ; preds = %647
  %655 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %634, i64 -1
  %656 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %657 = ptrtoint %"class.sh::TIntermNode"** %656 to i64
  %658 = sub i64 %657, %644
  %659 = lshr i64 %658, 3
  %660 = sub nsw i64 %612, %659
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %655, i64 %660
  %662 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %663 = sub nsw i64 0, %659
  %664 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %662, i64 %663
  %665 = icmp ult %"class.sh::TIntermNode"** %661, %645
  %666 = icmp ult %"class.sh::TIntermNode"** %664, %635
  %667 = and i1 %665, %666
  br i1 %667, label %747, label %668

668:                                              ; preds = %654
  %669 = and i64 %652, 4611686018427387900
  %670 = sub nsw i64 0, %669
  %671 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 %670
  %672 = sub nsw i64 0, %669
  %673 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 %672
  %674 = add nsw i64 %669, -4
  %675 = lshr exact i64 %674, 2
  %676 = add nuw nsw i64 %675, 1
  %677 = and i64 %676, 1
  %678 = icmp eq i64 %674, 0
  br i1 %678, label %723, label %679

679:                                              ; preds = %668
  %680 = sub nuw nsw i64 %676, %677
  %681 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %682 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %683 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %684 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  br label %685

685:                                              ; preds = %685, %679
  %686 = phi i64 [ 0, %679 ], [ %720, %685 ]
  %687 = phi i64 [ %680, %679 ], [ %721, %685 ]
  %688 = sub i64 0, %686
  %689 = sub i64 0, %686
  %690 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %681, i64 %688
  %691 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %682, i64 %689
  %692 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %691, i64 -1
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !73
  %695 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %691, i64 -2
  %696 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %695, i64 -1
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  %698 = load <2 x i64>, <2 x i64>* %697, align 8, !alias.scope !73
  %699 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %690, i64 -1
  %700 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %700, align 8, !alias.scope !76, !noalias !73
  %701 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %690, i64 -2
  %702 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %701, i64 -1
  %703 = bitcast %"class.sh::TIntermNode"** %702 to <2 x i64>*
  store <2 x i64> %698, <2 x i64>* %703, align 8, !alias.scope !76, !noalias !73
  %704 = sub nuw nsw i64 -4, %686
  %705 = sub nuw nsw i64 -4, %686
  %706 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %683, i64 %704
  %707 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %684, i64 %705
  %708 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %707, i64 -1
  %709 = bitcast %"class.sh::TIntermNode"** %708 to <2 x i64>*
  %710 = load <2 x i64>, <2 x i64>* %709, align 8, !alias.scope !73
  %711 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %707, i64 -2
  %712 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 -1
  %713 = bitcast %"class.sh::TIntermNode"** %712 to <2 x i64>*
  %714 = load <2 x i64>, <2 x i64>* %713, align 8, !alias.scope !73
  %715 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %706, i64 -1
  %716 = bitcast %"class.sh::TIntermNode"** %715 to <2 x i64>*
  store <2 x i64> %710, <2 x i64>* %716, align 8, !alias.scope !76, !noalias !73
  %717 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %706, i64 -2
  %718 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %717, i64 -1
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %714, <2 x i64>* %719, align 8, !alias.scope !76, !noalias !73
  %720 = add i64 %686, 8
  %721 = add i64 %687, -2
  %722 = icmp eq i64 %721, 0
  br i1 %722, label %723, label %685, !llvm.loop !78

723:                                              ; preds = %685, %668
  %724 = phi i64 [ 0, %668 ], [ %720, %685 ]
  %725 = icmp eq i64 %677, 0
  br i1 %725, label %745, label %726

726:                                              ; preds = %723
  %727 = sub i64 0, %724
  %728 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %729 = sub i64 0, %724
  %730 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %645, i64 -1
  %731 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %728, i64 %727
  %732 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %730, i64 %729
  %733 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %732, i64 -1
  %734 = bitcast %"class.sh::TIntermNode"** %733 to <2 x i64>*
  %735 = load <2 x i64>, <2 x i64>* %734, align 8, !alias.scope !73
  %736 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %732, i64 -2
  %737 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %736, i64 -1
  %738 = bitcast %"class.sh::TIntermNode"** %737 to <2 x i64>*
  %739 = load <2 x i64>, <2 x i64>* %738, align 8, !alias.scope !73
  %740 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %731, i64 -1
  %741 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %735, <2 x i64>* %741, align 8, !alias.scope !76, !noalias !73
  %742 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %731, i64 -2
  %743 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -1
  %744 = bitcast %"class.sh::TIntermNode"** %743 to <2 x i64>*
  store <2 x i64> %739, <2 x i64>* %744, align 8, !alias.scope !76, !noalias !73
  br label %745

745:                                              ; preds = %723, %726
  %746 = icmp eq i64 %652, %669
  br i1 %746, label %817, label %747

747:                                              ; preds = %745, %654, %647
  %748 = phi %"class.sh::TIntermNode"** [ %635, %654 ], [ %635, %647 ], [ %671, %745 ]
  %749 = phi %"class.sh::TIntermNode"** [ %645, %654 ], [ %645, %647 ], [ %673, %745 ]
  %750 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 -1
  %751 = ptrtoint %"class.sh::TIntermNode"** %750 to i64
  %752 = sub i64 %751, %644
  %753 = lshr i64 %752, 3
  %754 = add nuw nsw i64 %753, 1
  %755 = and i64 %754, 7
  %756 = icmp eq i64 %755, 0
  br i1 %756, label %768, label %757

757:                                              ; preds = %747, %757
  %758 = phi %"class.sh::TIntermNode"** [ %761, %757 ], [ %748, %747 ]
  %759 = phi %"class.sh::TIntermNode"** [ %762, %757 ], [ %749, %747 ]
  %760 = phi i64 [ %766, %757 ], [ %755, %747 ]
  %761 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %758, i64 -1
  %762 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -1
  %763 = bitcast %"class.sh::TIntermNode"** %762 to i64*
  %764 = load i64, i64* %763, align 8
  %765 = bitcast %"class.sh::TIntermNode"** %761 to i64*
  store i64 %764, i64* %765, align 8
  %766 = add i64 %760, -1
  %767 = icmp eq i64 %766, 0
  br i1 %767, label %768, label %757, !llvm.loop !79

768:                                              ; preds = %757, %747
  %769 = phi %"class.sh::TIntermNode"** [ undef, %747 ], [ %761, %757 ]
  %770 = phi %"class.sh::TIntermNode"** [ %748, %747 ], [ %761, %757 ]
  %771 = phi %"class.sh::TIntermNode"** [ %749, %747 ], [ %762, %757 ]
  %772 = icmp ult i64 %752, 56
  br i1 %772, label %817, label %773

773:                                              ; preds = %768, %773
  %774 = phi %"class.sh::TIntermNode"** [ %811, %773 ], [ %770, %768 ]
  %775 = phi %"class.sh::TIntermNode"** [ %812, %773 ], [ %771, %768 ]
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -1
  %777 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -1
  %778 = bitcast %"class.sh::TIntermNode"** %777 to i64*
  %779 = load i64, i64* %778, align 8
  %780 = bitcast %"class.sh::TIntermNode"** %776 to i64*
  store i64 %779, i64* %780, align 8
  %781 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -2
  %782 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -2
  %783 = bitcast %"class.sh::TIntermNode"** %782 to i64*
  %784 = load i64, i64* %783, align 8
  %785 = bitcast %"class.sh::TIntermNode"** %781 to i64*
  store i64 %784, i64* %785, align 8
  %786 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -3
  %787 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -3
  %788 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %789 = load i64, i64* %788, align 8
  %790 = bitcast %"class.sh::TIntermNode"** %786 to i64*
  store i64 %789, i64* %790, align 8
  %791 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -4
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -4
  %793 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %794 = load i64, i64* %793, align 8
  %795 = bitcast %"class.sh::TIntermNode"** %791 to i64*
  store i64 %794, i64* %795, align 8
  %796 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -5
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -5
  %798 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %799 = load i64, i64* %798, align 8
  %800 = bitcast %"class.sh::TIntermNode"** %796 to i64*
  store i64 %799, i64* %800, align 8
  %801 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -6
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -6
  %803 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %804 = load i64, i64* %803, align 8
  %805 = bitcast %"class.sh::TIntermNode"** %801 to i64*
  store i64 %804, i64* %805, align 8
  %806 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -7
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -7
  %808 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %809 = load i64, i64* %808, align 8
  %810 = bitcast %"class.sh::TIntermNode"** %806 to i64*
  store i64 %809, i64* %810, align 8
  %811 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %774, i64 -8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %775, i64 -8
  %813 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %814 = load i64, i64* %813, align 8
  %815 = bitcast %"class.sh::TIntermNode"** %811 to i64*
  store i64 %814, i64* %815, align 8
  %816 = icmp eq %"class.sh::TIntermNode"** %812, %643
  br i1 %816, label %817, label %773, !llvm.loop !80

817:                                              ; preds = %768, %773, %745, %632
  %818 = phi %"class.sh::TIntermNode"** [ %635, %632 ], [ %671, %745 ], [ %769, %768 ], [ %811, %773 ]
  %819 = ptrtoint %"class.sh::TIntermNode"** %818 to i64
  store i64 %819, i64* %579, align 8
  store i64 %642, i64* %578, align 8
  store i64 %637, i64* %580, align 8
  br label %1079

820:                                              ; preds = %592
  %821 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %591, i64 %583, i32 1
  %822 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %821, align 8
  %823 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %822, i64 0, i32 0
  %824 = bitcast %"class.sh::TIntermTyped"* %822 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %825 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %824, align 8
  %826 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %825, i64 13
  %827 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %826, align 8
  %828 = call %"class.sh::TIntermBinary"* %827(%"class.sh::TIntermNode"* %823) #7
  %829 = icmp eq %"class.sh::TIntermBinary"* %828, null
  br i1 %829, label %1077, label %830

830:                                              ; preds = %820, %1067
  %831 = phi %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** [ %1071, %1067 ], [ %824, %820 ]
  %832 = phi %"class.sh::TIntermNode"* [ %1070, %1067 ], [ %823, %820 ]
  %833 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %831, align 8
  %834 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %833, i64 13
  %835 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %834, align 8
  %836 = call %"class.sh::TIntermBinary"* %835(%"class.sh::TIntermNode"* %832) #7
  %837 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %836, i64 0, i32 0, i32 1
  %838 = load i8, i8* %837, align 8
  %839 = icmp eq i8 %838, 45
  br i1 %839, label %840, label %1067

840:                                              ; preds = %830
  %841 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %836, i64 0, i32 3
  %842 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %841, align 8
  %843 = bitcast %"class.sh::TIntermTyped"* %842 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %844 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %843, align 8
  %845 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %844, i64 23
  %846 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %845, align 8
  %847 = call %"class.sh::TIntermTyped"* %846(%"class.sh::TIntermTyped"* %842) #7
  %848 = ptrtoint %"class.sh::TIntermTyped"* %847 to i64
  %849 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %572, align 8
  %850 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %573, align 8
  %851 = icmp ult %"class.sh::TIntermNode"** %849, %850
  %852 = ptrtoint %"class.sh::TIntermNode"** %850 to i64
  br i1 %851, label %853, label %857

853:                                              ; preds = %840
  %854 = bitcast %"class.sh::TIntermNode"** %849 to i64*
  store i64 %848, i64* %854, align 8
  %855 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %849, i64 1
  %856 = ptrtoint %"class.sh::TIntermNode"** %855 to i64
  store i64 %856, i64* %578, align 8
  br label %1067

857:                                              ; preds = %840
  %858 = ptrtoint %"class.sh::TIntermNode"** %849 to i64
  %859 = load i64, i64* %579, align 8
  %860 = sub i64 %858, %859
  %861 = ashr exact i64 %860, 3
  %862 = add nsw i64 %861, 1
  %863 = icmp ugt i64 %862, 2305843009213693951
  br i1 %863, label %864, label %866

864:                                              ; preds = %857
  %865 = bitcast %"class.sh::TVector.31"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %865) #13
  unreachable

866:                                              ; preds = %857
  %867 = sub i64 %852, %859
  %868 = ashr exact i64 %867, 3
  %869 = icmp ult i64 %868, 1152921504606846975
  br i1 %869, label %870, label %875

870:                                              ; preds = %866
  %871 = ashr exact i64 %867, 2
  %872 = icmp ult i64 %871, %862
  %873 = select i1 %872, i64 %862, i64 %871
  %874 = icmp eq i64 %873, 0
  br i1 %874, label %881, label %875

875:                                              ; preds = %870, %866
  %876 = phi i64 [ %873, %870 ], [ 2305843009213693951, %866 ]
  %877 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %878 = shl i64 %876, 3
  %879 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %877, i64 %878) #7
  %880 = bitcast i8* %879 to %"class.sh::TIntermNode"**
  br label %881

881:                                              ; preds = %875, %870
  %882 = phi i64 [ %876, %875 ], [ 0, %870 ]
  %883 = phi %"class.sh::TIntermNode"** [ %880, %875 ], [ null, %870 ]
  %884 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %883, i64 %861
  %885 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %883, i64 %882
  %886 = ptrtoint %"class.sh::TIntermNode"** %885 to i64
  %887 = bitcast %"class.sh::TIntermNode"** %884 to i64*
  store i64 %848, i64* %887, align 8
  %888 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 1
  %889 = ptrtoint %"class.sh::TIntermNode"** %888 to i64
  %890 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %571, align 8
  %891 = ptrtoint %"class.sh::TIntermNode"** %890 to i64
  %892 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %572, align 8
  %893 = icmp eq %"class.sh::TIntermNode"** %892, %890
  br i1 %893, label %1064, label %894

894:                                              ; preds = %881
  %895 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  %896 = ptrtoint %"class.sh::TIntermNode"** %895 to i64
  %897 = sub i64 %896, %891
  %898 = lshr i64 %897, 3
  %899 = add nuw nsw i64 %898, 1
  %900 = icmp ult i64 %899, 4
  br i1 %900, label %994, label %901

901:                                              ; preds = %894
  %902 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %883, i64 -1
  %903 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  %904 = ptrtoint %"class.sh::TIntermNode"** %903 to i64
  %905 = sub i64 %904, %891
  %906 = lshr i64 %905, 3
  %907 = sub nsw i64 %861, %906
  %908 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %902, i64 %907
  %909 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  %910 = sub nsw i64 0, %906
  %911 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %909, i64 %910
  %912 = icmp ult %"class.sh::TIntermNode"** %908, %892
  %913 = icmp ult %"class.sh::TIntermNode"** %911, %884
  %914 = and i1 %912, %913
  br i1 %914, label %994, label %915

915:                                              ; preds = %901
  %916 = and i64 %899, 4611686018427387900
  %917 = sub nsw i64 0, %916
  %918 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 %917
  %919 = sub nsw i64 0, %916
  %920 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 %919
  %921 = add nsw i64 %916, -4
  %922 = lshr exact i64 %921, 2
  %923 = add nuw nsw i64 %922, 1
  %924 = and i64 %923, 1
  %925 = icmp eq i64 %921, 0
  br i1 %925, label %970, label %926

926:                                              ; preds = %915
  %927 = sub nuw nsw i64 %923, %924
  %928 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 -1
  %929 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  %930 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 -1
  %931 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  br label %932

932:                                              ; preds = %932, %926
  %933 = phi i64 [ 0, %926 ], [ %967, %932 ]
  %934 = phi i64 [ %927, %926 ], [ %968, %932 ]
  %935 = sub i64 0, %933
  %936 = sub i64 0, %933
  %937 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %928, i64 %935
  %938 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %929, i64 %936
  %939 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %938, i64 -1
  %940 = bitcast %"class.sh::TIntermNode"** %939 to <2 x i64>*
  %941 = load <2 x i64>, <2 x i64>* %940, align 8, !alias.scope !81
  %942 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %938, i64 -2
  %943 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %942, i64 -1
  %944 = bitcast %"class.sh::TIntermNode"** %943 to <2 x i64>*
  %945 = load <2 x i64>, <2 x i64>* %944, align 8, !alias.scope !81
  %946 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %937, i64 -1
  %947 = bitcast %"class.sh::TIntermNode"** %946 to <2 x i64>*
  store <2 x i64> %941, <2 x i64>* %947, align 8, !alias.scope !84, !noalias !81
  %948 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %937, i64 -2
  %949 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %948, i64 -1
  %950 = bitcast %"class.sh::TIntermNode"** %949 to <2 x i64>*
  store <2 x i64> %945, <2 x i64>* %950, align 8, !alias.scope !84, !noalias !81
  %951 = sub nuw nsw i64 -4, %933
  %952 = sub nuw nsw i64 -4, %933
  %953 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %930, i64 %951
  %954 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %931, i64 %952
  %955 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %954, i64 -1
  %956 = bitcast %"class.sh::TIntermNode"** %955 to <2 x i64>*
  %957 = load <2 x i64>, <2 x i64>* %956, align 8, !alias.scope !81
  %958 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %954, i64 -2
  %959 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -1
  %960 = bitcast %"class.sh::TIntermNode"** %959 to <2 x i64>*
  %961 = load <2 x i64>, <2 x i64>* %960, align 8, !alias.scope !81
  %962 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %953, i64 -1
  %963 = bitcast %"class.sh::TIntermNode"** %962 to <2 x i64>*
  store <2 x i64> %957, <2 x i64>* %963, align 8, !alias.scope !84, !noalias !81
  %964 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %953, i64 -2
  %965 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %964, i64 -1
  %966 = bitcast %"class.sh::TIntermNode"** %965 to <2 x i64>*
  store <2 x i64> %961, <2 x i64>* %966, align 8, !alias.scope !84, !noalias !81
  %967 = add i64 %933, 8
  %968 = add i64 %934, -2
  %969 = icmp eq i64 %968, 0
  br i1 %969, label %970, label %932, !llvm.loop !86

970:                                              ; preds = %932, %915
  %971 = phi i64 [ 0, %915 ], [ %967, %932 ]
  %972 = icmp eq i64 %924, 0
  br i1 %972, label %992, label %973

973:                                              ; preds = %970
  %974 = sub i64 0, %971
  %975 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 -1
  %976 = sub i64 0, %971
  %977 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %892, i64 -1
  %978 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %975, i64 %974
  %979 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %977, i64 %976
  %980 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %979, i64 -1
  %981 = bitcast %"class.sh::TIntermNode"** %980 to <2 x i64>*
  %982 = load <2 x i64>, <2 x i64>* %981, align 8, !alias.scope !81
  %983 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %979, i64 -2
  %984 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %983, i64 -1
  %985 = bitcast %"class.sh::TIntermNode"** %984 to <2 x i64>*
  %986 = load <2 x i64>, <2 x i64>* %985, align 8, !alias.scope !81
  %987 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %978, i64 -1
  %988 = bitcast %"class.sh::TIntermNode"** %987 to <2 x i64>*
  store <2 x i64> %982, <2 x i64>* %988, align 8, !alias.scope !84, !noalias !81
  %989 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %978, i64 -2
  %990 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %989, i64 -1
  %991 = bitcast %"class.sh::TIntermNode"** %990 to <2 x i64>*
  store <2 x i64> %986, <2 x i64>* %991, align 8, !alias.scope !84, !noalias !81
  br label %992

992:                                              ; preds = %970, %973
  %993 = icmp eq i64 %899, %916
  br i1 %993, label %1064, label %994

994:                                              ; preds = %992, %901, %894
  %995 = phi %"class.sh::TIntermNode"** [ %884, %901 ], [ %884, %894 ], [ %918, %992 ]
  %996 = phi %"class.sh::TIntermNode"** [ %892, %901 ], [ %892, %894 ], [ %920, %992 ]
  %997 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %996, i64 -1
  %998 = ptrtoint %"class.sh::TIntermNode"** %997 to i64
  %999 = sub i64 %998, %891
  %1000 = lshr i64 %999, 3
  %1001 = add nuw nsw i64 %1000, 1
  %1002 = and i64 %1001, 7
  %1003 = icmp eq i64 %1002, 0
  br i1 %1003, label %1015, label %1004

1004:                                             ; preds = %994, %1004
  %1005 = phi %"class.sh::TIntermNode"** [ %1008, %1004 ], [ %995, %994 ]
  %1006 = phi %"class.sh::TIntermNode"** [ %1009, %1004 ], [ %996, %994 ]
  %1007 = phi i64 [ %1013, %1004 ], [ %1002, %994 ]
  %1008 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1005, i64 -1
  %1009 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1006, i64 -1
  %1010 = bitcast %"class.sh::TIntermNode"** %1009 to i64*
  %1011 = load i64, i64* %1010, align 8
  %1012 = bitcast %"class.sh::TIntermNode"** %1008 to i64*
  store i64 %1011, i64* %1012, align 8
  %1013 = add i64 %1007, -1
  %1014 = icmp eq i64 %1013, 0
  br i1 %1014, label %1015, label %1004, !llvm.loop !87

1015:                                             ; preds = %1004, %994
  %1016 = phi %"class.sh::TIntermNode"** [ undef, %994 ], [ %1008, %1004 ]
  %1017 = phi %"class.sh::TIntermNode"** [ %995, %994 ], [ %1008, %1004 ]
  %1018 = phi %"class.sh::TIntermNode"** [ %996, %994 ], [ %1009, %1004 ]
  %1019 = icmp ult i64 %999, 56
  br i1 %1019, label %1064, label %1020

1020:                                             ; preds = %1015, %1020
  %1021 = phi %"class.sh::TIntermNode"** [ %1058, %1020 ], [ %1017, %1015 ]
  %1022 = phi %"class.sh::TIntermNode"** [ %1059, %1020 ], [ %1018, %1015 ]
  %1023 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -1
  %1024 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -1
  %1025 = bitcast %"class.sh::TIntermNode"** %1024 to i64*
  %1026 = load i64, i64* %1025, align 8
  %1027 = bitcast %"class.sh::TIntermNode"** %1023 to i64*
  store i64 %1026, i64* %1027, align 8
  %1028 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -2
  %1029 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -2
  %1030 = bitcast %"class.sh::TIntermNode"** %1029 to i64*
  %1031 = load i64, i64* %1030, align 8
  %1032 = bitcast %"class.sh::TIntermNode"** %1028 to i64*
  store i64 %1031, i64* %1032, align 8
  %1033 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -3
  %1034 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -3
  %1035 = bitcast %"class.sh::TIntermNode"** %1034 to i64*
  %1036 = load i64, i64* %1035, align 8
  %1037 = bitcast %"class.sh::TIntermNode"** %1033 to i64*
  store i64 %1036, i64* %1037, align 8
  %1038 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -4
  %1039 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -4
  %1040 = bitcast %"class.sh::TIntermNode"** %1039 to i64*
  %1041 = load i64, i64* %1040, align 8
  %1042 = bitcast %"class.sh::TIntermNode"** %1038 to i64*
  store i64 %1041, i64* %1042, align 8
  %1043 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -5
  %1044 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -5
  %1045 = bitcast %"class.sh::TIntermNode"** %1044 to i64*
  %1046 = load i64, i64* %1045, align 8
  %1047 = bitcast %"class.sh::TIntermNode"** %1043 to i64*
  store i64 %1046, i64* %1047, align 8
  %1048 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -6
  %1049 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -6
  %1050 = bitcast %"class.sh::TIntermNode"** %1049 to i64*
  %1051 = load i64, i64* %1050, align 8
  %1052 = bitcast %"class.sh::TIntermNode"** %1048 to i64*
  store i64 %1051, i64* %1052, align 8
  %1053 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -7
  %1054 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -7
  %1055 = bitcast %"class.sh::TIntermNode"** %1054 to i64*
  %1056 = load i64, i64* %1055, align 8
  %1057 = bitcast %"class.sh::TIntermNode"** %1053 to i64*
  store i64 %1056, i64* %1057, align 8
  %1058 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 -8
  %1059 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1022, i64 -8
  %1060 = bitcast %"class.sh::TIntermNode"** %1059 to i64*
  %1061 = load i64, i64* %1060, align 8
  %1062 = bitcast %"class.sh::TIntermNode"** %1058 to i64*
  store i64 %1061, i64* %1062, align 8
  %1063 = icmp eq %"class.sh::TIntermNode"** %1059, %890
  br i1 %1063, label %1064, label %1020, !llvm.loop !88

1064:                                             ; preds = %1015, %1020, %992, %881
  %1065 = phi %"class.sh::TIntermNode"** [ %884, %881 ], [ %918, %992 ], [ %1016, %1015 ], [ %1058, %1020 ]
  %1066 = ptrtoint %"class.sh::TIntermNode"** %1065 to i64
  store i64 %1066, i64* %579, align 8
  store i64 %889, i64* %578, align 8
  store i64 %886, i64* %580, align 8
  br label %1067

1067:                                             ; preds = %1064, %853, %830
  %1068 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %836, i64 0, i32 2
  %1069 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1068, align 8
  %1070 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1069, i64 0, i32 0
  %1071 = bitcast %"class.sh::TIntermTyped"* %1069 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %1072 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %1071, align 8
  %1073 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1072, i64 13
  %1074 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1073, align 8
  %1075 = call %"class.sh::TIntermBinary"* %1074(%"class.sh::TIntermNode"* %1070) #7
  %1076 = icmp eq %"class.sh::TIntermBinary"* %1075, null
  br i1 %1076, label %1077, label %830

1077:                                             ; preds = %1067, %820
  %1078 = add i64 %583, 1
  br label %1079

1079:                                             ; preds = %1077, %817, %602
  %1080 = phi i64 [ %1078, %1077 ], [ %583, %602 ], [ %583, %817 ]
  %1081 = add nuw i64 %584, 1
  %1082 = load i64, i64* %42, align 8
  %1083 = load i64, i64* %44, align 8
  %1084 = sub i64 %1082, %1083
  %1085 = ashr exact i64 %1084, 3
  %1086 = icmp ult i64 %1081, %1085
  br i1 %1086, label %581, label %1087

1087:                                             ; preds = %1079, %567
  %1088 = bitcast %"class.absl::flat_hash_map.215"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1088) #7
  %1089 = getelementptr inbounds %"class.absl::flat_hash_map.215", %"class.absl::flat_hash_map.215"* %9, i64 0, i32 0, i32 0, i32 0
  %1090 = getelementptr inbounds %"class.absl::flat_hash_map.215", %"class.absl::flat_hash_map.215"* %9, i64 0, i32 0, i32 0, i32 1
  %1091 = getelementptr inbounds %"class.absl::flat_hash_map.215", %"class.absl::flat_hash_map.215"* %9, i64 0, i32 0, i32 0, i32 3
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %1089, align 8
  %1092 = bitcast %"union.absl::container_internal::map_slot_type.218"** %1090 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1092, i8 0, i64 32, i1 false) #7
  %1093 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %50, align 8
  %1094 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1095 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1094, i64 80) #7
  %1096 = bitcast i8* %1095 to %"class.sh::TFunction"*
  %1097 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %27, i64 0, i32 5
  %1098 = load %"class.sh::TType"*, %"class.sh::TType"** %1097, align 8
  %1099 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %27, i64 0, i32 10
  %1100 = load i8, i8* %1099, align 1, !range !20
  %1101 = icmp ne i8 %1100, 0
  call void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"* %1096, %"class.sh::TSymbolTable"* %1093, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, i8 zeroext 2, %"class.sh::TType"* %1098, i1 zeroext %1101) #7
  %1102 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %27, i64 0, i32 4
  %1103 = load i64, i64* %1102, align 8
  %1104 = icmp eq i64 %1103, 0
  br i1 %1104, label %1351, label %1105

1105:                                             ; preds = %1087
  %1106 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  %1107 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  %1108 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  %1109 = getelementptr inbounds %"class.absl::flat_hash_map.215", %"class.absl::flat_hash_map.215"* %9, i64 0, i32 0, i32 0
  %1110 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %1111

1111:                                             ; preds = %1346, %1105
  %1112 = phi i64 [ 0, %1105 ], [ %1347, %1346 ]
  %1113 = phi i64 [ 0, %1105 ], [ %1348, %1346 ]
  %1114 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %48, align 8
  %1115 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %1114, i64 %1113
  %1116 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %1115, align 8
  %1117 = ptrtoint %"class.sh::TVariable"* %1116 to i64
  %1118 = load i64, i64* %56, align 8
  %1119 = load i64, i64* %57, align 8
  %1120 = sub i64 %1118, %1119
  %1121 = ashr exact i64 %1120, 4
  %1122 = icmp ult i64 %1112, %1121
  %1123 = inttoptr i64 %1119 to %"struct.sh::(anonymous namespace)::Argument"*
  br i1 %1122, label %1124, label %1128

1124:                                             ; preds = %1111
  %1125 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %1123, i64 %1112, i32 0
  %1126 = load i64, i64* %1125, align 8
  %1127 = icmp eq i64 %1113, %1126
  br i1 %1127, label %1218, label %1128

1128:                                             ; preds = %1124, %1111
  %1129 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1130 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1129, i64 40) #7
  %1131 = bitcast i8* %1130 to %"class.sh::TVariable"*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1106) #7
  %1132 = bitcast %"class.sh::TVariable"* %1116 to %"class.sh::TSymbol"*
  %1133 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %1132) #7
  %1134 = extractvalue { i8*, i64 } %1133, 0
  store i8* %1134, i8** %1107, align 8
  %1135 = extractvalue { i8*, i64 } %1133, 1
  store i64 %1135, i64* %1108, align 8
  %1136 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %1116, i64 0, i32 1
  %1137 = load %"class.sh::TType"*, %"class.sh::TType"** %1136, align 8
  %1138 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %1116, i64 0, i32 0, i32 2
  %1139 = load i8, i8* %1138, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %1131, %"class.sh::TSymbolTable"* %1093, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5, %"class.sh::TType"* %1137, i8 zeroext %1139, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1106) #7
  call void @_ZN2sh9TFunction12addParameterEPKNS_9TVariableE(%"class.sh::TFunction"* %1096, %"class.sh::TVariable"* %1131) #7
  %1140 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1141 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1140, i64 32) #7
  %1142 = bitcast i8* %1141 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1142, %"class.sh::TVariable"* %1131) #7
  %1143 = add i64 %1110, %1117
  %1144 = zext i64 %1143 to i128
  %1145 = mul nuw i128 %1144, 11376068507788127593
  %1146 = lshr i128 %1145, 64
  %1147 = xor i128 %1146, %1145
  %1148 = trunc i128 %1147 to i64
  %1149 = add i64 %1148, %1117
  %1150 = zext i64 %1149 to i128
  %1151 = mul nuw i128 %1150, 11376068507788127593
  %1152 = lshr i128 %1151, 64
  %1153 = xor i128 %1152, %1151
  %1154 = trunc i128 %1153 to i64
  %1155 = load i8*, i8** %1089, align 8
  %1156 = load i64, i64* %1091, align 8
  %1157 = lshr i64 %1154, 7
  %1158 = ptrtoint i8* %1155 to i64
  %1159 = lshr i64 %1158, 12
  %1160 = xor i64 %1159, %1157
  %1161 = trunc i128 %1153 to i8
  %1162 = and i8 %1161, 127
  %1163 = insertelement <16 x i8> undef, i8 %1162, i32 0
  %1164 = shufflevector <16 x i8> %1163, <16 x i8> undef, <16 x i32> zeroinitializer
  %1165 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8
  br label %1166

1166:                                             ; preds = %1195, %1128
  %1167 = phi i64 [ %1160, %1128 ], [ %1197, %1195 ]
  %1168 = phi i64 [ 0, %1128 ], [ %1196, %1195 ]
  %1169 = and i64 %1167, %1156
  %1170 = getelementptr inbounds i8, i8* %1155, i64 %1169
  %1171 = bitcast i8* %1170 to <16 x i8>*
  %1172 = load <16 x i8>, <16 x i8>* %1171, align 1
  %1173 = icmp eq <16 x i8> %1164, %1172
  %1174 = bitcast <16 x i1> %1173 to i16
  %1175 = icmp eq i16 %1174, 0
  br i1 %1175, label %1191, label %1176

1176:                                             ; preds = %1166
  %1177 = zext i16 %1174 to i32
  br label %1178

1178:                                             ; preds = %1187, %1176
  %1179 = phi i32 [ %1177, %1176 ], [ %1189, %1187 ]
  %1180 = call i32 @llvm.cttz.i32(i32 %1179, i1 false) #7, !range !61
  %1181 = zext i32 %1180 to i64
  %1182 = add i64 %1169, %1181
  %1183 = and i64 %1182, %1156
  %1184 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1165, i64 %1183, i32 0, i32 0
  %1185 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %1184, align 8
  %1186 = icmp eq %"class.sh::TVariable"* %1185, %1116
  br i1 %1186, label %1206, label %1187, !prof !62

1187:                                             ; preds = %1178
  %1188 = add i32 %1179, -1
  %1189 = and i32 %1188, %1179
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %1191, label %1178

1191:                                             ; preds = %1187, %1166
  %1192 = icmp eq <16 x i8> %1172, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1193 = bitcast <16 x i1> %1192 to i16
  %1194 = icmp eq i16 %1193, 0
  br i1 %1194, label %1195, label %1198, !prof !63

1195:                                             ; preds = %1191
  %1196 = add i64 %1168, 16
  %1197 = add i64 %1196, %1169
  br label %1166

1198:                                             ; preds = %1191
  %1199 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.217"* nonnull %1109, i64 %1154) #7
  %1200 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8, !noalias !89
  %1201 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1200, i64 %1199
  %1202 = bitcast %"union.absl::container_internal::map_slot_type.218"* %1201 to i64*
  store i64 %1117, i64* %1202, align 8, !noalias !89
  %1203 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1200, i64 %1199, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %1203, align 8, !noalias !89
  %1204 = load i8*, i8** %1089, align 8, !noalias !89
  %1205 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8, !noalias !89
  br label %1206

1206:                                             ; preds = %1178, %1198
  %1207 = phi %"union.absl::container_internal::map_slot_type.218"* [ %1205, %1198 ], [ %1165, %1178 ]
  %1208 = phi i8* [ %1204, %1198 ], [ %1155, %1178 ]
  %1209 = phi i64 [ %1199, %1198 ], [ %1183, %1178 ]
  %1210 = getelementptr inbounds i8, i8* %1208, i64 %1209
  %1211 = icmp ne i8* %1210, null
  call void @llvm.assume(i1 %1211) #7, !noalias !89
  %1212 = load i8, i8* %1210, align 1
  %1213 = icmp sgt i8 %1212, -1
  br i1 %1213, label %1215, label %1214, !prof !62

1214:                                             ; preds = %1206
  call void @llvm.trap() #7
  unreachable

1215:                                             ; preds = %1206
  %1216 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1207, i64 %1209, i32 0, i32 1
  %1217 = bitcast %"class.sh::TIntermTyped"** %1216 to i8**
  store i8* %1141, i8** %1217, align 8
  br label %1346

1218:                                             ; preds = %1124
  %1219 = getelementptr inbounds %"struct.sh::(anonymous namespace)::Argument", %"struct.sh::(anonymous namespace)::Argument"* %1123, i64 %1112, i32 1
  %1220 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1219, align 8
  %1221 = add i64 %1110, %1117
  %1222 = zext i64 %1221 to i128
  %1223 = mul nuw i128 %1222, 11376068507788127593
  %1224 = lshr i128 %1223, 64
  %1225 = xor i128 %1224, %1223
  %1226 = trunc i128 %1225 to i64
  %1227 = add i64 %1226, %1117
  %1228 = zext i64 %1227 to i128
  %1229 = mul nuw i128 %1228, 11376068507788127593
  %1230 = lshr i128 %1229, 64
  %1231 = xor i128 %1230, %1229
  %1232 = trunc i128 %1231 to i64
  %1233 = load i8*, i8** %1089, align 8
  %1234 = load i64, i64* %1091, align 8
  %1235 = lshr i64 %1232, 7
  %1236 = ptrtoint i8* %1233 to i64
  %1237 = lshr i64 %1236, 12
  %1238 = xor i64 %1237, %1235
  %1239 = trunc i128 %1231 to i8
  %1240 = and i8 %1239, 127
  %1241 = insertelement <16 x i8> undef, i8 %1240, i32 0
  %1242 = shufflevector <16 x i8> %1241, <16 x i8> undef, <16 x i32> zeroinitializer
  %1243 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8
  br label %1244

1244:                                             ; preds = %1273, %1218
  %1245 = phi i64 [ %1238, %1218 ], [ %1275, %1273 ]
  %1246 = phi i64 [ 0, %1218 ], [ %1274, %1273 ]
  %1247 = and i64 %1245, %1234
  %1248 = getelementptr inbounds i8, i8* %1233, i64 %1247
  %1249 = bitcast i8* %1248 to <16 x i8>*
  %1250 = load <16 x i8>, <16 x i8>* %1249, align 1
  %1251 = icmp eq <16 x i8> %1242, %1250
  %1252 = bitcast <16 x i1> %1251 to i16
  %1253 = icmp eq i16 %1252, 0
  br i1 %1253, label %1269, label %1254

1254:                                             ; preds = %1244
  %1255 = zext i16 %1252 to i32
  br label %1256

1256:                                             ; preds = %1265, %1254
  %1257 = phi i32 [ %1255, %1254 ], [ %1267, %1265 ]
  %1258 = call i32 @llvm.cttz.i32(i32 %1257, i1 false) #7, !range !61
  %1259 = zext i32 %1258 to i64
  %1260 = add i64 %1247, %1259
  %1261 = and i64 %1260, %1234
  %1262 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1243, i64 %1261, i32 0, i32 0
  %1263 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %1262, align 8
  %1264 = icmp eq %"class.sh::TVariable"* %1263, %1116
  br i1 %1264, label %1284, label %1265, !prof !62

1265:                                             ; preds = %1256
  %1266 = add i32 %1257, -1
  %1267 = and i32 %1266, %1257
  %1268 = icmp eq i32 %1267, 0
  br i1 %1268, label %1269, label %1256

1269:                                             ; preds = %1265, %1244
  %1270 = icmp eq <16 x i8> %1250, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1271 = bitcast <16 x i1> %1270 to i16
  %1272 = icmp eq i16 %1271, 0
  br i1 %1272, label %1273, label %1276, !prof !63

1273:                                             ; preds = %1269
  %1274 = add i64 %1246, 16
  %1275 = add i64 %1274, %1247
  br label %1244

1276:                                             ; preds = %1269
  %1277 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.217"* nonnull %1109, i64 %1232) #7
  %1278 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8, !noalias !94
  %1279 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1278, i64 %1277
  %1280 = bitcast %"union.absl::container_internal::map_slot_type.218"* %1279 to i64*
  store i64 %1117, i64* %1280, align 8, !noalias !94
  %1281 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1278, i64 %1277, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %1281, align 8, !noalias !94
  %1282 = load i8*, i8** %1089, align 8, !noalias !94
  %1283 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %1090, align 8, !noalias !94
  br label %1284

1284:                                             ; preds = %1256, %1276
  %1285 = phi %"union.absl::container_internal::map_slot_type.218"* [ %1283, %1276 ], [ %1243, %1256 ]
  %1286 = phi i8* [ %1282, %1276 ], [ %1233, %1256 ]
  %1287 = phi i64 [ %1277, %1276 ], [ %1261, %1256 ]
  %1288 = getelementptr inbounds i8, i8* %1286, i64 %1287
  %1289 = icmp ne i8* %1288, null
  call void @llvm.assume(i1 %1289) #7, !noalias !94
  %1290 = load i8, i8* %1288, align 1
  %1291 = icmp sgt i8 %1290, -1
  br i1 %1291, label %1293, label %1292, !prof !62

1292:                                             ; preds = %1284
  call void @llvm.trap() #7
  unreachable

1293:                                             ; preds = %1284
  %1294 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %1285, i64 %1287, i32 0, i32 1
  store %"class.sh::TIntermTyped"* %1220, %"class.sh::TIntermTyped"** %1294, align 8
  %1295 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1220, i64 0, i32 0
  %1296 = bitcast %"class.sh::TIntermTyped"* %1220 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %1297 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %1296, align 8
  %1298 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1297, i64 13
  %1299 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1298, align 8
  %1300 = call %"class.sh::TIntermBinary"* %1299(%"class.sh::TIntermNode"* %1295) #7
  %1301 = icmp eq %"class.sh::TIntermBinary"* %1300, null
  br i1 %1301, label %1344, label %1302

1302:                                             ; preds = %1293, %1334
  %1303 = phi %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** [ %1338, %1334 ], [ %1296, %1293 ]
  %1304 = phi %"class.sh::TIntermNode"* [ %1337, %1334 ], [ %1295, %1293 ]
  %1305 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %1303, align 8
  %1306 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1305, i64 13
  %1307 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1306, align 8
  %1308 = call %"class.sh::TIntermBinary"* %1307(%"class.sh::TIntermNode"* %1304) #7
  %1309 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1308, i64 0, i32 0, i32 1
  %1310 = load i8, i8* %1309, align 8
  %1311 = icmp eq i8 %1310, 45
  br i1 %1311, label %1312, label %1334

1312:                                             ; preds = %1302
  %1313 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1308, i64 0, i32 3
  %1314 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1313, align 8
  %1315 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1316 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1315, i64 40) #7
  %1317 = bitcast i8* %1316 to %"class.sh::TVariable"*
  %1318 = bitcast %"class.sh::TIntermTyped"* %1314 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1319 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1318, align 8
  %1320 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1319, i64 31
  %1321 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1320, align 8
  %1322 = call dereferenceable(184) %"class.sh::TType"* %1321(%"class.sh::TIntermTyped"* %1314) #7
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %1317, %"class.sh::TSymbolTable"* %1093, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %1322, i8 zeroext 2, i8 zeroext 0) #7
  call void @_ZN2sh9TFunction12addParameterEPKNS_9TVariableE(%"class.sh::TFunction"* %1096, %"class.sh::TVariable"* %1317) #7
  %1323 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1313, align 8
  %1324 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1323, i64 0, i32 0
  %1325 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1326 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1325, i64 32) #7
  %1327 = bitcast i8* %1326 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1327, %"class.sh::TVariable"* %1317) #7
  %1328 = bitcast i8* %1326 to %"class.sh::TIntermNode"*
  %1329 = bitcast %"class.sh::TIntermBinary"* %1308 to i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)***
  %1330 = load i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)**, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*** %1329, align 8
  %1331 = getelementptr inbounds i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %1330, i64 26
  %1332 = load i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)*, i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)** %1331, align 8
  %1333 = call zeroext i1 %1332(%"class.sh::TIntermBinary"* %1308, %"class.sh::TIntermNode"* %1324, %"class.sh::TIntermNode"* %1328) #7
  br label %1334

1334:                                             ; preds = %1312, %1302
  %1335 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1308, i64 0, i32 2
  %1336 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %1335, align 8
  %1337 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1336, i64 0, i32 0
  %1338 = bitcast %"class.sh::TIntermTyped"* %1336 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %1339 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %1338, align 8
  %1340 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1339, i64 13
  %1341 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %1340, align 8
  %1342 = call %"class.sh::TIntermBinary"* %1341(%"class.sh::TIntermNode"* %1337) #7
  %1343 = icmp eq %"class.sh::TIntermBinary"* %1342, null
  br i1 %1343, label %1344, label %1302

1344:                                             ; preds = %1334, %1293
  %1345 = add i64 %1112, 1
  br label %1346

1346:                                             ; preds = %1344, %1215
  %1347 = phi i64 [ %1112, %1215 ], [ %1345, %1344 ]
  %1348 = add nuw i64 %1113, 1
  %1349 = load i64, i64* %1102, align 8
  %1350 = icmp ult i64 %1348, %1349
  br i1 %1350, label %1111, label %1351

1351:                                             ; preds = %1346, %1087
  %1352 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80) %1096, %"class.sh::TVector.31"* nonnull %8) #7
  %1353 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1352, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %569, %"class.sh::TIntermNode"* %1353, i32 1) #7
  %1354 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1355 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1354, i64 32) #7
  %1356 = bitcast i8* %1355 to %"class.sh::TIntermFunctionPrototype"*
  call void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* %1356, %"class.sh::TFunction"* %1096) #7
  %1357 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %25, i64 0, i32 2
  %1358 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1357, align 8
  %1359 = bitcast %"class.sh::TIntermBlock"* %1358 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)***
  %1360 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*** %1359, align 8
  %1361 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %1360, i64 23
  %1362 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %1361, align 8
  %1363 = call %"class.sh::TIntermBlock"* %1362(%"class.sh::TIntermBlock"* %1358) #7
  %1364 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %50, align 8
  call void @_ZN2sh25GetDeclaratorReplacementsEPNS_12TSymbolTableEPNS_12TIntermBlockEPN4absl13flat_hash_mapIPKNS_9TVariableEPKNS_12TIntermTypedENS4_18container_internal6HashEqIS8_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKS8_SB_EEEEEE(%"class.sh::TSymbolTable"* %1364, %"class.sh::TIntermBlock"* %1363, %"class.absl::flat_hash_map.215"* nonnull %9) #7
  %1365 = getelementptr inbounds %"class.sh::(anonymous namespace)::MonomorphizeTraverser", %"class.sh::(anonymous namespace)::MonomorphizeTraverser"* %0, i64 0, i32 1
  %1366 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %1365, align 8
  %1367 = call zeroext i1 @_ZN2sh16ReplaceVariablesEPNS_9TCompilerEPNS_12TIntermBlockERKN4absl13flat_hash_mapIPKNS_9TVariableEPKNS_12TIntermTypedENS4_18container_internal6HashEqIS8_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKS8_SB_EEEEEE(%"class.sh::TCompiler"* %1366, %"class.sh::TIntermBlock"* %1363, %"class.absl::flat_hash_map.215"* nonnull dereferenceable(40) %9) #7
  %1368 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1369 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1368, i64 40) #7
  %1370 = bitcast i8* %1369 to %"class.sh::TIntermFunctionDefinition"*
  %1371 = bitcast i8* %1369 to i32 (...)***
  %1372 = getelementptr inbounds i8, i8* %1369, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1372, i8 0, i64 16, i1 false) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh25TIntermFunctionDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1371, align 8
  %1373 = getelementptr inbounds i8, i8* %1369, i64 24
  %1374 = bitcast i8* %1373 to i8**
  store i8* %1355, i8** %1374, align 8
  %1375 = getelementptr inbounds i8, i8* %1369, i64 32
  %1376 = bitcast i8* %1375 to %"class.sh::TIntermBlock"**
  store %"class.sh::TIntermBlock"* %1363, %"class.sh::TIntermBlock"** %1376, align 8
  %1377 = load i64, i64* %1091, align 8
  %1378 = icmp eq i64 %1377, 0
  br i1 %1378, label %1381, label %1379

1379:                                             ; preds = %1351
  %1380 = load i8*, i8** %1089, align 8
  call void @_ZdlPv(i8* %1380) #14
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %1089, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1092, i8 0, i64 32, i1 false) #7
  br label %1381

1381:                                             ; preds = %1379, %1351
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1088) #7
  %1382 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %571, align 8
  %1383 = icmp eq %"class.sh::TIntermNode"** %1382, null
  br i1 %1383, label %1387, label %1384

1384:                                             ; preds = %1381
  %1385 = ptrtoint %"class.sh::TIntermNode"** %1382 to i64
  %1386 = bitcast %"class.sh::TIntermNode"*** %572 to i64*
  store i64 %1385, i64* %1386, align 8
  br label %1387

1387:                                             ; preds = %1384, %1381
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %570) #7
  br label %1388

1388:                                             ; preds = %1387, %566
  %1389 = phi %"class.sh::TIntermFunctionDefinition"* [ null, %566 ], [ %1370, %1387 ]
  %1390 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %1391 = icmp eq %"class.sh::TIntermNode"** %1390, null
  br i1 %1391, label %1395, label %1392

1392:                                             ; preds = %1388
  %1393 = ptrtoint %"class.sh::TIntermNode"** %1390 to i64
  %1394 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  store i64 %1393, i64* %1394, align 8
  br label %1395

1395:                                             ; preds = %1392, %1388
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #7
  %1396 = load %"struct.sh::(anonymous namespace)::Argument"*, %"struct.sh::(anonymous namespace)::Argument"** %34, align 8
  %1397 = icmp eq %"struct.sh::(anonymous namespace)::Argument"* %1396, null
  br i1 %1397, label %1401, label %1398

1398:                                             ; preds = %1395
  %1399 = ptrtoint %"struct.sh::(anonymous namespace)::Argument"* %1396 to i64
  %1400 = bitcast %"struct.sh::(anonymous namespace)::Argument"** %35 to i64*
  store i64 %1399, i64* %1400, align 8
  br label %1401

1401:                                             ; preds = %1395, %1398
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #7
  %1402 = ptrtoint %"class.sh::TIntermFunctionDefinition"* %1389 to i64
  %1403 = icmp eq %"class.sh::TIntermFunctionDefinition"* %1389, null
  br i1 %1403, label %1630, label %1404

1404:                                             ; preds = %1401
  %1405 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %23, i64 0, i32 2, i32 0
  %1406 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %23, i64 0, i32 2, i32 0, i32 0, i32 1
  %1407 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %1406, align 8
  %1408 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %23, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %1409 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %1408, align 8
  %1410 = icmp eq %"class.sh::TIntermFunctionDefinition"** %1407, %1409
  %1411 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1409 to i64
  br i1 %1410, label %1417, label %1412

1412:                                             ; preds = %1404
  %1413 = bitcast %"class.sh::TIntermFunctionDefinition"** %1407 to i64*
  store i64 %1402, i64* %1413, align 8
  %1414 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1407, i64 1
  %1415 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1414 to i64
  %1416 = bitcast %"class.sh::TIntermFunctionDefinition"*** %1406 to i64*
  store i64 %1415, i64* %1416, align 8
  br label %1630

1417:                                             ; preds = %1404
  %1418 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1407 to i64
  %1419 = bitcast %"class.sh::TIntermFunctionDefinition"*** %1406 to i64*
  %1420 = bitcast %"class.std::__1::vector.170"* %1405 to i64*
  %1421 = load i64, i64* %1420, align 8
  %1422 = sub i64 %1418, %1421
  %1423 = ashr exact i64 %1422, 3
  %1424 = add nsw i64 %1423, 1
  %1425 = icmp ugt i64 %1424, 2305843009213693951
  br i1 %1425, label %1426, label %1428

1426:                                             ; preds = %1417
  %1427 = bitcast %"class.std::__1::vector.170"* %1405 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1427) #13
  unreachable

1428:                                             ; preds = %1417
  %1429 = bitcast %"class.sh::TIntermFunctionDefinition"*** %1408 to i64*
  %1430 = sub i64 %1411, %1421
  %1431 = ashr exact i64 %1430, 3
  %1432 = icmp ult i64 %1431, 1152921504606846975
  br i1 %1432, label %1433, label %1438

1433:                                             ; preds = %1428
  %1434 = ashr exact i64 %1430, 2
  %1435 = icmp ult i64 %1434, %1424
  %1436 = select i1 %1435, i64 %1424, i64 %1434
  %1437 = icmp eq i64 %1436, 0
  br i1 %1437, label %1444, label %1438

1438:                                             ; preds = %1433, %1428
  %1439 = phi i64 [ %1436, %1433 ], [ 2305843009213693951, %1428 ]
  %1440 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1441 = shl i64 %1439, 3
  %1442 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1440, i64 %1441) #7
  %1443 = bitcast i8* %1442 to %"class.sh::TIntermFunctionDefinition"**
  br label %1444

1444:                                             ; preds = %1438, %1433
  %1445 = phi i64 [ %1439, %1438 ], [ 0, %1433 ]
  %1446 = phi %"class.sh::TIntermFunctionDefinition"** [ %1443, %1438 ], [ null, %1433 ]
  %1447 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1446, i64 %1423
  %1448 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1446, i64 %1445
  %1449 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1448 to i64
  %1450 = bitcast %"class.sh::TIntermFunctionDefinition"** %1447 to i64*
  store i64 %1402, i64* %1450, align 8
  %1451 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1447, i64 1
  %1452 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1451 to i64
  %1453 = getelementptr inbounds %"class.std::__1::vector.170", %"class.std::__1::vector.170"* %1405, i64 0, i32 0, i32 0
  %1454 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %1453, align 8
  %1455 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1454 to i64
  %1456 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %1406, align 8
  %1457 = icmp eq %"class.sh::TIntermFunctionDefinition"** %1456, %1454
  br i1 %1457, label %1627, label %1458

1458:                                             ; preds = %1444
  %1459 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 -1
  %1460 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1459 to i64
  %1461 = sub i64 %1460, %1455
  %1462 = lshr i64 %1461, 3
  %1463 = add nuw nsw i64 %1462, 1
  %1464 = icmp ult i64 %1463, 4
  br i1 %1464, label %1557, label %1465

1465:                                             ; preds = %1458
  %1466 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 -1
  %1467 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1466 to i64
  %1468 = sub i64 %1467, %1455
  %1469 = lshr i64 %1468, 3
  %1470 = xor i64 %1469, -1
  %1471 = add nsw i64 %1423, %1470
  %1472 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1446, i64 %1471
  %1473 = xor i64 %1469, -1
  %1474 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 %1473
  %1475 = icmp ult %"class.sh::TIntermFunctionDefinition"** %1472, %1456
  %1476 = icmp ult %"class.sh::TIntermFunctionDefinition"** %1474, %1447
  %1477 = and i1 %1475, %1476
  br i1 %1477, label %1557, label %1478

1478:                                             ; preds = %1465
  %1479 = and i64 %1463, 4611686018427387900
  %1480 = sub nsw i64 0, %1479
  %1481 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1447, i64 %1480
  %1482 = sub nsw i64 0, %1479
  %1483 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 %1482
  %1484 = add nsw i64 %1479, -4
  %1485 = lshr exact i64 %1484, 2
  %1486 = add nuw nsw i64 %1485, 1
  %1487 = and i64 %1486, 1
  %1488 = icmp eq i64 %1484, 0
  br i1 %1488, label %1535, label %1489

1489:                                             ; preds = %1478
  %1490 = sub nuw nsw i64 %1486, %1487
  %1491 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1447, i64 -1
  %1492 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 -1
  %1493 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1447, i64 -1
  %1494 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 -1
  br label %1495

1495:                                             ; preds = %1495, %1489
  %1496 = phi i64 [ 0, %1489 ], [ %1530, %1495 ]
  %1497 = phi i64 [ %1490, %1489 ], [ %1531, %1495 ]
  %1498 = sub i64 0, %1496
  %1499 = sub i64 0, %1496
  %1500 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1491, i64 %1498
  %1501 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1492, i64 %1499
  %1502 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1501, i64 -1
  %1503 = bitcast %"class.sh::TIntermFunctionDefinition"** %1502 to <2 x i64>*
  %1504 = load <2 x i64>, <2 x i64>* %1503, align 8, !alias.scope !99
  %1505 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1501, i64 -2
  %1506 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1505, i64 -1
  %1507 = bitcast %"class.sh::TIntermFunctionDefinition"** %1506 to <2 x i64>*
  %1508 = load <2 x i64>, <2 x i64>* %1507, align 8, !alias.scope !99
  %1509 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1500, i64 -1
  %1510 = bitcast %"class.sh::TIntermFunctionDefinition"** %1509 to <2 x i64>*
  store <2 x i64> %1504, <2 x i64>* %1510, align 8, !alias.scope !102, !noalias !99
  %1511 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1500, i64 -2
  %1512 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1511, i64 -1
  %1513 = bitcast %"class.sh::TIntermFunctionDefinition"** %1512 to <2 x i64>*
  store <2 x i64> %1508, <2 x i64>* %1513, align 8, !alias.scope !102, !noalias !99
  %1514 = sub nuw nsw i64 -4, %1496
  %1515 = sub nuw nsw i64 -4, %1496
  %1516 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1493, i64 %1514
  %1517 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1494, i64 %1515
  %1518 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1517, i64 -1
  %1519 = bitcast %"class.sh::TIntermFunctionDefinition"** %1518 to <2 x i64>*
  %1520 = load <2 x i64>, <2 x i64>* %1519, align 8, !alias.scope !99
  %1521 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1517, i64 -2
  %1522 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1521, i64 -1
  %1523 = bitcast %"class.sh::TIntermFunctionDefinition"** %1522 to <2 x i64>*
  %1524 = load <2 x i64>, <2 x i64>* %1523, align 8, !alias.scope !99
  %1525 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1516, i64 -1
  %1526 = bitcast %"class.sh::TIntermFunctionDefinition"** %1525 to <2 x i64>*
  store <2 x i64> %1520, <2 x i64>* %1526, align 8, !alias.scope !102, !noalias !99
  %1527 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1516, i64 -2
  %1528 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1527, i64 -1
  %1529 = bitcast %"class.sh::TIntermFunctionDefinition"** %1528 to <2 x i64>*
  store <2 x i64> %1524, <2 x i64>* %1529, align 8, !alias.scope !102, !noalias !99
  %1530 = add i64 %1496, 8
  %1531 = add i64 %1497, -2
  %1532 = icmp eq i64 %1531, 0
  br i1 %1532, label %1533, label %1495, !llvm.loop !104

1533:                                             ; preds = %1495
  %1534 = sub nuw nsw i64 -8, %1496
  br label %1535

1535:                                             ; preds = %1533, %1478
  %1536 = phi i64 [ 0, %1478 ], [ %1534, %1533 ]
  %1537 = icmp eq i64 %1487, 0
  br i1 %1537, label %1555, label %1538

1538:                                             ; preds = %1535
  %1539 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1447, i64 -1
  %1540 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1456, i64 -1
  %1541 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1539, i64 %1536
  %1542 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1540, i64 %1536
  %1543 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1542, i64 -1
  %1544 = bitcast %"class.sh::TIntermFunctionDefinition"** %1543 to <2 x i64>*
  %1545 = load <2 x i64>, <2 x i64>* %1544, align 8, !alias.scope !99
  %1546 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1542, i64 -2
  %1547 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1546, i64 -1
  %1548 = bitcast %"class.sh::TIntermFunctionDefinition"** %1547 to <2 x i64>*
  %1549 = load <2 x i64>, <2 x i64>* %1548, align 8, !alias.scope !99
  %1550 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1541, i64 -1
  %1551 = bitcast %"class.sh::TIntermFunctionDefinition"** %1550 to <2 x i64>*
  store <2 x i64> %1545, <2 x i64>* %1551, align 8, !alias.scope !102, !noalias !99
  %1552 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1541, i64 -2
  %1553 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1552, i64 -1
  %1554 = bitcast %"class.sh::TIntermFunctionDefinition"** %1553 to <2 x i64>*
  store <2 x i64> %1549, <2 x i64>* %1554, align 8, !alias.scope !102, !noalias !99
  br label %1555

1555:                                             ; preds = %1535, %1538
  %1556 = icmp eq i64 %1463, %1479
  br i1 %1556, label %1627, label %1557

1557:                                             ; preds = %1555, %1465, %1458
  %1558 = phi %"class.sh::TIntermFunctionDefinition"** [ %1447, %1465 ], [ %1447, %1458 ], [ %1481, %1555 ]
  %1559 = phi %"class.sh::TIntermFunctionDefinition"** [ %1456, %1465 ], [ %1456, %1458 ], [ %1483, %1555 ]
  %1560 = getelementptr %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1559, i64 -1
  %1561 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1560 to i64
  %1562 = sub i64 %1561, %1455
  %1563 = lshr i64 %1562, 3
  %1564 = add nuw nsw i64 %1563, 1
  %1565 = and i64 %1564, 7
  %1566 = icmp eq i64 %1565, 0
  br i1 %1566, label %1578, label %1567

1567:                                             ; preds = %1557, %1567
  %1568 = phi %"class.sh::TIntermFunctionDefinition"** [ %1571, %1567 ], [ %1558, %1557 ]
  %1569 = phi %"class.sh::TIntermFunctionDefinition"** [ %1572, %1567 ], [ %1559, %1557 ]
  %1570 = phi i64 [ %1576, %1567 ], [ %1565, %1557 ]
  %1571 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1568, i64 -1
  %1572 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1569, i64 -1
  %1573 = bitcast %"class.sh::TIntermFunctionDefinition"** %1572 to i64*
  %1574 = load i64, i64* %1573, align 8
  %1575 = bitcast %"class.sh::TIntermFunctionDefinition"** %1571 to i64*
  store i64 %1574, i64* %1575, align 8
  %1576 = add i64 %1570, -1
  %1577 = icmp eq i64 %1576, 0
  br i1 %1577, label %1578, label %1567, !llvm.loop !105

1578:                                             ; preds = %1567, %1557
  %1579 = phi %"class.sh::TIntermFunctionDefinition"** [ undef, %1557 ], [ %1571, %1567 ]
  %1580 = phi %"class.sh::TIntermFunctionDefinition"** [ %1558, %1557 ], [ %1571, %1567 ]
  %1581 = phi %"class.sh::TIntermFunctionDefinition"** [ %1559, %1557 ], [ %1572, %1567 ]
  %1582 = icmp ult i64 %1562, 56
  br i1 %1582, label %1627, label %1583

1583:                                             ; preds = %1578, %1583
  %1584 = phi %"class.sh::TIntermFunctionDefinition"** [ %1621, %1583 ], [ %1580, %1578 ]
  %1585 = phi %"class.sh::TIntermFunctionDefinition"** [ %1622, %1583 ], [ %1581, %1578 ]
  %1586 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -1
  %1587 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -1
  %1588 = bitcast %"class.sh::TIntermFunctionDefinition"** %1587 to i64*
  %1589 = load i64, i64* %1588, align 8
  %1590 = bitcast %"class.sh::TIntermFunctionDefinition"** %1586 to i64*
  store i64 %1589, i64* %1590, align 8
  %1591 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -2
  %1592 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -2
  %1593 = bitcast %"class.sh::TIntermFunctionDefinition"** %1592 to i64*
  %1594 = load i64, i64* %1593, align 8
  %1595 = bitcast %"class.sh::TIntermFunctionDefinition"** %1591 to i64*
  store i64 %1594, i64* %1595, align 8
  %1596 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -3
  %1597 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -3
  %1598 = bitcast %"class.sh::TIntermFunctionDefinition"** %1597 to i64*
  %1599 = load i64, i64* %1598, align 8
  %1600 = bitcast %"class.sh::TIntermFunctionDefinition"** %1596 to i64*
  store i64 %1599, i64* %1600, align 8
  %1601 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -4
  %1602 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -4
  %1603 = bitcast %"class.sh::TIntermFunctionDefinition"** %1602 to i64*
  %1604 = load i64, i64* %1603, align 8
  %1605 = bitcast %"class.sh::TIntermFunctionDefinition"** %1601 to i64*
  store i64 %1604, i64* %1605, align 8
  %1606 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -5
  %1607 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -5
  %1608 = bitcast %"class.sh::TIntermFunctionDefinition"** %1607 to i64*
  %1609 = load i64, i64* %1608, align 8
  %1610 = bitcast %"class.sh::TIntermFunctionDefinition"** %1606 to i64*
  store i64 %1609, i64* %1610, align 8
  %1611 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -6
  %1612 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -6
  %1613 = bitcast %"class.sh::TIntermFunctionDefinition"** %1612 to i64*
  %1614 = load i64, i64* %1613, align 8
  %1615 = bitcast %"class.sh::TIntermFunctionDefinition"** %1611 to i64*
  store i64 %1614, i64* %1615, align 8
  %1616 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -7
  %1617 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -7
  %1618 = bitcast %"class.sh::TIntermFunctionDefinition"** %1617 to i64*
  %1619 = load i64, i64* %1618, align 8
  %1620 = bitcast %"class.sh::TIntermFunctionDefinition"** %1616 to i64*
  store i64 %1619, i64* %1620, align 8
  %1621 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1584, i64 -8
  %1622 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %1585, i64 -8
  %1623 = bitcast %"class.sh::TIntermFunctionDefinition"** %1622 to i64*
  %1624 = load i64, i64* %1623, align 8
  %1625 = bitcast %"class.sh::TIntermFunctionDefinition"** %1621 to i64*
  store i64 %1624, i64* %1625, align 8
  %1626 = icmp eq %"class.sh::TIntermFunctionDefinition"** %1622, %1454
  br i1 %1626, label %1627, label %1583, !llvm.loop !106

1627:                                             ; preds = %1578, %1583, %1555, %1444
  %1628 = phi %"class.sh::TIntermFunctionDefinition"** [ %1447, %1444 ], [ %1481, %1555 ], [ %1579, %1578 ], [ %1621, %1583 ]
  %1629 = ptrtoint %"class.sh::TIntermFunctionDefinition"** %1628 to i64
  store i64 %1629, i64* %1420, align 8
  store i64 %1452, i64* %1419, align 8
  store i64 %1449, i64* %1429, align 8
  br label %1630

1630:                                             ; preds = %1627, %1412, %1401
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7
  br label %1631

1631:                                             ; preds = %3, %1630
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"*, %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.31"*) local_unnamed_addr #2

declare void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*) unnamed_addr #2

declare void @_ZN2sh25GetDeclaratorReplacementsEPNS_12TSymbolTableEPNS_12TIntermBlockEPN4absl13flat_hash_mapIPKNS_9TVariableEPKNS_12TIntermTypedENS4_18container_internal6HashEqIS8_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKS8_SB_EEEEEE(%"class.sh::TSymbolTable"*, %"class.sh::TIntermBlock"*, %"class.absl::flat_hash_map.215"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh16ReplaceVariablesEPNS_9TCompilerEPNS_12TIntermBlockERKN4absl13flat_hash_mapIPKNS_9TVariableEPKNS_12TIntermTypedENS4_18container_internal6HashEqIS8_vE4HashENSE_2EqENSt3__19allocatorINSH_4pairIKS8_SB_EEEEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.absl::flat_hash_map.215"* dereferenceable(40)) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*, i32, %"class.sh::TIntermDeclaration"**) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i8 zeroext, %"class.sh::TType"*, i1 zeroext) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh9TFunction12addParameterEPKNS_9TVariableE(%"class.sh::TFunction"*, %"class.sh::TVariable"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.217"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !61
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !62

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.217"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.217"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.217"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !61
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.217"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #14
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.218"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type.218"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !61
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type.218"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type.218"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #7
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #14
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.217"*) local_unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.217", %"class.absl::container_internal::raw_hash_set.217"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair.219"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #7, !range !61
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !62

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type.218"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type.218"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #7
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type.218"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type.218"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type.218"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #7
  %124 = load %"union.absl::container_internal::map_slot_type.218"*, %"union.absl::container_internal::map_slot_type.218"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.218", %"union.absl::container_internal::map_slot_type.218"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type.218"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverserD0Ev(%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*) unnamed_addr #12 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TIntermFunctionPrototype"*, align 8
  %4 = alloca %"class.sh::TFunction"*, align 8
  %5 = alloca %"class.sh::TVector.31", align 16
  %6 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermFunctionPrototype"* %1, %"class.sh::TIntermFunctionPrototype"** %3, align 8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %9 = bitcast %"class.sh::TIntermNode"*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.32"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ult i64 %14, 2
  %16 = ptrtoint %"class.sh::TIntermFunctionPrototype"* %1 to i64
  br i1 %15, label %23, label %17

17:                                               ; preds = %2
  %18 = inttoptr i64 %12 to %"class.sh::TIntermNode"**
  %19 = add nsw i64 %14, -2
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %19
  %21 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, align 8
  %22 = bitcast %"class.sh::TIntermNode"* %21 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  br label %23

23:                                               ; preds = %2, %17
  %24 = phi %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** [ %22, %17 ], [ null, %2 ]
  %25 = phi %"class.sh::TIntermNode"* [ %21, %17 ], [ null, %2 ]
  %26 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %24, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %26, i64 6
  %28 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermFunctionDefinition"* %28(%"class.sh::TIntermNode"* %25) #7
  %30 = icmp eq %"class.sh::TIntermFunctionDefinition"* %29, null
  br i1 %30, label %31, label %545

31:                                               ; preds = %23
  %32 = bitcast %"class.sh::TFunction"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  %33 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %1, i64 0, i32 1
  %34 = bitcast %"class.sh::TFunction"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TFunction"** %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 1
  %38 = bitcast %"class.absl::flat_hash_map"** %37 to %"class.absl::container_internal::raw_hash_map"**
  %39 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %38, align 8
  %40 = call fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE2atIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofIKSI_EEPT_RSP_EclL_ZNSE_7declvalIRSO_EEDTclsr3std3__1E9__declvalISP_ELi0EEEvEEEEERKSP_(%"class.absl::container_internal::raw_hash_map"* %39, %"class.sh::TFunction"** nonnull dereferenceable(8) %4)
  %41 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %40, i64 0, i32 2, i32 0, i32 0, i32 0
  %42 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %41, align 8
  %43 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %40, i64 0, i32 2, i32 0, i32 0, i32 1
  %44 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %43, align 8
  %45 = icmp eq %"class.sh::TIntermFunctionDefinition"** %42, %44
  br i1 %45, label %544, label %46

46:                                               ; preds = %31
  %47 = bitcast %"class.sh::TVector.31"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #7
  %48 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 1
  %50 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 0, i64 24, i1 false) #7
  %51 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %40, i64 0, i32 0
  %52 = load i8, i8* %51, align 8, !range !20
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %247, label %54

54:                                               ; preds = %46
  %55 = bitcast %"class.sh::TIntermNode"*** %49 to i64*
  %56 = bitcast %"class.sh::TVector.31"* %5 to i64*
  %57 = bitcast %"class.sh::TIntermNode"*** %50 to i64*
  %58 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %59 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %58, i64 8) #7
  %60 = bitcast i8* %59 to %"class.sh::TIntermNode"**
  %61 = getelementptr inbounds i8, i8* %59, i64 8
  %62 = bitcast i8* %61 to %"class.sh::TIntermNode"**
  %63 = ptrtoint i8* %61 to i64
  %64 = bitcast i8* %59 to i64*
  store i64 %16, i64* %64, align 8
  %65 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %48, align 16
  %66 = ptrtoint %"class.sh::TIntermNode"** %65 to i64
  %67 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %49, align 8
  %68 = bitcast %"class.sh::TIntermNode"** %67 to i8*
  %69 = icmp eq %"class.sh::TIntermNode"** %67, %65
  br i1 %69, label %243, label %70

70:                                               ; preds = %54
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %72 = ptrtoint %"class.sh::TIntermNode"** %71 to i64
  %73 = sub i64 %72, %66
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = icmp ult i64 %75, 4
  br i1 %76, label %173, label %77

77:                                               ; preds = %70
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %79 = ptrtoint %"class.sh::TIntermNode"** %78 to i64
  %80 = sub i64 %79, %66
  %81 = lshr i64 %80, 3
  %82 = and i64 %80, -8
  %83 = xor i64 %82, -8
  %84 = getelementptr i8, i8* %59, i64 %83
  %85 = xor i64 %81, -1
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 %85
  %87 = bitcast %"class.sh::TIntermNode"** %86 to i8*
  %88 = icmp ult i8* %84, %68
  %89 = icmp ugt i8* %59, %87
  %90 = and i1 %88, %89
  br i1 %90, label %173, label %91

91:                                               ; preds = %77
  %92 = and i64 %75, 4611686018427387900
  %93 = sub nsw i64 0, %92
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 %93
  %95 = sub nsw i64 0, %92
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 %95
  %97 = add nsw i64 %92, -4
  %98 = lshr exact i64 %97, 2
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 1
  %101 = icmp eq i64 %97, 0
  br i1 %101, label %150, label %102

102:                                              ; preds = %91
  %103 = sub nuw nsw i64 %99, %100
  %104 = getelementptr i8, i8* %59, i64 -8
  %105 = bitcast i8* %104 to %"class.sh::TIntermNode"**
  %106 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %107 = getelementptr i8, i8* %59, i64 -8
  %108 = bitcast i8* %107 to %"class.sh::TIntermNode"**
  %109 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  br label %110

110:                                              ; preds = %110, %102
  %111 = phi i64 [ 0, %102 ], [ %145, %110 ]
  %112 = phi i64 [ %103, %102 ], [ %146, %110 ]
  %113 = sub i64 0, %111
  %114 = sub i64 0, %111
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %105, i64 %113
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %106, i64 %114
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %118 = bitcast %"class.sh::TIntermNode"** %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !107
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -2
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !107
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -1
  %125 = bitcast %"class.sh::TIntermNode"** %124 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %125, align 8, !alias.scope !110, !noalias !107
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -2
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %128, align 8, !alias.scope !110, !noalias !107
  %129 = sub nuw nsw i64 -4, %111
  %130 = sub nuw nsw i64 -4, %111
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 %129
  %132 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 %130
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -1
  %134 = bitcast %"class.sh::TIntermNode"** %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8, !alias.scope !107
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -2
  %137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %138 = bitcast %"class.sh::TIntermNode"** %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 8, !alias.scope !107
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -1
  %141 = bitcast %"class.sh::TIntermNode"** %140 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %141, align 8, !alias.scope !110, !noalias !107
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -2
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 -1
  %144 = bitcast %"class.sh::TIntermNode"** %143 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %144, align 8, !alias.scope !110, !noalias !107
  %145 = add i64 %111, 8
  %146 = add i64 %112, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %110, !llvm.loop !112

148:                                              ; preds = %110
  %149 = sub nuw nsw i64 -8, %111
  br label %150

150:                                              ; preds = %148, %91
  %151 = phi i64 [ 0, %91 ], [ %149, %148 ]
  %152 = icmp eq i64 %100, 0
  br i1 %152, label %171, label %153

153:                                              ; preds = %150
  %154 = getelementptr i8, i8* %59, i64 -8
  %155 = bitcast i8* %154 to %"class.sh::TIntermNode"**
  %156 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 %151
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 %151
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 -1
  %160 = bitcast %"class.sh::TIntermNode"** %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8, !alias.scope !107
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 -2
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %164 = bitcast %"class.sh::TIntermNode"** %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 8, !alias.scope !107
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %167, align 8, !alias.scope !110, !noalias !107
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 -2
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %170 = bitcast %"class.sh::TIntermNode"** %169 to <2 x i64>*
  store <2 x i64> %165, <2 x i64>* %170, align 8, !alias.scope !110, !noalias !107
  br label %171

171:                                              ; preds = %150, %153
  %172 = icmp eq i64 %75, %92
  br i1 %172, label %243, label %173

173:                                              ; preds = %171, %77, %70
  %174 = phi %"class.sh::TIntermNode"** [ %60, %77 ], [ %60, %70 ], [ %94, %171 ]
  %175 = phi %"class.sh::TIntermNode"** [ %67, %77 ], [ %67, %70 ], [ %96, %171 ]
  %176 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %177 = ptrtoint %"class.sh::TIntermNode"** %176 to i64
  %178 = sub i64 %177, %66
  %179 = lshr i64 %178, 3
  %180 = add nuw nsw i64 %179, 1
  %181 = and i64 %180, 7
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %194, label %183

183:                                              ; preds = %173, %183
  %184 = phi %"class.sh::TIntermNode"** [ %187, %183 ], [ %174, %173 ]
  %185 = phi %"class.sh::TIntermNode"** [ %188, %183 ], [ %175, %173 ]
  %186 = phi i64 [ %192, %183 ], [ %181, %173 ]
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  store i64 %190, i64* %191, align 8
  %192 = add i64 %186, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %183, !llvm.loop !113

194:                                              ; preds = %183, %173
  %195 = phi %"class.sh::TIntermNode"** [ undef, %173 ], [ %187, %183 ]
  %196 = phi %"class.sh::TIntermNode"** [ %174, %173 ], [ %187, %183 ]
  %197 = phi %"class.sh::TIntermNode"** [ %175, %173 ], [ %188, %183 ]
  %198 = icmp ult i64 %178, 56
  br i1 %198, label %243, label %199

199:                                              ; preds = %194, %199
  %200 = phi %"class.sh::TIntermNode"** [ %237, %199 ], [ %196, %194 ]
  %201 = phi %"class.sh::TIntermNode"** [ %238, %199 ], [ %197, %194 ]
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -1
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -1
  %204 = bitcast %"class.sh::TIntermNode"** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast %"class.sh::TIntermNode"** %202 to i64*
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -2
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -2
  %209 = bitcast %"class.sh::TIntermNode"** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = bitcast %"class.sh::TIntermNode"** %207 to i64*
  store i64 %210, i64* %211, align 8
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -3
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -3
  %214 = bitcast %"class.sh::TIntermNode"** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.sh::TIntermNode"** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -4
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -4
  %219 = bitcast %"class.sh::TIntermNode"** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -5
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -5
  %224 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast %"class.sh::TIntermNode"** %222 to i64*
  store i64 %225, i64* %226, align 8
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -6
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -6
  %229 = bitcast %"class.sh::TIntermNode"** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -7
  %233 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -7
  %234 = bitcast %"class.sh::TIntermNode"** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast %"class.sh::TIntermNode"** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -8
  %238 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -8
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  store i64 %240, i64* %241, align 8
  %242 = icmp eq %"class.sh::TIntermNode"** %238, %65
  br i1 %242, label %243, label %199, !llvm.loop !114

243:                                              ; preds = %194, %199, %171, %54
  %244 = phi %"class.sh::TIntermNode"** [ %60, %54 ], [ %94, %171 ], [ %195, %194 ], [ %237, %199 ]
  %245 = ptrtoint %"class.sh::TIntermNode"** %244 to i64
  store i64 %245, i64* %56, align 16
  store i64 %63, i64* %55, align 8
  store i64 %63, i64* %57, align 16
  %246 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %43, align 8
  br label %247

247:                                              ; preds = %243, %46
  %248 = phi %"class.sh::TIntermNode"** [ %62, %243 ], [ null, %46 ]
  %249 = phi %"class.sh::TIntermFunctionDefinition"** [ %246, %243 ], [ %44, %46 ]
  %250 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %41, align 8
  %251 = icmp eq %"class.sh::TIntermFunctionDefinition"** %250, %249
  br i1 %251, label %256, label %252

252:                                              ; preds = %247
  %253 = bitcast %"class.sh::TIntermNode"*** %49 to i64*
  %254 = bitcast %"class.sh::TVector.31"* %5 to i64*
  %255 = bitcast %"class.sh::TIntermNode"*** %50 to i64*
  br label %309

256:                                              ; preds = %538, %247
  %257 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7
  %258 = bitcast %"class.sh::TIntermBlock"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #7
  %259 = load i64, i64* %9, align 8
  %260 = load i64, i64* %11, align 8
  %261 = sub i64 %259, %260
  %262 = ashr exact i64 %261, 3
  %263 = icmp ult i64 %262, 2
  br i1 %263, label %270, label %264

264:                                              ; preds = %256
  %265 = inttoptr i64 %260 to %"class.sh::TIntermNode"**
  %266 = add nsw i64 %262, -2
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 %266
  %268 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, align 8
  %269 = bitcast %"class.sh::TIntermNode"* %268 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %270

270:                                              ; preds = %256, %264
  %271 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %269, %264 ], [ null, %256 ]
  %272 = phi %"class.sh::TIntermNode"* [ %268, %264 ], [ null, %256 ]
  %273 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %271, align 8
  %274 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %273, i64 8
  %275 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %274, align 8
  %276 = tail call %"class.sh::TIntermBlock"* %275(%"class.sh::TIntermNode"* %272) #7
  store %"class.sh::TIntermBlock"* %276, %"class.sh::TIntermBlock"** %6, align 8
  %277 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %278 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %277, align 8
  %279 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %280 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %279, align 8
  %281 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, %280
  br i1 %281, label %282, label %302

282:                                              ; preds = %270
  %283 = icmp eq %"class.sh::TIntermBlock"* %276, null
  %284 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %276, i64 0, i32 1
  %285 = select i1 %283, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %284
  %286 = bitcast %"class.sh::TIntermFunctionPrototype"** %3 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %285, %"class.sh::TIntermAggregateBase"** %288, align 8
  %289 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, i64 0, i32 1
  %290 = bitcast %"class.sh::TIntermNode"** %289 to i64*
  store i64 %287, i64* %290, align 8
  %291 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, i64 0, i32 2
  %292 = bitcast %"class.sh::TVector.31"* %5 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 16
  %294 = bitcast %"class.sh::TVector.31"* %291 to <2 x i64>*
  store <2 x i64> %293, <2 x i64>* %294, align 8
  %295 = bitcast %"class.sh::TIntermNode"*** %50 to i64*
  %296 = load i64, i64* %295, align 16
  %297 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %298 = bitcast %"class.sh::TIntermNode"*** %297 to i64*
  store i64 %296, i64* %298, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 0, i64 24, i1 false) #7
  %299 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %278, i64 1
  %300 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %299 to i64
  %301 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %277 to i64*
  store i64 %300, i64* %301, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #7
  br label %308

302:                                              ; preds = %270
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_24TIntermFunctionPrototypeENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.141"* %257, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %6, %"class.sh::TIntermFunctionPrototype"** nonnull dereferenceable(8) %3, %"class.sh::TVector.31"* nonnull dereferenceable(24) %5) #7
  %303 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %48, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #7
  %304 = icmp eq %"class.sh::TIntermNode"** %303, null
  br i1 %304, label %308, label %305

305:                                              ; preds = %302
  %306 = ptrtoint %"class.sh::TIntermNode"** %303 to i64
  %307 = bitcast %"class.sh::TIntermNode"*** %49 to i64*
  store i64 %306, i64* %307, align 8
  br label %308

308:                                              ; preds = %282, %302, %305
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #7
  br label %544

309:                                              ; preds = %542, %252
  %310 = phi %"class.sh::TIntermNode"** [ %248, %252 ], [ %543, %542 ]
  %311 = phi %"class.sh::TIntermNode"** [ %248, %252 ], [ %539, %542 ]
  %312 = phi %"class.sh::TIntermFunctionDefinition"** [ %250, %252 ], [ %540, %542 ]
  %313 = load %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %312, align 8
  %314 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %315 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %314, i64 32) #7
  %316 = bitcast i8* %315 to %"class.sh::TIntermFunctionPrototype"*
  %317 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %313, i64 0, i32 1
  %318 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %317, align 8
  %319 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %318, i64 0, i32 1
  %320 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %319, align 8
  tail call void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* %316, %"class.sh::TFunction"* %320) #7
  %321 = ptrtoint i8* %315 to i64
  %322 = icmp ult %"class.sh::TIntermNode"** %311, %310
  %323 = ptrtoint %"class.sh::TIntermNode"** %310 to i64
  br i1 %322, label %324, label %328

324:                                              ; preds = %309
  %325 = bitcast %"class.sh::TIntermNode"** %311 to i64*
  store i64 %321, i64* %325, align 8
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %311, i64 1
  %327 = ptrtoint %"class.sh::TIntermNode"** %326 to i64
  store i64 %327, i64* %253, align 8
  br label %538

328:                                              ; preds = %309
  %329 = ptrtoint %"class.sh::TIntermNode"** %311 to i64
  %330 = load i64, i64* %254, align 16
  %331 = sub i64 %329, %330
  %332 = ashr exact i64 %331, 3
  %333 = add nsw i64 %332, 1
  %334 = icmp ugt i64 %333, 2305843009213693951
  br i1 %334, label %335, label %337

335:                                              ; preds = %328
  %336 = bitcast %"class.sh::TVector.31"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %336) #13
  unreachable

337:                                              ; preds = %328
  %338 = sub i64 %323, %330
  %339 = ashr exact i64 %338, 3
  %340 = icmp ult i64 %339, 1152921504606846975
  br i1 %340, label %341, label %346

341:                                              ; preds = %337
  %342 = ashr exact i64 %338, 2
  %343 = icmp ult i64 %342, %333
  %344 = select i1 %343, i64 %333, i64 %342
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %352, label %346

346:                                              ; preds = %341, %337
  %347 = phi i64 [ %344, %341 ], [ 2305843009213693951, %337 ]
  %348 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %349 = shl i64 %347, 3
  %350 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %348, i64 %349) #7
  %351 = bitcast i8* %350 to %"class.sh::TIntermNode"**
  br label %352

352:                                              ; preds = %346, %341
  %353 = phi i64 [ %347, %346 ], [ 0, %341 ]
  %354 = phi %"class.sh::TIntermNode"** [ %351, %346 ], [ null, %341 ]
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %332
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %353
  %357 = ptrtoint %"class.sh::TIntermNode"** %356 to i64
  %358 = bitcast %"class.sh::TIntermNode"** %355 to i64*
  store i64 %321, i64* %358, align 8
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 1
  %360 = ptrtoint %"class.sh::TIntermNode"** %359 to i64
  %361 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %48, align 16
  %362 = ptrtoint %"class.sh::TIntermNode"** %361 to i64
  %363 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %49, align 8
  %364 = icmp eq %"class.sh::TIntermNode"** %363, %361
  br i1 %364, label %535, label %365

365:                                              ; preds = %352
  %366 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  %367 = ptrtoint %"class.sh::TIntermNode"** %366 to i64
  %368 = sub i64 %367, %362
  %369 = lshr i64 %368, 3
  %370 = add nuw nsw i64 %369, 1
  %371 = icmp ult i64 %370, 4
  br i1 %371, label %465, label %372

372:                                              ; preds = %365
  %373 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  %375 = ptrtoint %"class.sh::TIntermNode"** %374 to i64
  %376 = sub i64 %375, %362
  %377 = lshr i64 %376, 3
  %378 = sub nsw i64 %332, %377
  %379 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %373, i64 %378
  %380 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  %381 = sub nsw i64 0, %377
  %382 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %380, i64 %381
  %383 = icmp ult %"class.sh::TIntermNode"** %379, %363
  %384 = icmp ult %"class.sh::TIntermNode"** %382, %355
  %385 = and i1 %383, %384
  br i1 %385, label %465, label %386

386:                                              ; preds = %372
  %387 = and i64 %370, 4611686018427387900
  %388 = sub nsw i64 0, %387
  %389 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 %388
  %390 = sub nsw i64 0, %387
  %391 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 %390
  %392 = add nsw i64 %387, -4
  %393 = lshr exact i64 %392, 2
  %394 = add nuw nsw i64 %393, 1
  %395 = and i64 %394, 1
  %396 = icmp eq i64 %392, 0
  br i1 %396, label %441, label %397

397:                                              ; preds = %386
  %398 = sub nuw nsw i64 %394, %395
  %399 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %400 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  %401 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %402 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  br label %403

403:                                              ; preds = %403, %397
  %404 = phi i64 [ 0, %397 ], [ %438, %403 ]
  %405 = phi i64 [ %398, %397 ], [ %439, %403 ]
  %406 = sub i64 0, %404
  %407 = sub i64 0, %404
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 %406
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 %407
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %411 = bitcast %"class.sh::TIntermNode"** %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 8, !alias.scope !115
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -2
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 -1
  %415 = bitcast %"class.sh::TIntermNode"** %414 to <2 x i64>*
  %416 = load <2 x i64>, <2 x i64>* %415, align 8, !alias.scope !115
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 -1
  %418 = bitcast %"class.sh::TIntermNode"** %417 to <2 x i64>*
  store <2 x i64> %412, <2 x i64>* %418, align 8, !alias.scope !118, !noalias !115
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 -2
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %419, i64 -1
  %421 = bitcast %"class.sh::TIntermNode"** %420 to <2 x i64>*
  store <2 x i64> %416, <2 x i64>* %421, align 8, !alias.scope !118, !noalias !115
  %422 = sub nuw nsw i64 -4, %404
  %423 = sub nuw nsw i64 -4, %404
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 %422
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %402, i64 %423
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %427 = bitcast %"class.sh::TIntermNode"** %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8, !alias.scope !115
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -2
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 -1
  %431 = bitcast %"class.sh::TIntermNode"** %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 8, !alias.scope !115
  %433 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -1
  %434 = bitcast %"class.sh::TIntermNode"** %433 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %434, align 8, !alias.scope !118, !noalias !115
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 -1
  %437 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %432, <2 x i64>* %437, align 8, !alias.scope !118, !noalias !115
  %438 = add i64 %404, 8
  %439 = add i64 %405, -2
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %403, !llvm.loop !120

441:                                              ; preds = %403, %386
  %442 = phi i64 [ 0, %386 ], [ %438, %403 ]
  %443 = icmp eq i64 %395, 0
  br i1 %443, label %463, label %444

444:                                              ; preds = %441
  %445 = sub i64 0, %442
  %446 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %447 = sub i64 0, %442
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 -1
  %449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %446, i64 %445
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 %447
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -1
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !115
  %454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -2
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %454, i64 -1
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  %457 = load <2 x i64>, <2 x i64>* %456, align 8, !alias.scope !115
  %458 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -1
  %459 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %459, align 8, !alias.scope !118, !noalias !115
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -2
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -1
  %462 = bitcast %"class.sh::TIntermNode"** %461 to <2 x i64>*
  store <2 x i64> %457, <2 x i64>* %462, align 8, !alias.scope !118, !noalias !115
  br label %463

463:                                              ; preds = %441, %444
  %464 = icmp eq i64 %370, %387
  br i1 %464, label %535, label %465

465:                                              ; preds = %463, %372, %365
  %466 = phi %"class.sh::TIntermNode"** [ %355, %372 ], [ %355, %365 ], [ %389, %463 ]
  %467 = phi %"class.sh::TIntermNode"** [ %363, %372 ], [ %363, %365 ], [ %391, %463 ]
  %468 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -1
  %469 = ptrtoint %"class.sh::TIntermNode"** %468 to i64
  %470 = sub i64 %469, %362
  %471 = lshr i64 %470, 3
  %472 = add nuw nsw i64 %471, 1
  %473 = and i64 %472, 7
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %486, label %475

475:                                              ; preds = %465, %475
  %476 = phi %"class.sh::TIntermNode"** [ %479, %475 ], [ %466, %465 ]
  %477 = phi %"class.sh::TIntermNode"** [ %480, %475 ], [ %467, %465 ]
  %478 = phi i64 [ %484, %475 ], [ %473, %465 ]
  %479 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %476, i64 -1
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %477, i64 -1
  %481 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"class.sh::TIntermNode"** %479 to i64*
  store i64 %482, i64* %483, align 8
  %484 = add i64 %478, -1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %475, !llvm.loop !121

486:                                              ; preds = %475, %465
  %487 = phi %"class.sh::TIntermNode"** [ undef, %465 ], [ %479, %475 ]
  %488 = phi %"class.sh::TIntermNode"** [ %466, %465 ], [ %479, %475 ]
  %489 = phi %"class.sh::TIntermNode"** [ %467, %465 ], [ %480, %475 ]
  %490 = icmp ult i64 %470, 56
  br i1 %490, label %535, label %491

491:                                              ; preds = %486, %491
  %492 = phi %"class.sh::TIntermNode"** [ %529, %491 ], [ %488, %486 ]
  %493 = phi %"class.sh::TIntermNode"** [ %530, %491 ], [ %489, %486 ]
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -1
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -1
  %496 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -2
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -2
  %501 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -3
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -3
  %506 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -4
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -4
  %511 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -5
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -5
  %516 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -6
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -6
  %521 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -7
  %525 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -7
  %526 = bitcast %"class.sh::TIntermNode"** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %492, i64 -8
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %493, i64 -8
  %531 = bitcast %"class.sh::TIntermNode"** %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = bitcast %"class.sh::TIntermNode"** %529 to i64*
  store i64 %532, i64* %533, align 8
  %534 = icmp eq %"class.sh::TIntermNode"** %530, %361
  br i1 %534, label %535, label %491, !llvm.loop !122

535:                                              ; preds = %486, %491, %463, %352
  %536 = phi %"class.sh::TIntermNode"** [ %355, %352 ], [ %389, %463 ], [ %487, %486 ], [ %529, %491 ]
  %537 = ptrtoint %"class.sh::TIntermNode"** %536 to i64
  store i64 %537, i64* %254, align 16
  store i64 %360, i64* %253, align 8
  store i64 %357, i64* %255, align 16
  br label %538

538:                                              ; preds = %324, %535
  %539 = phi %"class.sh::TIntermNode"** [ %326, %324 ], [ %359, %535 ]
  %540 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %312, i64 1
  %541 = icmp eq %"class.sh::TIntermFunctionDefinition"** %540, %249
  br i1 %541, label %256, label %542

542:                                              ; preds = %538
  %543 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %50, align 16
  br label %309

544:                                              ; preds = %31, %308
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  br label %545

545:                                              ; preds = %23, %544
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_135UpdateFunctionsDefinitionsTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermFunctionDefinition"*, align 8
  %5 = alloca %"class.sh::TFunction"*, align 8
  %6 = alloca %"class.sh::TVector.31", align 16
  %7 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermFunctionDefinition"* %2, %"class.sh::TIntermFunctionDefinition"** %4, align 8
  %8 = bitcast %"class.sh::TFunction"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %9 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %2, i64 0, i32 1
  %10 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %10, i64 0, i32 1
  %12 = bitcast %"class.sh::TFunction"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.sh::TFunction"** %5 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 1
  %16 = bitcast %"class.absl::flat_hash_map"** %15 to %"class.absl::container_internal::raw_hash_map"**
  %17 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %16, align 8
  %18 = call fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE2atIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofIKSI_EEPT_RSP_EclL_ZNSE_7declvalIRSO_EEDTclsr3std3__1E9__declvalISP_ELi0EEEvEEEEERKSP_(%"class.absl::container_internal::raw_hash_map"* %17, %"class.sh::TFunction"** nonnull dereferenceable(8) %5)
  %19 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %18, i64 0, i32 2, i32 0, i32 0, i32 0
  %20 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %19, align 8
  %21 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %18, i64 0, i32 2, i32 0, i32 0, i32 1
  %22 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %21, align 8
  %23 = icmp eq %"class.sh::TIntermFunctionDefinition"** %20, %22
  %24 = ptrtoint %"class.sh::TIntermFunctionDefinition"* %2 to i64
  br i1 %23, label %520, label %25

25:                                               ; preds = %3
  %26 = bitcast %"class.sh::TVector.31"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #7
  %27 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #7
  %30 = getelementptr inbounds %"struct.sh::(anonymous namespace)::FunctionData", %"struct.sh::(anonymous namespace)::FunctionData"* %18, i64 0, i32 0
  %31 = load i8, i8* %30, align 8, !range !20
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %226, label %33

33:                                               ; preds = %25
  %34 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %35 = bitcast %"class.sh::TVector.31"* %6 to i64*
  %36 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  %37 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %38 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %37, i64 8) #7
  %39 = bitcast i8* %38 to %"class.sh::TIntermNode"**
  %40 = getelementptr inbounds i8, i8* %38, i64 8
  %41 = bitcast i8* %40 to %"class.sh::TIntermNode"**
  %42 = ptrtoint i8* %40 to i64
  %43 = bitcast i8* %38 to i64*
  store i64 %24, i64* %43, align 8
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 16
  %45 = ptrtoint %"class.sh::TIntermNode"** %44 to i64
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = icmp eq %"class.sh::TIntermNode"** %46, %44
  br i1 %48, label %222, label %49

49:                                               ; preds = %33
  %50 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %51 = ptrtoint %"class.sh::TIntermNode"** %50 to i64
  %52 = sub i64 %51, %45
  %53 = lshr i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = icmp ult i64 %54, 4
  br i1 %55, label %152, label %56

56:                                               ; preds = %49
  %57 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %58 = ptrtoint %"class.sh::TIntermNode"** %57 to i64
  %59 = sub i64 %58, %45
  %60 = lshr i64 %59, 3
  %61 = and i64 %59, -8
  %62 = xor i64 %61, -8
  %63 = getelementptr i8, i8* %38, i64 %62
  %64 = xor i64 %60, -1
  %65 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %64
  %66 = bitcast %"class.sh::TIntermNode"** %65 to i8*
  %67 = icmp ult i8* %63, %47
  %68 = icmp ugt i8* %38, %66
  %69 = and i1 %67, %68
  br i1 %69, label %152, label %70

70:                                               ; preds = %56
  %71 = and i64 %54, 4611686018427387900
  %72 = sub nsw i64 0, %71
  %73 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %39, i64 %72
  %74 = sub nsw i64 0, %71
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %74
  %76 = add nsw i64 %71, -4
  %77 = lshr exact i64 %76, 2
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 1
  %80 = icmp eq i64 %76, 0
  br i1 %80, label %129, label %81

81:                                               ; preds = %70
  %82 = sub nuw nsw i64 %78, %79
  %83 = getelementptr i8, i8* %38, i64 -8
  %84 = bitcast i8* %83 to %"class.sh::TIntermNode"**
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %86 = getelementptr i8, i8* %38, i64 -8
  %87 = bitcast i8* %86 to %"class.sh::TIntermNode"**
  %88 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  br label %89

89:                                               ; preds = %89, %81
  %90 = phi i64 [ 0, %81 ], [ %124, %89 ]
  %91 = phi i64 [ %82, %81 ], [ %125, %89 ]
  %92 = sub i64 0, %90
  %93 = sub i64 0, %90
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, i64 %92
  %95 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 %93
  %96 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 -1
  %97 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 8, !alias.scope !123
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 -2
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !123
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 -1
  %104 = bitcast %"class.sh::TIntermNode"** %103 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %104, align 8, !alias.scope !126, !noalias !123
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 -2
  %106 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %105, i64 -1
  %107 = bitcast %"class.sh::TIntermNode"** %106 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %107, align 8, !alias.scope !126, !noalias !123
  %108 = sub nuw nsw i64 -4, %90
  %109 = sub nuw nsw i64 -4, %90
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 %108
  %111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 %109
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 -1
  %113 = bitcast %"class.sh::TIntermNode"** %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 8, !alias.scope !123
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 -2
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -1
  %117 = bitcast %"class.sh::TIntermNode"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !123
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %120 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %120, align 8, !alias.scope !126, !noalias !123
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -2
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %123 = bitcast %"class.sh::TIntermNode"** %122 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %123, align 8, !alias.scope !126, !noalias !123
  %124 = add i64 %90, 8
  %125 = add i64 %91, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %89, !llvm.loop !128

127:                                              ; preds = %89
  %128 = sub nuw nsw i64 -8, %90
  br label %129

129:                                              ; preds = %127, %70
  %130 = phi i64 [ 0, %70 ], [ %128, %127 ]
  %131 = icmp eq i64 %79, 0
  br i1 %131, label %150, label %132

132:                                              ; preds = %129
  %133 = getelementptr i8, i8* %38, i64 -8
  %134 = bitcast i8* %133 to %"class.sh::TIntermNode"**
  %135 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 %130
  %137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 %130
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 -1
  %139 = bitcast %"class.sh::TIntermNode"** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !123
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 -2
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !123
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %146 = bitcast %"class.sh::TIntermNode"** %145 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %146, align 8, !alias.scope !126, !noalias !123
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -2
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 -1
  %149 = bitcast %"class.sh::TIntermNode"** %148 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %149, align 8, !alias.scope !126, !noalias !123
  br label %150

150:                                              ; preds = %129, %132
  %151 = icmp eq i64 %54, %71
  br i1 %151, label %222, label %152

152:                                              ; preds = %150, %56, %49
  %153 = phi %"class.sh::TIntermNode"** [ %39, %56 ], [ %39, %49 ], [ %73, %150 ]
  %154 = phi %"class.sh::TIntermNode"** [ %46, %56 ], [ %46, %49 ], [ %75, %150 ]
  %155 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %154, i64 -1
  %156 = ptrtoint %"class.sh::TIntermNode"** %155 to i64
  %157 = sub i64 %156, %45
  %158 = lshr i64 %157, 3
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 7
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %173, label %162

162:                                              ; preds = %152, %162
  %163 = phi %"class.sh::TIntermNode"** [ %166, %162 ], [ %153, %152 ]
  %164 = phi %"class.sh::TIntermNode"** [ %167, %162 ], [ %154, %152 ]
  %165 = phi i64 [ %171, %162 ], [ %160, %152 ]
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 -1
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %168 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"class.sh::TIntermNode"** %166 to i64*
  store i64 %169, i64* %170, align 8
  %171 = add i64 %165, -1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %162, !llvm.loop !129

173:                                              ; preds = %162, %152
  %174 = phi %"class.sh::TIntermNode"** [ undef, %152 ], [ %166, %162 ]
  %175 = phi %"class.sh::TIntermNode"** [ %153, %152 ], [ %166, %162 ]
  %176 = phi %"class.sh::TIntermNode"** [ %154, %152 ], [ %167, %162 ]
  %177 = icmp ult i64 %157, 56
  br i1 %177, label %222, label %178

178:                                              ; preds = %173, %178
  %179 = phi %"class.sh::TIntermNode"** [ %216, %178 ], [ %175, %173 ]
  %180 = phi %"class.sh::TIntermNode"** [ %217, %178 ], [ %176, %173 ]
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -1
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -1
  %183 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %"class.sh::TIntermNode"** %181 to i64*
  store i64 %184, i64* %185, align 8
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -2
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -2
  %188 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -3
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -3
  %193 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  store i64 %194, i64* %195, align 8
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -4
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -4
  %198 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  store i64 %199, i64* %200, align 8
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -5
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -5
  %203 = bitcast %"class.sh::TIntermNode"** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  store i64 %204, i64* %205, align 8
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -6
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -6
  %208 = bitcast %"class.sh::TIntermNode"** %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  store i64 %209, i64* %210, align 8
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -7
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -7
  %213 = bitcast %"class.sh::TIntermNode"** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -8
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 -8
  %218 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  store i64 %219, i64* %220, align 8
  %221 = icmp eq %"class.sh::TIntermNode"** %217, %44
  br i1 %221, label %222, label %178, !llvm.loop !130

222:                                              ; preds = %173, %178, %150, %33
  %223 = phi %"class.sh::TIntermNode"** [ %39, %33 ], [ %73, %150 ], [ %174, %173 ], [ %216, %178 ]
  %224 = ptrtoint %"class.sh::TIntermNode"** %223 to i64
  store i64 %224, i64* %35, align 16
  store i64 %42, i64* %34, align 8
  store i64 %42, i64* %36, align 16
  %225 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %21, align 8
  br label %226

226:                                              ; preds = %222, %25
  %227 = phi %"class.sh::TIntermNode"** [ %41, %222 ], [ null, %25 ]
  %228 = phi %"class.sh::TIntermFunctionDefinition"** [ %225, %222 ], [ %22, %25 ]
  %229 = load %"class.sh::TIntermFunctionDefinition"**, %"class.sh::TIntermFunctionDefinition"*** %19, align 8
  %230 = icmp eq %"class.sh::TIntermFunctionDefinition"** %229, %228
  br i1 %230, label %235, label %231

231:                                              ; preds = %226
  %232 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %233 = bitcast %"class.sh::TVector.31"* %6 to i64*
  %234 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  br label %292

235:                                              ; preds = %514, %226
  %236 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7
  %237 = bitcast %"class.sh::TIntermBlock"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #7
  %238 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %239 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %240 = bitcast %"class.sh::TIntermNode"*** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.std::__1::vector.32"* %238 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = sub i64 %241, %243
  %245 = ashr exact i64 %244, 3
  %246 = icmp ult i64 %245, 2
  br i1 %246, label %253, label %247

247:                                              ; preds = %235
  %248 = inttoptr i64 %243 to %"class.sh::TIntermNode"**
  %249 = add nsw i64 %245, -2
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 %249
  %251 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, align 8
  %252 = bitcast %"class.sh::TIntermNode"* %251 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %253

253:                                              ; preds = %235, %247
  %254 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %252, %247 ], [ null, %235 ]
  %255 = phi %"class.sh::TIntermNode"* [ %251, %247 ], [ null, %235 ]
  %256 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %254, align 8
  %257 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %256, i64 8
  %258 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %257, align 8
  %259 = tail call %"class.sh::TIntermBlock"* %258(%"class.sh::TIntermNode"* %255) #7
  store %"class.sh::TIntermBlock"* %259, %"class.sh::TIntermBlock"** %7, align 8
  %260 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %261 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %260, align 8
  %262 = getelementptr inbounds %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser", %"class.sh::(anonymous namespace)::UpdateFunctionsDefinitionsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %263 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %262, align 8
  %264 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, %263
  br i1 %264, label %265, label %285

265:                                              ; preds = %253
  %266 = icmp eq %"class.sh::TIntermBlock"* %259, null
  %267 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %259, i64 0, i32 1
  %268 = select i1 %266, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %267
  %269 = bitcast %"class.sh::TIntermFunctionDefinition"** %4 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %268, %"class.sh::TIntermAggregateBase"** %271, align 8
  %272 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, i64 0, i32 1
  %273 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  store i64 %270, i64* %273, align 8
  %274 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, i64 0, i32 2
  %275 = bitcast %"class.sh::TVector.31"* %6 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 16
  %277 = bitcast %"class.sh::TVector.31"* %274 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %277, align 8
  %278 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  %279 = load i64, i64* %278, align 16
  %280 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %281 = bitcast %"class.sh::TIntermNode"*** %280 to i64*
  store i64 %279, i64* %281, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #7
  %282 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %261, i64 1
  %283 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %282 to i64
  %284 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %260 to i64*
  store i64 %283, i64* %284, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #7
  br label %291

285:                                              ; preds = %253
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_25TIntermFunctionDefinitionENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.141"* %236, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %7, %"class.sh::TIntermFunctionDefinition"** nonnull dereferenceable(8) %4, %"class.sh::TVector.31"* nonnull dereferenceable(24) %6) #7
  %286 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #7
  %287 = icmp eq %"class.sh::TIntermNode"** %286, null
  br i1 %287, label %291, label %288

288:                                              ; preds = %285
  %289 = ptrtoint %"class.sh::TIntermNode"** %286 to i64
  %290 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  store i64 %289, i64* %290, align 8
  br label %291

291:                                              ; preds = %265, %285, %288
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #7
  br label %520

292:                                              ; preds = %518, %231
  %293 = phi %"class.sh::TIntermNode"** [ %227, %231 ], [ %519, %518 ]
  %294 = phi %"class.sh::TIntermNode"** [ %227, %231 ], [ %515, %518 ]
  %295 = phi %"class.sh::TIntermFunctionDefinition"** [ %229, %231 ], [ %516, %518 ]
  %296 = bitcast %"class.sh::TIntermFunctionDefinition"** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = icmp ult %"class.sh::TIntermNode"** %294, %293
  %299 = ptrtoint %"class.sh::TIntermNode"** %293 to i64
  br i1 %298, label %300, label %304

300:                                              ; preds = %292
  %301 = bitcast %"class.sh::TIntermNode"** %294 to i64*
  store i64 %297, i64* %301, align 8
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 1
  %303 = ptrtoint %"class.sh::TIntermNode"** %302 to i64
  store i64 %303, i64* %232, align 8
  br label %514

304:                                              ; preds = %292
  %305 = ptrtoint %"class.sh::TIntermNode"** %294 to i64
  %306 = load i64, i64* %233, align 16
  %307 = sub i64 %305, %306
  %308 = ashr exact i64 %307, 3
  %309 = add nsw i64 %308, 1
  %310 = icmp ugt i64 %309, 2305843009213693951
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.sh::TVector.31"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %312) #13
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %299, %306
  %315 = ashr exact i64 %314, 3
  %316 = icmp ult i64 %315, 1152921504606846975
  br i1 %316, label %317, label %322

317:                                              ; preds = %313
  %318 = ashr exact i64 %314, 2
  %319 = icmp ult i64 %318, %309
  %320 = select i1 %319, i64 %309, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %328, label %322

322:                                              ; preds = %317, %313
  %323 = phi i64 [ %320, %317 ], [ 2305843009213693951, %313 ]
  %324 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %325 = shl i64 %323, 3
  %326 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %324, i64 %325) #7
  %327 = bitcast i8* %326 to %"class.sh::TIntermNode"**
  br label %328

328:                                              ; preds = %322, %317
  %329 = phi i64 [ %323, %322 ], [ 0, %317 ]
  %330 = phi %"class.sh::TIntermNode"** [ %327, %322 ], [ null, %317 ]
  %331 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 %308
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 %329
  %333 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %334 = bitcast %"class.sh::TIntermNode"** %331 to i64*
  store i64 %297, i64* %334, align 8
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 1
  %336 = ptrtoint %"class.sh::TIntermNode"** %335 to i64
  %337 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 16
  %338 = ptrtoint %"class.sh::TIntermNode"** %337 to i64
  %339 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %340 = icmp eq %"class.sh::TIntermNode"** %339, %337
  br i1 %340, label %511, label %341

341:                                              ; preds = %328
  %342 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %343 = ptrtoint %"class.sh::TIntermNode"** %342 to i64
  %344 = sub i64 %343, %338
  %345 = lshr i64 %344, 3
  %346 = add nuw nsw i64 %345, 1
  %347 = icmp ult i64 %346, 4
  br i1 %347, label %441, label %348

348:                                              ; preds = %341
  %349 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %350 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %351 = ptrtoint %"class.sh::TIntermNode"** %350 to i64
  %352 = sub i64 %351, %338
  %353 = lshr i64 %352, 3
  %354 = sub nsw i64 %308, %353
  %355 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 %354
  %356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %357 = sub nsw i64 0, %353
  %358 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 %357
  %359 = icmp ult %"class.sh::TIntermNode"** %355, %339
  %360 = icmp ult %"class.sh::TIntermNode"** %358, %331
  %361 = and i1 %359, %360
  br i1 %361, label %441, label %362

362:                                              ; preds = %348
  %363 = and i64 %346, 4611686018427387900
  %364 = sub nsw i64 0, %363
  %365 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 %364
  %366 = sub nsw i64 0, %363
  %367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 %366
  %368 = add nsw i64 %363, -4
  %369 = lshr exact i64 %368, 2
  %370 = add nuw nsw i64 %369, 1
  %371 = and i64 %370, 1
  %372 = icmp eq i64 %368, 0
  br i1 %372, label %417, label %373

373:                                              ; preds = %362
  %374 = sub nuw nsw i64 %370, %371
  %375 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %376 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %377 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %378 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  br label %379

379:                                              ; preds = %379, %373
  %380 = phi i64 [ 0, %373 ], [ %414, %379 ]
  %381 = phi i64 [ %374, %373 ], [ %415, %379 ]
  %382 = sub i64 0, %380
  %383 = sub i64 0, %380
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 %382
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 %383
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %385, i64 -1
  %387 = bitcast %"class.sh::TIntermNode"** %386 to <2 x i64>*
  %388 = load <2 x i64>, <2 x i64>* %387, align 8, !alias.scope !131
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %385, i64 -2
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 -1
  %391 = bitcast %"class.sh::TIntermNode"** %390 to <2 x i64>*
  %392 = load <2 x i64>, <2 x i64>* %391, align 8, !alias.scope !131
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %394 = bitcast %"class.sh::TIntermNode"** %393 to <2 x i64>*
  store <2 x i64> %388, <2 x i64>* %394, align 8, !alias.scope !134, !noalias !131
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -2
  %396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %395, i64 -1
  %397 = bitcast %"class.sh::TIntermNode"** %396 to <2 x i64>*
  store <2 x i64> %392, <2 x i64>* %397, align 8, !alias.scope !134, !noalias !131
  %398 = sub nuw nsw i64 -4, %380
  %399 = sub nuw nsw i64 -4, %380
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 %398
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 %399
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %403 = bitcast %"class.sh::TIntermNode"** %402 to <2 x i64>*
  %404 = load <2 x i64>, <2 x i64>* %403, align 8, !alias.scope !131
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -2
  %406 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %405, i64 -1
  %407 = bitcast %"class.sh::TIntermNode"** %406 to <2 x i64>*
  %408 = load <2 x i64>, <2 x i64>* %407, align 8, !alias.scope !131
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %410 = bitcast %"class.sh::TIntermNode"** %409 to <2 x i64>*
  store <2 x i64> %404, <2 x i64>* %410, align 8, !alias.scope !134, !noalias !131
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -2
  %412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %411, i64 -1
  %413 = bitcast %"class.sh::TIntermNode"** %412 to <2 x i64>*
  store <2 x i64> %408, <2 x i64>* %413, align 8, !alias.scope !134, !noalias !131
  %414 = add i64 %380, 8
  %415 = add i64 %381, -2
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %379, !llvm.loop !136

417:                                              ; preds = %379, %362
  %418 = phi i64 [ 0, %362 ], [ %414, %379 ]
  %419 = icmp eq i64 %371, 0
  br i1 %419, label %439, label %420

420:                                              ; preds = %417
  %421 = sub i64 0, %418
  %422 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %423 = sub i64 0, %418
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 %421
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 %423
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -1
  %428 = bitcast %"class.sh::TIntermNode"** %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !131
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -2
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !131
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %435 = bitcast %"class.sh::TIntermNode"** %434 to <2 x i64>*
  store <2 x i64> %429, <2 x i64>* %435, align 8, !alias.scope !134, !noalias !131
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -2
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 -1
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %438, align 8, !alias.scope !134, !noalias !131
  br label %439

439:                                              ; preds = %417, %420
  %440 = icmp eq i64 %346, %363
  br i1 %440, label %511, label %441

441:                                              ; preds = %439, %348, %341
  %442 = phi %"class.sh::TIntermNode"** [ %331, %348 ], [ %331, %341 ], [ %365, %439 ]
  %443 = phi %"class.sh::TIntermNode"** [ %339, %348 ], [ %339, %341 ], [ %367, %439 ]
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %445 = ptrtoint %"class.sh::TIntermNode"** %444 to i64
  %446 = sub i64 %445, %338
  %447 = lshr i64 %446, 3
  %448 = add nuw nsw i64 %447, 1
  %449 = and i64 %448, 7
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %462, label %451

451:                                              ; preds = %441, %451
  %452 = phi %"class.sh::TIntermNode"** [ %455, %451 ], [ %442, %441 ]
  %453 = phi %"class.sh::TIntermNode"** [ %456, %451 ], [ %443, %441 ]
  %454 = phi i64 [ %460, %451 ], [ %449, %441 ]
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %452, i64 -1
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %453, i64 -1
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = add i64 %454, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %451, !llvm.loop !137

462:                                              ; preds = %451, %441
  %463 = phi %"class.sh::TIntermNode"** [ undef, %441 ], [ %455, %451 ]
  %464 = phi %"class.sh::TIntermNode"** [ %442, %441 ], [ %455, %451 ]
  %465 = phi %"class.sh::TIntermNode"** [ %443, %441 ], [ %456, %451 ]
  %466 = icmp ult i64 %446, 56
  br i1 %466, label %511, label %467

467:                                              ; preds = %462, %467
  %468 = phi %"class.sh::TIntermNode"** [ %505, %467 ], [ %464, %462 ]
  %469 = phi %"class.sh::TIntermNode"** [ %506, %467 ], [ %465, %462 ]
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -1
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -1
  %472 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  store i64 %473, i64* %474, align 8
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -2
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -2
  %477 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  store i64 %478, i64* %479, align 8
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -3
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -3
  %482 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -4
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -4
  %487 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  store i64 %488, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -5
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -5
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  store i64 %493, i64* %494, align 8
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -6
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -6
  %497 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -7
  %501 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -7
  %502 = bitcast %"class.sh::TIntermNode"** %501 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  store i64 %503, i64* %504, align 8
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -8
  %506 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -8
  %507 = bitcast %"class.sh::TIntermNode"** %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  store i64 %508, i64* %509, align 8
  %510 = icmp eq %"class.sh::TIntermNode"** %506, %337
  br i1 %510, label %511, label %467, !llvm.loop !138

511:                                              ; preds = %462, %467, %439, %328
  %512 = phi %"class.sh::TIntermNode"** [ %331, %328 ], [ %365, %439 ], [ %463, %462 ], [ %505, %467 ]
  %513 = ptrtoint %"class.sh::TIntermNode"** %512 to i64
  store i64 %513, i64* %233, align 16
  store i64 %336, i64* %232, align 8
  store i64 %333, i64* %234, align 16
  br label %514

514:                                              ; preds = %300, %511
  %515 = phi %"class.sh::TIntermNode"** [ %302, %300 ], [ %335, %511 ]
  %516 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"*, %"class.sh::TIntermFunctionDefinition"** %295, i64 1
  %517 = icmp eq %"class.sh::TIntermFunctionDefinition"** %516, %228
  br i1 %517, label %235, label %518

518:                                              ; preds = %514
  %519 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %29, align 16
  br label %292

520:                                              ; preds = %3, %291
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc dereferenceable(40) %"struct.sh::(anonymous namespace)::FunctionData"* @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE2atIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofIKSI_EEPT_RSP_EclL_ZNSE_7declvalIRSO_EEDTclsr3std3__1E9__declvalISP_ELi0EEEvEEEEERKSP_(%"class.absl::container_internal::raw_hash_map"* nocapture readonly, %"class.sh::TFunction"** nocapture readonly dereferenceable(8)) unnamed_addr #5 align 2 {
  %3 = bitcast %"class.sh::TFunction"** %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %6 = add i64 %5, %4
  %7 = zext i64 %6 to i128
  %8 = mul nuw i128 %7, 11376068507788127593
  %9 = lshr i128 %8, 64
  %10 = xor i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = add i64 %4, %11
  %13 = zext i64 %12 to i128
  %14 = mul nuw i128 %13, 11376068507788127593
  %15 = lshr i128 %14, 64
  %16 = xor i128 %15, %14
  %17 = trunc i128 %16 to i64
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = lshr i64 %17, 7
  %23 = ptrtoint i8* %19 to i64
  %24 = lshr i64 %23, 12
  %25 = xor i64 %22, %24
  %26 = trunc i128 %16 to i8
  %27 = and i8 %26, 127
  %28 = insertelement <16 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %31 = inttoptr i64 %4 to %"class.sh::TFunction"*
  br label %32

32:                                               ; preds = %62, %2
  %33 = phi i64 [ %25, %2 ], [ %64, %62 ]
  %34 = phi i64 [ 0, %2 ], [ %63, %62 ]
  %35 = and i64 %33, %21
  %36 = getelementptr inbounds i8, i8* %19, i64 %35
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = icmp eq <16 x i8> %29, %38
  %40 = bitcast <16 x i1> %39 to i16
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %32
  %43 = zext i16 %40 to i32
  %44 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %30, align 8
  br label %45

45:                                               ; preds = %54, %42
  %46 = phi i32 [ %43, %42 ], [ %56, %54 ]
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 false) #7, !range !61
  %48 = zext i32 %47 to i64
  %49 = add i64 %35, %48
  %50 = and i64 %49, %21
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 0
  %52 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %51, align 8
  %53 = icmp eq %"class.sh::TFunction"* %52, %31
  br i1 %53, label %65, label %54, !prof !62

54:                                               ; preds = %45
  %55 = add i32 %46, -1
  %56 = and i32 %55, %46
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %45

58:                                               ; preds = %54, %32
  %59 = icmp eq <16 x i8> %38, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %71, !prof !63

62:                                               ; preds = %58
  %63 = add i64 %34, 16
  %64 = add i64 %63, %35
  br label %32

65:                                               ; preds = %45
  %66 = getelementptr inbounds i8, i8* %19, i64 %50
  %67 = icmp ne i8* %66, null
  tail call void @llvm.assume(i1 %67) #7
  %68 = load i8, i8* %66, align 1
  %69 = icmp sgt i8 %68, -1
  br i1 %69, label %72, label %70, !prof !62

70:                                               ; preds = %65
  tail call void @llvm.trap() #7
  unreachable

71:                                               ; preds = %58
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #13
  unreachable

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 1
  ret %"struct.sh::(anonymous namespace)::FunctionData"* %73
}

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_24TIntermFunctionPrototypeENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.141"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermFunctionPrototype"** dereferenceable(8), %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #12 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.141"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.141"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #13
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #14
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermFunctionPrototype"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector.31"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #7
  %50 = bitcast %"class.sh::TVector.31"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector.31"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector.31"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #7
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #7
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector.31"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #7
  %82 = bitcast %"class.sh::TVector.31"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector.31"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector.31"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #7
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #14
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_25TIntermFunctionDefinitionENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.141"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermFunctionDefinition"** dereferenceable(8), %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #12 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.141"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.141"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #13
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #14
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermFunctionDefinition"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector.31"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #7
  %50 = bitcast %"class.sh::TVector.31"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector.31"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector.31"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #7
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #7
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector.31"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #7
  %82 = bitcast %"class.sh::TVector.31"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector.31"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector.31"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #7
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #14
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{i8 0, i8 2}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !10}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !8}
!56 = !{!57, !59}
!57 = distinct !{!57, !58, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_: argument 0"}
!58 = distinct !{!58, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_"}
!59 = distinct !{!59, !60, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_: argument 0"}
!60 = distinct !{!60, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TFunctionENS3_12_GLOBAL__N_112FunctionDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_"}
!61 = !{i32 0, i32 33}
!62 = !{!"branch_weights", i32 2000, i32 1}
!63 = !{!"branch_weights", i32 1, i32 2000}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !10}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !10}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !10}
!80 = distinct !{!80, !8}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !8}
!87 = distinct !{!87, !10}
!88 = distinct !{!88, !8}
!89 = !{!90, !92}
!90 = distinct !{!90, !91, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!91 = distinct !{!91, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!92 = distinct !{!92, !93, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_: argument 0"}
!93 = distinct !{!93, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_"}
!94 = !{!95, !97}
!95 = distinct !{!95, !96, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!96 = distinct !{!96, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!97 = distinct !{!97, !98, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_: argument 0"}
!98 = distinct !{!98, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_"}
!99 = !{!100}
!100 = distinct !{!100, !101}
!101 = distinct !{!101, !"LVerDomain"}
!102 = !{!103}
!103 = distinct !{!103, !101}
!104 = distinct !{!104, !8}
!105 = distinct !{!105, !10}
!106 = distinct !{!106, !8}
!107 = !{!108}
!108 = distinct !{!108, !109}
!109 = distinct !{!109, !"LVerDomain"}
!110 = !{!111}
!111 = distinct !{!111, !109}
!112 = distinct !{!112, !8}
!113 = distinct !{!113, !10}
!114 = distinct !{!114, !8}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = !{!119}
!119 = distinct !{!119, !117}
!120 = distinct !{!120, !8}
!121 = distinct !{!121, !10}
!122 = distinct !{!122, !8}
!123 = !{!124}
!124 = distinct !{!124, !125}
!125 = distinct !{!125, !"LVerDomain"}
!126 = !{!127}
!127 = distinct !{!127, !125}
!128 = distinct !{!128, !8}
!129 = distinct !{!129, !10}
!130 = distinct !{!130, !8}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = distinct !{!136, !8}
!137 = distinct !{!137, !10}
!138 = distinct !{!138, !8}
