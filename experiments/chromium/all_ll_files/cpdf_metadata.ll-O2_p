; ModuleID = '../../third_party/pdfium/core/fpdfdoc/cpdf_metadata.cpp'
source_filename = "../../third_party/pdfium/core/fpdfdoc/cpdf_metadata.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_Metadata = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type { %class.CPDF_Object, i8, i32, %"class.fxcrt::RetainPtr.0", %"class.std::__1::unique_ptr.5", %"class.fxcrt::RetainPtr.9" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i8* }
%"class.fxcrt::RetainPtr.9" = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.42", i64 }
%"class.fxcrt::UnownedPtr.42" = type { i8* }
%"class.pdfium::span.45" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%class.CFX_XMLParser = type <{ %class.CFX_XMLNode*, %"class.fxcrt::RetainPtr.46", %"class.std::__1::vector.52", i64, i32, [4 x i8] }>
%class.CFX_XMLNode = type { %"class.fxcrt::TreeNode" }
%"class.fxcrt::TreeNode" = type { i32 (...)**, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode* }
%"class.fxcrt::RetainPtr.46" = type { %"class.std::__1::unique_ptr.47" }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.CFX_SeekableStreamProxy* }
%class.CFX_SeekableStreamProxy = type opaque
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { i32*, i32*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { i32* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.30", %"class.fxcrt::RetainPtr" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.5", %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.24" }
%"class.fxcrt::RetainPtr.24" = type { %"class.std::__1::unique_ptr.25" }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.fxcrt::RetainPtr.30" = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.CPDF_Dictionary* }
%class.CFX_ReadOnlyMemoryStream = type { %class.IFX_SeekableReadStream.base, %"class.std::__1::unique_ptr.5", %"class.pdfium::span", %"class.fxcrt::Retainable" }
%class.IFX_SeekableReadStream.base = type { %class.IFX_StreamWithSize }
%class.CFX_XMLDocument = type { %"class.std::__1::vector.60", %"class.fxcrt::UnownedPtr.71" }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"class.std::__1::unique_ptr.62"*, %"class.std::__1::unique_ptr.62"*, %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %class.CFX_XMLNode* }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.std::__1::unique_ptr.62"* }
%"class.fxcrt::UnownedPtr.71" = type { %class.CFX_XMLElement* }
%class.CFX_XMLElement = type { %class.CFX_XMLNode, %"class.fxcrt::WideString", %"class.std::__1::map" }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.72" }
%"class.fxcrt::RetainPtr.72" = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.fxcrt::StringDataTemplate.76"* }
%"class.fxcrt::StringDataTemplate.76" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { i64 }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.std::__1::__vector_base_common" = type { i8 }

@.str = private unnamed_addr constant [14 x i8] c"xmlns:adhocwf\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"http://ns.adobe.com/AcrobatAdhocWorkflow/1.0/\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"adhocwf:workflowType\00", align 1
@.str.3 = private unnamed_addr constant [1 x i32] zeroinitializer, align 4

@_ZN13CPDF_MetadataC1EPK11CPDF_Stream = hidden unnamed_addr alias void (%class.CPDF_Metadata*, %class.CPDF_Stream*), void (%class.CPDF_Metadata*, %class.CPDF_Stream*)* @_ZN13CPDF_MetadataC2EPK11CPDF_Stream
@_ZN13CPDF_MetadataD1Ev = hidden unnamed_addr alias void (%class.CPDF_Metadata*), void (%class.CPDF_Metadata*)* @_ZN13CPDF_MetadataD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CPDF_MetadataC2EPK11CPDF_Stream(%class.CPDF_Metadata* nocapture, %class.CPDF_Stream*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %class.CPDF_Stream* %1 to i64
  %4 = bitcast %class.CPDF_Metadata* %0 to i64*
  store i64 %3, i64* %4, align 8
  %5 = icmp eq %class.CPDF_Stream* %1, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CPDF_Stream, %class.CPDF_Stream* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, 1
  store i64 %9, i64* %7, align 8
  br label %10

10:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_MetadataD2Ev(%class.CPDF_Metadata* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Metadata, %class.CPDF_Metadata* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CPDF_Stream*, %class.CPDF_Stream** %2, align 8
  store %class.CPDF_Stream* null, %class.CPDF_Stream** %2, align 8
  %4 = icmp eq %class.CPDF_Stream* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_Stream, %class.CPDF_Stream* %3, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CPDF_Stream, %class.CPDF_Stream* %3, i64 0, i32 0, i32 0
  %12 = bitcast %class.CPDF_Stream* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #8
  br label %16

16:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13CPDF_Metadata18CheckForSharedFormEv(%"class.std::__1::vector"* noalias nocapture sret, %class.CPDF_Metadata* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.pdfium::span"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.pdfium::span.45"*
  %7 = alloca %class.CFX_XMLParser, align 8
  %8 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %9 = alloca %"class.std::__1::vector", align 16
  %10 = getelementptr inbounds %class.CPDF_Metadata, %class.CPDF_Metadata* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CPDF_Stream*, %class.CPDF_Stream** %10, align 8
  %12 = tail call i8* @_Znwm(i64 64) #9, !noalias !2
  %13 = bitcast i8* %12 to %class.CPDF_StreamAcc*
  tail call void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc* nonnull %13, %class.CPDF_Stream* %11) #8, !noalias !2
  %14 = getelementptr inbounds i8, i8* %12, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8, !noalias !2
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* %15, align 8, !noalias !2
  tail call void @_ZN14CPDF_StreamAcc19LoadAllDataFilteredEv(%class.CPDF_StreamAcc* nonnull %13) #8
  %18 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #8
  call void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.45"* nonnull sret %6, %class.CPDF_StreamAcc* nonnull %13) #8
  %19 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19)
  %20 = call i8* @_Znwm(i64 48) #9, !noalias !5
  %21 = bitcast i8* %20 to %class.CFX_ReadOnlyMemoryStream*
  %22 = load <2 x i64>, <2 x i64>* %5, align 16, !noalias !5
  store <2 x i64> %22, <2 x i64>* %3, align 16, !noalias !5
  call void @_ZN24CFX_ReadOnlyMemoryStreamC1EN6pdfium4spanIKhEE(%class.CFX_ReadOnlyMemoryStream* nonnull %21, %"class.pdfium::span"* nonnull %4) #8, !noalias !5
  %23 = ptrtoint i8* %20 to i64
  %24 = getelementptr inbounds i8, i8* %20, i64 40
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8, !noalias !5
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %25, align 8, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #8
  %28 = bitcast %class.CFX_XMLParser* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 56, i1 false)
  %29 = bitcast %"class.fxcrt::RetainPtr.9"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #8
  %30 = bitcast %"class.fxcrt::RetainPtr.9"* %8 to i64*
  store i64 %23, i64* %30, align 8
  %31 = bitcast i8* %20 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr i8, i8* %32, i64 -32
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds i8, i8* %20, i64 %35
  %37 = getelementptr inbounds i8, i8* %36, i64 8
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = add nsw i64 %39, 1
  store i64 %40, i64* %38, align 8
  call void @_ZN13CFX_XMLParserC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_XMLParser* nonnull %7, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %8) #8
  %41 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %41, align 8
  store %class.IFX_SeekableReadStream* null, %class.IFX_SeekableReadStream** %41, align 8
  %43 = icmp eq %class.IFX_SeekableReadStream* %42, null
  br i1 %43, label %65, label %44

44:                                               ; preds = %2
  %45 = bitcast %class.IFX_SeekableReadStream* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr i8, i8* %46, i64 -32
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %class.IFX_SeekableReadStream* %42 to i8*
  %51 = getelementptr inbounds i8, i8* %50, i64 %49
  %52 = getelementptr inbounds i8, i8* %51, i64 8
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %54, -1
  store i64 %55, i64* %53, align 8
  %56 = icmp ne i64 %55, 0
  %57 = icmp eq i8* %51, null
  %58 = or i1 %57, %56
  br i1 %58, label %65, label %59

59:                                               ; preds = %44
  %60 = bitcast i8* %51 to %"class.fxcrt::Retainable"*
  %61 = bitcast i8* %51 to void (%"class.fxcrt::Retainable"*)***
  %62 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %61, align 8
  %63 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %62, i64 1
  %64 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %63, align 8
  call void %64(%"class.fxcrt::Retainable"* nonnull %60) #8
  br label %65

65:                                               ; preds = %2, %44, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #8
  %66 = call %class.CFX_XMLDocument* @_ZN13CFX_XMLParser5ParseEv(%class.CFX_XMLParser* nonnull %7) #8
  %67 = icmp eq %class.CFX_XMLDocument* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %65
  %69 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 24, i1 false) #8
  br label %83

70:                                               ; preds = %65
  %71 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #8
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %71, i8 0, i64 24, i1 false) #8
  %73 = getelementptr inbounds %class.CFX_XMLDocument, %class.CFX_XMLDocument* %66, i64 0, i32 1, i32 0
  %74 = load %class.CFX_XMLElement*, %class.CFX_XMLElement** %73, align 8
  call fastcc void @_ZN12_GLOBAL__N_126CheckForSharedFormInternalEP14CFX_XMLElementPNSt3__16vectorI18UnsupportedFeatureNS2_9allocatorIS4_EEEE(%class.CFX_XMLElement* %74, %"class.std::__1::vector"* nonnull %9)
  %75 = bitcast %"class.std::__1::vector"* %9 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = bitcast %"class.std::__1::vector"* %0 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = bitcast i8** %72 to i64*
  %79 = load i64, i64* %78, align 16
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast i8** %80 to i64*
  store i64 %79, i64* %81, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #8
  call void @_ZN15CFX_XMLDocumentD1Ev(%class.CFX_XMLDocument* nonnull %66) #8
  %82 = bitcast %class.CFX_XMLDocument* %66 to i8*
  call void @_ZdlPv(i8* %82) #9
  br label %83

83:                                               ; preds = %70, %68
  call void @_ZN13CFX_XMLParserD1Ev(%class.CFX_XMLParser* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #8
  %84 = getelementptr inbounds i8, i8* %20, i64 32
  %85 = load i64, i64* %25, align 8
  %86 = add nsw i64 %85, -1
  store i64 %86, i64* %25, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = bitcast i8* %84 to %"class.fxcrt::Retainable"*
  %90 = bitcast i8* %84 to void (%"class.fxcrt::Retainable"*)***
  %91 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %90, align 8
  %92 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %91, i64 1
  %93 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %92, align 8
  call void %93(%"class.fxcrt::Retainable"* nonnull %89) #8
  br label %94

94:                                               ; preds = %88, %83
  %95 = load i64, i64* %15, align 8
  %96 = add nsw i64 %95, -1
  store i64 %96, i64* %15, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = bitcast i8* %12 to %"class.fxcrt::Retainable"*
  %100 = bitcast i8* %12 to void (%"class.fxcrt::Retainable"*)***
  %101 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %100, align 8
  %102 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %101, i64 1
  %103 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %102, align 8
  call void %103(%"class.fxcrt::Retainable"* nonnull %99) #8
  br label %104

104:                                              ; preds = %94, %98
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN14CPDF_StreamAcc19LoadAllDataFilteredEv(%class.CPDF_StreamAcc*) local_unnamed_addr #3

declare void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.45"* sret, %class.CPDF_StreamAcc*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN13CFX_XMLParserC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_XMLParser*, %"class.fxcrt::RetainPtr.9"* dereferenceable(8)) unnamed_addr #3

declare %class.CFX_XMLDocument* @_ZN13CFX_XMLParser5ParseEv(%class.CFX_XMLParser*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_126CheckForSharedFormInternalEP14CFX_XMLElementPNSt3__16vectorI18UnsupportedFeatureNS2_9allocatorIS4_EEEE(%class.CFX_XMLElement*, %"class.std::__1::vector"*) unnamed_addr #1 {
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = alloca %"class.fxcrt::WideString", align 8
  %5 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %6 = alloca %"class.fxcrt::WideString", align 8
  %7 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate.76"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.76"*), %"class.fxcrt::StringDataTemplate.76"** %8, align 8
  %9 = bitcast %"class.fxcrt::WideString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 1
  store i64 13, i64* %11, align 8
  call void @_ZN5fxcrt10WideString9FromASCIIENS_18StringViewTemplateIcEE(%"class.fxcrt::WideString"* nonnull sret %4, %"class.fxcrt::StringViewTemplate"* nonnull %5) #8
  call void @_ZNK14CFX_XMLElement12GetAttributeERKN5fxcrt10WideStringE(%"class.fxcrt::WideString"* nonnull sret %3, %class.CFX_XMLElement* %0, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %4) #8
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %12 = load %"class.fxcrt::StringDataTemplate.76"*, %"class.fxcrt::StringDataTemplate.76"** %8, align 8, !noalias !8
  %13 = icmp eq %"class.fxcrt::StringDataTemplate.76"* %12, null
  %14 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.76", %"class.fxcrt::StringDataTemplate.76"* %12, i64 0, i32 3
  %15 = select i1 %13, [1 x i32]* @.str.3, [1 x i32]* %14
  br i1 %13, label %253, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.76", %"class.fxcrt::StringDataTemplate.76"* %12, i64 0, i32 1
  %18 = load i64, i64* %17, align 8, !noalias !8
  %19 = icmp eq i64 %18, 45
  br i1 %19, label %25, label %253

20:                                               ; preds = %31
  %21 = getelementptr inbounds [1 x i32], [1 x i32]* %15, i64 0, i64 %36
  %22 = load i32, i32* %21, align 4
  %23 = add i32 %22, -1
  %24 = icmp ugt i32 %23, 126
  br i1 %24, label %253, label %280

25:                                               ; preds = %16, %297
  %26 = phi i64 [ %296, %297 ], [ 0, %16 ]
  %27 = getelementptr inbounds [1 x i32], [1 x i32]* %15, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = icmp ugt i32 %29, 126
  br i1 %30, label %253, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds [46 x i8], [46 x i8]* @.str.1, i64 0, i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = icmp eq i32 %28, %34
  %36 = add nuw nsw i64 %26, 1
  br i1 %35, label %20, label %253

37:                                               ; preds = %297
  %38 = getelementptr inbounds %class.CFX_XMLElement, %class.CFX_XMLElement* %0, i64 0, i32 0, i32 0, i32 2
  %39 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %38, align 8
  %40 = icmp eq %class.CFX_XMLNode* %39, null
  br i1 %40, label %253, label %41

41:                                               ; preds = %37, %249
  %42 = phi %class.CFX_XMLNode* [ %251, %249 ], [ %39, %37 ]
  %43 = bitcast %class.CFX_XMLNode* %42 to i32 (%class.CFX_XMLNode*)***
  %44 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %43, align 8
  %45 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %44, i64 2
  %46 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %45, align 8
  %47 = call i32 %46(%class.CFX_XMLNode* nonnull %42) #8
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %249

49:                                               ; preds = %41
  %50 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %42, i64 1
  %51 = bitcast %class.CFX_XMLNode* %50 to %"class.fxcrt::StringDataTemplate.76"**
  %52 = load %"class.fxcrt::StringDataTemplate.76"*, %"class.fxcrt::StringDataTemplate.76"** %51, align 8, !noalias !11
  %53 = icmp eq %"class.fxcrt::StringDataTemplate.76"* %52, null
  %54 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.76", %"class.fxcrt::StringDataTemplate.76"* %52, i64 0, i32 3
  %55 = select i1 %53, [1 x i32]* @.str.3, [1 x i32]* %54
  br i1 %53, label %249, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.76", %"class.fxcrt::StringDataTemplate.76"* %52, i64 0, i32 1
  %58 = load i64, i64* %57, align 8, !noalias !11
  %59 = icmp eq i64 %58, 20
  br i1 %59, label %65, label %249

60:                                               ; preds = %71
  %61 = getelementptr inbounds [1 x i32], [1 x i32]* %55, i64 0, i64 %76
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %62, -1
  %64 = icmp ugt i32 %63, 126
  br i1 %64, label %249, label %272

65:                                               ; preds = %56, %278
  %66 = phi i64 [ %277, %278 ], [ 0, %56 ]
  %67 = getelementptr inbounds [1 x i32], [1 x i32]* %55, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, -1
  %70 = icmp ugt i32 %69, 126
  br i1 %70, label %249, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds [21 x i8], [21 x i8]* @.str.2, i64 0, i64 %66
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = icmp eq i32 %68, %74
  %76 = or i64 %66, 1
  br i1 %75, label %60, label %249

77:                                               ; preds = %278
  %78 = bitcast %class.CFX_XMLNode* %42 to %class.CFX_XMLElement*
  %79 = bitcast %"class.fxcrt::WideString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #8
  call void @_ZNK14CFX_XMLElement11GetTextDataEv(%"class.fxcrt::WideString"* nonnull sret %6, %class.CFX_XMLElement* nonnull %78) #8
  %80 = call i32 @_ZNK5fxcrt10WideString10GetIntegerEv(%"class.fxcrt::WideString"* nonnull %6) #8
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #8
  switch i32 %80, label %253 [
    i32 0, label %81
    i32 1, label %137
    i32 2, label %193
  ]

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = icmp ult i8* %83, %85
  %87 = ptrtoint i8* %85 to i64
  br i1 %86, label %88, label %92

88:                                               ; preds = %81
  store i8 8, i8* %83, align 1
  %89 = getelementptr inbounds i8, i8* %83, i64 1
  %90 = ptrtoint i8* %89 to i64
  %91 = bitcast i8** %82 to i64*
  store i64 %90, i64* %91, align 8
  br label %253

92:                                               ; preds = %81
  %93 = ptrtoint i8* %83 to i64
  %94 = bitcast i8** %82 to i64*
  %95 = bitcast %"class.std::__1::vector"* %1 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %93, %96
  %98 = add i64 %97, 1
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %92
  %101 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %101) #10
  unreachable

102:                                              ; preds = %92
  %103 = bitcast i8** %84 to i64*
  %104 = sub i64 %87, %96
  %105 = icmp ult i64 %104, 4611686018427387903
  br i1 %105, label %106, label %111

106:                                              ; preds = %102
  %107 = shl i64 %104, 1
  %108 = icmp ult i64 %107, %98
  %109 = select i1 %108, i64 %98, i64 %107
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %106, %102
  %112 = phi i64 [ %109, %106 ], [ 9223372036854775807, %102 ]
  %113 = call i8* @_Znwm(i64 %112) #9
  br label %114

114:                                              ; preds = %111, %106
  %115 = phi i64 [ %112, %111 ], [ 0, %106 ]
  %116 = phi i8* [ %113, %111 ], [ null, %106 ]
  %117 = getelementptr inbounds i8, i8* %116, i64 %97
  %118 = getelementptr inbounds i8, i8* %116, i64 %115
  %119 = ptrtoint i8* %118 to i64
  store i8 8, i8* %117, align 1
  %120 = getelementptr inbounds i8, i8* %117, i64 1
  %121 = ptrtoint i8* %120 to i64
  %122 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = load i64, i64* %94, align 8
  %125 = ptrtoint i8* %123 to i64
  %126 = sub i64 %124, %125
  %127 = sub i64 0, %126
  %128 = getelementptr inbounds i8, i8* %117, i64 %127
  %129 = ptrtoint i8* %128 to i64
  %130 = icmp sgt i64 %126, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %123, i64 %126, i1 false) #8
  %132 = load i8*, i8** %122, align 8
  br label %133

133:                                              ; preds = %131, %114
  %134 = phi i8* [ %123, %114 ], [ %132, %131 ]
  store i64 %129, i64* %95, align 8
  store i64 %121, i64* %94, align 8
  store i64 %119, i64* %103, align 8
  %135 = icmp eq i8* %134, null
  br i1 %135, label %253, label %136

136:                                              ; preds = %133
  call void @_ZdlPv(i8* nonnull %134) #9
  br label %253

137:                                              ; preds = %77
  %138 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = icmp ult i8* %139, %141
  %143 = ptrtoint i8* %141 to i64
  br i1 %142, label %144, label %148

144:                                              ; preds = %137
  store i8 6, i8* %139, align 1
  %145 = getelementptr inbounds i8, i8* %139, i64 1
  %146 = ptrtoint i8* %145 to i64
  %147 = bitcast i8** %138 to i64*
  store i64 %146, i64* %147, align 8
  br label %253

148:                                              ; preds = %137
  %149 = ptrtoint i8* %139 to i64
  %150 = bitcast i8** %138 to i64*
  %151 = bitcast %"class.std::__1::vector"* %1 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = sub i64 %149, %152
  %154 = add i64 %153, 1
  %155 = icmp slt i64 %154, 0
  br i1 %155, label %156, label %158

156:                                              ; preds = %148
  %157 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %157) #10
  unreachable

158:                                              ; preds = %148
  %159 = bitcast i8** %140 to i64*
  %160 = sub i64 %143, %152
  %161 = icmp ult i64 %160, 4611686018427387903
  br i1 %161, label %162, label %167

162:                                              ; preds = %158
  %163 = shl i64 %160, 1
  %164 = icmp ult i64 %163, %154
  %165 = select i1 %164, i64 %154, i64 %163
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %170, label %167

167:                                              ; preds = %162, %158
  %168 = phi i64 [ %165, %162 ], [ 9223372036854775807, %158 ]
  %169 = call i8* @_Znwm(i64 %168) #9
  br label %170

170:                                              ; preds = %167, %162
  %171 = phi i64 [ %168, %167 ], [ 0, %162 ]
  %172 = phi i8* [ %169, %167 ], [ null, %162 ]
  %173 = getelementptr inbounds i8, i8* %172, i64 %153
  %174 = getelementptr inbounds i8, i8* %172, i64 %171
  %175 = ptrtoint i8* %174 to i64
  store i8 6, i8* %173, align 1
  %176 = getelementptr inbounds i8, i8* %173, i64 1
  %177 = ptrtoint i8* %176 to i64
  %178 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %179 = load i8*, i8** %178, align 8
  %180 = load i64, i64* %150, align 8
  %181 = ptrtoint i8* %179 to i64
  %182 = sub i64 %180, %181
  %183 = sub i64 0, %182
  %184 = getelementptr inbounds i8, i8* %173, i64 %183
  %185 = ptrtoint i8* %184 to i64
  %186 = icmp sgt i64 %182, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %170
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %184, i8* align 1 %179, i64 %182, i1 false) #8
  %188 = load i8*, i8** %178, align 8
  br label %189

189:                                              ; preds = %187, %170
  %190 = phi i8* [ %179, %170 ], [ %188, %187 ]
  store i64 %185, i64* %151, align 8
  store i64 %177, i64* %150, align 8
  store i64 %175, i64* %159, align 8
  %191 = icmp eq i8* %190, null
  br i1 %191, label %253, label %192

192:                                              ; preds = %189
  call void @_ZdlPv(i8* nonnull %190) #9
  br label %253

193:                                              ; preds = %77
  %194 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  %198 = icmp ult i8* %195, %197
  %199 = ptrtoint i8* %197 to i64
  br i1 %198, label %200, label %204

200:                                              ; preds = %193
  store i8 7, i8* %195, align 1
  %201 = getelementptr inbounds i8, i8* %195, i64 1
  %202 = ptrtoint i8* %201 to i64
  %203 = bitcast i8** %194 to i64*
  store i64 %202, i64* %203, align 8
  br label %253

204:                                              ; preds = %193
  %205 = ptrtoint i8* %195 to i64
  %206 = bitcast i8** %194 to i64*
  %207 = bitcast %"class.std::__1::vector"* %1 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = sub i64 %205, %208
  %210 = add i64 %209, 1
  %211 = icmp slt i64 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %204
  %213 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %213) #10
  unreachable

214:                                              ; preds = %204
  %215 = bitcast i8** %196 to i64*
  %216 = sub i64 %199, %208
  %217 = icmp ult i64 %216, 4611686018427387903
  br i1 %217, label %218, label %223

218:                                              ; preds = %214
  %219 = shl i64 %216, 1
  %220 = icmp ult i64 %219, %210
  %221 = select i1 %220, i64 %210, i64 %219
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %226, label %223

223:                                              ; preds = %218, %214
  %224 = phi i64 [ %221, %218 ], [ 9223372036854775807, %214 ]
  %225 = call i8* @_Znwm(i64 %224) #9
  br label %226

226:                                              ; preds = %223, %218
  %227 = phi i64 [ %224, %223 ], [ 0, %218 ]
  %228 = phi i8* [ %225, %223 ], [ null, %218 ]
  %229 = getelementptr inbounds i8, i8* %228, i64 %209
  %230 = getelementptr inbounds i8, i8* %228, i64 %227
  %231 = ptrtoint i8* %230 to i64
  store i8 7, i8* %229, align 1
  %232 = getelementptr inbounds i8, i8* %229, i64 1
  %233 = ptrtoint i8* %232 to i64
  %234 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %235 = load i8*, i8** %234, align 8
  %236 = load i64, i64* %206, align 8
  %237 = ptrtoint i8* %235 to i64
  %238 = sub i64 %236, %237
  %239 = sub i64 0, %238
  %240 = getelementptr inbounds i8, i8* %229, i64 %239
  %241 = ptrtoint i8* %240 to i64
  %242 = icmp sgt i64 %238, 0
  br i1 %242, label %243, label %245

243:                                              ; preds = %226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %240, i8* align 1 %235, i64 %238, i1 false) #8
  %244 = load i8*, i8** %234, align 8
  br label %245

245:                                              ; preds = %243, %226
  %246 = phi i8* [ %235, %226 ], [ %244, %243 ]
  store i64 %241, i64* %207, align 8
  store i64 %233, i64* %206, align 8
  store i64 %231, i64* %215, align 8
  %247 = icmp eq i8* %246, null
  br i1 %247, label %253, label %248

248:                                              ; preds = %245
  call void @_ZdlPv(i8* nonnull %246) #9
  br label %253

249:                                              ; preds = %65, %71, %60, %272, %49, %56, %41
  %250 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %42, i64 0, i32 0, i32 4
  %251 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %250, align 8
  %252 = icmp eq %class.CFX_XMLNode* %251, null
  br i1 %252, label %253, label %41

253:                                              ; preds = %25, %31, %20, %280, %286, %291, %249, %2, %37, %16, %248, %245, %200, %192, %189, %144, %136, %133, %88, %77
  %254 = getelementptr inbounds %class.CFX_XMLElement, %class.CFX_XMLElement* %0, i64 0, i32 0, i32 0, i32 2
  %255 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %254, align 8
  %256 = icmp eq %class.CFX_XMLNode* %255, null
  br i1 %256, label %257, label %258

257:                                              ; preds = %268, %253
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  ret void

258:                                              ; preds = %253, %268
  %259 = phi %class.CFX_XMLNode* [ %270, %268 ], [ %255, %253 ]
  %260 = bitcast %class.CFX_XMLNode* %259 to i32 (%class.CFX_XMLNode*)***
  %261 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %260, align 8
  %262 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %261, i64 2
  %263 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %262, align 8
  %264 = call i32 %263(%class.CFX_XMLNode* nonnull %259) #8
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %266, label %268

266:                                              ; preds = %258
  %267 = bitcast %class.CFX_XMLNode* %259 to %class.CFX_XMLElement*
  call fastcc void @_ZN12_GLOBAL__N_126CheckForSharedFormInternalEP14CFX_XMLElementPNSt3__16vectorI18UnsupportedFeatureNS2_9allocatorIS4_EEEE(%class.CFX_XMLElement* nonnull %267, %"class.std::__1::vector"* %1)
  br label %268

268:                                              ; preds = %258, %266
  %269 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %259, i64 0, i32 0, i32 4
  %270 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %269, align 8
  %271 = icmp eq %class.CFX_XMLNode* %270, null
  br i1 %271, label %257, label %258

272:                                              ; preds = %60
  %273 = getelementptr inbounds [21 x i8], [21 x i8]* @.str.2, i64 0, i64 %76
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = icmp eq i32 %62, %275
  %277 = add nuw nsw i64 %66, 2
  br i1 %276, label %278, label %249

278:                                              ; preds = %272
  %279 = icmp eq i64 %277, 20
  br i1 %279, label %77, label %65

280:                                              ; preds = %20
  %281 = getelementptr inbounds [46 x i8], [46 x i8]* @.str.1, i64 0, i64 %36
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = icmp eq i32 %22, %283
  %285 = add nuw nsw i64 %26, 2
  br i1 %284, label %286, label %253

286:                                              ; preds = %280
  %287 = getelementptr inbounds [1 x i32], [1 x i32]* %15, i64 0, i64 %285
  %288 = load i32, i32* %287, align 4
  %289 = add i32 %288, -1
  %290 = icmp ugt i32 %289, 126
  br i1 %290, label %253, label %291

291:                                              ; preds = %286
  %292 = getelementptr inbounds [46 x i8], [46 x i8]* @.str.1, i64 0, i64 %285
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  %295 = icmp eq i32 %288, %294
  %296 = add nuw nsw i64 %26, 3
  br i1 %295, label %297, label %253

297:                                              ; preds = %291
  %298 = icmp eq i64 %296, 45
  br i1 %298, label %37, label %25
}

; Function Attrs: nounwind
declare void @_ZN13CFX_XMLParserD1Ev(%class.CFX_XMLParser*) unnamed_addr #4

declare void @_ZNK14CFX_XMLElement12GetAttributeERKN5fxcrt10WideStringE(%"class.fxcrt::WideString"* sret, %class.CFX_XMLElement*, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN5fxcrt10WideString9FromASCIIENS_18StringViewTemplateIcEE(%"class.fxcrt::WideString"* sret, %"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #4

declare void @_ZNK14CFX_XMLElement11GetTextDataEv(%"class.fxcrt::WideString"* sret, %class.CFX_XMLElement*) local_unnamed_addr #3

declare i32 @_ZNK5fxcrt10WideString10GetIntegerEv(%"class.fxcrt::WideString"*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc*, %class.CPDF_Stream*) unnamed_addr #3

declare void @_ZN24CFX_ReadOnlyMemoryStreamC1EN6pdfium4spanIKhEE(%class.CFX_ReadOnlyMemoryStream*, %"class.pdfium::span"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN15CFX_XMLDocumentD1Ev(%class.CFX_XMLDocument*) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJPK11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!4 = distinct !{!4, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJPK11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6pdfium10MakeRetainI24CFX_ReadOnlyMemoryStreamJNS_4spanIhEEEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!7 = distinct !{!7, !"_ZN6pdfium10MakeRetainI24CFX_ReadOnlyMemoryStreamJNS_4spanIhEEEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!10 = distinct !{!10, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!13 = distinct !{!13, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
