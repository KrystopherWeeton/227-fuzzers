; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsDebug.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsDebug.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type <{ %class.SkCoincidentSpans*, %class.SkCoincidentSpans*, %class.SkOpGlobalState*, i8, i8, i8, i8, i8, [3 x i8] }>
%class.SkCoincidentSpans = type { %class.SkCoincidentSpans*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT* }
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%struct.SkPoint = type { float, float }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkDRect = type { double, double, double, double }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%class.SkWStream = type opaque
%class.SkString = type { %class.sk_sp.17 }
%class.sk_sp.17 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>

@_ZN14SkPathOpsDebug8gRunFailE = hidden local_unnamed_addr global i8 0, align 1
@_ZN14SkPathOpsDebug12gVeryVerboseE = hidden local_unnamed_addr global i8 0, align 1
@_ZL7gOpStrs = internal unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i32 0, i32 0)], align 16
@_ZZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex = internal unnamed_addr global %class.SkMutex* null, align 8
@_ZGVZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex = internal global i64 0, align 8
@.str = private unnamed_addr constant [5 x i8] c"path\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"pathB\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"../../third_party/skia/src/pathops/SkPathOpsDebug.cpp\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"coinSpan - id=%d t=%1.9g tEnd=%1.9g\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"coinSpan + id=%d t=%1.9g tEnd=%1.9g\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"*** bad coincident end loop ***\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"*** bad coincident loop ***\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"*** bad ptT loop ***\0A\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"*** loop count exceeds 1000 ***\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"    SkPath %s;\0A\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"    %s.setFillType(SkPath::%s);\0A\00", align 1
@_ZL12gFillTypeStr = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.11 = private unnamed_addr constant [21 x i8] c"kDifference_SkPathOp\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"kIntersect_SkPathOp\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"kUnion_SkPathOp\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"kXOR_PathOp\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"kReverseDifference_SkPathOp\00", align 1
@.str.16 = private unnamed_addr constant [71 x i8] c"\0Astatic void %s(skiatest::Reporter* reporter, const char* filename) {\0A\00", align 1
@.str.17 = private unnamed_addr constant [16 x i8] c"skphealth_com76\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"found it\0A\00", align 1
@.str.19 = private unnamed_addr constant [49 x i8] c"    testPathOp(reporter, %s, %s, %s, filename);\0A\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.21 = private unnamed_addr constant [9 x i8] c"kWinding\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"kEvenOdd\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"kInverseWinding\00", align 1
@.str.24 = private unnamed_addr constant [16 x i8] c"kInverseEvenOdd\00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c"    %s.moveTo(\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c");\0A\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"    %s.lineTo(\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"    %s.quadTo(\00", align 1
@.str.29 = private unnamed_addr constant [16 x i8] c"    %s.conicTo(\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c", %1.9gf);\0A\00", align 1
@.str.31 = private unnamed_addr constant [16 x i8] c"    %s.cubicTo(\00", align 1
@.str.32 = private unnamed_addr constant [17 x i8] c"    %s.close();\0A\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"%1.9g\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"%sf\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN14SkPathOpsDebug15ShowActiveSpansEP15SkOpContourHead(%class.SkOpContourHead* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN14SkPathOpsDebug5OpStrE8SkPathOp(i32) local_unnamed_addr #0 align 2 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [5 x i8*], [5 x i8*]* @_ZL7gOpStrs, i64 0, i64 %2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKc(%class.SkPath* nocapture readonly dereferenceable(16), %class.SkPath* nocapture readonly dereferenceable(16), i32, i8*) local_unnamed_addr #1 align 2 {
  %5 = load atomic i8, i8* bitcast (i64* @_ZGVZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex to i8*) acquire, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %16, !prof !2

7:                                                ; preds = %4
  %8 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %7
  %11 = tail call i8* @_Znwm(i64 16) #13
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %11, i64 4
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 8
  %15 = bitcast i8* %14 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %15, align 8
  store i8* %11, i8** bitcast (%class.SkMutex** @_ZZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex) #12
  br label %16

16:                                               ; preds = %7, %10, %4
  %17 = load %class.SkMutex*, %class.SkMutex** @_ZZN14SkPathOpsDebug8ShowPathERK6SkPathS2_8SkPathOpPKcE5mutex, align 8
  %18 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acquire
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %22) #12
  br label %23

23:                                               ; preds = %16, %21
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.16, i64 0, i64 0), i8* %3) #12
  %24 = tail call i32 @strcmp(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i64 0, i64 0), i8* %3) #14
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 517, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #12
  br label %27

27:                                               ; preds = %23, %26
  tail call void @_ZN14SkPathOpsDebug11ShowOnePathERK6SkPathPKcb(%class.SkPath* dereferenceable(16) %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i1 zeroext true)
  tail call void @_ZN14SkPathOpsDebug11ShowOnePathERK6SkPathPKcb(%class.SkPath* dereferenceable(16) %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i1 zeroext true)
  %28 = zext i32 %2 to i64
  %29 = getelementptr inbounds [5 x i8*], [5 x i8*]* @_ZL7gOpStrs, i64 0, i64 %28
  %30 = load i8*, i8** %29, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 534, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* %30) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 535, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0)) #12
  %31 = atomicrmw add i32* %18, i32 1 release
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  %34 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %34, i32 1) #12
  br label %35

35:                                               ; preds = %27, %33
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkPathOpsDebug11ShowOnePathERK6SkPathPKcb(%class.SkPath* nocapture readonly dereferenceable(16), i8*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 2
  %6 = and i8 %5, 3
  br i1 %2, label %7, label %8

7:                                                ; preds = %3
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2908, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i8* %1) #12
  br label %8

8:                                                ; preds = %7, %3
  %9 = zext i8 %6 to i64
  %10 = getelementptr inbounds [4 x i8*], [4 x i8*]* @_ZL12gFillTypeStr, i64 0, i64 %9
  %11 = load i8*, i8** %10, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2910, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i64 0, i64 0), i8* %1, i8* %11) #12
  %12 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %13 = load %class.SkPathRef*, %class.SkPathRef** %12, align 8
  %14 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 4, i32 0
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 9
  %18 = load i8, i8* %17, align 8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %8
  %21 = inttoptr i64 %16 to i8*
  %22 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 10
  %23 = load i8, i8* %22, align 1, !range !3
  br label %36

24:                                               ; preds = %8
  %25 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 1
  %26 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 3, i32 0
  %27 = load %struct.SkPoint*, %struct.SkPoint** %26, align 8
  %28 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 3, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %25, %struct.SkPoint* %27, i32 %29) #12
  %31 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 10
  %32 = zext i1 %30 to i8
  store i8 %32, i8* %31, align 1
  store i8 0, i8* %17, align 8
  %33 = load %class.SkPathRef*, %class.SkPathRef** %12, align 8
  %34 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %33, i64 0, i32 4, i32 0
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %24, %20
  %37 = phi i8* [ %21, %20 ], [ %35, %24 ]
  %38 = phi %class.SkPathRef* [ %13, %20 ], [ %33, %24 ]
  %39 = phi i8 [ %23, %20 ], [ %32, %24 ]
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %36
  %42 = icmp eq i8* %37, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %38, i64 0, i32 4, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %37, i64 %46
  br label %48

48:                                               ; preds = %43, %41, %36
  %49 = phi i8* [ %47, %43 ], [ null, %41 ], [ %37, %36 ]
  %50 = inttoptr i64 %16 to i8*
  %51 = icmp eq i8* %49, %50
  br i1 %51, label %137, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %38, i64 0, i32 5, i32 0
  %54 = bitcast float** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %38, i64 0, i32 3, i32 0
  %57 = bitcast %struct.SkPoint** %56 to i64*
  %58 = load i64, i64* %57, align 8
  br label %59

59:                                               ; preds = %95, %52
  %60 = phi i8* [ %81, %95 ], [ %50, %52 ]
  %61 = phi i64 [ %97, %95 ], [ %55, %52 ]
  %62 = phi i64 [ %98, %95 ], [ %58, %52 ]
  %63 = load i8, i8* %60, align 1, !noalias !4
  switch i8 %63, label %64 [
    i8 0, label %65
    i8 1, label %71
    i8 2, label %127
    i8 3, label %114
    i8 4, label %100
    i8 5, label %77
  ]

64:                                               ; preds = %59
  tail call void @llvm.trap() #12, !noalias !4
  unreachable

65:                                               ; preds = %59
  %66 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2845, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i64 0, i64 0), i8* %1) #12
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 0, i32 0
  %68 = load float, float* %67, align 4
  tail call fastcc void @_ZL13output_scalarf(float %68) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %69 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 0, i32 1
  %70 = load float, float* %69, align 4
  tail call fastcc void @_ZL13output_scalarf(float %70) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2847, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %79

71:                                               ; preds = %59
  %72 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2850, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0), i8* %1) #12
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %72, i64 0, i32 0
  %74 = load float, float* %73, align 4
  tail call fastcc void @_ZL13output_scalarf(float %74) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %75 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %72, i64 0, i32 1
  %76 = load float, float* %75, align 4
  tail call fastcc void @_ZL13output_scalarf(float %76) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2852, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %79

77:                                               ; preds = %59
  %78 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2870, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.32, i64 0, i64 0), i8* %1) #12
  br label %79

79:                                               ; preds = %127, %114, %100, %77, %71, %65
  %80 = phi %struct.SkPoint* [ %66, %65 ], [ %78, %77 ], [ %101, %100 ], [ %115, %114 ], [ %128, %127 ], [ %72, %71 ]
  %81 = getelementptr inbounds i8, i8* %60, i64 1
  %82 = load i8, i8* %60, align 1
  switch i8 %82, label %86 [
    i8 0, label %87
    i8 1, label %87
    i8 2, label %83
    i8 3, label %90
    i8 4, label %84
    i8 5, label %85
  ]

83:                                               ; preds = %79
  br label %87

84:                                               ; preds = %79
  br label %87

85:                                               ; preds = %79
  br label %87

86:                                               ; preds = %79
  tail call void @llvm.trap() #12
  unreachable

87:                                               ; preds = %85, %84, %83, %79, %79
  %88 = phi i64 [ 1, %79 ], [ 1, %79 ], [ 2, %83 ], [ 3, %84 ], [ 0, %85 ]
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %80, i64 %88
  br label %95

90:                                               ; preds = %79
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %80, i64 2
  %92 = inttoptr i64 %61 to float*
  %93 = getelementptr inbounds float, float* %92, i64 1
  %94 = ptrtoint float* %93 to i64
  br label %95

95:                                               ; preds = %90, %87
  %96 = phi %struct.SkPoint* [ %89, %87 ], [ %91, %90 ]
  %97 = phi i64 [ %61, %87 ], [ %94, %90 ]
  %98 = ptrtoint %struct.SkPoint* %96 to i64
  %99 = icmp eq i8* %49, %81
  br i1 %99, label %137, label %59

100:                                              ; preds = %59
  %101 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2865, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i8* %1) #12
  %102 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 0, i32 0
  %103 = load float, float* %102, align 4
  tail call fastcc void @_ZL13output_scalarf(float %103) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 0, i32 1
  %105 = load float, float* %104, align 4
  tail call fastcc void @_ZL13output_scalarf(float %105) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2836, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %106 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 1, i32 0
  %107 = load float, float* %106, align 4
  tail call fastcc void @_ZL13output_scalarf(float %107) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %108 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 1, i32 1
  %109 = load float, float* %108, align 4
  tail call fastcc void @_ZL13output_scalarf(float %109) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2836, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %110 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 2, i32 0
  %111 = load float, float* %110, align 4
  tail call fastcc void @_ZL13output_scalarf(float %111) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %112 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 2, i32 1
  %113 = load float, float* %112, align 4
  tail call fastcc void @_ZL13output_scalarf(float %113) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2867, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %79

114:                                              ; preds = %59
  %115 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2860, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.29, i64 0, i64 0), i8* %1) #12
  %116 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 0
  %117 = load float, float* %116, align 4
  tail call fastcc void @_ZL13output_scalarf(float %117) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %118 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 1
  %119 = load float, float* %118, align 4
  tail call fastcc void @_ZL13output_scalarf(float %119) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2836, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %120 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 1, i32 0
  %121 = load float, float* %120, align 4
  tail call fastcc void @_ZL13output_scalarf(float %121) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %122 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 1, i32 1
  %123 = load float, float* %122, align 4
  tail call fastcc void @_ZL13output_scalarf(float %123) #12
  %124 = inttoptr i64 %61 to float*
  %125 = load float, float* %124, align 4
  %126 = fpext float %125 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2862, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i64 0, i64 0), double %126) #12
  br label %79

127:                                              ; preds = %59
  %128 = inttoptr i64 %62 to %struct.SkPoint*
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2855, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0), i8* %1) #12
  %129 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %128, i64 0, i32 0
  %130 = load float, float* %129, align 4
  tail call fastcc void @_ZL13output_scalarf(float %130) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %131 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %128, i64 0, i32 1
  %132 = load float, float* %131, align 4
  tail call fastcc void @_ZL13output_scalarf(float %132) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2836, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %133 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %128, i64 1, i32 0
  %134 = load float, float* %133, align 4
  tail call fastcc void @_ZL13output_scalarf(float %134) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #12
  %135 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %128, i64 1, i32 1
  %136 = load float, float* %135, align 4
  tail call fastcc void @_ZL13output_scalarf(float %136) #12
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2857, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %79

137:                                              ; preds = %95, %48
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN15SkOpGlobalState12DebugRunFailEv() local_unnamed_addr #5 align 2 {
  %1 = load i8, i8* @_ZN14SkPathOpsDebug8gRunFailE, align 1, !range !3
  %2 = icmp ne i8 %1, 0
  ret i1 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkDQuad12debugToCubicEv(%struct.SkDCubic* noalias nocapture sret, %struct.SkDQuad* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = bitcast %struct.SkDCubic* %0 to i8*
  %4 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 1
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2
  %7 = bitcast %struct.SkDPoint* %6 to i8*
  %8 = bitcast %struct.SkDPoint* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2
  %10 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3
  %11 = bitcast %struct.SkDPoint* %10 to i8*
  %12 = bitcast %struct.SkDPoint* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false)
  %13 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %14 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = bitcast %struct.SkDPoint* %6 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = fmul <2 x double> %17, <double 2.000000e+00, double 2.000000e+00>
  %19 = fadd <2 x double> %15, %18
  %20 = fdiv <2 x double> %19, <double 3.000000e+00, double 3.000000e+00>
  %21 = bitcast double* %13 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 8
  %22 = bitcast %struct.SkDPoint* %10 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = fadd <2 x double> %18, %23
  %25 = fdiv <2 x double> %24, <double 3.000000e+00, double 3.000000e+00>
  %26 = bitcast %struct.SkDPoint* %6 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkDQuad8debugSetEPK8SkDPoint(%struct.SkDQuad* nocapture, %struct.SkDPoint* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = bitcast %struct.SkDQuad* %0 to i8*
  %4 = bitcast %struct.SkDPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkDCubic8debugSetEPK8SkDPoint(%struct.SkDCubic* nocapture, %struct.SkDPoint* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = bitcast %struct.SkDCubic* %0 to i8*
  %4 = bitcast %struct.SkDPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkDConic8debugSetEPK8SkDPointf(%struct.SkDConic* nocapture, %struct.SkDPoint* nocapture readonly, float) local_unnamed_addr #1 align 2 {
  %4 = bitcast %struct.SkDConic* %0 to i8*
  %5 = bitcast %struct.SkDPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 48, i1 false) #12
  %6 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  store float %2, float* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7SkDRect9debugInitEv(%struct.SkDRect* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %struct.SkDRect, %struct.SkDRect* %0, i64 0, i32 2
  %3 = bitcast double* %2 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %3, align 8
  %4 = bitcast %struct.SkDRect* %0 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpAngle* @_ZN11SkOpSegment14debugLastAngleEv(%class.SkOpSegment* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  br label %3

3:                                                ; preds = %3, %1
  %4 = phi %class.SkOpAngle* [ null, %1 ], [ %9, %3 ]
  %5 = phi %class.SkOpSpan* [ %2, %1 ], [ %16, %3 ]
  %6 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 3
  %7 = load %class.SkOpAngle*, %class.SkOpAngle** %6, align 8
  %8 = icmp eq %class.SkOpAngle* %7, null
  %9 = select i1 %8, %class.SkOpAngle* %4, %class.SkOpAngle* %7
  %10 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 4
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 1.000000e+00
  %15 = bitcast %class.SkOpSpanBase* %11 to %class.SkOpSpan*
  %16 = select i1 %14, %class.SkOpSpan* null, %class.SkOpSpan* %15
  %17 = icmp eq %class.SkOpSpan* %16, null
  br i1 %17, label %18, label %3

18:                                               ; preds = %3
  ret %class.SkOpAngle* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment10debugResetEv(%class.SkOpSegment*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %3 = load %struct.SkPoint*, %struct.SkPoint** %2, align 8
  %4 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %5 = load float, float* %4, align 8
  %6 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 2
  %7 = load %class.SkOpContour*, %class.SkOpContour** %6, align 8
  %8 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %9 = load i32, i32* %8, align 4
  tail call void @_ZN11SkOpSegment4initEP7SkPointfP11SkOpContourN6SkPath4VerbE(%class.SkOpSegment* %0, %struct.SkPoint* %3, float %5, %class.SkOpContour* %7, i32 %9) #12
  ret void
}

declare void @_ZN11SkOpSegment4initEP7SkPointfP11SkOpContourN6SkPath4VerbE(%class.SkOpSegment*, %struct.SkPoint*, float, %class.SkOpContour*, i32) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK9SkOpAngle13debugValidateEv(%class.SkOpAngle* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK17SkCoincidentSpans9debugShowEv(%class.SkCoincidentSpans*) local_unnamed_addr #1 align 2 {
  %2 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans12coinPtTStartEv(%class.SkCoincidentSpans* %0) #12
  %3 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %2) #12
  %4 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans12coinPtTStartEv(%class.SkCoincidentSpans* %0) #12
  %5 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %4, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans10coinPtTEndEv(%class.SkCoincidentSpans* %0) #12
  %8 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %7, i64 0, i32 0
  %9 = load double, double* %8, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2099, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0), i32 -1, double %6, double %9) #12
  %10 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans11oppPtTStartEv(%class.SkCoincidentSpans* %0) #12
  %11 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %10) #12
  %12 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans11oppPtTStartEv(%class.SkCoincidentSpans* %0) #12
  %13 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %12, i64 0, i32 0
  %14 = load double, double* %13, align 8
  %15 = tail call %class.SkOpPtT* @_ZNK17SkCoincidentSpans9oppPtTEndEv(%class.SkCoincidentSpans* %0) #12
  %16 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %15, i64 0, i32 0
  %17 = load double, double* %16, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2101, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i32 -1, double %14, double %17) #12
  ret void
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #7

declare %class.SkOpPtT* @_ZNK17SkCoincidentSpans12coinPtTStartEv(%class.SkCoincidentSpans*) local_unnamed_addr #7

declare %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT*) local_unnamed_addr #7

declare %class.SkOpPtT* @_ZNK17SkCoincidentSpans10coinPtTEndEv(%class.SkCoincidentSpans*) local_unnamed_addr #7

declare %class.SkOpPtT* @_ZNK17SkCoincidentSpans11oppPtTStartEv(%class.SkCoincidentSpans*) local_unnamed_addr #7

declare %class.SkOpPtT* @_ZNK17SkCoincidentSpans9oppPtTEndEv(%class.SkCoincidentSpans*) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK15SkOpCoincidence20debugShowCoincidenceEv(%class.SkOpCoincidence* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK15SkOpCoincidence13debugValidateEv(%class.SkOpCoincidence* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK15SkOpCoincidence17debugCheckBetweenEv(%class.SkOpCoincidence* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK11SkOpSegment13debugValidateEv(%class.SkOpSegment* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkOpSpanBase21debugCoinEndLoopCheckEv(%class.SkOpSpanBase* readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %0, i64 0, i32 2
  br label %3

3:                                                ; preds = %28, %1
  %4 = phi i32 [ %33, %28 ], [ -1, %1 ]
  %5 = phi i32 [ %29, %28 ], [ 0, %1 ]
  %6 = phi %class.SkOpSpanBase* [ %8, %28 ], [ %0, %1 ]
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %6, i64 0, i32 2
  %8 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %7, align 8
  %9 = icmp ugt i32 %5, 2
  br i1 %9, label %10, label %28

10:                                               ; preds = %3
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  br label %14

12:                                               ; preds = %18, %14
  %13 = icmp eq i32 %16, %4
  br i1 %13, label %28, label %14

14:                                               ; preds = %12, %10
  %15 = phi i32 [ 1, %10 ], [ %16, %12 ]
  %16 = add nuw nsw i32 %15, 1
  %17 = icmp ult i32 %16, %5
  br i1 %17, label %20, label %12

18:                                               ; preds = %20
  %19 = icmp eq i32 %26, %5
  br i1 %19, label %12, label %20

20:                                               ; preds = %14, %18
  %21 = phi i32 [ %26, %18 ], [ %16, %14 ]
  %22 = phi %class.SkOpSpanBase* [ %24, %18 ], [ %11, %14 ]
  %23 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %22, i64 0, i32 2
  %24 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %23, align 8
  %25 = icmp eq %class.SkOpSpanBase* %11, %24
  %26 = add nuw i32 %21, 1
  br i1 %25, label %27, label %18

27:                                               ; preds = %20
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2444, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0)) #12
  br label %34

28:                                               ; preds = %12, %3
  %29 = add nuw nsw i32 %5, 1
  %30 = icmp ne %class.SkOpSpanBase* %8, null
  %31 = icmp ne %class.SkOpSpanBase* %8, %0
  %32 = and i1 %31, %30
  %33 = add nsw i32 %4, 1
  br i1 %32, label %3, label %34

34:                                               ; preds = %28, %27
  %35 = phi i1 [ false, %27 ], [ true, %28 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK12SkOpSpanBase15debugResetCoinTEv(%class.SkOpSpanBase* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK12SkOpSpanBase13debugSetCoinTEi(%class.SkOpSpanBase* nocapture, i32) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkOpSpan* @_ZNK12SkOpSpanBase12debugStarterEPPKS_(%class.SkOpSpanBase*, %class.SkOpSpanBase** nocapture) local_unnamed_addr #8 align 2 {
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %0, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp olt double %5, %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %2
  store %class.SkOpSpanBase* %0, %class.SkOpSpanBase** %1, align 8
  br label %10

10:                                               ; preds = %2, %9
  %11 = phi %class.SkOpSpanBase* [ %3, %9 ], [ %0, %2 ]
  %12 = bitcast %class.SkOpSpanBase* %11 to %class.SkOpSpan*
  ret %class.SkOpSpan* %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK12SkOpSpanBase13debugValidateEv(%class.SkOpSpanBase* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkOpSpan18debugCoinLoopCheckEv(%class.SkOpSpan* readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %0, i64 0, i32 2
  br label %3

3:                                                ; preds = %28, %1
  %4 = phi i32 [ %33, %28 ], [ -1, %1 ]
  %5 = phi i32 [ %29, %28 ], [ 0, %1 ]
  %6 = phi %class.SkOpSpan* [ %8, %28 ], [ %0, %1 ]
  %7 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %6, i64 0, i32 2
  %8 = load %class.SkOpSpan*, %class.SkOpSpan** %7, align 8
  %9 = icmp ugt i32 %5, 2
  br i1 %9, label %10, label %28

10:                                               ; preds = %3
  %11 = load %class.SkOpSpan*, %class.SkOpSpan** %2, align 8
  br label %14

12:                                               ; preds = %18, %14
  %13 = icmp eq i32 %16, %4
  br i1 %13, label %28, label %14

14:                                               ; preds = %12, %10
  %15 = phi i32 [ 1, %10 ], [ %16, %12 ]
  %16 = add nuw nsw i32 %15, 1
  %17 = icmp ult i32 %16, %5
  br i1 %17, label %20, label %12

18:                                               ; preds = %20
  %19 = icmp eq i32 %26, %5
  br i1 %19, label %12, label %20

20:                                               ; preds = %14, %18
  %21 = phi i32 [ %26, %18 ], [ %16, %14 ]
  %22 = phi %class.SkOpSpan* [ %24, %18 ], [ %11, %14 ]
  %23 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %22, i64 0, i32 2
  %24 = load %class.SkOpSpan*, %class.SkOpSpan** %23, align 8
  %25 = icmp eq %class.SkOpSpan* %11, %24
  %26 = add nuw i32 %21, 1
  br i1 %25, label %27, label %18

27:                                               ; preds = %20
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2615, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0)) #12
  br label %34

28:                                               ; preds = %12, %3
  %29 = add nuw nsw i32 %5, 1
  %30 = icmp ne %class.SkOpSpan* %8, null
  %31 = icmp ne %class.SkOpSpan* %8, %0
  %32 = and i1 %31, %30
  %33 = add nsw i32 %4, 1
  br i1 %32, label %3, label %34

34:                                               ; preds = %28, %27
  %35 = phi i1 [ false, %27 ], [ true, %28 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK15SkIntersections19debugCoincidentUsedEv(%class.SkIntersections* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %3 = load i16, i16* %2, align 8
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %99, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %99, label %9

9:                                                ; preds = %5
  %10 = zext i16 %3 to i32
  %11 = zext i8 %7 to i32
  %12 = icmp ult i8 %7, 8
  br i1 %12, label %86, label %13

13:                                               ; preds = %9
  %14 = and i32 %11, 248
  %15 = insertelement <4 x i32> undef, i32 %10, i32 0
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x i32> undef, i32 %10, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = add nsw i32 %14, -8
  %20 = lshr exact i32 %19, 3
  %21 = add nuw nsw i32 %20, 1
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %57, label %24

24:                                               ; preds = %13
  %25 = sub nuw nsw i32 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %24 ], [ %54, %26 ]
  %28 = phi <4 x i32> [ zeroinitializer, %24 ], [ %52, %26 ]
  %29 = phi <4 x i32> [ zeroinitializer, %24 ], [ %53, %26 ]
  %30 = phi i32 [ %25, %24 ], [ %55, %26 ]
  %31 = add <4 x i32> %27, <i32 4, i32 4, i32 4, i32 4>
  %32 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %27
  %33 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %31
  %34 = and <4 x i32> %32, %16
  %35 = and <4 x i32> %33, %18
  %36 = icmp ne <4 x i32> %34, zeroinitializer
  %37 = icmp ne <4 x i32> %35, zeroinitializer
  %38 = zext <4 x i1> %36 to <4 x i32>
  %39 = zext <4 x i1> %37 to <4 x i32>
  %40 = add nuw nsw <4 x i32> %28, %38
  %41 = add nuw nsw <4 x i32> %29, %39
  %42 = add <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %43 = add <4 x i32> %27, <i32 12, i32 12, i32 12, i32 12>
  %44 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %42
  %45 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %43
  %46 = and <4 x i32> %44, %16
  %47 = and <4 x i32> %45, %18
  %48 = icmp ne <4 x i32> %46, zeroinitializer
  %49 = icmp ne <4 x i32> %47, zeroinitializer
  %50 = zext <4 x i1> %48 to <4 x i32>
  %51 = zext <4 x i1> %49 to <4 x i32>
  %52 = add nuw nsw <4 x i32> %40, %50
  %53 = add nuw nsw <4 x i32> %41, %51
  %54 = add <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %55 = add i32 %30, -2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %26, !llvm.loop !7

57:                                               ; preds = %26, %13
  %58 = phi <4 x i32> [ undef, %13 ], [ %52, %26 ]
  %59 = phi <4 x i32> [ undef, %13 ], [ %53, %26 ]
  %60 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %13 ], [ %54, %26 ]
  %61 = phi <4 x i32> [ zeroinitializer, %13 ], [ %52, %26 ]
  %62 = phi <4 x i32> [ zeroinitializer, %13 ], [ %53, %26 ]
  %63 = icmp eq i32 %22, 0
  br i1 %63, label %76, label %64

64:                                               ; preds = %57
  %65 = add <4 x i32> %60, <i32 4, i32 4, i32 4, i32 4>
  %66 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %65
  %67 = and <4 x i32> %66, %18
  %68 = icmp ne <4 x i32> %67, zeroinitializer
  %69 = zext <4 x i1> %68 to <4 x i32>
  %70 = add nuw nsw <4 x i32> %62, %69
  %71 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %60
  %72 = and <4 x i32> %71, %16
  %73 = icmp ne <4 x i32> %72, zeroinitializer
  %74 = zext <4 x i1> %73 to <4 x i32>
  %75 = add nuw nsw <4 x i32> %61, %74
  br label %76

76:                                               ; preds = %57, %64
  %77 = phi <4 x i32> [ %58, %57 ], [ %75, %64 ]
  %78 = phi <4 x i32> [ %59, %57 ], [ %70, %64 ]
  %79 = add nuw <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = add <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i32 %14, %11
  br i1 %85, label %99, label %86

86:                                               ; preds = %76, %9
  %87 = phi i32 [ 0, %9 ], [ %14, %76 ]
  %88 = phi i32 [ 0, %9 ], [ %84, %76 ]
  br label %89

89:                                               ; preds = %86, %89
  %90 = phi i32 [ %97, %89 ], [ %87, %86 ]
  %91 = phi i32 [ %96, %89 ], [ %88, %86 ]
  %92 = shl i32 1, %90
  %93 = and i32 %92, %10
  %94 = icmp ne i32 %93, 0
  %95 = zext i1 %94 to i32
  %96 = add nuw nsw i32 %91, %95
  %97 = add nuw nsw i32 %90, 1
  %98 = icmp ult i32 %97, %11
  br i1 %98, label %89, label %99, !llvm.loop !9

99:                                               ; preds = %89, %76, %5, %1
  %100 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %84, %76 ], [ %96, %89 ]
  ret i32 %100
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkOpPtT11debugAddOppEPKS_S1_(%class.SkOpPtT* nocapture, %class.SkOpPtT* nocapture, %class.SkOpPtT* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkOpPtT13debugContainsEPKS_(%class.SkOpPtT* readonly, %class.SkOpPtT* readnone) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %0, i64 0, i32 3
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = icmp eq %class.SkOpPtT* %4, %1
  br i1 %5, label %23, label %11

6:                                                ; preds = %18
  %7 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %13, i64 0, i32 3
  %8 = load %class.SkOpPtT*, %class.SkOpPtT** %7, align 8
  %9 = icmp eq %class.SkOpPtT* %8, %1
  %10 = add nuw i32 %12, 1
  br i1 %9, label %23, label %11

11:                                               ; preds = %2, %6
  %12 = phi i32 [ %10, %6 ], [ 1, %2 ]
  %13 = phi %class.SkOpPtT* [ %8, %6 ], [ %4, %2 ]
  br label %14

14:                                               ; preds = %18, %11
  %15 = phi i32 [ 0, %11 ], [ %21, %18 ]
  %16 = phi %class.SkOpPtT* [ %0, %11 ], [ %20, %18 ]
  %17 = icmp eq %class.SkOpPtT* %13, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %16, i64 0, i32 3
  %20 = load %class.SkOpPtT*, %class.SkOpPtT** %19, align 8
  %21 = add nuw i32 %15, 1
  %22 = icmp eq i32 %21, %12
  br i1 %22, label %6, label %14

23:                                               ; preds = %6, %14, %2
  %24 = phi i1 [ true, %2 ], [ false, %14 ], [ true, %6 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpPtT* @_ZNK7SkOpPtT13debugContainsEPK11SkOpSegment(%class.SkOpPtT* readonly, %class.SkOpSegment* readnone) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %0, i64 0, i32 3
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %4) #12
  %6 = icmp eq %class.SkOpSegment* %5, %1
  br i1 %6, label %25, label %13

7:                                                ; preds = %20
  %8 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %15, i64 0, i32 3
  %9 = load %class.SkOpPtT*, %class.SkOpPtT** %8, align 8
  %10 = tail call %class.SkOpSegment* @_ZNK7SkOpPtT7segmentEv(%class.SkOpPtT* %9) #12
  %11 = icmp eq %class.SkOpSegment* %10, %1
  %12 = add nuw i32 %14, 1
  br i1 %11, label %25, label %13

13:                                               ; preds = %2, %7
  %14 = phi i32 [ %12, %7 ], [ 1, %2 ]
  %15 = phi %class.SkOpPtT* [ %9, %7 ], [ %4, %2 ]
  br label %16

16:                                               ; preds = %20, %13
  %17 = phi i32 [ 0, %13 ], [ %23, %20 ]
  %18 = phi %class.SkOpPtT* [ %0, %13 ], [ %22, %20 ]
  %19 = icmp eq %class.SkOpPtT* %15, %18
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %18, i64 0, i32 3
  %22 = load %class.SkOpPtT*, %class.SkOpPtT** %21, align 8
  %23 = add nuw i32 %17, 1
  %24 = icmp eq i32 %23, %14
  br i1 %24, label %7, label %16

25:                                               ; preds = %7, %16, %2
  %26 = phi %class.SkOpPtT* [ %4, %2 ], [ null, %16 ], [ %9, %7 ]
  ret %class.SkOpPtT* %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpPtT* @_ZNK7SkOpPtT10debugEnderEPKS_(%class.SkOpPtT* readonly, %class.SkOpPtT* readonly) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp olt double %4, %6
  %8 = select i1 %7, %class.SkOpPtT* %1, %class.SkOpPtT* %0
  ret %class.SkOpPtT* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkOpPtT14debugLoopLimitEb(%class.SkOpPtT* readonly, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %0, i64 0, i32 3
  br label %4

4:                                                ; preds = %31, %2
  %5 = phi i32 [ %38, %31 ], [ -1, %2 ]
  %6 = phi i32 [ %32, %31 ], [ 0, %2 ]
  %7 = phi %class.SkOpPtT* [ %34, %31 ], [ %0, %2 ]
  %8 = icmp ugt i32 %6, 2
  br i1 %8, label %9, label %31

9:                                                ; preds = %4
  %10 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  br label %13

11:                                               ; preds = %17, %13
  %12 = icmp eq i32 %15, %5
  br i1 %12, label %28, label %13

13:                                               ; preds = %11, %9
  %14 = phi i32 [ 1, %9 ], [ %15, %11 ]
  %15 = add nuw nsw i32 %14, 1
  %16 = icmp ult i32 %15, %6
  br i1 %16, label %19, label %11

17:                                               ; preds = %19
  %18 = icmp eq i32 %25, %6
  br i1 %18, label %11, label %19

19:                                               ; preds = %13, %17
  %20 = phi i32 [ %25, %17 ], [ %15, %13 ]
  %21 = phi %class.SkOpPtT* [ %23, %17 ], [ %10, %13 ]
  %22 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %21, i64 0, i32 3
  %23 = load %class.SkOpPtT*, %class.SkOpPtT** %22, align 8
  %24 = icmp eq %class.SkOpPtT* %10, %23
  %25 = add nuw nsw i32 %20, 1
  br i1 %24, label %26, label %17

26:                                               ; preds = %19
  br i1 %1, label %27, label %39

27:                                               ; preds = %26
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2763, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0)) #12
  br label %39

28:                                               ; preds = %11
  %29 = icmp eq i32 %6, 1000
  br i1 %29, label %30, label %31

30:                                               ; preds = %28
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2773, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0)) #12
  br label %39

31:                                               ; preds = %4, %28
  %32 = add nuw nsw i32 %6, 1
  %33 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %7, i64 0, i32 3
  %34 = load %class.SkOpPtT*, %class.SkOpPtT** %33, align 8
  %35 = icmp ne %class.SkOpPtT* %34, null
  %36 = icmp ne %class.SkOpPtT* %34, %0
  %37 = and i1 %36, %35
  %38 = add nsw i32 %5, 1
  br i1 %37, label %4, label %39

39:                                               ; preds = %31, %26, %27, %30
  %40 = phi i32 [ 1000, %30 ], [ %6, %27 ], [ %6, %26 ], [ 0, %31 ]
  ret i32 %40
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpPtT* @_ZNK7SkOpPtT12debugOppPrevEPKS_(%class.SkOpPtT* readnone, %class.SkOpPtT* readonly) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 3
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = icmp eq %class.SkOpPtT* %4, %0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2, %11
  %7 = phi %class.SkOpPtT* [ %9, %11 ], [ %4, %2 ]
  %8 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %7, i64 0, i32 3
  %9 = load %class.SkOpPtT*, %class.SkOpPtT** %8, align 8
  %10 = icmp eq %class.SkOpPtT* %9, %1
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = icmp eq %class.SkOpPtT* %9, %0
  br i1 %12, label %13, label %6

13:                                               ; preds = %6, %11, %2
  %14 = phi %class.SkOpPtT* [ null, %2 ], [ null, %11 ], [ %7, %6 ]
  ret %class.SkOpPtT* %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkOpPtT15debugResetCoinTEv(%class.SkOpPtT* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkOpPtT13debugSetCoinTEi(%class.SkOpPtT* nocapture, i32) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkOpPtT13debugValidateEv(%class.SkOpPtT* nocapture) local_unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z4DumpRK6SkPath(%class.SkPath* dereferenceable(16)) local_unnamed_addr #1 {
  tail call void @_ZNK6SkPath4dumpEP9SkWStreamb(%class.SkPath* %0, %class.SkWStream* null, i1 zeroext false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z7DumpHexRK6SkPath(%class.SkPath* dereferenceable(16)) local_unnamed_addr #1 {
  tail call void @_ZNK6SkPath4dumpEP9SkWStreamb(%class.SkPath* %0, %class.SkWStream* null, i1 zeroext true) #12
  ret void
}

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #9

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #7

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL13output_scalarf(float) unnamed_addr #1 {
  %2 = alloca %class.SkString, align 8
  %3 = fptosi float %0 to i32
  %4 = sitofp i32 %3 to float
  %5 = fcmp oeq float %4, %0
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2816, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0), i32 %3) #12
  br label %27

7:                                                ; preds = %1
  %8 = bitcast %class.SkString* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %class.SkString, %class.SkString* %2, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %9, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %2) #12
  %10 = fpext float %0 to double
  call void (%class.SkString*, i8*, ...) @_ZN8SkString6printfEPKcz(%class.SkString* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0), double %10) #12
  %11 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %9, align 8
  %12 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %11, i64 0, i32 2
  %15 = sext i32 %13 to i64
  br label %16

16:                                               ; preds = %16, %7
  %17 = phi i64 [ %18, %16 ], [ %15, %7 ]
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 48
  br i1 %21, label %16, label %22

22:                                               ; preds = %16
  %23 = shl i64 %17, 32
  %24 = ashr exact i64 %23, 32
  call void @_ZN8SkString6resizeEm(%class.SkString* nonnull %2, i64 %24) #12
  %25 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %9, align 8
  %26 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %25, i64 0, i32 2
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 2826, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0), i8* %26) #12
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  br label %27

27:                                               ; preds = %22, %6
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #7

declare void @_ZN8SkString6printfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #7

declare void @_ZN8SkString6resizeEm(%class.SkString*, i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #11

declare void @_ZNK6SkPath4dumpEP9SkWStreamb(%class.SkPath*, %class.SkWStream*, i1 zeroext) local_unnamed_addr #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!6 = distinct !{!6, !"_ZNK6SkPath9RangeIterdeEv"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10, !8}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
