; ModuleID = '../../third_party/skia/src/gpu/tessellate/GrStencilPathShader.cpp'
source_filename = "../../third_party/skia/src/gpu/tessellate/GrStencilPathShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrGLSLGeometryProcessor = type { i32 (...)**, %class.SkTArray }
%class.SkTArray = type { %"struct.GrGLSLGeometryProcessor::TransformInfo"*, i64 }
%"struct.GrGLSLGeometryProcessor::TransformInfo" = type { %class.GrShaderVar, %class.GrShaderVar, %class.GrFragmentProcessor* }
%class.GrShaderVar = type { i32, i32, i32, %class.SkString, %class.SkString, %class.SkString }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.1 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.1 = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.GrStencilPathShader = type { %class.GrPathShader.base, [4 x i8] }
%class.GrPathShader.base = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32 }
%class.GrGeometryProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32 }>
%class.GrNonAtomicRef = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.GrCurveTessellateShader = type { %class.GrStencilPathShader.base, [4 x i8] }
%class.GrStencilPathShader.base = type { %class.GrPathShader.base }
%class.GrWedgeTessellateShader = type { %class.GrStencilPathShader.base, [4 x i8] }
%class.GrCurveMiddleOutShader = type { %class.GrStencilPathShader.base, [4 x i8] }
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray.4*, i32, i32 }
%class.SkTArray.4 = type { i32*, i64 }
%"class.GrGeometryProcessor::TextureSampler" = type <{ %class.GrSamplerState, [4 x i8], %class.GrBackendFormat, %class.GrSwizzle, i8, [5 x i8] }>
%class.GrSamplerState = type { [2 x i8], i32, i32 }
%class.GrBackendFormat = type { i32, i8, %union.anon, i32, [4 x i8] }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.GrSwizzle = type { i16 }
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%"class.GrStencilPathShader::Impl" = type { %class.GrGLSLGeometryProcessor, %class.GrResourceHandle, %class.GrResourceHandle }
%class.GrResourceHandle = type { i32 }
%class.GrGLSLProgramDataManager = type { i32 (...)** }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrGLSLProgramBuilder = type opaque
%"struct.GrGLSLGeometryProcessor::EmitArgs" = type { %class.GrGLSLVertexBuilder*, %class.GrGLSLGeometryBuilder*, %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLVaryingHandler*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrGeometryProcessor*, i8*, i8*, %class.GrResourceHandle.27*, %"class.GrGLSLGeometryProcessor::FPCoordTransformHandler"* }
%class.GrGLSLVertexBuilder = type { %class.GrGLSLVertexGeoBuilder.base, [12 x i8] }
%class.GrGLSLVertexGeoBuilder.base = type { %class.GrGLSLShaderBuilder.base }
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.11, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.14, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.23], i32, i8, [3 x i8], i32 }>
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.8 }
%union.anon.8 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkSTArray.11 = type { %class.SkAlignedSTStorage.12, %class.SkTArray.13 }
%class.SkAlignedSTStorage.12 = type { [120 x i8] }
%class.SkTArray.13 = type { %class.SkString*, i64 }
%class.SkSTArray.14 = type { %class.SkAlignedSTStorage.15, %class.SkTArray.16 }
%class.SkAlignedSTStorage.15 = type { [16 x i8] }
%class.SkTArray.16 = type { %"class.std::__1::unique_ptr.17"*, i64 }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.23 = type { %class.SkAlignedSTStorage.24, %class.SkTArray.13 }
%class.SkAlignedSTStorage.24 = type { [8 x i8] }
%class.GrGLSLGeometryBuilder = type { %class.GrGLSLVertexGeoBuilder.base, i32, [8 x i8] }
%class.GrGLSLFPFragmentBuilder = type <{ i32 (...)**, [4 x i8], [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLVaryingHandler = type { i32 (...)**, [8 x i8], %class.GrTBlockList.25, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrGLSLProgramBuilder*, i8* }
%class.GrTBlockList.25 = type { %class.GrSBlockAllocator.26 }
%class.GrSBlockAllocator.26 = type { [80 x i8] }
%class.GrResourceHandle.27 = type { i32 }
%"class.GrGLSLGeometryProcessor::FPCoordTransformHandler" = type { %"class.GrFragmentProcessor::CIter", %class.SkTArray.31* }
%"class.GrFragmentProcessor::CIter" = type { %class.SkSTArray.28 }
%class.SkSTArray.28 = type { %class.SkAlignedSTStorage.29, %class.SkTArray.30 }
%class.SkAlignedSTStorage.29 = type { [32 x i8] }
%class.SkTArray.30 = type { %class.GrFragmentProcessor**, i64 }
%class.SkTArray.31 = type { %class.GrShaderVar*, i64 }
%"struct.GrGLSLGeometryProcessor::GrGPArgs" = type { %class.GrShaderVar, %class.GrShaderVar }
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.11, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.14, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.23], i32, i8, [3 x i8], i32, [12 x i8] }>
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%class.Impl = type { %"class.GrStencilPathShader::Impl" }
%class.Impl.3 = type { %"class.GrStencilPathShader::Impl" }
%"class.GrCurveMiddleOutShader::Impl" = type { %"class.GrStencilPathShader::Impl" }
%class.GrGLSLVertexGeoBuilder = type { %class.GrGLSLShaderBuilder.base, [12 x i8] }

$_ZN19GrStencilPathShaderD0Ev = comdat any

$_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder = comdat any

$_ZNK19GrGeometryProcessor16onTextureSamplerEi = comdat any

$_ZN23GrCurveTessellateShaderD0Ev = comdat any

$_ZNK23GrCurveTessellateShader4nameEv = comdat any

$_ZN23GrWedgeTessellateShaderD0Ev = comdat any

$_ZNK23GrWedgeTessellateShader4nameEv = comdat any

$_ZN11GrProcessorD2Ev = comdat any

$_ZN22GrCurveMiddleOutShaderD0Ev = comdat any

$_ZNK22GrCurveMiddleOutShader4nameEv = comdat any

$_ZN19GrStencilPathShader4ImplD0Ev = comdat any

$_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor = comdat any

$_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZN19GrStencilPathShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE = comdat any

$_ZN23GrGLSLGeometryProcessorD0Ev = comdat any

$_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz = comdat any

$_ZN23GrGLSLGeometryProcessorD2Ev = comdat any

$_ZN22GrCurveMiddleOutShader4ImplD0Ev = comdat any

$_ZN22GrCurveMiddleOutShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE = comdat any

$_ZTVN19GrStencilPathShader4ImplE = comdat any

$_ZTV23GrGLSLGeometryProcessor = comdat any

$_ZTVN22GrCurveMiddleOutShader4ImplE = comdat any

@_ZTV19GrStencilPathShader = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.GrStencilPathShader*)* @_ZN19GrStencilPathShaderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrStencilPathShader*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (%class.GrGLSLGeometryProcessor* (%class.GrStencilPathShader*, %class.GrShaderCaps*)* @_ZNK19GrStencilPathShader18createGLSLInstanceERK12GrShaderCaps to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, align 8
@_ZTV23GrCurveTessellateShader = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.GrCurveTessellateShader*)* @_ZN23GrCurveTessellateShaderD0Ev to i8*), i8* bitcast (i8* (%class.GrCurveTessellateShader*)* @_ZNK23GrCurveTessellateShader4nameEv to i8*), i8* bitcast (void (%class.GrStencilPathShader*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (%class.GrGLSLGeometryProcessor* (%class.GrCurveTessellateShader*, %class.GrShaderCaps*)* @_ZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCaps to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, align 8
@_ZTV23GrWedgeTessellateShader = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.GrWedgeTessellateShader*)* @_ZN23GrWedgeTessellateShaderD0Ev to i8*), i8* bitcast (i8* (%class.GrWedgeTessellateShader*)* @_ZNK23GrWedgeTessellateShader4nameEv to i8*), i8* bitcast (void (%class.GrStencilPathShader*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (%class.GrGLSLGeometryProcessor* (%class.GrWedgeTessellateShader*, %class.GrShaderCaps*)* @_ZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCaps to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, align 8
@_ZTV22GrCurveMiddleOutShader = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.GrCurveMiddleOutShader*)* @_ZN22GrCurveMiddleOutShaderD0Ev to i8*), i8* bitcast (i8* (%class.GrCurveMiddleOutShader*)* @_ZNK22GrCurveMiddleOutShader4nameEv to i8*), i8* bitcast (void (%class.GrStencilPathShader*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (%class.GrGLSLGeometryProcessor* (%class.GrCurveMiddleOutShader*, %class.GrShaderCaps*)* @_ZNK22GrCurveMiddleOutShader18createGLSLInstanceERK12GrShaderCaps to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, align 8
@_ZTVN19GrStencilPathShader4ImplE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*)* @_ZN19GrStencilPathShader4ImplD0Ev to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*)* @_ZN19GrStencilPathShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE to i8*)] }, comdat, align 8
@_ZTV23GrGLSLGeometryProcessor = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [62 x i8] c"../../third_party/skia/src/gpu/glsl/GrGLSLGeometryProcessor.h\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Not implemented.\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"affineMatrix\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"translate\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"float2 vertexpos = float2x2(%s) * inputPoint + %s;\00", align 1
@.str.5 = private unnamed_addr constant [60 x i8] c"vertexpos = (isinf(inputPoint.y)) ? inputPoint : vertexpos;\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"vertexpos\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"P = %s;\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"const half4 %s = half4(1);\00", align 1
@_ZTVZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsE4Impl = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%class.Impl*)* @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsEN4ImplD0Ev to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.Impl*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_ to i8*), i8* bitcast (void (%class.SkString*, %class.Impl*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_ to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*)* @_ZN19GrStencilPathShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE to i8*)] }, align 8
@.str.11 = private unnamed_addr constant [50 x i8] c"\0A            #define MAX_TESSELLATION_SEGMENTS %i\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"\0A            #define PRECISION %f\00", align 1
@_ZL13kSkSLTypeDefs = internal constant [86 x i8] c"\0A#define float4x3 mat4x3\0A#define float2 vec2\0A#define float3 vec3\0A#define float4 vec4\0A\00", align 16
@_ZL22kUnpackRationalCubicFn = internal constant [413 x i8] c"\0Afloat4x3 unpack_rational_cubic(float2 p0, float2 p1, float2 p2, float2 p3) {\0A    float4x3 P = float4x3(p0,1, p1,1, p2,1, p3,1);\0A    if (isinf(P[3].y)) {\0A        // This patch is actually a conic. Convert to a rational cubic.\0A        float w = P[3].x;\0A        float3 c = P[1] * ((2.0/3.0) * w);\0A        P = float4x3(P[0], fma(P[0], float3(1.0/3.0), c), fma(P[2], float3(1.0/3.0), c), P[2]);\0A    }\0A    return P;\0A}\00", align 16
@.str.13 = private unnamed_addr constant [3192 x i8] c"\0A            layout(vertices = 1) out;\0A\0A            in vec2 P[];\0A            patch out mat4x2 rationalCubicXY;\0A            patch out float rationalCubicW;\0A\0A            void main() {\0A                float w = -1;  // w<0 means a cubic.\0A                vec2 p1w = P[1];\0A                if (isinf(P[3].y)) {\0A                    // This patch is actually a conic. Project to homogeneous space.\0A                    w = P[3].x;\0A                    p1w *= w;\0A                }\0A\0A                // Chop the curve at T=1/2.\0A                vec2 ab = (P[0] + p1w) * .5;\0A                vec2 bc = (p1w + P[2]) * .5;\0A                vec2 cd = (P[2] + P[3]) * .5;\0A                vec2 abc = (ab + bc) * .5;\0A                vec2 bcd = (bc + cd) * .5;\0A                vec2 abcd = (abc + bcd) * .5;\0A\0A                float n0, n1;\0A                if (w < 0 || isinf(w)) {\0A                    if (w < 0) {\0A                        // The patch is a cubic. Calculate how many segments are required to\0A                        // linearize each half of the curve.\0A                        n0 = wangs_formula(PRECISION, P[0], ab, abc, abcd, -1);  // w<0 means cubic.\0A                        n1 = wangs_formula(PRECISION, abcd, bcd, cd, P[3], -1);\0A                        rationalCubicW = 1;\0A                    } else {\0A                        // The patch is a triangle (a conic with infinite weight).\0A                        n0 = n1 = 1;\0A                        rationalCubicW = -1;  // In the next stage, rationalCubicW<0 means triangle.\0A                    }\0A                    rationalCubicXY = mat4x2(P[0], P[1], P[2], P[3]);\0A                } else {\0A                    // The patch is a conic. Unproject p0..5. w1 == w2 == w3 when chopping at .5.\0A                    // (See SkConic::chopAt().)\0A                    float r = 2.0 / (1.0 + w);\0A                    ab *= r, bc *= r, abc *= r;\0A                    // Put in \22standard form\22 where w0 == w2 == w4 == 1.\0A                    float w_ = inversesqrt(r);  // Both halves have the same w' when chopping at .5.\0A                    // Calculate how many segments are needed to linearize each half of the curve.\0A                    n0 = wangs_formula(PRECISION, P[0], ab, abc, float2(0), w_);\0A                    n1 = wangs_formula(PRECISION, abc, bc, P[2], float2(0), w_);\0A                    // Covert the conic to a rational cubic in projected form.\0A                    rationalCubicXY = mat4x2(P[0],\0A                                             mix(float4(P[0],P[2]), p1w.xyxy, 2.0/3.0),\0A                                             P[2]);\0A                    rationalCubicW = fma(w, 2.0/3.0, 1.0/3.0);\0A                }\0A\0A                gl_TessLevelOuter[0] = min(n1, MAX_TESSELLATION_SEGMENTS);\0A                gl_TessLevelOuter[1] = 1.0;\0A                gl_TessLevelOuter[2] = min(n0, MAX_TESSELLATION_SEGMENTS);\0A\0A                // Changing the inner level to 1 when n0 == n1 == 1 collapses the entire patch to a\0A                // single triangle. Otherwise, we need an inner level of 2 so our curve triangles\0A                // have an interior point to originate from.\0A                gl_TessLevelInner[0] = min(max(n0, n1), 2.0);\0A            }\00", align 1
@.str.14 = private unnamed_addr constant [648 x i8] c"\0A    float length_pow2(float2 v) {\0A        return dot(v, v);\0A    }\0A    float wangs_formula(float parametricPrecision, float2 p0, float2 p1, float2 p2, float2 p3,\0A                        float w) {\0A        const float CUBIC_TERM_POW2 = %f;\0A        float l0 = length_pow2(fma(float2(-2), p1, p2) + p0);\0A        float l1 = length_pow2(fma(float2(-2), p2, p3) + p1);\0A        float m = CUBIC_TERM_POW2 * max(l0, l1);\0A        // FIXME: Use the better formula from GrWangsFormula::conic().\0A        const float QUAD_TERM_POW2 = %f;\0A        m = (w >= 0.0) ? QUAD_TERM_POW2 * l0 : m;\0A        return max(ceil(sqrt(parametricPrecision * sqrt(m))), 1.0);\0A    }\00", align 1
@_ZL20kEvalRationalCubicFn = internal constant [533 x i8] c"\0Afloat3 safe_mix(float3 a, float3 b, float T, float one_minus_T) {\0A    return a*one_minus_T + b*T;\0A}\0Afloat2 eval_rational_cubic(float4x3 P, float T) {\0A    float one_minus_T = 1.0 - T;\0A    float3 ab = safe_mix(P[0], P[1], T, one_minus_T);\0A    float3 bc = safe_mix(P[1], P[2], T, one_minus_T);\0A    float3 cd = safe_mix(P[2], P[3], T, one_minus_T);\0A    float3 abc = safe_mix(ab, bc, T, one_minus_T);\0A    float3 bcd = safe_mix(bc, cd, T, one_minus_T);\0A    float3 abcd = safe_mix(abc, bcd, T, one_minus_T);\0A    return abcd.xy / abcd.z;\0A}\00", align 16
@.str.15 = private unnamed_addr constant [1815 x i8] c"\0A            layout(triangles, equal_spacing, ccw) in;\0A\0A            uniform vec4 sk_RTAdjust;\0A\0A            patch in mat4x2 rationalCubicXY;\0A            patch in float rationalCubicW;\0A\0A            void main() {\0A                vec2 vertexpos;\0A                if (rationalCubicW < 0) {  // rationalCubicW < 0 means a triangle now.\0A                    vertexpos = (gl_TessCoord.x != 0) ? rationalCubicXY[0]\0A                              : (gl_TessCoord.y != 0) ? rationalCubicXY[1]\0A                                                      : rationalCubicXY[2];\0A                } else {\0A                    // Locate our parametric point of interest. T ramps from [0..1/2] on the left\0A                    // edge of the triangle, and [1/2..1] on the right. If we are the patch's\0A                    // interior vertex, then we want T=1/2. Since the barycentric coords are\0A                    // (1/3, 1/3, 1/3) at the interior vertex, the below fma() works in all 3\0A                    // scenarios.\0A                    float T = fma(.5, gl_TessCoord.y, gl_TessCoord.z);\0A\0A                    mat4x3 P = mat4x3(rationalCubicXY[0], 1,\0A                                      rationalCubicXY[1], rationalCubicW,\0A                                      rationalCubicXY[2], rationalCubicW,\0A                                      rationalCubicXY[3], 1);\0A                    vertexpos = eval_rational_cubic(P, T);\0A                    if (all(notEqual(gl_TessCoord.xz, vec2(0)))) {\0A                        // We are the interior point of the patch; center it inside\0A                        // [C(0), C(.5), C(1)].\0A                        vertexpos = (P[0].xy + vertexpos + P[3].xy) / 3.0;\0A                    }\0A                }\0A\0A                gl_Position = vec4(vertexpos * sk_RTAdjust.xz + sk_RTAdjust.yw, 0.0, 1.0);\0A            }\00", align 1
@_ZTVZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsE4Impl = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%class.Impl.3*)* @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsEN4ImplD0Ev to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.Impl.3*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_ to i8*), i8* bitcast (void (%class.SkString*, %class.Impl.3*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_ to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*)* @_ZN19GrStencilPathShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE to i8*)] }, align 8
@.str.16 = private unnamed_addr constant [1641 x i8] c"\0A            layout(vertices = 1) out;\0A\0A            in vec2 P[];\0A            patch out mat4x2 rationalCubicXY;\0A            patch out float rationalCubicW;\0A            patch out vec2 fanpoint;\0A\0A            void main() {\0A                // Figure out how many segments to divide the curve into.\0A                float w = isinf(P[3].y) ? P[3].x : -1;  // w<0 means cubic.\0A                float n = wangs_formula(PRECISION, P[0], P[1], P[2], P[3], w);\0A\0A                // Tessellate the first side of the patch into n triangles.\0A                gl_TessLevelOuter[0] = min(n, MAX_TESSELLATION_SEGMENTS);\0A\0A                // Leave the other two sides of the patch as single segments.\0A                gl_TessLevelOuter[1] = 1.0;\0A                gl_TessLevelOuter[2] = 1.0;\0A\0A                // Changing the inner level to 1 when n == 1 collapses the entire\0A                // patch to a single triangle. Otherwise, we need an inner level of 2 so our curve\0A                // triangles have an interior point to originate from.\0A                gl_TessLevelInner[0] = min(n, 2.0);\0A\0A                if (w < 0) {\0A                    rationalCubicXY = mat4x2(P[0], P[1], P[2], P[3]);\0A                    rationalCubicW = 1;\0A                } else {\0A                    // Convert the conic to a rational cubic in projected form.\0A                    rationalCubicXY = mat4x2(P[0],\0A                                             mix(vec4(P[0], P[2]), (P[1] * w).xyxy, 2.0/3.0),\0A                                             P[2]);\0A                    rationalCubicW = fma(w, 2.0/3.0, 1.0/3.0);\0A                }\0A                fanpoint = P[4];\0A            }\00", align 1
@.str.17 = private unnamed_addr constant [1553 x i8] c"\0A            layout(triangles, equal_spacing, ccw) in;\0A\0A            uniform vec4 sk_RTAdjust;\0A\0A            patch in mat4x2 rationalCubicXY;\0A            patch in float rationalCubicW;\0A            patch in vec2 fanpoint[];\0A\0A            void main() {\0A                // Locate our parametric point of interest. It is equal to the barycentric\0A                // y-coordinate if we are a vertex on the tessellated edge of the triangle patch,\0A                // 0.5 if we are the patch's interior vertex, or N/A if we are the fan point.\0A                // NOTE: We are on the tessellated edge when the barycentric x-coordinate == 0.\0A                float T = (gl_TessCoord.x == 0.0) ? gl_TessCoord.y : 0.5;\0A\0A                mat4x3 P = mat4x3(rationalCubicXY[0], 1,\0A                                  rationalCubicXY[1], rationalCubicW,\0A                                  rationalCubicXY[2], rationalCubicW,\0A                                  rationalCubicXY[3], 1);\0A                vec2 vertexpos = eval_rational_cubic(P, T);\0A\0A                if (gl_TessCoord.x == 1.0) {\0A                    // We are the anchor point that fans from the center of the curve's contour.\0A                    vertexpos = fanpoint[0];\0A                } else if (gl_TessCoord.x != 0.0) {\0A                    // We are the interior point of the patch; center it inside [C(0), C(.5), C(1)].\0A                    vertexpos = (P[0].xy + vertexpos + P[3].xy) / 3.0;\0A                }\0A\0A                gl_Position = vec4(vertexpos * sk_RTAdjust.xz + sk_RTAdjust.yw, 0.0, 1.0);\0A            }\00", align 1
@_ZTVN22GrCurveMiddleOutShader4ImplE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%"class.GrCurveMiddleOutShader::Impl"*)* @_ZN22GrCurveMiddleOutShader4ImplD0Ev to i8*), i8* bitcast (void (%"class.GrStencilPathShader::Impl"*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%"class.GrCurveMiddleOutShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*)* @_ZN22GrCurveMiddleOutShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE to i8*)] }, comdat, align 8
@.str.18 = private unnamed_addr constant [471 x i8] c"\0A            float find_middle_out_T() {\0A                int totalTriangleIdx = sk_VertexID/3 + 1;\0A                int depth = findMSB(totalTriangleIdx);\0A                int firstTriangleAtDepth = (1 << depth);\0A                int triangleIdxWithinDepth = totalTriangleIdx - firstTriangleAtDepth;\0A                int vertexIdxWithinDepth = triangleIdxWithinDepth * 2 + sk_VertexID % 3;\0A                return ldexp(float(vertexIdxWithinDepth), -1 - depth);\0A            }\00", align 1
@.str.19 = private unnamed_addr constant [491 x i8] c"\0A            float find_middle_out_T() {\0A                float totalTriangleIdx = float(sk_VertexID/3) + 1;\0A                float depth = floor(log2(totalTriangleIdx));\0A                float firstTriangleAtDepth = exp2(depth);\0A                float triangleIdxWithinDepth = totalTriangleIdx - firstTriangleAtDepth;\0A                float vertexIdxWithinDepth = triangleIdxWithinDepth * 2 + float(sk_VertexID % 3);\0A                return vertexIdxWithinDepth * exp2(-1 - depth);\0A            }\00", align 1
@.str.20 = private unnamed_addr constant [582 x i8] c"\0A        float2 pos;\0A        if (isinf(inputPoints_2_3.z)) {\0A            // A conic with w=Inf is an exact triangle.\0A            pos = (sk_VertexID < 1)  ? inputPoints_0_1.xy\0A                : (sk_VertexID == 1) ? inputPoints_0_1.zw\0A                                     : inputPoints_2_3.xy;\0A        } else {\0A            float4x3 P = unpack_rational_cubic(inputPoints_0_1.xy, inputPoints_0_1.zw,\0A                                               inputPoints_2_3.xy, inputPoints_2_3.zw);\0A            float T = find_middle_out_T();\0A            pos = eval_rational_cubic(P, T);\0A        }\00", align 1
@.str.21 = private unnamed_addr constant [40 x i8] c"\0A        pos = float2x2(%s) * pos + %s;\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"pos\00", align 1
@.str.23 = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/gpu/GrGeometryProcessor.h\00", align 1
@.str.24 = private unnamed_addr constant [30 x i8] c"Illegal texture sampler index\00", align 1
@.str.25 = private unnamed_addr constant [35 x i8] c"tessellate_GrCurveTessellateShader\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"tessellate_GrWedgeTessellateShader\00", align 1
@.str.27 = private unnamed_addr constant [34 x i8] c"tessellate_GrCurveMiddleOutShader\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %class.GrGLSLGeometryProcessor* @_ZNK19GrStencilPathShader18createGLSLInstanceERK12GrShaderCaps(%class.GrStencilPathShader* nocapture readnone, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 32) #11
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %8, align 8
  store i64 1, i64* %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN19GrStencilPathShader4ImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 -1, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %3, i64 28
  %12 = bitcast i8* %11 to i32*
  store i32 -1, i32* %12, align 4
  %13 = bitcast i8* %3 to %class.GrGLSLGeometryProcessor*
  ret %class.GrGLSLGeometryProcessor* %13
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %class.GrGLSLGeometryProcessor* @_ZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCaps(%class.GrCurveTessellateShader* nocapture readnone, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 32) #11
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %8, align 8
  store i64 1, i64* %6, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 -1, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %3, i64 28
  %12 = bitcast i8* %11 to i32*
  store i32 -1, i32* %12, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsE4Impl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %13 = bitcast i8* %3 to %class.GrGLSLGeometryProcessor*
  ret %class.GrGLSLGeometryProcessor* %13
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %class.GrGLSLGeometryProcessor* @_ZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCaps(%class.GrWedgeTessellateShader* nocapture readnone, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 32) #11
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %8, align 8
  store i64 1, i64* %6, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 -1, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %3, i64 28
  %12 = bitcast i8* %11 to i32*
  store i32 -1, i32* %12, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsE4Impl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %13 = bitcast i8* %3 to %class.GrGLSLGeometryProcessor*
  ret %class.GrGLSLGeometryProcessor* %13
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %class.GrGLSLGeometryProcessor* @_ZNK22GrCurveMiddleOutShader18createGLSLInstanceERK12GrShaderCaps(%class.GrCurveMiddleOutShader* nocapture readnone, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 32) #11
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %8, align 8
  store i64 1, i64* %6, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 -1, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %3, i64 28
  %12 = bitcast i8* %11 to i32*
  store i32 -1, i32* %12, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN22GrCurveMiddleOutShader4ImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %13 = bitcast i8* %3 to %class.GrGLSLGeometryProcessor*
  ret %class.GrGLSLGeometryProcessor* %13
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStencilPathShaderD0Ev(%class.GrStencilPathShader*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK19GrStencilPathShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder(%class.GrStencilPathShader*, %class.GrShaderCaps* dereferenceable(144), %class.GrProcessorKeyBuilder*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(96) %"class.GrGeometryProcessor::TextureSampler"* @_ZNK19GrGeometryProcessor16onTextureSamplerEi(%class.GrGeometryProcessor*, i32) unnamed_addr #3 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.23, i64 0, i64 0), i32 304, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.24, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrCurveTessellateShaderD0Ev(%class.GrCurveTessellateShader*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %class.GrCurveTessellateShader* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK23GrCurveTessellateShader4nameEv(%class.GrCurveTessellateShader*) unnamed_addr #3 comdat align 2 {
  ret i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrWedgeTessellateShaderD0Ev(%class.GrWedgeTessellateShader*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %class.GrWedgeTessellateShader* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK23GrWedgeTessellateShader4nameEv(%class.GrWedgeTessellateShader*) unnamed_addr #3 comdat align 2 {
  ret i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11GrProcessorD2Ev(%class.GrProcessor*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22GrCurveMiddleOutShaderD0Ev(%class.GrCurveMiddleOutShader*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %class.GrCurveMiddleOutShader* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK22GrCurveMiddleOutShader4nameEv(%class.GrCurveMiddleOutShader*) unnamed_addr #3 comdat align 2 {
  ret i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.27, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStencilPathShader4ImplD0Ev(%"class.GrStencilPathShader::Impl"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.GrStencilPathShader::Impl", %"class.GrStencilPathShader::Impl"* %0, i64 0, i32 0
  tail call void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor* %2) #10
  %3 = bitcast %"class.GrStencilPathShader::Impl"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStencilPathShader4Impl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor(%"class.GrStencilPathShader::Impl"*, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrShaderCaps* dereferenceable(144), %class.GrGeometryProcessor* dereferenceable(80)) unnamed_addr #3 comdat align 2 {
  %5 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 0, i32 6
  %6 = getelementptr inbounds %"class.GrStencilPathShader::Impl", %"class.GrStencilPathShader::Impl"* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = bitcast [4 x i8]* %5 to float*
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 3
  %11 = bitcast [4 x i8]* %10 to float*
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 1
  %14 = bitcast [4 x i8]* %13 to float*
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 4
  %17 = bitcast [4 x i8]* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)***
  %20 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)**, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*** %19, align 8
  %21 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %20, i64 16
  %22 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %21, align 8
  tail call void %22(%class.GrGLSLProgramDataManager* %1, i32 %7, float %9, float %12, float %15, float %18) #10
  %23 = getelementptr inbounds %"class.GrStencilPathShader::Impl", %"class.GrStencilPathShader::Impl"* %0, i64 0, i32 2, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 2
  %26 = bitcast [4 x i8]* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 5
  %29 = bitcast [4 x i8]* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float, float)***
  %32 = load void (%class.GrGLSLProgramDataManager*, i32, float, float)**, void (%class.GrGLSLProgramDataManager*, i32, float, float)*** %31, align 8
  %33 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float)** %32, i64 8
  %34 = load void (%class.GrGLSLProgramDataManager*, i32, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float)** %33, align 8
  tail call void %34(%class.GrGLSLProgramDataManager* %1, i32 %24, float %27, float %30) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #3 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 139, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #3 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 145, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStencilPathShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE(%"class.GrStencilPathShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"* dereferenceable(88), %"struct.GrGLSLGeometryProcessor::GrGPArgs"*) unnamed_addr #3 comdat align 2 {
  %4 = alloca %class.SkString, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %class.GrShaderVar, align 8
  %8 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 6
  %9 = load %class.GrGeometryProcessor*, %class.GrGeometryProcessor** %8, align 8
  %10 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 3
  %11 = load %class.GrGLSLVaryingHandler*, %class.GrGLSLVaryingHandler** %10, align 8
  tail call void @_ZN20GrGLSLVaryingHandler14emitAttributesERK19GrGeometryProcessor(%class.GrGLSLVaryingHandler* %11, %class.GrGeometryProcessor* dereferenceable(80) %9) #10
  %12 = bitcast %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1 to %class.GrGLSLShaderBuilder**
  %13 = load %class.GrGLSLShaderBuilder*, %class.GrGLSLShaderBuilder** %12, align 8
  %14 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %15 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %16 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 4
  %17 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %16, align 8
  %18 = bitcast %class.GrGLSLUniformHandler* %17 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %19 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %18, align 8
  %20 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %19, i64 13
  %21 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %20, align 8
  %22 = call i32 %21(%class.GrGLSLUniformHandler* %17, %class.GrFragmentProcessor* null, i32 1, i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %5) #10
  %23 = getelementptr inbounds %"class.GrStencilPathShader::Impl", %"class.GrStencilPathShader::Impl"* %0, i64 0, i32 1, i32 0
  store i32 %22, i32* %23, align 8
  %24 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %16, align 8
  %25 = bitcast %class.GrGLSLUniformHandler* %24 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %26 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %25, align 8
  %27 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %26, i64 13
  %28 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %27, align 8
  %29 = call i32 %28(%class.GrGLSLUniformHandler* %24, %class.GrFragmentProcessor* null, i32 1, i32 22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %6) #10
  %30 = getelementptr inbounds %"class.GrStencilPathShader::Impl", %"class.GrStencilPathShader::Impl"* %0, i64 0, i32 2, i32 0
  store i32 %29, i32* %30, align 4
  %31 = load i8*, i8** %5, align 8
  %32 = load i8*, i8** %6, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %13, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0), i8* %31, i8* %32)
  %33 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %9, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %3
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %13, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.5, i64 0, i64 0))
  %38 = load i32, i32* %33, align 4
  br label %39

39:                                               ; preds = %3, %37
  %40 = phi i32 [ %34, %3 ], [ %38, %37 ]
  %41 = and i32 %40, 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %2, i64 0, i32 0, i32 0
  store i32 22, i32* %44, align 8
  %45 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %2, i64 0, i32 0, i32 3
  %46 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %45, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0)) #10
  br label %56

47:                                               ; preds = %39
  %48 = bitcast %class.GrShaderVar* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %48) #10
  %49 = bitcast %class.SkString* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #10
  %50 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 0
  store i32 22, i32* %50, align 8
  %51 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 1
  store i32 1, i32* %51, align 4
  %52 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 2
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %53, %class.SkString* nonnull dereferenceable(8) %4) #10
  %54 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %54) #10
  %55 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %7, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %55) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %13, %class.GrShaderVar* nonnull dereferenceable(40) %7) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* %55) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* %54) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* %53) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %48) #10
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  br label %56

56:                                               ; preds = %47, %43
  %57 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 2
  %58 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %57, align 8
  %59 = bitcast %class.GrGLSLFPFragmentBuilder* %58 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr i8, i8* %60, i64 -24
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %class.GrGLSLFPFragmentBuilder* %58 to i8*
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  %66 = bitcast i8* %65 to %class.GrGLSLShaderBuilder*
  %67 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 7
  %68 = load i8*, i8** %67, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %66, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %68)
  %69 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %57, align 8
  %70 = bitcast %class.GrGLSLFPFragmentBuilder* %69 to i8**
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr i8, i8* %71, i64 -24
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %class.GrGLSLFPFragmentBuilder* %69 to i8*
  %76 = getelementptr inbounds i8, i8* %75, i64 %74
  %77 = bitcast i8* %76 to %class.GrGLSLShaderBuilder*
  %78 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 8
  %79 = load i8*, i8** %78, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %77, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %79)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD0Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #9

declare void @_ZN20GrGLSLVaryingHandler14emitAttributesERK19GrGeometryProcessor(%class.GrGLSLVaryingHandler*, %class.GrGeometryProcessor* dereferenceable(80)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder*, i8*, ...) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %8 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %class.SkString**
  %11 = load %class.SkString*, %class.SkString** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %11, i64 %12
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %13, i8* %1, %struct.__va_list_tag* nonnull %5) #10
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret void
}

declare void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder*, %class.GrShaderVar* dereferenceable(40)) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

declare void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString*, i8*, %struct.__va_list_tag*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString*, i8*) local_unnamed_addr #5

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #5

declare void @_ZN8SkStringC1EOS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #5

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsEN4ImplD0Ev(%class.Impl*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.Impl, %class.Impl* %0, i64 0, i32 0, i32 0
  tail call void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor* %2) #10
  %3 = bitcast %class.Impl* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_(%class.SkString* noalias sret, %class.Impl* nocapture readnone, %class.GrGeometryProcessor* nocapture readnone dereferenceable(80), i8*, %class.GrGLSLUniformHandler* nocapture readnone dereferenceable(16), %class.GrShaderCaps* nocapture readonly dereferenceable(144)) unnamed_addr #3 align 2 {
  %7 = alloca %class.SkString, align 8
  %8 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %8, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #10
  %9 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 17
  %10 = load i32, i32* %9, align 4
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.11, i64 0, i64 0), i32 %10) #10
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0), double 4.000000e+00) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @_ZL13kSkSLTypeDefs, i64 0, i64 0)) #10
  %11 = bitcast %class.SkString* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #10
  %12 = getelementptr inbounds %class.SkString, %class.SkString* %7, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %12, align 8, !alias.scope !2
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %7) #10
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* nonnull %7, i8* getelementptr inbounds ([648 x i8], [648 x i8]* @.str.14, i64 0, i64 0), double 5.625000e-01, double 6.250000e-02) #10
  %13 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %12, align 8
  %14 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %13, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %13, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* %0, i64 -1, i8* %14, i64 %17) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #10
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([413 x i8], [413 x i8]* @_ZL22kUnpackRationalCubicFn, i64 0, i64 0)) #10
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([3192 x i8], [3192 x i8]* @.str.13, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZNK23GrCurveTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_(%class.SkString* noalias sret, %class.Impl* nocapture readnone, %class.GrGeometryProcessor* nocapture readnone dereferenceable(80), i8*, %class.GrGLSLUniformHandler* nocapture readnone dereferenceable(16), %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #3 align 2 {
  %7 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %7, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @_ZL13kSkSLTypeDefs, i64 0, i64 0)) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([533 x i8], [533 x i8]* @_ZL20kEvalRationalCubicFn, i64 0, i64 0)) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([1815 x i8], [1815 x i8]* @.str.15, i64 0, i64 0)) #10
  ret void
}

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #5

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #5

declare void @_ZN8SkString6insertEmPKcm(%class.SkString*, i64, i8*, i64) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsEN4ImplD0Ev(%class.Impl.3*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.Impl.3, %class.Impl.3* %0, i64 0, i32 0, i32 0
  tail call void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor* %2) #10
  %3 = bitcast %class.Impl.3* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_(%class.SkString* noalias sret, %class.Impl.3* nocapture readnone, %class.GrGeometryProcessor* nocapture readnone dereferenceable(80), i8*, %class.GrGLSLUniformHandler* nocapture readnone dereferenceable(16), %class.GrShaderCaps* nocapture readonly dereferenceable(144)) unnamed_addr #3 align 2 {
  %7 = alloca %class.SkString, align 8
  %8 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %8, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #10
  %9 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 17
  %10 = load i32, i32* %9, align 4
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.11, i64 0, i64 0), i32 %10) #10
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0), double 4.000000e+00) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @_ZL13kSkSLTypeDefs, i64 0, i64 0)) #10
  %11 = bitcast %class.SkString* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #10
  %12 = getelementptr inbounds %class.SkString, %class.SkString* %7, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %12, align 8, !alias.scope !5
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %7) #10
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* nonnull %7, i8* getelementptr inbounds ([648 x i8], [648 x i8]* @.str.14, i64 0, i64 0), double 5.625000e-01, double 6.250000e-02) #10
  %13 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %12, align 8
  %14 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %13, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %13, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* %0, i64 -1, i8* %14, i64 %17) #10
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #10
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([413 x i8], [413 x i8]* @_ZL22kUnpackRationalCubicFn, i64 0, i64 0)) #10
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([1641 x i8], [1641 x i8]* @.str.16, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZNK23GrWedgeTessellateShader18createGLSLInstanceERK12GrShaderCapsENK4Impl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerS2_(%class.SkString* noalias sret, %class.Impl.3* nocapture readnone, %class.GrGeometryProcessor* nocapture readnone dereferenceable(80), i8*, %class.GrGLSLUniformHandler* nocapture readnone dereferenceable(16), %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #3 align 2 {
  %7 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %7, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @_ZL13kSkSLTypeDefs, i64 0, i64 0)) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([533 x i8], [533 x i8]* @_ZL20kEvalRationalCubicFn, i64 0, i64 0)) #10
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([1553 x i8], [1553 x i8]* @.str.17, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %14, %1
  %11 = phi i64 [ %5, %1 ], [ %24, %14 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %31, label %28

14:                                               ; preds = %14, %8
  %15 = phi i64 [ 0, %8 ], [ %23, %14 ]
  %16 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %9, align 8
  %17 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 1, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %17) #10
  %18 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 1, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %18) #10
  %19 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 1, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %19) #10
  %20 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 0, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %20) #10
  %21 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 0, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %21) #10
  %22 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15, i32 0, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %22) #10
  %23 = add nuw nsw i64 %15, 1
  %24 = load i64, i64* %4, align 8
  %25 = lshr i64 %24, 1
  %26 = and i64 %25, 2147483647
  %27 = icmp ult i64 %23, %26
  br i1 %27, label %14, label %10

28:                                               ; preds = %10
  %29 = bitcast %class.SkTArray* %3 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_Z7sk_freePv(i8* %30) #10
  br label %31

31:                                               ; preds = %10, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22GrCurveMiddleOutShader4ImplD0Ev(%"class.GrCurveMiddleOutShader::Impl"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.GrCurveMiddleOutShader::Impl", %"class.GrCurveMiddleOutShader::Impl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor* %2) #10
  %3 = bitcast %"class.GrCurveMiddleOutShader::Impl"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22GrCurveMiddleOutShader4Impl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS1_8GrGPArgsE(%"class.GrCurveMiddleOutShader::Impl"*, %"struct.GrGLSLGeometryProcessor::EmitArgs"* dereferenceable(88), %"struct.GrGLSLGeometryProcessor::GrGPArgs"*) unnamed_addr #3 comdat align 2 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 6
  %7 = load %class.GrGeometryProcessor*, %class.GrGeometryProcessor** %6, align 8
  %8 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 3
  %9 = load %class.GrGLSLVaryingHandler*, %class.GrGLSLVaryingHandler** %8, align 8
  tail call void @_ZN20GrGLSLVaryingHandler14emitAttributesERK19GrGeometryProcessor(%class.GrGLSLVaryingHandler* %9, %class.GrGeometryProcessor* dereferenceable(80) %7) #10
  %10 = bitcast %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1 to %class.GrGLSLVertexGeoBuilder**
  %11 = load %class.GrGLSLVertexGeoBuilder*, %class.GrGLSLVertexGeoBuilder** %10, align 8
  %12 = getelementptr inbounds %class.GrGLSLVertexGeoBuilder, %class.GrGLSLVertexGeoBuilder* %11, i64 0, i32 0, i32 3, i32 1, i32 0
  %13 = load %class.SkString*, %class.SkString** %12, align 8
  %14 = getelementptr inbounds %class.SkString, %class.SkString* %13, i64 7
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %14, i64 -1, i8* getelementptr inbounds ([413 x i8], [413 x i8]* @_ZL22kUnpackRationalCubicFn, i64 0, i64 0)) #10
  %15 = load %class.GrGLSLVertexGeoBuilder*, %class.GrGLSLVertexGeoBuilder** %10, align 8
  %16 = getelementptr inbounds %class.GrGLSLVertexGeoBuilder, %class.GrGLSLVertexGeoBuilder* %15, i64 0, i32 0, i32 3, i32 1, i32 0
  %17 = load %class.SkString*, %class.SkString** %16, align 8
  %18 = getelementptr inbounds %class.SkString, %class.SkString* %17, i64 7
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %18, i64 -1, i8* getelementptr inbounds ([533 x i8], [533 x i8]* @_ZL20kEvalRationalCubicFn, i64 0, i64 0)) #10
  %19 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 5
  %20 = load %class.GrShaderCaps*, %class.GrShaderCaps** %19, align 8
  %21 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %20, i64 0, i32 2
  %22 = bitcast i56* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 65536
  %25 = icmp eq i64 %24, 0
  %26 = load %class.GrGLSLVertexGeoBuilder*, %class.GrGLSLVertexGeoBuilder** %10, align 8
  %27 = getelementptr inbounds %class.GrGLSLVertexGeoBuilder, %class.GrGLSLVertexGeoBuilder* %26, i64 0, i32 0, i32 3, i32 1, i32 0
  %28 = load %class.SkString*, %class.SkString** %27, align 8
  %29 = getelementptr inbounds %class.SkString, %class.SkString* %28, i64 7
  %30 = select i1 %25, i8* getelementptr inbounds ([491 x i8], [491 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([471 x i8], [471 x i8]* @.str.18, i64 0, i64 0)
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %29, i64 -1, i8* %30) #10
  %31 = bitcast %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1 to %class.GrGLSLShaderBuilder**
  %32 = load %class.GrGLSLShaderBuilder*, %class.GrGLSLShaderBuilder** %31, align 8
  %33 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %32, i64 0, i32 3, i32 0, i32 0, i64 120
  %34 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %32, i64 0, i32 14
  %35 = load i32, i32* %34, align 8
  %36 = bitcast i8* %33 to %class.SkString**
  %37 = load %class.SkString*, %class.SkString** %36, align 8
  %38 = sext i32 %35 to i64
  %39 = getelementptr inbounds %class.SkString, %class.SkString* %37, i64 %38
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %39, i64 -1, i8* getelementptr inbounds ([582 x i8], [582 x i8]* @.str.20, i64 0, i64 0)) #10
  %40 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %41 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %42 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 4
  %43 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %42, align 8
  %44 = bitcast %class.GrGLSLUniformHandler* %43 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %45 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %44, align 8
  %46 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %45, i64 13
  %47 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %46, align 8
  %48 = call i32 %47(%class.GrGLSLUniformHandler* %43, %class.GrFragmentProcessor* null, i32 1, i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %4) #10
  %49 = getelementptr inbounds %"class.GrCurveMiddleOutShader::Impl", %"class.GrCurveMiddleOutShader::Impl"* %0, i64 0, i32 0, i32 1, i32 0
  store i32 %48, i32* %49, align 8
  %50 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %42, align 8
  %51 = bitcast %class.GrGLSLUniformHandler* %50 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %52 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %51, align 8
  %53 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %52, i64 13
  %54 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %53, align 8
  %55 = call i32 %54(%class.GrGLSLUniformHandler* %50, %class.GrFragmentProcessor* null, i32 1, i32 22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %5) #10
  %56 = getelementptr inbounds %"class.GrCurveMiddleOutShader::Impl", %"class.GrCurveMiddleOutShader::Impl"* %0, i64 0, i32 0, i32 2, i32 0
  store i32 %55, i32* %56, align 4
  %57 = load %class.GrGLSLShaderBuilder*, %class.GrGLSLShaderBuilder** %31, align 8
  %58 = load i8*, i8** %4, align 8
  %59 = load i8*, i8** %5, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %57, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.21, i64 0, i64 0), i8* %58, i8* %59)
  %60 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %2, i64 0, i32 0, i32 0
  store i32 22, i32* %60, align 8
  %61 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %2, i64 0, i32 0, i32 3
  %62 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0)) #10
  %63 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 2
  %64 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %63, align 8
  %65 = bitcast %class.GrGLSLFPFragmentBuilder* %64 to i8**
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr i8, i8* %66, i64 -24
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %class.GrGLSLFPFragmentBuilder* %64 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 %69
  %72 = bitcast i8* %71 to %class.GrGLSLShaderBuilder*
  %73 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 7
  %74 = load i8*, i8** %73, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %72, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %74)
  %75 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %63, align 8
  %76 = bitcast %class.GrGLSLFPFragmentBuilder* %75 to i8**
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr i8, i8* %77, i64 -24
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %class.GrGLSLFPFragmentBuilder* %75 to i8*
  %82 = getelementptr inbounds i8, i8* %81, i64 %80
  %83 = bitcast i8* %82 to %class.GrGLSLShaderBuilder*
  %84 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 8
  %85 = load i8*, i8** %84, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %83, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %85)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11GrProcessordlEPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN14GrWangsFormulaL7as_skslEv: argument 0"}
!4 = distinct !{!4, !"_ZN14GrWangsFormulaL7as_skslEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN14GrWangsFormulaL7as_skslEv: argument 0"}
!7 = distinct !{!7, !"_ZN14GrWangsFormulaL7as_skslEv"}
