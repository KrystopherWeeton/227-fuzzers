; ModuleID = '../../third_party/libzip/src/lib/zip_progress.c'
source_filename = "../../third_party/libzip/src/lib/zip_progress.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_progress = type { %struct.zip*, void (%struct.zip*, double, i8*)*, void (i8*)*, i8*, i32 (%struct.zip*, i8*)*, void (i8*)*, i8*, double, double, double, double }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_progress_end(%struct.zip_progress*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip_progress* %0, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 1
  %5 = load void (%struct.zip*, double, i8*)*, void (%struct.zip*, double, i8*)** %4, align 8
  %6 = icmp eq void (%struct.zip*, double, i8*)* %5, null
  br i1 %6, label %25, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 10
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 9
  %11 = load double, double* %10, align 8
  %12 = fsub double %9, %11
  %13 = fadd double %11, %12
  %14 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 8
  %15 = load double, double* %14, align 8
  %16 = fsub double %13, %15
  %17 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 7
  %18 = load double, double* %17, align 8
  %19 = fcmp ogt double %16, %18
  br i1 %19, label %20, label %25

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %22 = load %struct.zip*, %struct.zip** %21, align 8
  %23 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 3
  %24 = load i8*, i8** %23, align 8
  tail call void %5(%struct.zip* %22, double %13, i8* %24) #5
  store double %13, double* %14, align 8
  br label %25

25:                                               ; preds = %20, %7, %3
  %26 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 4
  %27 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %26, align 8
  %28 = icmp eq i32 (%struct.zip*, i8*)* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %31 = load %struct.zip*, %struct.zip** %30, align 8
  %32 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 6
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i32 %27(%struct.zip* %31, i8* %33) #5
  br label %35

35:                                               ; preds = %29, %25, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_progress_update(%struct.zip_progress*, double) local_unnamed_addr #0 {
  %3 = icmp eq %struct.zip_progress* %0, null
  br i1 %3, label %43, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 1
  %6 = load void (%struct.zip*, double, i8*)*, void (%struct.zip*, double, i8*)** %5, align 8
  %7 = icmp eq void (%struct.zip*, double, i8*)* %6, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %4
  %9 = fcmp ogt double %1, 0.000000e+00
  %10 = select i1 %9, double %1, double 0.000000e+00
  %11 = fcmp olt double %10, 1.000000e+00
  %12 = select i1 %11, double %10, double 1.000000e+00
  %13 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 10
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 9
  %16 = load double, double* %15, align 8
  %17 = fsub double %14, %16
  %18 = fmul double %12, %17
  %19 = fadd double %16, %18
  %20 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 8
  %21 = load double, double* %20, align 8
  %22 = fsub double %19, %21
  %23 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 7
  %24 = load double, double* %23, align 8
  %25 = fcmp ogt double %22, %24
  br i1 %25, label %26, label %31

26:                                               ; preds = %8
  %27 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %28 = load %struct.zip*, %struct.zip** %27, align 8
  %29 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 3
  %30 = load i8*, i8** %29, align 8
  tail call void %6(%struct.zip* %28, double %19, i8* %30) #5
  store double %19, double* %20, align 8
  br label %31

31:                                               ; preds = %4, %8, %26
  %32 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 4
  %33 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %32, align 8
  %34 = icmp eq i32 (%struct.zip*, i8*)* %33, null
  br i1 %34, label %42, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %37 = load %struct.zip*, %struct.zip** %36, align 8
  %38 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 6
  %39 = load i8*, i8** %38, align 8
  %40 = tail call i32 %33(%struct.zip* %37, i8* %39) #5
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %35, %31
  br label %43

43:                                               ; preds = %35, %2, %42
  %44 = phi i32 [ 0, %42 ], [ 0, %2 ], [ -1, %35 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_progress_free(%struct.zip_progress*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip_progress* %0, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 2
  %5 = load void (i8*)*, void (i8*)** %4, align 8
  %6 = icmp eq void (i8*)* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  tail call void %5(i8* %9) #5
  br label %10

10:                                               ; preds = %3, %7
  %11 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 1
  %12 = bitcast void (%struct.zip*, double, i8*)** %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #5
  %13 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 5
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = icmp eq void (i8*)* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 6
  %18 = load i8*, i8** %17, align 8
  tail call void %14(i8* %18) #5
  br label %19

19:                                               ; preds = %10, %16
  %20 = bitcast %struct.zip_progress* %0 to i8*
  tail call void @free(i8* %20) #5
  br label %21

21:                                               ; preds = %1, %19
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_progress_start(%struct.zip_progress*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip_progress* %0, null
  br i1 %2, label %25, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 1
  %5 = load void (%struct.zip*, double, i8*)*, void (%struct.zip*, double, i8*)** %4, align 8
  %6 = icmp eq void (%struct.zip*, double, i8*)* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 8
  store double 0.000000e+00, double* %8, align 8
  %9 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %10 = load %struct.zip*, %struct.zip** %9, align 8
  %11 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  tail call void %5(%struct.zip* %10, double 0.000000e+00, i8* %12) #5
  br label %13

13:                                               ; preds = %3, %7
  %14 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 4
  %15 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %14, align 8
  %16 = icmp eq i32 (%struct.zip*, i8*)* %15, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %19 = load %struct.zip*, %struct.zip** %18, align 8
  %20 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 6
  %21 = load i8*, i8** %20, align 8
  %22 = tail call i32 %15(%struct.zip* %19, i8* %21) #5
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %17, %13
  br label %25

25:                                               ; preds = %17, %1, %24
  %26 = phi i32 [ 0, %24 ], [ 0, %1 ], [ -1, %17 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_progress_subrange(%struct.zip_progress*, double, double) local_unnamed_addr #0 {
  %4 = icmp eq %struct.zip_progress* %0, null
  br i1 %4, label %38, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 9
  store double %1, double* %6, align 8
  %7 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 10
  store double %2, double* %7, align 8
  %8 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 1
  %9 = load void (%struct.zip*, double, i8*)*, void (%struct.zip*, double, i8*)** %8, align 8
  %10 = icmp eq void (%struct.zip*, double, i8*)* %9, null
  br i1 %10, label %26, label %11

11:                                               ; preds = %5
  %12 = fsub double %2, %1
  %13 = fmul double %12, 0.000000e+00
  %14 = fadd double %13, %1
  %15 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 8
  %16 = load double, double* %15, align 8
  %17 = fsub double %14, %16
  %18 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 7
  %19 = load double, double* %18, align 8
  %20 = fcmp ogt double %17, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %11
  %22 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %23 = load %struct.zip*, %struct.zip** %22, align 8
  %24 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 3
  %25 = load i8*, i8** %24, align 8
  tail call void %9(%struct.zip* %23, double %14, i8* %25) #5
  store double %14, double* %15, align 8
  br label %26

26:                                               ; preds = %21, %11, %5
  %27 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 4
  %28 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %27, align 8
  %29 = icmp eq i32 (%struct.zip*, i8*)* %28, null
  br i1 %29, label %37, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 0
  %32 = load %struct.zip*, %struct.zip** %31, align 8
  %33 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %0, i64 0, i32 6
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 %28(%struct.zip* %32, i8* %34) #5
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %30, %26
  br label %38

38:                                               ; preds = %37, %30, %3
  %39 = phi i32 [ 0, %3 ], [ 0, %37 ], [ -1, %30 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_register_progress_callback_with_state(%struct.zip*, double, void (%struct.zip*, double, i8*)*, void (i8*)*, i8*) local_unnamed_addr #0 {
  %6 = icmp eq void (%struct.zip*, double, i8*)* %2, null
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %8 = load %struct.zip_progress*, %struct.zip_progress** %7, align 8
  %9 = icmp eq %struct.zip_progress* %8, null
  br i1 %6, label %33, label %10

10:                                               ; preds = %5
  br i1 %9, label %11, label %21

11:                                               ; preds = %10
  %12 = tail call noalias i8* @malloc(i64 88) #5
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %15, i32 14, i32 0) #5
  store %struct.zip_progress* null, %struct.zip_progress** %7, align 8
  br label %63

16:                                               ; preds = %11
  %17 = bitcast i8* %12 to %struct.zip**
  store %struct.zip* %0, %struct.zip** %17, align 8
  %18 = getelementptr inbounds i8, i8* %12, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 56, i1 false) #5
  %19 = bitcast %struct.zip_progress** %7 to i8**
  store i8* %12, i8** %19, align 8
  %20 = bitcast i8* %12 to %struct.zip_progress*
  br label %21

21:                                               ; preds = %16, %10
  %22 = phi %struct.zip_progress* [ %20, %16 ], [ %8, %10 ]
  %23 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %22, i64 0, i32 2
  %24 = load void (i8*)*, void (i8*)** %23, align 8
  %25 = icmp eq void (i8*)* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %22, i64 0, i32 3
  %28 = load i8*, i8** %27, align 8
  tail call void %24(i8* %28) #5
  br label %29

29:                                               ; preds = %21, %26
  %30 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %22, i64 0, i32 1
  store void (%struct.zip*, double, i8*)* %2, void (%struct.zip*, double, i8*)** %30, align 8
  store void (i8*)* %3, void (i8*)** %23, align 8
  %31 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %22, i64 0, i32 3
  store i8* %4, i8** %31, align 8
  %32 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %22, i64 0, i32 7
  store double %1, double* %32, align 8
  br label %63

33:                                               ; preds = %5
  br i1 %9, label %63, label %34

34:                                               ; preds = %33
  %35 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 4
  %36 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %35, align 8
  %37 = icmp eq i32 (%struct.zip*, i8*)* %36, null
  %38 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 2
  %39 = load void (i8*)*, void (i8*)** %38, align 8
  %40 = icmp eq void (i8*)* %39, null
  br i1 %37, label %41, label %56

41:                                               ; preds = %34
  br i1 %40, label %45, label %42

42:                                               ; preds = %41
  %43 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 3
  %44 = load i8*, i8** %43, align 8
  tail call void %39(i8* %44) #5
  br label %45

45:                                               ; preds = %42, %41
  %46 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 1
  %47 = bitcast void (%struct.zip*, double, i8*)** %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #5
  %48 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 5
  %49 = load void (i8*)*, void (i8*)** %48, align 8
  %50 = icmp eq void (i8*)* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 6
  %53 = load i8*, i8** %52, align 8
  tail call void %49(i8* %53) #5
  br label %54

54:                                               ; preds = %45, %51
  %55 = bitcast %struct.zip_progress* %8 to i8*
  tail call void @free(i8* %55) #5
  store %struct.zip_progress* null, %struct.zip_progress** %7, align 8
  br label %63

56:                                               ; preds = %34
  br i1 %40, label %60, label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 3
  %59 = load i8*, i8** %58, align 8
  tail call void %39(i8* %59) #5
  br label %60

60:                                               ; preds = %56, %57
  %61 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %8, i64 0, i32 1
  %62 = bitcast void (%struct.zip*, double, i8*)** %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #5
  br label %63

63:                                               ; preds = %14, %29, %54, %60, %33
  %64 = phi i32 [ 0, %33 ], [ 0, %60 ], [ 0, %54 ], [ 0, %29 ], [ -1, %14 ]
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_register_cancel_callback_with_state(%struct.zip*, i32 (%struct.zip*, i8*)*, void (i8*)*, i8*) local_unnamed_addr #0 {
  %5 = icmp eq i32 (%struct.zip*, i8*)* %1, null
  %6 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %7 = load %struct.zip_progress*, %struct.zip_progress** %6, align 8
  %8 = icmp eq %struct.zip_progress* %7, null
  br i1 %5, label %31, label %9

9:                                                ; preds = %4
  br i1 %8, label %10, label %20

10:                                               ; preds = %9
  %11 = tail call noalias i8* @malloc(i64 88) #5
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %14, i32 14, i32 0) #5
  store %struct.zip_progress* null, %struct.zip_progress** %6, align 8
  br label %63

15:                                               ; preds = %10
  %16 = bitcast i8* %11 to %struct.zip**
  store %struct.zip* %0, %struct.zip** %16, align 8
  %17 = getelementptr inbounds i8, i8* %11, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 56, i1 false) #5
  %18 = bitcast %struct.zip_progress** %6 to i8**
  store i8* %11, i8** %18, align 8
  %19 = bitcast i8* %11 to %struct.zip_progress*
  br label %20

20:                                               ; preds = %15, %9
  %21 = phi %struct.zip_progress* [ %19, %15 ], [ %7, %9 ]
  %22 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %21, i64 0, i32 5
  %23 = load void (i8*)*, void (i8*)** %22, align 8
  %24 = icmp eq void (i8*)* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %21, i64 0, i32 6
  %27 = load i8*, i8** %26, align 8
  tail call void %23(i8* %27) #5
  br label %28

28:                                               ; preds = %20, %25
  %29 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %21, i64 0, i32 4
  store i32 (%struct.zip*, i8*)* %1, i32 (%struct.zip*, i8*)** %29, align 8
  store void (i8*)* %2, void (i8*)** %22, align 8
  %30 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %21, i64 0, i32 6
  store i8* %3, i8** %30, align 8
  br label %63

31:                                               ; preds = %4
  br i1 %8, label %63, label %32

32:                                               ; preds = %31
  %33 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 1
  %34 = load void (%struct.zip*, double, i8*)*, void (%struct.zip*, double, i8*)** %33, align 8
  %35 = icmp eq void (%struct.zip*, double, i8*)* %34, null
  br i1 %35, label %36, label %53

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 2
  %38 = load void (i8*)*, void (i8*)** %37, align 8
  %39 = icmp eq void (i8*)* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 3
  %42 = load i8*, i8** %41, align 8
  tail call void %38(i8* %42) #5
  br label %43

43:                                               ; preds = %40, %36
  %44 = bitcast void (%struct.zip*, double, i8*)** %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #5
  %45 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 5
  %46 = load void (i8*)*, void (i8*)** %45, align 8
  %47 = icmp eq void (i8*)* %46, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 6
  %50 = load i8*, i8** %49, align 8
  tail call void %46(i8* %50) #5
  br label %51

51:                                               ; preds = %43, %48
  %52 = bitcast %struct.zip_progress* %7 to i8*
  tail call void @free(i8* %52) #5
  store %struct.zip_progress* null, %struct.zip_progress** %6, align 8
  br label %63

53:                                               ; preds = %32
  %54 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 5
  %55 = load void (i8*)*, void (i8*)** %54, align 8
  %56 = icmp eq void (i8*)* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 6
  %59 = load i8*, i8** %58, align 8
  tail call void %55(i8* %59) #5
  br label %60

60:                                               ; preds = %53, %57
  %61 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %7, i64 0, i32 4
  %62 = bitcast i32 (%struct.zip*, i8*)** %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #5
  br label %63

63:                                               ; preds = %13, %28, %51, %60, %31
  %64 = phi i32 [ 0, %31 ], [ 0, %60 ], [ 0, %51 ], [ 0, %28 ], [ -1, %13 ]
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define hidden void @zip_register_progress_callback(%struct.zip*, void (double)*) local_unnamed_addr #0 {
  %3 = icmp eq void (double)* %1, null
  br i1 %3, label %4, label %37

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %6 = load %struct.zip_progress*, %struct.zip_progress** %5, align 8
  %7 = icmp eq %struct.zip_progress* %6, null
  br i1 %7, label %37, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 4
  %10 = load i32 (%struct.zip*, i8*)*, i32 (%struct.zip*, i8*)** %9, align 8
  %11 = icmp eq i32 (%struct.zip*, i8*)* %10, null
  %12 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 2
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = icmp eq void (i8*)* %13, null
  br i1 %11, label %15, label %30

15:                                               ; preds = %8
  br i1 %14, label %19, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 3
  %18 = load i8*, i8** %17, align 8
  tail call void %13(i8* %18) #5
  br label %19

19:                                               ; preds = %16, %15
  %20 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 1
  %21 = bitcast void (%struct.zip*, double, i8*)** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #5
  %22 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 5
  %23 = load void (i8*)*, void (i8*)** %22, align 8
  %24 = icmp eq void (i8*)* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 6
  %27 = load i8*, i8** %26, align 8
  tail call void %23(i8* %27) #5
  br label %28

28:                                               ; preds = %25, %19
  %29 = bitcast %struct.zip_progress* %6 to i8*
  tail call void @free(i8* %29) #5
  store %struct.zip_progress* null, %struct.zip_progress** %5, align 8
  br label %37

30:                                               ; preds = %8
  br i1 %14, label %34, label %31

31:                                               ; preds = %30
  %32 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 3
  %33 = load i8*, i8** %32, align 8
  tail call void %13(i8* %33) #5
  br label %34

34:                                               ; preds = %31, %30
  %35 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %6, i64 0, i32 1
  %36 = bitcast void (%struct.zip*, double, i8*)** %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #5
  br label %37

37:                                               ; preds = %34, %28, %4, %2
  %38 = tail call noalias i8* @malloc(i64 8) #5
  %39 = icmp eq i8* %38, null
  br i1 %39, label %67, label %40

40:                                               ; preds = %37
  %41 = bitcast i8* %38 to void (double)**
  store void (double)* %1, void (double)** %41, align 8
  %42 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %43 = load %struct.zip_progress*, %struct.zip_progress** %42, align 8
  %44 = icmp eq %struct.zip_progress* %43, null
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = tail call noalias i8* @malloc(i64 88) #5
  %47 = icmp eq i8* %46, null
  br i1 %47, label %65, label %48

48:                                               ; preds = %45
  %49 = bitcast i8* %46 to %struct.zip**
  store %struct.zip* %0, %struct.zip** %49, align 8
  %50 = getelementptr inbounds i8, i8* %46, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 56, i1 false) #5
  %51 = bitcast %struct.zip_progress** %42 to i8**
  store i8* %46, i8** %51, align 8
  %52 = bitcast i8* %46 to %struct.zip_progress*
  br label %53

53:                                               ; preds = %48, %40
  %54 = phi %struct.zip_progress* [ %52, %48 ], [ %43, %40 ]
  %55 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %54, i64 0, i32 2
  %56 = load void (i8*)*, void (i8*)** %55, align 8
  %57 = icmp eq void (i8*)* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %54, i64 0, i32 3
  %60 = load i8*, i8** %59, align 8
  tail call void %56(i8* %60) #5
  br label %61

61:                                               ; preds = %53, %58
  %62 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %54, i64 0, i32 1
  store void (%struct.zip*, double, i8*)* @_zip_legacy_progress_callback, void (%struct.zip*, double, i8*)** %62, align 8
  store void (i8*)* @free, void (i8*)** %55, align 8
  %63 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %54, i64 0, i32 3
  store i8* %38, i8** %63, align 8
  %64 = getelementptr inbounds %struct.zip_progress, %struct.zip_progress* %54, i64 0, i32 7
  store double 1.000000e-03, double* %64, align 8
  br label %67

65:                                               ; preds = %45
  %66 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %66, i32 14, i32 0) #5
  store %struct.zip_progress* null, %struct.zip_progress** %42, align 8
  tail call void @free(i8* nonnull %38) #5
  br label %67

67:                                               ; preds = %61, %65, %37
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_zip_legacy_progress_callback(%struct.zip* nocapture readnone, double, i8* nocapture readonly) #0 {
  %4 = bitcast i8* %2 to void (double)**
  %5 = load void (double)*, void (double)** %4, align 8
  tail call void %5(double %1) #5
  ret void
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
