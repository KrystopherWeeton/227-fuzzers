; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_luv.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_luv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon = type { float, i16, i16 }
%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }
%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, i32 (%struct.tiff*)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct.logLuvState = type { i32, i32, i32, i32, i8*, i64, void (%struct.logLuvState*, i8*, i64)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* }

@uv_row = internal unnamed_addr constant [163 x %struct.anon] [%struct.anon { float 0x3FCFB36BE0000000, i16 4, i16 0 }, %struct.anon { float 0x3FCF342680000000, i16 6, i16 4 }, %struct.anon { float 0x3FCEEF8060000000, i16 7, i16 10 }, %struct.anon { float 0x3FCE72A7C0000000, i16 9, i16 17 }, %struct.anon { float 0x3FCE322B00000000, i16 10, i16 26 }, %struct.anon { float 0x3FCDB73080000000, i16 12, i16 36 }, %struct.anon { float 0x3FCD3AA360000000, i16 14, i16 48 }, %struct.anon { float 0x3FCCF60E00000000, i16 15, i16 62 }, %struct.anon { float 0x3FCC76A720000000, i16 17, i16 77 }, %struct.anon { float 0x3FCC366520000000, i16 18, i16 94 }, %struct.anon { float 0x3FCB7B9E00000000, i16 21, i16 112 }, %struct.anon { float 0x3FCB3A3660000000, i16 22, i16 133 }, %struct.anon { float 0x3FCAF8E7E0000000, i16 23, i16 155 }, %struct.anon { float 0x3FCA3CA760000000, i16 26, i16 178 }, %struct.anon { float 0x3FC9FB7200000000, i16 27, i16 204 }, %struct.anon { float 0x3FC980DC40000000, i16 29, i16 231 }, %struct.anon { float 0x3FC906F6A0000000, i16 31, i16 260 }, %struct.anon { float 0x3FC8C69300000000, i16 32, i16 291 }, %struct.anon { float 0x3FC84DEC20000000, i16 34, i16 323 }, %struct.anon { float 0x3FC7D5ED00000000, i16 36, i16 357 }, %struct.anon { float 0x3FC7D5ED00000000, i16 36, i16 393 }, %struct.anon { float 0x3FC75F2CC0000000, i16 38, i16 429 }, %struct.anon { float 0x3FC6E99200000000, i16 40, i16 467 }, %struct.anon { float 0x3FC675AB80000000, i16 42, i16 507 }, %struct.anon { float 0x3FC6042100000000, i16 44, i16 549 }, %struct.anon { float 0x3FC6042100000000, i16 44, i16 593 }, %struct.anon { float 0x3FC5951400000000, i16 46, i16 637 }, %struct.anon { float 0x3FC5951400000000, i16 46, i16 683 }, %struct.anon { float 0x3FC4F00680000000, i16 49, i16 729 }, %struct.anon { float 0x3FC44E6180000000, i16 52, i16 778 }, %struct.anon { float 0x3FC44E6180000000, i16 52, i16 830 }, %struct.anon { float 0x3FC44E6180000000, i16 52, i16 882 }, %struct.anon { float 0x3FC3B035C0000000, i16 55, i16 934 }, %struct.anon { float 0x3FC3B035C0000000, i16 55, i16 989 }, %struct.anon { float 0x3FC3159C40000000, i16 58, i16 1044 }, %struct.anon { float 0x3FC3159C40000000, i16 58, i16 1102 }, %struct.anon { float 0x3FC2458040000000, i16 62, i16 1160 }, %struct.anon { float 0x3FC2458040000000, i16 62, i16 1222 }, %struct.anon { float 0x3FC2458040000000, i16 62, i16 1284 }, %struct.anon { float 0x3FC1B2D4E0000000, i16 65, i16 1346 }, %struct.anon { float 0x3FC1B2D4E0000000, i16 65, i16 1411 }, %struct.anon { float 0x3FC1B2D4E0000000, i16 65, i16 1476 }, %struct.anon { float 0x3FC0EAD0C0000000, i16 69, i16 1541 }, %struct.anon { float 0x3FC0EAD0C0000000, i16 69, i16 1610 }, %struct.anon { float 0x3FC02773E0000000, i16 73, i16 1679 }, %struct.anon { float 0x3FC02773E0000000, i16 73, i16 1752 }, %struct.anon { float 0x3FC02773E0000000, i16 73, i16 1825 }, %struct.anon { float 0x3FBED14A00000000, i16 77, i16 1898 }, %struct.anon { float 0x3FBED14A00000000, i16 77, i16 1975 }, %struct.anon { float 0x3FBED14A00000000, i16 77, i16 2052 }, %struct.anon { float 0x3FBED14A00000000, i16 77, i16 2129 }, %struct.anon { float 0x3FBCEB13E0000000, i16 82, i16 2206 }, %struct.anon { float 0x3FBCEB13E0000000, i16 82, i16 2288 }, %struct.anon { float 0x3FBCEB13E0000000, i16 82, i16 2370 }, %struct.anon { float 0x3FBB81D7E0000000, i16 86, i16 2452 }, %struct.anon { float 0x3FBB81D7E0000000, i16 86, i16 2538 }, %struct.anon { float 0x3FBB81D7E0000000, i16 86, i16 2624 }, %struct.anon { float 0x3FBB81D7E0000000, i16 86, i16 2710 }, %struct.anon { float 0x3FB9B01420000000, i16 91, i16 2796 }, %struct.anon { float 0x3FB9B01420000000, i16 91, i16 2887 }, %struct.anon { float 0x3FB9B01420000000, i16 91, i16 2978 }, %struct.anon { float 0x3FB85A2D80000000, i16 95, i16 3069 }, %struct.anon { float 0x3FB85A2D80000000, i16 95, i16 3164 }, %struct.anon { float 0x3FB85A2D80000000, i16 95, i16 3259 }, %struct.anon { float 0x3FB85A2D80000000, i16 95, i16 3354 }, %struct.anon { float 0x3FB6994180000000, i16 100, i16 3449 }, %struct.anon { float 0x3FB6994180000000, i16 100, i16 3549 }, %struct.anon { float 0x3FB6994180000000, i16 100, i16 3649 }, %struct.anon { float 0x3FB6994180000000, i16 100, i16 3749 }, %struct.anon { float 0x3FB4DEB100000000, i16 105, i16 3849 }, %struct.anon { float 0x3FB4DEB100000000, i16 105, i16 3954 }, %struct.anon { float 0x3FB4DEB100000000, i16 105, i16 4059 }, %struct.anon { float 0x3FB4DEB100000000, i16 105, i16 4164 }, %struct.anon { float 0x3FB32A1720000000, i16 110, i16 4269 }, %struct.anon { float 0x3FB32A1720000000, i16 110, i16 4379 }, %struct.anon { float 0x3FB32A1720000000, i16 110, i16 4489 }, %struct.anon { float 0x3FB32A1720000000, i16 110, i16 4599 }, %struct.anon { float 0x3FB17B7420000000, i16 115, i16 4709 }, %struct.anon { float 0x3FB17B7420000000, i16 115, i16 4824 }, %struct.anon { float 0x3FB17B7420000000, i16 115, i16 4939 }, %struct.anon { float 0x3FB17B7420000000, i16 115, i16 5054 }, %struct.anon { float 0x3FB0465200000000, i16 119, i16 5169 }, %struct.anon { float 0x3FB0465200000000, i16 119, i16 5288 }, %struct.anon { float 0x3FB0465200000000, i16 119, i16 5407 }, %struct.anon { float 0x3FB0465200000000, i16 119, i16 5526 }, %struct.anon { float 0x3FAD4BCF00000000, i16 124, i16 5645 }, %struct.anon { float 0x3FAD4BCF00000000, i16 124, i16 5769 }, %struct.anon { float 0x3FAD4BCF00000000, i16 124, i16 5893 }, %struct.anon { float 0x3FAD4BCF00000000, i16 124, i16 6017 }, %struct.anon { float 0x3FAA1AB4C0000000, i16 129, i16 6141 }, %struct.anon { float 0x3FAA1AB4C0000000, i16 129, i16 6270 }, %struct.anon { float 0x3FAA1AB4C0000000, i16 129, i16 6399 }, %struct.anon { float 0x3FAA1AB4C0000000, i16 129, i16 6528 }, %struct.anon { float 0x3FAA1AB4C0000000, i16 129, i16 6657 }, %struct.anon { float 0x3FA6F7C240000000, i16 134, i16 6786 }, %struct.anon { float 0x3FA6F7C240000000, i16 134, i16 6920 }, %struct.anon { float 0x3FA6F7C240000000, i16 134, i16 7054 }, %struct.anon { float 0x3FA6F7C240000000, i16 134, i16 7188 }, %struct.anon { float 0x3FA4C5B8E0000000, i16 138, i16 7322 }, %struct.anon { float 0x3FA4C5B8E0000000, i16 138, i16 7460 }, %struct.anon { float 0x3FA4C5B8E0000000, i16 138, i16 7598 }, %struct.anon { float 0x3FA4C5B8E0000000, i16 138, i16 7736 }, %struct.anon { float 0x3FA29B0680000000, i16 142, i16 7874 }, %struct.anon { float 0x3FA29B0680000000, i16 142, i16 8016 }, %struct.anon { float 0x3FA29B0680000000, i16 142, i16 8158 }, %struct.anon { float 0x3FA29B0680000000, i16 142, i16 8300 }, %struct.anon { float 0x3FA07485E0000000, i16 146, i16 8442 }, %struct.anon { float 0x3FA07485E0000000, i16 146, i16 8588 }, %struct.anon { float 0x3FA07485E0000000, i16 146, i16 8734 }, %struct.anon { float 0x3FA07485E0000000, i16 146, i16 8880 }, %struct.anon { float 0x3F9C9E2360000000, i16 150, i16 9026 }, %struct.anon { float 0x3F9C9E2360000000, i16 150, i16 9176 }, %struct.anon { float 0x3F9C9E2360000000, i16 150, i16 9326 }, %struct.anon { float 0x3F984F0960000000, i16 154, i16 9476 }, %struct.anon { float 0x3F984F0960000000, i16 154, i16 9630 }, %struct.anon { float 0x3F984F0960000000, i16 154, i16 9784 }, %struct.anon { float 0x3F984F0960000000, i16 154, i16 9938 }, %struct.anon { float 0x3F93F8DB40000000, i16 158, i16 10092 }, %struct.anon { float 0x3F93F8DB40000000, i16 158, i16 10250 }, %struct.anon { float 0x3F93F8DB40000000, i16 158, i16 10408 }, %struct.anon { float 0x3F91622820000000, i16 161, i16 10566 }, %struct.anon { float 0x3F91622820000000, i16 161, i16 10727 }, %struct.anon { float 0x3F91622820000000, i16 161, i16 10888 }, %struct.anon { float 0x3F91622820000000, i16 161, i16 11049 }, %struct.anon { float 0x3F89E279E0000000, i16 165, i16 11210 }, %struct.anon { float 0x3F89E279E0000000, i16 165, i16 11375 }, %struct.anon { float 0x3F89E279E0000000, i16 165, i16 11540 }, %struct.anon { float 0x3F84762960000000, i16 168, i16 11705 }, %struct.anon { float 0x3F84762960000000, i16 168, i16 11873 }, %struct.anon { float 0x3F84762960000000, i16 168, i16 12041 }, %struct.anon { float 0x3F8276FB00000000, i16 170, i16 12209 }, %struct.anon { float 0x3F8276FB00000000, i16 170, i16 12379 }, %struct.anon { float 0x3F8276FB00000000, i16 170, i16 12549 }, %struct.anon { float 0x3F7976FF40000000, i16 173, i16 12719 }, %struct.anon { float 0x3F7976FF40000000, i16 173, i16 12892 }, %struct.anon { float 0x3F74E09780000000, i16 175, i16 13065 }, %struct.anon { float 0x3F74E09780000000, i16 175, i16 13240 }, %struct.anon { float 0x3F74E09780000000, i16 175, i16 13415 }, %struct.anon { float 0x3F7002E240000000, i16 177, i16 13590 }, %struct.anon { float 0x3F7002E240000000, i16 177, i16 13767 }, %struct.anon { float 0x3F632B55E0000000, i16 177, i16 13944 }, %struct.anon { float 0x3F639218A0000000, i16 170, i16 14121 }, %struct.anon { float 0x3F517F8440000000, i16 164, i16 14291 }, %struct.anon { float 0x3F5B152F40000000, i16 157, i16 14455 }, %struct.anon { float 0x3F477EA1C0000000, i16 150, i16 14612 }, %struct.anon { float 0x3F5A719B40000000, i16 143, i16 14762 }, %struct.anon { float 0x3F31B1D920000000, i16 136, i16 14905 }, %struct.anon { float 0x3F3FB82C20000000, i16 129, i16 15041 }, %struct.anon { float 0x3F52125140000000, i16 123, i16 15170 }, %struct.anon { float 0x3F54595360000000, i16 115, i16 15293 }, %struct.anon { float 0x3F5376D540000000, i16 109, i16 15408 }, %struct.anon { float 0x3F50907100000000, i16 103, i16 15517 }, %struct.anon { float 0x3F473B85E0000000, i16 97, i16 15620 }, %struct.anon { float 0x3F33B9F120000000, i16 89, i16 15717 }, %struct.anon { float 0x3F63CAB820000000, i16 82, i16 15806 }, %struct.anon { float 0x3F6AA1D760000000, i16 76, i16 15888 }, %struct.anon { float 0x3F6A975B00000000, i16 69, i16 15964 }, %struct.anon { float 0x3F70F62740000000, i16 62, i16 16033 }, %struct.anon { float 0x3F786CA8A0000000, i16 55, i16 16095 }, %struct.anon { float 0x3F821A2E80000000, i16 47, i16 16150 }, %struct.anon { float 0x3F857BC800000000, i16 40, i16 16197 }, %struct.anon { float 0x3F9166E000000000, i16 31, i16 16237 }, %struct.anon { float 0x3F983A10A0000000, i16 21, i16 16268 }], align 16
@TIFFInitSGILog.module = internal constant [15 x i8] c"TIFFInitSGILog\00", align 1
@LogLuvFields = internal constant [2 x %struct._TIFFField] [%struct._TIFFField { i32 65560, i16 0, i16 0, i32 3, i32 0, i32 13, i32 0, i16 0, i8 1, i8 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), %struct._TIFFFieldArray* null }, %struct._TIFFField { i32 65561, i16 0, i16 0, i32 3, i32 0, i32 13, i32 0, i16 0, i8 1, i8 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), %struct._TIFFFieldArray* null }], align 16
@.str = private unnamed_addr constant [42 x i8] c"Merging SGILog codec-specific tags failed\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"%s: No space for LogLuv state block\00", align 1
@oog_encode.oog_table = internal unnamed_addr global [100 x i32] zeroinitializer, align 16
@oog_encode.initialized = internal unnamed_addr global i1 false, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"SGILogDataFmt\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"SGILogEncode\00", align 1
@LogLuvSetupDecode.module = internal constant [18 x i8] c"LogLuvSetupDecode\00", align 16
@.str.4 = private unnamed_addr constant [71 x i8] c"Inappropriate photometric interpretation %d for SGILog compression; %s\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"must be either LogLUV or LogL\00", align 1
@LogLuvInitState.module = internal constant [16 x i8] c"LogLuvInitState\00", align 16
@.str.6 = private unnamed_addr constant [53 x i8] c"SGILog compression cannot handle non-contiguous data\00", align 1
@.str.7 = private unnamed_addr constant [53 x i8] c"No support for converting user data format to LogLuv\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"No space for SGILog translation buffer\00", align 1
@LogLuvDecode24.module = internal constant [15 x i8] c"LogLuvDecode24\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"Translation buffer too short\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"Not enough data at row %lu (short %llu pixels)\00", align 1
@LogLuvDecode32.module = internal constant [15 x i8] c"LogLuvDecode32\00", align 1
@LogL16InitState.module = internal constant [16 x i8] c"LogL16InitState\00", align 16
@.str.11 = private unnamed_addr constant [44 x i8] c"Sorry, can not handle LogL image with %s=%d\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Samples/pixel\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"No support for converting user data format to LogL\00", align 1
@LogL16Decode.module = internal constant [13 x i8] c"LogL16Decode\00", align 1
@LogLuvSetupEncode.module = internal constant [18 x i8] c"LogLuvSetupEncode\00", align 16
@.str.14 = private unnamed_addr constant [54 x i8] c"SGILog compression supported only for %s, or raw data\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"Y, L\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"XYZ, Luv\00", align 1
@LogLuvEncode24.module = internal constant [15 x i8] c"LogLuvEncode24\00", align 1
@LogLuvEncode32.module = internal constant [15 x i8] c"LogLuvEncode32\00", align 1
@LogL16Encode.module = internal constant [13 x i8] c"LogL16Encode\00", align 1
@LogLuvVSetField.module = internal constant [16 x i8] c"LogLuvVSetField\00", align 16
@.str.17 = private unnamed_addr constant [46 x i8] c"Unknown data format %d for LogLuv compression\00", align 1
@.str.18 = private unnamed_addr constant [43 x i8] c"Unknown encoding %d for LogLuv compression\00", align 1
@switch.table.LogLuvInitState = private unnamed_addr constant [4 x i32] [i32 12, i32 6, i32 4, i32 3], align 4

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @LogL16toY(i32) local_unnamed_addr #0 {
  %2 = and i32 %0, 32767
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %1
  %5 = sitofp i32 %2 to double
  %6 = fadd double %5, 5.000000e-01
  %7 = fmul double %6, 0x3F662E42FEFA39EF
  %8 = fadd double %7, 0xC0462E42FEFA39EF
  %9 = tail call double @exp(double %8) #10
  %10 = trunc i32 %0 to i16
  %11 = icmp slt i16 %10, 0
  %12 = fsub double -0.000000e+00, %9
  %13 = select i1 %11, double %12, double %9
  br label %14

14:                                               ; preds = %1, %4
  %15 = phi double [ %13, %4 ], [ 0.000000e+00, %1 ]
  ret double %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LogL16fromY(double, i32) local_unnamed_addr #3 {
  %3 = fcmp ult double %0, 0x43EFDECBDAA8C010
  br i1 %3, label %4, label %42

4:                                                ; preds = %2
  %5 = fcmp ugt double %0, 0xC3EFDECBDAA8C010
  br i1 %5, label %6, label %42

6:                                                ; preds = %4
  %7 = fcmp ogt double %0, 0x3BEFF4EACF8A88B5
  br i1 %7, label %8, label %23

8:                                                ; preds = %6
  %9 = tail call double @log(double %0) #10
  %10 = fmul double %9, 0x3FF71547652B82FE
  %11 = fadd double %10, 6.400000e+01
  %12 = fmul double %11, 2.560000e+02
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %8
  %15 = tail call i32 @rand() #10
  %16 = sitofp i32 %15 to double
  %17 = fmul double %16, 0x3E00000000200000
  %18 = fadd double %12, %17
  %19 = fadd double %18, -5.000000e-01
  br label %20

20:                                               ; preds = %8, %14
  %21 = phi double [ %19, %14 ], [ %12, %8 ]
  %22 = fptosi double %21 to i32
  br label %42

23:                                               ; preds = %6
  %24 = fcmp olt double %0, 0xBBEFF4EACF8A88B5
  br i1 %24, label %25, label %42

25:                                               ; preds = %23
  %26 = fsub double -0.000000e+00, %0
  %27 = tail call double @log(double %26) #10
  %28 = fmul double %27, 0x3FF71547652B82FE
  %29 = fadd double %28, 6.400000e+01
  %30 = fmul double %29, 2.560000e+02
  %31 = icmp eq i32 %1, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %25
  %33 = tail call i32 @rand() #10
  %34 = sitofp i32 %33 to double
  %35 = fmul double %34, 0x3E00000000200000
  %36 = fadd double %30, %35
  %37 = fadd double %36, -5.000000e-01
  br label %38

38:                                               ; preds = %25, %32
  %39 = phi double [ %37, %32 ], [ %30, %25 ]
  %40 = fptosi double %39 to i32
  %41 = or i32 %40, -32768
  br label %42

42:                                               ; preds = %23, %4, %2, %38, %20
  %43 = phi i32 [ %22, %20 ], [ %41, %38 ], [ 32767, %2 ], [ 65535, %4 ], [ 0, %23 ]
  ret i32 %43
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @XYZtoRGB24(float* nocapture readonly, i8* nocapture) local_unnamed_addr #0 {
  %3 = load float, float* %0, align 4
  %4 = fpext float %3 to double
  %5 = fmul double %4, 2.690000e+00
  %6 = getelementptr inbounds float, float* %0, i64 1
  %7 = bitcast float* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = fmul <2 x double> %9, <double 1.276000e+00, double 4.140000e-01>
  %11 = extractelement <2 x double> %10, i32 0
  %12 = fsub double %5, %11
  %13 = extractelement <2 x double> %10, i32 1
  %14 = fsub double %12, %13
  %15 = fmul double %4, 1.022000e+00
  %16 = extractelement <2 x double> %9, i32 0
  %17 = fmul double %16, 1.978000e+00
  %18 = fsub double %17, %15
  %19 = extractelement <2 x double> %9, i32 1
  %20 = fmul double %19, 4.400000e-02
  %21 = fadd double %18, %20
  %22 = fmul double %4, 6.100000e-02
  %23 = fmul double %16, 2.240000e-01
  %24 = fsub double %22, %23
  %25 = fmul double %19, 1.163000e+00
  %26 = fadd double %24, %25
  %27 = fcmp ugt double %14, 0.000000e+00
  br i1 %27, label %28, label %35

28:                                               ; preds = %2
  %29 = fcmp ult double %14, 1.000000e+00
  br i1 %29, label %30, label %35

30:                                               ; preds = %28
  %31 = tail call double @sqrt(double %14) #10
  %32 = fmul double %31, 2.560000e+02
  %33 = fptosi double %32 to i32
  %34 = trunc i32 %33 to i8
  br label %35

35:                                               ; preds = %28, %2, %30
  %36 = phi i8 [ 0, %2 ], [ %34, %30 ], [ -1, %28 ]
  store i8 %36, i8* %1, align 1
  %37 = fcmp ugt double %21, 0.000000e+00
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = fcmp ult double %21, 1.000000e+00
  br i1 %39, label %40, label %45

40:                                               ; preds = %38
  %41 = tail call double @sqrt(double %21) #10
  %42 = fmul double %41, 2.560000e+02
  %43 = fptosi double %42 to i32
  %44 = trunc i32 %43 to i8
  br label %45

45:                                               ; preds = %38, %35, %40
  %46 = phi i8 [ 0, %35 ], [ %44, %40 ], [ -1, %38 ]
  %47 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %46, i8* %47, align 1
  %48 = fcmp ugt double %26, 0.000000e+00
  br i1 %48, label %49, label %56

49:                                               ; preds = %45
  %50 = fcmp ult double %26, 1.000000e+00
  br i1 %50, label %51, label %56

51:                                               ; preds = %49
  %52 = tail call double @sqrt(double %26) #10
  %53 = fmul double %52, 2.560000e+02
  %54 = fptosi double %53 to i32
  %55 = trunc i32 %54 to i8
  br label %56

56:                                               ; preds = %49, %45, %51
  %57 = phi i8 [ 0, %45 ], [ %55, %51 ], [ -1, %49 ]
  %58 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %57, i8* %58, align 1
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @LogL10toY(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = sitofp i32 %0 to double
  %5 = fadd double %4, 5.000000e-01
  %6 = fmul double %5, 0x3F862E42FEFA39EF
  %7 = fadd double %6, 0xC020A2B23F3BAB73
  %8 = tail call double @exp(double %7) #10
  br label %9

9:                                                ; preds = %1, %3
  %10 = phi double [ %8, %3 ], [ 0.000000e+00, %1 ]
  ret double %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LogL10fromY(double, i32) local_unnamed_addr #3 {
  %3 = fcmp ult double %0, 1.574200e+01
  br i1 %3, label %4, label %21

4:                                                ; preds = %2
  %5 = fcmp ugt double %0, 2.428300e-04
  br i1 %5, label %6, label %21

6:                                                ; preds = %4
  %7 = tail call double @log(double %0) #10
  %8 = fmul double %7, 0x3FF71547652B82FE
  %9 = fadd double %8, 1.200000e+01
  %10 = fmul double %9, 6.400000e+01
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %6
  %13 = tail call i32 @rand() #10
  %14 = sitofp i32 %13 to double
  %15 = fmul double %14, 0x3E00000000200000
  %16 = fadd double %10, %15
  %17 = fadd double %16, -5.000000e-01
  br label %18

18:                                               ; preds = %6, %12
  %19 = phi double [ %17, %12 ], [ %10, %6 ]
  %20 = fptosi double %19 to i32
  br label %21

21:                                               ; preds = %4, %2, %18
  %22 = phi i32 [ %20, %18 ], [ 1023, %2 ], [ 0, %4 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @uv_encode(double, double, i32) local_unnamed_addr #3 {
  %4 = fcmp olt double %1, 0x3F9158B820000000
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call fastcc i32 @oog_encode(double %0, double %1)
  br label %54

7:                                                ; preds = %3
  %8 = fadd double %1, 0xBF9158B820000000
  %9 = fmul double %8, 0x4071DB6DAD9C14EB
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @rand() #10
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x3E00000000200000
  %15 = fadd double %9, %14
  %16 = fadd double %15, -5.000000e-01
  br label %17

17:                                               ; preds = %7, %11
  %18 = phi double [ %16, %11 ], [ %9, %7 ]
  %19 = fptosi double %18 to i32
  %20 = icmp sgt i32 %19, 162
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = tail call fastcc i32 @oog_encode(double %0, double %1)
  br label %54

23:                                               ; preds = %17
  %24 = sext i32 %19 to i64
  %25 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %24, i32 0
  %26 = load float, float* %25, align 8
  %27 = fpext float %26 to double
  %28 = fcmp ogt double %27, %0
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call fastcc i32 @oog_encode(double %0, double %1)
  br label %54

31:                                               ; preds = %23
  %32 = fsub double %0, %27
  %33 = fmul double %32, 0x4071DB6DAD9C14EB
  br i1 %10, label %40, label %34

34:                                               ; preds = %31
  %35 = tail call i32 @rand() #10
  %36 = sitofp i32 %35 to double
  %37 = fmul double %36, 0x3E00000000200000
  %38 = fadd double %33, %37
  %39 = fadd double %38, -5.000000e-01
  br label %40

40:                                               ; preds = %31, %34
  %41 = phi double [ %39, %34 ], [ %33, %31 ]
  %42 = fptosi double %41 to i32
  %43 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %24, i32 1
  %44 = load i16, i16* %43, align 4
  %45 = sext i16 %44 to i32
  %46 = icmp slt i32 %42, %45
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = tail call fastcc i32 @oog_encode(double %0, double %1)
  br label %54

49:                                               ; preds = %40
  %50 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %24, i32 2
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = add nsw i32 %52, %42
  br label %54

54:                                               ; preds = %49, %47, %29, %21, %5
  %55 = phi i32 [ %6, %5 ], [ %22, %21 ], [ %30, %29 ], [ %48, %47 ], [ %53, %49 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @oog_encode(double, double) unnamed_addr #3 {
  %3 = alloca [100 x double], align 16
  %4 = load i1, i1* @oog_encode.initialized, align 4
  br i1 %4, label %137, label %5

5:                                                ; preds = %2
  %6 = bitcast [100 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 800, i1 false)
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %29, %7 ]
  %9 = sub nuw nsw i64 99, %8
  %10 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %9
  %11 = getelementptr inbounds double, double* %10, i64 -1
  %12 = bitcast double* %11 to <2 x double>*
  store <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double>* %12, align 8
  %13 = sub nsw i64 97, %8
  %14 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %13
  %15 = getelementptr inbounds double, double* %14, i64 -1
  %16 = bitcast double* %15 to <2 x double>*
  store <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double>* %16, align 8
  %17 = sub nsw i64 95, %8
  %18 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %17
  %19 = getelementptr inbounds double, double* %18, i64 -1
  %20 = bitcast double* %19 to <2 x double>*
  store <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double>* %20, align 8
  %21 = sub nsw i64 93, %8
  %22 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %21
  %23 = getelementptr inbounds double, double* %22, i64 -1
  %24 = bitcast double* %23 to <2 x double>*
  store <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double>* %24, align 8
  %25 = sub nsw i64 91, %8
  %26 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %25
  %27 = getelementptr inbounds double, double* %26, i64 -1
  %28 = bitcast double* %27 to <2 x double>*
  store <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double>* %28, align 8
  %29 = add nuw nsw i64 %8, 10
  %30 = icmp eq i64 %29, 100
  br i1 %30, label %35, label %7, !llvm.loop !2

31:                                               ; preds = %80
  %32 = add nsw i64 %36, -1
  %33 = add nsw i32 %37, -1
  %34 = icmp eq i64 %36, 0
  br i1 %34, label %83, label %35

35:                                               ; preds = %7, %31
  %36 = phi i64 [ %32, %31 ], [ 162, %7 ]
  %37 = phi i32 [ %33, %31 ], [ 162, %7 ]
  %38 = phi i32 [ %37, %31 ], [ 163, %7 ]
  %39 = trunc i64 %36 to i32
  %40 = sitofp i32 %39 to double
  %41 = fadd double %40, 5.000000e-01
  %42 = fmul double %41, 0x3F6CAC0840000000
  %43 = fadd double %42, 0x3F9158B820000000
  %44 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %36, i32 1
  %45 = load i16, i16* %44, align 4
  %46 = sext i16 %45 to i32
  %47 = add nsw i32 %46, -1
  switch i32 %38, label %49 [
    i32 163, label %48
    i32 1, label %48
  ]

48:                                               ; preds = %35, %35
  br label %49

49:                                               ; preds = %48, %35
  %50 = phi i32 [ 1, %48 ], [ %47, %35 ]
  %51 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %36, i32 0
  %52 = load float, float* %51, align 8
  %53 = fpext float %52 to double
  %54 = fadd double %43, 0xBFDE50D794B8199E
  %55 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %36, i32 2
  br label %56

56:                                               ; preds = %49, %80
  %57 = phi i32 [ %47, %49 ], [ %81, %80 ]
  %58 = sitofp i32 %57 to double
  %59 = fadd double %58, 5.000000e-01
  %60 = fmul double %59, 0x3F6CAC0840000000
  %61 = fadd double %60, %53
  %62 = fadd double %61, 0xBFCAF286BD156C1A
  %63 = tail call double @atan2(double %54, double %62) #10
  %64 = fmul double %63, 0x402FD4BBAA79DC37
  %65 = fadd double %64, 5.000000e+01
  %66 = fptosi double %65 to i32
  %67 = sitofp i32 %66 to double
  %68 = fadd double %67, 5.000000e-01
  %69 = fsub double %65, %68
  %70 = tail call double @llvm.fabs.f64(double %69)
  %71 = sext i32 %66 to i64
  %72 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %71
  %73 = load double, double* %72, align 8
  %74 = fcmp olt double %70, %73
  br i1 %74, label %75, label %80

75:                                               ; preds = %56
  %76 = load i16, i16* %55, align 2
  %77 = sext i16 %76 to i32
  %78 = add nsw i32 %57, %77
  %79 = getelementptr inbounds [100 x i32], [100 x i32]* @oog_encode.oog_table, i64 0, i64 %71
  store i32 %78, i32* %79, align 4
  store double %70, double* %72, align 8
  br label %80

80:                                               ; preds = %56, %75
  %81 = sub nsw i32 %57, %50
  %82 = icmp sgt i32 %81, -1
  br i1 %82, label %56, label %31

83:                                               ; preds = %31, %132
  %84 = phi i64 [ %133, %132 ], [ 99, %31 ]
  %85 = phi i32 [ %134, %132 ], [ 99, %31 ]
  %86 = phi i32 [ %85, %132 ], [ 100, %31 ]
  %87 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %84
  %88 = load double, double* %87, align 8
  %89 = fcmp ogt double %88, 1.500000e+00
  br i1 %89, label %90, label %132

90:                                               ; preds = %83
  %91 = trunc i64 %84 to i32
  br label %92

92:                                               ; preds = %154, %90
  %93 = phi i32 [ 1, %90 ], [ %155, %154 ]
  %94 = add nuw nsw i32 %93, %91
  %95 = urem i32 %94, 100
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %96
  %98 = load double, double* %97, align 8
  %99 = fcmp olt double %98, 1.500000e+00
  br i1 %99, label %103, label %100

100:                                              ; preds = %92
  %101 = add nuw nsw i32 %93, 1
  %102 = icmp eq i32 %101, 50
  br i1 %102, label %103, label %147

103:                                              ; preds = %147, %100, %92
  %104 = phi i32 [ %93, %92 ], [ 50, %100 ], [ %101, %147 ]
  %105 = trunc i64 %84 to i32
  %106 = add nuw nsw i32 %86, 99
  br label %107

107:                                              ; preds = %163, %103
  %108 = phi i32 [ -1, %103 ], [ %165, %163 ]
  %109 = phi i32 [ 1, %103 ], [ %164, %163 ]
  %110 = add nsw i32 %106, %108
  %111 = urem i32 %110, 100
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %112
  %114 = load double, double* %113, align 8
  %115 = fcmp olt double %114, 1.500000e+00
  br i1 %115, label %120, label %116

116:                                              ; preds = %107
  %117 = add nuw nsw i32 %109, 1
  %118 = xor i32 %109, -1
  %119 = icmp eq i32 %117, 50
  br i1 %119, label %120, label %156

120:                                              ; preds = %156, %116, %107
  %121 = phi i32 [ %109, %107 ], [ 50, %116 ], [ %117, %156 ]
  %122 = phi i32 [ %108, %107 ], [ -50, %116 ], [ %118, %156 ]
  %123 = icmp ult i32 %104, %121
  %124 = add nsw i32 %104, %105
  %125 = add i32 %106, %122
  %126 = select i1 %123, i32 %124, i32 %125
  %127 = srem i32 %126, 100
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [100 x i32], [100 x i32]* @oog_encode.oog_table, i64 0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds [100 x i32], [100 x i32]* @oog_encode.oog_table, i64 0, i64 %84
  store i32 %130, i32* %131, align 4
  br label %132

132:                                              ; preds = %120, %83
  %133 = add nsw i64 %84, -1
  %134 = add nsw i32 %85, -1
  %135 = icmp eq i64 %84, 0
  br i1 %135, label %136, label %83

136:                                              ; preds = %132
  store i1 true, i1* @oog_encode.initialized, align 4
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %6) #10
  br label %137

137:                                              ; preds = %136, %2
  %138 = fadd double %1, 0xBFDE50D794B8199E
  %139 = fadd double %0, 0xBFCAF286BD156C1A
  %140 = tail call double @atan2(double %138, double %139) #10
  %141 = fmul double %140, 0x402FD4BBAA79DC37
  %142 = fadd double %141, 5.000000e+01
  %143 = fptosi double %142 to i32
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [100 x i32], [100 x i32]* @oog_encode.oog_table, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  ret i32 %146

147:                                              ; preds = %100
  %148 = add nuw nsw i32 %101, %91
  %149 = urem i32 %148, 100
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %150
  %152 = load double, double* %151, align 8
  %153 = fcmp olt double %152, 1.500000e+00
  br i1 %153, label %103, label %154

154:                                              ; preds = %147
  %155 = add nuw nsw i32 %93, 2
  br label %92

156:                                              ; preds = %116
  %157 = add nsw i32 %106, %118
  %158 = urem i32 %157, 100
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %159
  %161 = load double, double* %160, align 8
  %162 = fcmp olt double %161, 1.500000e+00
  br i1 %162, label %120, label %163

163:                                              ; preds = %156
  %164 = add nuw nsw i32 %109, 2
  %165 = sub nuw i32 -2, %109
  br label %107
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @uv_decode(double* nocapture, double* nocapture, i32) local_unnamed_addr #4 {
  %4 = icmp ugt i32 %2, 16288
  br i1 %4, label %44, label %5

5:                                                ; preds = %3, %18
  %6 = phi i32 [ %20, %18 ], [ 0, %3 ]
  %7 = phi i32 [ %19, %18 ], [ 163, %3 ]
  %8 = add nsw i32 %6, %7
  %9 = ashr i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %10, i32 2
  %12 = load i16, i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = sub nsw i32 %2, %13
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %5
  %17 = icmp slt i32 %14, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %16, %5
  %19 = phi i32 [ %7, %5 ], [ %9, %16 ]
  %20 = phi i32 [ %9, %5 ], [ %6, %16 ]
  %21 = sub nsw i32 %19, %20
  %22 = icmp sgt i32 %21, 1
  br i1 %22, label %5, label %23

23:                                               ; preds = %18
  %24 = sext i32 %20 to i64
  %25 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %24, i32 2
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = sub nsw i32 %2, %27
  %29 = sitofp i32 %28 to double
  %30 = fadd double %29, 5.000000e-01
  %31 = fmul double %30, 0x3F6CAC0840000000
  br label %32

32:                                               ; preds = %16, %23
  %33 = phi double [ %31, %23 ], [ 0x3F5CAC0840000000, %16 ]
  %34 = phi i64 [ %24, %23 ], [ %10, %16 ]
  %35 = phi i32 [ %20, %23 ], [ %9, %16 ]
  %36 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %34, i32 0
  %37 = load float, float* %36, align 8
  %38 = fpext float %37 to double
  %39 = fadd double %33, %38
  store double %39, double* %0, align 8
  %40 = sitofp i32 %35 to double
  %41 = fadd double %40, 5.000000e-01
  %42 = fmul double %41, 0x3F6CAC0840000000
  %43 = fadd double %42, 0x3F9158B820000000
  store double %43, double* %1, align 8
  br label %44

44:                                               ; preds = %3, %32
  %45 = phi i32 [ 0, %32 ], [ -1, %3 ]
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @LogLuv24toXYZ(i32, float* nocapture) local_unnamed_addr #3 {
  %3 = lshr i32 %0, 14
  %4 = and i32 %3, 1023
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = sitofp i32 %4 to double
  %8 = fadd double %7, 5.000000e-01
  %9 = fmul double %8, 0x3F862E42FEFA39EF
  %10 = fadd double %9, 0xC020A2B23F3BAB73
  %11 = tail call double @exp(double %10) #10
  %12 = fcmp ugt double %11, 0.000000e+00
  br i1 %12, label %16, label %13

13:                                               ; preds = %2, %6
  %14 = getelementptr inbounds float, float* %1, i64 2
  store float 0.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds float, float* %1, i64 1
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %1, align 4
  br label %81

16:                                               ; preds = %6
  %17 = and i32 %0, 16383
  %18 = icmp ugt i32 %17, 16288
  br i1 %18, label %58, label %19

19:                                               ; preds = %16, %32
  %20 = phi i32 [ %34, %32 ], [ 0, %16 ]
  %21 = phi i32 [ %33, %32 ], [ 163, %16 ]
  %22 = add nsw i32 %21, %20
  %23 = ashr i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %24, i32 2
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = sub nsw i32 %17, %27
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %19
  %31 = icmp slt i32 %28, 0
  br i1 %31, label %32, label %46

32:                                               ; preds = %30, %19
  %33 = phi i32 [ %21, %19 ], [ %23, %30 ]
  %34 = phi i32 [ %23, %19 ], [ %20, %30 ]
  %35 = sub nsw i32 %33, %34
  %36 = icmp sgt i32 %35, 1
  br i1 %36, label %19, label %37

37:                                               ; preds = %32
  %38 = sext i32 %34 to i64
  %39 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %38, i32 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = sub nsw i32 %17, %41
  %43 = sitofp i32 %42 to double
  %44 = fadd double %43, 5.000000e-01
  %45 = fmul double %44, 0x3F6CAC0840000000
  br label %46

46:                                               ; preds = %30, %37
  %47 = phi double [ %45, %37 ], [ 0x3F5CAC0840000000, %30 ]
  %48 = phi i64 [ %38, %37 ], [ %24, %30 ]
  %49 = phi i32 [ %34, %37 ], [ %23, %30 ]
  %50 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %48, i32 0
  %51 = load float, float* %50, align 8
  %52 = fpext float %51 to double
  %53 = fadd double %47, %52
  %54 = sitofp i32 %49 to double
  %55 = fadd double %54, 5.000000e-01
  %56 = fmul double %55, 0x3F6CAC0840000000
  %57 = fadd double %56, 0x3F9158B820000000
  br label %58

58:                                               ; preds = %16, %46
  %59 = phi double [ %53, %46 ], [ 0x3FCAF286BD156C1A, %16 ]
  %60 = phi double [ %57, %46 ], [ 0x3FDE50D794B8199E, %16 ]
  %61 = fmul double %59, 6.000000e+00
  %62 = fmul double %60, 1.600000e+01
  %63 = fsub double %61, %62
  %64 = fadd double %63, 1.200000e+01
  %65 = fdiv double 1.000000e+00, %64
  %66 = fmul double %59, 9.000000e+00
  %67 = fmul double %66, %65
  %68 = fmul double %60, 4.000000e+00
  %69 = fmul double %68, %65
  %70 = fdiv double %67, %69
  %71 = fmul double %11, %70
  %72 = fptrunc double %71 to float
  store float %72, float* %1, align 4
  %73 = fptrunc double %11 to float
  %74 = getelementptr inbounds float, float* %1, i64 1
  store float %73, float* %74, align 4
  %75 = fsub double 1.000000e+00, %67
  %76 = fsub double %75, %69
  %77 = fdiv double %76, %69
  %78 = fmul double %11, %77
  %79 = fptrunc double %78 to float
  %80 = getelementptr inbounds float, float* %1, i64 2
  store float %79, float* %80, align 4
  br label %81

81:                                               ; preds = %58, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LogLuv24fromXYZ(float* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds float, float* %0, i64 1
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = fcmp ult double %5, 1.574200e+01
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = fcmp ugt double %5, 2.428300e-04
  br i1 %8, label %9, label %26

9:                                                ; preds = %7
  %10 = tail call double @log(double %5) #10
  %11 = fmul double %10, 0x3FF71547652B82FE
  %12 = fadd double %11, 1.200000e+01
  %13 = fmul double %12, 6.400000e+01
  %14 = icmp eq i32 %1, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = tail call i32 @rand() #10
  %17 = sitofp i32 %16 to double
  %18 = fmul double %17, 0x3E00000000200000
  %19 = fadd double %13, %18
  %20 = fadd double %19, -5.000000e-01
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi double [ %20, %15 ], [ %13, %9 ]
  %23 = fptosi double %22 to i32
  %24 = load float, float* %3, align 4
  %25 = fpext float %24 to double
  br label %26

26:                                               ; preds = %2, %7, %21
  %27 = phi double [ %5, %2 ], [ %5, %7 ], [ %25, %21 ]
  %28 = phi i32 [ 1023, %2 ], [ 0, %7 ], [ %23, %21 ]
  %29 = load float, float* %0, align 4
  %30 = fpext float %29 to double
  %31 = fmul double %27, 1.500000e+01
  %32 = fadd double %31, %30
  %33 = getelementptr inbounds float, float* %0, i64 2
  %34 = load float, float* %33, align 4
  %35 = fpext float %34 to double
  %36 = fmul double %35, 3.000000e+00
  %37 = fadd double %32, %36
  %38 = icmp eq i32 %28, 0
  %39 = fcmp ole double %37, 0.000000e+00
  %40 = or i1 %38, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %26
  %42 = insertelement <2 x double> undef, double %30, i32 0
  %43 = insertelement <2 x double> %42, double %27, i32 1
  %44 = fmul <2 x double> %43, <double 4.000000e+00, double 9.000000e+00>
  %45 = insertelement <2 x double> undef, double %37, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fdiv <2 x double> %44, %46
  br label %48

48:                                               ; preds = %26, %41
  %49 = phi <2 x double> [ %47, %41 ], [ <double 0x3FCAF286BD156C1A, double 0x3FDE50D794B8199E>, %26 ]
  %50 = extractelement <2 x double> %49, i32 0
  %51 = extractelement <2 x double> %49, i32 1
  %52 = tail call i32 @uv_encode(double %50, double %51, i32 %1)
  %53 = icmp slt i32 %52, 0
  %54 = select i1 %53, i32 12266, i32 %52
  %55 = shl i32 %28, 14
  %56 = or i32 %54, %55
  ret i32 %56
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @LogLuv32toXYZ(i32, float* nocapture) local_unnamed_addr #0 {
  %3 = ashr i32 %0, 16
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = sitofp i32 %4 to double
  %8 = fadd double %7, 5.000000e-01
  %9 = fmul double %8, 0x3F662E42FEFA39EF
  %10 = fadd double %9, 0xC0462E42FEFA39EF
  %11 = tail call double @exp(double %10) #10
  %12 = trunc i32 %3 to i16
  %13 = icmp slt i16 %12, 0
  %14 = fsub double -0.000000e+00, %11
  %15 = select i1 %13, double %14, double %11
  %16 = fcmp ugt double %15, 0.000000e+00
  br i1 %16, label %20, label %17

17:                                               ; preds = %2, %6
  %18 = getelementptr inbounds float, float* %1, i64 2
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds float, float* %1, i64 1
  store float 0.000000e+00, float* %19, align 4
  store float 0.000000e+00, float* %1, align 4
  br label %50

20:                                               ; preds = %6
  %21 = lshr i32 %0, 8
  %22 = and i32 %21, 255
  %23 = uitofp i32 %22 to double
  %24 = fadd double %23, 5.000000e-01
  %25 = fmul double %24, 0x3F63FB013FB013FB
  %26 = and i32 %0, 255
  %27 = uitofp i32 %26 to double
  %28 = fadd double %27, 5.000000e-01
  %29 = fmul double %28, 0x3F63FB013FB013FB
  %30 = fmul double %25, 6.000000e+00
  %31 = fmul double %29, 1.600000e+01
  %32 = fsub double %30, %31
  %33 = fadd double %32, 1.200000e+01
  %34 = fdiv double 1.000000e+00, %33
  %35 = fmul double %25, 9.000000e+00
  %36 = fmul double %35, %34
  %37 = fmul double %29, 4.000000e+00
  %38 = fmul double %37, %34
  %39 = fdiv double %36, %38
  %40 = fmul double %39, %15
  %41 = fptrunc double %40 to float
  store float %41, float* %1, align 4
  %42 = fptrunc double %15 to float
  %43 = getelementptr inbounds float, float* %1, i64 1
  store float %42, float* %43, align 4
  %44 = fsub double 1.000000e+00, %36
  %45 = fsub double %44, %38
  %46 = fdiv double %45, %38
  %47 = fmul double %46, %15
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds float, float* %1, i64 2
  store float %48, float* %49, align 4
  br label %50

50:                                               ; preds = %20, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @LogLuv32fromXYZ(float* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds float, float* %0, i64 1
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = tail call i32 @LogL16fromY(double %5, i32 %1)
  %7 = bitcast float* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = extractelement <2 x double> %9, i32 1
  %11 = fmul double %10, 1.500000e+01
  %12 = extractelement <2 x double> %9, i32 0
  %13 = fadd double %11, %12
  %14 = getelementptr inbounds float, float* %0, i64 2
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = fmul double %16, 3.000000e+00
  %18 = fadd double %13, %17
  %19 = icmp eq i32 %6, 0
  %20 = fcmp ole double %18, 0.000000e+00
  %21 = or i1 %19, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %2
  %23 = fmul <2 x double> %9, <double 4.000000e+00, double 9.000000e+00>
  %24 = insertelement <2 x double> undef, double %18, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fdiv <2 x double> %23, %25
  %27 = extractelement <2 x double> %26, i32 0
  %28 = fcmp ugt double %27, 0.000000e+00
  %29 = extractelement <2 x double> %26, i32 1
  br i1 %28, label %30, label %48

30:                                               ; preds = %2, %22
  %31 = phi <2 x double> [ %26, %22 ], [ <double 0x3FCAF286BD156C1A, double 0x3FDE50D794B8199E>, %2 ]
  %32 = extractelement <2 x double> %31, i32 0
  %33 = fmul double %32, 4.100000e+02
  %34 = icmp eq i32 %1, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %30
  %36 = tail call i32 @rand() #10
  %37 = sitofp i32 %36 to double
  %38 = fmul double %37, 0x3E00000000200000
  %39 = fadd double %33, %38
  %40 = fadd double %39, -5.000000e-01
  br label %41

41:                                               ; preds = %35, %30
  %42 = phi double [ %40, %35 ], [ %33, %30 ]
  %43 = fptosi double %42 to i32
  %44 = icmp ult i32 %43, 255
  %45 = select i1 %44, i32 %43, i32 255
  %46 = shl nuw nsw i32 %45, 8
  %47 = extractelement <2 x double> %31, i32 1
  br label %48

48:                                               ; preds = %41, %22
  %49 = phi double [ %29, %22 ], [ %47, %41 ]
  %50 = phi i32 [ 0, %22 ], [ %46, %41 ]
  %51 = fcmp ugt double %49, 0.000000e+00
  br i1 %51, label %52, label %66

52:                                               ; preds = %48
  %53 = fmul double %49, 4.100000e+02
  %54 = icmp eq i32 %1, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %52
  %56 = tail call i32 @rand() #10
  %57 = sitofp i32 %56 to double
  %58 = fmul double %57, 0x3E00000000200000
  %59 = fadd double %53, %58
  %60 = fadd double %59, -5.000000e-01
  br label %61

61:                                               ; preds = %55, %52
  %62 = phi double [ %60, %55 ], [ %53, %52 ]
  %63 = fptosi double %62 to i32
  %64 = icmp ult i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  br label %66

66:                                               ; preds = %61, %48
  %67 = phi i32 [ 0, %48 ], [ %65, %61 ]
  %68 = shl i32 %6, 16
  %69 = or i32 %50, %68
  %70 = or i32 %69, %67
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @TIFFInitSGILog(%struct.tiff*, i32) local_unnamed_addr #3 {
  %3 = tail call i32 @_TIFFMergeFields(%struct.tiff* %0, %struct._TIFFField* getelementptr inbounds ([2 x %struct._TIFFField], [2 x %struct._TIFFField]* @LogLuvFields, i64 0, i64 0), i32 2) #10
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %7 = load i8*, i8** %6, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @TIFFInitSGILog.module, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #10
  br label %45

8:                                                ; preds = %2
  %9 = tail call i8* @_TIFFmalloc(i64 56) #10
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  store i8* %9, i8** %10, align 8
  %11 = icmp eq i8* %9, null
  br i1 %11, label %40, label %12

12:                                               ; preds = %8
  tail call void @_TIFFmemset(i8* nonnull %9, i32 0, i64 56) #10
  %13 = getelementptr inbounds i8, i8* %9, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 -1, i32* %14, align 4
  %15 = icmp eq i32 %1, 34677
  %16 = zext i1 %15 to i32
  %17 = getelementptr inbounds i8, i8* %9, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %9, i64 32
  %20 = bitcast i8* %19 to void (%struct.logLuvState*, i8*, i64)**
  store void (%struct.logLuvState*, i8*, i64)* @_logLuvNop, void (%struct.logLuvState*, i8*, i64)** %20, align 8
  %21 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 24
  %22 = bitcast i32 (%struct.tiff*)** %21 to <2 x i32 (%struct.tiff*)*>*
  store <2 x i32 (%struct.tiff*)*> <i32 (%struct.tiff*)* @LogLuvFixupTags, i32 (%struct.tiff*)* @LogLuvSetupDecode>, <2 x i32 (%struct.tiff*)*>* %22, align 8
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  store i32 (%struct.tiff*)* @LogLuvSetupEncode, i32 (%struct.tiff*)** %25, align 8
  %26 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %23 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvDecodeStrip, i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvEncodeStrip>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %26, align 8
  %27 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %24 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvDecodeTile, i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvEncodeTile>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %27, align 8
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 37
  store void (%struct.tiff*)* @LogLuvClose, void (%struct.tiff*)** %28, align 8
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 39
  store void (%struct.tiff*)* @LogLuvCleanup, void (%struct.tiff*)** %29, align 8
  %30 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %31 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %9, i64 40
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @LogLuvVGetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %30, align 8
  %35 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 0
  %36 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds i8, i8* %9, i64 48
  %39 = bitcast i8* %38 to i64*
  store i64 %37, i64* %39, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @LogLuvVSetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %35, align 8
  br label %45

40:                                               ; preds = %8
  %41 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @TIFFInitSGILog.module, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i8* %44) #10
  br label %45

45:                                               ; preds = %40, %12, %5
  %46 = phi i32 [ 0, %40 ], [ 1, %12 ], [ 0, %5 ]
  ret i32 %46
}

declare i32 @_TIFFMergeFields(%struct.tiff*, %struct._TIFFField*, i32) local_unnamed_addr #5

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #5

declare i8* @_TIFFmalloc(i64) local_unnamed_addr #5

declare void @_TIFFmemset(i8*, i32, i64) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_logLuvNop(%struct.logLuvState* nocapture, i8* nocapture, i64) #6 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @LogLuvFixupTags(%struct.tiff* nocapture readnone) #6 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvSetupDecode(%struct.tiff* nocapture) #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.logLuvState**
  %4 = load %struct.logLuvState*, %struct.logLuvState** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %5, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %7 = load i16, i16* %6, align 2
  switch i16 %7, label %45 [
    i16 -32691, label %8
    i16 -32692, label %34
  ]

8:                                                ; preds = %1
  %9 = tail call fastcc i32 @LogLuvInitState(%struct.tiff* %0)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %49, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 10
  %13 = load i16, i16* %12, align 8
  %14 = icmp eq i16 %13, -30859
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  br i1 %14, label %16, label %25

16:                                               ; preds = %11
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvDecode24, i32 (%struct.tiff*, i8*, i64, i16)** %15, align 8
  %17 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  switch i32 %18, label %49 [
    i32 0, label %19
    i32 1, label %21
    i32 3, label %23
  ]

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv24toXYZ, void (%struct.logLuvState*, i8*, i64)** %20, align 8
  br label %49

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv24toLuv48, void (%struct.logLuvState*, i8*, i64)** %22, align 8
  br label %49

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv24toRGB, void (%struct.logLuvState*, i8*, i64)** %24, align 8
  br label %49

25:                                               ; preds = %11
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvDecode32, i32 (%struct.tiff*, i8*, i64, i16)** %15, align 8
  %26 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  switch i32 %27, label %49 [
    i32 0, label %28
    i32 1, label %30
    i32 3, label %32
  ]

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv32toXYZ, void (%struct.logLuvState*, i8*, i64)** %29, align 8
  br label %49

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv32toLuv48, void (%struct.logLuvState*, i8*, i64)** %31, align 8
  br label %49

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv32toRGB, void (%struct.logLuvState*, i8*, i64)** %33, align 8
  br label %49

34:                                               ; preds = %1
  %35 = tail call fastcc i32 @LogL16InitState(%struct.tiff* %0)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %49, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogL16Decode, i32 (%struct.tiff*, i8*, i64, i16)** %38, align 8
  %39 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  switch i32 %40, label %49 [
    i32 0, label %41
    i32 3, label %43
  ]

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @L16toY, void (%struct.logLuvState*, i8*, i64)** %42, align 8
  br label %49

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @L16toGry, void (%struct.logLuvState*, i8*, i64)** %44, align 8
  br label %49

45:                                               ; preds = %1
  %46 = zext i16 %7 to i32
  %47 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %48 = load i8*, i8** %47, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %48, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @LogLuvSetupDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.4, i64 0, i64 0), i32 %46, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0)) #10
  br label %49

49:                                               ; preds = %45, %34, %8, %41, %43, %37, %16, %23, %21, %19, %25, %32, %30, %28
  %50 = phi i32 [ 1, %28 ], [ 1, %30 ], [ 1, %32 ], [ 1, %25 ], [ 1, %19 ], [ 1, %21 ], [ 1, %23 ], [ 1, %16 ], [ 1, %37 ], [ 1, %43 ], [ 1, %41 ], [ 0, %8 ], [ 0, %34 ], [ 0, %45 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvDecodeStrip(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #10
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %7, %16
  %11 = phi i64 [ %18, %16 ], [ %2, %7 ]
  %12 = phi i8* [ %17, %16 ], [ %1, %7 ]
  %13 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %14 = tail call i32 %13(%struct.tiff* %0, i8* %12, i64 %5, i16 zeroext %3) #10
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, i8* %12, i64 %5
  %18 = sub nsw i64 %11, %5
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %10

20:                                               ; preds = %10, %16, %7, %4
  %21 = phi i32 [ 0, %4 ], [ 1, %7 ], [ 0, %10 ], [ 1, %16 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvDecodeTile(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #10
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %7, %16
  %11 = phi i64 [ %18, %16 ], [ %2, %7 ]
  %12 = phi i8* [ %17, %16 ], [ %1, %7 ]
  %13 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %14 = tail call i32 %13(%struct.tiff* %0, i8* %12, i64 %5, i16 zeroext %3) #10
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, i8* %12, i64 %5
  %18 = sub nsw i64 %11, %5
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %10

20:                                               ; preds = %10, %16, %7, %4
  %21 = phi i32 [ 0, %4 ], [ 1, %7 ], [ 0, %10 ], [ 1, %16 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvSetupEncode(%struct.tiff* nocapture) #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.logLuvState**
  %4 = load %struct.logLuvState*, %struct.logLuvState** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %6 = load i16, i16* %5, align 2
  switch i16 %6, label %38 [
    i16 -32691, label %7
    i16 -32692, label %29
  ]

7:                                                ; preds = %1
  %8 = tail call fastcc i32 @LogLuvInitState(%struct.tiff* %0)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %50, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 10
  %12 = load i16, i16* %11, align 8
  %13 = icmp eq i16 %12, -30859
  %14 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  br i1 %13, label %15, label %22

15:                                               ; preds = %10
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvEncode24, i32 (%struct.tiff*, i8*, i64, i16)** %14, align 8
  %16 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %44 [
    i32 0, label %18
    i32 1, label %20
    i32 2, label %42
  ]

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv24fromXYZ, void (%struct.logLuvState*, i8*, i64)** %19, align 8
  br label %42

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv24fromLuv48, void (%struct.logLuvState*, i8*, i64)** %21, align 8
  br label %42

22:                                               ; preds = %10
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogLuvEncode32, i32 (%struct.tiff*, i8*, i64, i16)** %14, align 8
  %23 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  switch i32 %24, label %44 [
    i32 0, label %25
    i32 1, label %27
    i32 2, label %42
  ]

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv32fromXYZ, void (%struct.logLuvState*, i8*, i64)** %26, align 8
  br label %42

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @Luv32fromLuv48, void (%struct.logLuvState*, i8*, i64)** %28, align 8
  br label %42

29:                                               ; preds = %1
  %30 = tail call fastcc i32 @LogL16InitState(%struct.tiff* %0)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %50, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  store i32 (%struct.tiff*, i8*, i64, i16)* @LogL16Encode, i32 (%struct.tiff*, i8*, i64, i16)** %33, align 8
  %34 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  switch i32 %35, label %44 [
    i32 0, label %36
    i32 1, label %42
  ]

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 6
  store void (%struct.logLuvState*, i8*, i64)* @L16fromY, void (%struct.logLuvState*, i8*, i64)** %37, align 8
  br label %42

38:                                               ; preds = %1
  %39 = zext i16 %6 to i32
  %40 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %41 = load i8*, i8** %40, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %41, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @LogLuvSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.4, i64 0, i64 0), i32 %39, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0)) #10
  br label %50

42:                                               ; preds = %36, %32, %15, %20, %18, %22, %27, %25
  %43 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 0
  store i32 1, i32* %43, align 8
  br label %50

44:                                               ; preds = %32, %22, %15
  %45 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %46 = load i8*, i8** %45, align 8
  %47 = load i16, i16* %5, align 2
  %48 = icmp eq i16 %47, -32692
  %49 = select i1 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0)
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %46, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @LogLuvSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.14, i64 0, i64 0), i8* %49) #10
  br label %50

50:                                               ; preds = %29, %7, %44, %42, %38
  %51 = phi i32 [ 0, %38 ], [ 0, %44 ], [ 1, %42 ], [ 0, %7 ], [ 0, %29 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvEncodeStrip(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #10
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %7, %16
  %11 = phi i64 [ %18, %16 ], [ %2, %7 ]
  %12 = phi i8* [ %17, %16 ], [ %1, %7 ]
  %13 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %14 = tail call i32 %13(%struct.tiff* %0, i8* %12, i64 %5, i16 zeroext %3) #10
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, i8* %12, i64 %5
  %18 = sub nsw i64 %11, %5
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %10

20:                                               ; preds = %16, %10, %7, %4
  %21 = phi i32 [ 0, %4 ], [ 1, %7 ], [ 1, %16 ], [ 0, %10 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvEncodeTile(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #10
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %7, %16
  %11 = phi i64 [ %18, %16 ], [ %2, %7 ]
  %12 = phi i8* [ %17, %16 ], [ %1, %7 ]
  %13 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %14 = tail call i32 %13(%struct.tiff* %0, i8* %12, i64 %5, i16 zeroext %3) #10
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, i8* %12, i64 %5
  %18 = sub nsw i64 %11, %5
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %10

20:                                               ; preds = %16, %10, %7, %4
  %21 = phi i32 [ 0, %4 ], [ 1, %7 ], [ 1, %16 ], [ 0, %10 ]
  ret i32 %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @LogLuvClose(%struct.tiff* nocapture) #7 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.logLuvState**
  %4 = load %struct.logLuvState*, %struct.logLuvState** %3, align 8
  %5 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 11
  %10 = load i16, i16* %9, align 2
  %11 = icmp eq i16 %10, -32692
  %12 = select i1 %11, i16 1, i16 3
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  store i16 %12, i16* %13, align 2
  %14 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  store i16 16, i16* %14, align 4
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 9
  store i16 2, i16* %15, align 2
  br label %16

16:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @LogLuvCleanup(%struct.tiff*) #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 40
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %9 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %8 to i64*
  store i64 %6, i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 48
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.TIFFTagMethods* %7 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 16
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  tail call void @_TIFFfree(i8* nonnull %16) #10
  br label %19

19:                                               ; preds = %1, %18
  tail call void @_TIFFfree(i8* %3) #10
  store i8* null, i8** %2, align 8
  tail call void @_TIFFSetDefaultCompressionState(%struct.tiff* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvVGetField(%struct.tiff*, i32, %struct.__va_list_tag*) #3 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.logLuvState**
  %6 = load %struct.logLuvState*, %struct.logLuvState** %5, align 8
  %7 = icmp eq i32 %1, 65560
  br i1 %7, label %8, label %28

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, 41
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr i8, i8* %16, i64 %17
  %19 = add nuw nsw i32 %12, 8
  store i32 %19, i32* %11, align 8
  br label %24

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr i8, i8* %22, i64 8
  store i8* %23, i8** %21, align 8
  br label %24

24:                                               ; preds = %20, %14
  %25 = phi i8* [ %18, %14 ], [ %22, %20 ]
  %26 = bitcast i8* %25 to i32**
  %27 = load i32*, i32** %26, align 8
  store i32 %10, i32* %27, align 4
  br label %32

28:                                               ; preds = %3
  %29 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %6, i64 0, i32 7
  %30 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %29, align 8
  %31 = tail call i32 %30(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #10
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i32 [ 1, %24 ], [ %31, %28 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvVSetField(%struct.tiff*, i32, %struct.__va_list_tag*) #3 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.logLuvState**
  %6 = load %struct.logLuvState*, %struct.logLuvState** %5, align 8
  switch i32 %1, label %74 [
    i32 65560, label %7
    i32 65561, label %51
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 41
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = add nuw nsw i32 %9, 8
  store i32 %16, i32* %8, align 8
  br label %21

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8, i8* %19, i64 8
  store i8* %20, i8** %18, align 8
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i8* [ %15, %11 ], [ %19, %17 ]
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %6, i64 0, i32 1
  store i32 %24, i32* %25, align 4
  switch i32 %24, label %30 [
    i32 0, label %35
    i32 1, label %26
    i32 2, label %27
    i32 3, label %29
  ]

26:                                               ; preds = %21
  br label %35

27:                                               ; preds = %21
  %28 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 277, i32 1) #10
  br label %35

29:                                               ; preds = %21
  br label %35

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %32, i8* %34, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.17, i64 0, i64 0), i32 %24) #10
  br label %78

35:                                               ; preds = %21, %29, %27, %26
  %36 = phi i32 [ 8, %29 ], [ 32, %27 ], [ 16, %26 ], [ 32, %21 ]
  %37 = phi i32 [ 1, %29 ], [ 1, %27 ], [ 2, %26 ], [ 3, %21 ]
  %38 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 258, i32 %36) #10
  %39 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 339, i32 %37) #10
  %40 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 1024
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %35
  %45 = tail call i64 @TIFFTileSize(%struct.tiff* %0) #10
  br label %46

46:                                               ; preds = %35, %44
  %47 = phi i64 [ %45, %44 ], [ -1, %35 ]
  %48 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 22
  store i64 %47, i64* %48, align 8
  %49 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #10
  %50 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  store i64 %49, i64* %50, align 8
  br label %78

51:                                               ; preds = %3
  %52 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = icmp ult i32 %53, 41
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %57 = load i8*, i8** %56, align 8
  %58 = sext i32 %53 to i64
  %59 = getelementptr i8, i8* %57, i64 %58
  %60 = add nuw nsw i32 %53, 8
  store i32 %60, i32* %52, align 8
  br label %65

61:                                               ; preds = %51
  %62 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr i8, i8* %63, i64 8
  store i8* %64, i8** %62, align 8
  br label %65

65:                                               ; preds = %61, %55
  %66 = phi i8* [ %59, %55 ], [ %63, %61 ]
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %6, i64 0, i32 2
  store i32 %68, i32* %69, align 8
  %70 = icmp ult i32 %68, 2
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %73 = load i8*, i8** %72, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %73, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @LogLuvVSetField.module, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.18, i64 0, i64 0), i32 %68) #10
  br label %78

74:                                               ; preds = %3
  %75 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %6, i64 0, i32 8
  %76 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %75, align 8
  %77 = tail call i32 %76(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #10
  br label %78

78:                                               ; preds = %65, %74, %71, %46, %30
  %79 = phi i32 [ %77, %74 ], [ 0, %71 ], [ 0, %30 ], [ 1, %46 ], [ 1, %65 ]
  ret i32 %79
}

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

declare void @_TIFFNoPostDecode(%struct.tiff*, i8*, i64) #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @LogLuvInitState(%struct.tiff* nocapture readonly) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.logLuvState**
  %4 = load %struct.logLuvState*, %struct.logLuvState** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %6 = load i16, i16* %5, align 2
  %7 = icmp eq i16 %6, 1
  br i1 %7, label %8, label %78

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %37

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %14 = load i16, i16* %13, align 4
  %15 = zext i16 %14 to i32
  %16 = shl nuw nsw i32 %15, 3
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 9
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = or i32 %16, %19
  switch i32 %20, label %24 [
    i32 259, label %25
    i32 260, label %21
    i32 257, label %21
    i32 258, label %21
    i32 132, label %22
    i32 130, label %22
    i32 129, label %22
    i32 68, label %23
    i32 65, label %23
  ]

21:                                               ; preds = %12, %12, %12
  br label %25

22:                                               ; preds = %12, %12, %12
  br label %25

23:                                               ; preds = %12, %12
  br label %25

24:                                               ; preds = %12
  br label %25

25:                                               ; preds = %24, %23, %22, %21, %12
  %26 = phi i32 [ -1, %24 ], [ 3, %23 ], [ 1, %22 ], [ 2, %21 ], [ 0, %12 ]
  %27 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %28 = load i16, i16* %27, align 2
  switch i16 %28, label %35 [
    i16 1, label %29
    i16 3, label %32
  ]

29:                                               ; preds = %25
  %30 = icmp eq i32 %26, 2
  %31 = select i1 %30, i32 2, i32 -1
  br label %35

32:                                               ; preds = %25
  %33 = icmp eq i32 %26, 2
  %34 = select i1 %33, i32 -1, i32 %26
  br label %35

35:                                               ; preds = %25, %29, %32
  %36 = phi i32 [ %34, %32 ], [ %31, %29 ], [ -1, %25 ]
  store i32 %36, i32* %9, align 4
  br label %37

37:                                               ; preds = %35, %8
  %38 = phi i32 [ %36, %35 ], [ %10, %8 ]
  %39 = icmp ult i32 %38, 4
  br i1 %39, label %40, label %78

40:                                               ; preds = %37
  %41 = sext i32 %38 to i64
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.LogLuvInitState, i64 0, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 3
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  %51 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 5
  %52 = load i32, i32* %51, align 8
  br label %61

53:                                               ; preds = %40
  %54 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp ult i32 %55, %57
  %59 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %60 = select i1 %58, i32 %55, i32 %57
  br label %61

61:                                               ; preds = %53, %49
  %62 = phi i32 [ %52, %49 ], [ %60, %53 ]
  %63 = phi i32* [ %50, %49 ], [ %59, %53 ]
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %65, i64 %66, i8* null) #10
  %68 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 5
  store i64 %67, i64* %68, align 8
  %69 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %67, i64 4, i8* null) #10
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %78, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 5
  %73 = load i64, i64* %72, align 8
  %74 = shl i64 %73, 2
  %75 = tail call i8* @_TIFFmalloc(i64 %74) #10
  %76 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 4
  store i8* %75, i8** %76, align 8
  %77 = icmp eq i8* %75, null
  br i1 %77, label %78, label %82

78:                                               ; preds = %61, %71, %37, %1
  %79 = phi i8* [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), %1 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.7, i64 0, i64 0), %37 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), %71 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), %61 ]
  %80 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %81 = load i8*, i8** %80, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %81, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @LogLuvInitState.module, i64 0, i64 0), i8* %79) #10
  br label %82

82:                                               ; preds = %78, %71
  %83 = phi i32 [ 1, %71 ], [ 0, %78 ]
  ret i32 %83
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvDecode24(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i32*
  br label %28

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvDecode24.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %75

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i32**
  %27 = load i32*, i32** %26, align 8
  br label %28

28:                                               ; preds = %24, %15
  %29 = phi i32* [ %16, %15 ], [ %27, %24 ]
  %30 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %33 = load i64, i64* %32, align 8
  %34 = icmp sgt i64 %11, 0
  %35 = icmp sgt i64 %33, 2
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %60

37:                                               ; preds = %28, %37
  %38 = phi i8* [ %54, %37 ], [ %31, %28 ]
  %39 = phi i64 [ %56, %37 ], [ 0, %28 ]
  %40 = phi i64 [ %55, %37 ], [ %33, %28 ]
  %41 = load i8, i8* %38, align 1
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 16
  %44 = getelementptr inbounds i8, i8* %38, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = shl nuw nsw i32 %46, 8
  %48 = or i32 %47, %43
  %49 = getelementptr inbounds i8, i8* %38, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = or i32 %48, %51
  %53 = getelementptr inbounds i32, i32* %29, i64 %39
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %38, i64 3
  %55 = add nsw i64 %40, -3
  %56 = add nuw nsw i64 %39, 1
  %57 = icmp sgt i64 %11, %56
  %58 = icmp sgt i64 %55, 2
  %59 = and i1 %58, %57
  br i1 %59, label %37, label %60

60:                                               ; preds = %37, %28
  %61 = phi i64 [ %33, %28 ], [ %55, %37 ]
  %62 = phi i64 [ 0, %28 ], [ %56, %37 ]
  %63 = phi i8* [ %31, %28 ], [ %54, %37 ]
  store i8* %63, i8** %30, align 8
  store i64 %61, i64* %32, align 8
  %64 = icmp eq i64 %11, %62
  br i1 %64, label %72, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i64
  %71 = sub nsw i64 %11, %62
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %67, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvDecode24.module, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0), i64 %70, i64 %71) #10
  br label %75

72:                                               ; preds = %60
  %73 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %74 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %73, align 8
  tail call void %74(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  br label %75

75:                                               ; preds = %72, %65, %21
  %76 = phi i32 [ 0, %65 ], [ 1, %72 ], [ 0, %21 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv24toXYZ(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  br label %10

10:                                               ; preds = %5, %10
  %11 = phi float* [ %16, %10 ], [ %6, %5 ]
  %12 = phi i32* [ %17, %10 ], [ %9, %5 ]
  %13 = phi i64 [ %14, %10 ], [ %2, %5 ]
  %14 = add nsw i64 %13, -1
  %15 = load i32, i32* %12, align 4
  tail call void @LogLuv24toXYZ(i32 %15, float* %11)
  %16 = getelementptr inbounds float, float* %11, i64 3
  %17 = getelementptr inbounds i32, i32* %12, i64 1
  %18 = icmp sgt i64 %14, 0
  br i1 %18, label %10, label %19

19:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv24toLuv48(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %74

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i16*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  br label %10

10:                                               ; preds = %5, %63
  %11 = phi i64 [ %14, %63 ], [ %2, %5 ]
  %12 = phi i16* [ %71, %63 ], [ %6, %5 ]
  %13 = phi i32* [ %72, %63 ], [ %9, %5 ]
  %14 = add nsw i64 %11, -1
  %15 = load i32, i32* %13, align 4
  %16 = lshr i32 %15, 12
  %17 = trunc i32 %16 to i16
  %18 = and i16 %17, 4093
  %19 = add nuw nsw i16 %18, 13314
  %20 = getelementptr inbounds i16, i16* %12, i64 1
  store i16 %19, i16* %12, align 2
  %21 = load i32, i32* %13, align 4
  %22 = and i32 %21, 16383
  %23 = icmp ugt i32 %22, 16288
  br i1 %23, label %63, label %24

24:                                               ; preds = %10, %37
  %25 = phi i32 [ %39, %37 ], [ 0, %10 ]
  %26 = phi i32 [ %38, %37 ], [ 163, %10 ]
  %27 = add nsw i32 %26, %25
  %28 = ashr i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %29, i32 2
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = sub nsw i32 %22, %32
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %24
  %36 = icmp slt i32 %33, 0
  br i1 %36, label %37, label %51

37:                                               ; preds = %35, %24
  %38 = phi i32 [ %26, %24 ], [ %28, %35 ]
  %39 = phi i32 [ %28, %24 ], [ %25, %35 ]
  %40 = sub nsw i32 %38, %39
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %24, label %42

42:                                               ; preds = %37
  %43 = sext i32 %39 to i64
  %44 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %43, i32 2
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = sub nsw i32 %22, %46
  %48 = sitofp i32 %47 to double
  %49 = fadd double %48, 5.000000e-01
  %50 = fmul double %49, 0x3F6CAC0840000000
  br label %51

51:                                               ; preds = %35, %42
  %52 = phi double [ %50, %42 ], [ 0x3F5CAC0840000000, %35 ]
  %53 = phi i64 [ %43, %42 ], [ %29, %35 ]
  %54 = phi i32 [ %39, %42 ], [ %28, %35 ]
  %55 = getelementptr inbounds [163 x %struct.anon], [163 x %struct.anon]* @uv_row, i64 0, i64 %53, i32 0
  %56 = load float, float* %55, align 8
  %57 = fpext float %56 to double
  %58 = fadd double %52, %57
  %59 = sitofp i32 %54 to double
  %60 = fadd double %59, 5.000000e-01
  %61 = fmul double %60, 0x3F6CAC0840000000
  %62 = fadd double %61, 0x3F9158B820000000
  br label %63

63:                                               ; preds = %10, %51
  %64 = phi double [ %58, %51 ], [ 0x3FCAF286BD156C1A, %10 ]
  %65 = phi double [ %62, %51 ], [ 0x3FDE50D794B8199E, %10 ]
  %66 = fmul double %64, 3.276800e+04
  %67 = fptosi double %66 to i16
  %68 = getelementptr inbounds i16, i16* %12, i64 2
  store i16 %67, i16* %20, align 2
  %69 = fmul double %65, 3.276800e+04
  %70 = fptosi double %69 to i16
  %71 = getelementptr inbounds i16, i16* %12, i64 3
  store i16 %70, i16* %68, align 2
  %72 = getelementptr inbounds i32, i32* %13, i64 1
  %73 = icmp sgt i64 %14, 0
  br i1 %73, label %10, label %74

74:                                               ; preds = %63, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv24toRGB(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #3 {
  %4 = alloca [3 x float], align 4
  %5 = icmp sgt i64 %2, 0
  br i1 %5, label %6, label %78

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = bitcast [3 x float]* %4 to i8*
  %11 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  %12 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 1
  %13 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 2
  %14 = bitcast float* %12 to <2 x float>*
  br label %15

15:                                               ; preds = %6, %73
  %16 = phi i8* [ %1, %6 ], [ %76, %73 ]
  %17 = phi i32* [ %9, %6 ], [ %20, %73 ]
  %18 = phi i64 [ %2, %6 ], [ %19, %73 ]
  %19 = add nsw i64 %18, -1
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10) #10
  store float 0xFFFFFFFFE0000000, float* %11, align 4
  store float 0xFFFFFFFFE0000000, float* %12, align 4
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %20 = getelementptr inbounds i32, i32* %17, i64 1
  %21 = load i32, i32* %17, align 4
  call void @LogLuv24toXYZ(i32 %21, float* nonnull %11)
  %22 = load float, float* %11, align 4
  %23 = fpext float %22 to double
  %24 = fmul double %23, 2.690000e+00
  %25 = load <2 x float>, <2 x float>* %14, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = fmul <2 x double> %26, <double 1.276000e+00, double 4.140000e-01>
  %28 = extractelement <2 x double> %27, i32 0
  %29 = fsub double %24, %28
  %30 = extractelement <2 x double> %27, i32 1
  %31 = fsub double %29, %30
  %32 = fmul double %23, 1.022000e+00
  %33 = extractelement <2 x double> %26, i32 0
  %34 = fmul double %33, 1.978000e+00
  %35 = fsub double %34, %32
  %36 = extractelement <2 x double> %26, i32 1
  %37 = fmul double %36, 4.400000e-02
  %38 = fadd double %35, %37
  %39 = fmul double %23, 6.100000e-02
  %40 = fmul double %33, 2.240000e-01
  %41 = fsub double %39, %40
  %42 = fmul double %36, 1.163000e+00
  %43 = fadd double %41, %42
  %44 = fcmp ugt double %31, 0.000000e+00
  br i1 %44, label %45, label %52

45:                                               ; preds = %15
  %46 = fcmp ult double %31, 1.000000e+00
  br i1 %46, label %47, label %52

47:                                               ; preds = %45
  %48 = tail call double @sqrt(double %31) #10
  %49 = fmul double %48, 2.560000e+02
  %50 = fptosi double %49 to i32
  %51 = trunc i32 %50 to i8
  br label %52

52:                                               ; preds = %47, %45, %15
  %53 = phi i8 [ 0, %15 ], [ %51, %47 ], [ -1, %45 ]
  store i8 %53, i8* %16, align 1
  %54 = fcmp ugt double %38, 0.000000e+00
  br i1 %54, label %55, label %62

55:                                               ; preds = %52
  %56 = fcmp ult double %38, 1.000000e+00
  br i1 %56, label %57, label %62

57:                                               ; preds = %55
  %58 = tail call double @sqrt(double %38) #10
  %59 = fmul double %58, 2.560000e+02
  %60 = fptosi double %59 to i32
  %61 = trunc i32 %60 to i8
  br label %62

62:                                               ; preds = %57, %55, %52
  %63 = phi i8 [ 0, %52 ], [ %61, %57 ], [ -1, %55 ]
  %64 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %63, i8* %64, align 1
  %65 = fcmp ugt double %43, 0.000000e+00
  br i1 %65, label %66, label %73

66:                                               ; preds = %62
  %67 = fcmp ult double %43, 1.000000e+00
  br i1 %67, label %68, label %73

68:                                               ; preds = %66
  %69 = tail call double @sqrt(double %43) #10
  %70 = fmul double %69, 2.560000e+02
  %71 = fptosi double %70 to i32
  %72 = trunc i32 %71 to i8
  br label %73

73:                                               ; preds = %62, %66, %68
  %74 = phi i8 [ 0, %62 ], [ %72, %68 ], [ -1, %66 ]
  %75 = getelementptr inbounds i8, i8* %16, i64 2
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %16, i64 3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10) #10
  %77 = icmp sgt i64 %19, 0
  br i1 %77, label %15, label %78

78:                                               ; preds = %73, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvDecode32(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i32*
  br label %29

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvDecode32.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %198

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i32**
  %27 = load i32*, i32** %26, align 8
  %28 = bitcast i32* %27 to i8*
  br label %29

29:                                               ; preds = %24, %15
  %30 = phi i8* [ %1, %15 ], [ %28, %24 ]
  %31 = phi i32* [ %16, %15 ], [ %27, %24 ]
  %32 = shl i64 %11, 2
  tail call void @_TIFFmemset(i8* %30, i32 0, i64 %32) #10
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %36 = load i64, i64* %35, align 8
  %37 = icmp sgt i64 %11, 0
  br label %40

38:                                               ; preds = %182
  %39 = icmp sgt i32 %187, -1
  br i1 %39, label %40, label %195

40:                                               ; preds = %29, %38
  %41 = phi i64 [ %36, %29 ], [ %185, %38 ]
  %42 = phi i8* [ %34, %29 ], [ %184, %38 ]
  %43 = phi i32 [ 24, %29 ], [ %187, %38 ]
  %44 = icmp sgt i64 %41, 0
  %45 = and i1 %37, %44
  br i1 %45, label %46, label %182

46:                                               ; preds = %40, %175
  %47 = phi i64 [ %178, %175 ], [ %41, %40 ]
  %48 = phi i8* [ %177, %175 ], [ %42, %40 ]
  %49 = phi i64 [ %176, %175 ], [ 0, %40 ]
  %50 = load i8, i8* %48, align 1
  %51 = zext i8 %50 to i32
  %52 = icmp slt i8 %50, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds i8, i8* %48, i64 1
  %55 = add nsw i64 %47, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %182, label %155

57:                                               ; preds = %46
  %58 = icmp slt i64 %47, 2
  br i1 %58, label %182, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds i8, i8* %48, i64 1
  %61 = add nsw i32 %51, -126
  %62 = getelementptr inbounds i8, i8* %48, i64 2
  %63 = load i8, i8* %60, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %64, %43
  %66 = add nsw i64 %47, -2
  %67 = icmp ne i32 %61, 0
  %68 = icmp slt i64 %49, %11
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %175

70:                                               ; preds = %59
  %71 = xor i64 %49, -1
  %72 = add i64 %11, %71
  %73 = add nsw i32 %51, -127
  %74 = zext i32 %73 to i64
  %75 = icmp ult i64 %72, %74
  %76 = select i1 %75, i64 %72, i64 %74
  %77 = add nuw nsw i64 %76, 1
  %78 = icmp ult i64 %77, 8
  br i1 %78, label %141, label %79

79:                                               ; preds = %70
  %80 = and i64 %77, 8589934584
  %81 = trunc i64 %80 to i32
  %82 = sub i32 %61, %81
  %83 = add i64 %49, %80
  %84 = insertelement <4 x i32> undef, i32 %65, i32 0
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> zeroinitializer
  %86 = insertelement <4 x i32> undef, i32 %65, i32 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = add nsw i64 %80, -8
  %89 = lshr exact i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 1
  %92 = icmp eq i64 %88, 0
  br i1 %92, label %124, label %93

93:                                               ; preds = %79
  %94 = sub nuw nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %121, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %122, %95 ]
  %98 = add i64 %49, %96
  %99 = getelementptr inbounds i32, i32* %31, i64 %98
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4
  %105 = or <4 x i32> %101, %85
  %106 = or <4 x i32> %104, %87
  %107 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %107, align 4
  %108 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %108, align 4
  %109 = or i64 %96, 8
  %110 = add i64 %49, %109
  %111 = getelementptr inbounds i32, i32* %31, i64 %110
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = getelementptr inbounds i32, i32* %111, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4
  %117 = or <4 x i32> %113, %85
  %118 = or <4 x i32> %116, %87
  %119 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %119, align 4
  %120 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %120, align 4
  %121 = add i64 %96, 16
  %122 = add i64 %97, -2
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %95, !llvm.loop !4

124:                                              ; preds = %95, %79
  %125 = phi i64 [ 0, %79 ], [ %121, %95 ]
  %126 = icmp eq i64 %91, 0
  br i1 %126, label %139, label %127

127:                                              ; preds = %124
  %128 = add i64 %49, %125
  %129 = getelementptr inbounds i32, i32* %31, i64 %128
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = or <4 x i32> %131, %85
  %136 = or <4 x i32> %134, %87
  %137 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %137, align 4
  %138 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %138, align 4
  br label %139

139:                                              ; preds = %124, %127
  %140 = icmp eq i64 %77, %80
  br i1 %140, label %175, label %141

141:                                              ; preds = %139, %70
  %142 = phi i32 [ %61, %70 ], [ %82, %139 ]
  %143 = phi i64 [ %49, %70 ], [ %83, %139 ]
  br label %144

144:                                              ; preds = %141, %144
  %145 = phi i32 [ %147, %144 ], [ %142, %141 ]
  %146 = phi i64 [ %148, %144 ], [ %143, %141 ]
  %147 = add nsw i32 %145, -1
  %148 = add nsw i64 %146, 1
  %149 = getelementptr inbounds i32, i32* %31, i64 %146
  %150 = load i32, i32* %149, align 4
  %151 = or i32 %150, %65
  store i32 %151, i32* %149, align 4
  %152 = icmp ne i32 %147, 0
  %153 = icmp slt i64 %148, %11
  %154 = and i1 %153, %152
  br i1 %154, label %144, label %175, !llvm.loop !5

155:                                              ; preds = %53, %163
  %156 = phi i64 [ %173, %163 ], [ %55, %53 ]
  %157 = phi i8* [ %172, %163 ], [ %54, %53 ]
  %158 = phi i32 [ %164, %163 ], [ %51, %53 ]
  %159 = phi i64 [ %168, %163 ], [ %49, %53 ]
  %160 = icmp ne i32 %158, 0
  %161 = icmp slt i64 %159, %11
  %162 = and i1 %161, %160
  br i1 %162, label %163, label %175

163:                                              ; preds = %155
  %164 = add nsw i32 %158, -1
  %165 = load i8, i8* %157, align 1
  %166 = zext i8 %165 to i32
  %167 = shl i32 %166, %43
  %168 = add nsw i64 %159, 1
  %169 = getelementptr inbounds i32, i32* %31, i64 %159
  %170 = load i32, i32* %169, align 4
  %171 = or i32 %167, %170
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds i8, i8* %157, i64 1
  %173 = add nsw i64 %156, -1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %182, label %155

175:                                              ; preds = %155, %144, %139, %59
  %176 = phi i64 [ %49, %59 ], [ %83, %139 ], [ %148, %144 ], [ %159, %155 ]
  %177 = phi i8* [ %62, %59 ], [ %62, %139 ], [ %62, %144 ], [ %157, %155 ]
  %178 = phi i64 [ %66, %59 ], [ %66, %139 ], [ %66, %144 ], [ %156, %155 ]
  %179 = icmp sgt i64 %11, %176
  %180 = icmp sgt i64 %178, 0
  %181 = and i1 %179, %180
  br i1 %181, label %46, label %182

182:                                              ; preds = %53, %175, %57, %163, %40
  %183 = phi i64 [ 0, %40 ], [ %168, %163 ], [ %49, %53 ], [ %49, %57 ], [ %176, %175 ]
  %184 = phi i8* [ %42, %40 ], [ %172, %163 ], [ %54, %53 ], [ %48, %57 ], [ %177, %175 ]
  %185 = phi i64 [ %41, %40 ], [ 0, %163 ], [ 0, %53 ], [ %47, %57 ], [ %178, %175 ]
  %186 = icmp eq i64 %11, %183
  %187 = add nsw i32 %43, -8
  br i1 %186, label %38, label %188

188:                                              ; preds = %182
  %189 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  %194 = sub nsw i64 %11, %183
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %190, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvDecode32.module, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0), i64 %193, i64 %194) #10
  store i8* %184, i8** %33, align 8
  store i64 %185, i64* %35, align 8
  br label %198

195:                                              ; preds = %38
  %196 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %197 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %196, align 8
  tail call void %197(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  store i8* %184, i8** %33, align 8
  store i64 %185, i64* %35, align 8
  br label %198

198:                                              ; preds = %195, %188, %21
  %199 = phi i32 [ 0, %188 ], [ 1, %195 ], [ 0, %21 ]
  ret i32 %199
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @Luv32toXYZ(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  br label %10

10:                                               ; preds = %5, %10
  %11 = phi float* [ %17, %10 ], [ %6, %5 ]
  %12 = phi i32* [ %15, %10 ], [ %9, %5 ]
  %13 = phi i64 [ %14, %10 ], [ %2, %5 ]
  %14 = add nsw i64 %13, -1
  %15 = getelementptr inbounds i32, i32* %12, i64 1
  %16 = load i32, i32* %12, align 4
  tail call void @LogLuv32toXYZ(i32 %16, float* %11)
  %17 = getelementptr inbounds float, float* %11, i64 3
  %18 = icmp sgt i64 %14, 0
  br i1 %18, label %10, label %19

19:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @Luv32toLuv48(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #7 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %37

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i16*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  br label %10

10:                                               ; preds = %5, %10
  %11 = phi i64 [ %14, %10 ], [ %2, %5 ]
  %12 = phi i32* [ %35, %10 ], [ %9, %5 ]
  %13 = phi i16* [ %34, %10 ], [ %6, %5 ]
  %14 = add nsw i64 %11, -1
  %15 = load i32, i32* %12, align 4
  %16 = lshr i32 %15, 16
  %17 = trunc i32 %16 to i16
  %18 = getelementptr inbounds i16, i16* %13, i64 1
  store i16 %17, i16* %13, align 2
  %19 = load i32, i32* %12, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, 255
  %22 = uitofp i32 %21 to double
  %23 = fadd double %22, 5.000000e-01
  %24 = fmul double %23, 0x3F63FB013FB013FB
  %25 = and i32 %19, 255
  %26 = uitofp i32 %25 to double
  %27 = fadd double %26, 5.000000e-01
  %28 = fmul double %27, 0x3F63FB013FB013FB
  %29 = fmul double %24, 3.276800e+04
  %30 = fptosi double %29 to i16
  %31 = getelementptr inbounds i16, i16* %13, i64 2
  store i16 %30, i16* %18, align 2
  %32 = fmul double %28, 3.276800e+04
  %33 = fptosi double %32 to i16
  %34 = getelementptr inbounds i16, i16* %13, i64 3
  store i16 %33, i16* %31, align 2
  %35 = getelementptr inbounds i32, i32* %12, i64 1
  %36 = icmp sgt i64 %14, 0
  br i1 %36, label %10, label %37

37:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv32toRGB(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %114

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %7 = bitcast i8** %6 to i32**
  %8 = load i32*, i32** %7, align 8
  br label %9

9:                                                ; preds = %5, %109
  %10 = phi i8* [ %112, %109 ], [ %1, %5 ]
  %11 = phi i32* [ %14, %109 ], [ %8, %5 ]
  %12 = phi i64 [ %13, %109 ], [ %2, %5 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds i32, i32* %11, i64 1
  %15 = load i32, i32* %11, align 4
  %16 = ashr i32 %15, 16
  %17 = and i32 %16, 32767
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %58, label %19

19:                                               ; preds = %9
  %20 = sitofp i32 %17 to double
  %21 = fadd double %20, 5.000000e-01
  %22 = fmul double %21, 0x3F662E42FEFA39EF
  %23 = fadd double %22, 0xC0462E42FEFA39EF
  %24 = tail call double @exp(double %23) #10
  %25 = trunc i32 %16 to i16
  %26 = icmp slt i16 %25, 0
  %27 = fsub double -0.000000e+00, %24
  %28 = select i1 %26, double %27, double %24
  %29 = fcmp ugt double %28, 0.000000e+00
  br i1 %29, label %30, label %58

30:                                               ; preds = %19
  %31 = lshr i32 %15, 8
  %32 = and i32 %31, 255
  %33 = uitofp i32 %32 to double
  %34 = fadd double %33, 5.000000e-01
  %35 = fmul double %34, 0x3F63FB013FB013FB
  %36 = and i32 %15, 255
  %37 = uitofp i32 %36 to double
  %38 = fadd double %37, 5.000000e-01
  %39 = fmul double %38, 0x3F63FB013FB013FB
  %40 = fmul double %35, 6.000000e+00
  %41 = fmul double %39, 1.600000e+01
  %42 = fsub double %40, %41
  %43 = fadd double %42, 1.200000e+01
  %44 = fdiv double 1.000000e+00, %43
  %45 = fmul double %35, 9.000000e+00
  %46 = fmul double %45, %44
  %47 = fmul double %39, 4.000000e+00
  %48 = fmul double %47, %44
  %49 = fdiv double %46, %48
  %50 = fmul double %49, %28
  %51 = fptrunc double %50 to float
  %52 = fptrunc double %28 to float
  %53 = fsub double 1.000000e+00, %46
  %54 = fsub double %53, %48
  %55 = fdiv double %54, %48
  %56 = fmul double %55, %28
  %57 = fptrunc double %56 to float
  br label %58

58:                                               ; preds = %9, %19, %30
  %59 = phi float [ %57, %30 ], [ 0.000000e+00, %19 ], [ 0.000000e+00, %9 ]
  %60 = phi float [ %52, %30 ], [ 0.000000e+00, %19 ], [ 0.000000e+00, %9 ]
  %61 = phi float [ %51, %30 ], [ 0.000000e+00, %19 ], [ 0.000000e+00, %9 ]
  %62 = fpext float %61 to double
  %63 = fmul double %62, 2.690000e+00
  %64 = fpext float %60 to double
  %65 = fmul double %64, 1.276000e+00
  %66 = fsub double %63, %65
  %67 = fpext float %59 to double
  %68 = fmul double %67, 4.140000e-01
  %69 = fsub double %66, %68
  %70 = fmul double %62, 1.022000e+00
  %71 = fmul double %64, 1.978000e+00
  %72 = fsub double %71, %70
  %73 = fmul double %67, 4.400000e-02
  %74 = fadd double %73, %72
  %75 = fmul double %62, 6.100000e-02
  %76 = fmul double %64, 2.240000e-01
  %77 = fsub double %75, %76
  %78 = fmul double %67, 1.163000e+00
  %79 = fadd double %78, %77
  %80 = fcmp ugt double %69, 0.000000e+00
  br i1 %80, label %81, label %88

81:                                               ; preds = %58
  %82 = fcmp ult double %69, 1.000000e+00
  br i1 %82, label %83, label %88

83:                                               ; preds = %81
  %84 = tail call double @sqrt(double %69) #10
  %85 = fmul double %84, 2.560000e+02
  %86 = fptosi double %85 to i32
  %87 = trunc i32 %86 to i8
  br label %88

88:                                               ; preds = %83, %81, %58
  %89 = phi i8 [ 0, %58 ], [ %87, %83 ], [ -1, %81 ]
  store i8 %89, i8* %10, align 1
  %90 = fcmp ugt double %74, 0.000000e+00
  br i1 %90, label %91, label %98

91:                                               ; preds = %88
  %92 = fcmp ult double %74, 1.000000e+00
  br i1 %92, label %93, label %98

93:                                               ; preds = %91
  %94 = tail call double @sqrt(double %74) #10
  %95 = fmul double %94, 2.560000e+02
  %96 = fptosi double %95 to i32
  %97 = trunc i32 %96 to i8
  br label %98

98:                                               ; preds = %93, %91, %88
  %99 = phi i8 [ 0, %88 ], [ %97, %93 ], [ -1, %91 ]
  %100 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %99, i8* %100, align 1
  %101 = fcmp ugt double %79, 0.000000e+00
  br i1 %101, label %102, label %109

102:                                              ; preds = %98
  %103 = fcmp ult double %79, 1.000000e+00
  br i1 %103, label %104, label %109

104:                                              ; preds = %102
  %105 = tail call double @sqrt(double %79) #10
  %106 = fmul double %105, 2.560000e+02
  %107 = fptosi double %106 to i32
  %108 = trunc i32 %107 to i8
  br label %109

109:                                              ; preds = %98, %102, %104
  %110 = phi i8 [ 0, %98 ], [ %108, %104 ], [ -1, %102 ]
  %111 = getelementptr inbounds i8, i8* %10, i64 2
  store i8 %110, i8* %111, align 1
  %112 = getelementptr inbounds i8, i8* %10, i64 3
  %113 = icmp sgt i64 %13, 0
  br i1 %113, label %9, label %114

114:                                              ; preds = %109, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @LogL16InitState(%struct.tiff* nocapture readonly) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.logLuvState**
  %4 = load %struct.logLuvState*, %struct.logLuvState** %3, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %6 = load i16, i16* %5, align 2
  %7 = icmp eq i16 %6, 1
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = zext i16 %6 to i32
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %11 = load i8*, i8** %10, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @LogL16InitState.module, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0), i32 %9) #10
  br label %77

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %31

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, 6
  %21 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 9
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = or i32 %20, %23
  %25 = or i32 %24, 8
  switch i32 %25, label %28 [
    i32 2059, label %29
    i32 1036, label %26
    i32 1034, label %26
    i32 1033, label %26
    i32 524, label %27
    i32 521, label %27
  ]

26:                                               ; preds = %16, %16, %16
  br label %29

27:                                               ; preds = %16, %16
  br label %29

28:                                               ; preds = %16
  br label %29

29:                                               ; preds = %16, %26, %27, %28
  %30 = phi i32 [ -1, %28 ], [ 3, %27 ], [ 1, %26 ], [ 0, %16 ]
  store i32 %30, i32* %13, align 4
  br label %31

31:                                               ; preds = %29, %12
  %32 = phi i32 [ %30, %29 ], [ %14, %12 ]
  switch i32 %32, label %35 [
    i32 0, label %38
    i32 1, label %33
    i32 3, label %34
  ]

33:                                               ; preds = %31
  br label %38

34:                                               ; preds = %31
  br label %38

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %37 = load i8*, i8** %36, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @LogL16InitState.module, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i64 0, i64 0)) #10
  br label %77

38:                                               ; preds = %31, %34, %33
  %39 = phi i32 [ 1, %34 ], [ 2, %33 ], [ 4, %31 ]
  %40 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 3
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 1024
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  %47 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 5
  %48 = load i32, i32* %47, align 8
  br label %57

49:                                               ; preds = %38
  %50 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = icmp ult i32 %51, %53
  %55 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %56 = select i1 %54, i32 %51, i32 %53
  br label %57

57:                                               ; preds = %49, %45
  %58 = phi i32 [ %48, %45 ], [ %56, %49 ]
  %59 = phi i32* [ %46, %45 ], [ %55, %49 ]
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = zext i32 %58 to i64
  %63 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %61, i64 %62, i8* null) #10
  %64 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 5
  store i64 %63, i64* %64, align 8
  %65 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %63, i64 2, i8* null) #10
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %74, label %67

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 5
  %69 = load i64, i64* %68, align 8
  %70 = shl i64 %69, 1
  %71 = tail call i8* @_TIFFmalloc(i64 %70) #10
  %72 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %4, i64 0, i32 4
  store i8* %71, i8** %72, align 8
  %73 = icmp eq i8* %71, null
  br i1 %73, label %74, label %77

74:                                               ; preds = %67, %57
  %75 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %76 = load i8*, i8** %75, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %76, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @LogL16InitState.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0)) #10
  br label %77

77:                                               ; preds = %67, %74, %35, %8
  %78 = phi i32 [ 0, %8 ], [ 0, %35 ], [ 0, %74 ], [ 1, %67 ]
  ret i32 %78
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogL16Decode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i16*
  br label %29

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @LogL16Decode.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %196

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i16**
  %27 = load i16*, i16** %26, align 8
  %28 = bitcast i16* %27 to i8*
  br label %29

29:                                               ; preds = %24, %15
  %30 = phi i8* [ %1, %15 ], [ %28, %24 ]
  %31 = phi i16* [ %16, %15 ], [ %27, %24 ]
  %32 = shl i64 %11, 1
  tail call void @_TIFFmemset(i8* %30, i32 0, i64 %32) #10
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %36 = load i64, i64* %35, align 8
  %37 = icmp sgt i64 %11, 0
  %38 = icmp sgt i64 %36, 0
  %39 = and i1 %37, %38
  br i1 %39, label %43, label %181

40:                                               ; preds = %181
  %41 = icmp sgt i64 %184, 0
  %42 = and i1 %37, %41
  br i1 %42, label %198, label %334

43:                                               ; preds = %29, %174
  %44 = phi i64 [ %177, %174 ], [ %36, %29 ]
  %45 = phi i8* [ %176, %174 ], [ %34, %29 ]
  %46 = phi i64 [ %175, %174 ], [ 0, %29 ]
  %47 = load i8, i8* %45, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp slt i8 %47, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %43
  %51 = getelementptr inbounds i8, i8* %45, i64 1
  %52 = add nsw i64 %44, -1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %181, label %154

54:                                               ; preds = %43
  %55 = icmp slt i64 %44, 2
  br i1 %55, label %181, label %56

56:                                               ; preds = %54
  %57 = add nsw i32 %48, -126
  %58 = getelementptr inbounds i8, i8* %45, i64 2
  %59 = add nsw i64 %44, -2
  %60 = icmp ne i32 %57, 0
  %61 = icmp slt i64 %46, %11
  %62 = and i1 %61, %60
  br i1 %62, label %63, label %174

63:                                               ; preds = %56
  %64 = getelementptr inbounds i8, i8* %45, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i16
  %67 = shl nuw i16 %66, 8
  %68 = xor i64 %46, -1
  %69 = add i64 %11, %68
  %70 = add nsw i32 %48, -127
  %71 = zext i32 %70 to i64
  %72 = icmp ult i64 %69, %71
  %73 = select i1 %72, i64 %69, i64 %71
  %74 = add nuw nsw i64 %73, 1
  %75 = icmp ult i64 %74, 8
  br i1 %75, label %140, label %76

76:                                               ; preds = %63
  %77 = and i64 %74, 8589934584
  %78 = trunc i64 %77 to i32
  %79 = sub i32 %57, %78
  %80 = add i64 %46, %77
  %81 = insertelement <8 x i16> undef, i16 %67, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = add nsw i64 %77, -8
  %84 = lshr exact i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 3
  %87 = icmp ult i64 %83, 24
  br i1 %87, label %123, label %88

88:                                               ; preds = %76
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %120, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %121, %90 ]
  %93 = add i64 %46, %91
  %94 = getelementptr inbounds i16, i16* %31, i64 %93
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = or <8 x i16> %96, %82
  %98 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 2
  %99 = or i64 %91, 8
  %100 = add i64 %46, %99
  %101 = getelementptr inbounds i16, i16* %31, i64 %100
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = or <8 x i16> %103, %82
  %105 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = or i64 %91, 16
  %107 = add i64 %46, %106
  %108 = getelementptr inbounds i16, i16* %31, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = or <8 x i16> %110, %82
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = or i64 %91, 24
  %114 = add i64 %46, %113
  %115 = getelementptr inbounds i16, i16* %31, i64 %114
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2
  %118 = or <8 x i16> %117, %82
  %119 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %119, align 2
  %120 = add i64 %91, 32
  %121 = add i64 %92, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %90, !llvm.loop !7

123:                                              ; preds = %90, %76
  %124 = phi i64 [ 0, %76 ], [ %120, %90 ]
  %125 = icmp eq i64 %86, 0
  br i1 %125, label %138, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %135, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %136, %126 ], [ %86, %123 ]
  %129 = add i64 %46, %127
  %130 = getelementptr inbounds i16, i16* %31, i64 %129
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2
  %133 = or <8 x i16> %132, %82
  %134 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %134, align 2
  %135 = add i64 %127, 8
  %136 = add i64 %128, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %126, !llvm.loop !8

138:                                              ; preds = %126, %123
  %139 = icmp eq i64 %74, %77
  br i1 %139, label %174, label %140

140:                                              ; preds = %138, %63
  %141 = phi i32 [ %57, %63 ], [ %79, %138 ]
  %142 = phi i64 [ %46, %63 ], [ %80, %138 ]
  br label %143

143:                                              ; preds = %140, %143
  %144 = phi i32 [ %146, %143 ], [ %141, %140 ]
  %145 = phi i64 [ %147, %143 ], [ %142, %140 ]
  %146 = add nsw i32 %144, -1
  %147 = add nsw i64 %145, 1
  %148 = getelementptr inbounds i16, i16* %31, i64 %145
  %149 = load i16, i16* %148, align 2
  %150 = or i16 %149, %67
  store i16 %150, i16* %148, align 2
  %151 = icmp ne i32 %146, 0
  %152 = icmp slt i64 %147, %11
  %153 = and i1 %152, %151
  br i1 %153, label %143, label %174, !llvm.loop !10

154:                                              ; preds = %50, %162
  %155 = phi i64 [ %172, %162 ], [ %52, %50 ]
  %156 = phi i8* [ %171, %162 ], [ %51, %50 ]
  %157 = phi i32 [ %163, %162 ], [ %48, %50 ]
  %158 = phi i64 [ %167, %162 ], [ %46, %50 ]
  %159 = icmp ne i32 %157, 0
  %160 = icmp slt i64 %158, %11
  %161 = and i1 %160, %159
  br i1 %161, label %162, label %174

162:                                              ; preds = %154
  %163 = add nsw i32 %157, -1
  %164 = load i8, i8* %156, align 1
  %165 = zext i8 %164 to i16
  %166 = shl nuw i16 %165, 8
  %167 = add nsw i64 %158, 1
  %168 = getelementptr inbounds i16, i16* %31, i64 %158
  %169 = load i16, i16* %168, align 2
  %170 = or i16 %169, %166
  store i16 %170, i16* %168, align 2
  %171 = getelementptr inbounds i8, i8* %156, i64 1
  %172 = add nsw i64 %155, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %181, label %154

174:                                              ; preds = %154, %143, %138, %56
  %175 = phi i64 [ %46, %56 ], [ %80, %138 ], [ %147, %143 ], [ %158, %154 ]
  %176 = phi i8* [ %58, %56 ], [ %58, %138 ], [ %58, %143 ], [ %156, %154 ]
  %177 = phi i64 [ %59, %56 ], [ %59, %138 ], [ %59, %143 ], [ %155, %154 ]
  %178 = icmp sgt i64 %11, %175
  %179 = icmp sgt i64 %177, 0
  %180 = and i1 %178, %179
  br i1 %180, label %43, label %181

181:                                              ; preds = %50, %174, %54, %162, %29
  %182 = phi i64 [ 0, %29 ], [ %167, %162 ], [ %46, %50 ], [ %46, %54 ], [ %175, %174 ]
  %183 = phi i8* [ %34, %29 ], [ %171, %162 ], [ %51, %50 ], [ %45, %54 ], [ %176, %174 ]
  %184 = phi i64 [ %36, %29 ], [ 0, %162 ], [ 0, %50 ], [ %44, %54 ], [ %177, %174 ]
  %185 = icmp eq i64 %11, %182
  br i1 %185, label %40, label %186

186:                                              ; preds = %334, %181
  %187 = phi i64 [ %182, %181 ], [ %335, %334 ]
  %188 = phi i8* [ %183, %181 ], [ %336, %334 ]
  %189 = phi i64 [ %184, %181 ], [ %337, %334 ]
  %190 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i64
  %195 = sub nsw i64 %11, %187
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %191, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @LogL16Decode.module, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0), i64 %194, i64 %195) #10
  store i8* %188, i8** %33, align 8
  store i64 %189, i64* %35, align 8
  br label %196

196:                                              ; preds = %339, %186, %21
  %197 = phi i32 [ 0, %186 ], [ 1, %339 ], [ 0, %21 ]
  ret i32 %197

198:                                              ; preds = %40, %327
  %199 = phi i64 [ %330, %327 ], [ %184, %40 ]
  %200 = phi i8* [ %329, %327 ], [ %183, %40 ]
  %201 = phi i64 [ %328, %327 ], [ 0, %40 ]
  %202 = load i8, i8* %200, align 1
  %203 = zext i8 %202 to i32
  %204 = icmp slt i8 %202, 0
  br i1 %204, label %228, label %205

205:                                              ; preds = %198
  %206 = getelementptr inbounds i8, i8* %200, i64 1
  %207 = add nsw i64 %199, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %334, label %209

209:                                              ; preds = %205, %217
  %210 = phi i64 [ %226, %217 ], [ %207, %205 ]
  %211 = phi i8* [ %225, %217 ], [ %206, %205 ]
  %212 = phi i32 [ %218, %217 ], [ %203, %205 ]
  %213 = phi i64 [ %220, %217 ], [ %201, %205 ]
  %214 = icmp ne i32 %212, 0
  %215 = icmp slt i64 %213, %11
  %216 = and i1 %215, %214
  br i1 %216, label %217, label %327

217:                                              ; preds = %209
  %218 = add nsw i32 %212, -1
  %219 = load i8, i8* %211, align 1
  %220 = add nsw i64 %213, 1
  %221 = getelementptr inbounds i16, i16* %31, i64 %213
  %222 = load i16, i16* %221, align 2
  %223 = zext i8 %219 to i16
  %224 = or i16 %222, %223
  store i16 %224, i16* %221, align 2
  %225 = getelementptr inbounds i8, i8* %211, i64 1
  %226 = add nsw i64 %210, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %334, label %209

228:                                              ; preds = %198
  %229 = icmp slt i64 %199, 2
  br i1 %229, label %334, label %230

230:                                              ; preds = %228
  %231 = add nsw i32 %203, -126
  %232 = getelementptr inbounds i8, i8* %200, i64 2
  %233 = add nsw i64 %199, -2
  %234 = icmp ne i32 %231, 0
  %235 = icmp slt i64 %201, %11
  %236 = and i1 %235, %234
  br i1 %236, label %237, label %327

237:                                              ; preds = %230
  %238 = getelementptr inbounds i8, i8* %200, i64 1
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i16
  %241 = xor i64 %201, -1
  %242 = add i64 %11, %241
  %243 = add nsw i32 %203, -127
  %244 = zext i32 %243 to i64
  %245 = icmp ult i64 %242, %244
  %246 = select i1 %245, i64 %242, i64 %244
  %247 = add nuw nsw i64 %246, 1
  %248 = icmp ult i64 %247, 8
  br i1 %248, label %313, label %249

249:                                              ; preds = %237
  %250 = and i64 %247, 8589934584
  %251 = trunc i64 %250 to i32
  %252 = sub i32 %231, %251
  %253 = add i64 %201, %250
  %254 = insertelement <8 x i16> undef, i16 %240, i32 0
  %255 = shufflevector <8 x i16> %254, <8 x i16> undef, <8 x i32> zeroinitializer
  %256 = add nsw i64 %250, -8
  %257 = lshr exact i64 %256, 3
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 24
  br i1 %260, label %296, label %261

261:                                              ; preds = %249
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %293, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %294, %263 ]
  %266 = add i64 %201, %264
  %267 = getelementptr inbounds i16, i16* %31, i64 %266
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2
  %270 = or <8 x i16> %269, %255
  %271 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %271, align 2
  %272 = or i64 %264, 8
  %273 = add i64 %201, %272
  %274 = getelementptr inbounds i16, i16* %31, i64 %273
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2
  %277 = or <8 x i16> %276, %255
  %278 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %278, align 2
  %279 = or i64 %264, 16
  %280 = add i64 %201, %279
  %281 = getelementptr inbounds i16, i16* %31, i64 %280
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2
  %284 = or <8 x i16> %283, %255
  %285 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %285, align 2
  %286 = or i64 %264, 24
  %287 = add i64 %201, %286
  %288 = getelementptr inbounds i16, i16* %31, i64 %287
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2
  %291 = or <8 x i16> %290, %255
  %292 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %291, <8 x i16>* %292, align 2
  %293 = add i64 %264, 32
  %294 = add i64 %265, -4
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %263, !llvm.loop !11

296:                                              ; preds = %263, %249
  %297 = phi i64 [ 0, %249 ], [ %293, %263 ]
  %298 = icmp eq i64 %259, 0
  br i1 %298, label %311, label %299

299:                                              ; preds = %296, %299
  %300 = phi i64 [ %308, %299 ], [ %297, %296 ]
  %301 = phi i64 [ %309, %299 ], [ %259, %296 ]
  %302 = add i64 %201, %300
  %303 = getelementptr inbounds i16, i16* %31, i64 %302
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2
  %306 = or <8 x i16> %305, %255
  %307 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %307, align 2
  %308 = add i64 %300, 8
  %309 = add i64 %301, -1
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %299, !llvm.loop !12

311:                                              ; preds = %299, %296
  %312 = icmp eq i64 %247, %250
  br i1 %312, label %327, label %313

313:                                              ; preds = %311, %237
  %314 = phi i32 [ %231, %237 ], [ %252, %311 ]
  %315 = phi i64 [ %201, %237 ], [ %253, %311 ]
  br label %316

316:                                              ; preds = %313, %316
  %317 = phi i32 [ %319, %316 ], [ %314, %313 ]
  %318 = phi i64 [ %320, %316 ], [ %315, %313 ]
  %319 = add nsw i32 %317, -1
  %320 = add nsw i64 %318, 1
  %321 = getelementptr inbounds i16, i16* %31, i64 %318
  %322 = load i16, i16* %321, align 2
  %323 = or i16 %322, %240
  store i16 %323, i16* %321, align 2
  %324 = icmp ne i32 %319, 0
  %325 = icmp slt i64 %320, %11
  %326 = and i1 %325, %324
  br i1 %326, label %316, label %327, !llvm.loop !13

327:                                              ; preds = %209, %316, %311, %230
  %328 = phi i64 [ %201, %230 ], [ %253, %311 ], [ %320, %316 ], [ %213, %209 ]
  %329 = phi i8* [ %232, %230 ], [ %232, %311 ], [ %232, %316 ], [ %211, %209 ]
  %330 = phi i64 [ %233, %230 ], [ %233, %311 ], [ %233, %316 ], [ %210, %209 ]
  %331 = icmp sgt i64 %11, %328
  %332 = icmp sgt i64 %330, 0
  %333 = and i1 %331, %332
  br i1 %333, label %198, label %334

334:                                              ; preds = %205, %228, %327, %217, %40
  %335 = phi i64 [ 0, %40 ], [ %220, %217 ], [ %201, %205 ], [ %201, %228 ], [ %328, %327 ]
  %336 = phi i8* [ %183, %40 ], [ %225, %217 ], [ %206, %205 ], [ %200, %228 ], [ %329, %327 ]
  %337 = phi i64 [ %184, %40 ], [ 0, %217 ], [ 0, %205 ], [ %199, %228 ], [ %330, %327 ]
  %338 = icmp eq i64 %11, %335
  br i1 %338, label %339, label %186

339:                                              ; preds = %334
  %340 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %341 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %340, align 8
  tail call void %341(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  store i8* %336, i8** %33, align 8
  store i64 %337, i64* %35, align 8
  br label %196
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @L16toY(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %33

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  br label %10

10:                                               ; preds = %5, %28
  %11 = phi float* [ %31, %28 ], [ %6, %5 ]
  %12 = phi i16* [ %15, %28 ], [ %9, %5 ]
  %13 = phi i64 [ %14, %28 ], [ %2, %5 ]
  %14 = add nsw i64 %13, -1
  %15 = getelementptr inbounds i16, i16* %12, i64 1
  %16 = load i16, i16* %12, align 2
  %17 = and i16 %16, 32767
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %10
  %20 = uitofp i16 %17 to double
  %21 = fadd double %20, 5.000000e-01
  %22 = fmul double %21, 0x3F662E42FEFA39EF
  %23 = fadd double %22, 0xC0462E42FEFA39EF
  %24 = tail call double @exp(double %23) #10
  %25 = icmp slt i16 %16, 0
  %26 = fsub double -0.000000e+00, %24
  %27 = select i1 %25, double %26, double %24
  br label %28

28:                                               ; preds = %10, %19
  %29 = phi double [ %27, %19 ], [ 0.000000e+00, %10 ]
  %30 = fptrunc double %29 to float
  %31 = getelementptr inbounds float, float* %11, i64 1
  store float %30, float* %11, align 4
  %32 = icmp sgt i64 %14, 0
  br i1 %32, label %10, label %33

33:                                               ; preds = %28, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @L16toGry(%struct.logLuvState* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %39

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %7 = bitcast i8** %6 to i16**
  %8 = load i16*, i16** %7, align 8
  br label %9

9:                                                ; preds = %5, %34
  %10 = phi i64 [ %13, %34 ], [ %2, %5 ]
  %11 = phi i8* [ %37, %34 ], [ %1, %5 ]
  %12 = phi i16* [ %14, %34 ], [ %8, %5 ]
  %13 = add nsw i64 %10, -1
  %14 = getelementptr inbounds i16, i16* %12, i64 1
  %15 = load i16, i16* %12, align 2
  %16 = and i16 %15, 32767
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %34, label %18

18:                                               ; preds = %9
  %19 = uitofp i16 %16 to double
  %20 = fadd double %19, 5.000000e-01
  %21 = fmul double %20, 0x3F662E42FEFA39EF
  %22 = fadd double %21, 0xC0462E42FEFA39EF
  %23 = tail call double @exp(double %22) #10
  %24 = icmp slt i16 %15, 0
  %25 = fsub double -0.000000e+00, %23
  %26 = select i1 %24, double %25, double %23
  %27 = fcmp ugt double %26, 0.000000e+00
  br i1 %27, label %28, label %34

28:                                               ; preds = %18
  %29 = fcmp ult double %26, 1.000000e+00
  br i1 %29, label %30, label %34

30:                                               ; preds = %28
  %31 = tail call double @sqrt(double %26) #10
  %32 = fmul double %31, 2.560000e+02
  %33 = fptosi double %32 to i32
  br label %34

34:                                               ; preds = %9, %28, %18, %30
  %35 = phi i32 [ 0, %18 ], [ %33, %30 ], [ 255, %28 ], [ 0, %9 ]
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %36, i8* %11, align 1
  %38 = icmp sgt i64 %13, 0
  br i1 %38, label %9, label %39

39:                                               ; preds = %34, %3
  ret void
}

declare i64 @_TIFFMultiplySSize(%struct.tiff*, i64, i64, i8*) local_unnamed_addr #5

declare i64 @TIFFScanlineSize(%struct.tiff*) local_unnamed_addr #5

declare i64 @TIFFTileRowSize(%struct.tiff*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvEncode24(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i32*
  br label %30

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvEncode24.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %81

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i32**
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %29 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %28, align 8
  tail call void %29(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  br label %30

30:                                               ; preds = %24, %15
  %31 = phi i32* [ %16, %15 ], [ %27, %24 ]
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %37 = load i64, i64* %36, align 8
  %38 = sub nsw i64 %35, %37
  %39 = icmp eq i64 %11, 0
  br i1 %39, label %76, label %40

40:                                               ; preds = %30, %57
  %41 = phi i64 [ %45, %57 ], [ %11, %30 ]
  %42 = phi i32* [ %68, %57 ], [ %31, %30 ]
  %43 = phi i8* [ %71, %57 ], [ %33, %30 ]
  %44 = phi i64 [ %72, %57 ], [ %38, %30 ]
  %45 = add nsw i64 %41, -1
  %46 = icmp slt i64 %44, 3
  br i1 %46, label %47, label %57

47:                                               ; preds = %40
  store i8* %43, i8** %32, align 8
  %48 = load i64, i64* %34, align 8
  %49 = sub nsw i64 %48, %44
  store i64 %49, i64* %36, align 8
  %50 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #10
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %81, label %52

52:                                               ; preds = %47
  %53 = load i8*, i8** %32, align 8
  %54 = load i64, i64* %34, align 8
  %55 = load i64, i64* %36, align 8
  %56 = sub nsw i64 %54, %55
  br label %57

57:                                               ; preds = %52, %40
  %58 = phi i64 [ %56, %52 ], [ %44, %40 ]
  %59 = phi i8* [ %53, %52 ], [ %43, %40 ]
  %60 = load i32, i32* %42, align 4
  %61 = lshr i32 %60, 16
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %62, i8* %59, align 1
  %64 = load i32, i32* %42, align 4
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %59, i64 2
  store i8 %66, i8* %63, align 1
  %68 = getelementptr inbounds i32, i32* %42, i64 1
  %69 = load i32, i32* %42, align 4
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds i8, i8* %59, i64 3
  store i8 %70, i8* %67, align 1
  %72 = add nsw i64 %58, -3
  %73 = icmp eq i64 %45, 0
  br i1 %73, label %74, label %40

74:                                               ; preds = %57
  %75 = load i64, i64* %34, align 8
  br label %76

76:                                               ; preds = %74, %30
  %77 = phi i64 [ %35, %30 ], [ %75, %74 ]
  %78 = phi i64 [ %38, %30 ], [ %72, %74 ]
  %79 = phi i8* [ %33, %30 ], [ %71, %74 ]
  store i8* %79, i8** %32, align 8
  %80 = sub nsw i64 %77, %78
  store i64 %80, i64* %36, align 8
  br label %81

81:                                               ; preds = %47, %76, %21
  %82 = phi i32 [ 1, %76 ], [ 0, %21 ], [ 0, %47 ]
  ret i32 %82
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv24fromXYZ(%struct.logLuvState* nocapture readonly, i8* nocapture readonly, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %21

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 2
  br label %11

11:                                               ; preds = %5, %11
  %12 = phi float* [ %6, %5 ], [ %19, %11 ]
  %13 = phi i32* [ %9, %5 ], [ %18, %11 ]
  %14 = phi i64 [ %2, %5 ], [ %15, %11 ]
  %15 = add nsw i64 %14, -1
  %16 = load i32, i32* %10, align 8
  %17 = tail call i32 @LogLuv24fromXYZ(float* %12, i32 %16)
  %18 = getelementptr inbounds i32, i32* %13, i64 1
  store i32 %17, i32* %13, align 4
  %19 = getelementptr inbounds float, float* %12, i64 3
  %20 = icmp sgt i64 %15, 0
  br i1 %20, label %11, label %21

21:                                               ; preds = %11, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv24fromLuv48(%struct.logLuvState* nocapture readonly, i8* nocapture readonly, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %58

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i16*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 2
  br label %11

11:                                               ; preds = %5, %37
  %12 = phi i64 [ %2, %5 ], [ %15, %37 ]
  %13 = phi i16* [ %6, %5 ], [ %56, %37 ]
  %14 = phi i32* [ %9, %5 ], [ %55, %37 ]
  %15 = add nsw i64 %12, -1
  %16 = load i16, i16* %13, align 2
  %17 = sext i16 %16 to i32
  %18 = icmp slt i16 %16, 1
  br i1 %18, label %37, label %19

19:                                               ; preds = %11
  %20 = icmp sgt i16 %16, 7409
  br i1 %20, label %37, label %21

21:                                               ; preds = %19
  %22 = load i32, i32* %10, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = add nsw i32 %17, -3314
  %26 = ashr i32 %25, 2
  br label %37

27:                                               ; preds = %21
  %28 = sitofp i16 %16 to double
  %29 = fadd double %28, -3.314000e+03
  %30 = fmul double %29, 2.500000e-01
  %31 = tail call i32 @rand() #10
  %32 = sitofp i32 %31 to double
  %33 = fmul double %32, 0x3E00000000200000
  %34 = fadd double %30, %33
  %35 = fadd double %34, -5.000000e-01
  %36 = fptosi double %35 to i32
  br label %37

37:                                               ; preds = %19, %11, %27, %24
  %38 = phi i32 [ %26, %24 ], [ %36, %27 ], [ 0, %11 ], [ 1023, %19 ]
  %39 = getelementptr inbounds i16, i16* %13, i64 1
  %40 = load i16, i16* %39, align 2
  %41 = sitofp i16 %40 to double
  %42 = fadd double %41, 5.000000e-01
  %43 = fmul double %42, 0x3F00000000000000
  %44 = getelementptr inbounds i16, i16* %13, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = sitofp i16 %45 to double
  %47 = fadd double %46, 5.000000e-01
  %48 = fmul double %47, 0x3F00000000000000
  %49 = load i32, i32* %10, align 8
  %50 = tail call i32 @uv_encode(double %43, double %48, i32 %49)
  %51 = icmp slt i32 %50, 0
  %52 = select i1 %51, i32 12266, i32 %50
  %53 = shl i32 %38, 14
  %54 = or i32 %52, %53
  %55 = getelementptr inbounds i32, i32* %14, i64 1
  store i32 %54, i32* %14, align 4
  %56 = getelementptr inbounds i16, i16* %13, i64 3
  %57 = icmp sgt i64 %15, 0
  br i1 %57, label %11, label %58

58:                                               ; preds = %37, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogLuvEncode32(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i32*
  br label %30

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @LogLuvEncode32.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %341

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i32**
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %29 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %28, align 8
  tail call void %29(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  br label %30

30:                                               ; preds = %24, %15
  %31 = phi i32* [ %16, %15 ], [ %27, %24 ]
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %37 = load i64, i64* %36, align 8
  %38 = sub nsw i64 %35, %37
  %39 = icmp sgt i64 %11, 0
  br label %40

40:                                               ; preds = %30, %332
  %41 = phi i32 [ 0, %30 ], [ %335, %332 ]
  %42 = phi i64 [ %38, %30 ], [ %334, %332 ]
  %43 = phi i8* [ %33, %30 ], [ %333, %332 ]
  %44 = phi i32 [ 24, %30 ], [ %336, %332 ]
  br i1 %39, label %45, label %332

45:                                               ; preds = %40
  %46 = shl i32 255, %44
  %47 = insertelement <4 x i32> undef, i32 %44, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %44, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %51

51:                                               ; preds = %45, %325
  %52 = phi i32 [ %41, %45 ], [ %328, %325 ]
  %53 = phi i64 [ %42, %45 ], [ %327, %325 ]
  %54 = phi i8* [ %43, %45 ], [ %326, %325 ]
  %55 = phi i64 [ 0, %45 ], [ %330, %325 ]
  %56 = icmp slt i64 %53, 4
  br i1 %56, label %57, label %67

57:                                               ; preds = %51
  store i8* %54, i8** %32, align 8
  %58 = load i64, i64* %34, align 8
  %59 = sub nsw i64 %58, %53
  store i64 %59, i64* %36, align 8
  %60 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #10
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %341, label %62

62:                                               ; preds = %57
  %63 = load i8*, i8** %32, align 8
  %64 = load i64, i64* %34, align 8
  %65 = load i64, i64* %36, align 8
  %66 = sub nsw i64 %64, %65
  br label %67

67:                                               ; preds = %62, %51
  %68 = phi i8* [ %63, %62 ], [ %54, %51 ]
  %69 = phi i64 [ %66, %62 ], [ %53, %51 ]
  %70 = icmp slt i64 %55, %11
  br i1 %70, label %73, label %100

71:                                               ; preds = %91
  %72 = icmp slt i64 %96, %11
  br i1 %72, label %73, label %97

73:                                               ; preds = %67, %71
  %74 = phi i64 [ %96, %71 ], [ %55, %67 ]
  %75 = getelementptr inbounds i32, i32* %31, i64 %74
  %76 = load i32, i32* %75, align 4
  br label %77

77:                                               ; preds = %349, %73
  %78 = phi i64 [ 1, %73 ], [ %350, %349 ]
  %79 = add nsw i64 %74, %78
  %80 = icmp slt i64 %79, %11
  br i1 %80, label %81, label %91

81:                                               ; preds = %77
  %82 = getelementptr inbounds i32, i32* %31, i64 %79
  %83 = load i32, i32* %82, align 4
  %84 = xor i32 %83, %76
  %85 = and i32 %84, %46
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %81
  %88 = add nuw nsw i64 %78, 1
  %89 = add nsw i64 %74, %88
  %90 = icmp slt i64 %89, %11
  br i1 %90, label %343, label %91

91:                                               ; preds = %343, %87, %77, %81
  %92 = phi i64 [ %78, %77 ], [ %78, %81 ], [ %88, %87 ], [ %88, %343 ]
  %93 = trunc i64 %92 to i32
  %94 = icmp ugt i32 %93, 3
  %95 = and i64 %92, 4294967295
  %96 = add nsw i64 %74, %95
  br i1 %94, label %97, label %71

97:                                               ; preds = %91, %71
  %98 = phi i64 [ %96, %71 ], [ %74, %91 ]
  %99 = trunc i64 %92 to i32
  br label %100

100:                                              ; preds = %349, %97, %67
  %101 = phi i64 [ %55, %67 ], [ %98, %97 ], [ %74, %349 ]
  %102 = phi i32 [ %52, %67 ], [ %99, %97 ], [ 129, %349 ]
  %103 = sub nsw i64 %101, %55
  %104 = and i64 %103, -2
  %105 = icmp eq i64 %104, 2
  br i1 %105, label %106, label %129

106:                                              ; preds = %100
  %107 = getelementptr inbounds i32, i32* %31, i64 %55
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, %46
  %110 = add nsw i64 %55, 1
  br label %111

111:                                              ; preds = %118, %106
  %112 = phi i64 [ %110, %106 ], [ %113, %118 ]
  %113 = add nsw i64 %112, 1
  %114 = getelementptr inbounds i32, i32* %31, i64 %112
  %115 = load i32, i32* %114, align 4
  %116 = and i32 %115, %46
  %117 = icmp eq i32 %116, %109
  br i1 %117, label %118, label %129

118:                                              ; preds = %111
  %119 = icmp eq i64 %113, %101
  br i1 %119, label %120, label %111

120:                                              ; preds = %118
  %121 = sub i64 127, %55
  %122 = add i64 %121, %112
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds i8, i8* %68, i64 1
  store i8 %123, i8* %68, align 1
  %125 = lshr i32 %109, %44
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds i8, i8* %68, i64 2
  store i8 %126, i8* %124, align 1
  %128 = add nsw i64 %69, -2
  br label %129

129:                                              ; preds = %111, %120, %100
  %130 = phi i64 [ %101, %120 ], [ %55, %100 ], [ %55, %111 ]
  %131 = phi i8* [ %127, %120 ], [ %68, %100 ], [ %68, %111 ]
  %132 = phi i64 [ %128, %120 ], [ %69, %100 ], [ %69, %111 ]
  %133 = icmp sgt i64 %101, %130
  br i1 %133, label %143, label %310

134:                                              ; preds = %273, %280, %250
  %135 = phi i64 [ %186, %250 ], [ %274, %273 ], [ %303, %280 ]
  %136 = phi i8* [ %184, %250 ], [ %275, %273 ], [ %308, %280 ]
  %137 = sub i64 %167, %149
  br label %138

138:                                              ; preds = %134, %162
  %139 = phi i64 [ %146, %162 ], [ %135, %134 ]
  %140 = phi i8* [ %166, %162 ], [ %136, %134 ]
  %141 = phi i64 [ %167, %162 ], [ %137, %134 ]
  %142 = icmp sgt i64 %101, %139
  br i1 %142, label %143, label %310

143:                                              ; preds = %129, %138
  %144 = phi i64 [ %141, %138 ], [ %132, %129 ]
  %145 = phi i8* [ %140, %138 ], [ %131, %129 ]
  %146 = phi i64 [ %139, %138 ], [ %130, %129 ]
  %147 = sub nsw i64 %101, %146
  %148 = icmp slt i64 %147, 127
  %149 = select i1 %148, i64 %147, i64 127
  %150 = add nsw i64 %149, 3
  %151 = icmp slt i64 %144, %150
  br i1 %151, label %152, label %162

152:                                              ; preds = %143
  store i8* %145, i8** %32, align 8
  %153 = load i64, i64* %34, align 8
  %154 = sub nsw i64 %153, %144
  store i64 %154, i64* %36, align 8
  %155 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #10
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %341, label %157

157:                                              ; preds = %152
  %158 = load i8*, i8** %32, align 8
  %159 = load i64, i64* %34, align 8
  %160 = load i64, i64* %36, align 8
  %161 = sub nsw i64 %159, %160
  br label %162

162:                                              ; preds = %157, %143
  %163 = phi i8* [ %158, %157 ], [ %145, %143 ]
  %164 = phi i64 [ %161, %157 ], [ %144, %143 ]
  %165 = trunc i64 %149 to i8
  store i8 %165, i8* %163, align 1
  %166 = getelementptr inbounds i8, i8* %163, i64 1
  %167 = add i64 %164, -1
  %168 = icmp eq i64 %149, 0
  br i1 %168, label %138, label %169

169:                                              ; preds = %162
  %170 = icmp ult i64 %149, 8
  br i1 %170, label %252, label %171

171:                                              ; preds = %169
  %172 = getelementptr i8, i8* %163, i64 1
  %173 = getelementptr i8, i8* %172, i64 %149
  %174 = getelementptr i32, i32* %31, i64 %146
  %175 = bitcast i32* %174 to i8*
  %176 = add i64 %146, %149
  %177 = getelementptr i32, i32* %31, i64 %176
  %178 = bitcast i32* %177 to i8*
  %179 = icmp ult i8* %166, %178
  %180 = icmp ugt i8* %173, %175
  %181 = and i1 %179, %180
  br i1 %181, label %252, label %182

182:                                              ; preds = %171
  %183 = and i64 %149, -8
  %184 = getelementptr i8, i8* %166, i64 %183
  %185 = sub i64 %149, %183
  %186 = add i64 %146, %183
  %187 = add i64 %183, -8
  %188 = lshr exact i64 %187, 3
  %189 = add nuw nsw i64 %188, 1
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %187, 0
  br i1 %191, label %231, label %192

192:                                              ; preds = %182
  %193 = sub nuw nsw i64 %189, %190
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi i64 [ 0, %192 ], [ %228, %194 ]
  %196 = phi i64 [ %193, %192 ], [ %229, %194 ]
  %197 = getelementptr i8, i8* %166, i64 %195
  %198 = add i64 %146, %195
  %199 = getelementptr inbounds i32, i32* %31, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4, !alias.scope !14
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4, !alias.scope !14
  %205 = lshr <4 x i32> %201, %48
  %206 = lshr <4 x i32> %204, %50
  %207 = trunc <4 x i32> %205 to <4 x i8>
  %208 = trunc <4 x i32> %206 to <4 x i8>
  %209 = bitcast i8* %197 to <4 x i8>*
  store <4 x i8> %207, <4 x i8>* %209, align 1, !alias.scope !17, !noalias !14
  %210 = getelementptr i8, i8* %197, i64 4
  %211 = bitcast i8* %210 to <4 x i8>*
  store <4 x i8> %208, <4 x i8>* %211, align 1, !alias.scope !17, !noalias !14
  %212 = or i64 %195, 8
  %213 = getelementptr i8, i8* %166, i64 %212
  %214 = add i64 %146, %212
  %215 = getelementptr inbounds i32, i32* %31, i64 %214
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4, !alias.scope !14
  %218 = getelementptr inbounds i32, i32* %215, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4, !alias.scope !14
  %221 = lshr <4 x i32> %217, %48
  %222 = lshr <4 x i32> %220, %50
  %223 = trunc <4 x i32> %221 to <4 x i8>
  %224 = trunc <4 x i32> %222 to <4 x i8>
  %225 = bitcast i8* %213 to <4 x i8>*
  store <4 x i8> %223, <4 x i8>* %225, align 1, !alias.scope !17, !noalias !14
  %226 = getelementptr i8, i8* %213, i64 4
  %227 = bitcast i8* %226 to <4 x i8>*
  store <4 x i8> %224, <4 x i8>* %227, align 1, !alias.scope !17, !noalias !14
  %228 = add i64 %195, 16
  %229 = add i64 %196, -2
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %194, !llvm.loop !19

231:                                              ; preds = %194, %182
  %232 = phi i64 [ 0, %182 ], [ %228, %194 ]
  %233 = icmp eq i64 %190, 0
  br i1 %233, label %250, label %234

234:                                              ; preds = %231
  %235 = getelementptr i8, i8* %166, i64 %232
  %236 = add i64 %146, %232
  %237 = getelementptr inbounds i32, i32* %31, i64 %236
  %238 = bitcast i32* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4, !alias.scope !14
  %240 = getelementptr inbounds i32, i32* %237, i64 4
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4, !alias.scope !14
  %243 = lshr <4 x i32> %239, %48
  %244 = lshr <4 x i32> %242, %50
  %245 = trunc <4 x i32> %243 to <4 x i8>
  %246 = trunc <4 x i32> %244 to <4 x i8>
  %247 = bitcast i8* %235 to <4 x i8>*
  store <4 x i8> %245, <4 x i8>* %247, align 1, !alias.scope !17, !noalias !14
  %248 = getelementptr i8, i8* %235, i64 4
  %249 = bitcast i8* %248 to <4 x i8>*
  store <4 x i8> %246, <4 x i8>* %249, align 1, !alias.scope !17, !noalias !14
  br label %250

250:                                              ; preds = %231, %234
  %251 = icmp eq i64 %149, %183
  br i1 %251, label %134, label %252

252:                                              ; preds = %250, %171, %169
  %253 = phi i8* [ %166, %171 ], [ %166, %169 ], [ %184, %250 ]
  %254 = phi i64 [ %149, %171 ], [ %149, %169 ], [ %185, %250 ]
  %255 = phi i64 [ %146, %171 ], [ %146, %169 ], [ %186, %250 ]
  %256 = add nsw i64 %254, -1
  %257 = and i64 %254, 3
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %273, label %259

259:                                              ; preds = %252, %259
  %260 = phi i8* [ %270, %259 ], [ %253, %252 ]
  %261 = phi i64 [ %264, %259 ], [ %254, %252 ]
  %262 = phi i64 [ %265, %259 ], [ %255, %252 ]
  %263 = phi i64 [ %271, %259 ], [ %257, %252 ]
  %264 = add nsw i64 %261, -1
  %265 = add nsw i64 %262, 1
  %266 = getelementptr inbounds i32, i32* %31, i64 %262
  %267 = load i32, i32* %266, align 4
  %268 = lshr i32 %267, %44
  %269 = trunc i32 %268 to i8
  store i8 %269, i8* %260, align 1
  %270 = getelementptr inbounds i8, i8* %260, i64 1
  %271 = add i64 %263, -1
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %259, !llvm.loop !20

273:                                              ; preds = %259, %252
  %274 = phi i64 [ undef, %252 ], [ %265, %259 ]
  %275 = phi i8* [ undef, %252 ], [ %270, %259 ]
  %276 = phi i8* [ %253, %252 ], [ %270, %259 ]
  %277 = phi i64 [ %254, %252 ], [ %264, %259 ]
  %278 = phi i64 [ %255, %252 ], [ %265, %259 ]
  %279 = icmp ult i64 %256, 3
  br i1 %279, label %134, label %280

280:                                              ; preds = %273, %280
  %281 = phi i8* [ %308, %280 ], [ %276, %273 ]
  %282 = phi i64 [ %302, %280 ], [ %277, %273 ]
  %283 = phi i64 [ %303, %280 ], [ %278, %273 ]
  %284 = add nsw i64 %283, 1
  %285 = getelementptr inbounds i32, i32* %31, i64 %283
  %286 = load i32, i32* %285, align 4
  %287 = lshr i32 %286, %44
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %281, align 1
  %289 = getelementptr inbounds i8, i8* %281, i64 1
  %290 = add nsw i64 %283, 2
  %291 = getelementptr inbounds i32, i32* %31, i64 %284
  %292 = load i32, i32* %291, align 4
  %293 = lshr i32 %292, %44
  %294 = trunc i32 %293 to i8
  store i8 %294, i8* %289, align 1
  %295 = getelementptr inbounds i8, i8* %281, i64 2
  %296 = add nsw i64 %283, 3
  %297 = getelementptr inbounds i32, i32* %31, i64 %290
  %298 = load i32, i32* %297, align 4
  %299 = lshr i32 %298, %44
  %300 = trunc i32 %299 to i8
  store i8 %300, i8* %295, align 1
  %301 = getelementptr inbounds i8, i8* %281, i64 3
  %302 = add nsw i64 %282, -4
  %303 = add nsw i64 %283, 4
  %304 = getelementptr inbounds i32, i32* %31, i64 %296
  %305 = load i32, i32* %304, align 4
  %306 = lshr i32 %305, %44
  %307 = trunc i32 %306 to i8
  store i8 %307, i8* %301, align 1
  %308 = getelementptr inbounds i8, i8* %281, i64 4
  %309 = icmp eq i64 %302, 0
  br i1 %309, label %134, label %280, !llvm.loop !21

310:                                              ; preds = %138, %129
  %311 = phi i64 [ %130, %129 ], [ %139, %138 ]
  %312 = phi i8* [ %131, %129 ], [ %140, %138 ]
  %313 = phi i64 [ %132, %129 ], [ %141, %138 ]
  %314 = icmp sgt i32 %102, 3
  br i1 %314, label %315, label %325

315:                                              ; preds = %310
  %316 = trunc i32 %102 to i8
  %317 = add i8 %316, 126
  %318 = getelementptr inbounds i8, i8* %312, i64 1
  store i8 %317, i8* %312, align 1
  %319 = getelementptr inbounds i32, i32* %31, i64 %101
  %320 = load i32, i32* %319, align 4
  %321 = lshr i32 %320, %44
  %322 = trunc i32 %321 to i8
  %323 = getelementptr inbounds i8, i8* %312, i64 2
  store i8 %322, i8* %318, align 1
  %324 = add nsw i64 %313, -2
  br label %325

325:                                              ; preds = %310, %315
  %326 = phi i8* [ %323, %315 ], [ %312, %310 ]
  %327 = phi i64 [ %324, %315 ], [ %313, %310 ]
  %328 = phi i32 [ %102, %315 ], [ 0, %310 ]
  %329 = sext i32 %328 to i64
  %330 = add nsw i64 %311, %329
  %331 = icmp slt i64 %330, %11
  br i1 %331, label %51, label %332

332:                                              ; preds = %325, %40
  %333 = phi i8* [ %43, %40 ], [ %326, %325 ]
  %334 = phi i64 [ %42, %40 ], [ %327, %325 ]
  %335 = phi i32 [ %41, %40 ], [ %328, %325 ]
  %336 = add nsw i32 %44, -8
  %337 = icmp sgt i32 %336, -1
  br i1 %337, label %40, label %338

338:                                              ; preds = %332
  store i8* %333, i8** %32, align 8
  %339 = load i64, i64* %34, align 8
  %340 = sub nsw i64 %339, %334
  store i64 %340, i64* %36, align 8
  br label %341

341:                                              ; preds = %57, %152, %338, %21
  %342 = phi i32 [ 1, %338 ], [ 0, %21 ], [ 0, %152 ], [ 0, %57 ]
  ret i32 %342

343:                                              ; preds = %87
  %344 = getelementptr inbounds i32, i32* %31, i64 %89
  %345 = load i32, i32* %344, align 4
  %346 = xor i32 %345, %76
  %347 = and i32 %346, %46
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %91

349:                                              ; preds = %343
  %350 = add nuw nsw i64 %78, 2
  %351 = icmp eq i64 %350, 129
  br i1 %351, label %100, label %77
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv32fromXYZ(%struct.logLuvState* nocapture readonly, i8* nocapture readonly, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %21

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 2
  br label %11

11:                                               ; preds = %5, %11
  %12 = phi float* [ %6, %5 ], [ %19, %11 ]
  %13 = phi i32* [ %9, %5 ], [ %18, %11 ]
  %14 = phi i64 [ %2, %5 ], [ %15, %11 ]
  %15 = add nsw i64 %14, -1
  %16 = load i32, i32* %10, align 8
  %17 = tail call i32 @LogLuv32fromXYZ(float* %12, i32 %16)
  %18 = getelementptr inbounds i32, i32* %13, i64 1
  store i32 %17, i32* %13, align 4
  %19 = getelementptr inbounds float, float* %12, i64 3
  %20 = icmp sgt i64 %15, 0
  br i1 %20, label %11, label %21

21:                                               ; preds = %11, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Luv32fromLuv48(%struct.logLuvState* nocapture readonly, i8* nocapture readonly, i64) #3 {
  %4 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %5 = bitcast i8** %4 to i32**
  %6 = load i32*, i32** %5, align 8
  %7 = bitcast i8* %1 to i16*
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = icmp sgt i64 %2, 0
  br i1 %10, label %13, label %12

12:                                               ; preds = %3
  br i1 %11, label %39, label %88

13:                                               ; preds = %3
  br i1 %11, label %14, label %88

14:                                               ; preds = %13, %14
  %15 = phi i16* [ %37, %14 ], [ %7, %13 ]
  %16 = phi i32* [ %36, %14 ], [ %6, %13 ]
  %17 = phi i64 [ %18, %14 ], [ %2, %13 ]
  %18 = add nsw i64 %17, -1
  %19 = load i16, i16* %15, align 2
  %20 = zext i16 %19 to i32
  %21 = shl nuw i32 %20, 16
  %22 = getelementptr inbounds i16, i16* %15, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = mul nsw i32 %24, 410
  %26 = lshr i32 %25, 7
  %27 = and i32 %26, 65280
  %28 = or i32 %27, %21
  %29 = getelementptr inbounds i16, i16* %15, i64 2
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 410
  %33 = lshr i32 %32, 15
  %34 = and i32 %33, 255
  %35 = or i32 %28, %34
  %36 = getelementptr inbounds i32, i32* %16, i64 1
  store i32 %35, i32* %16, align 4
  %37 = getelementptr inbounds i16, i16* %15, i64 3
  %38 = icmp sgt i64 %18, 0
  br i1 %38, label %14, label %88

39:                                               ; preds = %12, %84
  %40 = phi i32 [ %87, %84 ], [ %9, %12 ]
  %41 = phi i16* [ %85, %84 ], [ %7, %12 ]
  %42 = phi i32* [ %86, %84 ], [ %6, %12 ]
  %43 = phi i64 [ %44, %84 ], [ %2, %12 ]
  %44 = add nsw i64 %43, -1
  %45 = load i16, i16* %41, align 2
  %46 = zext i16 %45 to i32
  %47 = shl nuw i32 %46, 16
  %48 = getelementptr inbounds i16, i16* %41, i64 1
  %49 = load i16, i16* %48, align 2
  %50 = sitofp i16 %49 to double
  %51 = fmul double %50, 0x3F89A00000000000
  %52 = icmp eq i32 %40, 0
  br i1 %52, label %60, label %53

53:                                               ; preds = %39
  %54 = tail call i32 @rand() #10
  %55 = sitofp i32 %54 to double
  %56 = fmul double %55, 0x3E00000000200000
  %57 = fadd double %51, %56
  %58 = fadd double %57, -5.000000e-01
  %59 = load i32, i32* %8, align 8
  br label %60

60:                                               ; preds = %39, %53
  %61 = phi i32 [ %59, %53 ], [ 0, %39 ]
  %62 = phi double [ %58, %53 ], [ %51, %39 ]
  %63 = fptosi double %62 to i32
  %64 = shl i32 %63, 8
  %65 = and i32 %64, 65280
  %66 = or i32 %65, %47
  %67 = getelementptr inbounds i16, i16* %41, i64 2
  %68 = load i16, i16* %67, align 2
  %69 = sitofp i16 %68 to double
  %70 = fmul double %69, 0x3F89A00000000000
  %71 = icmp eq i32 %61, 0
  br i1 %71, label %78, label %72

72:                                               ; preds = %60
  %73 = tail call i32 @rand() #10
  %74 = sitofp i32 %73 to double
  %75 = fmul double %74, 0x3E00000000200000
  %76 = fadd double %70, %75
  %77 = fadd double %76, -5.000000e-01
  br label %78

78:                                               ; preds = %60, %72
  %79 = phi double [ %77, %72 ], [ %70, %60 ]
  %80 = fptosi double %79 to i32
  %81 = and i32 %80, 255
  %82 = or i32 %66, %81
  store i32 %82, i32* %42, align 4
  %83 = icmp sgt i64 %44, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %78
  %85 = getelementptr inbounds i16, i16* %41, i64 3
  %86 = getelementptr inbounds i32, i32* %42, i64 1
  %87 = load i32, i32* %8, align 8
  br label %39

88:                                               ; preds = %78, %14, %12, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @LogL16Encode(%struct.tiff*, i8*, i64, i16 zeroext) #3 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.logLuvState**
  %7 = load %struct.logLuvState*, %struct.logLuvState** %6, align 8
  %8 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sdiv i64 %2, %10
  %12 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = bitcast i8* %1 to i16*
  br label %30

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, %11
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %23 = load i8*, i8** %22, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @LogL16Encode.module, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %358

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i16**
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %7, i64 0, i32 6
  %29 = load void (%struct.logLuvState*, i8*, i64)*, void (%struct.logLuvState*, i8*, i64)** %28, align 8
  tail call void %29(%struct.logLuvState* %7, i8* %1, i64 %11) #10
  br label %30

30:                                               ; preds = %24, %15
  %31 = phi i16* [ %16, %15 ], [ %27, %24 ]
  %32 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %37 = load i64, i64* %36, align 8
  %38 = sub nsw i64 %35, %37
  %39 = icmp sgt i64 %11, 0
  br label %40

40:                                               ; preds = %30, %349
  %41 = phi i32 [ 0, %30 ], [ %352, %349 ]
  %42 = phi i64 [ %38, %30 ], [ %351, %349 ]
  %43 = phi i8* [ %33, %30 ], [ %350, %349 ]
  %44 = phi i32 [ 8, %30 ], [ %353, %349 ]
  br i1 %39, label %45, label %349

45:                                               ; preds = %40
  %46 = shl i32 255, %44
  %47 = trunc i32 %46 to i16
  %48 = insertelement <8 x i32> undef, i32 %44, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = insertelement <8 x i32> undef, i32 %44, i32 0
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %52

52:                                               ; preds = %45, %342
  %53 = phi i32 [ %41, %45 ], [ %345, %342 ]
  %54 = phi i64 [ %42, %45 ], [ %344, %342 ]
  %55 = phi i8* [ %43, %45 ], [ %343, %342 ]
  %56 = phi i64 [ 0, %45 ], [ %347, %342 ]
  %57 = icmp slt i64 %54, 4
  br i1 %57, label %58, label %68

58:                                               ; preds = %52
  store i8* %55, i8** %32, align 8
  %59 = load i64, i64* %34, align 8
  %60 = sub nsw i64 %59, %54
  store i64 %60, i64* %36, align 8
  %61 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #10
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %358, label %63

63:                                               ; preds = %58
  %64 = load i8*, i8** %32, align 8
  %65 = load i64, i64* %34, align 8
  %66 = load i64, i64* %36, align 8
  %67 = sub nsw i64 %65, %66
  br label %68

68:                                               ; preds = %63, %52
  %69 = phi i8* [ %64, %63 ], [ %55, %52 ]
  %70 = phi i64 [ %67, %63 ], [ %54, %52 ]
  %71 = icmp slt i64 %56, %11
  br i1 %71, label %74, label %103

72:                                               ; preds = %94
  %73 = icmp slt i64 %99, %11
  br i1 %73, label %74, label %100

74:                                               ; preds = %68, %72
  %75 = phi i64 [ %99, %72 ], [ %56, %68 ]
  %76 = getelementptr inbounds i16, i16* %31, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = and i16 %77, %47
  %79 = sext i16 %78 to i32
  br label %80

80:                                               ; preds = %366, %74
  %81 = phi i64 [ 1, %74 ], [ %367, %366 ]
  %82 = add nsw i64 %75, %81
  %83 = icmp slt i64 %82, %11
  br i1 %83, label %84, label %94

84:                                               ; preds = %80
  %85 = getelementptr inbounds i16, i16* %31, i64 %82
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = and i32 %46, %87
  %89 = icmp eq i32 %88, %79
  br i1 %89, label %90, label %94

90:                                               ; preds = %84
  %91 = add nuw nsw i64 %81, 1
  %92 = add nsw i64 %75, %91
  %93 = icmp slt i64 %92, %11
  br i1 %93, label %360, label %94

94:                                               ; preds = %360, %90, %80, %84
  %95 = phi i64 [ %81, %80 ], [ %81, %84 ], [ %91, %90 ], [ %91, %360 ]
  %96 = trunc i64 %95 to i32
  %97 = icmp ugt i32 %96, 3
  %98 = and i64 %95, 4294967295
  %99 = add nsw i64 %75, %98
  br i1 %97, label %100, label %72

100:                                              ; preds = %94, %72
  %101 = phi i64 [ %99, %72 ], [ %75, %94 ]
  %102 = trunc i64 %95 to i32
  br label %103

103:                                              ; preds = %366, %100, %68
  %104 = phi i64 [ %56, %68 ], [ %101, %100 ], [ %75, %366 ]
  %105 = phi i32 [ %53, %68 ], [ %102, %100 ], [ 129, %366 ]
  %106 = sub nsw i64 %104, %56
  %107 = and i64 %106, -2
  %108 = icmp eq i64 %107, 2
  br i1 %108, label %109, label %134

109:                                              ; preds = %103
  %110 = getelementptr inbounds i16, i16* %31, i64 %56
  %111 = load i16, i16* %110, align 2
  %112 = and i16 %111, %47
  %113 = add nsw i64 %56, 1
  %114 = sext i16 %112 to i32
  br label %115

115:                                              ; preds = %123, %109
  %116 = phi i64 [ %113, %109 ], [ %117, %123 ]
  %117 = add nsw i64 %116, 1
  %118 = getelementptr inbounds i16, i16* %31, i64 %116
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i32
  %121 = and i32 %46, %120
  %122 = icmp eq i32 %121, %114
  br i1 %122, label %123, label %134

123:                                              ; preds = %115
  %124 = icmp eq i64 %117, %104
  br i1 %124, label %125, label %115

125:                                              ; preds = %123
  %126 = sub i64 127, %56
  %127 = add i64 %126, %116
  %128 = trunc i64 %127 to i8
  %129 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %128, i8* %69, align 1
  %130 = ashr i32 %114, %44
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %131, i8* %129, align 1
  %133 = add nsw i64 %70, -2
  br label %134

134:                                              ; preds = %115, %125, %103
  %135 = phi i64 [ %104, %125 ], [ %56, %103 ], [ %56, %115 ]
  %136 = phi i8* [ %132, %125 ], [ %69, %103 ], [ %69, %115 ]
  %137 = phi i64 [ %133, %125 ], [ %70, %103 ], [ %70, %115 ]
  %138 = icmp sgt i64 %104, %135
  br i1 %138, label %148, label %326

139:                                              ; preds = %285, %292, %261
  %140 = phi i64 [ %191, %261 ], [ %286, %285 ], [ %318, %292 ]
  %141 = phi i8* [ %189, %261 ], [ %287, %285 ], [ %324, %292 ]
  %142 = sub i64 %172, %154
  br label %143

143:                                              ; preds = %139, %167
  %144 = phi i64 [ %151, %167 ], [ %140, %139 ]
  %145 = phi i8* [ %171, %167 ], [ %141, %139 ]
  %146 = phi i64 [ %172, %167 ], [ %142, %139 ]
  %147 = icmp sgt i64 %104, %144
  br i1 %147, label %148, label %326

148:                                              ; preds = %134, %143
  %149 = phi i64 [ %146, %143 ], [ %137, %134 ]
  %150 = phi i8* [ %145, %143 ], [ %136, %134 ]
  %151 = phi i64 [ %144, %143 ], [ %135, %134 ]
  %152 = sub nsw i64 %104, %151
  %153 = icmp slt i64 %152, 127
  %154 = select i1 %153, i64 %152, i64 127
  %155 = add nsw i64 %154, 3
  %156 = icmp slt i64 %149, %155
  br i1 %156, label %157, label %167

157:                                              ; preds = %148
  store i8* %150, i8** %32, align 8
  %158 = load i64, i64* %34, align 8
  %159 = sub nsw i64 %158, %149
  store i64 %159, i64* %36, align 8
  %160 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #10
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %358, label %162

162:                                              ; preds = %157
  %163 = load i8*, i8** %32, align 8
  %164 = load i64, i64* %34, align 8
  %165 = load i64, i64* %36, align 8
  %166 = sub nsw i64 %164, %165
  br label %167

167:                                              ; preds = %162, %148
  %168 = phi i8* [ %163, %162 ], [ %150, %148 ]
  %169 = phi i64 [ %166, %162 ], [ %149, %148 ]
  %170 = trunc i64 %154 to i8
  store i8 %170, i8* %168, align 1
  %171 = getelementptr inbounds i8, i8* %168, i64 1
  %172 = add i64 %169, -1
  %173 = icmp eq i64 %154, 0
  br i1 %173, label %143, label %174

174:                                              ; preds = %167
  %175 = icmp ult i64 %154, 16
  br i1 %175, label %263, label %176

176:                                              ; preds = %174
  %177 = getelementptr i8, i8* %168, i64 1
  %178 = getelementptr i8, i8* %177, i64 %154
  %179 = getelementptr i16, i16* %31, i64 %151
  %180 = bitcast i16* %179 to i8*
  %181 = add i64 %151, %154
  %182 = getelementptr i16, i16* %31, i64 %181
  %183 = bitcast i16* %182 to i8*
  %184 = icmp ult i8* %171, %183
  %185 = icmp ugt i8* %178, %180
  %186 = and i1 %184, %185
  br i1 %186, label %263, label %187

187:                                              ; preds = %176
  %188 = and i64 %154, -16
  %189 = getelementptr i8, i8* %171, i64 %188
  %190 = sub i64 %154, %188
  %191 = add i64 %151, %188
  %192 = add i64 %188, -16
  %193 = lshr exact i64 %192, 4
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 1
  %196 = icmp eq i64 %192, 0
  br i1 %196, label %240, label %197

197:                                              ; preds = %187
  %198 = sub nuw nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %237, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %238, %199 ]
  %202 = getelementptr i8, i8* %171, i64 %200
  %203 = add i64 %151, %200
  %204 = getelementptr inbounds i16, i16* %31, i64 %203
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !22
  %207 = getelementptr inbounds i16, i16* %204, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !22
  %210 = sext <8 x i16> %206 to <8 x i32>
  %211 = sext <8 x i16> %209 to <8 x i32>
  %212 = ashr <8 x i32> %210, %49
  %213 = ashr <8 x i32> %211, %51
  %214 = trunc <8 x i32> %212 to <8 x i8>
  %215 = trunc <8 x i32> %213 to <8 x i8>
  %216 = bitcast i8* %202 to <8 x i8>*
  store <8 x i8> %214, <8 x i8>* %216, align 1, !alias.scope !25, !noalias !22
  %217 = getelementptr i8, i8* %202, i64 8
  %218 = bitcast i8* %217 to <8 x i8>*
  store <8 x i8> %215, <8 x i8>* %218, align 1, !alias.scope !25, !noalias !22
  %219 = or i64 %200, 16
  %220 = getelementptr i8, i8* %171, i64 %219
  %221 = add i64 %151, %219
  %222 = getelementptr inbounds i16, i16* %31, i64 %221
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !22
  %225 = getelementptr inbounds i16, i16* %222, i64 8
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !22
  %228 = sext <8 x i16> %224 to <8 x i32>
  %229 = sext <8 x i16> %227 to <8 x i32>
  %230 = ashr <8 x i32> %228, %49
  %231 = ashr <8 x i32> %229, %51
  %232 = trunc <8 x i32> %230 to <8 x i8>
  %233 = trunc <8 x i32> %231 to <8 x i8>
  %234 = bitcast i8* %220 to <8 x i8>*
  store <8 x i8> %232, <8 x i8>* %234, align 1, !alias.scope !25, !noalias !22
  %235 = getelementptr i8, i8* %220, i64 8
  %236 = bitcast i8* %235 to <8 x i8>*
  store <8 x i8> %233, <8 x i8>* %236, align 1, !alias.scope !25, !noalias !22
  %237 = add i64 %200, 32
  %238 = add i64 %201, -2
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %199, !llvm.loop !27

240:                                              ; preds = %199, %187
  %241 = phi i64 [ 0, %187 ], [ %237, %199 ]
  %242 = icmp eq i64 %195, 0
  br i1 %242, label %261, label %243

243:                                              ; preds = %240
  %244 = getelementptr i8, i8* %171, i64 %241
  %245 = add i64 %151, %241
  %246 = getelementptr inbounds i16, i16* %31, i64 %245
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2, !alias.scope !22
  %249 = getelementptr inbounds i16, i16* %246, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !22
  %252 = sext <8 x i16> %248 to <8 x i32>
  %253 = sext <8 x i16> %251 to <8 x i32>
  %254 = ashr <8 x i32> %252, %49
  %255 = ashr <8 x i32> %253, %51
  %256 = trunc <8 x i32> %254 to <8 x i8>
  %257 = trunc <8 x i32> %255 to <8 x i8>
  %258 = bitcast i8* %244 to <8 x i8>*
  store <8 x i8> %256, <8 x i8>* %258, align 1, !alias.scope !25, !noalias !22
  %259 = getelementptr i8, i8* %244, i64 8
  %260 = bitcast i8* %259 to <8 x i8>*
  store <8 x i8> %257, <8 x i8>* %260, align 1, !alias.scope !25, !noalias !22
  br label %261

261:                                              ; preds = %240, %243
  %262 = icmp eq i64 %154, %188
  br i1 %262, label %139, label %263

263:                                              ; preds = %261, %176, %174
  %264 = phi i8* [ %171, %176 ], [ %171, %174 ], [ %189, %261 ]
  %265 = phi i64 [ %154, %176 ], [ %154, %174 ], [ %190, %261 ]
  %266 = phi i64 [ %151, %176 ], [ %151, %174 ], [ %191, %261 ]
  %267 = add nsw i64 %265, -1
  %268 = and i64 %265, 3
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %285, label %270

270:                                              ; preds = %263, %270
  %271 = phi i8* [ %282, %270 ], [ %264, %263 ]
  %272 = phi i64 [ %275, %270 ], [ %265, %263 ]
  %273 = phi i64 [ %276, %270 ], [ %266, %263 ]
  %274 = phi i64 [ %283, %270 ], [ %268, %263 ]
  %275 = add nsw i64 %272, -1
  %276 = add nsw i64 %273, 1
  %277 = getelementptr inbounds i16, i16* %31, i64 %273
  %278 = load i16, i16* %277, align 2
  %279 = sext i16 %278 to i32
  %280 = ashr i32 %279, %44
  %281 = trunc i32 %280 to i8
  store i8 %281, i8* %271, align 1
  %282 = getelementptr inbounds i8, i8* %271, i64 1
  %283 = add i64 %274, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %270, !llvm.loop !28

285:                                              ; preds = %270, %263
  %286 = phi i64 [ undef, %263 ], [ %276, %270 ]
  %287 = phi i8* [ undef, %263 ], [ %282, %270 ]
  %288 = phi i8* [ %264, %263 ], [ %282, %270 ]
  %289 = phi i64 [ %265, %263 ], [ %275, %270 ]
  %290 = phi i64 [ %266, %263 ], [ %276, %270 ]
  %291 = icmp ult i64 %267, 3
  br i1 %291, label %139, label %292

292:                                              ; preds = %285, %292
  %293 = phi i8* [ %324, %292 ], [ %288, %285 ]
  %294 = phi i64 [ %317, %292 ], [ %289, %285 ]
  %295 = phi i64 [ %318, %292 ], [ %290, %285 ]
  %296 = add nsw i64 %295, 1
  %297 = getelementptr inbounds i16, i16* %31, i64 %295
  %298 = load i16, i16* %297, align 2
  %299 = sext i16 %298 to i32
  %300 = ashr i32 %299, %44
  %301 = trunc i32 %300 to i8
  store i8 %301, i8* %293, align 1
  %302 = getelementptr inbounds i8, i8* %293, i64 1
  %303 = add nsw i64 %295, 2
  %304 = getelementptr inbounds i16, i16* %31, i64 %296
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i32
  %307 = ashr i32 %306, %44
  %308 = trunc i32 %307 to i8
  store i8 %308, i8* %302, align 1
  %309 = getelementptr inbounds i8, i8* %293, i64 2
  %310 = add nsw i64 %295, 3
  %311 = getelementptr inbounds i16, i16* %31, i64 %303
  %312 = load i16, i16* %311, align 2
  %313 = sext i16 %312 to i32
  %314 = ashr i32 %313, %44
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %309, align 1
  %316 = getelementptr inbounds i8, i8* %293, i64 3
  %317 = add nsw i64 %294, -4
  %318 = add nsw i64 %295, 4
  %319 = getelementptr inbounds i16, i16* %31, i64 %310
  %320 = load i16, i16* %319, align 2
  %321 = sext i16 %320 to i32
  %322 = ashr i32 %321, %44
  %323 = trunc i32 %322 to i8
  store i8 %323, i8* %316, align 1
  %324 = getelementptr inbounds i8, i8* %293, i64 4
  %325 = icmp eq i64 %317, 0
  br i1 %325, label %139, label %292, !llvm.loop !29

326:                                              ; preds = %143, %134
  %327 = phi i64 [ %135, %134 ], [ %144, %143 ]
  %328 = phi i8* [ %136, %134 ], [ %145, %143 ]
  %329 = phi i64 [ %137, %134 ], [ %146, %143 ]
  %330 = icmp sgt i32 %105, 3
  br i1 %330, label %331, label %342

331:                                              ; preds = %326
  %332 = trunc i32 %105 to i8
  %333 = add i8 %332, 126
  %334 = getelementptr inbounds i8, i8* %328, i64 1
  store i8 %333, i8* %328, align 1
  %335 = getelementptr inbounds i16, i16* %31, i64 %104
  %336 = load i16, i16* %335, align 2
  %337 = sext i16 %336 to i32
  %338 = ashr i32 %337, %44
  %339 = trunc i32 %338 to i8
  %340 = getelementptr inbounds i8, i8* %328, i64 2
  store i8 %339, i8* %334, align 1
  %341 = add nsw i64 %329, -2
  br label %342

342:                                              ; preds = %326, %331
  %343 = phi i8* [ %340, %331 ], [ %328, %326 ]
  %344 = phi i64 [ %341, %331 ], [ %329, %326 ]
  %345 = phi i32 [ %105, %331 ], [ 0, %326 ]
  %346 = sext i32 %345 to i64
  %347 = add nsw i64 %327, %346
  %348 = icmp slt i64 %347, %11
  br i1 %348, label %52, label %349

349:                                              ; preds = %342, %40
  %350 = phi i8* [ %43, %40 ], [ %343, %342 ]
  %351 = phi i64 [ %42, %40 ], [ %344, %342 ]
  %352 = phi i32 [ %41, %40 ], [ %345, %342 ]
  %353 = add nsw i32 %44, -8
  %354 = icmp sgt i32 %353, -1
  br i1 %354, label %40, label %355

355:                                              ; preds = %349
  store i8* %350, i8** %32, align 8
  %356 = load i64, i64* %34, align 8
  %357 = sub nsw i64 %356, %351
  store i64 %357, i64* %36, align 8
  br label %358

358:                                              ; preds = %58, %157, %355, %21
  %359 = phi i32 [ 1, %355 ], [ 0, %21 ], [ 0, %157 ], [ 0, %58 ]
  ret i32 %359

360:                                              ; preds = %90
  %361 = getelementptr inbounds i16, i16* %31, i64 %92
  %362 = load i16, i16* %361, align 2
  %363 = sext i16 %362 to i32
  %364 = and i32 %46, %363
  %365 = icmp eq i32 %364, %79
  br i1 %365, label %366, label %94

366:                                              ; preds = %360
  %367 = add nuw nsw i64 %81, 2
  %368 = icmp eq i64 %367, 129
  br i1 %368, label %103, label %80
}

; Function Attrs: nounwind ssp uwtable
define internal void @L16fromY(%struct.logLuvState* nocapture readonly, i8* nocapture readonly, i64) #3 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %24

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to float*
  %7 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %struct.logLuvState, %struct.logLuvState* %0, i64 0, i32 2
  br label %11

11:                                               ; preds = %5, %11
  %12 = phi float* [ %6, %5 ], [ %16, %11 ]
  %13 = phi i16* [ %9, %5 ], [ %22, %11 ]
  %14 = phi i64 [ %2, %5 ], [ %15, %11 ]
  %15 = add nsw i64 %14, -1
  %16 = getelementptr inbounds float, float* %12, i64 1
  %17 = load float, float* %12, align 4
  %18 = fpext float %17 to double
  %19 = load i32, i32* %10, align 8
  %20 = tail call i32 @LogL16fromY(double %18, i32 %19)
  %21 = trunc i32 %20 to i16
  %22 = getelementptr inbounds i16, i16* %13, i64 1
  store i16 %21, i16* %13, align 2
  %23 = icmp sgt i64 %15, 0
  br i1 %23, label %11, label %24

24:                                               ; preds = %11, %3
  ret void
}

declare i32 @TIFFFlushData1(%struct.tiff*) local_unnamed_addr #5

declare void @_TIFFfree(i8*) local_unnamed_addr #5

declare void @_TIFFSetDefaultCompressionState(%struct.tiff*) local_unnamed_addr #5

declare i32 @TIFFSetField(%struct.tiff*, i32, ...) local_unnamed_addr #5

declare i64 @TIFFTileSize(%struct.tiff*) local_unnamed_addr #5

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !6, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !6, !3}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !9}
!29 = distinct !{!29, !3}
