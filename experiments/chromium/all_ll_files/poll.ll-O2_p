; ModuleID = '../../base/third_party/libevent/poll.c'
source_filename = "../../base/third_party/libevent/poll.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.event_base = type { %struct.eventop*, i8*, i32, i32, i32, i32, %struct.event_list**, i32, %struct.evsignal_info, %struct.event_list, %struct.timeval, %struct.min_heap, %struct.timeval }
%struct.eventop = type { i8*, {}*, i32 (i8*, %struct.event*)*, i32 (i8*, %struct.event*)*, i32 (%struct.event_base*, i8*, %struct.timeval*)*, void (%struct.event_base*, i8*)*, i32 }
%struct.evsignal_info = type { %struct.event, [2 x i32], i32, i32, [65 x %struct.event_list], [65 x i32], %struct.sigaction**, i32 }
%struct.event = type { %struct.anon, %struct.anon.0, %struct.anon.1, i32, %struct.event_base*, i32, i16, i16, i16*, %struct.timeval, i32, void (i32, i16, i8*)*, i8*, i32, i32 }
%struct.anon = type { %struct.event*, %struct.event** }
%struct.anon.0 = type { %struct.event*, %struct.event** }
%struct.anon.1 = type { %struct.event*, %struct.event** }
%struct.sigaction = type { %union.anon, %struct.__sigset_t, i32, void ()* }
%union.anon = type { void (i32)* }
%struct.__sigset_t = type { [16 x i64] }
%struct.event_list = type { %struct.event*, %struct.event** }
%struct.min_heap = type { %struct.event**, i32, i32 }
%struct.timeval = type { i64, i64 }
%struct.pollfd = type { i32, i16, i16 }

@.str = private unnamed_addr constant [5 x i8] c"poll\00", align 1
@pollops = hidden local_unnamed_addr constant { i8*, i8* (%struct.event_base*)*, i32 (i8*, %struct.event*)*, i32 (i8*, %struct.event*)*, i32 (%struct.event_base*, i8*, %struct.timeval*)*, void (%struct.event_base*, i8*)*, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* (%struct.event_base*)* @poll_init, i32 (i8*, %struct.event*)* @poll_add, i32 (i8*, %struct.event*)* @poll_del, i32 (%struct.event_base*, i8*, %struct.timeval*)* @poll_dispatch, void (%struct.event_base*, i8*)* @poll_dealloc, i32 0 }, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"EVENT_NOPOLL\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @poll_init(%struct.event_base*) #0 {
  %2 = tail call i8* @evutil_getenv(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #6
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = tail call noalias i8* @calloc(i64 1, i64 48) #6
  %6 = icmp eq i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = tail call i32 @evsignal_init(%struct.event_base* %0) #6
  br label %9

9:                                                ; preds = %4, %1, %7
  %10 = phi i8* [ %5, %7 ], [ null, %1 ], [ null, %4 ]
  ret i8* %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @poll_add(i8* nocapture, %struct.event*) #0 {
  %3 = getelementptr inbounds %struct.event, %struct.event* %1, i64 0, i32 6
  %4 = load i16, i16* %3, align 4
  %5 = sext i16 %4 to i32
  %6 = and i32 %5, 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @evsignal_add(%struct.event* %1) #6
  br label %155

10:                                               ; preds = %2
  %11 = and i32 %5, 6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %155, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, 1
  %18 = bitcast i8* %0 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %17, %19
  br i1 %20, label %48, label %21

21:                                               ; preds = %13
  %22 = icmp slt i32 %19, 32
  %23 = shl nsw i32 %19, 1
  %24 = select i1 %22, i32 32, i32 %23
  %25 = getelementptr inbounds i8, i8* %0, i64 16
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = sext i32 %24 to i64
  %29 = shl nsw i64 %28, 3
  %30 = tail call i8* @realloc(i8* %27, i64 %29) #6
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %21
  tail call void (i8*, ...) @event_warn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %155

33:                                               ; preds = %21
  store i8* %30, i8** %26, align 8
  %34 = getelementptr inbounds i8, i8* %0, i64 24
  %35 = bitcast i8* %34 to i8**
  %36 = load i8*, i8** %35, align 8
  %37 = tail call i8* @realloc(i8* %36, i64 %29) #6
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %33
  tail call void (i8*, ...) @event_warn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %155

40:                                               ; preds = %33
  store i8* %37, i8** %35, align 8
  %41 = getelementptr inbounds i8, i8* %0, i64 32
  %42 = bitcast i8* %41 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = tail call i8* @realloc(i8* %43, i64 %29) #6
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %40
  tail call void (i8*, ...) @event_warn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %155

47:                                               ; preds = %40
  store i8* %44, i8** %42, align 8
  store i32 %24, i32* %18, align 8
  br label %48

48:                                               ; preds = %47, %13
  %49 = getelementptr inbounds %struct.event, %struct.event* %1, i64 0, i32 5
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds i8, i8* %0, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = icmp slt i32 %50, %53
  br i1 %54, label %55, label %59

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %0, i64 40
  %57 = bitcast i8* %56 to i32**
  %58 = load i32*, i32** %57, align 8
  br label %87

59:                                               ; preds = %48
  %60 = icmp slt i32 %53, 32
  %61 = shl nsw i32 %53, 1
  %62 = select i1 %60, i32 32, i32 %61
  br label %63

63:                                               ; preds = %63, %59
  %64 = phi i32 [ %62, %59 ], [ %66, %63 ]
  %65 = icmp sgt i32 %64, %50
  %66 = shl nsw i32 %64, 1
  br i1 %65, label %67, label %63

67:                                               ; preds = %63
  %68 = getelementptr inbounds i8, i8* %0, i64 40
  %69 = bitcast i8* %68 to i8**
  %70 = load i8*, i8** %69, align 8
  %71 = sext i32 %64 to i64
  %72 = shl nsw i64 %71, 2
  %73 = tail call i8* @realloc(i8* %70, i64 %72) #6
  %74 = icmp eq i8* %73, null
  br i1 %74, label %75, label %76

75:                                               ; preds = %67
  tail call void (i8*, ...) @event_warn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %155

76:                                               ; preds = %67
  %77 = bitcast i8* %73 to i32*
  store i8* %73, i8** %69, align 8
  %78 = load i32, i32* %52, align 8
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %77, i64 %79
  %81 = bitcast i32* %80 to i8*
  %82 = sub nsw i32 %64, %78
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %81, i8 0, i64 %84, i1 false)
  store i32 %64, i32* %52, align 8
  %85 = load i32, i32* %49, align 8
  %86 = bitcast i8* %68 to i32**
  br label %87

87:                                               ; preds = %55, %76
  %88 = phi i32** [ %57, %55 ], [ %86, %76 ]
  %89 = phi i32 [ %50, %55 ], [ %85, %76 ]
  %90 = phi i32* [ %58, %55 ], [ %77, %76 ]
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds i32, i32* %90, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add nsw i32 %93, -1
  %95 = icmp sgt i32 %93, 0
  br i1 %95, label %96, label %102

96:                                               ; preds = %87
  %97 = getelementptr inbounds i8, i8* %0, i64 16
  %98 = bitcast i8* %97 to %struct.pollfd**
  %99 = load %struct.pollfd*, %struct.pollfd** %98, align 8
  %100 = sext i32 %94 to i64
  %101 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %99, i64 %100
  br label %125

102:                                              ; preds = %87
  %103 = load i32, i32* %15, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %15, align 4
  %105 = getelementptr inbounds i8, i8* %0, i64 16
  %106 = bitcast i8* %105 to %struct.pollfd**
  %107 = load %struct.pollfd*, %struct.pollfd** %106, align 8
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %107, i64 %108
  %110 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %107, i64 %108, i32 1
  store i16 0, i16* %110, align 4
  %111 = load i32, i32* %49, align 8
  %112 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %109, i64 0, i32 0
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds i8, i8* %0, i64 24
  %114 = bitcast i8* %113 to %struct.event***
  %115 = load %struct.event**, %struct.event*** %114, align 8
  %116 = getelementptr inbounds %struct.event*, %struct.event** %115, i64 %108
  store %struct.event* null, %struct.event** %116, align 8
  %117 = getelementptr inbounds i8, i8* %0, i64 32
  %118 = bitcast i8* %117 to %struct.event***
  %119 = load %struct.event**, %struct.event*** %118, align 8
  %120 = getelementptr inbounds %struct.event*, %struct.event** %119, i64 %108
  store %struct.event* null, %struct.event** %120, align 8
  %121 = load i32*, i32** %88, align 8
  %122 = load i32, i32* %49, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i32, i32* %121, i64 %123
  store i32 %104, i32* %124, align 4
  br label %125

125:                                              ; preds = %102, %96
  %126 = phi %struct.pollfd* [ %101, %96 ], [ %109, %102 ]
  %127 = phi i32 [ %94, %96 ], [ %103, %102 ]
  %128 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %126, i64 0, i32 2
  store i16 0, i16* %128, align 2
  %129 = load i16, i16* %3, align 4
  %130 = and i16 %129, 4
  %131 = icmp eq i16 %130, 0
  br i1 %131, label %142, label %132

132:                                              ; preds = %125
  %133 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %126, i64 0, i32 1
  %134 = load i16, i16* %133, align 4
  %135 = or i16 %134, 4
  store i16 %135, i16* %133, align 4
  %136 = getelementptr inbounds i8, i8* %0, i64 32
  %137 = bitcast i8* %136 to %struct.event***
  %138 = load %struct.event**, %struct.event*** %137, align 8
  %139 = sext i32 %127 to i64
  %140 = getelementptr inbounds %struct.event*, %struct.event** %138, i64 %139
  store %struct.event* %1, %struct.event** %140, align 8
  %141 = load i16, i16* %3, align 4
  br label %142

142:                                              ; preds = %125, %132
  %143 = phi i16 [ %129, %125 ], [ %141, %132 ]
  %144 = and i16 %143, 2
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %126, i64 0, i32 1
  %148 = load i16, i16* %147, align 4
  %149 = or i16 %148, 1
  store i16 %149, i16* %147, align 4
  %150 = getelementptr inbounds i8, i8* %0, i64 24
  %151 = bitcast i8* %150 to %struct.event***
  %152 = load %struct.event**, %struct.event*** %151, align 8
  %153 = sext i32 %127 to i64
  %154 = getelementptr inbounds %struct.event*, %struct.event** %152, i64 %153
  store %struct.event* %1, %struct.event** %154, align 8
  br label %155

155:                                              ; preds = %146, %142, %75, %46, %39, %32, %10, %8
  %156 = phi i32 [ %9, %8 ], [ 0, %10 ], [ -1, %32 ], [ -1, %39 ], [ -1, %46 ], [ -1, %75 ], [ 0, %142 ], [ 0, %146 ]
  ret i32 %156
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @poll_del(i8* nocapture, %struct.event*) #0 {
  %3 = getelementptr inbounds %struct.event, %struct.event* %1, i64 0, i32 6
  %4 = load i16, i16* %3, align 4
  %5 = sext i16 %4 to i32
  %6 = and i32 %5, 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @evsignal_del(%struct.event* %1) #6
  br label %100

10:                                               ; preds = %2
  %11 = and i32 %5, 6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %100, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %0, i64 40
  %15 = bitcast i8* %14 to i32**
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %struct.event, %struct.event* %1, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %16, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, -1
  %23 = icmp slt i32 %21, 1
  br i1 %23, label %100, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds i8, i8* %0, i64 16
  %26 = bitcast i8* %25 to %struct.pollfd**
  %27 = load %struct.pollfd*, %struct.pollfd** %26, align 8
  %28 = sext i32 %22 to i64
  %29 = and i32 %5, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %27, i64 %28, i32 1
  %33 = load i16, i16* %32, align 4
  %34 = and i16 %33, -2
  store i16 %34, i16* %32, align 4
  %35 = getelementptr inbounds i8, i8* %0, i64 24
  %36 = bitcast i8* %35 to %struct.event***
  %37 = load %struct.event**, %struct.event*** %36, align 8
  %38 = getelementptr inbounds %struct.event*, %struct.event** %37, i64 %28
  store %struct.event* null, %struct.event** %38, align 8
  %39 = load i16, i16* %3, align 4
  br label %40

40:                                               ; preds = %24, %31
  %41 = phi i16 [ %4, %24 ], [ %39, %31 ]
  %42 = and i16 %41, 4
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %27, i64 %28, i32 1
  %46 = load i16, i16* %45, align 4
  %47 = and i16 %46, -5
  store i16 %47, i16* %45, align 4
  %48 = getelementptr inbounds i8, i8* %0, i64 32
  %49 = bitcast i8* %48 to %struct.event***
  %50 = load %struct.event**, %struct.event*** %49, align 8
  %51 = getelementptr inbounds %struct.event*, %struct.event** %50, i64 %28
  store %struct.event* null, %struct.event** %51, align 8
  br label %52

52:                                               ; preds = %40, %44
  %53 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %27, i64 %28, i32 1
  %54 = load i16, i16* %53, align 4
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %100

56:                                               ; preds = %52
  %57 = load i32*, i32** %15, align 8
  %58 = load i32, i32* %17, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %0, i64 4
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, -1
  store i32 %64, i32* %62, align 4
  %65 = icmp eq i32 %22, %64
  br i1 %65, label %100, label %66

66:                                               ; preds = %56
  %67 = load %struct.pollfd*, %struct.pollfd** %26, align 8
  %68 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %67, i64 %28
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %67, i64 %69
  %71 = bitcast %struct.pollfd* %70 to i64*
  %72 = bitcast %struct.pollfd* %68 to i64*
  %73 = load i64, i64* %71, align 4
  store i64 %73, i64* %72, align 4
  %74 = getelementptr inbounds i8, i8* %0, i64 24
  %75 = bitcast i8* %74 to %struct.event***
  %76 = load %struct.event**, %struct.event*** %75, align 8
  %77 = load i32, i32* %62, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.event*, %struct.event** %76, i64 %78
  %80 = bitcast %struct.event** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.event*, %struct.event** %76, i64 %28
  %83 = bitcast %struct.event** %82 to i64*
  store i64 %81, i64* %83, align 8
  %84 = getelementptr inbounds i8, i8* %0, i64 32
  %85 = bitcast i8* %84 to %struct.event***
  %86 = load %struct.event**, %struct.event*** %85, align 8
  %87 = load i32, i32* %62, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.event*, %struct.event** %86, i64 %88
  %90 = bitcast %struct.event** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.event*, %struct.event** %86, i64 %28
  %93 = bitcast %struct.event** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = load i32*, i32** %15, align 8
  %95 = load %struct.pollfd*, %struct.pollfd** %26, align 8
  %96 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %95, i64 %28, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %94, i64 %98
  store i32 %21, i32* %99, align 4
  br label %100

100:                                              ; preds = %66, %56, %52, %13, %10, %8
  %101 = phi i32 [ %9, %8 ], [ 0, %10 ], [ -1, %13 ], [ 0, %52 ], [ 0, %56 ], [ 0, %66 ]
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @poll_dispatch(%struct.event_base*, i8* nocapture readonly, %struct.timeval* readonly) #0 {
  %4 = icmp eq %struct.timeval* %2, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = mul nsw i64 %7, 1000
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add nsw i64 %10, 999
  %12 = sdiv i64 %11, 1000
  %13 = add nsw i64 %12, %8
  %14 = trunc i64 %13 to i32
  br label %15

15:                                               ; preds = %3, %5
  %16 = phi i32 [ %14, %5 ], [ -1, %3 ]
  %17 = getelementptr inbounds i8, i8* %1, i64 4
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i8, i8* %1, i64 16
  %21 = bitcast i8* %20 to %struct.pollfd**
  %22 = load %struct.pollfd*, %struct.pollfd** %21, align 8
  %23 = sext i32 %19 to i64
  %24 = tail call i32 @poll(%struct.pollfd* %22, i64 %23, i32 %16) #6
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %32

26:                                               ; preds = %15
  %27 = tail call i32* @__errno_location() #7
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 4
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  tail call void (i8*, ...) @event_warn(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)) #6
  br label %110

31:                                               ; preds = %26
  tail call void @evsignal_process(%struct.event_base* %0) #6
  br label %110

32:                                               ; preds = %15
  %33 = getelementptr inbounds %struct.event_base, %struct.event_base* %0, i64 0, i32 8, i32 3
  %34 = load volatile i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @evsignal_process(%struct.event_base* %0) #6
  br label %37

37:                                               ; preds = %32, %36
  %38 = icmp eq i32 %24, 0
  %39 = icmp eq i32 %19, 0
  %40 = or i1 %39, %38
  br i1 %40, label %110, label %41

41:                                               ; preds = %37
  %42 = tail call i64 @random() #6
  %43 = icmp sgt i32 %19, 0
  br i1 %43, label %44, label %110

44:                                               ; preds = %41
  %45 = srem i64 %42, %23
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds i8, i8* %1, i64 24
  %48 = bitcast i8* %47 to %struct.event***
  %49 = getelementptr inbounds i8, i8* %1, i64 32
  %50 = bitcast i8* %49 to %struct.event***
  br label %51

51:                                               ; preds = %107, %44
  %52 = phi i32 [ 0, %44 ], [ %108, %107 ]
  %53 = phi i32 [ %46, %44 ], [ %56, %107 ]
  %54 = add nsw i32 %53, 1
  %55 = icmp eq i32 %54, %19
  %56 = select i1 %55, i32 0, i32 %54
  %57 = load %struct.pollfd*, %struct.pollfd** %21, align 8
  %58 = sext i32 %56 to i64
  %59 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %57, i64 %58, i32 2
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = icmp eq i16 %60, 0
  br i1 %62, label %107, label %63

63:                                               ; preds = %51
  %64 = and i32 %61, 24
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i32 %61, i32 5
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %63
  %70 = load %struct.event**, %struct.event*** %48, align 8
  %71 = getelementptr inbounds %struct.event*, %struct.event** %70, i64 %58
  %72 = load %struct.event*, %struct.event** %71, align 8
  br label %73

73:                                               ; preds = %63, %69
  %74 = phi i32 [ 2, %69 ], [ 0, %63 ]
  %75 = phi %struct.event* [ %72, %69 ], [ null, %63 ]
  %76 = and i32 %66, 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = or i32 %74, 4
  %80 = load %struct.event**, %struct.event*** %50, align 8
  %81 = getelementptr inbounds %struct.event*, %struct.event** %80, i64 %58
  %82 = load %struct.event*, %struct.event** %81, align 8
  br label %85

83:                                               ; preds = %73
  %84 = icmp eq i32 %74, 0
  br i1 %84, label %107, label %85

85:                                               ; preds = %78, %83
  %86 = phi %struct.event* [ %82, %78 ], [ null, %83 ]
  %87 = phi i32 [ %79, %78 ], [ %74, %83 ]
  %88 = icmp eq %struct.event* %75, null
  br i1 %88, label %96, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.event, %struct.event* %75, i64 0, i32 6
  %91 = load i16, i16* %90, align 4
  %92 = sext i16 %91 to i32
  %93 = and i32 %87, %92
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %96, label %95

95:                                               ; preds = %89
  tail call void @event_active(%struct.event* nonnull %75, i32 %93, i16 signext 1) #6
  br label %96

96:                                               ; preds = %89, %85, %95
  %97 = icmp eq %struct.event* %86, null
  %98 = icmp eq %struct.event* %86, %75
  %99 = or i1 %97, %98
  br i1 %99, label %107, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.event, %struct.event* %86, i64 0, i32 6
  %102 = load i16, i16* %101, align 4
  %103 = sext i16 %102 to i32
  %104 = and i32 %87, %103
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106

106:                                              ; preds = %100
  tail call void @event_active(%struct.event* nonnull %86, i32 %104, i16 signext 1) #6
  br label %107

107:                                              ; preds = %106, %96, %100, %83, %51
  %108 = add nuw nsw i32 %52, 1
  %109 = icmp eq i32 %108, %19
  br i1 %109, label %110, label %51

110:                                              ; preds = %107, %41, %37, %31, %30
  %111 = phi i32 [ -1, %30 ], [ 0, %31 ], [ 0, %37 ], [ 0, %41 ], [ 0, %107 ]
  ret i32 %111
}

; Function Attrs: nounwind ssp uwtable
define internal void @poll_dealloc(%struct.event_base*, i8* nocapture) #0 {
  tail call void @evsignal_dealloc(%struct.event_base* %0) #6
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to %struct.pollfd**
  %5 = load %struct.pollfd*, %struct.pollfd** %4, align 8
  %6 = icmp eq %struct.pollfd* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = bitcast %struct.pollfd* %5 to i8*
  tail call void @free(i8* %8) #6
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds i8, i8* %1, i64 24
  %11 = bitcast i8* %10 to %struct.event***
  %12 = load %struct.event**, %struct.event*** %11, align 8
  %13 = icmp eq %struct.event** %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = bitcast %struct.event** %12 to i8*
  tail call void @free(i8* %15) #6
  br label %16

16:                                               ; preds = %9, %14
  %17 = getelementptr inbounds i8, i8* %1, i64 32
  %18 = bitcast i8* %17 to %struct.event***
  %19 = load %struct.event**, %struct.event*** %18, align 8
  %20 = icmp eq %struct.event** %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = bitcast %struct.event** %19 to i8*
  tail call void @free(i8* %22) #6
  br label %23

23:                                               ; preds = %16, %21
  %24 = getelementptr inbounds i8, i8* %1, i64 40
  %25 = bitcast i8* %24 to i32**
  %26 = load i32*, i32** %25, align 8
  %27 = icmp eq i32* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = bitcast i32* %26 to i8*
  tail call void @free(i8* %29) #6
  br label %30

30:                                               ; preds = %23, %28
  tail call void @free(i8* %1) #6
  ret void
}

declare i8* @evutil_getenv(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #2

declare i32 @evsignal_init(%struct.event_base*) local_unnamed_addr #1

declare i32 @poll(%struct.pollfd*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

declare void @event_warn(i8*, ...) local_unnamed_addr #1

declare void @evsignal_process(%struct.event_base*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @random() local_unnamed_addr #4

declare void @event_active(%struct.event*, i32, i16 signext) local_unnamed_addr #1

declare i32 @evsignal_add(%struct.event*) local_unnamed_addr #1

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i32 @evsignal_del(%struct.event*) local_unnamed_addr #1

declare void @evsignal_dealloc(%struct.event_base*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
