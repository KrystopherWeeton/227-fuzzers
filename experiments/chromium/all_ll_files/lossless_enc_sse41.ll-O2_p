; ModuleID = '../../third_party/libwebp/src/dsp/lossless_enc_sse41.c'
source_filename = "../../third_party/libwebp/src/dsp/lossless_enc_sse41.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VP8LSubtractGreenFromBlueAndRed = external local_unnamed_addr global void (i32*, i32)*, align 8
@VP8LCollectColorBlueTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32, i32*)*, align 8
@VP8LCollectColorRedTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32*)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8LEncDspInitSSE41() local_unnamed_addr #0 {
  store void (i32*, i32)* @SubtractGreenFromBlueAndRed_SSE41, void (i32*, i32)** @VP8LSubtractGreenFromBlueAndRed, align 8
  store void (i32*, i32, i32, i32, i32, i32, i32*)* @CollectColorBlueTransforms_SSE41, void (i32*, i32, i32, i32, i32, i32, i32*)** @VP8LCollectColorBlueTransforms, align 8
  store void (i32*, i32, i32, i32, i32, i32*)* @CollectColorRedTransforms_SSE41, void (i32*, i32, i32, i32, i32, i32*)** @VP8LCollectColorRedTransforms, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @SubtractGreenFromBlueAndRed_SSE41(i32*, i32) #1 {
  %3 = icmp slt i32 %1, 4
  br i1 %3, label %19, label %4

4:                                                ; preds = %2
  %5 = sext i32 %1 to i64
  br label %6

6:                                                ; preds = %4, %6
  %7 = phi i64 [ 0, %4 ], [ %16, %6 ]
  %8 = phi i64 [ 4, %4 ], [ %14, %6 ]
  %9 = getelementptr inbounds i32, i32* %0, i64 %7
  %10 = bitcast i32* %9 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 1
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 5, i32 16, i32 5, i32 16, i32 9, i32 16, i32 9, i32 16, i32 13, i32 16, i32 13, i32 16>
  %13 = sub <16 x i8> %11, %12
  store <16 x i8> %13, <16 x i8>* %10, align 1
  %14 = add nuw nsw i64 %8, 4
  %15 = icmp sgt i64 %14, %5
  %16 = add nuw nsw i64 %7, 4
  br i1 %15, label %17, label %6

17:                                               ; preds = %6
  %18 = and i32 %1, -4
  br label %19

19:                                               ; preds = %17, %2
  %20 = phi i32 [ 0, %2 ], [ %18, %17 ]
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = zext i32 %20 to i64
  %24 = getelementptr inbounds i32, i32* %0, i64 %23
  %25 = sub nsw i32 %1, %20
  tail call void @VP8LSubtractGreenFromBlueAndRed_C(i32* %24, i32 %25) #4
  br label %26

26:                                               ; preds = %19, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectColorBlueTransforms_SSE41(i32*, i32, i32, i32, i32, i32, i32*) #1 {
  %8 = shl i32 %5, 24
  %9 = ashr exact i32 %8, 21
  %10 = trunc i32 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = shl i32 %4, 24
  %14 = ashr exact i32 %13, 21
  %15 = trunc i32 %14 to i16
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = icmp sgt i32 %3, 0
  br i1 %18, label %19, label %112

19:                                               ; preds = %7
  %20 = icmp slt i32 %2, 8
  %21 = sext i32 %2 to i64
  %22 = sext i32 %1 to i64
  %23 = zext i32 %3 to i64
  br label %24

24:                                               ; preds = %109, %19
  %25 = phi i64 [ 0, %19 ], [ %110, %109 ]
  %26 = mul nsw i64 %25, %22
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  br i1 %20, label %109, label %28

28:                                               ; preds = %24, %28
  %29 = phi i64 [ %108, %28 ], [ 0, %24 ]
  %30 = phi i64 [ %106, %28 ], [ 8, %24 ]
  %31 = getelementptr inbounds i32, i32* %27, i64 %29
  %32 = bitcast i32* %31 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 1
  %34 = or i64 %29, 4
  %35 = getelementptr inbounds i32, i32* %27, i64 %34
  %36 = bitcast i32* %35 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 1
  %38 = bitcast <2 x i64> %33 to <16 x i8>
  %39 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 2, i32 16, i32 6, i32 16, i32 10, i32 16, i32 14, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %40 = bitcast <2 x i64> %37 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 2, i32 16, i32 6, i32 16, i32 10, i32 16, i32 14>
  %42 = or <16 x i8> %41, %39
  %43 = bitcast <2 x i64> %33 to <4 x i32>
  %44 = and <4 x i32> %43, <i32 65535, i32 65535, i32 65535, i32 65535>
  %45 = bitcast <2 x i64> %37 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 65535, i32 65535, i32 65535, i32 65535>
  %47 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %44, <4 x i32> %46) #4
  %48 = bitcast <16 x i8> %42 to <8 x i16>
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %48, <8 x i16> %12) #4
  %50 = and <8 x i16> %47, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %50, <8 x i16> %17) #4
  %52 = bitcast <8 x i16> %47 to <16 x i8>
  %53 = bitcast <8 x i16> %51 to <16 x i8>
  %54 = bitcast <8 x i16> %49 to <16 x i8>
  %55 = sub <16 x i8> %52, %54
  %56 = sub <16 x i8> %55, %53
  %57 = bitcast <16 x i8> %56 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 71777214294589695, i64 71777214294589695>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = and i64 %59, 255
  %61 = getelementptr inbounds i32, i32* %6, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %61, align 4
  %64 = bitcast <2 x i64> %58 to <8 x i16>
  %65 = extractelement <8 x i16> %64, i32 1
  %66 = zext i16 %65 to i64
  %67 = getelementptr inbounds i32, i32* %6, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = bitcast <2 x i64> %58 to <8 x i16>
  %71 = extractelement <8 x i16> %70, i32 2
  %72 = zext i16 %71 to i64
  %73 = getelementptr inbounds i32, i32* %6, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 4
  %76 = bitcast <2 x i64> %58 to <8 x i16>
  %77 = extractelement <8 x i16> %76, i32 3
  %78 = zext i16 %77 to i64
  %79 = getelementptr inbounds i32, i32* %6, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %79, align 4
  %82 = bitcast <2 x i64> %58 to <8 x i16>
  %83 = extractelement <8 x i16> %82, i32 4
  %84 = zext i16 %83 to i64
  %85 = getelementptr inbounds i32, i32* %6, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %85, align 4
  %88 = bitcast <2 x i64> %58 to <8 x i16>
  %89 = extractelement <8 x i16> %88, i32 5
  %90 = zext i16 %89 to i64
  %91 = getelementptr inbounds i32, i32* %6, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %91, align 4
  %94 = bitcast <2 x i64> %58 to <8 x i16>
  %95 = extractelement <8 x i16> %94, i32 6
  %96 = zext i16 %95 to i64
  %97 = getelementptr inbounds i32, i32* %6, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %97, align 4
  %100 = bitcast <2 x i64> %58 to <8 x i16>
  %101 = extractelement <8 x i16> %100, i32 7
  %102 = zext i16 %101 to i64
  %103 = getelementptr inbounds i32, i32* %6, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %103, align 4
  %106 = add nuw nsw i64 %30, 8
  %107 = icmp sgt i64 %106, %21
  %108 = add nuw nsw i64 %29, 8
  br i1 %107, label %109, label %28

109:                                              ; preds = %28, %24
  %110 = add nuw nsw i64 %25, 1
  %111 = icmp eq i64 %110, %23
  br i1 %111, label %112, label %24

112:                                              ; preds = %109, %7
  %113 = and i32 %2, 7
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %121, label %115

115:                                              ; preds = %112
  %116 = sext i32 %2 to i64
  %117 = getelementptr inbounds i32, i32* %0, i64 %116
  %118 = zext i32 %113 to i64
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds i32, i32* %117, i64 %119
  tail call void @VP8LCollectColorBlueTransforms_C(i32* %120, i32 %1, i32 %113, i32 %3, i32 %4, i32 %5, i32* %6) #4
  br label %121

121:                                              ; preds = %112, %115
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectColorRedTransforms_SSE41(i32*, i32, i32, i32, i32, i32*) #1 {
  %7 = shl i32 %4, 24
  %8 = ashr exact i32 %7, 21
  %9 = trunc i32 %8 to i16
  %10 = insertelement <8 x i16> undef, i16 %9, i32 0
  %11 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> zeroinitializer
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %97

13:                                               ; preds = %6
  %14 = icmp slt i32 %2, 8
  %15 = sext i32 %2 to i64
  %16 = sext i32 %1 to i64
  %17 = zext i32 %3 to i64
  br label %18

18:                                               ; preds = %94, %13
  %19 = phi i64 [ 0, %13 ], [ %95, %94 ]
  %20 = mul nsw i64 %19, %16
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  br i1 %14, label %94, label %22

22:                                               ; preds = %18, %22
  %23 = phi i64 [ %93, %22 ], [ 0, %18 ]
  %24 = phi i64 [ %91, %22 ], [ 8, %18 ]
  %25 = getelementptr inbounds i32, i32* %21, i64 %23
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 1
  %28 = or i64 %23, 4
  %29 = getelementptr inbounds i32, i32* %21, i64 %28
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 1
  %32 = and <4 x i32> %27, <i32 65280, i32 65280, i32 65280, i32 65280>
  %33 = and <4 x i32> %31, <i32 65280, i32 65280, i32 65280, i32 65280>
  %34 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %32, <4 x i32> %33) #4
  %35 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %36 = lshr <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  %37 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %35, <4 x i32> %36) #4
  %38 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %34, <8 x i16> %11) #4
  %39 = bitcast <8 x i16> %37 to <16 x i8>
  %40 = bitcast <8 x i16> %38 to <16 x i8>
  %41 = sub <16 x i8> %39, %40
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = and <2 x i64> %42, <i64 71777214294589695, i64 71777214294589695>
  %44 = extractelement <2 x i64> %43, i32 0
  %45 = and i64 %44, 255
  %46 = getelementptr inbounds i32, i32* %5, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %46, align 4
  %49 = bitcast <2 x i64> %43 to <8 x i16>
  %50 = extractelement <8 x i16> %49, i32 1
  %51 = zext i16 %50 to i64
  %52 = getelementptr inbounds i32, i32* %5, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %52, align 4
  %55 = bitcast <2 x i64> %43 to <8 x i16>
  %56 = extractelement <8 x i16> %55, i32 2
  %57 = zext i16 %56 to i64
  %58 = getelementptr inbounds i32, i32* %5, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %58, align 4
  %61 = bitcast <2 x i64> %43 to <8 x i16>
  %62 = extractelement <8 x i16> %61, i32 3
  %63 = zext i16 %62 to i64
  %64 = getelementptr inbounds i32, i32* %5, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %64, align 4
  %67 = bitcast <2 x i64> %43 to <8 x i16>
  %68 = extractelement <8 x i16> %67, i32 4
  %69 = zext i16 %68 to i64
  %70 = getelementptr inbounds i32, i32* %5, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %70, align 4
  %73 = bitcast <2 x i64> %43 to <8 x i16>
  %74 = extractelement <8 x i16> %73, i32 5
  %75 = zext i16 %74 to i64
  %76 = getelementptr inbounds i32, i32* %5, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %76, align 4
  %79 = bitcast <2 x i64> %43 to <8 x i16>
  %80 = extractelement <8 x i16> %79, i32 6
  %81 = zext i16 %80 to i64
  %82 = getelementptr inbounds i32, i32* %5, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %82, align 4
  %85 = bitcast <2 x i64> %43 to <8 x i16>
  %86 = extractelement <8 x i16> %85, i32 7
  %87 = zext i16 %86 to i64
  %88 = getelementptr inbounds i32, i32* %5, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %88, align 4
  %91 = add nuw nsw i64 %24, 8
  %92 = icmp sgt i64 %91, %15
  %93 = add nuw nsw i64 %23, 8
  br i1 %92, label %94, label %22

94:                                               ; preds = %22, %18
  %95 = add nuw nsw i64 %19, 1
  %96 = icmp eq i64 %95, %17
  br i1 %96, label %97, label %18

97:                                               ; preds = %94, %6
  %98 = and i32 %2, 7
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = sext i32 %2 to i64
  %102 = getelementptr inbounds i32, i32* %0, i64 %101
  %103 = zext i32 %98 to i64
  %104 = sub nsw i64 0, %103
  %105 = getelementptr inbounds i32, i32* %102, i64 %104
  tail call void @VP8LCollectColorRedTransforms_C(i32* %105, i32 %1, i32 %98, i32 %3, i32 %4, i32* %5) #4
  br label %106

106:                                              ; preds = %97, %100
  ret void
}

declare void @VP8LSubtractGreenFromBlueAndRed_C(i32*, i32) local_unnamed_addr #2

declare void @VP8LCollectColorBlueTransforms_C(i32*, i32, i32, i32, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #3

declare void @VP8LCollectColorRedTransforms_C(i32*, i32, i32, i32, i32, i32*) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
