; ModuleID = '../../third_party/pdfium/fxbarcode/common/reedsolomon/BC_ReedSolomonGF256.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/common/reedsolomon/BC_ReedSolomonGF256.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.CBC_ReedSolomonGF256 = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", [256 x i32], [256 x i32] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_ReedSolomonGF256Poly* }
%class.CBC_ReedSolomonGF256Poly = type { %"class.fxcrt::UnownedPtr", %"class.std::__1::vector" }
%"class.fxcrt::UnownedPtr" = type { %class.CBC_ReedSolomonGF256* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN20CBC_ReedSolomonGF256C1Ei = hidden unnamed_addr alias void (%class.CBC_ReedSolomonGF256*, i32), void (%class.CBC_ReedSolomonGF256*, i32)* @_ZN20CBC_ReedSolomonGF256C2Ei
@_ZN20CBC_ReedSolomonGF256D1Ev = hidden unnamed_addr alias void (%class.CBC_ReedSolomonGF256*), void (%class.CBC_ReedSolomonGF256*)* @_ZN20CBC_ReedSolomonGF256D2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN20CBC_ReedSolomonGF256C2Ei(%class.CBC_ReedSolomonGF256* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CBC_ReedSolomonGF256* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi i64 [ 0, %2 ], [ %18, %4 ]
  %6 = phi i32 [ 1, %2 ], [ %17, %4 ]
  %7 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %5
  store i32 %6, i32* %7, align 4
  %8 = shl i32 %6, 1
  %9 = icmp sgt i32 %8, 255
  %10 = select i1 %9, i32 %1, i32 0
  %11 = xor i32 %10, %8
  %12 = or i64 %5, 1
  %13 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %12
  store i32 %11, i32* %13, align 4
  %14 = shl i32 %11, 1
  %15 = icmp sgt i32 %14, 255
  %16 = select i1 %15, i32 %1, i32 0
  %17 = xor i32 %16, %14
  %18 = add nuw nsw i64 %5, 2
  %19 = icmp eq i64 %18, 256
  br i1 %19, label %22, label %4

20:                                               ; preds = %22
  %21 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 0
  store i32 0, i32* %21, align 8
  ret void

22:                                               ; preds = %4, %22
  %23 = phi i64 [ %53, %22 ], [ 0, %4 ]
  %24 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %26
  %28 = trunc i64 %23 to i32
  store i32 %28, i32* %27, align 4
  %29 = add nuw nsw i64 %23, 1
  %30 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %32
  %34 = trunc i64 %29 to i32
  store i32 %34, i32* %33, align 4
  %35 = add nuw nsw i64 %23, 2
  %36 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %38
  %40 = trunc i64 %35 to i32
  store i32 %40, i32* %39, align 4
  %41 = add nuw nsw i64 %23, 3
  %42 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %44
  %46 = trunc i64 %41 to i32
  store i32 %46, i32* %45, align 4
  %47 = add nuw nsw i64 %23, 4
  %48 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %50
  %52 = trunc i64 %47 to i32
  store i32 %52, i32* %51, align 4
  %53 = add nuw nsw i64 %23, 5
  %54 = icmp eq i64 %53, 255
  br i1 %54, label %20, label %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_ReedSolomonGF2564InitEv(%class.CBC_ReedSolomonGF256*) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = tail call i8* @_Znwm(i64 4) #11
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector"* %2 to i8**
  store i8* %5, i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 4
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast i32** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i32** %6 to i64*
  %12 = bitcast i8* %5 to i32*
  store i32 0, i32* %12, align 4
  %13 = ptrtoint i8* %8 to i64
  store i64 %13, i64* %11, align 8
  %14 = tail call i8* @_Znwm(i64 32) #11
  %15 = bitcast i8* %14 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC1EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %15, %class.CBC_ReedSolomonGF256* %0, %"class.std::__1::vector"* nonnull dereferenceable(24) %2) #10
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %17, align 8
  %19 = bitcast %class.CBC_ReedSolomonGF256* %0 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq %class.CBC_ReedSolomonGF256Poly* %18, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %1
  call void @_ZN24CBC_ReedSolomonGF256PolyD1Ev(%class.CBC_ReedSolomonGF256Poly* nonnull %18) #10
  %22 = bitcast %class.CBC_ReedSolomonGF256Poly* %18 to i8*
  call void @_ZdlPv(i8* %22) #11
  br label %23

23:                                               ; preds = %21, %1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = ptrtoint i32* %25 to i64
  store i64 %28, i64* %11, align 8
  %29 = bitcast i32* %25 to i8*
  call void @_ZdlPv(i8* %29) #11
  br label %30

30:                                               ; preds = %23, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  %31 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  %32 = call i8* @_Znwm(i64 4) #11
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %34 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %32, i8** %34, align 8
  %35 = getelementptr inbounds i8, i8* %32, i64 4
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast i32** %36 to i8**
  store i8* %35, i8** %37, align 8
  %38 = bitcast i32** %33 to i64*
  %39 = bitcast i8* %32 to i32*
  store i32 1, i32* %39, align 4
  %40 = ptrtoint i8* %35 to i64
  store i64 %40, i64* %38, align 8
  %41 = call i8* @_Znwm(i64 32) #11
  %42 = bitcast i8* %41 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC1EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %42, %class.CBC_ReedSolomonGF256* %0, %"class.std::__1::vector"* nonnull dereferenceable(24) %3) #10
  %43 = ptrtoint i8* %41 to i64
  %44 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 1
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %45, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  store i64 %43, i64* %47, align 8
  %48 = icmp eq %class.CBC_ReedSolomonGF256Poly* %46, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %30
  call void @_ZN24CBC_ReedSolomonGF256PolyD1Ev(%class.CBC_ReedSolomonGF256Poly* nonnull %46) #10
  %50 = bitcast %class.CBC_ReedSolomonGF256Poly* %46 to i8*
  call void @_ZdlPv(i8* %50) #11
  br label %51

51:                                               ; preds = %49, %30
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %53 = load i32*, i32** %52, align 8
  %54 = icmp eq i32* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = ptrtoint i32* %53 to i64
  store i64 %56, i64* %38, align 8
  %57 = bitcast i32* %53 to i8*
  call void @_ZdlPv(i8* %57) #11
  br label %58

58:                                               ; preds = %51, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_ReedSolomonGF256D2Ev(%class.CBC_ReedSolomonGF256* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %2, align 8
  store %class.CBC_ReedSolomonGF256Poly* null, %class.CBC_ReedSolomonGF256Poly** %2, align 8
  %4 = icmp eq %class.CBC_ReedSolomonGF256Poly* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN24CBC_ReedSolomonGF256PolyD1Ev(%class.CBC_ReedSolomonGF256Poly* nonnull %3) #10
  %6 = bitcast %class.CBC_ReedSolomonGF256Poly* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %8, align 8
  store %class.CBC_ReedSolomonGF256Poly* null, %class.CBC_ReedSolomonGF256Poly** %8, align 8
  %10 = icmp eq %class.CBC_ReedSolomonGF256Poly* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  tail call void @_ZN24CBC_ReedSolomonGF256PolyD1Ev(%class.CBC_ReedSolomonGF256Poly* nonnull %9) #10
  %12 = bitcast %class.CBC_ReedSolomonGF256Poly* %9 to i8*
  tail call void @_ZdlPv(i8* %12) #11
  br label %13

13:                                               ; preds = %7, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CBC_ReedSolomonGF256Poly* @_ZN20CBC_ReedSolomonGF25613BuildMonomialEii(%class.CBC_ReedSolomonGF256*, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp slt i32 %1, 0
  br i1 %5, label %47, label %6

6:                                                ; preds = %3
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %9, align 8
  %11 = tail call %class.CBC_ReedSolomonGF256Poly* @_ZNK24CBC_ReedSolomonGF256Poly5CloneEv(%class.CBC_ReedSolomonGF256Poly* %10) #10
  %12 = ptrtoint %class.CBC_ReedSolomonGF256Poly* %11 to i64
  br label %47

13:                                               ; preds = %6
  %14 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = add nuw nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #10
  %17 = icmp slt i32 %15, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %19) #12
  unreachable

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %24 = shl nsw i64 %16, 2
  %25 = tail call i8* @_Znwm(i64 %24) #11
  %26 = bitcast i8* %25 to i32*
  %27 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %25, i8** %27, align 8
  %28 = getelementptr inbounds i32, i32* %26, i64 %16
  store i32* %28, i32** %22, align 8
  %29 = bitcast i32** %23 to i64*
  %30 = ptrtoint i8* %25 to i64
  %31 = add nsw i64 %16, -1
  %32 = getelementptr i32, i32* %26, i64 %31
  %33 = ptrtoint i32* %32 to i64
  %34 = sub i64 4, %30
  %35 = add i64 %34, %33
  %36 = and i64 %35, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %25, i8 0, i64 %36, i1 false) #10
  %37 = ptrtoint i32* %28 to i64
  store i64 %37, i64* %29, align 8
  store i32 %2, i32* %26, align 4
  %38 = tail call i8* @_Znwm(i64 32) #11
  %39 = bitcast i8* %38 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC1EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %39, %class.CBC_ReedSolomonGF256* %0, %"class.std::__1::vector"* nonnull dereferenceable(24) %4) #10
  %40 = ptrtoint i8* %38 to i64
  %41 = load i32*, i32** %21, align 8
  %42 = icmp eq i32* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %20
  %44 = ptrtoint i32* %41 to i64
  store i64 %44, i64* %29, align 8
  %45 = bitcast i32* %41 to i8*
  call void @_ZdlPv(i8* %45) #11
  br label %46

46:                                               ; preds = %20, %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  br label %47

47:                                               ; preds = %3, %46, %8
  %48 = phi i64 [ %12, %8 ], [ %40, %46 ], [ 0, %3 ]
  %49 = inttoptr i64 %48 to %class.CBC_ReedSolomonGF256Poly*
  ret %class.CBC_ReedSolomonGF256Poly* %49
}

declare %class.CBC_ReedSolomonGF256Poly* @_ZNK24CBC_ReedSolomonGF256Poly5CloneEv(%class.CBC_ReedSolomonGF256Poly*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN20CBC_ReedSolomonGF25613AddOrSubtractEii(i32, i32) local_unnamed_addr #4 align 2 {
  %3 = xor i32 %1, %0
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN20CBC_ReedSolomonGF2563ExpEi(%class.CBC_ReedSolomonGF256* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %3
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN20CBC_ReedSolomonGF2567InverseEi(%class.CBC_ReedSolomonGF256* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %2
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 255, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = shl nuw i64 %12, 32
  br label %14

14:                                               ; preds = %2, %4
  %15 = phi i64 [ %13, %4 ], [ 0, %2 ]
  %16 = phi i64 [ 1, %4 ], [ 0, %2 ]
  %17 = or i64 %16, %15
  ret i64 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256* nocapture readonly, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = icmp eq i32 %1, 0
  %5 = icmp eq i32 %2, 0
  %6 = or i1 %4, %5
  br i1 %6, label %23, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32 %1, 1
  br i1 %8, label %23, label %9

9:                                                ; preds = %7
  %10 = icmp eq i32 %2, 1
  br i1 %10, label %23, label %11

11:                                               ; preds = %9
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 3, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = add nsw i32 %17, %14
  %19 = srem i32 %18, 255
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %0, i64 0, i32 2, i64 %20
  %22 = load i32, i32* %21, align 4
  br label %23

23:                                               ; preds = %9, %7, %3, %11
  %24 = phi i32 [ %22, %11 ], [ 0, %3 ], [ %2, %7 ], [ %1, %9 ]
  ret i32 %24
}

; Function Attrs: nounwind
declare void @_ZN24CBC_ReedSolomonGF256PolyD1Ev(%class.CBC_ReedSolomonGF256Poly*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZN24CBC_ReedSolomonGF256PolyC1EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256*, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
