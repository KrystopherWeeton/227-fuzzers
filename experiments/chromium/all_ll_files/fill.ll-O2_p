; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/fill.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/fill.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::DynamicBuffer" = type { %"class.std::__1::vector", %"class.std::__1::vector.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { i32*, i32*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i32* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/fill.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"NumDimensions(dims)\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"dtype == kTfLiteInt32 || dtype == kTfLiteInt64\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"NumDimensions(value)\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.13 = private unnamed_addr constant [86 x i8] c"Fill only currently supports int32, int64, float32, bool, string for input 1, got %d.\00", align 1
@_ZZN6tflite3ops7builtin13Register_FILLEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin4fill7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin4fill4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.15 = private unnamed_addr constant [63 x i8] c"Fill only currently supports int32, int64 for input 0, got %d.\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"Fill dimensions must be >= 0\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin4fill7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 2) #6
  br label %92

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %15, i32 1) #6
  br label %92

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 79, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %44, i32 1) #6
  br label %92

49:                                               ; preds = %39
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  switch i32 %51, label %52 [
    i32 4, label %55
    i32 2, label %55
  ]

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0)) #6
  br label %92

55:                                               ; preds = %49, %49
  %56 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %57 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %56, align 8
  %58 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 86, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i32 %59, i32 0) #6
  br label %92

64:                                               ; preds = %55
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %70 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %69, align 8
  %71 = sext i32 %66 to i64
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %70, i64 %71
  br label %73

73:                                               ; preds = %64, %68
  %74 = phi %struct.TfLiteTensor* [ %72, %68 ], [ null, %64 ]
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %74, i64 0, i32 0
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 4
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %73
  %82 = tail call fastcc i32 @_ZN6tflite3ops7builtin4fill12_GLOBAL__N_112ResizeOutputEP13TfLiteContextPK12TfLiteTensorPS6_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %74)
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %91, label %92

84:                                               ; preds = %73
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %74, i64 0, i32 4
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 4
  br i1 %87, label %91, label %88

88:                                               ; preds = %84
  store i32 4, i32* %85, align 8
  %89 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %74, i64 0, i32 1
  %90 = bitcast %union.TfLitePtrUnion* %89 to i8**
  store i8* null, i8** %90, align 8
  br label %91

91:                                               ; preds = %88, %84, %81
  br label %92

92:                                               ; preds = %46, %91, %81, %61, %52, %17, %8
  %93 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %46 ], [ 1, %61 ], [ 1, %52 ], [ 0, %91 ], [ %82, %81 ]
  ret i32 %93
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6tflite3ops7builtin4fill12_GLOBAL__N_112ResizeOutputEP13TfLiteContextPK12TfLiteTensorPS6_(%struct.TfLiteContext*, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor*) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %76 [
    i32 2, label %6
    i32 4, label %40
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %8 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %10) #6
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %36

15:                                               ; preds = %6
  %16 = icmp eq %struct.TfLiteTensor* %1, null
  %17 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1, i32 0
  %18 = sext i32 %13 to i64
  br label %19

19:                                               ; preds = %28, %15
  %20 = phi i64 [ 0, %15 ], [ %30, %28 ]
  br i1 %16, label %23, label %21

21:                                               ; preds = %19
  %22 = load i32*, i32** %17, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i32* [ %22, %21 ], [ null, %19 ]
  %25 = getelementptr inbounds i32, i32* %24, i64 %20
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 %20
  store i32 %26, i32* %29, align 4
  %30 = add nuw nsw i64 %20, 1
  %31 = icmp eq i64 %30, %18
  br i1 %31, label %36, label %19

32:                                               ; preds = %23
  tail call void @TfLiteIntArrayFree(%struct.TfLiteIntArray* %11) #6
  %33 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %34 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %33, align 8
  %35 = load i32, i32* %4, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %34(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i32 %35) #6
  br label %79

36:                                               ; preds = %28, %6
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %38 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %37, align 8
  %39 = tail call i32 %38(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %2, %struct.TfLiteIntArray* %11) #6
  br label %79

40:                                               ; preds = %3
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %44) #6
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %72

49:                                               ; preds = %40
  %50 = icmp eq %struct.TfLiteTensor* %1, null
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %52 = bitcast %union.TfLitePtrUnion* %51 to i64**
  %53 = sext i32 %47 to i64
  br label %54

54:                                               ; preds = %63, %49
  %55 = phi i64 [ 0, %49 ], [ %66, %63 ]
  br i1 %50, label %58, label %56

56:                                               ; preds = %54
  %57 = load i64*, i64** %52, align 8
  br label %58

58:                                               ; preds = %56, %54
  %59 = phi i64* [ %57, %56 ], [ null, %54 ]
  %60 = getelementptr inbounds i64, i64* %59, i64 %55
  %61 = load i64, i64* %60, align 8
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %68, label %63

63:                                               ; preds = %58
  %64 = trunc i64 %61 to i32
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 1, i64 %55
  store i32 %64, i32* %65, align 4
  %66 = add nuw nsw i64 %55, 1
  %67 = icmp eq i64 %66, %53
  br i1 %67, label %72, label %54

68:                                               ; preds = %58
  tail call void @TfLiteIntArrayFree(%struct.TfLiteIntArray* %45) #6
  %69 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %70 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %69, align 8
  %71 = load i32, i32* %4, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %70(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i32 %71) #6
  br label %79

72:                                               ; preds = %63, %40
  %73 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %74 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %73, align 8
  %75 = tail call i32 %74(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %2, %struct.TfLiteIntArray* %45) #6
  br label %79

76:                                               ; preds = %3
  %77 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %78 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %77, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %78(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.15, i64 0, i64 0), i32 %5) #6
  br label %79

79:                                               ; preds = %72, %68, %36, %32, %76
  %80 = phi i32 [ 1, %76 ], [ %39, %36 ], [ 1, %32 ], [ %75, %72 ], [ 1, %68 ]
  ret i32 %80
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin4fill10FillStringEPK12TfLiteTensorPS3_(%struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 {
  %3 = alloca %"class.tflite::DynamicBuffer", align 8
  %4 = bitcast %"class.tflite::DynamicBuffer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 1, i32 0, i32 1
  %9 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %3, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #6
  %11 = tail call i8* @_Znwm(i64 4) #7
  %12 = bitcast %"class.std::__1::vector.2"* %10 to i8**
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %11, i64 4
  %14 = bitcast i32** %9 to i8**
  store i8* %13, i8** %14, align 8
  %15 = bitcast i32** %8 to i64*
  %16 = bitcast i8* %11 to i32*
  store i32 0, i32* %16, align 4
  %17 = ptrtoint i8* %13 to i64
  store i64 %17, i64* %15, align 8
  %18 = tail call { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor* %0, i32 0) #6
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = extractvalue { i8*, i32 } %18, 1
  %21 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %120

26:                                               ; preds = %2
  %27 = sext i32 %24 to i64
  %28 = icmp ult i32 %24, 8
  br i1 %28, label %29, label %32

29:                                               ; preds = %107, %26
  %30 = phi i64 [ 0, %26 ], [ %33, %107 ]
  %31 = phi i32 [ 1, %26 ], [ %115, %107 ]
  br label %123

32:                                               ; preds = %26
  %33 = and i64 %27, -8
  %34 = add nsw i64 %33, -8
  %35 = lshr exact i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp ult i64 %34, 24
  br i1 %38, label %84, label %39

39:                                               ; preds = %32
  %40 = sub nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %81, %41 ]
  %43 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %79, %41 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %80, %41 ]
  %45 = phi i64 [ %40, %39 ], [ %82, %41 ]
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %42
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = getelementptr inbounds i32, i32* %46, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4
  %52 = mul nsw <4 x i32> %48, %43
  %53 = mul nsw <4 x i32> %51, %44
  %54 = or i64 %42, 8
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %54
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = getelementptr inbounds i32, i32* %55, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4
  %61 = mul nsw <4 x i32> %57, %52
  %62 = mul nsw <4 x i32> %60, %53
  %63 = or i64 %42, 16
  %64 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = getelementptr inbounds i32, i32* %64, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = mul nsw <4 x i32> %66, %61
  %71 = mul nsw <4 x i32> %69, %62
  %72 = or i64 %42, 24
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4
  %76 = getelementptr inbounds i32, i32* %73, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4
  %79 = mul nsw <4 x i32> %75, %70
  %80 = mul nsw <4 x i32> %78, %71
  %81 = add i64 %42, 32
  %82 = add i64 %45, -4
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %41, !llvm.loop !2

84:                                               ; preds = %41, %32
  %85 = phi <4 x i32> [ undef, %32 ], [ %79, %41 ]
  %86 = phi <4 x i32> [ undef, %32 ], [ %80, %41 ]
  %87 = phi i64 [ 0, %32 ], [ %81, %41 ]
  %88 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %79, %41 ]
  %89 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %80, %41 ]
  %90 = icmp eq i64 %37, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %84, %91
  %92 = phi i64 [ %104, %91 ], [ %87, %84 ]
  %93 = phi <4 x i32> [ %102, %91 ], [ %88, %84 ]
  %94 = phi <4 x i32> [ %103, %91 ], [ %89, %84 ]
  %95 = phi i64 [ %105, %91 ], [ %37, %84 ]
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %92
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = mul nsw <4 x i32> %98, %93
  %103 = mul nsw <4 x i32> %101, %94
  %104 = add i64 %92, 8
  %105 = add i64 %95, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %91, !llvm.loop !4

107:                                              ; preds = %91, %84
  %108 = phi <4 x i32> [ %85, %84 ], [ %102, %91 ]
  %109 = phi <4 x i32> [ %86, %84 ], [ %103, %91 ]
  %110 = mul <4 x i32> %109, %108
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = mul <4 x i32> %110, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = mul <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = icmp eq i64 %33, %27
  br i1 %116, label %117, label %29

117:                                              ; preds = %123, %107
  %118 = phi i32 [ %115, %107 ], [ %128, %123 ]
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %120, label %131

120:                                              ; preds = %2, %117
  %121 = phi i32 [ %118, %117 ], [ 1, %2 ]
  %122 = sext i32 %20 to i64
  br label %144

123:                                              ; preds = %29, %123
  %124 = phi i64 [ %129, %123 ], [ %30, %29 ]
  %125 = phi i32 [ %128, %123 ], [ %31, %29 ]
  %126 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 %124
  %127 = load i32, i32* %126, align 4
  %128 = mul nsw i32 %127, %125
  %129 = add nuw nsw i64 %124, 1
  %130 = icmp slt i64 %129, %27
  br i1 %130, label %123, label %117, !llvm.loop !6

131:                                              ; preds = %144, %117
  call void @_ZN6tflite13DynamicBuffer13WriteToTensorEP12TfLiteTensorP14TfLiteIntArray(%"class.tflite::DynamicBuffer"* nonnull %3, %struct.TfLiteTensor* %1, %struct.TfLiteIntArray* null) #6
  %132 = load i32*, i32** %7, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %137, label %134

134:                                              ; preds = %131
  %135 = ptrtoint i32* %132 to i64
  store i64 %135, i64* %15, align 8
  %136 = bitcast i32* %132 to i8*
  call void @_ZdlPv(i8* %136) #7
  br label %137

137:                                              ; preds = %134, %131
  %138 = load i8*, i8** %5, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %143, label %140

140:                                              ; preds = %137
  %141 = ptrtoint i8* %138 to i64
  %142 = bitcast i8** %6 to i64*
  store i64 %141, i64* %142, align 8
  call void @_ZdlPv(i8* nonnull %138) #7
  br label %143

143:                                              ; preds = %137, %140
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #6
  ret i32 0

144:                                              ; preds = %144, %120
  %145 = phi i32 [ 0, %120 ], [ %146, %144 ]
  call void @_ZN6tflite13DynamicBuffer9AddStringEPKcm(%"class.tflite::DynamicBuffer"* nonnull %3, i8* %19, i64 %122) #6
  %146 = add nuw nsw i32 %145, 1
  %147 = icmp eq i32 %146, %121
  br i1 %147, label %131, label %144
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor*, i32) local_unnamed_addr #2

declare void @_ZN6tflite13DynamicBuffer9AddStringEPKcm(%"class.tflite::DynamicBuffer"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN6tflite13DynamicBuffer13WriteToTensorEP12TfLiteTensorP14TfLiteIntArray(%"class.tflite::DynamicBuffer"*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin4fill4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %12 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %11, align 8
  %13 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 1, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %18 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %17, align 8
  %19 = sext i32 %14 to i64
  %20 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 %19
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi %struct.TfLiteTensor* [ %20, %16 ], [ null, %2 ]
  %23 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %24 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %23, align 8
  %25 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %30 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %29, align 8
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31
  br label %33

33:                                               ; preds = %21, %28
  %34 = phi %struct.TfLiteTensor* [ %32, %28 ], [ null, %21 ]
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 4
  br i1 %37, label %38, label %51

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 1, i64 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %44 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %43, align 8
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45
  br label %47

47:                                               ; preds = %38, %42
  %48 = phi %struct.TfLiteTensor* [ %46, %42 ], [ null, %38 ]
  %49 = tail call fastcc i32 @_ZN6tflite3ops7builtin4fill12_GLOBAL__N_112ResizeOutputEP13TfLiteContextPK12TfLiteTensorPS6_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %48, %struct.TfLiteTensor* %34)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %1064

51:                                               ; preds = %47, %33
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  switch i32 %53, label %1059 [
    i32 2, label %54
    i32 4, label %282
    i32 1, label %514
    i32 6, label %825
    i32 5, label %1057
  ]

54:                                               ; preds = %51
  %55 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #6
  %56 = icmp eq %struct.TfLiteTensor* %22, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %58, align 8, !alias.scope !8
  br label %86

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 2
  %61 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %60, align 8, !noalias !8
  %62 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4, !noalias !8
  %64 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %61, i64 0, i32 1, i64 0
  %65 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %63, i32* %65, align 8, !alias.scope !8
  %66 = icmp sgt i32 %63, 5
  br i1 %66, label %67, label %74

67:                                               ; preds = %59
  %68 = sext i32 %63 to i64
  %69 = shl nsw i64 %68, 2
  %70 = tail call i8* @_Znam(i64 %69) #7, !noalias !8
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %72 = bitcast i32** %71 to i8**
  store i8* %70, i8** %72, align 8, !alias.scope !8
  %73 = bitcast i8* %70 to i32*
  br label %79

74:                                               ; preds = %59
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %76 = bitcast %union.anon* %75 to i32*
  %77 = sext i32 %63 to i64
  %78 = shl nsw i64 %77, 2
  br label %79

79:                                               ; preds = %74, %67
  %80 = phi i64 [ %69, %67 ], [ %78, %74 ]
  %81 = phi i32* [ %73, %67 ], [ %76, %74 ]
  %82 = bitcast i32* %81 to i8*
  %83 = bitcast i32* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %80, i1 false) #6
  %84 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1, i32 0
  %85 = load i32*, i32** %84, align 8
  br label %86

86:                                               ; preds = %57, %79
  %87 = phi i32 [ %63, %79 ], [ 0, %57 ]
  %88 = phi i32* [ %85, %79 ], [ null, %57 ]
  %89 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89) #6
  %90 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %92, align 8, !alias.scope !11
  br label %227

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %95 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %94, align 8, !noalias !11
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %95, i64 0, i32 0
  %97 = load i32, i32* %96, align 4, !noalias !11
  %98 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %95, i64 0, i32 1, i64 0
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %97, i32* %99, align 8, !alias.scope !11
  %100 = icmp sgt i32 %97, 5
  br i1 %100, label %101, label %111

101:                                              ; preds = %93
  %102 = sext i32 %97 to i64
  %103 = shl nsw i64 %102, 2
  %104 = tail call i8* @_Znam(i64 %103) #7, !noalias !11
  %105 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %106 = bitcast i32** %105 to i8**
  store i8* %104, i8** %106, align 8, !alias.scope !11
  %107 = bitcast i32* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %104, i8* align 4 %107, i64 %103, i1 false) #6
  %108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = bitcast i8* %104 to i32*
  br label %122

111:                                              ; preds = %93
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %113 = sext i32 %97 to i64
  %114 = shl nsw i64 %113, 2
  %115 = bitcast %union.anon* %112 to i8*
  %116 = bitcast i32* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 4 %116, i64 %114, i1 false) #6
  %117 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1, i32 0
  %118 = load i32*, i32** %117, align 8
  %119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %120 = bitcast %union.anon* %119 to i32*
  %121 = icmp sgt i32 %97, 0
  br i1 %121, label %122, label %227

122:                                              ; preds = %111, %101
  %123 = phi i1 [ true, %101 ], [ false, %111 ]
  %124 = phi i32* [ %109, %101 ], [ %118, %111 ]
  %125 = phi i32* [ %110, %101 ], [ %120, %111 ]
  %126 = zext i32 %97 to i64
  %127 = icmp ult i32 %97, 8
  br i1 %127, label %213, label %128

128:                                              ; preds = %122
  %129 = and i64 %126, 4294967288
  %130 = add nsw i64 %129, -8
  %131 = lshr exact i64 %130, 3
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp ult i64 %130, 24
  br i1 %134, label %180, label %135

135:                                              ; preds = %128
  %136 = sub nsw i64 %132, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 0, %135 ], [ %177, %137 ]
  %139 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %175, %137 ]
  %140 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %176, %137 ]
  %141 = phi i64 [ %136, %135 ], [ %178, %137 ]
  %142 = getelementptr inbounds i32, i32* %125, i64 %138
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = mul nsw <4 x i32> %144, %139
  %149 = mul nsw <4 x i32> %147, %140
  %150 = or i64 %138, 8
  %151 = getelementptr inbounds i32, i32* %125, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = mul nsw <4 x i32> %153, %148
  %158 = mul nsw <4 x i32> %156, %149
  %159 = or i64 %138, 16
  %160 = getelementptr inbounds i32, i32* %125, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = mul nsw <4 x i32> %162, %157
  %167 = mul nsw <4 x i32> %165, %158
  %168 = or i64 %138, 24
  %169 = getelementptr inbounds i32, i32* %125, i64 %168
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = mul nsw <4 x i32> %171, %166
  %176 = mul nsw <4 x i32> %174, %167
  %177 = add i64 %138, 32
  %178 = add i64 %141, -4
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %137, !llvm.loop !14

180:                                              ; preds = %137, %128
  %181 = phi <4 x i32> [ undef, %128 ], [ %175, %137 ]
  %182 = phi <4 x i32> [ undef, %128 ], [ %176, %137 ]
  %183 = phi i64 [ 0, %128 ], [ %177, %137 ]
  %184 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %175, %137 ]
  %185 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %176, %137 ]
  %186 = icmp eq i64 %133, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %180, %187
  %188 = phi i64 [ %200, %187 ], [ %183, %180 ]
  %189 = phi <4 x i32> [ %198, %187 ], [ %184, %180 ]
  %190 = phi <4 x i32> [ %199, %187 ], [ %185, %180 ]
  %191 = phi i64 [ %201, %187 ], [ %133, %180 ]
  %192 = getelementptr inbounds i32, i32* %125, i64 %188
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4
  %195 = getelementptr inbounds i32, i32* %192, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4
  %198 = mul nsw <4 x i32> %194, %189
  %199 = mul nsw <4 x i32> %197, %190
  %200 = add i64 %188, 8
  %201 = add i64 %191, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %187, !llvm.loop !15

203:                                              ; preds = %187, %180
  %204 = phi <4 x i32> [ %181, %180 ], [ %198, %187 ]
  %205 = phi <4 x i32> [ %182, %180 ], [ %199, %187 ]
  %206 = mul <4 x i32> %205, %204
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = mul <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = mul <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = icmp eq i64 %129, %126
  br i1 %212, label %224, label %213

213:                                              ; preds = %203, %122
  %214 = phi i64 [ 0, %122 ], [ %129, %203 ]
  %215 = phi i32 [ 1, %122 ], [ %211, %203 ]
  br label %216

216:                                              ; preds = %213, %216
  %217 = phi i64 [ %222, %216 ], [ %214, %213 ]
  %218 = phi i32 [ %221, %216 ], [ %215, %213 ]
  %219 = getelementptr inbounds i32, i32* %125, i64 %217
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, %218
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %126
  br i1 %223, label %224, label %216, !llvm.loop !16

224:                                              ; preds = %216, %203
  %225 = phi i32 [ %211, %203 ], [ %221, %216 ]
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %227, label %265

227:                                              ; preds = %91, %224, %111
  %228 = phi i1 [ %123, %224 ], [ false, %111 ], [ false, %91 ]
  %229 = phi i32* [ %124, %224 ], [ %118, %111 ], [ null, %91 ]
  %230 = phi i32 [ %225, %224 ], [ 1, %111 ], [ 1, %91 ]
  %231 = zext i32 %230 to i64
  %232 = add nsw i64 %231, -1
  %233 = and i64 %231, 3
  %234 = icmp ult i64 %232, 3
  br i1 %234, label %254, label %235

235:                                              ; preds = %227
  %236 = sub nsw i64 %231, %233
  br label %237

237:                                              ; preds = %237, %235
  %238 = phi i64 [ 0, %235 ], [ %251, %237 ]
  %239 = phi i64 [ %236, %235 ], [ %252, %237 ]
  %240 = load i32, i32* %88, align 4
  %241 = getelementptr inbounds i32, i32* %229, i64 %238
  store i32 %240, i32* %241, align 4
  %242 = or i64 %238, 1
  %243 = load i32, i32* %88, align 4
  %244 = getelementptr inbounds i32, i32* %229, i64 %242
  store i32 %243, i32* %244, align 4
  %245 = or i64 %238, 2
  %246 = load i32, i32* %88, align 4
  %247 = getelementptr inbounds i32, i32* %229, i64 %245
  store i32 %246, i32* %247, align 4
  %248 = or i64 %238, 3
  %249 = load i32, i32* %88, align 4
  %250 = getelementptr inbounds i32, i32* %229, i64 %248
  store i32 %249, i32* %250, align 4
  %251 = add nuw nsw i64 %238, 4
  %252 = add i64 %239, -4
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %254, label %237

254:                                              ; preds = %237, %227
  %255 = phi i64 [ 0, %227 ], [ %251, %237 ]
  %256 = icmp eq i64 %233, 0
  br i1 %256, label %265, label %257

257:                                              ; preds = %254, %257
  %258 = phi i64 [ %262, %257 ], [ %255, %254 ]
  %259 = phi i64 [ %263, %257 ], [ %233, %254 ]
  %260 = load i32, i32* %88, align 4
  %261 = getelementptr inbounds i32, i32* %229, i64 %258
  store i32 %260, i32* %261, align 4
  %262 = add nuw nsw i64 %258, 1
  %263 = add i64 %259, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %257, !llvm.loop !17

265:                                              ; preds = %254, %257, %224
  %266 = phi i1 [ %123, %224 ], [ %228, %257 ], [ %228, %254 ]
  br i1 %266, label %267, label %273

267:                                              ; preds = %265
  %268 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %269 = load i32*, i32** %268, align 8
  %270 = icmp eq i32* %269, null
  br i1 %270, label %273, label %271

271:                                              ; preds = %267
  %272 = bitcast i32* %269 to i8*
  tail call void @_ZdaPv(i8* %272) #7
  br label %273

273:                                              ; preds = %265, %267, %271
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #6
  %274 = icmp sgt i32 %87, 5
  br i1 %274, label %275, label %281

275:                                              ; preds = %273
  %276 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %277 = load i32*, i32** %276, align 8
  %278 = icmp eq i32* %277, null
  br i1 %278, label %281, label %279

279:                                              ; preds = %275
  %280 = bitcast i32* %277 to i8*
  tail call void @_ZdaPv(i8* %280) #7
  br label %281

281:                                              ; preds = %273, %275, %279
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #6
  br label %1064

282:                                              ; preds = %51
  %283 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %283) #6
  %284 = icmp eq %struct.TfLiteTensor* %22, null
  br i1 %284, label %285, label %287

285:                                              ; preds = %282
  %286 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %286, align 8, !alias.scope !18
  br label %315

287:                                              ; preds = %282
  %288 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 2
  %289 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %288, align 8, !noalias !18
  %290 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %289, i64 0, i32 0
  %291 = load i32, i32* %290, align 4, !noalias !18
  %292 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %289, i64 0, i32 1, i64 0
  %293 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %291, i32* %293, align 8, !alias.scope !18
  %294 = icmp sgt i32 %291, 5
  br i1 %294, label %295, label %302

295:                                              ; preds = %287
  %296 = sext i32 %291 to i64
  %297 = shl nsw i64 %296, 2
  %298 = tail call i8* @_Znam(i64 %297) #7, !noalias !18
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %300 = bitcast i32** %299 to i8**
  store i8* %298, i8** %300, align 8, !alias.scope !18
  %301 = bitcast i8* %298 to i32*
  br label %307

302:                                              ; preds = %287
  %303 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %304 = bitcast %union.anon* %303 to i32*
  %305 = sext i32 %291 to i64
  %306 = shl nsw i64 %305, 2
  br label %307

307:                                              ; preds = %302, %295
  %308 = phi i64 [ %297, %295 ], [ %306, %302 ]
  %309 = phi i32* [ %301, %295 ], [ %304, %302 ]
  %310 = bitcast i32* %309 to i8*
  %311 = bitcast i32* %292 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %310, i8* align 4 %311, i64 %308, i1 false) #6
  %312 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %313 = bitcast %union.TfLitePtrUnion* %312 to i64**
  %314 = load i64*, i64** %313, align 8
  br label %315

315:                                              ; preds = %285, %307
  %316 = phi i32 [ %291, %307 ], [ 0, %285 ]
  %317 = phi i64* [ %314, %307 ], [ null, %285 ]
  %318 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %318) #6
  %319 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %319, label %320, label %322

320:                                              ; preds = %315
  %321 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %321, align 8, !alias.scope !21
  br label %459

322:                                              ; preds = %315
  %323 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %324 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %323, align 8, !noalias !21
  %325 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %324, i64 0, i32 0
  %326 = load i32, i32* %325, align 4, !noalias !21
  %327 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %324, i64 0, i32 1, i64 0
  %328 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %326, i32* %328, align 8, !alias.scope !21
  %329 = icmp sgt i32 %326, 5
  br i1 %329, label %330, label %342

330:                                              ; preds = %322
  %331 = sext i32 %326 to i64
  %332 = shl nsw i64 %331, 2
  %333 = tail call i8* @_Znam(i64 %332) #7, !noalias !21
  %334 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %335 = bitcast i32** %334 to i8**
  store i8* %333, i8** %335, align 8, !alias.scope !21
  %336 = bitcast i32* %327 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %333, i8* align 4 %336, i64 %332, i1 false) #6
  %337 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %338 = bitcast %union.TfLitePtrUnion* %337 to i64**
  %339 = load i64*, i64** %338, align 8
  %340 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %341 = load i32*, i32** %340, align 8
  br label %354

342:                                              ; preds = %322
  %343 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %344 = sext i32 %326 to i64
  %345 = shl nsw i64 %344, 2
  %346 = bitcast %union.anon* %343 to i8*
  %347 = bitcast i32* %327 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %346, i8* align 4 %347, i64 %345, i1 false) #6
  %348 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %349 = bitcast %union.TfLitePtrUnion* %348 to i64**
  %350 = load i64*, i64** %349, align 8
  %351 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %352 = bitcast %union.anon* %351 to i32*
  %353 = icmp sgt i32 %326, 0
  br i1 %353, label %354, label %459

354:                                              ; preds = %342, %330
  %355 = phi i1 [ true, %330 ], [ false, %342 ]
  %356 = phi i64* [ %339, %330 ], [ %350, %342 ]
  %357 = phi i32* [ %341, %330 ], [ %352, %342 ]
  %358 = zext i32 %326 to i64
  %359 = icmp ult i32 %326, 8
  br i1 %359, label %445, label %360

360:                                              ; preds = %354
  %361 = and i64 %358, 4294967288
  %362 = add nsw i64 %361, -8
  %363 = lshr exact i64 %362, 3
  %364 = add nuw nsw i64 %363, 1
  %365 = and i64 %364, 3
  %366 = icmp ult i64 %362, 24
  br i1 %366, label %412, label %367

367:                                              ; preds = %360
  %368 = sub nsw i64 %364, %365
  br label %369

369:                                              ; preds = %369, %367
  %370 = phi i64 [ 0, %367 ], [ %409, %369 ]
  %371 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %367 ], [ %407, %369 ]
  %372 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %367 ], [ %408, %369 ]
  %373 = phi i64 [ %368, %367 ], [ %410, %369 ]
  %374 = getelementptr inbounds i32, i32* %357, i64 %370
  %375 = bitcast i32* %374 to <4 x i32>*
  %376 = load <4 x i32>, <4 x i32>* %375, align 4
  %377 = getelementptr inbounds i32, i32* %374, i64 4
  %378 = bitcast i32* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4
  %380 = mul nsw <4 x i32> %376, %371
  %381 = mul nsw <4 x i32> %379, %372
  %382 = or i64 %370, 8
  %383 = getelementptr inbounds i32, i32* %357, i64 %382
  %384 = bitcast i32* %383 to <4 x i32>*
  %385 = load <4 x i32>, <4 x i32>* %384, align 4
  %386 = getelementptr inbounds i32, i32* %383, i64 4
  %387 = bitcast i32* %386 to <4 x i32>*
  %388 = load <4 x i32>, <4 x i32>* %387, align 4
  %389 = mul nsw <4 x i32> %385, %380
  %390 = mul nsw <4 x i32> %388, %381
  %391 = or i64 %370, 16
  %392 = getelementptr inbounds i32, i32* %357, i64 %391
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 4
  %395 = getelementptr inbounds i32, i32* %392, i64 4
  %396 = bitcast i32* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 4
  %398 = mul nsw <4 x i32> %394, %389
  %399 = mul nsw <4 x i32> %397, %390
  %400 = or i64 %370, 24
  %401 = getelementptr inbounds i32, i32* %357, i64 %400
  %402 = bitcast i32* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 4
  %404 = getelementptr inbounds i32, i32* %401, i64 4
  %405 = bitcast i32* %404 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 4
  %407 = mul nsw <4 x i32> %403, %398
  %408 = mul nsw <4 x i32> %406, %399
  %409 = add i64 %370, 32
  %410 = add i64 %373, -4
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %412, label %369, !llvm.loop !24

412:                                              ; preds = %369, %360
  %413 = phi <4 x i32> [ undef, %360 ], [ %407, %369 ]
  %414 = phi <4 x i32> [ undef, %360 ], [ %408, %369 ]
  %415 = phi i64 [ 0, %360 ], [ %409, %369 ]
  %416 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %360 ], [ %407, %369 ]
  %417 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %360 ], [ %408, %369 ]
  %418 = icmp eq i64 %365, 0
  br i1 %418, label %435, label %419

419:                                              ; preds = %412, %419
  %420 = phi i64 [ %432, %419 ], [ %415, %412 ]
  %421 = phi <4 x i32> [ %430, %419 ], [ %416, %412 ]
  %422 = phi <4 x i32> [ %431, %419 ], [ %417, %412 ]
  %423 = phi i64 [ %433, %419 ], [ %365, %412 ]
  %424 = getelementptr inbounds i32, i32* %357, i64 %420
  %425 = bitcast i32* %424 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 4
  %427 = getelementptr inbounds i32, i32* %424, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 4
  %430 = mul nsw <4 x i32> %426, %421
  %431 = mul nsw <4 x i32> %429, %422
  %432 = add i64 %420, 8
  %433 = add i64 %423, -1
  %434 = icmp eq i64 %433, 0
  br i1 %434, label %435, label %419, !llvm.loop !25

435:                                              ; preds = %419, %412
  %436 = phi <4 x i32> [ %413, %412 ], [ %430, %419 ]
  %437 = phi <4 x i32> [ %414, %412 ], [ %431, %419 ]
  %438 = mul <4 x i32> %437, %436
  %439 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %440 = mul <4 x i32> %438, %439
  %441 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %442 = mul <4 x i32> %440, %441
  %443 = extractelement <4 x i32> %442, i32 0
  %444 = icmp eq i64 %361, %358
  br i1 %444, label %456, label %445

445:                                              ; preds = %435, %354
  %446 = phi i64 [ 0, %354 ], [ %361, %435 ]
  %447 = phi i32 [ 1, %354 ], [ %443, %435 ]
  br label %448

448:                                              ; preds = %445, %448
  %449 = phi i64 [ %454, %448 ], [ %446, %445 ]
  %450 = phi i32 [ %453, %448 ], [ %447, %445 ]
  %451 = getelementptr inbounds i32, i32* %357, i64 %449
  %452 = load i32, i32* %451, align 4
  %453 = mul nsw i32 %452, %450
  %454 = add nuw nsw i64 %449, 1
  %455 = icmp eq i64 %454, %358
  br i1 %455, label %456, label %448, !llvm.loop !26

456:                                              ; preds = %448, %435
  %457 = phi i32 [ %443, %435 ], [ %453, %448 ]
  %458 = icmp sgt i32 %457, 0
  br i1 %458, label %459, label %497

459:                                              ; preds = %320, %456, %342
  %460 = phi i1 [ %355, %456 ], [ false, %342 ], [ false, %320 ]
  %461 = phi i64* [ %356, %456 ], [ %350, %342 ], [ null, %320 ]
  %462 = phi i32 [ %457, %456 ], [ 1, %342 ], [ 1, %320 ]
  %463 = zext i32 %462 to i64
  %464 = add nsw i64 %463, -1
  %465 = and i64 %463, 3
  %466 = icmp ult i64 %464, 3
  br i1 %466, label %486, label %467

467:                                              ; preds = %459
  %468 = sub nsw i64 %463, %465
  br label %469

469:                                              ; preds = %469, %467
  %470 = phi i64 [ 0, %467 ], [ %483, %469 ]
  %471 = phi i64 [ %468, %467 ], [ %484, %469 ]
  %472 = load i64, i64* %317, align 8
  %473 = getelementptr inbounds i64, i64* %461, i64 %470
  store i64 %472, i64* %473, align 8
  %474 = or i64 %470, 1
  %475 = load i64, i64* %317, align 8
  %476 = getelementptr inbounds i64, i64* %461, i64 %474
  store i64 %475, i64* %476, align 8
  %477 = or i64 %470, 2
  %478 = load i64, i64* %317, align 8
  %479 = getelementptr inbounds i64, i64* %461, i64 %477
  store i64 %478, i64* %479, align 8
  %480 = or i64 %470, 3
  %481 = load i64, i64* %317, align 8
  %482 = getelementptr inbounds i64, i64* %461, i64 %480
  store i64 %481, i64* %482, align 8
  %483 = add nuw nsw i64 %470, 4
  %484 = add i64 %471, -4
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %469

486:                                              ; preds = %469, %459
  %487 = phi i64 [ 0, %459 ], [ %483, %469 ]
  %488 = icmp eq i64 %465, 0
  br i1 %488, label %497, label %489

489:                                              ; preds = %486, %489
  %490 = phi i64 [ %494, %489 ], [ %487, %486 ]
  %491 = phi i64 [ %495, %489 ], [ %465, %486 ]
  %492 = load i64, i64* %317, align 8
  %493 = getelementptr inbounds i64, i64* %461, i64 %490
  store i64 %492, i64* %493, align 8
  %494 = add nuw nsw i64 %490, 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %489, !llvm.loop !27

497:                                              ; preds = %486, %489, %456
  %498 = phi i1 [ %355, %456 ], [ %460, %489 ], [ %460, %486 ]
  br i1 %498, label %499, label %505

499:                                              ; preds = %497
  %500 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %501 = load i32*, i32** %500, align 8
  %502 = icmp eq i32* %501, null
  br i1 %502, label %505, label %503

503:                                              ; preds = %499
  %504 = bitcast i32* %501 to i8*
  tail call void @_ZdaPv(i8* %504) #7
  br label %505

505:                                              ; preds = %497, %499, %503
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %318) #6
  %506 = icmp sgt i32 %316, 5
  br i1 %506, label %507, label %513

507:                                              ; preds = %505
  %508 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %509 = load i32*, i32** %508, align 8
  %510 = icmp eq i32* %509, null
  br i1 %510, label %513, label %511

511:                                              ; preds = %507
  %512 = bitcast i32* %509 to i8*
  tail call void @_ZdaPv(i8* %512) #7
  br label %513

513:                                              ; preds = %505, %507, %511
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %283) #6
  br label %1064

514:                                              ; preds = %51
  %515 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %515) #6
  %516 = icmp eq %struct.TfLiteTensor* %22, null
  br i1 %516, label %517, label %519

517:                                              ; preds = %514
  %518 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %518, align 8, !alias.scope !28
  br label %547

519:                                              ; preds = %514
  %520 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 2
  %521 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %520, align 8, !noalias !28
  %522 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %521, i64 0, i32 0
  %523 = load i32, i32* %522, align 4, !noalias !28
  %524 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %521, i64 0, i32 1, i64 0
  %525 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %523, i32* %525, align 8, !alias.scope !28
  %526 = icmp sgt i32 %523, 5
  br i1 %526, label %527, label %534

527:                                              ; preds = %519
  %528 = sext i32 %523 to i64
  %529 = shl nsw i64 %528, 2
  %530 = tail call i8* @_Znam(i64 %529) #7, !noalias !28
  %531 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %532 = bitcast i32** %531 to i8**
  store i8* %530, i8** %532, align 8, !alias.scope !28
  %533 = bitcast i8* %530 to i32*
  br label %539

534:                                              ; preds = %519
  %535 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %536 = bitcast %union.anon* %535 to i32*
  %537 = sext i32 %523 to i64
  %538 = shl nsw i64 %537, 2
  br label %539

539:                                              ; preds = %534, %527
  %540 = phi i64 [ %529, %527 ], [ %538, %534 ]
  %541 = phi i32* [ %533, %527 ], [ %536, %534 ]
  %542 = bitcast i32* %541 to i8*
  %543 = bitcast i32* %524 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %542, i8* align 4 %543, i64 %540, i1 false) #6
  %544 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1, i32 0
  %545 = load i32*, i32** %544, align 8
  %546 = bitcast i32* %545 to i8*
  br label %547

547:                                              ; preds = %517, %539
  %548 = phi i32 [ %523, %539 ], [ 0, %517 ]
  %549 = phi i8* [ %546, %539 ], [ null, %517 ]
  %550 = phi i32* [ %545, %539 ], [ null, %517 ]
  %551 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %551) #6
  %552 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %552, label %553, label %555

553:                                              ; preds = %547
  %554 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %554, align 8, !alias.scope !31
  br label %692

555:                                              ; preds = %547
  %556 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %557 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %556, align 8, !noalias !31
  %558 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %557, i64 0, i32 0
  %559 = load i32, i32* %558, align 4, !noalias !31
  %560 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %557, i64 0, i32 1, i64 0
  %561 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %559, i32* %561, align 8, !alias.scope !31
  %562 = icmp sgt i32 %559, 5
  br i1 %562, label %563, label %575

563:                                              ; preds = %555
  %564 = sext i32 %559 to i64
  %565 = shl nsw i64 %564, 2
  %566 = tail call i8* @_Znam(i64 %565) #7, !noalias !31
  %567 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %568 = bitcast i32** %567 to i8**
  store i8* %566, i8** %568, align 8, !alias.scope !31
  %569 = bitcast i32* %560 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %566, i8* align 4 %569, i64 %565, i1 false) #6
  %570 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %571 = bitcast %union.TfLitePtrUnion* %570 to float**
  %572 = load float*, float** %571, align 8
  %573 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %574 = load i32*, i32** %573, align 8
  br label %587

575:                                              ; preds = %555
  %576 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %577 = sext i32 %559 to i64
  %578 = shl nsw i64 %577, 2
  %579 = bitcast %union.anon* %576 to i8*
  %580 = bitcast i32* %560 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %579, i8* align 4 %580, i64 %578, i1 false) #6
  %581 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %582 = bitcast %union.TfLitePtrUnion* %581 to float**
  %583 = load float*, float** %582, align 8
  %584 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %585 = bitcast %union.anon* %584 to i32*
  %586 = icmp sgt i32 %559, 0
  br i1 %586, label %587, label %692

587:                                              ; preds = %575, %563
  %588 = phi i1 [ true, %563 ], [ false, %575 ]
  %589 = phi float* [ %572, %563 ], [ %583, %575 ]
  %590 = phi i32* [ %574, %563 ], [ %585, %575 ]
  %591 = zext i32 %559 to i64
  %592 = icmp ult i32 %559, 8
  br i1 %592, label %678, label %593

593:                                              ; preds = %587
  %594 = and i64 %591, 4294967288
  %595 = add nsw i64 %594, -8
  %596 = lshr exact i64 %595, 3
  %597 = add nuw nsw i64 %596, 1
  %598 = and i64 %597, 3
  %599 = icmp ult i64 %595, 24
  br i1 %599, label %645, label %600

600:                                              ; preds = %593
  %601 = sub nsw i64 %597, %598
  br label %602

602:                                              ; preds = %602, %600
  %603 = phi i64 [ 0, %600 ], [ %642, %602 ]
  %604 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %600 ], [ %640, %602 ]
  %605 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %600 ], [ %641, %602 ]
  %606 = phi i64 [ %601, %600 ], [ %643, %602 ]
  %607 = getelementptr inbounds i32, i32* %590, i64 %603
  %608 = bitcast i32* %607 to <4 x i32>*
  %609 = load <4 x i32>, <4 x i32>* %608, align 4
  %610 = getelementptr inbounds i32, i32* %607, i64 4
  %611 = bitcast i32* %610 to <4 x i32>*
  %612 = load <4 x i32>, <4 x i32>* %611, align 4
  %613 = mul nsw <4 x i32> %609, %604
  %614 = mul nsw <4 x i32> %612, %605
  %615 = or i64 %603, 8
  %616 = getelementptr inbounds i32, i32* %590, i64 %615
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4
  %619 = getelementptr inbounds i32, i32* %616, i64 4
  %620 = bitcast i32* %619 to <4 x i32>*
  %621 = load <4 x i32>, <4 x i32>* %620, align 4
  %622 = mul nsw <4 x i32> %618, %613
  %623 = mul nsw <4 x i32> %621, %614
  %624 = or i64 %603, 16
  %625 = getelementptr inbounds i32, i32* %590, i64 %624
  %626 = bitcast i32* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 4
  %628 = getelementptr inbounds i32, i32* %625, i64 4
  %629 = bitcast i32* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 4
  %631 = mul nsw <4 x i32> %627, %622
  %632 = mul nsw <4 x i32> %630, %623
  %633 = or i64 %603, 24
  %634 = getelementptr inbounds i32, i32* %590, i64 %633
  %635 = bitcast i32* %634 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4
  %637 = getelementptr inbounds i32, i32* %634, i64 4
  %638 = bitcast i32* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 4
  %640 = mul nsw <4 x i32> %636, %631
  %641 = mul nsw <4 x i32> %639, %632
  %642 = add i64 %603, 32
  %643 = add i64 %606, -4
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %645, label %602, !llvm.loop !34

645:                                              ; preds = %602, %593
  %646 = phi <4 x i32> [ undef, %593 ], [ %640, %602 ]
  %647 = phi <4 x i32> [ undef, %593 ], [ %641, %602 ]
  %648 = phi i64 [ 0, %593 ], [ %642, %602 ]
  %649 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %593 ], [ %640, %602 ]
  %650 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %593 ], [ %641, %602 ]
  %651 = icmp eq i64 %598, 0
  br i1 %651, label %668, label %652

652:                                              ; preds = %645, %652
  %653 = phi i64 [ %665, %652 ], [ %648, %645 ]
  %654 = phi <4 x i32> [ %663, %652 ], [ %649, %645 ]
  %655 = phi <4 x i32> [ %664, %652 ], [ %650, %645 ]
  %656 = phi i64 [ %666, %652 ], [ %598, %645 ]
  %657 = getelementptr inbounds i32, i32* %590, i64 %653
  %658 = bitcast i32* %657 to <4 x i32>*
  %659 = load <4 x i32>, <4 x i32>* %658, align 4
  %660 = getelementptr inbounds i32, i32* %657, i64 4
  %661 = bitcast i32* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 4
  %663 = mul nsw <4 x i32> %659, %654
  %664 = mul nsw <4 x i32> %662, %655
  %665 = add i64 %653, 8
  %666 = add i64 %656, -1
  %667 = icmp eq i64 %666, 0
  br i1 %667, label %668, label %652, !llvm.loop !35

668:                                              ; preds = %652, %645
  %669 = phi <4 x i32> [ %646, %645 ], [ %663, %652 ]
  %670 = phi <4 x i32> [ %647, %645 ], [ %664, %652 ]
  %671 = mul <4 x i32> %670, %669
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %673 = mul <4 x i32> %671, %672
  %674 = shufflevector <4 x i32> %673, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %675 = mul <4 x i32> %673, %674
  %676 = extractelement <4 x i32> %675, i32 0
  %677 = icmp eq i64 %594, %591
  br i1 %677, label %689, label %678

678:                                              ; preds = %668, %587
  %679 = phi i64 [ 0, %587 ], [ %594, %668 ]
  %680 = phi i32 [ 1, %587 ], [ %676, %668 ]
  br label %681

681:                                              ; preds = %678, %681
  %682 = phi i64 [ %687, %681 ], [ %679, %678 ]
  %683 = phi i32 [ %686, %681 ], [ %680, %678 ]
  %684 = getelementptr inbounds i32, i32* %590, i64 %682
  %685 = load i32, i32* %684, align 4
  %686 = mul nsw i32 %685, %683
  %687 = add nuw nsw i64 %682, 1
  %688 = icmp eq i64 %687, %591
  br i1 %688, label %689, label %681, !llvm.loop !36

689:                                              ; preds = %681, %668
  %690 = phi i32 [ %676, %668 ], [ %686, %681 ]
  %691 = icmp sgt i32 %690, 0
  br i1 %691, label %692, label %808

692:                                              ; preds = %553, %689, %575
  %693 = phi i1 [ %588, %689 ], [ false, %575 ], [ false, %553 ]
  %694 = phi float* [ %589, %689 ], [ %583, %575 ], [ null, %553 ]
  %695 = phi i32 [ %690, %689 ], [ 1, %575 ], [ 1, %553 ]
  %696 = zext i32 %695 to i64
  %697 = icmp ult i32 %695, 8
  br i1 %697, label %755, label %698

698:                                              ; preds = %692
  %699 = bitcast float* %694 to i8*
  %700 = getelementptr float, float* %694, i64 %696
  %701 = bitcast float* %700 to i8*
  %702 = getelementptr i8, i8* %549, i64 1
  %703 = icmp ugt i8* %702, %699
  %704 = icmp ult i8* %549, %701
  %705 = and i1 %703, %704
  br i1 %705, label %755, label %706

706:                                              ; preds = %698
  %707 = and i64 %696, 4294967288
  %708 = add nsw i64 %707, -8
  %709 = lshr exact i64 %708, 3
  %710 = add nuw nsw i64 %709, 1
  %711 = and i64 %710, 1
  %712 = icmp eq i64 %708, 0
  br i1 %712, label %740, label %713

713:                                              ; preds = %706
  %714 = sub nuw nsw i64 %710, %711
  %715 = load i32, i32* %550, align 4, !alias.scope !37
  %716 = insertelement <4 x i32> undef, i32 %715, i32 0
  %717 = shufflevector <4 x i32> %716, <4 x i32> undef, <4 x i32> zeroinitializer
  %718 = insertelement <4 x i32> undef, i32 %715, i32 0
  %719 = shufflevector <4 x i32> %718, <4 x i32> undef, <4 x i32> zeroinitializer
  %720 = load i32, i32* %550, align 4, !alias.scope !37
  %721 = insertelement <4 x i32> undef, i32 %720, i32 0
  %722 = shufflevector <4 x i32> %721, <4 x i32> undef, <4 x i32> zeroinitializer
  %723 = insertelement <4 x i32> undef, i32 %720, i32 0
  %724 = shufflevector <4 x i32> %723, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %725

725:                                              ; preds = %725, %713
  %726 = phi i64 [ 0, %713 ], [ %737, %725 ]
  %727 = phi i64 [ %714, %713 ], [ %738, %725 ]
  %728 = getelementptr inbounds float, float* %694, i64 %726
  %729 = bitcast float* %728 to <4 x i32>*
  store <4 x i32> %717, <4 x i32>* %729, align 4, !alias.scope !40, !noalias !37
  %730 = getelementptr inbounds float, float* %728, i64 4
  %731 = bitcast float* %730 to <4 x i32>*
  store <4 x i32> %719, <4 x i32>* %731, align 4, !alias.scope !40, !noalias !37
  %732 = or i64 %726, 8
  %733 = getelementptr inbounds float, float* %694, i64 %732
  %734 = bitcast float* %733 to <4 x i32>*
  store <4 x i32> %722, <4 x i32>* %734, align 4, !alias.scope !40, !noalias !37
  %735 = getelementptr inbounds float, float* %733, i64 4
  %736 = bitcast float* %735 to <4 x i32>*
  store <4 x i32> %724, <4 x i32>* %736, align 4, !alias.scope !40, !noalias !37
  %737 = add i64 %726, 16
  %738 = add i64 %727, -2
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %740, label %725, !llvm.loop !42

740:                                              ; preds = %725, %706
  %741 = phi i64 [ 0, %706 ], [ %737, %725 ]
  %742 = icmp eq i64 %711, 0
  br i1 %742, label %753, label %743

743:                                              ; preds = %740
  %744 = load i32, i32* %550, align 4, !alias.scope !37
  %745 = insertelement <4 x i32> undef, i32 %744, i32 0
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> zeroinitializer
  %747 = insertelement <4 x i32> undef, i32 %744, i32 0
  %748 = shufflevector <4 x i32> %747, <4 x i32> undef, <4 x i32> zeroinitializer
  %749 = getelementptr inbounds float, float* %694, i64 %741
  %750 = bitcast float* %749 to <4 x i32>*
  store <4 x i32> %746, <4 x i32>* %750, align 4, !alias.scope !40, !noalias !37
  %751 = getelementptr inbounds float, float* %749, i64 4
  %752 = bitcast float* %751 to <4 x i32>*
  store <4 x i32> %748, <4 x i32>* %752, align 4, !alias.scope !40, !noalias !37
  br label %753

753:                                              ; preds = %740, %743
  %754 = icmp eq i64 %707, %696
  br i1 %754, label %808, label %755

755:                                              ; preds = %753, %698, %692
  %756 = phi i64 [ 0, %698 ], [ 0, %692 ], [ %707, %753 ]
  %757 = xor i64 %756, -1
  %758 = add nsw i64 %757, %696
  %759 = and i64 %696, 7
  %760 = icmp eq i64 %759, 0
  br i1 %760, label %770, label %761

761:                                              ; preds = %755, %761
  %762 = phi i64 [ %767, %761 ], [ %756, %755 ]
  %763 = phi i64 [ %768, %761 ], [ %759, %755 ]
  %764 = load i32, i32* %550, align 4
  %765 = getelementptr inbounds float, float* %694, i64 %762
  %766 = bitcast float* %765 to i32*
  store i32 %764, i32* %766, align 4
  %767 = add nuw nsw i64 %762, 1
  %768 = add i64 %763, -1
  %769 = icmp eq i64 %768, 0
  br i1 %769, label %770, label %761, !llvm.loop !43

770:                                              ; preds = %761, %755
  %771 = phi i64 [ %756, %755 ], [ %767, %761 ]
  %772 = icmp ult i64 %758, 7
  br i1 %772, label %808, label %773

773:                                              ; preds = %770, %773
  %774 = phi i64 [ %806, %773 ], [ %771, %770 ]
  %775 = load i32, i32* %550, align 4
  %776 = getelementptr inbounds float, float* %694, i64 %774
  %777 = bitcast float* %776 to i32*
  store i32 %775, i32* %777, align 4
  %778 = add nuw nsw i64 %774, 1
  %779 = load i32, i32* %550, align 4
  %780 = getelementptr inbounds float, float* %694, i64 %778
  %781 = bitcast float* %780 to i32*
  store i32 %779, i32* %781, align 4
  %782 = add nuw nsw i64 %774, 2
  %783 = load i32, i32* %550, align 4
  %784 = getelementptr inbounds float, float* %694, i64 %782
  %785 = bitcast float* %784 to i32*
  store i32 %783, i32* %785, align 4
  %786 = add nuw nsw i64 %774, 3
  %787 = load i32, i32* %550, align 4
  %788 = getelementptr inbounds float, float* %694, i64 %786
  %789 = bitcast float* %788 to i32*
  store i32 %787, i32* %789, align 4
  %790 = add nuw nsw i64 %774, 4
  %791 = load i32, i32* %550, align 4
  %792 = getelementptr inbounds float, float* %694, i64 %790
  %793 = bitcast float* %792 to i32*
  store i32 %791, i32* %793, align 4
  %794 = add nuw nsw i64 %774, 5
  %795 = load i32, i32* %550, align 4
  %796 = getelementptr inbounds float, float* %694, i64 %794
  %797 = bitcast float* %796 to i32*
  store i32 %795, i32* %797, align 4
  %798 = add nuw nsw i64 %774, 6
  %799 = load i32, i32* %550, align 4
  %800 = getelementptr inbounds float, float* %694, i64 %798
  %801 = bitcast float* %800 to i32*
  store i32 %799, i32* %801, align 4
  %802 = add nuw nsw i64 %774, 7
  %803 = load i32, i32* %550, align 4
  %804 = getelementptr inbounds float, float* %694, i64 %802
  %805 = bitcast float* %804 to i32*
  store i32 %803, i32* %805, align 4
  %806 = add nuw nsw i64 %774, 8
  %807 = icmp eq i64 %806, %696
  br i1 %807, label %808, label %773, !llvm.loop !44

808:                                              ; preds = %770, %773, %753, %689
  %809 = phi i1 [ %588, %689 ], [ %693, %753 ], [ %693, %773 ], [ %693, %770 ]
  br i1 %809, label %810, label %816

810:                                              ; preds = %808
  %811 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %812 = load i32*, i32** %811, align 8
  %813 = icmp eq i32* %812, null
  br i1 %813, label %816, label %814

814:                                              ; preds = %810
  %815 = bitcast i32* %812 to i8*
  tail call void @_ZdaPv(i8* %815) #7
  br label %816

816:                                              ; preds = %808, %810, %814
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %551) #6
  %817 = icmp sgt i32 %548, 5
  br i1 %817, label %818, label %824

818:                                              ; preds = %816
  %819 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %820 = load i32*, i32** %819, align 8
  %821 = icmp eq i32* %820, null
  br i1 %821, label %824, label %822

822:                                              ; preds = %818
  %823 = bitcast i32* %820 to i8*
  tail call void @_ZdaPv(i8* %823) #7
  br label %824

824:                                              ; preds = %816, %818, %822
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %515) #6
  br label %1064

825:                                              ; preds = %51
  %826 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %826) #6
  %827 = icmp eq %struct.TfLiteTensor* %22, null
  br i1 %827, label %828, label %830

828:                                              ; preds = %825
  %829 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %829, align 8, !alias.scope !45
  br label %858

830:                                              ; preds = %825
  %831 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 2
  %832 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %831, align 8, !noalias !45
  %833 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %832, i64 0, i32 0
  %834 = load i32, i32* %833, align 4, !noalias !45
  %835 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %832, i64 0, i32 1, i64 0
  %836 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %834, i32* %836, align 8, !alias.scope !45
  %837 = icmp sgt i32 %834, 5
  br i1 %837, label %838, label %845

838:                                              ; preds = %830
  %839 = sext i32 %834 to i64
  %840 = shl nsw i64 %839, 2
  %841 = tail call i8* @_Znam(i64 %840) #7, !noalias !45
  %842 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %843 = bitcast i32** %842 to i8**
  store i8* %841, i8** %843, align 8, !alias.scope !45
  %844 = bitcast i8* %841 to i32*
  br label %850

845:                                              ; preds = %830
  %846 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %847 = bitcast %union.anon* %846 to i32*
  %848 = sext i32 %834 to i64
  %849 = shl nsw i64 %848, 2
  br label %850

850:                                              ; preds = %845, %838
  %851 = phi i64 [ %840, %838 ], [ %849, %845 ]
  %852 = phi i32* [ %844, %838 ], [ %847, %845 ]
  %853 = bitcast i32* %852 to i8*
  %854 = bitcast i32* %835 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %853, i8* align 4 %854, i64 %851, i1 false) #6
  %855 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %856 = bitcast %union.TfLitePtrUnion* %855 to i8**
  %857 = load i8*, i8** %856, align 8
  br label %858

858:                                              ; preds = %828, %850
  %859 = phi i32 [ %834, %850 ], [ 0, %828 ]
  %860 = phi i8* [ %857, %850 ], [ null, %828 ]
  %861 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %861) #6
  %862 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %862, label %863, label %865

863:                                              ; preds = %858
  %864 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %864, align 8, !alias.scope !48
  br label %1002

865:                                              ; preds = %858
  %866 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %867 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %866, align 8, !noalias !48
  %868 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %867, i64 0, i32 0
  %869 = load i32, i32* %868, align 4, !noalias !48
  %870 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %867, i64 0, i32 1, i64 0
  %871 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %869, i32* %871, align 8, !alias.scope !48
  %872 = icmp sgt i32 %869, 5
  br i1 %872, label %873, label %885

873:                                              ; preds = %865
  %874 = sext i32 %869 to i64
  %875 = shl nsw i64 %874, 2
  %876 = tail call i8* @_Znam(i64 %875) #7, !noalias !48
  %877 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %878 = bitcast i32** %877 to i8**
  store i8* %876, i8** %878, align 8, !alias.scope !48
  %879 = bitcast i32* %870 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %876, i8* align 4 %879, i64 %875, i1 false) #6
  %880 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %881 = bitcast %union.TfLitePtrUnion* %880 to i8**
  %882 = load i8*, i8** %881, align 8
  %883 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %884 = load i32*, i32** %883, align 8
  br label %897

885:                                              ; preds = %865
  %886 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %887 = sext i32 %869 to i64
  %888 = shl nsw i64 %887, 2
  %889 = bitcast %union.anon* %886 to i8*
  %890 = bitcast i32* %870 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %889, i8* align 4 %890, i64 %888, i1 false) #6
  %891 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %892 = bitcast %union.TfLitePtrUnion* %891 to i8**
  %893 = load i8*, i8** %892, align 8
  %894 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %895 = bitcast %union.anon* %894 to i32*
  %896 = icmp sgt i32 %869, 0
  br i1 %896, label %897, label %1002

897:                                              ; preds = %885, %873
  %898 = phi i1 [ true, %873 ], [ false, %885 ]
  %899 = phi i8* [ %882, %873 ], [ %893, %885 ]
  %900 = phi i32* [ %884, %873 ], [ %895, %885 ]
  %901 = zext i32 %869 to i64
  %902 = icmp ult i32 %869, 8
  br i1 %902, label %988, label %903

903:                                              ; preds = %897
  %904 = and i64 %901, 4294967288
  %905 = add nsw i64 %904, -8
  %906 = lshr exact i64 %905, 3
  %907 = add nuw nsw i64 %906, 1
  %908 = and i64 %907, 3
  %909 = icmp ult i64 %905, 24
  br i1 %909, label %955, label %910

910:                                              ; preds = %903
  %911 = sub nsw i64 %907, %908
  br label %912

912:                                              ; preds = %912, %910
  %913 = phi i64 [ 0, %910 ], [ %952, %912 ]
  %914 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %910 ], [ %950, %912 ]
  %915 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %910 ], [ %951, %912 ]
  %916 = phi i64 [ %911, %910 ], [ %953, %912 ]
  %917 = getelementptr inbounds i32, i32* %900, i64 %913
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 4
  %920 = getelementptr inbounds i32, i32* %917, i64 4
  %921 = bitcast i32* %920 to <4 x i32>*
  %922 = load <4 x i32>, <4 x i32>* %921, align 4
  %923 = mul nsw <4 x i32> %919, %914
  %924 = mul nsw <4 x i32> %922, %915
  %925 = or i64 %913, 8
  %926 = getelementptr inbounds i32, i32* %900, i64 %925
  %927 = bitcast i32* %926 to <4 x i32>*
  %928 = load <4 x i32>, <4 x i32>* %927, align 4
  %929 = getelementptr inbounds i32, i32* %926, i64 4
  %930 = bitcast i32* %929 to <4 x i32>*
  %931 = load <4 x i32>, <4 x i32>* %930, align 4
  %932 = mul nsw <4 x i32> %928, %923
  %933 = mul nsw <4 x i32> %931, %924
  %934 = or i64 %913, 16
  %935 = getelementptr inbounds i32, i32* %900, i64 %934
  %936 = bitcast i32* %935 to <4 x i32>*
  %937 = load <4 x i32>, <4 x i32>* %936, align 4
  %938 = getelementptr inbounds i32, i32* %935, i64 4
  %939 = bitcast i32* %938 to <4 x i32>*
  %940 = load <4 x i32>, <4 x i32>* %939, align 4
  %941 = mul nsw <4 x i32> %937, %932
  %942 = mul nsw <4 x i32> %940, %933
  %943 = or i64 %913, 24
  %944 = getelementptr inbounds i32, i32* %900, i64 %943
  %945 = bitcast i32* %944 to <4 x i32>*
  %946 = load <4 x i32>, <4 x i32>* %945, align 4
  %947 = getelementptr inbounds i32, i32* %944, i64 4
  %948 = bitcast i32* %947 to <4 x i32>*
  %949 = load <4 x i32>, <4 x i32>* %948, align 4
  %950 = mul nsw <4 x i32> %946, %941
  %951 = mul nsw <4 x i32> %949, %942
  %952 = add i64 %913, 32
  %953 = add i64 %916, -4
  %954 = icmp eq i64 %953, 0
  br i1 %954, label %955, label %912, !llvm.loop !51

955:                                              ; preds = %912, %903
  %956 = phi <4 x i32> [ undef, %903 ], [ %950, %912 ]
  %957 = phi <4 x i32> [ undef, %903 ], [ %951, %912 ]
  %958 = phi i64 [ 0, %903 ], [ %952, %912 ]
  %959 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %903 ], [ %950, %912 ]
  %960 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %903 ], [ %951, %912 ]
  %961 = icmp eq i64 %908, 0
  br i1 %961, label %978, label %962

962:                                              ; preds = %955, %962
  %963 = phi i64 [ %975, %962 ], [ %958, %955 ]
  %964 = phi <4 x i32> [ %973, %962 ], [ %959, %955 ]
  %965 = phi <4 x i32> [ %974, %962 ], [ %960, %955 ]
  %966 = phi i64 [ %976, %962 ], [ %908, %955 ]
  %967 = getelementptr inbounds i32, i32* %900, i64 %963
  %968 = bitcast i32* %967 to <4 x i32>*
  %969 = load <4 x i32>, <4 x i32>* %968, align 4
  %970 = getelementptr inbounds i32, i32* %967, i64 4
  %971 = bitcast i32* %970 to <4 x i32>*
  %972 = load <4 x i32>, <4 x i32>* %971, align 4
  %973 = mul nsw <4 x i32> %969, %964
  %974 = mul nsw <4 x i32> %972, %965
  %975 = add i64 %963, 8
  %976 = add i64 %966, -1
  %977 = icmp eq i64 %976, 0
  br i1 %977, label %978, label %962, !llvm.loop !52

978:                                              ; preds = %962, %955
  %979 = phi <4 x i32> [ %956, %955 ], [ %973, %962 ]
  %980 = phi <4 x i32> [ %957, %955 ], [ %974, %962 ]
  %981 = mul <4 x i32> %980, %979
  %982 = shufflevector <4 x i32> %981, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %983 = mul <4 x i32> %981, %982
  %984 = shufflevector <4 x i32> %983, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %985 = mul <4 x i32> %983, %984
  %986 = extractelement <4 x i32> %985, i32 0
  %987 = icmp eq i64 %904, %901
  br i1 %987, label %999, label %988

988:                                              ; preds = %978, %897
  %989 = phi i64 [ 0, %897 ], [ %904, %978 ]
  %990 = phi i32 [ 1, %897 ], [ %986, %978 ]
  br label %991

991:                                              ; preds = %988, %991
  %992 = phi i64 [ %997, %991 ], [ %989, %988 ]
  %993 = phi i32 [ %996, %991 ], [ %990, %988 ]
  %994 = getelementptr inbounds i32, i32* %900, i64 %992
  %995 = load i32, i32* %994, align 4
  %996 = mul nsw i32 %995, %993
  %997 = add nuw nsw i64 %992, 1
  %998 = icmp eq i64 %997, %901
  br i1 %998, label %999, label %991, !llvm.loop !53

999:                                              ; preds = %991, %978
  %1000 = phi i32 [ %986, %978 ], [ %996, %991 ]
  %1001 = icmp sgt i32 %1000, 0
  br i1 %1001, label %1002, label %1040

1002:                                             ; preds = %863, %999, %885
  %1003 = phi i1 [ %898, %999 ], [ false, %885 ], [ false, %863 ]
  %1004 = phi i8* [ %899, %999 ], [ %893, %885 ], [ null, %863 ]
  %1005 = phi i32 [ %1000, %999 ], [ 1, %885 ], [ 1, %863 ]
  %1006 = zext i32 %1005 to i64
  %1007 = add nsw i64 %1006, -1
  %1008 = and i64 %1006, 3
  %1009 = icmp ult i64 %1007, 3
  br i1 %1009, label %1029, label %1010

1010:                                             ; preds = %1002
  %1011 = sub nsw i64 %1006, %1008
  br label %1012

1012:                                             ; preds = %1012, %1010
  %1013 = phi i64 [ 0, %1010 ], [ %1026, %1012 ]
  %1014 = phi i64 [ %1011, %1010 ], [ %1027, %1012 ]
  %1015 = load i8, i8* %860, align 1, !range !54
  %1016 = getelementptr inbounds i8, i8* %1004, i64 %1013
  store i8 %1015, i8* %1016, align 1
  %1017 = or i64 %1013, 1
  %1018 = load i8, i8* %860, align 1, !range !54
  %1019 = getelementptr inbounds i8, i8* %1004, i64 %1017
  store i8 %1018, i8* %1019, align 1
  %1020 = or i64 %1013, 2
  %1021 = load i8, i8* %860, align 1, !range !54
  %1022 = getelementptr inbounds i8, i8* %1004, i64 %1020
  store i8 %1021, i8* %1022, align 1
  %1023 = or i64 %1013, 3
  %1024 = load i8, i8* %860, align 1, !range !54
  %1025 = getelementptr inbounds i8, i8* %1004, i64 %1023
  store i8 %1024, i8* %1025, align 1
  %1026 = add nuw nsw i64 %1013, 4
  %1027 = add i64 %1014, -4
  %1028 = icmp eq i64 %1027, 0
  br i1 %1028, label %1029, label %1012

1029:                                             ; preds = %1012, %1002
  %1030 = phi i64 [ 0, %1002 ], [ %1026, %1012 ]
  %1031 = icmp eq i64 %1008, 0
  br i1 %1031, label %1040, label %1032

1032:                                             ; preds = %1029, %1032
  %1033 = phi i64 [ %1037, %1032 ], [ %1030, %1029 ]
  %1034 = phi i64 [ %1038, %1032 ], [ %1008, %1029 ]
  %1035 = load i8, i8* %860, align 1, !range !54
  %1036 = getelementptr inbounds i8, i8* %1004, i64 %1033
  store i8 %1035, i8* %1036, align 1
  %1037 = add nuw nsw i64 %1033, 1
  %1038 = add i64 %1034, -1
  %1039 = icmp eq i64 %1038, 0
  br i1 %1039, label %1040, label %1032, !llvm.loop !55

1040:                                             ; preds = %1029, %1032, %999
  %1041 = phi i1 [ %898, %999 ], [ %1003, %1032 ], [ %1003, %1029 ]
  br i1 %1041, label %1042, label %1048

1042:                                             ; preds = %1040
  %1043 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %1044 = load i32*, i32** %1043, align 8
  %1045 = icmp eq i32* %1044, null
  br i1 %1045, label %1048, label %1046

1046:                                             ; preds = %1042
  %1047 = bitcast i32* %1044 to i8*
  tail call void @_ZdaPv(i8* %1047) #7
  br label %1048

1048:                                             ; preds = %1040, %1042, %1046
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %861) #6
  %1049 = icmp sgt i32 %859, 5
  br i1 %1049, label %1050, label %1056

1050:                                             ; preds = %1048
  %1051 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %1052 = load i32*, i32** %1051, align 8
  %1053 = icmp eq i32* %1052, null
  br i1 %1053, label %1056, label %1054

1054:                                             ; preds = %1050
  %1055 = bitcast i32* %1052 to i8*
  tail call void @_ZdaPv(i8* %1055) #7
  br label %1056

1056:                                             ; preds = %1048, %1050, %1054
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %826) #6
  br label %1064

1057:                                             ; preds = %51
  %1058 = tail call i32 @_ZN6tflite3ops7builtin4fill10FillStringEPK12TfLiteTensorPS3_(%struct.TfLiteTensor* %22, %struct.TfLiteTensor* %34)
  br label %1064

1059:                                             ; preds = %51
  %1060 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1061 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1060, align 8
  %1062 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 0
  %1063 = load i32, i32* %1062, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1061(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.13, i64 0, i64 0), i32 %1063) #6
  br label %1064

1064:                                             ; preds = %281, %513, %824, %1056, %1057, %47, %1059
  %1065 = phi i32 [ 1, %1059 ], [ %49, %47 ], [ 0, %1057 ], [ 0, %1056 ], [ 0, %824 ], [ 0, %513 ], [ 0, %281 ]
  ret i32 %1065
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin13Register_FILLEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin13Register_FILLEvE1r to %struct.TfLiteRegistration*)
}

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

declare void @TfLiteIntArrayFree(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !7, !3}
!17 = distinct !{!17, !5}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!20 = distinct !{!20, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!23 = distinct !{!23, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !7, !3}
!27 = distinct !{!27, !5}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!30 = distinct !{!30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!33 = distinct !{!33, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !7, !3}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !3}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!47 = distinct !{!47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!50 = distinct !{!50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !5}
!53 = distinct !{!53, !7, !3}
!54 = !{i8 0, i8 2}
!55 = distinct !{!55, !5}
