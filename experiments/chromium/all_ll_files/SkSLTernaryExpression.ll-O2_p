; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLTernaryExpression.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLTernaryExpression.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.10" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type opaque
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::Operator" = type { i32 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::TernaryExpression" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Expression"* }

$_ZN4SkSL13ErrorReporter5errorEiPKc = comdat any

$_ZN4SkSL17TernaryExpressionD2Ev = comdat any

$_ZN4SkSL17TernaryExpressionD0Ev = comdat any

$_ZNK4SkSL17TernaryExpression11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL10Expression21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL10Expression15compareConstantERKS0_ = comdat any

$_ZNK4SkSL17TernaryExpression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL17TernaryExpression11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL10Expression24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL17TernaryExpression5cloneEv = comdat any

$_ZTVN4SkSL17TernaryExpressionE = comdat any

@.str = private unnamed_addr constant [36 x i8] c"ternary operator result mismatch: '\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"', '\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"ternary expression of opaque type '\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"' not allowed\00", align 1
@.str.5 = private unnamed_addr constant [76 x i8] c"ternary operator result may not be an array (or struct containing an array)\00", align 1
@_ZTVN4SkSL17TernaryExpressionE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TernaryExpression"*)* @_ZN4SkSL17TernaryExpressionD2Ev to i8*), i8* bitcast (void (%"class.SkSL::TernaryExpression"*)* @_ZN4SkSL17TernaryExpressionD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::TernaryExpression"*)* @_ZNK4SkSL17TernaryExpression11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression15compareConstantERKS0_ to i8*), i8* bitcast (i1 (%"class.SkSL::TernaryExpression"*)* @_ZNK4SkSL17TernaryExpression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::TernaryExpression"*, i32)* @_ZNK4SkSL17TernaryExpression11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)* @_ZNK4SkSL10Expression24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::TernaryExpression"*)* @_ZNK4SkSL17TernaryExpression5cloneEv to i8*)] }, comdat, align 8
@.str.7 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" ? \00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c")\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL17TernaryExpression7ConvertERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_S9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"struct.SkSL::StringFragment"*
  %7 = alloca %"class.SkSL::Type"*, align 8
  %8 = alloca %"class.SkSL::Type"*, align 8
  %9 = alloca %"class.SkSL::Type"*, align 8
  %10 = alloca %"class.SkSL::Operator", align 4
  %11 = alloca %"class.SkSL::String", align 8
  %12 = alloca %"class.SkSL::String", align 8
  %13 = alloca %"class.SkSL::String", align 8
  %14 = alloca %"class.SkSL::String", align 8
  %15 = alloca %"class.SkSL::String", align 8
  %16 = alloca %"class.SkSL::String", align 8
  %17 = alloca %"class.SkSL::String", align 8
  %18 = alloca %"class.SkSL::String", align 8
  %19 = alloca %"class.SkSL::String", align 8
  %20 = ptrtoint %"class.SkSL::Expression"* %2 to i64
  %21 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %22 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %22, align 8
  %24 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %23, %"class.SkSL::Expression"* %1, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %25 = ptrtoint %"class.SkSL::Expression"* %24 to i64
  %26 = icmp ne %"class.SkSL::Expression"* %24, null
  %27 = icmp ne %"class.SkSL::Expression"* %2, null
  %28 = and i1 %27, %26
  %29 = icmp ne %"class.SkSL::Expression"* %3, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %300

31:                                               ; preds = %4
  %32 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %24, i64 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = bitcast %"class.SkSL::Type"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %7, align 8
  %35 = bitcast %"class.SkSL::Type"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %8, align 8
  %36 = bitcast %"class.SkSL::Type"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %9, align 8
  %37 = bitcast %"class.SkSL::Operator"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #8
  %38 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %10, i64 0, i32 0
  store i32 65, i32* %38, align 4
  %39 = bitcast %"class.SkSL::Expression"* %2 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %40 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %39, align 8
  %41 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %40, i64 3
  %42 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %41, align 8
  %43 = tail call dereferenceable(184) %"class.SkSL::Type"* %42(%"class.SkSL::Expression"* nonnull %2) #8
  %44 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %45 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %44, align 8
  %46 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %45, i64 3
  %47 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %46, align 8
  %48 = tail call dereferenceable(184) %"class.SkSL::Type"* %47(%"class.SkSL::Expression"* nonnull %3) #8
  %49 = call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* nonnull %10, %"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Type"* dereferenceable(184) %43, %"class.SkSL::Type"* dereferenceable(184) %48, %"class.SkSL::Type"** nonnull %7, %"class.SkSL::Type"** nonnull %8, %"class.SkSL::Type"** nonnull %9) #8
  br i1 %49, label %50, label %62

50:                                               ; preds = %31
  %51 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %7, align 8
  %52 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %8, align 8
  %53 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #8
  %54 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %51, i64 0, i32 0, i32 1, i32 0
  %55 = bitcast i8** %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  store <2 x i64> %56, <2 x i64>* %5, align 16
  %57 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %52, i64 0, i32 0, i32 1, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %52, i64 0, i32 0, i32 1, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = call zeroext i1 @_ZNK4SkSL14StringFragmentneES0_(%"struct.SkSL::StringFragment"* nonnull %6, i8* %58, i64 %60) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #8
  br i1 %61, label %62, label %192

62:                                               ; preds = %50, %31
  %63 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %64 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %63, align 8
  %65 = bitcast %"class.SkSL::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #8
  %66 = bitcast %"class.SkSL::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #8
  %67 = bitcast %"class.SkSL::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67) #8
  %68 = bitcast %"class.SkSL::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68) #8
  %69 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %39, align 8
  %70 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %69, i64 3
  %71 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %70, align 8
  %72 = call dereferenceable(184) %"class.SkSL::Type"* %71(%"class.SkSL::Expression"* nonnull %2) #8
  %73 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %72, i64 0, i32 18
  %74 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %73, align 8, !noalias !2
  %75 = icmp eq %"class.SkSL::Type"* %74, null
  %76 = select i1 %75, %"class.SkSL::Type"* %72, %"class.SkSL::Type"* %74
  %77 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %76, i64 0, i32 0, i32 1, i32 0
  %78 = load i8*, i8** %77, align 8, !noalias !2
  %79 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %76, i64 0, i32 0, i32 1, i32 1
  %80 = load i64, i64* %79, align 8, !noalias !2
  %81 = icmp ugt i64 %80, -17
  br i1 %81, label %82, label %84

82:                                               ; preds = %62
  %83 = bitcast %"class.SkSL::String"* %15 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %83) #9
  unreachable

84:                                               ; preds = %62
  %85 = icmp ult i64 %80, 23
  br i1 %85, label %94, label %86

86:                                               ; preds = %84
  %87 = add nuw i64 %80, 16
  %88 = and i64 %87, -16
  %89 = call i8* @_Znwm(i64 %88) #10
  %90 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %89, i8** %90, align 8, !alias.scope !2
  %91 = or i64 %88, -9223372036854775808
  %92 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %91, i64* %92, align 8, !alias.scope !2
  %93 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %80, i64* %93, align 8, !alias.scope !2
  br label %99

94:                                               ; preds = %84
  %95 = trunc i64 %80 to i8
  %96 = bitcast %"class.SkSL::String"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %97 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %96, i64 0, i32 1, i32 0
  store i8 %95, i8* %97, align 1, !alias.scope !2
  %98 = icmp eq i64 %80, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %94, %86
  %100 = phi i8* [ %89, %86 ], [ %68, %94 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %100, i8* align 1 %78, i64 %80, i1 false) #8
  br label %101

101:                                              ; preds = %94, %99
  %102 = phi i8* [ %68, %94 ], [ %100, %99 ]
  %103 = getelementptr inbounds i8, i8* %102, i64 %80
  store i8 0, i8* %103, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %14, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %15) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %13, %"class.SkSL::String"* nonnull %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #8
  %104 = bitcast %"class.SkSL::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #8
  %105 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %44, align 8
  %106 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %105, i64 3
  %107 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %106, align 8
  %108 = call dereferenceable(184) %"class.SkSL::Type"* %107(%"class.SkSL::Expression"* nonnull %3) #8
  %109 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %108, i64 0, i32 18
  %110 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %109, align 8, !noalias !5
  %111 = icmp eq %"class.SkSL::Type"* %110, null
  %112 = select i1 %111, %"class.SkSL::Type"* %108, %"class.SkSL::Type"* %110
  %113 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %112, i64 0, i32 0, i32 1, i32 0
  %114 = load i8*, i8** %113, align 8, !noalias !5
  %115 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %112, i64 0, i32 0, i32 1, i32 1
  %116 = load i64, i64* %115, align 8, !noalias !5
  %117 = icmp ugt i64 %116, -17
  br i1 %117, label %118, label %120

118:                                              ; preds = %101
  %119 = bitcast %"class.SkSL::String"* %16 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %119) #9
  unreachable

120:                                              ; preds = %101
  %121 = icmp ult i64 %116, 23
  br i1 %121, label %130, label %122

122:                                              ; preds = %120
  %123 = add nuw i64 %116, 16
  %124 = and i64 %123, -16
  %125 = call i8* @_Znwm(i64 %124) #10
  %126 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %125, i8** %126, align 8, !alias.scope !5
  %127 = or i64 %124, -9223372036854775808
  %128 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %127, i64* %128, align 8, !alias.scope !5
  %129 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %116, i64* %129, align 8, !alias.scope !5
  br label %135

130:                                              ; preds = %120
  %131 = trunc i64 %116 to i8
  %132 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %133 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  store i8 %131, i8* %133, align 1, !alias.scope !5
  %134 = icmp eq i64 %116, 0
  br i1 %134, label %137, label %135

135:                                              ; preds = %130, %122
  %136 = phi i8* [ %125, %122 ], [ %104, %130 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %136, i8* align 1 %114, i64 %116, i1 false) #8
  br label %137

137:                                              ; preds = %130, %135
  %138 = phi i8* [ %104, %130 ], [ %136, %135 ]
  %139 = getelementptr inbounds i8, i8* %138, i64 %116
  store i8 0, i8* %139, align 1
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %12, %"class.SkSL::String"* nonnull %13, %"class.SkSL::String"* nonnull dereferenceable(24) %16) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %11, %"class.SkSL::String"* nonnull %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #8
  %140 = bitcast %"class.SkSL::ErrorReporter"* %64 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %141 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %140, align 8
  %142 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %141, i64 2
  %143 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %142, align 8
  call void %143(%"class.SkSL::ErrorReporter"* %64, i32 %33, %"class.SkSL::String"* nonnull %11) #8
  %144 = bitcast %"class.SkSL::String"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %145 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %144, i64 0, i32 1, i32 0
  %146 = load i8, i8* %145, align 1
  %147 = icmp slt i8 %146, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %137
  %149 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  call void @_ZdlPv(i8* %150) #10
  br label %151

151:                                              ; preds = %137, %148
  %152 = bitcast %"class.SkSL::String"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  call void @_ZdlPv(i8* %158) #10
  br label %159

159:                                              ; preds = %151, %156
  %160 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %161 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %160, i64 0, i32 1, i32 0
  %162 = load i8, i8* %161, align 1
  %163 = icmp slt i8 %162, 0
  br i1 %163, label %164, label %167

164:                                              ; preds = %159
  %165 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load i8*, i8** %165, align 8
  call void @_ZdlPv(i8* %166) #10
  br label %167

167:                                              ; preds = %159, %164
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #8
  %168 = bitcast %"class.SkSL::String"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %169 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %168, i64 0, i32 1, i32 0
  %170 = load i8, i8* %169, align 1
  %171 = icmp slt i8 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  call void @_ZdlPv(i8* %174) #10
  br label %175

175:                                              ; preds = %167, %172
  %176 = bitcast %"class.SkSL::String"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %177 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %176, i64 0, i32 1, i32 0
  %178 = load i8, i8* %177, align 1
  %179 = icmp slt i8 %178, 0
  br i1 %179, label %180, label %183

180:                                              ; preds = %175
  %181 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  call void @_ZdlPv(i8* %182) #10
  br label %183

183:                                              ; preds = %175, %180
  %184 = bitcast %"class.SkSL::String"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %185 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %184, i64 0, i32 1, i32 0
  %186 = load i8, i8* %185, align 1
  %187 = icmp slt i8 %186, 0
  br i1 %187, label %188, label %191

188:                                              ; preds = %183
  %189 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load i8*, i8** %189, align 8
  call void @_ZdlPv(i8* %190) #10
  br label %191

191:                                              ; preds = %183, %188
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %68) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #8
  br label %295

192:                                              ; preds = %50
  %193 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %7, align 8
  %194 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %193, i64 0, i32 6
  %195 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %194, align 8
  %196 = icmp eq %"class.SkSL::Type"* %195, null
  %197 = select i1 %196, %"class.SkSL::Type"* %193, %"class.SkSL::Type"* %195
  %198 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %197, i64 0, i32 3
  %199 = load i32, i32* %198, align 8
  switch i32 %199, label %264 [
    i32 13, label %200
    i32 2, label %200
    i32 5, label %200
    i32 6, label %200
    i32 7, label %200
    i32 14, label %200
    i32 10, label %200
    i32 12, label %200
  ]

200:                                              ; preds = %192, %192, %192, %192, %192, %192, %192, %192
  %201 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %202 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %201, align 8
  %203 = bitcast %"class.SkSL::String"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %203) #8
  %204 = bitcast %"class.SkSL::String"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %204) #8
  %205 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %193, i64 0, i32 18
  %206 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %205, align 8, !noalias !8
  %207 = icmp eq %"class.SkSL::Type"* %206, null
  %208 = select i1 %207, %"class.SkSL::Type"* %193, %"class.SkSL::Type"* %206
  %209 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %208, i64 0, i32 0, i32 1, i32 0
  %210 = load i8*, i8** %209, align 8, !noalias !8
  %211 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %208, i64 0, i32 0, i32 1, i32 1
  %212 = load i64, i64* %211, align 8, !noalias !8
  %213 = icmp ugt i64 %212, -17
  br i1 %213, label %214, label %216

214:                                              ; preds = %200
  %215 = bitcast %"class.SkSL::String"* %19 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %215) #9
  unreachable

216:                                              ; preds = %200
  %217 = icmp ult i64 %212, 23
  br i1 %217, label %226, label %218

218:                                              ; preds = %216
  %219 = add nuw i64 %212, 16
  %220 = and i64 %219, -16
  %221 = call i8* @_Znwm(i64 %220) #10
  %222 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %221, i8** %222, align 8, !alias.scope !8
  %223 = or i64 %220, -9223372036854775808
  %224 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %223, i64* %224, align 8, !alias.scope !8
  %225 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %212, i64* %225, align 8, !alias.scope !8
  br label %231

226:                                              ; preds = %216
  %227 = trunc i64 %212 to i8
  %228 = bitcast %"class.SkSL::String"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %229 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %228, i64 0, i32 1, i32 0
  store i8 %227, i8* %229, align 1, !alias.scope !8
  %230 = icmp eq i64 %212, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %226, %218
  %232 = phi i8* [ %221, %218 ], [ %204, %226 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %232, i8* align 1 %210, i64 %212, i1 false) #8
  br label %233

233:                                              ; preds = %226, %231
  %234 = phi i8* [ %204, %226 ], [ %232, %231 ]
  %235 = getelementptr inbounds i8, i8* %234, i64 %212
  store i8 0, i8* %235, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %18, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %19) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %17, %"class.SkSL::String"* nonnull %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)) #8
  %236 = bitcast %"class.SkSL::ErrorReporter"* %202 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %237 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %236, align 8
  %238 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %237, i64 2
  %239 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %238, align 8
  call void %239(%"class.SkSL::ErrorReporter"* %202, i32 %33, %"class.SkSL::String"* nonnull %17) #8
  %240 = bitcast %"class.SkSL::String"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %241 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %240, i64 0, i32 1, i32 0
  %242 = load i8, i8* %241, align 1
  %243 = icmp slt i8 %242, 0
  br i1 %243, label %244, label %247

244:                                              ; preds = %233
  %245 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8
  call void @_ZdlPv(i8* %246) #10
  br label %247

247:                                              ; preds = %233, %244
  %248 = bitcast %"class.SkSL::String"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %249 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %248, i64 0, i32 1, i32 0
  %250 = load i8, i8* %249, align 1
  %251 = icmp slt i8 %250, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %247
  %253 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  call void @_ZdlPv(i8* %254) #10
  br label %255

255:                                              ; preds = %247, %252
  %256 = bitcast %"class.SkSL::String"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %257 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %256, i64 0, i32 1, i32 0
  %258 = load i8, i8* %257, align 1
  %259 = icmp slt i8 %258, 0
  br i1 %259, label %260, label %263

260:                                              ; preds = %255
  %261 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %262 = load i8*, i8** %261, align 8
  call void @_ZdlPv(i8* %262) #10
  br label %263

263:                                              ; preds = %255, %260
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %204) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %203) #8
  br label %295

264:                                              ; preds = %192
  %265 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %266 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %265, align 8
  %267 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %266, i64 0, i32 1, i32 19
  %268 = load i8, i8* %267, align 1, !range !11
  %269 = icmp eq i8 %268, 0
  br i1 %269, label %282, label %270

270:                                              ; preds = %264
  %271 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %266, i64 0, i32 0
  %272 = load i8, i8* %271, align 8
  %273 = add i8 %272, -4
  %274 = icmp ult i8 %273, 3
  br i1 %274, label %275, label %282

275:                                              ; preds = %270
  %276 = call zeroext i1 @_ZNK4SkSL4Type17isOrContainsArrayEv(%"class.SkSL::Type"* %193) #8
  br i1 %276, label %279, label %277

277:                                              ; preds = %275
  %278 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %7, align 8
  br label %282

279:                                              ; preds = %275
  %280 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %281 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %280, align 8
  call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %281, i32 %33, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.5, i64 0, i64 0))
  br label %295

282:                                              ; preds = %277, %264, %270
  %283 = phi %"class.SkSL::Type"* [ %278, %277 ], [ %193, %264 ], [ %193, %270 ]
  %284 = call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %283, %"class.SkSL::Expression"* nonnull %2, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %285 = ptrtoint %"class.SkSL::Expression"* %284 to i64
  %286 = icmp eq %"class.SkSL::Expression"* %284, null
  br i1 %286, label %295, label %287

287:                                              ; preds = %282
  %288 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %8, align 8
  %289 = call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %288, %"class.SkSL::Expression"* nonnull %3, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %290 = ptrtoint %"class.SkSL::Expression"* %289 to i64
  %291 = icmp eq %"class.SkSL::Expression"* %289, null
  br i1 %291, label %295, label %292

292:                                              ; preds = %287
  %293 = call %"class.SkSL::Expression"* @_ZN4SkSL17TernaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_S9_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* nonnull %24, %"class.SkSL::Expression"* nonnull %284, %"class.SkSL::Expression"* nonnull %289)
  %294 = ptrtoint %"class.SkSL::Expression"* %293 to i64
  br label %295

295:                                              ; preds = %287, %282, %292, %279, %263, %191
  %296 = phi i64 [ %21, %191 ], [ %21, %263 ], [ %21, %279 ], [ 0, %292 ], [ %21, %282 ], [ %290, %287 ]
  %297 = phi i64 [ %20, %191 ], [ %20, %263 ], [ %20, %279 ], [ 0, %292 ], [ %285, %282 ], [ %285, %287 ]
  %298 = phi i64 [ %25, %191 ], [ %25, %263 ], [ %25, %279 ], [ 0, %292 ], [ %25, %282 ], [ %25, %287 ]
  %299 = phi i64 [ 0, %191 ], [ 0, %263 ], [ 0, %279 ], [ %294, %292 ], [ 0, %282 ], [ 0, %287 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #8
  br label %300

300:                                              ; preds = %4, %295
  %301 = phi i64 [ %296, %295 ], [ %21, %4 ]
  %302 = phi i64 [ %297, %295 ], [ %20, %4 ]
  %303 = phi i64 [ %298, %295 ], [ %25, %4 ]
  %304 = phi i64 [ %299, %295 ], [ 0, %4 ]
  %305 = icmp eq i64 %301, 0
  br i1 %305, label %312, label %306

306:                                              ; preds = %300
  %307 = inttoptr i64 %301 to %"class.SkSL::Expression"*
  %308 = inttoptr i64 %301 to void (%"class.SkSL::Expression"*)***
  %309 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %308, align 8
  %310 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %309, i64 1
  %311 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %310, align 8
  call void %311(%"class.SkSL::Expression"* nonnull %307) #8
  br label %312

312:                                              ; preds = %300, %306
  %313 = icmp eq i64 %302, 0
  br i1 %313, label %320, label %314

314:                                              ; preds = %312
  %315 = inttoptr i64 %302 to %"class.SkSL::Expression"*
  %316 = inttoptr i64 %302 to void (%"class.SkSL::Expression"*)***
  %317 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %316, align 8
  %318 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %317, i64 1
  %319 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %318, align 8
  call void %319(%"class.SkSL::Expression"* nonnull %315) #8
  br label %320

320:                                              ; preds = %312, %314
  %321 = icmp eq i64 %303, 0
  br i1 %321, label %328, label %322

322:                                              ; preds = %320
  %323 = inttoptr i64 %303 to %"class.SkSL::Expression"*
  %324 = inttoptr i64 %303 to void (%"class.SkSL::Expression"*)***
  %325 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %324, align 8
  %326 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %325, i64 1
  %327 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %326, align 8
  call void %327(%"class.SkSL::Expression"* nonnull %323) #8
  br label %328

328:                                              ; preds = %320, %322
  %329 = inttoptr i64 %304 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %329
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"*, %"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.SkSL::Type"**) local_unnamed_addr #2

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* sret, %"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL4Type17isOrContainsArrayEv(%"class.SkSL::Type"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"*, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = tail call i64 @strlen(i8* %2) #8
  %6 = icmp ugt i64 %5, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.SkSL::String"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #9
  unreachable

9:                                                ; preds = %3
  %10 = icmp ult i64 %5, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %5, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #10
  %15 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %18, align 8
  %19 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %26

20:                                               ; preds = %9
  %21 = trunc i64 %5 to i8
  %22 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.SkSL::String"* %4 to i8*
  %25 = icmp eq i64 %5, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20, %11
  %27 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %28 = phi i8* [ %24, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 %2, i64 %5, i1 false) #8
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %27, %26 ]
  %31 = phi i8* [ %24, %20 ], [ %28, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %5
  store i8 0, i8* %32, align 1
  %33 = bitcast %"class.SkSL::ErrorReporter"* %0 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %34 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %34, i64 2
  %36 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %35, align 8
  call void %36(%"class.SkSL::ErrorReporter"* %0, i32 %1, %"class.SkSL::String"* nonnull %4) #8
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #10
  br label %43

43:                                               ; preds = %29, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL17TernaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_S9_(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %8 = ptrtoint %"class.SkSL::Expression"* %2 to i64
  store i64 %8, i64* %5, align 8
  %9 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  store i64 %9, i64* %6, align 8
  %10 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %11 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %10, align 8
  %12 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %11, i64 0, i32 1, i32 10
  %13 = load i8, i8* %12, align 4, !range !11
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %4
  %16 = tail call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %1) #8
  %17 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %16, i64 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 31
  br i1 %19, label %43, label %20

20:                                               ; preds = %15, %4
  %21 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %22 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #8
  %23 = load i32, i32* %21, align 4
  store i64 0, i64* %5, align 8
  %24 = bitcast %"class.SkSL::Expression"* %2 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %25 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %25, i64 3
  %27 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %26, align 8
  %28 = tail call dereferenceable(184) %"class.SkSL::Type"* %27(%"class.SkSL::Expression"* %2) #8
  %29 = bitcast i8* %22 to i32 (...)***
  %30 = getelementptr inbounds i8, i8* %22, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %23, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %22, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 53, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %22, i64 16
  %35 = bitcast i8* %34 to %"class.SkSL::Type"**
  store %"class.SkSL::Type"* %28, %"class.SkSL::Type"** %35, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL17TernaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %36 = getelementptr inbounds i8, i8* %22, i64 24
  %37 = bitcast i8* %36 to i64*
  store i64 %7, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %22, i64 32
  %39 = bitcast i8* %38 to i64*
  store i64 %8, i64* %39, align 8
  %40 = getelementptr inbounds i8, i8* %22, i64 40
  %41 = bitcast i8* %40 to i64*
  store i64 %9, i64* %41, align 8
  %42 = ptrtoint i8* %22 to i64
  store i64 0, i64* %6, align 8
  br label %59

43:                                               ; preds = %15
  %44 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %16, i64 1
  %45 = bitcast %"class.SkSL::Expression"* %44 to i8*
  %46 = load i8, i8* %45, align 8, !range !11
  %47 = icmp eq i8 %46, 0
  %48 = select i1 %47, i64* %6, i64* %5
  %49 = bitcast i64* %48 to %"class.SkSL::Expression"**
  %50 = load i64, i64* %48, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %49, align 8
  %51 = bitcast i64* %6 to %"class.SkSL::Expression"**
  %52 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %51, align 8
  store i64 0, i64* %6, align 8
  %53 = icmp eq %"class.SkSL::Expression"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %43
  %55 = bitcast %"class.SkSL::Expression"* %52 to void (%"class.SkSL::Expression"*)***
  %56 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %56, i64 1
  %58 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %57, align 8
  tail call void %58(%"class.SkSL::Expression"* nonnull %52) #8
  br label %59

59:                                               ; preds = %20, %43, %54
  %60 = phi i64 [ %42, %20 ], [ %50, %43 ], [ %50, %54 ]
  %61 = phi %"class.SkSL::Expression"* [ null, %20 ], [ %1, %43 ], [ %1, %54 ]
  %62 = bitcast i64* %5 to %"class.SkSL::Expression"**
  %63 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %62, align 8
  store i64 0, i64* %5, align 8
  %64 = icmp eq %"class.SkSL::Expression"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Expression"* %63 to void (%"class.SkSL::Expression"*)***
  %67 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %68, align 8
  tail call void %69(%"class.SkSL::Expression"* nonnull %63) #8
  br label %70

70:                                               ; preds = %59, %65
  %71 = icmp eq %"class.SkSL::Expression"* %61, null
  br i1 %71, label %77, label %72

72:                                               ; preds = %70
  %73 = bitcast %"class.SkSL::Expression"* %61 to void (%"class.SkSL::Expression"*)***
  %74 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %74, i64 1
  %76 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %75, align 8
  tail call void %76(%"class.SkSL::Expression"* nonnull %61) #8
  br label %77

77:                                               ; preds = %70, %72
  %78 = inttoptr i64 %60 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %78
}

declare %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL14StringFragmentneES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL17TernaryExpressionD2Ev(%"class.SkSL::TernaryExpression"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL17TernaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #8
  br label %29

29:                                               ; preds = %20, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL17TernaryExpressionD0Ev(%"class.SkSL::TernaryExpression"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL17TernaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #8
  br label %29

29:                                               ; preds = %20, %24
  %30 = bitcast %"class.SkSL::TernaryExpression"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %30) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL17TernaryExpression11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::TernaryExpression"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = alloca %"class.SkSL::String", align 8
  %11 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #8
  %13 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %14 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %18 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %18, i64 0, i32 0
  %20 = bitcast %"class.SkSL::Expression"* %18 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %21 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %21, i64 2
  %23 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %22, align 8
  call void %23(%"class.SkSL::String"* nonnull sret %8, %"class.SkSL::IRNode"* %19) #8
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %8) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::String"* nonnull %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)) #8
  %24 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #8
  %25 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %26, i64 0, i32 0
  %28 = bitcast %"class.SkSL::Expression"* %26 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %29 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %29, i64 2
  %31 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %30, align 8
  call void %31(%"class.SkSL::String"* nonnull sret %9, %"class.SkSL::IRNode"* %27) #8
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* nonnull %6, %"class.SkSL::String"* nonnull dereferenceable(24) %9) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #8
  %32 = bitcast %"class.SkSL::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #8
  %33 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %34 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %33, align 8
  %35 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %34, i64 0, i32 0
  %36 = bitcast %"class.SkSL::Expression"* %34 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %37 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %37, i64 2
  %39 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %38, align 8
  call void %39(%"class.SkSL::String"* nonnull sret %10, %"class.SkSL::IRNode"* %35) #8
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, %"class.SkSL::String"* nonnull dereferenceable(24) %10) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #8
  %40 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %2
  %45 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %46) #10
  br label %47

47:                                               ; preds = %2, %44
  %48 = bitcast %"class.SkSL::String"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %54) #10
  br label %55

55:                                               ; preds = %47, %52
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #8
  %56 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #10
  br label %63

63:                                               ; preds = %55, %60
  %64 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  call void @_ZdlPv(i8* %70) #10
  br label %71

71:                                               ; preds = %63, %68
  %72 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %73 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %72, i64 0, i32 1, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  call void @_ZdlPv(i8* %78) #10
  br label %79

79:                                               ; preds = %71, %76
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #8
  %80 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %81 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %80, i64 0, i32 1, i32 0
  %82 = load i8, i8* %81, align 1
  %83 = icmp slt i8 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %86) #10
  br label %87

87:                                               ; preds = %79, %84
  %88 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  %90 = load i8, i8* %89, align 1
  %91 = icmp slt i8 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  call void @_ZdlPv(i8* %94) #10
  br label %95

95:                                               ; preds = %87, %92
  %96 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %97 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %96, i64 0, i32 1, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %100, label %103

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  call void @_ZdlPv(i8* %102) #10
  br label %103

103:                                              ; preds = %95, %100
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression21isCompileTimeConstantEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL10Expression15compareConstantERKS0_(%"class.SkSL::Expression"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL17TernaryExpression19isConstantOrUniformEv(%"class.SkSL::TernaryExpression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2, align 8
  %4 = bitcast %"class.SkSL::Expression"* %3 to i1 (%"class.SkSL::Expression"*)***
  %5 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %5, i64 6
  %7 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.SkSL::Expression"* %3) #8
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %10, align 8
  %12 = bitcast %"class.SkSL::Expression"* %11 to i1 (%"class.SkSL::Expression"*)***
  %13 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %13, i64 6
  %15 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.SkSL::Expression"* %11) #8
  br i1 %16, label %17, label %25

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %18, align 8
  %20 = bitcast %"class.SkSL::Expression"* %19 to i1 (%"class.SkSL::Expression"*)***
  %21 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %21, i64 6
  %23 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.SkSL::Expression"* %19) #8
  br label %25

25:                                               ; preds = %17, %9, %1
  %26 = phi i1 [ false, %9 ], [ false, %1 ], [ %24, %17 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL17TernaryExpression11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::TernaryExpression"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to i1 (%"class.SkSL::Expression"*, i32)***
  %6 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %6, i64 7
  %8 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.SkSL::Expression"* %4, i32 %1) #8
  br i1 %9, label %26, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %11, align 8
  %13 = bitcast %"class.SkSL::Expression"* %12 to i1 (%"class.SkSL::Expression"*, i32)***
  %14 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %13, align 8
  %15 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %14, i64 7
  %16 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.SkSL::Expression"* %12, i32 %1) #8
  br i1 %17, label %26, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %19, align 8
  %21 = bitcast %"class.SkSL::Expression"* %20 to i1 (%"class.SkSL::Expression"*, i32)***
  %22 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %22, i64 7
  %24 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.SkSL::Expression"* %20, i32 %1) #8
  br label %26

26:                                               ; preds = %18, %10, %2
  %27 = phi i1 [ true, %10 ], [ true, %2 ], [ %25, %18 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #8
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  ret { i64, i8 } %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL10Expression24getConstantSubexpressionEi(%"class.SkSL::Expression"*, i32) unnamed_addr #0 comdat align 2 {
  ret %"class.SkSL::Expression"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL17TernaryExpression5cloneEv(%"class.SkSL::TernaryExpression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %6 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, i64 10
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* %8(%"class.SkSL::Expression"* %4) #8
  %10 = ptrtoint %"class.SkSL::Expression"* %9 to i64
  %11 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %11, align 8
  %13 = bitcast %"class.SkSL::Expression"* %12 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %14 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %14, i64 10
  %16 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %15, align 8
  %17 = tail call %"class.SkSL::Expression"* %16(%"class.SkSL::Expression"* %12) #8
  %18 = ptrtoint %"class.SkSL::Expression"* %17 to i64
  %19 = getelementptr inbounds %"class.SkSL::TernaryExpression", %"class.SkSL::TernaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %19, align 8
  %21 = bitcast %"class.SkSL::Expression"* %20 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %22 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %22, i64 10
  %24 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %23, align 8
  %25 = tail call %"class.SkSL::Expression"* %24(%"class.SkSL::Expression"* %20) #8
  %26 = ptrtoint %"class.SkSL::Expression"* %25 to i64
  %27 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #8
  %28 = load i32, i32* %2, align 4
  %29 = bitcast %"class.SkSL::Expression"* %17 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %30 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %30, i64 3
  %32 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %31, align 8
  %33 = tail call dereferenceable(184) %"class.SkSL::Type"* %32(%"class.SkSL::Expression"* %17) #8
  %34 = bitcast i8* %27 to i32 (...)***
  %35 = getelementptr inbounds i8, i8* %27, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %27, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 53, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %27, i64 16
  %40 = bitcast i8* %39 to %"class.SkSL::Type"**
  store %"class.SkSL::Type"* %33, %"class.SkSL::Type"** %40, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL17TernaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  %41 = getelementptr inbounds i8, i8* %27, i64 24
  %42 = bitcast i8* %41 to i64*
  store i64 %10, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %27, i64 32
  %44 = bitcast i8* %43 to i64*
  store i64 %18, i64* %44, align 8
  %45 = getelementptr inbounds i8, i8* %27, i64 40
  %46 = bitcast i8* %45 to i64*
  store i64 %26, i64* %46, align 8
  %47 = bitcast i8* %27 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %47
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL4Type11displayNameEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL4Type11displayNameEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!10 = distinct !{!10, !"_ZNK4SkSL4Type11displayNameEv"}
!11 = !{i8 0, i8 2}
