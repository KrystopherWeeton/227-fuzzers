; ModuleID = '../../third_party/webrtc/modules/video_coding/frame_object.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/frame_object.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RtpFrameObject" = type <{ %"class.webrtc::EncodedFrame", %"class.rtc::scoped_refptr.96", %"struct.webrtc::RTPVideoHeader", i32, i16, i16, i64, i32, [4 x i8] }>
%"class.webrtc::EncodedFrame" = type { i32 (...)**, %"class.webrtc::VCMEncodedFrame.base", i64, [5 x i64], i8, i64 }
%"class.webrtc::VCMEncodedFrame.base" = type <{ %"class.webrtc::EncodedImage.base", [7 x i8], i64, i8, i8, [6 x i8], %"struct.webrtc::CodecSpecificInfo", i32 }>
%"class.webrtc::EncodedImage.base" = type <{ i32, i32, i64, i64, i32, i32, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::EncodedImage::Timing", %"class.rtc::scoped_refptr", i64, i32, %"class.absl::optional", [4 x i8], %"class.std::__1::map", %"class.absl::optional.4", %"class.absl::optional.14", [4 x i8], %"class.webrtc::RtpPacketInfos", i8 }>
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::EncodedImage::Timing" = type { i8, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::EncodedImageBufferInterface"* }
%"class.webrtc::EncodedImageBufferInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.absl::optional.4" = type { %"class.absl::optional_internal::optional_data.5" }
%"class.absl::optional_internal::optional_data.5" = type { %"class.absl::optional_internal::optional_data_base.6" }
%"class.absl::optional_internal::optional_data_base.6" = type { %"class.absl::optional_internal::optional_data_dtor_base.7" }
%"class.absl::optional_internal::optional_data_dtor_base.7" = type { i8, %union.anon.8 }
%union.anon.8 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.9" }
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, %union.anon.13 }
%union.anon.13 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.14" = type { %"class.absl::optional_internal::optional_data.15" }
%"class.absl::optional_internal::optional_data.15" = type { %"class.absl::optional_internal::optional_data_base.16" }
%"class.absl::optional_internal::optional_data_base.16" = type { %"class.absl::optional_internal::optional_data_dtor_base.17" }
%"class.absl::optional_internal::optional_data_dtor_base.17" = type { i8, %union.anon.18 }
%union.anon.18 = type { i16 }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr.19" }
%"class.rtc::scoped_refptr.19" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.43" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.21", i32, %"class.absl::optional.28", %"class.absl::optional.33", %"class.absl::optional.38", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"class.absl::optional.28" = type { %"class.absl::optional_internal::optional_data.29" }
%"class.absl::optional_internal::optional_data.29" = type { %"class.absl::optional_internal::optional_data_base.30" }
%"class.absl::optional_internal::optional_data_base.30" = type { %"class.absl::optional_internal::optional_data_dtor_base.31" }
%"class.absl::optional_internal::optional_data_dtor_base.31" = type { i8, %union.anon.32 }
%union.anon.32 = type { i8 }
%"class.absl::optional.33" = type { %"class.absl::optional_internal::optional_data.34" }
%"class.absl::optional_internal::optional_data.34" = type { %"class.absl::optional_internal::optional_data_base.35" }
%"class.absl::optional_internal::optional_data_base.35" = type { %"class.absl::optional_internal::optional_data_dtor_base.36" }
%"class.absl::optional_internal::optional_data_dtor_base.36" = type { i8, %union.anon.37 }
%union.anon.37 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.38" }
%"class.absl::optional.38" = type { %"class.absl::optional_internal::optional_data.39" }
%"class.absl::optional_internal::optional_data.39" = type { %"class.absl::optional_internal::optional_data_base.40" }
%"class.absl::optional_internal::optional_data_base.40" = type { %"class.absl::optional_internal::optional_data_dtor_base.41" }
%"class.absl::optional_internal::optional_data_dtor_base.41" = type { i8, %union.anon.42 }
%union.anon.42 = type { i64 }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.webrtc::RtpPacketInfo"* }
%"struct.webrtc::CodecSpecificInfo" = type { i32, %"union.webrtc::CodecSpecificInfoUnion", i8, %"class.absl::optional.48", %"class.absl::optional.75" }
%"union.webrtc::CodecSpecificInfoUnion" = type { %"struct.webrtc::CodecSpecificInfoVP9" }
%"struct.webrtc::CodecSpecificInfoVP9" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8, [3 x i8], i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { %"struct.webrtc::GenericFrameInfo" }
%"struct.webrtc::GenericFrameInfo" = type { %"struct.webrtc::FrameDependencyTemplate", %"class.absl::InlinedVector.63", %"class.std::__1::vector.70", %"class.std::__1::bitset" }
%"struct.webrtc::FrameDependencyTemplate" = type { i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.56", %"class.absl::InlinedVector.56" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.55" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.56" = type { %"class.absl::inlined_vector_internal::Storage.57" }
%"class.absl::inlined_vector_internal::Storage.57" = type { %"class.absl::container_internal::CompressedTuple.58", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.58" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.59" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.59" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.63" = type { %"class.absl::inlined_vector_internal::Storage.64" }
%"class.absl::inlined_vector_internal::Storage.64" = type { %"class.absl::container_internal::CompressedTuple.65", %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" }
%"class.absl::container_internal::CompressedTuple.65" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.66" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.66" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated" = type { %"struct.webrtc::CodecBufferUsage"*, i64 }
%"struct.webrtc::CodecBufferUsage" = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::vector.70" = type { i64*, i64, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.absl::optional.75" = type { %"class.absl::optional_internal::optional_data.76" }
%"class.absl::optional_internal::optional_data.76" = type { %"class.absl::optional_internal::optional_data_base.77" }
%"class.absl::optional_internal::optional_data_base.77" = type { %"class.absl::optional_internal::optional_data_dtor_base.78" }
%"class.absl::optional_internal::optional_data_dtor_base.78" = type { i8, %union.anon.79 }
%union.anon.79 = type { %"struct.webrtc::FrameDependencyStructure" }
%"struct.webrtc::FrameDependencyStructure" = type { i32, i32, i32, %"class.absl::InlinedVector.80", %"class.absl::InlinedVector.82", %"class.std::__1::vector.89" }
%"class.absl::InlinedVector.80" = type { %"class.absl::inlined_vector_internal::Storage.81" }
%"class.absl::inlined_vector_internal::Storage.81" = type { %"class.absl::container_internal::CompressedTuple.58", %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" }
%"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.82" = type { %"class.absl::inlined_vector_internal::Storage.83" }
%"class.absl::inlined_vector_internal::Storage.83" = type { %"class.absl::container_internal::CompressedTuple.84", %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" }
%"class.absl::container_internal::CompressedTuple.84" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.85" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.85" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated" = type { %"class.webrtc::RenderResolution"*, i64 }
%"class.webrtc::RenderResolution" = type { i32, i32 }
%"class.std::__1::vector.89" = type { %"class.std::__1::__vector_base.90" }
%"class.std::__1::__vector_base.90" = type { %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"*, %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"struct.webrtc::FrameDependencyTemplate"* }
%"class.rtc::scoped_refptr.96" = type { %"class.webrtc::EncodedImageBuffer"* }
%"class.webrtc::EncodedImageBuffer" = type { %"class.webrtc::EncodedImageBufferInterface", i64, i8* }
%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional.97", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.4", %"class.absl::optional.14", %"class.absl::variant" }
%"class.absl::optional.97" = type { %"class.absl::optional_internal::optional_data.98" }
%"class.absl::optional_internal::optional_data.98" = type { %"class.absl::optional_internal::optional_data_base.99" }
%"class.absl::optional_internal::optional_data_base.99" = type { %"class.absl::optional_internal::optional_data_dtor_base.100" }
%"class.absl::optional_internal::optional_data_dtor_base.100" = type { i8, %union.anon.101 }
%union.anon.101 = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.102", %"class.absl::InlinedVector.56", %"class.std::__1::bitset" }
%"class.absl::InlinedVector.102" = type { %"class.absl::inlined_vector_internal::Storage.103" }
%"class.absl::inlined_vector_internal::Storage.103" = type { %"class.absl::container_internal::CompressedTuple.104", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.104" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.105" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.105" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.109" }
%"union.absl::variant_internal::Union.109" = type { %"union.absl::variant_internal::Union.110" }
%"union.absl::variant_internal::Union.110" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"class.webrtc::VCMEncodedFrame" = type <{ %"class.webrtc::EncodedImage.base", [7 x i8], i64, i8, i8, [6 x i8], %"struct.webrtc::CodecSpecificInfo", i32, [4 x i8] }>
%"class.rtc::RefCountedBase" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>

$_ZN6webrtc14RTPVideoHeaderaSERKS0_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m = comdat any

@_ZTVN6webrtc14RtpFrameObjectE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::RtpFrameObject"*)* @_ZN6webrtc14RtpFrameObjectD2Ev to i8*), i8* bitcast (void (%"class.webrtc::RtpFrameObject"*)* @_ZN6webrtc14RtpFrameObjectD0Ev to i8*), i8* bitcast (i64 (%"class.webrtc::RtpFrameObject"*)* @_ZNK6webrtc14RtpFrameObject12ReceivedTimeEv to i8*), i8* bitcast (i64 (%"class.webrtc::RtpFrameObject"*)* @_ZNK6webrtc14RtpFrameObject10RenderTimeEv to i8*), i8* bitcast (i1 (%"class.webrtc::RtpFrameObject"*)* @_ZNK6webrtc14RtpFrameObject25delayed_by_retransmissionEv to i8*)] }, align 8

@_ZN6webrtc14RtpFrameObjectC1EttbilljlRKNS_15VideoSendTimingEhNS_14VideoCodecTypeENS_13VideoRotationENS_16VideoContentTypeERKNS_14RTPVideoHeaderERKN4absl8optionalINS_10ColorSpaceEEENS_14RtpPacketInfosEN3rtc13scoped_refptrINS_18EncodedImageBufferEEE = hidden unnamed_addr alias void (%"class.webrtc::RtpFrameObject"*, i16, i16, i1, i32, i64, i64, i32, i64, %"struct.webrtc::VideoSendTiming"*, i8, i32, i32, i8, %"struct.webrtc::RTPVideoHeader"*, %"class.absl::optional.4"*, %"class.webrtc::RtpPacketInfos"*, %"class.rtc::scoped_refptr.96"*), void (%"class.webrtc::RtpFrameObject"*, i16, i16, i1, i32, i64, i64, i32, i64, %"struct.webrtc::VideoSendTiming"*, i8, i32, i32, i8, %"struct.webrtc::RTPVideoHeader"*, %"class.absl::optional.4"*, %"class.webrtc::RtpPacketInfos"*, %"class.rtc::scoped_refptr.96"*)* @_ZN6webrtc14RtpFrameObjectC2EttbilljlRKNS_15VideoSendTimingEhNS_14VideoCodecTypeENS_13VideoRotationENS_16VideoContentTypeERKNS_14RTPVideoHeaderERKN4absl8optionalINS_10ColorSpaceEEENS_14RtpPacketInfosEN3rtc13scoped_refptrINS_18EncodedImageBufferEEE
@_ZN6webrtc14RtpFrameObjectD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RtpFrameObject"*), void (%"class.webrtc::RtpFrameObject"*)* @_ZN6webrtc14RtpFrameObjectD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RtpFrameObjectC2EttbilljlRKNS_15VideoSendTimingEhNS_14VideoCodecTypeENS_13VideoRotationENS_16VideoContentTypeERKNS_14RTPVideoHeaderERKN4absl8optionalINS_10ColorSpaceEEENS_14RtpPacketInfosEN3rtc13scoped_refptrINS_18EncodedImageBufferEEE(%"class.webrtc::RtpFrameObject"*, i16 zeroext, i16 zeroext, i1 zeroext, i32, i64, i64, i32, i64, %"struct.webrtc::VideoSendTiming"* nocapture readonly dereferenceable(14), i8 zeroext, i32, i32, i8 zeroext, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928), %"class.absl::optional.4"* dereferenceable(72), %"class.webrtc::RtpPacketInfos"* nocapture, %"class.rtc::scoped_refptr.96"* nocapture readonly) unnamed_addr #0 align 2 {
  %19 = zext i1 %3 to i8
  %20 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1
  %21 = bitcast %"class.webrtc::VCMEncodedFrame.base"* %20 to %"class.webrtc::VCMEncodedFrame"*
  tail call void @_ZN6webrtc15VCMEncodedFrameC2Ev(%"class.webrtc::VCMEncodedFrame"* %21) #11
  %22 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 2
  store i64 0, i64* %23, align 8
  %24 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 4
  store i8 1, i8* %24, align 8
  %25 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 5
  store i64 -1, i64* %25, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc14RtpFrameObjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %26 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 1, i32 0
  %27 = getelementptr inbounds %"class.rtc::scoped_refptr.96", %"class.rtc::scoped_refptr.96"* %17, i64 0, i32 0
  %28 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %27, align 8
  store %"class.webrtc::EncodedImageBuffer"* %28, %"class.webrtc::EncodedImageBuffer"** %26, align 8
  %29 = icmp eq %"class.webrtc::EncodedImageBuffer"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %18
  %31 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %28, i64 0, i32 0, i32 0
  %32 = bitcast %"class.webrtc::EncodedImageBuffer"* %28 to void (%"class.rtc::RefCountInterface"*)***
  %33 = load void (%"class.rtc::RefCountInterface"*)**, void (%"class.rtc::RefCountInterface"*)*** %32, align 8
  %34 = load void (%"class.rtc::RefCountInterface"*)*, void (%"class.rtc::RefCountInterface"*)** %33, align 8
  tail call void %34(%"class.rtc::RefCountInterface"* %31) #11
  br label %35

35:                                               ; preds = %18, %30
  %36 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2
  tail call void @_ZN6webrtc14RTPVideoHeaderC1Ev(%"struct.webrtc::RTPVideoHeader"* %36) #11
  %37 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 4
  store i16 %1, i16* %37, align 4
  %38 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 5
  store i16 %2, i16* %38, align 2
  %39 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 6
  store i64 %6, i64* %39, align 8
  %40 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 7
  store i32 %4, i32* %40, align 8
  %41 = tail call dereferenceable(1928) %"struct.webrtc::RTPVideoHeader"* @_ZN6webrtc14RTPVideoHeaderaSERKS0_(%"struct.webrtc::RTPVideoHeader"* %36, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928) %14)
  %42 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 3
  store i32 %11, i32* %42, align 8
  tail call void @_ZN6webrtc15VCMEncodedFrame17CopyCodecSpecificEPKNS_14RTPVideoHeaderE(%"class.webrtc::VCMEncodedFrame"* %21, %"struct.webrtc::RTPVideoHeader"* %36) #11
  %43 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 3
  store i8 %10, i8* %43, align 8
  %44 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 13
  store i32 %7, i32* %44, align 8
  %45 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 2
  store i64 %8, i64* %45, align 8
  %46 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 4
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 11
  %50 = bitcast %"struct.webrtc::VideoPlayoutDelay"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 9
  %53 = bitcast %"struct.webrtc::VideoPlayoutDelay"* %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %26, align 8
  %55 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %54, i64 0, i32 0
  %56 = icmp eq %"class.webrtc::EncodedImageBuffer"* %54, null
  br i1 %56, label %66, label %57

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %54, i64 0, i32 0, i32 0
  %59 = bitcast %"class.webrtc::EncodedImageBuffer"* %54 to void (%"class.rtc::RefCountInterface"*)***
  %60 = load void (%"class.rtc::RefCountInterface"*)**, void (%"class.rtc::RefCountInterface"*)*** %59, align 8
  %61 = load void (%"class.rtc::RefCountInterface"*)*, void (%"class.rtc::RefCountInterface"*)** %60, align 8
  tail call void %61(%"class.rtc::RefCountInterface"* %58) #11
  %62 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %54, i64 0, i32 0, i32 0
  %63 = bitcast %"class.webrtc::EncodedImageBuffer"* %54 to void (%"class.rtc::RefCountInterface"*)***
  %64 = load void (%"class.rtc::RefCountInterface"*)**, void (%"class.rtc::RefCountInterface"*)*** %63, align 8
  %65 = load void (%"class.rtc::RefCountInterface"*)*, void (%"class.rtc::RefCountInterface"*)** %64, align 8
  tail call void %65(%"class.rtc::RefCountInterface"* %62) #11
  br label %66

66:                                               ; preds = %35, %57
  %67 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 11, i32 0
  %68 = load %"class.webrtc::EncodedImageBufferInterface"*, %"class.webrtc::EncodedImageBufferInterface"** %67, align 8
  %69 = icmp eq %"class.webrtc::EncodedImageBufferInterface"* %68, null
  br i1 %69, label %77, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.webrtc::EncodedImageBufferInterface", %"class.webrtc::EncodedImageBufferInterface"* %68, i64 0, i32 0
  %72 = bitcast %"class.webrtc::EncodedImageBufferInterface"* %68 to i32 (%"class.rtc::RefCountInterface"*)***
  %73 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %72, align 8
  %74 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %73, i64 1
  %75 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %74, align 8
  %76 = tail call i32 %75(%"class.rtc::RefCountInterface"* %71) #11
  br label %77

77:                                               ; preds = %66, %70
  store %"class.webrtc::EncodedImageBufferInterface"* %55, %"class.webrtc::EncodedImageBufferInterface"** %67, align 8
  %78 = bitcast %"class.webrtc::EncodedImageBuffer"* %54 to i64 (%"class.webrtc::EncodedImageBufferInterface"*)***
  %79 = load i64 (%"class.webrtc::EncodedImageBufferInterface"*)**, i64 (%"class.webrtc::EncodedImageBufferInterface"*)*** %78, align 8
  %80 = getelementptr inbounds i64 (%"class.webrtc::EncodedImageBufferInterface"*)*, i64 (%"class.webrtc::EncodedImageBufferInterface"*)** %79, i64 6
  %81 = load i64 (%"class.webrtc::EncodedImageBufferInterface"*)*, i64 (%"class.webrtc::EncodedImageBufferInterface"*)** %80, align 8
  %82 = tail call i64 %81(%"class.webrtc::EncodedImageBufferInterface"* %55) #11
  %83 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 12
  store i64 %82, i64* %83, align 8
  br i1 %56, label %91, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %54, i64 0, i32 0, i32 0
  %86 = bitcast %"class.webrtc::EncodedImageBuffer"* %54 to i32 (%"class.rtc::RefCountInterface"*)***
  %87 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %86, align 8
  %88 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %87, i64 1
  %89 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %88, align 8
  %90 = tail call i32 %89(%"class.rtc::RefCountInterface"* %85) #11
  br label %91

91:                                               ; preds = %77, %84
  %92 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 2
  %93 = load i16, i16* %92, align 4
  %94 = zext i16 %93 to i32
  %95 = getelementptr inbounds %"class.webrtc::VCMEncodedFrame.base", %"class.webrtc::VCMEncodedFrame.base"* %20, i64 0, i32 0, i32 0
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 3
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  store i32 %98, i32* %99, align 4
  %100 = getelementptr inbounds %"class.webrtc::RtpPacketInfos", %"class.webrtc::RtpPacketInfos"* %16, i64 0, i32 0, i32 0
  %101 = bitcast %"class.webrtc::RtpPacketInfos"* %16 to i64*
  %102 = load i64, i64* %101, align 8
  store %"class.webrtc::RtpPacketInfos::Data"* null, %"class.webrtc::RtpPacketInfos::Data"** %100, align 8
  %103 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 20
  %104 = bitcast %"class.webrtc::RtpPacketInfos"* %103 to i64*
  %105 = getelementptr inbounds %"class.webrtc::RtpPacketInfos", %"class.webrtc::RtpPacketInfos"* %103, i64 0, i32 0, i32 0
  %106 = load %"class.webrtc::RtpPacketInfos::Data"*, %"class.webrtc::RtpPacketInfos::Data"** %105, align 8
  store i64 %102, i64* %104, align 8
  %107 = icmp eq %"class.webrtc::RtpPacketInfos::Data"* %106, null
  br i1 %107, label %118, label %108

108:                                              ; preds = %91
  %109 = getelementptr inbounds %"class.webrtc::RtpPacketInfos::Data", %"class.webrtc::RtpPacketInfos::Data"* %106, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw sub i32* %109, i32 1 acq_rel
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %118

112:                                              ; preds = %108
  %113 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %106 to %"class.rtc::RefCountedBase"*
  %114 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %106 to void (%"class.rtc::RefCountedBase"*)***
  %115 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %114, align 8
  %116 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %115, i64 1
  %117 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %116, align 8
  tail call void %117(%"class.rtc::RefCountedBase"* nonnull %113) #11
  br label %118

118:                                              ; preds = %112, %108, %91
  %119 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 5
  store i32 %12, i32* %119, align 4
  %120 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 17
  %121 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %122 = load i8, i8* %121, align 4, !range !2
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %135, label %124

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %15, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %126 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %120, i64 0, i32 0, i32 0, i32 0, i32 0
  %127 = load i8, i8* %126, align 4, !range !2
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %132, label %129

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 17, i32 0, i32 0, i32 0, i32 1, i32 0
  %131 = tail call dereferenceable(68) %"class.webrtc::ColorSpace"* @_ZN6webrtc10ColorSpaceaSERKS0_(%"class.webrtc::ColorSpace"* %130, %"class.webrtc::ColorSpace"* dereferenceable(68) %125) #11
  br label %137

132:                                              ; preds = %124
  %133 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 17, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %134 = bitcast i8* %133 to %"class.webrtc::ColorSpace"*
  tail call void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"* %134, %"class.webrtc::ColorSpace"* dereferenceable(68) %125) #11
  store i8 1, i8* %126, align 4
  br label %137

135:                                              ; preds = %118
  %136 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %120, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %136, align 4
  br label %137

137:                                              ; preds = %129, %132, %135
  %138 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 14
  %139 = bitcast %"class.absl::optional.14"* %138 to i32*
  %140 = load i32, i32* %139, align 8
  %141 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 18
  %142 = bitcast %"class.absl::optional.14"* %141 to i32*
  store i32 %140, i32* %142, align 8
  %143 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 6
  store i8 %13, i8* %143, align 8
  %144 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 6
  %145 = load i8, i8* %144, align 2
  %146 = icmp eq i8 %145, -1
  br i1 %146, label %179, label %147

147:                                              ; preds = %137
  %148 = load i64, i64* %45, align 8
  %149 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 0
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i64
  %152 = add nsw i64 %148, %151
  %153 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 1
  store i64 %152, i64* %153, align 8
  %154 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 1
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i64
  %157 = add nsw i64 %148, %156
  %158 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 2
  store i64 %157, i64* %158, align 8
  %159 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 2
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i64
  %162 = add nsw i64 %148, %161
  %163 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 3
  store i64 %162, i64* %163, align 8
  %164 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 3
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i64
  %167 = add nsw i64 %148, %166
  %168 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 4
  store i64 %167, i64* %168, align 8
  %169 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 4
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i64
  %172 = add nsw i64 %148, %171
  %173 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 5
  store i64 %172, i64* %173, align 8
  %174 = getelementptr inbounds %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoSendTiming"* %9, i64 0, i32 5
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i64
  %177 = add nsw i64 %148, %176
  %178 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 6
  store i64 %177, i64* %178, align 8
  br label %179

179:                                              ; preds = %137, %147
  %180 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 7
  store i64 %5, i64* %180, align 8
  %181 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 8
  store i64 %6, i64* %181, align 8
  %182 = load i8, i8* %144, align 2
  %183 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 0, i32 10, i32 0
  store i8 %182, i8* %183, align 8
  store i8 %19, i8* %24, align 8
  ret void
}

declare void @_ZN6webrtc14RTPVideoHeaderC1Ev(%"struct.webrtc::RTPVideoHeader"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1928) %"struct.webrtc::RTPVideoHeader"* @_ZN6webrtc14RTPVideoHeaderaSERKS0_(%"struct.webrtc::RTPVideoHeader"*, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %61, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %10, label %60, label %12

12:                                               ; preds = %6
  %13 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %11 to i8*
  %14 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false) #11
  %15 = icmp eq %"struct.webrtc::RTPVideoHeader"* %1, %0
  br i1 %15, label %56, label %16, !prof !3

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1
  %24 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %23 to i32*
  %25 = select i1 %20, i32* %24, i32* %22
  %26 = lshr i64 %18, 1
  %27 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0
  %28 = shl nuw i64 %26, 2
  %29 = ashr exact i64 %28, 2
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %27, i32* %25, i64 %29) #11
  %30 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %32, 0
  %34 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %37 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %36 to i64*
  %38 = select i1 %33, i64* %37, i64* %35
  %39 = lshr i64 %31, 1
  %40 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0
  %41 = shl nuw i64 %39, 3
  %42 = ashr exact i64 %41, 3
  tail call void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.103"* %40, i64* %38, i64 %42) #11
  %43 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  %47 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1
  %50 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %49 to i32*
  %51 = select i1 %46, i32* %50, i32* %48
  %52 = lshr i64 %44, 1
  %53 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0
  %54 = shl nuw i64 %52, 2
  %55 = ashr exact i64 %54, 2
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.57"* %53, i32* %51, i64 %55) #11
  br label %56

56:                                               ; preds = %12, %16
  %57 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 6, i32 0, i32 0
  %58 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 6, i32 0, i32 0
  %59 = load i64, i64* %57, align 8
  store i64 %59, i64* %58, align 8
  br label %67

60:                                               ; preds = %6
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %11, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* dereferenceable(144) %7) #11
  store i8 1, i8* %8, align 8
  br label %67

61:                                               ; preds = %2
  %62 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i8, i8* %62, align 8, !range !2
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %66) #11
  store i8 0, i8* %62, align 8
  br label %67

67:                                               ; preds = %56, %60, %61, %65
  %68 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 1
  %69 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 1
  %70 = bitcast i32* %68 to i8*
  %71 = bitcast i32* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 46, i1 false)
  %72 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13
  %73 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %74 = load i8, i8* %73, align 4, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %67
  %77 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %78 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %72, i64 0, i32 0, i32 0, i32 0, i32 0
  %79 = load i8, i8* %78, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %83 = tail call dereferenceable(68) %"class.webrtc::ColorSpace"* @_ZN6webrtc10ColorSpaceaSERKS0_(%"class.webrtc::ColorSpace"* %82, %"class.webrtc::ColorSpace"* dereferenceable(68) %77) #11
  br label %89

84:                                               ; preds = %76
  %85 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %86 = bitcast i8* %85 to %"class.webrtc::ColorSpace"*
  tail call void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"* %86, %"class.webrtc::ColorSpace"* dereferenceable(68) %77) #11
  store i8 1, i8* %78, align 4
  br label %89

87:                                               ; preds = %67
  %88 = getelementptr inbounds %"class.absl::optional.4", %"class.absl::optional.4"* %72, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %88, align 4
  br label %89

89:                                               ; preds = %81, %84, %87
  %90 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  %91 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 1656, i1 false)
  ret %"struct.webrtc::RTPVideoHeader"* %0
}

declare void @_ZN6webrtc15VCMEncodedFrame17CopyCodecSpecificEPKNS_14RTPVideoHeaderE(%"class.webrtc::VCMEncodedFrame"*, %"struct.webrtc::RTPVideoHeader"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RtpFrameObjectD2Ev(%"class.webrtc::RtpFrameObject"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc14RtpFrameObjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2
  tail call void @_ZN6webrtc14RTPVideoHeaderD1Ev(%"struct.webrtc::RTPVideoHeader"* %3) #11
  %4 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %4, align 8
  %6 = icmp eq %"class.webrtc::EncodedImageBuffer"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %5, i64 0, i32 0, i32 0
  %9 = bitcast %"class.webrtc::EncodedImageBuffer"* %5 to i32 (%"class.rtc::RefCountInterface"*)***
  %10 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %10, i64 1
  %12 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %11, align 8
  %13 = tail call i32 %12(%"class.rtc::RefCountInterface"* %8) #11
  br label %14

14:                                               ; preds = %1, %7
  %15 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1
  %16 = bitcast %"class.webrtc::VCMEncodedFrame.base"* %15 to %"class.webrtc::VCMEncodedFrame"*
  tail call void @_ZN6webrtc15VCMEncodedFrameD2Ev(%"class.webrtc::VCMEncodedFrame"* %16) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc14RTPVideoHeaderD1Ev(%"struct.webrtc::RTPVideoHeader"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RtpFrameObjectD0Ev(%"class.webrtc::RtpFrameObject"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc14RtpFrameObjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2
  tail call void @_ZN6webrtc14RTPVideoHeaderD1Ev(%"struct.webrtc::RTPVideoHeader"* %3) #11
  %4 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %4, align 8
  %6 = icmp eq %"class.webrtc::EncodedImageBuffer"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.webrtc::EncodedImageBuffer", %"class.webrtc::EncodedImageBuffer"* %5, i64 0, i32 0, i32 0
  %9 = bitcast %"class.webrtc::EncodedImageBuffer"* %5 to i32 (%"class.rtc::RefCountInterface"*)***
  %10 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %10, i64 1
  %12 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %11, align 8
  %13 = tail call i32 %12(%"class.rtc::RefCountInterface"* %8) #11
  br label %14

14:                                               ; preds = %1, %7
  %15 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1
  %16 = bitcast %"class.webrtc::VCMEncodedFrame.base"* %15 to %"class.webrtc::VCMEncodedFrame"*
  tail call void @_ZN6webrtc15VCMEncodedFrameD2Ev(%"class.webrtc::VCMEncodedFrame"* %16) #11
  %17 = bitcast %"class.webrtc::RtpFrameObject"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK6webrtc14RtpFrameObject13first_seq_numEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 4
  %3 = load i16, i16* %2, align 4
  ret i16 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK6webrtc14RtpFrameObject12last_seq_numEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 5
  %3 = load i16, i16* %2, align 2
  ret i16 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc14RtpFrameObject12times_nackedEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc14RtpFrameObject10frame_typeEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc14RtpFrameObject10codec_typeEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc14RtpFrameObject12ReceivedTimeEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc14RtpFrameObject10RenderTimeEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 0, i32 1, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc14RtpFrameObject25delayed_by_retransmissionEv(%"class.webrtc::RtpFrameObject"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(1928) %"struct.webrtc::RTPVideoHeader"* @_ZNK6webrtc14RtpFrameObject17GetRtpVideoHeaderEv(%"class.webrtc::RtpFrameObject"* readnone) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpFrameObject", %"class.webrtc::RtpFrameObject"* %0, i64 0, i32 2
  ret %"struct.webrtc::RTPVideoHeader"* %2
}

declare void @_ZN6webrtc15VCMEncodedFrameC2Ev(%"class.webrtc::VCMEncodedFrame"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !4
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !4
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !4
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 10, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #12
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !7
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !7
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !10, !noalias !7
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !10, !noalias !7
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !7
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !7
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !10, !noalias !7
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !10, !noalias !7
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !7
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !7
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !10, !noalias !7
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !10, !noalias !7
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !7
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !7
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !10, !noalias !7
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !10, !noalias !7
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !12

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !7
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !7
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !10, !noalias !7
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !10, !noalias !7
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !14

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !16

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !17

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !18
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !18
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !21, !noalias !18
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !21, !noalias !18
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !18
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !18
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !21, !noalias !18
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !21, !noalias !18
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !18
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !18
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !21, !noalias !18
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !21, !noalias !18
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !18
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !18
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !21, !noalias !18
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !21, !noalias !18
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !23

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !18
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !18
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !21, !noalias !18
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !21, !noalias !18
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !24

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !25

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !26

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #12
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.103"*, i64*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !27
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i64** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !27
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !27
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 5, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 2305843009213693951
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 3
  %30 = tail call i8* @_Znwm(i64 %29) #12
  %31 = bitcast i8* %30 to i64*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i64*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i64, i64* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i64* %37, i64* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 4
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i64, i64* %35, i64 %40
  %46 = getelementptr i64, i64* %1, i64 %40
  %47 = bitcast i64* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i64* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775804
  %53 = getelementptr i64, i64* %1, i64 %52
  %54 = add nsw i64 %52, -4
  %55 = lshr exact i64 %54, 2
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 12
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i64, i64* %1, i64 %62
  %65 = getelementptr inbounds i64, i64* %35, i64 %62
  %66 = bitcast i64* %64 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8, !alias.scope !30
  %68 = getelementptr i64, i64* %64, i64 2
  %69 = bitcast i64* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !30
  %71 = bitcast i64* %65 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %71, align 8, !alias.scope !33, !noalias !30
  %72 = getelementptr inbounds i64, i64* %65, i64 2
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %73, align 8, !alias.scope !33, !noalias !30
  %74 = or i64 %62, 4
  %75 = getelementptr i64, i64* %1, i64 %74
  %76 = getelementptr inbounds i64, i64* %35, i64 %74
  %77 = bitcast i64* %75 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !alias.scope !30
  %79 = getelementptr i64, i64* %75, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !30
  %82 = bitcast i64* %76 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %82, align 8, !alias.scope !33, !noalias !30
  %83 = getelementptr inbounds i64, i64* %76, i64 2
  %84 = bitcast i64* %83 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %84, align 8, !alias.scope !33, !noalias !30
  %85 = or i64 %62, 8
  %86 = getelementptr i64, i64* %1, i64 %85
  %87 = getelementptr inbounds i64, i64* %35, i64 %85
  %88 = bitcast i64* %86 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8, !alias.scope !30
  %90 = getelementptr i64, i64* %86, i64 2
  %91 = bitcast i64* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !30
  %93 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %93, align 8, !alias.scope !33, !noalias !30
  %94 = getelementptr inbounds i64, i64* %87, i64 2
  %95 = bitcast i64* %94 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %95, align 8, !alias.scope !33, !noalias !30
  %96 = or i64 %62, 12
  %97 = getelementptr i64, i64* %1, i64 %96
  %98 = getelementptr inbounds i64, i64* %35, i64 %96
  %99 = bitcast i64* %97 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !alias.scope !30
  %101 = getelementptr i64, i64* %97, i64 2
  %102 = bitcast i64* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !30
  %104 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %104, align 8, !alias.scope !33, !noalias !30
  %105 = getelementptr inbounds i64, i64* %98, i64 2
  %106 = bitcast i64* %105 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %106, align 8, !alias.scope !33, !noalias !30
  %107 = add i64 %62, 16
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !35

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i64, i64* %1, i64 %114
  %117 = getelementptr inbounds i64, i64* %35, i64 %114
  %118 = bitcast i64* %116 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !30
  %120 = getelementptr i64, i64* %116, i64 2
  %121 = bitcast i64* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !30
  %123 = bitcast i64* %117 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %123, align 8, !alias.scope !33, !noalias !30
  %124 = getelementptr inbounds i64, i64* %117, i64 2
  %125 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %125, align 8, !alias.scope !33, !noalias !30
  %126 = add i64 %114, 4
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !36

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i64* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i64* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i64, i64* %35, i64 %140
  %143 = load i64, i64* %139, align 8
  store i64 %143, i64* %142, align 8
  %144 = getelementptr inbounds i64, i64* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !37

148:                                              ; preds = %138, %131
  %149 = phi i64* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i64* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i64* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i64, i64* %35, i64 %155
  %157 = load i64, i64* %154, align 8
  store i64 %157, i64* %156, align 8
  %158 = getelementptr inbounds i64, i64* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i64, i64* %35, i64 %159
  %161 = load i64, i64* %158, align 8
  store i64 %161, i64* %160, align 8
  %162 = getelementptr inbounds i64, i64* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i64, i64* %35, i64 %163
  %165 = load i64, i64* %162, align 8
  store i64 %165, i64* %164, align 8
  %166 = getelementptr inbounds i64, i64* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i64, i64* %35, i64 %167
  %169 = load i64, i64* %166, align 8
  store i64 %169, i64* %168, align 8
  %170 = getelementptr inbounds i64, i64* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !38

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i64* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i64* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i64* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 4
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i64, i64* %179, i64 %178
  %185 = getelementptr i64, i64* %177, i64 %178
  %186 = icmp ult i64* %179, %185
  %187 = icmp ult i64* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -4
  %191 = getelementptr i64, i64* %177, i64 %190
  %192 = add i64 %190, -4
  %193 = lshr exact i64 %192, 2
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 12
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i64, i64* %177, i64 %200
  %203 = getelementptr inbounds i64, i64* %179, i64 %200
  %204 = bitcast i64* %202 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 8, !alias.scope !39
  %206 = getelementptr i64, i64* %202, i64 2
  %207 = bitcast i64* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !alias.scope !39
  %209 = bitcast i64* %203 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %209, align 8, !alias.scope !42, !noalias !39
  %210 = getelementptr inbounds i64, i64* %203, i64 2
  %211 = bitcast i64* %210 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %211, align 8, !alias.scope !42, !noalias !39
  %212 = or i64 %200, 4
  %213 = getelementptr i64, i64* %177, i64 %212
  %214 = getelementptr inbounds i64, i64* %179, i64 %212
  %215 = bitcast i64* %213 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !39
  %217 = getelementptr i64, i64* %213, i64 2
  %218 = bitcast i64* %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 8, !alias.scope !39
  %220 = bitcast i64* %214 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %220, align 8, !alias.scope !42, !noalias !39
  %221 = getelementptr inbounds i64, i64* %214, i64 2
  %222 = bitcast i64* %221 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %222, align 8, !alias.scope !42, !noalias !39
  %223 = or i64 %200, 8
  %224 = getelementptr i64, i64* %177, i64 %223
  %225 = getelementptr inbounds i64, i64* %179, i64 %223
  %226 = bitcast i64* %224 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 8, !alias.scope !39
  %228 = getelementptr i64, i64* %224, i64 2
  %229 = bitcast i64* %228 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 8, !alias.scope !39
  %231 = bitcast i64* %225 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %231, align 8, !alias.scope !42, !noalias !39
  %232 = getelementptr inbounds i64, i64* %225, i64 2
  %233 = bitcast i64* %232 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %233, align 8, !alias.scope !42, !noalias !39
  %234 = or i64 %200, 12
  %235 = getelementptr i64, i64* %177, i64 %234
  %236 = getelementptr inbounds i64, i64* %179, i64 %234
  %237 = bitcast i64* %235 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 8, !alias.scope !39
  %239 = getelementptr i64, i64* %235, i64 2
  %240 = bitcast i64* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 8, !alias.scope !39
  %242 = bitcast i64* %236 to <2 x i64>*
  store <2 x i64> %238, <2 x i64>* %242, align 8, !alias.scope !42, !noalias !39
  %243 = getelementptr inbounds i64, i64* %236, i64 2
  %244 = bitcast i64* %243 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %244, align 8, !alias.scope !42, !noalias !39
  %245 = add i64 %200, 16
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !44

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i64, i64* %177, i64 %252
  %255 = getelementptr inbounds i64, i64* %179, i64 %252
  %256 = bitcast i64* %254 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 8, !alias.scope !39
  %258 = getelementptr i64, i64* %254, i64 2
  %259 = bitcast i64* %258 to <2 x i64>*
  %260 = load <2 x i64>, <2 x i64>* %259, align 8, !alias.scope !39
  %261 = bitcast i64* %255 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %261, align 8, !alias.scope !42, !noalias !39
  %262 = getelementptr inbounds i64, i64* %255, i64 2
  %263 = bitcast i64* %262 to <2 x i64>*
  store <2 x i64> %260, <2 x i64>* %263, align 8, !alias.scope !42, !noalias !39
  %264 = add i64 %252, 4
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !45

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i64* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i64* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i64, i64* %179, i64 %278
  %281 = load i64, i64* %277, align 8
  store i64 %281, i64* %280, align 8
  %282 = getelementptr inbounds i64, i64* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !46

286:                                              ; preds = %276, %269
  %287 = phi i64* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i64* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i64, i64* %179, i64 %292
  %294 = load i64, i64* %291, align 8
  store i64 %294, i64* %293, align 8
  %295 = getelementptr inbounds i64, i64* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i64, i64* %179, i64 %296
  %298 = load i64, i64* %295, align 8
  store i64 %298, i64* %297, align 8
  %299 = getelementptr inbounds i64, i64* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i64, i64* %179, i64 %300
  %302 = load i64, i64* %299, align 8
  store i64 %302, i64* %301, align 8
  %303 = getelementptr inbounds i64, i64* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i64, i64* %179, i64 %304
  %306 = load i64, i64* %303, align 8
  store i64 %306, i64* %305, align 8
  %307 = getelementptr inbounds i64, i64* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !47

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i64** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #12
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i64** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.103", %"class.absl::inlined_vector_internal::Storage.103"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.57"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !48
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !48
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !48
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 4, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #12
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !51
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !51
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !54, !noalias !51
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !54, !noalias !51
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !51
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !51
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !54, !noalias !51
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !54, !noalias !51
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !51
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !51
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !54, !noalias !51
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !54, !noalias !51
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !51
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !51
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !54, !noalias !51
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !54, !noalias !51
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !56

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !51
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !51
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !54, !noalias !51
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !54, !noalias !51
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !57

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !58

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !59

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !60
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !60
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !63, !noalias !60
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !63, !noalias !60
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !60
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !60
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !63, !noalias !60
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !63, !noalias !60
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !60
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !60
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !63, !noalias !60
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !63, !noalias !60
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !60
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !60
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !63, !noalias !60
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !63, !noalias !60
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !65

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !60
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !60
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !63, !noalias !60
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !63, !noalias !60
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !66

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !67

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !68

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #12
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.57", %"class.absl::inlined_vector_internal::Storage.57"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

declare void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* dereferenceable(144)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*) unnamed_addr #4

declare dereferenceable(68) %"class.webrtc::ColorSpace"* @_ZN6webrtc10ColorSpaceaSERKS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) local_unnamed_addr #1

declare void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc15VCMEncodedFrameD2Ev(%"class.webrtc::VCMEncodedFrame"*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!6 = distinct !{!6, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !13}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !15}
!26 = distinct !{!26, !13}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!29 = distinct !{!29, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !13}
!36 = distinct !{!36, !15}
!37 = distinct !{!37, !15}
!38 = distinct !{!38, !13}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !13}
!45 = distinct !{!45, !15}
!46 = distinct !{!46, !15}
!47 = distinct !{!47, !13}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!50 = distinct !{!50, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !13}
!57 = distinct !{!57, !15}
!58 = distinct !{!58, !15}
!59 = distinct !{!59, !13}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !13}
!66 = distinct !{!66, !15}
!67 = distinct !{!67, !15}
!68 = distinct !{!68, !13}
