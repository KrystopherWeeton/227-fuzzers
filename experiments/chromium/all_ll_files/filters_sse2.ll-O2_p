; ModuleID = '../../third_party/libwebp/src/dsp/filters_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/filters_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@WebPUnfilters = external local_unnamed_addr global [4 x void (i8*, i8*, i8*, i32)*], align 16
@WebPFilters = external local_unnamed_addr global [4 x void (i8*, i32, i32, i32, i8*)*], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8FiltersInitSSE2() local_unnamed_addr #0 {
  store void (i8*, i8*, i8*, i32)* @HorizontalUnfilter_SSE2, void (i8*, i8*, i8*, i32)** getelementptr inbounds ([4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 1), align 8
  store void (i8*, i8*, i8*, i32)* @GradientUnfilter_SSE2, void (i8*, i8*, i8*, i32)** getelementptr inbounds ([4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 3), align 8
  store <2 x void (i8*, i32, i32, i32, i8*)*> <void (i8*, i32, i32, i32, i8*)* @HorizontalFilter_SSE2, void (i8*, i32, i32, i32, i8*)* @VerticalFilter_SSE2>, <2 x void (i8*, i32, i32, i32, i8*)*>* bitcast (void (i8*, i32, i32, i32, i8*)** getelementptr inbounds ([4 x void (i8*, i32, i32, i32, i8*)*], [4 x void (i8*, i32, i32, i32, i8*)*]* @WebPFilters, i64 0, i64 1) to <2 x void (i8*, i32, i32, i32, i8*)*>*), align 8
  store void (i8*, i32, i32, i32, i8*)* @GradientFilter_SSE2, void (i8*, i32, i32, i32, i8*)** getelementptr inbounds ([4 x void (i8*, i32, i32, i32, i8*)*], [4 x void (i8*, i32, i32, i32, i8*)*]* @WebPFilters, i64 0, i64 3), align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HorizontalUnfilter_SSE2(i8* readonly, i8* nocapture readonly, i8* nocapture, i32) #1 {
  %5 = load i8, i8* %1, align 1
  %6 = icmp eq i8* %0, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = load i8, i8* %0, align 1
  br label %9

9:                                                ; preds = %4, %7
  %10 = phi i8 [ %8, %7 ], [ 0, %4 ]
  %11 = add i8 %10, %5
  store i8 %11, i8* %2, align 1
  %12 = icmp slt i32 %3, 2
  br i1 %12, label %102, label %13

13:                                               ; preds = %9
  %14 = icmp slt i32 %3, 9
  br i1 %14, label %24, label %15

15:                                               ; preds = %13
  %16 = zext i8 %11 to i32
  %17 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %16, i32 0
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = sext i32 %3 to i64
  %20 = add nsw i32 %3, -9
  %21 = and i32 %20, -8
  br label %53

22:                                               ; preds = %53
  %23 = add i32 %21, 9
  br label %24

24:                                               ; preds = %22, %13
  %25 = phi i32 [ 1, %13 ], [ %23, %22 ]
  %26 = icmp slt i32 %25, %3
  br i1 %26, label %27, label %102

27:                                               ; preds = %24
  %28 = zext i32 %25 to i64
  %29 = zext i32 %3 to i64
  %30 = add nsw i64 %28, -1
  %31 = getelementptr i8, i8* %2, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sub nsw i64 %29, %28
  %34 = xor i64 %28, -1
  %35 = add nsw i64 %34, %29
  %36 = and i64 %33, 3
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %49, label %38

38:                                               ; preds = %27, %38
  %39 = phi i8 [ %44, %38 ], [ %32, %27 ]
  %40 = phi i64 [ %46, %38 ], [ %28, %27 ]
  %41 = phi i64 [ %47, %38 ], [ %36, %27 ]
  %42 = getelementptr inbounds i8, i8* %1, i64 %40
  %43 = load i8, i8* %42, align 1
  %44 = add i8 %39, %43
  %45 = getelementptr inbounds i8, i8* %2, i64 %40
  store i8 %44, i8* %45, align 1
  %46 = add nuw nsw i64 %40, 1
  %47 = add i64 %41, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %38, !llvm.loop !2

49:                                               ; preds = %38, %27
  %50 = phi i8 [ %32, %27 ], [ %44, %38 ]
  %51 = phi i64 [ %28, %27 ], [ %46, %38 ]
  %52 = icmp ult i64 %35, 3
  br i1 %52, label %102, label %78

53:                                               ; preds = %15, %53
  %54 = phi i64 [ 1, %15 ], [ %77, %53 ]
  %55 = phi i64 [ 9, %15 ], [ %75, %53 ]
  %56 = phi <2 x i64> [ %18, %15 ], [ %74, %53 ]
  %57 = getelementptr inbounds i8, i8* %1, i64 %54
  %58 = bitcast i8* %57 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %59, i32 0
  %61 = bitcast <2 x i64> %60 to <16 x i8>
  %62 = bitcast <2 x i64> %56 to <16 x i8>
  %63 = add <16 x i8> %61, %62
  %64 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %63, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %65 = add <16 x i8> %64, %63
  %66 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0>, <16 x i8> %65, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %67 = add <16 x i8> %66, %65
  %68 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %67, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %69 = add <16 x i8> %68, %67
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %2, i64 %54
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %71 to i64*
  store i64 %72, i64* %73, align 1
  %74 = lshr <2 x i64> %70, <i64 56, i64 56>
  %75 = add nuw nsw i64 %55, 8
  %76 = icmp sgt i64 %75, %19
  %77 = add nuw nsw i64 %54, 8
  br i1 %76, label %22, label %53

78:                                               ; preds = %49, %78
  %79 = phi i8 [ %98, %78 ], [ %50, %49 ]
  %80 = phi i64 [ %100, %78 ], [ %51, %49 ]
  %81 = getelementptr inbounds i8, i8* %1, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = add i8 %79, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 %80
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %80, 1
  %86 = getelementptr inbounds i8, i8* %1, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = add i8 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 %85
  store i8 %88, i8* %89, align 1
  %90 = add nuw nsw i64 %80, 2
  %91 = getelementptr inbounds i8, i8* %1, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = add i8 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 %90
  store i8 %93, i8* %94, align 1
  %95 = add nuw nsw i64 %80, 3
  %96 = getelementptr inbounds i8, i8* %1, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = add i8 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 %95
  store i8 %98, i8* %99, align 1
  %100 = add nuw nsw i64 %80, 4
  %101 = icmp eq i64 %100, %29
  br i1 %101, label %102, label %78

102:                                              ; preds = %49, %78, %24, %9
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @GradientUnfilter_SSE2(i8* readonly, i8* nocapture readonly, i8* nocapture, i32) #2 {
  %5 = icmp eq i8* %0, null
  %6 = load i8, i8* %1, align 1
  br i1 %5, label %7, label %98

7:                                                ; preds = %4
  store i8 %6, i8* %2, align 1
  %8 = icmp slt i32 %3, 2
  br i1 %8, label %247, label %9

9:                                                ; preds = %7
  %10 = icmp slt i32 %3, 9
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = zext i8 %6 to i32
  %13 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %12, i32 0
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = sext i32 %3 to i64
  %16 = add nsw i32 %3, -9
  br label %49

17:                                               ; preds = %49
  %18 = and i32 %16, -8
  %19 = add i32 %18, 9
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i32 [ 1, %9 ], [ %19, %17 ]
  %22 = icmp slt i32 %21, %3
  br i1 %22, label %23, label %247

23:                                               ; preds = %20
  %24 = zext i32 %21 to i64
  %25 = zext i32 %3 to i64
  %26 = add nsw i64 %24, -1
  %27 = getelementptr i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = sub nsw i64 %25, %24
  %30 = xor i64 %24, -1
  %31 = add nsw i64 %30, %25
  %32 = and i64 %29, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %45, label %34

34:                                               ; preds = %23, %34
  %35 = phi i8 [ %40, %34 ], [ %28, %23 ]
  %36 = phi i64 [ %42, %34 ], [ %24, %23 ]
  %37 = phi i64 [ %43, %34 ], [ %32, %23 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = add i8 %35, %39
  %41 = getelementptr inbounds i8, i8* %2, i64 %36
  store i8 %40, i8* %41, align 1
  %42 = add nuw nsw i64 %36, 1
  %43 = add i64 %37, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %34, !llvm.loop !4

45:                                               ; preds = %34, %23
  %46 = phi i8 [ %28, %23 ], [ %40, %34 ]
  %47 = phi i64 [ %24, %23 ], [ %42, %34 ]
  %48 = icmp ult i64 %31, 3
  br i1 %48, label %247, label %74

49:                                               ; preds = %49, %11
  %50 = phi i64 [ 1, %11 ], [ %73, %49 ]
  %51 = phi i64 [ 9, %11 ], [ %71, %49 ]
  %52 = phi <2 x i64> [ %14, %11 ], [ %70, %49 ]
  %53 = getelementptr inbounds i8, i8* %1, i64 %50
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %55, i32 0
  %57 = bitcast <2 x i64> %56 to <16 x i8>
  %58 = bitcast <2 x i64> %52 to <16 x i8>
  %59 = add <16 x i8> %57, %58
  %60 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %59, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %61 = add <16 x i8> %60, %59
  %62 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0>, <16 x i8> %61, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %63 = add <16 x i8> %62, %61
  %64 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %63, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %65 = add <16 x i8> %64, %63
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %2, i64 %50
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = lshr <2 x i64> %66, <i64 56, i64 56>
  %71 = add nuw nsw i64 %51, 8
  %72 = icmp sgt i64 %71, %15
  %73 = add nuw nsw i64 %50, 8
  br i1 %72, label %17, label %49

74:                                               ; preds = %45, %74
  %75 = phi i8 [ %94, %74 ], [ %46, %45 ]
  %76 = phi i64 [ %96, %74 ], [ %47, %45 ]
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %75, %78
  %80 = getelementptr inbounds i8, i8* %2, i64 %76
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %76, 1
  %82 = getelementptr inbounds i8, i8* %1, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = add i8 %79, %83
  %85 = getelementptr inbounds i8, i8* %2, i64 %81
  store i8 %84, i8* %85, align 1
  %86 = add nuw nsw i64 %76, 2
  %87 = getelementptr inbounds i8, i8* %1, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = add i8 %84, %88
  %90 = getelementptr inbounds i8, i8* %2, i64 %86
  store i8 %89, i8* %90, align 1
  %91 = add nuw nsw i64 %76, 3
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = add i8 %89, %93
  %95 = getelementptr inbounds i8, i8* %2, i64 %91
  store i8 %94, i8* %95, align 1
  %96 = add nuw nsw i64 %76, 4
  %97 = icmp eq i64 %96, %25
  br i1 %97, label %247, label %74

98:                                               ; preds = %4
  %99 = load i8, i8* %0, align 1
  %100 = add i8 %99, %6
  store i8 %100, i8* %2, align 1
  %101 = getelementptr inbounds i8, i8* %1, i64 1
  %102 = getelementptr inbounds i8, i8* %0, i64 1
  %103 = getelementptr inbounds i8, i8* %2, i64 1
  %104 = add nsw i32 %3, -1
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %247

106:                                              ; preds = %98
  %107 = and i32 %104, -8
  %108 = icmp sgt i32 %107, 0
  br i1 %108, label %109, label %116

109:                                              ; preds = %106
  %110 = zext i8 %100 to i32
  %111 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %110, i32 0
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = sext i32 %107 to i64
  br label %124

114:                                              ; preds = %124
  %115 = trunc i64 %222 to i32
  br label %116

116:                                              ; preds = %114, %106
  %117 = phi i32 [ 0, %106 ], [ %115, %114 ]
  %118 = icmp slt i32 %117, %104
  br i1 %118, label %119, label %247

119:                                              ; preds = %116
  %120 = zext i32 %117 to i64
  %121 = zext i32 %104 to i64
  %122 = getelementptr i8, i8* %2, i64 %120
  %123 = load i8, i8* %122, align 1
  br label %224

124:                                              ; preds = %124, %109
  %125 = phi i64 [ 0, %109 ], [ %222, %124 ]
  %126 = phi <2 x i64> [ %112, %109 ], [ %218, %124 ]
  %127 = getelementptr inbounds i8, i8* %102, i64 %125
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = getelementptr inbounds i8, i8* %0, i64 %125
  %132 = bitcast i8* %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = insertelement <2 x i64> undef, i64 %133, i32 0
  %135 = bitcast <2 x i64> %130 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = bitcast <2 x i64> %134 to <16 x i8>
  %138 = shufflevector <16 x i8> %137, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = getelementptr inbounds i8, i8* %101, i64 %125
  %140 = bitcast i8* %139 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %141, i32 0
  %143 = bitcast <16 x i8> %136 to <8 x i16>
  %144 = bitcast <16 x i8> %138 to <8 x i16>
  %145 = sub <8 x i16> %143, %144
  %146 = bitcast <2 x i64> %126 to <8 x i16>
  %147 = add <8 x i16> %145, %146
  %148 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %147, <8 x i16> zeroinitializer) #4
  %149 = bitcast <2 x i64> %142 to <16 x i8>
  %150 = add <16 x i8> %148, %149
  %151 = bitcast <16 x i8> %150 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 255, i64 0>
  %153 = bitcast <2 x i64> %152 to <16 x i8>
  %154 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %153, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = add <8 x i16> %145, %156
  %158 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %157, <8 x i16> zeroinitializer) #4
  %159 = add <16 x i8> %158, %149
  %160 = and <16 x i8> %159, <i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %161 = bitcast <16 x i8> %160 to <2 x i64>
  %162 = or <2 x i64> %152, %161
  %163 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %160, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = shufflevector <16 x i8> %163, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = bitcast <16 x i8> %164 to <8 x i16>
  %166 = add <8 x i16> %145, %165
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %166, <8 x i16> zeroinitializer) #4
  %168 = add <16 x i8> %167, %149
  %169 = and <16 x i8> %168, <i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = or <2 x i64> %162, %170
  %172 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %169, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %173 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = bitcast <16 x i8> %173 to <8 x i16>
  %175 = add <8 x i16> %145, %174
  %176 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %175, <8 x i16> zeroinitializer) #4
  %177 = add <16 x i8> %176, %149
  %178 = and <16 x i8> %177, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %179 = bitcast <16 x i8> %178 to <2 x i64>
  %180 = or <2 x i64> %171, %179
  %181 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %178, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = shufflevector <16 x i8> %181, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %183 = bitcast <16 x i8> %182 to <8 x i16>
  %184 = add <8 x i16> %145, %183
  %185 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %184, <8 x i16> zeroinitializer) #4
  %186 = add <16 x i8> %185, %149
  %187 = and <16 x i8> %186, <i8 0, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %188 = bitcast <16 x i8> %187 to <2 x i64>
  %189 = or <2 x i64> %180, %188
  %190 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %187, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <16 x i8> %190, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = bitcast <16 x i8> %191 to <8 x i16>
  %193 = add <8 x i16> %145, %192
  %194 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %193, <8 x i16> zeroinitializer) #4
  %195 = add <16 x i8> %194, %149
  %196 = and <16 x i8> %195, <i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %197 = bitcast <16 x i8> %196 to <2 x i64>
  %198 = or <2 x i64> %189, %197
  %199 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %196, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = shufflevector <16 x i8> %199, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = bitcast <16 x i8> %200 to <8 x i16>
  %202 = add <8 x i16> %145, %201
  %203 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %202, <8 x i16> zeroinitializer) #4
  %204 = add <16 x i8> %203, %149
  %205 = and <16 x i8> %204, <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %206 = bitcast <16 x i8> %205 to <2 x i64>
  %207 = or <2 x i64> %198, %206
  %208 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %205, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = shufflevector <16 x i8> %208, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %210 = bitcast <16 x i8> %209 to <8 x i16>
  %211 = add <8 x i16> %145, %210
  %212 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %211, <8 x i16> zeroinitializer) #4
  %213 = add <16 x i8> %212, %149
  %214 = and <16 x i8> %213, <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %215 = bitcast <16 x i8> %214 to <2 x i64>
  %216 = or <2 x i64> %207, %215
  %217 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %218 = bitcast <16 x i8> %217 to <2 x i64>
  %219 = getelementptr inbounds i8, i8* %103, i64 %125
  %220 = extractelement <2 x i64> %216, i32 0
  %221 = bitcast i8* %219 to i64*
  store i64 %220, i64* %221, align 1
  %222 = add nuw nsw i64 %125, 8
  %223 = icmp slt i64 %222, %113
  br i1 %223, label %124, label %114

224:                                              ; preds = %224, %119
  %225 = phi i8 [ %123, %119 ], [ %243, %224 ]
  %226 = phi i64 [ %120, %119 ], [ %245, %224 ]
  %227 = getelementptr inbounds i8, i8* %102, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %0, i64 %226
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %225 to i32
  %232 = zext i8 %228 to i32
  %233 = add nuw nsw i32 %232, %231
  %234 = zext i8 %230 to i32
  %235 = sub nsw i32 %233, %234
  %236 = icmp ult i32 %235, 256
  %237 = icmp slt i32 %235, 0
  %238 = select i1 %237, i32 0, i32 255
  %239 = select i1 %236, i32 %235, i32 %238
  %240 = getelementptr inbounds i8, i8* %101, i64 %226
  %241 = load i8, i8* %240, align 1
  %242 = trunc i32 %239 to i8
  %243 = add i8 %241, %242
  %244 = getelementptr inbounds i8, i8* %103, i64 %226
  store i8 %243, i8* %244, align 1
  %245 = add nuw nsw i64 %226, 1
  %246 = icmp eq i64 %245, %121
  br i1 %246, label %247, label %224

247:                                              ; preds = %224, %45, %74, %116, %98, %20, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HorizontalFilter_SSE2(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #1 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = and i32 %9, -32
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %5
  %13 = sext i32 %10 to i64
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %14, 5
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = sub nuw nsw i64 %16, %17
  br label %168

21:                                               ; preds = %168, %12
  %22 = phi i64 [ undef, %12 ], [ %208, %168 ]
  %23 = phi i64 [ 0, %12 ], [ %208, %168 ]
  %24 = icmp eq i64 %17, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %7, i64 %23
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 -1
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 16
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 -1
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = sub <16 x i8> %28, %31
  %39 = sub <16 x i8> %34, %37
  %40 = getelementptr inbounds i8, i8* %8, i64 %23
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %43, align 1
  %44 = add nuw nsw i64 %23, 32
  br label %45

45:                                               ; preds = %21, %25
  %46 = phi i64 [ %22, %21 ], [ %44, %25 ]
  %47 = trunc i64 %46 to i32
  br label %48

48:                                               ; preds = %45, %5
  %49 = phi i32 [ 0, %5 ], [ %47, %45 ]
  %50 = icmp slt i32 %49, %9
  br i1 %50, label %51, label %242

51:                                               ; preds = %48
  %52 = zext i32 %49 to i64
  %53 = zext i32 %9 to i64
  %54 = sub nsw i64 %53, %52
  %55 = icmp ult i64 %54, 32
  br i1 %55, label %56, label %78

56:                                               ; preds = %166, %78, %51
  %57 = phi i64 [ %52, %78 ], [ %52, %51 ], [ %90, %166 ]
  %58 = sub nsw i64 %53, %57
  %59 = xor i64 %57, -1
  %60 = add nsw i64 %59, %53
  %61 = and i64 %58, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %56, %63
  %64 = phi i64 [ %72, %63 ], [ %57, %56 ]
  %65 = phi i64 [ %73, %63 ], [ %61, %56 ]
  %66 = getelementptr inbounds i8, i8* %7, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 %64
  %69 = load i8, i8* %68, align 1
  %70 = sub i8 %67, %69
  %71 = getelementptr inbounds i8, i8* %8, i64 %64
  store i8 %70, i8* %71, align 1
  %72 = add nuw nsw i64 %64, 1
  %73 = add i64 %65, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !5

75:                                               ; preds = %63, %56
  %76 = phi i64 [ %57, %56 ], [ %72, %63 ]
  %77 = icmp ult i64 %60, 3
  br i1 %77, label %242, label %211

78:                                               ; preds = %51
  %79 = add nuw nsw i64 %52, 1
  %80 = getelementptr i8, i8* %4, i64 %79
  %81 = add nuw nsw i64 %53, 1
  %82 = getelementptr i8, i8* %4, i64 %81
  %83 = getelementptr i8, i8* %0, i64 %52
  %84 = getelementptr i8, i8* %0, i64 %81
  %85 = icmp ult i8* %80, %84
  %86 = icmp ult i8* %83, %82
  %87 = and i1 %85, %86
  br i1 %87, label %56, label %88

88:                                               ; preds = %78
  %89 = and i64 %54, -32
  %90 = add nsw i64 %89, %52
  %91 = add nsw i64 %89, -32
  %92 = lshr exact i64 %91, 5
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %143, label %96

96:                                               ; preds = %88
  %97 = sub nuw nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %140, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %141, %98 ]
  %101 = add i64 %99, %52
  %102 = getelementptr inbounds i8, i8* %7, i64 %101
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !6
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !6
  %108 = getelementptr inbounds i8, i8* %0, i64 %101
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !6
  %111 = getelementptr inbounds i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !6
  %114 = sub <16 x i8> %104, %110
  %115 = sub <16 x i8> %107, %113
  %116 = getelementptr inbounds i8, i8* %8, i64 %101
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !9, !noalias !6
  %118 = getelementptr inbounds i8, i8* %116, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %119, align 1, !alias.scope !9, !noalias !6
  %120 = or i64 %99, 32
  %121 = add i64 %120, %52
  %122 = getelementptr inbounds i8, i8* %7, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !alias.scope !6
  %125 = getelementptr inbounds i8, i8* %122, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1, !alias.scope !6
  %128 = getelementptr inbounds i8, i8* %0, i64 %121
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1, !alias.scope !6
  %131 = getelementptr inbounds i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !6
  %134 = sub <16 x i8> %124, %130
  %135 = sub <16 x i8> %127, %133
  %136 = getelementptr inbounds i8, i8* %8, i64 %121
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !9, !noalias !6
  %138 = getelementptr inbounds i8, i8* %136, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 1, !alias.scope !9, !noalias !6
  %140 = add i64 %99, 64
  %141 = add i64 %100, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %98, !llvm.loop !11

143:                                              ; preds = %98, %88
  %144 = phi i64 [ 0, %88 ], [ %140, %98 ]
  %145 = icmp eq i64 %94, 0
  br i1 %145, label %166, label %146

146:                                              ; preds = %143
  %147 = add i64 %144, %52
  %148 = getelementptr inbounds i8, i8* %7, i64 %147
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1, !alias.scope !6
  %151 = getelementptr inbounds i8, i8* %148, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1, !alias.scope !6
  %154 = getelementptr inbounds i8, i8* %0, i64 %147
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1, !alias.scope !6
  %157 = getelementptr inbounds i8, i8* %154, i64 16
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1, !alias.scope !6
  %160 = sub <16 x i8> %150, %156
  %161 = sub <16 x i8> %153, %159
  %162 = getelementptr inbounds i8, i8* %8, i64 %147
  %163 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %163, align 1, !alias.scope !9, !noalias !6
  %164 = getelementptr inbounds i8, i8* %162, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> %161, <16 x i8>* %165, align 1, !alias.scope !9, !noalias !6
  br label %166

166:                                              ; preds = %143, %146
  %167 = icmp eq i64 %54, %89
  br i1 %167, label %242, label %56

168:                                              ; preds = %168, %19
  %169 = phi i64 [ 0, %19 ], [ %208, %168 ]
  %170 = phi i64 [ %20, %19 ], [ %209, %168 ]
  %171 = getelementptr inbounds i8, i8* %7, i64 %169
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1
  %174 = getelementptr inbounds i8, i8* %171, i64 -1
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 16
  %178 = bitcast i8* %177 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 -1
  %181 = bitcast i8* %180 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 1
  %183 = sub <16 x i8> %173, %176
  %184 = sub <16 x i8> %179, %182
  %185 = getelementptr inbounds i8, i8* %8, i64 %169
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %186, align 1
  %187 = getelementptr inbounds i8, i8* %185, i64 16
  %188 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %188, align 1
  %189 = or i64 %169, 32
  %190 = getelementptr inbounds i8, i8* %7, i64 %189
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 -1
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 -1
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = sub <16 x i8> %192, %195
  %203 = sub <16 x i8> %198, %201
  %204 = getelementptr inbounds i8, i8* %8, i64 %189
  %205 = bitcast i8* %204 to <16 x i8>*
  store <16 x i8> %202, <16 x i8>* %205, align 1
  %206 = getelementptr inbounds i8, i8* %204, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> %203, <16 x i8>* %207, align 1
  %208 = add nuw nsw i64 %169, 64
  %209 = add i64 %170, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %21, label %168

211:                                              ; preds = %75, %211
  %212 = phi i64 [ %240, %211 ], [ %76, %75 ]
  %213 = getelementptr inbounds i8, i8* %7, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = getelementptr inbounds i8, i8* %0, i64 %212
  %216 = load i8, i8* %215, align 1
  %217 = sub i8 %214, %216
  %218 = getelementptr inbounds i8, i8* %8, i64 %212
  store i8 %217, i8* %218, align 1
  %219 = add nuw nsw i64 %212, 1
  %220 = getelementptr inbounds i8, i8* %7, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = getelementptr inbounds i8, i8* %0, i64 %219
  %223 = load i8, i8* %222, align 1
  %224 = sub i8 %221, %223
  %225 = getelementptr inbounds i8, i8* %8, i64 %219
  store i8 %224, i8* %225, align 1
  %226 = add nuw nsw i64 %212, 2
  %227 = getelementptr inbounds i8, i8* %7, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %0, i64 %226
  %230 = load i8, i8* %229, align 1
  %231 = sub i8 %228, %230
  %232 = getelementptr inbounds i8, i8* %8, i64 %226
  store i8 %231, i8* %232, align 1
  %233 = add nuw nsw i64 %212, 3
  %234 = getelementptr inbounds i8, i8* %7, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = getelementptr inbounds i8, i8* %0, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = sub i8 %235, %237
  %239 = getelementptr inbounds i8, i8* %8, i64 %233
  store i8 %238, i8* %239, align 1
  %240 = add nuw nsw i64 %212, 4
  %241 = icmp eq i64 %240, %53
  br i1 %241, label %242, label %211, !llvm.loop !13

242:                                              ; preds = %75, %211, %166, %48
  %243 = sext i32 %3 to i64
  %244 = icmp sgt i32 %2, 1
  br i1 %244, label %245, label %488

245:                                              ; preds = %242
  %246 = sub nsw i32 0, %3
  %247 = sext i32 %246 to i64
  %248 = sext i32 %10 to i64
  %249 = zext i32 %9 to i64
  %250 = add nsw i64 %243, 1
  %251 = add nsw i64 %243, %249
  %252 = add nsw i64 %251, 1
  %253 = add nsw i64 %248, -1
  %254 = lshr i64 %253, 5
  %255 = add nuw nsw i64 %254, 1
  %256 = and i64 %255, 1
  %257 = icmp eq i64 %254, 0
  %258 = sub nuw nsw i64 %255, %256
  %259 = icmp eq i64 %256, 0
  %260 = sub nsw i64 0, %249
  br label %261

261:                                              ; preds = %484, %245
  %262 = phi i64 [ %487, %484 ], [ 0, %245 ]
  %263 = phi i8* [ %275, %484 ], [ %4, %245 ]
  %264 = phi i8* [ %274, %484 ], [ %0, %245 ]
  %265 = phi i32 [ %485, %484 ], [ 1, %245 ]
  %266 = mul i64 %262, %243
  %267 = add i64 %250, %266
  %268 = getelementptr i8, i8* %4, i64 %267
  %269 = add i64 %252, %266
  %270 = getelementptr i8, i8* %4, i64 %269
  %271 = add i64 %266, %243
  %272 = getelementptr i8, i8* %0, i64 %271
  %273 = getelementptr i8, i8* %0, i64 %269
  %274 = getelementptr inbounds i8, i8* %264, i64 %243
  %275 = getelementptr inbounds i8, i8* %263, i64 %243
  %276 = load i8, i8* %274, align 1
  %277 = getelementptr inbounds i8, i8* %274, i64 %247
  %278 = load i8, i8* %277, align 1
  %279 = sub i8 %276, %278
  store i8 %279, i8* %275, align 1
  %280 = getelementptr inbounds i8, i8* %274, i64 1
  %281 = getelementptr inbounds i8, i8* %275, i64 1
  br i1 %11, label %282, label %309

282:                                              ; preds = %261
  br i1 %257, label %283, label %423

283:                                              ; preds = %423, %282
  %284 = phi i64 [ undef, %282 ], [ %463, %423 ]
  %285 = phi i64 [ 0, %282 ], [ %463, %423 ]
  br i1 %259, label %306, label %286

286:                                              ; preds = %283
  %287 = getelementptr inbounds i8, i8* %280, i64 %285
  %288 = bitcast i8* %287 to <16 x i8>*
  %289 = load <16 x i8>, <16 x i8>* %288, align 1
  %290 = getelementptr inbounds i8, i8* %287, i64 -1
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = getelementptr inbounds i8, i8* %287, i64 16
  %294 = bitcast i8* %293 to <16 x i8>*
  %295 = load <16 x i8>, <16 x i8>* %294, align 1
  %296 = getelementptr inbounds i8, i8* %293, i64 -1
  %297 = bitcast i8* %296 to <16 x i8>*
  %298 = load <16 x i8>, <16 x i8>* %297, align 1
  %299 = sub <16 x i8> %289, %292
  %300 = sub <16 x i8> %295, %298
  %301 = getelementptr inbounds i8, i8* %281, i64 %285
  %302 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %299, <16 x i8>* %302, align 1
  %303 = getelementptr inbounds i8, i8* %301, i64 16
  %304 = bitcast i8* %303 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %304, align 1
  %305 = add nuw nsw i64 %285, 32
  br label %306

306:                                              ; preds = %283, %286
  %307 = phi i64 [ %284, %283 ], [ %305, %286 ]
  %308 = trunc i64 %307 to i32
  br label %309

309:                                              ; preds = %306, %261
  %310 = phi i32 [ 0, %261 ], [ %308, %306 ]
  %311 = icmp slt i32 %310, %9
  br i1 %311, label %312, label %484

312:                                              ; preds = %309
  %313 = zext i32 %310 to i64
  %314 = sub nsw i64 %249, %313
  %315 = icmp ult i64 %314, 32
  br i1 %315, label %316, label %334

316:                                              ; preds = %421, %334, %312
  %317 = phi i64 [ %313, %334 ], [ %313, %312 ], [ %342, %421 ]
  %318 = sub nsw i64 %249, %317
  %319 = xor i64 %317, -1
  %320 = and i64 %318, 1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %331, label %322

322:                                              ; preds = %316
  %323 = getelementptr inbounds i8, i8* %280, i64 %317
  %324 = load i8, i8* %323, align 1
  %325 = add nsw i64 %317, -1
  %326 = getelementptr inbounds i8, i8* %280, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = sub i8 %324, %327
  %329 = getelementptr inbounds i8, i8* %281, i64 %317
  store i8 %328, i8* %329, align 1
  %330 = add nuw nsw i64 %317, 1
  br label %331

331:                                              ; preds = %322, %316
  %332 = phi i64 [ %330, %322 ], [ %317, %316 ]
  %333 = icmp eq i64 %319, %260
  br i1 %333, label %484, label %466

334:                                              ; preds = %312
  %335 = getelementptr i8, i8* %268, i64 %313
  %336 = getelementptr i8, i8* %272, i64 %313
  %337 = icmp ult i8* %335, %273
  %338 = icmp ult i8* %336, %270
  %339 = and i1 %337, %338
  br i1 %339, label %316, label %340

340:                                              ; preds = %334
  %341 = and i64 %314, -32
  %342 = add nsw i64 %341, %313
  %343 = add nsw i64 %341, -32
  %344 = lshr exact i64 %343, 5
  %345 = add nuw nsw i64 %344, 1
  %346 = and i64 %345, 1
  %347 = icmp eq i64 %343, 0
  br i1 %347, label %397, label %348

348:                                              ; preds = %340
  %349 = sub nuw nsw i64 %345, %346
  br label %350

350:                                              ; preds = %350, %348
  %351 = phi i64 [ 0, %348 ], [ %394, %350 ]
  %352 = phi i64 [ %349, %348 ], [ %395, %350 ]
  %353 = add i64 %351, %313
  %354 = getelementptr inbounds i8, i8* %280, i64 %353
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !14
  %357 = getelementptr inbounds i8, i8* %354, i64 16
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !14
  %360 = add nsw i64 %353, -1
  %361 = getelementptr inbounds i8, i8* %280, i64 %360
  %362 = bitcast i8* %361 to <16 x i8>*
  %363 = load <16 x i8>, <16 x i8>* %362, align 1, !alias.scope !14
  %364 = getelementptr inbounds i8, i8* %361, i64 16
  %365 = bitcast i8* %364 to <16 x i8>*
  %366 = load <16 x i8>, <16 x i8>* %365, align 1, !alias.scope !14
  %367 = sub <16 x i8> %356, %363
  %368 = sub <16 x i8> %359, %366
  %369 = getelementptr inbounds i8, i8* %281, i64 %353
  %370 = bitcast i8* %369 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %370, align 1, !alias.scope !17, !noalias !14
  %371 = getelementptr inbounds i8, i8* %369, i64 16
  %372 = bitcast i8* %371 to <16 x i8>*
  store <16 x i8> %368, <16 x i8>* %372, align 1, !alias.scope !17, !noalias !14
  %373 = or i64 %351, 32
  %374 = add i64 %373, %313
  %375 = getelementptr inbounds i8, i8* %280, i64 %374
  %376 = bitcast i8* %375 to <16 x i8>*
  %377 = load <16 x i8>, <16 x i8>* %376, align 1, !alias.scope !14
  %378 = getelementptr inbounds i8, i8* %375, i64 16
  %379 = bitcast i8* %378 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 1, !alias.scope !14
  %381 = add nsw i64 %374, -1
  %382 = getelementptr inbounds i8, i8* %280, i64 %381
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1, !alias.scope !14
  %385 = getelementptr inbounds i8, i8* %382, i64 16
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !alias.scope !14
  %388 = sub <16 x i8> %377, %384
  %389 = sub <16 x i8> %380, %387
  %390 = getelementptr inbounds i8, i8* %281, i64 %374
  %391 = bitcast i8* %390 to <16 x i8>*
  store <16 x i8> %388, <16 x i8>* %391, align 1, !alias.scope !17, !noalias !14
  %392 = getelementptr inbounds i8, i8* %390, i64 16
  %393 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %393, align 1, !alias.scope !17, !noalias !14
  %394 = add i64 %351, 64
  %395 = add i64 %352, -2
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %350, !llvm.loop !19

397:                                              ; preds = %350, %340
  %398 = phi i64 [ 0, %340 ], [ %394, %350 ]
  %399 = icmp eq i64 %346, 0
  br i1 %399, label %421, label %400

400:                                              ; preds = %397
  %401 = add i64 %398, %313
  %402 = getelementptr inbounds i8, i8* %280, i64 %401
  %403 = bitcast i8* %402 to <16 x i8>*
  %404 = load <16 x i8>, <16 x i8>* %403, align 1, !alias.scope !14
  %405 = getelementptr inbounds i8, i8* %402, i64 16
  %406 = bitcast i8* %405 to <16 x i8>*
  %407 = load <16 x i8>, <16 x i8>* %406, align 1, !alias.scope !14
  %408 = add nsw i64 %401, -1
  %409 = getelementptr inbounds i8, i8* %280, i64 %408
  %410 = bitcast i8* %409 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1, !alias.scope !14
  %412 = getelementptr inbounds i8, i8* %409, i64 16
  %413 = bitcast i8* %412 to <16 x i8>*
  %414 = load <16 x i8>, <16 x i8>* %413, align 1, !alias.scope !14
  %415 = sub <16 x i8> %404, %411
  %416 = sub <16 x i8> %407, %414
  %417 = getelementptr inbounds i8, i8* %281, i64 %401
  %418 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %415, <16 x i8>* %418, align 1, !alias.scope !17, !noalias !14
  %419 = getelementptr inbounds i8, i8* %417, i64 16
  %420 = bitcast i8* %419 to <16 x i8>*
  store <16 x i8> %416, <16 x i8>* %420, align 1, !alias.scope !17, !noalias !14
  br label %421

421:                                              ; preds = %397, %400
  %422 = icmp eq i64 %314, %341
  br i1 %422, label %484, label %316

423:                                              ; preds = %282, %423
  %424 = phi i64 [ %463, %423 ], [ 0, %282 ]
  %425 = phi i64 [ %464, %423 ], [ %258, %282 ]
  %426 = getelementptr inbounds i8, i8* %280, i64 %424
  %427 = bitcast i8* %426 to <16 x i8>*
  %428 = load <16 x i8>, <16 x i8>* %427, align 1
  %429 = getelementptr inbounds i8, i8* %426, i64 -1
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1
  %432 = getelementptr inbounds i8, i8* %426, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1
  %435 = getelementptr inbounds i8, i8* %432, i64 -1
  %436 = bitcast i8* %435 to <16 x i8>*
  %437 = load <16 x i8>, <16 x i8>* %436, align 1
  %438 = sub <16 x i8> %428, %431
  %439 = sub <16 x i8> %434, %437
  %440 = getelementptr inbounds i8, i8* %281, i64 %424
  %441 = bitcast i8* %440 to <16 x i8>*
  store <16 x i8> %438, <16 x i8>* %441, align 1
  %442 = getelementptr inbounds i8, i8* %440, i64 16
  %443 = bitcast i8* %442 to <16 x i8>*
  store <16 x i8> %439, <16 x i8>* %443, align 1
  %444 = or i64 %424, 32
  %445 = getelementptr inbounds i8, i8* %280, i64 %444
  %446 = bitcast i8* %445 to <16 x i8>*
  %447 = load <16 x i8>, <16 x i8>* %446, align 1
  %448 = getelementptr inbounds i8, i8* %445, i64 -1
  %449 = bitcast i8* %448 to <16 x i8>*
  %450 = load <16 x i8>, <16 x i8>* %449, align 1
  %451 = getelementptr inbounds i8, i8* %445, i64 16
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1
  %454 = getelementptr inbounds i8, i8* %451, i64 -1
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1
  %457 = sub <16 x i8> %447, %450
  %458 = sub <16 x i8> %453, %456
  %459 = getelementptr inbounds i8, i8* %281, i64 %444
  %460 = bitcast i8* %459 to <16 x i8>*
  store <16 x i8> %457, <16 x i8>* %460, align 1
  %461 = getelementptr inbounds i8, i8* %459, i64 16
  %462 = bitcast i8* %461 to <16 x i8>*
  store <16 x i8> %458, <16 x i8>* %462, align 1
  %463 = add nuw nsw i64 %424, 64
  %464 = add i64 %425, -2
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %283, label %423

466:                                              ; preds = %331, %466
  %467 = phi i64 [ %482, %466 ], [ %332, %331 ]
  %468 = getelementptr inbounds i8, i8* %280, i64 %467
  %469 = load i8, i8* %468, align 1
  %470 = add nsw i64 %467, -1
  %471 = getelementptr inbounds i8, i8* %280, i64 %470
  %472 = load i8, i8* %471, align 1
  %473 = sub i8 %469, %472
  %474 = getelementptr inbounds i8, i8* %281, i64 %467
  store i8 %473, i8* %474, align 1
  %475 = add nuw nsw i64 %467, 1
  %476 = getelementptr inbounds i8, i8* %280, i64 %475
  %477 = load i8, i8* %476, align 1
  %478 = getelementptr inbounds i8, i8* %280, i64 %467
  %479 = load i8, i8* %478, align 1
  %480 = sub i8 %477, %479
  %481 = getelementptr inbounds i8, i8* %281, i64 %475
  store i8 %480, i8* %481, align 1
  %482 = add nuw nsw i64 %467, 2
  %483 = icmp eq i64 %482, %249
  br i1 %483, label %484, label %466, !llvm.loop !20

484:                                              ; preds = %331, %466, %421, %309
  %485 = add nuw nsw i32 %265, 1
  %486 = icmp eq i32 %485, %2
  %487 = add i64 %262, 1
  br i1 %486, label %488, label %261

488:                                              ; preds = %484, %242
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VerticalFilter_SSE2(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #1 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = and i32 %9, -32
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %5
  %13 = sext i32 %10 to i64
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %14, 5
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = sub nuw nsw i64 %16, %17
  br label %168

21:                                               ; preds = %168, %12
  %22 = phi i64 [ undef, %12 ], [ %208, %168 ]
  %23 = phi i64 [ 0, %12 ], [ %208, %168 ]
  %24 = icmp eq i64 %17, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %7, i64 %23
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 -1
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 16
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 -1
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = sub <16 x i8> %28, %31
  %39 = sub <16 x i8> %34, %37
  %40 = getelementptr inbounds i8, i8* %8, i64 %23
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %43, align 1
  %44 = add nuw nsw i64 %23, 32
  br label %45

45:                                               ; preds = %21, %25
  %46 = phi i64 [ %22, %21 ], [ %44, %25 ]
  %47 = trunc i64 %46 to i32
  br label %48

48:                                               ; preds = %45, %5
  %49 = phi i32 [ 0, %5 ], [ %47, %45 ]
  %50 = icmp slt i32 %49, %9
  br i1 %50, label %51, label %242

51:                                               ; preds = %48
  %52 = zext i32 %49 to i64
  %53 = zext i32 %9 to i64
  %54 = sub nsw i64 %53, %52
  %55 = icmp ult i64 %54, 32
  br i1 %55, label %56, label %78

56:                                               ; preds = %166, %78, %51
  %57 = phi i64 [ %52, %78 ], [ %52, %51 ], [ %90, %166 ]
  %58 = sub nsw i64 %53, %57
  %59 = xor i64 %57, -1
  %60 = add nsw i64 %59, %53
  %61 = and i64 %58, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %56, %63
  %64 = phi i64 [ %72, %63 ], [ %57, %56 ]
  %65 = phi i64 [ %73, %63 ], [ %61, %56 ]
  %66 = getelementptr inbounds i8, i8* %7, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 %64
  %69 = load i8, i8* %68, align 1
  %70 = sub i8 %67, %69
  %71 = getelementptr inbounds i8, i8* %8, i64 %64
  store i8 %70, i8* %71, align 1
  %72 = add nuw nsw i64 %64, 1
  %73 = add i64 %65, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !21

75:                                               ; preds = %63, %56
  %76 = phi i64 [ %57, %56 ], [ %72, %63 ]
  %77 = icmp ult i64 %60, 3
  br i1 %77, label %242, label %211

78:                                               ; preds = %51
  %79 = add nuw nsw i64 %52, 1
  %80 = getelementptr i8, i8* %4, i64 %79
  %81 = add nuw nsw i64 %53, 1
  %82 = getelementptr i8, i8* %4, i64 %81
  %83 = getelementptr i8, i8* %0, i64 %52
  %84 = getelementptr i8, i8* %0, i64 %81
  %85 = icmp ult i8* %80, %84
  %86 = icmp ult i8* %83, %82
  %87 = and i1 %85, %86
  br i1 %87, label %56, label %88

88:                                               ; preds = %78
  %89 = and i64 %54, -32
  %90 = add nsw i64 %89, %52
  %91 = add nsw i64 %89, -32
  %92 = lshr exact i64 %91, 5
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %143, label %96

96:                                               ; preds = %88
  %97 = sub nuw nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %140, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %141, %98 ]
  %101 = add i64 %99, %52
  %102 = getelementptr inbounds i8, i8* %7, i64 %101
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !22
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !22
  %108 = getelementptr inbounds i8, i8* %0, i64 %101
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !22
  %111 = getelementptr inbounds i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !22
  %114 = sub <16 x i8> %104, %110
  %115 = sub <16 x i8> %107, %113
  %116 = getelementptr inbounds i8, i8* %8, i64 %101
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !25, !noalias !22
  %118 = getelementptr inbounds i8, i8* %116, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %119, align 1, !alias.scope !25, !noalias !22
  %120 = or i64 %99, 32
  %121 = add i64 %120, %52
  %122 = getelementptr inbounds i8, i8* %7, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !alias.scope !22
  %125 = getelementptr inbounds i8, i8* %122, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1, !alias.scope !22
  %128 = getelementptr inbounds i8, i8* %0, i64 %121
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1, !alias.scope !22
  %131 = getelementptr inbounds i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !22
  %134 = sub <16 x i8> %124, %130
  %135 = sub <16 x i8> %127, %133
  %136 = getelementptr inbounds i8, i8* %8, i64 %121
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !25, !noalias !22
  %138 = getelementptr inbounds i8, i8* %136, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 1, !alias.scope !25, !noalias !22
  %140 = add i64 %99, 64
  %141 = add i64 %100, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %98, !llvm.loop !27

143:                                              ; preds = %98, %88
  %144 = phi i64 [ 0, %88 ], [ %140, %98 ]
  %145 = icmp eq i64 %94, 0
  br i1 %145, label %166, label %146

146:                                              ; preds = %143
  %147 = add i64 %144, %52
  %148 = getelementptr inbounds i8, i8* %7, i64 %147
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1, !alias.scope !22
  %151 = getelementptr inbounds i8, i8* %148, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1, !alias.scope !22
  %154 = getelementptr inbounds i8, i8* %0, i64 %147
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1, !alias.scope !22
  %157 = getelementptr inbounds i8, i8* %154, i64 16
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1, !alias.scope !22
  %160 = sub <16 x i8> %150, %156
  %161 = sub <16 x i8> %153, %159
  %162 = getelementptr inbounds i8, i8* %8, i64 %147
  %163 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %163, align 1, !alias.scope !25, !noalias !22
  %164 = getelementptr inbounds i8, i8* %162, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> %161, <16 x i8>* %165, align 1, !alias.scope !25, !noalias !22
  br label %166

166:                                              ; preds = %143, %146
  %167 = icmp eq i64 %54, %89
  br i1 %167, label %242, label %56

168:                                              ; preds = %168, %19
  %169 = phi i64 [ 0, %19 ], [ %208, %168 ]
  %170 = phi i64 [ %20, %19 ], [ %209, %168 ]
  %171 = getelementptr inbounds i8, i8* %7, i64 %169
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1
  %174 = getelementptr inbounds i8, i8* %171, i64 -1
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 16
  %178 = bitcast i8* %177 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 -1
  %181 = bitcast i8* %180 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 1
  %183 = sub <16 x i8> %173, %176
  %184 = sub <16 x i8> %179, %182
  %185 = getelementptr inbounds i8, i8* %8, i64 %169
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %186, align 1
  %187 = getelementptr inbounds i8, i8* %185, i64 16
  %188 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %188, align 1
  %189 = or i64 %169, 32
  %190 = getelementptr inbounds i8, i8* %7, i64 %189
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 -1
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 -1
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = sub <16 x i8> %192, %195
  %203 = sub <16 x i8> %198, %201
  %204 = getelementptr inbounds i8, i8* %8, i64 %189
  %205 = bitcast i8* %204 to <16 x i8>*
  store <16 x i8> %202, <16 x i8>* %205, align 1
  %206 = getelementptr inbounds i8, i8* %204, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> %203, <16 x i8>* %207, align 1
  %208 = add nuw nsw i64 %169, 64
  %209 = add i64 %170, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %21, label %168

211:                                              ; preds = %75, %211
  %212 = phi i64 [ %240, %211 ], [ %76, %75 ]
  %213 = getelementptr inbounds i8, i8* %7, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = getelementptr inbounds i8, i8* %0, i64 %212
  %216 = load i8, i8* %215, align 1
  %217 = sub i8 %214, %216
  %218 = getelementptr inbounds i8, i8* %8, i64 %212
  store i8 %217, i8* %218, align 1
  %219 = add nuw nsw i64 %212, 1
  %220 = getelementptr inbounds i8, i8* %7, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = getelementptr inbounds i8, i8* %0, i64 %219
  %223 = load i8, i8* %222, align 1
  %224 = sub i8 %221, %223
  %225 = getelementptr inbounds i8, i8* %8, i64 %219
  store i8 %224, i8* %225, align 1
  %226 = add nuw nsw i64 %212, 2
  %227 = getelementptr inbounds i8, i8* %7, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %0, i64 %226
  %230 = load i8, i8* %229, align 1
  %231 = sub i8 %228, %230
  %232 = getelementptr inbounds i8, i8* %8, i64 %226
  store i8 %231, i8* %232, align 1
  %233 = add nuw nsw i64 %212, 3
  %234 = getelementptr inbounds i8, i8* %7, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = getelementptr inbounds i8, i8* %0, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = sub i8 %235, %237
  %239 = getelementptr inbounds i8, i8* %8, i64 %233
  store i8 %238, i8* %239, align 1
  %240 = add nuw nsw i64 %212, 4
  %241 = icmp eq i64 %240, %53
  br i1 %241, label %242, label %211, !llvm.loop !28

242:                                              ; preds = %75, %211, %166, %48
  %243 = sext i32 %3 to i64
  %244 = icmp sgt i32 %2, 1
  br i1 %244, label %245, label %503

245:                                              ; preds = %242
  %246 = and i32 %1, -32
  %247 = icmp sgt i32 %246, 0
  %248 = sext i32 %246 to i64
  %249 = zext i32 %1 to i64
  %250 = add nsw i64 %243, %249
  %251 = add nsw i64 %248, -1
  %252 = lshr i64 %251, 5
  %253 = add nuw nsw i64 %252, 1
  %254 = and i64 %253, 1
  %255 = icmp eq i64 %252, 0
  %256 = sub nuw nsw i64 %253, %254
  %257 = icmp eq i64 %254, 0
  br label %258

258:                                              ; preds = %499, %245
  %259 = phi i64 [ %502, %499 ], [ 0, %245 ]
  %260 = phi i8* [ %274, %499 ], [ %4, %245 ]
  %261 = phi i8* [ %273, %499 ], [ %0, %245 ]
  %262 = phi i32 [ %500, %499 ], [ 1, %245 ]
  %263 = mul i64 %259, %243
  %264 = add i64 %263, %243
  %265 = getelementptr i8, i8* %4, i64 %264
  %266 = add i64 %250, %263
  %267 = getelementptr i8, i8* %4, i64 %266
  %268 = getelementptr i8, i8* %0, i64 %263
  %269 = add i64 %263, %249
  %270 = getelementptr i8, i8* %0, i64 %269
  %271 = getelementptr i8, i8* %0, i64 %264
  %272 = getelementptr i8, i8* %0, i64 %266
  %273 = getelementptr inbounds i8, i8* %261, i64 %243
  %274 = getelementptr inbounds i8, i8* %260, i64 %243
  br i1 %247, label %275, label %303

275:                                              ; preds = %258
  br i1 %255, label %276, label %423

276:                                              ; preds = %423, %275
  %277 = phi i64 [ undef, %275 ], [ %465, %423 ]
  %278 = phi i64 [ 0, %275 ], [ %465, %423 ]
  br i1 %257, label %300, label %279

279:                                              ; preds = %276
  %280 = getelementptr inbounds i8, i8* %273, i64 %278
  %281 = bitcast i8* %280 to <16 x i8>*
  %282 = load <16 x i8>, <16 x i8>* %281, align 1
  %283 = or i64 %278, 16
  %284 = getelementptr inbounds i8, i8* %273, i64 %283
  %285 = bitcast i8* %284 to <16 x i8>*
  %286 = load <16 x i8>, <16 x i8>* %285, align 1
  %287 = getelementptr inbounds i8, i8* %261, i64 %278
  %288 = bitcast i8* %287 to <16 x i8>*
  %289 = load <16 x i8>, <16 x i8>* %288, align 1
  %290 = getelementptr inbounds i8, i8* %261, i64 %283
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = sub <16 x i8> %282, %289
  %294 = sub <16 x i8> %286, %292
  %295 = getelementptr inbounds i8, i8* %274, i64 %278
  %296 = bitcast i8* %295 to <16 x i8>*
  store <16 x i8> %293, <16 x i8>* %296, align 1
  %297 = getelementptr inbounds i8, i8* %274, i64 %283
  %298 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1
  %299 = add nuw nsw i64 %278, 32
  br label %300

300:                                              ; preds = %276, %279
  %301 = phi i64 [ %277, %276 ], [ %299, %279 ]
  %302 = trunc i64 %301 to i32
  br label %303

303:                                              ; preds = %300, %258
  %304 = phi i32 [ 0, %258 ], [ %302, %300 ]
  %305 = icmp slt i32 %304, %1
  br i1 %305, label %306, label %499

306:                                              ; preds = %303
  %307 = zext i32 %304 to i64
  %308 = sub nsw i64 %249, %307
  %309 = icmp ult i64 %308, 32
  br i1 %309, label %310, label %332

310:                                              ; preds = %421, %332, %306
  %311 = phi i64 [ %307, %332 ], [ %307, %306 ], [ %345, %421 ]
  %312 = sub nsw i64 %249, %311
  %313 = xor i64 %311, -1
  %314 = add nsw i64 %313, %249
  %315 = and i64 %312, 3
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %329, label %317

317:                                              ; preds = %310, %317
  %318 = phi i64 [ %326, %317 ], [ %311, %310 ]
  %319 = phi i64 [ %327, %317 ], [ %315, %310 ]
  %320 = getelementptr inbounds i8, i8* %273, i64 %318
  %321 = load i8, i8* %320, align 1
  %322 = getelementptr inbounds i8, i8* %261, i64 %318
  %323 = load i8, i8* %322, align 1
  %324 = sub i8 %321, %323
  %325 = getelementptr inbounds i8, i8* %274, i64 %318
  store i8 %324, i8* %325, align 1
  %326 = add nuw nsw i64 %318, 1
  %327 = add i64 %319, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %317, !llvm.loop !29

329:                                              ; preds = %317, %310
  %330 = phi i64 [ %311, %310 ], [ %326, %317 ]
  %331 = icmp ult i64 %314, 3
  br i1 %331, label %499, label %468

332:                                              ; preds = %306
  %333 = getelementptr i8, i8* %265, i64 %307
  %334 = getelementptr i8, i8* %268, i64 %307
  %335 = getelementptr i8, i8* %271, i64 %307
  %336 = icmp ult i8* %333, %270
  %337 = icmp ult i8* %334, %267
  %338 = and i1 %336, %337
  %339 = icmp ult i8* %333, %272
  %340 = icmp ult i8* %335, %267
  %341 = and i1 %339, %340
  %342 = or i1 %338, %341
  br i1 %342, label %310, label %343

343:                                              ; preds = %332
  %344 = and i64 %308, -32
  %345 = add nsw i64 %344, %307
  %346 = add nsw i64 %344, -32
  %347 = lshr exact i64 %346, 5
  %348 = add nuw nsw i64 %347, 1
  %349 = and i64 %348, 1
  %350 = icmp eq i64 %346, 0
  br i1 %350, label %398, label %351

351:                                              ; preds = %343
  %352 = sub nuw nsw i64 %348, %349
  br label %353

353:                                              ; preds = %353, %351
  %354 = phi i64 [ 0, %351 ], [ %395, %353 ]
  %355 = phi i64 [ %352, %351 ], [ %396, %353 ]
  %356 = add i64 %354, %307
  %357 = getelementptr inbounds i8, i8* %273, i64 %356
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !30
  %360 = getelementptr inbounds i8, i8* %357, i64 16
  %361 = bitcast i8* %360 to <16 x i8>*
  %362 = load <16 x i8>, <16 x i8>* %361, align 1, !alias.scope !30
  %363 = getelementptr inbounds i8, i8* %261, i64 %356
  %364 = bitcast i8* %363 to <16 x i8>*
  %365 = load <16 x i8>, <16 x i8>* %364, align 1, !alias.scope !33
  %366 = getelementptr inbounds i8, i8* %363, i64 16
  %367 = bitcast i8* %366 to <16 x i8>*
  %368 = load <16 x i8>, <16 x i8>* %367, align 1, !alias.scope !33
  %369 = sub <16 x i8> %359, %365
  %370 = sub <16 x i8> %362, %368
  %371 = getelementptr inbounds i8, i8* %274, i64 %356
  %372 = bitcast i8* %371 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %372, align 1, !alias.scope !35, !noalias !37
  %373 = getelementptr inbounds i8, i8* %371, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %374, align 1, !alias.scope !35, !noalias !37
  %375 = or i64 %354, 32
  %376 = add i64 %375, %307
  %377 = getelementptr inbounds i8, i8* %273, i64 %376
  %378 = bitcast i8* %377 to <16 x i8>*
  %379 = load <16 x i8>, <16 x i8>* %378, align 1, !alias.scope !30
  %380 = getelementptr inbounds i8, i8* %377, i64 16
  %381 = bitcast i8* %380 to <16 x i8>*
  %382 = load <16 x i8>, <16 x i8>* %381, align 1, !alias.scope !30
  %383 = getelementptr inbounds i8, i8* %261, i64 %376
  %384 = bitcast i8* %383 to <16 x i8>*
  %385 = load <16 x i8>, <16 x i8>* %384, align 1, !alias.scope !33
  %386 = getelementptr inbounds i8, i8* %383, i64 16
  %387 = bitcast i8* %386 to <16 x i8>*
  %388 = load <16 x i8>, <16 x i8>* %387, align 1, !alias.scope !33
  %389 = sub <16 x i8> %379, %385
  %390 = sub <16 x i8> %382, %388
  %391 = getelementptr inbounds i8, i8* %274, i64 %376
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %392, align 1, !alias.scope !35, !noalias !37
  %393 = getelementptr inbounds i8, i8* %391, i64 16
  %394 = bitcast i8* %393 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %394, align 1, !alias.scope !35, !noalias !37
  %395 = add i64 %354, 64
  %396 = add i64 %355, -2
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %353, !llvm.loop !38

398:                                              ; preds = %353, %343
  %399 = phi i64 [ 0, %343 ], [ %395, %353 ]
  %400 = icmp eq i64 %349, 0
  br i1 %400, label %421, label %401

401:                                              ; preds = %398
  %402 = add i64 %399, %307
  %403 = getelementptr inbounds i8, i8* %273, i64 %402
  %404 = bitcast i8* %403 to <16 x i8>*
  %405 = load <16 x i8>, <16 x i8>* %404, align 1, !alias.scope !30
  %406 = getelementptr inbounds i8, i8* %403, i64 16
  %407 = bitcast i8* %406 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1, !alias.scope !30
  %409 = getelementptr inbounds i8, i8* %261, i64 %402
  %410 = bitcast i8* %409 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1, !alias.scope !33
  %412 = getelementptr inbounds i8, i8* %409, i64 16
  %413 = bitcast i8* %412 to <16 x i8>*
  %414 = load <16 x i8>, <16 x i8>* %413, align 1, !alias.scope !33
  %415 = sub <16 x i8> %405, %411
  %416 = sub <16 x i8> %408, %414
  %417 = getelementptr inbounds i8, i8* %274, i64 %402
  %418 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %415, <16 x i8>* %418, align 1, !alias.scope !35, !noalias !37
  %419 = getelementptr inbounds i8, i8* %417, i64 16
  %420 = bitcast i8* %419 to <16 x i8>*
  store <16 x i8> %416, <16 x i8>* %420, align 1, !alias.scope !35, !noalias !37
  br label %421

421:                                              ; preds = %398, %401
  %422 = icmp eq i64 %308, %344
  br i1 %422, label %499, label %310

423:                                              ; preds = %275, %423
  %424 = phi i64 [ %465, %423 ], [ 0, %275 ]
  %425 = phi i64 [ %466, %423 ], [ %256, %275 ]
  %426 = getelementptr inbounds i8, i8* %273, i64 %424
  %427 = bitcast i8* %426 to <16 x i8>*
  %428 = load <16 x i8>, <16 x i8>* %427, align 1
  %429 = or i64 %424, 16
  %430 = getelementptr inbounds i8, i8* %273, i64 %429
  %431 = bitcast i8* %430 to <16 x i8>*
  %432 = load <16 x i8>, <16 x i8>* %431, align 1
  %433 = getelementptr inbounds i8, i8* %261, i64 %424
  %434 = bitcast i8* %433 to <16 x i8>*
  %435 = load <16 x i8>, <16 x i8>* %434, align 1
  %436 = getelementptr inbounds i8, i8* %261, i64 %429
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1
  %439 = sub <16 x i8> %428, %435
  %440 = sub <16 x i8> %432, %438
  %441 = getelementptr inbounds i8, i8* %274, i64 %424
  %442 = bitcast i8* %441 to <16 x i8>*
  store <16 x i8> %439, <16 x i8>* %442, align 1
  %443 = getelementptr inbounds i8, i8* %274, i64 %429
  %444 = bitcast i8* %443 to <16 x i8>*
  store <16 x i8> %440, <16 x i8>* %444, align 1
  %445 = or i64 %424, 32
  %446 = getelementptr inbounds i8, i8* %273, i64 %445
  %447 = bitcast i8* %446 to <16 x i8>*
  %448 = load <16 x i8>, <16 x i8>* %447, align 1
  %449 = or i64 %424, 48
  %450 = getelementptr inbounds i8, i8* %273, i64 %449
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1
  %453 = getelementptr inbounds i8, i8* %261, i64 %445
  %454 = bitcast i8* %453 to <16 x i8>*
  %455 = load <16 x i8>, <16 x i8>* %454, align 1
  %456 = getelementptr inbounds i8, i8* %261, i64 %449
  %457 = bitcast i8* %456 to <16 x i8>*
  %458 = load <16 x i8>, <16 x i8>* %457, align 1
  %459 = sub <16 x i8> %448, %455
  %460 = sub <16 x i8> %452, %458
  %461 = getelementptr inbounds i8, i8* %274, i64 %445
  %462 = bitcast i8* %461 to <16 x i8>*
  store <16 x i8> %459, <16 x i8>* %462, align 1
  %463 = getelementptr inbounds i8, i8* %274, i64 %449
  %464 = bitcast i8* %463 to <16 x i8>*
  store <16 x i8> %460, <16 x i8>* %464, align 1
  %465 = add nuw nsw i64 %424, 64
  %466 = add i64 %425, -2
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %276, label %423

468:                                              ; preds = %329, %468
  %469 = phi i64 [ %497, %468 ], [ %330, %329 ]
  %470 = getelementptr inbounds i8, i8* %273, i64 %469
  %471 = load i8, i8* %470, align 1
  %472 = getelementptr inbounds i8, i8* %261, i64 %469
  %473 = load i8, i8* %472, align 1
  %474 = sub i8 %471, %473
  %475 = getelementptr inbounds i8, i8* %274, i64 %469
  store i8 %474, i8* %475, align 1
  %476 = add nuw nsw i64 %469, 1
  %477 = getelementptr inbounds i8, i8* %273, i64 %476
  %478 = load i8, i8* %477, align 1
  %479 = getelementptr inbounds i8, i8* %261, i64 %476
  %480 = load i8, i8* %479, align 1
  %481 = sub i8 %478, %480
  %482 = getelementptr inbounds i8, i8* %274, i64 %476
  store i8 %481, i8* %482, align 1
  %483 = add nuw nsw i64 %469, 2
  %484 = getelementptr inbounds i8, i8* %273, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = getelementptr inbounds i8, i8* %261, i64 %483
  %487 = load i8, i8* %486, align 1
  %488 = sub i8 %485, %487
  %489 = getelementptr inbounds i8, i8* %274, i64 %483
  store i8 %488, i8* %489, align 1
  %490 = add nuw nsw i64 %469, 3
  %491 = getelementptr inbounds i8, i8* %273, i64 %490
  %492 = load i8, i8* %491, align 1
  %493 = getelementptr inbounds i8, i8* %261, i64 %490
  %494 = load i8, i8* %493, align 1
  %495 = sub i8 %492, %494
  %496 = getelementptr inbounds i8, i8* %274, i64 %490
  store i8 %495, i8* %496, align 1
  %497 = add nuw nsw i64 %469, 4
  %498 = icmp eq i64 %497, %249
  br i1 %498, label %499, label %468, !llvm.loop !39

499:                                              ; preds = %329, %468, %421, %303
  %500 = add nuw nsw i32 %262, 1
  %501 = icmp eq i32 %500, %2
  %502 = add i64 %259, 1
  br i1 %501, label %503, label %258

503:                                              ; preds = %499, %242
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @GradientFilter_SSE2(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #2 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = and i32 %9, -32
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %5
  %13 = sext i32 %10 to i64
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %14, 5
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = sub nuw nsw i64 %16, %17
  br label %168

21:                                               ; preds = %168, %12
  %22 = phi i64 [ undef, %12 ], [ %208, %168 ]
  %23 = phi i64 [ 0, %12 ], [ %208, %168 ]
  %24 = icmp eq i64 %17, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %7, i64 %23
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 -1
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 16
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 -1
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = sub <16 x i8> %28, %31
  %39 = sub <16 x i8> %34, %37
  %40 = getelementptr inbounds i8, i8* %8, i64 %23
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %43, align 1
  %44 = add nuw nsw i64 %23, 32
  br label %45

45:                                               ; preds = %21, %25
  %46 = phi i64 [ %22, %21 ], [ %44, %25 ]
  %47 = trunc i64 %46 to i32
  br label %48

48:                                               ; preds = %45, %5
  %49 = phi i32 [ 0, %5 ], [ %47, %45 ]
  %50 = icmp slt i32 %49, %9
  br i1 %50, label %51, label %242

51:                                               ; preds = %48
  %52 = zext i32 %49 to i64
  %53 = zext i32 %9 to i64
  %54 = sub nsw i64 %53, %52
  %55 = icmp ult i64 %54, 32
  br i1 %55, label %56, label %78

56:                                               ; preds = %166, %78, %51
  %57 = phi i64 [ %52, %78 ], [ %52, %51 ], [ %90, %166 ]
  %58 = sub nsw i64 %53, %57
  %59 = xor i64 %57, -1
  %60 = add nsw i64 %59, %53
  %61 = and i64 %58, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %56, %63
  %64 = phi i64 [ %72, %63 ], [ %57, %56 ]
  %65 = phi i64 [ %73, %63 ], [ %61, %56 ]
  %66 = getelementptr inbounds i8, i8* %7, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 %64
  %69 = load i8, i8* %68, align 1
  %70 = sub i8 %67, %69
  %71 = getelementptr inbounds i8, i8* %8, i64 %64
  store i8 %70, i8* %71, align 1
  %72 = add nuw nsw i64 %64, 1
  %73 = add i64 %65, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !40

75:                                               ; preds = %63, %56
  %76 = phi i64 [ %57, %56 ], [ %72, %63 ]
  %77 = icmp ult i64 %60, 3
  br i1 %77, label %242, label %211

78:                                               ; preds = %51
  %79 = add nuw nsw i64 %52, 1
  %80 = getelementptr i8, i8* %4, i64 %79
  %81 = add nuw nsw i64 %53, 1
  %82 = getelementptr i8, i8* %4, i64 %81
  %83 = getelementptr i8, i8* %0, i64 %52
  %84 = getelementptr i8, i8* %0, i64 %81
  %85 = icmp ult i8* %80, %84
  %86 = icmp ult i8* %83, %82
  %87 = and i1 %85, %86
  br i1 %87, label %56, label %88

88:                                               ; preds = %78
  %89 = and i64 %54, -32
  %90 = add nsw i64 %89, %52
  %91 = add nsw i64 %89, -32
  %92 = lshr exact i64 %91, 5
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %143, label %96

96:                                               ; preds = %88
  %97 = sub nuw nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %140, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %141, %98 ]
  %101 = add i64 %99, %52
  %102 = getelementptr inbounds i8, i8* %7, i64 %101
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !41
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !41
  %108 = getelementptr inbounds i8, i8* %0, i64 %101
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !41
  %111 = getelementptr inbounds i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !41
  %114 = sub <16 x i8> %104, %110
  %115 = sub <16 x i8> %107, %113
  %116 = getelementptr inbounds i8, i8* %8, i64 %101
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !44, !noalias !41
  %118 = getelementptr inbounds i8, i8* %116, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %119, align 1, !alias.scope !44, !noalias !41
  %120 = or i64 %99, 32
  %121 = add i64 %120, %52
  %122 = getelementptr inbounds i8, i8* %7, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !alias.scope !41
  %125 = getelementptr inbounds i8, i8* %122, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1, !alias.scope !41
  %128 = getelementptr inbounds i8, i8* %0, i64 %121
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1, !alias.scope !41
  %131 = getelementptr inbounds i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !41
  %134 = sub <16 x i8> %124, %130
  %135 = sub <16 x i8> %127, %133
  %136 = getelementptr inbounds i8, i8* %8, i64 %121
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !44, !noalias !41
  %138 = getelementptr inbounds i8, i8* %136, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 1, !alias.scope !44, !noalias !41
  %140 = add i64 %99, 64
  %141 = add i64 %100, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %98, !llvm.loop !46

143:                                              ; preds = %98, %88
  %144 = phi i64 [ 0, %88 ], [ %140, %98 ]
  %145 = icmp eq i64 %94, 0
  br i1 %145, label %166, label %146

146:                                              ; preds = %143
  %147 = add i64 %144, %52
  %148 = getelementptr inbounds i8, i8* %7, i64 %147
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1, !alias.scope !41
  %151 = getelementptr inbounds i8, i8* %148, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1, !alias.scope !41
  %154 = getelementptr inbounds i8, i8* %0, i64 %147
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1, !alias.scope !41
  %157 = getelementptr inbounds i8, i8* %154, i64 16
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1, !alias.scope !41
  %160 = sub <16 x i8> %150, %156
  %161 = sub <16 x i8> %153, %159
  %162 = getelementptr inbounds i8, i8* %8, i64 %147
  %163 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %163, align 1, !alias.scope !44, !noalias !41
  %164 = getelementptr inbounds i8, i8* %162, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> %161, <16 x i8>* %165, align 1, !alias.scope !44, !noalias !41
  br label %166

166:                                              ; preds = %143, %146
  %167 = icmp eq i64 %54, %89
  br i1 %167, label %242, label %56

168:                                              ; preds = %168, %19
  %169 = phi i64 [ 0, %19 ], [ %208, %168 ]
  %170 = phi i64 [ %20, %19 ], [ %209, %168 ]
  %171 = getelementptr inbounds i8, i8* %7, i64 %169
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1
  %174 = getelementptr inbounds i8, i8* %171, i64 -1
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 16
  %178 = bitcast i8* %177 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 -1
  %181 = bitcast i8* %180 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 1
  %183 = sub <16 x i8> %173, %176
  %184 = sub <16 x i8> %179, %182
  %185 = getelementptr inbounds i8, i8* %8, i64 %169
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %186, align 1
  %187 = getelementptr inbounds i8, i8* %185, i64 16
  %188 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %188, align 1
  %189 = or i64 %169, 32
  %190 = getelementptr inbounds i8, i8* %7, i64 %189
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 -1
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 -1
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = sub <16 x i8> %192, %195
  %203 = sub <16 x i8> %198, %201
  %204 = getelementptr inbounds i8, i8* %8, i64 %189
  %205 = bitcast i8* %204 to <16 x i8>*
  store <16 x i8> %202, <16 x i8>* %205, align 1
  %206 = getelementptr inbounds i8, i8* %204, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> %203, <16 x i8>* %207, align 1
  %208 = add nuw nsw i64 %169, 64
  %209 = add i64 %170, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %21, label %168

211:                                              ; preds = %75, %211
  %212 = phi i64 [ %240, %211 ], [ %76, %75 ]
  %213 = getelementptr inbounds i8, i8* %7, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = getelementptr inbounds i8, i8* %0, i64 %212
  %216 = load i8, i8* %215, align 1
  %217 = sub i8 %214, %216
  %218 = getelementptr inbounds i8, i8* %8, i64 %212
  store i8 %217, i8* %218, align 1
  %219 = add nuw nsw i64 %212, 1
  %220 = getelementptr inbounds i8, i8* %7, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = getelementptr inbounds i8, i8* %0, i64 %219
  %223 = load i8, i8* %222, align 1
  %224 = sub i8 %221, %223
  %225 = getelementptr inbounds i8, i8* %8, i64 %219
  store i8 %224, i8* %225, align 1
  %226 = add nuw nsw i64 %212, 2
  %227 = getelementptr inbounds i8, i8* %7, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %0, i64 %226
  %230 = load i8, i8* %229, align 1
  %231 = sub i8 %228, %230
  %232 = getelementptr inbounds i8, i8* %8, i64 %226
  store i8 %231, i8* %232, align 1
  %233 = add nuw nsw i64 %212, 3
  %234 = getelementptr inbounds i8, i8* %7, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = getelementptr inbounds i8, i8* %0, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = sub i8 %235, %237
  %239 = getelementptr inbounds i8, i8* %8, i64 %233
  store i8 %238, i8* %239, align 1
  %240 = add nuw nsw i64 %212, 4
  %241 = icmp eq i64 %240, %53
  br i1 %241, label %242, label %211, !llvm.loop !47

242:                                              ; preds = %75, %211, %166, %48
  %243 = sext i32 %3 to i64
  %244 = icmp sgt i32 %2, 1
  br i1 %244, label %245, label %408

245:                                              ; preds = %242
  %246 = sub nsw i32 0, %3
  %247 = sext i32 %246 to i64
  %248 = sub nsw i64 0, %243
  %249 = and i32 %9, -8
  %250 = icmp sgt i32 %249, 0
  %251 = sext i32 %249 to i64
  %252 = zext i32 %9 to i64
  %253 = add nsw i64 %243, 1
  %254 = add nsw i64 %243, %252
  %255 = add nsw i64 %254, 1
  %256 = add nuw nsw i64 %252, 1
  br label %257

257:                                              ; preds = %404, %245
  %258 = phi i64 [ %407, %404 ], [ 0, %245 ]
  %259 = phi i8* [ %274, %404 ], [ %4, %245 ]
  %260 = phi i8* [ %273, %404 ], [ %0, %245 ]
  %261 = phi i32 [ %405, %404 ], [ 1, %245 ]
  %262 = mul i64 %258, %243
  %263 = add i64 %253, %262
  %264 = getelementptr i8, i8* %4, i64 %263
  %265 = add i64 %255, %262
  %266 = getelementptr i8, i8* %4, i64 %265
  %267 = add i64 %262, %243
  %268 = getelementptr i8, i8* %0, i64 %267
  %269 = getelementptr i8, i8* %0, i64 %265
  %270 = getelementptr i8, i8* %0, i64 %262
  %271 = add i64 %256, %262
  %272 = getelementptr i8, i8* %0, i64 %271
  %273 = getelementptr inbounds i8, i8* %260, i64 %243
  %274 = getelementptr inbounds i8, i8* %259, i64 %243
  %275 = load i8, i8* %273, align 1
  %276 = getelementptr inbounds i8, i8* %273, i64 %247
  %277 = load i8, i8* %276, align 1
  %278 = sub i8 %275, %277
  store i8 %278, i8* %274, align 1
  %279 = getelementptr inbounds i8, i8* %273, i64 1
  %280 = getelementptr inbounds i8, i8* %279, i64 %248
  %281 = getelementptr inbounds i8, i8* %274, i64 1
  br i1 %250, label %340, label %284

282:                                              ; preds = %340
  %283 = trunc i64 %377 to i32
  br label %284

284:                                              ; preds = %282, %257
  %285 = phi i32 [ 0, %257 ], [ %283, %282 ]
  %286 = icmp slt i32 %285, %9
  br i1 %286, label %287, label %404

287:                                              ; preds = %284
  %288 = zext i32 %285 to i64
  %289 = sub nsw i64 %252, %288
  %290 = icmp ult i64 %289, 16
  br i1 %290, label %291, label %293

291:                                              ; preds = %338, %293, %287
  %292 = phi i64 [ %288, %293 ], [ %288, %287 ], [ %306, %338 ]
  br label %379

293:                                              ; preds = %287
  %294 = getelementptr i8, i8* %264, i64 %288
  %295 = getelementptr i8, i8* %268, i64 %288
  %296 = getelementptr i8, i8* %270, i64 %288
  %297 = icmp ult i8* %294, %269
  %298 = icmp ult i8* %295, %266
  %299 = and i1 %297, %298
  %300 = icmp ult i8* %294, %272
  %301 = icmp ult i8* %296, %266
  %302 = and i1 %300, %301
  %303 = or i1 %299, %302
  br i1 %303, label %291, label %304

304:                                              ; preds = %293
  %305 = and i64 %289, -16
  %306 = add nsw i64 %305, %288
  br label %307

307:                                              ; preds = %307, %304
  %308 = phi i64 [ 0, %304 ], [ %336, %307 ]
  %309 = add i64 %308, %288
  %310 = add nsw i64 %309, -1
  %311 = getelementptr inbounds i8, i8* %279, i64 %310
  %312 = bitcast i8* %311 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 1, !alias.scope !48
  %314 = getelementptr inbounds i8, i8* %280, i64 %309
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !51
  %317 = getelementptr inbounds i8, i8* %280, i64 %310
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !51
  %320 = zext <16 x i8> %313 to <16 x i32>
  %321 = zext <16 x i8> %316 to <16 x i32>
  %322 = add nuw nsw <16 x i32> %321, %320
  %323 = zext <16 x i8> %319 to <16 x i32>
  %324 = sub nsw <16 x i32> %322, %323
  %325 = icmp ult <16 x i32> %324, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %326 = icmp slt <16 x i32> %324, zeroinitializer
  %327 = select <16 x i1> %326, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %328 = select <16 x i1> %325, <16 x i32> %324, <16 x i32> %327
  %329 = getelementptr inbounds i8, i8* %279, i64 %309
  %330 = bitcast i8* %329 to <16 x i8>*
  %331 = load <16 x i8>, <16 x i8>* %330, align 1, !alias.scope !48
  %332 = trunc <16 x i32> %328 to <16 x i8>
  %333 = sub <16 x i8> %331, %332
  %334 = getelementptr inbounds i8, i8* %281, i64 %309
  %335 = bitcast i8* %334 to <16 x i8>*
  store <16 x i8> %333, <16 x i8>* %335, align 1, !alias.scope !53, !noalias !55
  %336 = add i64 %308, 16
  %337 = icmp eq i64 %336, %305
  br i1 %337, label %338, label %307, !llvm.loop !56

338:                                              ; preds = %307
  %339 = icmp eq i64 %289, %305
  br i1 %339, label %404, label %291

340:                                              ; preds = %257, %340
  %341 = phi i64 [ %377, %340 ], [ 0, %257 ]
  %342 = add nsw i64 %341, -1
  %343 = getelementptr inbounds i8, i8* %279, i64 %342
  %344 = bitcast i8* %343 to i64*
  %345 = load i64, i64* %344, align 1
  %346 = insertelement <2 x i64> undef, i64 %345, i32 0
  %347 = getelementptr inbounds i8, i8* %280, i64 %341
  %348 = bitcast i8* %347 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = insertelement <2 x i64> undef, i64 %349, i32 0
  %351 = getelementptr inbounds i8, i8* %280, i64 %342
  %352 = bitcast i8* %351 to i64*
  %353 = load i64, i64* %352, align 1
  %354 = insertelement <2 x i64> undef, i64 %353, i32 0
  %355 = getelementptr inbounds i8, i8* %279, i64 %341
  %356 = bitcast i8* %355 to i64*
  %357 = load i64, i64* %356, align 1
  %358 = insertelement <2 x i64> undef, i64 %357, i32 0
  %359 = bitcast <2 x i64> %346 to <16 x i8>
  %360 = shufflevector <16 x i8> %359, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %361 = bitcast <2 x i64> %350 to <16 x i8>
  %362 = shufflevector <16 x i8> %361, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %363 = bitcast <2 x i64> %354 to <16 x i8>
  %364 = shufflevector <16 x i8> %363, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %365 = bitcast <16 x i8> %360 to <8 x i16>
  %366 = bitcast <16 x i8> %362 to <8 x i16>
  %367 = add <8 x i16> %366, %365
  %368 = bitcast <16 x i8> %364 to <8 x i16>
  %369 = sub <8 x i16> %367, %368
  %370 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %369, <8 x i16> undef) #4
  %371 = bitcast <2 x i64> %358 to <16 x i8>
  %372 = sub <16 x i8> %371, %370
  %373 = bitcast <16 x i8> %372 to <2 x i64>
  %374 = getelementptr inbounds i8, i8* %281, i64 %341
  %375 = extractelement <2 x i64> %373, i32 0
  %376 = bitcast i8* %374 to i64*
  store i64 %375, i64* %376, align 1
  %377 = add nuw nsw i64 %341, 8
  %378 = icmp slt i64 %377, %251
  br i1 %378, label %340, label %282

379:                                              ; preds = %291, %379
  %380 = phi i64 [ %402, %379 ], [ %292, %291 ]
  %381 = add nsw i64 %380, -1
  %382 = getelementptr inbounds i8, i8* %279, i64 %381
  %383 = load i8, i8* %382, align 1
  %384 = getelementptr inbounds i8, i8* %280, i64 %380
  %385 = load i8, i8* %384, align 1
  %386 = getelementptr inbounds i8, i8* %280, i64 %381
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %383 to i32
  %389 = zext i8 %385 to i32
  %390 = add nuw nsw i32 %389, %388
  %391 = zext i8 %387 to i32
  %392 = sub nsw i32 %390, %391
  %393 = icmp ult i32 %392, 256
  %394 = icmp slt i32 %392, 0
  %395 = select i1 %394, i32 0, i32 255
  %396 = select i1 %393, i32 %392, i32 %395
  %397 = getelementptr inbounds i8, i8* %279, i64 %380
  %398 = load i8, i8* %397, align 1
  %399 = trunc i32 %396 to i8
  %400 = sub i8 %398, %399
  %401 = getelementptr inbounds i8, i8* %281, i64 %380
  store i8 %400, i8* %401, align 1
  %402 = add nuw nsw i64 %380, 1
  %403 = icmp eq i64 %402, %252
  br i1 %403, label %404, label %379, !llvm.loop !57

404:                                              ; preds = %379, %338, %284
  %405 = add nuw nsw i32 %261, 1
  %406 = icmp eq i32 %405, %2
  %407 = add i64 %258, 1
  br i1 %406, label %408, label %257

408:                                              ; preds = %404, %242
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !12}
!20 = distinct !{!20, !12}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !12}
!28 = distinct !{!28, !12}
!29 = distinct !{!29, !3}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = !{!36}
!36 = distinct !{!36, !32}
!37 = !{!34, !31}
!38 = distinct !{!38, !12}
!39 = distinct !{!39, !12}
!40 = distinct !{!40, !3}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !12}
!47 = distinct !{!47, !12}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = !{!54}
!54 = distinct !{!54, !50}
!55 = !{!49, !52}
!56 = distinct !{!56, !12}
!57 = distinct !{!57, !12}
