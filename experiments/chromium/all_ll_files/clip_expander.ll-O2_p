; ModuleID = '../../cc/trees/clip_expander.cc'
source_filename = "../../cc/trees/clip_expander.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::ClipExpander" = type { i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::PropertyTrees" = type { %"class.base::flat_map", %"class.base::flat_map", %"class.base::flat_map", %"class.cc::TransformTree", %"class.cc::EffectTree", %"class.cc::ClipTree", %"class.cc::ScrollTree", i8, i8, i8, i32, i8, i8, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::PropertyTreesCachedData" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.cc::TransformTree" = type { %"class.cc::PropertyTree", float, float, float, %"class.std::__1::vector.8", %"class.std::__1::vector.15", %"class.std::__1::vector.22" }
%"class.cc::PropertyTree" = type { i32 (...)**, %"class.std::__1::vector.1", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"*, %"class.std::__1::__compressed_pair.3" }
%"struct.cc::TransformNode" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.cc::TransformNode"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.cc::TransformCachedNodeData"*, %"struct.cc::TransformCachedNodeData"*, %"class.std::__1::__compressed_pair.17" }
%"struct.cc::TransformCachedNodeData" = type opaque
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.cc::TransformCachedNodeData"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.cc::StickyPositionNodeData"*, %"struct.cc::StickyPositionNodeData"*, %"class.std::__1::__compressed_pair.24" }
%"struct.cc::StickyPositionNodeData" = type { i32, %"struct.cc::StickyPositionConstraint", i32, i32, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.cc::StickyPositionNodeData"* }
%"class.cc::EffectTree" = type { %"class.cc::PropertyTree.29", %"class.std::__1::unordered_multimap", %"class.std::__1::vector.84" }
%"class.cc::PropertyTree.29" = type { i32 (...)**, %"class.std::__1::vector.30", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"*, %"class.std::__1::__compressed_pair.61" }
%"struct.cc::EffectNode" = type { i32, i32, i64, float, float, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.48", float, %"class.gfx::PointF", %"struct.cc::ElementId", %"class.gfx::MaskFilterInfo", i32, %"class.gfx::Vector2dF", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [3 x i8], i8, i32, i32, i32, i32, i32, i32, %"class.cc::DocumentTransitionSharedElementId" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.43" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.36", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.35, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.35 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree.53" }
%"class.base::internal::flat_tree.53" = type { %"class.std::__1::vector.54" }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { i32*, i32*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i32* }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.cc::EffectNode"* }
%"class.std::__1::unordered_multimap" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.74", %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.81", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67", %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { i64 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { float }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"class.std::__1::unique_ptr.86"*, %"class.std::__1::unique_ptr.86"*, %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.cc::RenderSurfaceImpl"* }
%"class.cc::RenderSurfaceImpl" = type opaque
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.std::__1::unique_ptr.86"* }
%"class.cc::ClipTree" = type { %"class.cc::PropertyTree.95" }
%"class.cc::PropertyTree.95" = type { i32 (...)**, %"class.std::__1::vector.96", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"struct.cc::ClipNode"*, %"struct.cc::ClipNode"*, %"class.std::__1::__compressed_pair.98" }
%"struct.cc::ClipNode" = type opaque
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.cc::ClipNode"* }
%"class.cc::ScrollTree" = type { %"class.cc::PropertyTree.103", i32, %"class.base::flat_map.111", %"class.base::flat_map.121", %"class.base::WeakPtr" }
%"class.cc::PropertyTree.103" = type { i32 (...)**, %"class.std::__1::vector.104", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.cc::ScrollNode"*, %"struct.cc::ScrollNode"*, %"class.std::__1::__compressed_pair.106" }
%"struct.cc::ScrollNode" = type opaque
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.cc::ScrollNode"* }
%"class.base::flat_map.111" = type { %"class.base::internal::flat_tree.112" }
%"class.base::internal::flat_tree.112" = type { %"class.std::__1::vector.113" }
%"class.std::__1::vector.113" = type { %"class.std::__1::__vector_base.114" }
%"class.std::__1::__vector_base.114" = type { %"struct.std::__1::pair.115"*, %"struct.std::__1::pair.115"*, %"class.std::__1::__compressed_pair.116" }
%"struct.std::__1::pair.115" = type opaque
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.std::__1::pair.115"* }
%"class.base::flat_map.121" = type { %"class.base::internal::flat_tree.122" }
%"class.base::internal::flat_tree.122" = type { %"class.std::__1::vector.123" }
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"struct.std::__1::pair.125"*, %"struct.std::__1::pair.125"*, %"class.std::__1::__compressed_pair.126" }
%"struct.std::__1::pair.125" = type opaque
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"struct.std::__1::pair.125"* }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.131" }
%"struct.std::__1::atomic.131" = type { %"struct.std::__1::__atomic_base.132" }
%"struct.std::__1::__atomic_base.132" = type { %"struct.std::__1::__atomic_base.133" }
%"struct.std::__1::__atomic_base.133" = type { %"struct.std::__1::__cxx_atomic_impl.134" }
%"struct.std::__1::__cxx_atomic_impl.134" = type { %"struct.std::__1::__cxx_atomic_base_impl.135" }
%"struct.std::__1::__cxx_atomic_base_impl.135" = type { i8 }
%"class.gfx::Vector2dF" = type { float, float }
%"struct.cc::PropertyTreesCachedData" = type { i32, %"class.std::__1::vector.136", %"class.std::__1::vector.143" }
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"struct.cc::AnimationScaleData"*, %"struct.cc::AnimationScaleData"*, %"class.std::__1::__compressed_pair.138" }
%"struct.cc::AnimationScaleData" = type <{ i32, float, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.cc::AnimationScaleData"* }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { %"class.std::__1::vector.145"*, %"class.std::__1::vector.145"*, %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::vector.145" = type opaque
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.std::__1::vector.145"* }
%class.SkMatrix = type { [9 x float], i32 }

@__const._ZNK2cc12ClipExpander14MapRectReverseERKN3gfx4RectEPKNS_13PropertyTreesE.filter_draw_transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN2cc12ClipExpanderC1Ei = hidden unnamed_addr alias void (%"class.cc::ClipExpander"*, i32), void (%"class.cc::ClipExpander"*, i32)* @_ZN2cc12ClipExpanderC2Ei
@_ZN2cc12ClipExpanderC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::ClipExpander"*, %"class.cc::ClipExpander"*), void (%"class.cc::ClipExpander"*, %"class.cc::ClipExpander"*)* @_ZN2cc12ClipExpanderC2ERKS0_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc12ClipExpanderC2Ei(%"class.cc::ClipExpander"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc12ClipExpanderC2ERKS0_(%"class.cc::ClipExpander"* nocapture, %"class.cc::ClipExpander"* nocapture readonly dereferenceable(4)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %3, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc12ClipExpandereqERKS0_(%"class.cc::ClipExpander"* nocapture readonly, %"class.cc::ClipExpander"* nocapture readonly dereferenceable(4)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2cc12ClipExpander7MapRectERKN3gfx4RectEPKNS_13PropertyTreesE(%"class.cc::ClipExpander"* nocapture readonly, %"class.gfx::Rect"* dereferenceable(16), %"class.cc::PropertyTrees"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %class.SkMatrix, align 4
  %6 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %"class.cc::PropertyTrees", %"class.cc::PropertyTrees"* %2, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %12 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %11, align 8
  %13 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %12, i64 %10
  br label %14

14:                                               ; preds = %3, %9
  %15 = phi %"struct.cc::EffectNode"* [ %13, %9 ], [ null, %3 ]
  %16 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %16) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZNK2cc12ClipExpander14MapRectReverseERKN3gfx4RectEPKNS_13PropertyTreesE.filter_draw_transform to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #6
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 13, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 13, i32 1
  %21 = load float, float* %20, align 4
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %4, float %19, float %21) #6
  %22 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 5
  %23 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #6
  %24 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0
  call void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* nonnull sret %5, %class.SkMatrix44* nonnull %24) #6
  %25 = call { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"* %22, %"class.gfx::Rect"* dereferenceable(16) %1, %class.SkMatrix* nonnull dereferenceable(40) %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %16) #6
  ret { i64, i64 } %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #5

declare { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"*, %"class.gfx::Rect"* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #5

declare void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* sret, %class.SkMatrix44*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2cc12ClipExpander14MapRectReverseERKN3gfx4RectEPKNS_13PropertyTreesE(%"class.cc::ClipExpander"* nocapture readonly, %"class.gfx::Rect"* dereferenceable(16), %"class.cc::PropertyTrees"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %class.SkMatrix, align 4
  %6 = getelementptr inbounds %"class.cc::ClipExpander", %"class.cc::ClipExpander"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %"class.cc::PropertyTrees", %"class.cc::PropertyTrees"* %2, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %12 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %11, align 8
  %13 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %12, i64 %10
  br label %14

14:                                               ; preds = %3, %9
  %15 = phi %"struct.cc::EffectNode"* [ %13, %9 ], [ null, %3 ]
  %16 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %16) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZNK2cc12ClipExpander14MapRectReverseERKN3gfx4RectEPKNS_13PropertyTreesE.filter_draw_transform to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #6
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 13, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 13, i32 1
  %21 = load float, float* %20, align 4
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %4, float %19, float %21) #6
  %22 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 5
  %23 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #6
  %24 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0
  call void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* nonnull sret %5, %class.SkMatrix44* nonnull %24) #6
  %25 = call { i64, i64 } @_ZNK2cc16FilterOperations14MapRectReverseERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"* %22, %"class.gfx::Rect"* dereferenceable(16) %1, %class.SkMatrix* nonnull dereferenceable(40) %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %16) #6
  ret { i64, i64 } %25
}

declare { i64, i64 } @_ZNK2cc16FilterOperations14MapRectReverseERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"*, %"class.gfx::Rect"* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
