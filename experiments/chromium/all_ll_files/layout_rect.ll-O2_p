; ModuleID = '../../third_party/blink/renderer/platform/geometry/layout_rect.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/layout_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::DoubleRect" = type { %"class.blink::DoublePoint", %"class.blink::DoubleSize" }
%"class.blink::DoublePoint" = type { double, double }
%"class.blink::DoubleSize" = type { double, double }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::LayoutRect"*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.2, i32, i8, i8, [2 x i8] }>
%union.anon.2 = type { %"class.WTF::Vector.3" }
%"class.WTF::Vector.3" = type { %"class.WTF::VectorBuffer.4" }
%"class.WTF::VectorBuffer.4" = type { %"class.WTF::VectorBufferBase.5", [16 x i8] }
%"class.WTF::VectorBufferBase.5" = type { i8*, i32, i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIN5blink10LayoutRectELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink10LayoutRectC1ERKNS_10DoubleRectE = hidden unnamed_addr alias void (%"class.blink::LayoutRect"*, %"class.blink::DoubleRect"*), void (%"class.blink::LayoutRect"*, %"class.blink::DoubleRect"*)* @_ZN5blink10LayoutRectC2ERKNS_10DoubleRectE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRectC2ERKNS_10DoubleRectE(%"class.blink::LayoutRect"* nocapture, %"class.blink::DoubleRect"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %1, i64 0, i32 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %1, i64 0, i32 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = fmul double %4, 6.400000e+01
  %9 = fcmp ult double %8, 0xC1E0000000000000
  %10 = fcmp ugt double %8, 0x41DFFFFFFFC00000
  %11 = fcmp ogt double %8, 0xC1E0000000000000
  %12 = select i1 %11, double %8, double 0xC1E0000000000000
  %13 = fptosi double %12 to i32
  %14 = select i1 %9, i32 0, i32 2147483647
  %15 = select i1 %10, i32 %14, i32 %13
  store i32 %15, i32* %7, align 4
  %16 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %17 = fmul double %6, 6.400000e+01
  %18 = fcmp ult double %17, 0xC1E0000000000000
  %19 = fcmp ugt double %17, 0x41DFFFFFFFC00000
  %20 = fcmp ogt double %17, 0xC1E0000000000000
  %21 = select i1 %20, double %17, double 0xC1E0000000000000
  %22 = fptosi double %21 to i32
  %23 = select i1 %18, i32 0, i32 2147483647
  %24 = select i1 %19, i32 %23, i32 %22
  store i32 %24, i32* %16, align 4
  %25 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %1, i64 0, i32 1, i32 0
  %26 = load double, double* %25, align 8
  %27 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %1, i64 0, i32 1, i32 1
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %30 = fmul double %26, 6.400000e+01
  %31 = fcmp ult double %30, 0xC1E0000000000000
  %32 = fcmp ugt double %30, 0x41DFFFFFFFC00000
  %33 = fcmp ogt double %30, 0xC1E0000000000000
  %34 = select i1 %33, double %30, double 0xC1E0000000000000
  %35 = fptosi double %34 to i32
  %36 = select i1 %31, i32 0, i32 2147483647
  %37 = select i1 %32, i32 %36, i32 %35
  store i32 %37, i32* %29, align 4
  %38 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %39 = fmul double %28, 6.400000e+01
  %40 = fcmp ult double %39, 0xC1E0000000000000
  %41 = fcmp ugt double %39, 0x41DFFFFFFFC00000
  %42 = fcmp ogt double %39, 0xC1E0000000000000
  %43 = select i1 %42, double %39, double 0xC1E0000000000000
  %44 = fptosi double %43 to i32
  %45 = select i1 %40, i32 0, i32 2147483647
  %46 = select i1 %41, i32 %45, i32 %44
  store i32 %46, i32* %38, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink10LayoutRect10IntersectsERKS0_(%"class.blink::LayoutRect"* nocapture readonly, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %50, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %50, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %50, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %50, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %22, i32 %12) #8
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 2147483647, i32 %25, !prof !2
  %27 = icmp slt i32 %20, %26
  br i1 %27, label %28, label %50

28:                                               ; preds = %18
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %4) #8
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 2147483647, i32 %31, !prof !2
  %33 = icmp slt i32 %22, %32
  br i1 %33, label %34, label %50

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %38, i32 %16) #8
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 2147483647, i32 %41, !prof !2
  %43 = icmp slt i32 %36, %42
  br i1 %43, label %44, label %50

44:                                               ; preds = %34
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %36, i32 %8) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 2147483647, i32 %47, !prof !2
  %49 = icmp slt i32 %38, %48
  br label %50

50:                                               ; preds = %10, %2, %44, %34, %28, %18, %14, %6
  %51 = phi i1 [ false, %34 ], [ false, %28 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %49, %44 ], [ false, %2 ], [ false, %10 ]
  ret i1 %51
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"* nocapture readonly, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %4, %6
  br i1 %7, label %50, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  %12 = select i1 %11, i32 -2147483648, i32 2147483647
  %13 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %10) #8
  %14 = extractvalue { i32, i1 } %13, 1
  %15 = extractvalue { i32, i1 } %13, 0
  %16 = select i1 %14, i32 %12, i32 %15, !prof !2
  %17 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %18) #8
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = icmp slt i32 %16, %24
  br i1 %25, label %50, label %26

26:                                               ; preds = %8
  %27 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %28, %30
  br i1 %31, label %50, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %34) #8
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %42) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp sge i32 %40, %48
  br label %50

50:                                               ; preds = %26, %8, %2, %32
  %51 = phi i1 [ false, %26 ], [ false, %8 ], [ false, %2 ], [ %49, %32 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect9IntersectERKS0_(%"class.blink::LayoutRect"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #8
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #8
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %30, %22
  %32 = select i1 %31, i32 %30, i32 %22
  %33 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #8
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp slt i32 %48, %40
  %50 = select i1 %49, i32 %48, i32 %40
  %51 = icmp sge i32 %8, %32
  %52 = icmp sge i32 %14, %50
  %53 = or i1 %51, %52
  %54 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  br i1 %53, label %55, label %56

55:                                               ; preds = %2
  store i64 0, i64* %54, align 4
  br label %62

56:                                               ; preds = %2
  %57 = zext i32 %14 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %8 to i64
  %60 = or i64 %58, %59
  store i64 %60, i64* %54, align 4
  %61 = icmp sgt i32 %8, -1
  br i1 %61, label %62, label %67

62:                                               ; preds = %55, %56
  %63 = phi i32 [ 0, %55 ], [ %14, %56 ]
  %64 = phi i32 [ 0, %55 ], [ %8, %56 ]
  %65 = phi i32 [ 0, %55 ], [ %50, %56 ]
  %66 = phi i32 [ 0, %55 ], [ %32, %56 ]
  br label %67

67:                                               ; preds = %56, %62
  %68 = phi i32 [ %63, %62 ], [ %14, %56 ]
  %69 = phi i32 [ %64, %62 ], [ %8, %56 ]
  %70 = phi i32 [ %65, %62 ], [ %50, %56 ]
  %71 = phi i32 [ %66, %62 ], [ %32, %56 ]
  %72 = phi i32 [ -2147483648, %62 ], [ 2147483647, %56 ]
  %73 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %71, i32 %69) #8
  %74 = extractvalue { i32, i1 } %73, 1
  %75 = extractvalue { i32, i1 } %73, 0
  %76 = select i1 %74, i32 %72, i32 %75, !prof !2
  %77 = icmp sgt i32 %68, -1
  %78 = select i1 %77, i32 -2147483648, i32 2147483647
  %79 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %70, i32 %68) #8
  %80 = extractvalue { i32, i1 } %79, 1
  %81 = extractvalue { i32, i1 } %79, 0
  %82 = select i1 %80, i32 %78, i32 %81, !prof !2
  %83 = zext i32 %82 to i64
  %84 = shl nuw i64 %83, 32
  %85 = zext i32 %76 to i64
  %86 = or i64 %84, %85
  %87 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %88 = bitcast %"class.blink::LayoutSize"* %87 to i64*
  store i64 %86, i64* %88, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink10LayoutRect18InclusiveIntersectERKS0_(%"class.blink::LayoutRect"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #8
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #8
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %30, %22
  %32 = select i1 %31, i32 %30, i32 %22
  %33 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #8
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp slt i32 %48, %40
  %50 = select i1 %49, i32 %48, i32 %40
  %51 = icmp sgt i32 %8, %32
  %52 = icmp sgt i32 %14, %50
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %2
  %55 = bitcast %"class.blink::LayoutRect"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 16, i1 false)
  br label %80

56:                                               ; preds = %2
  %57 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  %58 = zext i32 %14 to i64
  %59 = shl nuw i64 %58, 32
  %60 = zext i32 %8 to i64
  %61 = or i64 %59, %60
  store i64 %61, i64* %57, align 4
  %62 = icmp sgt i32 %8, -1
  %63 = select i1 %62, i32 -2147483648, i32 2147483647
  %64 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %8) #8
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  %67 = select i1 %65, i32 %63, i32 %66, !prof !2
  %68 = icmp sgt i32 %14, -1
  %69 = select i1 %68, i32 -2147483648, i32 2147483647
  %70 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %14) #8
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %69, i32 %72, !prof !2
  %74 = zext i32 %73 to i64
  %75 = shl nuw i64 %74, 32
  %76 = zext i32 %67 to i64
  %77 = or i64 %75, %76
  %78 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %79 = bitcast %"class.blink::LayoutSize"* %78 to i64*
  store i64 %77, i64* %79, align 4
  br label %80

80:                                               ; preds = %56, %54
  %81 = phi i1 [ false, %54 ], [ true, %56 ]
  ret i1 %81
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink10LayoutRect21IntersectsInclusivelyERKS0_(%"class.blink::LayoutRect"* nocapture readonly, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  %10 = select i1 %9, i32 -2147483648, i32 2147483647
  %11 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %8) #8
  %12 = extractvalue { i32, i1 } %11, 1
  %13 = extractvalue { i32, i1 } %11, 0
  %14 = select i1 %12, i32 %10, i32 %13, !prof !2
  %15 = icmp sgt i32 %4, %14
  br i1 %15, label %50, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %18) #8
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = icmp sgt i32 %6, %24
  br i1 %25, label %50, label %26

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  %34 = select i1 %33, i32 -2147483648, i32 2147483647
  %35 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %32) #8
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %34, i32 %37, !prof !2
  %39 = icmp sgt i32 %28, %38
  br i1 %39, label %50, label %40

40:                                               ; preds = %26
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %42) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp sle i32 %30, %48
  br label %50

50:                                               ; preds = %26, %16, %2, %40
  %51 = phi i1 [ false, %26 ], [ false, %16 ], [ false, %2 ], [ %49, %40 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %89, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %89, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %18, label %21

18:                                               ; preds = %10, %14
  %19 = bitcast %"class.blink::LayoutRect"* %0 to i8*
  %20 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %89

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, %23
  %27 = select i1 %26, i32 %25, i32 %23
  %28 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %29
  %33 = select i1 %32, i32 %31, i32 %29
  %34 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %23, i32 %12) #8
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = select i1 %35, i32 2147483647, i32 %36
  %38 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %25, i32 %4) #8
  %39 = extractvalue { i32, i1 } %38, 1
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = select i1 %39, i32 2147483647, i32 %40, !prof !2
  %42 = icmp slt i32 %37, %41
  %43 = select i1 %42, i32 %41, i32 %37
  %44 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %29, i32 %16) #8
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 2147483647, i32 %46
  %48 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %8) #8
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 2147483647, i32 %50, !prof !2
  %52 = icmp slt i32 %47, %51
  %53 = select i1 %52, i32 %51, i32 %47
  %54 = icmp sgt i32 %27, -1
  %55 = select i1 %54, i32 -2147483648, i32 2147483647
  %56 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 %27) #8
  %57 = extractvalue { i32, i1 } %56, 1
  %58 = extractvalue { i32, i1 } %56, 0
  %59 = select i1 %57, i32 %55, i32 %58, !prof !2
  %60 = icmp sgt i32 %33, -1
  %61 = select i1 %60, i32 -2147483648, i32 2147483647
  %62 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %53, i32 %33) #8
  %63 = extractvalue { i32, i1 } %62, 1
  %64 = extractvalue { i32, i1 } %62, 0
  %65 = select i1 %63, i32 %61, i32 %64, !prof !2
  %66 = zext i32 %65 to i64
  %67 = shl nuw i64 %66, 32
  %68 = zext i32 %59 to i64
  %69 = or i64 %67, %68
  %70 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %71 = bitcast %"class.blink::LayoutSize"* %70 to i64*
  store i64 %69, i64* %71, align 4
  %72 = icmp sgt i32 %59, -1
  %73 = select i1 %72, i32 -2147483648, i32 2147483647
  %74 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 %59) #8
  %75 = extractvalue { i32, i1 } %74, 1
  %76 = extractvalue { i32, i1 } %74, 0
  %77 = select i1 %75, i32 %73, i32 %76, !prof !2
  %78 = icmp sgt i32 %65, -1
  %79 = select i1 %78, i32 -2147483648, i32 2147483647
  %80 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %53, i32 %65) #8
  %81 = extractvalue { i32, i1 } %80, 1
  %82 = extractvalue { i32, i1 } %80, 0
  %83 = select i1 %81, i32 %79, i32 %82, !prof !2
  %84 = zext i32 %83 to i64
  %85 = shl nuw i64 %84, 32
  %86 = zext i32 %77 to i64
  %87 = or i64 %85, %86
  %88 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  store i64 %87, i64* %88, align 4
  br label %89

89:                                               ; preds = %2, %6, %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect16UniteEvenIfEmptyERKS0_(%"class.blink::LayoutRect"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, %4
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #8
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #8
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %22, %30
  %32 = select i1 %31, i32 %30, i32 %22
  %33 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #8
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #8
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp slt i32 %40, %48
  %50 = select i1 %49, i32 %48, i32 %40
  %51 = icmp sgt i32 %8, -1
  %52 = select i1 %51, i32 -2147483648, i32 2147483647
  %53 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %8) #8
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 %52, i32 %55, !prof !2
  %57 = icmp sgt i32 %14, -1
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %14) #8
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  %63 = zext i32 %62 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %56 to i64
  %66 = or i64 %64, %65
  %67 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %68 = bitcast %"class.blink::LayoutSize"* %67 to i64*
  store i64 %66, i64* %68, align 4
  %69 = icmp sgt i32 %56, -1
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %56) #8
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  %75 = icmp sgt i32 %62, -1
  %76 = select i1 %75, i32 -2147483648, i32 2147483647
  %77 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %62) #8
  %78 = extractvalue { i32, i1 } %77, 1
  %79 = extractvalue { i32, i1 } %77, 0
  %80 = select i1 %78, i32 %76, i32 %79, !prof !2
  %81 = zext i32 %80 to i64
  %82 = shl nuw i64 %81, 32
  %83 = zext i32 %74 to i64
  %84 = or i64 %82, %83
  %85 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  store i64 %84, i64* %85, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect14UniteIfNonZeroERKS0_(%"class.blink::LayoutRect"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %98, label %10

10:                                               ; preds = %6, %2
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %12, %14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %10
  %18 = bitcast %"class.blink::LayoutRect"* %0 to i8*
  %19 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 16, i1 false)
  br label %98

20:                                               ; preds = %10
  %21 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %22
  %26 = select i1 %25, i32 %24, i32 %22
  %27 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, %28
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = icmp slt i32 %12, 0
  %34 = select i1 %33, i32 -2147483648, i32 2147483647
  %35 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %22, i32 %12) #8
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %34, i32 %37
  %39 = icmp slt i32 %4, 0
  %40 = select i1 %39, i32 -2147483648, i32 2147483647
  %41 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %24, i32 %4) #8
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %40, i32 %43, !prof !2
  %45 = icmp slt i32 %38, %44
  %46 = select i1 %45, i32 %44, i32 %38
  %47 = icmp slt i32 %14, 0
  %48 = select i1 %47, i32 -2147483648, i32 2147483647
  %49 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %14) #8
  %50 = extractvalue { i32, i1 } %49, 1
  %51 = extractvalue { i32, i1 } %49, 0
  %52 = select i1 %50, i32 %48, i32 %51
  %53 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, 0
  %56 = select i1 %55, i32 -2147483648, i32 2147483647
  %57 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %54) #8
  %58 = extractvalue { i32, i1 } %57, 1
  %59 = extractvalue { i32, i1 } %57, 0
  %60 = select i1 %58, i32 %56, i32 %59, !prof !2
  %61 = icmp slt i32 %52, %60
  %62 = select i1 %61, i32 %60, i32 %52
  %63 = icmp sgt i32 %26, -1
  %64 = select i1 %63, i32 -2147483648, i32 2147483647
  %65 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %26) #8
  %66 = extractvalue { i32, i1 } %65, 1
  %67 = extractvalue { i32, i1 } %65, 0
  %68 = select i1 %66, i32 %64, i32 %67, !prof !2
  %69 = icmp sgt i32 %32, -1
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %32) #8
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  %75 = zext i32 %74 to i64
  %76 = shl nuw i64 %75, 32
  %77 = zext i32 %68 to i64
  %78 = or i64 %76, %77
  %79 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %80 = bitcast %"class.blink::LayoutSize"* %79 to i64*
  store i64 %78, i64* %80, align 4
  %81 = icmp sgt i32 %68, -1
  %82 = select i1 %81, i32 -2147483648, i32 2147483647
  %83 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %68) #8
  %84 = extractvalue { i32, i1 } %83, 1
  %85 = extractvalue { i32, i1 } %83, 0
  %86 = select i1 %84, i32 %82, i32 %85, !prof !2
  %87 = icmp sgt i32 %74, -1
  %88 = select i1 %87, i32 -2147483648, i32 2147483647
  %89 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %74) #8
  %90 = extractvalue { i32, i1 } %89, 1
  %91 = extractvalue { i32, i1 } %89, 0
  %92 = select i1 %90, i32 %88, i32 %91, !prof !2
  %93 = zext i32 %92 to i64
  %94 = shl nuw i64 %93, 32
  %95 = zext i32 %86 to i64
  %96 = or i64 %94, %95
  %97 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  store i64 %96, i64* %97, align 4
  br label %98

98:                                               ; preds = %6, %20, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect5ScaleEf(%"class.blink::LayoutRect"* nocapture, float) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.blink::LayoutRect"* %0 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 4
  %5 = sitofp <4 x i32> %4 to <4 x float>
  %6 = fmul <4 x float> %5, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %7 = insertelement <4 x float> undef, float %1, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = fmul <4 x float> %6, %8
  %10 = fmul <4 x float> %9, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %11 = fcmp ult <4 x float> %10, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %12 = fcmp ugt <4 x float> %10, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %13 = fcmp ogt <4 x float> %10, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %14 = select <4 x i1> %13, <4 x float> %10, <4 x float> <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %15 = fptosi <4 x float> %14 to <4 x i32>
  %16 = select <4 x i1> %11, <4 x i32> zeroinitializer, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %17 = select <4 x i1> %12, <4 x i32> %16, <4 x i32> %15
  %18 = bitcast %"class.blink::LayoutRect"* %0 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %18, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10LayoutRect5ScaleEff(%"class.blink::LayoutRect"* nocapture, float, float) local_unnamed_addr #3 align 2 {
  %4 = bitcast %"class.blink::LayoutRect"* %0 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 4
  %6 = sitofp <4 x i32> %5 to <4 x float>
  %7 = fmul <4 x float> %6, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %8 = insertelement <2 x float> undef, float %1, i32 0
  %9 = insertelement <2 x float> %8, float %2, i32 1
  %10 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %11 = fmul <4 x float> %7, %10
  %12 = fmul <4 x float> %11, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %13 = fcmp ult <4 x float> %12, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %14 = fcmp ugt <4 x float> %12, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %15 = fcmp ogt <4 x float> %12, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %16 = select <4 x i1> %15, <4 x float> %12, <4 x float> <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %17 = fptosi <4 x float> %16 to <4 x i32>
  %18 = select <4 x i1> %13, <4 x i32> zeroinitializer, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %19 = select <4 x i1> %14, <4 x i32> %18, <4 x i32> %17
  %20 = bitcast %"class.blink::LayoutRect"* %0 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink9UnionRectERKN3WTF6VectorINS_10LayoutRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"class.blink::LayoutRect"*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %5 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::LayoutRect"*, %"class.blink::LayoutRect"** %6, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %17, label %22

13:                                               ; preds = %22
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %4, align 8
  br label %17

17:                                               ; preds = %13, %1
  %18 = phi i64 [ %16, %13 ], [ 0, %1 ]
  %19 = phi i64 [ %15, %13 ], [ 0, %1 ]
  %20 = insertvalue { i64, i64 } undef, i64 %19, 0
  %21 = insertvalue { i64, i64 } %20, i64 %18, 1
  ret { i64, i64 } %21

22:                                               ; preds = %1, %22
  %23 = phi %"class.blink::LayoutRect"* [ %24, %22 ], [ %7, %1 ]
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %3, %"class.blink::LayoutRect"* dereferenceable(16) %23)
  %24 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %23, i64 1
  %25 = icmp eq %"class.blink::LayoutRect"* %24, %11
  br i1 %25, label %13, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink20UnionRectEvenIfEmptyERKN3WTF6VectorINS_10LayoutRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %108, label %5

5:                                                ; preds = %1
  %6 = tail call dereferenceable(16) %"class.blink::LayoutRect"* @_ZNK3WTF6VectorIN5blink10LayoutRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 0) #8
  %7 = bitcast %"class.blink::LayoutRect"* %6 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %6, i64 0, i32 1
  %10 = bitcast %"class.blink::LayoutSize"* %9 to i64*
  %11 = load i64, i64* %10, align 4
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = and i64 %8, -4294967296
  br label %18

15:                                               ; preds = %5
  %16 = lshr i64 %8, 32
  %17 = trunc i64 %16 to i32
  br label %24

18:                                               ; preds = %24, %13
  %19 = phi i64 [ %14, %13 ], [ %103, %24 ]
  %20 = phi i64 [ %8, %13 ], [ %105, %24 ]
  %21 = phi i64 [ %11, %13 ], [ %89, %24 ]
  %22 = and i64 %20, 4294967295
  %23 = or i64 %19, %22
  br label %108

24:                                               ; preds = %24, %15
  %25 = phi i64 [ %105, %24 ], [ %8, %15 ]
  %26 = phi i32 [ %106, %24 ], [ 1, %15 ]
  %27 = phi i64 [ %89, %24 ], [ %11, %15 ]
  %28 = phi i32 [ %101, %24 ], [ %17, %15 ]
  %29 = trunc i64 %25 to i32
  %30 = tail call dereferenceable(16) %"class.blink::LayoutRect"* @_ZNK3WTF6VectorIN5blink10LayoutRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %26) #8
  %31 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, %29
  %34 = select i1 %33, i32 %32, i32 %29
  %35 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %30, i64 0, i32 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %28
  %38 = select i1 %37, i32 %36, i32 %28
  %39 = trunc i64 %27 to i32
  %40 = icmp slt i32 %39, 0
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %29, i32 %39) #8
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44
  %46 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %30, i64 0, i32 1, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %47, 0
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %32, i32 %47) #8
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  %54 = icmp slt i32 %45, %53
  %55 = select i1 %54, i32 %53, i32 %45
  %56 = lshr i64 %27, 32
  %57 = trunc i64 %56 to i32
  %58 = icmp slt i32 %57, 0
  %59 = select i1 %58, i32 -2147483648, i32 2147483647
  %60 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %57) #8
  %61 = extractvalue { i32, i1 } %60, 1
  %62 = extractvalue { i32, i1 } %60, 0
  %63 = select i1 %61, i32 %59, i32 %62
  %64 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %30, i64 0, i32 1, i32 1, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 0
  %67 = select i1 %66, i32 -2147483648, i32 2147483647
  %68 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %36, i32 %65) #8
  %69 = extractvalue { i32, i1 } %68, 1
  %70 = extractvalue { i32, i1 } %68, 0
  %71 = select i1 %69, i32 %67, i32 %70, !prof !2
  %72 = icmp slt i32 %63, %71
  %73 = select i1 %72, i32 %71, i32 %63
  %74 = icmp sgt i32 %34, -1
  %75 = select i1 %74, i32 -2147483648, i32 2147483647
  %76 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %34) #8
  %77 = extractvalue { i32, i1 } %76, 1
  %78 = extractvalue { i32, i1 } %76, 0
  %79 = select i1 %77, i32 %75, i32 %78, !prof !2
  %80 = icmp sgt i32 %38, -1
  %81 = select i1 %80, i32 -2147483648, i32 2147483647
  %82 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %73, i32 %38) #8
  %83 = extractvalue { i32, i1 } %82, 1
  %84 = extractvalue { i32, i1 } %82, 0
  %85 = select i1 %83, i32 %81, i32 %84, !prof !2
  %86 = zext i32 %85 to i64
  %87 = shl nuw i64 %86, 32
  %88 = zext i32 %79 to i64
  %89 = or i64 %87, %88
  %90 = icmp sgt i32 %79, -1
  %91 = select i1 %90, i32 -2147483648, i32 2147483647
  %92 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %79) #8
  %93 = extractvalue { i32, i1 } %92, 1
  %94 = extractvalue { i32, i1 } %92, 0
  %95 = select i1 %93, i32 %91, i32 %94, !prof !2
  %96 = icmp sgt i32 %85, -1
  %97 = select i1 %96, i32 -2147483648, i32 2147483647
  %98 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %73, i32 %85) #8
  %99 = extractvalue { i32, i1 } %98, 1
  %100 = extractvalue { i32, i1 } %98, 0
  %101 = select i1 %99, i32 %97, i32 %100, !prof !2
  %102 = zext i32 %101 to i64
  %103 = shl nuw i64 %102, 32
  %104 = zext i32 %95 to i64
  %105 = or i64 %103, %104
  %106 = add nuw i32 %26, 1
  %107 = icmp eq i32 %106, %3
  br i1 %107, label %18, label %24

108:                                              ; preds = %1, %18
  %109 = phi i64 [ %23, %18 ], [ 0, %1 ]
  %110 = phi i64 [ %21, %18 ], [ 0, %1 ]
  %111 = insertvalue { i64, i64 } undef, i64 %109, 0
  %112 = insertvalue { i64, i64 } %111, i64 %110, 1
  ret { i64, i64 } %112
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_10LayoutRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutRect8ToStringEv(%"class.blink::LayoutRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #8
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #8
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink10LayoutRect8ToStringEv(%"class.blink::LayoutRect"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"class.blink::LayoutPoint"*
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %"class.blink::LayoutSize"*
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  %12 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  %13 = bitcast %"class.blink::LayoutRect"* %0 to i64*
  %14 = load i64, i64* %13, align 4
  store i64 %14, i64* %4, align 8
  %15 = call %"class.WTF::StringImpl"* @_ZNK5blink11LayoutPoint8ToStringEv(%"class.blink::LayoutPoint"* nonnull %5) #8
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %16, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #8
  %17 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = select i1 %20, i8* %22, i8* %10
  %24 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #8
  %25 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #8
  %26 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #8
  %27 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %0, i64 0, i32 1
  %28 = bitcast %"class.blink::LayoutSize"* %27 to i64*
  %29 = load i64, i64* %28, align 4
  store i64 %29, i64* %8, align 8
  %30 = call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutSize8ToStringEv(%"class.blink::LayoutSize"* nonnull %9) #8
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %31, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #8
  %32 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = select i1 %35, i8* %37, i8* %24
  %39 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %23, i8* %38) #8
  %40 = load i8, i8* %33, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %1
  %43 = load i8*, i8** %36, align 8
  call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %1, %42
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #8
  br label %60

60:                                               ; preds = %44, %56, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #8
  %61 = load i8, i8* %18, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %64) #9
  br label %65

65:                                               ; preds = %60, %63
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %81, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #8
  br label %81

81:                                               ; preds = %65, %77, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8
  ret %"class.WTF::StringImpl"* %39
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink11LayoutPoint8ToStringEv(%"class.blink::LayoutPoint"*) local_unnamed_addr #4

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink10LayoutSize8ToStringEv(%"class.blink::LayoutSize"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_10LayoutRectE(%"class.WTF::TextStream"* dereferenceable(48), %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to %"class.blink::FloatRect"*
  %5 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to float
  %9 = fmul float %8, 1.562500e-02
  %10 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sitofp i32 %11 to float
  %13 = fmul float %12, 1.562500e-02
  %14 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to float
  %17 = fmul float %16, 1.562500e-02
  %18 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = sitofp i32 %19 to float
  %21 = fmul float %20, 1.562500e-02
  %22 = insertelement <2 x float> undef, float %9, i32 0
  %23 = insertelement <2 x float> %22, float %13, i32 1
  %24 = insertelement <2 x float> undef, float %17, i32 0
  %25 = insertelement <2 x float> %24, float %21, i32 1
  %26 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  store <2 x float> %23, <2 x float>* %26, align 8
  %27 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  store <2 x float> %25, <2 x float>* %27, align 8
  %28 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_9FloatRectE(%"class.WTF::TextStream"* dereferenceable(48) %0, %"class.blink::FloatRect"* nonnull dereferenceable(16) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret %"class.WTF::TextStream"* %28
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_9FloatRectE(%"class.WTF::TextStream"* dereferenceable(48), %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::LayoutRect"* @_ZNK3WTF6VectorIN5blink10LayoutRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::LayoutRect"*, %"class.blink::LayoutRect"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %24, i64 %25
  ret %"class.blink::LayoutRect"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
