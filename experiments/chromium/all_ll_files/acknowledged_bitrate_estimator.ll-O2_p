; ModuleID = '../../third_party/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator.cc'
source_filename = "../../third_party/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AcknowledgedBitrateEstimator" = type { %"class.webrtc::AcknowledgedBitrateEstimatorInterface", %"class.absl::optional", i8, %"class.std::__1::unique_ptr" }
%"class.webrtc::AcknowledgedBitrateEstimatorInterface" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::Timestamp" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.webrtc::BitrateEstimator"* }
%"class.webrtc::BitrateEstimator" = type { i32 (...)**, i32, [4 x i8], %"class.webrtc::FieldTrialConstrained", %"class.webrtc::FieldTrialConstrained", %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter.14", %"class.webrtc::FieldTrialParameter.16", %"class.webrtc::FieldTrialParameter.16", i64, i64, float, float }
%"class.webrtc::FieldTrialConstrained" = type { %"class.webrtc::FieldTrialParameterInterface.base", i32, %"class.absl::optional.9", %"class.absl::optional.9" }
%"class.webrtc::FieldTrialParameterInterface.base" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::FieldTrialParameterInterface"**, %"class.webrtc::FieldTrialParameterInterface"**, %"class.std::__1::__compressed_pair.0" }
%"class.webrtc::FieldTrialParameterInterface" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.webrtc::FieldTrialParameterInterface"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, %union.anon.13 }
%union.anon.13 = type { i32 }
%"class.webrtc::FieldTrialParameter" = type { %"class.webrtc::FieldTrialParameterInterface.base", double }
%"class.webrtc::FieldTrialParameter.14" = type { %"class.webrtc::FieldTrialParameterInterface.base", %"class.webrtc::DataSize" }
%"class.webrtc::DataSize" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase.15" }
%"class.webrtc::rtc_units_impl::UnitBase.15" = type { i64 }
%"class.webrtc::FieldTrialParameter.16" = type { %"class.webrtc::FieldTrialParameterInterface.base", %"class.webrtc::DataRate" }
%"class.webrtc::DataRate" = type { %"class.webrtc::rtc_units_impl::RelativeUnit.17" }
%"class.webrtc::rtc_units_impl::RelativeUnit.17" = type { %"class.webrtc::rtc_units_impl::UnitBase.18" }
%"class.webrtc::rtc_units_impl::UnitBase.18" = type { i64 }
%"class.webrtc::WebRtcKeyValueConfig" = type { i32 (...)** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.webrtc::PacketResult"*, %"struct.webrtc::PacketResult"*, %"class.std::__1::__compressed_pair.22" }
%"struct.webrtc::PacketResult" = type { %"struct.webrtc::SentPacket", %"class.webrtc::Timestamp" }
%"struct.webrtc::SentPacket" = type { %"class.webrtc::Timestamp", %"class.webrtc::DataSize", %"class.webrtc::DataSize", %"struct.webrtc::PacedPacketInfo", i8, i64, %"class.webrtc::DataSize" }
%"struct.webrtc::PacedPacketInfo" = type { i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.webrtc::PacketResult"* }

@_ZTVN6webrtc28AcknowledgedBitrateEstimatorE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::AcknowledgedBitrateEstimator"*)* @_ZN6webrtc28AcknowledgedBitrateEstimatorD2Ev to i8*), i8* bitcast (void (%"class.webrtc::AcknowledgedBitrateEstimator"*)* @_ZN6webrtc28AcknowledgedBitrateEstimatorD0Ev to i8*), i8* bitcast (void (%"class.webrtc::AcknowledgedBitrateEstimator"*, %"class.std::__1::vector.20"*)* @_ZN6webrtc28AcknowledgedBitrateEstimator28IncomingPacketFeedbackVectorERKNSt3__16vectorINS_12PacketResultENS1_9allocatorIS3_EEEE to i8*), i8* bitcast ({ i8, i64 } (%"class.webrtc::AcknowledgedBitrateEstimator"*)* @_ZNK6webrtc28AcknowledgedBitrateEstimator7bitrateEv to i8*), i8* bitcast ({ i8, i64 } (%"class.webrtc::AcknowledgedBitrateEstimator"*)* @_ZNK6webrtc28AcknowledgedBitrateEstimator8PeekRateEv to i8*), i8* bitcast (void (%"class.webrtc::AcknowledgedBitrateEstimator"*, i1)* @_ZN6webrtc28AcknowledgedBitrateEstimator6SetAlrEb to i8*), i8* bitcast (void (%"class.webrtc::AcknowledgedBitrateEstimator"*, i64)* @_ZN6webrtc28AcknowledgedBitrateEstimator15SetAlrEndedTimeENS_9TimestampE to i8*)] }, align 8

@_ZN6webrtc28AcknowledgedBitrateEstimatorC1EPKNS_20WebRtcKeyValueConfigE = hidden unnamed_addr alias void (%"class.webrtc::AcknowledgedBitrateEstimator"*, %"class.webrtc::WebRtcKeyValueConfig"*), void (%"class.webrtc::AcknowledgedBitrateEstimator"*, %"class.webrtc::WebRtcKeyValueConfig"*)* @_ZN6webrtc28AcknowledgedBitrateEstimatorC2EPKNS_20WebRtcKeyValueConfigE
@_ZN6webrtc28AcknowledgedBitrateEstimatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::AcknowledgedBitrateEstimator"*), void (%"class.webrtc::AcknowledgedBitrateEstimator"*)* @_ZN6webrtc28AcknowledgedBitrateEstimatorD2Ev
@_ZN6webrtc28AcknowledgedBitrateEstimatorC1EPKNS_20WebRtcKeyValueConfigENSt3__110unique_ptrINS_16BitrateEstimatorENS4_14default_deleteIS6_EEEE = hidden unnamed_addr alias void (%"class.webrtc::AcknowledgedBitrateEstimator"*, %"class.webrtc::WebRtcKeyValueConfig"*, %"class.webrtc::BitrateEstimator"*), void (%"class.webrtc::AcknowledgedBitrateEstimator"*, %"class.webrtc::WebRtcKeyValueConfig"*, %"class.webrtc::BitrateEstimator"*)* @_ZN6webrtc28AcknowledgedBitrateEstimatorC2EPKNS_20WebRtcKeyValueConfigENSt3__110unique_ptrINS_16BitrateEstimatorENS4_14default_deleteIS6_EEEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimatorC2EPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture, %"class.webrtc::WebRtcKeyValueConfig"*) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 632) #6
  %4 = bitcast i8* %3 to %"class.webrtc::BitrateEstimator"*
  tail call void @_ZN6webrtc16BitrateEstimatorC1EPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::BitrateEstimator"* nonnull %4, %"class.webrtc::WebRtcKeyValueConfig"* %1) #7
  %5 = ptrtoint i8* %3 to i64
  %6 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6webrtc28AcknowledgedBitrateEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 2
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3
  %10 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  store i64 %5, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimatorC2EPKNS_20WebRtcKeyValueConfigENSt3__110unique_ptrINS_16BitrateEstimatorENS4_14default_deleteIS6_EEEE(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture, %"class.webrtc::WebRtcKeyValueConfig"* nocapture readnone, %"class.webrtc::BitrateEstimator"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.webrtc::BitrateEstimator"* %2 to i64
  %5 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6webrtc28AcknowledgedBitrateEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 2
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3
  %9 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  store i64 %4, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimatorD2Ev(%"class.webrtc::AcknowledgedBitrateEstimator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6webrtc28AcknowledgedBitrateEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %3, align 8
  store %"class.webrtc::BitrateEstimator"* null, %"class.webrtc::BitrateEstimator"** %3, align 8
  %5 = icmp eq %"class.webrtc::BitrateEstimator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.webrtc::BitrateEstimator"* %4 to void (%"class.webrtc::BitrateEstimator"*)***
  %8 = load void (%"class.webrtc::BitrateEstimator"*)**, void (%"class.webrtc::BitrateEstimator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %8, i64 1
  %10 = load void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %9, align 8
  tail call void %10(%"class.webrtc::BitrateEstimator"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc37AcknowledgedBitrateEstimatorInterfaceD2Ev(%"class.webrtc::AcknowledgedBitrateEstimatorInterface"* %12) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc37AcknowledgedBitrateEstimatorInterfaceD2Ev(%"class.webrtc::AcknowledgedBitrateEstimatorInterface"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimatorD0Ev(%"class.webrtc::AcknowledgedBitrateEstimator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6webrtc28AcknowledgedBitrateEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %3, align 8
  store %"class.webrtc::BitrateEstimator"* null, %"class.webrtc::BitrateEstimator"** %3, align 8
  %5 = icmp eq %"class.webrtc::BitrateEstimator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.webrtc::BitrateEstimator"* %4 to void (%"class.webrtc::BitrateEstimator"*)***
  %8 = load void (%"class.webrtc::BitrateEstimator"*)**, void (%"class.webrtc::BitrateEstimator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %8, i64 1
  %10 = load void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %9, align 8
  tail call void %10(%"class.webrtc::BitrateEstimator"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc37AcknowledgedBitrateEstimatorInterfaceD2Ev(%"class.webrtc::AcknowledgedBitrateEstimatorInterface"* %12) #7
  %13 = bitcast %"class.webrtc::AcknowledgedBitrateEstimator"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimator28IncomingPacketFeedbackVectorERKNSt3__16vectorINS_12PacketResultENS1_9allocatorIS3_EEEE(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture, %"class.std::__1::vector.20"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %1, i64 0, i32 0, i32 0
  %4 = load %"struct.webrtc::PacketResult"*, %"struct.webrtc::PacketResult"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %1, i64 0, i32 0, i32 1
  %6 = load %"struct.webrtc::PacketResult"*, %"struct.webrtc::PacketResult"** %5, align 8
  %7 = icmp eq %"struct.webrtc::PacketResult"* %4, %6
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 2
  br label %14

13:                                               ; preds = %43, %2
  ret void

14:                                               ; preds = %8, %43
  %15 = phi %"struct.webrtc::PacketResult"* [ %4, %8 ], [ %54, %43 ]
  %16 = load i8, i8* %9, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %29, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"struct.webrtc::PacketResult", %"struct.webrtc::PacketResult"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %10, align 8
  %22 = icmp sgt i64 %20, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %18
  %24 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %11, align 8
  %25 = bitcast %"class.webrtc::BitrateEstimator"* %24 to void (%"class.webrtc::BitrateEstimator"*)***
  %26 = load void (%"class.webrtc::BitrateEstimator"*)**, void (%"class.webrtc::BitrateEstimator"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %26, i64 4
  %28 = load void (%"class.webrtc::BitrateEstimator"*)*, void (%"class.webrtc::BitrateEstimator"*)** %27, align 8
  tail call void %28(%"class.webrtc::BitrateEstimator"* %24) #7
  store i8 0, i8* %9, align 8
  br label %29

29:                                               ; preds = %14, %23, %18
  %30 = getelementptr inbounds %"struct.webrtc::PacketResult", %"struct.webrtc::PacketResult"* %15, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.webrtc::PacketResult", %"struct.webrtc::PacketResult"* %15, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %31, 9223372036854775807
  %35 = icmp eq i64 %33, 9223372036854775807
  %36 = or i1 %34, %35
  br i1 %36, label %43, label %37

37:                                               ; preds = %29
  %38 = icmp eq i64 %31, -9223372036854775808
  %39 = icmp eq i64 %33, -9223372036854775808
  %40 = or i1 %38, %39
  %41 = add nsw i64 %33, %31
  %42 = select i1 %40, i64 -9223372036854775808, i64 %41
  br label %43

43:                                               ; preds = %29, %37
  %44 = phi i64 [ %42, %37 ], [ 9223372036854775807, %29 ]
  %45 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %11, align 8
  %46 = getelementptr inbounds %"struct.webrtc::PacketResult", %"struct.webrtc::PacketResult"* %15, i64 0, i32 1, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load i8, i8* %12, align 8, !range !2
  %49 = icmp ne i8 %48, 0
  %50 = bitcast %"class.webrtc::BitrateEstimator"* %45 to void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)***
  %51 = load void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)**, void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)*, void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)** %51, i64 2
  %53 = load void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)*, void (%"class.webrtc::BitrateEstimator"*, i64, i64, i1)** %52, align 8
  tail call void %53(%"class.webrtc::BitrateEstimator"* %45, i64 %47, i64 %44, i1 zeroext %49) #7
  %54 = getelementptr inbounds %"struct.webrtc::PacketResult", %"struct.webrtc::PacketResult"* %15, i64 1
  %55 = icmp eq %"struct.webrtc::PacketResult"* %54, %6
  br i1 %55, label %13, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZNK6webrtc28AcknowledgedBitrateEstimator7bitrateEv(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %2, align 8
  %4 = bitcast %"class.webrtc::BitrateEstimator"* %3 to { i8, i64 } (%"class.webrtc::BitrateEstimator"*)***
  %5 = load { i8, i64 } (%"class.webrtc::BitrateEstimator"*)**, { i8, i64 } (%"class.webrtc::BitrateEstimator"*)*** %4, align 8
  %6 = getelementptr inbounds { i8, i64 } (%"class.webrtc::BitrateEstimator"*)*, { i8, i64 } (%"class.webrtc::BitrateEstimator"*)** %5, i64 3
  %7 = load { i8, i64 } (%"class.webrtc::BitrateEstimator"*)*, { i8, i64 } (%"class.webrtc::BitrateEstimator"*)** %6, align 8
  %8 = tail call { i8, i64 } %7(%"class.webrtc::BitrateEstimator"* %3) #7
  ret { i8, i64 } %8
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZNK6webrtc28AcknowledgedBitrateEstimator8PeekRateEv(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %"class.webrtc::BitrateEstimator"*, %"class.webrtc::BitrateEstimator"** %2, align 8
  %4 = tail call { i8, i64 } @_ZNK6webrtc16BitrateEstimator8PeekRateEv(%"class.webrtc::BitrateEstimator"* %3) #7
  ret { i8, i64 } %4
}

declare { i8, i64 } @_ZNK6webrtc16BitrateEstimator8PeekRateEv(%"class.webrtc::BitrateEstimator"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimator15SetAlrEndedTimeENS_9TimestampE(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %1, i64* %4, align 8
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc28AcknowledgedBitrateEstimator6SetAlrEb(%"class.webrtc::AcknowledgedBitrateEstimator"* nocapture, i1 zeroext) unnamed_addr #4 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.webrtc::AcknowledgedBitrateEstimator", %"class.webrtc::AcknowledgedBitrateEstimator"* %0, i64 0, i32 2
  store i8 %3, i8* %4, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN6webrtc16BitrateEstimatorC1EPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::BitrateEstimator"*, %"class.webrtc::WebRtcKeyValueConfig"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
