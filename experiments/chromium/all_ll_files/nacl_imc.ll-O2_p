; ModuleID = '../../native_client/src/shared/imc/linux/nacl_imc.cc'
source_filename = "../../native_client/src/shared/imc/linux/nacl_imc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.NaClSocketAddress = type { [28 x i8] }
%struct.NaClMessageHeader = type { %struct.NaClIOVec*, i32, i32*, i32, i32 }
%struct.NaClIOVec = type { i8*, i64 }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.iovec = type { i8*, i64 }
%struct.cmsghdr = type { i64, i32, i32, [0 x i8] }

@.str = private unnamed_addr constant [34 x i8] c"BoundSocket(): Not used on Linux\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"SendDatagramTo(): Not used on Linux\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"SocketPair: socketpair failed, errno %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClBoundSocket(%struct.NaClSocketAddress* nocapture readnone) local_unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #5
  ret i32 -1
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSendDatagramTo(%struct.NaClMessageHeader* nocapture readnone, i32, %struct.NaClSocketAddress* nocapture readnone) local_unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)) #5
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSocketPair(i32*) local_unnamed_addr #0 {
  %2 = tail call i32 @socketpair(i32 1, i32 5, i32 0, i32* %0) #5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = tail call i32* @__errno_location() #6
  %6 = load i32, i32* %5, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i32 %6) #5
  br label %7

7:                                                ; preds = %1, %4
  ret i32 %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare i32 @socketpair(i32, i32, i32, i32*) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClClose(i32) local_unnamed_addr #0 {
  %2 = tail call i32 @close(i32 %0) #5
  ret i32 %2
}

declare i32 @close(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSendDatagram(i32, %struct.NaClMessageHeader*, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.msghdr, align 8
  %5 = alloca [48 x i8], align 16
  %6 = bitcast %struct.msghdr* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 56, i1 false)
  %7 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 48, i1 false)
  %8 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp ugt i32 %9, 8
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = tail call i32* @__errno_location() #6
  store i32 90, i32* %12, align 4
  br label %62

13:                                               ; preds = %3
  %14 = tail call i32 @NaClMessageSizeIsValid(%struct.NaClMessageHeader* %1) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = tail call i32* @__errno_location() #6
  store i32 90, i32* %17, align 4
  br label %62

18:                                               ; preds = %13
  %19 = bitcast %struct.NaClMessageHeader* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 2
  %22 = bitcast %struct.iovec** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 3
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 0
  store i8* null, i8** %27, align 8
  %28 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 1
  store i32 0, i32* %28, align 8
  %29 = load i32, i32* %8, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %52, label %31

31:                                               ; preds = %18
  %32 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 2
  %33 = load i32*, i32** %32, align 8
  %34 = icmp eq i32* %33, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %31
  %36 = shl i32 %29, 2
  %37 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  store i8* %7, i8** %37, align 8
  %38 = sext i32 %36 to i64
  %39 = add nsw i64 %38, 23
  %40 = and i64 %39, -8
  %41 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 5
  store i64 %40, i64* %41, align 8
  %42 = icmp ugt i64 %40, 15
  %43 = bitcast [48 x i8]* %5 to %struct.cmsghdr*
  %44 = select i1 %42, %struct.cmsghdr* %43, %struct.cmsghdr* null
  %45 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %44, i64 0, i32 1
  store i32 1, i32* %45, align 8
  %46 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %44, i64 0, i32 2
  store i32 1, i32* %46, align 4
  %47 = add nsw i64 %38, 16
  %48 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %44, i64 0, i32 0
  store i64 %47, i64* %48, align 16
  %49 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %44, i64 0, i32 3, i64 0
  %50 = bitcast i32** %32 to i8**
  %51 = load i8*, i8** %50, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %49, i8* align 4 %51, i64 %38, i1 false)
  store i64 %47, i64* %41, align 8
  br label %55

52:                                               ; preds = %31, %18
  %53 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  %54 = bitcast i8** %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 16, i1 false)
  br label %55

55:                                               ; preds = %52, %35
  %56 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 6
  store i32 0, i32* %56, align 8
  %57 = shl i32 %2, 6
  %58 = and i32 %57, 64
  %59 = or i32 %58, 16384
  %60 = call i64 @sendmsg(i32 %0, %struct.msghdr* nonnull %4, i32 %59) #5
  %61 = trunc i64 %60 to i32
  br label %62

62:                                               ; preds = %55, %16, %11
  %63 = phi i32 [ -1, %11 ], [ %61, %55 ], [ -1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #5
  ret i32 %63
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @NaClMessageSizeIsValid(%struct.NaClMessageHeader*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i64 @sendmsg(i32, %struct.msghdr*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClReceiveDatagram(i32, %struct.NaClMessageHeader*, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.msghdr, align 8
  %5 = alloca [48 x i8], align 16
  %6 = bitcast %struct.msghdr* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 56, i1 false)
  %7 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 48, i1 false)
  %8 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp ugt i32 %9, 8
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = tail call i32* @__errno_location() #6
  store i32 90, i32* %12, align 4
  br label %140

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 0
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = tail call i32 @NaClMessageSizeIsValid(%struct.NaClMessageHeader* %1) #5
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = tail call i32* @__errno_location() #6
  store i32 90, i32* %19, align 4
  br label %140

20:                                               ; preds = %13
  %21 = bitcast %struct.NaClMessageHeader* %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 2
  %24 = bitcast %struct.iovec** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 3
  store i64 %27, i64* %28, align 8
  %29 = load i32, i32* %8, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %20
  %32 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 2
  %33 = load i32*, i32** %32, align 8
  %34 = icmp eq i32* %33, null
  br i1 %34, label %43, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  store i8* %7, i8** %36, align 8
  %37 = zext i32 %29 to i64
  %38 = shl nuw nsw i64 %37, 2
  %39 = add nuw nsw i64 %38, 7
  %40 = and i64 %39, 34359738360
  %41 = add nuw nsw i64 %40, 16
  %42 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 5
  store i64 %41, i64* %42, align 8
  br label %46

43:                                               ; preds = %31, %20
  %44 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  %45 = bitcast i8** %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false)
  br label %46

46:                                               ; preds = %43, %35
  %47 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 6
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 4
  store i32 0, i32* %48, align 4
  %49 = shl i32 %2, 6
  %50 = and i32 %49, 64
  %51 = call i64 @recvmsg(i32 %0, %struct.msghdr* nonnull %4, i32 %50) #5
  %52 = trunc i64 %51 to i32
  %53 = icmp sgt i32 %52, -1
  br i1 %53, label %54, label %140

54:                                               ; preds = %46
  %55 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 5
  %56 = load i64, i64* %55, align 8
  %57 = icmp ugt i64 %56, 15
  br i1 %57, label %58, label %125

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i64 0, i32 4
  %60 = bitcast i8** %59 to %struct.cmsghdr**
  %61 = load %struct.cmsghdr*, %struct.cmsghdr** %60, align 8
  %62 = icmp eq %struct.cmsghdr* %61, null
  br i1 %62, label %125, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.NaClMessageHeader, %struct.NaClMessageHeader* %1, i64 0, i32 2
  %65 = load i32*, i32** %64, align 8
  br label %66

66:                                               ; preds = %63, %115
  %67 = phi i64 [ %101, %115 ], [ 0, %63 ]
  %68 = phi %struct.cmsghdr* [ %116, %115 ], [ %61, %63 ]
  %69 = phi i32* [ %100, %115 ], [ %65, %63 ]
  %70 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %68, i64 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %99

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %68, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %99

77:                                               ; preds = %73
  %78 = add i64 %67, 1
  %79 = shl i64 %78, 2
  %80 = add i64 %79, 16
  %81 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %68, i64 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = icmp ugt i64 %80, %82
  br i1 %83, label %99, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %68, i64 0, i32 3, i64 0
  %86 = bitcast i8* %85 to i32*
  br label %87

87:                                               ; preds = %87, %84
  %88 = phi i64 [ %78, %84 ], [ %94, %87 ]
  %89 = phi i64 [ %67, %84 ], [ %88, %87 ]
  %90 = phi i32* [ %69, %84 ], [ %93, %87 ]
  %91 = getelementptr inbounds i32, i32* %86, i64 %89
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds i32, i32* %90, i64 1
  store i32 %92, i32* %90, align 4
  %94 = add i64 %88, 1
  %95 = shl i64 %94, 2
  %96 = add i64 %95, 16
  %97 = load i64, i64* %81, align 8
  %98 = icmp ugt i64 %96, %97
  br i1 %98, label %99, label %87

99:                                               ; preds = %87, %77, %73, %66
  %100 = phi i32* [ %69, %73 ], [ %69, %66 ], [ %69, %77 ], [ %93, %87 ]
  %101 = phi i64 [ %67, %73 ], [ %67, %66 ], [ %67, %77 ], [ %88, %87 ]
  %102 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %68, i64 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = icmp ult i64 %103, 16
  br i1 %104, label %125, label %105

105:                                              ; preds = %99
  %106 = bitcast %struct.cmsghdr* %68 to i8*
  %107 = add i64 %103, 7
  %108 = and i64 %107, -8
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = getelementptr inbounds i8, i8* %109, i64 16
  %111 = load i8*, i8** %59, align 8
  %112 = load i64, i64* %55, align 8
  %113 = getelementptr inbounds i8, i8* %111, i64 %112
  %114 = icmp ugt i8* %110, %113
  br i1 %114, label %125, label %115

115:                                              ; preds = %105
  %116 = bitcast i8* %109 to %struct.cmsghdr*
  %117 = bitcast i8* %109 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, 7
  %120 = and i64 %119, -8
  %121 = getelementptr inbounds i8, i8* %109, i64 %120
  %122 = icmp ugt i8* %121, %113
  %123 = icmp eq i8* %109, null
  %124 = or i1 %123, %122
  br i1 %124, label %125, label %66

125:                                              ; preds = %99, %105, %115, %54, %58
  %126 = phi i64 [ 0, %58 ], [ 0, %54 ], [ %101, %115 ], [ %101, %105 ], [ %101, %99 ]
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %8, align 8
  %128 = load i32, i32* %47, align 8
  %129 = and i32 %128, 32
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %134, label %131

131:                                              ; preds = %125
  %132 = load i32, i32* %48, align 4
  %133 = or i32 %132, 1
  store i32 %133, i32* %48, align 4
  br label %134

134:                                              ; preds = %125, %131
  %135 = and i32 %128, 8
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = load i32, i32* %48, align 4
  %139 = or i32 %138, 2
  store i32 %139, i32* %48, align 4
  br label %140

140:                                              ; preds = %46, %137, %134, %18, %11
  %141 = phi i32 [ -1, %11 ], [ -1, %18 ], [ %52, %134 ], [ %52, %137 ], [ %52, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #5
  ret i32 %141
}

declare i64 @recvmsg(i32, %struct.msghdr*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
