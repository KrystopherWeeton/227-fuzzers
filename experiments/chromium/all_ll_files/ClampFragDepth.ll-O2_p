; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/gl/ClampFragDepth.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/gl/ClampFragDepth.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.29, i32 }
%union.anon.29 = type { i32 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.30", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.32" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>

@.str = private unnamed_addr constant [13 x i8] c"gl_FragDepth\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"clamp\00", align 1
@_ZTVN2sh20TIntermConstantUnionE = external unnamed_addr constant { [34 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14ClampFragDepthEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::ImmutableString", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TVector", align 8
  %8 = bitcast %"class.sh::ImmutableString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #4
  %9 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %11 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 1
  store i64 12, i64* %11, align 8
  %12 = call %"class.sh::TIntermSymbol"* @_ZN2sh14FindSymbolNodeEPNS_11TIntermNodeERKNS_15ImmutableStringE(%"class.sh::TIntermNode"* %10, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %4) #4
  %13 = icmp eq %"class.sh::TIntermSymbol"* %12, null
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #4
  br i1 %13, label %679, label %14

14:                                               ; preds = %3
  %15 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %16 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #4
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  %18 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_FragDepthEv() #4
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %18) #4
  %19 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %19) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 3, i32 2, i8 zeroext 1, i8 zeroext 1) #4
  %20 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* nonnull dereferenceable(184) %5) #4
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %19) #4
  %21 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %22 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 8) #4
  %23 = bitcast i8* %22 to %"class.sh::TConstantUnion"*
  call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %23) #4
  %24 = bitcast i8* %22 to float*
  store float 1.000000e+00, float* %24, align 4
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  %26 = bitcast i8* %25 to i32*
  store i32 1, i32* %26, align 4
  %27 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %28 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %27, i64 216) #4
  %29 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %29) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 1, i32 3, i32 2, i8 zeroext 1, i8 zeroext 1) #4
  %30 = bitcast i8* %28 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %30, %"class.sh::TType"* nonnull dereferenceable(184) %6) #4
  %31 = bitcast i8* %28 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 208
  %33 = bitcast i8* %32 to i8**
  store i8* %22, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %29) #4
  %34 = bitcast %"class.sh::TVector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #4
  %35 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 1
  %37 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #4
  %38 = bitcast i8* %16 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %39 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %39, i64 23
  %41 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %40, align 8
  %42 = call %"class.sh::TIntermTyped"* %41(%"class.sh::TIntermSymbol"* %17) #4
  %43 = ptrtoint %"class.sh::TIntermTyped"* %42 to i64
  %44 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %45 = bitcast %"class.sh::TVector"* %7 to i64*
  %46 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %47 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %48 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %47, i64 8) #4
  %49 = bitcast i8* %48 to %"class.sh::TIntermNode"**
  %50 = getelementptr inbounds i8, i8* %48, i64 8
  %51 = ptrtoint i8* %50 to i64
  %52 = bitcast i8* %48 to i64*
  store i64 %43, i64* %52, align 8
  %53 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %54 = ptrtoint %"class.sh::TIntermNode"** %53 to i64
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %56 = bitcast %"class.sh::TIntermNode"** %55 to i8*
  %57 = icmp eq %"class.sh::TIntermNode"** %55, %53
  br i1 %57, label %231, label %58

58:                                               ; preds = %14
  %59 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %60 = ptrtoint %"class.sh::TIntermNode"** %59 to i64
  %61 = sub i64 %60, %54
  %62 = lshr i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = icmp ult i64 %63, 4
  br i1 %64, label %161, label %65

65:                                               ; preds = %58
  %66 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %67 = ptrtoint %"class.sh::TIntermNode"** %66 to i64
  %68 = sub i64 %67, %54
  %69 = lshr i64 %68, 3
  %70 = and i64 %68, -8
  %71 = xor i64 %70, -8
  %72 = getelementptr i8, i8* %48, i64 %71
  %73 = xor i64 %69, -1
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 %73
  %75 = bitcast %"class.sh::TIntermNode"** %74 to i8*
  %76 = icmp ult i8* %72, %56
  %77 = icmp ugt i8* %48, %75
  %78 = and i1 %76, %77
  br i1 %78, label %161, label %79

79:                                               ; preds = %65
  %80 = and i64 %63, 4611686018427387900
  %81 = sub nsw i64 0, %80
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %81
  %83 = sub nsw i64 0, %80
  %84 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 %83
  %85 = add nsw i64 %80, -4
  %86 = lshr exact i64 %85, 2
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %85, 0
  br i1 %89, label %136, label %90

90:                                               ; preds = %79
  %91 = sub nuw nsw i64 %87, %88
  %92 = getelementptr i8, i8* %48, i64 -8
  %93 = bitcast i8* %92 to %"class.sh::TIntermNode"**
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %95 = getelementptr i8, i8* %48, i64 -8
  %96 = bitcast i8* %95 to %"class.sh::TIntermNode"**
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  br label %98

98:                                               ; preds = %98, %90
  %99 = phi i64 [ 0, %90 ], [ %133, %98 ]
  %100 = phi i64 [ %91, %90 ], [ %134, %98 ]
  %101 = sub i64 0, %99
  %102 = sub i64 0, %99
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 %101
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %102
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -1
  %106 = bitcast %"class.sh::TIntermNode"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !2
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -2
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -1
  %110 = bitcast %"class.sh::TIntermNode"** %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 8, !alias.scope !2
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %113 = bitcast %"class.sh::TIntermNode"** %112 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %113, align 8, !alias.scope !5, !noalias !2
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -2
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -1
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %116, align 8, !alias.scope !5, !noalias !2
  %117 = sub nuw nsw i64 -4, %99
  %118 = sub nuw nsw i64 -4, %99
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 %117
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 %118
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !2
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -1
  %126 = bitcast %"class.sh::TIntermNode"** %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !2
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %129, align 8, !alias.scope !5, !noalias !2
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %132, align 8, !alias.scope !5, !noalias !2
  %133 = add i64 %99, 8
  %134 = add i64 %100, -2
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %98, !llvm.loop !7

136:                                              ; preds = %98, %79
  %137 = phi i64 [ 0, %79 ], [ %133, %98 ]
  %138 = icmp eq i64 %88, 0
  br i1 %138, label %159, label %139

139:                                              ; preds = %136
  %140 = sub i64 0, %137
  %141 = getelementptr i8, i8* %48, i64 -8
  %142 = bitcast i8* %141 to %"class.sh::TIntermNode"**
  %143 = sub i64 0, %137
  %144 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 %140
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 %143
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -1
  %148 = bitcast %"class.sh::TIntermNode"** %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 8, !alias.scope !2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -2
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -1
  %152 = bitcast %"class.sh::TIntermNode"** %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !2
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %155 = bitcast %"class.sh::TIntermNode"** %154 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %155, align 8, !alias.scope !5, !noalias !2
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -2
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -1
  %158 = bitcast %"class.sh::TIntermNode"** %157 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %158, align 8, !alias.scope !5, !noalias !2
  br label %159

159:                                              ; preds = %136, %139
  %160 = icmp eq i64 %63, %80
  br i1 %160, label %231, label %161

161:                                              ; preds = %159, %65, %58
  %162 = phi %"class.sh::TIntermNode"** [ %49, %65 ], [ %49, %58 ], [ %82, %159 ]
  %163 = phi %"class.sh::TIntermNode"** [ %55, %65 ], [ %55, %58 ], [ %84, %159 ]
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 -1
  %165 = ptrtoint %"class.sh::TIntermNode"** %164 to i64
  %166 = sub i64 %165, %54
  %167 = lshr i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = and i64 %168, 7
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %182, label %171

171:                                              ; preds = %161, %171
  %172 = phi %"class.sh::TIntermNode"** [ %175, %171 ], [ %162, %161 ]
  %173 = phi %"class.sh::TIntermNode"** [ %176, %171 ], [ %163, %161 ]
  %174 = phi i64 [ %180, %171 ], [ %169, %161 ]
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %177 = bitcast %"class.sh::TIntermNode"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.sh::TIntermNode"** %175 to i64*
  store i64 %178, i64* %179, align 8
  %180 = add i64 %174, -1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %171, !llvm.loop !9

182:                                              ; preds = %171, %161
  %183 = phi %"class.sh::TIntermNode"** [ undef, %161 ], [ %175, %171 ]
  %184 = phi %"class.sh::TIntermNode"** [ %162, %161 ], [ %175, %171 ]
  %185 = phi %"class.sh::TIntermNode"** [ %163, %161 ], [ %176, %171 ]
  %186 = icmp ult i64 %166, 56
  br i1 %186, label %231, label %187

187:                                              ; preds = %182, %187
  %188 = phi %"class.sh::TIntermNode"** [ %225, %187 ], [ %184, %182 ]
  %189 = phi %"class.sh::TIntermNode"** [ %226, %187 ], [ %185, %182 ]
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -2
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -2
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -3
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -3
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -4
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -4
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -5
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -5
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -6
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -6
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -7
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -7
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -8
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -8
  %227 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = icmp eq %"class.sh::TIntermNode"** %226, %53
  br i1 %230, label %231, label %187, !llvm.loop !11

231:                                              ; preds = %182, %187, %159, %14
  %232 = phi %"class.sh::TIntermNode"** [ %49, %14 ], [ %82, %159 ], [ %183, %182 ], [ %225, %187 ]
  %233 = ptrtoint %"class.sh::TIntermNode"** %232 to i64
  store i64 %233, i64* %45, align 8
  store i64 %51, i64* %44, align 8
  store i64 %51, i64* %46, align 8
  %234 = ptrtoint %"class.sh::TIntermTyped"* %20 to i64
  %235 = ptrtoint i8* %50 to i64
  %236 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %237 = bitcast %"class.sh::TVector"* %7 to i64*
  %238 = sub i64 %235, %233
  %239 = ashr exact i64 %238, 3
  %240 = add nsw i64 %239, 1
  %241 = icmp ugt i64 %240, 2305843009213693951
  br i1 %241, label %242, label %244

242:                                              ; preds = %231
  %243 = bitcast %"class.sh::TVector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %243) #5
  unreachable

244:                                              ; preds = %231
  %245 = ptrtoint i8* %50 to i64
  %246 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %247 = sub i64 %245, %233
  %248 = ashr exact i64 %247, 3
  %249 = icmp ult i64 %248, 1152921504606846975
  br i1 %249, label %250, label %255

250:                                              ; preds = %244
  %251 = ashr exact i64 %247, 2
  %252 = icmp ult i64 %251, %240
  %253 = select i1 %252, i64 %240, i64 %251
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %261, label %255

255:                                              ; preds = %250, %244
  %256 = phi i64 [ %253, %250 ], [ 2305843009213693951, %244 ]
  %257 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %258 = shl i64 %256, 3
  %259 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %257, i64 %258) #4
  %260 = bitcast i8* %259 to %"class.sh::TIntermNode"**
  br label %261

261:                                              ; preds = %255, %250
  %262 = phi i64 [ %256, %255 ], [ 0, %250 ]
  %263 = phi %"class.sh::TIntermNode"** [ %260, %255 ], [ null, %250 ]
  %264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %239
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %262
  %266 = ptrtoint %"class.sh::TIntermNode"** %265 to i64
  %267 = bitcast %"class.sh::TIntermNode"** %264 to i64*
  store i64 %234, i64* %267, align 8
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 1
  %269 = ptrtoint %"class.sh::TIntermNode"** %268 to i64
  %270 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %271 = ptrtoint %"class.sh::TIntermNode"** %270 to i64
  %272 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %273 = icmp eq %"class.sh::TIntermNode"** %272, %270
  br i1 %273, label %443, label %274

274:                                              ; preds = %261
  %275 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %276 = ptrtoint %"class.sh::TIntermNode"** %275 to i64
  %277 = sub i64 %276, %271
  %278 = lshr i64 %277, 3
  %279 = add nuw nsw i64 %278, 1
  %280 = icmp ult i64 %279, 4
  br i1 %280, label %373, label %281

281:                                              ; preds = %274
  %282 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %283 = ptrtoint %"class.sh::TIntermNode"** %282 to i64
  %284 = sub i64 %283, %271
  %285 = lshr i64 %284, 3
  %286 = xor i64 %285, -1
  %287 = add nsw i64 %239, %286
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %287
  %289 = xor i64 %285, -1
  %290 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 %289
  %291 = icmp ult %"class.sh::TIntermNode"** %288, %272
  %292 = icmp ult %"class.sh::TIntermNode"** %290, %264
  %293 = and i1 %291, %292
  br i1 %293, label %373, label %294

294:                                              ; preds = %281
  %295 = and i64 %279, 4611686018427387900
  %296 = sub nsw i64 0, %295
  %297 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %296
  %298 = sub nsw i64 0, %295
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 %298
  %300 = add nsw i64 %295, -4
  %301 = lshr exact i64 %300, 2
  %302 = add nuw nsw i64 %301, 1
  %303 = and i64 %302, 1
  %304 = icmp eq i64 %300, 0
  br i1 %304, label %349, label %305

305:                                              ; preds = %294
  %306 = sub nuw nsw i64 %302, %303
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %308 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %309 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %310 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  br label %311

311:                                              ; preds = %311, %305
  %312 = phi i64 [ 0, %305 ], [ %346, %311 ]
  %313 = phi i64 [ %306, %305 ], [ %347, %311 ]
  %314 = sub i64 0, %312
  %315 = sub i64 0, %312
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 %314
  %317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 %315
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %317, i64 -1
  %319 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  %320 = load <2 x i64>, <2 x i64>* %319, align 8, !alias.scope !12
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %317, i64 -2
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 -1
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !12
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %316, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  store <2 x i64> %320, <2 x i64>* %326, align 8, !alias.scope !15, !noalias !12
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %316, i64 -2
  %328 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %327, i64 -1
  %329 = bitcast %"class.sh::TIntermNode"** %328 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %329, align 8, !alias.scope !15, !noalias !12
  %330 = sub nuw nsw i64 -4, %312
  %331 = sub nuw nsw i64 -4, %312
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 %330
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 %331
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %333, i64 -1
  %335 = bitcast %"class.sh::TIntermNode"** %334 to <2 x i64>*
  %336 = load <2 x i64>, <2 x i64>* %335, align 8, !alias.scope !12
  %337 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %333, i64 -2
  %338 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %339 = bitcast %"class.sh::TIntermNode"** %338 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 8, !alias.scope !12
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -1
  %342 = bitcast %"class.sh::TIntermNode"** %341 to <2 x i64>*
  store <2 x i64> %336, <2 x i64>* %342, align 8, !alias.scope !15, !noalias !12
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -2
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %343, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to <2 x i64>*
  store <2 x i64> %340, <2 x i64>* %345, align 8, !alias.scope !15, !noalias !12
  %346 = add i64 %312, 8
  %347 = add i64 %313, -2
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %311, !llvm.loop !17

349:                                              ; preds = %311, %294
  %350 = phi i64 [ 0, %294 ], [ %346, %311 ]
  %351 = icmp eq i64 %303, 0
  br i1 %351, label %371, label %352

352:                                              ; preds = %349
  %353 = sub i64 0, %350
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %355 = sub i64 0, %350
  %356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %357 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %353
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 %355
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %358, i64 -1
  %360 = bitcast %"class.sh::TIntermNode"** %359 to <2 x i64>*
  %361 = load <2 x i64>, <2 x i64>* %360, align 8, !alias.scope !12
  %362 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %358, i64 -2
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %362, i64 -1
  %364 = bitcast %"class.sh::TIntermNode"** %363 to <2 x i64>*
  %365 = load <2 x i64>, <2 x i64>* %364, align 8, !alias.scope !12
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %367 = bitcast %"class.sh::TIntermNode"** %366 to <2 x i64>*
  store <2 x i64> %361, <2 x i64>* %367, align 8, !alias.scope !15, !noalias !12
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %370 = bitcast %"class.sh::TIntermNode"** %369 to <2 x i64>*
  store <2 x i64> %365, <2 x i64>* %370, align 8, !alias.scope !15, !noalias !12
  br label %371

371:                                              ; preds = %349, %352
  %372 = icmp eq i64 %279, %295
  br i1 %372, label %443, label %373

373:                                              ; preds = %371, %281, %274
  %374 = phi %"class.sh::TIntermNode"** [ %264, %281 ], [ %264, %274 ], [ %297, %371 ]
  %375 = phi %"class.sh::TIntermNode"** [ %272, %281 ], [ %272, %274 ], [ %299, %371 ]
  %376 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -1
  %377 = ptrtoint %"class.sh::TIntermNode"** %376 to i64
  %378 = sub i64 %377, %271
  %379 = lshr i64 %378, 3
  %380 = add nuw nsw i64 %379, 1
  %381 = and i64 %380, 7
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %394, label %383

383:                                              ; preds = %373, %383
  %384 = phi %"class.sh::TIntermNode"** [ %387, %383 ], [ %374, %373 ]
  %385 = phi %"class.sh::TIntermNode"** [ %388, %383 ], [ %375, %373 ]
  %386 = phi i64 [ %392, %383 ], [ %381, %373 ]
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %385, i64 -1
  %389 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = bitcast %"class.sh::TIntermNode"** %387 to i64*
  store i64 %390, i64* %391, align 8
  %392 = add i64 %386, -1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %383, !llvm.loop !18

394:                                              ; preds = %383, %373
  %395 = phi %"class.sh::TIntermNode"** [ undef, %373 ], [ %387, %383 ]
  %396 = phi %"class.sh::TIntermNode"** [ %374, %373 ], [ %387, %383 ]
  %397 = phi %"class.sh::TIntermNode"** [ %375, %373 ], [ %388, %383 ]
  %398 = icmp ult i64 %378, 56
  br i1 %398, label %443, label %399

399:                                              ; preds = %394, %399
  %400 = phi %"class.sh::TIntermNode"** [ %437, %399 ], [ %396, %394 ]
  %401 = phi %"class.sh::TIntermNode"** [ %438, %399 ], [ %397, %394 ]
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %404 = bitcast %"class.sh::TIntermNode"** %403 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = bitcast %"class.sh::TIntermNode"** %402 to i64*
  store i64 %405, i64* %406, align 8
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -2
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -2
  %409 = bitcast %"class.sh::TIntermNode"** %408 to i64*
  %410 = load i64, i64* %409, align 8
  %411 = bitcast %"class.sh::TIntermNode"** %407 to i64*
  store i64 %410, i64* %411, align 8
  %412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -3
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -3
  %414 = bitcast %"class.sh::TIntermNode"** %413 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = bitcast %"class.sh::TIntermNode"** %412 to i64*
  store i64 %415, i64* %416, align 8
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -4
  %418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -4
  %419 = bitcast %"class.sh::TIntermNode"** %418 to i64*
  %420 = load i64, i64* %419, align 8
  %421 = bitcast %"class.sh::TIntermNode"** %417 to i64*
  store i64 %420, i64* %421, align 8
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -5
  %423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -5
  %424 = bitcast %"class.sh::TIntermNode"** %423 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = bitcast %"class.sh::TIntermNode"** %422 to i64*
  store i64 %425, i64* %426, align 8
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -6
  %428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -6
  %429 = bitcast %"class.sh::TIntermNode"** %428 to i64*
  %430 = load i64, i64* %429, align 8
  %431 = bitcast %"class.sh::TIntermNode"** %427 to i64*
  store i64 %430, i64* %431, align 8
  %432 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -7
  %433 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -7
  %434 = bitcast %"class.sh::TIntermNode"** %433 to i64*
  %435 = load i64, i64* %434, align 8
  %436 = bitcast %"class.sh::TIntermNode"** %432 to i64*
  store i64 %435, i64* %436, align 8
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -8
  %438 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -8
  %439 = bitcast %"class.sh::TIntermNode"** %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = bitcast %"class.sh::TIntermNode"** %437 to i64*
  store i64 %440, i64* %441, align 8
  %442 = icmp eq %"class.sh::TIntermNode"** %438, %270
  br i1 %442, label %443, label %399, !llvm.loop !19

443:                                              ; preds = %394, %399, %371, %261
  %444 = phi %"class.sh::TIntermNode"** [ %264, %261 ], [ %297, %371 ], [ %395, %394 ], [ %437, %399 ]
  %445 = ptrtoint %"class.sh::TIntermNode"** %444 to i64
  store i64 %445, i64* %237, align 8
  store i64 %269, i64* %236, align 8
  store i64 %266, i64* %246, align 8
  %446 = ptrtoint i8* %28 to i64
  %447 = icmp ult %"class.sh::TIntermNode"** %268, %265
  br i1 %447, label %448, label %453

448:                                              ; preds = %443
  %449 = bitcast %"class.sh::TIntermNode"** %268 to i64*
  store i64 %446, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 1
  %451 = ptrtoint %"class.sh::TIntermNode"** %450 to i64
  %452 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %451, i64* %452, align 8
  br label %665

453:                                              ; preds = %443
  %454 = ptrtoint %"class.sh::TIntermNode"** %268 to i64
  %455 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %456 = bitcast %"class.sh::TVector"* %7 to i64*
  %457 = load i64, i64* %456, align 8
  %458 = sub i64 %454, %457
  %459 = ashr exact i64 %458, 3
  %460 = add nsw i64 %459, 1
  %461 = icmp ugt i64 %460, 2305843009213693951
  br i1 %461, label %462, label %464

462:                                              ; preds = %453
  %463 = bitcast %"class.sh::TVector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %463) #5
  unreachable

464:                                              ; preds = %453
  %465 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %466 = sub i64 %266, %457
  %467 = ashr exact i64 %466, 3
  %468 = icmp ult i64 %467, 1152921504606846975
  br i1 %468, label %469, label %474

469:                                              ; preds = %464
  %470 = ashr exact i64 %466, 2
  %471 = icmp ult i64 %470, %460
  %472 = select i1 %471, i64 %460, i64 %470
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %480, label %474

474:                                              ; preds = %469, %464
  %475 = phi i64 [ %472, %469 ], [ 2305843009213693951, %464 ]
  %476 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %477 = shl i64 %475, 3
  %478 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %476, i64 %477) #4
  %479 = bitcast i8* %478 to %"class.sh::TIntermNode"**
  br label %480

480:                                              ; preds = %474, %469
  %481 = phi i64 [ %475, %474 ], [ 0, %469 ]
  %482 = phi %"class.sh::TIntermNode"** [ %479, %474 ], [ null, %469 ]
  %483 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 %459
  %484 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 %481
  %485 = ptrtoint %"class.sh::TIntermNode"** %484 to i64
  %486 = bitcast %"class.sh::TIntermNode"** %483 to i64*
  store i64 %446, i64* %486, align 8
  %487 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 1
  %488 = ptrtoint %"class.sh::TIntermNode"** %487 to i64
  %489 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %490 = ptrtoint %"class.sh::TIntermNode"** %489 to i64
  %491 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %492 = icmp eq %"class.sh::TIntermNode"** %491, %489
  br i1 %492, label %662, label %493

493:                                              ; preds = %480
  %494 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  %495 = ptrtoint %"class.sh::TIntermNode"** %494 to i64
  %496 = sub i64 %495, %490
  %497 = lshr i64 %496, 3
  %498 = add nuw nsw i64 %497, 1
  %499 = icmp ult i64 %498, 4
  br i1 %499, label %592, label %500

500:                                              ; preds = %493
  %501 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  %502 = ptrtoint %"class.sh::TIntermNode"** %501 to i64
  %503 = sub i64 %502, %490
  %504 = lshr i64 %503, 3
  %505 = xor i64 %504, -1
  %506 = add nsw i64 %459, %505
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 %506
  %508 = xor i64 %504, -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 %508
  %510 = icmp ult %"class.sh::TIntermNode"** %507, %491
  %511 = icmp ult %"class.sh::TIntermNode"** %509, %483
  %512 = and i1 %510, %511
  br i1 %512, label %592, label %513

513:                                              ; preds = %500
  %514 = and i64 %498, 4611686018427387900
  %515 = sub nsw i64 0, %514
  %516 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 %515
  %517 = sub nsw i64 0, %514
  %518 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 %517
  %519 = add nsw i64 %514, -4
  %520 = lshr exact i64 %519, 2
  %521 = add nuw nsw i64 %520, 1
  %522 = and i64 %521, 1
  %523 = icmp eq i64 %519, 0
  br i1 %523, label %570, label %524

524:                                              ; preds = %513
  %525 = sub nuw nsw i64 %521, %522
  %526 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -1
  %527 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  %528 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -1
  %529 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  br label %530

530:                                              ; preds = %530, %524
  %531 = phi i64 [ 0, %524 ], [ %565, %530 ]
  %532 = phi i64 [ %525, %524 ], [ %566, %530 ]
  %533 = sub i64 0, %531
  %534 = sub i64 0, %531
  %535 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 %533
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %527, i64 %534
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !20
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -2
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 -1
  %542 = bitcast %"class.sh::TIntermNode"** %541 to <2 x i64>*
  %543 = load <2 x i64>, <2 x i64>* %542, align 8, !alias.scope !20
  %544 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %535, i64 -1
  %545 = bitcast %"class.sh::TIntermNode"** %544 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %545, align 8, !alias.scope !23, !noalias !20
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %535, i64 -2
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -1
  %548 = bitcast %"class.sh::TIntermNode"** %547 to <2 x i64>*
  store <2 x i64> %543, <2 x i64>* %548, align 8, !alias.scope !23, !noalias !20
  %549 = sub nuw nsw i64 -4, %531
  %550 = sub nuw nsw i64 -4, %531
  %551 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %528, i64 %549
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %529, i64 %550
  %553 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %552, i64 -1
  %554 = bitcast %"class.sh::TIntermNode"** %553 to <2 x i64>*
  %555 = load <2 x i64>, <2 x i64>* %554, align 8, !alias.scope !20
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %552, i64 -2
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %558 = bitcast %"class.sh::TIntermNode"** %557 to <2 x i64>*
  %559 = load <2 x i64>, <2 x i64>* %558, align 8, !alias.scope !20
  %560 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %551, i64 -1
  %561 = bitcast %"class.sh::TIntermNode"** %560 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %561, align 8, !alias.scope !23, !noalias !20
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %551, i64 -2
  %563 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %562, i64 -1
  %564 = bitcast %"class.sh::TIntermNode"** %563 to <2 x i64>*
  store <2 x i64> %559, <2 x i64>* %564, align 8, !alias.scope !23, !noalias !20
  %565 = add i64 %531, 8
  %566 = add i64 %532, -2
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %568, label %530, !llvm.loop !25

568:                                              ; preds = %530
  %569 = sub nuw nsw i64 -8, %531
  br label %570

570:                                              ; preds = %568, %513
  %571 = phi i64 [ 0, %513 ], [ %569, %568 ]
  %572 = icmp eq i64 %522, 0
  br i1 %572, label %590, label %573

573:                                              ; preds = %570
  %574 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -1
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 -1
  %576 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 %571
  %577 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %575, i64 %571
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -1
  %579 = bitcast %"class.sh::TIntermNode"** %578 to <2 x i64>*
  %580 = load <2 x i64>, <2 x i64>* %579, align 8, !alias.scope !20
  %581 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -2
  %582 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %581, i64 -1
  %583 = bitcast %"class.sh::TIntermNode"** %582 to <2 x i64>*
  %584 = load <2 x i64>, <2 x i64>* %583, align 8, !alias.scope !20
  %585 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 -1
  %586 = bitcast %"class.sh::TIntermNode"** %585 to <2 x i64>*
  store <2 x i64> %580, <2 x i64>* %586, align 8, !alias.scope !23, !noalias !20
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 -2
  %588 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %587, i64 -1
  %589 = bitcast %"class.sh::TIntermNode"** %588 to <2 x i64>*
  store <2 x i64> %584, <2 x i64>* %589, align 8, !alias.scope !23, !noalias !20
  br label %590

590:                                              ; preds = %570, %573
  %591 = icmp eq i64 %498, %514
  br i1 %591, label %662, label %592

592:                                              ; preds = %590, %500, %493
  %593 = phi %"class.sh::TIntermNode"** [ %483, %500 ], [ %483, %493 ], [ %516, %590 ]
  %594 = phi %"class.sh::TIntermNode"** [ %491, %500 ], [ %491, %493 ], [ %518, %590 ]
  %595 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %594, i64 -1
  %596 = ptrtoint %"class.sh::TIntermNode"** %595 to i64
  %597 = sub i64 %596, %490
  %598 = lshr i64 %597, 3
  %599 = add nuw nsw i64 %598, 1
  %600 = and i64 %599, 7
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %613, label %602

602:                                              ; preds = %592, %602
  %603 = phi %"class.sh::TIntermNode"** [ %606, %602 ], [ %593, %592 ]
  %604 = phi %"class.sh::TIntermNode"** [ %607, %602 ], [ %594, %592 ]
  %605 = phi i64 [ %611, %602 ], [ %600, %592 ]
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %603, i64 -1
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %604, i64 -1
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = add i64 %605, -1
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %602, !llvm.loop !26

613:                                              ; preds = %602, %592
  %614 = phi %"class.sh::TIntermNode"** [ undef, %592 ], [ %606, %602 ]
  %615 = phi %"class.sh::TIntermNode"** [ %593, %592 ], [ %606, %602 ]
  %616 = phi %"class.sh::TIntermNode"** [ %594, %592 ], [ %607, %602 ]
  %617 = icmp ult i64 %597, 56
  br i1 %617, label %662, label %618

618:                                              ; preds = %613, %618
  %619 = phi %"class.sh::TIntermNode"** [ %656, %618 ], [ %615, %613 ]
  %620 = phi %"class.sh::TIntermNode"** [ %657, %618 ], [ %616, %613 ]
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -1
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -1
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -2
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -2
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -3
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -3
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -4
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -4
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -5
  %642 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -5
  %643 = bitcast %"class.sh::TIntermNode"** %642 to i64*
  %644 = load i64, i64* %643, align 8
  %645 = bitcast %"class.sh::TIntermNode"** %641 to i64*
  store i64 %644, i64* %645, align 8
  %646 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -6
  %647 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -6
  %648 = bitcast %"class.sh::TIntermNode"** %647 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = bitcast %"class.sh::TIntermNode"** %646 to i64*
  store i64 %649, i64* %650, align 8
  %651 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -7
  %652 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -7
  %653 = bitcast %"class.sh::TIntermNode"** %652 to i64*
  %654 = load i64, i64* %653, align 8
  %655 = bitcast %"class.sh::TIntermNode"** %651 to i64*
  store i64 %654, i64* %655, align 8
  %656 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -8
  %657 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 -8
  %658 = bitcast %"class.sh::TIntermNode"** %657 to i64*
  %659 = load i64, i64* %658, align 8
  %660 = bitcast %"class.sh::TIntermNode"** %656 to i64*
  store i64 %659, i64* %660, align 8
  %661 = icmp eq %"class.sh::TIntermNode"** %657, %489
  br i1 %661, label %662, label %618, !llvm.loop !27

662:                                              ; preds = %613, %618, %590, %480
  %663 = phi %"class.sh::TIntermNode"** [ %483, %480 ], [ %516, %590 ], [ %614, %613 ], [ %656, %618 ]
  %664 = ptrtoint %"class.sh::TIntermNode"** %663 to i64
  store i64 %664, i64* %456, align 8
  store i64 %488, i64* %455, align 8
  store i64 %485, i64* %465, align 8
  br label %665

665:                                              ; preds = %448, %662
  %666 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), %"class.sh::TVector"* nonnull %7, %"class.sh::TSymbolTable"* dereferenceable(1720) %2, i32 100) #4
  %667 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %668 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %667, i64 240) #4
  %669 = bitcast i8* %668 to %"class.sh::TIntermBinary"*
  %670 = bitcast i8* %16 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %669, i8 zeroext -118, %"class.sh::TIntermTyped"* %670, %"class.sh::TIntermTyped"* %666) #4
  %671 = bitcast i8* %668 to %"class.sh::TIntermNode"*
  %672 = call zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermNode"* %671, %"class.sh::TSymbolTable"* %2) #4
  %673 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %674 = icmp eq %"class.sh::TIntermNode"** %673, null
  br i1 %674, label %678, label %675

675:                                              ; preds = %665
  %676 = ptrtoint %"class.sh::TIntermNode"** %673 to i64
  %677 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %676, i64* %677, align 8
  br label %678

678:                                              ; preds = %665, %675
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #4
  br label %679

679:                                              ; preds = %3, %678
  %680 = phi i1 [ %672, %678 ], [ true, %3 ]
  ret i1 %680
}

declare %"class.sh::TIntermSymbol"* @_ZN2sh14FindSymbolNodeEPNS_11TIntermNodeERKNS_15ImmutableStringE(%"class.sh::TIntermNode"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_FragDepthEv() local_unnamed_addr #1

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #1

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #1

declare void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
