; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/RewriteTexelFetchOffset.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/RewriteTexelFetchOffset.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector", %"class.std::__1::vector.1", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr.3"*, %"class.std::__1::unique_ptr.3"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr.3" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.3"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.17"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.17" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.21, i32 }
%union.anon.21 = type { i32 }
%"class.sh::(anonymous namespace)::Traverser" = type <{ %"class.sh::TIntermTraverser", %"class.sh::TSymbolTable"*, i32, i8, [3 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.22", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.37", %"class.std::__1::vector.44", %"class.sh::TVector.24", %"class.std::__1::vector.51" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.32" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.24" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.39" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.24", %"class.sh::TVector.24" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.24", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector.24" = type { %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.58", i8, [7 x i8] }>
%"class.sh::TVector.58" = type { %"class.std::__1::vector.59" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i32*, i32*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.66"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.66" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.24", i8, i8, %"class.sh::TFunction"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.69", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.71" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.24" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@_ZTVN2sh12_GLOBAL__N_19TraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*)* @_ZN2sh12_GLOBAL__N_19TraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_19Traverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str = private unnamed_addr constant [17 x i8] c"texelFetchOffset\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"texelFetch\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh23RewriteTexelFetchOffsetEPNS_9TCompilerEPNS_11TIntermNodeERKNS_12TSymbolTableEi(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::Traverser", align 8
  %6 = icmp slt i32 %3, 300
  br i1 %6, label %28, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.sh::(anonymous namespace)::Traverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 168, i1 false) #7
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %5, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %9, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %5, i64 0, i32 1
  store %"class.sh::TSymbolTable"* %2, %"class.sh::TSymbolTable"** %11, align 8
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %5, i64 0, i32 2
  store i32 %3, i32* %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %5, i64 0, i32 3
  store i8 0, i8* %13, align 4
  %14 = bitcast %"class.sh::TIntermNode"* %1 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  br label %15

15:                                               ; preds = %23, %7
  store i8 0, i8* %13, align 4
  %16 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %14, align 8
  %17 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %16, i64 2
  %18 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %17, align 8
  call void %18(%"class.sh::TIntermNode"* %1, %"class.sh::TIntermTraverser"* nonnull %9) #7
  %19 = load i8, i8* %13, align 4, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %9, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1) #7
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = load i8, i8* %13, align 4
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %15

26:                                               ; preds = %15, %21, %23
  %27 = phi i1 [ false, %21 ], [ true, %23 ], [ true, %15 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %8) #7
  br label %28

28:                                               ; preds = %4, %26
  %29 = phi i1 [ %27, %26 ], [ true, %4 ]
  ret i1 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19TraverserD0Ev(%"class.sh::(anonymous namespace)::Traverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_19Traverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector.24", align 8
  %5 = alloca %"class.sh::TVector.24", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %1254

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 1
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 3
  br i1 %13, label %14, label %1254

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 5
  %16 = bitcast %"class.sh::TFunction"** %15 to %"class.sh::TSymbol"**
  %17 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %16, align 8
  %18 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %17) #7
  %19 = extractvalue { i8*, i64 } %18, 0
  %20 = icmp eq i8* %19, null
  %21 = select i1 %20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %19
  %22 = tail call i32 @strcmp(i8* %21, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %1254

24:                                               ; preds = %14
  %25 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)***
  %26 = load %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)** %26, i64 32
  %28 = load %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.24"* (%"class.sh::TIntermAggregate"*)** %27, align 8
  %29 = tail call %"class.sh::TVector.24"* %28(%"class.sh::TIntermAggregate"* %2) #7
  %30 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %29, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast %"class.sh::TIntermNode"*** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.sh::TVector.24"* %29 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 3
  %37 = icmp ugt i64 %36, 1
  br i1 %37, label %40, label %38

38:                                               ; preds = %24
  %39 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %39) #9
  unreachable

40:                                               ; preds = %24
  %41 = inttoptr i64 %34 to %"class.sh::TIntermNode"**
  %42 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %41, i64 1
  %43 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, align 8
  %44 = bitcast %"class.sh::TIntermNode"* %43 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %45 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %44, align 8
  %46 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %45, i64 4
  %47 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %46, align 8
  %48 = tail call %"class.sh::TIntermTyped"* %47(%"class.sh::TIntermNode"* %43) #7
  %49 = bitcast %"class.sh::TIntermTyped"* %48 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %50 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %49, align 8
  %51 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %50, i64 31
  %52 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %51, align 8
  %53 = tail call dereferenceable(184) %"class.sh::TType"* %52(%"class.sh::TIntermTyped"* %48) #7
  %54 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %53, i64 0, i32 8
  %55 = load i8, i8* %54, align 8
  %56 = icmp eq i8 %55, 3
  br i1 %56, label %57, label %82

57:                                               ; preds = %40
  %58 = load i64, i64* %31, align 8
  %59 = load i64, i64* %33, align 8
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 3
  br i1 %62, label %65, label %63

63:                                               ; preds = %57
  %64 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %64) #9
  unreachable

65:                                               ; preds = %57
  %66 = inttoptr i64 %59 to %"class.sh::TIntermNode"**
  %67 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 3
  %68 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, align 8
  %69 = bitcast %"class.sh::TIntermNode"* %68 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %70 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %69, align 8
  %71 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %70, i64 4
  %72 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %71, align 8
  %73 = tail call %"class.sh::TIntermTyped"* %72(%"class.sh::TIntermNode"* %68) #7
  %74 = bitcast %"class.sh::TIntermTyped"* %73 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %75 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %75, i64 31
  %77 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %76, align 8
  %78 = tail call dereferenceable(184) %"class.sh::TType"* %77(%"class.sh::TIntermTyped"* %73) #7
  %79 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %78, i64 0, i32 8
  %80 = load i8, i8* %79, align 8
  %81 = icmp eq i8 %80, 2
  br label %82

82:                                               ; preds = %65, %40
  %83 = phi i1 [ false, %40 ], [ %81, %65 ]
  %84 = bitcast %"class.sh::TVector.24"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84) #7
  %85 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %4, i64 0, i32 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %4, i64 0, i32 0, i32 0, i32 1
  %87 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 0, i64 24, i1 false) #7
  %88 = load i64, i64* %31, align 8
  %89 = load i64, i64* %33, align 8
  %90 = icmp eq i64 %88, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %82
  %92 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %92) #9
  unreachable

93:                                               ; preds = %82
  %94 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  %95 = bitcast %"class.sh::TVector.24"* %4 to i64*
  %96 = bitcast %"class.sh::TIntermNode"*** %87 to i64*
  %97 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %98 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %97, i64 8) #7
  %99 = bitcast i8* %98 to %"class.sh::TIntermNode"**
  %100 = getelementptr inbounds i8, i8* %98, i64 8
  %101 = ptrtoint i8* %100 to i64
  %102 = inttoptr i64 %89 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i8* %98 to i64*
  store i64 %103, i64* %104, align 8
  %105 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %106 = ptrtoint %"class.sh::TIntermNode"** %105 to i64
  %107 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %86, align 8
  %108 = bitcast %"class.sh::TIntermNode"** %107 to i8*
  %109 = icmp eq %"class.sh::TIntermNode"** %107, %105
  br i1 %109, label %283, label %110

110:                                              ; preds = %93
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %112 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %113 = sub i64 %112, %106
  %114 = lshr i64 %113, 3
  %115 = add nuw nsw i64 %114, 1
  %116 = icmp ult i64 %115, 4
  br i1 %116, label %213, label %117

117:                                              ; preds = %110
  %118 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %119 = ptrtoint %"class.sh::TIntermNode"** %118 to i64
  %120 = sub i64 %119, %106
  %121 = lshr i64 %120, 3
  %122 = and i64 %120, -8
  %123 = xor i64 %122, -8
  %124 = getelementptr i8, i8* %98, i64 %123
  %125 = xor i64 %121, -1
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 %125
  %127 = bitcast %"class.sh::TIntermNode"** %126 to i8*
  %128 = icmp ult i8* %124, %108
  %129 = icmp ugt i8* %98, %127
  %130 = and i1 %128, %129
  br i1 %130, label %213, label %131

131:                                              ; preds = %117
  %132 = and i64 %115, 4611686018427387900
  %133 = sub nsw i64 0, %132
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 %133
  %135 = sub nsw i64 0, %132
  %136 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 %135
  %137 = add nsw i64 %132, -4
  %138 = lshr exact i64 %137, 2
  %139 = add nuw nsw i64 %138, 1
  %140 = and i64 %139, 1
  %141 = icmp eq i64 %137, 0
  br i1 %141, label %188, label %142

142:                                              ; preds = %131
  %143 = sub nuw nsw i64 %139, %140
  %144 = getelementptr i8, i8* %98, i64 -8
  %145 = bitcast i8* %144 to %"class.sh::TIntermNode"**
  %146 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %147 = getelementptr i8, i8* %98, i64 -8
  %148 = bitcast i8* %147 to %"class.sh::TIntermNode"**
  %149 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  br label %150

150:                                              ; preds = %150, %142
  %151 = phi i64 [ 0, %142 ], [ %185, %150 ]
  %152 = phi i64 [ %143, %142 ], [ %186, %150 ]
  %153 = sub i64 0, %151
  %154 = sub i64 0, %151
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 %153
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 %154
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -1
  %158 = bitcast %"class.sh::TIntermNode"** %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !3
  %160 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -2
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %162 = bitcast %"class.sh::TIntermNode"** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !3
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -1
  %165 = bitcast %"class.sh::TIntermNode"** %164 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %165, align 8, !alias.scope !6, !noalias !3
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -2
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 -1
  %168 = bitcast %"class.sh::TIntermNode"** %167 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %168, align 8, !alias.scope !6, !noalias !3
  %169 = sub nuw nsw i64 -4, %151
  %170 = sub nuw nsw i64 -4, %151
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %169
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 %170
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !3
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -2
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !3
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %181 = bitcast %"class.sh::TIntermNode"** %180 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %181, align 8, !alias.scope !6, !noalias !3
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -2
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = bitcast %"class.sh::TIntermNode"** %183 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %184, align 8, !alias.scope !6, !noalias !3
  %185 = add i64 %151, 8
  %186 = add i64 %152, -2
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %150, !llvm.loop !8

188:                                              ; preds = %150, %131
  %189 = phi i64 [ 0, %131 ], [ %185, %150 ]
  %190 = icmp eq i64 %140, 0
  br i1 %190, label %211, label %191

191:                                              ; preds = %188
  %192 = sub i64 0, %189
  %193 = getelementptr i8, i8* %98, i64 -8
  %194 = bitcast i8* %193 to %"class.sh::TIntermNode"**
  %195 = sub i64 0, %189
  %196 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 %192
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %196, i64 %195
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %198, i64 -1
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8, !alias.scope !3
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %198, i64 -2
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %202, i64 -1
  %204 = bitcast %"class.sh::TIntermNode"** %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 8, !alias.scope !3
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %197, i64 -1
  %207 = bitcast %"class.sh::TIntermNode"** %206 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %207, align 8, !alias.scope !6, !noalias !3
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %197, i64 -2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -1
  %210 = bitcast %"class.sh::TIntermNode"** %209 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %210, align 8, !alias.scope !6, !noalias !3
  br label %211

211:                                              ; preds = %188, %191
  %212 = icmp eq i64 %115, %132
  br i1 %212, label %283, label %213

213:                                              ; preds = %211, %117, %110
  %214 = phi %"class.sh::TIntermNode"** [ %99, %117 ], [ %99, %110 ], [ %134, %211 ]
  %215 = phi %"class.sh::TIntermNode"** [ %107, %117 ], [ %107, %110 ], [ %136, %211 ]
  %216 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -1
  %217 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %218 = sub i64 %217, %106
  %219 = lshr i64 %218, 3
  %220 = add nuw nsw i64 %219, 1
  %221 = and i64 %220, 7
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %234, label %223

223:                                              ; preds = %213, %223
  %224 = phi %"class.sh::TIntermNode"** [ %227, %223 ], [ %214, %213 ]
  %225 = phi %"class.sh::TIntermNode"** [ %228, %223 ], [ %215, %213 ]
  %226 = phi i64 [ %232, %223 ], [ %221, %213 ]
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %224, i64 -1
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -1
  %229 = bitcast %"class.sh::TIntermNode"** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = add i64 %226, -1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %223, !llvm.loop !10

234:                                              ; preds = %223, %213
  %235 = phi %"class.sh::TIntermNode"** [ undef, %213 ], [ %227, %223 ]
  %236 = phi %"class.sh::TIntermNode"** [ %214, %213 ], [ %227, %223 ]
  %237 = phi %"class.sh::TIntermNode"** [ %215, %213 ], [ %228, %223 ]
  %238 = icmp ult i64 %218, 56
  br i1 %238, label %283, label %239

239:                                              ; preds = %234, %239
  %240 = phi %"class.sh::TIntermNode"** [ %277, %239 ], [ %236, %234 ]
  %241 = phi %"class.sh::TIntermNode"** [ %278, %239 ], [ %237, %234 ]
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -1
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -1
  %244 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -2
  %248 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -2
  %249 = bitcast %"class.sh::TIntermNode"** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.sh::TIntermNode"** %247 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -3
  %253 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -3
  %254 = bitcast %"class.sh::TIntermNode"** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -4
  %258 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -4
  %259 = bitcast %"class.sh::TIntermNode"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -5
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -5
  %264 = bitcast %"class.sh::TIntermNode"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -6
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -6
  %269 = bitcast %"class.sh::TIntermNode"** %268 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -7
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -7
  %274 = bitcast %"class.sh::TIntermNode"** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  store i64 %275, i64* %276, align 8
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -8
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -8
  %279 = bitcast %"class.sh::TIntermNode"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = icmp eq %"class.sh::TIntermNode"** %278, %105
  br i1 %282, label %283, label %239, !llvm.loop !12

283:                                              ; preds = %234, %239, %211, %93
  %284 = phi %"class.sh::TIntermNode"** [ %99, %93 ], [ %134, %211 ], [ %235, %234 ], [ %277, %239 ]
  %285 = ptrtoint %"class.sh::TIntermNode"** %284 to i64
  store i64 %285, i64* %95, align 8
  store i64 %101, i64* %94, align 8
  store i64 %101, i64* %96, align 8
  %286 = load i64, i64* %31, align 8
  %287 = load i64, i64* %33, align 8
  %288 = sub i64 %286, %287
  %289 = ashr exact i64 %288, 3
  %290 = icmp ugt i64 %289, 1
  br i1 %290, label %293, label %291

291:                                              ; preds = %283
  %292 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %292) #9
  unreachable

293:                                              ; preds = %283
  %294 = inttoptr i64 %287 to %"class.sh::TIntermNode"**
  %295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 1
  %296 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, align 8
  %297 = bitcast %"class.sh::TIntermNode"* %296 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %298 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %297, align 8
  %299 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %298, i64 4
  %300 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %299, align 8
  %301 = tail call %"class.sh::TIntermTyped"* %300(%"class.sh::TIntermNode"* %296) #7
  br i1 %83, label %302, label %756

302:                                              ; preds = %293
  %303 = bitcast %"class.sh::TVector.24"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %303) #7
  %304 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %5, i64 0, i32 0, i32 0, i32 0
  %305 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %5, i64 0, i32 0, i32 0, i32 1
  %306 = getelementptr inbounds %"class.sh::TVector.24", %"class.sh::TVector.24"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %303, i8 0, i64 24, i1 false) #7
  %307 = load i64, i64* %31, align 8
  %308 = load i64, i64* %33, align 8
  %309 = sub i64 %307, %308
  %310 = ashr exact i64 %309, 3
  %311 = icmp ugt i64 %310, 3
  br i1 %311, label %314, label %312

312:                                              ; preds = %302
  %313 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %313) #9
  unreachable

314:                                              ; preds = %302
  %315 = inttoptr i64 %308 to %"class.sh::TIntermNode"**
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 3
  %317 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %316, align 8
  %318 = bitcast %"class.sh::TIntermNode"* %317 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %319 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %318, align 8
  %320 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %319, i64 4
  %321 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %320, align 8
  %322 = tail call %"class.sh::TIntermTyped"* %321(%"class.sh::TIntermNode"* %317) #7
  %323 = ptrtoint %"class.sh::TIntermTyped"* %322 to i64
  %324 = bitcast %"class.sh::TIntermNode"*** %305 to i64*
  %325 = bitcast %"class.sh::TVector.24"* %5 to i64*
  %326 = bitcast %"class.sh::TIntermNode"*** %306 to i64*
  %327 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %328 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %327, i64 8) #7
  %329 = bitcast i8* %328 to %"class.sh::TIntermNode"**
  %330 = getelementptr inbounds i8, i8* %328, i64 8
  %331 = ptrtoint i8* %330 to i64
  %332 = bitcast i8* %328 to i64*
  store i64 %323, i64* %332, align 8
  %333 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %304, align 8
  %334 = ptrtoint %"class.sh::TIntermNode"** %333 to i64
  %335 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %305, align 8
  %336 = bitcast %"class.sh::TIntermNode"** %335 to i8*
  %337 = icmp eq %"class.sh::TIntermNode"** %335, %333
  br i1 %337, label %511, label %338

338:                                              ; preds = %314
  %339 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %340 = ptrtoint %"class.sh::TIntermNode"** %339 to i64
  %341 = sub i64 %340, %334
  %342 = lshr i64 %341, 3
  %343 = add nuw nsw i64 %342, 1
  %344 = icmp ult i64 %343, 4
  br i1 %344, label %441, label %345

345:                                              ; preds = %338
  %346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %347 = ptrtoint %"class.sh::TIntermNode"** %346 to i64
  %348 = sub i64 %347, %334
  %349 = lshr i64 %348, 3
  %350 = and i64 %348, -8
  %351 = xor i64 %350, -8
  %352 = getelementptr i8, i8* %328, i64 %351
  %353 = xor i64 %349, -1
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 %353
  %355 = bitcast %"class.sh::TIntermNode"** %354 to i8*
  %356 = icmp ult i8* %352, %336
  %357 = icmp ugt i8* %328, %355
  %358 = and i1 %356, %357
  br i1 %358, label %441, label %359

359:                                              ; preds = %345
  %360 = and i64 %343, 4611686018427387900
  %361 = sub nsw i64 0, %360
  %362 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 %361
  %363 = sub nsw i64 0, %360
  %364 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 %363
  %365 = add nsw i64 %360, -4
  %366 = lshr exact i64 %365, 2
  %367 = add nuw nsw i64 %366, 1
  %368 = and i64 %367, 1
  %369 = icmp eq i64 %365, 0
  br i1 %369, label %416, label %370

370:                                              ; preds = %359
  %371 = sub nuw nsw i64 %367, %368
  %372 = getelementptr i8, i8* %328, i64 -8
  %373 = bitcast i8* %372 to %"class.sh::TIntermNode"**
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %375 = getelementptr i8, i8* %328, i64 -8
  %376 = bitcast i8* %375 to %"class.sh::TIntermNode"**
  %377 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  br label %378

378:                                              ; preds = %378, %370
  %379 = phi i64 [ 0, %370 ], [ %413, %378 ]
  %380 = phi i64 [ %371, %370 ], [ %414, %378 ]
  %381 = sub i64 0, %379
  %382 = sub i64 0, %379
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %373, i64 %381
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 %382
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %386 = bitcast %"class.sh::TIntermNode"** %385 to <2 x i64>*
  %387 = load <2 x i64>, <2 x i64>* %386, align 8, !alias.scope !13
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -2
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -1
  %390 = bitcast %"class.sh::TIntermNode"** %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 8, !alias.scope !13
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -1
  %393 = bitcast %"class.sh::TIntermNode"** %392 to <2 x i64>*
  store <2 x i64> %387, <2 x i64>* %393, align 8, !alias.scope !16, !noalias !13
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -2
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 -1
  %396 = bitcast %"class.sh::TIntermNode"** %395 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %396, align 8, !alias.scope !16, !noalias !13
  %397 = sub nuw nsw i64 -4, %379
  %398 = sub nuw nsw i64 -4, %379
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 %397
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 %398
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %402 = bitcast %"class.sh::TIntermNode"** %401 to <2 x i64>*
  %403 = load <2 x i64>, <2 x i64>* %402, align 8, !alias.scope !13
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -2
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 -1
  %406 = bitcast %"class.sh::TIntermNode"** %405 to <2 x i64>*
  %407 = load <2 x i64>, <2 x i64>* %406, align 8, !alias.scope !13
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %409 = bitcast %"class.sh::TIntermNode"** %408 to <2 x i64>*
  store <2 x i64> %403, <2 x i64>* %409, align 8, !alias.scope !16, !noalias !13
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -1
  %412 = bitcast %"class.sh::TIntermNode"** %411 to <2 x i64>*
  store <2 x i64> %407, <2 x i64>* %412, align 8, !alias.scope !16, !noalias !13
  %413 = add i64 %379, 8
  %414 = add i64 %380, -2
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %378, !llvm.loop !18

416:                                              ; preds = %378, %359
  %417 = phi i64 [ 0, %359 ], [ %413, %378 ]
  %418 = icmp eq i64 %368, 0
  br i1 %418, label %439, label %419

419:                                              ; preds = %416
  %420 = sub i64 0, %417
  %421 = getelementptr i8, i8* %328, i64 -8
  %422 = bitcast i8* %421 to %"class.sh::TIntermNode"**
  %423 = sub i64 0, %417
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 %420
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 %423
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -1
  %428 = bitcast %"class.sh::TIntermNode"** %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !13
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -2
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !13
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %435 = bitcast %"class.sh::TIntermNode"** %434 to <2 x i64>*
  store <2 x i64> %429, <2 x i64>* %435, align 8, !alias.scope !16, !noalias !13
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -2
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 -1
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %438, align 8, !alias.scope !16, !noalias !13
  br label %439

439:                                              ; preds = %416, %419
  %440 = icmp eq i64 %343, %360
  br i1 %440, label %511, label %441

441:                                              ; preds = %439, %345, %338
  %442 = phi %"class.sh::TIntermNode"** [ %329, %345 ], [ %329, %338 ], [ %362, %439 ]
  %443 = phi %"class.sh::TIntermNode"** [ %335, %345 ], [ %335, %338 ], [ %364, %439 ]
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %445 = ptrtoint %"class.sh::TIntermNode"** %444 to i64
  %446 = sub i64 %445, %334
  %447 = lshr i64 %446, 3
  %448 = add nuw nsw i64 %447, 1
  %449 = and i64 %448, 7
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %462, label %451

451:                                              ; preds = %441, %451
  %452 = phi %"class.sh::TIntermNode"** [ %455, %451 ], [ %442, %441 ]
  %453 = phi %"class.sh::TIntermNode"** [ %456, %451 ], [ %443, %441 ]
  %454 = phi i64 [ %460, %451 ], [ %449, %441 ]
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %452, i64 -1
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %453, i64 -1
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = add i64 %454, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %451, !llvm.loop !19

462:                                              ; preds = %451, %441
  %463 = phi %"class.sh::TIntermNode"** [ undef, %441 ], [ %455, %451 ]
  %464 = phi %"class.sh::TIntermNode"** [ %442, %441 ], [ %455, %451 ]
  %465 = phi %"class.sh::TIntermNode"** [ %443, %441 ], [ %456, %451 ]
  %466 = icmp ult i64 %446, 56
  br i1 %466, label %511, label %467

467:                                              ; preds = %462, %467
  %468 = phi %"class.sh::TIntermNode"** [ %505, %467 ], [ %464, %462 ]
  %469 = phi %"class.sh::TIntermNode"** [ %506, %467 ], [ %465, %462 ]
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -1
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -1
  %472 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  store i64 %473, i64* %474, align 8
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -2
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -2
  %477 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  store i64 %478, i64* %479, align 8
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -3
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -3
  %482 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -4
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -4
  %487 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  store i64 %488, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -5
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -5
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  store i64 %493, i64* %494, align 8
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -6
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -6
  %497 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -7
  %501 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -7
  %502 = bitcast %"class.sh::TIntermNode"** %501 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  store i64 %503, i64* %504, align 8
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -8
  %506 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -8
  %507 = bitcast %"class.sh::TIntermNode"** %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  store i64 %508, i64* %509, align 8
  %510 = icmp eq %"class.sh::TIntermNode"** %506, %333
  br i1 %510, label %511, label %467, !llvm.loop !20

511:                                              ; preds = %462, %467, %439, %314
  %512 = phi %"class.sh::TIntermNode"** [ %329, %314 ], [ %362, %439 ], [ %463, %462 ], [ %505, %467 ]
  %513 = ptrtoint %"class.sh::TIntermNode"** %512 to i64
  store i64 %513, i64* %325, align 8
  store i64 %331, i64* %324, align 8
  store i64 %331, i64* %326, align 8
  %514 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %514) #7
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* nonnull %6, i32 3, i8 zeroext 1, i8 zeroext 1) #7
  %515 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* nonnull dereferenceable(184) %6) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %514) #7
  %516 = ptrtoint %"class.sh::TIntermTyped"* %515 to i64
  %517 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %305, align 8
  %518 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %306, align 8
  %519 = icmp ult %"class.sh::TIntermNode"** %517, %518
  %520 = ptrtoint %"class.sh::TIntermNode"** %518 to i64
  br i1 %519, label %521, label %526

521:                                              ; preds = %511
  %522 = bitcast %"class.sh::TIntermNode"** %517 to i64*
  store i64 %516, i64* %522, align 8
  %523 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %517, i64 1
  %524 = ptrtoint %"class.sh::TIntermNode"** %523 to i64
  %525 = bitcast %"class.sh::TIntermNode"*** %305 to i64*
  store i64 %524, i64* %525, align 8
  br label %738

526:                                              ; preds = %511
  %527 = ptrtoint %"class.sh::TIntermNode"** %517 to i64
  %528 = bitcast %"class.sh::TIntermNode"*** %305 to i64*
  %529 = bitcast %"class.sh::TVector.24"* %5 to i64*
  %530 = load i64, i64* %529, align 8
  %531 = sub i64 %527, %530
  %532 = ashr exact i64 %531, 3
  %533 = add nsw i64 %532, 1
  %534 = icmp ugt i64 %533, 2305843009213693951
  br i1 %534, label %535, label %537

535:                                              ; preds = %526
  %536 = bitcast %"class.sh::TVector.24"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %536) #9
  unreachable

537:                                              ; preds = %526
  %538 = bitcast %"class.sh::TIntermNode"*** %306 to i64*
  %539 = sub i64 %520, %530
  %540 = ashr exact i64 %539, 3
  %541 = icmp ult i64 %540, 1152921504606846975
  br i1 %541, label %542, label %547

542:                                              ; preds = %537
  %543 = ashr exact i64 %539, 2
  %544 = icmp ult i64 %543, %533
  %545 = select i1 %544, i64 %533, i64 %543
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %553, label %547

547:                                              ; preds = %542, %537
  %548 = phi i64 [ %545, %542 ], [ 2305843009213693951, %537 ]
  %549 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %550 = shl i64 %548, 3
  %551 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %549, i64 %550) #7
  %552 = bitcast i8* %551 to %"class.sh::TIntermNode"**
  br label %553

553:                                              ; preds = %547, %542
  %554 = phi i64 [ %548, %547 ], [ 0, %542 ]
  %555 = phi %"class.sh::TIntermNode"** [ %552, %547 ], [ null, %542 ]
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %532
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = ptrtoint %"class.sh::TIntermNode"** %557 to i64
  %559 = bitcast %"class.sh::TIntermNode"** %556 to i64*
  store i64 %516, i64* %559, align 8
  %560 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 1
  %561 = ptrtoint %"class.sh::TIntermNode"** %560 to i64
  %562 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %304, align 8
  %563 = ptrtoint %"class.sh::TIntermNode"** %562 to i64
  %564 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %305, align 8
  %565 = icmp eq %"class.sh::TIntermNode"** %564, %562
  br i1 %565, label %735, label %566

566:                                              ; preds = %553
  %567 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 -1
  %568 = ptrtoint %"class.sh::TIntermNode"** %567 to i64
  %569 = sub i64 %568, %563
  %570 = lshr i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = icmp ult i64 %571, 4
  br i1 %572, label %665, label %573

573:                                              ; preds = %566
  %574 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 -1
  %575 = ptrtoint %"class.sh::TIntermNode"** %574 to i64
  %576 = sub i64 %575, %563
  %577 = lshr i64 %576, 3
  %578 = xor i64 %577, -1
  %579 = add nsw i64 %532, %578
  %580 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %579
  %581 = xor i64 %577, -1
  %582 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 %581
  %583 = icmp ult %"class.sh::TIntermNode"** %580, %564
  %584 = icmp ult %"class.sh::TIntermNode"** %582, %556
  %585 = and i1 %583, %584
  br i1 %585, label %665, label %586

586:                                              ; preds = %573
  %587 = and i64 %571, 4611686018427387900
  %588 = sub nsw i64 0, %587
  %589 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 %588
  %590 = sub nsw i64 0, %587
  %591 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 %590
  %592 = add nsw i64 %587, -4
  %593 = lshr exact i64 %592, 2
  %594 = add nuw nsw i64 %593, 1
  %595 = and i64 %594, 1
  %596 = icmp eq i64 %592, 0
  br i1 %596, label %641, label %597

597:                                              ; preds = %586
  %598 = sub nuw nsw i64 %594, %595
  %599 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %600 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 -1
  %601 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %602 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 -1
  br label %603

603:                                              ; preds = %603, %597
  %604 = phi i64 [ 0, %597 ], [ %638, %603 ]
  %605 = phi i64 [ %598, %597 ], [ %639, %603 ]
  %606 = sub i64 0, %604
  %607 = sub i64 0, %604
  %608 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 %606
  %609 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 %607
  %610 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %609, i64 -1
  %611 = bitcast %"class.sh::TIntermNode"** %610 to <2 x i64>*
  %612 = load <2 x i64>, <2 x i64>* %611, align 8, !alias.scope !21
  %613 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %609, i64 -2
  %614 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %613, i64 -1
  %615 = bitcast %"class.sh::TIntermNode"** %614 to <2 x i64>*
  %616 = load <2 x i64>, <2 x i64>* %615, align 8, !alias.scope !21
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %608, i64 -1
  %618 = bitcast %"class.sh::TIntermNode"** %617 to <2 x i64>*
  store <2 x i64> %612, <2 x i64>* %618, align 8, !alias.scope !24, !noalias !21
  %619 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %608, i64 -2
  %620 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %619, i64 -1
  %621 = bitcast %"class.sh::TIntermNode"** %620 to <2 x i64>*
  store <2 x i64> %616, <2 x i64>* %621, align 8, !alias.scope !24, !noalias !21
  %622 = sub nuw nsw i64 -4, %604
  %623 = sub nuw nsw i64 -4, %604
  %624 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %601, i64 %622
  %625 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %602, i64 %623
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %625, i64 -1
  %627 = bitcast %"class.sh::TIntermNode"** %626 to <2 x i64>*
  %628 = load <2 x i64>, <2 x i64>* %627, align 8, !alias.scope !21
  %629 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %625, i64 -2
  %630 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %629, i64 -1
  %631 = bitcast %"class.sh::TIntermNode"** %630 to <2 x i64>*
  %632 = load <2 x i64>, <2 x i64>* %631, align 8, !alias.scope !21
  %633 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %624, i64 -1
  %634 = bitcast %"class.sh::TIntermNode"** %633 to <2 x i64>*
  store <2 x i64> %628, <2 x i64>* %634, align 8, !alias.scope !24, !noalias !21
  %635 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %624, i64 -2
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %637 = bitcast %"class.sh::TIntermNode"** %636 to <2 x i64>*
  store <2 x i64> %632, <2 x i64>* %637, align 8, !alias.scope !24, !noalias !21
  %638 = add i64 %604, 8
  %639 = add i64 %605, -2
  %640 = icmp eq i64 %639, 0
  br i1 %640, label %641, label %603, !llvm.loop !26

641:                                              ; preds = %603, %586
  %642 = phi i64 [ 0, %586 ], [ %638, %603 ]
  %643 = icmp eq i64 %595, 0
  br i1 %643, label %663, label %644

644:                                              ; preds = %641
  %645 = sub i64 0, %642
  %646 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %647 = sub i64 0, %642
  %648 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %564, i64 -1
  %649 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %646, i64 %645
  %650 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 %647
  %651 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %650, i64 -1
  %652 = bitcast %"class.sh::TIntermNode"** %651 to <2 x i64>*
  %653 = load <2 x i64>, <2 x i64>* %652, align 8, !alias.scope !21
  %654 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %650, i64 -2
  %655 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %654, i64 -1
  %656 = bitcast %"class.sh::TIntermNode"** %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 8, !alias.scope !21
  %658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %649, i64 -1
  %659 = bitcast %"class.sh::TIntermNode"** %658 to <2 x i64>*
  store <2 x i64> %653, <2 x i64>* %659, align 8, !alias.scope !24, !noalias !21
  %660 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %649, i64 -2
  %661 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %660, i64 -1
  %662 = bitcast %"class.sh::TIntermNode"** %661 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %662, align 8, !alias.scope !24, !noalias !21
  br label %663

663:                                              ; preds = %641, %644
  %664 = icmp eq i64 %571, %587
  br i1 %664, label %735, label %665

665:                                              ; preds = %663, %573, %566
  %666 = phi %"class.sh::TIntermNode"** [ %556, %573 ], [ %556, %566 ], [ %589, %663 ]
  %667 = phi %"class.sh::TIntermNode"** [ %564, %573 ], [ %564, %566 ], [ %591, %663 ]
  %668 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %667, i64 -1
  %669 = ptrtoint %"class.sh::TIntermNode"** %668 to i64
  %670 = sub i64 %669, %563
  %671 = lshr i64 %670, 3
  %672 = add nuw nsw i64 %671, 1
  %673 = and i64 %672, 7
  %674 = icmp eq i64 %673, 0
  br i1 %674, label %686, label %675

675:                                              ; preds = %665, %675
  %676 = phi %"class.sh::TIntermNode"** [ %679, %675 ], [ %666, %665 ]
  %677 = phi %"class.sh::TIntermNode"** [ %680, %675 ], [ %667, %665 ]
  %678 = phi i64 [ %684, %675 ], [ %673, %665 ]
  %679 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %676, i64 -1
  %680 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %677, i64 -1
  %681 = bitcast %"class.sh::TIntermNode"** %680 to i64*
  %682 = load i64, i64* %681, align 8
  %683 = bitcast %"class.sh::TIntermNode"** %679 to i64*
  store i64 %682, i64* %683, align 8
  %684 = add i64 %678, -1
  %685 = icmp eq i64 %684, 0
  br i1 %685, label %686, label %675, !llvm.loop !27

686:                                              ; preds = %675, %665
  %687 = phi %"class.sh::TIntermNode"** [ undef, %665 ], [ %679, %675 ]
  %688 = phi %"class.sh::TIntermNode"** [ %666, %665 ], [ %679, %675 ]
  %689 = phi %"class.sh::TIntermNode"** [ %667, %665 ], [ %680, %675 ]
  %690 = icmp ult i64 %670, 56
  br i1 %690, label %735, label %691

691:                                              ; preds = %686, %691
  %692 = phi %"class.sh::TIntermNode"** [ %729, %691 ], [ %688, %686 ]
  %693 = phi %"class.sh::TIntermNode"** [ %730, %691 ], [ %689, %686 ]
  %694 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -1
  %695 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -1
  %696 = bitcast %"class.sh::TIntermNode"** %695 to i64*
  %697 = load i64, i64* %696, align 8
  %698 = bitcast %"class.sh::TIntermNode"** %694 to i64*
  store i64 %697, i64* %698, align 8
  %699 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -2
  %700 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -2
  %701 = bitcast %"class.sh::TIntermNode"** %700 to i64*
  %702 = load i64, i64* %701, align 8
  %703 = bitcast %"class.sh::TIntermNode"** %699 to i64*
  store i64 %702, i64* %703, align 8
  %704 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -3
  %705 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -3
  %706 = bitcast %"class.sh::TIntermNode"** %705 to i64*
  %707 = load i64, i64* %706, align 8
  %708 = bitcast %"class.sh::TIntermNode"** %704 to i64*
  store i64 %707, i64* %708, align 8
  %709 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -4
  %710 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -4
  %711 = bitcast %"class.sh::TIntermNode"** %710 to i64*
  %712 = load i64, i64* %711, align 8
  %713 = bitcast %"class.sh::TIntermNode"** %709 to i64*
  store i64 %712, i64* %713, align 8
  %714 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -5
  %715 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -5
  %716 = bitcast %"class.sh::TIntermNode"** %715 to i64*
  %717 = load i64, i64* %716, align 8
  %718 = bitcast %"class.sh::TIntermNode"** %714 to i64*
  store i64 %717, i64* %718, align 8
  %719 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -6
  %720 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -6
  %721 = bitcast %"class.sh::TIntermNode"** %720 to i64*
  %722 = load i64, i64* %721, align 8
  %723 = bitcast %"class.sh::TIntermNode"** %719 to i64*
  store i64 %722, i64* %723, align 8
  %724 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -7
  %725 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -7
  %726 = bitcast %"class.sh::TIntermNode"** %725 to i64*
  %727 = load i64, i64* %726, align 8
  %728 = bitcast %"class.sh::TIntermNode"** %724 to i64*
  store i64 %727, i64* %728, align 8
  %729 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %692, i64 -8
  %730 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %693, i64 -8
  %731 = bitcast %"class.sh::TIntermNode"** %730 to i64*
  %732 = load i64, i64* %731, align 8
  %733 = bitcast %"class.sh::TIntermNode"** %729 to i64*
  store i64 %732, i64* %733, align 8
  %734 = icmp eq %"class.sh::TIntermNode"** %730, %562
  br i1 %734, label %735, label %691, !llvm.loop !28

735:                                              ; preds = %686, %691, %663, %553
  %736 = phi %"class.sh::TIntermNode"** [ %556, %553 ], [ %589, %663 ], [ %687, %686 ], [ %729, %691 ]
  %737 = ptrtoint %"class.sh::TIntermNode"** %736 to i64
  store i64 %737, i64* %529, align 8
  store i64 %561, i64* %528, align 8
  store i64 %558, i64* %538, align 8
  br label %738

738:                                              ; preds = %521, %735
  %739 = bitcast %"class.sh::TIntermTyped"* %301 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %740 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %739, align 8
  %741 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %740, i64 31
  %742 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %741, align 8
  %743 = call dereferenceable(184) %"class.sh::TType"* %742(%"class.sh::TIntermTyped"* %301) #7
  %744 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %743, %"class.sh::TVector.24"* nonnull %5) #7
  %745 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %744, i64 0, i32 0, i32 0, i32 0
  %746 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %301, i64 0, i32 0, i32 1
  %747 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %744, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %748 = bitcast %"struct.sh::TSourceLoc"* %747 to i8*
  %749 = bitcast %"struct.sh::TSourceLoc"* %746 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %748, i8* align 4 %749, i64 16, i1 false) #7
  %750 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %304, align 8
  %751 = icmp eq %"class.sh::TIntermNode"** %750, null
  br i1 %751, label %755, label %752

752:                                              ; preds = %738
  %753 = ptrtoint %"class.sh::TIntermNode"** %750 to i64
  %754 = bitcast %"class.sh::TIntermNode"*** %305 to i64*
  store i64 %753, i64* %754, align 8
  br label %755

755:                                              ; preds = %738, %752
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %303) #7
  br label %773

756:                                              ; preds = %293
  %757 = load i64, i64* %31, align 8
  %758 = load i64, i64* %33, align 8
  %759 = sub i64 %757, %758
  %760 = ashr exact i64 %759, 3
  %761 = icmp ugt i64 %760, 3
  br i1 %761, label %764, label %762

762:                                              ; preds = %756
  %763 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %763) #9
  unreachable

764:                                              ; preds = %756
  %765 = inttoptr i64 %758 to %"class.sh::TIntermNode"**
  %766 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %765, i64 3
  %767 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %766, align 8
  %768 = bitcast %"class.sh::TIntermNode"* %767 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %769 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %768, align 8
  %770 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %769, i64 4
  %771 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %770, align 8
  %772 = tail call %"class.sh::TIntermTyped"* %771(%"class.sh::TIntermNode"* %767) #7
  br label %773

773:                                              ; preds = %764, %755
  %774 = phi %"class.sh::TIntermTyped"* [ %745, %755 ], [ %772, %764 ]
  %775 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %776 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %775, i64 240) #7
  %777 = bitcast i8* %776 to %"class.sh::TIntermBinary"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %777, i8 zeroext 13, %"class.sh::TIntermTyped"* %301, %"class.sh::TIntermTyped"* %774) #7
  %778 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %301, i64 0, i32 0, i32 1
  %779 = getelementptr inbounds i8, i8* %776, i64 8
  %780 = bitcast %"struct.sh::TSourceLoc"* %778 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %779, i8* align 4 %780, i64 16, i1 false) #7
  %781 = ptrtoint i8* %776 to i64
  %782 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %86, align 8
  %783 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %87, align 8
  %784 = icmp ult %"class.sh::TIntermNode"** %782, %783
  %785 = ptrtoint %"class.sh::TIntermNode"** %783 to i64
  br i1 %784, label %786, label %791

786:                                              ; preds = %773
  %787 = bitcast %"class.sh::TIntermNode"** %782 to i64*
  store i64 %781, i64* %787, align 8
  %788 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %782, i64 1
  %789 = ptrtoint %"class.sh::TIntermNode"** %788 to i64
  %790 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  store i64 %789, i64* %790, align 8
  br label %1003

791:                                              ; preds = %773
  %792 = ptrtoint %"class.sh::TIntermNode"** %782 to i64
  %793 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  %794 = bitcast %"class.sh::TVector.24"* %4 to i64*
  %795 = load i64, i64* %794, align 8
  %796 = sub i64 %792, %795
  %797 = ashr exact i64 %796, 3
  %798 = add nsw i64 %797, 1
  %799 = icmp ugt i64 %798, 2305843009213693951
  br i1 %799, label %800, label %802

800:                                              ; preds = %791
  %801 = bitcast %"class.sh::TVector.24"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %801) #9
  unreachable

802:                                              ; preds = %791
  %803 = bitcast %"class.sh::TIntermNode"*** %87 to i64*
  %804 = sub i64 %785, %795
  %805 = ashr exact i64 %804, 3
  %806 = icmp ult i64 %805, 1152921504606846975
  br i1 %806, label %807, label %812

807:                                              ; preds = %802
  %808 = ashr exact i64 %804, 2
  %809 = icmp ult i64 %808, %798
  %810 = select i1 %809, i64 %798, i64 %808
  %811 = icmp eq i64 %810, 0
  br i1 %811, label %818, label %812

812:                                              ; preds = %807, %802
  %813 = phi i64 [ %810, %807 ], [ 2305843009213693951, %802 ]
  %814 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %815 = shl i64 %813, 3
  %816 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %814, i64 %815) #7
  %817 = bitcast i8* %816 to %"class.sh::TIntermNode"**
  br label %818

818:                                              ; preds = %812, %807
  %819 = phi i64 [ %813, %812 ], [ 0, %807 ]
  %820 = phi %"class.sh::TIntermNode"** [ %817, %812 ], [ null, %807 ]
  %821 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %820, i64 %797
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %820, i64 %819
  %823 = ptrtoint %"class.sh::TIntermNode"** %822 to i64
  %824 = bitcast %"class.sh::TIntermNode"** %821 to i64*
  store i64 %781, i64* %824, align 8
  %825 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %821, i64 1
  %826 = ptrtoint %"class.sh::TIntermNode"** %825 to i64
  %827 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %828 = ptrtoint %"class.sh::TIntermNode"** %827 to i64
  %829 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %86, align 8
  %830 = icmp eq %"class.sh::TIntermNode"** %829, %827
  br i1 %830, label %1000, label %831

831:                                              ; preds = %818
  %832 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 -1
  %833 = ptrtoint %"class.sh::TIntermNode"** %832 to i64
  %834 = sub i64 %833, %828
  %835 = lshr i64 %834, 3
  %836 = add nuw nsw i64 %835, 1
  %837 = icmp ult i64 %836, 4
  br i1 %837, label %930, label %838

838:                                              ; preds = %831
  %839 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 -1
  %840 = ptrtoint %"class.sh::TIntermNode"** %839 to i64
  %841 = sub i64 %840, %828
  %842 = lshr i64 %841, 3
  %843 = xor i64 %842, -1
  %844 = add nsw i64 %797, %843
  %845 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %820, i64 %844
  %846 = xor i64 %842, -1
  %847 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 %846
  %848 = icmp ult %"class.sh::TIntermNode"** %845, %829
  %849 = icmp ult %"class.sh::TIntermNode"** %847, %821
  %850 = and i1 %848, %849
  br i1 %850, label %930, label %851

851:                                              ; preds = %838
  %852 = and i64 %836, 4611686018427387900
  %853 = sub nsw i64 0, %852
  %854 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %821, i64 %853
  %855 = sub nsw i64 0, %852
  %856 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 %855
  %857 = add nsw i64 %852, -4
  %858 = lshr exact i64 %857, 2
  %859 = add nuw nsw i64 %858, 1
  %860 = and i64 %859, 1
  %861 = icmp eq i64 %857, 0
  br i1 %861, label %906, label %862

862:                                              ; preds = %851
  %863 = sub nuw nsw i64 %859, %860
  %864 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %821, i64 -1
  %865 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 -1
  %866 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %821, i64 -1
  %867 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 -1
  br label %868

868:                                              ; preds = %868, %862
  %869 = phi i64 [ 0, %862 ], [ %903, %868 ]
  %870 = phi i64 [ %863, %862 ], [ %904, %868 ]
  %871 = sub i64 0, %869
  %872 = sub i64 0, %869
  %873 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %864, i64 %871
  %874 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %865, i64 %872
  %875 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %874, i64 -1
  %876 = bitcast %"class.sh::TIntermNode"** %875 to <2 x i64>*
  %877 = load <2 x i64>, <2 x i64>* %876, align 8, !alias.scope !29
  %878 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %874, i64 -2
  %879 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %878, i64 -1
  %880 = bitcast %"class.sh::TIntermNode"** %879 to <2 x i64>*
  %881 = load <2 x i64>, <2 x i64>* %880, align 8, !alias.scope !29
  %882 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %873, i64 -1
  %883 = bitcast %"class.sh::TIntermNode"** %882 to <2 x i64>*
  store <2 x i64> %877, <2 x i64>* %883, align 8, !alias.scope !32, !noalias !29
  %884 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %873, i64 -2
  %885 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %884, i64 -1
  %886 = bitcast %"class.sh::TIntermNode"** %885 to <2 x i64>*
  store <2 x i64> %881, <2 x i64>* %886, align 8, !alias.scope !32, !noalias !29
  %887 = sub nuw nsw i64 -4, %869
  %888 = sub nuw nsw i64 -4, %869
  %889 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %866, i64 %887
  %890 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %867, i64 %888
  %891 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %890, i64 -1
  %892 = bitcast %"class.sh::TIntermNode"** %891 to <2 x i64>*
  %893 = load <2 x i64>, <2 x i64>* %892, align 8, !alias.scope !29
  %894 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %890, i64 -2
  %895 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %894, i64 -1
  %896 = bitcast %"class.sh::TIntermNode"** %895 to <2 x i64>*
  %897 = load <2 x i64>, <2 x i64>* %896, align 8, !alias.scope !29
  %898 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %889, i64 -1
  %899 = bitcast %"class.sh::TIntermNode"** %898 to <2 x i64>*
  store <2 x i64> %893, <2 x i64>* %899, align 8, !alias.scope !32, !noalias !29
  %900 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %889, i64 -2
  %901 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %900, i64 -1
  %902 = bitcast %"class.sh::TIntermNode"** %901 to <2 x i64>*
  store <2 x i64> %897, <2 x i64>* %902, align 8, !alias.scope !32, !noalias !29
  %903 = add i64 %869, 8
  %904 = add i64 %870, -2
  %905 = icmp eq i64 %904, 0
  br i1 %905, label %906, label %868, !llvm.loop !34

906:                                              ; preds = %868, %851
  %907 = phi i64 [ 0, %851 ], [ %903, %868 ]
  %908 = icmp eq i64 %860, 0
  br i1 %908, label %928, label %909

909:                                              ; preds = %906
  %910 = sub i64 0, %907
  %911 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %821, i64 -1
  %912 = sub i64 0, %907
  %913 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %829, i64 -1
  %914 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %911, i64 %910
  %915 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %913, i64 %912
  %916 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %915, i64 -1
  %917 = bitcast %"class.sh::TIntermNode"** %916 to <2 x i64>*
  %918 = load <2 x i64>, <2 x i64>* %917, align 8, !alias.scope !29
  %919 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %915, i64 -2
  %920 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %919, i64 -1
  %921 = bitcast %"class.sh::TIntermNode"** %920 to <2 x i64>*
  %922 = load <2 x i64>, <2 x i64>* %921, align 8, !alias.scope !29
  %923 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %914, i64 -1
  %924 = bitcast %"class.sh::TIntermNode"** %923 to <2 x i64>*
  store <2 x i64> %918, <2 x i64>* %924, align 8, !alias.scope !32, !noalias !29
  %925 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %914, i64 -2
  %926 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %925, i64 -1
  %927 = bitcast %"class.sh::TIntermNode"** %926 to <2 x i64>*
  store <2 x i64> %922, <2 x i64>* %927, align 8, !alias.scope !32, !noalias !29
  br label %928

928:                                              ; preds = %906, %909
  %929 = icmp eq i64 %836, %852
  br i1 %929, label %1000, label %930

930:                                              ; preds = %928, %838, %831
  %931 = phi %"class.sh::TIntermNode"** [ %821, %838 ], [ %821, %831 ], [ %854, %928 ]
  %932 = phi %"class.sh::TIntermNode"** [ %829, %838 ], [ %829, %831 ], [ %856, %928 ]
  %933 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %932, i64 -1
  %934 = ptrtoint %"class.sh::TIntermNode"** %933 to i64
  %935 = sub i64 %934, %828
  %936 = lshr i64 %935, 3
  %937 = add nuw nsw i64 %936, 1
  %938 = and i64 %937, 7
  %939 = icmp eq i64 %938, 0
  br i1 %939, label %951, label %940

940:                                              ; preds = %930, %940
  %941 = phi %"class.sh::TIntermNode"** [ %944, %940 ], [ %931, %930 ]
  %942 = phi %"class.sh::TIntermNode"** [ %945, %940 ], [ %932, %930 ]
  %943 = phi i64 [ %949, %940 ], [ %938, %930 ]
  %944 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %941, i64 -1
  %945 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %942, i64 -1
  %946 = bitcast %"class.sh::TIntermNode"** %945 to i64*
  %947 = load i64, i64* %946, align 8
  %948 = bitcast %"class.sh::TIntermNode"** %944 to i64*
  store i64 %947, i64* %948, align 8
  %949 = add i64 %943, -1
  %950 = icmp eq i64 %949, 0
  br i1 %950, label %951, label %940, !llvm.loop !35

951:                                              ; preds = %940, %930
  %952 = phi %"class.sh::TIntermNode"** [ undef, %930 ], [ %944, %940 ]
  %953 = phi %"class.sh::TIntermNode"** [ %931, %930 ], [ %944, %940 ]
  %954 = phi %"class.sh::TIntermNode"** [ %932, %930 ], [ %945, %940 ]
  %955 = icmp ult i64 %935, 56
  br i1 %955, label %1000, label %956

956:                                              ; preds = %951, %956
  %957 = phi %"class.sh::TIntermNode"** [ %994, %956 ], [ %953, %951 ]
  %958 = phi %"class.sh::TIntermNode"** [ %995, %956 ], [ %954, %951 ]
  %959 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -1
  %960 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -1
  %961 = bitcast %"class.sh::TIntermNode"** %960 to i64*
  %962 = load i64, i64* %961, align 8
  %963 = bitcast %"class.sh::TIntermNode"** %959 to i64*
  store i64 %962, i64* %963, align 8
  %964 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -2
  %965 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -2
  %966 = bitcast %"class.sh::TIntermNode"** %965 to i64*
  %967 = load i64, i64* %966, align 8
  %968 = bitcast %"class.sh::TIntermNode"** %964 to i64*
  store i64 %967, i64* %968, align 8
  %969 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -3
  %970 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -3
  %971 = bitcast %"class.sh::TIntermNode"** %970 to i64*
  %972 = load i64, i64* %971, align 8
  %973 = bitcast %"class.sh::TIntermNode"** %969 to i64*
  store i64 %972, i64* %973, align 8
  %974 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -4
  %975 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -4
  %976 = bitcast %"class.sh::TIntermNode"** %975 to i64*
  %977 = load i64, i64* %976, align 8
  %978 = bitcast %"class.sh::TIntermNode"** %974 to i64*
  store i64 %977, i64* %978, align 8
  %979 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -5
  %980 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -5
  %981 = bitcast %"class.sh::TIntermNode"** %980 to i64*
  %982 = load i64, i64* %981, align 8
  %983 = bitcast %"class.sh::TIntermNode"** %979 to i64*
  store i64 %982, i64* %983, align 8
  %984 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -6
  %985 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -6
  %986 = bitcast %"class.sh::TIntermNode"** %985 to i64*
  %987 = load i64, i64* %986, align 8
  %988 = bitcast %"class.sh::TIntermNode"** %984 to i64*
  store i64 %987, i64* %988, align 8
  %989 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -7
  %990 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -7
  %991 = bitcast %"class.sh::TIntermNode"** %990 to i64*
  %992 = load i64, i64* %991, align 8
  %993 = bitcast %"class.sh::TIntermNode"** %989 to i64*
  store i64 %992, i64* %993, align 8
  %994 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %957, i64 -8
  %995 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %958, i64 -8
  %996 = bitcast %"class.sh::TIntermNode"** %995 to i64*
  %997 = load i64, i64* %996, align 8
  %998 = bitcast %"class.sh::TIntermNode"** %994 to i64*
  store i64 %997, i64* %998, align 8
  %999 = icmp eq %"class.sh::TIntermNode"** %995, %827
  br i1 %999, label %1000, label %956, !llvm.loop !36

1000:                                             ; preds = %951, %956, %928, %818
  %1001 = phi %"class.sh::TIntermNode"** [ %821, %818 ], [ %854, %928 ], [ %952, %951 ], [ %994, %956 ]
  %1002 = ptrtoint %"class.sh::TIntermNode"** %1001 to i64
  store i64 %1002, i64* %794, align 8
  store i64 %826, i64* %793, align 8
  store i64 %823, i64* %803, align 8
  br label %1003

1003:                                             ; preds = %786, %1000
  %1004 = phi %"class.sh::TIntermNode"** [ %788, %786 ], [ %825, %1000 ]
  %1005 = load i64, i64* %31, align 8
  %1006 = load i64, i64* %33, align 8
  %1007 = sub i64 %1005, %1006
  %1008 = ashr exact i64 %1007, 3
  %1009 = icmp ugt i64 %1008, 2
  br i1 %1009, label %1012, label %1010

1010:                                             ; preds = %1003
  %1011 = bitcast %"class.sh::TVector.24"* %29 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %1011) #9
  unreachable

1012:                                             ; preds = %1003
  %1013 = inttoptr i64 %1006 to %"class.sh::TIntermNode"**
  %1014 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1013, i64 2
  %1015 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %87, align 8
  %1016 = icmp eq %"class.sh::TIntermNode"** %1004, %1015
  br i1 %1016, label %1024, label %1017

1017:                                             ; preds = %1012
  %1018 = bitcast %"class.sh::TIntermNode"** %1014 to i64*
  %1019 = load i64, i64* %1018, align 8
  %1020 = bitcast %"class.sh::TIntermNode"** %1004 to i64*
  store i64 %1019, i64* %1020, align 8
  %1021 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1004, i64 1
  %1022 = ptrtoint %"class.sh::TIntermNode"** %1021 to i64
  %1023 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  store i64 %1022, i64* %1023, align 8
  br label %1236

1024:                                             ; preds = %1012
  %1025 = ptrtoint %"class.sh::TIntermNode"** %1015 to i64
  %1026 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  %1027 = bitcast %"class.sh::TVector.24"* %4 to i64*
  %1028 = load i64, i64* %1027, align 8
  %1029 = sub i64 %1025, %1028
  %1030 = ashr exact i64 %1029, 3
  %1031 = add nsw i64 %1030, 1
  %1032 = icmp ugt i64 %1031, 2305843009213693951
  br i1 %1032, label %1033, label %1035

1033:                                             ; preds = %1024
  %1034 = bitcast %"class.sh::TVector.24"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1034) #9
  unreachable

1035:                                             ; preds = %1024
  %1036 = bitcast %"class.sh::TIntermNode"*** %87 to i64*
  %1037 = icmp ult i64 %1030, 1152921504606846975
  br i1 %1037, label %1038, label %1043

1038:                                             ; preds = %1035
  %1039 = ashr exact i64 %1029, 2
  %1040 = icmp ult i64 %1039, %1031
  %1041 = select i1 %1040, i64 %1031, i64 %1039
  %1042 = icmp eq i64 %1041, 0
  br i1 %1042, label %1049, label %1043

1043:                                             ; preds = %1038, %1035
  %1044 = phi i64 [ %1041, %1038 ], [ 2305843009213693951, %1035 ]
  %1045 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1046 = shl i64 %1044, 3
  %1047 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1045, i64 %1046) #7
  %1048 = bitcast i8* %1047 to %"class.sh::TIntermNode"**
  br label %1049

1049:                                             ; preds = %1043, %1038
  %1050 = phi i64 [ %1044, %1043 ], [ 0, %1038 ]
  %1051 = phi %"class.sh::TIntermNode"** [ %1048, %1043 ], [ null, %1038 ]
  %1052 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1051, i64 %1030
  %1053 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1051, i64 %1050
  %1054 = ptrtoint %"class.sh::TIntermNode"** %1053 to i64
  %1055 = bitcast %"class.sh::TIntermNode"** %1014 to i64*
  %1056 = load i64, i64* %1055, align 8
  %1057 = bitcast %"class.sh::TIntermNode"** %1052 to i64*
  store i64 %1056, i64* %1057, align 8
  %1058 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1052, i64 1
  %1059 = ptrtoint %"class.sh::TIntermNode"** %1058 to i64
  %1060 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %1061 = ptrtoint %"class.sh::TIntermNode"** %1060 to i64
  %1062 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %86, align 8
  %1063 = icmp eq %"class.sh::TIntermNode"** %1062, %1060
  br i1 %1063, label %1233, label %1064

1064:                                             ; preds = %1049
  %1065 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  %1066 = ptrtoint %"class.sh::TIntermNode"** %1065 to i64
  %1067 = sub i64 %1066, %1061
  %1068 = lshr i64 %1067, 3
  %1069 = add nuw nsw i64 %1068, 1
  %1070 = icmp ult i64 %1069, 4
  br i1 %1070, label %1163, label %1071

1071:                                             ; preds = %1064
  %1072 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  %1073 = ptrtoint %"class.sh::TIntermNode"** %1072 to i64
  %1074 = sub i64 %1073, %1061
  %1075 = lshr i64 %1074, 3
  %1076 = xor i64 %1075, -1
  %1077 = add nsw i64 %1030, %1076
  %1078 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1051, i64 %1077
  %1079 = xor i64 %1075, -1
  %1080 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 %1079
  %1081 = icmp ult %"class.sh::TIntermNode"** %1078, %1062
  %1082 = icmp ult %"class.sh::TIntermNode"** %1080, %1052
  %1083 = and i1 %1081, %1082
  br i1 %1083, label %1163, label %1084

1084:                                             ; preds = %1071
  %1085 = and i64 %1069, 4611686018427387900
  %1086 = sub nsw i64 0, %1085
  %1087 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1052, i64 %1086
  %1088 = sub nsw i64 0, %1085
  %1089 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 %1088
  %1090 = add nsw i64 %1085, -4
  %1091 = lshr exact i64 %1090, 2
  %1092 = add nuw nsw i64 %1091, 1
  %1093 = and i64 %1092, 1
  %1094 = icmp eq i64 %1090, 0
  br i1 %1094, label %1141, label %1095

1095:                                             ; preds = %1084
  %1096 = sub nuw nsw i64 %1092, %1093
  %1097 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1052, i64 -1
  %1098 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  %1099 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1052, i64 -1
  %1100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  br label %1101

1101:                                             ; preds = %1101, %1095
  %1102 = phi i64 [ 0, %1095 ], [ %1136, %1101 ]
  %1103 = phi i64 [ %1096, %1095 ], [ %1137, %1101 ]
  %1104 = sub i64 0, %1102
  %1105 = sub i64 0, %1102
  %1106 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1097, i64 %1104
  %1107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1098, i64 %1105
  %1108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1107, i64 -1
  %1109 = bitcast %"class.sh::TIntermNode"** %1108 to <2 x i64>*
  %1110 = load <2 x i64>, <2 x i64>* %1109, align 8, !alias.scope !37
  %1111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1107, i64 -2
  %1112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1111, i64 -1
  %1113 = bitcast %"class.sh::TIntermNode"** %1112 to <2 x i64>*
  %1114 = load <2 x i64>, <2 x i64>* %1113, align 8, !alias.scope !37
  %1115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1106, i64 -1
  %1116 = bitcast %"class.sh::TIntermNode"** %1115 to <2 x i64>*
  store <2 x i64> %1110, <2 x i64>* %1116, align 8, !alias.scope !40, !noalias !37
  %1117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1106, i64 -2
  %1118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1117, i64 -1
  %1119 = bitcast %"class.sh::TIntermNode"** %1118 to <2 x i64>*
  store <2 x i64> %1114, <2 x i64>* %1119, align 8, !alias.scope !40, !noalias !37
  %1120 = sub nuw nsw i64 -4, %1102
  %1121 = sub nuw nsw i64 -4, %1102
  %1122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1099, i64 %1120
  %1123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 %1121
  %1124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1123, i64 -1
  %1125 = bitcast %"class.sh::TIntermNode"** %1124 to <2 x i64>*
  %1126 = load <2 x i64>, <2 x i64>* %1125, align 8, !alias.scope !37
  %1127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1123, i64 -2
  %1128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1127, i64 -1
  %1129 = bitcast %"class.sh::TIntermNode"** %1128 to <2 x i64>*
  %1130 = load <2 x i64>, <2 x i64>* %1129, align 8, !alias.scope !37
  %1131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1122, i64 -1
  %1132 = bitcast %"class.sh::TIntermNode"** %1131 to <2 x i64>*
  store <2 x i64> %1126, <2 x i64>* %1132, align 8, !alias.scope !40, !noalias !37
  %1133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1122, i64 -2
  %1134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1133, i64 -1
  %1135 = bitcast %"class.sh::TIntermNode"** %1134 to <2 x i64>*
  store <2 x i64> %1130, <2 x i64>* %1135, align 8, !alias.scope !40, !noalias !37
  %1136 = add i64 %1102, 8
  %1137 = add i64 %1103, -2
  %1138 = icmp eq i64 %1137, 0
  br i1 %1138, label %1139, label %1101, !llvm.loop !42

1139:                                             ; preds = %1101
  %1140 = sub nuw nsw i64 -8, %1102
  br label %1141

1141:                                             ; preds = %1139, %1084
  %1142 = phi i64 [ 0, %1084 ], [ %1140, %1139 ]
  %1143 = icmp eq i64 %1093, 0
  br i1 %1143, label %1161, label %1144

1144:                                             ; preds = %1141
  %1145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1052, i64 -1
  %1146 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  %1147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1145, i64 %1142
  %1148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1146, i64 %1142
  %1149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1148, i64 -1
  %1150 = bitcast %"class.sh::TIntermNode"** %1149 to <2 x i64>*
  %1151 = load <2 x i64>, <2 x i64>* %1150, align 8, !alias.scope !37
  %1152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1148, i64 -2
  %1153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1152, i64 -1
  %1154 = bitcast %"class.sh::TIntermNode"** %1153 to <2 x i64>*
  %1155 = load <2 x i64>, <2 x i64>* %1154, align 8, !alias.scope !37
  %1156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1147, i64 -1
  %1157 = bitcast %"class.sh::TIntermNode"** %1156 to <2 x i64>*
  store <2 x i64> %1151, <2 x i64>* %1157, align 8, !alias.scope !40, !noalias !37
  %1158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1147, i64 -2
  %1159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1158, i64 -1
  %1160 = bitcast %"class.sh::TIntermNode"** %1159 to <2 x i64>*
  store <2 x i64> %1155, <2 x i64>* %1160, align 8, !alias.scope !40, !noalias !37
  br label %1161

1161:                                             ; preds = %1141, %1144
  %1162 = icmp eq i64 %1069, %1085
  br i1 %1162, label %1233, label %1163

1163:                                             ; preds = %1161, %1071, %1064
  %1164 = phi %"class.sh::TIntermNode"** [ %1052, %1071 ], [ %1052, %1064 ], [ %1087, %1161 ]
  %1165 = phi %"class.sh::TIntermNode"** [ %1062, %1071 ], [ %1062, %1064 ], [ %1089, %1161 ]
  %1166 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1165, i64 -1
  %1167 = ptrtoint %"class.sh::TIntermNode"** %1166 to i64
  %1168 = sub i64 %1167, %1061
  %1169 = lshr i64 %1168, 3
  %1170 = add nuw nsw i64 %1169, 1
  %1171 = and i64 %1170, 7
  %1172 = icmp eq i64 %1171, 0
  br i1 %1172, label %1184, label %1173

1173:                                             ; preds = %1163, %1173
  %1174 = phi %"class.sh::TIntermNode"** [ %1177, %1173 ], [ %1164, %1163 ]
  %1175 = phi %"class.sh::TIntermNode"** [ %1178, %1173 ], [ %1165, %1163 ]
  %1176 = phi i64 [ %1182, %1173 ], [ %1171, %1163 ]
  %1177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1174, i64 -1
  %1178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1175, i64 -1
  %1179 = bitcast %"class.sh::TIntermNode"** %1178 to i64*
  %1180 = load i64, i64* %1179, align 8
  %1181 = bitcast %"class.sh::TIntermNode"** %1177 to i64*
  store i64 %1180, i64* %1181, align 8
  %1182 = add i64 %1176, -1
  %1183 = icmp eq i64 %1182, 0
  br i1 %1183, label %1184, label %1173, !llvm.loop !43

1184:                                             ; preds = %1173, %1163
  %1185 = phi %"class.sh::TIntermNode"** [ undef, %1163 ], [ %1177, %1173 ]
  %1186 = phi %"class.sh::TIntermNode"** [ %1164, %1163 ], [ %1177, %1173 ]
  %1187 = phi %"class.sh::TIntermNode"** [ %1165, %1163 ], [ %1178, %1173 ]
  %1188 = icmp ult i64 %1168, 56
  br i1 %1188, label %1233, label %1189

1189:                                             ; preds = %1184, %1189
  %1190 = phi %"class.sh::TIntermNode"** [ %1227, %1189 ], [ %1186, %1184 ]
  %1191 = phi %"class.sh::TIntermNode"** [ %1228, %1189 ], [ %1187, %1184 ]
  %1192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -1
  %1193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -1
  %1194 = bitcast %"class.sh::TIntermNode"** %1193 to i64*
  %1195 = load i64, i64* %1194, align 8
  %1196 = bitcast %"class.sh::TIntermNode"** %1192 to i64*
  store i64 %1195, i64* %1196, align 8
  %1197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -2
  %1198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -2
  %1199 = bitcast %"class.sh::TIntermNode"** %1198 to i64*
  %1200 = load i64, i64* %1199, align 8
  %1201 = bitcast %"class.sh::TIntermNode"** %1197 to i64*
  store i64 %1200, i64* %1201, align 8
  %1202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -3
  %1203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -3
  %1204 = bitcast %"class.sh::TIntermNode"** %1203 to i64*
  %1205 = load i64, i64* %1204, align 8
  %1206 = bitcast %"class.sh::TIntermNode"** %1202 to i64*
  store i64 %1205, i64* %1206, align 8
  %1207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -4
  %1208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -4
  %1209 = bitcast %"class.sh::TIntermNode"** %1208 to i64*
  %1210 = load i64, i64* %1209, align 8
  %1211 = bitcast %"class.sh::TIntermNode"** %1207 to i64*
  store i64 %1210, i64* %1211, align 8
  %1212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -5
  %1213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -5
  %1214 = bitcast %"class.sh::TIntermNode"** %1213 to i64*
  %1215 = load i64, i64* %1214, align 8
  %1216 = bitcast %"class.sh::TIntermNode"** %1212 to i64*
  store i64 %1215, i64* %1216, align 8
  %1217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -6
  %1218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -6
  %1219 = bitcast %"class.sh::TIntermNode"** %1218 to i64*
  %1220 = load i64, i64* %1219, align 8
  %1221 = bitcast %"class.sh::TIntermNode"** %1217 to i64*
  store i64 %1220, i64* %1221, align 8
  %1222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -7
  %1223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -7
  %1224 = bitcast %"class.sh::TIntermNode"** %1223 to i64*
  %1225 = load i64, i64* %1224, align 8
  %1226 = bitcast %"class.sh::TIntermNode"** %1222 to i64*
  store i64 %1225, i64* %1226, align 8
  %1227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1190, i64 -8
  %1228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1191, i64 -8
  %1229 = bitcast %"class.sh::TIntermNode"** %1228 to i64*
  %1230 = load i64, i64* %1229, align 8
  %1231 = bitcast %"class.sh::TIntermNode"** %1227 to i64*
  store i64 %1230, i64* %1231, align 8
  %1232 = icmp eq %"class.sh::TIntermNode"** %1228, %1060
  br i1 %1232, label %1233, label %1189, !llvm.loop !44

1233:                                             ; preds = %1184, %1189, %1161, %1049
  %1234 = phi %"class.sh::TIntermNode"** [ %1052, %1049 ], [ %1087, %1161 ], [ %1185, %1184 ], [ %1227, %1189 ]
  %1235 = ptrtoint %"class.sh::TIntermNode"** %1234 to i64
  store i64 %1235, i64* %1027, align 8
  store i64 %1059, i64* %1026, align 8
  store i64 %1054, i64* %1036, align 8
  br label %1236

1236:                                             ; preds = %1017, %1233
  %1237 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %1238 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %1237, align 8
  %1239 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 2
  %1240 = load i32, i32* %1239, align 8
  %1241 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), %"class.sh::TVector.24"* nonnull %4, %"class.sh::TSymbolTable"* dereferenceable(1720) %1238, i32 %1240) #7
  %1242 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1241, i64 0, i32 0
  %1243 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1244 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1241, i64 0, i32 0, i32 1
  %1245 = bitcast %"struct.sh::TSourceLoc"* %1244 to i8*
  %1246 = bitcast %"struct.sh::TSourceLoc"* %1243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1245, i8* align 4 %1246, i64 16, i1 false) #7
  %1247 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %1247, %"class.sh::TIntermNode"* %1242, i32 1) #7
  store i8 1, i8* %7, align 4
  %1248 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %1249 = icmp eq %"class.sh::TIntermNode"** %1248, null
  br i1 %1249, label %1253, label %1250

1250:                                             ; preds = %1236
  %1251 = ptrtoint %"class.sh::TIntermNode"** %1248 to i64
  %1252 = bitcast %"class.sh::TIntermNode"*** %86 to i64*
  store i64 %1251, i64* %1252, align 8
  br label %1253

1253:                                             ; preds = %1236, %1250
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %84) #7
  br label %1254

1254:                                             ; preds = %14, %10, %3, %1253
  %1255 = phi i1 [ false, %1253 ], [ false, %3 ], [ true, %10 ], [ true, %14 ]
  ret i1 %1255
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #2

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.24"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector.24"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
