; ModuleID = '../../components/viz/common/quads/compositor_frame.cc'
source_filename = "../../components/viz/common/quads/compositor_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::CompositorFrame" = type { %"class.viz::CompositorFrameMetadata", %"class.std::__1::vector.49", %"class.std::__1::vector.70" }
%"class.viz::CompositorFrameMetadata" = type { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector.15", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, float, %"class.absl::optional.22", %"class.absl::optional.27", i32, %"class.std::__1::unique_ptr", %"class.std::__1::vector.35" }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"*, %"class.std::__1::__compressed_pair.3" }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.ui::LatencyInfo"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*, %"class.std::__1::__compressed_pair.10" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional", %"class.viz::SurfaceId" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.viz::SurfaceRange"* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.viz::SurfaceId"* }
%"class.viz::FrameDeadline" = type <{ %"class.base::TimeTicks", i32, [4 x i8], %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"struct.viz::BeginFrameAck" = type <{ %"struct.viz::BeginFrameId", i64, i8, [7 x i8] }>
%"struct.viz::BeginFrameId" = type { i64, i64 }
%"class.absl::optional.22" = type { %"class.absl::optional_internal::optional_data.23" }
%"class.absl::optional_internal::optional_data.23" = type { %"class.absl::optional_internal::optional_data_base.24" }
%"class.absl::optional_internal::optional_data_base.24" = type { %"class.absl::optional_internal::optional_data_dtor_base.25" }
%"class.absl::optional_internal::optional_data_dtor_base.25" = type { i8, %union.anon.26 }
%union.anon.26 = type { float }
%"class.absl::optional.27" = type { %"class.absl::optional_internal::optional_data.28" }
%"class.absl::optional_internal::optional_data.28" = type { %"class.absl::optional_internal::optional_data_base.29" }
%"class.absl::optional_internal::optional_data_base.29" = type { %"class.absl::optional_internal::optional_data_dtor_base.30" }
%"class.absl::optional_internal::optional_data_dtor_base.30" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"class.base::TimeDelta" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.viz::CompositorFrameTransitionDirective"*, %"class.viz::CompositorFrameTransitionDirective"*, %"class.std::__1::__compressed_pair.44" }
%"class.viz::CompositorFrameTransitionDirective" = type { i32, i32, i32, %"class.std::__1::vector.37" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.util::IdType"*, %"class.util::IdType"*, %"class.std::__1::__compressed_pair.39" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.util::IdType"* }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.viz::CompositorFrameTransitionDirective"* }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*, %"class.std::__1::__compressed_pair.65" }
%"struct.viz::TransferableResource" = type { %"class.util::IdType.51", i8, %"class.gfx::Size", i32, [4 x i8], %"struct.gpu::MailboxHolder", %"class.gfx::ColorSpace", %"class.absl::optional.55", i8, i32, i8, [7 x i8], %"class.absl::optional.60" }
%"class.util::IdType.51" = type { %"class.base::StrongAlias.52" }
%"class.base::StrongAlias.52" = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType.53", i64 }
%"class.util::IdType.53" = type { %"class.base::StrongAlias.54" }
%"class.base::StrongAlias.54" = type { i64 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.55" = type { %"class.absl::optional_internal::optional_data.56" }
%"class.absl::optional_internal::optional_data.56" = type { %"class.absl::optional_internal::optional_data_base.57" }
%"class.absl::optional_internal::optional_data_base.57" = type { %"class.absl::optional_internal::optional_data_dtor_base.58" }
%"class.absl::optional_internal::optional_data_dtor_base.58" = type { i8, %union.anon.59 }
%union.anon.59 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, [7 x i8], %union.anon.64 }
%union.anon.64 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.viz::TransferableResource"* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.viz::CompositorRenderPass"* }
%"class.viz::CompositorRenderPass" = type <{ %"class.viz::RenderPassInternal", %"class.util::IdType", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [4 x i8] }>
%"class.viz::RenderPassInternal" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.96", i8, i8, i8, i8, %"class.std::__1::vector.101", %"class.viz::QuadList", %"class.cc::ListContainer.115" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.75" }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.91" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.84", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.78, i32, %"class.absl::optional.79", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.77" }
%"struct.std::__1::__atomic_base.77" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.78 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.79" = type { %"class.absl::optional_internal::optional_data.80" }
%"class.absl::optional_internal::optional_data.80" = type { %"class.absl::optional_internal::optional_data_base.81" }
%"class.absl::optional_internal::optional_data_base.81" = type { %"class.absl::optional_internal::optional_data_dtor_base.82" }
%"class.absl::optional_internal::optional_data_dtor_base.82" = type { i8, %union.anon.83 }
%union.anon.83 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.96" = type { %"class.absl::optional_internal::optional_data.97" }
%"class.absl::optional_internal::optional_data.97" = type { %"class.absl::optional_internal::optional_data_base.98" }
%"class.absl::optional_internal::optional_data_base.98" = type { %"class.absl::optional_internal::optional_data_dtor_base.99" }
%"class.absl::optional_internal::optional_data_dtor_base.99" = type { i8, %union.anon.100 }
%union.anon.100 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"class.std::__1::unique_ptr.103"*, %"class.std::__1::unique_ptr.103"*, %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::unique_ptr.103" = type opaque
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.std::__1::unique_ptr.103"* }
%"class.viz::QuadList" = type { %"class.cc::ListContainer" }
%"class.cc::ListContainer" = type { %"class.cc::ListContainerHelper" }
%"class.cc::ListContainerHelper" = type { %"class.std::__1::unique_ptr.109" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.cc::ListContainerHelper::CharAllocator"* }
%"class.cc::ListContainerHelper::CharAllocator" = type opaque
%"class.cc::ListContainer.115" = type { %"class.cc::ListContainerHelper" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.std::__1::unique_ptr.72"* }

@_ZN3viz15CompositorFrameC1Ev = hidden unnamed_addr alias void (%"class.viz::CompositorFrame"*), void (%"class.viz::CompositorFrame"*)* @_ZN3viz15CompositorFrameC2Ev
@_ZN3viz15CompositorFrameC1EOS0_ = hidden unnamed_addr alias void (%"class.viz::CompositorFrame"*, %"class.viz::CompositorFrame"*), void (%"class.viz::CompositorFrame"*, %"class.viz::CompositorFrame"*)* @_ZN3viz15CompositorFrameC2EOS0_
@_ZN3viz15CompositorFrameD1Ev = hidden unnamed_addr alias void (%"class.viz::CompositorFrame"*), void (%"class.viz::CompositorFrame"*)* @_ZN3viz15CompositorFrameD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15CompositorFrameC2Ev(%"class.viz::CompositorFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0
  tail call void @_ZN3viz23CompositorFrameMetadataC1Ev(%"class.viz::CompositorFrameMetadata"* %2) #6
  %3 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector.49"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 48, i1 false)
  ret void
}

declare void @_ZN3viz23CompositorFrameMetadataC1Ev(%"class.viz::CompositorFrameMetadata"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15CompositorFrameC2EOS0_(%"class.viz::CompositorFrame"*, %"class.viz::CompositorFrame"* dereferenceable(296)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0
  tail call void @_ZN3viz23CompositorFrameMetadataC1EOS0_(%"class.viz::CompositorFrameMetadata"* %3, %"class.viz::CompositorFrameMetadata"* dereferenceable(248) %4) #6
  %5 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1
  %7 = bitcast %"class.std::__1::vector.49"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #6
  %8 = bitcast %"class.std::__1::vector.49"* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.49"* %5 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1, i32 0, i32 1
  %12 = bitcast %"struct.viz::TransferableResource"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = bitcast %"struct.viz::TransferableResource"** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.viz::TransferableResource"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast %"struct.viz::TransferableResource"** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast %"class.std::__1::vector.49"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #6
  %22 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2
  %23 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2
  %24 = bitcast %"class.std::__1::vector.70"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #6
  %25 = bitcast %"class.std::__1::vector.70"* %23 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::vector.70"* %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2, i32 0, i32 1
  %29 = bitcast %"class.std::__1::unique_ptr.72"** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %32 = bitcast %"class.std::__1::unique_ptr.72"** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"class.std::__1::unique_ptr.72"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.std::__1::unique_ptr.72"** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast %"class.std::__1::vector.70"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #6
  ret void
}

declare void @_ZN3viz23CompositorFrameMetadataC1EOS0_(%"class.viz::CompositorFrameMetadata"*, %"class.viz::CompositorFrameMetadata"* dereferenceable(248)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15CompositorFrameD2Ev(%"class.viz::CompositorFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr.72"* %4, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::unique_ptr.72"* %4 to i8*
  %8 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.72"* %9, %4
  br i1 %10, label %24, label %11

11:                                               ; preds = %6, %19
  %12 = phi %"class.std::__1::unique_ptr.72"* [ %13, %19 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %14, align 8
  store %"class.viz::CompositorRenderPass"* null, %"class.viz::CompositorRenderPass"** %14, align 8
  %16 = icmp eq %"class.viz::CompositorRenderPass"* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %11
  tail call void @_ZN3viz20CompositorRenderPassD1Ev(%"class.viz::CompositorRenderPass"* nonnull %15) #6
  %18 = bitcast %"class.viz::CompositorRenderPass"* %15 to i8*
  tail call void @_ZdlPv(i8* %18) #7
  br label %19

19:                                               ; preds = %17, %11
  %20 = icmp eq %"class.std::__1::unique_ptr.72"* %13, %4
  br i1 %20, label %21, label %11

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector.70"* %2 to i8**
  %23 = load i8*, i8** %22, align 8
  br label %24

24:                                               ; preds = %21, %6
  %25 = phi i8* [ %23, %21 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr.72"* %4, %"class.std::__1::unique_ptr.72"** %8, align 8
  tail call void @_ZdlPv(i8* %25) #7
  br label %26

26:                                               ; preds = %1, %24
  %27 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.49", %"class.std::__1::vector.49"* %27, i64 0, i32 0, i32 0
  %29 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %28, align 8
  %30 = icmp eq %"struct.viz::TransferableResource"* %29, null
  br i1 %30, label %45, label %31

31:                                               ; preds = %26
  %32 = bitcast %"struct.viz::TransferableResource"* %29 to i8*
  %33 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 1
  %34 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %33, align 8
  %35 = icmp eq %"struct.viz::TransferableResource"* %34, %29
  br i1 %35, label %43, label %36

36:                                               ; preds = %31, %36
  %37 = phi %"struct.viz::TransferableResource"* [ %38, %36 ], [ %34, %31 ]
  %38 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %37, i64 -1
  tail call void @_ZN3viz20TransferableResourceD1Ev(%"struct.viz::TransferableResource"* %38) #6
  %39 = icmp eq %"struct.viz::TransferableResource"* %38, %29
  br i1 %39, label %40, label %36

40:                                               ; preds = %36
  %41 = bitcast %"class.std::__1::vector.49"* %27 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %40, %31
  %44 = phi i8* [ %42, %40 ], [ %32, %31 ]
  store %"struct.viz::TransferableResource"* %29, %"struct.viz::TransferableResource"** %33, align 8
  tail call void @_ZdlPv(i8* %44) #7
  br label %45

45:                                               ; preds = %26, %43
  %46 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0
  tail call void @_ZN3viz23CompositorFrameMetadataD1Ev(%"class.viz::CompositorFrameMetadata"* %46) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3viz23CompositorFrameMetadataD1Ev(%"class.viz::CompositorFrameMetadata"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz15CompositorFrameaSEOS0_(%"class.viz::CompositorFrame"* returned, %"class.viz::CompositorFrame"* dereferenceable(296)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(248) %"class.viz::CompositorFrameMetadata"* @_ZN3viz23CompositorFrameMetadataaSEOS0_(%"class.viz::CompositorFrameMetadata"* %3, %"class.viz::CompositorFrameMetadata"* dereferenceable(248) %4) #6
  %6 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector.49", %"class.std::__1::vector.49"* %6, i64 0, i32 0, i32 0
  %9 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %8, align 8
  %10 = icmp eq %"struct.viz::TransferableResource"* %9, null
  br i1 %10, label %26, label %11

11:                                               ; preds = %2
  %12 = bitcast %"struct.viz::TransferableResource"* %9 to i8*
  %13 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 1
  %14 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %13, align 8
  %15 = icmp eq %"struct.viz::TransferableResource"* %14, %9
  br i1 %15, label %23, label %16

16:                                               ; preds = %11, %16
  %17 = phi %"struct.viz::TransferableResource"* [ %18, %16 ], [ %14, %11 ]
  %18 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %17, i64 -1
  tail call void @_ZN3viz20TransferableResourceD1Ev(%"struct.viz::TransferableResource"* %18) #6
  %19 = icmp eq %"struct.viz::TransferableResource"* %18, %9
  br i1 %19, label %20, label %16

20:                                               ; preds = %16
  %21 = bitcast %"class.std::__1::vector.49"* %6 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %11
  %24 = phi i8* [ %22, %20 ], [ %12, %11 ]
  store %"struct.viz::TransferableResource"* %9, %"struct.viz::TransferableResource"** %13, align 8
  tail call void @_ZdlPv(i8* %24) #7
  %25 = bitcast %"class.std::__1::vector.49"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #6
  br label %26

26:                                               ; preds = %2, %23
  %27 = bitcast %"class.std::__1::vector.49"* %7 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.49"* %6 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1, i32 0, i32 1
  %31 = bitcast %"struct.viz::TransferableResource"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 1
  %34 = bitcast %"struct.viz::TransferableResource"** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %36 = bitcast %"struct.viz::TransferableResource"** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast %"struct.viz::TransferableResource"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = bitcast %"class.std::__1::vector.49"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #6
  %41 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2
  %42 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2
  %43 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %41, i64 0, i32 0, i32 0
  %44 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %43, align 8
  %45 = icmp eq %"class.std::__1::unique_ptr.72"* %44, null
  br i1 %45, label %67, label %46

46:                                               ; preds = %26
  %47 = bitcast %"class.std::__1::unique_ptr.72"* %44 to i8*
  %48 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %49 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %48, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.72"* %49, %44
  br i1 %50, label %64, label %51

51:                                               ; preds = %46, %59
  %52 = phi %"class.std::__1::unique_ptr.72"* [ %53, %59 ], [ %49, %46 ]
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %52, i64 -1
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %54, align 8
  store %"class.viz::CompositorRenderPass"* null, %"class.viz::CompositorRenderPass"** %54, align 8
  %56 = icmp eq %"class.viz::CompositorRenderPass"* %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %51
  tail call void @_ZN3viz20CompositorRenderPassD1Ev(%"class.viz::CompositorRenderPass"* nonnull %55) #6
  %58 = bitcast %"class.viz::CompositorRenderPass"* %55 to i8*
  tail call void @_ZdlPv(i8* %58) #7
  br label %59

59:                                               ; preds = %57, %51
  %60 = icmp eq %"class.std::__1::unique_ptr.72"* %53, %44
  br i1 %60, label %61, label %51

61:                                               ; preds = %59
  %62 = bitcast %"class.std::__1::vector.70"* %41 to i8**
  %63 = load i8*, i8** %62, align 8
  br label %64

64:                                               ; preds = %61, %46
  %65 = phi i8* [ %63, %61 ], [ %47, %46 ]
  store %"class.std::__1::unique_ptr.72"* %44, %"class.std::__1::unique_ptr.72"** %48, align 8
  tail call void @_ZdlPv(i8* %65) #7
  %66 = bitcast %"class.std::__1::vector.70"* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 24, i1 false) #6
  br label %67

67:                                               ; preds = %26, %64
  %68 = bitcast %"class.std::__1::vector.70"* %42 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.70"* %41 to i64*
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2, i32 0, i32 1
  %72 = bitcast %"class.std::__1::unique_ptr.72"** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %75 = bitcast %"class.std::__1::unique_ptr.72"** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %77 = bitcast %"class.std::__1::unique_ptr.72"** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %80 = bitcast %"class.std::__1::unique_ptr.72"** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast %"class.std::__1::vector.70"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #6
  ret %"class.viz::CompositorFrame"* %0
}

declare dereferenceable(248) %"class.viz::CompositorFrameMetadata"* @_ZN3viz23CompositorFrameMetadataaSEOS0_(%"class.viz::CompositorFrameMetadata"*, %"class.viz::CompositorFrameMetadata"* dereferenceable(248)) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3viz15CompositorFrame21HasCopyOutputRequestsEv(%"class.viz::CompositorFrame"*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %3 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %2, align 8
  %4 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr.72"*, %"class.std::__1::unique_ptr.72"** %4, align 8
  br label %6

6:                                                ; preds = %9, %1
  %7 = phi %"class.std::__1::unique_ptr.72"* [ %3, %1 ], [ %10, %9 ]
  %8 = icmp eq %"class.std::__1::unique_ptr.72"* %7, %5
  br i1 %8, label %18, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %7, i64 -1
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %11, align 8
  %13 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %12, i64 0, i32 0, i32 10, i32 0, i32 0
  %14 = load %"class.std::__1::unique_ptr.103"*, %"class.std::__1::unique_ptr.103"** %13, align 8
  %15 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %12, i64 0, i32 0, i32 10, i32 0, i32 1
  %16 = load %"class.std::__1::unique_ptr.103"*, %"class.std::__1::unique_ptr.103"** %15, align 8
  %17 = icmp eq %"class.std::__1::unique_ptr.103"* %14, %16
  br i1 %17, label %6, label %18

18:                                               ; preds = %6, %9
  %19 = phi i1 [ true, %9 ], [ false, %6 ]
  ret i1 %19
}

; Function Attrs: nounwind
declare void @_ZN3viz20TransferableResourceD1Ev(%"struct.viz::TransferableResource"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN3viz20CompositorRenderPassD1Ev(%"class.viz::CompositorRenderPass"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
