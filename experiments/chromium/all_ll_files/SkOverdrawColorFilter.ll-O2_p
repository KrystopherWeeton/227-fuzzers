; ModuleID = '../../third_party/skia/src/effects/SkOverdrawColorFilter.cpp'
source_filename = "../../third_party/skia/src/effects/SkOverdrawColorFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.sk_sp = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkString = type { %class.sk_sp.2 }
%class.sk_sp.2 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.sk_sp.1 = type { %class.SkRuntimeEffect* }
%class.SkRuntimeEffect = type <{ %class.SkRefCnt.base, i32, %class.SkString, %"class.std::__1::unique_ptr", %"class.SkSL::FunctionDefinition"*, %"class.std::__1::vector", %"class.std::__1::vector.7", %"class.std::__1::vector.14", %"class.std::__1::unique_ptr.21", i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkSL::Program"* }
%"struct.SkSL::Program" = type opaque
%"class.SkSL::FunctionDefinition" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.SkRuntimeEffect::Uniform"*, %"struct.SkRuntimeEffect::Uniform"*, %"class.std::__1::__compressed_pair.4" }
%"struct.SkRuntimeEffect::Uniform" = type <{ %class.SkString, i64, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.SkRuntimeEffect::Uniform"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"struct.SkRuntimeEffect::Child"*, %"struct.SkRuntimeEffect::Child"*, %"class.std::__1::__compressed_pair.9" }
%"struct.SkRuntimeEffect::Child" = type { %class.SkString, i32, i32 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.SkRuntimeEffect::Child"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"struct.SkSL::SampleUsage"*, %"struct.SkSL::SampleUsage"*, %"class.std::__1::__compressed_pair.16" }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.SkSL::SampleUsage"* }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.SkFilterColorProgram* }
%class.SkFilterColorProgram = type <{ %"class.skvm::Program", %"class.std::__1::vector.30", i8, [7 x i8] }>
%"class.skvm::Program" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.skvm::Program::Impl"* }
%"struct.skvm::Program::Impl" = type opaque
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.SkFilterColorProgram::SampleCall"*, %"struct.SkFilterColorProgram::SampleCall"*, %"class.std::__1::__compressed_pair.32" }
%"struct.SkFilterColorProgram::SampleCall" = type { i32, i32, %union.anon }
%union.anon = type { %struct.SkRGBA4f }
%struct.SkRGBA4f = type { float, float, float, float }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.SkFilterColorProgram::SampleCall"* }
%class.sk_sp.40 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.SkRuntimeEffect::Result" = type { %class.sk_sp.1, %class.SkString }
%"struct.SkRuntimeEffect::Options" = type { i8, i8 }

$_ZN15SkRuntimeEffect18MakeForColorFilterE8SkString = comdat any

@.str = private unnamed_addr constant [611 x i8] c"uniform half4 color0;\0A               uniform half4 color1;\0A               uniform half4 color2;\0A               uniform half4 color3;\0A               uniform half4 color4;\0A               uniform half4 color5;\0A\0A               half4 main(half4 color) {\0A                   half alpha = 255.0 * color.a;\0A                   color = alpha < 0.5 ? color0\0A                         : alpha < 1.5 ? color1\0A                         : alpha < 2.5 ? color2\0A                         : alpha < 3.5 ? color3\0A                         : alpha < 4.5 ? color4 : color5;\0A                   return color;\0A               }\0A            \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkOverdrawColorFilter16MakeWithSkColorsEPKj(%class.sk_sp* noalias sret, i32* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkString, align 8
  %4 = alloca %class.sk_sp.1, align 8
  %5 = alloca %class.sk_sp.40, align 8
  %6 = alloca %class.sk_sp.40, align 8
  %7 = bitcast %class.sk_sp.1* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #4
  %8 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %4, i64 0, i32 0
  store %class.SkRuntimeEffect* inttoptr (i64 -6148914691236517206 to %class.SkRuntimeEffect*), %class.SkRuntimeEffect** %8, align 8
  %9 = bitcast %class.SkString* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %3, i8* getelementptr inbounds ([611 x i8], [611 x i8]* @.str, i64 0, i64 0)) #4, !noalias !2
  call void @_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringES1_(%class.sk_sp.1* nonnull sret %4, void (%"struct.SkRuntimeEffect::Result"*, %class.SkString*)* nonnull @_ZN15SkRuntimeEffect18MakeForColorFilterE8SkString, %class.SkString* nonnull %3) #4
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %10 = load %class.SkRuntimeEffect*, %class.SkRuntimeEffect** %8, align 8
  %11 = icmp eq %class.SkRuntimeEffect* %10, null
  br i1 %11, label %153, label %12

12:                                               ; preds = %2
  %13 = bitcast %class.sk_sp.40* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #4
  %14 = getelementptr inbounds %class.sk_sp.40, %class.sk_sp.40* %5, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %14, align 8
  call void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.40* nonnull sret %5, i64 96) #4
  %15 = load %class.SkData*, %class.SkData** %14, align 8
  %16 = getelementptr inbounds %class.SkData, %class.SkData* %15, i64 0, i32 3
  %17 = bitcast i8** %16 to %struct.SkRGBA4f**
  %18 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %17, align 8
  %19 = load i32, i32* %1, align 4
  %20 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %19) #4
  %21 = extractvalue { <2 x float>, <2 x float> } %20, 0
  %22 = extractvalue { <2 x float>, <2 x float> } %20, 1
  %23 = extractelement <2 x float> %21, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = fmul float %23, %24
  %26 = insertelement <2 x float> undef, float %25, i32 0
  %27 = extractelement <2 x float> %21, i32 1
  %28 = fmul float %24, %27
  %29 = insertelement <2 x float> %26, float %28, i32 1
  %30 = extractelement <2 x float> %22, i32 0
  %31 = fmul float %24, %30
  %32 = insertelement <2 x float> %22, float %31, i32 0
  %33 = bitcast %struct.SkRGBA4f* %18 to <2 x float>*
  store <2 x float> %29, <2 x float>* %33, align 4
  %34 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 0, i32 2
  %35 = bitcast float* %34 to <2 x float>*
  store <2 x float> %32, <2 x float>* %35, align 4
  %36 = getelementptr inbounds i32, i32* %1, i64 1
  %37 = load i32, i32* %36, align 4
  %38 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %37) #4
  %39 = extractvalue { <2 x float>, <2 x float> } %38, 0
  %40 = extractvalue { <2 x float>, <2 x float> } %38, 1
  %41 = extractelement <2 x float> %39, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %43 = fmul float %41, %42
  %44 = insertelement <2 x float> undef, float %43, i32 0
  %45 = extractelement <2 x float> %39, i32 1
  %46 = fmul float %42, %45
  %47 = insertelement <2 x float> %44, float %46, i32 1
  %48 = extractelement <2 x float> %40, i32 0
  %49 = fmul float %42, %48
  %50 = insertelement <2 x float> %40, float %49, i32 0
  %51 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 1
  %52 = bitcast %struct.SkRGBA4f* %51 to <2 x float>*
  store <2 x float> %47, <2 x float>* %52, align 4
  %53 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 1, i32 2
  %54 = bitcast float* %53 to <2 x float>*
  store <2 x float> %50, <2 x float>* %54, align 4
  %55 = getelementptr inbounds i32, i32* %1, i64 2
  %56 = load i32, i32* %55, align 4
  %57 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %56) #4
  %58 = extractvalue { <2 x float>, <2 x float> } %57, 0
  %59 = extractvalue { <2 x float>, <2 x float> } %57, 1
  %60 = extractelement <2 x float> %58, i32 0
  %61 = extractelement <2 x float> %59, i32 1
  %62 = fmul float %60, %61
  %63 = insertelement <2 x float> undef, float %62, i32 0
  %64 = extractelement <2 x float> %58, i32 1
  %65 = fmul float %61, %64
  %66 = insertelement <2 x float> %63, float %65, i32 1
  %67 = extractelement <2 x float> %59, i32 0
  %68 = fmul float %61, %67
  %69 = insertelement <2 x float> %59, float %68, i32 0
  %70 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 2
  %71 = bitcast %struct.SkRGBA4f* %70 to <2 x float>*
  store <2 x float> %66, <2 x float>* %71, align 4
  %72 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 2, i32 2
  %73 = bitcast float* %72 to <2 x float>*
  store <2 x float> %69, <2 x float>* %73, align 4
  %74 = getelementptr inbounds i32, i32* %1, i64 3
  %75 = load i32, i32* %74, align 4
  %76 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %75) #4
  %77 = extractvalue { <2 x float>, <2 x float> } %76, 0
  %78 = extractvalue { <2 x float>, <2 x float> } %76, 1
  %79 = extractelement <2 x float> %77, i32 0
  %80 = extractelement <2 x float> %78, i32 1
  %81 = fmul float %79, %80
  %82 = insertelement <2 x float> undef, float %81, i32 0
  %83 = extractelement <2 x float> %77, i32 1
  %84 = fmul float %80, %83
  %85 = insertelement <2 x float> %82, float %84, i32 1
  %86 = extractelement <2 x float> %78, i32 0
  %87 = fmul float %80, %86
  %88 = insertelement <2 x float> %78, float %87, i32 0
  %89 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 3
  %90 = bitcast %struct.SkRGBA4f* %89 to <2 x float>*
  store <2 x float> %85, <2 x float>* %90, align 4
  %91 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 3, i32 2
  %92 = bitcast float* %91 to <2 x float>*
  store <2 x float> %88, <2 x float>* %92, align 4
  %93 = getelementptr inbounds i32, i32* %1, i64 4
  %94 = load i32, i32* %93, align 4
  %95 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %94) #4
  %96 = extractvalue { <2 x float>, <2 x float> } %95, 0
  %97 = extractvalue { <2 x float>, <2 x float> } %95, 1
  %98 = extractelement <2 x float> %96, i32 0
  %99 = extractelement <2 x float> %97, i32 1
  %100 = fmul float %98, %99
  %101 = insertelement <2 x float> undef, float %100, i32 0
  %102 = extractelement <2 x float> %96, i32 1
  %103 = fmul float %99, %102
  %104 = insertelement <2 x float> %101, float %103, i32 1
  %105 = extractelement <2 x float> %97, i32 0
  %106 = fmul float %99, %105
  %107 = insertelement <2 x float> %97, float %106, i32 0
  %108 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 4
  %109 = bitcast %struct.SkRGBA4f* %108 to <2 x float>*
  store <2 x float> %104, <2 x float>* %109, align 4
  %110 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 4, i32 2
  %111 = bitcast float* %110 to <2 x float>*
  store <2 x float> %107, <2 x float>* %111, align 4
  %112 = getelementptr inbounds i32, i32* %1, i64 5
  %113 = load i32, i32* %112, align 4
  %114 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %113) #4
  %115 = extractvalue { <2 x float>, <2 x float> } %114, 0
  %116 = extractvalue { <2 x float>, <2 x float> } %114, 1
  %117 = extractelement <2 x float> %115, i32 0
  %118 = extractelement <2 x float> %116, i32 1
  %119 = fmul float %117, %118
  %120 = insertelement <2 x float> undef, float %119, i32 0
  %121 = extractelement <2 x float> %115, i32 1
  %122 = fmul float %118, %121
  %123 = insertelement <2 x float> %120, float %122, i32 1
  %124 = extractelement <2 x float> %116, i32 0
  %125 = fmul float %118, %124
  %126 = insertelement <2 x float> %116, float %125, i32 0
  %127 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 5
  %128 = bitcast %struct.SkRGBA4f* %127 to <2 x float>*
  store <2 x float> %123, <2 x float>* %128, align 4
  %129 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %18, i64 5, i32 2
  %130 = bitcast float* %129 to <2 x float>*
  store <2 x float> %126, <2 x float>* %130, align 4
  %131 = load %class.SkRuntimeEffect*, %class.SkRuntimeEffect** %8, align 8
  %132 = bitcast %class.sk_sp.40* %5 to i64*
  %133 = load i64, i64* %132, align 8
  store %class.SkData* null, %class.SkData** %14, align 8
  %134 = bitcast %class.sk_sp.40* %6 to i64*
  store i64 %133, i64* %134, align 8
  call void @_ZNK15SkRuntimeEffect15makeColorFilterE5sk_spI6SkDataE(%class.sk_sp* sret %0, %class.SkRuntimeEffect* %131, %class.sk_sp.40* nonnull %6) #4
  %135 = getelementptr inbounds %class.sk_sp.40, %class.sk_sp.40* %6, i64 0, i32 0
  %136 = load %class.SkData*, %class.SkData** %135, align 8
  %137 = icmp eq %class.SkData* %136, null
  br i1 %137, label %144, label %138

138:                                              ; preds = %12
  %139 = getelementptr inbounds %class.SkData, %class.SkData* %136, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = atomicrmw add i32* %139, i32 -1 acq_rel
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %142, label %144

142:                                              ; preds = %138
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %136) #4
  %143 = bitcast %class.SkData* %136 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %143) #4
  br label %144

144:                                              ; preds = %12, %138, %142
  %145 = load %class.SkData*, %class.SkData** %14, align 8
  %146 = icmp eq %class.SkData* %145, null
  br i1 %146, label %155, label %147

147:                                              ; preds = %144
  %148 = getelementptr inbounds %class.SkData, %class.SkData* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = atomicrmw add i32* %148, i32 -1 acq_rel
  %150 = icmp eq i32 %149, 1
  br i1 %150, label %151, label %155

151:                                              ; preds = %147
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %145) #4
  %152 = bitcast %class.SkData* %145 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %152) #4
  br label %155

153:                                              ; preds = %2
  %154 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkColorFilter* null, %class.SkColorFilter** %154, align 8
  br label %168

155:                                              ; preds = %151, %147, %144
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #4
  %156 = load %class.SkRuntimeEffect*, %class.SkRuntimeEffect** %8, align 8
  %157 = icmp eq %class.SkRuntimeEffect* %156, null
  br i1 %157, label %168, label %158

158:                                              ; preds = %155
  %159 = getelementptr inbounds %class.SkRuntimeEffect, %class.SkRuntimeEffect* %156, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %160 = atomicrmw add i32* %159, i32 -1 acq_rel
  %161 = icmp eq i32 %160, 1
  br i1 %161, label %162, label %168

162:                                              ; preds = %158
  %163 = bitcast %class.SkRuntimeEffect* %156 to %class.SkRefCntBase*
  %164 = bitcast %class.SkRuntimeEffect* %156 to void (%class.SkRefCntBase*)***
  %165 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %164, align 8
  %166 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %165, i64 2
  %167 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %166, align 8
  call void %167(%class.SkRefCntBase* nonnull %163) #4
  br label %168

168:                                              ; preds = %153, %155, %158, %162
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkRuntimeEffect18MakeForColorFilterE8SkString(%"struct.SkRuntimeEffect::Result"* noalias sret, %class.SkString*) #0 comdat align 2 {
  %3 = alloca %class.SkString, align 8
  %4 = alloca %"struct.SkRuntimeEffect::Options", align 1
  call void @_ZN8SkStringC1EOS_(%class.SkString* nonnull %3, %class.SkString* dereferenceable(8) %1) #4
  %5 = getelementptr inbounds %"struct.SkRuntimeEffect::Options", %"struct.SkRuntimeEffect::Options"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %5) #4
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.SkRuntimeEffect::Options", %"struct.SkRuntimeEffect::Options"* %4, i64 0, i32 1
  store i8 1, i8* %6, align 1
  call void @_ZN15SkRuntimeEffect18MakeForColorFilterE8SkStringRKNS_7OptionsE(%"struct.SkRuntimeEffect::Result"* sret %0, %class.SkString* nonnull %3, %"struct.SkRuntimeEffect::Options"* nonnull dereferenceable(2) %4) #4
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %5) #4
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %3) #4
  ret void
}

declare void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.40* sret, i64) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK15SkRuntimeEffect15makeColorFilterE5sk_spI6SkDataE(%class.sk_sp* sret, %class.SkRuntimeEffect*, %class.sk_sp.40*) local_unnamed_addr #2

declare void @_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringES1_(%class.sk_sp.1* sret, void (%"struct.SkRuntimeEffect::Result"*, %class.SkString*)*, %class.SkString*) local_unnamed_addr #2

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #3

declare void @_ZN15SkRuntimeEffect18MakeForColorFilterE8SkStringRKNS_7OptionsE(%"struct.SkRuntimeEffect::Result"* sret, %class.SkString*, %"struct.SkRuntimeEffect::Options"* dereferenceable(2)) local_unnamed_addr #2

declare void @_ZN8SkStringC1EOS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringEPKc: argument 0"}
!4 = distinct !{!4, !"_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringEPKc"}
