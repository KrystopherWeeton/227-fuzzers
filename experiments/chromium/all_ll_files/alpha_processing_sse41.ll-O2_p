; ModuleID = '../../third_party/libwebp/src/dsp/alpha_processing_sse41.c'
source_filename = "../../third_party/libwebp/src/dsp/alpha_processing_sse41.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@WebPExtractAlpha = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebPInitAlphaProcessingSSE41() local_unnamed_addr #0 {
  store i32 (i8*, i32, i32, i32, i8*, i32)* @ExtractAlpha_SSE41, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @ExtractAlpha_SSE41(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) #1 {
  %7 = add nsw i32 %2, -1
  %8 = and i32 %7, -16
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %106

10:                                               ; preds = %6
  %11 = icmp sgt i32 %8, 0
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = sext i32 %8 to i64
  %15 = zext i32 %2 to i64
  %16 = sub nsw i64 0, %15
  br label %17

17:                                               ; preds = %100, %10
  %18 = phi i8* [ %0, %10 ], [ %102, %100 ]
  %19 = phi i8* [ %4, %10 ], [ %103, %100 ]
  %20 = phi i32 [ 255, %10 ], [ %101, %100 ]
  %21 = phi i32 [ 0, %10 ], [ %104, %100 ]
  %22 = phi <2 x i64> [ <i64 -1, i64 -1>, %10 ], [ %28, %100 ]
  br i1 %11, label %23, label %27

23:                                               ; preds = %17
  %24 = bitcast i8* %18 to <2 x i64>*
  br label %51

25:                                               ; preds = %51
  %26 = trunc i64 %78 to i32
  br label %27

27:                                               ; preds = %25, %17
  %28 = phi <2 x i64> [ %22, %17 ], [ %76, %25 ]
  %29 = phi i32 [ 0, %17 ], [ %26, %25 ]
  %30 = icmp slt i32 %29, %2
  br i1 %30, label %31, label %100

31:                                               ; preds = %27
  %32 = zext i32 %29 to i64
  %33 = sub nsw i64 %15, %32
  %34 = xor i64 %32, -1
  %35 = and i64 %33, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %31
  %38 = shl nuw nsw i64 %32, 2
  %39 = and i64 %38, 4294967292
  %40 = getelementptr inbounds i8, i8* %18, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i8, i8* %19, i64 %32
  store i8 %41, i8* %43, align 1
  %44 = and i32 %20, %42
  %45 = add nuw nsw i64 %32, 1
  br label %46

46:                                               ; preds = %37, %31
  %47 = phi i32 [ %44, %37 ], [ undef, %31 ]
  %48 = phi i64 [ %45, %37 ], [ %32, %31 ]
  %49 = phi i32 [ %44, %37 ], [ %20, %31 ]
  %50 = icmp eq i64 %34, %16
  br i1 %50, label %100, label %80

51:                                               ; preds = %23, %51
  %52 = phi i64 [ 0, %23 ], [ %78, %51 ]
  %53 = phi <2 x i64> [ %22, %23 ], [ %76, %51 ]
  %54 = phi <2 x i64>* [ %24, %23 ], [ %77, %51 ]
  %55 = bitcast <2 x i64>* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 1
  %58 = bitcast <2 x i64>* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 2
  %61 = bitcast <2 x i64>* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 3
  %64 = bitcast <2 x i64>* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %67 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 0, i32 4, i32 8, i32 12, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %68 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 4, i32 8, i32 12, i32 16, i32 16, i32 16, i32 16>
  %69 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 4, i32 8, i32 12>
  %70 = or <16 x i8> %67, %66
  %71 = or <16 x i8> %70, %68
  %72 = or <16 x i8> %71, %69
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %19, i64 %52
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %75, align 1
  %76 = and <2 x i64> %53, %73
  %77 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 4
  %78 = add nuw nsw i64 %52, 16
  %79 = icmp slt i64 %78, %14
  br i1 %79, label %51, label %25

80:                                               ; preds = %46, %80
  %81 = phi i64 [ %98, %80 ], [ %48, %46 ]
  %82 = phi i32 [ %97, %80 ], [ %49, %46 ]
  %83 = shl i64 %81, 2
  %84 = and i64 %83, 4294967292
  %85 = getelementptr inbounds i8, i8* %18, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %19, i64 %81
  store i8 %86, i8* %88, align 1
  %89 = and i32 %82, %87
  %90 = add nuw nsw i64 %81, 1
  %91 = shl i64 %90, 2
  %92 = and i64 %91, 4294967292
  %93 = getelementptr inbounds i8, i8* %18, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds i8, i8* %19, i64 %90
  store i8 %94, i8* %96, align 1
  %97 = and i32 %89, %95
  %98 = add nuw nsw i64 %81, 2
  %99 = icmp eq i64 %98, %15
  br i1 %99, label %100, label %80

100:                                              ; preds = %46, %80, %27
  %101 = phi i32 [ %20, %27 ], [ %47, %46 ], [ %97, %80 ]
  %102 = getelementptr inbounds i8, i8* %18, i64 %12
  %103 = getelementptr inbounds i8, i8* %19, i64 %13
  %104 = add nuw nsw i32 %21, 1
  %105 = icmp eq i32 %104, %3
  br i1 %105, label %106, label %17

106:                                              ; preds = %100, %6
  %107 = phi <2 x i64> [ <i64 -1, i64 -1>, %6 ], [ %28, %100 ]
  %108 = phi i32 [ 255, %6 ], [ %101, %100 ]
  %109 = or i32 %108, 65280
  %110 = bitcast <2 x i64> %107 to <16 x i8>
  %111 = icmp eq <16 x i8> %110, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %112 = bitcast <16 x i1> %111 to i16
  %113 = zext i16 %112 to i32
  %114 = and i32 %109, %113
  %115 = icmp eq i32 %114, 65535
  %116 = zext i1 %115 to i32
  ret i32 %116
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
