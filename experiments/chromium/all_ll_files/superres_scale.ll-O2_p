; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/superres_scale.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/superres_scale.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.size_params_type = type { i32, i32, i8 }

@calculate_next_resize_scale.seed = internal unnamed_addr global i32 56789, align 4
@calculate_next_superres_scale.seed = internal unnamed_addr global i32 34567, align 4
@av1_fwd_txfm2d_16x4 = external local_unnamed_addr global void (i16*, i32*, i32, i8, i32)*, align 8
@.str = private unnamed_addr constant [42 x i8] c"Failed to reallocate scaled source buffer\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_superres_in_recode_allowed(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 0, i32 5
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 2
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %11 = load i32, i32* %10, align 16
  %12 = icmp sgt i32 %11, 1
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %5, %9, %1
  %15 = phi i32 [ 0, %5 ], [ 0, %1 ], [ %13, %9 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_setup_frame_size(%struct.AV1_COMP*) local_unnamed_addr #2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.size_params_type, align 8
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 8
  store i8 8, i8* %9, align 8
  %10 = bitcast %struct.size_params_type* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 12, i1 false) #4
  %11 = getelementptr inbounds %struct.size_params_type, %struct.size_params_type* %8, i64 0, i32 0
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %struct.size_params_type, %struct.size_params_type* %8, i64 0, i32 1
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %struct.size_params_type, %struct.size_params_type* %8, i64 0, i32 2
  store i8 8, i8* %17, align 8
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %19 = load i32, i32* %18, align 4
  switch i32 %19, label %42 [
    i32 0, label %20
    i32 1, label %278
  ]

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %22 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %21, align 16
  %23 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %22, i64 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %42

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %22, i64 0, i32 16
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %32 = load i32, i32* %31, align 16
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, -1
  %36 = icmp slt i32 %32, %35
  br i1 %36, label %37, label %42

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %39 = load i32, i32* %38, align 16
  store i32 %39, i32* %11, align 8
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %14, align 4
  br label %278

42:                                               ; preds = %30, %26, %20, %1
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %44 = load i8, i8* %43, align 8
  %45 = icmp eq i8 %44, 1
  br i1 %45, label %278, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  store i32 %48, i32* %11, align 8
  store i32 %52, i32* %14, align 4
  store i32 0, i32* %51, align 4
  store i32 0, i32* %47, align 4
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 4
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %278, label %95

58:                                               ; preds = %50, %46
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %60 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %61 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %60, i64 0, i32 13
  %62 = load i8, i8* %61, align 2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %87

64:                                               ; preds = %58
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 6, i32 0
  %66 = load i8, i8* %65, align 1
  switch i8 %66, label %87 [
    i8 2, label %77
    i8 1, label %67
  ]

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %69 = load i8, i8* %68, align 16
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 6, i32 2
  %73 = load i8, i8* %72, align 1
  br label %87

74:                                               ; preds = %67
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 6, i32 1
  %76 = load i8, i8* %75, align 1
  br label %87

77:                                               ; preds = %64
  %78 = load i32, i32* @calculate_next_resize_scale.seed, align 4
  %79 = mul i32 %78, 1103515245
  %80 = add i32 %79, 12345
  store i32 %80, i32* @calculate_next_resize_scale.seed, align 4
  %81 = lshr i32 %80, 16
  %82 = trunc i32 %81 to i16
  %83 = and i16 %82, 32767
  %84 = urem i16 %83, 9
  %85 = trunc i16 %84 to i8
  %86 = add nuw nsw i8 %85, 8
  br label %87

87:                                               ; preds = %77, %74, %71, %64, %58
  %88 = phi i8 [ 8, %58 ], [ %86, %77 ], [ %73, %71 ], [ %76, %74 ], [ 8, %64 ]
  %89 = zext i8 %88 to i32
  store i32 %13, i32* %11, align 8
  store i32 %16, i32* %14, align 4
  call void @av1_calculate_scaled_size(i32* nonnull %11, i32* %14, i32 %89) #4
  %90 = load i32, i32* %18, align 4
  %91 = icmp eq i32 %90, 1
  br i1 %91, label %195, label %92

92:                                               ; preds = %87
  %93 = load i8, i8* %43, align 8
  %94 = icmp eq i8 %93, 1
  br i1 %94, label %195, label %95

95:                                               ; preds = %54, %92
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  %98 = load i32, i32* %97, align 16
  switch i32 %98, label %195 [
    i32 4, label %153
    i32 1, label %99
    i32 2, label %109
    i32 3, label %119
  ]

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %101 = load i8, i8* %100, align 16
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 3
  %105 = load i8, i8* %104, align 1
  br label %195

106:                                              ; preds = %99
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 2
  %108 = load i8, i8* %107, align 4
  br label %195

109:                                              ; preds = %95
  %110 = load i32, i32* @calculate_next_superres_scale.seed, align 4
  %111 = mul i32 %110, 1103515245
  %112 = add i32 %111, 12345
  store i32 %112, i32* @calculate_next_superres_scale.seed, align 4
  %113 = lshr i32 %112, 16
  %114 = trunc i32 %113 to i16
  %115 = and i16 %114, 32767
  %116 = urem i16 %115, 9
  %117 = trunc i16 %116 to i8
  %118 = add nuw nsw i8 %117, 8
  br label %195

119:                                              ; preds = %95
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %121 = load i8, i8* %120, align 1, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %195

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %125 = load i32, i32* %124, align 4
  switch i32 %125, label %130 [
    i32 0, label %126
    i32 2, label %126
  ]

126:                                              ; preds = %123, %123
  %127 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %96, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* %15, align 4
  call void @av1_set_target_rate(%struct.AV1_COMP* %0, i32 %128, i32 %129) #4
  br label %130

130:                                              ; preds = %126, %123
  %131 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %131) #4
  store i32 -1431655766, i32* %4, align 4
  %132 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %132) #4
  store i32 -1431655766, i32* %5, align 4
  %133 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %96, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = load i32, i32* %15, align 4
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %137 = load i8, i8* %136, align 16
  %138 = zext i8 %137 to i32
  %139 = call i32 @av1_rc_pick_q_and_bounds(%struct.AV1_COMP* %0, i32 %134, i32 %135, i32 %138, i32* nonnull %4, i32* nonnull %5) #4
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %141 = load i8, i8* %140, align 16
  %142 = and i8 %141, -3
  %143 = icmp eq i8 %142, 0
  %144 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 1
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 0
  %146 = select i1 %143, i32* %144, i32* %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp sgt i32 %139, %147
  br i1 %148, label %149, label %151

149:                                              ; preds = %130
  %150 = call fastcc zeroext i8 @get_superres_denom_for_qindex(%struct.AV1_COMP* %0, i32 %139) #4
  br label %151

151:                                              ; preds = %149, %130
  %152 = phi i8 [ %150, %149 ], [ 8, %130 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %132) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #4
  br label %195

153:                                              ; preds = %95
  %154 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %155 = load i8, i8* %154, align 1, !range !2
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %157, label %195

157:                                              ; preds = %153
  %158 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %159 = load i32, i32* %158, align 4
  switch i32 %159, label %164 [
    i32 0, label %160
    i32 2, label %160
  ]

160:                                              ; preds = %157, %157
  %161 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %96, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = load i32, i32* %15, align 4
  call void @av1_set_target_rate(%struct.AV1_COMP* %0, i32 %162, i32 %163) #4
  br label %164

164:                                              ; preds = %160, %157
  %165 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165) #4
  store i32 -1431655766, i32* %6, align 4
  %166 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #4
  store i32 -1431655766, i32* %7, align 4
  %167 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %96, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = load i32, i32* %15, align 4
  %170 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %171 = load i8, i8* %170, align 16
  %172 = zext i8 %171 to i32
  %173 = call i32 @av1_rc_pick_q_and_bounds(%struct.AV1_COMP* %0, i32 %168, i32 %169, i32 %172, i32* nonnull %6, i32* nonnull %7) #4
  %174 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 0, i32 5
  %175 = load i8, i8* %174, align 4
  %176 = icmp eq i8 %175, 2
  %177 = select i1 %176, i32 128, i32 0
  %178 = icmp sgt i32 %173, %177
  br i1 %178, label %179, label %193

179:                                              ; preds = %164
  %180 = icmp eq i8 %175, 0
  br i1 %180, label %181, label %191

181:                                              ; preds = %179
  %182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %183 = load i8, i8* %182, align 16
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %181
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 3
  %187 = load i8, i8* %186, align 1
  br label %193

188:                                              ; preds = %181
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 2
  %190 = load i8, i8* %189, align 4
  br label %193

191:                                              ; preds = %179
  %192 = call fastcc zeroext i8 @get_superres_denom_for_qindex(%struct.AV1_COMP* %0, i32 %173) #4
  br label %193

193:                                              ; preds = %191, %188, %185, %164
  %194 = phi i8 [ %187, %185 ], [ %190, %188 ], [ %192, %191 ], [ 8, %164 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165) #4
  br label %195

195:                                              ; preds = %193, %153, %151, %119, %109, %106, %103, %95, %92, %87
  %196 = phi i8 [ 8, %92 ], [ 8, %153 ], [ %194, %193 ], [ 8, %119 ], [ %152, %151 ], [ %118, %109 ], [ %105, %103 ], [ %108, %106 ], [ 8, %95 ], [ 8, %87 ]
  store i8 %196, i8* %17, align 8
  %197 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 6, i32 0
  %198 = load i8, i8* %197, align 8
  %199 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  %200 = load i32, i32* %199, align 16
  %201 = load i32, i32* %12, align 4
  %202 = load i32, i32* %15, align 4
  %203 = load i32, i32* %11, align 8
  %204 = zext i8 %196 to i32
  %205 = shl nsw i32 %203, 3
  %206 = mul nsw i32 %201, %204
  %207 = sdiv i32 %206, 2
  %208 = icmp slt i32 %205, %207
  br i1 %208, label %209, label %278

209:                                              ; preds = %195
  %210 = shl i32 %201, 3
  %211 = ashr i32 %203, 1
  %212 = add nsw i32 %211, %210
  %213 = sdiv i32 %212, %203
  %214 = shl i32 %202, 3
  %215 = load i32, i32* %14, align 4
  %216 = ashr i32 %215, 1
  %217 = add nsw i32 %216, %214
  %218 = sdiv i32 %217, %215
  %219 = icmp sgt i32 %213, %218
  %220 = select i1 %219, i32 %213, i32 %218
  %221 = icmp ne i8 %198, 2
  %222 = icmp eq i32 %200, 2
  %223 = and i1 %221, %222
  br i1 %223, label %224, label %235

224:                                              ; preds = %209
  %225 = sdiv i32 128, %220
  %226 = trunc i32 %225 to i8
  store i8 %226, i8* %17, align 8
  %227 = and i32 %225, 255
  %228 = mul nsw i32 %227, %201
  %229 = sdiv i32 %228, 2
  %230 = icmp slt i32 %205, %229
  %231 = icmp ugt i8 %226, 8
  %232 = and i1 %231, %230
  br i1 %232, label %233, label %278

233:                                              ; preds = %224
  %234 = add i8 %226, -1
  store i8 %234, i8* %17, align 8
  br label %278

235:                                              ; preds = %209
  %236 = icmp eq i8 %198, 2
  %237 = icmp ne i32 %200, 2
  %238 = and i1 %236, %237
  br i1 %238, label %239, label %254

239:                                              ; preds = %235
  %240 = udiv i8 -128, %196
  %241 = zext i8 %240 to i32
  store i32 %201, i32* %11, align 8
  store i32 %202, i32* %14, align 4
  call void @av1_calculate_scaled_size(i32* nonnull %11, i32* %14, i32 %241) #4
  %242 = load i32, i32* %11, align 8
  %243 = load i8, i8* %17, align 8
  %244 = zext i8 %243 to i32
  %245 = shl nsw i32 %242, 3
  %246 = mul nsw i32 %201, %244
  %247 = sdiv i32 %246, 2
  %248 = icmp slt i32 %245, %247
  %249 = icmp ult i8 %196, 15
  %250 = and i1 %249, %248
  br i1 %250, label %251, label %278

251:                                              ; preds = %239
  %252 = add nsw i32 %241, -1
  store i32 %201, i32* %11, align 8
  store i32 %202, i32* %14, align 4
  call void @av1_calculate_scaled_size(i32* nonnull %11, i32* %14, i32 %252) #4
  %253 = load i8, i8* %17, align 8
  br label %278

254:                                              ; preds = %235
  %255 = and i1 %236, %222
  br i1 %255, label %256, label %278

256:                                              ; preds = %254, %274
  %257 = phi i8 [ %268, %274 ], [ %196, %254 ]
  %258 = phi i32 [ %266, %274 ], [ %220, %254 ]
  %259 = zext i8 %257 to i32
  %260 = icmp sgt i32 %258, %259
  br i1 %260, label %261, label %263

261:                                              ; preds = %256
  %262 = add nsw i32 %258, -1
  br label %265

263:                                              ; preds = %256
  %264 = add i8 %257, -1
  store i8 %264, i8* %17, align 8
  br label %265

265:                                              ; preds = %263, %261
  %266 = phi i32 [ %262, %261 ], [ %258, %263 ]
  store i32 %201, i32* %11, align 8
  store i32 %202, i32* %14, align 4
  call void @av1_calculate_scaled_size(i32* nonnull %11, i32* %14, i32 %266) #4
  %267 = load i32, i32* %11, align 8
  %268 = load i8, i8* %17, align 8
  %269 = zext i8 %268 to i32
  %270 = shl nsw i32 %267, 3
  %271 = mul nsw i32 %201, %269
  %272 = sdiv i32 %271, 2
  %273 = icmp slt i32 %270, %272
  br i1 %273, label %274, label %278

274:                                              ; preds = %265
  %275 = icmp sgt i32 %266, 8
  %276 = icmp ugt i8 %268, 8
  %277 = or i1 %275, %276
  br i1 %277, label %256, label %278

278:                                              ; preds = %265, %274, %1, %37, %42, %54, %195, %224, %233, %239, %251, %254
  %279 = phi i8 [ 8, %42 ], [ 8, %1 ], [ %196, %254 ], [ %253, %251 ], [ %243, %239 ], [ %234, %233 ], [ %226, %224 ], [ %196, %195 ], [ 8, %54 ], [ 8, %37 ], [ %268, %274 ], [ %268, %265 ]
  %280 = bitcast %struct.size_params_type* %8 to i64*
  %281 = load i64, i64* %280, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10)
  %282 = trunc i64 %281 to i32
  %283 = lshr i64 %281, 32
  %284 = trunc i64 %283 to i32
  %285 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %285) #4
  store i32 %282, i32* %2, align 4
  %286 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %286) #4
  store i32 %284, i32* %3, align 4
  %287 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  store i32 %282, i32* %287, align 16
  %288 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 7
  store i32 %284, i32* %288, align 4
  store i8 %279, i8* %9, align 8
  %289 = zext i8 %279 to i32
  call void @av1_calculate_scaled_superres_size(i32* nonnull %2, i32* nonnull %3, i32 %289) #4
  %290 = load i32, i32* %2, align 4
  %291 = load i32, i32* %3, align 4
  call void @av1_set_frame_size(%struct.AV1_COMP* %0, i32 %290, i32 %291) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %286) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %285) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_superres_post_encode(%struct.AV1_COMP*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %5 = load i32, i32* %4, align 16
  %6 = icmp eq i32 %3, %5
  br i1 %6, label %76, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  tail call void @av1_superres_upscale(%struct.AV1Common* %8, %struct.BufferPool* null) #4
  %9 = load i32, i32* %4, align 16
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 7
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %33

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %14, %17
  br i1 %18, label %19, label %33

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 14
  %21 = bitcast %struct.yv12_buffer_config** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %24 = bitcast %struct.yv12_buffer_config** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 13
  %26 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %25, align 16
  %27 = icmp eq %struct.yv12_buffer_config* %26, null
  br i1 %27, label %76, label %28

28:                                               ; preds = %19
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 16
  %30 = bitcast %struct.yv12_buffer_config** %29 to i64*
  %31 = load i64, i64* %30, align 16
  %32 = bitcast %struct.yv12_buffer_config** %25 to i64*
  store i64 %31, i64* %32, align 16
  br label %76

33:                                               ; preds = %7, %15
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %35 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %36 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %35, i64 0, i32 27
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, i32 3, i32 1
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 14
  %41 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %40, align 8
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %41, i64 0, i32 2, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, %9
  br i1 %44, label %45, label %49

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %41, i64 0, i32 3, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, %14
  br i1 %48, label %73, label %49

49:                                               ; preds = %45, %33
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15
  %51 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %35, i64 0, i32 32
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %35, i64 0, i32 33
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %35, i64 0, i32 26
  %56 = load i8, i8* %55, align 4
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 15
  %61 = load i8, i8* %60, align 1, !range !2
  %62 = zext i8 %61 to i32
  %63 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %50, i32 %9, i32 %14, i32 %52, i32 %54, i32 %57, i32 288, i32 %59, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %62) #4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %49
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %67 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %66, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %67, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #4
  br label %68

68:                                               ; preds = %65, %49
  %69 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %40, align 8
  %70 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %71 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %70, i64 0, i32 25
  %72 = load i32, i32* %71, align 8
  tail call void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config* %69, %struct.yv12_buffer_config* %50, i32 %72, i32 %39) #4
  br label %73

73:                                               ; preds = %45, %68
  %74 = phi %struct.yv12_buffer_config* [ %50, %68 ], [ %41, %45 ]
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  store %struct.yv12_buffer_config* %74, %struct.yv12_buffer_config** %75, align 8
  br label %76

76:                                               ; preds = %73, %28, %19, %1
  ret void
}

declare void @av1_superres_upscale(%struct.AV1Common*, %struct.BufferPool*) local_unnamed_addr #3

declare void @av1_calculate_scaled_size(i32*, i32*, i32) local_unnamed_addr #3

declare void @av1_set_target_rate(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

declare i32 @av1_rc_pick_q_and_bounds(%struct.AV1_COMP*, i32, i32, i32, i32*, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i8 @get_superres_denom_for_qindex(%struct.AV1_COMP* nocapture readonly, i32) unnamed_addr #2 {
  %3 = alloca [16 x i64], align 16
  %4 = alloca [64 x i32], align 16
  %5 = alloca [64 x i16], align 16
  %6 = alloca [16 x double], align 16
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %8 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %7, align 16
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %10 = load i8, i8* %9, align 16
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %8, i64 0, i32 6, i32 0, i64 %11
  %13 = load i8, i8* %12, align 1
  switch i8 %13, label %440 [
    i8 0, label %14
    i8 3, label %14
  ]

14:                                               ; preds = %2, %2
  %15 = bitcast [16 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 128, i1 false)
  %16 = bitcast [16 x i64]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %16) #4
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %18 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %17, align 8
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 40
  %20 = load i32, i32* %19, align 16
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 2, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 3, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = bitcast [64 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %25) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 256, i1 false) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 128, i1 false) #4
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 26
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %101, label %30

30:                                               ; preds = %14
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 5, i32 0, i32 0
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = shl i64 %33, 1
  %35 = inttoptr i64 %34 to i16*
  %36 = add nsw i32 %24, -4
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %196

38:                                               ; preds = %30
  %39 = add nsw i32 %22, -16
  %40 = icmp sgt i32 %39, 0
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 4, i32 0, i32 0
  %42 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 0
  %43 = shl i32 %20, 1
  %44 = add i32 %43, -14
  %45 = shl i32 1, %44
  %46 = ashr i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = zext i32 %44 to i64
  br label %49

49:                                               ; preds = %52, %38
  %50 = phi i32 [ 0, %38 ], [ %54, %52 ]
  %51 = phi i32 [ 0, %38 ], [ %53, %52 ]
  br i1 %40, label %56, label %52

52:                                               ; preds = %65, %49
  %53 = phi i32 [ %51, %49 ], [ %66, %65 ]
  %54 = add nuw nsw i32 %50, 4
  %55 = icmp slt i32 %54, %36
  br i1 %55, label %49, label %193

56:                                               ; preds = %49, %65
  %57 = phi i64 [ %67, %65 ], [ 0, %49 ]
  %58 = phi i32 [ %66, %65 ], [ %51, %49 ]
  %59 = load void (i16*, i32*, i32, i8, i32)*, void (i16*, i32*, i32, i8, i32)** @av1_fwd_txfm2d_16x4, align 8
  %60 = load i32, i32* %41, align 8
  %61 = mul nsw i32 %60, %50
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = getelementptr inbounds i16, i16* %63, i64 %57
  call void %59(i16* %64, i32* nonnull %42, i32 %60, i8 zeroext 11, i32 %20) #4
  br label %70

65:                                               ; preds = %70
  %66 = add nsw i32 %58, 1
  %67 = add nuw i64 %57, 16
  %68 = trunc i64 %67 to i32
  %69 = icmp sgt i32 %39, %68
  br i1 %69, label %56, label %52

70:                                               ; preds = %70, %56
  %71 = phi i64 [ 1, %56 ], [ %99, %70 ]
  %72 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = mul nsw i64 %74, %74
  %76 = add nuw nsw i64 %71, 16
  %77 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = mul nsw i64 %79, %79
  %81 = add nuw nsw i64 %71, 32
  %82 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, %84
  %86 = add nuw nsw i64 %71, 48
  %87 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  %90 = mul nsw i64 %89, %89
  %91 = add i64 %75, %47
  %92 = add i64 %91, %80
  %93 = add i64 %92, %85
  %94 = add i64 %93, %90
  %95 = lshr i64 %94, %48
  %96 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 %71
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %95, %97
  store i64 %98, i64* %96, align 8
  %99 = add nuw nsw i64 %71, 1
  %100 = icmp eq i64 %99, 16
  br i1 %100, label %65, label %70

101:                                              ; preds = %14
  %102 = bitcast [64 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %102) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %102, i8 -86, i64 128, i1 false) #4
  %103 = add nsw i32 %24, -4
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %120

105:                                              ; preds = %101
  %106 = add nsw i32 %22, -16
  %107 = icmp sgt i32 %106, 0
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 5, i32 0, i32 0
  %109 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 4, i32 0, i32 0
  %110 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 0
  %111 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 0
  br label %112

112:                                              ; preds = %125, %105
  %113 = phi i64 [ 0, %105 ], [ %127, %125 ]
  %114 = phi i32 [ 0, %105 ], [ %126, %125 ]
  br i1 %107, label %115, label %125

115:                                              ; preds = %112
  %116 = trunc i64 %113 to i32
  %117 = or i32 %116, 1
  %118 = or i32 %116, 2
  %119 = or i32 %116, 3
  br label %122

120:                                              ; preds = %125, %101
  %121 = phi i32 [ 0, %101 ], [ %126, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %102) #4
  br label %193

122:                                              ; preds = %157, %115
  %123 = phi i64 [ 0, %115 ], [ %159, %157 ]
  %124 = phi i32 [ %114, %115 ], [ %158, %157 ]
  br label %130

125:                                              ; preds = %157, %112
  %126 = phi i32 [ %114, %112 ], [ %158, %157 ]
  %127 = add nuw i64 %113, 4
  %128 = trunc i64 %127 to i32
  %129 = icmp sgt i32 %103, %128
  br i1 %129, label %112, label %120

130:                                              ; preds = %130, %122
  %131 = phi i64 [ 0, %122 ], [ %155, %130 ]
  %132 = load i8*, i8** %108, align 8
  %133 = load i32, i32* %109, align 8
  %134 = mul nsw i32 %133, %116
  %135 = add nuw nsw i64 %131, %123
  %136 = trunc i64 %135 to i32
  %137 = add nsw i32 %134, %136
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %132, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i16
  %142 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %131
  store i16 %141, i16* %142, align 4
  %143 = or i64 %131, 1
  %144 = load i8*, i8** %108, align 8
  %145 = load i32, i32* %109, align 8
  %146 = mul nsw i32 %145, %116
  %147 = add nuw nsw i64 %143, %123
  %148 = trunc i64 %147 to i32
  %149 = add nsw i32 %146, %148
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %144, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %143
  store i16 %153, i16* %154, align 2
  %155 = add nuw nsw i64 %131, 2
  %156 = icmp eq i64 %155, 16
  br i1 %156, label %303, label %130

157:                                              ; preds = %162
  %158 = add nsw i32 %124, 1
  %159 = add nuw i64 %123, 16
  %160 = trunc i64 %159 to i32
  %161 = icmp sgt i32 %106, %160
  br i1 %161, label %122, label %125

162:                                              ; preds = %390, %162
  %163 = phi i64 [ 1, %390 ], [ %191, %162 ]
  %164 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = sext i32 %165 to i64
  %167 = mul nsw i64 %166, %166
  %168 = add nuw nsw i64 %163, 16
  %169 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = sext i32 %170 to i64
  %172 = mul nsw i64 %171, %171
  %173 = add nuw nsw i64 %163, 32
  %174 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %176, %176
  %178 = add nuw nsw i64 %163, 48
  %179 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, %181
  %183 = add nuw nsw i64 %167, 2
  %184 = add nuw i64 %183, %172
  %185 = add i64 %184, %177
  %186 = add i64 %185, %182
  %187 = lshr i64 %186, 2
  %188 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 %163
  %189 = load i64, i64* %188, align 8
  %190 = add i64 %187, %189
  store i64 %190, i64* %188, align 8
  %191 = add nuw nsw i64 %163, 1
  %192 = icmp eq i64 %191, 16
  br i1 %192, label %157, label %162

193:                                              ; preds = %52, %120
  %194 = phi i32 [ %121, %120 ], [ %53, %52 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %212

196:                                              ; preds = %193, %30
  %197 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 1
  %198 = bitcast double* %197 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %198, align 8
  %199 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 3
  %200 = bitcast double* %199 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %200, align 8
  %201 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 5
  %202 = bitcast double* %201 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %202, align 8
  %203 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 7
  %204 = bitcast double* %203 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %204, align 8
  %205 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 9
  %206 = bitcast double* %205 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %206, align 8
  %207 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 11
  %208 = bitcast double* %207 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %208, align 8
  %209 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 13
  %210 = bitcast double* %209 to <2 x double>*
  store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %210, align 8
  %211 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 15
  store double 1.000000e+20, double* %211, align 8
  br label %392

212:                                              ; preds = %193
  %213 = sitofp i32 %194 to double
  %214 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 1
  %215 = load i64, i64* %214, align 8
  %216 = uitofp i64 %215 to double
  %217 = fdiv double %216, %213
  %218 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 1
  %219 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 2
  %220 = load i64, i64* %219, align 16
  %221 = uitofp i64 %220 to double
  %222 = fdiv double %221, %213
  %223 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 2
  %224 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 3
  %225 = load i64, i64* %224, align 8
  %226 = uitofp i64 %225 to double
  %227 = fdiv double %226, %213
  %228 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 3
  %229 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 4
  %230 = load i64, i64* %229, align 16
  %231 = uitofp i64 %230 to double
  %232 = fdiv double %231, %213
  %233 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 4
  %234 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 5
  %235 = load i64, i64* %234, align 8
  %236 = uitofp i64 %235 to double
  %237 = fdiv double %236, %213
  %238 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 5
  %239 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 6
  %240 = load i64, i64* %239, align 16
  %241 = uitofp i64 %240 to double
  %242 = fdiv double %241, %213
  %243 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 6
  %244 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 7
  %245 = load i64, i64* %244, align 8
  %246 = uitofp i64 %245 to double
  %247 = fdiv double %246, %213
  %248 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 7
  %249 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 8
  %250 = load i64, i64* %249, align 16
  %251 = uitofp i64 %250 to double
  %252 = fdiv double %251, %213
  %253 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 8
  %254 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 9
  %255 = load i64, i64* %254, align 8
  %256 = uitofp i64 %255 to double
  %257 = fdiv double %256, %213
  %258 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 9
  %259 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 10
  %260 = load i64, i64* %259, align 16
  %261 = uitofp i64 %260 to double
  %262 = fdiv double %261, %213
  %263 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 10
  %264 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 11
  %265 = load i64, i64* %264, align 8
  %266 = uitofp i64 %265 to double
  %267 = fdiv double %266, %213
  %268 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 11
  %269 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 12
  %270 = load i64, i64* %269, align 16
  %271 = uitofp i64 %270 to double
  %272 = fdiv double %271, %213
  %273 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 12
  %274 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 13
  %275 = load i64, i64* %274, align 8
  %276 = uitofp i64 %275 to double
  %277 = fdiv double %276, %213
  %278 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 13
  %279 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 14
  %280 = load i64, i64* %279, align 16
  %281 = uitofp i64 %280 to double
  %282 = fdiv double %281, %213
  %283 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 14
  %284 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 15
  %285 = load i64, i64* %284, align 8
  %286 = uitofp i64 %285 to double
  %287 = fdiv double %286, %213
  %288 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 15
  store double %287, double* %288, align 8
  %289 = fadd double %282, %287
  store double %289, double* %283, align 16
  %290 = fadd double %277, %289
  store double %290, double* %278, align 8
  %291 = fadd double %272, %290
  store double %291, double* %273, align 16
  %292 = fadd double %267, %291
  store double %292, double* %268, align 8
  %293 = fadd double %262, %292
  store double %293, double* %263, align 16
  %294 = fadd double %257, %293
  store double %294, double* %258, align 8
  %295 = fadd double %252, %294
  store double %295, double* %253, align 16
  %296 = fadd double %247, %295
  store double %296, double* %248, align 8
  %297 = fadd double %242, %296
  store double %297, double* %243, align 16
  %298 = fadd double %237, %297
  store double %298, double* %238, align 8
  %299 = fadd double %232, %298
  store double %299, double* %233, align 16
  %300 = fadd double %227, %299
  store double %300, double* %228, align 8
  %301 = fadd double %222, %300
  store double %301, double* %223, align 16
  %302 = fadd double %217, %301
  store double %302, double* %218, align 8
  br label %392

303:                                              ; preds = %130, %303
  %304 = phi i64 [ %330, %303 ], [ 0, %130 ]
  %305 = load i8*, i8** %108, align 8
  %306 = load i32, i32* %109, align 8
  %307 = mul nsw i32 %306, %117
  %308 = add nuw nsw i64 %304, %123
  %309 = trunc i64 %308 to i32
  %310 = add nsw i32 %307, %309
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %305, i64 %311
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i16
  %315 = add nuw nsw i64 %304, 16
  %316 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %315
  store i16 %314, i16* %316, align 4
  %317 = or i64 %304, 1
  %318 = load i8*, i8** %108, align 8
  %319 = load i32, i32* %109, align 8
  %320 = mul nsw i32 %319, %117
  %321 = add nuw nsw i64 %317, %123
  %322 = trunc i64 %321 to i32
  %323 = add nsw i32 %320, %322
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds i8, i8* %318, i64 %324
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i16
  %328 = add nuw nsw i64 %304, 17
  %329 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %328
  store i16 %327, i16* %329, align 2
  %330 = add nuw nsw i64 %304, 2
  %331 = icmp eq i64 %330, 16
  br i1 %331, label %332, label %303

332:                                              ; preds = %303, %332
  %333 = phi i64 [ %359, %332 ], [ 0, %303 ]
  %334 = load i8*, i8** %108, align 8
  %335 = load i32, i32* %109, align 8
  %336 = mul nsw i32 %335, %118
  %337 = add nuw nsw i64 %333, %123
  %338 = trunc i64 %337 to i32
  %339 = add nsw i32 %336, %338
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i8, i8* %334, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i16
  %344 = add nuw nsw i64 %333, 32
  %345 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %344
  store i16 %343, i16* %345, align 4
  %346 = or i64 %333, 1
  %347 = load i8*, i8** %108, align 8
  %348 = load i32, i32* %109, align 8
  %349 = mul nsw i32 %348, %118
  %350 = add nuw nsw i64 %346, %123
  %351 = trunc i64 %350 to i32
  %352 = add nsw i32 %349, %351
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %347, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i16
  %357 = add nuw nsw i64 %333, 33
  %358 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %357
  store i16 %356, i16* %358, align 2
  %359 = add nuw nsw i64 %333, 2
  %360 = icmp eq i64 %359, 16
  br i1 %360, label %361, label %332

361:                                              ; preds = %332, %361
  %362 = phi i64 [ %388, %361 ], [ 0, %332 ]
  %363 = load i8*, i8** %108, align 8
  %364 = load i32, i32* %109, align 8
  %365 = mul nsw i32 %364, %119
  %366 = add nuw nsw i64 %362, %123
  %367 = trunc i64 %366 to i32
  %368 = add nsw i32 %365, %367
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %363, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i16
  %373 = add nuw nsw i64 %362, 48
  %374 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %373
  store i16 %372, i16* %374, align 4
  %375 = or i64 %362, 1
  %376 = load i8*, i8** %108, align 8
  %377 = load i32, i32* %109, align 8
  %378 = mul nsw i32 %377, %119
  %379 = add nuw nsw i64 %375, %123
  %380 = trunc i64 %379 to i32
  %381 = add nsw i32 %378, %380
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i8, i8* %376, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i16
  %386 = add nuw nsw i64 %362, 49
  %387 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %386
  store i16 %385, i16* %387, align 2
  %388 = add nuw nsw i64 %362, 2
  %389 = icmp eq i64 %388, 16
  br i1 %389, label %390, label %361

390:                                              ; preds = %361
  %391 = load void (i16*, i32*, i32, i8, i32)*, void (i16*, i32*, i32, i8, i32)** @av1_fwd_txfm2d_16x4, align 8
  call void %391(i16* nonnull %110, i32* nonnull %111, i32 16, i8 zeroext 11, i32 %20) #4
  br label %162

392:                                              ; preds = %196, %212
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %16) #4
  %393 = load i8, i8* %9, align 16
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %8, i64 0, i32 6, i32 0, i64 %394
  %396 = load i8, i8* %395, align 1
  switch i8 %396, label %402 [
    i8 3, label %403
    i8 0, label %397
  ]

397:                                              ; preds = %392
  %398 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %399 = load i32, i32* %398, align 8
  %400 = icmp slt i32 %399, 2
  %401 = select i1 %400, double 1.200000e-02, double 8.000000e-03
  br label %403

402:                                              ; preds = %392
  br label %403

403:                                              ; preds = %392, %397, %402
  %404 = phi double [ 0.000000e+00, %402 ], [ 8.000000e-03, %392 ], [ %401, %397 ]
  %405 = call double @av1_convert_qindex_to_q(i32 %1, i32 8) #4
  %406 = fmul double %404, %405
  %407 = fmul double %405, %406
  %408 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 1
  %409 = load double, double* %408, align 8
  %410 = fmul double %409, 2.000000e-01
  %411 = fcmp olt double %407, %410
  %412 = select i1 %411, double %407, double %410
  br label %413

413:                                              ; preds = %416, %403
  %414 = phi i64 [ %417, %416 ], [ 16, %403 ]
  %415 = icmp ugt i64 %414, 8
  br i1 %415, label %416, label %421

416:                                              ; preds = %413
  %417 = add nsw i64 %414, -1
  %418 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 %417
  %419 = load double, double* %418, align 8
  %420 = fcmp ogt double %419, %412
  br i1 %420, label %421, label %413

421:                                              ; preds = %413, %416
  %422 = trunc i64 %414 to i8
  %423 = sub i8 24, %422
  %424 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 4
  %425 = load i32, i32* %424, align 4
  %426 = icmp eq i32 %425, 4
  br i1 %426, label %427, label %437

427:                                              ; preds = %421
  %428 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 0, i32 5
  %429 = load i8, i8* %428, align 4
  %430 = icmp eq i8 %429, 2
  br i1 %430, label %437, label %431

431:                                              ; preds = %427
  %432 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %433 = load i32, i32* %432, align 16
  %434 = icmp slt i32 %433, 2
  %435 = icmp ugt i8 %423, 9
  %436 = select i1 %435, i8 %423, i8 9
  br i1 %434, label %437, label %438

437:                                              ; preds = %421, %427, %431
  br label %438

438:                                              ; preds = %431, %437
  %439 = phi i8 [ %423, %437 ], [ %436, %431 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %15) #4
  br label %440

440:                                              ; preds = %2, %438
  %441 = phi i8 [ %439, %438 ], [ 8, %2 ]
  ret i8 %441
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare double @av1_convert_qindex_to_q(i32, i32) local_unnamed_addr #3

declare void @av1_calculate_scaled_superres_size(i32*, i32*, i32) local_unnamed_addr #3

declare void @av1_set_frame_size(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

declare i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.aom_codec_frame_buffer*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i8*, i32) local_unnamed_addr #3

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
