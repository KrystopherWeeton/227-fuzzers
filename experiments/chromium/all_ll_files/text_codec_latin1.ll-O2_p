; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/text_codec_latin1.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/text_codec_latin1.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.WTF::TextEncoding" = type opaque
%"class.WTF::TextCodecLatin1" = type { %"class.WTF::TextCodec" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF15TextCodecLatin112EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE = comdat any

$_ZN3WTF15TextCodecLatin112EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE = comdat any

$_ZN3WTF15TextCodecLatin1D0Ev = comdat any

$_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm = comdat any

$_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

@.str = private unnamed_addr constant [13 x i8] c"windows-1252\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"ANSI_X3.4-1968\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"cp1252\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"cp819\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"csISOLatin1\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"IBM819\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"ISO-8859-1\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"iso-ir-100\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"iso8859-1\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"iso88591\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"iso_8859-1\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"iso_8859-1:1987\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"l1\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"latin1\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"US-ASCII\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"x-cp1252\00", align 1
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@_ZN3WTFL6kTableE = internal unnamed_addr constant [256 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 8364, i16 129, i16 8218, i16 402, i16 8222, i16 8230, i16 8224, i16 8225, i16 710, i16 8240, i16 352, i16 8249, i16 338, i16 141, i16 381, i16 143, i16 144, i16 8216, i16 8217, i16 8220, i16 8221, i16 8226, i16 8211, i16 8212, i16 732, i16 8482, i16 353, i16 8250, i16 339, i16 157, i16 382, i16 376, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 170, i16 171, i16 172, i16 173, i16 174, i16 175, i16 176, i16 177, i16 178, i16 179, i16 180, i16 181, i16 182, i16 183, i16 184, i16 185, i16 186, i16 187, i16 188, i16 189, i16 190, i16 191, i16 192, i16 193, i16 194, i16 195, i16 196, i16 197, i16 198, i16 199, i16 200, i16 201, i16 202, i16 203, i16 204, i16 205, i16 206, i16 207, i16 208, i16 209, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 218, i16 219, i16 220, i16 221, i16 222, i16 223, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255], align 16
@_ZTVN3WTF15TextCodecLatin1E = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::TextCodec"*)* @_ZN3WTF9TextCodecD2Ev to i8*), i8* bitcast (void (%"class.WTF::TextCodecLatin1"*)* @_ZN3WTF15TextCodecLatin1D0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.WTF::TextCodecLatin1"*, i8*, i32, i32, i1, i8*)* @_ZN3WTF15TextCodecLatin16DecodeEPKcjNS_13FlushBehaviorEbRb to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecLatin1"*, i16*, i32, i32)* @_ZN3WTF15TextCodecLatin16EncodeEPKDsjNS_19UnencodableHandlingE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecLatin1"*, i8*, i32, i32)* @_ZN3WTF15TextCodecLatin16EncodeEPKhjNS_19UnencodableHandlingE to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodec"*, i8*, i32, i8*, i64)* @_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodec"*, i16*, i32, i8*, i64)* @_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm to i8*)] }, align 8
@.str.18 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.19 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF15TextCodecLatin121RegisterEncodingNamesEPFvPKcS2_E(void (i8*, i8*)* nocapture) local_unnamed_addr #0 align 2 {
  tail call void %0(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF15TextCodecLatin114RegisterCodecsEPFvPKcPFNSt3__110unique_ptrINS_9TextCodecENS3_14default_deleteIS5_EEEERKNS_12TextEncodingEPKvESD_E(void (i8*, %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)*, i8*)* nocapture) local_unnamed_addr #0 align 2 {
  tail call void %0(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL36NewStreamingTextDecoderWindowsLatin1ERKNS_12TextEncodingEPKv, i8* null) #10
  tail call void %0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL36NewStreamingTextDecoderWindowsLatin1ERKNS_12TextEncodingEPKv, i8* null) #10
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL36NewStreamingTextDecoderWindowsLatin1ERKNS_12TextEncodingEPKv, i8* null) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.WTF::TextCodec"* @_ZN3WTFL36NewStreamingTextDecoderWindowsLatin1ERKNS_12TextEncodingEPKv(%"class.WTF::TextEncoding"* nocapture readnone, i8* nocapture readnone) #0 {
  %3 = tail call noalias i8* @malloc(i64 8) #10
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF15TextCodecLatin1E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast i8* %3 to %"class.WTF::TextCodec"*
  ret %"class.WTF::TextCodec"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF15TextCodecLatin16DecodeEPKcjNS_13FlushBehaviorEbRb(%"class.WTF::TextCodecLatin1"* nocapture readnone, i8*, i32, i32, i1 zeroext, i8* nocapture readnone dereferenceable(1)) unnamed_addr #0 align 2 {
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %34

11:                                               ; preds = %6
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %13 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = ptrtoint %"class.WTF::StringImpl"* %14 to i64
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %289, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %289

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #10
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #10
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %289

34:                                               ; preds = %6
  %35 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %2, i8** nonnull dereferenceable(8) %7) #10
  %36 = ptrtoint %"class.WTF::StringImpl"* %35 to i64
  %37 = zext i32 %2 to i64
  %38 = getelementptr inbounds i8, i8* %1, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, -8
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8*, i8** %7, align 8
  br label %43

43:                                               ; preds = %34, %88
  %44 = phi i8* [ %91, %88 ], [ %1, %34 ]
  %45 = phi i8* [ %92, %88 ], [ %42, %34 ]
  %46 = load i8, i8* %44, align 1
  %47 = icmp sgt i8 %46, -1
  br i1 %47, label %48, label %78

48:                                               ; preds = %43
  %49 = ptrtoint i8* %44 to i64
  %50 = and i64 %49, 7
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %72

52:                                               ; preds = %48
  %53 = icmp ult i8* %44, %41
  br i1 %53, label %54, label %66

54:                                               ; preds = %52, %61
  %55 = phi i8* [ %63, %61 ], [ %44, %52 ]
  %56 = phi i8* [ %64, %61 ], [ %45, %52 ]
  %57 = bitcast i8* %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, -9187201950435737472
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %76

61:                                               ; preds = %54
  %62 = bitcast i8* %56 to i64*
  store i64 %58, i64* %62, align 1
  %63 = getelementptr inbounds i8, i8* %55, i64 8
  %64 = getelementptr inbounds i8, i8* %56, i64 8
  %65 = icmp ult i8* %63, %41
  br i1 %65, label %54, label %66

66:                                               ; preds = %61, %52
  %67 = phi i8* [ %45, %52 ], [ %64, %61 ]
  %68 = phi i8* [ %44, %52 ], [ %63, %61 ]
  %69 = icmp eq i8* %68, %38
  br i1 %69, label %289, label %70

70:                                               ; preds = %66
  %71 = load i8, i8* %68, align 1
  br label %72

72:                                               ; preds = %70, %48
  %73 = phi i8 [ %71, %70 ], [ %46, %48 ]
  %74 = phi i8* [ %67, %70 ], [ %45, %48 ]
  %75 = phi i8* [ %68, %70 ], [ %44, %48 ]
  store i8 %73, i8* %74, align 1
  br label %88

76:                                               ; preds = %54
  %77 = trunc i64 %58 to i8
  br label %78

78:                                               ; preds = %76, %43
  %79 = phi i8 [ %46, %43 ], [ %77, %76 ]
  %80 = phi i8* [ %45, %43 ], [ %56, %76 ]
  %81 = phi i8* [ %44, %43 ], [ %55, %76 ]
  %82 = zext i8 %79 to i64
  %83 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = icmp ugt i16 %84, 255
  br i1 %85, label %94, label %86

86:                                               ; preds = %78
  %87 = trunc i16 %84 to i8
  store i8 %87, i8* %80, align 1
  br label %88

88:                                               ; preds = %86, %72
  %89 = phi i8* [ %80, %86 ], [ %74, %72 ]
  %90 = phi i8* [ %81, %86 ], [ %75, %72 ]
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = getelementptr inbounds i8, i8* %89, i64 1
  %93 = icmp ult i8* %91, %38
  br i1 %93, label %43, label %289

94:                                               ; preds = %78
  %95 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %96 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %2, i16** nonnull dereferenceable(8) %8) #10
  %97 = ptrtoint %"class.WTF::StringImpl"* %96 to i64
  %98 = load i16*, i16** %8, align 8
  %99 = bitcast i16* %98 to i8*
  %100 = load i8*, i8** %7, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = icmp ult i8* %100, %80
  br i1 %102, label %103, label %188

103:                                              ; preds = %94
  %104 = sub i64 0, %101
  %105 = getelementptr i8, i8* %80, i64 %104
  %106 = ptrtoint i8* %105 to i64
  %107 = icmp ult i8* %105, inttoptr (i64 16 to i8*)
  br i1 %107, label %177, label %108

108:                                              ; preds = %103
  %109 = sub i64 0, %101
  %110 = getelementptr i8, i8* %80, i64 %109
  %111 = ptrtoint i8* %110 to i64
  %112 = getelementptr i16, i16* %98, i64 %111
  %113 = bitcast i16* %112 to i8*
  %114 = icmp ugt i8* %80, %99
  %115 = icmp ult i8* %100, %113
  %116 = and i1 %114, %115
  br i1 %116, label %177, label %117

117:                                              ; preds = %108
  %118 = and i64 %106, -16
  %119 = getelementptr i8, i8* %100, i64 %118
  %120 = getelementptr i16, i16* %98, i64 %118
  %121 = add i64 %118, -16
  %122 = lshr exact i64 %121, 4
  %123 = add nuw nsw i64 %122, 1
  %124 = and i64 %123, 1
  %125 = icmp eq i64 %121, 0
  br i1 %125, label %159, label %126

126:                                              ; preds = %117
  %127 = sub nuw nsw i64 %123, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %156, %128 ]
  %130 = phi i64 [ %127, %126 ], [ %157, %128 ]
  %131 = getelementptr i8, i8* %100, i64 %129
  %132 = getelementptr i16, i16* %98, i64 %129
  %133 = bitcast i8* %131 to <8 x i8>*
  %134 = load <8 x i8>, <8 x i8>* %133, align 1, !alias.scope !3
  %135 = getelementptr i8, i8* %131, i64 8
  %136 = bitcast i8* %135 to <8 x i8>*
  %137 = load <8 x i8>, <8 x i8>* %136, align 1, !alias.scope !3
  %138 = zext <8 x i8> %134 to <8 x i16>
  %139 = zext <8 x i8> %137 to <8 x i16>
  %140 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !6, !noalias !3
  %141 = getelementptr i16, i16* %132, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %142, align 2, !alias.scope !6, !noalias !3
  %143 = or i64 %129, 16
  %144 = getelementptr i8, i8* %100, i64 %143
  %145 = getelementptr i16, i16* %98, i64 %143
  %146 = bitcast i8* %144 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !3
  %148 = getelementptr i8, i8* %144, i64 8
  %149 = bitcast i8* %148 to <8 x i8>*
  %150 = load <8 x i8>, <8 x i8>* %149, align 1, !alias.scope !3
  %151 = zext <8 x i8> %147 to <8 x i16>
  %152 = zext <8 x i8> %150 to <8 x i16>
  %153 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !6, !noalias !3
  %154 = getelementptr i16, i16* %145, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2, !alias.scope !6, !noalias !3
  %156 = add i64 %129, 32
  %157 = add i64 %130, -2
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %128, !llvm.loop !8

159:                                              ; preds = %128, %117
  %160 = phi i64 [ 0, %117 ], [ %156, %128 ]
  %161 = icmp eq i64 %124, 0
  br i1 %161, label %175, label %162

162:                                              ; preds = %159
  %163 = getelementptr i8, i8* %100, i64 %160
  %164 = getelementptr i16, i16* %98, i64 %160
  %165 = bitcast i8* %163 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 1, !alias.scope !3
  %167 = getelementptr i8, i8* %163, i64 8
  %168 = bitcast i8* %167 to <8 x i8>*
  %169 = load <8 x i8>, <8 x i8>* %168, align 1, !alias.scope !3
  %170 = zext <8 x i8> %166 to <8 x i16>
  %171 = zext <8 x i8> %169 to <8 x i16>
  %172 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !6, !noalias !3
  %173 = getelementptr i16, i16* %164, i64 8
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %174, align 2, !alias.scope !6, !noalias !3
  br label %175

175:                                              ; preds = %159, %162
  %176 = icmp eq i64 %118, %106
  br i1 %176, label %188, label %177

177:                                              ; preds = %175, %108, %103
  %178 = phi i8* [ %100, %108 ], [ %100, %103 ], [ %119, %175 ]
  %179 = phi i16* [ %98, %108 ], [ %98, %103 ], [ %120, %175 ]
  br label %180

180:                                              ; preds = %177, %180
  %181 = phi i8* [ %183, %180 ], [ %178, %177 ]
  %182 = phi i16* [ %186, %180 ], [ %179, %177 ]
  %183 = getelementptr inbounds i8, i8* %181, i64 1
  %184 = load i8, i8* %181, align 1
  %185 = zext i8 %184 to i16
  %186 = getelementptr inbounds i16, i16* %182, i64 1
  store i16 %185, i16* %182, align 2
  %187 = icmp eq i8* %183, %80
  br i1 %187, label %188, label %180, !llvm.loop !10

188:                                              ; preds = %180, %175, %94
  %189 = phi i16* [ %98, %94 ], [ %120, %175 ], [ %186, %180 ]
  %190 = load i8, i8* %81, align 1
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %191
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %189, align 2
  %194 = getelementptr inbounds i8, i8* %81, i64 1
  %195 = icmp ult i8* %194, %38
  br i1 %195, label %196, label %274

196:                                              ; preds = %188, %269
  %197 = phi i8* [ %272, %269 ], [ %194, %188 ]
  %198 = phi i16* [ %271, %269 ], [ %189, %188 ]
  %199 = getelementptr inbounds i16, i16* %198, i64 1
  %200 = load i8, i8* %197, align 1
  %201 = icmp sgt i8 %200, -1
  br i1 %201, label %202, label %262

202:                                              ; preds = %196
  %203 = ptrtoint i8* %197 to i64
  %204 = and i64 %203, 7
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %255

206:                                              ; preds = %202
  %207 = icmp ult i8* %197, %41
  br i1 %207, label %208, label %249

208:                                              ; preds = %206, %215
  %209 = phi i16* [ %247, %215 ], [ %199, %206 ]
  %210 = phi i8* [ %246, %215 ], [ %197, %206 ]
  %211 = bitcast i8* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = and i64 %212, -9187201950435737472
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %260

215:                                              ; preds = %208
  %216 = trunc i64 %212 to i16
  %217 = and i16 %216, 255
  store i16 %217, i16* %209, align 2
  %218 = getelementptr inbounds i8, i8* %210, i64 1
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  %221 = getelementptr inbounds i16, i16* %209, i64 1
  store i16 %220, i16* %221, align 2
  %222 = getelementptr inbounds i8, i8* %210, i64 2
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i16
  %225 = getelementptr inbounds i16, i16* %209, i64 2
  store i16 %224, i16* %225, align 2
  %226 = getelementptr inbounds i8, i8* %210, i64 3
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i16
  %229 = getelementptr inbounds i16, i16* %209, i64 3
  store i16 %228, i16* %229, align 2
  %230 = getelementptr inbounds i8, i8* %210, i64 4
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i16
  %233 = getelementptr inbounds i16, i16* %209, i64 4
  store i16 %232, i16* %233, align 2
  %234 = getelementptr inbounds i8, i8* %210, i64 5
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i16
  %237 = getelementptr inbounds i16, i16* %209, i64 5
  store i16 %236, i16* %237, align 2
  %238 = getelementptr inbounds i8, i8* %210, i64 6
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i16
  %241 = getelementptr inbounds i16, i16* %209, i64 6
  store i16 %240, i16* %241, align 2
  %242 = getelementptr inbounds i8, i8* %210, i64 7
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i16
  %245 = getelementptr inbounds i16, i16* %209, i64 7
  store i16 %244, i16* %245, align 2
  %246 = getelementptr inbounds i8, i8* %210, i64 8
  %247 = getelementptr inbounds i16, i16* %209, i64 8
  %248 = icmp ult i8* %246, %41
  br i1 %248, label %208, label %249

249:                                              ; preds = %215, %206
  %250 = phi i8* [ %197, %206 ], [ %246, %215 ]
  %251 = phi i16* [ %199, %206 ], [ %247, %215 ]
  %252 = icmp eq i8* %250, %38
  br i1 %252, label %274, label %253

253:                                              ; preds = %249
  %254 = load i8, i8* %250, align 1
  br label %255

255:                                              ; preds = %253, %202
  %256 = phi i8 [ %254, %253 ], [ %200, %202 ]
  %257 = phi i8* [ %250, %253 ], [ %197, %202 ]
  %258 = phi i16* [ %251, %253 ], [ %199, %202 ]
  %259 = zext i8 %256 to i16
  store i16 %259, i16* %258, align 2
  br label %269

260:                                              ; preds = %208
  %261 = trunc i64 %212 to i8
  br label %262

262:                                              ; preds = %260, %196
  %263 = phi i8 [ %200, %196 ], [ %261, %260 ]
  %264 = phi i8* [ %197, %196 ], [ %210, %260 ]
  %265 = phi i16* [ %199, %196 ], [ %209, %260 ]
  %266 = zext i8 %263 to i64
  %267 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %266
  %268 = load i16, i16* %267, align 2
  store i16 %268, i16* %265, align 2
  br label %269

269:                                              ; preds = %262, %255
  %270 = phi i8* [ %264, %262 ], [ %257, %255 ]
  %271 = phi i16* [ %265, %262 ], [ %258, %255 ]
  %272 = getelementptr inbounds i8, i8* %270, i64 1
  %273 = icmp ult i8* %272, %38
  br i1 %273, label %196, label %274

274:                                              ; preds = %269, %249, %188
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #10
  %275 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %275, label %289, label %276

276:                                              ; preds = %274
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = and i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %282 = load i32, i32* %281, align 4
  br i1 %280, label %283, label %285

283:                                              ; preds = %276
  %284 = add i32 %282, -1
  store i32 %284, i32* %281, align 4
  br label %285

285:                                              ; preds = %283, %276
  %286 = phi i32 [ %284, %283 ], [ %282, %276 ]
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %289

288:                                              ; preds = %285
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #10
  br label %289

289:                                              ; preds = %66, %88, %288, %285, %274, %32, %17, %11
  %290 = phi i64 [ %15, %11 ], [ %15, %17 ], [ %15, %32 ], [ %97, %274 ], [ %97, %285 ], [ %97, %288 ], [ %36, %88 ], [ %36, %66 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %291 = inttoptr i64 %290 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %291
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF15TextCodecLatin16EncodeEPKDsjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecLatin1"*, i16*, i32, i32) unnamed_addr #0 align 2 {
  tail call void @_ZN3WTF15TextCodecLatin112EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* sret %0, %"class.WTF::TextCodecLatin1"* %1, i16* %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15TextCodecLatin112EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecLatin1"*, i16*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca [32 x i8], align 16
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = zext i32 %3 to i64
  %11 = icmp ult i32 %3, 23
  %12 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  br i1 %11, label %20, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = add nuw nsw i64 %10, 16
  %17 = and i64 %16, 8589934576
  %18 = tail call i8* @_Znwm(i64 %17) #11
  store i8* %18, i8** %9, align 8
  %19 = or i64 %17, -9223372036854775808
  store i64 %19, i64* %14, align 8
  store i64 %10, i64* %15, align 8
  br label %27

20:                                               ; preds = %5
  %21 = trunc i32 %3 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %8, i64 %10
  store i8 0, i8* %26, align 1
  br label %84

27:                                               ; preds = %20, %13
  %28 = phi i8* [ %18, %13 ], [ %8, %20 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %28, i8 0, i64 %10, i1 false) #10
  %29 = getelementptr inbounds i8, i8* %28, i64 %10
  store i8 0, i8* %29, align 1
  %30 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = and i64 %10, 1
  %33 = icmp eq i32 %3, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %27
  %35 = sub nsw i64 %10, %32
  br label %56

36:                                               ; preds = %56, %27
  %37 = phi i32 [ undef, %27 ], [ %80, %56 ]
  %38 = phi i64 [ 0, %27 ], [ %81, %56 ]
  %39 = phi i32 [ 0, %27 ], [ %80, %56 ]
  %40 = icmp eq i64 %32, 0
  br i1 %40, label %52, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds i16, i16* %2, i64 %38
  %43 = load i16, i16* %42, align 2
  %44 = trunc i16 %43 to i8
  %45 = load i8, i8* %31, align 1
  %46 = icmp slt i8 %45, 0
  %47 = load i8*, i8** %9, align 8
  %48 = select i1 %46, i8* %47, i8* %8
  %49 = getelementptr inbounds i8, i8* %48, i64 %38
  store i8 %44, i8* %49, align 1
  %50 = zext i16 %43 to i32
  %51 = or i32 %39, %50
  br label %52

52:                                               ; preds = %36, %41
  %53 = phi i32 [ %37, %36 ], [ %51, %41 ]
  %54 = and i32 %53, 65408
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %84, label %86

56:                                               ; preds = %56, %34
  %57 = phi i64 [ 0, %34 ], [ %81, %56 ]
  %58 = phi i32 [ 0, %34 ], [ %80, %56 ]
  %59 = phi i64 [ %35, %34 ], [ %82, %56 ]
  %60 = getelementptr inbounds i16, i16* %2, i64 %57
  %61 = load i16, i16* %60, align 2
  %62 = trunc i16 %61 to i8
  %63 = load i8, i8* %31, align 1
  %64 = icmp slt i8 %63, 0
  %65 = load i8*, i8** %9, align 8
  %66 = select i1 %64, i8* %65, i8* %8
  %67 = getelementptr inbounds i8, i8* %66, i64 %57
  store i8 %62, i8* %67, align 1
  %68 = zext i16 %61 to i32
  %69 = or i32 %58, %68
  %70 = or i64 %57, 1
  %71 = getelementptr inbounds i16, i16* %2, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = trunc i16 %72 to i8
  %74 = load i8, i8* %31, align 1
  %75 = icmp slt i8 %74, 0
  %76 = load i8*, i8** %9, align 8
  %77 = select i1 %75, i8* %76, i8* %8
  %78 = getelementptr inbounds i8, i8* %77, i64 %70
  store i8 %73, i8* %78, align 1
  %79 = zext i16 %72 to i32
  %80 = or i32 %69, %79
  %81 = add nuw nsw i64 %57, 2
  %82 = add i64 %59, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %36, label %56

84:                                               ; preds = %25, %52
  %85 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* nonnull align 8 %8, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #10
  br label %237

86:                                               ; preds = %52
  %87 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %10) #10, !noalias !11
  %88 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %87) #10, !noalias !11
  %89 = ptrtoint i8* %88 to i64
  %90 = trunc i64 %87 to i32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 0, i64 %10, i1 false) #10, !noalias !11
  %91 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  br label %117

92:                                               ; preds = %229
  %93 = zext i32 %235 to i64
  %94 = icmp ult i32 %235, 23
  br i1 %94, label %103, label %95

95:                                               ; preds = %92
  %96 = add nuw nsw i64 %93, 16
  %97 = and i64 %96, 8589934576
  %98 = call i8* @_Znwm(i64 %97) #11, !noalias !11
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %98, i8** %99, align 8, !alias.scope !11
  %100 = or i64 %97, -9223372036854775808
  %101 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %100, i64* %101, align 8, !alias.scope !11
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %93, i64* %102, align 8, !alias.scope !11
  br label %109

103:                                              ; preds = %92
  %104 = trunc i32 %235 to i8
  %105 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %106 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %105, i64 0, i32 1, i32 0
  store i8 %104, i8* %106, align 1, !alias.scope !11
  %107 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %108 = icmp eq i32 %235, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %103, %95
  %110 = phi i8* [ %98, %95 ], [ %107, %103 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %234, i64 %93, i1 false) #10
  br label %111

111:                                              ; preds = %109, %103
  %112 = phi i8* [ %107, %103 ], [ %110, %109 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %93
  store i8 0, i8* %113, align 1
  %114 = icmp eq i64 %232, 0
  br i1 %114, label %237, label %115, !prof !14

115:                                              ; preds = %111
  %116 = inttoptr i64 %232 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %116) #10, !noalias !11
  br label %237

117:                                              ; preds = %229, %86
  %118 = phi i32 [ 0, %86 ], [ %147, %229 ]
  %119 = phi i32 [ 0, %86 ], [ %235, %229 ]
  %120 = phi i8* [ %88, %86 ], [ %234, %229 ]
  %121 = phi i32 [ %3, %86 ], [ %233, %229 ]
  %122 = phi i64 [ %89, %86 ], [ %232, %229 ]
  %123 = phi i32 [ %90, %86 ], [ %231, %229 ]
  %124 = phi i32 [ %3, %86 ], [ %230, %229 ]
  %125 = add nuw i32 %118, 1
  %126 = zext i32 %118 to i64
  %127 = getelementptr inbounds i16, i16* %2, i64 %126
  %128 = load i16, i16* %127, align 2, !noalias !11
  %129 = zext i16 %128 to i32
  %130 = and i32 %129, 64512
  %131 = icmp ne i32 %130, 55296
  %132 = icmp eq i32 %125, %3
  %133 = or i1 %132, %131
  br i1 %133, label %146, label %134

134:                                              ; preds = %117
  %135 = zext i32 %125 to i64
  %136 = getelementptr inbounds i16, i16* %2, i64 %135
  %137 = load i16, i16* %136, align 2, !noalias !11
  %138 = zext i16 %137 to i32
  %139 = and i32 %138, 64512
  %140 = icmp eq i32 %139, 56320
  br i1 %140, label %141, label %146

141:                                              ; preds = %134
  %142 = add i32 %118, 2
  %143 = shl nuw nsw i32 %129, 10
  %144 = add nsw i32 %143, -56613888
  %145 = add nsw i32 %144, %138
  br label %146

146:                                              ; preds = %141, %134, %117
  %147 = phi i32 [ %125, %117 ], [ %142, %141 ], [ %125, %134 ]
  %148 = phi i32 [ %129, %117 ], [ %145, %141 ], [ %129, %134 ]
  %149 = icmp sgt i32 %148, 65535
  %150 = zext i1 %149 to i32
  %151 = sub i32 %121, %150
  %152 = icmp ugt i32 %148, 255
  br i1 %152, label %157, label %153

153:                                              ; preds = %146
  %154 = trunc i32 %148 to i8
  %155 = and i32 %148, 224
  %156 = icmp eq i32 %155, 128
  br i1 %156, label %157, label %224

157:                                              ; preds = %153, %146
  br label %158

158:                                              ; preds = %257, %157
  %159 = phi i64 [ 128, %157 ], [ %258, %257 ]
  %160 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %159
  %161 = load i16, i16* %160, align 8, !noalias !11
  %162 = zext i16 %161 to i32
  %163 = icmp eq i32 %148, %162
  br i1 %163, label %221, label %164

164:                                              ; preds = %158
  %165 = or i64 %159, 1
  %166 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %165
  %167 = load i16, i16* %166, align 2, !noalias !11
  %168 = zext i16 %167 to i32
  %169 = icmp eq i32 %148, %168
  br i1 %169, label %221, label %245

170:                                              ; preds = %257
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %91) #10, !noalias !11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %91, i8 -86, i64 32, i1 false) #10, !noalias !11
  %171 = call i32 @_ZN3WTF9TextCodec25GetUnencodableReplacementEjNS_19UnencodableHandlingEPc(i32 %148, i32 %4, i8* nonnull %91) #10, !noalias !11
  %172 = add i32 %151, -1
  %173 = add i32 %172, %171
  %174 = icmp ugt i32 %173, %124
  br i1 %174, label %175, label %212

175:                                              ; preds = %170
  %176 = icmp ult i32 %123, %173
  br i1 %176, label %177, label %201

177:                                              ; preds = %175
  %178 = lshr i32 %123, 2
  %179 = add nuw i32 %123, 1
  %180 = add i32 %179, %178
  %181 = icmp ugt i32 %180, 4
  %182 = select i1 %181, i32 %180, i32 4
  %183 = icmp ugt i32 %182, %173
  %184 = select i1 %183, i32 %182, i32 %173
  %185 = icmp ult i32 %123, %184
  br i1 %185, label %186, label %201, !prof !14

186:                                              ; preds = %177
  %187 = inttoptr i64 %122 to i8*
  %188 = icmp eq i64 %122, 0
  %189 = zext i32 %184 to i64
  %190 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %189) #10, !noalias !11
  %191 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %190) #10, !noalias !11
  %192 = ptrtoint i8* %191 to i64
  br i1 %188, label %193, label %195

193:                                              ; preds = %186
  %194 = trunc i64 %190 to i32
  br label %201

195:                                              ; preds = %186
  %196 = icmp eq i8* %191, null
  br i1 %196, label %199, label %197, !prof !2

197:                                              ; preds = %195
  %198 = zext i32 %124 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %191, i8* nonnull align 1 %187, i64 %198, i1 false) #10, !noalias !11
  br label %199

199:                                              ; preds = %197, %195
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %187) #10, !noalias !11
  %200 = trunc i64 %190 to i32
  br label %201

201:                                              ; preds = %199, %193, %177, %175
  %202 = phi i32 [ %123, %175 ], [ %194, %193 ], [ %200, %199 ], [ %123, %177 ]
  %203 = phi i64 [ %122, %175 ], [ %192, %193 ], [ %192, %199 ], [ %122, %177 ]
  %204 = inttoptr i64 %203 to i8*
  %205 = zext i32 %124 to i64
  %206 = getelementptr inbounds i8, i8* %204, i64 %205
  %207 = zext i32 %173 to i64
  %208 = getelementptr inbounds i8, i8* %204, i64 %207
  %209 = ptrtoint i8* %208 to i64
  %210 = ptrtoint i8* %206 to i64
  %211 = sub i64 %209, %210
  call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 0, i64 %211, i1 false) #10, !noalias !11
  br label %212

212:                                              ; preds = %201, %170
  %213 = phi i32 [ %173, %201 ], [ %124, %170 ]
  %214 = phi i32 [ %202, %201 ], [ %123, %170 ]
  %215 = phi i64 [ %203, %201 ], [ %122, %170 ]
  %216 = phi i8* [ %204, %201 ], [ %120, %170 ]
  %217 = zext i32 %119 to i64
  %218 = getelementptr inbounds i8, i8* %216, i64 %217
  %219 = sext i32 %171 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %218, i8* nonnull align 16 %91, i64 %219, i1 false) #10, !noalias !11
  %220 = add i32 %171, %119
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %91) #10, !noalias !11
  br label %229

221:                                              ; preds = %251, %245, %164, %158
  %222 = phi i64 [ %159, %158 ], [ %165, %164 ], [ %246, %245 ], [ %252, %251 ]
  %223 = trunc i64 %222 to i8
  br label %224

224:                                              ; preds = %221, %153
  %225 = phi i8 [ %154, %153 ], [ %223, %221 ]
  %226 = add i32 %119, 1
  %227 = zext i32 %119 to i64
  %228 = getelementptr inbounds i8, i8* %120, i64 %227
  store i8 %225, i8* %228, align 1, !noalias !11
  br label %229

229:                                              ; preds = %224, %212
  %230 = phi i32 [ %124, %224 ], [ %213, %212 ]
  %231 = phi i32 [ %123, %224 ], [ %214, %212 ]
  %232 = phi i64 [ %122, %224 ], [ %215, %212 ]
  %233 = phi i32 [ %151, %224 ], [ %173, %212 ]
  %234 = phi i8* [ %120, %224 ], [ %216, %212 ]
  %235 = phi i32 [ %226, %224 ], [ %220, %212 ]
  %236 = icmp ult i32 %147, %3
  br i1 %236, label %117, label %92

237:                                              ; preds = %115, %111, %84
  %238 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %239 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %238, i64 0, i32 1, i32 0
  %240 = load i8, i8* %239, align 1
  %241 = icmp slt i8 %240, 0
  br i1 %241, label %242, label %244

242:                                              ; preds = %237
  %243 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %243) #11
  br label %244

244:                                              ; preds = %237, %242
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret void

245:                                              ; preds = %164
  %246 = or i64 %159, 2
  %247 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %246
  %248 = load i16, i16* %247, align 4, !noalias !11
  %249 = zext i16 %248 to i32
  %250 = icmp eq i32 %148, %249
  br i1 %250, label %221, label %251

251:                                              ; preds = %245
  %252 = or i64 %159, 3
  %253 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %252
  %254 = load i16, i16* %253, align 2, !noalias !11
  %255 = zext i16 %254 to i32
  %256 = icmp eq i32 %148, %255
  br i1 %256, label %221, label %257

257:                                              ; preds = %251
  %258 = add nuw nsw i64 %159, 4
  %259 = icmp eq i64 %258, 160
  br i1 %259, label %170, label %158
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF15TextCodecLatin16EncodeEPKhjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecLatin1"*, i8*, i32, i32) unnamed_addr #0 align 2 {
  tail call void @_ZN3WTF15TextCodecLatin112EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* sret %0, %"class.WTF::TextCodecLatin1"* %1, i8* %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15TextCodecLatin112EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecLatin1"*, i8*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca [32 x i8], align 16
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = zext i32 %3 to i64
  %11 = icmp ult i32 %3, 23
  %12 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  br i1 %11, label %20, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = add nuw nsw i64 %10, 16
  %17 = and i64 %16, 8589934576
  %18 = tail call i8* @_Znwm(i64 %17) #11
  store i8* %18, i8** %9, align 8
  %19 = or i64 %17, -9223372036854775808
  store i64 %19, i64* %14, align 8
  store i64 %10, i64* %15, align 8
  br label %27

20:                                               ; preds = %5
  %21 = trunc i32 %3 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %8, i64 %10
  store i8 0, i8* %26, align 1
  br label %81

27:                                               ; preds = %20, %13
  %28 = phi i8* [ %18, %13 ], [ %8, %20 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %28, i8 0, i64 %10, i1 false) #10
  %29 = getelementptr inbounds i8, i8* %28, i64 %10
  store i8 0, i8* %29, align 1
  %30 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = and i64 %10, 1
  %33 = icmp eq i32 %3, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %27
  %35 = sub nsw i64 %10, %32
  br label %55

36:                                               ; preds = %55, %27
  %37 = phi i32 [ undef, %27 ], [ %77, %55 ]
  %38 = phi i64 [ 0, %27 ], [ %78, %55 ]
  %39 = phi i32 [ 0, %27 ], [ %77, %55 ]
  %40 = icmp eq i64 %32, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds i8, i8* %2, i64 %38
  %43 = load i8, i8* %42, align 1
  %44 = load i8, i8* %31, align 1
  %45 = icmp slt i8 %44, 0
  %46 = load i8*, i8** %9, align 8
  %47 = select i1 %45, i8* %46, i8* %8
  %48 = getelementptr inbounds i8, i8* %47, i64 %38
  store i8 %43, i8* %48, align 1
  %49 = zext i8 %43 to i32
  %50 = or i32 %39, %49
  br label %51

51:                                               ; preds = %36, %41
  %52 = phi i32 [ %37, %36 ], [ %50, %41 ]
  %53 = and i32 %52, 65408
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %81, label %83

55:                                               ; preds = %55, %34
  %56 = phi i64 [ 0, %34 ], [ %78, %55 ]
  %57 = phi i32 [ 0, %34 ], [ %77, %55 ]
  %58 = phi i64 [ %35, %34 ], [ %79, %55 ]
  %59 = getelementptr inbounds i8, i8* %2, i64 %56
  %60 = load i8, i8* %59, align 1
  %61 = load i8, i8* %31, align 1
  %62 = icmp slt i8 %61, 0
  %63 = load i8*, i8** %9, align 8
  %64 = select i1 %62, i8* %63, i8* %8
  %65 = getelementptr inbounds i8, i8* %64, i64 %56
  store i8 %60, i8* %65, align 1
  %66 = zext i8 %60 to i32
  %67 = or i32 %57, %66
  %68 = or i64 %56, 1
  %69 = getelementptr inbounds i8, i8* %2, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = load i8, i8* %31, align 1
  %72 = icmp slt i8 %71, 0
  %73 = load i8*, i8** %9, align 8
  %74 = select i1 %72, i8* %73, i8* %8
  %75 = getelementptr inbounds i8, i8* %74, i64 %68
  store i8 %70, i8* %75, align 1
  %76 = zext i8 %70 to i32
  %77 = or i32 %67, %76
  %78 = add nuw nsw i64 %56, 2
  %79 = add i64 %58, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %36, label %55

81:                                               ; preds = %25, %51
  %82 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* nonnull align 8 %8, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #10
  br label %207

83:                                               ; preds = %51
  %84 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %10) #10, !noalias !15
  %85 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %84) #10, !noalias !15
  %86 = ptrtoint i8* %85 to i64
  %87 = trunc i64 %84 to i32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 0, i64 %10, i1 false) #10, !noalias !15
  %88 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  br label %114

89:                                               ; preds = %199
  %90 = zext i32 %205 to i64
  %91 = icmp ult i32 %205, 23
  br i1 %91, label %100, label %92

92:                                               ; preds = %89
  %93 = add nuw nsw i64 %90, 16
  %94 = and i64 %93, 8589934576
  %95 = call i8* @_Znwm(i64 %94) #11, !noalias !15
  %96 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %95, i8** %96, align 8, !alias.scope !15
  %97 = or i64 %94, -9223372036854775808
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %97, i64* %98, align 8, !alias.scope !15
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %90, i64* %99, align 8, !alias.scope !15
  br label %106

100:                                              ; preds = %89
  %101 = trunc i32 %205 to i8
  %102 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %102, i64 0, i32 1, i32 0
  store i8 %101, i8* %103, align 1, !alias.scope !15
  %104 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %105 = icmp eq i32 %205, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %100, %92
  %107 = phi i8* [ %95, %92 ], [ %104, %100 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %107, i8* align 1 %204, i64 %90, i1 false) #10
  br label %108

108:                                              ; preds = %106, %100
  %109 = phi i8* [ %104, %100 ], [ %107, %106 ]
  %110 = getelementptr inbounds i8, i8* %109, i64 %90
  store i8 0, i8* %110, align 1
  %111 = icmp eq i64 %202, 0
  br i1 %111, label %207, label %112, !prof !14

112:                                              ; preds = %108
  %113 = inttoptr i64 %202 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %113) #10, !noalias !15
  br label %207

114:                                              ; preds = %199, %83
  %115 = phi i64 [ 0, %83 ], [ %122, %199 ]
  %116 = phi i32 [ 0, %83 ], [ %205, %199 ]
  %117 = phi i8* [ %85, %83 ], [ %204, %199 ]
  %118 = phi i32 [ %3, %83 ], [ %203, %199 ]
  %119 = phi i64 [ %86, %83 ], [ %202, %199 ]
  %120 = phi i32 [ %87, %83 ], [ %201, %199 ]
  %121 = phi i32 [ %3, %83 ], [ %200, %199 ]
  %122 = add nuw nsw i64 %115, 1
  %123 = getelementptr inbounds i8, i8* %2, i64 %115
  %124 = load i8, i8* %123, align 1, !noalias !15
  %125 = zext i8 %124 to i32
  %126 = and i32 %125, 224
  %127 = icmp eq i32 %126, 128
  br i1 %127, label %128, label %194

128:                                              ; preds = %114, %227
  %129 = phi i64 [ %228, %227 ], [ 128, %114 ]
  %130 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %129
  %131 = load i16, i16* %130, align 8, !noalias !15
  %132 = zext i16 %131 to i32
  %133 = icmp eq i32 %132, %125
  br i1 %133, label %191, label %134

134:                                              ; preds = %128
  %135 = or i64 %129, 1
  %136 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %135
  %137 = load i16, i16* %136, align 2, !noalias !15
  %138 = zext i16 %137 to i32
  %139 = icmp eq i32 %138, %125
  br i1 %139, label %191, label %215

140:                                              ; preds = %227
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %88) #10, !noalias !15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %88, i8 -86, i64 32, i1 false) #10, !noalias !15
  %141 = call i32 @_ZN3WTF9TextCodec25GetUnencodableReplacementEjNS_19UnencodableHandlingEPc(i32 %125, i32 %4, i8* nonnull %88) #10, !noalias !15
  %142 = add i32 %118, -1
  %143 = add i32 %142, %141
  %144 = icmp ugt i32 %143, %121
  br i1 %144, label %145, label %182

145:                                              ; preds = %140
  %146 = icmp ult i32 %120, %143
  br i1 %146, label %147, label %171

147:                                              ; preds = %145
  %148 = lshr i32 %120, 2
  %149 = add nuw i32 %120, 1
  %150 = add i32 %149, %148
  %151 = icmp ugt i32 %150, 4
  %152 = select i1 %151, i32 %150, i32 4
  %153 = icmp ugt i32 %152, %143
  %154 = select i1 %153, i32 %152, i32 %143
  %155 = icmp ult i32 %120, %154
  br i1 %155, label %156, label %171, !prof !14

156:                                              ; preds = %147
  %157 = inttoptr i64 %119 to i8*
  %158 = icmp eq i64 %119, 0
  %159 = zext i32 %154 to i64
  %160 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %159) #10, !noalias !15
  %161 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %160) #10, !noalias !15
  %162 = ptrtoint i8* %161 to i64
  br i1 %158, label %163, label %165

163:                                              ; preds = %156
  %164 = trunc i64 %160 to i32
  br label %171

165:                                              ; preds = %156
  %166 = icmp eq i8* %161, null
  br i1 %166, label %169, label %167, !prof !2

167:                                              ; preds = %165
  %168 = zext i32 %121 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %161, i8* nonnull align 1 %157, i64 %168, i1 false) #10, !noalias !15
  br label %169

169:                                              ; preds = %167, %165
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %157) #10, !noalias !15
  %170 = trunc i64 %160 to i32
  br label %171

171:                                              ; preds = %169, %163, %147, %145
  %172 = phi i32 [ %120, %145 ], [ %164, %163 ], [ %170, %169 ], [ %120, %147 ]
  %173 = phi i64 [ %119, %145 ], [ %162, %163 ], [ %162, %169 ], [ %119, %147 ]
  %174 = inttoptr i64 %173 to i8*
  %175 = zext i32 %121 to i64
  %176 = getelementptr inbounds i8, i8* %174, i64 %175
  %177 = zext i32 %143 to i64
  %178 = getelementptr inbounds i8, i8* %174, i64 %177
  %179 = ptrtoint i8* %178 to i64
  %180 = ptrtoint i8* %176 to i64
  %181 = sub i64 %179, %180
  call void @llvm.memset.p0i8.i64(i8* align 1 %176, i8 0, i64 %181, i1 false) #10, !noalias !15
  br label %182

182:                                              ; preds = %171, %140
  %183 = phi i32 [ %143, %171 ], [ %121, %140 ]
  %184 = phi i32 [ %172, %171 ], [ %120, %140 ]
  %185 = phi i64 [ %173, %171 ], [ %119, %140 ]
  %186 = phi i8* [ %174, %171 ], [ %117, %140 ]
  %187 = zext i32 %116 to i64
  %188 = getelementptr inbounds i8, i8* %186, i64 %187
  %189 = sext i32 %141 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %188, i8* nonnull align 16 %88, i64 %189, i1 false) #10, !noalias !15
  %190 = add i32 %141, %116
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %88) #10, !noalias !15
  br label %199

191:                                              ; preds = %221, %215, %134, %128
  %192 = phi i64 [ %129, %128 ], [ %135, %134 ], [ %216, %215 ], [ %222, %221 ]
  %193 = trunc i64 %192 to i8
  br label %194

194:                                              ; preds = %191, %114
  %195 = phi i8 [ %124, %114 ], [ %193, %191 ]
  %196 = add i32 %116, 1
  %197 = zext i32 %116 to i64
  %198 = getelementptr inbounds i8, i8* %117, i64 %197
  store i8 %195, i8* %198, align 1, !noalias !15
  br label %199

199:                                              ; preds = %194, %182
  %200 = phi i32 [ %121, %194 ], [ %183, %182 ]
  %201 = phi i32 [ %120, %194 ], [ %184, %182 ]
  %202 = phi i64 [ %119, %194 ], [ %185, %182 ]
  %203 = phi i32 [ %118, %194 ], [ %143, %182 ]
  %204 = phi i8* [ %117, %194 ], [ %186, %182 ]
  %205 = phi i32 [ %196, %194 ], [ %190, %182 ]
  %206 = icmp eq i64 %122, %10
  br i1 %206, label %89, label %114

207:                                              ; preds = %112, %108, %81
  %208 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %209 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %208, i64 0, i32 1, i32 0
  %210 = load i8, i8* %209, align 1
  %211 = icmp slt i8 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %207
  %213 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %213) #11
  br label %214

214:                                              ; preds = %207, %212
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret void

215:                                              ; preds = %134
  %216 = or i64 %129, 2
  %217 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %216
  %218 = load i16, i16* %217, align 4, !noalias !15
  %219 = zext i16 %218 to i32
  %220 = icmp eq i32 %219, %125
  br i1 %220, label %191, label %221

221:                                              ; preds = %215
  %222 = or i64 %129, 3
  %223 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTFL6kTableE, i64 0, i64 %222
  %224 = load i16, i16* %223, align 2, !noalias !15
  %225 = zext i16 %224 to i32
  %226 = icmp eq i32 %225, %125
  br i1 %226, label %191, label %227

227:                                              ; preds = %221
  %228 = add nuw nsw i64 %129, 4
  %229 = icmp eq i64 %228, 160
  br i1 %229, label %140, label %128
}

; Function Attrs: nounwind
declare void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15TextCodecLatin1D0Ev(%"class.WTF::TextCodecLatin1"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::TextCodecLatin1", %"class.WTF::TextCodecLatin1"* %0, i64 0, i32 0
  tail call void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"* %2) #10
  %3 = bitcast %"class.WTF::TextCodecLatin1"* %0 to i8*
  tail call void @free(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm(%"class.WTF::TextCodec"*, i8*, i32, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret { i32, i64 } zeroinitializer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm(%"class.WTF::TextCodec"*, i16*, i32, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret { i32, i64 } zeroinitializer
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #7

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare i32 @_ZN3WTF9TextCodec25GetUnencodableReplacementEjNS_19UnencodableHandlingEPc(i32, i32, i8*) local_unnamed_addr #7

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.18, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.19, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #10
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #7

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #7

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3WTFL26EncodeComplexWindowsLatin1IDsEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE: argument 0"}
!13 = distinct !{!13, !"_ZN3WTFL26EncodeComplexWindowsLatin1IDsEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE"}
!14 = !{!"branch_weights", i32 2000, i32 1}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3WTFL26EncodeComplexWindowsLatin1IhEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE: argument 0"}
!17 = distinct !{!17, !"_ZN3WTFL26EncodeComplexWindowsLatin1IhEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKT_jNS_19UnencodableHandlingE"}
