; ModuleID = '../../components/policy/core/common/policy_load_status.cc'
source_filename = "../../components/policy/core/common/policy_load_status.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.policy::PolicyLoadStatusSampler" = type { i32 (...)**, %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.policy::PolicyLoadStatusUmaReporter" = type { %"class.policy::PolicyLoadStatusSampler" }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZTVN6policy23PolicyLoadStatusSamplerE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.policy::PolicyLoadStatusSampler"*)* @_ZN6policy23PolicyLoadStatusSamplerD2Ev to i8*), i8* bitcast (void (%"class.policy::PolicyLoadStatusSampler"*)* @_ZN6policy23PolicyLoadStatusSamplerD0Ev to i8*)] }, align 8
@_ZTVN6policy27PolicyLoadStatusUmaReporterE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.policy::PolicyLoadStatusUmaReporter"*)* @_ZN6policy27PolicyLoadStatusUmaReporterD2Ev to i8*), i8* bitcast (void (%"class.policy::PolicyLoadStatusUmaReporter"*)* @_ZN6policy27PolicyLoadStatusUmaReporterD0Ev to i8*)] }, align 8
@_ZN6policy12_GLOBAL__N_114kHistogramNameE = internal constant [28 x i8] c"Enterprise.PolicyLoadStatus\00", align 16

@_ZN6policy23PolicyLoadStatusSamplerC1Ev = hidden unnamed_addr alias void (%"class.policy::PolicyLoadStatusSampler"*), void (%"class.policy::PolicyLoadStatusSampler"*)* @_ZN6policy23PolicyLoadStatusSamplerC2Ev
@_ZN6policy23PolicyLoadStatusSamplerD1Ev = hidden unnamed_addr alias void (%"class.policy::PolicyLoadStatusSampler"*), void (%"class.policy::PolicyLoadStatusSampler"*)* @_ZN6policy23PolicyLoadStatusSamplerD2Ev
@_ZN6policy27PolicyLoadStatusUmaReporterC1Ev = hidden unnamed_addr alias void (%"class.policy::PolicyLoadStatusUmaReporter"*), void (%"class.policy::PolicyLoadStatusUmaReporter"*)* @_ZN6policy27PolicyLoadStatusUmaReporterC2Ev
@_ZN6policy27PolicyLoadStatusUmaReporterD1Ev = hidden unnamed_addr alias void (%"class.policy::PolicyLoadStatusUmaReporter"*), void (%"class.policy::PolicyLoadStatusUmaReporter"*)* @_ZN6policy27PolicyLoadStatusUmaReporterD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6policy23PolicyLoadStatusSamplerC2Ev(%"class.policy::PolicyLoadStatusSampler"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.policy::PolicyLoadStatusSampler", %"class.policy::PolicyLoadStatusSampler"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6policy23PolicyLoadStatusSamplerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.policy::PolicyLoadStatusSampler", %"class.policy::PolicyLoadStatusSampler"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy23PolicyLoadStatusSampler3AddENS_16PolicyLoadStatusE(%"class.policy::PolicyLoadStatusSampler"*, i32) local_unnamed_addr #1 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.policy::PolicyLoadStatusSampler", %"class.policy::PolicyLoadStatusSampler"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = shl i64 1, %3
  %6 = load i64, i64* %4, align 8
  %7 = or i64 %6, %5
  store i64 %7, i64* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6policy23PolicyLoadStatusSamplerD2Ev(%"class.policy::PolicyLoadStatusSampler"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy23PolicyLoadStatusSamplerD0Ev(%"class.policy::PolicyLoadStatusSampler"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.policy::PolicyLoadStatusSampler"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6policy27PolicyLoadStatusUmaReporterC2Ev(%"class.policy::PolicyLoadStatusUmaReporter"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.policy::PolicyLoadStatusUmaReporter", %"class.policy::PolicyLoadStatusUmaReporter"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.policy::PolicyLoadStatusUmaReporter", %"class.policy::PolicyLoadStatusUmaReporter"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i64 1, i64* %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6policy27PolicyLoadStatusUmaReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy27PolicyLoadStatusUmaReporterD2Ev(%"class.policy::PolicyLoadStatusUmaReporter"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.policy::PolicyLoadStatusUmaReporter", %"class.policy::PolicyLoadStatusUmaReporter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6policy27PolicyLoadStatusUmaReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @_ZN6policy12_GLOBAL__N_114kHistogramNameE, i64 0, i64 0), i32 1, i32 9, i32 10, i32 1) #7
  %4 = getelementptr inbounds %"class.policy::PolicyLoadStatusUmaReporter", %"class.policy::PolicyLoadStatusUmaReporter"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.base::HistogramBase"* %3 to void (%"class.base::HistogramBase"*, i32)***
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %11 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %10, i64 6
  %12 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %11, align 8
  tail call void %12(%"class.base::HistogramBase"* %3, i32 0) #7
  %13 = load i64, i64* %4, align 8
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i64 [ %6, %1 ], [ %13, %9 ]
  %16 = and i64 %15, 2
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %20 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %19, i64 6
  %21 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %20, align 8
  tail call void %21(%"class.base::HistogramBase"* %3, i32 1) #7
  %22 = load i64, i64* %4, align 8
  br label %23

23:                                               ; preds = %18, %14
  %24 = phi i64 [ %22, %18 ], [ %15, %14 ]
  %25 = and i64 %24, 4
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %29 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %28, i64 6
  %30 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %29, align 8
  tail call void %30(%"class.base::HistogramBase"* %3, i32 2) #7
  %31 = load i64, i64* %4, align 8
  br label %32

32:                                               ; preds = %27, %23
  %33 = phi i64 [ %31, %27 ], [ %24, %23 ]
  %34 = and i64 %33, 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %32
  %37 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %38 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %37, i64 6
  %39 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %38, align 8
  tail call void %39(%"class.base::HistogramBase"* %3, i32 3) #7
  %40 = load i64, i64* %4, align 8
  br label %41

41:                                               ; preds = %36, %32
  %42 = phi i64 [ %40, %36 ], [ %33, %32 ]
  %43 = and i64 %42, 16
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %41
  %46 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %47 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %46, i64 6
  %48 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %47, align 8
  tail call void %48(%"class.base::HistogramBase"* %3, i32 4) #7
  %49 = load i64, i64* %4, align 8
  br label %50

50:                                               ; preds = %45, %41
  %51 = phi i64 [ %49, %45 ], [ %42, %41 ]
  %52 = and i64 %51, 32
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %56 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %55, i64 6
  %57 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %56, align 8
  tail call void %57(%"class.base::HistogramBase"* %3, i32 5) #7
  %58 = load i64, i64* %4, align 8
  br label %59

59:                                               ; preds = %54, %50
  %60 = phi i64 [ %58, %54 ], [ %51, %50 ]
  %61 = and i64 %60, 64
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %68, label %63

63:                                               ; preds = %59
  %64 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %65 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %64, i64 6
  %66 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %65, align 8
  tail call void %66(%"class.base::HistogramBase"* %3, i32 6) #7
  %67 = load i64, i64* %4, align 8
  br label %68

68:                                               ; preds = %63, %59
  %69 = phi i64 [ %67, %63 ], [ %60, %59 ]
  %70 = trunc i64 %69 to i8
  %71 = icmp sgt i8 %70, -1
  br i1 %71, label %77, label %72

72:                                               ; preds = %68
  %73 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %74 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %73, i64 6
  %75 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %74, align 8
  tail call void %75(%"class.base::HistogramBase"* %3, i32 7) #7
  %76 = load i64, i64* %4, align 8
  br label %77

77:                                               ; preds = %72, %68
  %78 = phi i64 [ %76, %72 ], [ %69, %68 ]
  %79 = and i64 %78, 256
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %77
  %82 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %5, align 8
  %83 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %82, i64 6
  %84 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %83, align 8
  tail call void %84(%"class.base::HistogramBase"* %3, i32 8) #7
  br label %85

85:                                               ; preds = %81, %77
  ret void
}

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy27PolicyLoadStatusUmaReporterD0Ev(%"class.policy::PolicyLoadStatusUmaReporter"*) unnamed_addr #1 align 2 {
  tail call void @_ZN6policy27PolicyLoadStatusUmaReporterD2Ev(%"class.policy::PolicyLoadStatusUmaReporter"* %0) #7
  %2 = bitcast %"class.policy::PolicyLoadStatusUmaReporter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
