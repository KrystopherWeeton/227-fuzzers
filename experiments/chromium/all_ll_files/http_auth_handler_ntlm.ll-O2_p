; ModuleID = '../../net/http/http_auth_handler_ntlm.cc'
source_filename = "../../net/http/http_auth_handler_ntlm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::HttpAuthHandlerNTLM::Factory" = type { %"class.net::HttpAuthHandlerFactory" }
%"class.net::HttpAuthHandlerFactory" = type { i32 (...)**, %"class.net::HttpAuthPreferences"* }
%"class.net::HttpAuthPreferences" = type opaque
%"class.net::HttpAuthHandlerNTLM" = type { %"class.net::HttpAuthHandler", %"class.net::HttpAuthNtlmMechanism", %"class.std::__1::basic_string" }
%"class.net::HttpAuthHandler" = type { i32 (...)**, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %class.GURL, i32, i32, i32, %"class.net::NetLogWithSource", %"class.base::OnceCallback" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%"class.net::NetLogWithSource" = type { %"struct.net::NetLogSource", %"class.net::NetLog"* }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.9" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.4" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.11" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.net::HttpAuthNtlmMechanism" = type <{ %"class.net::HttpAuthMechanism", %"class.net::ntlm::NtlmClient", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.net::HttpAuthMechanism" = type { i32 (...)** }
%"class.net::ntlm::NtlmClient" = type { %"struct.net::ntlm::NtlmFeatures", i32, %"class.std::__1::vector.17" }
%"struct.net::ntlm::NtlmFeatures" = type { i8, i8, i8 }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { i8*, i8*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.net::HttpAuthChallengeTokenizer" = type opaque
%"class.net::SSLInfo" = type <{ %class.scoped_refptr.24, %class.scoped_refptr.24, i32, i16, i16, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.45", %"class.std::__1::basic_string", %"class.std::__1::vector.53", i32, %"struct.net::OCSPVerifyResult", i8, [3 x i8] }>
%class.scoped_refptr.24 = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe.25", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.34", %"class.std::__1::vector.38" }
%"class.base::RefCountedThreadSafe.25" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.26", %"class.std::__1::vector.26", %"class.std::__1::vector.26", %"class.std::__1::vector.26" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.33" }
%"class.base::time_internal::TimeBase.33" = type { i64 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"class.std::__1::unique_ptr.34"*, %"class.std::__1::unique_ptr.34"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::unique_ptr.34"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.48" }
%"class.net::HashValue" = type { i32, %union.anon.47 }
%union.anon.47 = type { %"struct.net::SHA256HashValue" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.net::HashValue"* }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.57" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.55, i32, [4 x i8] }>
%class.scoped_refptr.55 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.56", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.56" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.62 }
%union.anon.62 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.63" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.63" = type { %"class.absl::optional_internal::optional_data.64" }
%"class.absl::optional_internal::optional_data.64" = type { %"class.absl::optional_internal::optional_data_base.65" }
%"class.absl::optional_internal::optional_data_base.65" = type { %"class.absl::optional_internal::optional_data_dtor_base.66" }
%"class.absl::optional_internal::optional_data_dtor_base.66" = type { i8, %union.anon.67 }
%union.anon.67 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.net::HostResolver" = type opaque
%"class.std::__1::unique_ptr.68" = type opaque

@_ZTVN3net19HttpAuthHandlerNTLM7FactoryE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::HttpAuthHandlerNTLM::Factory"*)* @_ZN3net19HttpAuthHandlerNTLM7FactoryD2Ev to i8*), i8* bitcast (void (%"class.net::HttpAuthHandlerNTLM::Factory"*)* @_ZN3net19HttpAuthHandlerNTLM7FactoryD0Ev to i8*), i8* bitcast (i32 (%"class.net::HttpAuthHandlerNTLM::Factory"*, %"class.net::HttpAuthChallengeTokenizer"*, i32, %"class.net::SSLInfo"*, %"class.net::NetworkIsolationKey"*, %class.GURL*, i32, i32, %"class.net::NetLogWithSource"*, %"class.net::HostResolver"*, %"class.std::__1::unique_ptr.68"*)* @_ZN3net19HttpAuthHandlerNTLM7Factory17CreateAuthHandlerEPNS_26HttpAuthChallengeTokenizerENS_8HttpAuth6TargetERKNS_7SSLInfoERKNS_19NetworkIsolationKeyERK4GURLNS_22HttpAuthHandlerFactory12CreateReasonEiRKNS_16NetLogWithSourceEPNS_12HostResolverEPNSt3__110unique_ptrINS_15HttpAuthHandlerENSM_14default_deleteISO_EEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [6 x i8] c"HTTP/\00", align 1

@_ZN3net19HttpAuthHandlerNTLM7FactoryC1Ev = hidden unnamed_addr alias void (%"class.net::HttpAuthHandlerNTLM::Factory"*), void (%"class.net::HttpAuthHandlerNTLM::Factory"*)* @_ZN3net19HttpAuthHandlerNTLM7FactoryC2Ev
@_ZN3net19HttpAuthHandlerNTLM7FactoryD1Ev = hidden unnamed_addr alias void (%"class.net::HttpAuthHandlerNTLM::Factory"*), void (%"class.net::HttpAuthHandlerNTLM::Factory"*)* @_ZN3net19HttpAuthHandlerNTLM7FactoryD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net19HttpAuthHandlerNTLM7FactoryC2Ev(%"class.net::HttpAuthHandlerNTLM::Factory"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM::Factory", %"class.net::HttpAuthHandlerNTLM::Factory"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM::Factory", %"class.net::HttpAuthHandlerNTLM::Factory"* %0, i64 0, i32 0, i32 1
  store %"class.net::HttpAuthPreferences"* null, %"class.net::HttpAuthPreferences"** %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net19HttpAuthHandlerNTLM7FactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net19HttpAuthHandlerNTLM7FactoryD2Ev(%"class.net::HttpAuthHandlerNTLM::Factory"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net19HttpAuthHandlerNTLM7FactoryD0Ev(%"class.net::HttpAuthHandlerNTLM::Factory"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.net::HttpAuthHandlerNTLM::Factory"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net19HttpAuthHandlerNTLM4InitEPNS_26HttpAuthChallengeTokenizerERKNS_7SSLInfoERKNS_19NetworkIsolationKeyE(%"class.net::HttpAuthHandlerNTLM"*, %"class.net::HttpAuthChallengeTokenizer"*, %"class.net::SSLInfo"* nocapture readonly dereferenceable(128), %"class.net::NetworkIsolationKey"* nocapture readnone dereferenceable(184)) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM", %"class.net::HttpAuthHandlerNTLM"* %0, i64 0, i32 0, i32 1
  store i32 2, i32* %5, align 8
  %6 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM", %"class.net::HttpAuthHandlerNTLM"* %0, i64 0, i32 0, i32 5
  store i32 3, i32* %6, align 8
  %7 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM", %"class.net::HttpAuthHandlerNTLM"* %0, i64 0, i32 0, i32 7
  store i32 3, i32* %7, align 8
  %8 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %2, i64 0, i32 0, i32 0
  %9 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %8, align 8
  %10 = icmp eq %"class.net::X509Certificate"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.net::HttpAuthHandlerNTLM", %"class.net::HttpAuthHandlerNTLM"* %0, i64 0, i32 2
  %13 = tail call zeroext i1 @_ZN3net9x509_util34GetTLSServerEndPointChannelBindingERKNS_15X509CertificateEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.net::X509Certificate"* nonnull dereferenceable(464) %9, %"class.std::__1::basic_string"* %12) #7
  br label %14

14:                                               ; preds = %4, %11
  %15 = tail call i32 @_ZN3net19HttpAuthHandlerNTLM14ParseChallengeEPNS_26HttpAuthChallengeTokenizerE(%"class.net::HttpAuthHandlerNTLM"* %0, %"class.net::HttpAuthChallengeTokenizer"* %1) #7
  %16 = icmp eq i32 %15, 0
  ret i1 %16
}

declare zeroext i1 @_ZN3net9x509_util34GetTLSServerEndPointChannelBindingERKNS_15X509CertificateEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.net::X509Certificate"* dereferenceable(464), %"class.std::__1::basic_string"*) local_unnamed_addr #4

declare i32 @_ZN3net19HttpAuthHandlerNTLM14ParseChallengeEPNS_26HttpAuthChallengeTokenizerE(%"class.net::HttpAuthHandlerNTLM"*, %"class.net::HttpAuthChallengeTokenizer"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net19HttpAuthHandlerNTLM26HandleAnotherChallengeImplEPNS_26HttpAuthChallengeTokenizerE(%"class.net::HttpAuthHandlerNTLM"*, %"class.net::HttpAuthChallengeTokenizer"*) unnamed_addr #2 align 2 {
  %3 = tail call i32 @_ZN3net19HttpAuthHandlerNTLM14ParseChallengeEPNS_26HttpAuthChallengeTokenizerE(%"class.net::HttpAuthHandlerNTLM"* %0, %"class.net::HttpAuthChallengeTokenizer"* %1) #7
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net19HttpAuthHandlerNTLM9CreateSPNERK4GURL(%"class.std::__1::basic_string"* noalias sret, %class.GURL* dereferenceable(120)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 24, i1 false)
  store i8 5, i8* %5, align 1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #7
  %8 = getelementptr inbounds i8, i8* %7, i64 5
  store i8 0, i8* %8, align 1
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  call void @_ZN3net22GetHostAndOptionalPortERK4GURL(%"class.std::__1::basic_string"* nonnull sret %3, %class.GURL* dereferenceable(120) %1) #7
  %10 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %12 to i64
  %19 = select i1 %13, i8* %15, i8* %9
  %20 = select i1 %13, i64 %17, i64 %18
  %21 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %19, i64 %20) #7
  %22 = load i8, i8* %11, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %25) #6
  br label %26

26:                                               ; preds = %2, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN3net22GetHostAndOptionalPortERK4GURL(%"class.std::__1::basic_string"* sret, %class.GURL* dereferenceable(120)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare i32 @_ZN3net19HttpAuthHandlerNTLM7Factory17CreateAuthHandlerEPNS_26HttpAuthChallengeTokenizerENS_8HttpAuth6TargetERKNS_7SSLInfoERKNS_19NetworkIsolationKeyERK4GURLNS_22HttpAuthHandlerFactory12CreateReasonEiRKNS_16NetLogWithSourceEPNS_12HostResolverEPNSt3__110unique_ptrINS_15HttpAuthHandlerENSM_14default_deleteISO_EEEE(%"class.net::HttpAuthHandlerNTLM::Factory"*, %"class.net::HttpAuthChallengeTokenizer"*, i32, %"class.net::SSLInfo"* dereferenceable(128), %"class.net::NetworkIsolationKey"* dereferenceable(184), %class.GURL* dereferenceable(120), i32, i32, %"class.net::NetLogWithSource"* dereferenceable(24), %"class.net::HostResolver"*, %"class.std::__1::unique_ptr.68"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
