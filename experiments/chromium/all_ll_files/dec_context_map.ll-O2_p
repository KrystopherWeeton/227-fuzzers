; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_context_map.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_context_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.3", %"class.std::__1::vector.17", %"class.std::__1::vector.24", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.12" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.5" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.7" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i32*, i32*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl16DecodeContextMapEPNSt3__16vectorIhNS0_9allocatorIhEEEEPmPNS_9BitReaderE(%"class.std::__1::vector"* nocapture readonly, i64* nocapture, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca %"struct.jxl::ANSCode", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %"class.jxl::ANSSymbolReader", align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %20, !prof !2

13:                                               ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = load i8*, i8** %8, align 8
  %19 = load i8*, i8** %10, align 8
  br label %33

20:                                               ; preds = %3
  %21 = bitcast i8* %9 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %22, %24
  %26 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = or i64 %27, %25
  store i64 %28, i64* %26, align 8
  %29 = sub i64 63, %24
  %30 = lshr i64 %29, 3
  %31 = getelementptr inbounds i8, i8* %9, i64 %30
  store i8* %31, i8** %8, align 8
  %32 = or i64 %24, 56
  store i64 %32, i64* %23, align 8
  br label %33

33:                                               ; preds = %13, %20
  %34 = phi i8* [ %19, %13 ], [ %11, %20 ]
  %35 = phi i8* [ %18, %13 ], [ %31, %20 ]
  %36 = phi i64 [ %17, %13 ], [ %32, %20 ]
  %37 = phi i64 [ %15, %13 ], [ %28, %20 ]
  %38 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %39 = and i64 %37, 1
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %41 = add i64 %36, -1
  store i64 %41, i64* %40, align 8
  %42 = lshr i64 %37, 1
  store i64 %42, i64* %38, align 8
  %43 = icmp eq i64 %39, 0
  %44 = icmp ugt i8* %35, %34
  br i1 %43, label %119, label %45

45:                                               ; preds = %33
  br i1 %44, label %46, label %49, !prof !2

46:                                               ; preds = %45
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %47 = load i64, i64* %38, align 8
  %48 = load i64, i64* %40, align 8
  br label %58

49:                                               ; preds = %45
  %50 = bitcast i8* %35 to i64*
  %51 = load i64, i64* %50, align 1
  %52 = shl i64 %51, %41
  %53 = or i64 %52, %42
  store i64 %53, i64* %38, align 8
  %54 = sub i64 64, %36
  %55 = lshr i64 %54, 3
  %56 = getelementptr inbounds i8, i8* %35, i64 %55
  store i8* %56, i8** %8, align 8
  %57 = or i64 %41, 56
  store i64 %57, i64* %40, align 8
  br label %58

58:                                               ; preds = %46, %49
  %59 = phi i64 [ %48, %46 ], [ %57, %49 ]
  %60 = phi i64 [ %47, %46 ], [ %53, %49 ]
  %61 = and i64 %60, 3
  %62 = add i64 %59, -2
  store i64 %62, i64* %40, align 8
  %63 = lshr i64 %60, 2
  store i64 %63, i64* %38, align 8
  %64 = icmp eq i64 %61, 0
  br i1 %64, label %109, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector"* %0 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = icmp eq i64 %68, %70
  br i1 %71, label %341, label %72

72:                                               ; preds = %65
  %73 = shl nsw i64 -1, %61
  %74 = xor i64 %73, 255
  %75 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  br label %76

76:                                               ; preds = %72, %95
  %77 = phi i64 [ 0, %72 ], [ %104, %95 ]
  %78 = load i8*, i8** %8, align 8
  %79 = load i8*, i8** %10, align 8
  %80 = icmp ugt i8* %78, %79
  br i1 %80, label %81, label %84, !prof !2

81:                                               ; preds = %76
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %82 = load i64, i64* %38, align 8
  %83 = load i64, i64* %40, align 8
  br label %95

84:                                               ; preds = %76
  %85 = bitcast i8* %78 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = load i64, i64* %40, align 8
  %88 = shl i64 %86, %87
  %89 = load i64, i64* %38, align 8
  %90 = or i64 %89, %88
  store i64 %90, i64* %38, align 8
  %91 = sub i64 63, %87
  %92 = lshr i64 %91, 3
  %93 = getelementptr inbounds i8, i8* %78, i64 %92
  store i8* %93, i8** %8, align 8
  %94 = or i64 %87, 56
  store i64 %94, i64* %40, align 8
  br label %95

95:                                               ; preds = %81, %84
  %96 = phi i64 [ %83, %81 ], [ %94, %84 ]
  %97 = phi i64 [ %82, %81 ], [ %90, %84 ]
  %98 = and i64 %97, %74
  %99 = sub i64 %96, %61
  store i64 %99, i64* %40, align 8
  %100 = lshr i64 %97, %61
  store i64 %100, i64* %38, align 8
  %101 = trunc i64 %98 to i8
  %102 = load i8*, i8** %75, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %77
  store i8 %101, i8* %103, align 1
  %104 = add nuw i64 %77, 1
  %105 = load i64, i64* %67, align 8
  %106 = load i64, i64* %69, align 8
  %107 = sub i64 %105, %106
  %108 = icmp ult i64 %104, %107
  br i1 %108, label %76, label %341

109:                                              ; preds = %58
  %110 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %113 = bitcast i8** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = ptrtoint i8* %111 to i64
  %116 = sub i64 %114, %115
  %117 = icmp sgt i64 %116, 0
  br i1 %117, label %118, label %341

118:                                              ; preds = %109
  call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 0, i64 %116, i1 false)
  br label %341

119:                                              ; preds = %33
  br i1 %44, label %120, label %123, !prof !2

120:                                              ; preds = %119
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %121 = load i64, i64* %38, align 8
  %122 = load i64, i64* %40, align 8
  br label %132

123:                                              ; preds = %119
  %124 = bitcast i8* %35 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = shl i64 %125, %41
  %127 = or i64 %126, %42
  store i64 %127, i64* %38, align 8
  %128 = sub i64 64, %36
  %129 = lshr i64 %128, 3
  %130 = getelementptr inbounds i8, i8* %35, i64 %129
  store i8* %130, i8** %8, align 8
  %131 = or i64 %41, 56
  store i64 %131, i64* %40, align 8
  br label %132

132:                                              ; preds = %120, %123
  %133 = phi i64 [ %122, %120 ], [ %131, %123 ]
  %134 = phi i64 [ %121, %120 ], [ %127, %123 ]
  %135 = and i64 %134, 1
  %136 = add i64 %133, -1
  store i64 %136, i64* %40, align 8
  %137 = lshr i64 %134, 1
  store i64 %137, i64* %38, align 8
  %138 = icmp eq i64 %135, 0
  %139 = bitcast %"struct.jxl::ANSCode"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %139) #7
  %140 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 64, i1 false)
  %141 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 80, i1 false) #7
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %141) #7
  %142 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 7
  store i64 0, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #7
  %144 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #7
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %147 = bitcast i8** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.std::__1::vector"* %0 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %148, %150
  %152 = icmp ult i64 %151, 3
  %153 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %2, i64 1, %"struct.jxl::ANSCode"* nonnull %5, %"class.std::__1::vector"* nonnull %6, i1 zeroext %152) #7
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %281

155:                                              ; preds = %132
  %156 = bitcast %"class.jxl::ANSSymbolReader"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %156) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %156, i8 -86, i64 592, i1 false)
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %7, %"struct.jxl::ANSCode"* nonnull %5, %"class.jxl::BitReader"* %2, i64 0)
  %157 = load i64, i64* %147, align 8
  %158 = load i64, i64* %149, align 8
  %159 = icmp eq i64 %157, %158
  br i1 %159, label %179, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  br label %162

162:                                              ; preds = %160, %170
  %163 = phi i64 [ 0, %160 ], [ %174, %170 ]
  %164 = load i8*, i8** %144, align 8, !noalias !3
  %165 = load i8, i8* %164, align 1, !noalias !3
  %166 = zext i8 %165 to i64
  %167 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %166, %"class.jxl::BitReader"* %2) #7
  %168 = and i64 %167, 4294967040
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %274

170:                                              ; preds = %162
  %171 = trunc i64 %167 to i8
  %172 = load i8*, i8** %161, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 %163
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %163, 1
  %175 = load i64, i64* %147, align 8
  %176 = load i64, i64* %149, align 8
  %177 = sub i64 %175, %176
  %178 = icmp ult i64 %174, %177
  br i1 %178, label %162, label %179

179:                                              ; preds = %170, %155
  %180 = phi i64 [ %158, %155 ], [ %176, %170 ]
  %181 = phi i64 [ 0, %155 ], [ %177, %170 ]
  %182 = inttoptr i64 %180 to i8*
  %183 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 4
  %184 = load i32, i32* %183, align 4
  %185 = icmp ne i32 %184, 1245184
  %186 = or i1 %138, %185
  %187 = zext i1 %185 to i32
  br i1 %186, label %274, label %188

188:                                              ; preds = %179
  %189 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %189) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %189, i8 -86, i64 256, i1 false) #7
  %190 = bitcast [256 x i8]* %4 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %190, align 16
  %191 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 16
  %192 = bitcast i8* %191 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %192, align 16
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 32
  %194 = bitcast i8* %193 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %194, align 16
  %195 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 48
  %196 = bitcast i8* %195 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %196, align 16
  %197 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 64
  %198 = bitcast i8* %197 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %198, align 16
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 80
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %200, align 16
  %201 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 96
  %202 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %202, align 16
  %203 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 112
  %204 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %204, align 16
  %205 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 128
  %206 = bitcast i8* %205 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %206, align 16
  %207 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 144
  %208 = bitcast i8* %207 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %208, align 16
  %209 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 160
  %210 = bitcast i8* %209 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %210, align 16
  %211 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 176
  %212 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %212, align 16
  %213 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 192
  %214 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %214, align 16
  %215 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 208
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %216, align 16
  %217 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 224
  %218 = bitcast i8* %217 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %218, align 16
  %219 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 240
  %220 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %220, align 16
  %221 = trunc i64 %181 to i32
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %273

223:                                              ; preds = %188
  %224 = and i64 %181, 4294967295
  br label %225

225:                                              ; preds = %270, %223
  %226 = phi i64 [ 0, %223 ], [ %271, %270 ]
  %227 = getelementptr inbounds i8, i8* %182, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i64
  %230 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %229
  %231 = load i8, i8* %230, align 1
  store i8 %231, i8* %227, align 1
  %232 = icmp eq i8 %228, 0
  br i1 %232, label %270, label %233

233:                                              ; preds = %225
  %234 = add i8 %228, -1
  %235 = and i8 %228, 3
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %246, label %237

237:                                              ; preds = %233, %237
  %238 = phi i64 [ %240, %237 ], [ %229, %233 ]
  %239 = phi i8 [ %244, %237 ], [ %235, %233 ]
  %240 = add nsw i64 %238, -1
  %241 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %238
  store i8 %242, i8* %243, align 1
  %244 = add i8 %239, -1
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %246, label %237, !llvm.loop !6

246:                                              ; preds = %237, %233
  %247 = phi i64 [ %229, %233 ], [ %240, %237 ]
  %248 = icmp ult i8 %234, 3
  br i1 %248, label %269, label %249

249:                                              ; preds = %246, %249
  %250 = phi i64 [ %263, %249 ], [ %247, %246 ]
  %251 = add nsw i64 %250, -1
  %252 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %250
  store i8 %253, i8* %254, align 1
  %255 = add nsw i64 %250, -2
  %256 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %251
  store i8 %257, i8* %258, align 1
  %259 = add nsw i64 %250, -3
  %260 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %255
  store i8 %261, i8* %262, align 1
  %263 = add nsw i64 %250, -4
  %264 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %259
  store i8 %265, i8* %266, align 1
  %267 = trunc i64 %259 to i8
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %269, label %249

269:                                              ; preds = %249, %246
  store i8 %231, i8* %189, align 16
  br label %270

270:                                              ; preds = %269, %225
  %271 = add nuw nsw i64 %226, 1
  %272 = icmp eq i64 %271, %224
  br i1 %272, label %273, label %225

273:                                              ; preds = %270, %188
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %189) #7
  br label %274

274:                                              ; preds = %162, %179, %273
  %275 = phi i32 [ 0, %273 ], [ %187, %179 ], [ 1, %162 ]
  %276 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 10, i32 0, i32 0, i32 0
  %277 = load i8*, i8** %276, align 8
  store i8* null, i8** %276, align 8
  %278 = icmp eq i8* %277, null
  br i1 %278, label %280, label %279

279:                                              ; preds = %274
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %277) #7
  br label %280

280:                                              ; preds = %274, %279
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %156) #7
  br label %281

281:                                              ; preds = %132, %280
  %282 = phi i32 [ %275, %280 ], [ 1, %132 ]
  %283 = load i8*, i8** %144, align 8
  %284 = icmp eq i8* %283, null
  br i1 %284, label %288, label %285

285:                                              ; preds = %281
  %286 = ptrtoint i8* %283 to i64
  %287 = bitcast i8** %145 to i64*
  store i64 %286, i64* %287, align 8
  call void @_ZdlPv(i8* nonnull %283) #8
  br label %288

288:                                              ; preds = %281, %285
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #7
  %289 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 3, i32 0, i32 0
  %290 = load i32*, i32** %289, align 8
  %291 = icmp eq i32* %290, null
  br i1 %291, label %297, label %292

292:                                              ; preds = %288
  %293 = ptrtoint i32* %290 to i64
  %294 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 3, i32 0, i32 1
  %295 = bitcast i32** %294 to i64*
  store i64 %293, i64* %295, align 8
  %296 = bitcast i32* %290 to i8*
  call void @_ZdlPv(i8* %296) #8
  br label %297

297:                                              ; preds = %292, %288
  %298 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 2, i32 0, i32 0
  %299 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %298, align 8
  %300 = icmp eq %"struct.jxl::HybridUintConfig"* %299, null
  br i1 %300, label %306, label %301

301:                                              ; preds = %297
  %302 = ptrtoint %"struct.jxl::HybridUintConfig"* %299 to i64
  %303 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 2, i32 0, i32 1
  %304 = bitcast %"struct.jxl::HybridUintConfig"** %303 to i64*
  store i64 %302, i64* %304, align 8
  %305 = bitcast %"struct.jxl::HybridUintConfig"* %299 to i8*
  call void @_ZdlPv(i8* %305) #8
  br label %306

306:                                              ; preds = %301, %297
  %307 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 1
  %308 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %307, i64 0, i32 0, i32 0
  %309 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %308, align 8
  %310 = icmp eq %"struct.jxl::HuffmanDecodingData"* %309, null
  br i1 %310, label %334, label %311

311:                                              ; preds = %306
  %312 = bitcast %"struct.jxl::HuffmanDecodingData"* %309 to i8*
  %313 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 1, i32 0, i32 1
  %314 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %313, align 8
  %315 = icmp eq %"struct.jxl::HuffmanDecodingData"* %314, %309
  br i1 %315, label %332, label %316

316:                                              ; preds = %311, %327
  %317 = phi %"struct.jxl::HuffmanDecodingData"* [ %318, %327 ], [ %314, %311 ]
  %318 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %317, i64 -1
  %319 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %318, i64 0, i32 0, i32 0, i32 0
  %320 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %319, align 8
  %321 = icmp eq %"struct.jxl::HuffmanCode"* %320, null
  br i1 %321, label %327, label %322

322:                                              ; preds = %316
  %323 = ptrtoint %"struct.jxl::HuffmanCode"* %320 to i64
  %324 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %317, i64 -1, i32 0, i32 0, i32 1
  %325 = bitcast %"struct.jxl::HuffmanCode"** %324 to i64*
  store i64 %323, i64* %325, align 8
  %326 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %320, i64 0, i32 0
  call void @_ZdlPv(i8* %326) #8
  br label %327

327:                                              ; preds = %322, %316
  %328 = icmp eq %"struct.jxl::HuffmanDecodingData"* %318, %309
  br i1 %328, label %329, label %316

329:                                              ; preds = %327
  %330 = bitcast %"class.std::__1::vector.3"* %307 to i8**
  %331 = load i8*, i8** %330, align 8
  br label %332

332:                                              ; preds = %329, %311
  %333 = phi i8* [ %331, %329 ], [ %312, %311 ]
  store %"struct.jxl::HuffmanDecodingData"* %309, %"struct.jxl::HuffmanDecodingData"** %313, align 8
  call void @_ZdlPv(i8* %333) #8
  br label %334

334:                                              ; preds = %332, %306
  %335 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %336 = load i8*, i8** %335, align 8
  store i8* null, i8** %335, align 8
  %337 = icmp eq i8* %336, null
  br i1 %337, label %339, label %338

338:                                              ; preds = %334
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %336) #7
  br label %339

339:                                              ; preds = %334, %338
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %139) #7
  %340 = icmp eq i32 %282, 0
  br i1 %340, label %341, label %417

341:                                              ; preds = %95, %118, %65, %109, %339
  %342 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %343 = load i8*, i8** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %345 = load i8*, i8** %344, align 8
  %346 = ptrtoint i8* %343 to i64
  %347 = icmp eq i8* %343, %345
  br i1 %347, label %362, label %348

348:                                              ; preds = %341
  %349 = getelementptr inbounds i8, i8* %343, i64 1
  %350 = icmp eq i8* %349, %345
  br i1 %350, label %362, label %351

351:                                              ; preds = %348, %351
  %352 = phi i8* [ %360, %351 ], [ %349, %348 ]
  %353 = phi i64 [ %359, %351 ], [ %346, %348 ]
  %354 = ptrtoint i8* %352 to i64
  %355 = inttoptr i64 %353 to i8*
  %356 = load i8, i8* %355, align 1
  %357 = load i8, i8* %352, align 1
  %358 = icmp ult i8 %356, %357
  %359 = select i1 %358, i64 %354, i64 %353
  %360 = getelementptr inbounds i8, i8* %352, i64 1
  %361 = icmp eq i8* %360, %345
  br i1 %361, label %362, label %351

362:                                              ; preds = %351, %341, %348
  %363 = phi i64 [ %346, %341 ], [ %346, %348 ], [ %359, %351 ]
  %364 = inttoptr i64 %363 to i8*
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i64
  %367 = add nuw nsw i64 %366, 1
  store i64 %367, i64* %1, align 8
  %368 = lshr i64 %366, 6
  %369 = shl nuw nsw i64 %368, 3
  %370 = add nuw nsw i64 %369, 8
  %371 = call i8* @_Znwm(i64 %370) #8
  %372 = bitcast i8* %371 to i64*
  %373 = icmp ult i64 %367, 65
  %374 = getelementptr inbounds i64, i64* %372, i64 %368
  %375 = select i1 %373, i64* %372, i64* %374
  store i64 0, i64* %375, align 8
  %376 = lshr i64 %367, 6
  %377 = shl nuw nsw i64 %376, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %371, i8 0, i64 %377, i1 false) #7
  %378 = and i64 %367, 63
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %387, label %380

380:                                              ; preds = %362
  %381 = getelementptr inbounds i64, i64* %372, i64 %376
  %382 = sub nuw nsw i64 64, %378
  %383 = lshr i64 -1, %382
  %384 = xor i64 %383, -1
  %385 = load i64, i64* %381, align 8
  %386 = and i64 %385, %384
  store i64 %386, i64* %381, align 8
  br label %387

387:                                              ; preds = %380, %362
  %388 = load i8*, i8** %342, align 8
  %389 = load i8*, i8** %344, align 8
  %390 = icmp eq i8* %388, %389
  br i1 %390, label %412, label %391

391:                                              ; preds = %387, %408
  %392 = phi i64 [ %409, %408 ], [ 0, %387 ]
  %393 = phi i8* [ %410, %408 ], [ %388, %387 ]
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i64
  %396 = icmp ult i8 %365, %394
  br i1 %396, label %415, label %397

397:                                              ; preds = %391
  %398 = lshr i64 %395, 6
  %399 = getelementptr inbounds i64, i64* %372, i64 %398
  %400 = and i64 %395, 63
  %401 = shl i64 1, %400
  %402 = load i64, i64* %399, align 8
  %403 = and i64 %402, %401
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %405, label %408

405:                                              ; preds = %397
  %406 = or i64 %402, %401
  store i64 %406, i64* %399, align 8
  %407 = add i64 %392, 1
  br label %408

408:                                              ; preds = %405, %397
  %409 = phi i64 [ %392, %397 ], [ %407, %405 ]
  %410 = getelementptr inbounds i8, i8* %393, i64 1
  %411 = icmp eq i8* %410, %389
  br i1 %411, label %412, label %391

412:                                              ; preds = %408, %387
  %413 = phi i64 [ 0, %387 ], [ %409, %408 ]
  %414 = icmp eq i64 %413, %367
  br label %415

415:                                              ; preds = %391, %412
  %416 = phi i1 [ %414, %412 ], [ false, %391 ]
  call void @_ZdlPv(i8* nonnull %371) #8
  br label %417

417:                                              ; preds = %339, %415
  %418 = phi i1 [ %416, %415 ], [ false, %339 ]
  ret i1 %418
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !8
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !2

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !8
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #7
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #7
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #7
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !9

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !8, !noalias !10
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !9

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !13
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #7
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !16
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !16
  %76 = load i32, i32* %13, align 8, !noalias !16
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !16
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !16
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !19, !noalias !22
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !16
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !16
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !16
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !16
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !16
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #7, !noalias !24
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !9

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !2

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #7
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !8, !noalias !25
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !9

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !28
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #7
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !31
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !31
  %206 = load i32, i32* %13, align 8, !noalias !31
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !31
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !31
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !34, !noalias !37
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !31
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !31
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !31
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !31
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !31
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #7, !noalias !39
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !9

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !2
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !9
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !2

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inaccessiblemem_or_argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{i8 0, i8 2}
!9 = !{!"branch_weights", i32 2000, i32 1}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!13 = !{!14, !11}
!14 = distinct !{!14, !15, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!15 = distinct !{!15, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!16 = !{!17, !11}
!17 = distinct !{!17, !18, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!21 = distinct !{!21, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!22 = !{!23, !17}
!23 = distinct !{!23, !21, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!24 = !{!17}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!28 = !{!29, !26}
!29 = distinct !{!29, !30, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!31 = !{!32, !26}
!32 = distinct !{!32, !33, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!36 = distinct !{!36, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!37 = !{!38, !32}
!38 = distinct !{!38, !36, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!39 = !{!32}
