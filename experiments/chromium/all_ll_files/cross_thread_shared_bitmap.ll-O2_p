; ModuleID = '../../cc/resources/cross_thread_shared_bitmap.cc'
source_filename = "../../cc/resources/cross_thread_shared_bitmap.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::CrossThreadSharedBitmap" = type <{ %"class.base::RefCountedThreadSafe", %"struct.gpu::Mailbox", [4 x i8], %"class.base::ReadOnlySharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.gfx::Size", i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.base::ReadOnlySharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.gfx::Size" = type { i32, i32 }
%"struct.base::MappedReadOnlyRegion" = type { %"class.base::ReadOnlySharedMemoryRegion", %"class.base::WritableSharedMemoryMapping" }

@_ZN2cc23CrossThreadSharedBitmapC1ERKN3gpu7MailboxEN4base20MappedReadOnlyRegionERKN3gfx4SizeEN3viz14ResourceFormatE = hidden unnamed_addr alias void (%"class.cc::CrossThreadSharedBitmap"*, %"struct.gpu::Mailbox"*, %"struct.base::MappedReadOnlyRegion"*, %"class.gfx::Size"*, i32), void (%"class.cc::CrossThreadSharedBitmap"*, %"struct.gpu::Mailbox"*, %"struct.base::MappedReadOnlyRegion"*, %"class.gfx::Size"*, i32)* @_ZN2cc23CrossThreadSharedBitmapC2ERKN3gpu7MailboxEN4base20MappedReadOnlyRegionERKN3gfx4SizeEN3viz14ResourceFormatE
@_ZN2cc23CrossThreadSharedBitmapD1Ev = hidden unnamed_addr alias void (%"class.cc::CrossThreadSharedBitmap"*), void (%"class.cc::CrossThreadSharedBitmap"*)* @_ZN2cc23CrossThreadSharedBitmapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc23CrossThreadSharedBitmapC2ERKN3gpu7MailboxEN4base20MappedReadOnlyRegionERKN3gfx4SizeEN3viz14ResourceFormatE(%"class.cc::CrossThreadSharedBitmap"*, %"struct.gpu::Mailbox"* nocapture readonly dereferenceable(16), %"struct.base::MappedReadOnlyRegion"*, %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 1, i32 0, i64 0
  %8 = getelementptr inbounds %"struct.gpu::Mailbox", %"struct.gpu::Mailbox"* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 1 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"struct.base::MappedReadOnlyRegion", %"struct.base::MappedReadOnlyRegion"* %2, i64 0, i32 0
  tail call void @_ZN4base26ReadOnlySharedMemoryRegionC1EOS0_(%"class.base::ReadOnlySharedMemoryRegion"* %9, %"class.base::ReadOnlySharedMemoryRegion"* dereferenceable(64) %10) #4
  %11 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"struct.base::MappedReadOnlyRegion", %"struct.base::MappedReadOnlyRegion"* %2, i64 0, i32 1
  tail call void @_ZN4base27WritableSharedMemoryMappingC1EOS0_(%"class.base::WritableSharedMemoryMapping"* %11, %"class.base::WritableSharedMemoryMapping"* dereferenceable(48) %12) #4
  %13 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 5
  %14 = bitcast %"class.gfx::Size"* %3 to i64*
  %15 = bitcast %"class.gfx::Size"* %13 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 8
  %17 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 6
  store i32 %4, i32* %17, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base26ReadOnlySharedMemoryRegionC1EOS0_(%"class.base::ReadOnlySharedMemoryRegion"*, %"class.base::ReadOnlySharedMemoryRegion"* dereferenceable(64)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base27WritableSharedMemoryMappingC1EOS0_(%"class.base::WritableSharedMemoryMapping"*, %"class.base::WritableSharedMemoryMapping"* dereferenceable(48)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc23CrossThreadSharedBitmapD2Ev(%"class.cc::CrossThreadSharedBitmap"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 4, i32 0
  tail call void @_ZN4base19SharedMemoryMappingD2Ev(%"class.base::SharedMemoryMapping"* %2) #4
  %3 = getelementptr inbounds %"class.cc::CrossThreadSharedBitmap", %"class.cc::CrossThreadSharedBitmap"* %0, i64 0, i32 3
  tail call void @_ZN4base26ReadOnlySharedMemoryRegionD1Ev(%"class.base::ReadOnlySharedMemoryRegion"* %3) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base19SharedMemoryMappingD2Ev(%"class.base::SharedMemoryMapping"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base26ReadOnlySharedMemoryRegionD1Ev(%"class.base::ReadOnlySharedMemoryRegion"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
