; ModuleID = '../../third_party/skia/src/effects/SkEmbossMask.cpp'
source_filename = "../../third_party/skia/src/effects/SkEmbossMask.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkEmbossMaskFilter::Light" = type { [3 x float], i16, i8, i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkEmbossMask6EmbossEP6SkMaskRKN18SkEmbossMaskFilter5LightE(%struct.SkMask*, %"struct.SkEmbossMaskFilter::Light"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %1, i64 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 2
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %1, i64 0, i32 0, i64 0
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, 6.553600e+04
  %11 = fcmp olt float %10, 0x41DFFFFFE0000000
  %12 = select i1 %11, float %10, float 0x41DFFFFFE0000000
  %13 = fcmp ogt float %12, 0xC1DFFFFFE0000000
  %14 = select i1 %13, float %12, float 0xC1DFFFFFE0000000
  %15 = fptosi float %14 to i32
  %16 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %1, i64 0, i32 0, i64 1
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 6.553600e+04
  %19 = fcmp olt float %18, 0x41DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0x41DFFFFFE0000000
  %21 = fcmp ogt float %20, 0xC1DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0xC1DFFFFFE0000000
  %23 = fptosi float %22 to i32
  %24 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %1, i64 0, i32 0, i64 2
  %25 = load float, float* %24, align 4
  %26 = fmul float %25, 6.553600e+04
  %27 = fcmp olt float %26, 0x41DFFFFFE0000000
  %28 = select i1 %27, float %26, float 0x41DFFFFFE0000000
  %29 = fcmp ogt float %28, 0xC1DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0xC1DFFFFFE0000000
  %31 = fptosi float %30 to i32
  %32 = shl nsw i32 %31, 5
  %33 = ashr i32 %31, 8
  %34 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %0) #2
  %35 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %34
  %38 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %41, %43
  %45 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 %46, %48
  %50 = icmp sgt i32 %44, 0
  br i1 %50, label %51, label %65

51:                                               ; preds = %2
  %52 = getelementptr inbounds i8, i8* %37, i64 %34
  %53 = sub nsw i32 1, %44
  %54 = icmp sgt i32 %49, 0
  %55 = sub i32 1, %49
  %56 = lshr i8 %4, 4
  %57 = zext i8 %56 to i32
  %58 = icmp eq i8 %56, 0
  %59 = sext i32 %39 to i64
  %60 = zext i32 %49 to i64
  %61 = add nsw i32 %57, -1
  %62 = and i32 %57, 7
  %63 = icmp eq i32 %62, 0
  %64 = icmp ult i32 %61, 7
  br label %66

65:                                               ; preds = %78, %2
  ret void

66:                                               ; preds = %78, %51
  %67 = phi i32 [ 0, %51 ], [ %82, %78 ]
  %68 = phi i32 [ 0, %51 ], [ %39, %78 ]
  %69 = phi i8* [ %52, %51 ], [ %81, %78 ]
  %70 = phi i8* [ %37, %51 ], [ %80, %78 ]
  %71 = phi i8* [ %36, %51 ], [ %79, %78 ]
  br i1 %54, label %72, label %78

72:                                               ; preds = %66
  %73 = add i32 %53, %67
  %74 = ashr i32 %73, 31
  %75 = and i32 %74, %39
  %76 = sext i32 %75 to i64
  %77 = sext i32 %68 to i64
  br label %84

78:                                               ; preds = %172, %66
  %79 = getelementptr inbounds i8, i8* %71, i64 %59
  %80 = getelementptr inbounds i8, i8* %70, i64 %59
  %81 = getelementptr inbounds i8, i8* %69, i64 %59
  %82 = add nuw nsw i32 %67, 1
  %83 = icmp eq i32 %82, %44
  br i1 %83, label %65, label %66

84:                                               ; preds = %172, %72
  %85 = phi i64 [ 0, %72 ], [ %179, %172 ]
  %86 = trunc i64 %85 to i32
  %87 = add i32 %55, %86
  %88 = lshr i32 %87, 31
  %89 = add nuw nsw i32 %88, %86
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %71, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = trunc i64 %85 to i32
  %95 = sub i32 0, %94
  %96 = lshr i32 %95, 31
  %97 = sub nsw i32 %86, %96
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %71, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = sub nsw i32 %93, %101
  %103 = add nsw i64 %85, %76
  %104 = getelementptr inbounds i8, i8* %71, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = sub nsw i64 %85, %77
  %108 = getelementptr inbounds i8, i8* %71, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = sub nsw i32 %106, %110
  %112 = mul nsw i32 %102, %15
  %113 = mul nsw i32 %111, %23
  %114 = add i32 %112, %32
  %115 = add i32 %114, %113
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %172

117:                                              ; preds = %84
  %118 = mul nsw i32 %102, %102
  %119 = mul nsw i32 %111, %111
  %120 = add nuw nsw i32 %118, 1024
  %121 = add nuw nsw i32 %120, %119
  %122 = tail call i32 @_Z10SkSqrtBitsii(i32 %121, i32 15) #2
  %123 = sdiv i32 %115, %122
  %124 = ashr i32 %123, 8
  %125 = add nsw i32 %124, %7
  %126 = icmp slt i32 %125, 255
  %127 = select i1 %126, i32 %125, i32 255
  %128 = shl nsw i32 %124, 1
  %129 = sub nsw i32 %128, %33
  %130 = mul nsw i32 %129, %33
  %131 = ashr i32 %130, 8
  %132 = icmp sgt i32 %130, 255
  br i1 %132, label %133, label %172

133:                                              ; preds = %117
  %134 = icmp slt i32 %131, 255
  %135 = select i1 %134, i32 %131, i32 255
  br i1 %58, label %172, label %136

136:                                              ; preds = %133
  %137 = mul i32 %135, 65793
  br i1 %63, label %147, label %138

138:                                              ; preds = %136, %138
  %139 = phi i32 [ %144, %138 ], [ %57, %136 ]
  %140 = phi i32 [ %143, %138 ], [ %135, %136 ]
  %141 = phi i32 [ %145, %138 ], [ %62, %136 ]
  %142 = mul i32 %137, %140
  %143 = lshr i32 %142, 24
  %144 = add nsw i32 %139, -1
  %145 = add i32 %141, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %138, !llvm.loop !2

147:                                              ; preds = %138, %136
  %148 = phi i32 [ %57, %136 ], [ %144, %138 ]
  %149 = phi i32 [ %135, %136 ], [ %143, %138 ]
  %150 = phi i32 [ undef, %136 ], [ %143, %138 ]
  br i1 %64, label %172, label %151

151:                                              ; preds = %147, %151
  %152 = phi i32 [ %170, %151 ], [ %148, %147 ]
  %153 = phi i32 [ %169, %151 ], [ %149, %147 ]
  %154 = mul i32 %137, %153
  %155 = lshr i32 %154, 24
  %156 = mul i32 %137, %155
  %157 = lshr i32 %156, 24
  %158 = mul i32 %137, %157
  %159 = lshr i32 %158, 24
  %160 = mul i32 %137, %159
  %161 = lshr i32 %160, 24
  %162 = mul i32 %137, %161
  %163 = lshr i32 %162, 24
  %164 = mul i32 %137, %163
  %165 = lshr i32 %164, 24
  %166 = mul i32 %137, %165
  %167 = lshr i32 %166, 24
  %168 = mul i32 %137, %167
  %169 = lshr i32 %168, 24
  %170 = add nsw i32 %152, -8
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %151, label %172

172:                                              ; preds = %147, %151, %133, %117, %84
  %173 = phi i32 [ %7, %84 ], [ %127, %117 ], [ %127, %133 ], [ %127, %151 ], [ %127, %147 ]
  %174 = phi i32 [ 0, %84 ], [ 0, %117 ], [ %135, %133 ], [ %150, %147 ], [ %169, %151 ]
  %175 = trunc i32 %173 to i8
  %176 = getelementptr inbounds i8, i8* %70, i64 %85
  store i8 %175, i8* %176, align 1
  %177 = trunc i32 %174 to i8
  %178 = getelementptr inbounds i8, i8* %69, i64 %85
  store i8 %177, i8* %178, align 1
  %179 = add nuw nsw i64 %85, 1
  %180 = icmp eq i64 %179, %60
  br i1 %180, label %78, label %84
}

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #1

declare i32 @_Z10SkSqrtBitsii(i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
