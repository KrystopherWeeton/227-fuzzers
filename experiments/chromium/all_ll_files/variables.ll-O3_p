; ModuleID = '../../v8/src/ast/variables.cc'
source_filename = "../../v8/src/ast/variables.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Variable" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, i32, i32, i16, [6 x i8] }>
%"class.v8::internal::Scope" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.18", %"class.v8::base::ThreadedListBase.20", %"class.v8::internal::Handle.21", i32, i32, i32, i32, i8, i16, [5 x i8] }>
%"class.v8::internal::VariableMap" = type { %"class.v8::base::PointerTemplateHashMapImpl" }
%"class.v8::base::PointerTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::base::ThreadedListBase" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** }
%"class.v8::base::ThreadedListBase.18" = type { %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** }
%"class.v8::internal::VariableProxy" = type { %"class.v8::internal::Expression", %union.anon, %"class.v8::internal::VariableProxy"* }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%union.anon = type { %"class.v8::internal::AstRawString"* }
%"class.v8::base::ThreadedListBase.20" = type { %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** }
%"class.v8::internal::Declaration" = type { %"class.v8::internal::AstNode", %"class.v8::internal::Variable"*, %"class.v8::internal::Declaration"* }
%"class.v8::internal::Handle.21" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.19, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon.19 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }

@_ZN2v88internal8VariableC1EPS1_ = hidden unnamed_addr alias void (%"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*), void (%"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*)* @_ZN2v88internal8VariableC2EPS1_

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8VariableC2EPS1_(%"class.v8::internal::Variable"* nocapture, %"class.v8::internal::Variable"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::Variable"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.v8::internal::Variable"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::AstRawString"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.v8::internal::AstRawString"** %6 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 4
  %13 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 4
  %14 = bitcast %"class.v8::internal::Variable"** %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false)
  %15 = load i32, i32* %13, align 8
  store i32 %15, i32* %12, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 5
  %17 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 5
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 6
  %20 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 6
  %21 = load i16, i16* %20, align 8
  store i16 %21, i16* %19, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8Variable22IsGlobalObjectPropertyEv(%"class.v8::internal::Variable"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 6
  %3 = load i16, i16* %2, align 8
  %4 = trunc i16 %3 to i8
  %5 = and i8 %4, 15
  switch i8 %5, label %14 [
    i8 6, label %6
    i8 5, label %6
    i8 4, label %6
    i8 2, label %6
  ]

6:                                                ; preds = %1, %1, %1, %1
  %7 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 0
  %8 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %7, align 8
  %9 = icmp eq %"class.v8::internal::Scope"* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %8, i64 0, i32 12
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 4
  br label %14

14:                                               ; preds = %1, %6, %10
  %15 = phi i1 [ false, %6 ], [ %13, %10 ], [ false, %1 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8Variable12IsReplGlobalEv(%"class.v8::internal::Variable"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 0
  %3 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %3, i64 0, i32 13
  %5 = load i16, i16* %4, align 1
  %6 = and i16 %5, 2048
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 6
  %10 = load i16, i16* %9, align 8
  %11 = and i16 %10, 14
  %12 = icmp eq i16 %11, 0
  ret i1 %12

13:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8Variable22RewriteLocationForReplEv(%"class.v8::internal::Variable"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 6
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 14
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = and i16 %3, -897
  %8 = or i16 %7, 768
  store i16 %8, i16* %2, align 8
  br label %9

9:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
