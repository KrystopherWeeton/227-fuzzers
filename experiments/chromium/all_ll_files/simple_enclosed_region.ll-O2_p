; ModuleID = '../../cc/base/simple_enclosed_region.cc'
source_filename = "../../cc/base/simple_enclosed_region.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.cc::Region::Iterator" = type { %"class.SkRegion::Iterator" }
%"class.SkRegion::Iterator" = type <{ %class.SkRegion*, i32*, %struct.SkIRect, i8, [7 x i8] }>

@_ZN2cc20SimpleEnclosedRegionC1ERKNS_6RegionE = hidden unnamed_addr alias void (%"class.cc::SimpleEnclosedRegion"*, %"class.cc::Region"*), void (%"class.cc::SimpleEnclosedRegion"*, %"class.cc::Region"*)* @_ZN2cc20SimpleEnclosedRegionC2ERKNS_6RegionE
@_ZN2cc20SimpleEnclosedRegionD1Ev = hidden unnamed_addr alias void (%"class.cc::SimpleEnclosedRegion"*), void (%"class.cc::SimpleEnclosedRegion"*)* @_ZN2cc20SimpleEnclosedRegionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20SimpleEnclosedRegionC2ERKNS_6RegionE(%"class.cc::SimpleEnclosedRegion"*, %"class.cc::Region"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.cc::Region::Iterator", align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.gfx::Rect"*
  %6 = bitcast %"class.cc::SimpleEnclosedRegion"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 16, i1 false) #5
  %7 = bitcast %"class.cc::Region::Iterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  call void @_ZNK2cc6Region5beginEv(%"class.cc::Region::Iterator"* nonnull sret %3, %"class.cc::Region"* %1) #5
  %8 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0, i32 3
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %2
  %12 = bitcast { i64, i64 }* %4 to i8*
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %14 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0, i32 2
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %16 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0
  %17 = bitcast { i64, i64 }* %4 to i8*
  br label %19

18:                                               ; preds = %19, %2
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #5
  ret void

19:                                               ; preds = %11, %19
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  %20 = call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %14) #5
  %21 = extractvalue { i64, i64 } %20, 0
  store i64 %21, i64* %15, align 8
  %22 = extractvalue { i64, i64 } %20, 1
  store i64 %22, i64* %13, align 8
  call void @_ZN2cc20SimpleEnclosedRegion5UnionERKN3gfx4RectE(%"class.cc::SimpleEnclosedRegion"* %0, %"class.gfx::Rect"* nonnull dereferenceable(16) %5)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #5
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %16) #5
  %23 = load i8, i8* %8, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %19, label %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK2cc6Region5beginEv(%"class.cc::Region::Iterator"* sret, %"class.cc::Region"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20SimpleEnclosedRegion5UnionERKN3gfx4RectE(%"class.cc::SimpleEnclosedRegion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::Rect", align 4
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %161, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %161, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0
  %13 = tail call zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* %12, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  br i1 %13, label %161, label %14

14:                                               ; preds = %11
  %15 = tail call zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* %1, %"class.gfx::Rect"* dereferenceable(16) %12) #5
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = bitcast %"class.cc::SimpleEnclosedRegion"* %0 to i8*
  %18 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %18, i64 16, i1 false)
  br label %161

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %21
  %27 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %23
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = load i32, i32* %4, align 4
  %35 = add nsw i32 %34, %31
  %36 = load i32, i32* %8, align 4
  %37 = add nsw i32 %36, %33
  %38 = icmp sgt i32 %33, %23
  %39 = icmp slt i32 %37, %29
  %40 = or i1 %38, %39
  br i1 %40, label %50, label %41

41:                                               ; preds = %19
  %42 = icmp sge i32 %31, %21
  %43 = icmp slt i32 %35, %21
  %44 = or i1 %42, %43
  %45 = select i1 %44, i32 %21, i32 %31
  %46 = icmp sle i32 %35, %26
  %47 = icmp sgt i32 %31, %26
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 %26, i32 %35
  br label %89

50:                                               ; preds = %19
  %51 = icmp sgt i32 %31, %21
  %52 = icmp slt i32 %35, %26
  %53 = or i1 %51, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %50
  %55 = icmp sge i32 %33, %23
  %56 = icmp slt i32 %37, %23
  %57 = or i1 %55, %56
  %58 = select i1 %57, i32 %23, i32 %33
  %59 = icmp sle i32 %37, %29
  %60 = icmp sgt i32 %33, %29
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 %29, i32 %37
  br label %89

63:                                               ; preds = %50
  %64 = icmp sgt i32 %23, %33
  %65 = icmp slt i32 %29, %37
  %66 = or i1 %64, %65
  br i1 %66, label %76, label %67

67:                                               ; preds = %63
  %68 = icmp sge i32 %21, %31
  %69 = icmp slt i32 %26, %31
  %70 = or i1 %68, %69
  %71 = select i1 %70, i32 %31, i32 %21
  %72 = icmp sle i32 %26, %35
  %73 = icmp sgt i32 %21, %35
  %74 = or i1 %72, %73
  %75 = select i1 %74, i32 %35, i32 %26
  br label %89

76:                                               ; preds = %63
  %77 = icmp sgt i32 %21, %31
  %78 = icmp slt i32 %26, %35
  %79 = or i1 %77, %78
  br i1 %79, label %89, label %80

80:                                               ; preds = %76
  %81 = icmp sge i32 %23, %33
  %82 = icmp slt i32 %29, %33
  %83 = or i1 %81, %82
  %84 = select i1 %83, i32 %33, i32 %23
  %85 = icmp sle i32 %29, %37
  %86 = icmp sgt i32 %23, %37
  %87 = or i1 %85, %86
  %88 = select i1 %87, i32 %37, i32 %29
  br label %89

89:                                               ; preds = %80, %67, %54, %41, %76
  %90 = phi i32 [ %29, %76 ], [ %29, %41 ], [ %62, %54 ], [ %29, %67 ], [ %29, %80 ]
  %91 = phi i32 [ %31, %76 ], [ %31, %41 ], [ %31, %54 ], [ %71, %67 ], [ %31, %80 ]
  %92 = phi i32 [ %33, %76 ], [ %33, %41 ], [ %33, %54 ], [ %33, %67 ], [ %84, %80 ]
  %93 = phi i32 [ %35, %76 ], [ %35, %41 ], [ %35, %54 ], [ %75, %67 ], [ %35, %80 ]
  %94 = phi i32 [ %37, %76 ], [ %37, %41 ], [ %37, %54 ], [ %37, %67 ], [ %88, %80 ]
  %95 = phi i32 [ %26, %76 ], [ %49, %41 ], [ %26, %54 ], [ %26, %67 ], [ %26, %80 ]
  %96 = phi i32 [ %23, %76 ], [ %23, %41 ], [ %58, %54 ], [ %23, %67 ], [ %23, %80 ]
  %97 = phi i32 [ %21, %76 ], [ %45, %41 ], [ %21, %54 ], [ %21, %67 ], [ %21, %80 ]
  %98 = sub nsw i32 %95, %97
  %99 = sub nsw i32 %90, %96
  store i32 %97, i32* %20, align 4
  store i32 %96, i32* %22, align 4
  %100 = icmp sgt i32 %97, 0
  %101 = icmp sgt i32 %98, 0
  %102 = and i1 %100, %101
  %103 = sub nuw nsw i32 2147483647, %97
  %104 = icmp ult i32 %103, %98
  %105 = and i1 %104, %102
  %106 = select i1 %105, i32 %103, i32 %98
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  store i32 %108, i32* %24, align 4
  %109 = icmp sgt i32 %96, 0
  %110 = icmp sgt i32 %99, 0
  %111 = and i1 %109, %110
  %112 = sub nuw nsw i32 2147483647, %96
  %113 = icmp ult i32 %112, %99
  %114 = and i1 %113, %111
  %115 = select i1 %114, i32 %112, i32 %99
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  store i32 %117, i32* %27, align 4
  %118 = zext i32 %108 to i64
  %119 = zext i32 %117 to i64
  %120 = mul nuw nsw i64 %118, %119
  %121 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #5
  %122 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %123 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  %124 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 0
  %125 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 1
  %126 = sub nsw i32 %93, %91
  %127 = sub nsw i32 %94, %92
  store i32 %91, i32* %122, align 4
  store i32 %92, i32* %123, align 4
  %128 = icmp sgt i32 %91, 0
  %129 = icmp sgt i32 %126, 0
  %130 = and i1 %128, %129
  %131 = sub nuw nsw i32 2147483647, %91
  %132 = icmp ult i32 %131, %126
  %133 = and i1 %132, %130
  %134 = select i1 %133, i32 %131, i32 %126
  %135 = icmp sgt i32 %92, 0
  %136 = icmp sgt i32 %127, 0
  %137 = and i1 %135, %136
  %138 = sub nuw nsw i32 2147483647, %92
  %139 = icmp ult i32 %138, %127
  %140 = and i1 %139, %137
  %141 = select i1 %140, i32 %138, i32 %127
  %142 = icmp sgt i32 %134, 0
  %143 = select i1 %142, i32 %134, i32 0
  store i32 %143, i32* %124, align 4
  %144 = icmp sgt i32 %141, 0
  %145 = select i1 %144, i32 %141, i32 0
  store i32 %145, i32* %125, align 4
  %146 = zext i32 %145 to i64
  %147 = call { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16) %12, %"class.gfx::Rect"* nonnull dereferenceable(16) %3) #5
  %148 = extractvalue { i64, i64 } %147, 1
  %149 = shl i64 %148, 32
  %150 = ashr exact i64 %149, 32
  %151 = ashr i64 %148, 32
  %152 = mul nsw i64 %150, %151
  %153 = shl nuw i32 %143, 1
  %154 = zext i32 %153 to i64
  %155 = mul nuw nsw i64 %154, %146
  %156 = add nsw i64 %152, %120
  %157 = icmp sgt i64 %155, %156
  br i1 %157, label %158, label %160

158:                                              ; preds = %89
  %159 = bitcast %"class.cc::SimpleEnclosedRegion"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %159, i8* nonnull align 4 %121, i64 16, i1 false)
  br label %160

160:                                              ; preds = %158, %89
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #5
  br label %161

161:                                              ; preds = %2, %11, %7, %160, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc20SimpleEnclosedRegionD2Ev(%"class.cc::SimpleEnclosedRegion"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20SimpleEnclosedRegion8SubtractERKN3gfx4RectE(%"class.cc::SimpleEnclosedRegion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0
  %4 = tail call zeroext i1 @_ZNK3gfx4Rect10IntersectsERKS0_(%"class.gfx::Rect"* %3, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  br i1 %4, label %5, label %90

5:                                                ; preds = %2
  %6 = tail call zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* %1, %"class.gfx::Rect"* dereferenceable(16) %3) #5
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = bitcast %"class.cc::SimpleEnclosedRegion"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false)
  br label %90

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %11
  %15 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, %16
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %21, %11
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %21
  %26 = sub nsw i32 %14, %25
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sub nsw i32 %28, %16
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, %28
  %33 = sub nsw i32 %19, %32
  %34 = icmp sgt i32 %29, %33
  %35 = select i1 %34, i32 %16, i32 %32
  %36 = select i1 %34, i32 %28, i32 %19
  %37 = icmp sgt i32 %22, %26
  %38 = select i1 %37, i32 %11, i32 %25
  %39 = select i1 %37, i32 %21, i32 %14
  %40 = sub nsw i32 %36, %35
  store i32 %35, i32* %15, align 4
  %41 = icmp sgt i32 %11, 0
  %42 = icmp sgt i32 %13, 0
  %43 = and i1 %41, %42
  %44 = sub nuw nsw i32 2147483647, %11
  %45 = icmp ult i32 %44, %13
  %46 = and i1 %45, %43
  %47 = select i1 %46, i32 %44, i32 %13
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 %47, i32 0
  store i32 %49, i32* %12, align 4
  %50 = icmp sgt i32 %35, 0
  %51 = icmp sgt i32 %40, 0
  %52 = and i1 %50, %51
  %53 = sub nuw nsw i32 2147483647, %35
  %54 = icmp ult i32 %53, %40
  %55 = and i1 %54, %52
  %56 = select i1 %55, i32 %53, i32 %40
  %57 = icmp sgt i32 %56, 0
  %58 = select i1 %57, i32 %56, i32 0
  store i32 %58, i32* %17, align 4
  %59 = sub nsw i32 %39, %38
  %60 = icmp sgt i32 %38, 0
  %61 = icmp sgt i32 %59, 0
  %62 = and i1 %60, %61
  %63 = sub nuw nsw i32 2147483647, %38
  %64 = icmp ult i32 %63, %59
  %65 = and i1 %64, %62
  %66 = select i1 %65, i32 %63, i32 %59
  %67 = icmp sgt i32 %16, 0
  %68 = icmp sgt i32 %18, 0
  %69 = and i1 %67, %68
  %70 = sub nuw nsw i32 2147483647, %16
  %71 = icmp ult i32 %70, %18
  %72 = and i1 %71, %69
  %73 = select i1 %72, i32 %70, i32 %18
  %74 = icmp sgt i32 %66, 0
  %75 = select i1 %74, i32 %66, i32 0
  %76 = icmp sgt i32 %73, 0
  %77 = select i1 %76, i32 %73, i32 0
  %78 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1
  %79 = bitcast %"class.gfx::Size"* %78 to i64*
  %80 = load i64, i64* %79, align 4
  %81 = zext i32 %75 to i64
  %82 = zext i32 %77 to i64
  %83 = mul nuw nsw i64 %81, %82
  %84 = shl i64 %80, 32
  %85 = ashr exact i64 %84, 32
  %86 = ashr i64 %80, 32
  %87 = mul nsw i64 %85, %86
  %88 = icmp sgt i64 %83, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %9
  store i32 %38, i32* %10, align 4
  store i32 %16, i32* %15, align 4
  store i32 %75, i32* %12, align 4
  store i32 %77, i32* %17, align 4
  br label %90

90:                                               ; preds = %9, %89, %2, %7
  ret void
}

declare zeroext i1 @_ZNK3gfx4Rect10IntersectsERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK2cc20SimpleEnclosedRegion7GetRectEm(%"class.cc::SimpleEnclosedRegion"* nocapture readonly, i64) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.cc::SimpleEnclosedRegion"* %0 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.gfx::Size"* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = insertvalue { i64, i64 } undef, i64 %4, 0
  %9 = insertvalue { i64, i64 } %8, i64 %7, 1
  ret { i64, i64 } %9
}

declare { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
