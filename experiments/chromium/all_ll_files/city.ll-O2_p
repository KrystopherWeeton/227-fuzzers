; ModuleID = '../../base/third_party/cityhash/city.cc'
source_filename = "../../base/third_party/cityhash/city.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN4base8internal13cityhash_v11110CityHash32EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 25
  br i1 %3, label %4, label %260

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 13
  br i1 %5, label %6, label %164

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 5
  br i1 %7, label %8, label %106

8:                                                ; preds = %6
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %72, label %10

10:                                               ; preds = %8
  %11 = add i64 %1, -1
  %12 = and i64 %1, 3
  %13 = icmp ult i64 %11, 3
  br i1 %13, label %51, label %14

14:                                               ; preds = %10
  %15 = sub i64 %1, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i32 [ 0, %14 ], [ %46, %16 ]
  %18 = phi i64 [ 0, %14 ], [ %48, %16 ]
  %19 = phi i32 [ 9, %14 ], [ %47, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %49, %16 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = mul i32 %17, -862048943
  %24 = sext i8 %22 to i32
  %25 = add i32 %23, %24
  %26 = xor i32 %25, %19
  %27 = or i64 %18, 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = mul i32 %25, -862048943
  %31 = sext i8 %29 to i32
  %32 = add i32 %30, %31
  %33 = xor i32 %32, %26
  %34 = or i64 %18, 2
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = mul i32 %32, -862048943
  %38 = sext i8 %36 to i32
  %39 = add i32 %37, %38
  %40 = xor i32 %39, %33
  %41 = or i64 %18, 3
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = mul i32 %39, -862048943
  %45 = sext i8 %43 to i32
  %46 = add i32 %44, %45
  %47 = xor i32 %46, %40
  %48 = add nuw i64 %18, 4
  %49 = add i64 %20, -4
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %16

51:                                               ; preds = %16, %10
  %52 = phi i32 [ undef, %10 ], [ %46, %16 ]
  %53 = phi i32 [ undef, %10 ], [ %47, %16 ]
  %54 = phi i32 [ 0, %10 ], [ %46, %16 ]
  %55 = phi i64 [ 0, %10 ], [ %48, %16 ]
  %56 = phi i32 [ 9, %10 ], [ %47, %16 ]
  %57 = icmp eq i64 %12, 0
  br i1 %57, label %72, label %58

58:                                               ; preds = %51, %58
  %59 = phi i32 [ %67, %58 ], [ %54, %51 ]
  %60 = phi i64 [ %69, %58 ], [ %55, %51 ]
  %61 = phi i32 [ %68, %58 ], [ %56, %51 ]
  %62 = phi i64 [ %70, %58 ], [ %12, %51 ]
  %63 = getelementptr inbounds i8, i8* %0, i64 %60
  %64 = load i8, i8* %63, align 1
  %65 = mul i32 %59, -862048943
  %66 = sext i8 %64 to i32
  %67 = add i32 %65, %66
  %68 = xor i32 %67, %61
  %69 = add nuw i64 %60, 1
  %70 = add i64 %62, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %58, !llvm.loop !2

72:                                               ; preds = %51, %58, %8
  %73 = phi i32 [ 9, %8 ], [ %53, %51 ], [ %68, %58 ]
  %74 = phi i32 [ 0, %8 ], [ %52, %51 ], [ %67, %58 ]
  %75 = trunc i64 %1 to i32
  %76 = mul i32 %75, -862048943
  %77 = lshr i32 %76, 17
  %78 = mul i32 %75, 380141568
  %79 = or i32 %77, %78
  %80 = mul i32 %79, 461845907
  %81 = xor i32 %73, %80
  %82 = lshr i32 %81, 19
  %83 = shl i32 %81, 13
  %84 = or i32 %83, %82
  %85 = mul i32 %84, 5
  %86 = add i32 %85, -430675100
  %87 = mul i32 %74, -862048943
  %88 = lshr i32 %87, 17
  %89 = mul i32 %74, 380141568
  %90 = or i32 %88, %89
  %91 = mul i32 %90, 461845907
  %92 = xor i32 %91, %86
  %93 = lshr i32 %92, 19
  %94 = shl i32 %92, 13
  %95 = or i32 %94, %93
  %96 = mul i32 %95, 5
  %97 = add i32 %96, -430675100
  %98 = lshr i32 %97, 16
  %99 = xor i32 %98, %97
  %100 = mul i32 %99, -2048144789
  %101 = lshr i32 %100, 13
  %102 = xor i32 %101, %100
  %103 = mul i32 %102, -1028477387
  %104 = lshr i32 %103, 16
  %105 = xor i32 %104, %103
  br label %440

106:                                              ; preds = %6
  %107 = trunc i64 %1 to i32
  %108 = mul i32 %107, 5
  %109 = bitcast i8* %0 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = add i32 %110, %107
  %112 = getelementptr inbounds i8, i8* %0, i64 %1
  %113 = getelementptr inbounds i8, i8* %112, i64 -4
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 1
  %116 = add i32 %115, %108
  %117 = lshr i64 %1, 1
  %118 = and i64 %117, 4
  %119 = getelementptr inbounds i8, i8* %0, i64 %118
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 1
  %122 = add i32 %121, 9
  %123 = mul i32 %111, -862048943
  %124 = lshr i32 %123, 17
  %125 = mul i32 %111, 380141568
  %126 = or i32 %124, %125
  %127 = mul i32 %126, 461845907
  %128 = xor i32 %127, %108
  %129 = lshr i32 %128, 19
  %130 = shl i32 %128, 13
  %131 = or i32 %130, %129
  %132 = mul i32 %131, 5
  %133 = add i32 %132, -430675100
  %134 = mul i32 %116, -862048943
  %135 = lshr i32 %134, 17
  %136 = mul i32 %116, 380141568
  %137 = or i32 %135, %136
  %138 = mul i32 %137, 461845907
  %139 = xor i32 %133, %138
  %140 = lshr i32 %139, 19
  %141 = shl i32 %139, 13
  %142 = or i32 %141, %140
  %143 = mul i32 %142, 5
  %144 = add i32 %143, -430675100
  %145 = mul i32 %122, -862048943
  %146 = lshr i32 %145, 17
  %147 = mul i32 %122, 380141568
  %148 = or i32 %146, %147
  %149 = mul i32 %148, 461845907
  %150 = xor i32 %144, %149
  %151 = lshr i32 %150, 19
  %152 = shl i32 %150, 13
  %153 = or i32 %152, %151
  %154 = mul i32 %153, 5
  %155 = add i32 %154, -430675100
  %156 = lshr i32 %155, 16
  %157 = xor i32 %156, %155
  %158 = mul i32 %157, -2048144789
  %159 = lshr i32 %158, 13
  %160 = xor i32 %159, %158
  %161 = mul i32 %160, -1028477387
  %162 = lshr i32 %161, 16
  %163 = xor i32 %162, %161
  br label %440

164:                                              ; preds = %4
  %165 = getelementptr inbounds i8, i8* %0, i64 -4
  %166 = lshr i64 %1, 1
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 1
  %170 = getelementptr inbounds i8, i8* %0, i64 4
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 1
  %173 = getelementptr inbounds i8, i8* %0, i64 %1
  %174 = getelementptr inbounds i8, i8* %173, i64 -8
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 1
  %177 = getelementptr inbounds i8, i8* %0, i64 %166
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = bitcast i8* %0 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = getelementptr inbounds i8, i8* %173, i64 -4
  %183 = bitcast i8* %182 to i32*
  %184 = load i32, i32* %183, align 1
  %185 = trunc i64 %1 to i32
  %186 = mul i32 %169, -862048943
  %187 = lshr i32 %186, 17
  %188 = mul i32 %169, 380141568
  %189 = or i32 %187, %188
  %190 = mul i32 %189, 461845907
  %191 = xor i32 %190, %185
  %192 = lshr i32 %191, 19
  %193 = shl i32 %191, 13
  %194 = or i32 %193, %192
  %195 = mul i32 %194, 5
  %196 = add i32 %195, -430675100
  %197 = mul i32 %172, -862048943
  %198 = lshr i32 %197, 17
  %199 = mul i32 %172, 380141568
  %200 = or i32 %198, %199
  %201 = mul i32 %200, 461845907
  %202 = xor i32 %196, %201
  %203 = lshr i32 %202, 19
  %204 = shl i32 %202, 13
  %205 = or i32 %204, %203
  %206 = mul i32 %205, 5
  %207 = add i32 %206, -430675100
  %208 = mul i32 %176, -862048943
  %209 = lshr i32 %208, 17
  %210 = mul i32 %176, 380141568
  %211 = or i32 %209, %210
  %212 = mul i32 %211, 461845907
  %213 = xor i32 %207, %212
  %214 = lshr i32 %213, 19
  %215 = shl i32 %213, 13
  %216 = or i32 %215, %214
  %217 = mul i32 %216, 5
  %218 = add i32 %217, -430675100
  %219 = mul i32 %179, -862048943
  %220 = lshr i32 %219, 17
  %221 = mul i32 %179, 380141568
  %222 = or i32 %220, %221
  %223 = mul i32 %222, 461845907
  %224 = xor i32 %218, %223
  %225 = lshr i32 %224, 19
  %226 = shl i32 %224, 13
  %227 = or i32 %226, %225
  %228 = mul i32 %227, 5
  %229 = add i32 %228, -430675100
  %230 = mul i32 %181, -862048943
  %231 = lshr i32 %230, 17
  %232 = mul i32 %181, 380141568
  %233 = or i32 %231, %232
  %234 = mul i32 %233, 461845907
  %235 = xor i32 %229, %234
  %236 = lshr i32 %235, 19
  %237 = shl i32 %235, 13
  %238 = or i32 %237, %236
  %239 = mul i32 %238, 5
  %240 = add i32 %239, -430675100
  %241 = mul i32 %184, -862048943
  %242 = lshr i32 %241, 17
  %243 = mul i32 %184, 380141568
  %244 = or i32 %242, %243
  %245 = mul i32 %244, 461845907
  %246 = xor i32 %240, %245
  %247 = lshr i32 %246, 19
  %248 = shl i32 %246, 13
  %249 = or i32 %248, %247
  %250 = mul i32 %249, 5
  %251 = add i32 %250, -430675100
  %252 = lshr i32 %251, 16
  %253 = xor i32 %252, %251
  %254 = mul i32 %253, -2048144789
  %255 = lshr i32 %254, 13
  %256 = xor i32 %255, %254
  %257 = mul i32 %256, -1028477387
  %258 = lshr i32 %257, 16
  %259 = xor i32 %258, %257
  br label %440

260:                                              ; preds = %2
  %261 = trunc i64 %1 to i32
  %262 = mul i32 %261, -862048943
  %263 = getelementptr inbounds i8, i8* %0, i64 %1
  %264 = getelementptr inbounds i8, i8* %263, i64 -4
  %265 = bitcast i8* %264 to i32*
  %266 = load i32, i32* %265, align 1
  %267 = mul i32 %266, -862048943
  %268 = lshr i32 %267, 17
  %269 = mul i32 %266, 380141568
  %270 = or i32 %268, %269
  %271 = mul i32 %270, 461845907
  %272 = getelementptr inbounds i8, i8* %263, i64 -8
  %273 = bitcast i8* %272 to i32*
  %274 = load i32, i32* %273, align 1
  %275 = mul i32 %274, -862048943
  %276 = lshr i32 %275, 17
  %277 = mul i32 %274, 380141568
  %278 = or i32 %276, %277
  %279 = mul i32 %278, 461845907
  %280 = getelementptr inbounds i8, i8* %263, i64 -16
  %281 = bitcast i8* %280 to i32*
  %282 = load i32, i32* %281, align 1
  %283 = mul i32 %282, -862048943
  %284 = lshr i32 %283, 17
  %285 = mul i32 %282, 380141568
  %286 = or i32 %284, %285
  %287 = mul i32 %286, 461845907
  %288 = getelementptr inbounds i8, i8* %263, i64 -12
  %289 = bitcast i8* %288 to i32*
  %290 = load i32, i32* %289, align 1
  %291 = mul i32 %290, -862048943
  %292 = lshr i32 %291, 17
  %293 = mul i32 %290, 380141568
  %294 = or i32 %292, %293
  %295 = mul i32 %294, 461845907
  %296 = getelementptr inbounds i8, i8* %263, i64 -20
  %297 = bitcast i8* %296 to i32*
  %298 = load i32, i32* %297, align 1
  %299 = mul i32 %298, -862048943
  %300 = lshr i32 %299, 17
  %301 = mul i32 %298, 380141568
  %302 = or i32 %300, %301
  %303 = mul i32 %302, 461845907
  %304 = xor i32 %271, %261
  %305 = lshr i32 %304, 19
  %306 = shl i32 %304, 13
  %307 = or i32 %306, %305
  %308 = mul i32 %307, 5
  %309 = add i32 %308, -430675100
  %310 = xor i32 %309, %287
  %311 = lshr i32 %310, 19
  %312 = shl i32 %310, 13
  %313 = or i32 %312, %311
  %314 = mul i32 %313, 5
  %315 = add i32 %314, -430675100
  %316 = xor i32 %279, %262
  %317 = lshr i32 %316, 19
  %318 = shl i32 %316, 13
  %319 = or i32 %318, %317
  %320 = mul i32 %319, 5
  %321 = add i32 %320, -430675100
  %322 = xor i32 %321, %295
  %323 = lshr i32 %322, 19
  %324 = shl i32 %322, 13
  %325 = or i32 %324, %323
  %326 = mul i32 %325, 5
  %327 = add i32 %326, -430675100
  %328 = add i32 %303, %262
  %329 = lshr i32 %328, 19
  %330 = shl i32 %328, 13
  %331 = or i32 %330, %329
  %332 = mul i32 %331, 5
  %333 = add i32 %332, -430675100
  %334 = add i64 %1, -1
  %335 = udiv i64 %334, 20
  br label %336

336:                                              ; preds = %336, %260
  %337 = phi i32 [ %315, %260 ], [ %400, %336 ]
  %338 = phi i32 [ %327, %260 ], [ %399, %336 ]
  %339 = phi i32 [ %333, %260 ], [ %395, %336 ]
  %340 = phi i8* [ %0, %260 ], [ %401, %336 ]
  %341 = phi i64 [ %335, %260 ], [ %402, %336 ]
  %342 = bitcast i8* %340 to i32*
  %343 = load i32, i32* %342, align 1
  %344 = mul i32 %343, -862048943
  %345 = lshr i32 %344, 17
  %346 = mul i32 %343, 380141568
  %347 = or i32 %345, %346
  %348 = mul i32 %347, 461845907
  %349 = getelementptr inbounds i8, i8* %340, i64 4
  %350 = bitcast i8* %349 to i32*
  %351 = load i32, i32* %350, align 1
  %352 = getelementptr inbounds i8, i8* %340, i64 8
  %353 = bitcast i8* %352 to i32*
  %354 = load i32, i32* %353, align 1
  %355 = mul i32 %354, -862048943
  %356 = lshr i32 %355, 17
  %357 = mul i32 %354, 380141568
  %358 = or i32 %356, %357
  %359 = mul i32 %358, 461845907
  %360 = getelementptr inbounds i8, i8* %340, i64 12
  %361 = bitcast i8* %360 to i32*
  %362 = load i32, i32* %361, align 1
  %363 = mul i32 %362, -862048943
  %364 = lshr i32 %363, 17
  %365 = mul i32 %362, 380141568
  %366 = or i32 %364, %365
  %367 = mul i32 %366, 461845907
  %368 = getelementptr inbounds i8, i8* %340, i64 16
  %369 = bitcast i8* %368 to i32*
  %370 = load i32, i32* %369, align 1
  %371 = xor i32 %348, %337
  %372 = lshr i32 %371, 18
  %373 = shl i32 %371, 14
  %374 = or i32 %373, %372
  %375 = mul i32 %374, 5
  %376 = add i32 %375, -430675100
  %377 = add i32 %351, %339
  %378 = lshr i32 %377, 19
  %379 = shl i32 %377, 13
  %380 = or i32 %379, %378
  %381 = mul i32 %380, -862048943
  %382 = add i32 %359, %338
  %383 = lshr i32 %382, 18
  %384 = shl i32 %382, 14
  %385 = or i32 %384, %383
  %386 = mul i32 %385, 5
  %387 = add i32 %386, -430675100
  %388 = add i32 %367, %351
  %389 = xor i32 %376, %388
  %390 = lshr i32 %389, 19
  %391 = shl i32 %389, 13
  %392 = or i32 %391, %390
  %393 = xor i32 %387, %370
  %394 = tail call i32 @llvm.bswap.i32(i32 %393)
  %395 = mul i32 %394, 5
  %396 = add i32 %392, %370
  %397 = mul i32 %396, 5
  %398 = add i32 %397, -430675100
  %399 = tail call i32 @llvm.bswap.i32(i32 %398)
  %400 = add i32 %381, %348
  %401 = getelementptr inbounds i8, i8* %340, i64 20
  %402 = add i64 %341, -1
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %336

404:                                              ; preds = %336
  %405 = lshr i32 %399, 11
  %406 = shl i32 %399, 21
  %407 = or i32 %406, %405
  %408 = mul i32 %407, -862048943
  %409 = lshr i32 %408, 17
  %410 = mul i32 %407, 380141568
  %411 = or i32 %409, %410
  %412 = mul i32 %411, -862048943
  %413 = lshr i32 %395, 11
  %414 = mul i32 %394, 10485760
  %415 = or i32 %413, %414
  %416 = mul i32 %415, -862048943
  %417 = lshr i32 %416, 17
  %418 = mul i32 %415, 380141568
  %419 = or i32 %417, %418
  %420 = add i32 %412, %400
  %421 = lshr i32 %420, 19
  %422 = shl i32 %420, 13
  %423 = or i32 %422, %421
  %424 = mul i32 %423, 5
  %425 = add i32 %424, -430675100
  %426 = lshr i32 %425, 17
  %427 = shl i32 %425, 15
  %428 = or i32 %427, %426
  %429 = add i32 %428, %419
  %430 = mul i32 %429, -862048943
  %431 = lshr i32 %430, 19
  %432 = mul i32 %429, -978706432
  %433 = or i32 %431, %432
  %434 = mul i32 %433, 5
  %435 = add i32 %434, -430675100
  %436 = lshr i32 %435, 17
  %437 = shl i32 %435, 15
  %438 = or i32 %437, %436
  %439 = mul i32 %438, -862048943
  br label %440

440:                                              ; preds = %164, %106, %72, %404
  %441 = phi i32 [ %439, %404 ], [ %259, %164 ], [ %105, %72 ], [ %163, %106 ]
  ret i32 %441
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v11110CityHash64EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 33
  br i1 %3, label %4, label %50

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 17
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call fastcc i64 @_ZN4base8internal13cityhash_v111L12HashLen0to16EPKcm(i8* %0, i64 %1)
  br label %320

8:                                                ; preds = %4
  %9 = shl i64 %1, 1
  %10 = add nuw nsw i64 %9, -7286425919675154353
  %11 = bitcast i8* %0 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = mul i64 %12, -5435081209227447693
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = getelementptr inbounds i8, i8* %17, i64 -8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = mul i64 %20, %10
  %22 = getelementptr inbounds i8, i8* %17, i64 -16
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = mul i64 %24, -7286425919675154353
  %26 = add i64 %13, %16
  %27 = lshr i64 %26, 43
  %28 = shl i64 %26, 21
  %29 = or i64 %28, %27
  %30 = lshr i64 %21, 30
  %31 = shl i64 %21, 34
  %32 = or i64 %31, %30
  %33 = add i64 %25, %29
  %34 = add i64 %33, %32
  %35 = add i64 %16, -7286425919675154353
  %36 = lshr i64 %35, 18
  %37 = shl i64 %35, 46
  %38 = or i64 %37, %36
  %39 = add i64 %21, %13
  %40 = add i64 %39, %38
  %41 = xor i64 %34, %40
  %42 = mul i64 %41, %10
  %43 = lshr i64 %42, 47
  %44 = xor i64 %42, %40
  %45 = xor i64 %44, %43
  %46 = mul i64 %45, %10
  %47 = lshr i64 %46, 47
  %48 = xor i64 %47, %46
  %49 = mul i64 %48, %10
  br label %320

50:                                               ; preds = %2
  %51 = icmp ult i64 %1, 65
  br i1 %51, label %52, label %123

52:                                               ; preds = %50
  %53 = shl i64 %1, 1
  %54 = add nuw nsw i64 %53, -7286425919675154353
  %55 = bitcast i8* %0 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = mul i64 %56, -7286425919675154353
  %58 = getelementptr inbounds i8, i8* %0, i64 8
  %59 = bitcast i8* %58 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr inbounds i8, i8* %0, i64 %1
  %62 = getelementptr inbounds i8, i8* %61, i64 -24
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 -32
  %66 = bitcast i8* %65 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 16
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = mul i64 %70, -7286425919675154353
  %72 = getelementptr inbounds i8, i8* %0, i64 24
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = mul i64 %74, 9
  %76 = getelementptr inbounds i8, i8* %61, i64 -8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = getelementptr inbounds i8, i8* %61, i64 -16
  %80 = bitcast i8* %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = mul i64 %81, %54
  %83 = add i64 %78, %57
  %84 = lshr i64 %83, 43
  %85 = shl i64 %83, 21
  %86 = or i64 %85, %84
  %87 = lshr i64 %60, 30
  %88 = shl i64 %60, 34
  %89 = or i64 %88, %87
  %90 = add i64 %89, %64
  %91 = mul i64 %90, 9
  %92 = add i64 %86, %91
  %93 = xor i64 %83, %67
  %94 = add i64 %75, 1
  %95 = add i64 %94, %93
  %96 = add i64 %92, %95
  %97 = mul i64 %96, %54
  %98 = tail call i64 @llvm.bswap.i64(i64 %97) #3
  %99 = add i64 %75, %71
  %100 = lshr i64 %99, 42
  %101 = shl i64 %99, 22
  %102 = or i64 %101, %100
  %103 = add i64 %102, %64
  %104 = add i64 %95, %82
  %105 = add i64 %104, %98
  %106 = mul i64 %105, %54
  %107 = tail call i64 @llvm.bswap.i64(i64 %106) #3
  %108 = add i64 %99, %64
  %109 = add i64 %108, %78
  %110 = add i64 %109, %103
  %111 = add i64 %110, %107
  %112 = mul i64 %111, %54
  %113 = tail call i64 @llvm.bswap.i64(i64 %112) #3
  %114 = add i64 %108, %60
  %115 = add i64 %114, %113
  %116 = mul i64 %115, %54
  %117 = add i64 %82, %67
  %118 = add i64 %117, %116
  %119 = lshr i64 %118, 47
  %120 = xor i64 %119, %118
  %121 = mul i64 %120, %54
  %122 = add i64 %121, %103
  br label %320

123:                                              ; preds = %50
  %124 = getelementptr inbounds i8, i8* %0, i64 %1
  %125 = getelementptr inbounds i8, i8* %124, i64 -40
  %126 = bitcast i8* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = getelementptr inbounds i8, i8* %124, i64 -16
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = getelementptr inbounds i8, i8* %124, i64 -56
  %132 = bitcast i8* %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = add i64 %133, %130
  %135 = getelementptr inbounds i8, i8* %124, i64 -48
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = add i64 %137, %1
  %139 = getelementptr inbounds i8, i8* %124, i64 -24
  %140 = bitcast i8* %139 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = xor i64 %141, %138
  %143 = mul i64 %142, -7070675565921424023
  %144 = lshr i64 %143, 47
  %145 = xor i64 %143, %141
  %146 = xor i64 %145, %144
  %147 = mul i64 %146, -7070675565921424023
  %148 = lshr i64 %147, 47
  %149 = xor i64 %148, %147
  %150 = mul i64 %149, -7070675565921424023
  %151 = getelementptr inbounds i8, i8* %124, i64 -64
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = add i64 %153, %1
  %155 = add i64 %127, %154
  %156 = add i64 %155, %150
  %157 = lshr i64 %156, 21
  %158 = shl i64 %156, 43
  %159 = or i64 %158, %157
  %160 = add i64 %154, %133
  %161 = add i64 %160, %137
  %162 = lshr i64 %161, 44
  %163 = shl i64 %161, 20
  %164 = or i64 %163, %162
  %165 = add i64 %161, %127
  %166 = add i64 %164, %154
  %167 = add i64 %166, %159
  %168 = getelementptr inbounds i8, i8* %124, i64 -32
  %169 = add i64 %134, -5435081209227447693
  %170 = bitcast i8* %168 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = getelementptr inbounds i8, i8* %168, i64 24
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 1
  %175 = add i64 %169, %171
  %176 = add i64 %175, %127
  %177 = add i64 %176, %174
  %178 = lshr i64 %177, 21
  %179 = shl i64 %177, 43
  %180 = or i64 %179, %178
  %181 = add i64 %175, %141
  %182 = add i64 %181, %130
  %183 = lshr i64 %182, 44
  %184 = shl i64 %182, 20
  %185 = or i64 %184, %183
  %186 = add i64 %182, %174
  %187 = add i64 %185, %175
  %188 = add i64 %187, %180
  %189 = mul i64 %127, -5435081209227447693
  %190 = bitcast i8* %0 to i64*
  %191 = load i64, i64* %190, align 1
  %192 = add i64 %191, %189
  %193 = add i64 %1, -1
  %194 = and i64 %193, -64
  br label %195

195:                                              ; preds = %283, %123
  %196 = phi i64 [ %191, %123 ], [ %285, %283 ]
  %197 = phi i64 [ %188, %123 ], [ %279, %283 ]
  %198 = phi i64 [ %186, %123 ], [ %277, %283 ]
  %199 = phi i64 [ %165, %123 ], [ %255, %283 ]
  %200 = phi i64 [ %167, %123 ], [ %257, %283 ]
  %201 = phi i64 [ %150, %123 ], [ %225, %283 ]
  %202 = phi i64 [ %192, %123 ], [ %235, %283 ]
  %203 = phi i8* [ %0, %123 ], [ %280, %283 ]
  %204 = phi i64 [ %194, %123 ], [ %281, %283 ]
  %205 = phi i64 [ %134, %123 ], [ %230, %283 ]
  %206 = getelementptr inbounds i8, i8* %203, i64 8
  %207 = bitcast i8* %206 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = add i64 %202, %199
  %210 = add i64 %209, %205
  %211 = add i64 %210, %208
  %212 = lshr i64 %211, 37
  %213 = shl i64 %211, 27
  %214 = or i64 %213, %212
  %215 = mul i64 %214, -5435081209227447693
  %216 = add i64 %205, %200
  %217 = getelementptr inbounds i8, i8* %203, i64 48
  %218 = bitcast i8* %217 to i64*
  %219 = load i64, i64* %218, align 1
  %220 = add i64 %216, %219
  %221 = lshr i64 %220, 42
  %222 = shl i64 %220, 22
  %223 = or i64 %222, %221
  %224 = mul i64 %223, -5435081209227447693
  %225 = xor i64 %215, %197
  %226 = getelementptr inbounds i8, i8* %203, i64 40
  %227 = bitcast i8* %226 to i64*
  %228 = load i64, i64* %227, align 1
  %229 = add i64 %228, %199
  %230 = add i64 %229, %224
  %231 = add i64 %201, %198
  %232 = lshr i64 %231, 33
  %233 = shl i64 %231, 31
  %234 = or i64 %233, %232
  %235 = mul i64 %234, -5435081209227447693
  %236 = mul i64 %200, -5435081209227447693
  %237 = getelementptr inbounds i8, i8* %203, i64 16
  %238 = bitcast i8* %237 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = getelementptr inbounds i8, i8* %203, i64 24
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = add i64 %196, %236
  %244 = add i64 %243, %198
  %245 = add i64 %244, %242
  %246 = add i64 %245, %225
  %247 = lshr i64 %246, 21
  %248 = shl i64 %246, 43
  %249 = or i64 %248, %247
  %250 = add i64 %243, %208
  %251 = add i64 %250, %239
  %252 = lshr i64 %251, 44
  %253 = shl i64 %251, 20
  %254 = or i64 %253, %252
  %255 = add i64 %251, %242
  %256 = add i64 %254, %243
  %257 = add i64 %256, %249
  %258 = getelementptr inbounds i8, i8* %203, i64 32
  %259 = add i64 %235, %197
  %260 = add i64 %230, %239
  %261 = bitcast i8* %258 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = getelementptr inbounds i8, i8* %203, i64 56
  %264 = bitcast i8* %263 to i64*
  %265 = load i64, i64* %264, align 1
  %266 = add i64 %259, %262
  %267 = add i64 %260, %266
  %268 = add i64 %267, %265
  %269 = lshr i64 %268, 21
  %270 = shl i64 %268, 43
  %271 = or i64 %270, %269
  %272 = add i64 %266, %228
  %273 = add i64 %272, %219
  %274 = lshr i64 %273, 44
  %275 = shl i64 %273, 20
  %276 = or i64 %275, %274
  %277 = add i64 %273, %265
  %278 = add i64 %276, %266
  %279 = add i64 %278, %271
  %280 = getelementptr inbounds i8, i8* %203, i64 64
  %281 = add i64 %204, -64
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %286, label %283

283:                                              ; preds = %195
  %284 = bitcast i8* %280 to i64*
  %285 = load i64, i64* %284, align 1
  br label %195

286:                                              ; preds = %195
  %287 = xor i64 %277, %255
  %288 = mul i64 %287, -7070675565921424023
  %289 = lshr i64 %288, 47
  %290 = xor i64 %288, %277
  %291 = xor i64 %290, %289
  %292 = mul i64 %291, -7070675565921424023
  %293 = lshr i64 %292, 47
  %294 = xor i64 %293, %292
  %295 = mul i64 %294, -7070675565921424023
  %296 = lshr i64 %230, 47
  %297 = xor i64 %296, %230
  %298 = mul i64 %297, -5435081209227447693
  %299 = add i64 %298, %225
  %300 = add i64 %299, %295
  %301 = xor i64 %279, %257
  %302 = mul i64 %301, -7070675565921424023
  %303 = lshr i64 %302, 47
  %304 = xor i64 %302, %279
  %305 = xor i64 %304, %303
  %306 = mul i64 %305, -7070675565921424023
  %307 = lshr i64 %306, 47
  %308 = xor i64 %307, %306
  %309 = mul i64 %308, -7070675565921424023
  %310 = add i64 %309, %235
  %311 = xor i64 %310, %300
  %312 = mul i64 %311, -7070675565921424023
  %313 = lshr i64 %312, 47
  %314 = xor i64 %312, %310
  %315 = xor i64 %314, %313
  %316 = mul i64 %315, -7070675565921424023
  %317 = lshr i64 %316, 47
  %318 = xor i64 %317, %316
  %319 = mul i64 %318, -7070675565921424023
  br label %320

320:                                              ; preds = %286, %52, %8, %6
  %321 = phi i64 [ %7, %6 ], [ %49, %8 ], [ %122, %52 ], [ %319, %286 ]
  ret i64 %321
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i64 @_ZN4base8internal13cityhash_v111L12HashLen0to16EPKcm(i8* nocapture readonly, i64) unnamed_addr #2 {
  %3 = icmp ugt i64 %1, 7
  br i1 %3, label %4, label %33

4:                                                ; preds = %2
  %5 = shl i64 %1, 1
  %6 = add i64 %5, -7286425919675154353
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = add i64 %8, -7286425919675154353
  %10 = getelementptr inbounds i8, i8* %0, i64 %1
  %11 = getelementptr inbounds i8, i8* %10, i64 -8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = lshr i64 %13, 37
  %15 = shl i64 %13, 27
  %16 = or i64 %15, %14
  %17 = mul i64 %16, %6
  %18 = add i64 %17, %9
  %19 = lshr i64 %9, 25
  %20 = shl i64 %9, 39
  %21 = or i64 %20, %19
  %22 = add i64 %21, %13
  %23 = mul i64 %22, %6
  %24 = xor i64 %23, %18
  %25 = mul i64 %24, %6
  %26 = lshr i64 %25, 47
  %27 = xor i64 %25, %23
  %28 = xor i64 %27, %26
  %29 = mul i64 %28, %6
  %30 = lshr i64 %29, 47
  %31 = xor i64 %30, %29
  %32 = mul i64 %31, %6
  br label %81

33:                                               ; preds = %2
  %34 = icmp ugt i64 %1, 3
  br i1 %34, label %35, label %57

35:                                               ; preds = %33
  %36 = shl i64 %1, 1
  %37 = add nuw nsw i64 %36, -7286425919675154353
  %38 = bitcast i8* %0 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 3
  %42 = add nuw nsw i64 %41, %1
  %43 = getelementptr inbounds i8, i8* %0, i64 %1
  %44 = getelementptr inbounds i8, i8* %43, i64 -4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = zext i32 %46 to i64
  %48 = xor i64 %42, %47
  %49 = mul i64 %48, %37
  %50 = lshr i64 %49, 47
  %51 = xor i64 %49, %47
  %52 = xor i64 %51, %50
  %53 = mul i64 %52, %37
  %54 = lshr i64 %53, 47
  %55 = xor i64 %54, %53
  %56 = mul i64 %55, %37
  br label %81

57:                                               ; preds = %33
  %58 = icmp eq i64 %1, 0
  br i1 %58, label %81, label %59

59:                                               ; preds = %57
  %60 = load i8, i8* %0, align 1
  %61 = lshr i64 %1, 1
  %62 = getelementptr inbounds i8, i8* %0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = add nsw i64 %1, -1
  %65 = getelementptr inbounds i8, i8* %0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %60 to i64
  %68 = zext i8 %63 to i64
  %69 = shl nuw nsw i64 %68, 8
  %70 = or i64 %69, %67
  %71 = zext i8 %66 to i64
  %72 = shl nuw nsw i64 %71, 2
  %73 = add nuw nsw i64 %72, %1
  %74 = mul i64 %70, -7286425919675154353
  %75 = and i64 %73, 4294967295
  %76 = mul i64 %75, -4348849565147123417
  %77 = xor i64 %76, %74
  %78 = lshr i64 %77, 47
  %79 = xor i64 %78, %77
  %80 = mul i64 %79, -7286425919675154353
  br label %81

81:                                               ; preds = %57, %59, %35, %4
  %82 = phi i64 [ %32, %4 ], [ %56, %35 ], [ %80, %59 ], [ -7286425919675154353, %57 ]
  ret i64 %82
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v11118CityHash64WithSeedEPKcmm(i8* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %4 = tail call i64 @_ZN4base8internal13cityhash_v11110CityHash64EPKcm(i8* %0, i64 %1) #3
  %5 = add i64 %4, 7286425919675154353
  %6 = xor i64 %5, %2
  %7 = mul i64 %6, -7070675565921424023
  %8 = lshr i64 %7, 47
  %9 = xor i64 %7, %2
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7070675565921424023
  %12 = lshr i64 %11, 47
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7070675565921424023
  ret i64 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v11119CityHash64WithSeedsEPKcmmm(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i64 @_ZN4base8internal13cityhash_v11110CityHash64EPKcm(i8* %0, i64 %1)
  %6 = sub i64 %5, %2
  %7 = xor i64 %6, %3
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %3
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  ret i64 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4base8internal13cityhash_v11119CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = icmp ult i64 %1, 128
  br i1 %5, label %6, label %111

6:                                                ; preds = %4
  %7 = add nsw i64 %1, -16
  %8 = icmp slt i64 %7, 1
  br i1 %8, label %9, label %26

9:                                                ; preds = %6
  %10 = mul i64 %2, -5435081209227447693
  %11 = lshr i64 %10, 47
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -5435081209227447693
  %14 = mul i64 %3, -5435081209227447693
  %15 = tail call fastcc i64 @_ZN4base8internal13cityhash_v111L12HashLen0to16EPKcm(i8* %0, i64 %1) #3
  %16 = add i64 %15, %14
  %17 = icmp ugt i64 %1, 7
  br i1 %17, label %18, label %21

18:                                               ; preds = %9
  %19 = bitcast i8* %0 to i64*
  %20 = load i64, i64* %19, align 1
  br label %21

21:                                               ; preds = %18, %9
  %22 = phi i64 [ %20, %18 ], [ %16, %9 ]
  %23 = add i64 %22, %13
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  br label %85

26:                                               ; preds = %6
  %27 = getelementptr inbounds i8, i8* %0, i64 %1
  %28 = getelementptr inbounds i8, i8* %27, i64 -8
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = add i64 %30, -5435081209227447693
  %32 = xor i64 %31, %2
  %33 = mul i64 %32, -7070675565921424023
  %34 = lshr i64 %33, 47
  %35 = xor i64 %33, %2
  %36 = xor i64 %35, %34
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %37, 47
  %39 = xor i64 %38, %37
  %40 = mul i64 %39, -7070675565921424023
  %41 = add i64 %3, %1
  %42 = getelementptr inbounds i8, i8* %27, i64 -16
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = add i64 %40, %44
  %46 = xor i64 %45, %41
  %47 = mul i64 %46, -7070675565921424023
  %48 = lshr i64 %47, 47
  %49 = xor i64 %47, %45
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = lshr i64 %51, 47
  %53 = xor i64 %52, %51
  %54 = mul i64 %53, -7070675565921424023
  %55 = add i64 %54, %2
  br label %56

56:                                               ; preds = %56, %26
  %57 = phi i8* [ %0, %26 ], [ %82, %56 ]
  %58 = phi i64 [ %55, %26 ], [ %70, %56 ]
  %59 = phi i64 [ %3, %26 ], [ %71, %56 ]
  %60 = phi i64 [ %40, %26 ], [ %80, %56 ]
  %61 = phi i64 [ %54, %26 ], [ %81, %56 ]
  %62 = phi i64 [ %7, %26 ], [ %83, %56 ]
  %63 = bitcast i8* %57 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = mul i64 %64, -5435081209227447693
  %66 = lshr i64 %65, 47
  %67 = xor i64 %66, %65
  %68 = mul i64 %67, -5435081209227447693
  %69 = xor i64 %68, %58
  %70 = mul i64 %69, -5435081209227447693
  %71 = xor i64 %70, %59
  %72 = getelementptr inbounds i8, i8* %57, i64 8
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = mul i64 %74, -5435081209227447693
  %76 = lshr i64 %75, 47
  %77 = xor i64 %76, %75
  %78 = mul i64 %77, -5435081209227447693
  %79 = xor i64 %78, %60
  %80 = mul i64 %79, -5435081209227447693
  %81 = xor i64 %80, %61
  %82 = getelementptr inbounds i8, i8* %57, i64 16
  %83 = add nsw i64 %62, -16
  %84 = icmp sgt i64 %83, 0
  br i1 %84, label %56, label %85

85:                                               ; preds = %56, %21
  %86 = phi i64 [ %13, %21 ], [ %70, %56 ]
  %87 = phi i64 [ %3, %21 ], [ %71, %56 ]
  %88 = phi i64 [ %16, %21 ], [ %80, %56 ]
  %89 = phi i64 [ %25, %21 ], [ %81, %56 ]
  %90 = xor i64 %88, %86
  %91 = mul i64 %90, -7070675565921424023
  %92 = lshr i64 %91, 47
  %93 = xor i64 %91, %88
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7070675565921424023
  %96 = lshr i64 %95, 47
  %97 = xor i64 %96, %95
  %98 = mul i64 %97, -7070675565921424023
  %99 = xor i64 %89, %87
  %100 = mul i64 %99, -7070675565921424023
  %101 = lshr i64 %100, 47
  %102 = xor i64 %100, %87
  %103 = xor i64 %102, %101
  %104 = mul i64 %103, -7070675565921424023
  %105 = lshr i64 %104, 47
  %106 = xor i64 %105, %104
  %107 = mul i64 %106, -7070675565921424023
  %108 = xor i64 %107, %98
  %109 = mul i64 %108, -7070675565921424023
  %110 = xor i64 %109, %98
  br label %419

111:                                              ; preds = %4
  %112 = mul i64 %1, -5435081209227447693
  %113 = xor i64 %3, -5435081209227447693
  %114 = lshr i64 %113, 49
  %115 = shl i64 %113, 15
  %116 = or i64 %115, %114
  %117 = mul i64 %116, -5435081209227447693
  %118 = bitcast i8* %0 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = add i64 %119, %117
  %121 = lshr i64 %120, 42
  %122 = shl i64 %120, 22
  %123 = or i64 %122, %121
  %124 = mul i64 %123, -5435081209227447693
  %125 = getelementptr inbounds i8, i8* %0, i64 8
  %126 = bitcast i8* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = add i64 %124, %127
  %129 = add i64 %112, %3
  %130 = lshr i64 %129, 35
  %131 = shl i64 %129, 29
  %132 = or i64 %131, %130
  %133 = mul i64 %132, -5435081209227447693
  %134 = add i64 %133, %2
  %135 = getelementptr inbounds i8, i8* %0, i64 88
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = add i64 %137, %2
  %139 = lshr i64 %138, 53
  %140 = shl i64 %138, 11
  %141 = or i64 %140, %139
  %142 = mul i64 %141, -5435081209227447693
  br label %143

143:                                              ; preds = %306, %111
  %144 = phi i64 [ %119, %111 ], [ %311, %306 ]
  %145 = phi i64 [ %127, %111 ], [ %309, %306 ]
  %146 = phi i64 [ %112, %111 ], [ %246, %306 ]
  %147 = phi i64 [ %2, %111 ], [ %256, %306 ]
  %148 = phi i64 [ %142, %111 ], [ %302, %306 ]
  %149 = phi i64 [ %134, %111 ], [ %300, %306 ]
  %150 = phi i64 [ %128, %111 ], [ %280, %306 ]
  %151 = phi i64 [ %120, %111 ], [ %278, %306 ]
  %152 = phi i64 [ %1, %111 ], [ %304, %306 ]
  %153 = phi i8* [ %0, %111 ], [ %303, %306 ]
  %154 = phi i64 [ %3, %111 ], [ %251, %306 ]
  %155 = add i64 %151, %147
  %156 = add i64 %155, %154
  %157 = add i64 %156, %145
  %158 = lshr i64 %157, 37
  %159 = shl i64 %157, 27
  %160 = or i64 %159, %158
  %161 = mul i64 %160, -5435081209227447693
  %162 = add i64 %154, %150
  %163 = getelementptr inbounds i8, i8* %153, i64 48
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = add i64 %162, %165
  %167 = lshr i64 %166, 42
  %168 = shl i64 %166, 22
  %169 = or i64 %168, %167
  %170 = mul i64 %169, -5435081209227447693
  %171 = xor i64 %161, %148
  %172 = getelementptr inbounds i8, i8* %153, i64 40
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 1
  %175 = add i64 %174, %151
  %176 = add i64 %175, %170
  %177 = add i64 %149, %146
  %178 = lshr i64 %177, 33
  %179 = shl i64 %177, 31
  %180 = or i64 %179, %178
  %181 = mul i64 %180, -5435081209227447693
  %182 = mul i64 %150, -5435081209227447693
  %183 = getelementptr inbounds i8, i8* %153, i64 16
  %184 = bitcast i8* %183 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = getelementptr inbounds i8, i8* %153, i64 24
  %187 = bitcast i8* %186 to i64*
  %188 = load i64, i64* %187, align 1
  %189 = add i64 %144, %182
  %190 = add i64 %189, %149
  %191 = add i64 %190, %188
  %192 = add i64 %191, %171
  %193 = lshr i64 %192, 21
  %194 = shl i64 %192, 43
  %195 = or i64 %194, %193
  %196 = add i64 %189, %145
  %197 = add i64 %196, %185
  %198 = lshr i64 %197, 44
  %199 = shl i64 %197, 20
  %200 = or i64 %199, %198
  %201 = add i64 %197, %188
  %202 = add i64 %200, %189
  %203 = add i64 %202, %195
  %204 = getelementptr inbounds i8, i8* %153, i64 32
  %205 = add i64 %181, %148
  %206 = add i64 %176, %185
  %207 = bitcast i8* %204 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = getelementptr inbounds i8, i8* %153, i64 56
  %210 = bitcast i8* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = add i64 %205, %208
  %213 = add i64 %206, %212
  %214 = add i64 %213, %211
  %215 = lshr i64 %214, 21
  %216 = shl i64 %214, 43
  %217 = or i64 %216, %215
  %218 = add i64 %212, %174
  %219 = add i64 %218, %165
  %220 = lshr i64 %219, 44
  %221 = shl i64 %219, 20
  %222 = or i64 %221, %220
  %223 = add i64 %219, %211
  %224 = add i64 %222, %212
  %225 = add i64 %224, %217
  %226 = getelementptr inbounds i8, i8* %153, i64 64
  %227 = add i64 %176, %181
  %228 = add i64 %227, %201
  %229 = getelementptr inbounds i8, i8* %153, i64 72
  %230 = bitcast i8* %229 to i64*
  %231 = load i64, i64* %230, align 1
  %232 = add i64 %228, %231
  %233 = lshr i64 %232, 37
  %234 = shl i64 %232, 27
  %235 = or i64 %234, %233
  %236 = mul i64 %235, -5435081209227447693
  %237 = getelementptr inbounds i8, i8* %153, i64 112
  %238 = bitcast i8* %237 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = add i64 %239, %176
  %241 = add i64 %240, %203
  %242 = lshr i64 %241, 42
  %243 = shl i64 %241, 22
  %244 = or i64 %243, %242
  %245 = mul i64 %244, -5435081209227447693
  %246 = xor i64 %236, %225
  %247 = getelementptr inbounds i8, i8* %153, i64 104
  %248 = bitcast i8* %247 to i64*
  %249 = load i64, i64* %248, align 1
  %250 = add i64 %249, %201
  %251 = add i64 %250, %245
  %252 = add i64 %223, %171
  %253 = lshr i64 %252, 33
  %254 = shl i64 %252, 31
  %255 = or i64 %254, %253
  %256 = mul i64 %255, -5435081209227447693
  %257 = mul i64 %203, -5435081209227447693
  %258 = bitcast i8* %226 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = getelementptr inbounds i8, i8* %153, i64 80
  %261 = bitcast i8* %260 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = getelementptr inbounds i8, i8* %153, i64 88
  %264 = bitcast i8* %263 to i64*
  %265 = load i64, i64* %264, align 1
  %266 = add i64 %259, %257
  %267 = add i64 %266, %223
  %268 = add i64 %267, %246
  %269 = add i64 %268, %265
  %270 = lshr i64 %269, 21
  %271 = shl i64 %269, 43
  %272 = or i64 %271, %270
  %273 = add i64 %266, %231
  %274 = add i64 %273, %262
  %275 = lshr i64 %274, 44
  %276 = shl i64 %274, 20
  %277 = or i64 %276, %275
  %278 = add i64 %274, %265
  %279 = add i64 %277, %266
  %280 = add i64 %279, %272
  %281 = getelementptr inbounds i8, i8* %153, i64 96
  %282 = add i64 %256, %225
  %283 = add i64 %251, %262
  %284 = bitcast i8* %281 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = getelementptr inbounds i8, i8* %153, i64 120
  %287 = bitcast i8* %286 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = add i64 %282, %285
  %290 = add i64 %283, %289
  %291 = add i64 %290, %288
  %292 = lshr i64 %291, 21
  %293 = shl i64 %291, 43
  %294 = or i64 %293, %292
  %295 = add i64 %289, %249
  %296 = add i64 %295, %239
  %297 = lshr i64 %296, 44
  %298 = shl i64 %296, 20
  %299 = or i64 %298, %297
  %300 = add i64 %296, %288
  %301 = add i64 %299, %289
  %302 = add i64 %301, %294
  %303 = getelementptr inbounds i8, i8* %153, i64 128
  %304 = add i64 %152, -128
  %305 = icmp ugt i64 %304, 127
  br i1 %305, label %306, label %312

306:                                              ; preds = %143
  %307 = getelementptr inbounds i8, i8* %153, i64 136
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308, align 1
  %310 = bitcast i8* %303 to i64*
  %311 = load i64, i64* %310, align 1
  br label %143

312:                                              ; preds = %143
  %313 = and i64 %1, 127
  %314 = add i64 %278, %246
  %315 = lshr i64 %314, 49
  %316 = shl i64 %314, 15
  %317 = or i64 %316, %315
  %318 = mul i64 %317, -4348849565147123417
  %319 = add i64 %318, %256
  %320 = mul i64 %251, -4348849565147123417
  %321 = lshr i64 %302, 37
  %322 = shl i64 %302, 27
  %323 = or i64 %322, %321
  %324 = add i64 %323, %320
  %325 = mul i64 %246, -4348849565147123417
  %326 = lshr i64 %300, 27
  %327 = shl i64 %300, 37
  %328 = or i64 %327, %326
  %329 = add i64 %328, %325
  %330 = mul i64 %300, 9
  %331 = mul i64 %278, -4348849565147123417
  %332 = icmp eq i64 %313, 0
  br i1 %332, label %376, label %333

333:                                              ; preds = %312
  %334 = getelementptr inbounds i8, i8* %0, i64 %1
  %335 = add i64 %324, %319
  %336 = lshr i64 %335, 42
  %337 = shl i64 %335, 22
  %338 = or i64 %337, %336
  %339 = mul i64 %338, -4348849565147123417
  %340 = add i64 %339, %280
  %341 = getelementptr inbounds i8, i8* %334, i64 -32
  %342 = getelementptr inbounds i8, i8* %341, i64 16
  %343 = bitcast i8* %342 to i64*
  %344 = load i64, i64* %343, align 1
  %345 = add i64 %344, %330
  %346 = mul i64 %319, -4348849565147123417
  %347 = add i64 %345, %346
  %348 = bitcast i8* %341 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = add i64 %302, %329
  %351 = add i64 %350, %349
  %352 = add i64 %331, %302
  %353 = getelementptr inbounds i8, i8* %341, i64 8
  %354 = bitcast i8* %353 to i64*
  %355 = load i64, i64* %354, align 1
  %356 = getelementptr inbounds i8, i8* %341, i64 24
  %357 = bitcast i8* %356 to i64*
  %358 = load i64, i64* %357, align 1
  %359 = add i64 %349, %331
  %360 = add i64 %359, %351
  %361 = add i64 %358, %280
  %362 = add i64 %361, %360
  %363 = lshr i64 %362, 21
  %364 = shl i64 %362, 43
  %365 = or i64 %364, %363
  %366 = add i64 %355, %344
  %367 = add i64 %366, %360
  %368 = lshr i64 %367, 44
  %369 = shl i64 %367, 20
  %370 = or i64 %369, %368
  %371 = add i64 %367, %358
  %372 = add i64 %370, %360
  %373 = add i64 %372, %365
  %374 = mul i64 %371, -4348849565147123417
  %375 = icmp ugt i64 %313, 32
  br i1 %375, label %431, label %376

376:                                              ; preds = %333, %431, %473, %515, %312
  %377 = phi i64 [ %329, %312 ], [ %351, %333 ], [ %448, %431 ], [ %490, %473 ], [ %532, %515 ]
  %378 = phi i64 [ %319, %312 ], [ %347, %333 ], [ %444, %431 ], [ %486, %473 ], [ %528, %515 ]
  %379 = phi i64 [ %302, %312 ], [ %352, %333 ], [ %449, %431 ], [ %491, %473 ], [ %533, %515 ]
  %380 = phi i64 [ %330, %312 ], [ %345, %333 ], [ %442, %431 ], [ %484, %473 ], [ %526, %515 ]
  %381 = phi i64 [ %280, %312 ], [ %373, %333 ], [ %470, %431 ], [ %512, %473 ], [ %554, %515 ]
  %382 = phi i64 [ %324, %312 ], [ %340, %333 ], [ %437, %431 ], [ %479, %473 ], [ %521, %515 ]
  %383 = phi i64 [ %331, %312 ], [ %374, %333 ], [ %471, %431 ], [ %513, %473 ], [ %555, %515 ]
  %384 = xor i64 %383, %378
  %385 = mul i64 %384, -7070675565921424023
  %386 = lshr i64 %385, 47
  %387 = xor i64 %385, %383
  %388 = xor i64 %387, %386
  %389 = mul i64 %388, -7070675565921424023
  %390 = lshr i64 %389, 47
  %391 = xor i64 %390, %389
  %392 = mul i64 %391, -7070675565921424023
  %393 = add i64 %382, %377
  %394 = xor i64 %393, %380
  %395 = mul i64 %394, -7070675565921424023
  %396 = lshr i64 %395, 47
  %397 = xor i64 %395, %380
  %398 = xor i64 %397, %396
  %399 = mul i64 %398, -7070675565921424023
  %400 = lshr i64 %399, 47
  %401 = xor i64 %400, %399
  %402 = mul i64 %401, -7070675565921424023
  %403 = add i64 %392, %381
  %404 = xor i64 %403, %379
  %405 = mul i64 %404, -7070675565921424023
  %406 = lshr i64 %405, 47
  %407 = xor i64 %405, %379
  %408 = xor i64 %407, %406
  %409 = mul i64 %408, -7070675565921424023
  %410 = lshr i64 %409, 47
  %411 = xor i64 %410, %409
  %412 = mul i64 %411, -7070675565921424023
  %413 = add i64 %412, %402
  %414 = add i64 %392, %379
  %415 = add i64 %402, %381
  %416 = xor i64 %415, %414
  %417 = mul i64 %416, -7070675565921424023
  %418 = xor i64 %417, %415
  br label %419

419:                                              ; preds = %376, %85
  %420 = phi i64 [ %417, %376 ], [ %109, %85 ]
  %421 = phi i64 [ %418, %376 ], [ %110, %85 ]
  %422 = phi i64 [ %413, %376 ], [ %108, %85 ]
  %423 = lshr i64 %420, 47
  %424 = xor i64 %421, %423
  %425 = mul i64 %424, -7070675565921424023
  %426 = lshr i64 %425, 47
  %427 = xor i64 %426, %425
  %428 = mul i64 %427, -7070675565921424023
  %429 = insertvalue { i64, i64 } undef, i64 %422, 0
  %430 = insertvalue { i64, i64 } %429, i64 %428, 1
  ret { i64, i64 } %430

431:                                              ; preds = %333
  %432 = add i64 %340, %347
  %433 = lshr i64 %432, 42
  %434 = shl i64 %432, 22
  %435 = or i64 %434, %433
  %436 = mul i64 %435, -4348849565147123417
  %437 = add i64 %436, %373
  %438 = getelementptr inbounds i8, i8* %334, i64 -64
  %439 = getelementptr inbounds i8, i8* %438, i64 16
  %440 = bitcast i8* %439 to i64*
  %441 = load i64, i64* %440, align 1
  %442 = add i64 %441, %345
  %443 = mul i64 %347, -4348849565147123417
  %444 = add i64 %442, %443
  %445 = bitcast i8* %438 to i64*
  %446 = load i64, i64* %445, align 1
  %447 = add i64 %352, %351
  %448 = add i64 %447, %446
  %449 = add i64 %374, %352
  %450 = getelementptr inbounds i8, i8* %438, i64 8
  %451 = bitcast i8* %450 to i64*
  %452 = load i64, i64* %451, align 1
  %453 = getelementptr inbounds i8, i8* %438, i64 24
  %454 = bitcast i8* %453 to i64*
  %455 = load i64, i64* %454, align 1
  %456 = add i64 %446, %374
  %457 = add i64 %456, %448
  %458 = add i64 %455, %373
  %459 = add i64 %458, %457
  %460 = lshr i64 %459, 21
  %461 = shl i64 %459, 43
  %462 = or i64 %461, %460
  %463 = add i64 %452, %441
  %464 = add i64 %463, %457
  %465 = lshr i64 %464, 44
  %466 = shl i64 %464, 20
  %467 = or i64 %466, %465
  %468 = add i64 %464, %455
  %469 = add i64 %467, %457
  %470 = add i64 %469, %462
  %471 = mul i64 %468, -4348849565147123417
  %472 = icmp ugt i64 %313, 64
  br i1 %472, label %473, label %376

473:                                              ; preds = %431
  %474 = add i64 %437, %444
  %475 = lshr i64 %474, 42
  %476 = shl i64 %474, 22
  %477 = or i64 %476, %475
  %478 = mul i64 %477, -4348849565147123417
  %479 = add i64 %478, %470
  %480 = getelementptr inbounds i8, i8* %334, i64 -96
  %481 = getelementptr inbounds i8, i8* %480, i64 16
  %482 = bitcast i8* %481 to i64*
  %483 = load i64, i64* %482, align 1
  %484 = add i64 %483, %442
  %485 = mul i64 %444, -4348849565147123417
  %486 = add i64 %484, %485
  %487 = bitcast i8* %480 to i64*
  %488 = load i64, i64* %487, align 1
  %489 = add i64 %449, %448
  %490 = add i64 %489, %488
  %491 = add i64 %471, %449
  %492 = getelementptr inbounds i8, i8* %480, i64 8
  %493 = bitcast i8* %492 to i64*
  %494 = load i64, i64* %493, align 1
  %495 = getelementptr inbounds i8, i8* %480, i64 24
  %496 = bitcast i8* %495 to i64*
  %497 = load i64, i64* %496, align 1
  %498 = add i64 %488, %471
  %499 = add i64 %498, %490
  %500 = add i64 %497, %470
  %501 = add i64 %500, %499
  %502 = lshr i64 %501, 21
  %503 = shl i64 %501, 43
  %504 = or i64 %503, %502
  %505 = add i64 %494, %483
  %506 = add i64 %505, %499
  %507 = lshr i64 %506, 44
  %508 = shl i64 %506, 20
  %509 = or i64 %508, %507
  %510 = add i64 %506, %497
  %511 = add i64 %509, %499
  %512 = add i64 %511, %504
  %513 = mul i64 %510, -4348849565147123417
  %514 = icmp ugt i64 %313, 96
  br i1 %514, label %515, label %376

515:                                              ; preds = %473
  %516 = add i64 %479, %486
  %517 = lshr i64 %516, 42
  %518 = shl i64 %516, 22
  %519 = or i64 %518, %517
  %520 = mul i64 %519, -4348849565147123417
  %521 = add i64 %520, %512
  %522 = getelementptr inbounds i8, i8* %334, i64 -128
  %523 = getelementptr inbounds i8, i8* %522, i64 16
  %524 = bitcast i8* %523 to i64*
  %525 = load i64, i64* %524, align 1
  %526 = add i64 %525, %484
  %527 = mul i64 %486, -4348849565147123417
  %528 = add i64 %526, %527
  %529 = bitcast i8* %522 to i64*
  %530 = load i64, i64* %529, align 1
  %531 = add i64 %491, %490
  %532 = add i64 %531, %530
  %533 = add i64 %513, %491
  %534 = getelementptr inbounds i8, i8* %522, i64 8
  %535 = bitcast i8* %534 to i64*
  %536 = load i64, i64* %535, align 1
  %537 = getelementptr inbounds i8, i8* %522, i64 24
  %538 = bitcast i8* %537 to i64*
  %539 = load i64, i64* %538, align 1
  %540 = add i64 %530, %513
  %541 = add i64 %540, %532
  %542 = add i64 %539, %512
  %543 = add i64 %542, %541
  %544 = lshr i64 %543, 21
  %545 = shl i64 %543, 43
  %546 = or i64 %545, %544
  %547 = add i64 %536, %525
  %548 = add i64 %547, %541
  %549 = lshr i64 %548, 44
  %550 = shl i64 %548, 20
  %551 = or i64 %550, %549
  %552 = add i64 %548, %539
  %553 = add i64 %551, %541
  %554 = add i64 %553, %546
  %555 = mul i64 %552, -4348849565147123417
  br label %376
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4base8internal13cityhash_v11111CityHash128EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 15
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = add i64 %1, -16
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %11, -4348849565147123417
  %13 = tail call { i64, i64 } @_ZN4base8internal13cityhash_v11119CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %5, i64 %6, i64 %8, i64 %12)
  br label %16

14:                                               ; preds = %2
  %15 = tail call { i64, i64 } @_ZN4base8internal13cityhash_v11119CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 -4348849565147123417, i64 -5435081209227447693)
  br label %16

16:                                               ; preds = %14, %4
  %17 = phi { i64, i64 } [ %15, %14 ], [ %13, %4 ]
  ret { i64, i64 } %17
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
