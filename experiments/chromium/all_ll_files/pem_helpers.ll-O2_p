; ModuleID = '../../third_party/openscreen/src/util/crypto/pem_helpers.cc'
source_filename = "../../third_party/openscreen/src/util/crypto/pem_helpers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.evp_pkey_st = type { i32, i32, %union.anon.8, %struct.evp_pkey_asn1_method_st* }
%union.anon.8 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.cbs_st = type { i8*, i64 }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJPcRlEEEvDpOT_ = comdat any

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"CERTIFICATE\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"RSA PRIVATE KEY\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen27ReadCertificatesFromPemFileEN4absl11string_viewE(%"class.std::__1::vector"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = tail call %struct._IO_FILE* @fopen64(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %11 = icmp eq %struct._IO_FILE* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #11
  br label %99

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #11
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #11
  %18 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %19 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %20 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %21 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  store i64 -6148914691236517206, i64* %8, align 8
  %22 = call i32 @PEM_read(%struct._IO_FILE* nonnull %10, i8** nonnull %5, i8** nonnull %6, i8** nonnull %7, i64* nonnull %8) #11
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %26, label %24

24:                                               ; preds = %14
  %25 = bitcast %"class.std::__1::basic_string"** %16 to i64*
  br label %86

26:                                               ; preds = %14
  %27 = bitcast i8** %9 to i8*
  %28 = bitcast i8** %7 to i64*
  %29 = bitcast i8** %9 to i64*
  %30 = bitcast %"class.std::__1::basic_string"** %16 to i64*
  br label %31

31:                                               ; preds = %26, %80
  %32 = load i8*, i8** %5, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %80, label %34

34:                                               ; preds = %31
  %35 = call i64 @strlen(i8* nonnull %32) #11
  %36 = icmp sgt i64 %35, -1
  br i1 %36, label %38, label %37, !prof !2

37:                                               ; preds = %34
  call void @llvm.trap() #11
  unreachable

38:                                               ; preds = %34
  %39 = icmp ult i64 %35, 11
  br i1 %39, label %80, label %40

40:                                               ; preds = %38
  %41 = call i32 @bcmp(i8* nonnull %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i64 11) #11
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %80

43:                                               ; preds = %40
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11
  %44 = load i64, i64* %28, align 8
  store i64 %44, i64* %29, align 8
  %45 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %16, align 8
  %46 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %17, align 8
  %47 = icmp ult %"class.std::__1::basic_string"* %45, %46
  %48 = inttoptr i64 %44 to i8*
  br i1 %47, label %49, label %77

49:                                               ; preds = %43
  %50 = load i64, i64* %8, align 8
  %51 = icmp ugt i64 %50, -17
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = bitcast %"class.std::__1::basic_string"* %45 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %53) #12
  unreachable

54:                                               ; preds = %49
  %55 = icmp ult i64 %50, 23
  br i1 %55, label %64, label %56

56:                                               ; preds = %54
  %57 = add nuw i64 %50, 16
  %58 = and i64 %57, -16
  %59 = call i8* @_Znwm(i64 %58) #13
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %59, i8** %60, align 8
  %61 = or i64 %58, -9223372036854775808
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %50, i64* %63, align 8
  br label %70

64:                                               ; preds = %54
  %65 = trunc i64 %50 to i8
  %66 = bitcast %"class.std::__1::basic_string"* %45 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %66, i64 0, i32 1, i32 0
  store i8 %65, i8* %67, align 1
  %68 = bitcast %"class.std::__1::basic_string"* %45 to i8*
  %69 = icmp eq i64 %50, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %64, %56
  %71 = phi i8* [ %59, %56 ], [ %68, %64 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %71, i8* align 1 %48, i64 %50, i1 false) #11
  br label %72

72:                                               ; preds = %70, %64
  %73 = phi i8* [ %68, %64 ], [ %71, %70 ]
  %74 = getelementptr inbounds i8, i8* %73, i64 %50
  store i8 0, i8* %74, align 1
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %45, i64 1
  %76 = ptrtoint %"class.std::__1::basic_string"* %75 to i64
  store i64 %76, i64* %30, align 8
  br label %78

77:                                               ; preds = %43
  call void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJPcRlEEEvDpOT_(%"class.std::__1::vector"* nonnull %4, i8** nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %8) #11
  br label %78

78:                                               ; preds = %72, %77
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11
  %79 = load i8*, i8** %5, align 8
  br label %80

80:                                               ; preds = %31, %38, %78, %40
  %81 = phi i8* [ %32, %38 ], [ %79, %78 ], [ %32, %40 ], [ null, %31 ]
  call void @OPENSSL_free(i8* %81) #11
  %82 = load i8*, i8** %6, align 8
  call void @OPENSSL_free(i8* %82) #11
  %83 = load i8*, i8** %7, align 8
  call void @OPENSSL_free(i8* %83) #11
  %84 = call i32 @PEM_read(%struct._IO_FILE* nonnull %10, i8** nonnull %5, i8** nonnull %6, i8** nonnull %7, i64* nonnull %8) #11
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %31, label %86

86:                                               ; preds = %80, %24
  %87 = phi i64* [ %25, %24 ], [ %30, %80 ]
  %88 = call i32 @fclose(%struct._IO_FILE* nonnull %10)
  %89 = bitcast %"class.std::__1::vector"* %4 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector"* %0 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load i64, i64* %87, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %94 = bitcast %"class.std::__1::basic_string"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::basic_string"** %17 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast %"class.std::__1::basic_string"** %97 to i64*
  store i64 %96, i64* %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #11
  br label %99

99:                                               ; preds = %86, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fopen64(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #2

declare i32 @PEM_read(%struct._IO_FILE*, i8**, i8**, i8**, i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.evp_pkey_st* @_ZN10openscreen18ReadKeyFromPemFileEN4absl11string_viewE(i8*, i64) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.cbs_st, align 8
  %8 = tail call %struct._IO_FILE* @fopen64(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %9 = icmp eq %struct._IO_FILE* %8, null
  br i1 %9, label %59, label %10

10:                                               ; preds = %2
  %11 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %12 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %13 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %14 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  store i64 -6148914691236517206, i64* %6, align 8
  %15 = call i32 @PEM_read(%struct._IO_FILE* nonnull %8, i8** nonnull %3, i8** nonnull %4, i8** nonnull %5, i64* nonnull %6) #11
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %56

17:                                               ; preds = %10
  %18 = bitcast %struct.cbs_st* %7 to i8*
  %19 = bitcast %struct.cbs_st* %7 to i8*
  br label %20

20:                                               ; preds = %17, %49
  %21 = phi i64 [ 0, %17 ], [ %51, %49 ]
  %22 = load i8*, i8** %3, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %49, label %24

24:                                               ; preds = %20
  %25 = call i64 @strlen(i8* nonnull %22) #11
  %26 = icmp sgt i64 %25, -1
  br i1 %26, label %28, label %27, !prof !2

27:                                               ; preds = %24
  call void @llvm.trap() #11
  unreachable

28:                                               ; preds = %24
  %29 = icmp ult i64 %25, 15
  br i1 %29, label %49, label %30

30:                                               ; preds = %28
  %31 = call i32 @bcmp(i8* nonnull %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 15) #11
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %30
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 16, i1 false)
  %34 = load i8*, i8** %5, align 8
  %35 = load i64, i64* %6, align 8
  call void @CBS_init(%struct.cbs_st* nonnull %7, i8* %34, i64 %35) #11
  %36 = call %struct.rsa_st* @RSA_parse_private_key(%struct.cbs_st* nonnull %7) #11
  %37 = icmp eq %struct.rsa_st* %36, null
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = call %struct.evp_pkey_st* @EVP_PKEY_new() #11
  %40 = ptrtoint %struct.evp_pkey_st* %39 to i64
  %41 = icmp eq i64 %21, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = inttoptr i64 %21 to %struct.evp_pkey_st*
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %43) #11
  br label %44

44:                                               ; preds = %38, %42
  %45 = call i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st* %39, %struct.rsa_st* nonnull %36) #11
  br label %46

46:                                               ; preds = %33, %44
  %47 = phi i64 [ %21, %33 ], [ %40, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #11
  %48 = load i8*, i8** %3, align 8
  br label %49

49:                                               ; preds = %20, %28, %46, %30
  %50 = phi i8* [ %48, %46 ], [ %22, %30 ], [ %22, %28 ], [ null, %20 ]
  %51 = phi i64 [ %47, %46 ], [ %21, %30 ], [ %21, %28 ], [ %21, %20 ]
  call void @OPENSSL_free(i8* %50) #11
  %52 = load i8*, i8** %4, align 8
  call void @OPENSSL_free(i8* %52) #11
  %53 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %53) #11
  %54 = call i32 @PEM_read(%struct._IO_FILE* nonnull %8, i8** nonnull %3, i8** nonnull %4, i8** nonnull %5, i64* nonnull %6) #11
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %20, label %56

56:                                               ; preds = %49, %10
  %57 = phi i64 [ 0, %10 ], [ %51, %49 ]
  %58 = call i32 @fclose(%struct._IO_FILE* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  br label %59

59:                                               ; preds = %2, %56
  %60 = phi i64 [ %57, %56 ], [ 0, %2 ]
  %61 = inttoptr i64 %60 to %struct.evp_pkey_st*
  ret %struct.evp_pkey_st* %61
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #3

declare %struct.rsa_st* @RSA_parse_private_key(%struct.cbs_st*) local_unnamed_addr #3

declare %struct.evp_pkey_st* @EVP_PKEY_new() local_unnamed_addr #3

declare i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st*, %struct.rsa_st*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJPcRlEEEvDpOT_(%"class.std::__1::vector"*, i8** dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 768614336404564650
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #12
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.std::__1::basic_string"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = sdiv exact i64 %19, 24
  %21 = icmp ult i64 %20, 384307168202282325
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = shl nsw i64 %20, 1
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %15, %22
  %28 = phi i64 [ %25, %22 ], [ 768614336404564650, %15 ]
  %29 = mul i64 %28, 24
  %30 = tail call i8* @_Znwm(i64 %29) #13
  %31 = bitcast i8* %30 to %"class.std::__1::basic_string"*
  br label %32

32:                                               ; preds = %22, %27
  %33 = phi i64 [ %28, %27 ], [ 0, %22 ]
  %34 = phi %"class.std::__1::basic_string"* [ %31, %27 ], [ null, %22 ]
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 %10
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 %33
  %37 = ptrtoint %"class.std::__1::basic_string"* %36 to i64
  %38 = load i8*, i8** %1, align 8
  %39 = load i64, i64* %2, align 8
  %40 = icmp ugt i64 %39, -17
  br i1 %40, label %41, label %43

41:                                               ; preds = %32
  %42 = bitcast %"class.std::__1::basic_string"* %35 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %42) #12
  unreachable

43:                                               ; preds = %32
  %44 = icmp ult i64 %39, 23
  br i1 %44, label %53, label %45

45:                                               ; preds = %43
  %46 = add nuw i64 %39, 16
  %47 = and i64 %46, -16
  %48 = tail call i8* @_Znwm(i64 %47) #13
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %48, i8** %49, align 8
  %50 = or i64 %47, -9223372036854775808
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 %10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 %10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %39, i64* %52, align 8
  br label %59

53:                                               ; preds = %43
  %54 = trunc i64 %39 to i8
  %55 = bitcast %"class.std::__1::basic_string"* %35 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  store i8 %54, i8* %56, align 1
  %57 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  %58 = icmp eq i64 %39, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %53, %45
  %60 = phi i8* [ %48, %45 ], [ %57, %53 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %38, i64 %39, i1 false) #11
  br label %61

61:                                               ; preds = %53, %59
  %62 = phi i8* [ %57, %53 ], [ %60, %59 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 %39
  store i8 0, i8* %63, align 1
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 1
  %65 = ptrtoint %"class.std::__1::basic_string"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %66, align 8
  %68 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %69 = icmp eq %"class.std::__1::basic_string"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %61
  %71 = ptrtoint %"class.std::__1::basic_string"* %67 to i64
  br label %83

72:                                               ; preds = %61, %72
  %73 = phi %"class.std::__1::basic_string"* [ %75, %72 ], [ %35, %61 ]
  %74 = phi %"class.std::__1::basic_string"* [ %76, %72 ], [ %68, %61 ]
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %73, i64 -1
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 -1
  %77 = bitcast %"class.std::__1::basic_string"* %75 to i8*
  %78 = bitcast %"class.std::__1::basic_string"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 24, i1 false) #11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #11
  %79 = icmp eq %"class.std::__1::basic_string"* %76, %67
  br i1 %79, label %80, label %72

80:                                               ; preds = %72
  %81 = load i64, i64* %7, align 8
  %82 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  br label %83

83:                                               ; preds = %70, %80
  %84 = phi %"class.std::__1::basic_string"* [ %67, %70 ], [ %82, %80 ]
  %85 = phi %"class.std::__1::basic_string"* [ %35, %70 ], [ %75, %80 ]
  %86 = phi i64 [ %71, %70 ], [ %81, %80 ]
  %87 = ptrtoint %"class.std::__1::basic_string"* %85 to i64
  store i64 %87, i64* %7, align 8
  store i64 %65, i64* %5, align 8
  store i64 %37, i64* %17, align 8
  %88 = inttoptr i64 %86 to %"class.std::__1::basic_string"*
  %89 = icmp eq %"class.std::__1::basic_string"* %84, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %83, %100
  %91 = phi %"class.std::__1::basic_string"* [ %92, %100 ], [ %84, %83 ]
  %92 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %91, i64 -1
  %93 = bitcast %"class.std::__1::basic_string"* %92 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %94 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %93, i64 0, i32 1, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = icmp slt i8 %95, 0
  br i1 %96, label %97, label %100

97:                                               ; preds = %90
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  tail call void @_ZdlPv(i8* %99) #13
  br label %100

100:                                              ; preds = %97, %90
  %101 = icmp eq %"class.std::__1::basic_string"* %92, %88
  br i1 %101, label %102, label %90

102:                                              ; preds = %100, %83
  %103 = icmp eq i64 %86, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = inttoptr i64 %86 to i8*
  tail call void @_ZdlPv(i8* %105) #13
  br label %106

106:                                              ; preds = %102, %104
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
