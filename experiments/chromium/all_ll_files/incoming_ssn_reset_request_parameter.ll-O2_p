; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/parameter/incoming_ssn_reset_request_parameter.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/parameter/incoming_ssn_reset_request_parameter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::IncomingSSNResetRequestParameter" }
%"class.dcsctp::IncomingSSNResetRequestParameter" = type { %"class.dcsctp::Parameter", %"class.dcsctp::StrongAlias", %"class.std::__1::vector" }
%"class.dcsctp::Parameter" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.dcsctp::StrongAlias.0"*, %"class.dcsctp::StrongAlias.0"*, %"class.std::__1::__compressed_pair" }
%"class.dcsctp::StrongAlias.0" = type { i16 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dcsctp::StrongAlias.0"* }
%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, %union.anon.6 }
%union.anon.6 = type { %"class.dcsctp::BoundedByteReader" }
%"class.dcsctp::BoundedByteReader" = type { %"class.rtc::ArrayView" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i8*, i8*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.22 }
%union.anon.22 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::StringBuilder" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN6dcsctp8TLVTraitINS_38IncomingSSNResetRequestParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE = comdat any

$_ZN6dcsctp32IncomingSSNResetRequestParameterD2Ev = comdat any

$_ZN6dcsctp32IncomingSSNResetRequestParameterD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN6dcsctp32IncomingSSNResetRequestParameter5kTypeE = hidden local_unnamed_addr constant i32 14, align 4
@.str = private unnamed_addr constant [41 x i8] c"Incoming SSN Reset Request, req_seq_nbr=\00", align 1
@_ZTVN6dcsctp32IncomingSSNResetRequestParameterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::IncomingSSNResetRequestParameter"*)* @_ZN6dcsctp32IncomingSSNResetRequestParameterD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::IncomingSSNResetRequestParameter"*)* @_ZN6dcsctp32IncomingSSNResetRequestParameterD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::IncomingSSNResetRequestParameter"*, %"class.std::__1::vector.10"*)* @_ZNK6dcsctp32IncomingSSNResetRequestParameter11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::IncomingSSNResetRequestParameter"*)* @_ZNK6dcsctp32IncomingSSNResetRequestParameter8ToStringEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp32IncomingSSNResetRequestParameter5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::optional.2", align 8
  %5 = alloca %"class.std::__1::vector", align 16
  %6 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false)
  %7 = icmp eq i64 %2, 0
  %8 = select i1 %7, i8* null, i8* %1
  call void @_ZN6dcsctp8TLVTraitINS_38IncomingSSNResetRequestParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.2"* nonnull sret %4, i8* %8, i64 %2)
  %9 = load i8, i8* %6, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 40, i1 false) #9
  br label %143

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 4
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw i32 %20, 24
  %22 = getelementptr inbounds i8, i8* %17, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl nuw nsw i32 %24, 16
  %26 = or i32 %25, %21
  %27 = getelementptr inbounds i8, i8* %17, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = or i32 %26, %30
  %32 = getelementptr inbounds i8, i8* %17, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %31, %34
  %36 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, -8
  %39 = lshr i64 %38, 1
  %40 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 0, i64 24, i1 false) #9
  %43 = bitcast %"class.dcsctp::StrongAlias.0"** %42 to i64*
  %44 = bitcast %"class.std::__1::vector"* %5 to i64*
  %45 = icmp eq i64 %39, 0
  br i1 %45, label %61, label %46

46:                                               ; preds = %15
  %47 = and i64 %38, -2
  %48 = call i8* @_Znwm(i64 %47) #10
  %49 = bitcast i8* %48 to %"class.dcsctp::StrongAlias.0"*
  %50 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %49, i64 %39
  %51 = ptrtoint %"class.dcsctp::StrongAlias.0"* %50 to i64
  %52 = insertelement <2 x i8*> undef, i8* %48, i32 0
  %53 = shufflevector <2 x i8*> %52, <2 x i8*> undef, <2 x i32> zeroinitializer
  %54 = ptrtoint <2 x i8*> %53 to <2 x i64>
  %55 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %55, align 16
  store i64 %51, i64* %43, align 16
  %56 = bitcast %"class.dcsctp::StrongAlias.0"** %41 to i64*
  br label %72

57:                                               ; preds = %137
  %58 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 16
  %60 = load i64, i64* %43, align 16
  br label %61

61:                                               ; preds = %57, %15
  %62 = phi i64 [ %60, %57 ], [ 0, %15 ]
  %63 = phi <2 x i64> [ %59, %57 ], [ zeroinitializer, %15 ]
  %64 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp32IncomingSSNResetRequestParameterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i32 %35, i32* %66, align 8
  %67 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %68 = bitcast %"class.std::__1::vector"* %67 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %68, align 8
  %69 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %70 = bitcast %"class.dcsctp::StrongAlias.0"** %69 to i64*
  store i64 %62, i64* %70, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #9
  br label %143

71:                                               ; preds = %140
  call void @llvm.trap() #9
  unreachable

72:                                               ; preds = %46, %140
  %73 = phi i64 [ 0, %46 ], [ %138, %140 ]
  %74 = shl nuw i64 %73, 1
  %75 = add i64 %74, 8
  %76 = load i64, i64* %36, align 8
  %77 = icmp ugt i64 %76, %75
  %78 = load i8*, i8** %16, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %75
  %80 = select i1 %77, i8* %79, i8* null
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  %83 = shl nuw i16 %82, 8
  %84 = getelementptr inbounds i8, i8* %80, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = or i16 %83, %86
  %88 = load %"class.dcsctp::StrongAlias.0"*, %"class.dcsctp::StrongAlias.0"** %41, align 8
  %89 = load %"class.dcsctp::StrongAlias.0"*, %"class.dcsctp::StrongAlias.0"** %42, align 16
  %90 = icmp ult %"class.dcsctp::StrongAlias.0"* %88, %89
  %91 = ptrtoint %"class.dcsctp::StrongAlias.0"* %89 to i64
  br i1 %90, label %92, label %96

92:                                               ; preds = %72
  %93 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %88, i64 0, i32 0
  store i16 %87, i16* %93, align 2
  %94 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %88, i64 1
  %95 = ptrtoint %"class.dcsctp::StrongAlias.0"* %94 to i64
  store i64 %95, i64* %56, align 8
  br label %137

96:                                               ; preds = %72
  %97 = ptrtoint %"class.dcsctp::StrongAlias.0"* %88 to i64
  %98 = load i64, i64* %44, align 16
  %99 = sub i64 %97, %98
  %100 = ashr exact i64 %99, 1
  %101 = add nsw i64 %100, 1
  %102 = icmp slt i64 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %96
  %104 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %104) #11
  unreachable

105:                                              ; preds = %96
  %106 = sub i64 %91, %98
  %107 = ashr exact i64 %106, 1
  %108 = icmp ult i64 %107, 4611686018427387903
  %109 = icmp ult i64 %106, %101
  %110 = select i1 %109, i64 %101, i64 %106
  %111 = select i1 %108, i64 %110, i64 9223372036854775807
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %120, label %113

113:                                              ; preds = %105
  %114 = icmp slt i64 %111, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %113
  call void @abort() #11
  unreachable

116:                                              ; preds = %113
  %117 = shl i64 %111, 1
  %118 = call i8* @_Znwm(i64 %117) #10
  %119 = bitcast i8* %118 to %"class.dcsctp::StrongAlias.0"*
  br label %120

120:                                              ; preds = %116, %105
  %121 = phi i8* [ %118, %116 ], [ null, %105 ]
  %122 = phi %"class.dcsctp::StrongAlias.0"* [ %119, %116 ], [ null, %105 ]
  %123 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %122, i64 %100
  %124 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %122, i64 %111
  %125 = ptrtoint %"class.dcsctp::StrongAlias.0"* %124 to i64
  %126 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %123, i64 0, i32 0
  store i16 %87, i16* %126, align 2
  %127 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %123, i64 1
  %128 = ptrtoint %"class.dcsctp::StrongAlias.0"* %127 to i64
  %129 = ptrtoint %"class.dcsctp::StrongAlias.0"* %122 to i64
  %130 = icmp sgt i64 %99, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %120
  %132 = inttoptr i64 %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %121, i8* align 2 %132, i64 %99, i1 false) #9
  br label %133

133:                                              ; preds = %131, %120
  store i64 %129, i64* %44, align 16
  store i64 %128, i64* %56, align 8
  store i64 %125, i64* %43, align 16
  %134 = icmp eq i64 %98, 0
  br i1 %134, label %137, label %135

135:                                              ; preds = %133
  %136 = inttoptr i64 %98 to i8*
  call void @_ZdlPv(i8* %136) #10
  br label %137

137:                                              ; preds = %92, %133, %135
  %138 = add nuw nsw i64 %73, 1
  %139 = icmp eq i64 %138, %39
  br i1 %139, label %57, label %140

140:                                              ; preds = %137
  %141 = load i8, i8* %6, align 8, !range !2
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %71, label %72, !prof !3

143:                                              ; preds = %61, %11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp8TLVTraitINS_38IncomingSSNResetRequestParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.2"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ult i64 %2, 8
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 8) #9
  %6 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  br label %48

7:                                                ; preds = %3
  %8 = load i8, i8* %1, align 1
  %9 = zext i8 %8 to i16
  %10 = shl nuw i16 %9, 8
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = or i16 %10, %13
  %15 = icmp eq i16 %14, 14
  br i1 %15, label %19, label %16

16:                                               ; preds = %7
  %17 = zext i16 %14 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %17, i32 14) #9
  %18 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %18, align 8
  br label %48

19:                                               ; preds = %7
  %20 = getelementptr inbounds i8, i8* %1, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = shl nuw i16 %22, 8
  %24 = getelementptr inbounds i8, i8* %1, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = or i16 %23, %26
  %28 = zext i16 %27 to i64
  %29 = icmp ugt i64 %28, %2
  %30 = icmp ult i16 %27, 8
  %31 = or i1 %30, %29
  br i1 %31, label %32, label %34

32:                                               ; preds = %19
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %28, i64 %2) #9
  %33 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  br label %48

34:                                               ; preds = %19
  %35 = sub i64 %2, %28
  %36 = icmp ugt i64 %35, 3
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %35) #9
  %38 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %38, align 8
  br label %48

39:                                               ; preds = %34
  %40 = and i16 %26, 1
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %39
  tail call void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64 %28, i64 2) #9
  %43 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %43, align 8
  br label %48

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %45, align 8
  %46 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8* %1, i8** %46, align 8
  %47 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  store i64 %28, i64* %47, align 8
  br label %48

48:                                               ; preds = %16, %42, %37, %44, %32, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp32IncomingSSNResetRequestParameterD2Ev(%"class.dcsctp::IncomingSSNResetRequestParameter"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp32IncomingSSNResetRequestParameterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.dcsctp::StrongAlias.0"*, %"class.dcsctp::StrongAlias.0"** %3, align 8
  %5 = icmp eq %"class.dcsctp::StrongAlias.0"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.dcsctp::StrongAlias.0"* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast %"class.dcsctp::StrongAlias.0"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.dcsctp::StrongAlias.0"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp32IncomingSSNResetRequestParameter11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::IncomingSSNResetRequestParameter"* nocapture readonly, %"class.std::__1::vector.10"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = bitcast %"class.dcsctp::StrongAlias.0"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.10"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = add i64 %9, 8
  %17 = add i64 %15, %16
  %18 = icmp ult i64 %15, %17
  %19 = inttoptr i64 %14 to i8*
  br i1 %18, label %20, label %23

20:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.10"* %1, i64 %16) #9
  %21 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %1, i64 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  br label %27

23:                                               ; preds = %2
  %24 = icmp ugt i64 %15, %17
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds i8, i8* %19, i64 %17
  store i8* %26, i8** %10, align 8
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i8* [ %22, %20 ], [ %19, %23 ], [ %19, %25 ]
  %29 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %1, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds i8, i8* %28, i64 %15
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 14, i8* %31, align 1
  %32 = trunc i64 %16 to i16
  %33 = getelementptr inbounds i8, i8* %30, i64 2
  %34 = lshr i16 %32, 8
  %35 = trunc i16 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = trunc i64 %16 to i8
  %37 = getelementptr inbounds i8, i8* %30, i64 3
  store i8 %36, i8* %37, align 1
  %38 = load i8*, i8** %29, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %15
  %40 = icmp eq i64 %16, 0
  %41 = select i1 %40, i8* null, i8* %39
  %42 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 1, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = lshr i32 %43, 24
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %44, align 1
  %47 = lshr i32 %43, 16
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %41, i64 5
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %43, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %41, i64 6
  store i8 %51, i8* %52, align 1
  %53 = trunc i32 %43 to i8
  %54 = getelementptr inbounds i8, i8* %41, i64 7
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %5, align 8
  %56 = load i64, i64* %7, align 8
  %57 = icmp eq i64 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %59, %27
  ret void

59:                                               ; preds = %27, %59
  %60 = phi i64 [ %76, %59 ], [ %56, %27 ]
  %61 = phi i64 [ %74, %59 ], [ 0, %27 ]
  %62 = inttoptr i64 %60 to %"class.dcsctp::StrongAlias.0"*
  %63 = shl i64 %61, 1
  %64 = add i64 %63, 8
  %65 = icmp ugt i64 %16, %64
  %66 = getelementptr inbounds i8, i8* %41, i64 %64
  %67 = select i1 %65, i8* %66, i8* null
  %68 = getelementptr inbounds %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.0"* %62, i64 %61, i32 0
  %69 = load i16, i16* %68, align 2
  %70 = lshr i16 %69, 8
  %71 = trunc i16 %70 to i8
  store i8 %71, i8* %67, align 1
  %72 = trunc i16 %69 to i8
  %73 = getelementptr inbounds i8, i8* %67, i64 1
  store i8 %72, i8* %73, align 1
  %74 = add nuw i64 %61, 1
  %75 = load i64, i64* %5, align 8
  %76 = load i64, i64* %7, align 8
  %77 = sub i64 %75, %76
  %78 = ashr exact i64 %77, 1
  %79 = icmp ult i64 %74, %78
  br i1 %79, label %59, label %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp32IncomingSSNResetRequestParameter8ToStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.dcsctp::IncomingSSNResetRequestParameter"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.rtc::StringBuilder", align 8
  %5 = bitcast %"class.rtc::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %4, i64 0, i32 0
  %7 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i64 40) #9
  %8 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %9) #9
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = zext i8 %13 to i64
  %20 = select i1 %14, i8* %16, i8* %10
  %21 = select i1 %14, i64 %18, i64 %19
  %22 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %20, i64 %21) #9
  %23 = load i8, i8* %12, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %25, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %5, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp32IncomingSSNResetRequestParameterD0Ev(%"class.dcsctp::IncomingSSNResetRequestParameter"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp32IncomingSSNResetRequestParameterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.dcsctp::StrongAlias.0"*, %"class.dcsctp::StrongAlias.0"** %3, align 8
  %5 = icmp eq %"class.dcsctp::StrongAlias.0"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.dcsctp::StrongAlias.0"* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::IncomingSSNResetRequestParameter", %"class.dcsctp::IncomingSSNResetRequestParameter"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast %"class.dcsctp::StrongAlias.0"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.dcsctp::StrongAlias.0"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.dcsctp::IncomingSSNResetRequestParameter"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

declare void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64, i64) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.10"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.10"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #10
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
