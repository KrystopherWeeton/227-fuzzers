; ModuleID = '../../third_party/webrtc/modules/video_coding/timestamp_map.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/timestamp_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::VCMTimestampMap" = type { %"class.std::__1::unique_ptr", i64, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* }
%"struct.webrtc::VCMTimestampMap::TimestampDataTuple" = type { i32, %"struct.webrtc::VCMFrameInformation" }
%"struct.webrtc::VCMFrameInformation" = type { i64, %"class.absl::optional", i8*, i32, i8, %"struct.webrtc::EncodedImage::Timing", i64, %"class.webrtc::RtpPacketInfos" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::Timestamp" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"struct.webrtc::EncodedImage::Timing" = type { i8, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr" }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.21" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.1", i32, %"class.absl::optional.6", %"class.absl::optional.11", %"class.absl::optional.16", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.absl::optional.6" = type { %"class.absl::optional_internal::optional_data.7" }
%"class.absl::optional_internal::optional_data.7" = type { %"class.absl::optional_internal::optional_data_base.8" }
%"class.absl::optional_internal::optional_data_base.8" = type { %"class.absl::optional_internal::optional_data_dtor_base.9" }
%"class.absl::optional_internal::optional_data_dtor_base.9" = type { i8, %union.anon.10 }
%union.anon.10 = type { i8 }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.16" }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { i64 }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.webrtc::RtpPacketInfo"* }
%"class.rtc::RefCountedBase" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>
%"class.absl::optional.27" = type { %"class.absl::optional_internal::optional_data.28" }
%"class.absl::optional_internal::optional_data.28" = type { %"class.absl::optional_internal::optional_data_base.29" }
%"class.absl::optional_internal::optional_data_base.29" = type { %"class.absl::optional_internal::optional_data_dtor_base.30" }
%"class.absl::optional_internal::optional_data_dtor_base.30" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"struct.webrtc::VCMFrameInformation" }

@_ZN6webrtc15VCMTimestampMapC1Em = hidden unnamed_addr alias void (%"class.webrtc::VCMTimestampMap"*, i64), void (%"class.webrtc::VCMTimestampMap"*, i64)* @_ZN6webrtc15VCMTimestampMapC2Em
@_ZN6webrtc15VCMTimestampMapD1Ev = hidden unnamed_addr alias void (%"class.webrtc::VCMTimestampMap"*), void (%"class.webrtc::VCMTimestampMap"*)* @_ZN6webrtc15VCMTimestampMapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15VCMTimestampMapC2Em(%"class.webrtc::VCMTimestampMap"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 136)
  %4 = extractvalue { i64, i1 } %3, 1
  %5 = extractvalue { i64, i1 } %3, 0
  %6 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %5, i64 8)
  %7 = extractvalue { i64, i1 } %6, 1
  %8 = or i1 %4, %7
  %9 = extractvalue { i64, i1 } %6, 0
  %10 = select i1 %8, i64 -1, i64 %9
  %11 = tail call i8* @_Znam(i64 %10) #7
  %12 = bitcast i8* %11 to i64*
  store i64 %1, i64* %12, align 16
  %13 = getelementptr inbounds i8, i8* %11, i64 8
  %14 = bitcast i8* %13 to %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %27, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %14, i64 %1
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* [ %14, %16 ], [ %25, %18 ]
  %20 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %19, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 8
  %21 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %19, i64 0, i32 1, i32 5, i32 0
  store i8 -1, i8* %21, align 8
  %22 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %19, i64 0, i32 1, i32 5, i32 1
  %23 = bitcast i64* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 64, i1 false) #8
  %24 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %19, i64 0, i32 1, i32 7, i32 0, i32 0
  store %"class.webrtc::RtpPacketInfos::Data"* null, %"class.webrtc::RtpPacketInfos::Data"** %24, align 8
  %25 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %19, i64 1
  %26 = icmp eq %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %25, %17
  br i1 %26, label %27, label %18

27:                                               ; preds = %18, %2
  %28 = ptrtoint i8* %13 to i64
  %29 = bitcast %"class.webrtc::VCMTimestampMap"* %0 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 1
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 2
  %32 = bitcast i64* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15VCMTimestampMapD2Ev(%"class.webrtc::VCMTimestampMap"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %2, align 8
  store %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* null, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %2, align 8
  %4 = icmp eq %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %3, null
  br i1 %4, label %32, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %3, i64 -1, i32 1, i32 7
  %7 = bitcast %"class.webrtc::RtpPacketInfos"* %6 to i8*
  %8 = bitcast %"class.webrtc::RtpPacketInfos"* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %31, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %3, i64 %9
  br label %13

13:                                               ; preds = %29, %11
  %14 = phi %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* [ %15, %29 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %14, i64 -1
  %16 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %14, i64 -1, i32 1, i32 7, i32 0, i32 0
  %17 = load %"class.webrtc::RtpPacketInfos::Data"*, %"class.webrtc::RtpPacketInfos::Data"** %16, align 8
  %18 = icmp eq %"class.webrtc::RtpPacketInfos::Data"* %17, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.webrtc::RtpPacketInfos::Data", %"class.webrtc::RtpPacketInfos::Data"* %17, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw sub i32* %20, i32 1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %17 to %"class.rtc::RefCountedBase"*
  %25 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %17 to void (%"class.rtc::RefCountedBase"*)***
  %26 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %26, i64 1
  %28 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %27, align 8
  tail call void %28(%"class.rtc::RefCountedBase"* nonnull %24) #8
  br label %29

29:                                               ; preds = %23, %19, %13
  %30 = icmp eq %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %15, %3
  br i1 %30, label %31, label %13

31:                                               ; preds = %29, %5
  tail call void @_ZdaPv(i8* %7) #7
  br label %32

32:                                               ; preds = %1, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15VCMTimestampMap3AddEjRKNS_19VCMFrameInformationE(%"class.webrtc::VCMTimestampMap"* nocapture, i32, %"struct.webrtc::VCMFrameInformation"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %6, align 8
  %8 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %7, i64 %5, i32 0
  store i32 %1, i32* %8, align 8
  %9 = load i64, i64* %4, align 8
  %10 = load %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %6, align 8
  %11 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %10, i64 %9, i32 1
  %12 = bitcast %"struct.webrtc::VCMFrameInformation"* %11 to i8*
  %13 = bitcast %"struct.webrtc::VCMFrameInformation"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 120, i1 false) #8
  %14 = getelementptr inbounds %"struct.webrtc::VCMFrameInformation", %"struct.webrtc::VCMFrameInformation"* %2, i64 0, i32 7, i32 0, i32 0
  %15 = load %"class.webrtc::RtpPacketInfos::Data"*, %"class.webrtc::RtpPacketInfos::Data"** %14, align 8
  %16 = icmp eq %"class.webrtc::RtpPacketInfos::Data"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.webrtc::RtpPacketInfos::Data", %"class.webrtc::RtpPacketInfos::Data"* %15, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 1 monotonic
  br label %20

20:                                               ; preds = %17, %3
  %21 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %10, i64 %9, i32 1, i32 7, i32 0, i32 0
  %22 = load %"class.webrtc::RtpPacketInfos::Data"*, %"class.webrtc::RtpPacketInfos::Data"** %21, align 8
  %23 = icmp eq %"class.webrtc::RtpPacketInfos::Data"* %22, null
  br i1 %23, label %34, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.webrtc::RtpPacketInfos::Data", %"class.webrtc::RtpPacketInfos::Data"* %22, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw sub i32* %25, i32 1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %22 to %"class.rtc::RefCountedBase"*
  %30 = bitcast %"class.webrtc::RtpPacketInfos::Data"* %22 to void (%"class.rtc::RefCountedBase"*)***
  %31 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %31, i64 1
  %33 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %32, align 8
  tail call void %33(%"class.rtc::RefCountedBase"* nonnull %29) #8
  br label %34

34:                                               ; preds = %20, %24, %28
  store %"class.webrtc::RtpPacketInfos::Data"* %15, %"class.webrtc::RtpPacketInfos::Data"** %21, align 8
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %35, 1
  %37 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = urem i64 %36, %38
  store i64 %39, i64* %4, align 8
  %40 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 3
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %39, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = add nuw i64 %39, 1
  %45 = urem i64 %44, %38
  store i64 %45, i64* %40, align 8
  br label %46

46:                                               ; preds = %43, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15VCMTimestampMap3PopEj(%"class.absl::optional.27"* noalias nocapture sret, %"class.webrtc::VCMTimestampMap"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %1, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %1, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %51, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %1, i64 0, i32 1
  %12 = load %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %10, align 8
  br label %13

13:                                               ; preds = %9, %46
  %14 = phi i64 [ %7, %9 ], [ %49, %46 ]
  %15 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %12, i64 %14, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %35

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %12, i64 %14, i32 1
  store i32 0, i32* %15, align 8
  %20 = load i64, i64* %6, align 8
  %21 = add i64 %20, 1
  %22 = load i64, i64* %11, align 8
  %23 = urem i64 %21, %22
  store i64 %23, i64* %6, align 8
  %24 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %24, align 8
  %25 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = bitcast %"struct.webrtc::VCMFrameInformation"* %25 to i8*
  %27 = bitcast %"struct.webrtc::VCMFrameInformation"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 120, i1 false) #8
  %28 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 7, i32 0, i32 0
  %29 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %12, i64 %14, i32 1, i32 7, i32 0, i32 0
  %30 = load %"class.webrtc::RtpPacketInfos::Data"*, %"class.webrtc::RtpPacketInfos::Data"** %29, align 8
  store %"class.webrtc::RtpPacketInfos::Data"* %30, %"class.webrtc::RtpPacketInfos::Data"** %28, align 8
  %31 = icmp eq %"class.webrtc::RtpPacketInfos::Data"* %30, null
  br i1 %31, label %55, label %32

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.webrtc::RtpPacketInfos::Data", %"class.webrtc::RtpPacketInfos::Data"* %30, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 1 monotonic
  br label %55

35:                                               ; preds = %13
  %36 = sub i32 %16, %2
  %37 = icmp eq i32 %36, -2147483648
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = icmp ugt i32 %16, %2
  br i1 %39, label %42, label %46

40:                                               ; preds = %35
  %41 = icmp sgt i32 %36, -1
  br i1 %41, label %42, label %46

42:                                               ; preds = %38, %40
  %43 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %43, align 8
  %44 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %45 = bitcast %union.anon.31* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 128, i1 false) #8
  br label %55

46:                                               ; preds = %38, %40
  %47 = add i64 %14, 1
  %48 = load i64, i64* %11, align 8
  %49 = urem i64 %47, %48
  store i64 %49, i64* %6, align 8
  %50 = icmp eq i64 %5, %49
  br i1 %50, label %51, label %13

51:                                               ; preds = %46, %3
  %52 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %52, align 8
  %53 = getelementptr inbounds %"class.absl::optional.27", %"class.absl::optional.27"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %54 = bitcast %union.anon.31* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 128, i1 false) #8
  br label %55

55:                                               ; preds = %32, %18, %51, %42
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc15VCMTimestampMap7IsEmptyEv(%"class.webrtc::VCMTimestampMap"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %3, %5
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc15VCMTimestampMap4SizeEv(%"class.webrtc::VCMTimestampMap"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %3, %5
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %3
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i64 [ %10, %7 ], [ %3, %1 ]
  %13 = sub i64 %12, %5
  ret i64 %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc15VCMTimestampMap5ClearEv(%"class.webrtc::VCMTimestampMap"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %3, %5
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.webrtc::VCMTimestampMap", %"class.webrtc::VCMTimestampMap"* %0, i64 0, i32 1
  br label %10

10:                                               ; preds = %7, %10
  %11 = phi i64 [ %5, %7 ], [ %17, %10 ]
  %12 = load %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"*, %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"** %8, align 8
  %13 = getelementptr inbounds %"struct.webrtc::VCMTimestampMap::TimestampDataTuple", %"struct.webrtc::VCMTimestampMap::TimestampDataTuple"* %12, i64 %11, i32 0
  store i32 0, i32* %13, align 8
  %14 = load i64, i64* %4, align 8
  %15 = add i64 %14, 1
  %16 = load i64, i64* %9, align 8
  %17 = urem i64 %15, %16
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %2, align 8
  %19 = icmp eq i64 %18, %17
  br i1 %19, label %20, label %10

20:                                               ; preds = %10, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
