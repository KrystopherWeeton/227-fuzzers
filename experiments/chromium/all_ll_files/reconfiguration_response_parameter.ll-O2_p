; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/parameter/reconfiguration_response_parameter.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/parameter/reconfiguration_response_parameter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::ReconfigurationResponseParameter" }
%"class.dcsctp::ReconfigurationResponseParameter" = type { %"class.dcsctp::Parameter", %"class.dcsctp::StrongAlias", i32, %"class.absl::optional.0", %"class.absl::optional.0" }
%"class.dcsctp::Parameter" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"class.dcsctp::StrongAlias.5" }
%"class.dcsctp::StrongAlias.5" = type { i32 }
%"class.absl::optional.6" = type { %"class.absl::optional_internal::optional_data.7" }
%"class.absl::optional_internal::optional_data.7" = type { %"class.absl::optional_internal::optional_data_base.8" }
%"class.absl::optional_internal::optional_data_base.8" = type { %"class.absl::optional_internal::optional_data_dtor_base.9" }
%"class.absl::optional_internal::optional_data_dtor_base.9" = type { i8, %union.anon.10 }
%union.anon.10 = type { %"class.dcsctp::BoundedByteReader" }
%"class.dcsctp::BoundedByteReader" = type { %"class.rtc::ArrayView" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.20 }
%union.anon.20 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::StringBuilder" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN6dcsctp8TLVTraitINS_38ReconfigurationResponseParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE = comdat any

$_ZN6dcsctp9ParameterD2Ev = comdat any

$_ZN6dcsctp32ReconfigurationResponseParameterD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN6dcsctp32ReconfigurationResponseParameter5kTypeE = hidden local_unnamed_addr constant i32 16, align 4
@.str = private unnamed_addr constant [23 x i8] c"Success: nothing to do\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"Success: performed\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Denied\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Error: wrong ssn\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Error: request already in progress\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Error: bad sequence number\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"In progress\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"Re-configuration Response, resp_seq_nbr=\00", align 1
@_ZTVN6dcsctp32ReconfigurationResponseParameterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::Parameter"*)* @_ZN6dcsctp9ParameterD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::ReconfigurationResponseParameter"*)* @_ZN6dcsctp32ReconfigurationResponseParameterD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::ReconfigurationResponseParameter"*, %"class.std::__1::vector"*)* @_ZNK6dcsctp32ReconfigurationResponseParameter11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::ReconfigurationResponseParameter"*)* @_ZNK6dcsctp32ReconfigurationResponseParameter8ToStringEv to i8*)] }, align 8
@switch.table._ZN6dcsctp8ToStringENS_32ReconfigurationResponseParameter6ResultE = private unnamed_addr constant [7 x i64] [i64 22, i64 18, i64 6, i64 16, i64 34, i64 26, i64 11], align 8
@switch.table._ZN6dcsctp8ToStringENS_32ReconfigurationResponseParameter6ResultE.9 = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN6dcsctp8ToStringENS_32ReconfigurationResponseParameter6ResultE(i32) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* @switch.table._ZN6dcsctp8ToStringENS_32ReconfigurationResponseParameter6ResultE, i64 0, i64 %2
  %4 = load i64, i64* %3, align 8
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @switch.table._ZN6dcsctp8ToStringENS_32ReconfigurationResponseParameter6ResultE.9, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  %8 = insertvalue { i8*, i64 } undef, i8* %7, 0
  %9 = insertvalue { i8*, i64 } %8, i64 %4, 1
  ret { i8*, i64 } %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp32ReconfigurationResponseParameter5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::optional.6", align 8
  %5 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 24, i1 false)
  %6 = icmp eq i64 %2, 0
  %7 = select i1 %6, i8* null, i8* %1
  call void @_ZN6dcsctp8TLVTraitINS_38ReconfigurationResponseParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.6"* nonnull sret %4, i8* %7, i64 %2)
  %8 = load i8, i8* %5, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast %union.anon* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #7
  br label %120

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 4
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl nuw i32 %19, 24
  %21 = getelementptr inbounds i8, i8* %16, i64 5
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = or i32 %24, %20
  %26 = getelementptr inbounds i8, i8* %16, i64 6
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 8
  %30 = or i32 %25, %29
  %31 = getelementptr inbounds i8, i8* %16, i64 7
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = or i32 %30, %33
  %35 = getelementptr inbounds i8, i8* %16, i64 8
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl nuw i32 %37, 24
  %39 = getelementptr inbounds i8, i8* %16, i64 9
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 16
  %43 = or i32 %42, %38
  %44 = getelementptr inbounds i8, i8* %16, i64 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = shl nuw nsw i32 %46, 8
  %48 = or i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %16, i64 11
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = or i32 %48, %51
  %53 = icmp ult i32 %52, 7
  br i1 %53, label %58, label %54

54:                                               ; preds = %14
  %55 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %55, align 8
  %56 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %57 = bitcast %union.anon* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 32, i1 false) #7
  br label %120

58:                                               ; preds = %14
  %59 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp ugt i64 %60, 12
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = icmp eq i64 %60, 20
  br i1 %63, label %75, label %71

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp32ReconfigurationResponseParameterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %67 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i32 %34, i32* %67, align 8
  %68 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %52, i32* %68, align 4
  %69 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %69, align 8
  %70 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %70, align 8
  br label %120

71:                                               ; preds = %62
  %72 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %72, align 8
  %73 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %74 = bitcast %union.anon* %73 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 32, i1 false) #7
  br label %120

75:                                               ; preds = %62
  %76 = getelementptr inbounds i8, i8* %16, i64 12
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl nuw i32 %78, 24
  %80 = getelementptr inbounds i8, i8* %16, i64 13
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, 16
  %84 = or i32 %83, %79
  %85 = getelementptr inbounds i8, i8* %16, i64 14
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %87, 8
  %89 = or i32 %84, %88
  %90 = getelementptr inbounds i8, i8* %16, i64 15
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = or i32 %89, %92
  %94 = getelementptr inbounds i8, i8* %16, i64 16
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = shl nuw i32 %96, 24
  %98 = getelementptr inbounds i8, i8* %16, i64 17
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 16
  %102 = or i32 %101, %97
  %103 = getelementptr inbounds i8, i8* %16, i64 18
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = shl nuw nsw i32 %105, 8
  %107 = or i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %16, i64 19
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = or i32 %107, %110
  %112 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %112, align 8
  %113 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp32ReconfigurationResponseParameterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %113, align 8
  %114 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i32 %34, i32* %114, align 8
  %115 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %52, i32* %115, align 4
  %116 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %116, align 8
  %117 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %93, i32* %117, align 4
  %118 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %118, align 8
  %119 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %111, i32* %119, align 4
  br label %120

120:                                              ; preds = %54, %64, %71, %75, %10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp8TLVTraitINS_38ReconfigurationResponseParameterConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.6"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ult i64 %2, 12
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 12) #7
  %6 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  br label %48

7:                                                ; preds = %3
  %8 = load i8, i8* %1, align 1
  %9 = zext i8 %8 to i16
  %10 = shl nuw i16 %9, 8
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = or i16 %10, %13
  %15 = icmp eq i16 %14, 16
  br i1 %15, label %19, label %16

16:                                               ; preds = %7
  %17 = zext i16 %14 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %17, i32 16) #7
  %18 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %18, align 8
  br label %48

19:                                               ; preds = %7
  %20 = getelementptr inbounds i8, i8* %1, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = shl nuw i16 %22, 8
  %24 = getelementptr inbounds i8, i8* %1, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = or i16 %23, %26
  %28 = zext i16 %27 to i64
  %29 = icmp ugt i64 %28, %2
  %30 = icmp ult i16 %27, 12
  %31 = or i1 %30, %29
  br i1 %31, label %32, label %34

32:                                               ; preds = %19
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %28, i64 %2) #7
  %33 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  br label %48

34:                                               ; preds = %19
  %35 = sub i64 %2, %28
  %36 = icmp ugt i64 %35, 3
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %35) #7
  %38 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %38, align 8
  br label %48

39:                                               ; preds = %34
  %40 = and i16 %26, 3
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %39
  tail call void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64 %28, i64 4) #7
  %43 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %43, align 8
  br label %48

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %45, align 8
  %46 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8* %1, i8** %46, align 8
  %47 = getelementptr inbounds %"class.absl::optional.6", %"class.absl::optional.6"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  store i64 %28, i64* %47, align 8
  br label %48

48:                                               ; preds = %16, %42, %37, %44, %32, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp9ParameterD2Ev(%"class.dcsctp::Parameter"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp32ReconfigurationResponseParameter11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::ReconfigurationResponseParameter"* nocapture readonly, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 3
  %4 = bitcast %"class.absl::optional.0"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i8
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = select i1 %7, i64 12, i64 20
  %15 = add i64 %13, %14
  %16 = icmp ult i64 %13, %15
  %17 = inttoptr i64 %12 to i8*
  br i1 %16, label %18, label %21

18:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %14) #7
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %25

21:                                               ; preds = %2
  %22 = icmp ugt i64 %13, %15
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = getelementptr inbounds i8, i8* %17, i64 %15
  store i8* %24, i8** %8, align 8
  br label %25

25:                                               ; preds = %18, %21, %23
  %26 = phi i8* [ %20, %18 ], [ %17, %21 ], [ %17, %23 ]
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %26, i64 %13
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 16, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 0, i8* %30, align 1
  %31 = trunc i64 %14 to i8
  %32 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 %31, i8* %32, align 1
  %33 = load i8*, i8** %27, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %13
  %35 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds i8, i8* %34, i64 4
  %38 = lshr i32 %36, 24
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = lshr i32 %36, 16
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %34, i64 5
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %36, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %34, i64 6
  store i8 %44, i8* %45, align 1
  %46 = trunc i32 %36 to i8
  %47 = getelementptr inbounds i8, i8* %34, i64 7
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds i8, i8* %34, i64 8
  %51 = lshr i32 %49, 24
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %50, align 1
  %53 = lshr i32 %49, 16
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %34, i64 9
  store i8 %54, i8* %55, align 1
  %56 = lshr i32 %49, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %34, i64 10
  store i8 %57, i8* %58, align 1
  %59 = trunc i32 %49 to i8
  %60 = getelementptr inbounds i8, i8* %34, i64 11
  store i8 %59, i8* %60, align 1
  %61 = load i64, i64* %4, align 8
  %62 = trunc i64 %61 to i8
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %98, label %64

64:                                               ; preds = %25
  %65 = getelementptr inbounds i8, i8* %34, i64 12
  %66 = select i1 %7, i8* null, i8* %65
  %67 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = lshr i32 %68, 24
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %66, align 1
  %71 = lshr i32 %68, 16
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %66, i64 1
  store i8 %72, i8* %73, align 1
  %74 = lshr i32 %68, 8
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds i8, i8* %66, i64 2
  store i8 %75, i8* %76, align 1
  %77 = trunc i32 %68 to i8
  %78 = getelementptr inbounds i8, i8* %66, i64 3
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %80 = load i8, i8* %79, align 4, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %85, label %82

82:                                               ; preds = %64
  %83 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  br label %85

85:                                               ; preds = %64, %82
  %86 = phi i32 [ %84, %82 ], [ 0, %64 ]
  %87 = getelementptr inbounds i8, i8* %66, i64 4
  %88 = lshr i32 %86, 24
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %87, align 1
  %90 = lshr i32 %86, 16
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %66, i64 5
  store i8 %91, i8* %92, align 1
  %93 = lshr i32 %86, 8
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds i8, i8* %66, i64 6
  store i8 %94, i8* %95, align 1
  %96 = trunc i32 %86 to i8
  %97 = getelementptr inbounds i8, i8* %66, i64 7
  store i8 %96, i8* %97, align 1
  br label %98

98:                                               ; preds = %25, %85
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp32ReconfigurationResponseParameter8ToStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.dcsctp::ReconfigurationResponseParameter"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.rtc::StringBuilder", align 8
  %5 = bitcast %"class.rtc::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #7
  %6 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %4, i64 0, i32 0
  %7 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0), i64 40) #7
  %8 = getelementptr inbounds %"class.dcsctp::ReconfigurationResponseParameter", %"class.dcsctp::ReconfigurationResponseParameter"* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #7
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %9) #7
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = zext i8 %13 to i64
  %20 = select i1 %14, i8* %16, i8* %10
  %21 = select i1 %14, i64 %18, i64 %19
  %22 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %20, i64 %21) #7
  %23 = load i8, i8* %12, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %26) #8
  br label %27

27:                                               ; preds = %25, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #7
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %5, i64 24, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp32ReconfigurationResponseParameterD0Ev(%"class.dcsctp::ReconfigurationResponseParameter"*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %"class.dcsctp::ReconfigurationResponseParameter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

declare void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #3

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #3

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #3

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #3

declare void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #8
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #7
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #8
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
