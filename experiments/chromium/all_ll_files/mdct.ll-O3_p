; ModuleID = '../../third_party/opus/src/celt/mdct.c'
source_filename = "../../third_party/opus/src/celt/mdct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.kiss_fft_cpx = type { float, float }

; Function Attrs: nounwind ssp uwtable
define hidden void @clt_mdct_forward_c(%struct.mdct_lookup* nocapture readonly, float* nocapture readonly, float* noalias nocapture, float* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 2, i64 %9
  %11 = load %struct.kiss_fft_state*, %struct.kiss_fft_state** %10, align 8
  %12 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %11, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 3
  %17 = load float*, float** %16, align 8
  %18 = icmp sgt i32 %5, 0
  %19 = ashr i32 %15, 1
  br i1 %18, label %20, label %72

20:                                               ; preds = %8
  %21 = add i32 %5, -1
  %22 = and i32 %5, 7
  %23 = icmp ult i32 %21, 7
  br i1 %23, label %56, label %24

24:                                               ; preds = %20
  %25 = sub i32 %5, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i32 [ %19, %24 ], [ %53, %26 ]
  %28 = phi float* [ %17, %24 ], [ %52, %26 ]
  %29 = phi i32 [ %25, %24 ], [ %54, %26 ]
  %30 = sext i32 %27 to i64
  %31 = getelementptr inbounds float, float* %28, i64 %30
  %32 = ashr i32 %27, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %31, i64 %33
  %35 = ashr i32 %27, 2
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %34, i64 %36
  %38 = ashr i32 %27, 3
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %37, i64 %39
  %41 = ashr i32 %27, 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %40, i64 %42
  %44 = ashr i32 %27, 5
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %43, i64 %45
  %47 = ashr i32 %27, 6
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %46, i64 %48
  %50 = ashr i32 %27, 7
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %49, i64 %51
  %53 = ashr i32 %27, 8
  %54 = add i32 %29, -8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %26

56:                                               ; preds = %26, %20
  %57 = phi i32 [ undef, %20 ], [ %50, %26 ]
  %58 = phi float* [ undef, %20 ], [ %52, %26 ]
  %59 = phi i32 [ undef, %20 ], [ %53, %26 ]
  %60 = phi i32 [ %19, %20 ], [ %53, %26 ]
  %61 = phi float* [ %17, %20 ], [ %52, %26 ]
  %62 = icmp eq i32 %22, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %56, %63
  %64 = phi i32 [ %69, %63 ], [ %60, %56 ]
  %65 = phi float* [ %68, %63 ], [ %61, %56 ]
  %66 = phi i32 [ %70, %63 ], [ %22, %56 ]
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds float, float* %65, i64 %67
  %69 = ashr i32 %64, 1
  %70 = add i32 %66, -1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %63, !llvm.loop !2

72:                                               ; preds = %56, %63, %8
  %73 = phi float* [ %17, %8 ], [ %58, %56 ], [ %68, %63 ]
  %74 = phi i32 [ %15, %8 ], [ %57, %56 ], [ %64, %63 ]
  %75 = phi i32 [ %19, %8 ], [ %59, %56 ], [ %69, %63 ]
  %76 = ashr i32 %74, 2
  %77 = sext i32 %75 to i64
  %78 = shl nsw i64 %77, 2
  %79 = alloca float, i64 %77, align 16
  %80 = bitcast float* %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %80, i8 -86, i64 %78, i1 false)
  %81 = sext i32 %76 to i64
  %82 = shl nsw i64 %81, 3
  %83 = alloca %struct.kiss_fft_cpx, i64 %81, align 16
  %84 = bitcast %struct.kiss_fft_cpx* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %84, i8 -86, i64 %82, i1 false)
  %85 = ashr i32 %4, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %1, i64 %86
  %88 = getelementptr inbounds float, float* %1, i64 %77
  %89 = getelementptr inbounds float, float* %88, i64 -1
  %90 = getelementptr inbounds float, float* %89, i64 %86
  %91 = getelementptr inbounds float, float* %3, i64 %86
  %92 = add nsw i32 %4, 3
  %93 = ashr i32 %92, 2
  %94 = icmp sgt i32 %4, 0
  br i1 %94, label %95, label %128

95:                                               ; preds = %72
  %96 = getelementptr inbounds float, float* %91, i64 -1
  %97 = sub nsw i32 0, %75
  %98 = sext i32 %97 to i64
  br label %99

99:                                               ; preds = %95, %99
  %100 = phi i32 [ 0, %95 ], [ %126, %99 ]
  %101 = phi float* [ %87, %95 ], [ %122, %99 ]
  %102 = phi float* [ %96, %95 ], [ %125, %99 ]
  %103 = phi float* [ %91, %95 ], [ %124, %99 ]
  %104 = phi float* [ %79, %95 ], [ %121, %99 ]
  %105 = phi float* [ %90, %95 ], [ %123, %99 ]
  %106 = load float, float* %102, align 4
  %107 = getelementptr inbounds float, float* %101, i64 %77
  %108 = load float, float* %107, align 4
  %109 = fmul float %106, %108
  %110 = load float, float* %103, align 4
  %111 = load float, float* %105, align 4
  %112 = fmul float %110, %111
  %113 = fadd float %109, %112
  %114 = getelementptr inbounds float, float* %104, i64 1
  store float %113, float* %104, align 4
  %115 = load float, float* %101, align 4
  %116 = fmul float %110, %115
  %117 = getelementptr inbounds float, float* %105, i64 %98
  %118 = load float, float* %117, align 4
  %119 = fmul float %106, %118
  %120 = fsub float %116, %119
  %121 = getelementptr inbounds float, float* %104, i64 2
  store float %120, float* %114, align 4
  %122 = getelementptr inbounds float, float* %101, i64 2
  %123 = getelementptr inbounds float, float* %105, i64 -2
  %124 = getelementptr inbounds float, float* %103, i64 2
  %125 = getelementptr inbounds float, float* %102, i64 -2
  %126 = add nuw nsw i32 %100, 1
  %127 = icmp slt i32 %126, %93
  br i1 %127, label %99, label %128

128:                                              ; preds = %99, %72
  %129 = phi float* [ %90, %72 ], [ %123, %99 ]
  %130 = phi float* [ %79, %72 ], [ %121, %99 ]
  %131 = phi float* [ %87, %72 ], [ %122, %99 ]
  %132 = phi i32 [ 0, %72 ], [ %126, %99 ]
  %133 = sext i32 %4 to i64
  %134 = getelementptr inbounds float, float* %3, i64 %133
  %135 = getelementptr inbounds float, float* %134, i64 -1
  %136 = sub nsw i32 %76, %93
  %137 = icmp slt i32 %132, %136
  br i1 %137, label %138, label %174

138:                                              ; preds = %128
  %139 = sub i32 %76, %132
  %140 = sub i32 %139, %93
  %141 = xor i32 %132, -1
  %142 = add i32 %76, %141
  %143 = sub i32 %142, %93
  %144 = and i32 %140, 3
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %165, label %146

146:                                              ; preds = %138, %146
  %147 = phi i32 [ %162, %146 ], [ %132, %138 ]
  %148 = phi float* [ %160, %146 ], [ %131, %138 ]
  %149 = phi float* [ %158, %146 ], [ %130, %138 ]
  %150 = phi float* [ %161, %146 ], [ %129, %138 ]
  %151 = phi i32 [ %163, %146 ], [ %144, %138 ]
  %152 = bitcast float* %150 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds float, float* %149, i64 1
  %155 = bitcast float* %149 to i32*
  store i32 %153, i32* %155, align 4
  %156 = bitcast float* %148 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds float, float* %149, i64 2
  %159 = bitcast float* %154 to i32*
  store i32 %157, i32* %159, align 4
  %160 = getelementptr inbounds float, float* %148, i64 2
  %161 = getelementptr inbounds float, float* %150, i64 -2
  %162 = add nuw nsw i32 %147, 1
  %163 = add i32 %151, -1
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %146, !llvm.loop !4

165:                                              ; preds = %146, %138
  %166 = phi float* [ undef, %138 ], [ %158, %146 ]
  %167 = phi float* [ undef, %138 ], [ %160, %146 ]
  %168 = phi float* [ undef, %138 ], [ %161, %146 ]
  %169 = phi i32 [ %132, %138 ], [ %162, %146 ]
  %170 = phi float* [ %131, %138 ], [ %160, %146 ]
  %171 = phi float* [ %130, %138 ], [ %158, %146 ]
  %172 = phi float* [ %129, %138 ], [ %161, %146 ]
  %173 = icmp ult i32 %143, 3
  br i1 %173, label %174, label %183

174:                                              ; preds = %165, %183, %128
  %175 = phi float* [ %129, %128 ], [ %168, %165 ], [ %227, %183 ]
  %176 = phi float* [ %130, %128 ], [ %166, %165 ], [ %224, %183 ]
  %177 = phi float* [ %131, %128 ], [ %167, %165 ], [ %226, %183 ]
  %178 = phi i32 [ %132, %128 ], [ %136, %183 ], [ %136, %165 ]
  %179 = icmp slt i32 %178, %76
  br i1 %179, label %180, label %230

180:                                              ; preds = %174
  %181 = sub nsw i32 0, %75
  %182 = sext i32 %181 to i64
  br label %235

183:                                              ; preds = %165, %183
  %184 = phi i32 [ %228, %183 ], [ %169, %165 ]
  %185 = phi float* [ %226, %183 ], [ %170, %165 ]
  %186 = phi float* [ %224, %183 ], [ %171, %165 ]
  %187 = phi float* [ %227, %183 ], [ %172, %165 ]
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds float, float* %186, i64 1
  %191 = bitcast float* %186 to i32*
  store i32 %189, i32* %191, align 4
  %192 = bitcast float* %185 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = getelementptr inbounds float, float* %186, i64 2
  %195 = bitcast float* %190 to i32*
  store i32 %193, i32* %195, align 4
  %196 = getelementptr inbounds float, float* %185, i64 2
  %197 = getelementptr inbounds float, float* %187, i64 -2
  %198 = bitcast float* %197 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds float, float* %186, i64 3
  %201 = bitcast float* %194 to i32*
  store i32 %199, i32* %201, align 4
  %202 = bitcast float* %196 to i32*
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds float, float* %186, i64 4
  %205 = bitcast float* %200 to i32*
  store i32 %203, i32* %205, align 4
  %206 = getelementptr inbounds float, float* %185, i64 4
  %207 = getelementptr inbounds float, float* %187, i64 -4
  %208 = bitcast float* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds float, float* %186, i64 5
  %211 = bitcast float* %204 to i32*
  store i32 %209, i32* %211, align 4
  %212 = bitcast float* %206 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds float, float* %186, i64 6
  %215 = bitcast float* %210 to i32*
  store i32 %213, i32* %215, align 4
  %216 = getelementptr inbounds float, float* %185, i64 6
  %217 = getelementptr inbounds float, float* %187, i64 -6
  %218 = bitcast float* %217 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds float, float* %186, i64 7
  %221 = bitcast float* %214 to i32*
  store i32 %219, i32* %221, align 4
  %222 = bitcast float* %216 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds float, float* %186, i64 8
  %225 = bitcast float* %220 to i32*
  store i32 %223, i32* %225, align 4
  %226 = getelementptr inbounds float, float* %185, i64 8
  %227 = getelementptr inbounds float, float* %187, i64 -8
  %228 = add nuw nsw i32 %184, 4
  %229 = icmp eq i32 %228, %136
  br i1 %229, label %174, label %183

230:                                              ; preds = %235, %174
  %231 = icmp sgt i32 %74, 3
  br i1 %231, label %233, label %232

232:                                              ; preds = %230
  call void @opus_fft_impl(%struct.kiss_fft_state* %11, %struct.kiss_fft_cpx* nonnull %83) #3
  br label %328

233:                                              ; preds = %230
  %234 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %11, i64 0, i32 4
  br label %266

235:                                              ; preds = %235, %180
  %236 = phi i32 [ %178, %180 ], [ %264, %235 ]
  %237 = phi float* [ %177, %180 ], [ %260, %235 ]
  %238 = phi float* [ %135, %180 ], [ %263, %235 ]
  %239 = phi float* [ %3, %180 ], [ %262, %235 ]
  %240 = phi float* [ %176, %180 ], [ %259, %235 ]
  %241 = phi float* [ %175, %180 ], [ %261, %235 ]
  %242 = load float, float* %239, align 4
  %243 = getelementptr inbounds float, float* %237, i64 %182
  %244 = load float, float* %243, align 4
  %245 = fmul float %242, %244
  %246 = load float, float* %238, align 4
  %247 = load float, float* %241, align 4
  %248 = fmul float %246, %247
  %249 = fsub float %248, %245
  %250 = getelementptr inbounds float, float* %240, i64 1
  store float %249, float* %240, align 4
  %251 = load float, float* %238, align 4
  %252 = load float, float* %237, align 4
  %253 = fmul float %251, %252
  %254 = load float, float* %239, align 4
  %255 = getelementptr inbounds float, float* %241, i64 %77
  %256 = load float, float* %255, align 4
  %257 = fmul float %254, %256
  %258 = fadd float %253, %257
  %259 = getelementptr inbounds float, float* %240, i64 2
  store float %258, float* %250, align 4
  %260 = getelementptr inbounds float, float* %237, i64 2
  %261 = getelementptr inbounds float, float* %241, i64 -2
  %262 = getelementptr inbounds float, float* %239, i64 2
  %263 = getelementptr inbounds float, float* %238, i64 -2
  %264 = add nuw nsw i32 %236, 1
  %265 = icmp eq i32 %264, %76
  br i1 %265, label %230, label %235

266:                                              ; preds = %233, %266
  %267 = phi i64 [ 0, %233 ], [ %292, %266 ]
  %268 = phi float* [ %79, %233 ], [ %276, %266 ]
  %269 = getelementptr inbounds float, float* %73, i64 %267
  %270 = load float, float* %269, align 4
  %271 = add nsw i64 %267, %81
  %272 = getelementptr inbounds float, float* %73, i64 %271
  %273 = load float, float* %272, align 4
  %274 = getelementptr inbounds float, float* %268, i64 1
  %275 = load float, float* %268, align 4
  %276 = getelementptr inbounds float, float* %268, i64 2
  %277 = load float, float* %274, align 4
  %278 = fmul float %270, %275
  %279 = fmul float %273, %277
  %280 = fsub float %278, %279
  %281 = fmul float %270, %277
  %282 = fmul float %273, %275
  %283 = fadd float %282, %281
  %284 = fmul float %13, %280
  %285 = fmul float %13, %283
  %286 = load i16*, i16** %234, align 8
  %287 = getelementptr inbounds i16, i16* %286, i64 %267
  %288 = load i16, i16* %287, align 2
  %289 = sext i16 %288 to i64
  %290 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %83, i64 %289, i32 0
  store float %284, float* %290, align 8
  %291 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %83, i64 %289, i32 1
  store float %285, float* %291, align 4
  %292 = add nuw nsw i64 %267, 1
  %293 = icmp slt i64 %292, %81
  br i1 %293, label %266, label %294

294:                                              ; preds = %266
  call void @opus_fft_impl(%struct.kiss_fft_state* %11, %struct.kiss_fft_cpx* nonnull %83) #3
  br i1 %231, label %295, label %328

295:                                              ; preds = %294
  %296 = add nsw i32 %75, -1
  %297 = mul nsw i32 %296, %6
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds float, float* %2, i64 %298
  %300 = shl nsw i32 %6, 1
  %301 = sext i32 %300 to i64
  %302 = sub nsw i64 0, %301
  br label %303

303:                                              ; preds = %295, %303
  %304 = phi i64 [ 0, %295 ], [ %326, %303 ]
  %305 = phi float* [ %299, %295 ], [ %325, %303 ]
  %306 = phi float* [ %2, %295 ], [ %324, %303 ]
  %307 = phi %struct.kiss_fft_cpx* [ %83, %295 ], [ %323, %303 ]
  %308 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %307, i64 0, i32 1
  %309 = load float, float* %308, align 4
  %310 = add nsw i64 %304, %81
  %311 = getelementptr inbounds float, float* %73, i64 %310
  %312 = load float, float* %311, align 4
  %313 = fmul float %309, %312
  %314 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %307, i64 0, i32 0
  %315 = load float, float* %314, align 4
  %316 = getelementptr inbounds float, float* %73, i64 %304
  %317 = load float, float* %316, align 4
  %318 = fmul float %315, %317
  %319 = fsub float %313, %318
  %320 = fmul float %312, %315
  %321 = fmul float %309, %317
  %322 = fadd float %320, %321
  store float %319, float* %306, align 4
  store float %322, float* %305, align 4
  %323 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %307, i64 1
  %324 = getelementptr inbounds float, float* %306, i64 %301
  %325 = getelementptr inbounds float, float* %305, i64 %302
  %326 = add nuw nsw i64 %304, 1
  %327 = icmp slt i64 %326, %81
  br i1 %327, label %303, label %328

328:                                              ; preds = %303, %232, %294
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @opus_fft_impl(%struct.kiss_fft_state*, %struct.kiss_fft_cpx*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @clt_mdct_backward_c(%struct.mdct_lookup* nocapture readonly, float* nocapture readonly, float* noalias, float* noalias nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = icmp sgt i32 %5, 0
  %14 = ashr i32 %10, 1
  br i1 %13, label %15, label %67

15:                                               ; preds = %8
  %16 = add i32 %5, -1
  %17 = and i32 %5, 7
  %18 = icmp ult i32 %16, 7
  br i1 %18, label %51, label %19

19:                                               ; preds = %15
  %20 = sub i32 %5, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i32 [ %14, %19 ], [ %48, %21 ]
  %23 = phi float* [ %12, %19 ], [ %47, %21 ]
  %24 = phi i32 [ %20, %19 ], [ %49, %21 ]
  %25 = sext i32 %22 to i64
  %26 = getelementptr inbounds float, float* %23, i64 %25
  %27 = ashr i32 %22, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %26, i64 %28
  %30 = ashr i32 %22, 2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %29, i64 %31
  %33 = ashr i32 %22, 3
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %32, i64 %34
  %36 = ashr i32 %22, 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %35, i64 %37
  %39 = ashr i32 %22, 5
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %38, i64 %40
  %42 = ashr i32 %22, 6
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %41, i64 %43
  %45 = ashr i32 %22, 7
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %44, i64 %46
  %48 = ashr i32 %22, 8
  %49 = add i32 %24, -8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %21

51:                                               ; preds = %21, %15
  %52 = phi i32 [ undef, %15 ], [ %45, %21 ]
  %53 = phi float* [ undef, %15 ], [ %47, %21 ]
  %54 = phi i32 [ undef, %15 ], [ %48, %21 ]
  %55 = phi i32 [ %14, %15 ], [ %48, %21 ]
  %56 = phi float* [ %12, %15 ], [ %47, %21 ]
  %57 = icmp eq i32 %17, 0
  br i1 %57, label %67, label %58

58:                                               ; preds = %51, %58
  %59 = phi i32 [ %64, %58 ], [ %55, %51 ]
  %60 = phi float* [ %63, %58 ], [ %56, %51 ]
  %61 = phi i32 [ %65, %58 ], [ %17, %51 ]
  %62 = sext i32 %59 to i64
  %63 = getelementptr inbounds float, float* %60, i64 %62
  %64 = ashr i32 %59, 1
  %65 = add i32 %61, -1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %58, !llvm.loop !5

67:                                               ; preds = %51, %58, %8
  %68 = phi float* [ %12, %8 ], [ %53, %51 ], [ %63, %58 ]
  %69 = phi i32 [ %10, %8 ], [ %52, %51 ], [ %59, %58 ]
  %70 = phi i32 [ %14, %8 ], [ %54, %51 ], [ %64, %58 ]
  %71 = ashr i32 %69, 2
  %72 = ashr i32 %4, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %2, i64 %73
  %75 = sext i32 %5 to i64
  %76 = getelementptr inbounds %struct.mdct_lookup, %struct.mdct_lookup* %0, i64 0, i32 2, i64 %75
  %77 = load %struct.kiss_fft_state*, %struct.kiss_fft_state** %76, align 8
  %78 = icmp sgt i32 %69, 3
  br i1 %78, label %81, label %79

79:                                               ; preds = %67
  %80 = bitcast float* %74 to %struct.kiss_fft_cpx*
  tail call void @opus_fft_impl(%struct.kiss_fft_state* %77, %struct.kiss_fft_cpx* %80) #3
  br label %170

81:                                               ; preds = %67
  %82 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %77, i64 0, i32 4
  %83 = load i16*, i16** %82, align 8
  %84 = add nsw i32 %70, -1
  %85 = mul nsw i32 %84, %6
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %1, i64 %86
  %88 = shl nsw i32 %6, 1
  %89 = sext i32 %88 to i64
  %90 = sub nsw i64 0, %89
  %91 = sext i32 %71 to i64
  br label %92

92:                                               ; preds = %81, %92
  %93 = phi i64 [ 0, %81 ], [ %121, %92 ]
  %94 = phi float* [ %1, %81 ], [ %119, %92 ]
  %95 = phi float* [ %87, %81 ], [ %120, %92 ]
  %96 = phi i16* [ %83, %81 ], [ %97, %92 ]
  %97 = getelementptr inbounds i16, i16* %96, i64 1
  %98 = load i16, i16* %96, align 2
  %99 = sext i16 %98 to i32
  %100 = load float, float* %95, align 4
  %101 = getelementptr inbounds float, float* %68, i64 %93
  %102 = load float, float* %101, align 4
  %103 = fmul float %100, %102
  %104 = load float, float* %94, align 4
  %105 = add nsw i64 %93, %91
  %106 = getelementptr inbounds float, float* %68, i64 %105
  %107 = load float, float* %106, align 4
  %108 = fmul float %104, %107
  %109 = fadd float %103, %108
  %110 = fmul float %102, %104
  %111 = fmul float %100, %107
  %112 = fsub float %110, %111
  %113 = shl nsw i32 %99, 1
  %114 = or i32 %113, 1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %74, i64 %115
  store float %109, float* %116, align 4
  %117 = sext i32 %113 to i64
  %118 = getelementptr inbounds float, float* %74, i64 %117
  store float %112, float* %118, align 4
  %119 = getelementptr inbounds float, float* %94, i64 %89
  %120 = getelementptr inbounds float, float* %95, i64 %90
  %121 = add nuw nsw i64 %93, 1
  %122 = icmp slt i64 %121, %91
  br i1 %122, label %92, label %123

123:                                              ; preds = %92
  %124 = bitcast float* %74 to %struct.kiss_fft_cpx*
  tail call void @opus_fft_impl(%struct.kiss_fft_state* %77, %struct.kiss_fft_cpx* %124) #3
  %125 = sext i32 %70 to i64
  br i1 %78, label %126, label %170

126:                                              ; preds = %123
  %127 = add nsw i32 %71, 1
  %128 = ashr i32 %127, 1
  %129 = getelementptr inbounds float, float* %74, i64 %125
  %130 = sext i32 %71 to i64
  %131 = sext i32 %128 to i64
  br label %132

132:                                              ; preds = %126, %132
  %133 = phi i64 [ 0, %126 ], [ %168, %132 ]
  %134 = phi float* [ %129, %126 ], [ %136, %132 ]
  %135 = phi float* [ %74, %126 ], [ %167, %132 ]
  %136 = getelementptr inbounds float, float* %134, i64 -2
  %137 = getelementptr inbounds float, float* %135, i64 1
  %138 = load float, float* %137, align 4
  %139 = load float, float* %135, align 4
  %140 = getelementptr inbounds float, float* %68, i64 %133
  %141 = load float, float* %140, align 4
  %142 = add nsw i64 %133, %130
  %143 = getelementptr inbounds float, float* %68, i64 %142
  %144 = load float, float* %143, align 4
  %145 = fmul float %138, %141
  %146 = fmul float %139, %144
  %147 = fadd float %145, %146
  %148 = fmul float %138, %144
  %149 = fmul float %139, %141
  %150 = fsub float %148, %149
  %151 = getelementptr inbounds float, float* %134, i64 -1
  %152 = load float, float* %151, align 4
  %153 = load float, float* %136, align 4
  store float %147, float* %135, align 4
  store float %150, float* %151, align 4
  %154 = xor i64 %133, -1
  %155 = add nsw i64 %130, %154
  %156 = getelementptr inbounds float, float* %68, i64 %155
  %157 = load float, float* %156, align 4
  %158 = add nsw i64 %125, %154
  %159 = getelementptr inbounds float, float* %68, i64 %158
  %160 = load float, float* %159, align 4
  %161 = fmul float %152, %157
  %162 = fmul float %153, %160
  %163 = fadd float %161, %162
  %164 = fmul float %152, %160
  %165 = fmul float %153, %157
  %166 = fsub float %164, %165
  store float %163, float* %136, align 4
  store float %166, float* %137, align 4
  %167 = getelementptr inbounds float, float* %135, i64 2
  %168 = add nuw nsw i64 %133, 1
  %169 = icmp slt i64 %168, %131
  br i1 %169, label %132, label %170

170:                                              ; preds = %132, %79, %123
  %171 = sext i32 %4 to i64
  %172 = sdiv i32 %4, 2
  %173 = icmp sgt i32 %4, 1
  br i1 %173, label %174, label %237

174:                                              ; preds = %170
  %175 = getelementptr inbounds float, float* %3, i64 %171
  %176 = getelementptr inbounds float, float* %2, i64 %171
  %177 = and i32 %172, 1
  %178 = and i32 %4, -2
  %179 = icmp eq i32 %178, 2
  br i1 %179, label %218, label %180

180:                                              ; preds = %174
  %181 = sub nsw i32 %172, %177
  br label %182

182:                                              ; preds = %182, %180
  %183 = phi float* [ %176, %180 ], [ %203, %182 ]
  %184 = phi float* [ %175, %180 ], [ %202, %182 ]
  %185 = phi float* [ %3, %180 ], [ %215, %182 ]
  %186 = phi float* [ %2, %180 ], [ %211, %182 ]
  %187 = phi i32 [ %181, %180 ], [ %216, %182 ]
  %188 = getelementptr inbounds float, float* %184, i64 -1
  %189 = getelementptr inbounds float, float* %183, i64 -1
  %190 = load float, float* %189, align 4
  %191 = load float, float* %186, align 4
  %192 = load float, float* %188, align 4
  %193 = fmul float %191, %192
  %194 = load float, float* %185, align 4
  %195 = fmul float %190, %194
  %196 = fsub float %193, %195
  %197 = getelementptr inbounds float, float* %186, i64 1
  store float %196, float* %186, align 4
  %198 = fmul float %191, %194
  %199 = fmul float %190, %192
  %200 = fadd float %199, %198
  store float %200, float* %189, align 4
  %201 = getelementptr inbounds float, float* %185, i64 1
  %202 = getelementptr inbounds float, float* %184, i64 -2
  %203 = getelementptr inbounds float, float* %183, i64 -2
  %204 = load float, float* %203, align 4
  %205 = load float, float* %197, align 4
  %206 = load float, float* %202, align 4
  %207 = fmul float %205, %206
  %208 = load float, float* %201, align 4
  %209 = fmul float %204, %208
  %210 = fsub float %207, %209
  %211 = getelementptr inbounds float, float* %186, i64 2
  store float %210, float* %197, align 4
  %212 = fmul float %205, %208
  %213 = fmul float %204, %206
  %214 = fadd float %213, %212
  store float %214, float* %203, align 4
  %215 = getelementptr inbounds float, float* %185, i64 2
  %216 = add i32 %187, -2
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %182

218:                                              ; preds = %182, %174
  %219 = phi float* [ %176, %174 ], [ %203, %182 ]
  %220 = phi float* [ %175, %174 ], [ %202, %182 ]
  %221 = phi float* [ %3, %174 ], [ %215, %182 ]
  %222 = phi float* [ %2, %174 ], [ %211, %182 ]
  %223 = icmp eq i32 %177, 0
  br i1 %223, label %237, label %224

224:                                              ; preds = %218
  %225 = getelementptr inbounds float, float* %220, i64 -1
  %226 = getelementptr inbounds float, float* %219, i64 -1
  %227 = load float, float* %226, align 4
  %228 = load float, float* %222, align 4
  %229 = load float, float* %225, align 4
  %230 = fmul float %228, %229
  %231 = load float, float* %221, align 4
  %232 = fmul float %227, %231
  %233 = fsub float %230, %232
  store float %233, float* %222, align 4
  %234 = fmul float %228, %231
  %235 = fmul float %227, %229
  %236 = fadd float %235, %234
  store float %236, float* %226, align 4
  br label %237

237:                                              ; preds = %224, %218, %170
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
