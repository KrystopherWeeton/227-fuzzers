; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLIfStatement.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLIfStatement.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::IfStatement" = type <{ %"class.SkSL::Statement", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.12", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.14" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.SkSL::Type::Field"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Statement"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.35", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.51", [4 x i8] }>
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37", %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i64 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.54"* }
%"class.std::__1::vector.54" = type opaque
%"class.SkSL::Nop" = type { %"class.SkSL::Statement" }

$_ZN4SkSL11IfStatementD2Ev = comdat any

$_ZN4SkSL11IfStatementD0Ev = comdat any

$_ZNK4SkSL9Statement7isEmptyEv = comdat any

$_ZN4SkSL3NopD0Ev = comdat any

$_ZNK4SkSL3Nop11descriptionEv = comdat any

$_ZNK4SkSL3Nop7isEmptyEv = comdat any

$_ZNK4SkSL3Nop5cloneEv = comdat any

$_ZN4SkSL6IRNodeD2Ev = comdat any

$_ZTVN4SkSL3NopE = comdat any

@.str = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"if (\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c" else \00", align 1
@_ZTVN4SkSL11IfStatementE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IfStatement"*)* @_ZN4SkSL11IfStatementD2Ev to i8*), i8* bitcast (void (%"class.SkSL::IfStatement"*)* @_ZN4SkSL11IfStatementD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::IfStatement"*)* @_ZNK4SkSL11IfStatement11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Statement"*)* @_ZNK4SkSL9Statement7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::IfStatement"*)* @_ZNK4SkSL11IfStatement5cloneEv to i8*)] }, align 8
@_ZTVN4SkSL3NopE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Nop"*)* @_ZN4SkSL3NopD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop5cloneEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZNK4SkSL11IfStatement5cloneEv(%"class.SkSL::IfStatement"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %5, align 8
  %7 = bitcast %"class.SkSL::Expression"* %6 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %8, i64 10
  %10 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %9, align 8
  %11 = tail call %"class.SkSL::Expression"* %10(%"class.SkSL::Expression"* %6) #5
  %12 = ptrtoint %"class.SkSL::Expression"* %11 to i64
  %13 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %13, align 8
  %15 = bitcast %"class.SkSL::Statement"* %14 to %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)***
  %16 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)**, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %16, i64 4
  %18 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %17, align 8
  %19 = tail call %"class.SkSL::Statement"* %18(%"class.SkSL::Statement"* %14) #5
  %20 = ptrtoint %"class.SkSL::Statement"* %19 to i64
  %21 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %21, align 8
  %23 = icmp eq %"class.SkSL::Statement"* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %1
  %25 = bitcast %"class.SkSL::Statement"* %22 to %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)***
  %26 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)**, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %26, i64 4
  %28 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %27, align 8
  %29 = tail call %"class.SkSL::Statement"* %28(%"class.SkSL::Statement"* nonnull %22) #5
  %30 = ptrtoint %"class.SkSL::Statement"* %29 to i64
  br label %31

31:                                               ; preds = %1, %24
  %32 = phi i64 [ %30, %24 ], [ 0, %1 ]
  %33 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #5
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds i8, i8* %33, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %34, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %33, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 23, i32* %38, align 4
  %39 = bitcast i8* %33 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL11IfStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %39, align 8
  %40 = getelementptr inbounds i8, i8* %33, i64 16
  %41 = bitcast i8* %40 to i64*
  store i64 %12, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %33, i64 24
  %43 = bitcast i8* %42 to i64*
  store i64 %20, i64* %43, align 8
  %44 = getelementptr inbounds i8, i8* %33, i64 32
  %45 = bitcast i8* %44 to i64*
  store i64 %32, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %33, i64 40
  store i8 %4, i8* %46, align 8
  %47 = bitcast i8* %33 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4SkSL11IfStatement11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::IfStatement"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = bitcast %"class.SkSL::String"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #5
  %11 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 4
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %2
  %15 = tail call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #5
  br label %16

16:                                               ; preds = %2, %14
  %17 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #5
  %18 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #5
  %19 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #5
  %20 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #5
  %21 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  %23 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %22, i64 0, i32 0
  %24 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %25 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %25, i64 2
  %27 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %26, align 8
  call void %27(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::IRNode"* %23) #5
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %6) #5
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #5
  %28 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #5
  %29 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %30 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %29, align 8
  %31 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %30, i64 0, i32 0
  %32 = bitcast %"class.SkSL::Statement"* %30 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %33 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %33, i64 2
  %35 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %34, align 8
  call void %35(%"class.SkSL::String"* nonnull sret %7, %"class.SkSL::IRNode"* %31) #5
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, %"class.SkSL::String"* nonnull dereferenceable(24) %7) #5
  %36 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %3) #5
  %37 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %16
  %42 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #6
  br label %44

44:                                               ; preds = %16, %41
  %45 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %51) #6
  br label %52

52:                                               ; preds = %44, %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #5
  %53 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #6
  br label %60

60:                                               ; preds = %52, %57
  %61 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  call void @_ZdlPv(i8* %67) #6
  br label %68

68:                                               ; preds = %60, %65
  %69 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  call void @_ZdlPv(i8* %75) #6
  br label %76

76:                                               ; preds = %68, %73
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #5
  %77 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %78 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %77, align 8
  %79 = icmp eq %"class.SkSL::Statement"* %78, null
  br i1 %79, label %105, label %80

80:                                               ; preds = %76
  %81 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #5
  %82 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #5
  %83 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %78, i64 0, i32 0
  %84 = bitcast %"class.SkSL::Statement"* %78 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %85 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %84, align 8
  %86 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %85, i64 2
  %87 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %86, align 8
  call void %87(%"class.SkSL::String"* nonnull sret %9, %"class.SkSL::IRNode"* %83) #5
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %9) #5
  %88 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %8) #5
  %89 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %80
  %94 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %95) #6
  br label %96

96:                                               ; preds = %80, %93
  %97 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %97, i64 0, i32 1, i32 0
  %99 = load i8, i8* %98, align 1
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  call void @_ZdlPv(i8* %103) #6
  br label %104

104:                                              ; preds = %96, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #5
  br label %105

105:                                              ; preds = %76, %104
  ret void
}

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* sret, %"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL11IfStatement7ConvertERKNS_7ContextEibNSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS5_INS_9StatementENS7_ISA_EEEESC_(%"class.SkSL::Context"* dereferenceable(744), i32, i1 zeroext, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"class.SkSL::Statement"*) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %8 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %8, %"class.SkSL::Expression"* %3, %"class.SkSL::Context"* dereferenceable(744) %0) #5
  %10 = icmp eq %"class.SkSL::Expression"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = tail call %"class.SkSL::Statement"* @_ZN4SkSL11IfStatement4MakeERKNS_7ContextEibNSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS5_INS_9StatementENS7_ISA_EEEESC_(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %1, i1 zeroext %2, %"class.SkSL::Expression"* nonnull %9, %"class.SkSL::Statement"* %4, %"class.SkSL::Statement"* %5)
  br label %27

13:                                               ; preds = %6
  %14 = icmp eq %"class.SkSL::Statement"* %5, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = bitcast %"class.SkSL::Statement"* %5 to void (%"class.SkSL::Statement"*)***
  %17 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %18, align 8
  tail call void %19(%"class.SkSL::Statement"* nonnull %5) #5
  br label %20

20:                                               ; preds = %13, %15
  %21 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %20
  %23 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %24 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %24, i64 1
  %26 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %25, align 8
  tail call void %26(%"class.SkSL::Statement"* nonnull %4) #5
  br label %27

27:                                               ; preds = %22, %20, %11
  %28 = phi %"class.SkSL::Statement"* [ %12, %11 ], [ null, %20 ], [ null, %22 ]
  ret %"class.SkSL::Statement"* %28
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL11IfStatement4MakeERKNS_7ContextEibNSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS5_INS_9StatementENS7_ISA_EEEESC_(%"class.SkSL::Context"* dereferenceable(744), i32, i1 zeroext, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"class.SkSL::Statement"*) local_unnamed_addr #0 align 2 {
  %7 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %8 = ptrtoint %"class.SkSL::Statement"* %4 to i64
  %9 = ptrtoint %"class.SkSL::Statement"* %5 to i64
  %10 = zext i1 %2 to i8
  %11 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %12 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %11, align 8
  %13 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %12, i64 0, i32 1, i32 10
  %14 = load i8, i8* %13, align 4, !range !2
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %37

16:                                               ; preds = %6
  %17 = bitcast %"class.SkSL::Statement"* %4 to i1 (%"class.SkSL::Statement"*)***
  %18 = load i1 (%"class.SkSL::Statement"*)**, i1 (%"class.SkSL::Statement"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %18, i64 3
  %20 = load i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Statement"* %4) #5
  %22 = zext i1 %21 to i8
  %23 = icmp eq %"class.SkSL::Statement"* %5, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %16
  %25 = bitcast %"class.SkSL::Statement"* %5 to i1 (%"class.SkSL::Statement"*)***
  %26 = load i1 (%"class.SkSL::Statement"*)**, i1 (%"class.SkSL::Statement"*)*** %25, align 8
  %27 = getelementptr inbounds i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %26, i64 3
  %28 = load i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.SkSL::Statement"* nonnull %5) #5
  br label %30

30:                                               ; preds = %16, %24
  %31 = phi i1 [ true, %16 ], [ %29, %24 ]
  %32 = zext i1 %31 to i8
  %33 = and i1 %21, %31
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = tail call %"class.SkSL::Statement"* @_ZN4SkSL19ExpressionStatement4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %3) #5
  %36 = ptrtoint %"class.SkSL::Statement"* %35 to i64
  br label %141

37:                                               ; preds = %6
  br i1 %2, label %38, label %124

38:                                               ; preds = %30, %37
  %39 = phi i8 [ 0, %37 ], [ %32, %30 ]
  %40 = phi i8 [ 0, %37 ], [ %22, %30 ]
  %41 = tail call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %3) #5
  %42 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %41, i64 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 31
  br i1 %44, label %45, label %92

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %41, i64 1
  %47 = bitcast %"class.SkSL::Expression"* %46 to i8*
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %71, label %50

50:                                               ; preds = %45
  %51 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %50
  %53 = icmp eq i8 %40, 0
  br i1 %53, label %141, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %4, i64 0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 25
  br i1 %57, label %141, label %58

58:                                               ; preds = %54, %50
  %59 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 -1, i32* %61, align 8
  %62 = getelementptr inbounds i8, i8* %59, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 25, i32* %63, align 4
  %64 = bitcast i8* %59 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %64, align 8
  %65 = ptrtoint i8* %59 to i64
  br i1 %51, label %141, label %66

66:                                               ; preds = %58
  %67 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %68 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %68, i64 1
  %70 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %69, align 8
  tail call void %70(%"class.SkSL::Statement"* nonnull %4) #5
  br label %141

71:                                               ; preds = %45
  %72 = icmp eq %"class.SkSL::Statement"* %5, null
  br i1 %72, label %79, label %73

73:                                               ; preds = %71
  %74 = icmp eq i8 %39, 0
  br i1 %74, label %151, label %75

75:                                               ; preds = %73
  %76 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %5, i64 0, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 25
  br i1 %78, label %151, label %79

79:                                               ; preds = %75, %71
  %80 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %81 = getelementptr inbounds i8, i8* %80, i64 8
  %82 = bitcast i8* %81 to i32*
  store i32 -1, i32* %82, align 8
  %83 = getelementptr inbounds i8, i8* %80, i64 12
  %84 = bitcast i8* %83 to i32*
  store i32 25, i32* %84, align 4
  %85 = bitcast i8* %80 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %85, align 8
  %86 = ptrtoint i8* %80 to i64
  br i1 %72, label %151, label %87

87:                                               ; preds = %79
  %88 = bitcast %"class.SkSL::Statement"* %5 to void (%"class.SkSL::Statement"*)***
  %89 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %88, align 8
  %90 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %89, i64 1
  %91 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %90, align 8
  tail call void %91(%"class.SkSL::Statement"* nonnull %5) #5
  br label %151

92:                                               ; preds = %38
  br i1 %15, label %93, label %124

93:                                               ; preds = %92
  %94 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %94, label %101, label %95

95:                                               ; preds = %93
  %96 = icmp eq i8 %40, 0
  br i1 %96, label %114, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %4, i64 0, i32 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 25
  br i1 %100, label %114, label %101

101:                                              ; preds = %97, %93
  %102 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 8
  %104 = bitcast i8* %103 to i32*
  store i32 -1, i32* %104, align 8
  %105 = getelementptr inbounds i8, i8* %102, i64 12
  %106 = bitcast i8* %105 to i32*
  store i32 25, i32* %106, align 4
  %107 = bitcast i8* %102 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %107, align 8
  %108 = ptrtoint i8* %102 to i64
  br i1 %94, label %114, label %109

109:                                              ; preds = %101
  %110 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %111 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %110, align 8
  %112 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %111, i64 1
  %113 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %112, align 8
  tail call void %113(%"class.SkSL::Statement"* nonnull %4) #5
  br label %114

114:                                              ; preds = %95, %97, %101, %109
  %115 = phi i64 [ %108, %101 ], [ %108, %109 ], [ %8, %97 ], [ %8, %95 ]
  %116 = icmp eq i8 %39, 0
  br i1 %116, label %124, label %117

117:                                              ; preds = %114
  %118 = icmp eq %"class.SkSL::Statement"* %5, null
  br i1 %118, label %124, label %119

119:                                              ; preds = %117
  %120 = bitcast %"class.SkSL::Statement"* %5 to void (%"class.SkSL::Statement"*)***
  %121 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %121, i64 1
  %123 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %122, align 8
  tail call void %123(%"class.SkSL::Statement"* nonnull %5) #5
  br label %124

124:                                              ; preds = %37, %92, %114, %117, %119
  %125 = phi i64 [ %9, %114 ], [ %9, %92 ], [ 0, %117 ], [ 0, %119 ], [ %9, %37 ]
  %126 = phi i64 [ %115, %114 ], [ %8, %92 ], [ %115, %117 ], [ %115, %119 ], [ %8, %37 ]
  %127 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #5
  %128 = getelementptr inbounds i8, i8* %127, i64 8
  %129 = bitcast i8* %128 to i32*
  store i32 %1, i32* %129, align 8
  %130 = getelementptr inbounds i8, i8* %127, i64 12
  %131 = bitcast i8* %130 to i32*
  store i32 23, i32* %131, align 4
  %132 = bitcast i8* %127 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL11IfStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %132, align 8
  %133 = getelementptr inbounds i8, i8* %127, i64 16
  %134 = bitcast i8* %133 to i64*
  store i64 %7, i64* %134, align 8
  %135 = getelementptr inbounds i8, i8* %127, i64 24
  %136 = bitcast i8* %135 to i64*
  store i64 %126, i64* %136, align 8
  %137 = getelementptr inbounds i8, i8* %127, i64 32
  %138 = bitcast i8* %137 to i64*
  store i64 %125, i64* %138, align 8
  %139 = getelementptr inbounds i8, i8* %127, i64 40
  store i8 %10, i8* %139, align 8
  %140 = ptrtoint i8* %127 to i64
  br label %170

141:                                              ; preds = %66, %58, %54, %52, %34
  %142 = phi i64 [ %8, %34 ], [ 0, %52 ], [ 0, %54 ], [ 0, %58 ], [ 0, %66 ]
  %143 = phi i64 [ 0, %34 ], [ %7, %52 ], [ %7, %54 ], [ %7, %58 ], [ %7, %66 ]
  %144 = phi i64 [ %36, %34 ], [ %8, %52 ], [ %8, %54 ], [ %65, %58 ], [ %65, %66 ]
  %145 = icmp eq %"class.SkSL::Statement"* %5, null
  br i1 %145, label %151, label %146

146:                                              ; preds = %141
  %147 = bitcast %"class.SkSL::Statement"* %5 to void (%"class.SkSL::Statement"*)***
  %148 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %147, align 8
  %149 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %148, i64 1
  %150 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %149, align 8
  tail call void %150(%"class.SkSL::Statement"* nonnull %5) #5
  br label %151

151:                                              ; preds = %87, %79, %75, %73, %141, %146
  %152 = phi i64 [ %144, %141 ], [ %144, %146 ], [ %86, %79 ], [ %86, %87 ], [ %9, %75 ], [ %9, %73 ]
  %153 = phi i64 [ %143, %141 ], [ %143, %146 ], [ %7, %79 ], [ %7, %87 ], [ %7, %75 ], [ %7, %73 ]
  %154 = phi i64 [ %142, %141 ], [ %142, %146 ], [ %8, %79 ], [ %8, %87 ], [ %8, %75 ], [ %8, %73 ]
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %162, label %156

156:                                              ; preds = %151
  %157 = inttoptr i64 %154 to %"class.SkSL::Statement"*
  %158 = inttoptr i64 %154 to void (%"class.SkSL::Statement"*)***
  %159 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %158, align 8
  %160 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %159, i64 1
  %161 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %160, align 8
  tail call void %161(%"class.SkSL::Statement"* nonnull %157) #5
  br label %162

162:                                              ; preds = %151, %156
  %163 = icmp eq i64 %153, 0
  br i1 %163, label %170, label %164

164:                                              ; preds = %162
  %165 = inttoptr i64 %153 to %"class.SkSL::Expression"*
  %166 = inttoptr i64 %153 to void (%"class.SkSL::Expression"*)***
  %167 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %166, align 8
  %168 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %167, i64 1
  %169 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %168, align 8
  tail call void %169(%"class.SkSL::Expression"* nonnull %165) #5
  br label %170

170:                                              ; preds = %124, %162, %164
  %171 = phi i64 [ %140, %124 ], [ %152, %162 ], [ %152, %164 ]
  %172 = inttoptr i64 %171 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %172
}

declare %"class.SkSL::Statement"* @_ZN4SkSL19ExpressionStatement4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL11IfStatementD2Ev(%"class.SkSL::IfStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL11IfStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %8 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %9, align 8
  tail call void %10(%"class.SkSL::Statement"* nonnull %4) #5
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %12, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %12, align 8
  %14 = icmp eq %"class.SkSL::Statement"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Statement"* %13 to void (%"class.SkSL::Statement"*)***
  %17 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %18, align 8
  tail call void %19(%"class.SkSL::Statement"* nonnull %13) #5
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #5
  br label %29

29:                                               ; preds = %20, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL11IfStatementD0Ev(%"class.SkSL::IfStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL11IfStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %8 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %9, align 8
  tail call void %10(%"class.SkSL::Statement"* nonnull %4) #5
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %12, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %12, align 8
  %14 = icmp eq %"class.SkSL::Statement"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Statement"* %13 to void (%"class.SkSL::Statement"*)***
  %17 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %18, align 8
  tail call void %19(%"class.SkSL::Statement"* nonnull %13) #5
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"class.SkSL::IfStatement", %"class.SkSL::IfStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #5
  br label %29

29:                                               ; preds = %20, %24
  %30 = bitcast %"class.SkSL::IfStatement"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %30) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL9Statement7isEmptyEv(%"class.SkSL::Statement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL3NopD0Ev(%"class.SkSL::Nop"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.SkSL::Nop"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL3Nop11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 1, i8* %4, align 1
  %5 = bitcast %"class.SkSL::String"* %0 to i8*
  store i8 59, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL3Nop7isEmptyEv(%"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Statement"* @_ZNK4SkSL3Nop5cloneEv(%"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 -1, i32* %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 12
  %6 = bitcast i8* %5 to i32*
  store i32 25, i32* %6, align 4
  %7 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = bitcast i8* %2 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL6IRNodeD2Ev(%"class.SkSL::IRNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
