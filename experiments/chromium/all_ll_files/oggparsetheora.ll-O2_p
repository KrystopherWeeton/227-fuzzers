; ModuleID = '../../third_party/ffmpeg/libavformat/oggparsetheora.c'
source_filename = "../../third_party/ffmpeg/libavformat/oggparsetheora.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ogg_codec = type { i8*, i8, i8*, i32 (%struct.AVFormatContext*, i32)*, i32 (%struct.AVFormatContext*, i32)*, i64 (%struct.AVFormatContext*, i32, i64, i64*)*, i32, i32, void (%struct.AVFormatContext*, i32)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.ogg = type { %struct.ogg_stream*, i32, i32, i32, i64, %struct.ogg_state* }
%struct.ogg_stream = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, %struct.ogg_codec*, i32, i32, i32, [255 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i8* }
%struct.ogg_state = type { i64, i32, %struct.ogg_state*, i32, [1 x %struct.ogg_stream] }
%struct.TheoraParams = type { i32, i32, i32 }

@.str = private unnamed_addr constant [8 x i8] c"\80theora\00", align 1
@ff_theora_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8 7, i8* null, i32 (%struct.AVFormatContext*, i32)* @theora_header, i32 (%struct.AVFormatContext*, i32)* @theora_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* @theora_gptopts, i32 0, i32 3, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"Too old or unsupported Theora (%x)\0A\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"Invalid time base in theora stream, assuming 25 FPS\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Unknown header type %X\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @theora_header(%struct.AVFormatContext*, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %8
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 30
  %14 = bitcast i8** %13 to %struct.TheoraParams**
  %15 = load %struct.TheoraParams*, %struct.TheoraParams** %14, align 8
  %16 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 19
  %17 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %18 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %17, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %19
  %23 = add i32 %22, 2
  %24 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %25, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %334

32:                                               ; preds = %2
  %33 = icmp eq %struct.TheoraParams* %15, null
  br i1 %33, label %34, label %44

34:                                               ; preds = %32
  %35 = tail call noalias i8* @av_mallocz(i64 12) #6
  %36 = icmp eq i8* %35, null
  br i1 %36, label %334, label %37

37:                                               ; preds = %34
  %38 = bitcast i8* %35 to %struct.TheoraParams*
  store i8* %35, i8** %13, align 8
  %39 = load i8*, i8** %24, align 8
  %40 = load i32, i32* %26, align 8
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = load i8, i8* %42, align 1
  br label %44

44:                                               ; preds = %32, %37
  %45 = phi i64 [ %28, %32 ], [ %41, %37 ]
  %46 = phi i8 [ %30, %32 ], [ %43, %37 ]
  %47 = phi i8* [ %25, %32 ], [ %39, %37 ]
  %48 = phi %struct.TheoraParams* [ %15, %32 ], [ %38, %37 ]
  %49 = getelementptr inbounds i8, i8* %47, i64 %45
  switch i8 %46, label %293 [
    i8 -128, label %50
    i8 -127, label %284
    i8 -126, label %289
  ]

50:                                               ; preds = %44
  %51 = load i32, i32* %20, align 4
  %52 = shl i32 %51, 3
  %53 = icmp ult i32 %52, 2147483135
  %54 = icmp ne i8* %49, null
  %55 = and i1 %54, %53
  %56 = select i1 %55, i8* %49, i8* null
  %57 = add i32 %52, 8
  %58 = select i1 %55, i32 %57, i32 8
  %59 = icmp slt i32 %58, 56
  %60 = select i1 %59, i32 %58, i32 56
  %61 = lshr exact i32 %60, 3
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %65) #7, !srcloc !2
  %67 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %66) #7, !srcloc !3
  %68 = add nuw nsw i32 %60, 24
  %69 = icmp ugt i32 %58, %68
  %70 = select i1 %69, i32 %68, i32 %58
  %71 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %48, i64 0, i32 2
  store i32 %67, i32* %71, align 4
  %72 = icmp ult i32 %67, 196864
  br i1 %72, label %73, label %75

73:                                               ; preds = %50
  %74 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %74, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 %67) #6
  br label %334

75:                                               ; preds = %50
  %76 = lshr exact i32 %70, 3
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 1
  %81 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %80) #7, !srcloc !2
  %82 = and i32 %70, 7
  %83 = shl i32 %81, %82
  %84 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %83) #7, !srcloc !3
  %85 = add nuw nsw i32 %70, 16
  %86 = icmp ugt i32 %58, %85
  %87 = select i1 %86, i32 %85, i32 %58
  %88 = shl i32 %84, 4
  %89 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %90 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %89, i64 0, i32 11
  store i32 %88, i32* %90, align 8
  %91 = lshr i32 %87, 3
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %56, i64 %92
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 1
  %96 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %95) #7, !srcloc !2
  %97 = and i32 %87, 7
  %98 = shl i32 %96, %97
  %99 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %98) #7, !srcloc !3
  %100 = add nuw nsw i32 %87, 16
  %101 = icmp ugt i32 %58, %100
  %102 = select i1 %101, i32 %100, i32 %58
  %103 = shl i32 %99, 4
  %104 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %105 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %104, i64 0, i32 12
  store i32 %103, i32* %105, align 4
  %106 = load i32, i32* %71, align 4
  %107 = icmp ugt i32 %106, 197631
  br i1 %107, label %108, label %112

108:                                              ; preds = %75
  %109 = add nuw nsw i32 %102, 100
  %110 = icmp ugt i32 %58, %109
  %111 = select i1 %110, i32 %109, i32 %58
  br label %114

112:                                              ; preds = %75
  %113 = icmp ugt i32 %106, 197119
  br i1 %113, label %114, label %161

114:                                              ; preds = %108, %112
  %115 = phi i32 [ %111, %108 ], [ %102, %112 ]
  %116 = lshr i32 %115, 3
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %56, i64 %117
  %119 = bitcast i8* %118 to i32*
  %120 = load i32, i32* %119, align 1
  %121 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %120) #7, !srcloc !2
  %122 = and i32 %115, 7
  %123 = shl i32 %121, %122
  %124 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %123) #7, !srcloc !3
  %125 = add nuw nsw i32 %115, 24
  %126 = icmp ugt i32 %58, %125
  %127 = select i1 %126, i32 %125, i32 %58
  %128 = lshr i32 %127, 3
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %56, i64 %129
  %131 = bitcast i8* %130 to i32*
  %132 = load i32, i32* %131, align 1
  %133 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %132) #7, !srcloc !2
  %134 = and i32 %127, 7
  %135 = shl i32 %133, %134
  %136 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %135) #7, !srcloc !3
  %137 = add nuw nsw i32 %127, 24
  %138 = icmp ugt i32 %58, %137
  %139 = select i1 %138, i32 %137, i32 %58
  %140 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %141 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %140, i64 0, i32 11
  %142 = load i32, i32* %141, align 8
  %143 = icmp sle i32 %124, %142
  %144 = add nsw i32 %142, -16
  %145 = icmp sgt i32 %124, %144
  %146 = and i1 %143, %145
  br i1 %146, label %147, label %157

147:                                              ; preds = %114
  %148 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %140, i64 0, i32 12
  %149 = load i32, i32* %148, align 4
  %150 = icmp sle i32 %136, %149
  %151 = add nsw i32 %149, -16
  %152 = icmp sgt i32 %136, %151
  %153 = and i1 %150, %152
  br i1 %153, label %154, label %157

154:                                              ; preds = %147
  store i32 %124, i32* %141, align 8
  %155 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %156 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %155, i64 0, i32 12
  store i32 %136, i32* %156, align 4
  br label %157

157:                                              ; preds = %147, %114, %154
  %158 = add nuw nsw i32 %139, 16
  %159 = icmp ugt i32 %58, %158
  %160 = select i1 %159, i32 %158, i32 %58
  br label %161

161:                                              ; preds = %157, %112
  %162 = phi i32 [ %160, %157 ], [ %102, %112 ]
  %163 = lshr i32 %162, 3
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %56, i64 %164
  %166 = bitcast i8* %165 to i32*
  %167 = load i32, i32* %166, align 1
  %168 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %167) #7, !srcloc !2
  %169 = and i32 %162, 7
  %170 = shl i32 %168, %169
  %171 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %170) #7, !srcloc !3
  %172 = add nuw nsw i32 %162, 16
  %173 = icmp ugt i32 %58, %172
  %174 = select i1 %173, i32 %172, i32 %58
  %175 = lshr i32 %174, 3
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %56, i64 %176
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %179) #7, !srcloc !2
  %181 = and i32 %174, 7
  %182 = shl i32 %180, %181
  %183 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %182) #7, !srcloc !3
  %184 = add nuw nsw i32 %174, 16
  %185 = icmp ugt i32 %58, %184
  %186 = select i1 %185, i32 %184, i32 %58
  %187 = shl i32 %171, 16
  %188 = or i32 %183, %187
  %189 = lshr i32 %186, 3
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %56, i64 %190
  %192 = bitcast i8* %191 to i32*
  %193 = load i32, i32* %192, align 1
  %194 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %193) #7, !srcloc !2
  %195 = and i32 %186, 7
  %196 = shl i32 %194, %195
  %197 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %196) #7, !srcloc !3
  %198 = add nuw nsw i32 %186, 16
  %199 = icmp ugt i32 %58, %198
  %200 = select i1 %199, i32 %198, i32 %58
  %201 = lshr i32 %200, 3
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %56, i64 %202
  %204 = bitcast i8* %203 to i32*
  %205 = load i32, i32* %204, align 1
  %206 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %205) #7, !srcloc !2
  %207 = and i32 %200, 7
  %208 = shl i32 %206, %207
  %209 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %208) #7, !srcloc !3
  %210 = add nuw nsw i32 %200, 16
  %211 = icmp ugt i32 %58, %210
  %212 = select i1 %211, i32 %210, i32 %58
  %213 = shl i32 %197, 16
  %214 = or i32 %209, %213
  %215 = icmp sgt i32 %214, 0
  %216 = icmp sgt i32 %188, 0
  %217 = and i1 %216, %215
  br i1 %217, label %220, label %218

218:                                              ; preds = %161
  %219 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %219, i32 24, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %220

220:                                              ; preds = %161, %218
  %221 = phi i32 [ 25, %218 ], [ %188, %161 ]
  %222 = phi i32 [ 1, %218 ], [ %214, %161 ]
  tail call void @avpriv_set_pts_info(%struct.AVStream* %12, i32 64, i32 %222, i32 %221) #6
  %223 = lshr i32 %212, 3
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %56, i64 %224
  %226 = bitcast i8* %225 to i32*
  %227 = load i32, i32* %226, align 1
  %228 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %227) #7, !srcloc !2
  %229 = and i32 %212, 7
  %230 = shl i32 %228, %229
  %231 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %230) #7, !srcloc !3
  %232 = add nuw nsw i32 %212, 24
  %233 = icmp ugt i32 %58, %232
  %234 = select i1 %233, i32 %232, i32 %58
  %235 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 10, i32 0
  store i32 %231, i32* %235, align 8
  %236 = lshr i32 %234, 3
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %56, i64 %237
  %239 = bitcast i8* %238 to i32*
  %240 = load i32, i32* %239, align 1
  %241 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %240) #7, !srcloc !2
  %242 = and i32 %234, 7
  %243 = shl i32 %241, %242
  %244 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %243) #7, !srcloc !3
  %245 = add nuw nsw i32 %234, 24
  %246 = icmp ugt i32 %58, %245
  %247 = select i1 %246, i32 %245, i32 %58
  %248 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 10, i32 1
  store i32 %244, i32* %248, align 4
  %249 = load i32, i32* %71, align 4
  %250 = icmp ugt i32 %249, 197119
  br i1 %250, label %251, label %264

251:                                              ; preds = %220
  %252 = sub nsw i32 0, %247
  %253 = sub nsw i32 %58, %247
  %254 = icmp slt i32 %247, -38
  %255 = icmp slt i32 %253, 38
  %256 = select i1 %255, i32 %253, i32 38
  %257 = select i1 %254, i32 %252, i32 %256
  %258 = add nsw i32 %257, %247
  %259 = icmp ugt i32 %249, 3162111
  br i1 %259, label %260, label %264

260:                                              ; preds = %251
  %261 = add i32 %258, 2
  %262 = icmp ugt i32 %58, %261
  %263 = select i1 %262, i32 %261, i32 %58
  br label %264

264:                                              ; preds = %220, %260, %251
  %265 = phi i32 [ %263, %260 ], [ %258, %251 ], [ %247, %220 ]
  %266 = lshr i32 %265, 3
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds i8, i8* %56, i64 %267
  %269 = bitcast i8* %268 to i32*
  %270 = load i32, i32* %269, align 1
  %271 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %270) #7, !srcloc !2
  %272 = and i32 %265, 7
  %273 = shl i32 %271, %272
  %274 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %273) #7, !srcloc !3
  %275 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %48, i64 0, i32 0
  store i32 %274, i32* %275, align 4
  %276 = shl nsw i32 -1, %274
  %277 = xor i32 %276, -1
  %278 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %48, i64 0, i32 1
  store i32 %277, i32* %278, align 4
  %279 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %280 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %279, i64 0, i32 0
  store i32 0, i32* %280, align 8
  %281 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %282 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %281, i64 0, i32 1
  store i32 30, i32* %282, align 4
  %283 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 28
  store i32 2, i32* %283, align 4
  br label %296

284:                                              ; preds = %44
  %285 = getelementptr inbounds i8, i8* %49, i64 7
  %286 = load i32, i32* %20, align 4
  %287 = add i32 %286, -7
  %288 = tail call i32 @ff_vorbis_stream_comment(%struct.AVFormatContext* %0, %struct.AVStream* %12, i8* %285, i32 %287) #6
  br label %289

289:                                              ; preds = %44, %284
  %290 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %48, i64 0, i32 2
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %334, label %296

293:                                              ; preds = %44
  %294 = zext i8 %46 to i32
  %295 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %295, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i32 %294) #6
  br label %334

296:                                              ; preds = %264, %289
  %297 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %298 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %297, i64 0, i32 3
  %299 = bitcast i8** %298 to i8*
  %300 = add i32 %22, 66
  %301 = sext i32 %300 to i64
  %302 = tail call i32 @av_reallocp(i8* %299, i64 %301) #6
  %303 = icmp slt i32 %302, 0
  %304 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  br i1 %303, label %305, label %307

305:                                              ; preds = %296
  %306 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %304, i64 0, i32 4
  store i32 0, i32* %306, align 8
  br label %334

307:                                              ; preds = %296
  %308 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %304, i64 0, i32 3
  %309 = load i8*, i8** %308, align 8
  %310 = sext i32 %23 to i64
  %311 = getelementptr inbounds i8, i8* %309, i64 %310
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %311, i8 0, i64 64, i1 false)
  %312 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %313 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %312, i64 0, i32 3
  %314 = load i8*, i8** %313, align 8
  %315 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %312, i64 0, i32 4
  %316 = load i32, i32* %315, align 8
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds i8, i8* %314, i64 %317
  %319 = load i32, i32* %20, align 4
  %320 = lshr i32 %319, 8
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds i8, i8* %318, i64 1
  store i8 %321, i8* %318, align 1
  %323 = load i32, i32* %20, align 4
  %324 = trunc i32 %323 to i8
  %325 = getelementptr inbounds i8, i8* %322, i64 1
  store i8 %324, i8* %322, align 1
  %326 = load i8*, i8** %24, align 8
  %327 = load i32, i32* %26, align 8
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds i8, i8* %326, i64 %328
  %330 = load i32, i32* %20, align 4
  %331 = zext i32 %330 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %325, i8* align 1 %329, i64 %331, i1 false)
  %332 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %16, align 8
  %333 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %332, i64 0, i32 4
  store i32 %23, i32* %333, align 8
  br label %334

334:                                              ; preds = %289, %73, %34, %2, %307, %305, %293
  %335 = phi i32 [ -1094995529, %293 ], [ %302, %305 ], [ 1, %307 ], [ 0, %2 ], [ -12, %34 ], [ -38, %73 ], [ -1094995529, %289 ]
  ret i32 %335
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @theora_packet(%struct.AVFormatContext* nocapture readonly, i32) #1 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 10
  %10 = load i64, i64* %9, align 8
  switch i64 %10, label %142 [
    i64 0, label %11
    i64 -9223372036854775808, label %11
  ]

11:                                               ; preds = %2, %2
  %12 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 14
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %142

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 18
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 17
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %18, %20
  br i1 %21, label %22, label %82

22:                                               ; preds = %16
  %23 = sext i32 %18 to i64
  %24 = sext i32 %20 to i64
  %25 = sub nsw i64 %24, %23
  %26 = xor i64 %23, -1
  %27 = add nsw i64 %26, %24
  %28 = and i64 %25, 3
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %62, label %30

30:                                               ; preds = %22
  %31 = sub nsw i64 %25, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ %23, %30 ], [ %59, %32 ]
  %34 = phi i32 [ 1, %30 ], [ %58, %32 ]
  %35 = phi i64 [ %31, %30 ], [ %60, %32 ]
  %36 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = icmp ne i8 %37, -1
  %39 = zext i1 %38 to i32
  %40 = add nuw nsw i32 %34, %39
  %41 = add nsw i64 %33, 1
  %42 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = icmp ne i8 %43, -1
  %45 = zext i1 %44 to i32
  %46 = add nuw nsw i32 %40, %45
  %47 = add nsw i64 %33, 2
  %48 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = icmp ne i8 %49, -1
  %51 = zext i1 %50 to i32
  %52 = add nuw nsw i32 %46, %51
  %53 = add nsw i64 %33, 3
  %54 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = icmp ne i8 %55, -1
  %57 = zext i1 %56 to i32
  %58 = add nuw nsw i32 %52, %57
  %59 = add nsw i64 %33, 4
  %60 = add i64 %35, -4
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %32

62:                                               ; preds = %32, %22
  %63 = phi i32 [ undef, %22 ], [ %58, %32 ]
  %64 = phi i64 [ %23, %22 ], [ %59, %32 ]
  %65 = phi i32 [ 1, %22 ], [ %58, %32 ]
  %66 = icmp eq i64 %28, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %62, %67
  %68 = phi i64 [ %76, %67 ], [ %64, %62 ]
  %69 = phi i32 [ %75, %67 ], [ %65, %62 ]
  %70 = phi i64 [ %77, %67 ], [ %28, %62 ]
  %71 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %68
  %72 = load i8, i8* %71, align 1
  %73 = icmp ne i8 %72, -1
  %74 = zext i1 %73 to i32
  %75 = add nuw nsw i32 %69, %74
  %76 = add nsw i64 %68, 1
  %77 = add i64 %70, -1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %67, !llvm.loop !4

79:                                               ; preds = %67, %62
  %80 = phi i32 [ %63, %62 ], [ %75, %67 ]
  %81 = zext i32 %80 to i64
  br label %82

82:                                               ; preds = %79, %16
  %83 = phi i64 [ 1, %16 ], [ %81, %79 ]
  %84 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 8
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 30
  %87 = bitcast i8** %86 to %struct.TheoraParams**
  %88 = load %struct.TheoraParams*, %struct.TheoraParams** %87, align 8
  %89 = icmp eq %struct.TheoraParams* %88, null
  br i1 %89, label %119, label %90

90:                                               ; preds = %82
  %91 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %88, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = lshr i64 %85, %93
  %95 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %88, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = and i64 %85, %97
  %99 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %88, i64 0, i32 2
  %100 = load i32, i32* %99, align 4
  %101 = icmp ult i32 %100, 197121
  %102 = zext i1 %101 to i64
  %103 = icmp eq i64 %98, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %90
  %105 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 5
  %106 = load i32, i32* %105, align 8
  %107 = or i32 %106, 1
  store i32 %107, i32* %105, align 8
  br label %108

108:                                              ; preds = %90, %104
  %109 = add i64 %98, %94
  %110 = add i64 %109, %102
  %111 = icmp eq i64 %110, -9223372036854775808
  br i1 %111, label %119, label %112

112:                                              ; preds = %108
  %113 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %110, i64 %83) #6
  %114 = extractvalue { i64, i1 } %113, 1
  %115 = extractvalue { i64, i1 } %113, 0
  %116 = icmp slt i64 %115, 0
  %117 = select i1 %116, i64 9223372036854775807, i64 -9223372036854775808
  %118 = select i1 %114, i64 %117, i64 %115
  br label %119

119:                                              ; preds = %82, %108, %112
  %120 = phi i64 [ %118, %112 ], [ -9223372036854775808, %108 ], [ -9223372036854775808, %82 ]
  %121 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 11
  store i64 %120, i64* %121, align 8
  store i64 %120, i64* %9, align 8
  %122 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %123 = load %struct.AVStream**, %struct.AVStream*** %122, align 8
  %124 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %123, i64 %8
  %125 = load %struct.AVStream*, %struct.AVStream** %124, align 8
  %126 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %125, i64 0, i32 5
  %127 = load i64, i64* %126, align 8
  %128 = icmp ne i64 %127, -9223372036854775808
  %129 = icmp eq i64 %120, -9223372036854775808
  %130 = or i1 %129, %128
  br i1 %130, label %142, label %131

131:                                              ; preds = %119
  store i64 %120, i64* %126, align 8
  %132 = load %struct.AVStream**, %struct.AVStream*** %122, align 8
  %133 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %132, i64 %8
  %134 = load %struct.AVStream*, %struct.AVStream** %133, align 8
  %135 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %134, i64 0, i32 6
  %136 = load i64, i64* %135, align 8
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %131
  %139 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %134, i64 0, i32 5
  %140 = load i64, i64* %139, align 8
  %141 = sub nsw i64 %136, %140
  store i64 %141, i64* %135, align 8
  br label %142

142:                                              ; preds = %138, %131, %119, %2, %11
  %143 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 6
  store i32 1, i32* %147, align 4
  br label %148

148:                                              ; preds = %142, %146
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i64 @theora_gptopts(%struct.AVFormatContext* nocapture readonly, i32, i64, i64*) #2 {
  %5 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %6 = bitcast i8** %5 to %struct.ogg**
  %7 = load %struct.ogg*, %struct.ogg** %6, align 8
  %8 = getelementptr inbounds %struct.ogg, %struct.ogg* %7, i64 0, i32 0
  %9 = load %struct.ogg_stream*, %struct.ogg_stream** %8, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %9, i64 %10, i32 30
  %12 = bitcast i8** %11 to %struct.TheoraParams**
  %13 = load %struct.TheoraParams*, %struct.TheoraParams** %12, align 8
  %14 = icmp eq %struct.TheoraParams* %13, null
  br i1 %14, label %38, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %13, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = lshr i64 %2, %18
  %20 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = and i64 %22, %2
  %24 = getelementptr inbounds %struct.TheoraParams, %struct.TheoraParams* %13, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = icmp ult i32 %25, 197121
  %27 = zext i1 %26 to i64
  %28 = add i64 %19, %27
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %15
  %31 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %9, i64 %10, i32 5
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 1
  store i32 %33, i32* %31, align 8
  br label %34

34:                                               ; preds = %15, %30
  %35 = icmp eq i64* %3, null
  %36 = add i64 %28, %23
  br i1 %35, label %38, label %37

37:                                               ; preds = %34
  store i64 %36, i64* %3, align 8
  br label %38

38:                                               ; preds = %34, %37, %4
  %39 = phi i64 [ -9223372036854775808, %4 ], [ %36, %37 ], [ %36, %34 ]
  ret i64 %39
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #3

declare i32 @ff_vorbis_stream_comment(%struct.AVFormatContext*, %struct.AVStream*, i8*, i32) local_unnamed_addr #3

declare i32 @av_reallocp(i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 344027}
!3 = !{i32 1799685, i32 1799699}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
