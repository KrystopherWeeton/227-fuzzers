; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/bitwriter_buffer.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/bitwriter_buffer.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_write_bit_buffer = type { i8*, i64 }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @vpx_wb_bytes_written(%struct.vpx_write_bit_buffer* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 3
  %5 = and i64 %3, 7
  %6 = icmp ne i64 %5, 0
  %7 = zext i1 %6 to i64
  %8 = add nuw nsw i64 %4, %7
  ret i64 %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = sdiv i32 %5, 8
  %7 = srem i32 %5, 8
  %8 = sub nsw i32 7, %7
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = trunc i32 %1 to i8
  %12 = shl i8 %11, 7
  %13 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %6 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  store i8 %12, i8* %16, align 1
  br label %33

17:                                               ; preds = %2
  %18 = shl i32 1, %8
  %19 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = sext i32 %6 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = trunc i32 %18 to i8
  %25 = xor i8 %24, -1
  %26 = and i8 %23, %25
  store i8 %26, i8* %22, align 1
  %27 = shl i32 %1, %8
  %28 = load i8*, i8** %19, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 %21
  %30 = load i8, i8* %29, align 1
  %31 = trunc i32 %27 to i8
  %32 = or i8 %30, %31
  store i8 %32, i8* %29, align 1
  br label %33

33:                                               ; preds = %17, %10
  %34 = shl i64 %4, 32
  %35 = add i64 %34, 4294967296
  %36 = ashr exact i64 %35, 32
  store i64 %36, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nocapture, i32, i32) local_unnamed_addr #1 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %46

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %8 = load i64, i64* %6, align 8
  br label %9

9:                                                ; preds = %5, %41
  %10 = phi i64 [ %8, %5 ], [ %44, %41 ]
  %11 = phi i32 [ %2, %5 ], [ %12, %41 ]
  %12 = add nsw i32 %11, -1
  %13 = lshr i32 %1, %12
  %14 = trunc i64 %10 to i32
  %15 = sdiv i32 %14, 8
  %16 = srem i32 %14, 8
  %17 = sub nsw i32 7, %16
  %18 = icmp eq i32 %16, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %9
  %20 = trunc i32 %13 to i8
  %21 = shl i8 %20, 7
  %22 = load i8*, i8** %7, align 8
  %23 = sext i32 %15 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  store i8 %21, i8* %24, align 1
  br label %41

25:                                               ; preds = %9
  %26 = and i32 %13, 1
  %27 = shl i32 1, %17
  %28 = load i8*, i8** %7, align 8
  %29 = sext i32 %15 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = trunc i32 %27 to i8
  %33 = xor i8 %32, -1
  %34 = and i8 %31, %33
  store i8 %34, i8* %30, align 1
  %35 = shl i32 %26, %17
  %36 = load i8*, i8** %7, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %29
  %38 = load i8, i8* %37, align 1
  %39 = trunc i32 %35 to i8
  %40 = or i8 %38, %39
  store i8 %40, i8* %37, align 1
  br label %41

41:                                               ; preds = %19, %25
  %42 = shl i64 %10, 32
  %43 = add i64 %42, 4294967296
  %44 = ashr exact i64 %43, 32
  store i64 %44, i64* %6, align 8
  %45 = icmp sgt i32 %12, 0
  br i1 %45, label %9, label %46

46:                                               ; preds = %41, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_wb_write_inv_signed_literal(%struct.vpx_write_bit_buffer* nocapture, i32, i32) local_unnamed_addr #1 {
  %4 = icmp slt i32 %1, 0
  %5 = sub nsw i32 0, %1
  %6 = select i1 %4, i32 %5, i32 %1
  %7 = icmp sgt i32 %2, 0
  %8 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 1
  br i1 %7, label %11, label %9

9:                                                ; preds = %3
  %10 = load i64, i64* %8, align 8
  br label %51

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %13 = load i64, i64* %8, align 8
  br label %14

14:                                               ; preds = %46, %11
  %15 = phi i64 [ %13, %11 ], [ %49, %46 ]
  %16 = phi i32 [ %2, %11 ], [ %17, %46 ]
  %17 = add nsw i32 %16, -1
  %18 = lshr i32 %6, %17
  %19 = trunc i64 %15 to i32
  %20 = sdiv i32 %19, 8
  %21 = srem i32 %19, 8
  %22 = sub nsw i32 7, %21
  %23 = icmp eq i32 %21, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %14
  %25 = trunc i32 %18 to i8
  %26 = shl i8 %25, 7
  %27 = load i8*, i8** %12, align 8
  %28 = sext i32 %20 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  store i8 %26, i8* %29, align 1
  br label %46

30:                                               ; preds = %14
  %31 = and i32 %18, 1
  %32 = shl i32 1, %22
  %33 = load i8*, i8** %12, align 8
  %34 = sext i32 %20 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = trunc i32 %32 to i8
  %38 = xor i8 %37, -1
  %39 = and i8 %36, %38
  store i8 %39, i8* %35, align 1
  %40 = shl i32 %31, %22
  %41 = load i8*, i8** %12, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 %34
  %43 = load i8, i8* %42, align 1
  %44 = trunc i32 %40 to i8
  %45 = or i8 %43, %44
  store i8 %45, i8* %42, align 1
  br label %46

46:                                               ; preds = %30, %24
  %47 = shl i64 %15, 32
  %48 = add i64 %47, 4294967296
  %49 = ashr exact i64 %48, 32
  store i64 %49, i64* %8, align 8
  %50 = icmp sgt i32 %17, 0
  br i1 %50, label %14, label %51

51:                                               ; preds = %46, %9
  %52 = phi i64 [ %10, %9 ], [ %49, %46 ]
  %53 = lshr i32 %1, 31
  %54 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 1
  %55 = trunc i64 %52 to i32
  %56 = sdiv i32 %55, 8
  %57 = srem i32 %55, 8
  %58 = sub nsw i32 7, %57
  %59 = icmp eq i32 %57, 0
  br i1 %59, label %60, label %67

60:                                               ; preds = %51
  %61 = shl nuw nsw i32 %53, 7
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = sext i32 %56 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  store i8 %62, i8* %66, align 1
  br label %83

67:                                               ; preds = %51
  %68 = shl i32 1, %58
  %69 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %0, i64 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = sext i32 %56 to i64
  %72 = getelementptr inbounds i8, i8* %70, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = trunc i32 %68 to i8
  %75 = xor i8 %74, -1
  %76 = and i8 %73, %75
  store i8 %76, i8* %72, align 1
  %77 = shl i32 %53, %58
  %78 = load i8*, i8** %69, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %71
  %80 = load i8, i8* %79, align 1
  %81 = trunc i32 %77 to i8
  %82 = or i8 %80, %81
  store i8 %82, i8* %79, align 1
  br label %83

83:                                               ; preds = %60, %67
  %84 = shl i64 %52, 32
  %85 = add i64 %84, 4294967296
  %86 = ashr exact i64 %85, 32
  store i64 %86, i64* %54, align 8
  ret void
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
