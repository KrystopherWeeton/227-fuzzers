; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_entropymv.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_entropymv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.mv = type { i16, i16 }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }

@vp9_mv_joint_tree = hidden constant [6 x i8] c"\00\02\FF\04\FE\FD", align 1
@vp9_mv_class_tree = hidden constant [20 x i8] c"\00\02\FF\04\06\08\FE\FD\0A\0C\FC\FB\FA\0E\10\12\F9\F8\F7\F6", align 16
@vp9_mv_class0_tree = hidden constant [2 x i8] c"\00\FF", align 1
@vp9_mv_fp_tree = hidden constant [6 x i8] c"\00\02\FF\04\FE\FD", align 1
@log_in_base_2 = internal unnamed_addr constant [1025 x i8] calign 16
@default_nmv_context = internal unnamed_addr constant %struct.nmv_context { [3 x i8] c" @`", [2 x %struct.nmv_component] [%struct.nmv_component { i8 -128, [10 x i8] c"\E0\90\C0\A8\C0\B0\C0\C6\C6\F5", [1 x i8] c"\D8", [10 x i8] c"\88\8C\94\A0\B0\C0\E0\EA\EA\F0", [2 x [3 x i8]] [[3 x i8] c"\80\80@", [3 x i8] c"`p@"], [3 x i8] c"@`@", i8 -96, i8 -128 }, %struct.nmv_component { i8 -128, [10 x i8] c"\D8\80\B0\A0\B0\B0\C0\C6\C6\D0", [1 x i8] c"\D0", [10 x i8] c"\88\8C\94\A0\B0\C0\E0\EA\EA\F0", [2 x [3 x i8]] [[3 x i8] c"\80\80@", [3 x i8] c"`p@"], [3 x i8] c"@`@", i8 -96, i8 -128 }] }, align 1
@count_to_update_factor = internal unnamed_addr constant [21 x i32] [i32 0, i32 6, i32 12, i32 19, i32 25, i32 32, i32 38, i32 44, i32 51, i32 57, i32 64, i32 70, i32 76, i32 83, i32 89, i32 96, i32 102, i32 108, i32 115, i32 121, i32 128], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @vp9_get_mv_class(i32, i32*) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %0, 8191
  br i1 %3, label %10, label %4

4:                                                ; preds = %2
  %5 = ashr i32 %0, 3
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [1025 x i8], [1025 x i8]* @log_in_base_2, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  br label %10

10:                                               ; preds = %2, %4
  %11 = phi i32 [ %9, %4 ], [ 10, %2 ]
  %12 = icmp eq i32* %1, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %10
  %14 = icmp eq i32 %11, 0
  %15 = shl i32 8, %11
  %16 = select i1 %14, i32 0, i32 %15
  %17 = sub nsw i32 %0, %16
  store i32 %17, i32* %1, align 4
  br label %18

18:                                               ; preds = %10, %13
  ret i32 %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_inc_mv(%struct.mv* nocapture readonly, %struct.nmv_context_counts*) local_unnamed_addr #1 {
  %3 = icmp eq %struct.nmv_context_counts* %1, null
  br i1 %3, label %208, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.mv, %struct.mv* %0, i64 0, i32 0
  %6 = load i16, i16* %5, align 2
  %7 = icmp eq i16 %6, 0
  %8 = getelementptr inbounds %struct.mv, %struct.mv* %0, i64 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = icmp eq i16 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = select i1 %10, i32 2, i32 3
  %14 = select i1 %7, i32 %12, i32 %13
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %16, align 4
  %19 = or i32 %14, 1
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %113

21:                                               ; preds = %4
  %22 = load i16, i16* %5, align 2
  %23 = sext i16 %22 to i32
  %24 = icmp slt i32 %23, 0
  %25 = lshr i32 %23, 31
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %27, align 4
  %30 = sub nsw i32 0, %23
  %31 = select i1 %24, i32 %30, i32 %23
  %32 = add nsw i32 %31, -1
  %33 = icmp sgt i32 %32, 8191
  br i1 %33, label %40, label %34

34:                                               ; preds = %21
  %35 = ashr i32 %32, 3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [1025 x i8], [1025 x i8]* @log_in_base_2, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  br label %40

40:                                               ; preds = %34, %21
  %41 = phi i32 [ %39, %34 ], [ 10, %21 ]
  %42 = icmp eq i32 %41, 0
  %43 = shl i32 8, %41
  %44 = select i1 %42, i32 0, i32 %43
  %45 = sub nsw i32 %32, %44
  %46 = zext i32 %41 to i64
  %47 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 1, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %47, align 4
  %50 = ashr i32 %45, 3
  %51 = lshr i32 %45, 1
  %52 = and i32 %51, 3
  %53 = and i32 %45, 1
  br i1 %42, label %59, label %54

54:                                               ; preds = %40
  %55 = and i64 %46, 1
  %56 = icmp eq i32 %41, 1
  br i1 %56, label %91, label %57

57:                                               ; preds = %54
  %58 = sub nsw i64 %46, %55
  br label %70

59:                                               ; preds = %40
  %60 = sext i32 %50 to i64
  %61 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 2, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* %61, align 4
  %64 = zext i32 %52 to i64
  %65 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 4, i64 %60, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %65, align 4
  %68 = zext i32 %53 to i64
  %69 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 6, i64 %68
  br label %109

70:                                               ; preds = %70, %57
  %71 = phi i64 [ 0, %57 ], [ %88, %70 ]
  %72 = phi i64 [ %58, %57 ], [ %89, %70 ]
  %73 = trunc i64 %71 to i32
  %74 = lshr i32 %50, %73
  %75 = and i32 %74, 1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 3, i64 %71, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %78, 1
  store i32 %79, i32* %77, align 4
  %80 = or i64 %71, 1
  %81 = trunc i64 %80 to i32
  %82 = lshr i32 %50, %81
  %83 = and i32 %82, 1
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 3, i64 %80, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %85, align 4
  %88 = add nuw nsw i64 %71, 2
  %89 = add i64 %72, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %70

91:                                               ; preds = %70, %54
  %92 = phi i64 [ 0, %54 ], [ %88, %70 ]
  %93 = icmp eq i64 %55, 0
  br i1 %93, label %102, label %94

94:                                               ; preds = %91
  %95 = trunc i64 %92 to i32
  %96 = lshr i32 %50, %95
  %97 = and i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 3, i64 %92, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %100, 1
  store i32 %101, i32* %99, align 4
  br label %102

102:                                              ; preds = %91, %94
  %103 = zext i32 %52 to i64
  %104 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 5, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = zext i32 %53 to i64
  %108 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 0, i32 7, i64 %107
  br label %109

109:                                              ; preds = %59, %102
  %110 = phi i32* [ %108, %102 ], [ %69, %59 ]
  %111 = load i32, i32* %110, align 4
  %112 = add i32 %111, 1
  store i32 %112, i32* %110, align 4
  br label %113

113:                                              ; preds = %109, %4
  %114 = or i32 %14, 2
  %115 = icmp eq i32 %114, 3
  br i1 %115, label %116, label %208

116:                                              ; preds = %113
  %117 = load i16, i16* %8, align 2
  %118 = sext i16 %117 to i32
  %119 = icmp slt i32 %118, 0
  %120 = lshr i32 %118, 31
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 0, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %122, align 4
  %125 = sub nsw i32 0, %118
  %126 = select i1 %119, i32 %125, i32 %118
  %127 = add nsw i32 %126, -1
  %128 = icmp sgt i32 %127, 8191
  br i1 %128, label %135, label %129

129:                                              ; preds = %116
  %130 = ashr i32 %127, 3
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [1025 x i8], [1025 x i8]* @log_in_base_2, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  br label %135

135:                                              ; preds = %129, %116
  %136 = phi i32 [ %134, %129 ], [ 10, %116 ]
  %137 = icmp eq i32 %136, 0
  %138 = shl i32 8, %136
  %139 = select i1 %137, i32 0, i32 %138
  %140 = sub nsw i32 %127, %139
  %141 = zext i32 %136 to i64
  %142 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 1, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = add i32 %143, 1
  store i32 %144, i32* %142, align 4
  %145 = ashr i32 %140, 3
  %146 = lshr i32 %140, 1
  %147 = and i32 %146, 3
  %148 = and i32 %140, 1
  br i1 %137, label %154, label %149

149:                                              ; preds = %135
  %150 = and i64 %141, 1
  %151 = icmp eq i32 %136, 1
  br i1 %151, label %188, label %152

152:                                              ; preds = %149
  %153 = sub nsw i64 %141, %150
  br label %167

154:                                              ; preds = %135
  %155 = sext i32 %145 to i64
  %156 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 2, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %157, 1
  store i32 %158, i32* %156, align 4
  %159 = zext i32 %147 to i64
  %160 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 4, i64 %155, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %161, 1
  store i32 %162, i32* %160, align 4
  %163 = zext i32 %148 to i64
  %164 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 6, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %164, align 4
  br label %208

167:                                              ; preds = %167, %152
  %168 = phi i64 [ 0, %152 ], [ %185, %167 ]
  %169 = phi i64 [ %153, %152 ], [ %186, %167 ]
  %170 = trunc i64 %168 to i32
  %171 = lshr i32 %145, %170
  %172 = and i32 %171, 1
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 3, i64 %168, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = add i32 %175, 1
  store i32 %176, i32* %174, align 4
  %177 = or i64 %168, 1
  %178 = trunc i64 %177 to i32
  %179 = lshr i32 %145, %178
  %180 = and i32 %179, 1
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 3, i64 %177, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %183, 1
  store i32 %184, i32* %182, align 4
  %185 = add nuw nsw i64 %168, 2
  %186 = add i64 %169, -2
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %167

188:                                              ; preds = %167, %149
  %189 = phi i64 [ 0, %149 ], [ %185, %167 ]
  %190 = icmp eq i64 %150, 0
  br i1 %190, label %199, label %191

191:                                              ; preds = %188
  %192 = trunc i64 %189 to i32
  %193 = lshr i32 %145, %192
  %194 = and i32 %193, 1
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 3, i64 %189, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add i32 %197, 1
  store i32 %198, i32* %196, align 4
  br label %199

199:                                              ; preds = %188, %191
  %200 = zext i32 %147 to i64
  %201 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 5, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %201, align 4
  %204 = zext i32 %148 to i64
  %205 = getelementptr inbounds %struct.nmv_context_counts, %struct.nmv_context_counts* %1, i64 0, i32 1, i64 1, i32 7, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, 1
  store i32 %207, i32* %205, align 4
  br label %208

208:                                              ; preds = %113, %199, %154, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_adapt_mv_probs(%struct.VP9Common*, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %4 = load %struct.frame_contexts*, %struct.frame_contexts** %3, align 8
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 74
  %6 = load %struct.frame_contexts*, %struct.frame_contexts** %5, align 16
  %7 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 75
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 0, i64 0
  %11 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 0, i64 0
  %12 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 0, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_mv_joint_tree, i64 0, i64 0), i8* %10, i32* %11, i8* %12) #5
  %13 = icmp eq i32 %1, 0
  br label %14

14:                                               ; preds = %191, %2
  %15 = phi i64 [ 0, %2 ], [ %192, %191 ]
  %16 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 0, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %19
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %53, label %24

24:                                               ; preds = %14
  %25 = icmp ult i32 %22, 20
  %26 = select i1 %25, i32 %22, i32 20
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %19 to i64
  %31 = shl nuw nsw i64 %30, 8
  %32 = lshr i32 %22, 1
  %33 = zext i32 %32 to i64
  %34 = add nuw nsw i64 %31, %33
  %35 = zext i32 %22 to i64
  %36 = udiv i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = sub nsw i32 255, %37
  %39 = lshr i32 %38, 23
  %40 = or i32 %39, %37
  %41 = icmp eq i32 %37, 0
  %42 = zext i1 %41 to i32
  %43 = zext i8 %17 to i32
  %44 = and i32 %40, 255
  %45 = or i32 %44, %42
  %46 = sub nsw i32 256, %29
  %47 = mul nsw i32 %46, %43
  %48 = mul nsw i32 %45, %29
  %49 = add i32 %47, 128
  %50 = add i32 %49, %48
  %51 = lshr i32 %50, 8
  %52 = trunc i32 %51 to i8
  br label %53

53:                                               ; preds = %14, %24
  %54 = phi i8 [ %52, %24 ], [ %17, %14 ]
  %55 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 0
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 1, i64 0
  %57 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 1, i64 0
  %58 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 1, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @vp9_mv_class_tree, i64 0, i64 0), i8* %56, i32* %57, i8* %58) #5
  %59 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 2, i64 0
  %60 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 2, i64 0
  %61 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 2, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @vp9_mv_class0_tree, i64 0, i64 0), i8* %59, i32* %60, i8* %61) #5
  %62 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 0, i64 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 0, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, %65
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %99, label %70

70:                                               ; preds = %53
  %71 = icmp ult i32 %68, 20
  %72 = select i1 %71, i32 %68, i32 20
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %65 to i64
  %77 = shl nuw nsw i64 %76, 8
  %78 = lshr i32 %68, 1
  %79 = zext i32 %78 to i64
  %80 = add nuw nsw i64 %77, %79
  %81 = zext i32 %68 to i64
  %82 = udiv i64 %80, %81
  %83 = trunc i64 %82 to i32
  %84 = sub nsw i32 255, %83
  %85 = lshr i32 %84, 23
  %86 = or i32 %85, %83
  %87 = icmp eq i32 %83, 0
  %88 = zext i1 %87 to i32
  %89 = zext i8 %63 to i32
  %90 = and i32 %86, 255
  %91 = or i32 %90, %88
  %92 = sub nsw i32 256, %75
  %93 = mul nsw i32 %92, %89
  %94 = mul nsw i32 %91, %75
  %95 = add i32 %93, 128
  %96 = add i32 %95, %94
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i8
  br label %99

99:                                               ; preds = %53, %70
  %100 = phi i8 [ %98, %70 ], [ %63, %53 ]
  %101 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 0
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 1, i64 0
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 1, i64 1
  %107 = load i32, i32* %106, align 4
  %108 = add i32 %107, %105
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %224, label %195

110:                                              ; preds = %544
  %111 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 6
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 6, i64 0
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 6, i64 1
  %116 = load i32, i32* %115, align 4
  %117 = add i32 %116, %114
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %148, label %119

119:                                              ; preds = %110
  %120 = icmp ult i32 %117, 20
  %121 = select i1 %120, i32 %117, i32 20
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %114 to i64
  %126 = shl nuw nsw i64 %125, 8
  %127 = lshr i32 %117, 1
  %128 = zext i32 %127 to i64
  %129 = add nuw nsw i64 %126, %128
  %130 = zext i32 %117 to i64
  %131 = udiv i64 %129, %130
  %132 = trunc i64 %131 to i32
  %133 = sub nsw i32 255, %132
  %134 = lshr i32 %133, 23
  %135 = or i32 %134, %132
  %136 = icmp eq i32 %132, 0
  %137 = zext i1 %136 to i32
  %138 = zext i8 %112 to i32
  %139 = and i32 %135, 255
  %140 = or i32 %139, %137
  %141 = sub nsw i32 256, %124
  %142 = mul nsw i32 %141, %138
  %143 = mul nsw i32 %140, %124
  %144 = add i32 %142, 128
  %145 = add i32 %144, %143
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i8
  br label %148

148:                                              ; preds = %110, %119
  %149 = phi i8 [ %147, %119 ], [ %112, %110 ]
  %150 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 6
  store i8 %149, i8* %150, align 1
  %151 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 7
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 7, i64 0
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 7, i64 1
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %156, %154
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %188, label %159

159:                                              ; preds = %148
  %160 = icmp ult i32 %157, 20
  %161 = select i1 %160, i32 %157, i32 20
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %154 to i64
  %166 = shl nuw nsw i64 %165, 8
  %167 = lshr i32 %157, 1
  %168 = zext i32 %167 to i64
  %169 = add nuw nsw i64 %166, %168
  %170 = zext i32 %157 to i64
  %171 = udiv i64 %169, %170
  %172 = trunc i64 %171 to i32
  %173 = sub nsw i32 255, %172
  %174 = lshr i32 %173, 23
  %175 = or i32 %174, %172
  %176 = icmp eq i32 %172, 0
  %177 = zext i1 %176 to i32
  %178 = zext i8 %152 to i32
  %179 = and i32 %175, 255
  %180 = or i32 %179, %177
  %181 = sub nsw i32 256, %164
  %182 = mul nsw i32 %181, %178
  %183 = mul nsw i32 %180, %164
  %184 = add i32 %182, 128
  %185 = add i32 %184, %183
  %186 = lshr i32 %185, 8
  %187 = trunc i32 %186 to i8
  br label %188

188:                                              ; preds = %148, %159
  %189 = phi i8 [ %187, %159 ], [ %152, %148 ]
  %190 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 7
  store i8 %189, i8* %190, align 1
  br label %191

191:                                              ; preds = %544, %188
  %192 = add nuw nsw i64 %15, 1
  %193 = icmp eq i64 %192, 2
  br i1 %193, label %194, label %14

194:                                              ; preds = %191
  ret void

195:                                              ; preds = %99
  %196 = icmp ult i32 %108, 20
  %197 = select i1 %196, i32 %108, i32 20
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = zext i32 %105 to i64
  %202 = shl nuw nsw i64 %201, 8
  %203 = lshr i32 %108, 1
  %204 = zext i32 %203 to i64
  %205 = add nuw nsw i64 %202, %204
  %206 = zext i32 %108 to i64
  %207 = udiv i64 %205, %206
  %208 = trunc i64 %207 to i32
  %209 = sub nsw i32 255, %208
  %210 = lshr i32 %209, 23
  %211 = or i32 %210, %208
  %212 = icmp eq i32 %208, 0
  %213 = zext i1 %212 to i32
  %214 = zext i8 %103 to i32
  %215 = and i32 %211, 255
  %216 = or i32 %215, %213
  %217 = sub nsw i32 256, %200
  %218 = mul nsw i32 %217, %214
  %219 = mul nsw i32 %216, %200
  %220 = add i32 %218, 128
  %221 = add i32 %220, %219
  %222 = lshr i32 %221, 8
  %223 = trunc i32 %222 to i8
  br label %224

224:                                              ; preds = %195, %99
  %225 = phi i8 [ %223, %195 ], [ %103, %99 ]
  %226 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 1
  store i8 %225, i8* %226, align 1
  %227 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 2
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 2, i64 0
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 2, i64 1
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, %230
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %264, label %235

235:                                              ; preds = %224
  %236 = icmp ult i32 %233, 20
  %237 = select i1 %236, i32 %233, i32 20
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %230 to i64
  %242 = shl nuw nsw i64 %241, 8
  %243 = lshr i32 %233, 1
  %244 = zext i32 %243 to i64
  %245 = add nuw nsw i64 %242, %244
  %246 = zext i32 %233 to i64
  %247 = udiv i64 %245, %246
  %248 = trunc i64 %247 to i32
  %249 = sub nsw i32 255, %248
  %250 = lshr i32 %249, 23
  %251 = or i32 %250, %248
  %252 = icmp eq i32 %248, 0
  %253 = zext i1 %252 to i32
  %254 = zext i8 %228 to i32
  %255 = and i32 %251, 255
  %256 = or i32 %255, %253
  %257 = sub nsw i32 256, %240
  %258 = mul nsw i32 %257, %254
  %259 = mul nsw i32 %256, %240
  %260 = add i32 %258, 128
  %261 = add i32 %260, %259
  %262 = lshr i32 %261, 8
  %263 = trunc i32 %262 to i8
  br label %264

264:                                              ; preds = %235, %224
  %265 = phi i8 [ %263, %235 ], [ %228, %224 ]
  %266 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 2
  store i8 %265, i8* %266, align 1
  %267 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 3
  %268 = load i8, i8* %267, align 1
  %269 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 3, i64 0
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 3, i64 1
  %272 = load i32, i32* %271, align 4
  %273 = add i32 %272, %270
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %304, label %275

275:                                              ; preds = %264
  %276 = icmp ult i32 %273, 20
  %277 = select i1 %276, i32 %273, i32 20
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = zext i32 %270 to i64
  %282 = shl nuw nsw i64 %281, 8
  %283 = lshr i32 %273, 1
  %284 = zext i32 %283 to i64
  %285 = add nuw nsw i64 %282, %284
  %286 = zext i32 %273 to i64
  %287 = udiv i64 %285, %286
  %288 = trunc i64 %287 to i32
  %289 = sub nsw i32 255, %288
  %290 = lshr i32 %289, 23
  %291 = or i32 %290, %288
  %292 = icmp eq i32 %288, 0
  %293 = zext i1 %292 to i32
  %294 = zext i8 %268 to i32
  %295 = and i32 %291, 255
  %296 = or i32 %295, %293
  %297 = sub nsw i32 256, %280
  %298 = mul nsw i32 %297, %294
  %299 = mul nsw i32 %296, %280
  %300 = add i32 %298, 128
  %301 = add i32 %300, %299
  %302 = lshr i32 %301, 8
  %303 = trunc i32 %302 to i8
  br label %304

304:                                              ; preds = %275, %264
  %305 = phi i8 [ %303, %275 ], [ %268, %264 ]
  %306 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 3
  store i8 %305, i8* %306, align 1
  %307 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 4
  %308 = load i8, i8* %307, align 1
  %309 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 4, i64 0
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 4, i64 1
  %312 = load i32, i32* %311, align 4
  %313 = add i32 %312, %310
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %344, label %315

315:                                              ; preds = %304
  %316 = icmp ult i32 %313, 20
  %317 = select i1 %316, i32 %313, i32 20
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = zext i32 %310 to i64
  %322 = shl nuw nsw i64 %321, 8
  %323 = lshr i32 %313, 1
  %324 = zext i32 %323 to i64
  %325 = add nuw nsw i64 %322, %324
  %326 = zext i32 %313 to i64
  %327 = udiv i64 %325, %326
  %328 = trunc i64 %327 to i32
  %329 = sub nsw i32 255, %328
  %330 = lshr i32 %329, 23
  %331 = or i32 %330, %328
  %332 = icmp eq i32 %328, 0
  %333 = zext i1 %332 to i32
  %334 = zext i8 %308 to i32
  %335 = and i32 %331, 255
  %336 = or i32 %335, %333
  %337 = sub nsw i32 256, %320
  %338 = mul nsw i32 %337, %334
  %339 = mul nsw i32 %336, %320
  %340 = add i32 %338, 128
  %341 = add i32 %340, %339
  %342 = lshr i32 %341, 8
  %343 = trunc i32 %342 to i8
  br label %344

344:                                              ; preds = %315, %304
  %345 = phi i8 [ %343, %315 ], [ %308, %304 ]
  %346 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 4
  store i8 %345, i8* %346, align 1
  %347 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 5
  %348 = load i8, i8* %347, align 1
  %349 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 5, i64 0
  %350 = load i32, i32* %349, align 4
  %351 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 5, i64 1
  %352 = load i32, i32* %351, align 4
  %353 = add i32 %352, %350
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %384, label %355

355:                                              ; preds = %344
  %356 = icmp ult i32 %353, 20
  %357 = select i1 %356, i32 %353, i32 20
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %358
  %360 = load i32, i32* %359, align 4
  %361 = zext i32 %350 to i64
  %362 = shl nuw nsw i64 %361, 8
  %363 = lshr i32 %353, 1
  %364 = zext i32 %363 to i64
  %365 = add nuw nsw i64 %362, %364
  %366 = zext i32 %353 to i64
  %367 = udiv i64 %365, %366
  %368 = trunc i64 %367 to i32
  %369 = sub nsw i32 255, %368
  %370 = lshr i32 %369, 23
  %371 = or i32 %370, %368
  %372 = icmp eq i32 %368, 0
  %373 = zext i1 %372 to i32
  %374 = zext i8 %348 to i32
  %375 = and i32 %371, 255
  %376 = or i32 %375, %373
  %377 = sub nsw i32 256, %360
  %378 = mul nsw i32 %377, %374
  %379 = mul nsw i32 %376, %360
  %380 = add i32 %378, 128
  %381 = add i32 %380, %379
  %382 = lshr i32 %381, 8
  %383 = trunc i32 %382 to i8
  br label %384

384:                                              ; preds = %355, %344
  %385 = phi i8 [ %383, %355 ], [ %348, %344 ]
  %386 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 5
  store i8 %385, i8* %386, align 1
  %387 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 6
  %388 = load i8, i8* %387, align 1
  %389 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 6, i64 0
  %390 = load i32, i32* %389, align 4
  %391 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 6, i64 1
  %392 = load i32, i32* %391, align 4
  %393 = add i32 %392, %390
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %424, label %395

395:                                              ; preds = %384
  %396 = icmp ult i32 %393, 20
  %397 = select i1 %396, i32 %393, i32 20
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %398
  %400 = load i32, i32* %399, align 4
  %401 = zext i32 %390 to i64
  %402 = shl nuw nsw i64 %401, 8
  %403 = lshr i32 %393, 1
  %404 = zext i32 %403 to i64
  %405 = add nuw nsw i64 %402, %404
  %406 = zext i32 %393 to i64
  %407 = udiv i64 %405, %406
  %408 = trunc i64 %407 to i32
  %409 = sub nsw i32 255, %408
  %410 = lshr i32 %409, 23
  %411 = or i32 %410, %408
  %412 = icmp eq i32 %408, 0
  %413 = zext i1 %412 to i32
  %414 = zext i8 %388 to i32
  %415 = and i32 %411, 255
  %416 = or i32 %415, %413
  %417 = sub nsw i32 256, %400
  %418 = mul nsw i32 %417, %414
  %419 = mul nsw i32 %416, %400
  %420 = add i32 %418, 128
  %421 = add i32 %420, %419
  %422 = lshr i32 %421, 8
  %423 = trunc i32 %422 to i8
  br label %424

424:                                              ; preds = %395, %384
  %425 = phi i8 [ %423, %395 ], [ %388, %384 ]
  %426 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 6
  store i8 %425, i8* %426, align 1
  %427 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 7
  %428 = load i8, i8* %427, align 1
  %429 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 7, i64 0
  %430 = load i32, i32* %429, align 4
  %431 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 7, i64 1
  %432 = load i32, i32* %431, align 4
  %433 = add i32 %432, %430
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %464, label %435

435:                                              ; preds = %424
  %436 = icmp ult i32 %433, 20
  %437 = select i1 %436, i32 %433, i32 20
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = zext i32 %430 to i64
  %442 = shl nuw nsw i64 %441, 8
  %443 = lshr i32 %433, 1
  %444 = zext i32 %443 to i64
  %445 = add nuw nsw i64 %442, %444
  %446 = zext i32 %433 to i64
  %447 = udiv i64 %445, %446
  %448 = trunc i64 %447 to i32
  %449 = sub nsw i32 255, %448
  %450 = lshr i32 %449, 23
  %451 = or i32 %450, %448
  %452 = icmp eq i32 %448, 0
  %453 = zext i1 %452 to i32
  %454 = zext i8 %428 to i32
  %455 = and i32 %451, 255
  %456 = or i32 %455, %453
  %457 = sub nsw i32 256, %440
  %458 = mul nsw i32 %457, %454
  %459 = mul nsw i32 %456, %440
  %460 = add i32 %458, 128
  %461 = add i32 %460, %459
  %462 = lshr i32 %461, 8
  %463 = trunc i32 %462 to i8
  br label %464

464:                                              ; preds = %435, %424
  %465 = phi i8 [ %463, %435 ], [ %428, %424 ]
  %466 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 7
  store i8 %465, i8* %466, align 1
  %467 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 8
  %468 = load i8, i8* %467, align 1
  %469 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 8, i64 0
  %470 = load i32, i32* %469, align 4
  %471 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 8, i64 1
  %472 = load i32, i32* %471, align 4
  %473 = add i32 %472, %470
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %504, label %475

475:                                              ; preds = %464
  %476 = icmp ult i32 %473, 20
  %477 = select i1 %476, i32 %473, i32 20
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %478
  %480 = load i32, i32* %479, align 4
  %481 = zext i32 %470 to i64
  %482 = shl nuw nsw i64 %481, 8
  %483 = lshr i32 %473, 1
  %484 = zext i32 %483 to i64
  %485 = add nuw nsw i64 %482, %484
  %486 = zext i32 %473 to i64
  %487 = udiv i64 %485, %486
  %488 = trunc i64 %487 to i32
  %489 = sub nsw i32 255, %488
  %490 = lshr i32 %489, 23
  %491 = or i32 %490, %488
  %492 = icmp eq i32 %488, 0
  %493 = zext i1 %492 to i32
  %494 = zext i8 %468 to i32
  %495 = and i32 %491, 255
  %496 = or i32 %495, %493
  %497 = sub nsw i32 256, %480
  %498 = mul nsw i32 %497, %494
  %499 = mul nsw i32 %496, %480
  %500 = add i32 %498, 128
  %501 = add i32 %500, %499
  %502 = lshr i32 %501, 8
  %503 = trunc i32 %502 to i8
  br label %504

504:                                              ; preds = %475, %464
  %505 = phi i8 [ %503, %475 ], [ %468, %464 ]
  %506 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 8
  store i8 %505, i8* %506, align 1
  %507 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 3, i64 9
  %508 = load i8, i8* %507, align 1
  %509 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 9, i64 0
  %510 = load i32, i32* %509, align 4
  %511 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 3, i64 9, i64 1
  %512 = load i32, i32* %511, align 4
  %513 = add i32 %512, %510
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %544, label %515

515:                                              ; preds = %504
  %516 = icmp ult i32 %513, 20
  %517 = select i1 %516, i32 %513, i32 20
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds [21 x i32], [21 x i32]* @count_to_update_factor, i64 0, i64 %518
  %520 = load i32, i32* %519, align 4
  %521 = zext i32 %510 to i64
  %522 = shl nuw nsw i64 %521, 8
  %523 = lshr i32 %513, 1
  %524 = zext i32 %523 to i64
  %525 = add nuw nsw i64 %522, %524
  %526 = zext i32 %513 to i64
  %527 = udiv i64 %525, %526
  %528 = trunc i64 %527 to i32
  %529 = sub nsw i32 255, %528
  %530 = lshr i32 %529, 23
  %531 = or i32 %530, %528
  %532 = icmp eq i32 %528, 0
  %533 = zext i1 %532 to i32
  %534 = zext i8 %508 to i32
  %535 = and i32 %531, 255
  %536 = or i32 %535, %533
  %537 = sub nsw i32 256, %520
  %538 = mul nsw i32 %537, %534
  %539 = mul nsw i32 %536, %520
  %540 = add i32 %538, 128
  %541 = add i32 %540, %539
  %542 = lshr i32 %541, 8
  %543 = trunc i32 %542 to i8
  br label %544

544:                                              ; preds = %515, %504
  %545 = phi i8 [ %543, %515 ], [ %508, %504 ]
  %546 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 3, i64 9
  store i8 %545, i8* %546, align 1
  %547 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 4, i64 0, i64 0
  %548 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 4, i64 0, i64 0
  %549 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 4, i64 0, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), i8* %547, i32* %548, i8* %549) #5
  %550 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 4, i64 1, i64 0
  %551 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 4, i64 1, i64 0
  %552 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 4, i64 1, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), i8* %550, i32* %551, i8* %552) #5
  %553 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 %9, i32 12, i32 1, i64 %15, i32 5, i64 0
  %554 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 13, i32 1, i64 %15, i32 5, i64 0
  %555 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %4, i64 0, i32 12, i32 1, i64 %15, i32 5, i64 0
  tail call void @vpx_tree_merge_probs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_mv_fp_tree, i64 0, i64 0), i8* %553, i32* %554, i8* %555) #5
  br i1 %13, label %191, label %110
}

declare void @vpx_tree_merge_probs(i8*, i8*, i32*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_init_mv_probs(%struct.VP9Common* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %3 = load %struct.frame_contexts*, %struct.frame_contexts** %2, align 8
  %4 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %3, i64 0, i32 12, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %4, i8* align 1 getelementptr inbounds (%struct.nmv_context, %struct.nmv_context* @default_nmv_context, i64 0, i32 0, i64 0), i64 69, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
