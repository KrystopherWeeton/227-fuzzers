; ModuleID = '../../ui/gfx/selection_model.cc'
source_filename = "../../ui/gfx/selection_model.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.gfx::SelectionModel" = type <{ %"class.gfx::Range", %"class.std::__1::vector", i32, [4 x i8] }>
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Range"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__16vectorIN3gfx5RangeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str.1 = private unnamed_addr constant [4 x i8] c"%zu\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c",BACKWARD\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c",FORWARD\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN3gfx14SelectionModelC1Ev = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*), void (%"class.gfx::SelectionModel"*)* @_ZN3gfx14SelectionModelC2Ev
@_ZN3gfx14SelectionModelC1EmNS_22LogicalCursorDirectionE = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*, i64, i32), void (%"class.gfx::SelectionModel"*, i64, i32)* @_ZN3gfx14SelectionModelC2EmNS_22LogicalCursorDirectionE
@_ZN3gfx14SelectionModelC1ERKNS_5RangeENS_22LogicalCursorDirectionE = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*, %"class.gfx::Range"*, i32), void (%"class.gfx::SelectionModel"*, %"class.gfx::Range"*, i32)* @_ZN3gfx14SelectionModelC2ERKNS_5RangeENS_22LogicalCursorDirectionE
@_ZN3gfx14SelectionModelC1ERKNSt3__16vectorINS_5RangeENS1_9allocatorIS3_EEEENS_22LogicalCursorDirectionE = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*, %"class.std::__1::vector"*, i32), void (%"class.gfx::SelectionModel"*, %"class.std::__1::vector"*, i32)* @_ZN3gfx14SelectionModelC2ERKNSt3__16vectorINS_5RangeENS1_9allocatorIS3_EEEENS_22LogicalCursorDirectionE
@_ZN3gfx14SelectionModelC1ERKS0_ = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*, %"class.gfx::SelectionModel"*), void (%"class.gfx::SelectionModel"*, %"class.gfx::SelectionModel"*)* @_ZN3gfx14SelectionModelC2ERKS0_
@_ZN3gfx14SelectionModelD1Ev = hidden unnamed_addr alias void (%"class.gfx::SelectionModel"*), void (%"class.gfx::SelectionModel"*)* @_ZN3gfx14SelectionModelD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelC2Ev(%"class.gfx::SelectionModel"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.gfx::SelectionModel"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 36, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelC2EmNS_22LogicalCursorDirectionE(%"class.gfx::SelectionModel"* nocapture, i64, i32) unnamed_addr #0 align 2 {
  %4 = trunc i64 %1 to i32
  %5 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 0, i32 1
  store i32 %4, i32* %6, align 4
  %7 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 2
  store i32 %2, i32* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelC2ERKNS_5RangeENS_22LogicalCursorDirectionE(%"class.gfx::SelectionModel"* nocapture, %"class.gfx::Range"* nocapture readonly dereferenceable(8), i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.gfx::Range"* %1 to i64*
  %5 = bitcast %"class.gfx::SelectionModel"* %0 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 2
  store i32 %2, i32* %9, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelC2ERKNSt3__16vectorINS_5RangeENS1_9allocatorIS3_EEEENS_22LogicalCursorDirectionE(%"class.gfx::SelectionModel"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.std::__1::vector"* %1 to i64**
  %5 = load i64*, i64** %4, align 8
  %6 = bitcast %"class.gfx::SelectionModel"* %0 to i64*
  %7 = load i64, i64* %5, align 4
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #9
  %10 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 2
  store i32 %2, i32* %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %12 = bitcast %"class.gfx::Range"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 3
  %18 = icmp ugt i64 %17, 1
  br i1 %18, label %20, label %19

19:                                               ; preds = %20, %3
  ret void

20:                                               ; preds = %3, %20
  %21 = phi i64 [ %27, %20 ], [ %15, %3 ]
  %22 = phi i64 [ %25, %20 ], [ 1, %3 ]
  %23 = inttoptr i64 %21 to %"class.gfx::Range"*
  %24 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %23, i64 %22
  tail call void @_ZN3gfx14SelectionModel21AddSecondarySelectionERKNS_5RangeE(%"class.gfx::SelectionModel"* %0, %"class.gfx::Range"* dereferenceable(8) %24)
  %25 = add nuw i64 %22, 1
  %26 = load i64, i64* %12, align 8
  %27 = load i64, i64* %14, align 8
  %28 = sub i64 %26, %27
  %29 = ashr exact i64 %28, 3
  %30 = icmp ult i64 %25, %29
  br i1 %30, label %20, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModel21AddSecondarySelectionERKNS_5RangeE(%"class.gfx::SelectionModel"*, %"class.gfx::Range"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast %"class.gfx::SelectionModel"* %0 to i64*
  %8 = load i64, i64* %7, align 4, !noalias !2
  %9 = tail call i8* @_Znwm(i64 8) #10, !noalias !2
  %10 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %9, i8** %10, align 8, !alias.scope !2
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = bitcast %"class.gfx::Range"** %6 to i8**
  store i8* %11, i8** %12, align 8, !alias.scope !2
  %13 = bitcast %"class.gfx::Range"** %5 to i64*
  %14 = bitcast i8* %9 to i64*
  store i64 %8, i64* %14, align 4, !noalias !2
  %15 = ptrtoint i8* %11 to i64
  store i64 %15, i64* %13, align 8, !alias.scope !2
  %16 = bitcast i8* %11 to %"class.gfx::Range"*
  %17 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 0
  %18 = load %"class.gfx::Range"*, %"class.gfx::Range"** %17, align 8, !noalias !2
  %19 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 1
  %20 = load %"class.gfx::Range"*, %"class.gfx::Range"** %19, align 8, !noalias !2
  %21 = call %"class.gfx::Range"* @_ZNSt3__16vectorIN3gfx5RangeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"* nonnull %3, %"class.gfx::Range"* %16, %"class.gfx::Range"* %18, %"class.gfx::Range"* %20) #9
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %23 = load %"class.gfx::Range"*, %"class.gfx::Range"** %22, align 8
  %24 = icmp eq %"class.gfx::Range"* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %2
  %26 = ptrtoint %"class.gfx::Range"* %23 to i64
  store i64 %26, i64* %13, align 8
  %27 = bitcast %"class.gfx::Range"* %23 to i8*
  call void @_ZdlPv(i8* %27) #10
  br label %28

28:                                               ; preds = %2, %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  %29 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %30 = load %"class.gfx::Range"*, %"class.gfx::Range"** %19, align 8
  %31 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %32 = load %"class.gfx::Range"*, %"class.gfx::Range"** %31, align 8
  %33 = icmp eq %"class.gfx::Range"* %30, %32
  %34 = ptrtoint %"class.gfx::Range"* %32 to i64
  br i1 %33, label %42, label %35

35:                                               ; preds = %28
  %36 = bitcast %"class.gfx::Range"* %1 to i64*
  %37 = bitcast %"class.gfx::Range"* %30 to i64*
  %38 = load i64, i64* %36, align 4
  store i64 %38, i64* %37, align 4
  %39 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %30, i64 1
  %40 = ptrtoint %"class.gfx::Range"* %39 to i64
  %41 = bitcast %"class.gfx::Range"** %19 to i64*
  store i64 %40, i64* %41, align 8
  br label %101

42:                                               ; preds = %28
  %43 = ptrtoint %"class.gfx::Range"* %30 to i64
  %44 = bitcast %"class.gfx::Range"** %19 to i64*
  %45 = bitcast %"class.std::__1::vector"* %29 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %43, %46
  %48 = ashr exact i64 %47, 3
  %49 = add nsw i64 %48, 1
  %50 = icmp ugt i64 %49, 2305843009213693951
  br i1 %50, label %51, label %53

51:                                               ; preds = %42
  %52 = bitcast %"class.std::__1::vector"* %29 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %52) #11
  unreachable

53:                                               ; preds = %42
  %54 = bitcast %"class.gfx::Range"** %31 to i64*
  %55 = sub i64 %34, %46
  %56 = ashr exact i64 %55, 3
  %57 = icmp ult i64 %56, 1152921504606846975
  br i1 %57, label %58, label %66

58:                                               ; preds = %53
  %59 = ashr exact i64 %55, 2
  %60 = icmp ult i64 %59, %49
  %61 = select i1 %60, i64 %49, i64 %59
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %71, label %63

63:                                               ; preds = %58
  %64 = icmp ugt i64 %61, 2305843009213693951
  br i1 %64, label %65, label %66

65:                                               ; preds = %63
  call void @abort() #11
  unreachable

66:                                               ; preds = %63, %53
  %67 = phi i64 [ %61, %63 ], [ 2305843009213693951, %53 ]
  %68 = shl i64 %67, 3
  %69 = call i8* @_Znwm(i64 %68) #10
  %70 = bitcast i8* %69 to %"class.gfx::Range"*
  br label %71

71:                                               ; preds = %66, %58
  %72 = phi i64 [ %67, %66 ], [ 0, %58 ]
  %73 = phi %"class.gfx::Range"* [ %70, %66 ], [ null, %58 ]
  %74 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %73, i64 %48
  %75 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %73, i64 %72
  %76 = ptrtoint %"class.gfx::Range"* %75 to i64
  %77 = bitcast %"class.gfx::Range"* %1 to i64*
  %78 = bitcast %"class.gfx::Range"* %74 to i64*
  %79 = load i64, i64* %77, align 4
  store i64 %79, i64* %78, align 4
  %80 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %74, i64 1
  %81 = ptrtoint %"class.gfx::Range"* %80 to i64
  %82 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %29, i64 0, i32 0, i32 0
  %83 = load %"class.gfx::Range"*, %"class.gfx::Range"** %82, align 8
  %84 = load i64, i64* %44, align 8
  %85 = ptrtoint %"class.gfx::Range"* %83 to i64
  %86 = sub i64 %84, %85
  %87 = ashr exact i64 %86, 3
  %88 = sub nsw i64 0, %87
  %89 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %74, i64 %88
  %90 = ptrtoint %"class.gfx::Range"* %89 to i64
  %91 = icmp sgt i64 %86, 0
  br i1 %91, label %92, label %96

92:                                               ; preds = %71
  %93 = bitcast %"class.gfx::Range"* %89 to i8*
  %94 = bitcast %"class.gfx::Range"* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 %86, i1 false) #9
  %95 = load %"class.gfx::Range"*, %"class.gfx::Range"** %82, align 8
  br label %96

96:                                               ; preds = %92, %71
  %97 = phi %"class.gfx::Range"* [ %83, %71 ], [ %95, %92 ]
  store i64 %90, i64* %45, align 8
  store i64 %81, i64* %44, align 8
  store i64 %76, i64* %54, align 8
  %98 = icmp eq %"class.gfx::Range"* %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %96
  %100 = bitcast %"class.gfx::Range"* %97 to i8*
  call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %35, %96, %99
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelC2ERKS0_(%"class.gfx::SelectionModel"*, %"class.gfx::SelectionModel"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gfx::SelectionModel"* %1 to i64*
  %4 = bitcast %"class.gfx::SelectionModel"* %0 to i64*
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 1
  %10 = bitcast %"class.gfx::Range"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %2
  %18 = icmp ugt i64 %15, 2305843009213693951
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #11
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #10
  %23 = bitcast i8* %22 to %"class.gfx::Range"*
  %24 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 1
  %25 = bitcast %"class.gfx::Range"** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %23, i64 %15
  %28 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"class.gfx::Range"* %27, %"class.gfx::Range"** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %30 = load %"class.gfx::Range"*, %"class.gfx::Range"** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast %"class.gfx::Range"** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint %"class.gfx::Range"* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 3
  %39 = bitcast %"class.gfx::Range"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #9
  %40 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %23, i64 %38
  %41 = ptrtoint %"class.gfx::Range"* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %2, %42
  %45 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 2
  %46 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  store i32 %47, i32* %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SelectionModelD2Ev(%"class.gfx::SelectionModel"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.gfx::Range"*, %"class.gfx::Range"** %2, align 8
  %4 = icmp eq %"class.gfx::Range"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.gfx::Range"* %3 to i64
  %7 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"class.gfx::Range"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.gfx::Range"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx14SelectionModel16GetAllSelectionsEv(%"class.std::__1::vector"* noalias sret, %"class.gfx::SelectionModel"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.gfx::SelectionModel"* %1 to i64*
  %6 = load i64, i64* %5, align 4
  %7 = tail call i8* @_Znwm(i64 8) #10
  %8 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = bitcast %"class.gfx::Range"** %4 to i8**
  store i8* %9, i8** %10, align 8
  %11 = bitcast %"class.gfx::Range"** %3 to i64*
  %12 = bitcast i8* %7 to i64*
  store i64 %6, i64* %12, align 4
  %13 = ptrtoint i8* %9 to i64
  store i64 %13, i64* %11, align 8
  %14 = bitcast i8* %9 to %"class.gfx::Range"*
  %15 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 0
  %16 = load %"class.gfx::Range"*, %"class.gfx::Range"** %15, align 8
  %17 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 1
  %18 = load %"class.gfx::Range"*, %"class.gfx::Range"** %17, align 8
  %19 = tail call %"class.gfx::Range"* @_ZNSt3__16vectorIN3gfx5RangeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"* %0, %"class.gfx::Range"* %14, %"class.gfx::Range"* %16, %"class.gfx::Range"* %18)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.gfx::Range"* @_ZNSt3__16vectorIN3gfx5RangeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"*, %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.gfx::Range"*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.gfx::Range"* %2 to i8*
  %6 = bitcast %"class.gfx::Range"* %1 to i8*
  %7 = ptrtoint %"class.gfx::Range"* %1 to i64
  %8 = ptrtoint %"class.gfx::Range"* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint %"class.gfx::Range"* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 3
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %772

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.gfx::Range"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load %"class.gfx::Range"*, %"class.gfx::Range"** %18, align 8
  %20 = ptrtoint %"class.gfx::Range"* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast %"class.gfx::Range"** %18 to i64*
  br i1 %23, label %359, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 3
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %214

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %27
  %31 = icmp eq %"class.gfx::Range"* %30, %3
  br i1 %31, label %209, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %3, i64 %33, i32 0
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 4
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %3, i64 %41, i32 0
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add nsw i64 %48, 1
  %50 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %49
  %51 = icmp ult %"class.gfx::Range"* %19, %50
  %52 = icmp ult %"class.gfx::Range"* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 4611686018427387900
  %56 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %55
  %57 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %55
  %58 = add nsw i64 %55, -4
  %59 = lshr exact i64 %58, 2
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 12
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %66
  %69 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %66
  %70 = bitcast %"class.gfx::Range"* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 4, !alias.scope !5
  %72 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %69, i64 2
  %73 = bitcast %"class.gfx::Range"* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 4, !alias.scope !5
  %75 = bitcast %"class.gfx::Range"* %68 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %75, align 4, !alias.scope !8, !noalias !5
  %76 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %68, i64 2
  %77 = bitcast %"class.gfx::Range"* %76 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 4, !alias.scope !8, !noalias !5
  %78 = or i64 %66, 4
  %79 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %78
  %80 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %78
  %81 = bitcast %"class.gfx::Range"* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 4, !alias.scope !5
  %83 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %80, i64 2
  %84 = bitcast %"class.gfx::Range"* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 4, !alias.scope !5
  %86 = bitcast %"class.gfx::Range"* %79 to <2 x i64>*
  store <2 x i64> %82, <2 x i64>* %86, align 4, !alias.scope !8, !noalias !5
  %87 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %79, i64 2
  %88 = bitcast %"class.gfx::Range"* %87 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %88, align 4, !alias.scope !8, !noalias !5
  %89 = or i64 %66, 8
  %90 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %89
  %91 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %89
  %92 = bitcast %"class.gfx::Range"* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 4, !alias.scope !5
  %94 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %91, i64 2
  %95 = bitcast %"class.gfx::Range"* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 4, !alias.scope !5
  %97 = bitcast %"class.gfx::Range"* %90 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 4, !alias.scope !8, !noalias !5
  %98 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %90, i64 2
  %99 = bitcast %"class.gfx::Range"* %98 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %99, align 4, !alias.scope !8, !noalias !5
  %100 = or i64 %66, 12
  %101 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %100
  %102 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %100
  %103 = bitcast %"class.gfx::Range"* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 4, !alias.scope !5
  %105 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %102, i64 2
  %106 = bitcast %"class.gfx::Range"* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 4, !alias.scope !5
  %108 = bitcast %"class.gfx::Range"* %101 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 4, !alias.scope !8, !noalias !5
  %109 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %101, i64 2
  %110 = bitcast %"class.gfx::Range"* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 4, !alias.scope !8, !noalias !5
  %111 = add i64 %66, 16
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !10

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %118
  %121 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %30, i64 %118
  %122 = bitcast %"class.gfx::Range"* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 4, !alias.scope !5
  %124 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %121, i64 2
  %125 = bitcast %"class.gfx::Range"* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 4, !alias.scope !5
  %127 = bitcast %"class.gfx::Range"* %120 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %127, align 4, !alias.scope !8, !noalias !5
  %128 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %120, i64 2
  %129 = bitcast %"class.gfx::Range"* %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 4, !alias.scope !8, !noalias !5
  %130 = add i64 %118, 4
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !12

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %206, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi %"class.gfx::Range"* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi %"class.gfx::Range"* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint %"class.gfx::Range"* %137 to i64
  %139 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %3, i64 -1, i32 0
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 3
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %135, %146
  %147 = phi %"class.gfx::Range"* [ %154, %146 ], [ %136, %135 ]
  %148 = phi %"class.gfx::Range"* [ %153, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %155, %146 ], [ %144, %135 ]
  %150 = bitcast %"class.gfx::Range"* %147 to i64*
  %151 = bitcast %"class.gfx::Range"* %148 to i64*
  %152 = load i64, i64* %151, align 4
  store i64 %152, i64* %150, align 4
  %153 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %148, i64 1
  %154 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %147, i64 1
  %155 = add i64 %149, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !14

157:                                              ; preds = %146, %135
  %158 = phi %"class.gfx::Range"* [ undef, %135 ], [ %154, %146 ]
  %159 = phi %"class.gfx::Range"* [ %136, %135 ], [ %154, %146 ]
  %160 = phi %"class.gfx::Range"* [ %137, %135 ], [ %153, %146 ]
  %161 = icmp ult i64 %141, 56
  br i1 %161, label %206, label %162

162:                                              ; preds = %157, %162
  %163 = phi %"class.gfx::Range"* [ %204, %162 ], [ %159, %157 ]
  %164 = phi %"class.gfx::Range"* [ %203, %162 ], [ %160, %157 ]
  %165 = bitcast %"class.gfx::Range"* %163 to i64*
  %166 = bitcast %"class.gfx::Range"* %164 to i64*
  %167 = load i64, i64* %166, align 4
  store i64 %167, i64* %165, align 4
  %168 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 1
  %169 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 1
  %170 = bitcast %"class.gfx::Range"* %169 to i64*
  %171 = bitcast %"class.gfx::Range"* %168 to i64*
  %172 = load i64, i64* %171, align 4
  store i64 %172, i64* %170, align 4
  %173 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 2
  %174 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 2
  %175 = bitcast %"class.gfx::Range"* %174 to i64*
  %176 = bitcast %"class.gfx::Range"* %173 to i64*
  %177 = load i64, i64* %176, align 4
  store i64 %177, i64* %175, align 4
  %178 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 3
  %179 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 3
  %180 = bitcast %"class.gfx::Range"* %179 to i64*
  %181 = bitcast %"class.gfx::Range"* %178 to i64*
  %182 = load i64, i64* %181, align 4
  store i64 %182, i64* %180, align 4
  %183 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 4
  %184 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 4
  %185 = bitcast %"class.gfx::Range"* %184 to i64*
  %186 = bitcast %"class.gfx::Range"* %183 to i64*
  %187 = load i64, i64* %186, align 4
  store i64 %187, i64* %185, align 4
  %188 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 5
  %189 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 5
  %190 = bitcast %"class.gfx::Range"* %189 to i64*
  %191 = bitcast %"class.gfx::Range"* %188 to i64*
  %192 = load i64, i64* %191, align 4
  store i64 %192, i64* %190, align 4
  %193 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 6
  %194 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 6
  %195 = bitcast %"class.gfx::Range"* %194 to i64*
  %196 = bitcast %"class.gfx::Range"* %193 to i64*
  %197 = load i64, i64* %196, align 4
  store i64 %197, i64* %195, align 4
  %198 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 7
  %199 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 7
  %200 = bitcast %"class.gfx::Range"* %199 to i64*
  %201 = bitcast %"class.gfx::Range"* %198 to i64*
  %202 = load i64, i64* %201, align 4
  store i64 %202, i64* %200, align 4
  %203 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %164, i64 8
  %204 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %163, i64 8
  %205 = icmp eq %"class.gfx::Range"* %203, %3
  br i1 %205, label %206, label %162, !llvm.loop !15

206:                                              ; preds = %157, %162, %133
  %207 = phi %"class.gfx::Range"* [ %56, %133 ], [ %158, %157 ], [ %204, %162 ]
  %208 = ptrtoint %"class.gfx::Range"* %207 to i64
  br label %209

209:                                              ; preds = %206, %29
  %210 = phi i64 [ %20, %29 ], [ %208, %206 ]
  store i64 %210, i64* %24, align 8
  %211 = icmp sgt i64 %26, 0
  br i1 %211, label %212, label %772

212:                                              ; preds = %209
  %213 = inttoptr i64 %210 to %"class.gfx::Range"*
  br label %214

214:                                              ; preds = %212, %25
  %215 = phi i64 [ %210, %212 ], [ %20, %25 ]
  %216 = phi %"class.gfx::Range"* [ %213, %212 ], [ %19, %25 ]
  %217 = phi %"class.gfx::Range"* [ %30, %212 ], [ %3, %25 ]
  %218 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %12
  %219 = ptrtoint %"class.gfx::Range"* %218 to i64
  %220 = sub i64 %215, %219
  %221 = ashr exact i64 %220, 3
  %222 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %221
  %223 = icmp ult %"class.gfx::Range"* %222, %19
  br i1 %223, label %224, label %337

224:                                              ; preds = %214
  %225 = sub nsw i64 0, %221
  %226 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %225, i32 0
  %227 = bitcast i32* %226 to i8*
  %228 = xor i64 %7, -1
  %229 = getelementptr i8, i8* %227, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = lshr i64 %230, 3
  %232 = add nuw nsw i64 %231, 1
  %233 = icmp ult i64 %232, 4
  br i1 %233, label %234, label %237

234:                                              ; preds = %332, %237, %224
  %235 = phi %"class.gfx::Range"* [ %216, %237 ], [ %216, %224 ], [ %255, %332 ]
  %236 = phi %"class.gfx::Range"* [ %222, %237 ], [ %222, %224 ], [ %256, %332 ]
  br label %345

237:                                              ; preds = %224
  %238 = sub nsw i64 0, %221
  %239 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %19, i64 %238, i32 0
  %240 = bitcast i32* %239 to i8*
  %241 = xor i64 %7, -1
  %242 = getelementptr i8, i8* %240, i64 %241
  %243 = ptrtoint i8* %242 to i64
  %244 = lshr i64 %243, 3
  %245 = add nuw nsw i64 %244, 1
  %246 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %245
  %247 = add nsw i64 %221, %244
  %248 = add nsw i64 %247, 1
  %249 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %248
  %250 = icmp ult %"class.gfx::Range"* %216, %249
  %251 = icmp ult %"class.gfx::Range"* %222, %246
  %252 = and i1 %250, %251
  br i1 %252, label %234, label %253

253:                                              ; preds = %237
  %254 = and i64 %232, 4611686018427387900
  %255 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %254
  %256 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %254
  %257 = add nsw i64 %254, -4
  %258 = lshr exact i64 %257, 2
  %259 = add nuw nsw i64 %258, 1
  %260 = and i64 %259, 3
  %261 = icmp ult i64 %257, 12
  br i1 %261, label %313, label %262

262:                                              ; preds = %253
  %263 = sub nsw i64 %259, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i64 [ 0, %262 ], [ %310, %264 ]
  %266 = phi i64 [ %263, %262 ], [ %311, %264 ]
  %267 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %265
  %268 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %265
  %269 = bitcast %"class.gfx::Range"* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 4, !alias.scope !16
  %271 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %268, i64 2
  %272 = bitcast %"class.gfx::Range"* %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 4, !alias.scope !16
  %274 = bitcast %"class.gfx::Range"* %267 to <2 x i64>*
  store <2 x i64> %270, <2 x i64>* %274, align 4, !alias.scope !19, !noalias !16
  %275 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %267, i64 2
  %276 = bitcast %"class.gfx::Range"* %275 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %276, align 4, !alias.scope !19, !noalias !16
  %277 = or i64 %265, 4
  %278 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %277
  %279 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %277
  %280 = bitcast %"class.gfx::Range"* %279 to <2 x i64>*
  %281 = load <2 x i64>, <2 x i64>* %280, align 4, !alias.scope !16
  %282 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %279, i64 2
  %283 = bitcast %"class.gfx::Range"* %282 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 4, !alias.scope !16
  %285 = bitcast %"class.gfx::Range"* %278 to <2 x i64>*
  store <2 x i64> %281, <2 x i64>* %285, align 4, !alias.scope !19, !noalias !16
  %286 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %278, i64 2
  %287 = bitcast %"class.gfx::Range"* %286 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %287, align 4, !alias.scope !19, !noalias !16
  %288 = or i64 %265, 8
  %289 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %288
  %290 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %288
  %291 = bitcast %"class.gfx::Range"* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 4, !alias.scope !16
  %293 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %290, i64 2
  %294 = bitcast %"class.gfx::Range"* %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 4, !alias.scope !16
  %296 = bitcast %"class.gfx::Range"* %289 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %296, align 4, !alias.scope !19, !noalias !16
  %297 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %289, i64 2
  %298 = bitcast %"class.gfx::Range"* %297 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %298, align 4, !alias.scope !19, !noalias !16
  %299 = or i64 %265, 12
  %300 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %299
  %301 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %299
  %302 = bitcast %"class.gfx::Range"* %301 to <2 x i64>*
  %303 = load <2 x i64>, <2 x i64>* %302, align 4, !alias.scope !16
  %304 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %301, i64 2
  %305 = bitcast %"class.gfx::Range"* %304 to <2 x i64>*
  %306 = load <2 x i64>, <2 x i64>* %305, align 4, !alias.scope !16
  %307 = bitcast %"class.gfx::Range"* %300 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %307, align 4, !alias.scope !19, !noalias !16
  %308 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %300, i64 2
  %309 = bitcast %"class.gfx::Range"* %308 to <2 x i64>*
  store <2 x i64> %306, <2 x i64>* %309, align 4, !alias.scope !19, !noalias !16
  %310 = add i64 %265, 16
  %311 = add i64 %266, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %264, !llvm.loop !21

313:                                              ; preds = %264, %253
  %314 = phi i64 [ 0, %253 ], [ %310, %264 ]
  %315 = icmp eq i64 %260, 0
  br i1 %315, label %332, label %316

316:                                              ; preds = %313, %316
  %317 = phi i64 [ %329, %316 ], [ %314, %313 ]
  %318 = phi i64 [ %330, %316 ], [ %260, %313 ]
  %319 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %317
  %320 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %222, i64 %317
  %321 = bitcast %"class.gfx::Range"* %320 to <2 x i64>*
  %322 = load <2 x i64>, <2 x i64>* %321, align 4, !alias.scope !16
  %323 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %320, i64 2
  %324 = bitcast %"class.gfx::Range"* %323 to <2 x i64>*
  %325 = load <2 x i64>, <2 x i64>* %324, align 4, !alias.scope !16
  %326 = bitcast %"class.gfx::Range"* %319 to <2 x i64>*
  store <2 x i64> %322, <2 x i64>* %326, align 4, !alias.scope !19, !noalias !16
  %327 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %319, i64 2
  %328 = bitcast %"class.gfx::Range"* %327 to <2 x i64>*
  store <2 x i64> %325, <2 x i64>* %328, align 4, !alias.scope !19, !noalias !16
  %329 = add i64 %317, 4
  %330 = add i64 %318, -1
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %332, label %316, !llvm.loop !22

332:                                              ; preds = %316, %313
  %333 = icmp eq i64 %232, %254
  br i1 %333, label %334, label %234

334:                                              ; preds = %345, %332
  %335 = phi %"class.gfx::Range"* [ %255, %332 ], [ %352, %345 ]
  %336 = ptrtoint %"class.gfx::Range"* %335 to i64
  br label %337

337:                                              ; preds = %334, %214
  %338 = phi i64 [ %336, %334 ], [ %215, %214 ]
  store i64 %338, i64* %24, align 8
  %339 = icmp eq i64 %220, 0
  br i1 %339, label %354, label %340

340:                                              ; preds = %337
  %341 = sub nsw i64 0, %221
  %342 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %216, i64 %341
  %343 = bitcast %"class.gfx::Range"* %342 to i8*
  %344 = bitcast %"class.gfx::Range"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %343, i8* align 4 %344, i64 %220, i1 false) #9
  br label %354

345:                                              ; preds = %234, %345
  %346 = phi %"class.gfx::Range"* [ %352, %345 ], [ %235, %234 ]
  %347 = phi %"class.gfx::Range"* [ %351, %345 ], [ %236, %234 ]
  %348 = bitcast %"class.gfx::Range"* %347 to i64*
  %349 = bitcast %"class.gfx::Range"* %346 to i64*
  %350 = load i64, i64* %348, align 4
  store i64 %350, i64* %349, align 4
  %351 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %347, i64 1
  %352 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %346, i64 1
  %353 = icmp ult %"class.gfx::Range"* %351, %19
  br i1 %353, label %345, label %334, !llvm.loop !23

354:                                              ; preds = %337, %340
  %355 = ptrtoint %"class.gfx::Range"* %217 to i64
  %356 = sub i64 %355, %8
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %772, label %358

358:                                              ; preds = %354
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %356, i1 false) #9
  br label %772

359:                                              ; preds = %14
  %360 = bitcast %"class.std::__1::vector"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %20, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %12
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #11
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %17, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %7, %361
  %374 = ashr exact i64 %373, 3
  br label %385

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %7, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %391, label %382

382:                                              ; preds = %375
  %383 = icmp ugt i64 %378, 2305843009213693951
  br i1 %383, label %384, label %385

384:                                              ; preds = %382
  tail call void @abort() #11
  unreachable

385:                                              ; preds = %372, %382
  %386 = phi i64 [ 2305843009213693951, %372 ], [ %378, %382 ]
  %387 = phi i64 [ %374, %372 ], [ %380, %382 ]
  %388 = shl i64 %386, 3
  %389 = tail call i8* @_Znwm(i64 %388) #10
  %390 = bitcast i8* %389 to %"class.gfx::Range"*
  br label %391

391:                                              ; preds = %385, %375
  %392 = phi i64 [ %387, %385 ], [ %380, %375 ]
  %393 = phi i64 [ %386, %385 ], [ 0, %375 ]
  %394 = phi %"class.gfx::Range"* [ %390, %385 ], [ null, %375 ]
  %395 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %394, i64 %392
  %396 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %394, i64 %393
  %397 = ptrtoint %"class.gfx::Range"* %396 to i64
  %398 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %12
  %399 = add i64 %11, -8
  %400 = lshr i64 %399, 3
  %401 = add nuw nsw i64 %400, 1
  %402 = icmp ult i64 %401, 4
  br i1 %402, label %496, label %403

403:                                              ; preds = %391
  %404 = add i64 %11, -8
  %405 = lshr i64 %404, 3
  %406 = add nsw i64 %392, %405
  %407 = add nsw i64 %406, 1
  %408 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %394, i64 %407
  %409 = add nuw nsw i64 %405, 1
  %410 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %409
  %411 = icmp ult %"class.gfx::Range"* %395, %410
  %412 = icmp ugt %"class.gfx::Range"* %408, %2
  %413 = and i1 %411, %412
  br i1 %413, label %496, label %414

414:                                              ; preds = %403
  %415 = and i64 %401, 4611686018427387900
  %416 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %415
  %417 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %415
  %418 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %415
  %419 = add nsw i64 %415, -4
  %420 = lshr exact i64 %419, 2
  %421 = add nuw nsw i64 %420, 1
  %422 = and i64 %421, 3
  %423 = icmp ult i64 %419, 12
  br i1 %423, label %475, label %424

424:                                              ; preds = %414
  %425 = sub nsw i64 %421, %422
  br label %426

426:                                              ; preds = %426, %424
  %427 = phi i64 [ 0, %424 ], [ %472, %426 ]
  %428 = phi i64 [ %425, %424 ], [ %473, %426 ]
  %429 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %427
  %430 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %427
  %431 = bitcast %"class.gfx::Range"* %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 4, !alias.scope !24
  %433 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %430, i64 2
  %434 = bitcast %"class.gfx::Range"* %433 to <2 x i64>*
  %435 = load <2 x i64>, <2 x i64>* %434, align 4, !alias.scope !24
  %436 = bitcast %"class.gfx::Range"* %429 to <2 x i64>*
  store <2 x i64> %432, <2 x i64>* %436, align 4, !alias.scope !27, !noalias !24
  %437 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %429, i64 2
  %438 = bitcast %"class.gfx::Range"* %437 to <2 x i64>*
  store <2 x i64> %435, <2 x i64>* %438, align 4, !alias.scope !27, !noalias !24
  %439 = or i64 %427, 4
  %440 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %439
  %441 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %439
  %442 = bitcast %"class.gfx::Range"* %441 to <2 x i64>*
  %443 = load <2 x i64>, <2 x i64>* %442, align 4, !alias.scope !24
  %444 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %441, i64 2
  %445 = bitcast %"class.gfx::Range"* %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 4, !alias.scope !24
  %447 = bitcast %"class.gfx::Range"* %440 to <2 x i64>*
  store <2 x i64> %443, <2 x i64>* %447, align 4, !alias.scope !27, !noalias !24
  %448 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %440, i64 2
  %449 = bitcast %"class.gfx::Range"* %448 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %449, align 4, !alias.scope !27, !noalias !24
  %450 = or i64 %427, 8
  %451 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %450
  %452 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %450
  %453 = bitcast %"class.gfx::Range"* %452 to <2 x i64>*
  %454 = load <2 x i64>, <2 x i64>* %453, align 4, !alias.scope !24
  %455 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %452, i64 2
  %456 = bitcast %"class.gfx::Range"* %455 to <2 x i64>*
  %457 = load <2 x i64>, <2 x i64>* %456, align 4, !alias.scope !24
  %458 = bitcast %"class.gfx::Range"* %451 to <2 x i64>*
  store <2 x i64> %454, <2 x i64>* %458, align 4, !alias.scope !27, !noalias !24
  %459 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %451, i64 2
  %460 = bitcast %"class.gfx::Range"* %459 to <2 x i64>*
  store <2 x i64> %457, <2 x i64>* %460, align 4, !alias.scope !27, !noalias !24
  %461 = or i64 %427, 12
  %462 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %461
  %463 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %461
  %464 = bitcast %"class.gfx::Range"* %463 to <2 x i64>*
  %465 = load <2 x i64>, <2 x i64>* %464, align 4, !alias.scope !24
  %466 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %463, i64 2
  %467 = bitcast %"class.gfx::Range"* %466 to <2 x i64>*
  %468 = load <2 x i64>, <2 x i64>* %467, align 4, !alias.scope !24
  %469 = bitcast %"class.gfx::Range"* %462 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %469, align 4, !alias.scope !27, !noalias !24
  %470 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %462, i64 2
  %471 = bitcast %"class.gfx::Range"* %470 to <2 x i64>*
  store <2 x i64> %468, <2 x i64>* %471, align 4, !alias.scope !27, !noalias !24
  %472 = add i64 %427, 16
  %473 = add i64 %428, -4
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %475, label %426, !llvm.loop !29

475:                                              ; preds = %426, %414
  %476 = phi i64 [ 0, %414 ], [ %472, %426 ]
  %477 = icmp eq i64 %422, 0
  br i1 %477, label %494, label %478

478:                                              ; preds = %475, %478
  %479 = phi i64 [ %491, %478 ], [ %476, %475 ]
  %480 = phi i64 [ %492, %478 ], [ %422, %475 ]
  %481 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %479
  %482 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %2, i64 %479
  %483 = bitcast %"class.gfx::Range"* %482 to <2 x i64>*
  %484 = load <2 x i64>, <2 x i64>* %483, align 4, !alias.scope !24
  %485 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %482, i64 2
  %486 = bitcast %"class.gfx::Range"* %485 to <2 x i64>*
  %487 = load <2 x i64>, <2 x i64>* %486, align 4, !alias.scope !24
  %488 = bitcast %"class.gfx::Range"* %481 to <2 x i64>*
  store <2 x i64> %484, <2 x i64>* %488, align 4, !alias.scope !27, !noalias !24
  %489 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %481, i64 2
  %490 = bitcast %"class.gfx::Range"* %489 to <2 x i64>*
  store <2 x i64> %487, <2 x i64>* %490, align 4, !alias.scope !27, !noalias !24
  %491 = add i64 %479, 4
  %492 = add i64 %480, -1
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %478, !llvm.loop !30

494:                                              ; preds = %478, %475
  %495 = icmp eq i64 %401, %415
  br i1 %495, label %572, label %496

496:                                              ; preds = %494, %403, %391
  %497 = phi %"class.gfx::Range"* [ %395, %403 ], [ %395, %391 ], [ %416, %494 ]
  %498 = phi %"class.gfx::Range"* [ %395, %403 ], [ %395, %391 ], [ %417, %494 ]
  %499 = phi %"class.gfx::Range"* [ %2, %403 ], [ %2, %391 ], [ %418, %494 ]
  %500 = ptrtoint %"class.gfx::Range"* %497 to i64
  %501 = add nsw i64 %392, %12
  %502 = add nsw i64 %501, -1
  %503 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %394, i64 %502, i32 0
  %504 = ptrtoint i32* %503 to i64
  %505 = sub i64 %504, %500
  %506 = lshr i64 %505, 3
  %507 = add nuw nsw i64 %506, 1
  %508 = and i64 %507, 7
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %522, label %510

510:                                              ; preds = %496, %510
  %511 = phi %"class.gfx::Range"* [ %518, %510 ], [ %497, %496 ]
  %512 = phi %"class.gfx::Range"* [ %518, %510 ], [ %498, %496 ]
  %513 = phi %"class.gfx::Range"* [ %519, %510 ], [ %499, %496 ]
  %514 = phi i64 [ %520, %510 ], [ %508, %496 ]
  %515 = bitcast %"class.gfx::Range"* %513 to i64*
  %516 = bitcast %"class.gfx::Range"* %512 to i64*
  %517 = load i64, i64* %515, align 4
  store i64 %517, i64* %516, align 4
  %518 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %511, i64 1
  %519 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %513, i64 1
  %520 = add i64 %514, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %510, !llvm.loop !31

522:                                              ; preds = %510, %496
  %523 = phi %"class.gfx::Range"* [ %497, %496 ], [ %518, %510 ]
  %524 = phi %"class.gfx::Range"* [ %498, %496 ], [ %518, %510 ]
  %525 = phi %"class.gfx::Range"* [ %499, %496 ], [ %519, %510 ]
  %526 = icmp ult i64 %505, 56
  br i1 %526, label %572, label %527

527:                                              ; preds = %522, %527
  %528 = phi %"class.gfx::Range"* [ %569, %527 ], [ %523, %522 ]
  %529 = phi %"class.gfx::Range"* [ %569, %527 ], [ %524, %522 ]
  %530 = phi %"class.gfx::Range"* [ %570, %527 ], [ %525, %522 ]
  %531 = bitcast %"class.gfx::Range"* %530 to i64*
  %532 = bitcast %"class.gfx::Range"* %529 to i64*
  %533 = load i64, i64* %531, align 4
  store i64 %533, i64* %532, align 4
  %534 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 1
  %535 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 1
  %536 = bitcast %"class.gfx::Range"* %535 to i64*
  %537 = bitcast %"class.gfx::Range"* %534 to i64*
  %538 = load i64, i64* %536, align 4
  store i64 %538, i64* %537, align 4
  %539 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 2
  %540 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 2
  %541 = bitcast %"class.gfx::Range"* %540 to i64*
  %542 = bitcast %"class.gfx::Range"* %539 to i64*
  %543 = load i64, i64* %541, align 4
  store i64 %543, i64* %542, align 4
  %544 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 3
  %545 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 3
  %546 = bitcast %"class.gfx::Range"* %545 to i64*
  %547 = bitcast %"class.gfx::Range"* %544 to i64*
  %548 = load i64, i64* %546, align 4
  store i64 %548, i64* %547, align 4
  %549 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 4
  %550 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 4
  %551 = bitcast %"class.gfx::Range"* %550 to i64*
  %552 = bitcast %"class.gfx::Range"* %549 to i64*
  %553 = load i64, i64* %551, align 4
  store i64 %553, i64* %552, align 4
  %554 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 5
  %555 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 5
  %556 = bitcast %"class.gfx::Range"* %555 to i64*
  %557 = bitcast %"class.gfx::Range"* %554 to i64*
  %558 = load i64, i64* %556, align 4
  store i64 %558, i64* %557, align 4
  %559 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 6
  %560 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 6
  %561 = bitcast %"class.gfx::Range"* %560 to i64*
  %562 = bitcast %"class.gfx::Range"* %559 to i64*
  %563 = load i64, i64* %561, align 4
  store i64 %563, i64* %562, align 4
  %564 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 7
  %565 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 7
  %566 = bitcast %"class.gfx::Range"* %565 to i64*
  %567 = bitcast %"class.gfx::Range"* %564 to i64*
  %568 = load i64, i64* %566, align 4
  store i64 %568, i64* %567, align 4
  %569 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %528, i64 8
  %570 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %530, i64 8
  %571 = icmp eq %"class.gfx::Range"* %398, %569
  br i1 %571, label %572, label %527, !llvm.loop !32

572:                                              ; preds = %522, %527, %494
  %573 = load %"class.gfx::Range"*, %"class.gfx::Range"** %9, align 8
  %574 = ptrtoint %"class.gfx::Range"* %573 to i64
  %575 = sub i64 %7, %574
  %576 = ashr exact i64 %575, 3
  %577 = sub nsw i64 0, %576
  %578 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %395, i64 %577
  %579 = ptrtoint %"class.gfx::Range"* %578 to i64
  %580 = icmp sgt i64 %575, 0
  br i1 %580, label %581, label %584

581:                                              ; preds = %572
  %582 = bitcast %"class.gfx::Range"* %578 to i8*
  %583 = bitcast %"class.gfx::Range"* %573 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %582, i8* align 4 %583, i64 %575, i1 false) #9
  br label %584

584:                                              ; preds = %581, %572
  %585 = load %"class.gfx::Range"*, %"class.gfx::Range"** %18, align 8
  %586 = icmp eq %"class.gfx::Range"* %585, %1
  br i1 %586, label %765, label %587

587:                                              ; preds = %584
  %588 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %585, i64 -1, i32 0
  %589 = ptrtoint i32* %588 to i64
  %590 = sub i64 %589, %7
  %591 = lshr i64 %590, 3
  %592 = add nuw nsw i64 %591, 1
  %593 = icmp ult i64 %592, 4
  br i1 %593, label %690, label %594

594:                                              ; preds = %587
  %595 = add nsw i64 %392, %12
  %596 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %585, i64 -1, i32 0
  %597 = ptrtoint i32* %596 to i64
  %598 = sub i64 %597, %7
  %599 = lshr i64 %598, 3
  %600 = add nsw i64 %595, %599
  %601 = add nsw i64 %600, 1
  %602 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %394, i64 %601
  %603 = add nuw nsw i64 %599, 1
  %604 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %603
  %605 = icmp ult %"class.gfx::Range"* %398, %604
  %606 = icmp ugt %"class.gfx::Range"* %602, %1
  %607 = and i1 %605, %606
  br i1 %607, label %690, label %608

608:                                              ; preds = %594
  %609 = and i64 %592, 4611686018427387900
  %610 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %609
  %611 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %609
  %612 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %609
  %613 = add nsw i64 %609, -4
  %614 = lshr exact i64 %613, 2
  %615 = add nuw nsw i64 %614, 1
  %616 = and i64 %615, 3
  %617 = icmp ult i64 %613, 12
  br i1 %617, label %669, label %618

618:                                              ; preds = %608
  %619 = sub nsw i64 %615, %616
  br label %620

620:                                              ; preds = %620, %618
  %621 = phi i64 [ 0, %618 ], [ %666, %620 ]
  %622 = phi i64 [ %619, %618 ], [ %667, %620 ]
  %623 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %621
  %624 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %621
  %625 = bitcast %"class.gfx::Range"* %624 to <2 x i64>*
  %626 = load <2 x i64>, <2 x i64>* %625, align 4, !alias.scope !33
  %627 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %624, i64 2
  %628 = bitcast %"class.gfx::Range"* %627 to <2 x i64>*
  %629 = load <2 x i64>, <2 x i64>* %628, align 4, !alias.scope !33
  %630 = bitcast %"class.gfx::Range"* %623 to <2 x i64>*
  store <2 x i64> %626, <2 x i64>* %630, align 4, !alias.scope !36, !noalias !33
  %631 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %623, i64 2
  %632 = bitcast %"class.gfx::Range"* %631 to <2 x i64>*
  store <2 x i64> %629, <2 x i64>* %632, align 4, !alias.scope !36, !noalias !33
  %633 = or i64 %621, 4
  %634 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %633
  %635 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %633
  %636 = bitcast %"class.gfx::Range"* %635 to <2 x i64>*
  %637 = load <2 x i64>, <2 x i64>* %636, align 4, !alias.scope !33
  %638 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %635, i64 2
  %639 = bitcast %"class.gfx::Range"* %638 to <2 x i64>*
  %640 = load <2 x i64>, <2 x i64>* %639, align 4, !alias.scope !33
  %641 = bitcast %"class.gfx::Range"* %634 to <2 x i64>*
  store <2 x i64> %637, <2 x i64>* %641, align 4, !alias.scope !36, !noalias !33
  %642 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %634, i64 2
  %643 = bitcast %"class.gfx::Range"* %642 to <2 x i64>*
  store <2 x i64> %640, <2 x i64>* %643, align 4, !alias.scope !36, !noalias !33
  %644 = or i64 %621, 8
  %645 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %644
  %646 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %644
  %647 = bitcast %"class.gfx::Range"* %646 to <2 x i64>*
  %648 = load <2 x i64>, <2 x i64>* %647, align 4, !alias.scope !33
  %649 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %646, i64 2
  %650 = bitcast %"class.gfx::Range"* %649 to <2 x i64>*
  %651 = load <2 x i64>, <2 x i64>* %650, align 4, !alias.scope !33
  %652 = bitcast %"class.gfx::Range"* %645 to <2 x i64>*
  store <2 x i64> %648, <2 x i64>* %652, align 4, !alias.scope !36, !noalias !33
  %653 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %645, i64 2
  %654 = bitcast %"class.gfx::Range"* %653 to <2 x i64>*
  store <2 x i64> %651, <2 x i64>* %654, align 4, !alias.scope !36, !noalias !33
  %655 = or i64 %621, 12
  %656 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %655
  %657 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %655
  %658 = bitcast %"class.gfx::Range"* %657 to <2 x i64>*
  %659 = load <2 x i64>, <2 x i64>* %658, align 4, !alias.scope !33
  %660 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %657, i64 2
  %661 = bitcast %"class.gfx::Range"* %660 to <2 x i64>*
  %662 = load <2 x i64>, <2 x i64>* %661, align 4, !alias.scope !33
  %663 = bitcast %"class.gfx::Range"* %656 to <2 x i64>*
  store <2 x i64> %659, <2 x i64>* %663, align 4, !alias.scope !36, !noalias !33
  %664 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %656, i64 2
  %665 = bitcast %"class.gfx::Range"* %664 to <2 x i64>*
  store <2 x i64> %662, <2 x i64>* %665, align 4, !alias.scope !36, !noalias !33
  %666 = add i64 %621, 16
  %667 = add i64 %622, -4
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %620, !llvm.loop !38

669:                                              ; preds = %620, %608
  %670 = phi i64 [ 0, %608 ], [ %666, %620 ]
  %671 = icmp eq i64 %616, 0
  br i1 %671, label %688, label %672

672:                                              ; preds = %669, %672
  %673 = phi i64 [ %685, %672 ], [ %670, %669 ]
  %674 = phi i64 [ %686, %672 ], [ %616, %669 ]
  %675 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %398, i64 %673
  %676 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %1, i64 %673
  %677 = bitcast %"class.gfx::Range"* %676 to <2 x i64>*
  %678 = load <2 x i64>, <2 x i64>* %677, align 4, !alias.scope !33
  %679 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %676, i64 2
  %680 = bitcast %"class.gfx::Range"* %679 to <2 x i64>*
  %681 = load <2 x i64>, <2 x i64>* %680, align 4, !alias.scope !33
  %682 = bitcast %"class.gfx::Range"* %675 to <2 x i64>*
  store <2 x i64> %678, <2 x i64>* %682, align 4, !alias.scope !36, !noalias !33
  %683 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %675, i64 2
  %684 = bitcast %"class.gfx::Range"* %683 to <2 x i64>*
  store <2 x i64> %681, <2 x i64>* %684, align 4, !alias.scope !36, !noalias !33
  %685 = add i64 %673, 4
  %686 = add i64 %674, -1
  %687 = icmp eq i64 %686, 0
  br i1 %687, label %688, label %672, !llvm.loop !39

688:                                              ; preds = %672, %669
  %689 = icmp eq i64 %592, %609
  br i1 %689, label %765, label %690

690:                                              ; preds = %688, %594, %587
  %691 = phi %"class.gfx::Range"* [ %398, %594 ], [ %398, %587 ], [ %610, %688 ]
  %692 = phi %"class.gfx::Range"* [ %398, %594 ], [ %398, %587 ], [ %611, %688 ]
  %693 = phi %"class.gfx::Range"* [ %1, %594 ], [ %1, %587 ], [ %612, %688 ]
  %694 = ptrtoint %"class.gfx::Range"* %693 to i64
  %695 = getelementptr %"class.gfx::Range", %"class.gfx::Range"* %585, i64 -1, i32 0
  %696 = ptrtoint i32* %695 to i64
  %697 = sub i64 %696, %694
  %698 = lshr i64 %697, 3
  %699 = add nuw nsw i64 %698, 1
  %700 = and i64 %699, 7
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %714, label %702

702:                                              ; preds = %690, %702
  %703 = phi %"class.gfx::Range"* [ %711, %702 ], [ %691, %690 ]
  %704 = phi %"class.gfx::Range"* [ %711, %702 ], [ %692, %690 ]
  %705 = phi %"class.gfx::Range"* [ %710, %702 ], [ %693, %690 ]
  %706 = phi i64 [ %712, %702 ], [ %700, %690 ]
  %707 = bitcast %"class.gfx::Range"* %704 to i64*
  %708 = bitcast %"class.gfx::Range"* %705 to i64*
  %709 = load i64, i64* %708, align 4
  store i64 %709, i64* %707, align 4
  %710 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %705, i64 1
  %711 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %703, i64 1
  %712 = add i64 %706, -1
  %713 = icmp eq i64 %712, 0
  br i1 %713, label %714, label %702, !llvm.loop !40

714:                                              ; preds = %702, %690
  %715 = phi %"class.gfx::Range"* [ undef, %690 ], [ %711, %702 ]
  %716 = phi %"class.gfx::Range"* [ %691, %690 ], [ %711, %702 ]
  %717 = phi %"class.gfx::Range"* [ %692, %690 ], [ %711, %702 ]
  %718 = phi %"class.gfx::Range"* [ %693, %690 ], [ %710, %702 ]
  %719 = icmp ult i64 %697, 56
  br i1 %719, label %765, label %720

720:                                              ; preds = %714, %720
  %721 = phi %"class.gfx::Range"* [ %763, %720 ], [ %716, %714 ]
  %722 = phi %"class.gfx::Range"* [ %763, %720 ], [ %717, %714 ]
  %723 = phi %"class.gfx::Range"* [ %762, %720 ], [ %718, %714 ]
  %724 = bitcast %"class.gfx::Range"* %722 to i64*
  %725 = bitcast %"class.gfx::Range"* %723 to i64*
  %726 = load i64, i64* %725, align 4
  store i64 %726, i64* %724, align 4
  %727 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 1
  %728 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 1
  %729 = bitcast %"class.gfx::Range"* %728 to i64*
  %730 = bitcast %"class.gfx::Range"* %727 to i64*
  %731 = load i64, i64* %730, align 4
  store i64 %731, i64* %729, align 4
  %732 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 2
  %733 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 2
  %734 = bitcast %"class.gfx::Range"* %733 to i64*
  %735 = bitcast %"class.gfx::Range"* %732 to i64*
  %736 = load i64, i64* %735, align 4
  store i64 %736, i64* %734, align 4
  %737 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 3
  %738 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 3
  %739 = bitcast %"class.gfx::Range"* %738 to i64*
  %740 = bitcast %"class.gfx::Range"* %737 to i64*
  %741 = load i64, i64* %740, align 4
  store i64 %741, i64* %739, align 4
  %742 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 4
  %743 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 4
  %744 = bitcast %"class.gfx::Range"* %743 to i64*
  %745 = bitcast %"class.gfx::Range"* %742 to i64*
  %746 = load i64, i64* %745, align 4
  store i64 %746, i64* %744, align 4
  %747 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 5
  %748 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 5
  %749 = bitcast %"class.gfx::Range"* %748 to i64*
  %750 = bitcast %"class.gfx::Range"* %747 to i64*
  %751 = load i64, i64* %750, align 4
  store i64 %751, i64* %749, align 4
  %752 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 6
  %753 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 6
  %754 = bitcast %"class.gfx::Range"* %753 to i64*
  %755 = bitcast %"class.gfx::Range"* %752 to i64*
  %756 = load i64, i64* %755, align 4
  store i64 %756, i64* %754, align 4
  %757 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 7
  %758 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 7
  %759 = bitcast %"class.gfx::Range"* %758 to i64*
  %760 = bitcast %"class.gfx::Range"* %757 to i64*
  %761 = load i64, i64* %760, align 4
  store i64 %761, i64* %759, align 4
  %762 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %723, i64 8
  %763 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %721, i64 8
  %764 = icmp eq %"class.gfx::Range"* %762, %585
  br i1 %764, label %765, label %720, !llvm.loop !41

765:                                              ; preds = %714, %720, %688, %584
  %766 = phi %"class.gfx::Range"* [ %398, %584 ], [ %610, %688 ], [ %715, %714 ], [ %763, %720 ]
  %767 = ptrtoint %"class.gfx::Range"* %766 to i64
  %768 = load %"class.gfx::Range"*, %"class.gfx::Range"** %9, align 8
  store i64 %579, i64* %360, align 8
  store i64 %767, i64* %24, align 8
  store i64 %397, i64* %16, align 8
  %769 = icmp eq %"class.gfx::Range"* %768, null
  br i1 %769, label %772, label %770

770:                                              ; preds = %765
  %771 = bitcast %"class.gfx::Range"* %768 to i8*
  tail call void @_ZdlPv(i8* %771) #10
  br label %772

772:                                              ; preds = %770, %765, %209, %354, %358, %4
  %773 = phi %"class.gfx::Range"* [ %1, %4 ], [ %1, %358 ], [ %1, %354 ], [ %1, %209 ], [ %395, %765 ], [ %395, %770 ]
  ret %"class.gfx::Range"* %773
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx14SelectionModeleqERKS0_(%"class.gfx::SelectionModel"* nocapture readonly, %"class.gfx::SelectionModel"* nocapture readonly dereferenceable(40)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %60

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %60

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %60

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1
  %22 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1
  %23 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast %"class.gfx::Range"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector"* %21 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 1
  %30 = bitcast %"class.gfx::Range"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector"* %22 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = icmp eq i64 %28, %34
  %36 = inttoptr i64 %27 to %"class.gfx::Range"*
  %37 = inttoptr i64 %25 to %"class.gfx::Range"*
  br i1 %35, label %38, label %60

38:                                               ; preds = %20
  %39 = icmp eq %"class.gfx::Range"* %36, %37
  br i1 %39, label %60, label %40

40:                                               ; preds = %38
  %41 = inttoptr i64 %33 to %"class.gfx::Range"*
  br label %42

42:                                               ; preds = %40, %56
  %43 = phi %"class.gfx::Range"* [ %58, %56 ], [ %41, %40 ]
  %44 = phi %"class.gfx::Range"* [ %57, %56 ], [ %36, %40 ]
  %45 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %44, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %43, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %50, label %60

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %44, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %43, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %52, %54
  br i1 %55, label %56, label %60

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %44, i64 1
  %58 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %43, i64 1
  %59 = icmp eq %"class.gfx::Range"* %57, %37
  br i1 %59, label %60, label %42

60:                                               ; preds = %56, %50, %42, %2, %38, %20, %14, %8
  %61 = phi i1 [ false, %14 ], [ false, %8 ], [ false, %20 ], [ true, %38 ], [ false, %2 ], [ false, %50 ], [ false, %42 ], [ true, %56 ]
  ret i1 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx14SelectionModel8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.gfx::SelectionModel"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to %"class.gfx::Range"*
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false)
  store i8 1, i8* %12, align 1
  store i8 123, i8* %8, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = zext i32 %16 to i64
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %21) #9
  br label %42

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 0
  %24 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #9
  call void @_ZNK3gfx5Range8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.gfx::Range"* %23) #9
  %25 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = zext i8 %27 to i64
  %34 = select i1 %28, i8* %30, i8* %24
  %35 = select i1 %28, i64 %32, i64 %33
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %34, i64 %35) #9
  %37 = load i8, i8* %26, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %22
  %40 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %40) #10
  br label %41

41:                                               ; preds = %22, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #9
  br label %42

42:                                               ; preds = %41, %20
  %43 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 2
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)
  %47 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %46) #9
  %48 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 0
  %49 = load %"class.gfx::Range"*, %"class.gfx::Range"** %48, align 8
  %50 = getelementptr inbounds %"class.gfx::SelectionModel", %"class.gfx::SelectionModel"* %1, i64 0, i32 1, i32 0, i32 1
  %51 = load %"class.gfx::Range"*, %"class.gfx::Range"** %50, align 8
  %52 = icmp eq %"class.gfx::Range"* %49, %51
  br i1 %52, label %62, label %53

53:                                               ; preds = %42
  %54 = bitcast i64* %5 to i8*
  %55 = bitcast i64* %5 to i32*
  %56 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %6, i64 0, i32 1
  %57 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %58 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %101

62:                                               ; preds = %124, %42
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %66 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 24, i1 false) #9, !alias.scope !42
  %67 = load i8, i8* %12, align 1, !noalias !42
  %68 = icmp slt i8 %67, 0
  %69 = load i64, i64* %10, align 8
  %70 = load i8*, i8** %9, align 8
  %71 = zext i8 %67 to i64
  %72 = select i1 %68, i64 %69, i64 %71
  %73 = select i1 %68, i8* %70, i8* %8
  %74 = add i64 %72, 1
  %75 = icmp ugt i64 %74, -17
  br i1 %75, label %76, label %78

76:                                               ; preds = %62
  %77 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %77) #11
  unreachable

78:                                               ; preds = %62
  %79 = icmp ult i64 %74, 23
  br i1 %79, label %85, label %80

80:                                               ; preds = %78
  %81 = add nuw i64 %72, 17
  %82 = and i64 %81, -16
  %83 = call i8* @_Znwm(i64 %82) #10
  store i8* %83, i8** %63, align 8, !alias.scope !42
  %84 = or i64 %82, -9223372036854775808
  store i64 %84, i64* %65, align 8, !alias.scope !42
  store i64 %72, i64* %64, align 8, !alias.scope !42
  br label %90

85:                                               ; preds = %78
  %86 = trunc i64 %72 to i8
  %87 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %88 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %87, i64 0, i32 1, i32 0
  store i8 %86, i8* %88, align 1, !alias.scope !42
  %89 = icmp eq i64 %72, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %80, %85
  %91 = phi i8* [ %83, %80 ], [ %66, %85 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %73, i64 %72, i1 false) #9
  br label %92

92:                                               ; preds = %85, %90
  %93 = phi i8* [ %66, %85 ], [ %91, %90 ]
  %94 = getelementptr inbounds i8, i8* %93, i64 %72
  store i8 0, i8* %94, align 1
  %95 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i64 1) #9
  %96 = load i8, i8* %12, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %92
  %99 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %99) #10
  br label %100

100:                                              ; preds = %92, %98
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret void

101:                                              ; preds = %53, %124
  %102 = phi %"class.gfx::Range"* [ %49, %53 ], [ %125, %124 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #9
  store i32 -1431655766, i32* %55, align 8
  store i32 -1431655766, i32* %56, align 4
  %103 = bitcast %"class.gfx::Range"* %102 to i64*
  %104 = load i64, i64* %103, align 4
  store i64 %104, i64* %5, align 8
  %105 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #9
  %106 = load i32, i32* %55, align 8
  %107 = load i32, i32* %56, align 4
  %108 = icmp eq i32 %106, %107
  br i1 %108, label %109, label %110

109:                                              ; preds = %101
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 %106) #9
  br label %124

110:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #9
  call void @_ZNK3gfx5Range8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.gfx::Range"* nonnull %6) #9
  %111 = load i8, i8* %59, align 1
  %112 = icmp slt i8 %111, 0
  %113 = load i8*, i8** %60, align 8
  %114 = load i64, i64* %61, align 8
  %115 = zext i8 %111 to i64
  %116 = select i1 %112, i8* %113, i8* %57
  %117 = select i1 %112, i64 %114, i64 %115
  %118 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %116, i64 %117) #9
  %119 = load i8, i8* %59, align 1
  %120 = icmp slt i8 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %110
  %122 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %110, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #9
  br label %124

124:                                              ; preds = %123, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #9
  %125 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %102, i64 1
  %126 = icmp eq %"class.gfx::Range"* %125, %51
  br i1 %126, label %62, label %101
}

declare void @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"*, i8*, ...) local_unnamed_addr #3

declare void @_ZNK3gfx5Range8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Range"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3gfxlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_14SelectionModelE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), %"class.gfx::SelectionModel"* dereferenceable(40)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  call void @_ZNK3gfx14SelectionModel8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.gfx::SelectionModel"* %1)
  %5 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %7 to i64
  %14 = select i1 %8, i8* %10, i8* %4
  %15 = select i1 %8, i64 %12, i64 %13
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %14, i64 %15) #9
  %17 = load i8, i8* %6, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %2, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret %"class.std::__1::basic_ostream"* %0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #9
  %7 = load i8, i8* %6, align 8, !range !45
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #9
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #9
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #9
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #9
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #9
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #9
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #9
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #8

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #8

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK3gfx14SelectionModel16GetAllSelectionsEv: argument 0"}
!4 = distinct !{!4, !"_ZNK3gfx14SelectionModel16GetAllSelectionsEv"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !11}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !11}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !13}
!32 = distinct !{!32, !11}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !11}
!39 = distinct !{!39, !13}
!40 = distinct !{!40, !13}
!41 = distinct !{!41, !11}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!44 = distinct !{!44, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
!45 = !{i8 0, i8 2}
