; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/StringExtras.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/StringExtras.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::StringRef" = type { i8*, i64 }
%"struct.std::__1::pair" = type { %"class.llvm::StringRef", %"class.llvm::StringRef" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [16 x i8] }

$_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_ = comdat any

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm14StrInStrNoCaseENS_9StringRefES0_(i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %5 = alloca %"class.llvm::StringRef", align 8
  %6 = icmp ult i64 %1, %3
  br i1 %6, label %30, label %7

7:                                                ; preds = %4
  %8 = add i64 %1, 1
  %9 = sub i64 %8, %3
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.llvm::StringRef"* %5 to i8*
  %13 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %5, i64 0, i32 0
  %14 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %5, i64 0, i32 1
  br label %15

15:                                               ; preds = %11, %27
  %16 = phi i64 [ 0, %11 ], [ %28, %27 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #3
  %17 = icmp ugt i64 %16, %1
  %18 = select i1 %17, i64 %1, i64 %16
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = sub i64 %1, %18
  %21 = icmp ult i64 %20, %3
  %22 = select i1 %21, i64 %20, i64 %3
  store i8* %19, i8** %13, align 8
  store i64 %22, i64* %14, align 8
  br i1 %21, label %23, label %24

23:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #3
  br label %27

24:                                               ; preds = %15
  %25 = call i32 @_ZNK4llvm9StringRef13compare_lowerES0_(%"class.llvm::StringRef"* nonnull %5, i8* %2, i64 %3) #4
  %26 = icmp eq i32 %25, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #3
  br i1 %26, label %30, label %27

27:                                               ; preds = %23, %24
  %28 = add nuw i64 %16, 1
  %29 = icmp eq i64 %28, %9
  br i1 %29, label %30, label %15

30:                                               ; preds = %24, %27, %7, %4
  %31 = phi i64 [ -1, %4 ], [ -1, %7 ], [ %16, %24 ], [ -1, %27 ]
  ret i64 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm8getTokenENS_9StringRefES0_(%"struct.std::__1::pair"* noalias nocapture sret, i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.llvm::StringRef", align 8
  %7 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %6, i64 0, i32 0
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %6, i64 0, i32 1
  store i64 %2, i64* %8, align 8
  %9 = call i64 @_ZNK4llvm9StringRef17find_first_not_ofES0_m(%"class.llvm::StringRef"* nonnull %6, i8* %3, i64 %4, i64 0) #4
  %10 = call i64 @_ZNK4llvm9StringRef13find_first_ofES0_m(%"class.llvm::StringRef"* nonnull %6, i8* %3, i64 %4, i64 %9) #4
  %11 = load i64, i64* %8, align 8
  %12 = icmp ult i64 %11, %9
  %13 = select i1 %12, i64 %11, i64 %9
  %14 = icmp ult i64 %13, %10
  %15 = select i1 %14, i64 %10, i64 %13
  %16 = icmp ult i64 %11, %15
  %17 = select i1 %16, i64 %11, i64 %15
  %18 = load i8*, i8** %7, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %13
  %20 = sub i64 %17, %13
  %21 = icmp ult i64 %11, %10
  %22 = select i1 %21, i64 %11, i64 %10
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = sub i64 %11, %22
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store i8* %19, i8** %25, align 8
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i64 %20, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 0
  store i8* %23, i8** %27, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 1
  store i64 %24, i64* %28, align 8
  ret void
}

; Function Attrs: optsize
declare i64 @_ZNK4llvm9StringRef17find_first_not_ofES0_m(%"class.llvm::StringRef"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare i64 @_ZNK4llvm9StringRef13find_first_ofES0_m(%"class.llvm::StringRef"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm11SplitStringENS_9StringRefERNS_15SmallVectorImplIS0_EES0_(i8*, i64, %"class.llvm::SmallVectorImpl"* dereferenceable(40), i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %"struct.std::__1::pair", align 8
  %7 = alloca %"struct.std::__1::pair", align 8
  %8 = bitcast %"struct.std::__1::pair"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #3
  %9 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 0
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 1, i32 1
  %13 = bitcast %"struct.std::__1::pair"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  call void @_ZN4llvm8getTokenENS_9StringRefES0_(%"struct.std::__1::pair"* nonnull sret %6, i8* %0, i64 %1, i8* %3, i64 %4) #5
  %14 = load i64, i64* %10, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %2, i64 0, i32 0
  %18 = bitcast %"struct.std::__1::pair"* %7 to i8*
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 1
  %21 = bitcast %"class.llvm::StringRef"* %20 to i8*
  %22 = bitcast %"class.llvm::StringRef"* %19 to i8*
  br label %23

23:                                               ; preds = %16, %23
  call void @_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"* %17, %"class.llvm::StringRef"* nonnull dereferenceable(16) %9) #5
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #3
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  call void @_ZN4llvm8getTokenENS_9StringRefES0_(%"struct.std::__1::pair"* nonnull sret %7, i8* %24, i64 %25, i8* %3, i64 %4) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %18, i64 16, i1 false) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #3
  %26 = load i64, i64* %10, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %23

28:                                               ; preds = %23, %5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"*, %"class.llvm::StringRef"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 16) #4
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = bitcast i8** %3 to %"class.llvm::StringRef"**
  %15 = bitcast %"class.llvm::StringRef"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %14, align 8
  %17 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %16, i64 1
  store %"class.llvm::StringRef"* %17, %"class.llvm::StringRef"** %14, align 8
  ret void
}

; Function Attrs: optsize
declare i32 @_ZNK4llvm9StringRef13compare_lowerES0_(%"class.llvm::StringRef"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind optsize }
attributes #5 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
