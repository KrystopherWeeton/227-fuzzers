; ModuleID = '../../third_party/fontconfig/src/src/fccache.c'
source_filename = "../../third_party/fontconfig/src/src/fccache.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct._FcCacheSkip = type { %struct._FcCache*, %struct._FcRef, i64, i8*, i64, i64, i64, i64, [1 x %struct._FcCacheSkip*] }
%struct._FcCache = type { i32, i32, i64, i64, i64, i32, i64, i32, i64 }
%struct._FcRef = type { i32 }
%struct._FcFontSet = type { i32, i32, %struct._FcPattern** }
%struct._FcPattern = type { i32, i32, i64, %struct._FcRef }
%struct._FcConfig = type { %struct._FcStrSet*, %struct._FcStrSet*, %struct._FcStrSet*, %struct._FcStrSet*, %struct._FcStrSet*, [3 x %struct._FcPtrList*], i32, %struct._FcStrSet*, %struct._FcStrSet*, %struct._FcFontSet*, %struct._FcFontSet*, [2 x %struct._FcFontSet*], i64, i32, %struct._FcRef, %struct._FcExprPage*, i8*, %struct._FcStrSet*, %struct._FcPtrList* }
%struct._FcExprPage = type { %struct._FcExprPage*, %struct._FcExpr*, [340 x %struct._FcExpr], [0 x %struct._FcExpr] }
%struct._FcExpr = type { i32, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct._FcExpr*, %struct._FcExpr* }
%struct._FcStrSet = type { %struct._FcRef, i32, i32, i8**, i32 }
%struct._FcPtrList = type opaque
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.timeval = type { i64, i64 }
%struct._FcStrList = type { %struct._FcStrSet*, i32 }
%struct.MD5Context = type { [4 x i32], [2 x i32], [64 x i8] }
%union.pthread_mutexattr_t = type { i32 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct._FcPatternElt = type { i32, %struct._FcValueList* }
%struct._FcValueList = type { %struct._FcValueList*, %struct._FcValue, i32 }
%struct._FcValue = type { i32, %union.anon.0 }
%union.anon.0 = type { i8* }
%struct._FcSerialize = type { i64, %struct._FcCharSetFreezer*, i8*, [8191 x %struct._FcSerializeBucket*] }
%struct._FcCharSetFreezer = type opaque
%struct._FcSerializeBucket = type { %struct._FcSerializeBucket*, i8*, i64 }
%struct._FcAtomic = type { i8*, i8*, i8*, i8* }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.flock = type { i16, i16, i64, i64, i32 }

@.str = private unnamed_addr constant [6 x i8] c".uuid\00", align 1
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [28 x i8] c"Unable to revert mtime: %s\0A\00", align 1
@FcDebugVal = external hidden local_unnamed_addr global i32, align 4
@.str.2 = private unnamed_addr constant [39 x i8] c"FcDirCacheWriteDir dir \22%s\22 file \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"write cache\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"Fontconfig error: %s: out of memory\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"%s: not cleaning %s cache directory\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"unwritable\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"non-existent\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"%s: cleaning cache directory\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"-le64.cache-7\00", align 1
@.str.10 = private unnamed_addr constant [42 x i8] c"Fontconfig error: %s: allocation failure\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"%s: invalid cache file: %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"%s: %s: missing directory: %s \0A\00", align 1
@FcDirCacheCreateTagFile.cache_tag_contents = internal constant [201 x i8] c"Signature: 8a477f597d28d172789f06886806bc55\0A# This file is a cache directory tag created by fontconfig.\0A# For information about cache directory tags, see:\0A#       http://www.brynosaurus.com/cachedir/\0A\00", align 16
@.str.13 = private unnamed_addr constant [13 x i8] c"CACHEDIR.TAG\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"Created CACHEDIR.TAG at %s\0A\00", align 1
@.str.16 = private unnamed_addr constant [37 x i8] c"Unable to create CACHEDIR.TAG at %s\0A\00", align 1
@bin2hex = internal unnamed_addr constant [16 x i8] c"0123456789abcdef", align 16
@.str.17 = private unnamed_addr constant [31 x i8] c"cache: %s (dir: %s%s%s%s%s%s)\0A\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c" (mapped to \00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.21 = private unnamed_addr constant [9 x i8] c", salt: \00", align 1
@.str.22 = private unnamed_addr constant [34 x i8] c"cache fallbacks to: %s (dir: %s)\0A\00", align 1
@cache_lock = internal global %union.pthread_mutex_t* null, align 8
@fcCacheChains = internal global [16 x %struct._FcCacheSkip*] zeroinitializer, align 16
@fcCacheMaxLevel = internal unnamed_addr global i32 0, align 4
@.str.23 = private unnamed_addr constant [69 x i8] c"FcCacheTimeValid dir \22%s\22 cache checksum %d.%ld dir checksum %d.%ld\0A\00", align 1
@FcCacheIsMmapSafe.static_status = internal global i8* null, align 8
@.str.24 = private unnamed_addr constant [20 x i8] c"FONTCONFIG_USE_MMAP\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"SOURCE_DATE_EPOCH\00", align 1
@.str.26 = private unnamed_addr constant [39 x i8] c"Fontconfig: SOURCE_DATE_EPOCH invalid\0A\00", align 1
@.str.27 = private unnamed_addr constant [51 x i8] c"Fontconfig: SOURCE_DATE_EPOCH: strtoull: %s: %llu\0A\00", align 1
@.str.28 = private unnamed_addr constant [52 x i8] c"Fontconfig: SOURCE_DATE_EPOCH has trailing garbage\0A\00", align 1

@FcCacheCopySet = hidden alias %struct._FcFontSet* (%struct._FcCache*), %struct._FcFontSet* (%struct._FcCache*)* @IA__FcCacheCopySet
@FcCacheNumSubdir = hidden alias i32 (%struct._FcCache*), i32 (%struct._FcCache*)* @IA__FcCacheNumSubdir
@FcCacheNumFont = hidden alias i32 (%struct._FcCache*), i32 (%struct._FcCache*)* @IA__FcCacheNumFont
@FcDirCacheUnlink = hidden alias i32 (i8*, %struct._FcConfig*), i32 (i8*, %struct._FcConfig*)* @IA__FcDirCacheUnlink
@FcDirCacheValid = hidden alias i32 (i8*), i32 (i8*)* @IA__FcDirCacheValid
@FcDirCacheClean = hidden alias i32 (i8*, i32), i32 (i8*, i32)* @IA__FcDirCacheClean
@FcCacheCreateTagFile = hidden alias void (%struct._FcConfig*), void (%struct._FcConfig*)* @IA__FcCacheCreateTagFile
@FcDirCacheCreateUUID = hidden alias i32 (i8*, i32, %struct._FcConfig*), i32 (i8*, i32, %struct._FcConfig*)* @IA__FcDirCacheCreateUUID
@FcDirCacheDeleteUUID = hidden alias i32 (i8*, %struct._FcConfig*), i32 (i8*, %struct._FcConfig*)* @IA__FcDirCacheDeleteUUID
@FcDirCacheLoad = hidden alias %struct._FcCache* (i8*, %struct._FcConfig*, i8**), %struct._FcCache* (i8*, %struct._FcConfig*, i8**)* @IA__FcDirCacheLoad
@FcDirCacheLoadFile = hidden alias %struct._FcCache* (i8*, %struct.stat*), %struct._FcCache* (i8*, %struct.stat*)* @IA__FcDirCacheLoadFile
@FcDirCacheUnload = hidden alias void (%struct._FcCache*), void (%struct._FcCache*)* @IA__FcDirCacheUnload

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @IA__FcDirCacheCreateUUID(i8* nocapture readnone, i32, %struct._FcConfig* nocapture readnone) #0 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcDirCacheDeleteUUID(i8*, %struct._FcConfig*) #1 {
  %3 = alloca %struct.stat, align 8
  %4 = alloca [2 x %struct.timeval], align 16
  %5 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 144, i1 false)
  %6 = bitcast [2 x %struct.timeval]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12
  %7 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %4, i64 0, i64 0
  %8 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %4, i64 0, i64 0, i32 0
  %9 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %4, i64 0, i64 0, i32 1
  %10 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %4, i64 0, i64 1, i32 0
  %11 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %4, i64 0, i64 1, i32 1
  %12 = bitcast [2 x %struct.timeval]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 32, i1 false)
  %13 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* %1) #12
  %14 = icmp eq %struct._FcConfig* %13, null
  br i1 %14, label %50, label %15

15:                                               ; preds = %2
  %16 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* nonnull %13) #12
  %17 = icmp eq i8* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  %19 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %16, i8* %0, i8* null) #12
  br label %22

20:                                               ; preds = %15
  %21 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* %0, i8* null) #12
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi i8* [ %19, %18 ], [ %21, %20 ]
  %24 = call i32 @FcStat(i8* %23, %struct.stat* nonnull %3) #12
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %48

26:                                               ; preds = %22
  %27 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* null) #12
  %28 = call i32 @unlink(i8* %27) #12
  %29 = icmp eq i32 %28, 0
  %30 = zext i1 %29 to i32
  br i1 %29, label %31, label %47

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 11, i32 0
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %8, align 16
  %34 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 12, i32 0
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %10, align 16
  %36 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 11, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = sdiv i64 %37, 1000
  store i64 %38, i64* %9, align 8
  %39 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 12, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = sdiv i64 %40, 1000
  store i64 %41, i64* %11, align 8
  %42 = call i32 @utimes(i8* %23, %struct.timeval* nonnull %7) #12
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %31
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %23) #13
  br label %47

47:                                               ; preds = %31, %44, %26
  call void @IA__FcStrFree(i8* %27) #12
  br label %48

48:                                               ; preds = %22, %47
  %49 = phi i32 [ %30, %47 ], [ 0, %22 ]
  call void @IA__FcStrFree(i8* %23) #12
  call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %13) #12
  br label %50

50:                                               ; preds = %2, %48
  %51 = phi i32 [ %49, %48 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %5) #12
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare hidden %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig*) local_unnamed_addr #3

declare hidden i8* @IA__FcConfigGetSysRoot(%struct._FcConfig*) local_unnamed_addr #3

declare hidden i8* @IA__FcStrBuildFilename(i8*, ...) local_unnamed_addr #3

declare hidden i32 @FcStat(i8*, %struct.stat*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @unlink(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @utimes(i8* nocapture readonly, %struct.timeval* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

declare hidden void @IA__FcStrFree(i8*) local_unnamed_addr #3

declare hidden void @IA__FcConfigDestroy(%struct._FcConfig*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcDirCacheUnlink(i8*, %struct._FcConfig*) #1 {
  %3 = alloca [52 x i8], align 16
  %4 = alloca [52 x i8], align 16
  %5 = getelementptr inbounds [52 x i8], [52 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 52, i1 false)
  %6 = getelementptr inbounds [52 x i8], [52 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 52, i1 false)
  %7 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* %1) #12
  %8 = icmp eq %struct._FcConfig* %7, null
  br i1 %8, label %51, label %9

9:                                                ; preds = %2
  %10 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* nonnull %7) #12
  call fastcc void @FcDirCacheBasenameMD5(%struct._FcConfig* nonnull %7, i8* %0, i8* nonnull %5)
  call fastcc void @FcDirCacheBasenameUUID(%struct._FcConfig* nonnull %7, i8* %0, i8* nonnull %6)
  %11 = getelementptr inbounds %struct._FcConfig, %struct._FcConfig* %7, i64 0, i32 3
  %12 = load %struct._FcStrSet*, %struct._FcStrSet** %11, align 8
  %13 = call %struct._FcStrList* @IA__FcStrListCreate(%struct._FcStrSet* %12) #12
  %14 = icmp eq %struct._FcStrList* %13, null
  br i1 %14, label %49, label %15

15:                                               ; preds = %9
  %16 = call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %13) #12
  %17 = icmp eq i8* %16, null
  br i1 %17, label %46, label %18

18:                                               ; preds = %15
  %19 = icmp ne i8* %10, null
  br label %20

20:                                               ; preds = %43, %18
  %21 = phi i8* [ %16, %18 ], [ %44, %43 ]
  br i1 %19, label %22, label %24

22:                                               ; preds = %20
  %23 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %10, i8* nonnull %21, i8* nonnull %5, i8* null) #12
  br label %26

24:                                               ; preds = %20
  %25 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %21, i8* nonnull %5, i8* null) #12
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi i8* [ %23, %22 ], [ %25, %24 ]
  %28 = icmp eq i8* %27, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %26
  %30 = call i32 @unlink(i8* nonnull %27) #12
  call void @IA__FcStrFree(i8* nonnull %27) #12
  %31 = load i8, i8* %6, align 16
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %29
  br i1 %19, label %34, label %36

34:                                               ; preds = %33
  %35 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %10, i8* nonnull %21, i8* nonnull %6, i8* null) #12
  br label %38

36:                                               ; preds = %33
  %37 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %21, i8* nonnull %6, i8* null) #12
  br label %38

38:                                               ; preds = %36, %34
  %39 = phi i8* [ %35, %34 ], [ %37, %36 ]
  %40 = icmp eq i8* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = call i32 @unlink(i8* nonnull %39) #12
  call void @IA__FcStrFree(i8* nonnull %39) #12
  br label %43

43:                                               ; preds = %29, %41
  %44 = call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %13) #12
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %20

46:                                               ; preds = %26, %38, %43, %15
  %47 = phi i32 [ 1, %15 ], [ 0, %38 ], [ 0, %26 ], [ 1, %43 ]
  call void @IA__FcStrListDone(%struct._FcStrList* nonnull %13) #12
  %48 = call i32 @IA__FcDirCacheDeleteUUID(i8* %0, %struct._FcConfig* nonnull %7)
  br label %49

49:                                               ; preds = %46, %9
  %50 = phi i32 [ 0, %9 ], [ %47, %46 ]
  call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %7) #12
  br label %51

51:                                               ; preds = %2, %49
  %52 = phi i32 [ %50, %49 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %5) #12
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @FcDirCacheBasenameMD5(%struct._FcConfig*, i8*, i8*) unnamed_addr #1 {
  %4 = alloca [16 x i8], align 16
  %5 = alloca %struct.MD5Context, align 16
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  %7 = bitcast %struct.MD5Context* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 88, i1 false)
  %8 = tail call i8* @FcConfigMapSalt(%struct._FcConfig* %0, i8* %1) #12
  %9 = tail call i8* @FcConfigMapFontPath(%struct._FcConfig* %0, i8* %1) #12
  %10 = icmp ne i8* %9, null
  %11 = select i1 %10, i8* %1, i8* null
  %12 = select i1 %10, i8* %9, i8* %1
  %13 = icmp ne i8* %8, null
  br i1 %13, label %14, label %25

14:                                               ; preds = %3
  %15 = tail call i64 @strlen(i8* %12) #14
  %16 = tail call i64 @strlen(i8* nonnull %8) #14
  %17 = add i64 %16, %15
  %18 = add i64 %17, 1
  %19 = tail call noalias i8* @malloc(i64 %18) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %12, i64 %15, i1 false)
  %20 = getelementptr inbounds i8, i8* %19, i64 %15
  %21 = add i64 %16, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* nonnull align 1 %8, i64 %21, i1 false)
  %22 = getelementptr inbounds i8, i8* %19, i64 %17
  store i8 0, i8* %22, align 1
  %23 = icmp eq i8* %11, null
  %24 = select i1 %23, i8* %12, i8* %11
  br label %25

25:                                               ; preds = %14, %3
  %26 = phi i8* [ %19, %14 ], [ null, %3 ]
  %27 = phi i8* [ %24, %14 ], [ %11, %3 ]
  %28 = phi i8* [ %19, %14 ], [ %12, %3 ]
  %29 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 0, i64 0
  %30 = bitcast %struct.MD5Context* %5 to <4 x i32>*
  store <4 x i32> <i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878>, <4 x i32>* %30, align 16
  %31 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 1, i64 0
  %32 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 1, i64 1
  %33 = tail call i64 @strlen(i8* %28) #14
  %34 = trunc i64 %33 to i32
  %35 = shl i32 %34, 3
  store i32 %35, i32* %31, align 16
  %36 = lshr i32 %34, 29
  store i32 %36, i32* %32, align 4
  %37 = icmp ugt i32 %34, 63
  %38 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 2, i64 0
  br i1 %37, label %39, label %50

39:                                               ; preds = %25
  %40 = bitcast i8* %38 to i32*
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8* [ %28, %39 ], [ %44, %41 ]
  %43 = phi i32 [ %34, %39 ], [ %45, %41 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 1 %42, i64 64, i1 false) #12
  call fastcc void @MD5Transform(i32* nonnull %29, i32* %40) #12
  %44 = getelementptr inbounds i8, i8* %42, i64 64
  %45 = add i32 %43, -64
  %46 = icmp ugt i32 %45, 63
  br i1 %46, label %41, label %47

47:                                               ; preds = %41
  %48 = and i64 %33, 63
  %49 = load i32, i32* %31, align 16
  br label %50

50:                                               ; preds = %25, %47
  %51 = phi i32 [ %35, %25 ], [ %49, %47 ]
  %52 = phi i64 [ %33, %25 ], [ %48, %47 ]
  %53 = phi i8* [ %28, %25 ], [ %44, %47 ]
  %54 = and i64 %52, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 1 %53, i64 %54, i1 false) #12
  %55 = lshr i32 %51, 3
  %56 = and i32 %55, 63
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 2, i64 %57
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 -128, i8* %58, align 1
  %60 = xor i32 %56, 63
  %61 = icmp ult i32 %60, 8
  br i1 %61, label %62, label %66

62:                                               ; preds = %50
  %63 = zext i32 %60 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %63, i1 false) #12
  %64 = bitcast i8* %38 to i32*
  call fastcc void @MD5Transform(i32* nonnull %29, i32* %64) #12
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 56, i1 false) #12
  %65 = load i32, i32* %31, align 16
  br label %70

66:                                               ; preds = %50
  %67 = add nsw i32 %60, -8
  %68 = zext i32 %67 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %68, i1 false) #12
  %69 = bitcast i8* %38 to i32*
  br label %70

70:                                               ; preds = %62, %66
  %71 = phi i32* [ %69, %66 ], [ %64, %62 ]
  %72 = phi i32 [ %51, %66 ], [ %65, %62 ]
  %73 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 2, i64 56
  %74 = bitcast i8* %73 to i32*
  store i32 %72, i32* %74, align 8
  %75 = load i32, i32* %32, align 4
  %76 = getelementptr inbounds %struct.MD5Context, %struct.MD5Context* %5, i64 0, i32 2, i64 60
  %77 = bitcast i8* %76 to i32*
  store i32 %75, i32* %77, align 4
  call fastcc void @MD5Transform(i32* nonnull %29, i32* %71) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* nonnull align 16 %7, i64 16, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 88, i1 false) #12
  %78 = icmp eq i8* %26, null
  br i1 %78, label %80, label %79

79:                                               ; preds = %70
  tail call void @IA__FcStrFree(i8* nonnull %26) #12
  br label %80

80:                                               ; preds = %70, %79
  store i8 47, i8* %2, align 1
  %81 = getelementptr inbounds i8, i8* %2, i64 1
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %98, %82 ]
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = lshr i8 %85, 4
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* @bin2hex, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = shl nuw nsw i64 %83, 1
  %91 = getelementptr inbounds i8, i8* %81, i64 %90
  store i8 %89, i8* %91, align 1
  %92 = and i8 %85, 15
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* @bin2hex, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = or i64 %90, 1
  %97 = getelementptr inbounds i8, i8* %81, i64 %96
  store i8 %95, i8* %97, align 1
  %98 = add nuw nsw i64 %83, 1
  %99 = icmp eq i64 %98, 16
  br i1 %99, label %100, label %82

100:                                              ; preds = %82
  %101 = getelementptr inbounds i8, i8* %2, i64 33
  store i8 0, i8* %101, align 1
  %102 = tail call i64 @strlen(i8* %2)
  %103 = getelementptr i8, i8* %2, i64 %102
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i64 14, i1 false)
  %104 = load i32, i32* @FcDebugVal, align 4
  %105 = and i32 %104, 16
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %116, label %107

107:                                              ; preds = %100
  %108 = icmp eq i8* %27, null
  %109 = select i1 %108, i8* %28, i8* %27
  %110 = select i1 %10, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0)
  %111 = select i1 %10, i8* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0)
  %112 = select i1 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0)
  %113 = select i1 %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0)
  %114 = select i1 %13, i8* %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0)
  %115 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0), i8* %2, i8* %109, i8* %110, i8* %111, i8* %112, i8* %113, i8* %114)
  br label %116

116:                                              ; preds = %100, %107
  br i1 %10, label %117, label %118

117:                                              ; preds = %116
  tail call void @IA__FcStrFree(i8* nonnull %9) #12
  br label %118

118:                                              ; preds = %117, %116
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @FcDirCacheBasenameUUID(%struct._FcConfig*, i8*, i8*) unnamed_addr #1 {
  %4 = alloca [37 x i8], align 16
  %5 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* %0) #12
  store i8 0, i8* %2, align 1
  %6 = icmp eq i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %5, i8* %1, i8* null) #12
  br label %11

9:                                                ; preds = %3
  %10 = tail call noalias i8* @strdup(i8* %1) #12
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi i8* [ %8, %7 ], [ %10, %9 ]
  %13 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* %12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* null) #12
  %14 = tail call i32 (i8*, i32, ...) @FcOpen(i8* %13, i32 0) #12
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %33, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds [37 x i8], [37 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 37, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 0, i64 37, i1 false)
  %18 = call i64 @read(i32 %14, i8* nonnull %17, i64 36) #12
  %19 = getelementptr inbounds [37 x i8], [37 x i8]* %4, i64 0, i64 36
  store i8 0, i8* %19, align 4
  %20 = tail call i32 @close(i32 %14) #12
  %21 = icmp slt i64 %18, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %16
  store i8 47, i8* %2, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 1
  %24 = call i8* @strcpy(i8* %23, i8* nonnull %17) #12
  %25 = tail call i64 @strlen(i8* %2)
  %26 = getelementptr i8, i8* %2, i64 %25
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i64 14, i1 false)
  %27 = load i32, i32* @FcDebugVal, align 4
  %28 = and i32 %27, 16
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %22
  %31 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0), i8* %2, i8* %1)
  br label %32

32:                                               ; preds = %30, %22, %16
  call void @llvm.lifetime.end.p0i8(i64 37, i8* nonnull %17) #12
  br label %33

33:                                               ; preds = %32, %11
  tail call void @IA__FcStrFree(i8* %13) #12
  tail call void @IA__FcStrFree(i8* %12) #12
  ret void
}

declare hidden %struct._FcStrList* @IA__FcStrListCreate(%struct._FcStrSet*) local_unnamed_addr #3

declare hidden i8* @IA__FcStrListNext(%struct._FcStrList*) local_unnamed_addr #3

declare hidden void @IA__FcStrListDone(%struct._FcStrList*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @FcCacheObjectReference(i8* readnone) local_unnamed_addr #1 {
  tail call fastcc void @lock_cache() #12
  %2 = icmp eq i8* %0, null
  br i1 %2, label %50, label %3

3:                                                ; preds = %1
  %4 = load i32, i32* @fcCacheMaxLevel, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %39

6:                                                ; preds = %3
  %7 = sext i32 %4 to i64
  br label %8

8:                                                ; preds = %36, %6
  %9 = phi i64 [ %7, %6 ], [ %11, %36 ]
  %10 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %6 ], [ %37, %36 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %10, i64 %11
  %13 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %12, align 8
  %14 = icmp eq %struct._FcCacheSkip* %13, null
  br i1 %14, label %36, label %15

15:                                               ; preds = %8
  %16 = bitcast %struct._FcCacheSkip* %13 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %13, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i8, i8* %17, i64 %19
  %21 = icmp ugt i8* %20, %0
  br i1 %21, label %36, label %22

22:                                               ; preds = %15, %27
  %23 = phi %struct._FcCacheSkip* [ %25, %27 ], [ %13, %15 ]
  %24 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %23, i64 0, i32 8, i64 %11
  %25 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %24, align 8
  %26 = icmp eq %struct._FcCacheSkip* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %22
  %28 = bitcast %struct._FcCacheSkip* %25 to i8**
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %25, i64 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  %33 = icmp ugt i8* %32, %0
  br i1 %33, label %34, label %22

34:                                               ; preds = %27, %22
  %35 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %23, i64 0, i32 8, i64 0
  br label %36

36:                                               ; preds = %34, %15, %8
  %37 = phi %struct._FcCacheSkip** [ %10, %8 ], [ %10, %15 ], [ %35, %34 ]
  %38 = icmp sgt i64 %11, 0
  br i1 %38, label %8, label %39

39:                                               ; preds = %36, %3
  %40 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %3 ], [ %37, %36 ]
  %41 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %40, align 8
  %42 = icmp eq %struct._FcCacheSkip* %41, null
  br i1 %42, label %50, label %43

43:                                               ; preds = %39
  %44 = bitcast %struct._FcCacheSkip* %41 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %41, i64 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = icmp ugt i8* %48, %0
  br i1 %49, label %53, label %50

50:                                               ; preds = %1, %43, %39
  %51 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %52 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %51) #12
  br label %58

53:                                               ; preds = %43
  %54 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %55 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %54) #12
  %56 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %41, i64 0, i32 1, i32 0
  %57 = atomicrmw add i32* %56, i32 1 seq_cst
  br label %58

58:                                               ; preds = %50, %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FcCacheObjectDereference(i8* readnone) local_unnamed_addr #1 {
  %2 = alloca [16 x %struct._FcCacheSkip**], align 16
  tail call fastcc void @lock_cache()
  %3 = icmp eq i8* %0, null
  br i1 %3, label %143, label %4

4:                                                ; preds = %1
  %5 = load i32, i32* @fcCacheMaxLevel, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %40

7:                                                ; preds = %4
  %8 = sext i32 %5 to i64
  br label %9

9:                                                ; preds = %37, %7
  %10 = phi i64 [ %8, %7 ], [ %12, %37 ]
  %11 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %7 ], [ %38, %37 ]
  %12 = add nsw i64 %10, -1
  %13 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %11, i64 %12
  %14 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %13, align 8
  %15 = icmp eq %struct._FcCacheSkip* %14, null
  br i1 %15, label %37, label %16

16:                                               ; preds = %9
  %17 = bitcast %struct._FcCacheSkip* %14 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %14, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = icmp ugt i8* %21, %0
  br i1 %22, label %37, label %23

23:                                               ; preds = %16, %28
  %24 = phi %struct._FcCacheSkip* [ %26, %28 ], [ %14, %16 ]
  %25 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %24, i64 0, i32 8, i64 %12
  %26 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %25, align 8
  %27 = icmp eq %struct._FcCacheSkip* %26, null
  br i1 %27, label %35, label %28

28:                                               ; preds = %23
  %29 = bitcast %struct._FcCacheSkip* %26 to i8**
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %26, i64 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = icmp ugt i8* %33, %0
  br i1 %34, label %35, label %23

35:                                               ; preds = %28, %23
  %36 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %24, i64 0, i32 8, i64 0
  br label %37

37:                                               ; preds = %35, %16, %9
  %38 = phi %struct._FcCacheSkip** [ %11, %9 ], [ %11, %16 ], [ %36, %35 ]
  %39 = icmp sgt i64 %12, 0
  br i1 %39, label %9, label %40

40:                                               ; preds = %37, %4
  %41 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %4 ], [ %38, %37 ]
  %42 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %41, align 8
  %43 = icmp eq %struct._FcCacheSkip* %42, null
  br i1 %43, label %143, label %44

44:                                               ; preds = %40
  %45 = bitcast %struct._FcCacheSkip* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %42, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = icmp ugt i8* %49, %0
  br i1 %50, label %51, label %143

51:                                               ; preds = %44
  %52 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %42, i64 0, i32 1, i32 0
  %53 = atomicrmw add i32* %52, i32 -1 seq_cst
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %143

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %42, i64 0, i32 0
  %57 = load %struct._FcCache*, %struct._FcCache** %56, align 8
  %58 = bitcast [16 x %struct._FcCacheSkip**]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %58) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 128, i1 false) #12
  %59 = load i32, i32* @fcCacheMaxLevel, align 4
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %55
  %62 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), align 16
  br label %119

63:                                               ; preds = %55
  %64 = sext i32 %59 to i64
  br label %65

65:                                               ; preds = %88, %63
  %66 = phi i64 [ %64, %63 ], [ %68, %88 ]
  %67 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %63 ], [ %89, %88 ]
  %68 = add nsw i64 %66, -1
  %69 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %67, i64 %68
  %70 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %69, align 8
  %71 = icmp eq %struct._FcCacheSkip* %70, null
  br i1 %71, label %88, label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %70, i64 0, i32 0
  %74 = load %struct._FcCache*, %struct._FcCache** %73, align 8
  %75 = icmp ult %struct._FcCache* %74, %57
  br i1 %75, label %76, label %88

76:                                               ; preds = %72, %81
  %77 = phi %struct._FcCacheSkip* [ %79, %81 ], [ %70, %72 ]
  %78 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %77, i64 0, i32 8, i64 %68
  %79 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %78, align 8
  %80 = icmp eq %struct._FcCacheSkip* %79, null
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %79, i64 0, i32 0
  %83 = load %struct._FcCache*, %struct._FcCache** %82, align 8
  %84 = icmp ult %struct._FcCache* %83, %57
  br i1 %84, label %76, label %85

85:                                               ; preds = %81, %76
  %86 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %77, i64 0, i32 8, i64 %68
  %87 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %77, i64 0, i32 8, i64 0
  br label %88

88:                                               ; preds = %85, %72, %65
  %89 = phi %struct._FcCacheSkip** [ %67, %65 ], [ %67, %72 ], [ %87, %85 ]
  %90 = phi %struct._FcCacheSkip** [ %69, %65 ], [ %69, %72 ], [ %86, %85 ]
  %91 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %2, i64 0, i64 %68
  store %struct._FcCacheSkip** %90, %struct._FcCacheSkip*** %91, align 8
  %92 = icmp sgt i64 %68, 0
  br i1 %92, label %65, label %93

93:                                               ; preds = %88
  %94 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %89, align 8
  %95 = zext i32 %59 to i64
  br label %96

96:                                               ; preds = %102, %93
  %97 = phi i64 [ 0, %93 ], [ %107, %102 ]
  %98 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %2, i64 0, i64 %97
  %99 = load %struct._FcCacheSkip**, %struct._FcCacheSkip*** %98, align 8
  %100 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %99, align 8
  %101 = icmp eq %struct._FcCacheSkip* %100, %94
  br i1 %101, label %102, label %109

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %94, i64 0, i32 8, i64 %97
  %104 = bitcast %struct._FcCacheSkip** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %struct._FcCacheSkip** %99 to i64*
  store i64 %105, i64* %106, align 8
  %107 = add nuw nsw i64 %97, 1
  %108 = icmp eq i64 %107, %95
  br i1 %108, label %109, label %96

109:                                              ; preds = %102, %96
  br label %110

110:                                              ; preds = %109, %116
  %111 = phi i64 [ %112, %116 ], [ %64, %109 ]
  %112 = add nsw i64 %111, -1
  %113 = getelementptr inbounds [16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 %112
  %114 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %113, align 8
  %115 = icmp eq %struct._FcCacheSkip* %114, null
  br i1 %115, label %116, label %119

116:                                              ; preds = %110
  %117 = trunc i64 %112 to i32
  store i32 %117, i32* @fcCacheMaxLevel, align 4
  %118 = icmp sgt i64 %112, 0
  br i1 %118, label %110, label %119

119:                                              ; preds = %116, %110, %61
  %120 = phi %struct._FcCacheSkip* [ %62, %61 ], [ %94, %110 ], [ %94, %116 ]
  %121 = icmp eq %struct._FcCacheSkip* %120, null
  br i1 %121, label %133, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %120, i64 0, i32 3
  %124 = load i8*, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %131, label %126

126:                                              ; preds = %122, %126
  %127 = phi i8* [ %129, %126 ], [ %124, %122 ]
  %128 = bitcast i8* %127 to i8**
  %129 = load i8*, i8** %128, align 8
  tail call void @free(i8* nonnull %127) #12
  %130 = icmp eq i8* %129, null
  br i1 %130, label %131, label %126

131:                                              ; preds = %126, %122
  %132 = bitcast %struct._FcCacheSkip* %120 to i8*
  tail call void @free(i8* %132) #12
  br label %133

133:                                              ; preds = %131, %119
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %58) #12
  %134 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %57, i64 0, i32 0
  %135 = load i32, i32* %134, align 8
  switch i32 %135, label %143 [
    i32 -66913275, label %136
    i32 -66913276, label %138
  ]

136:                                              ; preds = %133
  %137 = bitcast %struct._FcCache* %57 to i8*
  tail call void @free(i8* %137) #12
  br label %143

138:                                              ; preds = %133
  %139 = bitcast %struct._FcCache* %57 to i8*
  %140 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %57, i64 0, i32 2
  %141 = load i64, i64* %140, align 8
  %142 = tail call i32 @munmap(i8* %139, i64 %141) #12
  br label %143

143:                                              ; preds = %40, %44, %1, %138, %136, %133, %51
  %144 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %145 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %144) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @lock_cache() unnamed_addr #1 {
  fence seq_cst
  %1 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %2 = icmp eq %union.pthread_mutex_t* %1, null
  br i1 %2, label %3, label %18

3:                                                ; preds = %0, %10
  %4 = tail call noalias i8* @malloc(i64 40) #12
  %5 = bitcast i8* %4 to %union.pthread_mutex_t*
  %6 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %5, %union.pthread_mutexattr_t* null) #12
  %7 = ptrtoint i8* %4 to i64
  %8 = cmpxchg i64* bitcast (%union.pthread_mutex_t** @cache_lock to i64*), i64 0, i64 %7 seq_cst seq_cst
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %5) #12
  fence seq_cst
  %12 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %13 = icmp eq %union.pthread_mutex_t* %12, null
  br i1 %13, label %3, label %18

14:                                               ; preds = %3
  %15 = bitcast i8* %4 to %union.pthread_mutex_t*
  %16 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %15) #12
  %17 = tail call i32 @FcRandom() #12
  br label %21

18:                                               ; preds = %10, %0
  %19 = phi %union.pthread_mutex_t* [ %1, %0 ], [ %12, %10 ]
  %20 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %19) #12
  br label %21

21:                                               ; preds = %18, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @FcCacheAllocate(%struct._FcCache* readnone, i64) local_unnamed_addr #1 {
  tail call fastcc void @lock_cache()
  %3 = bitcast %struct._FcCache* %0 to i8*
  %4 = icmp eq %struct._FcCache* %0, null
  br i1 %4, label %62, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @fcCacheMaxLevel, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %41

8:                                                ; preds = %5
  %9 = sext i32 %6 to i64
  br label %10

10:                                               ; preds = %38, %8
  %11 = phi i64 [ %9, %8 ], [ %13, %38 ]
  %12 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %8 ], [ %39, %38 ]
  %13 = add nsw i64 %11, -1
  %14 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %12, i64 %13
  %15 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %14, align 8
  %16 = icmp eq %struct._FcCacheSkip* %15, null
  br i1 %16, label %38, label %17

17:                                               ; preds = %10
  %18 = bitcast %struct._FcCacheSkip* %15 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %15, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = icmp ugt i8* %22, %3
  br i1 %23, label %38, label %24

24:                                               ; preds = %17, %29
  %25 = phi %struct._FcCacheSkip* [ %27, %29 ], [ %15, %17 ]
  %26 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %25, i64 0, i32 8, i64 %13
  %27 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %26, align 8
  %28 = icmp eq %struct._FcCacheSkip* %27, null
  br i1 %28, label %36, label %29

29:                                               ; preds = %24
  %30 = bitcast %struct._FcCacheSkip* %27 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %27, i64 0, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = icmp ugt i8* %34, %3
  br i1 %35, label %36, label %24

36:                                               ; preds = %29, %24
  %37 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %25, i64 0, i32 8, i64 0
  br label %38

38:                                               ; preds = %36, %17, %10
  %39 = phi %struct._FcCacheSkip** [ %12, %10 ], [ %12, %17 ], [ %37, %36 ]
  %40 = icmp sgt i64 %13, 0
  br i1 %40, label %10, label %41

41:                                               ; preds = %38, %5
  %42 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %5 ], [ %39, %38 ]
  %43 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %42, align 8
  %44 = icmp eq %struct._FcCacheSkip* %43, null
  br i1 %44, label %62, label %45

45:                                               ; preds = %41
  %46 = bitcast %struct._FcCacheSkip* %43 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %43, i64 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = icmp ugt i8* %50, %3
  br i1 %51, label %52, label %62

52:                                               ; preds = %45
  %53 = add i64 %1, 8
  %54 = tail call noalias i8* @malloc(i64 %53) #12
  %55 = icmp eq i8* %54, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %43, i64 0, i32 3
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast i8* %54 to i64*
  store i64 %59, i64* %60, align 8
  store i8* %54, i8** %57, align 8
  %61 = getelementptr inbounds i8, i8* %54, i64 8
  br label %62

62:                                               ; preds = %41, %45, %2, %56, %52
  %63 = phi i8* [ %61, %56 ], [ null, %52 ], [ null, %2 ], [ null, %45 ], [ null, %41 ]
  %64 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %65 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %64) #12
  ret i8* %63
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @FcCacheFini() local_unnamed_addr #1 {
  fence seq_cst
  %1 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %2 = bitcast %union.pthread_mutex_t* %1 to i8*
  %3 = icmp eq %union.pthread_mutex_t* %1, null
  br i1 %3, label %10, label %4

4:                                                ; preds = %0
  %5 = ptrtoint %union.pthread_mutex_t* %1 to i64
  %6 = cmpxchg i64* bitcast (%union.pthread_mutex_t** @cache_lock to i64*), i64 %5, i64 0 seq_cst seq_cst
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %1) #12
  tail call void @free(i8* %2) #12
  br label %10

10:                                               ; preds = %0, %4, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FcDirCacheReference(%struct._FcCache* readnone, i32) local_unnamed_addr #1 {
  %3 = bitcast %struct._FcCache* %0 to i8*
  tail call fastcc void @lock_cache() #12
  %4 = icmp eq %struct._FcCache* %0, null
  br i1 %4, label %52, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @fcCacheMaxLevel, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %41

8:                                                ; preds = %5
  %9 = sext i32 %6 to i64
  br label %10

10:                                               ; preds = %38, %8
  %11 = phi i64 [ %9, %8 ], [ %13, %38 ]
  %12 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %8 ], [ %39, %38 ]
  %13 = add nsw i64 %11, -1
  %14 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %12, i64 %13
  %15 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %14, align 8
  %16 = icmp eq %struct._FcCacheSkip* %15, null
  br i1 %16, label %38, label %17

17:                                               ; preds = %10
  %18 = bitcast %struct._FcCacheSkip* %15 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %15, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = icmp ugt i8* %22, %3
  br i1 %23, label %38, label %24

24:                                               ; preds = %17, %29
  %25 = phi %struct._FcCacheSkip* [ %27, %29 ], [ %15, %17 ]
  %26 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %25, i64 0, i32 8, i64 %13
  %27 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %26, align 8
  %28 = icmp eq %struct._FcCacheSkip* %27, null
  br i1 %28, label %36, label %29

29:                                               ; preds = %24
  %30 = bitcast %struct._FcCacheSkip* %27 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %27, i64 0, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = icmp ugt i8* %34, %3
  br i1 %35, label %36, label %24

36:                                               ; preds = %29, %24
  %37 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %25, i64 0, i32 8, i64 0
  br label %38

38:                                               ; preds = %36, %17, %10
  %39 = phi %struct._FcCacheSkip** [ %12, %10 ], [ %12, %17 ], [ %37, %36 ]
  %40 = icmp sgt i64 %13, 0
  br i1 %40, label %10, label %41

41:                                               ; preds = %38, %5
  %42 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %5 ], [ %39, %38 ]
  %43 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %42, align 8
  %44 = icmp eq %struct._FcCacheSkip* %43, null
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = bitcast %struct._FcCacheSkip* %43 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %43, i64 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = icmp ugt i8* %50, %3
  br i1 %51, label %55, label %52

52:                                               ; preds = %2, %45, %41
  %53 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %54 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %53) #12
  br label %60

55:                                               ; preds = %45
  %56 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %57 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %56) #12
  %58 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %43, i64 0, i32 1, i32 0
  %59 = atomicrmw add i32* %58, i32 %1 seq_cst
  br label %60

60:                                               ; preds = %52, %55
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcDirCacheUnload(%struct._FcCache* readnone) #1 {
  %2 = bitcast %struct._FcCache* %0 to i8*
  tail call void @FcCacheObjectDereference(i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCache* @IA__FcDirCacheLoad(i8*, %struct._FcConfig*, i8**) #1 {
  %4 = alloca %struct._FcCache*, align 8
  %5 = bitcast %struct._FcCache** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  store %struct._FcCache* null, %struct._FcCache** %4, align 8
  %6 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* %1) #12
  %7 = icmp eq %struct._FcConfig* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = call fastcc i32 @FcDirCacheProcess(%struct._FcConfig* nonnull %6, i8* %0, i32 (%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval*, i8*)* nonnull @FcDirCacheMapHelper, i8* nonnull %5, i8** %2)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  store %struct._FcCache* null, %struct._FcCache** %4, align 8
  br label %12

12:                                               ; preds = %8, %11
  call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %6) #12
  %13 = load %struct._FcCache*, %struct._FcCache** %4, align 8
  br label %14

14:                                               ; preds = %3, %12
  %15 = phi %struct._FcCache* [ %13, %12 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret %struct._FcCache* %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @FcDirCacheProcess(%struct._FcConfig*, i8*, i32 (%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval*, i8*)* nocapture, i8*, i8**) unnamed_addr #1 {
  %6 = alloca [52 x i8], align 16
  %7 = alloca %struct.stat, align 8
  %8 = alloca %struct.stat, align 8
  %9 = alloca %struct.timeval, align 8
  %10 = alloca [52 x i8], align 16
  %11 = getelementptr inbounds [52 x i8], [52 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %11) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 52, i1 false)
  %12 = bitcast %struct.stat* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 144, i1 false)
  %13 = bitcast %struct.stat* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %13) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 144, i1 false)
  %14 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* %0) #12
  %15 = bitcast %struct.timeval* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 16, i1 false)
  %16 = icmp ne i8* %14, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %5
  %18 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %14, i8* %1, i8* null) #12
  br label %21

19:                                               ; preds = %5
  %20 = tail call noalias i8* @strdup(i8* %1) #12
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi i8* [ %18, %17 ], [ %20, %19 ]
  %23 = call i32 @FcStatChecksum(i8* %22, %struct.stat* nonnull %8) #12
  %24 = icmp slt i32 %23, 0
  call void @IA__FcStrFree(i8* %22) #12
  br i1 %24, label %90, label %25

25:                                               ; preds = %21
  call fastcc void @FcDirCacheBasenameMD5(%struct._FcConfig* %0, i8* %1, i8* nonnull %11)
  %26 = getelementptr inbounds %struct._FcConfig, %struct._FcConfig* %0, i64 0, i32 3
  %27 = load %struct._FcStrSet*, %struct._FcStrSet** %26, align 8
  %28 = call %struct._FcStrList* @IA__FcStrListCreate(%struct._FcStrSet* %27) #12
  %29 = icmp eq %struct._FcStrList* %28, null
  br i1 %29, label %90, label %30

30:                                               ; preds = %25
  %31 = call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %28) #12
  %32 = icmp eq i8* %31, null
  br i1 %32, label %88, label %33

33:                                               ; preds = %30
  %34 = bitcast %struct.stat* %7 to %struct.stat64*
  %35 = getelementptr inbounds [52 x i8], [52 x i8]* %10, i64 0, i64 0
  %36 = icmp eq i8** %4, null
  br label %37

37:                                               ; preds = %33, %84
  %38 = phi i8* [ %31, %33 ], [ %86, %84 ]
  %39 = phi i32 [ 0, %33 ], [ %85, %84 ]
  br i1 %16, label %40, label %42

40:                                               ; preds = %37
  %41 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %14, i8* nonnull %38, i8* nonnull %11, i8* null) #12
  br label %44

42:                                               ; preds = %37
  %43 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %38, i8* nonnull %11, i8* null) #12
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i8* [ %41, %40 ], [ %43, %42 ]
  %46 = icmp eq i8* %45, null
  br i1 %46, label %88, label %47

47:                                               ; preds = %44, %80
  %48 = phi i8* [ %81, %80 ], [ %45, %44 ]
  %49 = phi i32 [ 1, %80 ], [ 0, %44 ]
  %50 = call i32 (i8*, i32, ...) @FcOpen(i8* nonnull %48, i32 0) #12
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %69, label %52

52:                                               ; preds = %47
  %53 = call i32 @__fxstat64(i32 1, i32 %50, %struct.stat64* nonnull %34) #12
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  %56 = call i32 @close(i32 %50) #12
  br label %69

57:                                               ; preds = %52
  %58 = call i32 %2(%struct._FcConfig* %0, i32 %50, %struct.stat* nonnull %7, %struct.stat* nonnull %8, %struct.timeval* nonnull %9, i8* %3) #12, !callees !2
  %59 = call i32 @close(i32 %50) #12
  %60 = icmp eq i32 %58, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %57
  br i1 %36, label %67, label %62

62:                                               ; preds = %61
  %63 = load i8*, i8** %4, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %62
  call void @IA__FcStrFree(i8* nonnull %63) #12
  br label %66

66:                                               ; preds = %62, %65
  store i8* %48, i8** %4, align 8
  br label %84

67:                                               ; preds = %61
  call void @IA__FcStrFree(i8* nonnull %48) #12
  br label %84

68:                                               ; preds = %57
  call void @IA__FcStrFree(i8* nonnull %48) #12
  br label %84

69:                                               ; preds = %55, %47
  %70 = icmp eq i32 %49, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %69
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %35) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 52, i1 false)
  call fastcc void @FcDirCacheBasenameUUID(%struct._FcConfig* %0, i8* %1, i8* nonnull %35)
  %72 = load i8, i8* %35, align 16
  %73 = icmp eq i8 %72, 0
  call void @IA__FcStrFree(i8* nonnull %48) #12
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %35) #12
  br label %84

75:                                               ; preds = %71
  br i1 %16, label %76, label %78

76:                                               ; preds = %75
  %77 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %14, i8* nonnull %38, i8* nonnull %35, i8* null) #12
  br label %80

78:                                               ; preds = %75
  %79 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %38, i8* nonnull %35, i8* null) #12
  br label %80

80:                                               ; preds = %78, %76
  %81 = phi i8* [ %77, %76 ], [ %79, %78 ]
  %82 = icmp eq i8* %81, null
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %35) #12
  br i1 %82, label %88, label %47

83:                                               ; preds = %69
  call void @IA__FcStrFree(i8* nonnull %48) #12
  br label %84

84:                                               ; preds = %66, %67, %68, %83, %74
  %85 = phi i32 [ %58, %66 ], [ %58, %67 ], [ 0, %68 ], [ %39, %83 ], [ %39, %74 ]
  %86 = call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %28) #12
  %87 = icmp eq i8* %86, null
  br i1 %87, label %88, label %37

88:                                               ; preds = %84, %44, %80, %30
  %89 = phi i32 [ 0, %30 ], [ %39, %80 ], [ %85, %84 ], [ %39, %44 ]
  call void @IA__FcStrListDone(%struct._FcStrList* nonnull %28) #12
  br label %90

90:                                               ; preds = %25, %21, %88
  %91 = phi i32 [ %89, %88 ], [ 0, %21 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %11) #12
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @FcDirCacheMapHelper(%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval* nocapture, i8* nocapture) #1 {
  %7 = tail call fastcc %struct._FcCache* @FcDirCacheMapFd(%struct._FcConfig* %0, i32 %1, %struct.stat* %2, %struct.stat* %3)
  %8 = icmp eq %struct._FcCache* %7, null
  br i1 %8, label %34, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 12, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 12, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = sdiv i64 %13, 1000
  %15 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, %11
  br i1 %17, label %18, label %22

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp slt i64 %20, %14
  br i1 %21, label %24, label %30

22:                                               ; preds = %9
  %23 = icmp slt i64 %16, %11
  br i1 %23, label %24, label %30

24:                                               ; preds = %22, %18
  %25 = bitcast i8* %5 to %struct._FcCache**
  %26 = load %struct._FcCache*, %struct._FcCache** %25, align 8
  %27 = icmp eq %struct._FcCache* %26, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = bitcast %struct._FcCache* %26 to i8*
  tail call void @FcCacheObjectDereference(i8* nonnull %29) #12
  br label %32

30:                                               ; preds = %22, %18
  %31 = bitcast %struct._FcCache* %7 to i8*
  tail call void @FcCacheObjectDereference(i8* nonnull %31) #12
  br label %34

32:                                               ; preds = %24, %28
  store i64 %11, i64* %15, align 8
  %33 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 1
  store i64 %14, i64* %33, align 8
  store %struct._FcCache* %7, %struct._FcCache** %25, align 8
  br label %34

34:                                               ; preds = %6, %32, %30
  %35 = phi i32 [ 1, %32 ], [ 0, %30 ], [ 0, %6 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCache* @IA__FcDirCacheLoadFile(i8*, %struct.stat*) #1 {
  %3 = alloca %struct.stat, align 8
  %4 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 144, i1 false)
  %5 = icmp eq %struct.stat* %1, null
  %6 = select i1 %5, %struct.stat* %3, %struct.stat* %1
  %7 = tail call i32 (i8*, i32, ...) @FcOpen(i8* %0, i32 0) #12
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %2
  %10 = bitcast %struct.stat* %6 to %struct.stat64*
  %11 = call i32 @__fxstat64(i32 1, i32 %7, %struct.stat64* %10) #12
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = call i32 @close(i32 %7) #12
  br label %21

15:                                               ; preds = %9
  %16 = call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* null) #12
  %17 = icmp eq %struct._FcConfig* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = call fastcc %struct._FcCache* @FcDirCacheMapFd(%struct._FcConfig* nonnull %16, i32 %7, %struct.stat* %6, %struct.stat* null)
  call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %16) #12
  %20 = call i32 @close(i32 %7) #12
  br label %21

21:                                               ; preds = %2, %13, %15, %18
  %22 = phi %struct._FcCache* [ %19, %18 ], [ null, %15 ], [ null, %13 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %4) #12
  ret %struct._FcCache* %22
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct._FcCache* @FcDirCacheMapFd(%struct._FcConfig*, i32, %struct.stat* readonly, %struct.stat* readonly) unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 8
  %7 = load i64, i64* %6, align 8
  %8 = icmp slt i64 %7, 64
  br i1 %8, label %330, label %9

9:                                                ; preds = %4
  tail call fastcc void @lock_cache() #12
  %10 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), align 16
  %11 = icmp eq %struct._FcCacheSkip* %10, null
  br i1 %11, label %42, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 1
  %16 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 12, i32 0
  %17 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 12, i32 1
  br label %18

18:                                               ; preds = %38, %12
  %19 = phi %struct._FcCacheSkip* [ %10, %12 ], [ %40, %38 ]
  %20 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, %14
  br i1 %22, label %23, label %38

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 5
  %25 = load i64, i64* %24, align 8
  %26 = load i64, i64* %15, align 8
  %27 = icmp eq i64 %25, %26
  br i1 %27, label %28, label %38

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 6
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %16, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 7
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* %17, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %45, label %38

38:                                               ; preds = %33, %28, %23, %18
  %39 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 8, i64 0
  %40 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %39, align 8
  %41 = icmp eq %struct._FcCacheSkip* %40, null
  br i1 %41, label %42, label %18

42:                                               ; preds = %38, %9
  %43 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %44 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %43) #12
  br label %58

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 1, i32 0
  %47 = atomicrmw add i32* %46, i32 1 seq_cst
  %48 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %49 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %48) #12
  %50 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %19, i64 0, i32 0
  %51 = load %struct._FcCache*, %struct._FcCache** %50, align 8
  %52 = icmp eq %struct._FcCache* %51, null
  br i1 %52, label %58, label %53

53:                                               ; preds = %45
  %54 = tail call fastcc i32 @FcCacheTimeValid(%struct._FcConfig* %0, %struct._FcCache* nonnull %51, %struct.stat* %3)
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %330

56:                                               ; preds = %53
  %57 = bitcast %struct._FcCache* %51 to i8*
  tail call void @FcCacheObjectDereference(i8* nonnull %57) #12
  br label %58

58:                                               ; preds = %42, %45, %56
  fence seq_cst
  %59 = load i64, i64* bitcast (i8** @FcCacheIsMmapSafe.static_status to i64*), align 8
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %77

62:                                               ; preds = %58
  %63 = tail call i8* @getenv(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #12
  %64 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %64) #12
  store i32 -1431655766, i32* %5, align 4
  %65 = icmp eq i8* %63, null
  br i1 %65, label %73, label %66

66:                                               ; preds = %62
  %67 = call i32 @FcNameBool(i8* nonnull %63, i32* nonnull %5) #12
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %66
  %70 = load i32, i32* %5, align 4
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, i32 2, i32 1
  br label %73

73:                                               ; preds = %69, %66, %62
  %74 = phi i32 [ %72, %69 ], [ 3, %66 ], [ 3, %62 ]
  %75 = zext i32 %74 to i64
  %76 = cmpxchg i64* bitcast (i8** @FcCacheIsMmapSafe.static_status to i64*), i64 0, i64 %75 seq_cst seq_cst
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %64) #12
  br label %77

77:                                               ; preds = %73, %58
  %78 = phi i32 [ %74, %73 ], [ %60, %58 ]
  %79 = icmp eq i32 %78, 3
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = call i32 @FcIsFsMmapSafe(i32 %1) #12
  br label %85

82:                                               ; preds = %77
  %83 = icmp eq i32 %78, 1
  %84 = zext i1 %83 to i32
  br label %85

85:                                               ; preds = %80, %82
  %86 = phi i32 [ %81, %80 ], [ %84, %82 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %96, label %88

88:                                               ; preds = %85
  %89 = load i64, i64* %6, align 8
  %90 = icmp sgt i64 %89, 1023
  br i1 %90, label %91, label %96

91:                                               ; preds = %88
  %92 = call i8* @mmap64(i8* null, i64 %89, i32 1, i32 1, i32 %1, i64 0) #12
  %93 = load i64, i64* %6, align 8
  %94 = call i32 @posix_fadvise64(i32 %1, i64 0, i64 %93, i32 3) #12
  %95 = ptrtoint i8* %92 to i64
  switch i64 %95, label %105 [
    i64 -1, label %96
    i64 0, label %96
  ]

96:                                               ; preds = %91, %91, %85, %88
  %97 = load i64, i64* %6, align 8
  %98 = call noalias i8* @malloc(i64 %97) #12
  %99 = icmp eq i8* %98, null
  br i1 %99, label %330, label %100

100:                                              ; preds = %96
  %101 = call i64 @read(i32 %1, i8* nonnull %98, i64 %97) #12
  %102 = load i64, i64* %6, align 8
  %103 = icmp eq i64 %101, %102
  br i1 %103, label %105, label %104

104:                                              ; preds = %100
  call void @free(i8* nonnull %98) #12
  br label %330

105:                                              ; preds = %91, %100
  %106 = phi i8* [ %98, %100 ], [ %92, %91 ]
  %107 = phi i32 [ 1, %100 ], [ 0, %91 ]
  %108 = bitcast i8* %106 to %struct._FcCache*
  %109 = bitcast i8* %106 to i32*
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %110, -66913276
  br i1 %111, label %112, label %321

112:                                              ; preds = %105
  %113 = getelementptr inbounds i8, i8* %106, i64 4
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = icmp slt i32 %115, 7
  br i1 %116, label %321, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i8, i8* %106, i64 8
  %119 = bitcast i8* %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = load i64, i64* %6, align 8
  %122 = icmp eq i64 %120, %121
  br i1 %122, label %123, label %321

123:                                              ; preds = %117
  %124 = getelementptr inbounds i8, i8* %106, i64 %120
  %125 = getelementptr inbounds i8, i8* %106, i64 16
  %126 = bitcast i8* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = icmp slt i64 %127, 0
  %129 = add i64 %120, -8
  %130 = icmp ugt i64 %127, %129
  %131 = or i1 %128, %130
  br i1 %131, label %321, label %132

132:                                              ; preds = %123
  %133 = getelementptr inbounds i8, i8* %106, i64 %127
  %134 = sub nsw i64 %120, %127
  %135 = call i8* @memchr(i8* %133, i32 0, i64 %134) #14
  %136 = icmp eq i8* %135, null
  br i1 %136, label %321, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds i8, i8* %106, i64 24
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = icmp sgt i64 %140, -1
  %142 = icmp sgt i64 %120, %140
  %143 = and i1 %141, %142
  br i1 %143, label %144, label %321

144:                                              ; preds = %137
  %145 = getelementptr inbounds i8, i8* %106, i64 32
  %146 = bitcast i8* %145 to i32*
  %147 = load i32, i32* %146, align 8
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %321, label %149

149:                                              ; preds = %144
  %150 = sext i32 %147 to i64
  %151 = sub nsw i64 %120, %140
  %152 = lshr i64 %151, 3
  %153 = icmp ult i64 %152, %150
  br i1 %153, label %321, label %154

154:                                              ; preds = %149
  %155 = ptrtoint i8* %106 to i64
  %156 = add nsw i64 %140, %155
  %157 = inttoptr i64 %156 to i64*
  %158 = icmp ne i64 %156, 0
  %159 = icmp sgt i32 %147, 0
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %182

161:                                              ; preds = %154
  %162 = ptrtoint i8* %124 to i64
  %163 = add i64 %162, -8
  %164 = sub i64 %163, %156
  %165 = zext i32 %147 to i64
  br label %168

166:                                              ; preds = %175
  %167 = icmp eq i64 %181, %165
  br i1 %167, label %182, label %168

168:                                              ; preds = %166, %161
  %169 = phi i64 [ 0, %161 ], [ %181, %166 ]
  %170 = getelementptr inbounds i64, i64* %157, i64 %169
  %171 = load i64, i64* %170, align 8
  %172 = icmp slt i64 %171, 0
  %173 = icmp ugt i64 %171, %164
  %174 = or i1 %172, %173
  br i1 %174, label %321, label %175

175:                                              ; preds = %168
  %176 = add nsw i64 %171, %156
  %177 = inttoptr i64 %176 to i8*
  %178 = sub i64 %162, %176
  %179 = call i8* @memchr(i8* %177, i32 0, i64 %178) #14
  %180 = icmp eq i8* %179, null
  %181 = add nuw nsw i64 %169, 1
  br i1 %180, label %321, label %166

182:                                              ; preds = %166, %154
  %183 = getelementptr inbounds i8, i8* %106, i64 40
  %184 = bitcast i8* %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = icmp slt i64 %185, 0
  %187 = add i64 %120, -16
  %188 = icmp ugt i64 %185, %187
  %189 = or i1 %186, %188
  br i1 %189, label %321, label %190

190:                                              ; preds = %182
  %191 = add nsw i64 %185, %155
  %192 = inttoptr i64 %191 to %struct._FcFontSet*
  %193 = icmp eq i64 %191, 0
  br i1 %193, label %315, label %194

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %192, i64 0, i32 0
  %196 = load i32, i32* %195, align 8
  %197 = sext i32 %196 to i64
  %198 = ptrtoint i8* %124 to i64
  %199 = sub i64 %198, %191
  %200 = udiv i64 %199, 24
  %201 = icmp ult i64 %200, %197
  br i1 %201, label %321, label %202

202:                                              ; preds = %194
  %203 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %192, i64 0, i32 2
  %204 = bitcast %struct._FcPattern*** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = and i64 %205, 1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %321, label %208

208:                                              ; preds = %202
  %209 = icmp sgt i32 %196, 0
  br i1 %209, label %210, label %315

210:                                              ; preds = %208
  %211 = and i64 %205, -2
  %212 = add nsw i64 %211, %191
  %213 = inttoptr i64 %212 to %struct._FcPattern**
  %214 = bitcast i8* %106 to %struct._FcPattern*
  %215 = getelementptr inbounds i8, i8* %124, i64 -16
  %216 = getelementptr inbounds i8, i8* %124, i64 -32
  %217 = zext i32 %196 to i64
  br label %218

218:                                              ; preds = %312, %210
  %219 = phi i64 [ 0, %210 ], [ %313, %312 ]
  %220 = getelementptr inbounds %struct._FcPattern*, %struct._FcPattern** %213, i64 %219
  %221 = bitcast %struct._FcPattern** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = and i64 %222, -2
  %224 = add nsw i64 %223, %191
  %225 = inttoptr i64 %224 to %struct._FcPattern*
  %226 = inttoptr i64 %224 to i8*
  %227 = icmp ult %struct._FcPattern* %225, %214
  %228 = icmp ult i8* %215, %226
  %229 = or i1 %227, %228
  br i1 %229, label %321, label %230

230:                                              ; preds = %218
  %231 = getelementptr inbounds %struct._FcPattern, %struct._FcPattern* %225, i64 0, i32 2
  %232 = load i64, i64* %231, align 8
  %233 = icmp slt i64 %232, 0
  br i1 %233, label %321, label %234

234:                                              ; preds = %230
  %235 = sub i64 %198, %224
  %236 = icmp slt i64 %235, %232
  br i1 %236, label %321, label %237

237:                                              ; preds = %234
  %238 = getelementptr inbounds %struct._FcPattern, %struct._FcPattern* %225, i64 0, i32 0
  %239 = load i32, i32* %238, align 8
  %240 = sext i32 %239 to i64
  %241 = sub nsw i64 %235, %232
  %242 = lshr i64 %241, 4
  %243 = icmp ult i64 %242, %240
  br i1 %243, label %321, label %244

244:                                              ; preds = %237
  %245 = getelementptr inbounds %struct._FcPattern, %struct._FcPattern* %225, i64 0, i32 3, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = icmp eq i32 %246, -1
  br i1 %247, label %248, label %321

248:                                              ; preds = %244
  %249 = add nsw i64 %232, %224
  %250 = inttoptr i64 %249 to %struct._FcPatternElt*
  %251 = getelementptr inbounds %struct._FcPatternElt, %struct._FcPatternElt* %250, i64 0, i32 1
  %252 = load %struct._FcValueList*, %struct._FcValueList** %251, align 8
  %253 = icmp eq %struct._FcValueList* %252, null
  br i1 %253, label %258, label %254

254:                                              ; preds = %248
  %255 = ptrtoint %struct._FcValueList* %252 to i64
  %256 = and i64 %255, 1
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %321, label %258

258:                                              ; preds = %254, %248
  %259 = icmp sgt i32 %239, 0
  br i1 %259, label %260, label %312

260:                                              ; preds = %258
  %261 = getelementptr inbounds i8, i8* %226, i64 %232
  %262 = zext i32 %239 to i64
  br label %263

263:                                              ; preds = %309, %260
  %264 = phi %struct._FcValueList* [ %252, %260 ], [ %311, %309 ]
  %265 = phi i64 [ 0, %260 ], [ %307, %309 ]
  %266 = ptrtoint %struct._FcValueList* %264 to i64
  %267 = and i64 %266, 1
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %275, label %269

269:                                              ; preds = %263
  %270 = getelementptr inbounds %struct._FcPatternElt, %struct._FcPatternElt* %250, i64 %265
  %271 = ptrtoint %struct._FcPatternElt* %270 to i64
  %272 = and i64 %266, -2
  %273 = add nsw i64 %272, %271
  %274 = inttoptr i64 %273 to %struct._FcValueList*
  br label %275

275:                                              ; preds = %269, %263
  %276 = phi %struct._FcValueList* [ %274, %269 ], [ %264, %263 ]
  %277 = icmp eq %struct._FcValueList* %276, null
  br i1 %277, label %306, label %278

278:                                              ; preds = %275, %301
  %279 = phi i8* [ %304, %301 ], [ %261, %275 ]
  %280 = phi %struct._FcValueList* [ %303, %301 ], [ %276, %275 ]
  %281 = bitcast %struct._FcValueList* %280 to i8*
  %282 = icmp ugt i8* %279, %281
  %283 = icmp ult i8* %216, %281
  %284 = or i1 %282, %283
  br i1 %284, label %321, label %285

285:                                              ; preds = %278
  %286 = getelementptr inbounds %struct._FcValueList, %struct._FcValueList* %280, i64 0, i32 0
  %287 = load %struct._FcValueList*, %struct._FcValueList** %286, align 8
  %288 = icmp eq %struct._FcValueList* %287, null
  %289 = ptrtoint %struct._FcValueList* %287 to i64
  %290 = and i64 %289, 1
  %291 = icmp eq i64 %290, 0
  br i1 %288, label %297, label %292

292:                                              ; preds = %285
  br i1 %291, label %321, label %293

293:                                              ; preds = %292
  %294 = ptrtoint %struct._FcValueList* %280 to i64
  %295 = and i64 %289, -2
  %296 = add nsw i64 %295, %294
  br label %301

297:                                              ; preds = %285
  %298 = ptrtoint %struct._FcValueList* %280 to i64
  %299 = and i64 %289, -2
  %300 = add nsw i64 %299, %298
  br i1 %291, label %306, label %301

301:                                              ; preds = %293, %297
  %302 = phi i64 [ %300, %297 ], [ %296, %293 ]
  %303 = inttoptr i64 %302 to %struct._FcValueList*
  %304 = getelementptr inbounds i8, i8* %281, i64 1
  %305 = icmp eq i64 %302, 0
  br i1 %305, label %306, label %278

306:                                              ; preds = %297, %301, %275
  %307 = add nuw nsw i64 %265, 1
  %308 = icmp eq i64 %307, %262
  br i1 %308, label %312, label %309

309:                                              ; preds = %306
  %310 = getelementptr inbounds %struct._FcPatternElt, %struct._FcPatternElt* %250, i64 %307, i32 1
  %311 = load %struct._FcValueList*, %struct._FcValueList** %310, align 8
  br label %263

312:                                              ; preds = %306, %258
  %313 = add nuw nsw i64 %219, 1
  %314 = icmp eq i64 %313, %217
  br i1 %314, label %315, label %218

315:                                              ; preds = %312, %208, %190
  %316 = call fastcc i32 @FcCacheTimeValid(%struct._FcConfig* %0, %struct._FcCache* %108, %struct.stat* %3)
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %321, label %318

318:                                              ; preds = %315
  %319 = call fastcc i32 @FcCacheInsert(%struct._FcCache* %108, %struct.stat* %2)
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %327

321:                                              ; preds = %175, %168, %244, %254, %218, %230, %234, %237, %278, %292, %202, %194, %182, %144, %149, %137, %123, %132, %318, %315, %117, %105, %112
  %322 = icmp eq i32 %107, 0
  br i1 %322, label %324, label %323

323:                                              ; preds = %321
  call void @free(i8* %106) #12
  br label %330

324:                                              ; preds = %321
  %325 = load i64, i64* %6, align 8
  %326 = call i32 @munmap(i8* %106, i64 %325) #12
  br label %330

327:                                              ; preds = %318
  %328 = icmp eq i32 %107, 0
  br i1 %328, label %330, label %329

329:                                              ; preds = %327
  store i32 -66913275, i32* %109, align 8
  br label %330

330:                                              ; preds = %329, %327, %323, %324, %96, %53, %4, %104
  %331 = phi %struct._FcCache* [ null, %104 ], [ null, %4 ], [ %51, %53 ], [ null, %96 ], [ null, %324 ], [ null, %323 ], [ %108, %327 ], [ %108, %329 ]
  ret %struct._FcCache* %331
}

declare i32 @close(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcDirCacheValid(i8*) #1 {
  %2 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* null) #12
  %3 = icmp eq %struct._FcConfig* %2, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = tail call fastcc i32 @FcDirCacheProcess(%struct._FcConfig* nonnull %2, i8* %0, i32 (%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval*, i8*)* nonnull @FcDirCacheValidateHelper, i8* null, i8** null) #12
  tail call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %2) #12
  br label %6

6:                                                ; preds = %1, %4
  %7 = phi i32 [ %5, %4 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCache* @FcDirCacheBuild(%struct._FcFontSet*, i8*, %struct.stat* nocapture readonly, %struct._FcStrSet*) local_unnamed_addr #1 {
  %5 = tail call %struct._FcSerialize* @FcSerializeCreate() #12
  %6 = icmp eq %struct._FcSerialize* %5, null
  br i1 %6, label %111, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @FcSerializeReserve(%struct._FcSerialize* nonnull %5, i32 64) #12
  %9 = tail call i32 @FcStrSerializeAlloc(%struct._FcSerialize* nonnull %5, i8* %1) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %110, label %11

11:                                               ; preds = %7
  %12 = bitcast %struct._FcStrSet* %3 to i8*
  %13 = getelementptr inbounds %struct._FcStrSet, %struct._FcStrSet* %3, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 3
  %16 = tail call i32 @FcSerializeAlloc(%struct._FcSerialize* nonnull %5, i8* %12, i32 %15) #12
  %17 = load i32, i32* %13, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct._FcStrSet, %struct._FcStrSet* %3, i64 0, i32 3
  br label %25

21:                                               ; preds = %25
  %22 = load i32, i32* %13, align 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %32, %23
  br i1 %24, label %25, label %33

25:                                               ; preds = %19, %21
  %26 = phi i64 [ 0, %19 ], [ %32, %21 ]
  %27 = load i8**, i8*** %20, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 %26
  %29 = load i8*, i8** %28, align 8
  %30 = tail call i32 @FcStrSerializeAlloc(%struct._FcSerialize* nonnull %5, i8* %29) #12
  %31 = icmp eq i32 %30, 0
  %32 = add nuw nsw i64 %26, 1
  br i1 %31, label %110, label %21

33:                                               ; preds = %21, %11
  %34 = tail call i32 @FcFontSetSerializeAlloc(%struct._FcSerialize* nonnull %5, %struct._FcFontSet* %0) #12
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %110, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct._FcSerialize, %struct._FcSerialize* %5, i64 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = tail call noalias i8* @malloc(i64 %38) #12
  %40 = bitcast i8* %39 to %struct._FcCache*
  %41 = icmp eq i8* %39, null
  br i1 %41, label %110, label %42

42:                                               ; preds = %36
  %43 = load i64, i64* %37, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 %43, i1 false)
  %44 = getelementptr inbounds %struct._FcSerialize, %struct._FcSerialize* %5, i64 0, i32 2
  store i8* %39, i8** %44, align 8
  %45 = bitcast i8* %39 to i32*
  store i32 -66913275, i32* %45, align 8
  %46 = getelementptr inbounds i8, i8* %39, i64 4
  %47 = bitcast i8* %46 to i32*
  store i32 7, i32* %47, align 4
  %48 = load i64, i64* %37, align 8
  %49 = getelementptr inbounds i8, i8* %39, i64 8
  %50 = bitcast i8* %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = tail call fastcc i32 @FcDirChecksum(%struct.stat* %2)
  %52 = getelementptr inbounds i8, i8* %39, i64 48
  %53 = bitcast i8* %52 to i32*
  store i32 %51, i32* %53, align 8
  %54 = tail call i8* @getenv(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)) #12
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %59

56:                                               ; preds = %42
  %57 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 12, i32 1
  %58 = load i64, i64* %57, align 8
  br label %59

59:                                               ; preds = %42, %56
  %60 = phi i64 [ %58, %56 ], [ 0, %42 ]
  %61 = getelementptr inbounds i8, i8* %39, i64 56
  %62 = bitcast i8* %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = tail call i8* @FcStrSerialize(%struct._FcSerialize* nonnull %5, i8* %1) #12
  %64 = icmp eq i8* %63, null
  br i1 %64, label %109, label %65

65:                                               ; preds = %59
  %66 = ptrtoint i8* %63 to i64
  %67 = ptrtoint i8* %39 to i64
  %68 = sub nsw i64 %66, %67
  %69 = getelementptr inbounds i8, i8* %39, i64 16
  %70 = bitcast i8* %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = tail call i8* @FcSerializePtr(%struct._FcSerialize* nonnull %5, i8* %12) #12
  %72 = bitcast i8* %71 to i64*
  %73 = icmp eq i8* %71, null
  br i1 %73, label %109, label %74

74:                                               ; preds = %65
  %75 = ptrtoint i8* %71 to i64
  %76 = sub nsw i64 %75, %67
  %77 = getelementptr inbounds i8, i8* %39, i64 24
  %78 = bitcast i8* %77 to i64*
  store i64 %76, i64* %78, align 8
  %79 = load i32, i32* %13, align 4
  %80 = getelementptr inbounds i8, i8* %39, i64 32
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 8
  %82 = icmp sgt i32 %79, 0
  br i1 %82, label %83, label %100

83:                                               ; preds = %74
  %84 = getelementptr inbounds %struct._FcStrSet, %struct._FcStrSet* %3, i64 0, i32 3
  br label %85

85:                                               ; preds = %83, %92
  %86 = phi i64 [ 0, %83 ], [ %96, %92 ]
  %87 = load i8**, i8*** %84, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 %86
  %89 = load i8*, i8** %88, align 8
  %90 = tail call i8* @FcStrSerialize(%struct._FcSerialize* nonnull %5, i8* %89) #12
  %91 = icmp eq i8* %90, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %85
  %93 = ptrtoint i8* %90 to i64
  %94 = sub nsw i64 %93, %75
  %95 = getelementptr inbounds i64, i64* %72, i64 %86
  store i64 %94, i64* %95, align 8
  %96 = add nuw nsw i64 %86, 1
  %97 = load i32, i32* %13, align 4
  %98 = sext i32 %97 to i64
  %99 = icmp slt i64 %96, %98
  br i1 %99, label %85, label %100

100:                                              ; preds = %92, %74
  %101 = tail call %struct._FcFontSet* @FcFontSetSerialize(%struct._FcSerialize* nonnull %5, %struct._FcFontSet* %0) #12
  %102 = icmp eq %struct._FcFontSet* %101, null
  br i1 %102, label %109, label %103

103:                                              ; preds = %100
  %104 = ptrtoint %struct._FcFontSet* %101 to i64
  %105 = sub nsw i64 %104, %67
  %106 = getelementptr inbounds i8, i8* %39, i64 40
  %107 = bitcast i8* %106 to i64*
  store i64 %105, i64* %107, align 8
  tail call void @FcSerializeDestroy(%struct._FcSerialize* nonnull %5) #12
  %108 = tail call fastcc i32 @FcCacheInsert(%struct._FcCache* nonnull %40, %struct.stat* null)
  br label %111

109:                                              ; preds = %85, %100, %65, %59
  tail call void @free(i8* %39) #12
  br label %110

110:                                              ; preds = %25, %36, %33, %7, %109
  tail call void @FcSerializeDestroy(%struct._FcSerialize* nonnull %5) #12
  br label %111

111:                                              ; preds = %4, %110, %103
  %112 = phi %struct._FcCache* [ null, %110 ], [ %40, %103 ], [ null, %4 ]
  ret %struct._FcCache* %112
}

declare hidden %struct._FcSerialize* @FcSerializeCreate() local_unnamed_addr #3

declare hidden i64 @FcSerializeReserve(%struct._FcSerialize*, i32) local_unnamed_addr #3

declare hidden i32 @FcStrSerializeAlloc(%struct._FcSerialize*, i8*) local_unnamed_addr #3

declare hidden i32 @FcSerializeAlloc(%struct._FcSerialize*, i8*, i32) local_unnamed_addr #3

declare hidden i32 @FcFontSetSerializeAlloc(%struct._FcSerialize*, %struct._FcFontSet*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @FcDirChecksum(%struct.stat* nocapture readonly) unnamed_addr #1 {
  %2 = alloca i8*, align 8
  %3 = getelementptr inbounds %struct.stat, %struct.stat* %0, i64 0, i32 12, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %7 = tail call i8* @getenv(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)) #12
  %8 = icmp eq i8* %7, null
  br i1 %8, label %43, label %9

9:                                                ; preds = %1
  %10 = tail call i32* @__errno_location() #15
  store i32 0, i32* %10, align 4
  %11 = call i64 @strtoull(i8* nonnull %7, i8** nonnull %2, i32 10) #12
  %12 = load i8*, i8** %2, align 8
  %13 = icmp eq i8* %12, %7
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %16 = tail call i64 @fwrite(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i64 0, i64 0), i64 38, i64 1, %struct._IO_FILE* %15) #13
  br label %43

17:                                               ; preds = %9
  %18 = load i32, i32* %10, align 4
  %19 = icmp eq i32 %18, 34
  %20 = add i64 %11, 1
  %21 = icmp ult i64 %20, 2
  %22 = and i1 %21, %19
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = icmp ne i32 %18, 0
  %25 = icmp eq i64 %11, 0
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %31

27:                                               ; preds = %17, %23
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %29 = tail call i8* @strerror(i32 %18) #12
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.27, i64 0, i64 0), i8* %29, i64 %11) #13
  br label %43

31:                                               ; preds = %23
  %32 = load i8, i8* %12, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %31
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %36 = tail call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.28, i64 0, i64 0), i64 51, i64 1, %struct._IO_FILE* %35) #13
  br label %43

37:                                               ; preds = %31
  %38 = shl i64 %4, 32
  %39 = ashr exact i64 %38, 32
  %40 = icmp ult i64 %11, %39
  %41 = trunc i64 %11 to i32
  %42 = select i1 %40, i32 %41, i32 %5
  br label %43

43:                                               ; preds = %37, %1, %14, %34, %27
  %44 = phi i32 [ %5, %14 ], [ %5, %27 ], [ %5, %34 ], [ %5, %1 ], [ %42, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret i32 %44
}

declare hidden i8* @FcStrSerialize(%struct._FcSerialize*, i8*) local_unnamed_addr #3

declare hidden i8* @FcSerializePtr(%struct._FcSerialize*, i8*) local_unnamed_addr #3

declare hidden %struct._FcFontSet* @FcFontSetSerialize(%struct._FcSerialize*, %struct._FcFontSet*) local_unnamed_addr #3

declare hidden void @FcSerializeDestroy(%struct._FcSerialize*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @FcCacheInsert(%struct._FcCache*, %struct.stat* readonly) unnamed_addr #1 {
  %3 = alloca [16 x %struct._FcCacheSkip**], align 16
  %4 = bitcast [16 x %struct._FcCacheSkip**]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 128, i1 false)
  tail call fastcc void @lock_cache()
  %5 = load i32, i32* @fcCacheMaxLevel, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %2
  %8 = sext i32 %5 to i64
  br label %9

9:                                                ; preds = %7, %32
  %10 = phi i64 [ %8, %7 ], [ %12, %32 ]
  %11 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %7 ], [ %33, %32 ]
  %12 = add nsw i64 %10, -1
  %13 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %11, i64 %12
  %14 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %13, align 8
  %15 = icmp eq %struct._FcCacheSkip* %14, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %14, i64 0, i32 0
  %18 = load %struct._FcCache*, %struct._FcCache** %17, align 8
  %19 = icmp ugt %struct._FcCache* %18, %0
  br i1 %19, label %32, label %20

20:                                               ; preds = %16, %25
  %21 = phi %struct._FcCacheSkip* [ %23, %25 ], [ %14, %16 ]
  %22 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %21, i64 0, i32 8, i64 %12
  %23 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %22, align 8
  %24 = icmp eq %struct._FcCacheSkip* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %23, i64 0, i32 0
  %27 = load %struct._FcCache*, %struct._FcCache** %26, align 8
  %28 = icmp ugt %struct._FcCache* %27, %0
  br i1 %28, label %29, label %20

29:                                               ; preds = %25, %20
  %30 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %21, i64 0, i32 8, i64 0
  %31 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %21, i64 0, i32 8, i64 %12
  br label %32

32:                                               ; preds = %29, %16, %9
  %33 = phi %struct._FcCacheSkip** [ %11, %9 ], [ %11, %16 ], [ %30, %29 ]
  %34 = phi %struct._FcCacheSkip** [ %13, %9 ], [ %13, %16 ], [ %31, %29 ]
  %35 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %12
  store %struct._FcCacheSkip** %34, %struct._FcCacheSkip*** %35, align 8
  %36 = icmp sgt i64 %12, 0
  br i1 %36, label %9, label %37

37:                                               ; preds = %32, %2
  %38 = tail call i32 @FcRandom() #12
  %39 = tail call i32 @FcRandom() #12
  %40 = or i32 %39, %38
  %41 = sext i32 %40 to i64
  br label %42

42:                                               ; preds = %42, %37
  %43 = phi i64 [ %41, %37 ], [ %50, %42 ]
  %44 = phi i32 [ 0, %37 ], [ %45, %42 ]
  %45 = add nuw nsw i32 %44, 1
  %46 = icmp ult i32 %45, 16
  %47 = and i64 %43, 1
  %48 = icmp eq i64 %47, 0
  %49 = and i1 %48, %46
  %50 = ashr i64 %43, 1
  br i1 %49, label %42, label %51

51:                                               ; preds = %42
  %52 = load i32, i32* @fcCacheMaxLevel, align 4
  %53 = icmp slt i32 %44, %52
  br i1 %53, label %59, label %54

54:                                               ; preds = %51
  %55 = add nsw i32 %52, 1
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds [16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 %56
  %58 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %56
  store %struct._FcCacheSkip** %57, %struct._FcCacheSkip*** %58, align 8
  store i32 %55, i32* @fcCacheMaxLevel, align 4
  br label %59

59:                                               ; preds = %51, %54
  %60 = phi i32 [ %55, %54 ], [ %45, %51 ]
  %61 = add nsw i32 %60, -1
  %62 = sext i32 %61 to i64
  %63 = shl nsw i64 %62, 3
  %64 = add nsw i64 %63, 72
  %65 = tail call noalias i8* @malloc(i64 %64) #12
  %66 = icmp eq i8* %65, null
  br i1 %66, label %156, label %67

67:                                               ; preds = %59
  %68 = bitcast i8* %65 to %struct._FcCache**
  store %struct._FcCache* %0, %struct._FcCache** %68, align 8
  %69 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds i8, i8* %65, i64 16
  %72 = bitcast i8* %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = getelementptr inbounds i8, i8* %65, i64 24
  %74 = bitcast i8* %73 to i8**
  store i8* null, i8** %74, align 8
  %75 = getelementptr inbounds i8, i8* %65, i64 8
  %76 = bitcast i8* %75 to i32*
  store i32 1, i32* %76, align 4
  %77 = icmp eq %struct.stat* %1, null
  %78 = getelementptr inbounds i8, i8* %65, i64 32
  br i1 %77, label %88, label %79

79:                                               ; preds = %67
  %80 = bitcast %struct.stat* %1 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8
  %82 = bitcast i8* %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %82, align 8
  %83 = getelementptr inbounds %struct.stat, %struct.stat* %1, i64 0, i32 12, i32 0
  %84 = getelementptr inbounds i8, i8* %65, i64 48
  %85 = bitcast i64* %83 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 8
  %87 = bitcast i8* %84 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %87, align 8
  br label %89

88:                                               ; preds = %67
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 32, i1 false)
  br label %89

89:                                               ; preds = %88, %79
  %90 = icmp sgt i32 %60, 0
  br i1 %90, label %91, label %153

91:                                               ; preds = %89
  %92 = getelementptr inbounds i8, i8* %65, i64 64
  %93 = bitcast i8* %92 to [1 x %struct._FcCacheSkip*]*
  %94 = zext i32 %60 to i64
  %95 = add nsw i64 %94, -1
  %96 = and i64 %94, 3
  %97 = icmp ult i64 %95, 3
  br i1 %97, label %137, label %98

98:                                               ; preds = %91
  %99 = sub nsw i64 %94, %96
  br label %100

100:                                              ; preds = %100, %98
  %101 = phi i64 [ 0, %98 ], [ %134, %100 ]
  %102 = phi i64 [ %99, %98 ], [ %135, %100 ]
  %103 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %101
  %104 = bitcast %struct._FcCacheSkip*** %103 to i64**
  %105 = load i64*, i64** %104, align 16
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds [1 x %struct._FcCacheSkip*], [1 x %struct._FcCacheSkip*]* %93, i64 0, i64 %101
  %108 = bitcast %struct._FcCacheSkip** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast i64* %105 to i8**
  store i8* %65, i8** %109, align 8
  %110 = or i64 %101, 1
  %111 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %110
  %112 = bitcast %struct._FcCacheSkip*** %111 to i64**
  %113 = load i64*, i64** %112, align 8
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds [1 x %struct._FcCacheSkip*], [1 x %struct._FcCacheSkip*]* %93, i64 0, i64 %110
  %116 = bitcast %struct._FcCacheSkip** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast i64* %113 to i8**
  store i8* %65, i8** %117, align 8
  %118 = or i64 %101, 2
  %119 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %118
  %120 = bitcast %struct._FcCacheSkip*** %119 to i64**
  %121 = load i64*, i64** %120, align 16
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds [1 x %struct._FcCacheSkip*], [1 x %struct._FcCacheSkip*]* %93, i64 0, i64 %118
  %124 = bitcast %struct._FcCacheSkip** %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = bitcast i64* %121 to i8**
  store i8* %65, i8** %125, align 8
  %126 = or i64 %101, 3
  %127 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %126
  %128 = bitcast %struct._FcCacheSkip*** %127 to i64**
  %129 = load i64*, i64** %128, align 8
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds [1 x %struct._FcCacheSkip*], [1 x %struct._FcCacheSkip*]* %93, i64 0, i64 %126
  %132 = bitcast %struct._FcCacheSkip** %131 to i64*
  store i64 %130, i64* %132, align 8
  %133 = bitcast i64* %129 to i8**
  store i8* %65, i8** %133, align 8
  %134 = add nuw nsw i64 %101, 4
  %135 = add i64 %102, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %100

137:                                              ; preds = %100, %91
  %138 = phi i64 [ 0, %91 ], [ %134, %100 ]
  %139 = icmp eq i64 %96, 0
  br i1 %139, label %153, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %150, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %151, %140 ], [ %96, %137 ]
  %143 = getelementptr inbounds [16 x %struct._FcCacheSkip**], [16 x %struct._FcCacheSkip**]* %3, i64 0, i64 %141
  %144 = bitcast %struct._FcCacheSkip*** %143 to i64**
  %145 = load i64*, i64** %144, align 8
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds [1 x %struct._FcCacheSkip*], [1 x %struct._FcCacheSkip*]* %93, i64 0, i64 %141
  %148 = bitcast %struct._FcCacheSkip** %147 to i64*
  store i64 %146, i64* %148, align 8
  %149 = bitcast i64* %145 to i8**
  store i8* %65, i8** %149, align 8
  %150 = add nuw nsw i64 %141, 1
  %151 = add i64 %142, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %140, !llvm.loop !3

153:                                              ; preds = %137, %140, %89
  %154 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %155 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %154) #12
  br label %156

156:                                              ; preds = %59, %153
  %157 = phi i32 [ 1, %153 ], [ 0, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #12
  ret i32 %157
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCache* @FcDirCacheRebuild(%struct._FcCache*, %struct.stat* nocapture readonly, %struct._FcStrSet*) local_unnamed_addr #1 {
  %4 = ptrtoint %struct._FcCache* %0 to i64
  %5 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 6
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  %8 = inttoptr i64 %7 to %struct._FcFontSet*
  %9 = tail call %struct._FcFontSet* @FcFontSetDeserialize(%struct._FcFontSet* %8) #12
  %10 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %11, %4
  %13 = inttoptr i64 %12 to i8*
  %14 = tail call %struct._FcCache* @FcDirCacheBuild(%struct._FcFontSet* %9, i8* %13, %struct.stat* %1, %struct._FcStrSet* %2)
  tail call void @IA__FcFontSetDestroy(%struct._FcFontSet* %9) #12
  ret %struct._FcCache* %14
}

declare hidden %struct._FcFontSet* @FcFontSetDeserialize(%struct._FcFontSet*) local_unnamed_addr #3

declare hidden void @IA__FcFontSetDestroy(%struct._FcFontSet*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcDirCacheWrite(%struct._FcCache*, %struct._FcConfig*) local_unnamed_addr #1 {
  %3 = alloca [52 x i8], align 16
  %4 = alloca %struct.stat, align 16
  %5 = ptrtoint %struct._FcCache* %0 to i64
  %6 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, %5
  %9 = inttoptr i64 %8 to i8*
  %10 = getelementptr inbounds [52 x i8], [52 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %10) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 52, i1 false)
  %11 = bitcast %struct.stat* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %11) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 144, i1 false)
  %12 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* %1) #12
  %13 = getelementptr inbounds %struct._FcConfig, %struct._FcConfig* %1, i64 0, i32 3
  %14 = load %struct._FcStrSet*, %struct._FcStrSet** %13, align 8
  %15 = tail call %struct._FcStrList* @IA__FcStrListCreate(%struct._FcStrSet* %14) #12
  %16 = icmp eq %struct._FcStrList* %15, null
  br i1 %16, label %183, label %17

17:                                               ; preds = %2
  %18 = tail call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %15) #12
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @IA__FcStrListDone(%struct._FcStrList* nonnull %15) #12
  br label %183

21:                                               ; preds = %17
  %22 = icmp eq i8* %12, null
  br label %23

23:                                               ; preds = %21, %54
  %24 = phi i8* [ %18, %21 ], [ %55, %54 ]
  %25 = phi i8* [ null, %21 ], [ %34, %54 ]
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  tail call void @IA__FcStrFree(i8* nonnull %25) #12
  br label %28

28:                                               ; preds = %23, %27
  br i1 %22, label %31, label %29

29:                                               ; preds = %28
  %30 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %12, i8* nonnull %24, i8* null) #12
  br label %33

31:                                               ; preds = %28
  %32 = tail call i8* @IA__FcStrCopyFilename(i8* nonnull %24) #12
  br label %33

33:                                               ; preds = %31, %29
  %34 = phi i8* [ %30, %29 ], [ %32, %31 ]
  %35 = tail call i32 @access(i8* %34, i32 2) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = tail call i8* @IA__FcStrCopyFilename(i8* %34) #12
  br label %57

39:                                               ; preds = %33
  %40 = tail call i32 @access(i8* %34, i32 0) #12
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %48

42:                                               ; preds = %39
  %43 = tail call i32 @FcMakeDirectory(i8* %34) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %54, label %45

45:                                               ; preds = %42
  %46 = tail call i8* @IA__FcStrCopyFilename(i8* %34) #12
  %47 = tail call i32 @FcDirCacheCreateTagFile(i8* %34)
  br label %57

48:                                               ; preds = %39
  %49 = tail call i32 @chmod(i8* %34, i32 493) #12
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = tail call i8* @IA__FcStrCopyFilename(i8* %34) #12
  %53 = tail call i32 @FcDirCacheCreateTagFile(i8* %34)
  br label %57

54:                                               ; preds = %42, %48
  %55 = tail call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %15) #12
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %23

57:                                               ; preds = %54, %51, %45, %37
  %58 = phi i8* [ %38, %37 ], [ %46, %45 ], [ %52, %51 ], [ null, %54 ]
  %59 = icmp eq i8* %34, null
  br i1 %59, label %61, label %60

60:                                               ; preds = %57
  tail call void @IA__FcStrFree(i8* nonnull %34) #12
  br label %61

61:                                               ; preds = %57, %60
  tail call void @IA__FcStrListDone(%struct._FcStrList* nonnull %15) #12
  %62 = icmp eq i8* %58, null
  br i1 %62, label %183, label %63

63:                                               ; preds = %61
  call fastcc void @FcDirCacheBasenameMD5(%struct._FcConfig* %1, i8* %9, i8* nonnull %10)
  %64 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %58, i8* nonnull %10, i8* null) #12
  call void @IA__FcStrFree(i8* nonnull %58) #12
  %65 = icmp eq i8* %64, null
  br i1 %65, label %183, label %66

66:                                               ; preds = %63
  %67 = load i32, i32* @FcDebugVal, align 4
  %68 = and i32 %67, 16
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %66
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i8* %9, i8* nonnull %64)
  br label %72

72:                                               ; preds = %66, %70
  %73 = call %struct._FcAtomic* @IA__FcAtomicCreate(i8* nonnull %64) #12
  %74 = icmp eq %struct._FcAtomic* %73, null
  br i1 %74, label %182, label %75

75:                                               ; preds = %72
  %76 = call i32 @IA__FcAtomicLock(%struct._FcAtomic* nonnull %73) #12
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %181, label %78

78:                                               ; preds = %75
  %79 = call i8* @IA__FcAtomicNewFile(%struct._FcAtomic* nonnull %73) #12
  %80 = call i32 (i8*, i32, ...) @FcOpen(i8* %79, i32 66, i32 438) #12
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %180, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, -66913276
  br i1 %85, label %86, label %91

86:                                               ; preds = %82
  %87 = bitcast %struct._FcCache* %0 to i8*
  %88 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 2
  %89 = load i64, i64* %88, align 8
  %90 = call i64 @write(i32 %80, i8* %87, i64 %89) #12
  br label %96

91:                                               ; preds = %82
  store i32 -66913276, i32* %83, align 8
  %92 = bitcast %struct._FcCache* %0 to i8*
  %93 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 2
  %94 = load i64, i64* %93, align 8
  %95 = call i64 @write(i32 %80, i8* %92, i64 %94) #12
  store i32 %84, i32* %83, align 8
  br label %96

96:                                               ; preds = %86, %91
  %97 = phi i64 [ %95, %91 ], [ %90, %86 ]
  %98 = phi i64* [ %93, %91 ], [ %88, %86 ]
  %99 = phi i8* [ %92, %91 ], [ %87, %86 ]
  %100 = shl i64 %97, 32
  %101 = ashr exact i64 %100, 32
  %102 = load i64, i64* %98, align 8
  %103 = icmp eq i64 %101, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %96
  call void @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #13
  %105 = call i32 @close(i32 %80) #12
  br label %180

106:                                              ; preds = %96
  %107 = call i32 @close(i32 %80) #12
  %108 = call i32 @IA__FcAtomicReplaceOrig(%struct._FcAtomic* nonnull %73) #12
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %180, label %110

110:                                              ; preds = %106
  %111 = load i64, i64* %98, align 8
  %112 = icmp slt i64 %111, 1024
  br i1 %112, label %113, label %179

113:                                              ; preds = %110
  %114 = call i32 @FcStat(i8* nonnull %64, %struct.stat* nonnull %4) #12
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %179, label %116

116:                                              ; preds = %113
  call fastcc void @lock_cache()
  %117 = icmp eq i8* %99, null
  br i1 %117, label %176, label %118

118:                                              ; preds = %116
  %119 = load i32, i32* @fcCacheMaxLevel, align 4
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %154

121:                                              ; preds = %118
  %122 = sext i32 %119 to i64
  br label %123

123:                                              ; preds = %151, %121
  %124 = phi i64 [ %122, %121 ], [ %126, %151 ]
  %125 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %121 ], [ %152, %151 ]
  %126 = add nsw i64 %124, -1
  %127 = getelementptr inbounds %struct._FcCacheSkip*, %struct._FcCacheSkip** %125, i64 %126
  %128 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %127, align 8
  %129 = icmp eq %struct._FcCacheSkip* %128, null
  br i1 %129, label %151, label %130

130:                                              ; preds = %123
  %131 = bitcast %struct._FcCacheSkip* %128 to i8**
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %128, i64 0, i32 2
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds i8, i8* %132, i64 %134
  %136 = icmp ugt i8* %135, %99
  br i1 %136, label %151, label %137

137:                                              ; preds = %130, %142
  %138 = phi %struct._FcCacheSkip* [ %140, %142 ], [ %128, %130 ]
  %139 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %138, i64 0, i32 8, i64 %126
  %140 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %139, align 8
  %141 = icmp eq %struct._FcCacheSkip* %140, null
  br i1 %141, label %149, label %142

142:                                              ; preds = %137
  %143 = bitcast %struct._FcCacheSkip* %140 to i8**
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %140, i64 0, i32 2
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = icmp ugt i8* %147, %99
  br i1 %148, label %149, label %137

149:                                              ; preds = %142, %137
  %150 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %138, i64 0, i32 8, i64 0
  br label %151

151:                                              ; preds = %149, %130, %123
  %152 = phi %struct._FcCacheSkip** [ %125, %123 ], [ %125, %130 ], [ %150, %149 ]
  %153 = icmp sgt i64 %126, 0
  br i1 %153, label %123, label %154

154:                                              ; preds = %151, %118
  %155 = phi %struct._FcCacheSkip** [ getelementptr inbounds ([16 x %struct._FcCacheSkip*], [16 x %struct._FcCacheSkip*]* @fcCacheChains, i64 0, i64 0), %118 ], [ %152, %151 ]
  %156 = load %struct._FcCacheSkip*, %struct._FcCacheSkip** %155, align 8
  %157 = icmp eq %struct._FcCacheSkip* %156, null
  br i1 %157, label %176, label %158

158:                                              ; preds = %154
  %159 = bitcast %struct._FcCacheSkip* %156 to i8**
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %156, i64 0, i32 2
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = icmp ugt i8* %163, %99
  br i1 %164, label %165, label %176

165:                                              ; preds = %158
  %166 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %156, i64 0, i32 4
  %167 = bitcast %struct.stat* %4 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 16
  %169 = bitcast i64* %166 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %169, align 8
  %170 = getelementptr inbounds %struct.stat, %struct.stat* %4, i64 0, i32 12, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %156, i64 0, i32 6
  store i64 %171, i64* %172, align 8
  %173 = getelementptr inbounds %struct.stat, %struct.stat* %4, i64 0, i32 12, i32 1
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %struct._FcCacheSkip, %struct._FcCacheSkip* %156, i64 0, i32 7
  store i64 %174, i64* %175, align 8
  br label %176

176:                                              ; preds = %154, %158, %116, %165
  %177 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** @cache_lock, align 8
  %178 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %177) #12
  br label %179

179:                                              ; preds = %113, %176, %110
  call void @IA__FcStrFree(i8* nonnull %64) #12
  call void @IA__FcAtomicUnlock(%struct._FcAtomic* nonnull %73) #12
  call void @IA__FcAtomicDestroy(%struct._FcAtomic* nonnull %73) #12
  br label %183

180:                                              ; preds = %106, %78, %104
  call void @IA__FcAtomicUnlock(%struct._FcAtomic* nonnull %73) #12
  br label %181

181:                                              ; preds = %75, %180
  call void @IA__FcAtomicDestroy(%struct._FcAtomic* nonnull %73) #12
  br label %182

182:                                              ; preds = %72, %181
  call void @IA__FcStrFree(i8* nonnull %64) #12
  br label %183

183:                                              ; preds = %20, %63, %61, %2, %182, %179
  %184 = phi i32 [ 0, %182 ], [ 1, %179 ], [ 0, %2 ], [ 0, %61 ], [ 0, %63 ], [ 0, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %10) #12
  ret i32 %184
}

declare hidden i8* @IA__FcStrCopyFilename(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @access(i8* nocapture readonly, i32) local_unnamed_addr #4

declare hidden i32 @FcMakeDirectory(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcDirCacheCreateTagFile(i8*) local_unnamed_addr #1 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %45, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @access(i8* nonnull %0, i32 2) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %3
  %7 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8* null) #12
  %8 = icmp eq i8* %7, null
  br i1 %8, label %45, label %9

9:                                                ; preds = %6
  %10 = tail call %struct._FcAtomic* @IA__FcAtomicCreate(i8* nonnull %7) #12
  %11 = icmp eq %struct._FcAtomic* %10, null
  br i1 %11, label %32, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @IA__FcAtomicLock(%struct._FcAtomic* nonnull %10) #12
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %30, label %15

15:                                               ; preds = %12
  %16 = tail call i8* @IA__FcAtomicNewFile(%struct._FcAtomic* nonnull %10) #12
  %17 = tail call i32 (i8*, i32, ...) @FcOpen(i8* %16, i32 66, i32 420) #12
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %28, label %19

19:                                               ; preds = %15
  %20 = tail call %struct._IO_FILE* @fdopen(i32 %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0)) #12
  %21 = icmp eq %struct._IO_FILE* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([201 x i8], [201 x i8]* @FcDirCacheCreateTagFile.cache_tag_contents, i64 0, i64 0), i64 200, i64 1, %struct._IO_FILE* nonnull %20)
  %24 = tail call i32 @fclose(%struct._IO_FILE* nonnull %20)
  %25 = tail call i32 @IA__FcAtomicReplaceOrig(%struct._FcAtomic* nonnull %10) #12
  %26 = icmp ne i32 %25, 0
  %27 = zext i1 %26 to i32
  br label %28

28:                                               ; preds = %22, %19, %15
  %29 = phi i32 [ 0, %15 ], [ 0, %19 ], [ %27, %22 ]
  tail call void @IA__FcAtomicUnlock(%struct._FcAtomic* nonnull %10) #12
  br label %30

30:                                               ; preds = %12, %28
  %31 = phi i32 [ %29, %28 ], [ 0, %12 ]
  tail call void @IA__FcAtomicDestroy(%struct._FcAtomic* nonnull %10) #12
  br label %32

32:                                               ; preds = %9, %30
  %33 = phi i32 [ %31, %30 ], [ 0, %9 ]
  tail call void @IA__FcStrFree(i8* nonnull %7) #12
  br label %34

34:                                               ; preds = %32, %3
  %35 = phi i32 [ %33, %32 ], [ 0, %3 ]
  %36 = load i32, i32* @FcDebugVal, align 4
  %37 = and i32 %36, 16
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %34
  %40 = icmp eq i32 %35, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %39
  %42 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i64 0, i64 0), i8* nonnull %0)
  br label %45

43:                                               ; preds = %39
  %44 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16, i64 0, i64 0), i8* nonnull %0)
  br label %45

45:                                               ; preds = %43, %41, %34, %6, %1
  %46 = phi i32 [ 0, %1 ], [ 0, %6 ], [ %35, %34 ], [ 1, %41 ], [ 0, %43 ]
  ret i32 %46
}

; Function Attrs: nofree nounwind
declare i32 @chmod(i8* nocapture readonly, i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #4

declare hidden %struct._FcAtomic* @IA__FcAtomicCreate(i8*) local_unnamed_addr #3

declare hidden i32 @IA__FcAtomicLock(%struct._FcAtomic*) local_unnamed_addr #3

declare hidden i32 @FcOpen(i8*, i32, ...) local_unnamed_addr #3

declare hidden i8* @IA__FcAtomicNewFile(%struct._FcAtomic*) local_unnamed_addr #3

; Function Attrs: nofree
declare i64 @write(i32, i8* nocapture readonly, i64) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture readonly) local_unnamed_addr #4

declare hidden i32 @IA__FcAtomicReplaceOrig(%struct._FcAtomic*) local_unnamed_addr #3

declare hidden void @IA__FcAtomicUnlock(%struct._FcAtomic*) local_unnamed_addr #3

declare hidden void @IA__FcAtomicDestroy(%struct._FcAtomic*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcDirCacheClean(i8*, i32) #1 {
  %3 = alloca %struct.stat, align 8
  %4 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 144, i1 false)
  %5 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* null) #12
  %6 = icmp eq %struct._FcConfig* %5, null
  br i1 %6, label %121, label %7

7:                                                ; preds = %2
  %8 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* nonnull %5) #12
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %8, i8* %0, i8* null) #12
  br label %14

12:                                               ; preds = %7
  %13 = tail call i8* @IA__FcStrCopyFilename(i8* %0) #12
  br label %14

14:                                               ; preds = %12, %10
  %15 = phi i8* [ %11, %10 ], [ %13, %12 ]
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* %0) #13
  br label %119

20:                                               ; preds = %14
  %21 = tail call i32 @access(i8* nonnull %15, i32 2) #12
  %22 = icmp eq i32 %21, 0
  %23 = icmp ne i32 %1, 0
  br i1 %22, label %34, label %24

24:                                               ; preds = %20
  br i1 %23, label %29, label %25

25:                                               ; preds = %24
  %26 = load i32, i32* @FcDebugVal, align 4
  %27 = and i32 %26, 16
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %117, label %29

29:                                               ; preds = %25, %24
  %30 = tail call i32 @access(i8* nonnull %15, i32 0) #12
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)
  %33 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %15, i8* %32)
  br label %117

34:                                               ; preds = %20
  br i1 %23, label %39, label %35

35:                                               ; preds = %34
  %36 = load i32, i32* @FcDebugVal, align 4
  %37 = and i32 %36, 16
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35, %34
  %40 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i8* nonnull %15)
  br label %41

41:                                               ; preds = %35, %39
  %42 = tail call %struct.__dirstream* @opendir(i8* nonnull %15)
  %43 = icmp eq %struct.__dirstream* %42, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %41
  %45 = call %struct.dirent* @readdir64(%struct.__dirstream* nonnull %42) #12
  %46 = icmp eq %struct.dirent* %45, null
  br i1 %46, label %114, label %47

47:                                               ; preds = %44
  %48 = bitcast %struct.stat* %3 to %struct.stat64*
  br label %50

49:                                               ; preds = %41
  tail call void @perror(i8* nonnull %15) #13
  br label %117

50:                                               ; preds = %47, %110
  %51 = phi %struct.dirent* [ %45, %47 ], [ %112, %110 ]
  %52 = phi i32 [ 1, %47 ], [ %111, %110 ]
  %53 = getelementptr inbounds %struct.dirent, %struct.dirent* %51, i64 0, i32 4, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 46
  br i1 %55, label %110, label %56

56:                                               ; preds = %50
  %57 = call i64 @strlen(i8* %53) #14
  %58 = icmp eq i64 %57, 45
  br i1 %58, label %59, label %110

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.dirent, %struct.dirent* %51, i64 0, i32 4, i64 32
  %61 = call i32 @strcmp(i8* %60, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #14
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %110

63:                                               ; preds = %59
  %64 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %15, i8* %53, i8* null) #12
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.10, i64 0, i64 0), i8* nonnull %15) #13
  br label %114

69:                                               ; preds = %63
  %70 = call %struct._FcCache* @IA__FcDirCacheLoadFile(i8* nonnull %64, %struct.stat* null)
  %71 = icmp eq %struct._FcCache* %70, null
  br i1 %71, label %72, label %79

72:                                               ; preds = %69
  br i1 %23, label %77, label %73

73:                                               ; preds = %72
  %74 = load i32, i32* @FcDebugVal, align 4
  %75 = and i32 %74, 16
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %102, label %77

77:                                               ; preds = %73, %72
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0), i8* nonnull %15, i8* %53)
  br label %102

79:                                               ; preds = %69
  %80 = ptrtoint %struct._FcCache* %70 to i64
  %81 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %70, i64 0, i32 3
  %82 = load i64, i64* %81, align 8
  %83 = add nsw i64 %82, %80
  %84 = inttoptr i64 %83 to i8*
  br i1 %9, label %85, label %87

85:                                               ; preds = %79
  %86 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %8, i8* %84, i8* null) #12
  br label %89

87:                                               ; preds = %79
  %88 = call noalias i8* @strdup(i8* %84) #12
  br label %89

89:                                               ; preds = %87, %85
  %90 = phi i8* [ %86, %85 ], [ %88, %87 ]
  %91 = call i32 @__xstat64(i32 1, i8* %90, %struct.stat64* nonnull %48) #12
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %106

93:                                               ; preds = %89
  br i1 %23, label %98, label %94

94:                                               ; preds = %93
  %95 = load i32, i32* @FcDebugVal, align 4
  %96 = and i32 %95, 16
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %94, %93
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i8* nonnull %15, i8* %53, i8* %90)
  br label %100

100:                                              ; preds = %94, %98
  %101 = bitcast %struct._FcCache* %70 to i8*
  call void @FcCacheObjectDereference(i8* nonnull %101) #12
  call void @IA__FcStrFree(i8* %90) #12
  br label %102

102:                                              ; preds = %100, %77, %73
  %103 = call i32 @unlink(i8* nonnull %64) #12
  %104 = icmp slt i32 %103, 0
  br i1 %104, label %105, label %108

105:                                              ; preds = %102
  call void @perror(i8* nonnull %64) #13
  br label %108

106:                                              ; preds = %89
  %107 = bitcast %struct._FcCache* %70 to i8*
  call void @FcCacheObjectDereference(i8* nonnull %107) #12
  call void @IA__FcStrFree(i8* %90) #12
  br label %108

108:                                              ; preds = %106, %102, %105
  %109 = phi i32 [ 0, %105 ], [ %52, %102 ], [ %52, %106 ]
  call void @IA__FcStrFree(i8* nonnull %64) #12
  br label %110

110:                                              ; preds = %56, %59, %50, %108
  %111 = phi i32 [ %109, %108 ], [ %52, %50 ], [ %52, %59 ], [ %52, %56 ]
  %112 = call %struct.dirent* @readdir64(%struct.__dirstream* nonnull %42) #12
  %113 = icmp eq %struct.dirent* %112, null
  br i1 %113, label %114, label %50

114:                                              ; preds = %110, %44, %66
  %115 = phi i32 [ 0, %66 ], [ 1, %44 ], [ %111, %110 ]
  %116 = call i32 @closedir(%struct.__dirstream* nonnull %42)
  br label %117

117:                                              ; preds = %25, %29, %114, %49
  %118 = phi i32 [ 1, %29 ], [ 1, %25 ], [ %115, %114 ], [ 0, %49 ]
  call void @IA__FcStrFree(i8* nonnull %15) #12
  br label %119

119:                                              ; preds = %117, %17
  %120 = phi i32 [ %118, %117 ], [ 0, %17 ]
  call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %5) #12
  br label %121

121:                                              ; preds = %2, %119
  %122 = phi i32 [ %120, %119 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %4) #12
  ret i32 %122
}

; Function Attrs: nofree nounwind
declare noalias %struct.__dirstream* @opendir(i8* nocapture readonly) local_unnamed_addr #4

declare %struct.dirent* @readdir64(%struct.__dirstream*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare noalias i8* @strdup(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @closedir(%struct.__dirstream* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcDirCacheLock(i8*, %struct._FcConfig*) local_unnamed_addr #1 {
  %3 = alloca [52 x i8], align 16
  %4 = alloca %struct.flock, align 8
  %5 = getelementptr inbounds [52 x i8], [52 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 52, i1 false)
  %6 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* %1) #12
  call fastcc void @FcDirCacheBasenameMD5(%struct._FcConfig* %1, i8* %0, i8* nonnull %5)
  %7 = getelementptr inbounds %struct._FcConfig, %struct._FcConfig* %1, i64 0, i32 3
  %8 = load %struct._FcStrSet*, %struct._FcStrSet** %7, align 8
  %9 = call %struct._FcStrList* @IA__FcStrListCreate(%struct._FcStrSet* %8) #12
  %10 = icmp eq %struct._FcStrList* %9, null
  br i1 %10, label %41, label %11

11:                                               ; preds = %2
  %12 = icmp eq i8* %6, null
  br label %13

13:                                               ; preds = %11, %24
  %14 = call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %9) #12
  %15 = icmp eq i8* %14, null
  br i1 %15, label %37, label %16

16:                                               ; preds = %13
  br i1 %12, label %19, label %17

17:                                               ; preds = %16
  %18 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %6, i8* nonnull %14, i8* nonnull %5, i8* null) #12
  br label %21

19:                                               ; preds = %16
  %20 = call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %14, i8* nonnull %5, i8* null) #12
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi i8* [ %18, %17 ], [ %20, %19 ]
  %23 = icmp eq i8* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %21
  %25 = call i32 (i8*, i32, ...) @FcOpen(i8* nonnull %22, i32 2) #12
  call void @IA__FcStrFree(i8* nonnull %22) #12
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %13, label %27

27:                                               ; preds = %24
  %28 = bitcast %struct.flock* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 32, i1 false)
  %29 = getelementptr inbounds %struct.flock, %struct.flock* %4, i64 0, i32 0
  store i16 1, i16* %29, align 8
  %30 = getelementptr inbounds %struct.flock, %struct.flock* %4, i64 0, i32 1
  store i16 0, i16* %30, align 2
  %31 = getelementptr inbounds %struct.flock, %struct.flock* %4, i64 0, i32 2
  %32 = bitcast i64* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false)
  %33 = call i32 @getpid() #12
  %34 = getelementptr inbounds %struct.flock, %struct.flock* %4, i64 0, i32 4
  store i32 %33, i32* %34, align 8
  %35 = call i32 (i32, i32, ...) @fcntl(i32 %25, i32 7, %struct.flock* nonnull %4) #12
  %36 = icmp eq i32 %35, -1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #12
  br i1 %36, label %39, label %37

37:                                               ; preds = %21, %13, %27
  %38 = phi i32 [ %25, %27 ], [ -1, %13 ], [ -1, %21 ]
  call void @IA__FcStrListDone(%struct._FcStrList* nonnull %9) #12
  br label %41

39:                                               ; preds = %27
  call void @IA__FcStrListDone(%struct._FcStrList* nonnull %9) #12
  %40 = call i32 @close(i32 %25) #12
  br label %41

41:                                               ; preds = %2, %39, %37
  %42 = phi i32 [ -1, %39 ], [ %38, %37 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %5) #12
  ret i32 %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare i32 @getpid() local_unnamed_addr #5

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @FcDirCacheUnlock(i32) local_unnamed_addr #1 {
  %2 = alloca %struct.flock, align 8
  %3 = icmp eq i32 %0, -1
  br i1 %3, label %14, label %4

4:                                                ; preds = %1
  %5 = bitcast %struct.flock* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  %6 = getelementptr inbounds %struct.flock, %struct.flock* %2, i64 0, i32 0
  store i16 2, i16* %6, align 8
  %7 = getelementptr inbounds %struct.flock, %struct.flock* %2, i64 0, i32 1
  store i16 0, i16* %7, align 2
  %8 = getelementptr inbounds %struct.flock, %struct.flock* %2, i64 0, i32 2
  %9 = bitcast i64* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  %10 = tail call i32 @getpid() #12
  %11 = getelementptr inbounds %struct.flock, %struct.flock* %2, i64 0, i32 4
  store i32 %10, i32* %11, align 8
  %12 = call i32 (i32, i32, ...) @fcntl(i32 %0, i32 6, %struct.flock* nonnull %2) #12
  %13 = call i32 @close(i32 %0) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #12
  br label %14

14:                                               ; preds = %1, %4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @FcCacheDir(%struct._FcCache*) local_unnamed_addr #9 {
  %2 = ptrtoint %struct._FcCache* %0 to i64
  %3 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = add nsw i64 %4, %2
  %6 = inttoptr i64 %5 to i8*
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcFontSet* @IA__FcCacheCopySet(%struct._FcCache*) #1 {
  %2 = ptrtoint %struct._FcCache* %0 to i64
  %3 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = add nsw i64 %4, %2
  %6 = inttoptr i64 %5 to %struct._FcFontSet*
  %7 = tail call %struct._FcFontSet* @IA__FcFontSetCreate() #12
  %8 = icmp eq %struct._FcFontSet* %7, null
  br i1 %8, label %44, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %6, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %44

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %6, i64 0, i32 2
  br label %19

15:                                               ; preds = %38
  %16 = load i32, i32* %10, align 8
  %17 = sext i32 %16 to i64
  %18 = icmp slt i64 %42, %17
  br i1 %18, label %19, label %44

19:                                               ; preds = %13, %15
  %20 = phi i64 [ 0, %13 ], [ %42, %15 ]
  %21 = load %struct._FcPattern**, %struct._FcPattern*** %14, align 8
  %22 = ptrtoint %struct._FcPattern** %21 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %19
  %26 = and i64 %22, -2
  %27 = add nsw i64 %26, %5
  %28 = inttoptr i64 %27 to %struct._FcPattern**
  %29 = getelementptr inbounds %struct._FcPattern*, %struct._FcPattern** %28, i64 %20
  %30 = bitcast %struct._FcPattern** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, -2
  %33 = add nsw i64 %32, %5
  %34 = inttoptr i64 %33 to %struct._FcPattern*
  br label %38

35:                                               ; preds = %19
  %36 = getelementptr inbounds %struct._FcPattern*, %struct._FcPattern** %21, i64 %20
  %37 = load %struct._FcPattern*, %struct._FcPattern** %36, align 8
  br label %38

38:                                               ; preds = %35, %25
  %39 = phi %struct._FcPattern* [ %34, %25 ], [ %37, %35 ]
  tail call void @IA__FcPatternReference(%struct._FcPattern* %39) #12
  %40 = tail call i32 @IA__FcFontSetAdd(%struct._FcFontSet* nonnull %7, %struct._FcPattern* %39) #12
  %41 = icmp eq i32 %40, 0
  %42 = add nuw nsw i64 %20, 1
  br i1 %41, label %43, label %15

43:                                               ; preds = %38
  tail call void @IA__FcFontSetDestroy(%struct._FcFontSet* nonnull %7) #12
  br label %44

44:                                               ; preds = %15, %9, %43, %1
  %45 = phi %struct._FcFontSet* [ null, %1 ], [ null, %43 ], [ %7, %9 ], [ %7, %15 ]
  ret %struct._FcFontSet* %45
}

declare hidden %struct._FcFontSet* @IA__FcFontSetCreate() local_unnamed_addr #3

declare hidden void @IA__FcPatternReference(%struct._FcPattern*) local_unnamed_addr #3

declare hidden i32 @IA__FcFontSetAdd(%struct._FcFontSet*, %struct._FcPattern*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @FcCacheSubdir(%struct._FcCache*, i32) local_unnamed_addr #9 {
  %3 = ptrtoint %struct._FcCache* %0 to i64
  %4 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = add nsw i64 %5, %3
  %7 = inttoptr i64 %6 to i64*
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds i64, i64* %7, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = add nsw i64 %6, %10
  %12 = inttoptr i64 %11 to i8*
  ret i8* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @IA__FcCacheNumSubdir(%struct._FcCache* nocapture readonly) #9 {
  %2 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @IA__FcCacheNumFont(%struct._FcCache*) #9 {
  %2 = ptrtoint %struct._FcCache* %0 to i64
  %3 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %0, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = add nsw i64 %4, %2
  %6 = inttoptr i64 %5 to %struct._FcFontSet*
  %7 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  ret i32 %8
}

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @IA__FcCacheCreateTagFile(%struct._FcConfig*) #1 {
  %2 = tail call %struct._FcConfig* @IA__FcConfigReference(%struct._FcConfig* %0) #12
  %3 = icmp eq %struct._FcConfig* %2, null
  br i1 %3, label %32, label %4

4:                                                ; preds = %1
  %5 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* nonnull %2) #12
  %6 = tail call %struct._FcStrList* @IA__FcConfigGetCacheDirs(%struct._FcConfig* nonnull %2) #12
  %7 = icmp eq %struct._FcStrList* %6, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %4
  %9 = icmp eq i8* %5, null
  br label %10

10:                                               ; preds = %8, %22
  %11 = phi i8* [ %23, %22 ], [ null, %8 ]
  %12 = tail call i8* @IA__FcStrListNext(%struct._FcStrList* nonnull %6) #12
  %13 = icmp eq i8* %12, null
  br i1 %13, label %26, label %14

14:                                               ; preds = %10
  %15 = icmp eq i8* %11, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  tail call void @IA__FcStrFree(i8* nonnull %11) #12
  br label %17

17:                                               ; preds = %14, %16
  br i1 %9, label %20, label %18

18:                                               ; preds = %17
  %19 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %5, i8* nonnull %12, i8* null) #12
  br label %22

20:                                               ; preds = %17
  %21 = tail call i8* @IA__FcStrCopyFilename(i8* nonnull %12) #12
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi i8* [ %19, %18 ], [ %21, %20 ]
  %24 = tail call i32 @FcDirCacheCreateTagFile(i8* %23)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %10, label %26

26:                                               ; preds = %22, %10
  %27 = phi i8* [ %23, %22 ], [ %11, %10 ]
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  tail call void @IA__FcStrFree(i8* nonnull %27) #12
  br label %30

30:                                               ; preds = %26, %29
  tail call void @IA__FcStrListDone(%struct._FcStrList* nonnull %6) #12
  br label %31

31:                                               ; preds = %4, %30
  tail call void @IA__FcConfigDestroy(%struct._FcConfig* nonnull %2) #12
  br label %32

32:                                               ; preds = %1, %31
  ret void
}

declare hidden %struct._FcStrList* @IA__FcConfigGetCacheDirs(%struct._FcConfig*) local_unnamed_addr #3

declare hidden i8* @FcConfigMapSalt(%struct._FcConfig*, i8*) local_unnamed_addr #3

declare hidden i8* @FcConfigMapFontPath(%struct._FcConfig*, i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @MD5Transform(i32* nocapture, i32* nocapture readonly) unnamed_addr #10 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 3
  %9 = load i32, i32* %8, align 4
  %10 = xor i32 %9, %7
  %11 = and i32 %10, %5
  %12 = xor i32 %11, %9
  %13 = load i32, i32* %1, align 4
  %14 = add i32 %3, -680876936
  %15 = add i32 %14, %13
  %16 = add i32 %15, %12
  %17 = shl i32 %16, 7
  %18 = lshr i32 %16, 25
  %19 = or i32 %17, %18
  %20 = add i32 %19, %5
  %21 = xor i32 %7, %5
  %22 = and i32 %20, %21
  %23 = xor i32 %22, %7
  %24 = getelementptr inbounds i32, i32* %1, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %9, -389564586
  %27 = add i32 %26, %25
  %28 = add i32 %27, %23
  %29 = shl i32 %28, 12
  %30 = lshr i32 %28, 20
  %31 = or i32 %29, %30
  %32 = add i32 %31, %20
  %33 = xor i32 %20, %5
  %34 = and i32 %32, %33
  %35 = xor i32 %34, %5
  %36 = getelementptr inbounds i32, i32* %1, i64 2
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %7, 606105819
  %39 = add i32 %38, %37
  %40 = add i32 %39, %35
  %41 = shl i32 %40, 17
  %42 = lshr i32 %40, 15
  %43 = or i32 %41, %42
  %44 = add i32 %43, %32
  %45 = xor i32 %32, %20
  %46 = and i32 %44, %45
  %47 = xor i32 %46, %20
  %48 = getelementptr inbounds i32, i32* %1, i64 3
  %49 = load i32, i32* %48, align 4
  %50 = add i32 %5, -1044525330
  %51 = add i32 %50, %49
  %52 = add i32 %51, %47
  %53 = shl i32 %52, 22
  %54 = lshr i32 %52, 10
  %55 = or i32 %53, %54
  %56 = add i32 %55, %44
  %57 = xor i32 %44, %32
  %58 = and i32 %56, %57
  %59 = xor i32 %58, %32
  %60 = getelementptr inbounds i32, i32* %1, i64 4
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, -176418897
  %63 = add i32 %62, %20
  %64 = add i32 %63, %59
  %65 = shl i32 %64, 7
  %66 = lshr i32 %64, 25
  %67 = or i32 %65, %66
  %68 = add i32 %67, %56
  %69 = xor i32 %56, %44
  %70 = and i32 %68, %69
  %71 = xor i32 %70, %44
  %72 = getelementptr inbounds i32, i32* %1, i64 5
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %73, 1200080426
  %75 = add i32 %74, %32
  %76 = add i32 %75, %71
  %77 = shl i32 %76, 12
  %78 = lshr i32 %76, 20
  %79 = or i32 %77, %78
  %80 = add i32 %79, %68
  %81 = xor i32 %68, %56
  %82 = and i32 %80, %81
  %83 = xor i32 %82, %56
  %84 = getelementptr inbounds i32, i32* %1, i64 6
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, -1473231341
  %87 = add i32 %86, %44
  %88 = add i32 %87, %83
  %89 = shl i32 %88, 17
  %90 = lshr i32 %88, 15
  %91 = or i32 %89, %90
  %92 = add i32 %91, %80
  %93 = xor i32 %80, %68
  %94 = and i32 %92, %93
  %95 = xor i32 %94, %68
  %96 = getelementptr inbounds i32, i32* %1, i64 7
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, -45705983
  %99 = add i32 %98, %56
  %100 = add i32 %99, %95
  %101 = shl i32 %100, 22
  %102 = lshr i32 %100, 10
  %103 = or i32 %101, %102
  %104 = add i32 %103, %92
  %105 = xor i32 %92, %80
  %106 = and i32 %104, %105
  %107 = xor i32 %106, %80
  %108 = getelementptr inbounds i32, i32* %1, i64 8
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, 1770035416
  %111 = add i32 %110, %68
  %112 = add i32 %111, %107
  %113 = shl i32 %112, 7
  %114 = lshr i32 %112, 25
  %115 = or i32 %113, %114
  %116 = add i32 %115, %104
  %117 = xor i32 %104, %92
  %118 = and i32 %116, %117
  %119 = xor i32 %118, %92
  %120 = getelementptr inbounds i32, i32* %1, i64 9
  %121 = load i32, i32* %120, align 4
  %122 = add i32 %121, -1958414417
  %123 = add i32 %122, %80
  %124 = add i32 %123, %119
  %125 = shl i32 %124, 12
  %126 = lshr i32 %124, 20
  %127 = or i32 %125, %126
  %128 = add i32 %127, %116
  %129 = xor i32 %116, %104
  %130 = and i32 %128, %129
  %131 = xor i32 %130, %104
  %132 = getelementptr inbounds i32, i32* %1, i64 10
  %133 = load i32, i32* %132, align 4
  %134 = add i32 %133, -42063
  %135 = add i32 %134, %92
  %136 = add i32 %135, %131
  %137 = shl i32 %136, 17
  %138 = lshr i32 %136, 15
  %139 = or i32 %137, %138
  %140 = add i32 %139, %128
  %141 = xor i32 %128, %116
  %142 = and i32 %140, %141
  %143 = xor i32 %142, %116
  %144 = getelementptr inbounds i32, i32* %1, i64 11
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, -1990404162
  %147 = add i32 %146, %104
  %148 = add i32 %147, %143
  %149 = shl i32 %148, 22
  %150 = lshr i32 %148, 10
  %151 = or i32 %149, %150
  %152 = add i32 %151, %140
  %153 = xor i32 %140, %128
  %154 = and i32 %152, %153
  %155 = xor i32 %154, %128
  %156 = getelementptr inbounds i32, i32* %1, i64 12
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %157, 1804603682
  %159 = add i32 %158, %116
  %160 = add i32 %159, %155
  %161 = shl i32 %160, 7
  %162 = lshr i32 %160, 25
  %163 = or i32 %161, %162
  %164 = add i32 %163, %152
  %165 = xor i32 %152, %140
  %166 = and i32 %164, %165
  %167 = xor i32 %166, %140
  %168 = getelementptr inbounds i32, i32* %1, i64 13
  %169 = load i32, i32* %168, align 4
  %170 = add i32 %169, -40341101
  %171 = add i32 %170, %128
  %172 = add i32 %171, %167
  %173 = shl i32 %172, 12
  %174 = lshr i32 %172, 20
  %175 = or i32 %173, %174
  %176 = add i32 %175, %164
  %177 = xor i32 %164, %152
  %178 = and i32 %176, %177
  %179 = xor i32 %178, %152
  %180 = getelementptr inbounds i32, i32* %1, i64 14
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, -1502002290
  %183 = add i32 %182, %140
  %184 = add i32 %183, %179
  %185 = shl i32 %184, 17
  %186 = lshr i32 %184, 15
  %187 = or i32 %185, %186
  %188 = add i32 %187, %176
  %189 = xor i32 %176, %164
  %190 = and i32 %188, %189
  %191 = xor i32 %190, %164
  %192 = getelementptr inbounds i32, i32* %1, i64 15
  %193 = load i32, i32* %192, align 4
  %194 = add i32 %193, 1236535329
  %195 = add i32 %194, %152
  %196 = add i32 %195, %191
  %197 = shl i32 %196, 22
  %198 = lshr i32 %196, 10
  %199 = or i32 %197, %198
  %200 = add i32 %199, %188
  %201 = xor i32 %200, %188
  %202 = and i32 %201, %176
  %203 = xor i32 %202, %188
  %204 = add i32 %25, -165796510
  %205 = add i32 %204, %164
  %206 = add i32 %205, %203
  %207 = shl i32 %206, 5
  %208 = lshr i32 %206, 27
  %209 = or i32 %207, %208
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %200
  %212 = and i32 %211, %188
  %213 = xor i32 %212, %200
  %214 = add i32 %85, -1069501632
  %215 = add i32 %214, %176
  %216 = add i32 %215, %213
  %217 = shl i32 %216, 9
  %218 = lshr i32 %216, 23
  %219 = or i32 %217, %218
  %220 = add i32 %219, %210
  %221 = xor i32 %220, %210
  %222 = and i32 %221, %200
  %223 = xor i32 %222, %210
  %224 = add i32 %145, 643717713
  %225 = add i32 %224, %188
  %226 = add i32 %225, %223
  %227 = shl i32 %226, 14
  %228 = lshr i32 %226, 18
  %229 = or i32 %227, %228
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %220
  %232 = and i32 %231, %210
  %233 = xor i32 %232, %220
  %234 = add i32 %13, -373897302
  %235 = add i32 %234, %200
  %236 = add i32 %235, %233
  %237 = shl i32 %236, 20
  %238 = lshr i32 %236, 12
  %239 = or i32 %237, %238
  %240 = add i32 %239, %230
  %241 = xor i32 %240, %230
  %242 = and i32 %241, %220
  %243 = xor i32 %242, %230
  %244 = add i32 %73, -701558691
  %245 = add i32 %244, %210
  %246 = add i32 %245, %243
  %247 = shl i32 %246, 5
  %248 = lshr i32 %246, 27
  %249 = or i32 %247, %248
  %250 = add i32 %249, %240
  %251 = xor i32 %250, %240
  %252 = and i32 %251, %230
  %253 = xor i32 %252, %240
  %254 = add i32 %133, 38016083
  %255 = add i32 %254, %220
  %256 = add i32 %255, %253
  %257 = shl i32 %256, 9
  %258 = lshr i32 %256, 23
  %259 = or i32 %257, %258
  %260 = add i32 %259, %250
  %261 = xor i32 %260, %250
  %262 = and i32 %261, %240
  %263 = xor i32 %262, %250
  %264 = add i32 %193, -660478335
  %265 = add i32 %264, %230
  %266 = add i32 %265, %263
  %267 = shl i32 %266, 14
  %268 = lshr i32 %266, 18
  %269 = or i32 %267, %268
  %270 = add i32 %269, %260
  %271 = xor i32 %270, %260
  %272 = and i32 %271, %250
  %273 = xor i32 %272, %260
  %274 = add i32 %61, -405537848
  %275 = add i32 %274, %240
  %276 = add i32 %275, %273
  %277 = shl i32 %276, 20
  %278 = lshr i32 %276, 12
  %279 = or i32 %277, %278
  %280 = add i32 %279, %270
  %281 = xor i32 %280, %270
  %282 = and i32 %281, %260
  %283 = xor i32 %282, %270
  %284 = add i32 %121, 568446438
  %285 = add i32 %284, %250
  %286 = add i32 %285, %283
  %287 = shl i32 %286, 5
  %288 = lshr i32 %286, 27
  %289 = or i32 %287, %288
  %290 = add i32 %289, %280
  %291 = xor i32 %290, %280
  %292 = and i32 %291, %270
  %293 = xor i32 %292, %280
  %294 = add i32 %181, -1019803690
  %295 = add i32 %294, %260
  %296 = add i32 %295, %293
  %297 = shl i32 %296, 9
  %298 = lshr i32 %296, 23
  %299 = or i32 %297, %298
  %300 = add i32 %299, %290
  %301 = xor i32 %300, %290
  %302 = and i32 %301, %280
  %303 = xor i32 %302, %290
  %304 = add i32 %49, -187363961
  %305 = add i32 %304, %270
  %306 = add i32 %305, %303
  %307 = shl i32 %306, 14
  %308 = lshr i32 %306, 18
  %309 = or i32 %307, %308
  %310 = add i32 %309, %300
  %311 = xor i32 %310, %300
  %312 = and i32 %311, %290
  %313 = xor i32 %312, %300
  %314 = add i32 %109, 1163531501
  %315 = add i32 %314, %280
  %316 = add i32 %315, %313
  %317 = shl i32 %316, 20
  %318 = lshr i32 %316, 12
  %319 = or i32 %317, %318
  %320 = add i32 %319, %310
  %321 = xor i32 %320, %310
  %322 = and i32 %321, %300
  %323 = xor i32 %322, %310
  %324 = add i32 %169, -1444681467
  %325 = add i32 %324, %290
  %326 = add i32 %325, %323
  %327 = shl i32 %326, 5
  %328 = lshr i32 %326, 27
  %329 = or i32 %327, %328
  %330 = add i32 %329, %320
  %331 = xor i32 %330, %320
  %332 = and i32 %331, %310
  %333 = xor i32 %332, %320
  %334 = add i32 %37, -51403784
  %335 = add i32 %334, %300
  %336 = add i32 %335, %333
  %337 = shl i32 %336, 9
  %338 = lshr i32 %336, 23
  %339 = or i32 %337, %338
  %340 = add i32 %339, %330
  %341 = xor i32 %340, %330
  %342 = and i32 %341, %320
  %343 = xor i32 %342, %330
  %344 = add i32 %97, 1735328473
  %345 = add i32 %344, %310
  %346 = add i32 %345, %343
  %347 = shl i32 %346, 14
  %348 = lshr i32 %346, 18
  %349 = or i32 %347, %348
  %350 = add i32 %349, %340
  %351 = xor i32 %350, %340
  %352 = and i32 %351, %330
  %353 = xor i32 %352, %340
  %354 = add i32 %157, -1926607734
  %355 = add i32 %354, %320
  %356 = add i32 %355, %353
  %357 = shl i32 %356, 20
  %358 = lshr i32 %356, 12
  %359 = or i32 %357, %358
  %360 = add i32 %359, %350
  %361 = xor i32 %351, %360
  %362 = add i32 %73, -378558
  %363 = add i32 %362, %330
  %364 = add i32 %363, %361
  %365 = shl i32 %364, 4
  %366 = lshr i32 %364, 28
  %367 = or i32 %365, %366
  %368 = add i32 %367, %360
  %369 = xor i32 %360, %350
  %370 = xor i32 %369, %368
  %371 = add i32 %109, -2022574463
  %372 = add i32 %371, %340
  %373 = add i32 %372, %370
  %374 = shl i32 %373, 11
  %375 = lshr i32 %373, 21
  %376 = or i32 %374, %375
  %377 = add i32 %376, %368
  %378 = xor i32 %368, %360
  %379 = xor i32 %378, %377
  %380 = add i32 %145, 1839030562
  %381 = add i32 %380, %350
  %382 = add i32 %381, %379
  %383 = shl i32 %382, 16
  %384 = lshr i32 %382, 16
  %385 = or i32 %383, %384
  %386 = add i32 %385, %377
  %387 = xor i32 %377, %368
  %388 = xor i32 %387, %386
  %389 = add i32 %181, -35309556
  %390 = add i32 %389, %360
  %391 = add i32 %390, %388
  %392 = shl i32 %391, 23
  %393 = lshr i32 %391, 9
  %394 = or i32 %392, %393
  %395 = add i32 %394, %386
  %396 = xor i32 %386, %377
  %397 = xor i32 %396, %395
  %398 = add i32 %25, -1530992060
  %399 = add i32 %398, %368
  %400 = add i32 %399, %397
  %401 = shl i32 %400, 4
  %402 = lshr i32 %400, 28
  %403 = or i32 %401, %402
  %404 = add i32 %403, %395
  %405 = xor i32 %395, %386
  %406 = xor i32 %405, %404
  %407 = add i32 %61, 1272893353
  %408 = add i32 %407, %377
  %409 = add i32 %408, %406
  %410 = shl i32 %409, 11
  %411 = lshr i32 %409, 21
  %412 = or i32 %410, %411
  %413 = add i32 %412, %404
  %414 = xor i32 %404, %395
  %415 = xor i32 %414, %413
  %416 = add i32 %97, -155497632
  %417 = add i32 %416, %386
  %418 = add i32 %417, %415
  %419 = shl i32 %418, 16
  %420 = lshr i32 %418, 16
  %421 = or i32 %419, %420
  %422 = add i32 %421, %413
  %423 = xor i32 %413, %404
  %424 = xor i32 %423, %422
  %425 = add i32 %133, -1094730640
  %426 = add i32 %425, %395
  %427 = add i32 %426, %424
  %428 = shl i32 %427, 23
  %429 = lshr i32 %427, 9
  %430 = or i32 %428, %429
  %431 = add i32 %430, %422
  %432 = xor i32 %422, %413
  %433 = xor i32 %432, %431
  %434 = add i32 %169, 681279174
  %435 = add i32 %434, %404
  %436 = add i32 %435, %433
  %437 = shl i32 %436, 4
  %438 = lshr i32 %436, 28
  %439 = or i32 %437, %438
  %440 = add i32 %439, %431
  %441 = xor i32 %431, %422
  %442 = xor i32 %441, %440
  %443 = add i32 %13, -358537222
  %444 = add i32 %443, %413
  %445 = add i32 %444, %442
  %446 = shl i32 %445, 11
  %447 = lshr i32 %445, 21
  %448 = or i32 %446, %447
  %449 = add i32 %448, %440
  %450 = xor i32 %440, %431
  %451 = xor i32 %450, %449
  %452 = add i32 %49, -722521979
  %453 = add i32 %452, %422
  %454 = add i32 %453, %451
  %455 = shl i32 %454, 16
  %456 = lshr i32 %454, 16
  %457 = or i32 %455, %456
  %458 = add i32 %457, %449
  %459 = xor i32 %449, %440
  %460 = xor i32 %459, %458
  %461 = add i32 %85, 76029189
  %462 = add i32 %461, %431
  %463 = add i32 %462, %460
  %464 = shl i32 %463, 23
  %465 = lshr i32 %463, 9
  %466 = or i32 %464, %465
  %467 = add i32 %466, %458
  %468 = xor i32 %458, %449
  %469 = xor i32 %468, %467
  %470 = add i32 %121, -640364487
  %471 = add i32 %470, %440
  %472 = add i32 %471, %469
  %473 = shl i32 %472, 4
  %474 = lshr i32 %472, 28
  %475 = or i32 %473, %474
  %476 = add i32 %475, %467
  %477 = xor i32 %467, %458
  %478 = xor i32 %477, %476
  %479 = add i32 %157, -421815835
  %480 = add i32 %479, %449
  %481 = add i32 %480, %478
  %482 = shl i32 %481, 11
  %483 = lshr i32 %481, 21
  %484 = or i32 %482, %483
  %485 = add i32 %484, %476
  %486 = xor i32 %476, %467
  %487 = xor i32 %486, %485
  %488 = add i32 %193, 530742520
  %489 = add i32 %488, %458
  %490 = add i32 %489, %487
  %491 = shl i32 %490, 16
  %492 = lshr i32 %490, 16
  %493 = or i32 %491, %492
  %494 = add i32 %493, %485
  %495 = xor i32 %485, %476
  %496 = xor i32 %495, %494
  %497 = add i32 %37, -995338651
  %498 = add i32 %497, %467
  %499 = add i32 %498, %496
  %500 = shl i32 %499, 23
  %501 = lshr i32 %499, 9
  %502 = or i32 %500, %501
  %503 = add i32 %502, %494
  %504 = xor i32 %485, -1
  %505 = or i32 %503, %504
  %506 = xor i32 %505, %494
  %507 = add i32 %13, -198630844
  %508 = add i32 %507, %476
  %509 = add i32 %508, %506
  %510 = shl i32 %509, 6
  %511 = lshr i32 %509, 26
  %512 = or i32 %510, %511
  %513 = add i32 %512, %503
  %514 = xor i32 %494, -1
  %515 = or i32 %513, %514
  %516 = xor i32 %515, %503
  %517 = add i32 %97, 1126891415
  %518 = add i32 %517, %485
  %519 = add i32 %518, %516
  %520 = shl i32 %519, 10
  %521 = lshr i32 %519, 22
  %522 = or i32 %520, %521
  %523 = add i32 %522, %513
  %524 = xor i32 %503, -1
  %525 = or i32 %523, %524
  %526 = xor i32 %525, %513
  %527 = add i32 %181, -1416354905
  %528 = add i32 %527, %494
  %529 = add i32 %528, %526
  %530 = shl i32 %529, 15
  %531 = lshr i32 %529, 17
  %532 = or i32 %530, %531
  %533 = add i32 %532, %523
  %534 = xor i32 %513, -1
  %535 = or i32 %533, %534
  %536 = xor i32 %535, %523
  %537 = add i32 %73, -57434055
  %538 = add i32 %537, %503
  %539 = add i32 %538, %536
  %540 = shl i32 %539, 21
  %541 = lshr i32 %539, 11
  %542 = or i32 %540, %541
  %543 = add i32 %542, %533
  %544 = xor i32 %523, -1
  %545 = or i32 %543, %544
  %546 = xor i32 %545, %533
  %547 = add i32 %157, 1700485571
  %548 = add i32 %547, %513
  %549 = add i32 %548, %546
  %550 = shl i32 %549, 6
  %551 = lshr i32 %549, 26
  %552 = or i32 %550, %551
  %553 = add i32 %552, %543
  %554 = xor i32 %533, -1
  %555 = or i32 %553, %554
  %556 = xor i32 %555, %543
  %557 = add i32 %49, -1894986606
  %558 = add i32 %557, %523
  %559 = add i32 %558, %556
  %560 = shl i32 %559, 10
  %561 = lshr i32 %559, 22
  %562 = or i32 %560, %561
  %563 = add i32 %562, %553
  %564 = xor i32 %543, -1
  %565 = or i32 %563, %564
  %566 = xor i32 %565, %553
  %567 = add i32 %133, -1051523
  %568 = add i32 %567, %533
  %569 = add i32 %568, %566
  %570 = shl i32 %569, 15
  %571 = lshr i32 %569, 17
  %572 = or i32 %570, %571
  %573 = add i32 %572, %563
  %574 = xor i32 %553, -1
  %575 = or i32 %573, %574
  %576 = xor i32 %575, %563
  %577 = add i32 %25, -2054922799
  %578 = add i32 %577, %543
  %579 = add i32 %578, %576
  %580 = shl i32 %579, 21
  %581 = lshr i32 %579, 11
  %582 = or i32 %580, %581
  %583 = add i32 %582, %573
  %584 = xor i32 %563, -1
  %585 = or i32 %583, %584
  %586 = xor i32 %585, %573
  %587 = add i32 %109, 1873313359
  %588 = add i32 %587, %553
  %589 = add i32 %588, %586
  %590 = shl i32 %589, 6
  %591 = lshr i32 %589, 26
  %592 = or i32 %590, %591
  %593 = add i32 %592, %583
  %594 = xor i32 %573, -1
  %595 = or i32 %593, %594
  %596 = xor i32 %595, %583
  %597 = add i32 %193, -30611744
  %598 = add i32 %597, %563
  %599 = add i32 %598, %596
  %600 = shl i32 %599, 10
  %601 = lshr i32 %599, 22
  %602 = or i32 %600, %601
  %603 = add i32 %602, %593
  %604 = xor i32 %583, -1
  %605 = or i32 %603, %604
  %606 = xor i32 %605, %593
  %607 = add i32 %85, -1560198380
  %608 = add i32 %607, %573
  %609 = add i32 %608, %606
  %610 = shl i32 %609, 15
  %611 = lshr i32 %609, 17
  %612 = or i32 %610, %611
  %613 = add i32 %612, %603
  %614 = xor i32 %593, -1
  %615 = or i32 %613, %614
  %616 = xor i32 %615, %603
  %617 = add i32 %169, 1309151649
  %618 = add i32 %617, %583
  %619 = add i32 %618, %616
  %620 = shl i32 %619, 21
  %621 = lshr i32 %619, 11
  %622 = or i32 %620, %621
  %623 = add i32 %622, %613
  %624 = xor i32 %603, -1
  %625 = or i32 %623, %624
  %626 = xor i32 %625, %613
  %627 = add i32 %61, -145523070
  %628 = add i32 %627, %593
  %629 = add i32 %628, %626
  %630 = shl i32 %629, 6
  %631 = lshr i32 %629, 26
  %632 = or i32 %630, %631
  %633 = add i32 %632, %623
  %634 = xor i32 %613, -1
  %635 = or i32 %633, %634
  %636 = xor i32 %635, %623
  %637 = add i32 %145, -1120210379
  %638 = add i32 %637, %603
  %639 = add i32 %638, %636
  %640 = shl i32 %639, 10
  %641 = lshr i32 %639, 22
  %642 = or i32 %640, %641
  %643 = add i32 %642, %633
  %644 = xor i32 %623, -1
  %645 = or i32 %643, %644
  %646 = xor i32 %645, %633
  %647 = add i32 %37, 718787259
  %648 = add i32 %647, %613
  %649 = add i32 %648, %646
  %650 = shl i32 %649, 15
  %651 = lshr i32 %649, 17
  %652 = or i32 %650, %651
  %653 = add i32 %652, %643
  %654 = xor i32 %633, -1
  %655 = or i32 %653, %654
  %656 = xor i32 %655, %643
  %657 = add i32 %121, -343485551
  %658 = add i32 %657, %623
  %659 = add i32 %658, %656
  %660 = shl i32 %659, 21
  %661 = lshr i32 %659, 11
  %662 = or i32 %660, %661
  %663 = add i32 %633, %3
  store i32 %663, i32* %0, align 4
  %664 = add i32 %653, %5
  %665 = add i32 %664, %662
  store i32 %665, i32* %4, align 4
  %666 = add i32 %653, %7
  store i32 %666, i32* %6, align 4
  %667 = add i32 %643, %9
  store i32 %667, i32* %8, align 4
  ret void
}

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #4

declare hidden i32 @FcRandom() local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #5

declare hidden i32 @FcStatChecksum(i8*, %struct.stat*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @FcCacheTimeValid(%struct._FcConfig*, %struct._FcCache*, %struct.stat* readonly) unnamed_addr #1 {
  %4 = alloca %struct.stat, align 8
  %5 = bitcast %struct.stat* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 144, i1 false)
  %6 = icmp eq %struct.stat* %2, null
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = tail call i8* @IA__FcConfigGetSysRoot(%struct._FcConfig* %0) #12
  %9 = icmp eq i8* %8, null
  %10 = ptrtoint %struct._FcCache* %1 to i64
  %11 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %1, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = add nsw i64 %12, %10
  %14 = inttoptr i64 %13 to i8*
  br i1 %9, label %17, label %15

15:                                               ; preds = %7
  %16 = tail call i8* (i8*, ...) @IA__FcStrBuildFilename(i8* nonnull %8, i8* %14, i8* null) #12
  br label %19

17:                                               ; preds = %7
  %18 = tail call noalias i8* @strdup(i8* %14) #12
  br label %19

19:                                               ; preds = %17, %15
  %20 = phi i8* [ %16, %15 ], [ %18, %17 ]
  %21 = call i32 @FcStatChecksum(i8* %20, %struct.stat* nonnull %4) #12
  %22 = icmp slt i32 %21, 0
  call void @IA__FcStrFree(i8* %20) #12
  br i1 %22, label %55, label %23

23:                                               ; preds = %19, %3
  %24 = phi %struct.stat* [ %2, %3 ], [ %4, %19 ]
  %25 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %1, i64 0, i32 8
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.stat, %struct.stat* %24, i64 0, i32 12
  %28 = getelementptr inbounds %struct.stat, %struct.stat* %24, i64 0, i32 12, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %26, %29
  %31 = load i32, i32* @FcDebugVal, align 4
  %32 = and i32 %31, 16
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %46, label %34

34:                                               ; preds = %23
  %35 = ptrtoint %struct._FcCache* %1 to i64
  %36 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %1, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = add nsw i64 %37, %35
  %39 = inttoptr i64 %38 to i8*
  %40 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %1, i64 0, i32 7
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.timespec, %struct.timespec* %27, i64 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = trunc i64 %43 to i32
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.23, i64 0, i64 0), i8* %39, i32 %41, i64 %26, i32 %44, i64 %29)
  br label %46

46:                                               ; preds = %23, %34
  %47 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %1, i64 0, i32 7
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.timespec, %struct.timespec* %27, i64 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = trunc i64 %50 to i32
  %52 = icmp eq i32 %48, %51
  %53 = and i1 %30, %52
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %19, %46
  %56 = phi i32 [ %54, %46 ], [ 0, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %5) #12
  ret i32 %56
}

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @posix_fadvise64(i32, i64, i64, i32) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #8

declare hidden i32 @FcNameBool(i8*, i32*) local_unnamed_addr #3

declare hidden i32 @FcIsFsMmapSafe(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal i32 @FcDirCacheValidateHelper(%struct._FcConfig* nocapture readnone, i32, %struct.stat* nocapture readonly, %struct.stat* nocapture readonly, %struct.timeval* nocapture readnone, i8* nocapture readnone) #1 {
  %7 = alloca %struct._FcCache, align 8
  %8 = bitcast %struct._FcCache* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 64, i1 false)
  %9 = call i64 @read(i32 %1, i8* nonnull %8, i64 64) #12
  %10 = icmp eq i64 %9, 64
  br i1 %10, label %11, label %42

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %7, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, -66913276
  br i1 %14, label %15, label %42

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %7, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 7
  br i1 %18, label %42, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 8
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %7, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %21, %23
  br i1 %24, label %25, label %42

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %7, i64 0, i32 7
  %27 = load i32, i32* %26, align 8
  %28 = tail call fastcc i32 @FcDirChecksum(%struct.stat* %3)
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %42

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct._FcCache, %struct._FcCache* %7, i64 0, i32 8
  %32 = load i64, i64* %31, align 8
  %33 = tail call i8* @getenv(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)) #12
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 12, i32 1
  %37 = load i64, i64* %36, align 8
  br label %38

38:                                               ; preds = %30, %35
  %39 = phi i64 [ %37, %35 ], [ 0, %30 ]
  %40 = icmp eq i64 %32, %39
  %41 = zext i1 %40 to i32
  br label %42

42:                                               ; preds = %38, %25, %19, %15, %11, %6
  %43 = phi i32 [ 0, %6 ], [ 0, %11 ], [ 0, %15 ], [ 0, %19 ], [ 0, %25 ], [ %41, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #12
  ret i32 %43
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare i64 @strtoull(i8* readonly, i8** nocapture, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { cold }
attributes #14 = { nounwind readonly }
attributes #15 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval*, i8*)* @FcDirCacheMapHelper, i32 (%struct._FcConfig*, i32, %struct.stat*, %struct.stat*, %struct.timeval*, i8*)* @FcDirCacheValidateHelper}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
