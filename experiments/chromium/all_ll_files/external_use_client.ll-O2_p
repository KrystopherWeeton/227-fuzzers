; ModuleID = '../../components/viz/service/display/external_use_client.cc'
source_filename = "../../components/viz/service/display/external_use_client.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::ExternalUseClient::ImageContext" = type { i32 (...)**, %"struct.gpu::MailboxHolder", %"class.gfx::Size", i32, %class.sk_sp, i32, i32, %"class.absl::optional", %class.sk_sp.6, %class.GrBackendFormat }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%class.sk_sp.6 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%struct.SkISize = type { i32, i32 }
%class.GrBackendFormat = type { i32, i8, %union.anon.7, i32, [4 x i8] }
%union.anon.7 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

@_ZTVN3viz17ExternalUseClient12ImageContextE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::ExternalUseClient::ImageContext"*)* @_ZN3viz17ExternalUseClient12ImageContextD2Ev to i8*), i8* bitcast (void (%"class.viz::ExternalUseClient::ImageContext"*)* @_ZN3viz17ExternalUseClient12ImageContextD0Ev to i8*), i8* bitcast (void (%"class.viz::ExternalUseClient::ImageContext"*)* @_ZN3viz17ExternalUseClient12ImageContext13OnContextLostEv to i8*)] }, align 8

@_ZN3viz17ExternalUseClient12ImageContextC1ERKN3gpu13MailboxHolderERKN3gfx4SizeENS_14ResourceFormatERKN4absl8optionalINS2_15VulkanYCbCrInfoEEE5sk_spI12SkColorSpaceE = hidden unnamed_addr alias void (%"class.viz::ExternalUseClient::ImageContext"*, %"struct.gpu::MailboxHolder"*, %"class.gfx::Size"*, i32, %"class.absl::optional"*, %class.sk_sp*), void (%"class.viz::ExternalUseClient::ImageContext"*, %"struct.gpu::MailboxHolder"*, %"class.gfx::Size"*, i32, %"class.absl::optional"*, %class.sk_sp*)* @_ZN3viz17ExternalUseClient12ImageContextC2ERKN3gpu13MailboxHolderERKN3gfx4SizeENS_14ResourceFormatERKN4absl8optionalINS2_15VulkanYCbCrInfoEEE5sk_spI12SkColorSpaceE
@_ZN3viz17ExternalUseClient12ImageContextD1Ev = hidden unnamed_addr alias void (%"class.viz::ExternalUseClient::ImageContext"*), void (%"class.viz::ExternalUseClient::ImageContext"*)* @_ZN3viz17ExternalUseClient12ImageContextD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz17ExternalUseClient12ImageContextC2ERKN3gpu13MailboxHolderERKN3gfx4SizeENS_14ResourceFormatERKN4absl8optionalINS2_15VulkanYCbCrInfoEEE5sk_spI12SkColorSpaceE(%"class.viz::ExternalUseClient::ImageContext"*, %"struct.gpu::MailboxHolder"* dereferenceable(48), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32, %"class.absl::optional"* nocapture readonly dereferenceable(48), %class.sk_sp* nocapture) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz17ExternalUseClient12ImageContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.gpu::MailboxHolder", %"struct.gpu::MailboxHolder"* %1, i64 0, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false) #5
  %10 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 1, i32 1
  %11 = getelementptr inbounds %"struct.gpu::MailboxHolder", %"struct.gpu::MailboxHolder"* %1, i64 0, i32 1
  tail call void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"* %10, %"struct.gpu::SyncToken"* dereferenceable(24) %11) #5
  %12 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 1, i32 2
  %13 = getelementptr inbounds %"struct.gpu::MailboxHolder", %"struct.gpu::MailboxHolder"* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %12, align 8
  %15 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 2
  %16 = bitcast %"class.gfx::Size"* %2 to i64*
  %17 = bitcast %"class.gfx::Size"* %15 to i64*
  %18 = load i64, i64* %16, align 4
  store i64 %18, i64* %17, align 8
  %19 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 3
  store i32 %3, i32* %19, align 8
  %20 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  %22 = bitcast %class.sk_sp* %5 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %21, align 8
  %24 = bitcast %class.sk_sp* %20 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 5
  store i32 2, i32* %25, align 8
  %26 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 6
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 48, i1 false)
  %29 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 8, i32 0
  store %class.SkImage* null, %class.SkImage** %29, align 8
  %30 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 9, i32 0
  store i32 5, i32* %30, align 8
  %31 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 9, i32 1
  store i8 0, i8* %31, align 4
  %32 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 9, i32 3
  store i32 0, i32* %32, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz17ExternalUseClient12ImageContextD2Ev(%"class.viz::ExternalUseClient::ImageContext"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz17ExternalUseClient12ImageContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 8, i32 0
  %4 = load %class.SkImage*, %class.SkImage** %3, align 8
  %5 = icmp eq %class.SkImage* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkImage, %class.SkImage* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkImage* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkImage* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 4, i32 0
  %18 = load %class.SkColorSpace*, %class.SkColorSpace** %17, align 8
  %19 = icmp eq %class.SkColorSpace* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast %class.SkColorSpace* %18 to i8*
  tail call void @_ZdlPv(i8* %25) #6
  br label %26

26:                                               ; preds = %16, %20, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz17ExternalUseClient12ImageContextD0Ev(%"class.viz::ExternalUseClient::ImageContext"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz17ExternalUseClient12ImageContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 8, i32 0
  %4 = load %class.SkImage*, %class.SkImage** %3, align 8
  %5 = icmp eq %class.SkImage* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkImage, %class.SkImage* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkImage* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkImage* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 4, i32 0
  %18 = load %class.SkColorSpace*, %class.SkColorSpace** %17, align 8
  %19 = icmp eq %class.SkColorSpace* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast %class.SkColorSpace* %18 to i8*
  tail call void @_ZdlPv(i8* %25) #6
  br label %26

26:                                               ; preds = %16, %20, %24
  %27 = bitcast %"class.viz::ExternalUseClient::ImageContext"* %0 to i8*
  tail call void @_ZdlPv(i8* %27) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz17ExternalUseClient12ImageContext13OnContextLostEv(%"class.viz::ExternalUseClient::ImageContext"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz17ExternalUseClient12ImageContext8SetImageE5sk_spI7SkImageE15GrBackendFormat(%"class.viz::ExternalUseClient::ImageContext"*, %class.sk_sp.6* nocapture, %class.GrBackendFormat*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %1, i64 0, i32 0
  %6 = bitcast %class.sk_sp.6* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store %class.SkImage* null, %class.SkImage** %5, align 8
  %8 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %4, i64 0, i32 0
  %9 = load %class.SkImage*, %class.SkImage** %8, align 8
  %10 = bitcast %class.sk_sp.6* %4 to i64*
  store i64 %7, i64* %10, align 8
  %11 = icmp eq %class.SkImage* %9, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.SkImage, %class.SkImage* %9, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 -1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = bitcast %class.SkImage* %9 to %class.SkRefCntBase*
  %18 = bitcast %class.SkImage* %9 to void (%class.SkRefCntBase*)***
  %19 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %19, i64 2
  %21 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %20, align 8
  tail call void %21(%class.SkRefCntBase* nonnull %17) #5
  br label %22

22:                                               ; preds = %3, %12, %16
  %23 = getelementptr inbounds %"class.viz::ExternalUseClient::ImageContext", %"class.viz::ExternalUseClient::ImageContext"* %0, i64 0, i32 9
  %24 = tail call dereferenceable(72) %class.GrBackendFormat* @_ZN15GrBackendFormataSERKS_(%class.GrBackendFormat* %23, %class.GrBackendFormat* dereferenceable(72) %2) #5
  ret void
}

declare dereferenceable(72) %class.GrBackendFormat* @_ZN15GrBackendFormataSERKS_(%class.GrBackendFormat*, %class.GrBackendFormat* dereferenceable(72)) local_unnamed_addr #4

declare void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"*, %"struct.gpu::SyncToken"* dereferenceable(24)) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
