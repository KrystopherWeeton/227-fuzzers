; ModuleID = '../../third_party/webrtc/net/dcsctp/socket/state_cookie.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/socket/state_cookie.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.dcsctp::StateCookie" = type <{ %"class.dcsctp::StrongAlias", %"class.dcsctp::StrongAlias.0", i32, [4 x i8], %"class.dcsctp::StrongAlias.1", %"struct.dcsctp::Capabilities", [5 x i8] }>
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.dcsctp::StrongAlias.0" = type { i32 }
%"class.dcsctp::StrongAlias.1" = type { i64 }
%"struct.dcsctp::Capabilities" = type { i8, i8, i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"class.dcsctp::StateCookie" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN6dcsctp11StateCookie11kCookieSizeE = hidden local_unnamed_addr constant i64 31, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp11StateCookie9SerializeEv(%"class.std::__1::vector"* noalias sret, %"class.dcsctp::StateCookie"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #5
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %0, i64 31) #5
  %7 = load i8*, i8** %6, align 8
  %8 = load i64, i64* %5, align 8
  %9 = ptrtoint i8* %7 to i64
  %10 = icmp eq i64 %8, %9
  %11 = select i1 %10, i8* null, i8* %7
  store i8 100, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 99, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %11, i64 2
  store i8 83, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 3
  store i8 67, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 4
  store i8 84, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 5
  store i8 80, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 6
  store i8 48, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %11, i64 7
  store i8 48, i8* %18, align 1
  %19 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds i8, i8* %11, i64 8
  %22 = lshr i32 %20, 24
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = lshr i32 %20, 16
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds i8, i8* %11, i64 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %20, 8
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds i8, i8* %11, i64 10
  store i8 %28, i8* %29, align 1
  %30 = trunc i32 %20 to i8
  %31 = getelementptr inbounds i8, i8* %11, i64 11
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %11, i64 12
  %35 = lshr i32 %33, 24
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %34, align 1
  %37 = lshr i32 %33, 16
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %11, i64 13
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %33, 8
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %11, i64 14
  store i8 %41, i8* %42, align 1
  %43 = trunc i32 %33 to i8
  %44 = getelementptr inbounds i8, i8* %11, i64 15
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds i8, i8* %11, i64 16
  %48 = lshr i32 %46, 24
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = lshr i32 %46, 16
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %11, i64 17
  store i8 %51, i8* %52, align 1
  %53 = lshr i32 %46, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %11, i64 18
  store i8 %54, i8* %55, align 1
  %56 = trunc i32 %46 to i8
  %57 = getelementptr inbounds i8, i8* %11, i64 19
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 4, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = lshr i64 %59, 32
  %61 = getelementptr inbounds i8, i8* %11, i64 20
  %62 = lshr i64 %59, 56
  %63 = trunc i64 %62 to i8
  store i8 %63, i8* %61, align 1
  %64 = lshr i64 %59, 48
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds i8, i8* %11, i64 21
  store i8 %65, i8* %66, align 1
  %67 = lshr i64 %59, 40
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds i8, i8* %11, i64 22
  store i8 %68, i8* %69, align 1
  %70 = trunc i64 %60 to i8
  %71 = getelementptr inbounds i8, i8* %11, i64 23
  store i8 %70, i8* %71, align 1
  %72 = load i64, i64* %58, align 8
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds i8, i8* %11, i64 24
  %75 = lshr i32 %73, 24
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %74, align 1
  %77 = lshr i32 %73, 16
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %11, i64 25
  store i8 %78, i8* %79, align 1
  %80 = lshr i32 %73, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %11, i64 26
  store i8 %81, i8* %82, align 1
  %83 = trunc i64 %72 to i8
  %84 = getelementptr inbounds i8, i8* %11, i64 27
  store i8 %83, i8* %84, align 1
  %85 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 5, i32 0
  %86 = load i8, i8* %85, align 8, !range !2
  %87 = getelementptr inbounds i8, i8* %11, i64 28
  store i8 %86, i8* %87, align 1
  %88 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 5, i32 1
  %89 = load i8, i8* %88, align 1, !range !2
  %90 = getelementptr inbounds i8, i8* %11, i64 29
  store i8 %89, i8* %90, align 1
  %91 = getelementptr inbounds %"class.dcsctp::StateCookie", %"class.dcsctp::StateCookie"* %1, i64 0, i32 5, i32 2
  %92 = load i8, i8* %91, align 2, !range !2
  %93 = getelementptr inbounds i8, i8* %11, i64 30
  store i8 %92, i8* %93, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp11StateCookie11DeserializeEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %2, 31
  br i1 %4, label %9, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = bitcast %union.anon* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false) #5
  br label %168

9:                                                ; preds = %3
  %10 = load i8, i8* %1, align 1
  %11 = zext i8 %10 to i32
  %12 = shl nuw i32 %11, 24
  %13 = getelementptr inbounds i8, i8* %1, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 16
  %17 = or i32 %16, %12
  %18 = getelementptr inbounds i8, i8* %1, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 8
  %22 = or i32 %17, %21
  %23 = getelementptr inbounds i8, i8* %1, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = or i32 %22, %25
  %27 = getelementptr inbounds i8, i8* %1, i64 4
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw i32 %29, 24
  %31 = getelementptr inbounds i8, i8* %1, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 16
  %35 = or i32 %34, %30
  %36 = getelementptr inbounds i8, i8* %1, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 8
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds i8, i8* %1, i64 7
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %40, %43
  %45 = icmp ne i32 %26, 1684230979
  %46 = icmp ne i32 %44, 1414541360
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %9
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %49, align 8
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = bitcast %union.anon* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 32, i1 false) #5
  br label %168

52:                                               ; preds = %9
  %53 = getelementptr inbounds i8, i8* %1, i64 8
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = shl nuw i32 %55, 24
  %57 = getelementptr inbounds i8, i8* %1, i64 9
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, 16
  %61 = or i32 %60, %56
  %62 = getelementptr inbounds i8, i8* %1, i64 10
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 8
  %66 = or i32 %61, %65
  %67 = getelementptr inbounds i8, i8* %1, i64 11
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %66, %69
  %71 = getelementptr inbounds i8, i8* %1, i64 12
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw i32 %73, 24
  %75 = getelementptr inbounds i8, i8* %1, i64 13
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 16
  %79 = or i32 %78, %74
  %80 = getelementptr inbounds i8, i8* %1, i64 14
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, 8
  %84 = or i32 %79, %83
  %85 = getelementptr inbounds i8, i8* %1, i64 15
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = or i32 %84, %87
  %89 = getelementptr inbounds i8, i8* %1, i64 16
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = shl nuw i32 %91, 24
  %93 = getelementptr inbounds i8, i8* %1, i64 17
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = shl nuw nsw i32 %95, 16
  %97 = or i32 %96, %92
  %98 = getelementptr inbounds i8, i8* %1, i64 18
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 8
  %102 = or i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %1, i64 19
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = or i32 %102, %105
  %107 = getelementptr inbounds i8, i8* %1, i64 20
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i64
  %110 = shl nuw nsw i64 %109, 24
  %111 = getelementptr inbounds i8, i8* %1, i64 21
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i64
  %114 = shl nuw nsw i64 %113, 16
  %115 = or i64 %114, %110
  %116 = getelementptr inbounds i8, i8* %1, i64 22
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = shl nuw nsw i64 %118, 8
  %120 = or i64 %115, %119
  %121 = getelementptr inbounds i8, i8* %1, i64 23
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = or i64 %120, %123
  %125 = getelementptr inbounds i8, i8* %1, i64 24
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = shl nuw nsw i64 %127, 24
  %129 = getelementptr inbounds i8, i8* %1, i64 25
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = shl nuw nsw i64 %131, 16
  %133 = or i64 %132, %128
  %134 = getelementptr inbounds i8, i8* %1, i64 26
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = shl nuw nsw i64 %136, 8
  %138 = getelementptr inbounds i8, i8* %1, i64 27
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = shl nuw i64 %124, 32
  %142 = or i64 %133, %141
  %143 = or i64 %142, %137
  %144 = or i64 %143, %140
  %145 = getelementptr inbounds i8, i8* %1, i64 28
  %146 = load i8, i8* %145, align 1
  %147 = icmp ne i8 %146, 0
  %148 = getelementptr inbounds i8, i8* %1, i64 29
  %149 = load i8, i8* %148, align 1
  %150 = icmp ne i8 %149, 0
  %151 = getelementptr inbounds i8, i8* %1, i64 30
  %152 = load i8, i8* %151, align 1
  %153 = icmp ne i8 %152, 0
  %154 = zext i1 %153 to i24
  %155 = shl nuw nsw i24 %154, 16
  %156 = zext i1 %150 to i24
  %157 = shl nuw nsw i24 %156, 8
  %158 = zext i1 %147 to i24
  %159 = or i24 %157, %158
  %160 = or i24 %159, %155
  %161 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %161, align 8
  %162 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  store i32 %70, i32* %162, align 8
  %163 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  store i32 %88, i32* %163, align 4
  %164 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2
  store i32 %106, i32* %164, align 8
  %165 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 4, i32 0
  store i64 %144, i64* %165, align 8
  %166 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 5
  %167 = bitcast %"struct.dcsctp::Capabilities"* %166 to i24*
  store i24 %160, i24* %167, align 8
  br label %168

168:                                              ; preds = %48, %52, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #5
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #6
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #7
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #5
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #5
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #7
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
