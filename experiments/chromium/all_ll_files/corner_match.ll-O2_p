; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/corner_match.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/corner_match.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.Correspondence = type { i32, i32, i32, i32 }

@av1_compute_cross_correlation = external local_unnamed_addr global double (i8*, i32, i32, i32, i8*, i32, i32, i32)*, align 8

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @av1_compute_cross_correlation_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  br label %9

9:                                                ; preds = %48, %8
  %10 = phi i32 [ 0, %8 ], [ %49, %48 ]
  %11 = phi i32 [ 0, %8 ], [ %45, %48 ]
  %12 = phi i32 [ 0, %8 ], [ %43, %48 ]
  %13 = phi i32 [ 0, %8 ], [ %41, %48 ]
  %14 = phi i32 [ 0, %8 ], [ %40, %48 ]
  %15 = add nsw i32 %10, -6
  %16 = add i32 %15, %3
  %17 = mul nsw i32 %16, %1
  %18 = add i32 %15, %7
  %19 = mul nsw i32 %18, %5
  br label %20

20:                                               ; preds = %20, %9
  %21 = phi i64 [ 0, %9 ], [ %46, %20 ]
  %22 = phi i32 [ %11, %9 ], [ %45, %20 ]
  %23 = phi i32 [ %12, %9 ], [ %43, %20 ]
  %24 = phi i32 [ %13, %9 ], [ %41, %20 ]
  %25 = phi i32 [ %14, %9 ], [ %40, %20 ]
  %26 = trunc i64 %21 to i32
  %27 = add i32 %26, -6
  %28 = add i32 %27, %2
  %29 = add i32 %28, %17
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add i32 %27, %6
  %35 = add i32 %34, %19
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %4, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = add nsw i32 %25, %33
  %41 = add nsw i32 %24, %39
  %42 = mul nuw nsw i32 %39, %39
  %43 = add nsw i32 %42, %23
  %44 = mul nuw nsw i32 %39, %33
  %45 = add nsw i32 %44, %22
  %46 = add nuw nsw i64 %21, 1
  %47 = icmp eq i64 %46, 13
  br i1 %47, label %48, label %20

48:                                               ; preds = %20
  %49 = add nuw nsw i32 %10, 1
  %50 = icmp eq i32 %49, 13
  br i1 %50, label %51, label %9

51:                                               ; preds = %48
  %52 = mul nsw i32 %43, 169
  %53 = mul nsw i32 %41, %41
  %54 = sub nsw i32 %52, %53
  %55 = mul nsw i32 %45, 169
  %56 = mul nsw i32 %41, %40
  %57 = sub nsw i32 %55, %56
  %58 = sitofp i32 %57 to double
  %59 = sitofp i32 %54 to double
  %60 = tail call double @sqrt(double %59) #3
  %61 = fdiv double %58, %60
  ret double %61
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_determine_correspondence(i8*, i32* nocapture readonly, i32, i8*, i32* nocapture readonly, i32, i32, i32, i32, i32, i32* nocapture) local_unnamed_addr #2 {
  %12 = bitcast i32* %10 to %struct.Correspondence*
  %13 = icmp sgt i32 %2, 0
  br i1 %13, label %14, label %362

14:                                               ; preds = %11
  %15 = icmp sgt i32 %5, 0
  %16 = icmp slt i32 %6, %7
  %17 = select i1 %16, i32 %7, i32 %6
  %18 = ashr i32 %17, 4
  %19 = mul nsw i32 %18, %18
  %20 = zext i32 %2 to i64
  %21 = zext i32 %5 to i64
  br label %22

22:                                               ; preds = %228, %14
  %23 = phi i64 [ 0, %14 ], [ %230, %228 ]
  %24 = phi i32 [ 0, %14 ], [ %229, %228 ]
  %25 = shl nuw nsw i64 %23, 1
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = or i64 %25, 1
  %29 = getelementptr inbounds i32, i32* %1, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %27, 5
  %32 = icmp sgt i32 %30, 5
  %33 = and i1 %31, %32
  %34 = add nsw i32 %27, 6
  %35 = icmp slt i32 %34, %6
  %36 = and i1 %35, %33
  %37 = add nuw nsw i32 %30, 6
  %38 = icmp slt i32 %37, %7
  %39 = and i1 %38, %36
  br i1 %39, label %40, label %228

40:                                               ; preds = %22
  br i1 %15, label %41, label %84

41:                                               ; preds = %40, %76
  %42 = phi i64 [ %79, %76 ], [ 0, %40 ]
  %43 = phi i32 [ %78, %76 ], [ -1, %40 ]
  %44 = phi double [ %77, %76 ], [ 0.000000e+00, %40 ]
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr inbounds i32, i32* %4, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = or i64 %45, 1
  %49 = getelementptr inbounds i32, i32* %4, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %47, 5
  %52 = icmp sgt i32 %50, 5
  %53 = and i1 %51, %52
  %54 = add nsw i32 %47, 6
  %55 = icmp slt i32 %54, %6
  %56 = and i1 %55, %53
  %57 = add nuw nsw i32 %50, 6
  %58 = icmp slt i32 %57, %7
  %59 = and i1 %58, %56
  br i1 %59, label %60, label %76

60:                                               ; preds = %41
  %61 = load i32, i32* %26, align 4
  %62 = load i32, i32* %29, align 4
  %63 = sub nsw i32 %61, %47
  %64 = mul nsw i32 %63, %63
  %65 = sub nsw i32 %62, %50
  %66 = mul nsw i32 %65, %65
  %67 = add nuw nsw i32 %66, %64
  %68 = icmp ugt i32 %67, %19
  br i1 %68, label %76, label %69

69:                                               ; preds = %60
  %70 = load double (i8*, i32, i32, i32, i8*, i32, i32, i32)*, double (i8*, i32, i32, i32, i8*, i32, i32, i32)** @av1_compute_cross_correlation, align 8
  %71 = tail call double %70(i8* %0, i32 %8, i32 %61, i32 %62, i8* %3, i32 %9, i32 %47, i32 %50) #3
  %72 = fcmp ogt double %71, %44
  %73 = select i1 %72, double %71, double %44
  %74 = trunc i64 %42 to i32
  %75 = select i1 %72, i32 %74, i32 %43
  br label %76

76:                                               ; preds = %41, %69, %60
  %77 = phi double [ %44, %60 ], [ %73, %69 ], [ %44, %41 ]
  %78 = phi i32 [ %43, %60 ], [ %75, %69 ], [ %43, %41 ]
  %79 = add nuw nsw i64 %42, 1
  %80 = icmp eq i64 %79, %21
  br i1 %80, label %81, label %41

81:                                               ; preds = %76
  %82 = load i32, i32* %26, align 4
  %83 = load i32, i32* %29, align 4
  br label %84

84:                                               ; preds = %81, %40
  %85 = phi i32 [ %30, %40 ], [ %83, %81 ]
  %86 = phi i32 [ %27, %40 ], [ %82, %81 ]
  %87 = phi double [ 0.000000e+00, %40 ], [ %77, %81 ]
  %88 = phi i32 [ -1, %40 ], [ %78, %81 ]
  %89 = add i32 %85, -6
  br label %90

90:                                               ; preds = %90, %84
  %91 = phi i64 [ 0, %84 ], [ %201, %90 ]
  %92 = phi i32 [ 0, %84 ], [ %200, %90 ]
  %93 = phi i32 [ 0, %84 ], [ %198, %90 ]
  %94 = trunc i64 %91 to i32
  %95 = add i32 %89, %94
  %96 = mul nsw i32 %95, %8
  %97 = add i32 %96, %86
  %98 = add i32 %97, -6
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nsw i32 %93, %102
  %104 = mul nuw nsw i32 %102, %102
  %105 = add nsw i32 %104, %92
  %106 = add i32 %97, -5
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nsw i32 %103, %110
  %112 = mul nuw nsw i32 %110, %110
  %113 = add nsw i32 %105, %112
  %114 = add i32 %97, -4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nsw i32 %111, %118
  %120 = mul nuw nsw i32 %118, %118
  %121 = add nsw i32 %113, %120
  %122 = add i32 %97, -3
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nsw i32 %119, %126
  %128 = mul nuw nsw i32 %126, %126
  %129 = add nsw i32 %121, %128
  %130 = add i32 %97, -2
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nsw i32 %127, %134
  %136 = mul nuw nsw i32 %134, %134
  %137 = add nsw i32 %129, %136
  %138 = add i32 %97, -1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nsw i32 %135, %142
  %144 = mul nuw nsw i32 %142, %142
  %145 = add nsw i32 %137, %144
  %146 = sext i32 %97 to i64
  %147 = getelementptr inbounds i8, i8* %0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = add nsw i32 %143, %149
  %151 = mul nuw nsw i32 %149, %149
  %152 = add nsw i32 %145, %151
  %153 = add i32 %97, 1
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %0, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = add nsw i32 %150, %157
  %159 = mul nuw nsw i32 %157, %157
  %160 = add nsw i32 %152, %159
  %161 = add i32 %97, 2
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = add nsw i32 %158, %165
  %167 = mul nuw nsw i32 %165, %165
  %168 = add nsw i32 %160, %167
  %169 = add i32 %97, 3
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %0, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = add nsw i32 %166, %173
  %175 = mul nuw nsw i32 %173, %173
  %176 = add nsw i32 %168, %175
  %177 = add i32 %97, 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = add nsw i32 %174, %181
  %183 = mul nuw nsw i32 %181, %181
  %184 = add nsw i32 %176, %183
  %185 = add i32 %97, 5
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = add nsw i32 %182, %189
  %191 = mul nuw nsw i32 %189, %189
  %192 = add nsw i32 %184, %191
  %193 = add i32 %97, 6
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %0, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = add nsw i32 %190, %197
  %199 = mul nuw nsw i32 %197, %197
  %200 = add nsw i32 %192, %199
  %201 = add nuw nsw i64 %91, 1
  %202 = icmp eq i64 %201, 13
  br i1 %202, label %203, label %90

203:                                              ; preds = %90
  %204 = mul nsw i32 %200, 169
  %205 = mul nsw i32 %198, %198
  %206 = sub nsw i32 %204, %205
  %207 = sitofp i32 %206 to double
  %208 = tail call double @sqrt(double %207) #3
  %209 = fmul double %208, 7.500000e-01
  %210 = fcmp ogt double %87, %209
  br i1 %210, label %211, label %228

211:                                              ; preds = %203
  %212 = load i32, i32* %26, align 4
  %213 = sext i32 %24 to i64
  %214 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %213, i32 0
  store i32 %212, i32* %214, align 4
  %215 = load i32, i32* %29, align 4
  %216 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %213, i32 1
  store i32 %215, i32* %216, align 4
  %217 = shl nsw i32 %88, 1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i32, i32* %4, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %213, i32 2
  store i32 %220, i32* %221, align 4
  %222 = or i32 %217, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i32, i32* %4, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %213, i32 3
  store i32 %225, i32* %226, align 4
  %227 = add nsw i32 %24, 1
  br label %228

228:                                              ; preds = %22, %203, %211
  %229 = phi i32 [ %227, %211 ], [ %24, %203 ], [ %24, %22 ]
  %230 = add nuw nsw i64 %23, 1
  %231 = icmp eq i64 %230, %20
  br i1 %231, label %232, label %22

232:                                              ; preds = %228
  %233 = icmp sgt i32 %229, 0
  br i1 %233, label %234, label %362

234:                                              ; preds = %232
  %235 = icmp slt i32 %6, %7
  %236 = select i1 %235, i32 %7, i32 %6
  %237 = ashr i32 %236, 4
  %238 = mul nsw i32 %237, %237
  %239 = zext i32 %229 to i64
  br label %240

240:                                              ; preds = %294, %234
  %241 = phi i64 [ 0, %234 ], [ %299, %294 ]
  %242 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %241, i32 2
  %243 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %241, i32 3
  %244 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %241, i32 0
  %245 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %241, i32 1
  br label %246

246:                                              ; preds = %291, %240
  %247 = phi double [ 0.000000e+00, %240 ], [ %288, %291 ]
  %248 = phi i32 [ 0, %240 ], [ %287, %291 ]
  %249 = phi i32 [ 0, %240 ], [ %286, %291 ]
  %250 = phi i32 [ -4, %240 ], [ %292, %291 ]
  br label %251

251:                                              ; preds = %285, %246
  %252 = phi double [ %247, %246 ], [ %288, %285 ]
  %253 = phi i32 [ %248, %246 ], [ %287, %285 ]
  %254 = phi i32 [ %249, %246 ], [ %286, %285 ]
  %255 = phi i32 [ -4, %246 ], [ %289, %285 ]
  %256 = load i32, i32* %242, align 4
  %257 = add nsw i32 %256, %255
  %258 = load i32, i32* %243, align 4
  %259 = add nsw i32 %258, %250
  %260 = icmp sgt i32 %257, 5
  %261 = icmp sgt i32 %259, 5
  %262 = and i1 %260, %261
  %263 = add nsw i32 %257, 6
  %264 = icmp slt i32 %263, %6
  %265 = and i1 %264, %262
  %266 = add nuw nsw i32 %259, 6
  %267 = icmp slt i32 %266, %7
  %268 = and i1 %267, %265
  br i1 %268, label %269, label %285

269:                                              ; preds = %251
  %270 = load i32, i32* %244, align 4
  %271 = load i32, i32* %245, align 4
  %272 = sub nsw i32 %270, %257
  %273 = mul nsw i32 %272, %272
  %274 = sub nsw i32 %271, %259
  %275 = mul nsw i32 %274, %274
  %276 = add nuw nsw i32 %275, %273
  %277 = icmp ugt i32 %276, %238
  br i1 %277, label %285, label %278

278:                                              ; preds = %269
  %279 = load double (i8*, i32, i32, i32, i8*, i32, i32, i32)*, double (i8*, i32, i32, i32, i8*, i32, i32, i32)** @av1_compute_cross_correlation, align 8
  %280 = tail call double %279(i8* %0, i32 %8, i32 %270, i32 %271, i8* %3, i32 %9, i32 %257, i32 %259) #3
  %281 = fcmp ogt double %280, %252
  %282 = select i1 %281, i32 %255, i32 %254
  %283 = select i1 %281, i32 %250, i32 %253
  %284 = select i1 %281, double %280, double %252
  br label %285

285:                                              ; preds = %278, %269, %251
  %286 = phi i32 [ %254, %269 ], [ %282, %278 ], [ %254, %251 ]
  %287 = phi i32 [ %253, %269 ], [ %283, %278 ], [ %253, %251 ]
  %288 = phi double [ %252, %269 ], [ %284, %278 ], [ %252, %251 ]
  %289 = add nsw i32 %255, 1
  %290 = icmp eq i32 %289, 5
  br i1 %290, label %291, label %251

291:                                              ; preds = %285
  %292 = add nsw i32 %250, 1
  %293 = icmp eq i32 %292, 5
  br i1 %293, label %294, label %246

294:                                              ; preds = %291
  %295 = load i32, i32* %242, align 4
  %296 = add nsw i32 %295, %286
  store i32 %296, i32* %242, align 4
  %297 = load i32, i32* %243, align 4
  %298 = add nsw i32 %297, %287
  store i32 %298, i32* %243, align 4
  %299 = add nuw nsw i64 %241, 1
  %300 = icmp eq i64 %299, %239
  br i1 %300, label %301, label %240

301:                                              ; preds = %294, %355
  %302 = phi i64 [ %360, %355 ], [ 0, %294 ]
  %303 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %302, i32 0
  %304 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %302, i32 1
  %305 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %302, i32 2
  %306 = getelementptr inbounds %struct.Correspondence, %struct.Correspondence* %12, i64 %302, i32 3
  br label %307

307:                                              ; preds = %352, %301
  %308 = phi double [ 0.000000e+00, %301 ], [ %349, %352 ]
  %309 = phi i32 [ 0, %301 ], [ %348, %352 ]
  %310 = phi i32 [ 0, %301 ], [ %347, %352 ]
  %311 = phi i32 [ -4, %301 ], [ %353, %352 ]
  br label %312

312:                                              ; preds = %346, %307
  %313 = phi double [ %308, %307 ], [ %349, %346 ]
  %314 = phi i32 [ %309, %307 ], [ %348, %346 ]
  %315 = phi i32 [ %310, %307 ], [ %347, %346 ]
  %316 = phi i32 [ -4, %307 ], [ %350, %346 ]
  %317 = load i32, i32* %303, align 4
  %318 = add nsw i32 %317, %316
  %319 = load i32, i32* %304, align 4
  %320 = add nsw i32 %319, %311
  %321 = icmp sgt i32 %318, 5
  %322 = icmp sgt i32 %320, 5
  %323 = and i1 %321, %322
  %324 = add nsw i32 %318, 6
  %325 = icmp slt i32 %324, %6
  %326 = and i1 %325, %323
  %327 = add nuw nsw i32 %320, 6
  %328 = icmp slt i32 %327, %7
  %329 = and i1 %328, %326
  br i1 %329, label %330, label %346

330:                                              ; preds = %312
  %331 = load i32, i32* %305, align 4
  %332 = load i32, i32* %306, align 4
  %333 = sub nsw i32 %318, %331
  %334 = mul nsw i32 %333, %333
  %335 = sub nsw i32 %320, %332
  %336 = mul nsw i32 %335, %335
  %337 = add nuw nsw i32 %336, %334
  %338 = icmp ugt i32 %337, %238
  br i1 %338, label %346, label %339

339:                                              ; preds = %330
  %340 = load double (i8*, i32, i32, i32, i8*, i32, i32, i32)*, double (i8*, i32, i32, i32, i8*, i32, i32, i32)** @av1_compute_cross_correlation, align 8
  %341 = tail call double %340(i8* %3, i32 %9, i32 %331, i32 %332, i8* %0, i32 %8, i32 %318, i32 %320) #3
  %342 = fcmp ogt double %341, %313
  %343 = select i1 %342, i32 %316, i32 %315
  %344 = select i1 %342, i32 %311, i32 %314
  %345 = select i1 %342, double %341, double %313
  br label %346

346:                                              ; preds = %339, %330, %312
  %347 = phi i32 [ %315, %330 ], [ %343, %339 ], [ %315, %312 ]
  %348 = phi i32 [ %314, %330 ], [ %344, %339 ], [ %314, %312 ]
  %349 = phi double [ %313, %330 ], [ %345, %339 ], [ %313, %312 ]
  %350 = add nsw i32 %316, 1
  %351 = icmp eq i32 %350, 5
  br i1 %351, label %352, label %312

352:                                              ; preds = %346
  %353 = add nsw i32 %311, 1
  %354 = icmp eq i32 %353, 5
  br i1 %354, label %355, label %307

355:                                              ; preds = %352
  %356 = load i32, i32* %303, align 4
  %357 = add nsw i32 %356, %347
  store i32 %357, i32* %303, align 4
  %358 = load i32, i32* %304, align 4
  %359 = add nsw i32 %358, %348
  store i32 %359, i32* %304, align 4
  %360 = add nuw nsw i64 %302, 1
  %361 = icmp eq i64 %360, %239
  br i1 %361, label %362, label %301

362:                                              ; preds = %355, %11, %232
  %363 = phi i32 [ %229, %232 ], [ 0, %11 ], [ %229, %355 ]
  ret i32 %363
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
