; ModuleID = '../../third_party/blink/renderer/core/css/parser/css_tokenizer_input_stream.cc'
source_filename = "../../third_party/blink/renderer/core/css/parser/css_tokenizer_input_stream.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSTokenizerInputStream" = type { i32, i32, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }

@_ZN5blink23CSSTokenizerInputStreamC1ERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::CSSTokenizerInputStream"*, %"class.WTF::String"*), void (%"class.blink::CSSTokenizerInputStream"*, %"class.WTF::String"*)* @_ZN5blink23CSSTokenizerInputStreamC2ERKN3WTF6StringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CSSTokenizerInputStreamC2ERKN3WTF6StringE(%"class.blink::CSSTokenizerInputStream"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 0
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %2 ]
  store i32 %12, i32* %4, align 4
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %14 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 2, i32 0
  store %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"** %14, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %15, label %33, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %33

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i33
  %25 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %24, i33 1) #6
  %26 = extractvalue { i33, i1 } %25, 1
  %27 = extractvalue { i33, i1 } %25, 0
  %28 = icmp slt i33 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %30, label %31, !prof !2

30:                                               ; preds = %21
  tail call void @llvm.trap() #6
  unreachable

31:                                               ; preds = %21
  %32 = trunc i33 %27 to i32
  store i32 %32, i32* %22, align 4
  br label %33

33:                                               ; preds = %11, %16, %31
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  br i1 %7, label %29, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %12, %14
  br i1 %15, label %16, label %49

16:                                               ; preds = %9
  %17 = zext i32 %12 to i64
  %18 = zext i32 %14 to i64
  br label %19

19:                                               ; preds = %16, %25
  %20 = phi i64 [ %17, %16 ], [ %26, %25 ]
  %21 = getelementptr inbounds i8, i8* %10, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp ult i8 %22, 33
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  switch i8 %22, label %49 [
    i8 32, label %25
    i8 10, label %25
    i8 9, label %25
    i8 13, label %25
    i8 12, label %25
  ]

25:                                               ; preds = %24, %24, %24, %24, %24
  %26 = add nuw nsw i64 %20, 1
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %11, align 8
  %28 = icmp ult i64 %26, %18
  br i1 %28, label %19, label %49

29:                                               ; preds = %1
  %30 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %31 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %32, %34
  br i1 %35, label %36, label %49

36:                                               ; preds = %29
  %37 = zext i32 %32 to i64
  %38 = zext i32 %34 to i64
  br label %39

39:                                               ; preds = %36, %45
  %40 = phi i64 [ %37, %36 ], [ %46, %45 ]
  %41 = getelementptr inbounds i16, i16* %30, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp ult i16 %42, 33
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  switch i16 %42, label %49 [
    i16 32, label %45
    i16 10, label %45
    i16 9, label %45
    i16 13, label %45
    i16 12, label %45
  ]

45:                                               ; preds = %44, %44, %44, %44, %44
  %46 = add nuw nsw i64 %40, 1
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %31, align 8
  %48 = icmp ult i64 %46, %38
  br i1 %48, label %39, label %49

49:                                               ; preds = %25, %19, %24, %45, %39, %44, %9, %29
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK5blink23CSSTokenizerInputStream9GetDoubleEjj(%"class.blink::CSSTokenizerInputStream"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #6
  store i8 0, i8* %4, align 1
  %5 = icmp ugt i32 %2, %1
  br i1 %5, label %6, label %36

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %12, label %25, label %14

14:                                               ; preds = %6
  %15 = bitcast %"class.WTF::StringImpl"* %13 to i8*
  %16 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = zext i32 %1 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = sub i32 %2, %1
  %23 = zext i32 %22 to i64
  %24 = call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %21, i64 %23, i8* nonnull %4) #6
  br label %36

25:                                               ; preds = %6
  %26 = bitcast %"class.WTF::StringImpl"* %13 to i16*
  %27 = getelementptr inbounds %"class.blink::CSSTokenizerInputStream", %"class.blink::CSSTokenizerInputStream"* %0, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %26, i64 %29
  %31 = zext i32 %1 to i64
  %32 = getelementptr inbounds i16, i16* %30, i64 %31
  %33 = sub i32 %2, %1
  %34 = zext i32 %33 to i64
  %35 = call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %32, i64 %34, i8* nonnull %4) #6
  br label %36

36:                                               ; preds = %14, %25, %3
  %37 = phi double [ %24, %14 ], [ %35, %25 ], [ 0.000000e+00, %3 ]
  %38 = load i8, i8* %4, align 1, !range !3
  %39 = icmp eq i8 %38, 0
  %40 = select i1 %39, double 0.000000e+00, double %37
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #6
  ret double %40
}

declare double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8*, i64, i8*) local_unnamed_addr #3

declare double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
