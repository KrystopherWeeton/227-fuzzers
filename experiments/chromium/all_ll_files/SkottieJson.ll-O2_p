; ModuleID = '../../third_party/skia/modules/skottie/src/SkottieJson.cpp'
source_filename = "../../third_party/skia/modules/skottie/src/SkottieJson.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skjson::Value" = type { [8 x i8] }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkV2 = type { float, float }
%struct.SkPoint = type { float, float }
%"class.skjson::ObjectValue" = type { %"class.skjson::VectorValue.1" }
%"class.skjson::VectorValue.1" = type { %"class.skjson::Value" }
%"class.skottie::VectorValue" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"y\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseIfEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* readonly dereferenceable(8), float* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = icmp ne i8 %5, 6
  %7 = icmp eq %"class.skjson::Value"* %0, null
  %8 = or i1 %7, %6
  br i1 %8, label %30, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.skjson::Value"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %24, label %56

16:                                               ; preds = %56
  %17 = load i64, i64* %58, align 8
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %56

22:                                               ; preds = %16
  %23 = bitcast i64* %58 to %"class.skjson::Value"*
  br label %24

24:                                               ; preds = %22, %9
  %25 = phi i8 [ %60, %22 ], [ %4, %9 ]
  %26 = phi %"class.skjson::Value"* [ %23, %22 ], [ %0, %9 ]
  %27 = and i8 %25, 7
  br label %30

28:                                               ; preds = %56
  %29 = bitcast i64* %58 to %"class.skjson::Value"*
  br label %30

30:                                               ; preds = %28, %24, %2
  %31 = phi i8 [ %27, %24 ], [ %5, %2 ], [ %61, %28 ]
  %32 = phi %"class.skjson::Value"* [ %26, %24 ], [ %0, %2 ], [ %29, %28 ]
  %33 = add nsw i8 %31, -3
  %34 = icmp ugt i8 %33, 1
  %35 = icmp eq %"class.skjson::Value"* %32, null
  %36 = or i1 %35, %34
  br i1 %36, label %54, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %32, i64 0, i32 0, i64 0
  %39 = load i8, i8* %38, align 8
  %40 = and i8 %39, 7
  %41 = icmp eq i8 %40, 3
  %42 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %32, i64 0, i32 0, i64 4
  br i1 %41, label %43, label %47

43:                                               ; preds = %37
  %44 = bitcast i8* %42 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = sitofp i32 %45 to double
  br label %51

47:                                               ; preds = %37
  %48 = bitcast i8* %42 to float*
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  br label %51

51:                                               ; preds = %47, %43
  %52 = phi double [ %46, %43 ], [ %50, %47 ]
  %53 = fptrunc double %52 to float
  store float %53, float* %1, align 4
  br label %54

54:                                               ; preds = %30, %51
  %55 = phi i1 [ true, %51 ], [ false, %30 ]
  ret i1 %55

56:                                               ; preds = %9, %16
  %57 = phi i64* [ %19, %16 ], [ %13, %9 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 1
  %59 = bitcast i64* %58 to i8*
  %60 = load i8, i8* %59, align 8
  %61 = and i8 %60, 7
  %62 = icmp ne i8 %61, 6
  %63 = icmp eq i64* %58, null
  %64 = or i1 %63, %62
  br i1 %64, label %28, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseIbEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* nocapture readonly dereferenceable(8), i8* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  switch i8 %5, label %26 [
    i8 4, label %6
    i8 2, label %21
    i8 3, label %6
  ]

6:                                                ; preds = %2, %2
  %7 = icmp eq i8 %5, 3
  %8 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 4
  br i1 %7, label %9, label %13

9:                                                ; preds = %6
  %10 = bitcast i8* %8 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sitofp i32 %11 to double
  br label %17

13:                                               ; preds = %6
  %14 = bitcast i8* %8 to float*
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  br label %17

17:                                               ; preds = %9, %13
  %18 = phi double [ %12, %9 ], [ %16, %13 ]
  %19 = fcmp une double %18, 0.000000e+00
  %20 = zext i1 %19 to i8
  br label %24

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 1
  %23 = load i8, i8* %22, align 1, !range !2
  br label %24

24:                                               ; preds = %17, %21
  %25 = phi i8 [ %23, %21 ], [ %20, %17 ]
  store i8 %25, i8* %1, align 1
  br label %26

26:                                               ; preds = %24, %2
  %27 = phi i1 [ false, %2 ], [ true, %24 ]
  ret i1 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseIiEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* readonly dereferenceable(8), i32* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = add nsw i8 %5, -3
  %7 = icmp ugt i8 %6, 1
  %8 = icmp eq %"class.skjson::Value"* %0, null
  %9 = or i1 %8, %7
  br i1 %9, label %26, label %10

10:                                               ; preds = %2
  %11 = icmp eq i8 %5, 3
  %12 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 4
  br i1 %11, label %13, label %17

13:                                               ; preds = %10
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  br label %21

17:                                               ; preds = %10
  %18 = bitcast i8* %12 to float*
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  br label %21

21:                                               ; preds = %17, %13
  %22 = phi double [ %16, %13 ], [ %20, %17 ]
  %23 = fptosi double %22 to i32
  store i32 %23, i32* %1, align 4
  %24 = sitofp i32 %23 to double
  %25 = fcmp oeq double %22, %24
  br label %26

26:                                               ; preds = %2, %21
  %27 = phi i1 [ %25, %21 ], [ false, %2 ]
  ret i1 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseImEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* readonly dereferenceable(8), i64* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = add nsw i8 %5, -3
  %7 = icmp ugt i8 %6, 1
  %8 = icmp eq %"class.skjson::Value"* %0, null
  %9 = or i1 %8, %7
  br i1 %9, label %26, label %10

10:                                               ; preds = %2
  %11 = icmp eq i8 %5, 3
  %12 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 4
  br i1 %11, label %13, label %17

13:                                               ; preds = %10
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  br label %21

17:                                               ; preds = %10
  %18 = bitcast i8* %12 to float*
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  br label %21

21:                                               ; preds = %17, %13
  %22 = phi double [ %16, %13 ], [ %20, %17 ]
  %23 = fptoui double %22 to i64
  store i64 %23, i64* %1, align 8
  %24 = uitofp i64 %23 to double
  %25 = fcmp oeq double %22, %24
  br label %26

26:                                               ; preds = %2, %21
  %27 = phi i1 [ %25, %21 ], [ false, %2 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseI8SkStringEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* dereferenceable(8), %class.SkString*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  switch i8 %5, label %26 [
    i8 5, label %6
    i8 0, label %6
  ]

6:                                                ; preds = %2, %2
  %7 = icmp eq %"class.skjson::Value"* %0, null
  br i1 %7, label %26, label %8

8:                                                ; preds = %6
  %9 = icmp eq i8 %5, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 1
  %12 = tail call i64 @strlen(i8* %11) #10
  br label %23

13:                                               ; preds = %8
  %14 = bitcast %"class.skjson::Value"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 1
  %19 = bitcast i64* %18 to i8*
  %20 = icmp eq i8 %5, 5
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = load i64, i64* %17, align 8
  br label %23

23:                                               ; preds = %13, %21, %10
  %24 = phi i8* [ %19, %21 ], [ %11, %10 ], [ %19, %13 ]
  %25 = phi i64 [ %22, %21 ], [ %12, %10 ], [ 0, %13 ]
  tail call void @_ZN8SkString3setEPKcm(%class.SkString* %1, i8* %24, i64 %25) #11
  br label %26

26:                                               ; preds = %2, %6, %23
  %27 = phi i1 [ true, %23 ], [ false, %6 ], [ false, %2 ]
  ret i1 %27
}

declare void @_ZN8SkString3setEPKcm(%class.SkString*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseI4SkV2EEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* nocapture readonly dereferenceable(8), %struct.SkV2* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = icmp eq i8 %5, 6
  br i1 %6, label %7, label %122

7:                                                ; preds = %2
  %8 = bitcast %"class.skjson::Value"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, 1
  br i1 %13, label %14, label %122

14:                                               ; preds = %7
  %15 = getelementptr inbounds i64, i64* %11, i64 1
  %16 = getelementptr inbounds %struct.SkV2, %struct.SkV2* %1, i64 0, i32 0
  %17 = bitcast i64* %15 to i8*
  %18 = load i8, i8* %17, align 8
  %19 = and i8 %18, 7
  %20 = icmp ne i8 %19, 6
  %21 = icmp eq i64* %15, null
  %22 = or i1 %21, %20
  br i1 %22, label %35, label %23

23:                                               ; preds = %14
  %24 = load i64, i64* %15, align 8
  %25 = and i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %122, label %57

29:                                               ; preds = %57
  %30 = load i64, i64* %59, align 8
  %31 = and i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %122, label %57

35:                                               ; preds = %57, %14
  %36 = phi i8 [ %19, %14 ], [ %62, %57 ]
  %37 = phi i64* [ %15, %14 ], [ %59, %57 ]
  %38 = add nsw i8 %36, -3
  %39 = icmp ugt i8 %38, 1
  %40 = icmp eq i64* %37, null
  %41 = or i1 %40, %39
  br i1 %41, label %122, label %42

42:                                               ; preds = %35
  %43 = bitcast i64* %37 to %"class.skjson::Value"*
  %44 = bitcast i64* %37 to i8*
  %45 = load i8, i8* %44, align 8
  %46 = and i8 %45, 7
  %47 = icmp eq i8 %46, 3
  %48 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %43, i64 0, i32 0, i64 4
  br i1 %47, label %49, label %53

49:                                               ; preds = %42
  %50 = bitcast i8* %48 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = sitofp i32 %51 to double
  br label %64

53:                                               ; preds = %42
  %54 = bitcast i8* %48 to float*
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  br label %64

57:                                               ; preds = %23, %29
  %58 = phi i64* [ %32, %29 ], [ %26, %23 ]
  %59 = getelementptr inbounds i64, i64* %58, i64 1
  %60 = bitcast i64* %59 to i8*
  %61 = load i8, i8* %60, align 8
  %62 = and i8 %61, 7
  %63 = icmp eq i8 %62, 6
  br i1 %63, label %29, label %35

64:                                               ; preds = %49, %53
  %65 = phi double [ %52, %49 ], [ %56, %53 ]
  %66 = fptrunc double %65 to float
  store float %66, float* %16, align 4
  %67 = load i64, i64* %8, align 8
  %68 = and i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  %70 = getelementptr inbounds i64, i64* %69, i64 2
  %71 = getelementptr inbounds %struct.SkV2, %struct.SkV2* %1, i64 0, i32 1
  %72 = bitcast i64* %70 to i8*
  %73 = load i8, i8* %72, align 8
  %74 = and i8 %73, 7
  %75 = icmp ne i8 %74, 6
  %76 = icmp eq i64* %70, null
  %77 = or i1 %75, %76
  br i1 %77, label %90, label %78

78:                                               ; preds = %64
  %79 = load i64, i64* %70, align 8
  %80 = and i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %122, label %115

84:                                               ; preds = %115
  %85 = load i64, i64* %117, align 8
  %86 = and i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %122, label %115

90:                                               ; preds = %115, %64
  %91 = phi i8 [ %74, %64 ], [ %120, %115 ]
  %92 = phi i64* [ %70, %64 ], [ %117, %115 ]
  %93 = add nsw i8 %91, -3
  %94 = icmp ugt i8 %93, 1
  %95 = icmp eq i64* %92, null
  %96 = or i1 %95, %94
  br i1 %96, label %122, label %97

97:                                               ; preds = %90
  %98 = bitcast i64* %92 to %"class.skjson::Value"*
  %99 = bitcast i64* %92 to i8*
  %100 = load i8, i8* %99, align 8
  %101 = and i8 %100, 7
  %102 = icmp eq i8 %101, 3
  %103 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %98, i64 0, i32 0, i64 4
  br i1 %102, label %104, label %108

104:                                              ; preds = %97
  %105 = bitcast i8* %103 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = sitofp i32 %106 to double
  br label %112

108:                                              ; preds = %97
  %109 = bitcast i8* %103 to float*
  %110 = load float, float* %109, align 4
  %111 = fpext float %110 to double
  br label %112

112:                                              ; preds = %108, %104
  %113 = phi double [ %107, %104 ], [ %111, %108 ]
  %114 = fptrunc double %113 to float
  store float %114, float* %71, align 4
  br label %122

115:                                              ; preds = %78, %84
  %116 = phi i64* [ %87, %84 ], [ %81, %78 ]
  %117 = getelementptr inbounds i64, i64* %116, i64 1
  %118 = bitcast i64* %117 to i8*
  %119 = load i8, i8* %118, align 8
  %120 = and i8 %119, 7
  %121 = icmp eq i8 %120, 6
  br i1 %121, label %84, label %90

122:                                              ; preds = %29, %84, %78, %23, %112, %90, %35, %7, %2
  %123 = phi i1 [ false, %2 ], [ false, %7 ], [ false, %35 ], [ true, %112 ], [ false, %90 ], [ false, %23 ], [ false, %78 ], [ false, %84 ], [ false, %29 ]
  ret i1 %123
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseI7SkPointEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* dereferenceable(8), %struct.SkPoint* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = icmp eq i8 %5, 7
  br i1 %6, label %7, label %117

7:                                                ; preds = %2
  %8 = bitcast %"class.skjson::Value"* %0 to %"class.skjson::ObjectValue"*
  %9 = tail call dereferenceable(8) %"class.skjson::Value"* @_ZNK6skjson11ObjectValueixEPKc(%"class.skjson::ObjectValue"* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #11
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %11 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %9, i64 0, i32 0, i64 0
  %12 = load i8, i8* %11, align 8
  %13 = and i8 %12, 7
  %14 = icmp ne i8 %13, 6
  %15 = icmp eq %"class.skjson::Value"* %9, null
  %16 = or i1 %15, %14
  br i1 %16, label %32, label %17

17:                                               ; preds = %7
  %18 = bitcast %"class.skjson::Value"* %9 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %117, label %53

24:                                               ; preds = %53
  %25 = load i64, i64* %55, align 8
  %26 = and i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %117, label %53

30:                                               ; preds = %53
  %31 = bitcast i64* %55 to %"class.skjson::Value"*
  br label %32

32:                                               ; preds = %30, %7
  %33 = phi i8 [ %13, %7 ], [ %58, %30 ]
  %34 = phi %"class.skjson::Value"* [ %9, %7 ], [ %31, %30 ]
  %35 = add nsw i8 %33, -3
  %36 = icmp ugt i8 %35, 1
  %37 = icmp eq %"class.skjson::Value"* %34, null
  %38 = or i1 %37, %36
  br i1 %38, label %117, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %34, i64 0, i32 0, i64 0
  %41 = load i8, i8* %40, align 8
  %42 = and i8 %41, 7
  %43 = icmp eq i8 %42, 3
  %44 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %34, i64 0, i32 0, i64 4
  br i1 %43, label %45, label %49

45:                                               ; preds = %39
  %46 = bitcast i8* %44 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = sitofp i32 %47 to double
  br label %60

49:                                               ; preds = %39
  %50 = bitcast i8* %44 to float*
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  br label %60

53:                                               ; preds = %17, %24
  %54 = phi i64* [ %27, %24 ], [ %21, %17 ]
  %55 = getelementptr inbounds i64, i64* %54, i64 1
  %56 = bitcast i64* %55 to i8*
  %57 = load i8, i8* %56, align 8
  %58 = and i8 %57, 7
  %59 = icmp eq i8 %58, 6
  br i1 %59, label %24, label %30

60:                                               ; preds = %45, %49
  %61 = phi double [ %48, %45 ], [ %52, %49 ]
  %62 = fptrunc double %61 to float
  store float %62, float* %10, align 4
  %63 = tail call dereferenceable(8) %"class.skjson::Value"* @_ZNK6skjson11ObjectValueixEPKc(%"class.skjson::ObjectValue"* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #11
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %65 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %63, i64 0, i32 0, i64 0
  %66 = load i8, i8* %65, align 8
  %67 = and i8 %66, 7
  %68 = icmp ne i8 %67, 6
  %69 = icmp eq %"class.skjson::Value"* %63, null
  %70 = or i1 %69, %68
  br i1 %70, label %86, label %71

71:                                               ; preds = %60
  %72 = bitcast %"class.skjson::Value"* %63 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = and i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %117, label %110

78:                                               ; preds = %110
  %79 = load i64, i64* %112, align 8
  %80 = and i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %117, label %110

84:                                               ; preds = %110
  %85 = bitcast i64* %112 to %"class.skjson::Value"*
  br label %86

86:                                               ; preds = %84, %60
  %87 = phi i8 [ %67, %60 ], [ %115, %84 ]
  %88 = phi %"class.skjson::Value"* [ %63, %60 ], [ %85, %84 ]
  %89 = add nsw i8 %87, -3
  %90 = icmp ugt i8 %89, 1
  %91 = icmp eq %"class.skjson::Value"* %88, null
  %92 = or i1 %91, %90
  br i1 %92, label %117, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %88, i64 0, i32 0, i64 0
  %95 = load i8, i8* %94, align 8
  %96 = and i8 %95, 7
  %97 = icmp eq i8 %96, 3
  %98 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %88, i64 0, i32 0, i64 4
  br i1 %97, label %99, label %103

99:                                               ; preds = %93
  %100 = bitcast i8* %98 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = sitofp i32 %101 to double
  br label %107

103:                                              ; preds = %93
  %104 = bitcast i8* %98 to float*
  %105 = load float, float* %104, align 4
  %106 = fpext float %105 to double
  br label %107

107:                                              ; preds = %103, %99
  %108 = phi double [ %102, %99 ], [ %106, %103 ]
  %109 = fptrunc double %108 to float
  store float %109, float* %64, align 4
  br label %117

110:                                              ; preds = %71, %78
  %111 = phi i64* [ %81, %78 ], [ %75, %71 ]
  %112 = getelementptr inbounds i64, i64* %111, i64 1
  %113 = bitcast i64* %112 to i8*
  %114 = load i8, i8* %113, align 8
  %115 = and i8 %114, 7
  %116 = icmp eq i8 %115, 6
  br i1 %116, label %78, label %84

117:                                              ; preds = %24, %78, %71, %17, %107, %86, %32, %2
  %118 = phi i1 [ false, %2 ], [ false, %32 ], [ true, %107 ], [ false, %86 ], [ false, %17 ], [ false, %71 ], [ false, %78 ], [ false, %24 ]
  ret i1 %118
}

declare dereferenceable(8) %"class.skjson::Value"* @_ZNK6skjson11ObjectValueixEPKc(%"class.skjson::ObjectValue"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7skottie5ParseINS_11VectorValueEEEbRKN6skjson5ValueEPT_(%"class.skjson::Value"* nocapture readonly dereferenceable(8), %"class.skottie::VectorValue"*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  %6 = icmp eq i8 %5, 6
  br i1 %6, label %7, label %100

7:                                                ; preds = %2
  %8 = bitcast %"class.skjson::Value"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.skottie::VectorValue", %"class.skottie::VectorValue"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast float** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.skottie::VectorValue"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp ugt i64 %12, %19
  %21 = inttoptr i64 %17 to float*
  br i1 %20, label %22, label %25

22:                                               ; preds = %7
  %23 = getelementptr inbounds %"class.skottie::VectorValue", %"class.skottie::VectorValue"* %1, i64 0, i32 0
  %24 = sub i64 %12, %19
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"* %23, i64 %24) #11
  br label %29

25:                                               ; preds = %7
  %26 = icmp ult i64 %12, %19
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds float, float* %21, i64 %12
  store float* %28, float** %13, align 8
  br label %29

29:                                               ; preds = %22, %25, %27
  %30 = load i64, i64* %8, align 8
  %31 = and i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %100, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.skottie::VectorValue", %"class.skottie::VectorValue"* %1, i64 0, i32 0, i32 0, i32 0
  br label %37

37:                                               ; preds = %35, %91
  %38 = phi i64* [ %32, %35 ], [ %97, %91 ]
  %39 = phi i64 [ 0, %35 ], [ %94, %91 ]
  %40 = getelementptr inbounds i64, i64* %38, i64 1
  %41 = getelementptr inbounds i64, i64* %40, i64 %39
  %42 = load float*, float** %36, align 8
  %43 = getelementptr inbounds float, float* %42, i64 %39
  %44 = bitcast i64* %41 to i8*
  %45 = load i8, i8* %44, align 8
  %46 = and i8 %45, 7
  %47 = icmp ne i8 %46, 6
  %48 = icmp eq i64* %41, null
  %49 = or i1 %48, %47
  br i1 %49, label %62, label %50

50:                                               ; preds = %37
  %51 = load i64, i64* %41, align 8
  %52 = and i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %100, label %84

56:                                               ; preds = %84
  %57 = load i64, i64* %86, align 8
  %58 = and i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %100, label %84

62:                                               ; preds = %84, %37
  %63 = phi i8 [ %46, %37 ], [ %89, %84 ]
  %64 = phi i64* [ %41, %37 ], [ %86, %84 ]
  %65 = add nsw i8 %63, -3
  %66 = icmp ugt i8 %65, 1
  %67 = icmp eq i64* %64, null
  %68 = or i1 %67, %66
  br i1 %68, label %100, label %69

69:                                               ; preds = %62
  %70 = bitcast i64* %64 to %"class.skjson::Value"*
  %71 = bitcast i64* %64 to i8*
  %72 = load i8, i8* %71, align 8
  %73 = and i8 %72, 7
  %74 = icmp eq i8 %73, 3
  %75 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %70, i64 0, i32 0, i64 4
  br i1 %74, label %76, label %80

76:                                               ; preds = %69
  %77 = bitcast i8* %75 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = sitofp i32 %78 to double
  br label %91

80:                                               ; preds = %69
  %81 = bitcast i8* %75 to float*
  %82 = load float, float* %81, align 4
  %83 = fpext float %82 to double
  br label %91

84:                                               ; preds = %50, %56
  %85 = phi i64* [ %59, %56 ], [ %53, %50 ]
  %86 = getelementptr inbounds i64, i64* %85, i64 1
  %87 = bitcast i64* %86 to i8*
  %88 = load i8, i8* %87, align 8
  %89 = and i8 %88, 7
  %90 = icmp eq i8 %89, 6
  br i1 %90, label %56, label %62

91:                                               ; preds = %76, %80
  %92 = phi double [ %79, %76 ], [ %83, %80 ]
  %93 = fptrunc double %92 to float
  store float %93, float* %43, align 4
  %94 = add nuw i64 %39, 1
  %95 = load i64, i64* %8, align 8
  %96 = and i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = icmp ult i64 %94, %98
  br i1 %99, label %37, label %100

100:                                              ; preds = %50, %91, %62, %56, %29, %2
  %101 = phi i1 [ false, %2 ], [ true, %29 ], [ false, %56 ], [ false, %50 ], [ true, %91 ], [ false, %62 ]
  ret i1 %101
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #11
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #11
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #11
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
