; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-shape.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-shape.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.hb_atomic_ptr_t = type { i8** }
%struct.hb_shaper_entry_t = type { [16 x i8], i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* }
%struct.hb_shape_plan_t = type { %struct.hb_object_header_t, %struct.hb_face_t*, %struct.hb_shape_plan_key_t, %struct.hb_ot_shape_plan_t }
%struct.hb_object_header_t = type { %struct.hb_reference_count_t, %struct.hb_atomic_int_t, %struct.hb_atomic_ptr_t.0 }
%struct.hb_reference_count_t = type { %struct.hb_atomic_int_t }
%struct.hb_atomic_int_t = type { i32 }
%struct.hb_atomic_ptr_t.0 = type { %struct.hb_user_data_array_t* }
%struct.hb_user_data_array_t = type { %struct.hb_mutex_t, %struct.hb_lockable_set_t }
%struct.hb_mutex_t = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.hb_lockable_set_t = type { %struct.hb_vector_t }
%struct.hb_vector_t = type { i32, i32, %"struct.hb_user_data_array_t::hb_user_data_item_t"* }
%"struct.hb_user_data_array_t::hb_user_data_item_t" = type { %struct.hb_user_data_key_t*, i8*, void (i8*)* }
%struct.hb_user_data_key_t = type { i8 }
%struct.hb_face_t = type { %struct.hb_object_header_t, %struct.hb_blob_t* (%struct.hb_face_t*, i32, i8*)*, i8*, void (i8*)*, i32, %struct.hb_atomic_int_t, %struct.hb_atomic_int_t, %struct.hb_shaper_object_dataset_t, %struct.hb_ot_face_t, %struct.hb_atomic_ptr_t.129 }
%struct.hb_blob_t = type { %struct.hb_object_header_t, i8*, i32, i32, i8*, void (i8*)* }
%struct.hb_shaper_object_dataset_t = type { %struct.hb_face_t*, %struct.hb_shaper_lazy_loader_t }
%struct.hb_shaper_lazy_loader_t = type { %struct.hb_lazy_loader_t.1 }
%struct.hb_lazy_loader_t.1 = type { %struct.hb_atomic_ptr_t.3 }
%struct.hb_atomic_ptr_t.3 = type { %struct.hb_ot_face_data_t* }
%struct.hb_ot_face_data_t = type opaque
%struct.hb_ot_face_t = type { %struct.hb_face_t*, %struct.hb_table_lazy_loader_t, %struct.hb_face_lazy_loader_t, %struct.hb_table_lazy_loader_t.9, %struct.hb_face_lazy_loader_t.12, %struct.hb_table_lazy_loader_t.16, %struct.hb_face_lazy_loader_t.19, %struct.hb_face_lazy_loader_t.23, %struct.hb_table_lazy_loader_t.27, %struct.hb_face_lazy_loader_t.30, %struct.hb_table_lazy_loader_t.34, %struct.hb_face_lazy_loader_t.37, %struct.hb_face_lazy_loader_t.41, %struct.hb_face_lazy_loader_t.45, %struct.hb_face_lazy_loader_t.49, %struct.hb_table_lazy_loader_t.53, %struct.hb_table_lazy_loader_t.56, %struct.hb_table_lazy_loader_t.59, %struct.hb_face_lazy_loader_t.62, %struct.hb_table_lazy_loader_t.66, %struct.hb_table_lazy_loader_t.69, %struct.hb_face_lazy_loader_t.72, %struct.hb_face_lazy_loader_t.76, %struct.hb_face_lazy_loader_t.80, %struct.hb_table_lazy_loader_t.84, %struct.hb_table_lazy_loader_t.87, %struct.hb_table_lazy_loader_t.90, %struct.hb_table_lazy_loader_t.93, %struct.hb_table_lazy_loader_t.96, %struct.hb_table_lazy_loader_t.99, %struct.hb_table_lazy_loader_t.102, %struct.hb_table_lazy_loader_t.105, %struct.hb_table_lazy_loader_t.108, %struct.hb_table_lazy_loader_t.111, %struct.hb_face_lazy_loader_t.114, %struct.hb_face_lazy_loader_t.118, %struct.hb_face_lazy_loader_t.122, %struct.hb_table_lazy_loader_t.126 }
%struct.hb_table_lazy_loader_t = type { %struct.hb_lazy_loader_t.4 }
%struct.hb_lazy_loader_t.4 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.5 = type { %struct.hb_blob_t* }
%struct.hb_face_lazy_loader_t = type { %struct.hb_lazy_loader_t.6 }
%struct.hb_lazy_loader_t.6 = type { %struct.hb_atomic_ptr_t.8 }
%struct.hb_atomic_ptr_t.8 = type { %"struct.OT::cmap_accelerator_t"* }
%"struct.OT::cmap_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.9 = type { %struct.hb_lazy_loader_t.10 }
%struct.hb_lazy_loader_t.10 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.12 = type { %struct.hb_lazy_loader_t.13 }
%struct.hb_lazy_loader_t.13 = type { %struct.hb_atomic_ptr_t.15 }
%struct.hb_atomic_ptr_t.15 = type { %"struct.OT::hmtx_accelerator_t"* }
%"struct.OT::hmtx_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.16 = type { %struct.hb_lazy_loader_t.17 }
%struct.hb_lazy_loader_t.17 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.19 = type { %struct.hb_lazy_loader_t.20 }
%struct.hb_lazy_loader_t.20 = type { %struct.hb_atomic_ptr_t.22 }
%struct.hb_atomic_ptr_t.22 = type { %"struct.OT::post_accelerator_t"* }
%"struct.OT::post_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.23 = type { %struct.hb_lazy_loader_t.24 }
%struct.hb_lazy_loader_t.24 = type { %struct.hb_atomic_ptr_t.26 }
%struct.hb_atomic_ptr_t.26 = type { %"struct.OT::name_accelerator_t"* }
%"struct.OT::name_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.27 = type { %struct.hb_lazy_loader_t.28 }
%struct.hb_lazy_loader_t.28 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.30 = type { %struct.hb_lazy_loader_t.31 }
%struct.hb_lazy_loader_t.31 = type { %struct.hb_atomic_ptr_t.33 }
%struct.hb_atomic_ptr_t.33 = type { %"struct.OT::meta_accelerator_t"* }
%"struct.OT::meta_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.34 = type { %struct.hb_lazy_loader_t.35 }
%struct.hb_lazy_loader_t.35 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.37 = type { %struct.hb_lazy_loader_t.38 }
%struct.hb_lazy_loader_t.38 = type { %struct.hb_atomic_ptr_t.40 }
%struct.hb_atomic_ptr_t.40 = type { %"struct.OT::vmtx_accelerator_t"* }
%"struct.OT::vmtx_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.41 = type { %struct.hb_lazy_loader_t.42 }
%struct.hb_lazy_loader_t.42 = type { %struct.hb_atomic_ptr_t.44 }
%struct.hb_atomic_ptr_t.44 = type { %"struct.OT::glyf_accelerator_t"* }
%"struct.OT::glyf_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.45 = type { %struct.hb_lazy_loader_t.46 }
%struct.hb_lazy_loader_t.46 = type { %struct.hb_atomic_ptr_t.48 }
%struct.hb_atomic_ptr_t.48 = type { %"struct.OT::cff1_accelerator_t"* }
%"struct.OT::cff1_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.49 = type { %struct.hb_lazy_loader_t.50 }
%struct.hb_lazy_loader_t.50 = type { %struct.hb_atomic_ptr_t.52 }
%struct.hb_atomic_ptr_t.52 = type { %"struct.OT::cff2_accelerator_t"* }
%"struct.OT::cff2_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.53 = type { %struct.hb_lazy_loader_t.54 }
%struct.hb_lazy_loader_t.54 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.56 = type { %struct.hb_lazy_loader_t.57 }
%struct.hb_lazy_loader_t.57 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.59 = type { %struct.hb_lazy_loader_t.60 }
%struct.hb_lazy_loader_t.60 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.62 = type { %struct.hb_lazy_loader_t.63 }
%struct.hb_lazy_loader_t.63 = type { %struct.hb_atomic_ptr_t.65 }
%struct.hb_atomic_ptr_t.65 = type { %"struct.OT::gvar_accelerator_t"* }
%"struct.OT::gvar_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.66 = type { %struct.hb_lazy_loader_t.67 }
%struct.hb_lazy_loader_t.67 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.69 = type { %struct.hb_lazy_loader_t.70 }
%struct.hb_lazy_loader_t.70 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.72 = type { %struct.hb_lazy_loader_t.73 }
%struct.hb_lazy_loader_t.73 = type { %struct.hb_atomic_ptr_t.75 }
%struct.hb_atomic_ptr_t.75 = type { %"struct.OT::GDEF_accelerator_t"* }
%"struct.OT::GDEF_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.76 = type { %struct.hb_lazy_loader_t.77 }
%struct.hb_lazy_loader_t.77 = type { %struct.hb_atomic_ptr_t.79 }
%struct.hb_atomic_ptr_t.79 = type { %"struct.OT::GSUB_accelerator_t"* }
%"struct.OT::GSUB_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.80 = type { %struct.hb_lazy_loader_t.81 }
%struct.hb_lazy_loader_t.81 = type { %struct.hb_atomic_ptr_t.83 }
%struct.hb_atomic_ptr_t.83 = type { %"struct.OT::GPOS_accelerator_t"* }
%"struct.OT::GPOS_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.84 = type { %struct.hb_lazy_loader_t.85 }
%struct.hb_lazy_loader_t.85 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.87 = type { %struct.hb_lazy_loader_t.88 }
%struct.hb_lazy_loader_t.88 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.90 = type { %struct.hb_lazy_loader_t.91 }
%struct.hb_lazy_loader_t.91 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.93 = type { %struct.hb_lazy_loader_t.94 }
%struct.hb_lazy_loader_t.94 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.96 = type { %struct.hb_lazy_loader_t.97 }
%struct.hb_lazy_loader_t.97 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.99 = type { %struct.hb_lazy_loader_t.100 }
%struct.hb_lazy_loader_t.100 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.102 = type { %struct.hb_lazy_loader_t.103 }
%struct.hb_lazy_loader_t.103 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.105 = type { %struct.hb_lazy_loader_t.106 }
%struct.hb_lazy_loader_t.106 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.108 = type { %struct.hb_lazy_loader_t.109 }
%struct.hb_lazy_loader_t.109 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_table_lazy_loader_t.111 = type { %struct.hb_lazy_loader_t.112 }
%struct.hb_lazy_loader_t.112 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_face_lazy_loader_t.114 = type { %struct.hb_lazy_loader_t.115 }
%struct.hb_lazy_loader_t.115 = type { %struct.hb_atomic_ptr_t.117 }
%struct.hb_atomic_ptr_t.117 = type { %"struct.OT::CBDT_accelerator_t"* }
%"struct.OT::CBDT_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.118 = type { %struct.hb_lazy_loader_t.119 }
%struct.hb_lazy_loader_t.119 = type { %struct.hb_atomic_ptr_t.121 }
%struct.hb_atomic_ptr_t.121 = type { %"struct.OT::sbix_accelerator_t"* }
%"struct.OT::sbix_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.122 = type { %struct.hb_lazy_loader_t.123 }
%struct.hb_lazy_loader_t.123 = type { %struct.hb_atomic_ptr_t.125 }
%struct.hb_atomic_ptr_t.125 = type { %"struct.OT::SVG_accelerator_t"* }
%"struct.OT::SVG_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.126 = type { %struct.hb_lazy_loader_t.127 }
%struct.hb_lazy_loader_t.127 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.129 = type { %"struct.hb_face_t::plan_node_t"* }
%"struct.hb_face_t::plan_node_t" = type { %struct.hb_shape_plan_t*, %"struct.hb_face_t::plan_node_t"* }
%struct.hb_shape_plan_key_t = type { %struct.hb_segment_properties_t, %struct.hb_feature_t*, i32, %struct.hb_ot_shape_plan_key_t, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i8* }
%struct.hb_segment_properties_t = type { i32, i32, %struct.hb_language_impl_t*, i8*, i8* }
%struct.hb_language_impl_t = type opaque
%struct.hb_ot_shape_plan_key_t = type { [2 x i32] }
%struct.hb_ot_shape_plan_t = type <{ %struct.hb_segment_properties_t, %struct.hb_ot_complex_shaper_t*, %struct.hb_ot_map_t, %struct.hb_aat_map_t, i8*, i32, i32, i32, i32, i32, i32, i16, [6 x i8] }>
%struct.hb_ot_complex_shaper_t = type opaque
%struct.hb_ot_map_t = type { [2 x i32], [2 x i8], i32, %struct.hb_sorted_vector_t, [2 x %struct.hb_vector_t.133], [2 x %struct.hb_vector_t.134] }
%struct.hb_sorted_vector_t = type { %struct.hb_vector_t.132 }
%struct.hb_vector_t.132 = type { i32, i32, %"struct.hb_ot_map_t::feature_map_t"* }
%"struct.hb_ot_map_t::feature_map_t" = type { i32, [2 x i32], [2 x i32], i32, i32, i32, i8 }
%struct.hb_vector_t.133 = type { i32, i32, %"struct.hb_ot_map_t::lookup_map_t"* }
%"struct.hb_ot_map_t::lookup_map_t" = type { i16, i8, i32 }
%struct.hb_vector_t.134 = type { i32, i32, %"struct.hb_ot_map_t::stage_map_t"* }
%"struct.hb_ot_map_t::stage_map_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_t = type { %struct.hb_vector_t.135 }
%struct.hb_vector_t.135 = type { i32, i32, i32* }
%struct.hb_font_t = type { %struct.hb_object_header_t, %struct.hb_font_t*, %struct.hb_face_t*, i32, i32, i64, i64, i32, i32, float, i32, i32*, float*, %struct.hb_font_funcs_t*, i8*, void (i8*)*, %struct.hb_shaper_object_dataset_t.138 }
%struct.hb_font_funcs_t = type { %struct.hb_object_header_t, %struct.anon.136, %struct.anon.137, %"union.hb_font_funcs_t::get_t" }
%struct.anon.136 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.137 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%"union.hb_font_funcs_t::get_t" = type { %"struct.hb_font_funcs_t::get_t::get_funcs_t" }
%"struct.hb_font_funcs_t::get_t::get_funcs_t" = type { i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, %struct.hb_glyph_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i8*, i32, i32*, i8*)* }
%struct.hb_font_extents_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hb_glyph_extents_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_object_dataset_t.138 = type { %struct.hb_font_t*, %struct.hb_shaper_lazy_loader_t.139 }
%struct.hb_shaper_lazy_loader_t.139 = type { %struct.hb_lazy_loader_t.140 }
%struct.hb_lazy_loader_t.140 = type { %struct.hb_atomic_ptr_t.142 }
%struct.hb_atomic_ptr_t.142 = type { %struct.hb_ot_font_data_t* }
%struct.hb_ot_font_data_t = type opaque
%struct.hb_buffer_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hb_segment_properties_t, i8, i8, i8, i32, i32, i32, i32, %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t*, %struct.hb_glyph_position_t*, i32, [2 x [5 x i32]], [2 x i32], i32 (%struct.hb_buffer_t*, %struct.hb_font_t*, i8*, i8*)*, i8*, void (i8*)* }
%struct.hb_unicode_funcs_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, %struct.anon, %struct.anon.130, %struct.anon.131 }
%struct.anon = type { i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i8*)* }
%struct.anon.130 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.131 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%struct.hb_glyph_info_t = type { i32, i32, i32, %union._hb_var_int_t, %union._hb_var_int_t }
%union._hb_var_int_t = type { i32 }
%struct.hb_glyph_position_t = type { i32, i32, i32, i32, %union._hb_var_int_t }
%struct.hb_feature_t = type { i32, i32, i32, i32 }

@_ZL18static_shaper_list = internal global { %struct.hb_atomic_ptr_t } zeroinitializer, align 8
@_ZL15nil_shaper_list = internal global [1 x i8*] zeroinitializer, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hb_shape_list_shapers() local_unnamed_addr #0 {
  %1 = load atomic i64, i64* bitcast ({ %struct.hb_atomic_ptr_t }* @_ZL18static_shaper_list to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to i8**
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %27, !prof !2

4:                                                ; preds = %0, %22
  %5 = tail call noalias i8* @calloc(i64 2, i64 8) #4
  %6 = bitcast i8* %5 to i8**
  %7 = icmp eq i8* %5, null
  br i1 %7, label %11, label %8, !prof !2

8:                                                ; preds = %4
  %9 = tail call %struct.hb_shaper_entry_t* @_Z15_hb_shapers_getv() #4
  %10 = getelementptr inbounds %struct.hb_shaper_entry_t, %struct.hb_shaper_entry_t* %9, i64 0, i32 0, i64 0
  store i8* %10, i8** %6, align 8
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i8* [ %5, %8 ], [ bitcast ([1 x i8*]* @_ZL15nil_shaper_list to i8*), %4 ]
  %13 = phi i8** [ %6, %8 ], [ getelementptr inbounds ([1 x i8*], [1 x i8*]* @_ZL15nil_shaper_list, i64 0, i64 0), %4 ]
  %14 = ptrtoint i8** %13 to i64
  %15 = cmpxchg weak i64* bitcast ({ %struct.hb_atomic_ptr_t }* @_ZL18static_shaper_list to i64*), i64 0, i64 %14 acq_rel monotonic
  %16 = extractvalue { i64, i1 } %15, 1
  br i1 %16, label %27, label %17, !prof !3

17:                                               ; preds = %11
  %18 = icmp eq i8** %13, null
  %19 = icmp eq i8** %13, getelementptr inbounds ([1 x i8*], [1 x i8*]* @_ZL15nil_shaper_list, i64 0, i64 0)
  %20 = or i1 %18, %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @free(i8* %12) #4
  br label %22

22:                                               ; preds = %21, %17
  %23 = load atomic i64, i64* bitcast ({ %struct.hb_atomic_ptr_t }* @_ZL18static_shaper_list to i64*) acquire, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %4, label %25, !prof !2

25:                                               ; preds = %22
  %26 = inttoptr i64 %23 to i8**
  br label %27

27:                                               ; preds = %11, %0, %25
  %28 = phi i8** [ %26, %25 ], [ %2, %0 ], [ %13, %11 ]
  ret i8** %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @hb_shape_full(%struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32, i8**) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 2
  %7 = load %struct.hb_face_t*, %struct.hb_face_t** %6, align 8
  %8 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 10
  %9 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 11
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  %13 = tail call %struct.hb_shape_plan_t* @hb_shape_plan_create_cached2(%struct.hb_face_t* %7, %struct.hb_segment_properties_t* %8, %struct.hb_feature_t* %2, i32 %3, i32* %10, i32 %12, i8** %4) #4
  %14 = tail call i32 @hb_shape_plan_execute(%struct.hb_shape_plan_t* %13, %struct.hb_font_t* %0, %struct.hb_buffer_t* %1, %struct.hb_feature_t* %2, i32 %3) #4
  tail call void @hb_shape_plan_destroy(%struct.hb_shape_plan_t* %13) #4
  ret i32 %14
}

declare %struct.hb_shape_plan_t* @hb_shape_plan_create_cached2(%struct.hb_face_t*, %struct.hb_segment_properties_t*, %struct.hb_feature_t*, i32, i32*, i32, i8**) local_unnamed_addr #1

declare i32 @hb_shape_plan_execute(%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32) local_unnamed_addr #1

declare void @hb_shape_plan_destroy(%struct.hb_shape_plan_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @hb_shape(%struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 2
  %6 = load %struct.hb_face_t*, %struct.hb_face_t** %5, align 8
  %7 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 10
  %8 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 11
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = tail call %struct.hb_shape_plan_t* @hb_shape_plan_create_cached2(%struct.hb_face_t* %6, %struct.hb_segment_properties_t* %7, %struct.hb_feature_t* %2, i32 %3, i32* %9, i32 %11, i8** null) #4
  %13 = tail call i32 @hb_shape_plan_execute(%struct.hb_shape_plan_t* %12, %struct.hb_font_t* %0, %struct.hb_buffer_t* %1, %struct.hb_feature_t* %2, i32 %3) #4
  tail call void @hb_shape_plan_destroy(%struct.hb_shape_plan_t* %12) #4
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #2

declare hidden %struct.hb_shaper_entry_t* @_Z15_hb_shapers_getv() local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
