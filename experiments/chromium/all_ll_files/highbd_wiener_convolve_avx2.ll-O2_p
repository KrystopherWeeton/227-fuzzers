; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/highbd_wiener_convolve_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/highbd_wiener_convolve_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_wiener_convolve_add_src_avx2(i8*, i64, i8*, i64, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %13 = alloca [17280 x i16], align 32
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %2 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = bitcast [17280 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %20) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %20, i8 -86, i64 34560, i1 false)
  %21 = add i32 %9, 7
  %22 = mul i64 %1, -3
  %23 = getelementptr inbounds i16, i16* %16, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 -3
  %25 = add nsw i32 %11, 8
  %26 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %25, %27
  %29 = shl nsw i32 -1, %28
  %30 = trunc i32 %29 to i16
  %31 = xor i16 %30, -1
  %32 = insertelement <16 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <16 x i16> %32, <16 x i16> undef, <16 x i32> zeroinitializer
  %34 = bitcast i16* %4 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = add <8 x i16> %35, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %37 = bitcast <8 x i16> %36 to <4 x i32>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %41 = bitcast <4 x i32> %40 to <2 x i64>
  %42 = add nsw i32 %27, -1
  %43 = shl i32 1, %42
  %44 = add nsw i32 %11, 6
  %45 = shl i32 1, %44
  %46 = add nsw i32 %43, %45
  %47 = insertelement <8 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = icmp sgt i32 %21, 0
  br i1 %49, label %50, label %90

50:                                               ; preds = %12
  %51 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = shufflevector <2 x i64> %41, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %54 = bitcast <2 x i64> %53 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <8 x i32> %52, <8 x i32> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %57 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shufflevector <2 x i64> %41, <2 x i64> undef, <2 x i32> zeroinitializer
  %60 = bitcast <2 x i64> %59 to <4 x i32>
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = shufflevector <8 x i32> %58, <8 x i32> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %63 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = shufflevector <2 x i64> %39, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %66 = bitcast <2 x i64> %65 to <4 x i32>
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <8 x i32> %64, <8 x i32> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %69 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %70 = bitcast <4 x i64> %69 to <8 x i32>
  %71 = shufflevector <2 x i64> %39, <2 x i64> undef, <2 x i32> zeroinitializer
  %72 = bitcast <2 x i64> %71 to <4 x i32>
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %74 = shufflevector <8 x i32> %70, <8 x i32> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %75 = icmp sgt i32 %8, 0
  %76 = bitcast <8 x i32> %74 to <16 x i16>
  %77 = bitcast <8 x i32> %68 to <16 x i16>
  %78 = bitcast <8 x i32> %62 to <16 x i16>
  %79 = bitcast <8 x i32> %56 to <16 x i16>
  %80 = sext i32 %8 to i64
  %81 = zext i32 %21 to i64
  br label %82

82:                                               ; preds = %146, %50
  %83 = phi i64 [ 0, %50 ], [ %147, %146 ]
  br i1 %75, label %84, label %146

84:                                               ; preds = %82
  %85 = mul nsw i64 %83, %1
  %86 = getelementptr inbounds i16, i16* %24, i64 %85
  %87 = shl i64 %83, 7
  %88 = and i64 %87, 4294967168
  %89 = getelementptr inbounds [17280 x i16], [17280 x i16]* %13, i64 0, i64 %88
  br label %149

90:                                               ; preds = %146, %12
  %91 = shl nsw i32 -1, %11
  %92 = trunc i32 %91 to i16
  %93 = xor i16 %92, -1
  %94 = insertelement <16 x i16> undef, i16 %93, i32 0
  %95 = shufflevector <16 x i16> %94, <16 x i16> undef, <16 x i32> zeroinitializer
  %96 = bitcast i16* %6 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = add <8 x i16> %97, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %99 = bitcast <8 x i16> %98 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %105 = load i32, i32* %104, align 8
  %106 = add i32 %105, -1
  %107 = shl i32 1, %106
  %108 = add i32 %106, %11
  %109 = shl i32 1, %108
  %110 = sub nsw i32 %107, %109
  %111 = insertelement <8 x i32> undef, i32 %110, i32 0
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <8 x i32> zeroinitializer
  %113 = icmp sgt i32 %9, 0
  br i1 %113, label %114, label %210

114:                                              ; preds = %90
  %115 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = shufflevector <2 x i64> %103, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %118 = bitcast <2 x i64> %117 to <4 x i32>
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = shufflevector <8 x i32> %116, <8 x i32> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %121 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %122 = bitcast <4 x i64> %121 to <8 x i32>
  %123 = shufflevector <2 x i64> %103, <2 x i64> undef, <2 x i32> zeroinitializer
  %124 = bitcast <2 x i64> %123 to <4 x i32>
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = shufflevector <8 x i32> %122, <8 x i32> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %127 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 undef, i32 undef>
  %128 = bitcast <4 x i64> %127 to <8 x i32>
  %129 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %130 = bitcast <2 x i64> %129 to <4 x i32>
  %131 = shufflevector <4 x i32> %130, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = shufflevector <8 x i32> %128, <8 x i32> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %133 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %134 = bitcast <4 x i64> %133 to <8 x i32>
  %135 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %136 = bitcast <2 x i64> %135 to <4 x i32>
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = shufflevector <8 x i32> %134, <8 x i32> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %139 = icmp sgt i32 %8, 0
  %140 = bitcast <8 x i32> %138 to <16 x i16>
  %141 = bitcast <8 x i32> %132 to <16 x i16>
  %142 = bitcast <8 x i32> %126 to <16 x i16>
  %143 = bitcast <8 x i32> %120 to <16 x i16>
  %144 = sext i32 %8 to i64
  %145 = zext i32 %9 to i64
  br label %202

146:                                              ; preds = %149, %82
  %147 = add nuw nsw i64 %83, 1
  %148 = icmp eq i64 %147, %81
  br i1 %148, label %90, label %82

149:                                              ; preds = %84, %149
  %150 = phi i64 [ 0, %84 ], [ %200, %149 ]
  %151 = getelementptr inbounds i16, i16* %86, i64 %150
  %152 = bitcast i16* %151 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = getelementptr inbounds i16, i16* %151, i64 1
  %155 = bitcast i16* %154 to <16 x i16>*
  %156 = load <16 x i16>, <16 x i16>* %155, align 1
  %157 = getelementptr inbounds i16, i16* %151, i64 2
  %158 = bitcast i16* %157 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = getelementptr inbounds i16, i16* %151, i64 3
  %161 = bitcast i16* %160 to <16 x i16>*
  %162 = load <16 x i16>, <16 x i16>* %161, align 1
  %163 = getelementptr inbounds i16, i16* %151, i64 4
  %164 = bitcast i16* %163 to <16 x i16>*
  %165 = load <16 x i16>, <16 x i16>* %164, align 1
  %166 = getelementptr inbounds i16, i16* %151, i64 5
  %167 = bitcast i16* %166 to <16 x i16>*
  %168 = load <16 x i16>, <16 x i16>* %167, align 1
  %169 = getelementptr inbounds i16, i16* %151, i64 6
  %170 = bitcast i16* %169 to <16 x i16>*
  %171 = load <16 x i16>, <16 x i16>* %170, align 1
  %172 = getelementptr inbounds i16, i16* %151, i64 7
  %173 = bitcast i16* %172 to <16 x i16>*
  %174 = load <16 x i16>, <16 x i16>* %173, align 1
  %175 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %153, <16 x i16> %76) #3
  %176 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %156, <16 x i16> %76) #3
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %159, <16 x i16> %77) #3
  %178 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %162, <16 x i16> %77) #3
  %179 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %78) #3
  %180 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %168, <16 x i16> %78) #3
  %181 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %171, <16 x i16> %79) #3
  %182 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %174, <16 x i16> %79) #3
  %183 = add <8 x i32> %175, %48
  %184 = add <8 x i32> %183, %177
  %185 = add <8 x i32> %184, %179
  %186 = add <8 x i32> %185, %181
  %187 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %186, i32 %27) #3
  %188 = add <8 x i32> %176, %48
  %189 = add <8 x i32> %188, %178
  %190 = add <8 x i32> %189, %180
  %191 = add <8 x i32> %190, %182
  %192 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %191, i32 %27) #3
  %193 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %187, <8 x i32> %192) #3
  %194 = icmp sgt <16 x i16> %193, zeroinitializer
  %195 = select <16 x i1> %194, <16 x i16> %193, <16 x i16> zeroinitializer
  %196 = icmp slt <16 x i16> %195, %33
  %197 = select <16 x i1> %196, <16 x i16> %195, <16 x i16> %33
  %198 = getelementptr inbounds i16, i16* %89, i64 %150
  %199 = bitcast i16* %198 to <16 x i16>*
  store <16 x i16> %197, <16 x i16>* %199, align 32
  %200 = add nuw nsw i64 %150, 16
  %201 = icmp slt i64 %200, %80
  br i1 %201, label %149, label %146

202:                                              ; preds = %211, %114
  %203 = phi i64 [ 0, %114 ], [ %212, %211 ]
  br i1 %139, label %204, label %211

204:                                              ; preds = %202
  %205 = shl i64 %203, 7
  %206 = and i64 %205, 4294967168
  %207 = getelementptr inbounds [17280 x i16], [17280 x i16]* %13, i64 0, i64 %206
  %208 = mul nsw i64 %203, %3
  %209 = getelementptr inbounds i16, i16* %19, i64 %208
  br label %214

210:                                              ; preds = %211, %90
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %20) #3
  ret void

211:                                              ; preds = %214, %202
  %212 = add nuw nsw i64 %203, 1
  %213 = icmp eq i64 %212, %145
  br i1 %213, label %210, label %202

214:                                              ; preds = %204, %214
  %215 = phi i64 [ 0, %204 ], [ %276, %214 ]
  %216 = getelementptr inbounds i16, i16* %207, i64 %215
  %217 = bitcast i16* %216 to <16 x i16>*
  %218 = load <16 x i16>, <16 x i16>* %217, align 32
  %219 = getelementptr inbounds i16, i16* %216, i64 128
  %220 = bitcast i16* %219 to <16 x i16>*
  %221 = load <16 x i16>, <16 x i16>* %220, align 32
  %222 = getelementptr inbounds i16, i16* %216, i64 256
  %223 = bitcast i16* %222 to <16 x i16>*
  %224 = load <16 x i16>, <16 x i16>* %223, align 32
  %225 = getelementptr inbounds i16, i16* %216, i64 384
  %226 = bitcast i16* %225 to <16 x i16>*
  %227 = load <16 x i16>, <16 x i16>* %226, align 32
  %228 = getelementptr inbounds i16, i16* %216, i64 512
  %229 = bitcast i16* %228 to <16 x i16>*
  %230 = load <16 x i16>, <16 x i16>* %229, align 32
  %231 = getelementptr inbounds i16, i16* %216, i64 640
  %232 = bitcast i16* %231 to <16 x i16>*
  %233 = load <16 x i16>, <16 x i16>* %232, align 32
  %234 = getelementptr inbounds i16, i16* %216, i64 768
  %235 = bitcast i16* %234 to <16 x i16>*
  %236 = load <16 x i16>, <16 x i16>* %235, align 32
  %237 = getelementptr inbounds i16, i16* %216, i64 896
  %238 = bitcast i16* %237 to <16 x i16>*
  %239 = load <16 x i16>, <16 x i16>* %238, align 32
  %240 = shufflevector <16 x i16> %218, <16 x i16> %221, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %241 = shufflevector <16 x i16> %224, <16 x i16> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %242 = shufflevector <16 x i16> %230, <16 x i16> %233, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %243 = shufflevector <16 x i16> %236, <16 x i16> %239, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %244 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %240, <16 x i16> %140) #3
  %245 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %241, <16 x i16> %141) #3
  %246 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %242, <16 x i16> %142) #3
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %243, <16 x i16> %143) #3
  %248 = add <8 x i32> %245, %244
  %249 = add <8 x i32> %248, %246
  %250 = add <8 x i32> %249, %247
  %251 = shufflevector <16 x i16> %218, <16 x i16> %221, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %252 = shufflevector <16 x i16> %224, <16 x i16> %227, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %253 = shufflevector <16 x i16> %230, <16 x i16> %233, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %254 = shufflevector <16 x i16> %236, <16 x i16> %239, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %255 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %251, <16 x i16> %140) #3
  %256 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %252, <16 x i16> %141) #3
  %257 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %253, <16 x i16> %142) #3
  %258 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %254, <16 x i16> %143) #3
  %259 = add <8 x i32> %256, %255
  %260 = add <8 x i32> %259, %257
  %261 = add <8 x i32> %260, %258
  %262 = shufflevector <8 x i32> %250, <8 x i32> %261, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %263 = shufflevector <8 x i32> %250, <8 x i32> %261, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %264 = add <8 x i32> %262, %112
  %265 = load i32, i32* %104, align 8
  %266 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %264, i32 %265) #3
  %267 = add <8 x i32> %263, %112
  %268 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %267, i32 %265) #3
  %269 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %266, <8 x i32> %268) #3
  %270 = icmp sgt <16 x i16> %269, zeroinitializer
  %271 = select <16 x i1> %270, <16 x i16> %269, <16 x i16> zeroinitializer
  %272 = icmp slt <16 x i16> %271, %95
  %273 = select <16 x i1> %272, <16 x i16> %271, <16 x i16> %95
  %274 = getelementptr inbounds i16, i16* %209, i64 %215
  %275 = bitcast i16* %274 to <16 x i16>*
  store <16 x i16> %273, <16 x i16>* %275, align 2
  %276 = add nuw nsw i64 %215, 16
  %277 = icmp slt i64 %276, %144
  br i1 %277, label %214, label %211
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
