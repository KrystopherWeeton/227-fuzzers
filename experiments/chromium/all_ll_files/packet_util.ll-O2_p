; ModuleID = '../../third_party/openscreen/src/cast/streaming/packet_util.cc'
source_filename = "../../third_party/openscreen/src/cast/streaming/packet_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.openscreen::cast::RtcpCommonHeader" }
%"struct.openscreen::cast::RtcpCommonHeader" = type { i8, %union.anon.0, i32 }
%union.anon.0 = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN10openscreen4cast23InspectPacketForRoutingEN4absl4SpanIKhEE(i8*, i64) local_unnamed_addr #0 {
  %3 = alloca %"class.absl::optional", align 4
  %4 = icmp ugt i64 %1, 17
  br i1 %4, label %5, label %21

5:                                                ; preds = %2
  %6 = load i8, i8* %0, align 1
  %7 = icmp eq i8 %6, -128
  br i1 %7, label %8, label %23

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 127
  %12 = tail call zeroext i1 @_ZN10openscreen4cast16IsRtpPayloadTypeEh(i8 zeroext %11) #5
  br i1 %12, label %13, label %23

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = tail call i32 @llvm.bswap.i32(i32 %16) #5
  %18 = zext i32 %17 to i64
  %19 = shl nuw i64 %18, 32
  %20 = or i64 %19, 1
  br label %37

21:                                               ; preds = %2
  %22 = icmp ugt i64 %1, 7
  br i1 %22, label %23, label %37

23:                                               ; preds = %5, %8, %21
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #5
  call void @_ZN10openscreen4cast16RtcpCommonHeader5ParseEN4absl4SpanIKhEE(%"class.absl::optional"* nonnull sret %3, i8* %0, i64 %1) #5
  %25 = load i8, i8* %24, align 4, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #5
  br label %37

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN10openscreen4cast16RtcpCommonHeaderD1Ev(%"struct.openscreen::cast::RtcpCommonHeader"* %29) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #5
  %30 = getelementptr inbounds i8, i8* %0, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = call i32 @llvm.bswap.i32(i32 %32) #5
  %34 = zext i32 %33 to i64
  %35 = shl nuw i64 %34, 32
  %36 = or i64 %35, 2
  br label %37

37:                                               ; preds = %27, %21, %28, %13
  %38 = phi i64 [ %20, %13 ], [ %36, %28 ], [ 0, %21 ], [ 0, %27 ]
  ret i64 %38
}

declare zeroext i1 @_ZN10openscreen4cast16IsRtpPayloadTypeEh(i8 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN10openscreen4cast16RtcpCommonHeader5ParseEN4absl4SpanIKhEE(%"class.absl::optional"* sret, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN10openscreen4cast16RtcpCommonHeaderD1Ev(%"struct.openscreen::cast::RtcpCommonHeader"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
