; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_vmask_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_vmask_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@aom_blend_a64_vmask_sse4_1.blend = internal unnamed_addr constant [9 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* @blend_a64_vmask_w16n_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* @aom_blend_a64_vmask_c, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* @aom_blend_a64_vmask_c, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* null, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* @blend_a64_vmask_w4_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* null, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* null, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* null, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)* @blend_a64_vmask_w8_sse4_1], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_blend_a64_vmask_sse4_1(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #0 {
  %10 = and i32 %7, 15
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [9 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)*], [9 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)*]* @aom_blend_a64_vmask_sse4_1.blend, i64 0, i64 %11
  %13 = load void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)*, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32)** %12, align 8
  tail call void %13(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %6, i32 %7, i32 %8) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_vmask_w16n_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) #1 {
  %10 = zext i32 %1 to i64
  %11 = icmp sgt i32 %7, 0
  %12 = zext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = sext i32 %7 to i64
  br label %15

15:                                               ; preds = %71, %9
  %16 = phi i8* [ %6, %9 ], [ %75, %71 ]
  %17 = phi i32 [ %8, %9 ], [ %76, %71 ]
  %18 = phi i8* [ %4, %9 ], [ %74, %71 ]
  %19 = phi i8* [ %2, %9 ], [ %73, %71 ]
  %20 = phi i8* [ %0, %9 ], [ %72, %71 ]
  %21 = load i8, i8* %16, align 1
  %22 = zext i8 %21 to i16
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %24
  br i1 %11, label %26, label %71

26:                                               ; preds = %15, %26
  %27 = phi i64 [ %69, %26 ], [ 0, %15 ]
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = getelementptr inbounds i8, i8* %18, i64 %27
  %30 = bitcast i8* %28 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast i8* %29 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %32 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %38 = zext <8 x i8> %37 to <8 x i16>
  %39 = bitcast <2 x i64> %35 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %41 = zext <8 x i8> %40 to <8 x i16>
  %42 = mul <8 x i16> %24, %38
  %43 = mul <8 x i16> %25, %41
  %44 = add <8 x i16> %43, %42
  %45 = lshr <8 x i16> %44, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %45, <8 x i16> zeroinitializer) #4
  %47 = getelementptr inbounds i8, i8* %28, i64 8
  %48 = getelementptr inbounds i8, i8* %29, i64 8
  %49 = bitcast i8* %47 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = bitcast i8* %48 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %51 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %57 = zext <8 x i8> %56 to <8 x i16>
  %58 = bitcast <2 x i64> %54 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %60 = zext <8 x i8> %59 to <8 x i16>
  %61 = mul <8 x i16> %24, %57
  %62 = mul <8 x i16> %25, %60
  %63 = add <8 x i16> %62, %61
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #4
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %65) #4
  %67 = getelementptr inbounds i8, i8* %20, i64 %27
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %68, align 1
  %69 = add nuw nsw i64 %27, 16
  %70 = icmp slt i64 %69, %14
  br i1 %70, label %26, label %71

71:                                               ; preds = %26, %15
  %72 = getelementptr inbounds i8, i8* %20, i64 %10
  %73 = getelementptr inbounds i8, i8* %19, i64 %12
  %74 = getelementptr inbounds i8, i8* %18, i64 %13
  %75 = getelementptr inbounds i8, i8* %16, i64 1
  %76 = add nsw i32 %17, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %15

78:                                               ; preds = %71
  ret void
}

declare void @aom_blend_a64_vmask_c(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_vmask_w4_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) #1 {
  %10 = zext i32 %1 to i64
  %11 = zext i32 %3 to i64
  %12 = zext i32 %5 to i64
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i8* [ %6, %9 ], [ %48, %13 ]
  %15 = phi i8* [ %4, %9 ], [ %47, %13 ]
  %16 = phi i32 [ %8, %9 ], [ %49, %13 ]
  %17 = phi i8* [ %2, %9 ], [ %46, %13 ]
  %18 = phi i8* [ %0, %9 ], [ %45, %13 ]
  %19 = load i8, i8* %14, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %22
  %24 = bitcast i8* %17 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %25, i32 0
  %27 = bitcast i8* %15 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %28, i32 0
  %30 = bitcast <4 x i32> %26 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = bitcast <4 x i32> %29 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = mul <8 x i16> %22, %32
  %37 = mul <8 x i16> %23, %35
  %38 = add <8 x i16> %37, %36
  %39 = lshr <8 x i16> %38, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %40 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %39, <8 x i16> zeroinitializer) #4
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> undef) #4
  %42 = bitcast <16 x i8> %41 to <4 x i32>
  %43 = extractelement <4 x i32> %42, i32 0
  %44 = bitcast i8* %18 to i32*
  store i32 %43, i32* %44, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 %10
  %46 = getelementptr inbounds i8, i8* %17, i64 %11
  %47 = getelementptr inbounds i8, i8* %15, i64 %12
  %48 = getelementptr inbounds i8, i8* %14, i64 1
  %49 = add nsw i32 %16, -1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %13

51:                                               ; preds = %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_vmask_w8_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) #1 {
  %10 = zext i32 %1 to i64
  %11 = zext i32 %3 to i64
  %12 = zext i32 %5 to i64
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i8* [ %6, %9 ], [ %48, %13 ]
  %15 = phi i8* [ %4, %9 ], [ %47, %13 ]
  %16 = phi i32 [ %8, %9 ], [ %49, %13 ]
  %17 = phi i8* [ %2, %9 ], [ %46, %13 ]
  %18 = phi i8* [ %0, %9 ], [ %45, %13 ]
  %19 = load i8, i8* %14, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %22
  %24 = bitcast i8* %17 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast i8* %15 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = bitcast <2 x i64> %26 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = bitcast <2 x i64> %29 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = mul <8 x i16> %22, %32
  %37 = mul <8 x i16> %23, %35
  %38 = add <8 x i16> %37, %36
  %39 = lshr <8 x i16> %38, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %40 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %39, <8 x i16> zeroinitializer) #4
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> undef) #4
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %18 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 %10
  %46 = getelementptr inbounds i8, i8* %17, i64 %11
  %47 = getelementptr inbounds i8, i8* %15, i64 %12
  %48 = getelementptr inbounds i8, i8* %14, i64 1
  %49 = add nsw i32 %16, -1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %13

51:                                               ; preds = %13
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
