; ModuleID = '../../third_party/blink/renderer/core/layout/geometry/writing_mode_converter.cc'
source_filename = "../../third_party/blink/renderer/core/layout/geometry/writing_mode_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::WritingModeConverter" = type { %"class.blink::WritingDirectionMode", %"struct.blink::PhysicalSize" }
%"class.blink::WritingDirectionMode" = type { i8, i8 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::LogicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::LogicalRect" = type { %"struct.blink::LogicalOffset", %"struct.blink::LogicalSize" }
%"struct.blink::LogicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink20WritingModeConverter13SlowToLogicalERKNS_14PhysicalOffsetERKNS_12PhysicalSizeE(%"class.blink::WritingModeConverter"* nocapture readonly, %"struct.blink::PhysicalOffset"* nocapture readonly dereferenceable(8), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 1
  switch i8 %5, label %149 [
    i8 0, label %6
    i8 1, label %27
    i8 3, label %27
    i8 2, label %89
    i8 4, label %119
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, -1
  %12 = select i1 %11, i32 -2147483648, i32 2147483647
  %13 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 %10) #3
  %14 = extractvalue { i32, i1 } %13, 1
  %15 = extractvalue { i32, i1 } %13, 0
  %16 = select i1 %14, i32 %12, i32 %15, !prof !2
  %17 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, -1
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 %18) #3
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 4
  br label %149

27:                                               ; preds = %3, %3
  %28 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %52

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, -1
  %39 = select i1 %38, i32 -2147483648, i32 2147483647
  %40 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %35, i32 %37) #3
  %41 = extractvalue { i32, i1 } %40, 1
  %42 = extractvalue { i32, i1 } %40, 0
  %43 = select i1 %41, i32 %39, i32 %42, !prof !2
  %44 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, -1
  %47 = select i1 %46, i32 -2147483648, i32 2147483647
  %48 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 %45) #3
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 %47, i32 %50, !prof !2
  br label %149

52:                                               ; preds = %27
  %53 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %54, i32 %56) #3
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  %63 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp sgt i32 %64, -1
  %66 = select i1 %65, i32 -2147483648, i32 2147483647
  %67 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %64) #3
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  %70 = select i1 %68, i32 %66, i32 %69, !prof !2
  %71 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = icmp sgt i32 %74, -1
  %76 = select i1 %75, i32 -2147483648, i32 2147483647
  %77 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 %74) #3
  %78 = extractvalue { i32, i1 } %77, 1
  %79 = extractvalue { i32, i1 } %77, 0
  %80 = select i1 %78, i32 %76, i32 %79, !prof !2
  %81 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %82, -1
  %84 = select i1 %83, i32 -2147483648, i32 2147483647
  %85 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %80, i32 %82) #3
  %86 = extractvalue { i32, i1 } %85, 1
  %87 = extractvalue { i32, i1 } %85, 0
  %88 = select i1 %86, i32 %84, i32 %87, !prof !2
  br label %149

89:                                               ; preds = %3
  %90 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  br label %149

98:                                               ; preds = %89
  %99 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = icmp sgt i32 %102, -1
  %104 = select i1 %103, i32 -2147483648, i32 2147483647
  %105 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %100, i32 %102) #3
  %106 = extractvalue { i32, i1 } %105, 1
  %107 = extractvalue { i32, i1 } %105, 0
  %108 = select i1 %106, i32 %104, i32 %107, !prof !2
  %109 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %110 = load i32, i32* %109, align 4
  %111 = icmp sgt i32 %110, -1
  %112 = select i1 %111, i32 -2147483648, i32 2147483647
  %113 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %108, i32 %110) #3
  %114 = extractvalue { i32, i1 } %113, 1
  %115 = extractvalue { i32, i1 } %113, 0
  %116 = select i1 %114, i32 %112, i32 %115, !prof !2
  %117 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %118 = load i32, i32* %117, align 4
  br label %149

119:                                              ; preds = %3
  %120 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %144

123:                                              ; preds = %119
  %124 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp sgt i32 %127, -1
  %129 = select i1 %128, i32 -2147483648, i32 2147483647
  %130 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %125, i32 %127) #3
  %131 = extractvalue { i32, i1 } %130, 1
  %132 = extractvalue { i32, i1 } %130, 0
  %133 = select i1 %131, i32 %129, i32 %132, !prof !2
  %134 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = icmp sgt i32 %135, -1
  %137 = select i1 %136, i32 -2147483648, i32 2147483647
  %138 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %133, i32 %135) #3
  %139 = extractvalue { i32, i1 } %138, 1
  %140 = extractvalue { i32, i1 } %138, 0
  %141 = select i1 %139, i32 %137, i32 %140, !prof !2
  %142 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  br label %149

144:                                              ; preds = %119
  %145 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 1, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %1, i64 0, i32 0, i32 0
  %148 = load i32, i32* %147, align 4
  br label %149

149:                                              ; preds = %3, %144, %123, %98, %93, %52, %31, %6
  %150 = phi i32 [ %141, %123 ], [ %146, %144 ], [ %95, %93 ], [ %116, %98 ], [ %33, %31 ], [ %70, %52 ], [ %24, %6 ], [ 0, %3 ]
  %151 = phi i32 [ %143, %123 ], [ %148, %144 ], [ %97, %93 ], [ %118, %98 ], [ %51, %31 ], [ %88, %52 ], [ %26, %6 ], [ 0, %3 ]
  %152 = zext i32 %151 to i64
  %153 = shl nuw i64 %152, 32
  %154 = zext i32 %150 to i64
  %155 = or i64 %153, %154
  ret i64 %155
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink20WritingModeConverter14SlowToPhysicalERKNS_13LogicalOffsetERKNS_12PhysicalSizeE(%"class.blink::WritingModeConverter"* nocapture readonly, %"struct.blink::LogicalOffset"* nocapture readonly dereferenceable(8), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 1
  switch i8 %5, label %127 [
    i8 0, label %6
    i8 1, label %27
    i8 3, label %27
    i8 2, label %71
    i8 4, label %99
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, -1
  %12 = select i1 %11, i32 -2147483648, i32 2147483647
  %13 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %8, i32 %10) #3
  %14 = extractvalue { i32, i1 } %13, 1
  %15 = extractvalue { i32, i1 } %13, 0
  %16 = select i1 %14, i32 %12, i32 %15, !prof !2
  %17 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, -1
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 %18) #3
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 4
  br label %127

27:                                               ; preds = %3, %3
  %28 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  %31 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %34) #3
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp sgt i32 %42, -1
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 %42) #3
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47
  br i1 %30, label %49, label %52

49:                                               ; preds = %27
  %50 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  br label %127

52:                                               ; preds = %27
  %53 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %54, i32 %56) #3
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  %63 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp sgt i32 %64, -1
  %66 = select i1 %65, i32 -2147483648, i32 2147483647
  %67 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %64) #3
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  %70 = select i1 %68, i32 %66, i32 %69, !prof !2
  br label %127

71:                                               ; preds = %3
  %72 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  %75 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 1, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %80

77:                                               ; preds = %71
  %78 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %79 = load i32, i32* %78, align 4
  br label %127

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = icmp sgt i32 %84, -1
  %86 = select i1 %85, i32 -2147483648, i32 2147483647
  %87 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %82, i32 %84) #3
  %88 = extractvalue { i32, i1 } %87, 1
  %89 = extractvalue { i32, i1 } %87, 0
  %90 = select i1 %88, i32 %86, i32 %89, !prof !2
  %91 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = icmp sgt i32 %92, -1
  %94 = select i1 %93, i32 -2147483648, i32 2147483647
  %95 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %90, i32 %92) #3
  %96 = extractvalue { i32, i1 } %95, 1
  %97 = extractvalue { i32, i1 } %95, 0
  %98 = select i1 %96, i32 %94, i32 %97, !prof !2
  br label %127

99:                                               ; preds = %3
  %100 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 0
  %103 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 1, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %124

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 1, i32 1, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = icmp sgt i32 %109, -1
  %111 = select i1 %110, i32 -2147483648, i32 2147483647
  %112 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %107, i32 %109) #3
  %113 = extractvalue { i32, i1 } %112, 1
  %114 = extractvalue { i32, i1 } %112, 0
  %115 = select i1 %113, i32 %111, i32 %114, !prof !2
  %116 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = icmp sgt i32 %117, -1
  %119 = select i1 %118, i32 -2147483648, i32 2147483647
  %120 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %115, i32 %117) #3
  %121 = extractvalue { i32, i1 } %120, 1
  %122 = extractvalue { i32, i1 } %120, 0
  %123 = select i1 %121, i32 %119, i32 %122, !prof !2
  br label %127

124:                                              ; preds = %99
  %125 = getelementptr inbounds %"struct.blink::LogicalOffset", %"struct.blink::LogicalOffset"* %1, i64 0, i32 0, i32 0
  %126 = load i32, i32* %125, align 4
  br label %127

127:                                              ; preds = %3, %124, %105, %80, %77, %52, %49, %6
  %128 = phi i32 [ %104, %105 ], [ %104, %124 ], [ %76, %77 ], [ %76, %80 ], [ %48, %49 ], [ %48, %52 ], [ %24, %6 ], [ 0, %3 ]
  %129 = phi i32 [ %123, %105 ], [ %126, %124 ], [ %79, %77 ], [ %98, %80 ], [ %51, %49 ], [ %70, %52 ], [ %26, %6 ], [ 0, %3 ]
  %130 = zext i32 %129 to i64
  %131 = shl nuw i64 %130, 32
  %132 = zext i32 %128 to i64
  %133 = or i64 %131, %132
  ret i64 %133
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink20WritingModeConverter13SlowToLogicalERKNS_12PhysicalRectE(%"class.blink::WritingModeConverter"* nocapture readonly, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1
  %5 = tail call i64 @_ZNK5blink20WritingModeConverter13SlowToLogicalERKNS_14PhysicalOffsetERKNS_12PhysicalSizeE(%"class.blink::WritingModeConverter"* %0, %"struct.blink::PhysicalOffset"* dereferenceable(8) %3, %"struct.blink::PhysicalSize"* dereferenceable(8) %4)
  %6 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %4, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %11 = load i32, i32* %9, align 4
  %12 = load i32, i32* %10, align 4
  %13 = select i1 %8, i32 %11, i32 %12
  %14 = select i1 %8, i32 %12, i32 %11
  %15 = zext i32 %14 to i64
  %16 = shl nuw i64 %15, 32
  %17 = zext i32 %13 to i64
  %18 = or i64 %16, %17
  %19 = insertvalue { i64, i64 } undef, i64 %5, 0
  %20 = insertvalue { i64, i64 } %19, i64 %18, 1
  ret { i64, i64 } %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink20WritingModeConverter14SlowToPhysicalERKNS_11LogicalRectE(%"class.blink::WritingModeConverter"* nocapture readonly, %"struct.blink::LogicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"struct.blink::PhysicalSize"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %0, i64 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = select i1 %8, i32 %12, i32 %10
  %14 = select i1 %8, i32 %10, i32 %12
  %15 = zext i32 %13 to i64
  %16 = shl nuw i64 %15, 32
  %17 = zext i32 %14 to i64
  %18 = or i64 %16, %17
  store i64 %18, i64* %3, align 8
  %19 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 0
  %20 = call i64 @_ZNK5blink20WritingModeConverter14SlowToPhysicalERKNS_13LogicalOffsetERKNS_12PhysicalSizeE(%"class.blink::WritingModeConverter"* %0, %"struct.blink::LogicalOffset"* dereferenceable(8) %19, %"struct.blink::PhysicalSize"* nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  %21 = insertvalue { i64, i64 } undef, i64 %20, 0
  %22 = insertvalue { i64, i64 } %21, i64 %18, 1
  ret { i64, i64 } %22
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
