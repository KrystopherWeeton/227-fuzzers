; ModuleID = '../../v8/src/heap/gc-tracer.cc'
source_filename = "../../v8/src/heap/gc-tracer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::atomic.1135" = type { %"struct.std::__1::__atomic_base.1136" }
%"struct.std::__1::__atomic_base.1136" = type { %"struct.std::__1::__atomic_base.1137" }
%"struct.std::__1::__atomic_base.1137" = type { %"struct.std::__1::__cxx_atomic_impl.1138" }
%"struct.std::__1::__cxx_atomic_impl.1138" = type { %"struct.std::__1::__cxx_atomic_base_impl.1139" }
%"struct.std::__1::__cxx_atomic_base_impl.1139" = type { i32 }
%"class.v8::internal::GCTracer::Scope" = type { %"class.v8::internal::GCTracer"*, i32, i32, double, %"class.v8::internal::RuntimeCallTimer", %"class.v8::internal::RuntimeCallStats"*, %"class.v8::base::Optional.1130" }
%"class.v8::internal::RuntimeCallTimer" = type { %"class.v8::internal::RuntimeCallCounter"*, %"class.v8::base::AtomicValue", %"class.v8::base::TimeTicks", %"class.v8::base::TimeDelta" }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.730", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue.730" = type { i64 }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::base::Optional.1130" = type { %"class.v8::base::internal::OptionalBase.1131" }
%"class.v8::base::internal::OptionalBase.1131" = type { %"struct.v8::base::internal::OptionalStorage.1132" }
%"struct.v8::base::internal::OptionalStorage.1132" = type { %"struct.v8::base::internal::OptionalStorageBase.1133" }
%"struct.v8::base::internal::OptionalStorageBase.1133" = type { i8, %union.anon.1134 }
%union.anon.1134 = type { %"class.v8::internal::WorkerThreadRuntimeCallStatsScope" }
%"class.v8::internal::WorkerThreadRuntimeCallStatsScope" = type { %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::GCTracer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event", i64, double, double, double, double, double, [10 x %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"], double, i64, i64, i64, double, i64, i64, i64, double, i32, double, double, double, double, %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer.643", %"class.v8::base::Mutex", [124 x %"struct.v8::internal::GCTracer::BackgroundCounter"] }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.26", %"class.std::__1::vector.30", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.143", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.158", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.162", %"class.std::__1::vector.162", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.175", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.305", %"class.std::__1::unique_ptr.311", %"class.std::__1::unique_ptr.317", %"class.std::__1::unique_ptr.356", %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.431", %"class.std::__1::unique_ptr.441", %"class.std::__1::unique_ptr.447", %"class.std::__1::unique_ptr.447", %"class.std::__1::unique_ptr.453", %"class.std::__1::unique_ptr.459", %"class.std::__1::unique_ptr.459", %"class.std::__1::unique_ptr.465", %"class.std::__1::unique_ptr.471", %"class.std::__1::shared_ptr.477", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.500", %"class.std::__1::unique_ptr.526", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.532", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.545", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.327", i8, [7 x i8], %"class.std::__1::unordered_map.551", %"class.std::__1::unordered_map.577", %"class.std::__1::unordered_map.551", %"class.std::__1::unordered_map.601", %"class.std::__1::vector.629", i8, %"class.std::__1::unique_ptr.636", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.1", %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.17", [4 x i8] }>
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3", %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21" }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.692", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.698", %"class.std::__1::unique_ptr.719", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.729", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.841", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.854", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.864", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.875", %"struct.std::__1::atomic.149", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.950", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.993"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1001", i32, i8, i8, i32, i32, %"class.std::__1::vector.1007", %"class.std::__1::vector.1007", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1014", i64, %"class.std::__1::unordered_map.1015", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.538", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.157", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1071", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1085", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1119", %"class.std::__1::vector.1123", %"class.std::__1::vector.1123", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.687", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.687" = type { %"struct.std::__1::__atomic_base.688" }
%"struct.std::__1::__atomic_base.688" = type { %"struct.std::__1::__cxx_atomic_impl.689" }
%"struct.std::__1::__cxx_atomic_impl.689" = type { %"struct.std::__1::__cxx_atomic_base_impl.690" }
%"struct.std::__1::__cxx_atomic_base_impl.690" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.538" }
%"class.std::__1::shared_ptr.698" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.136", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.699", %"class.std::__1::unique_ptr.713" }
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.138" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.67", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.67" = type { %"struct.std::__1::__atomic_base.68" }
%"struct.std::__1::__atomic_base.68" = type { %"struct.std::__1::__cxx_atomic_impl.69" }
%"struct.std::__1::__cxx_atomic_impl.69" = type { %"struct.std::__1::__cxx_atomic_base_impl.70" }
%"struct.std::__1::__cxx_atomic_base_impl.70" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.702" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.136", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.702" = type { %"class.std::__1::__vector_base.703" }
%"class.std::__1::__vector_base.703" = type { %"class.std::__1::unique_ptr.704"*, %"class.std::__1::unique_ptr.704"*, %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.1141" }
%"class.std::__1::__compressed_pair.1141" = type { %"struct.std::__1::__compressed_pair_elem.1142" }
%"struct.std::__1::__compressed_pair_elem.1142" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.std::__1::unique_ptr.704"* }
%"class.std::__1::unique_ptr.713" = type { %"class.std::__1::__compressed_pair.714" }
%"class.std::__1::__compressed_pair.714" = type { %"struct.std::__1::__compressed_pair_elem.715" }
%"struct.std::__1::__compressed_pair_elem.715" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.719" = type { %"class.std::__1::__compressed_pair.720" }
%"class.std::__1::__compressed_pair.720" = type { %"struct.std::__1::__compressed_pair_elem.721" }
%"struct.std::__1::__compressed_pair_elem.721" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.722", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.722" = type { %"struct.std::__1::__atomic_base.723" }
%"struct.std::__1::__atomic_base.723" = type { %"struct.std::__1::__cxx_atomic_impl.724" }
%"struct.std::__1::__cxx_atomic_impl.724" = type { %"struct.std::__1::__cxx_atomic_base_impl.725" }
%"struct.std::__1::__cxx_atomic_base_impl.725" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.729" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.731", %"class.std::__1::unique_ptr.737", %"struct.std::__1::atomic.149", %"class.std::__1::unique_ptr.743", %"class.std::__1::unique_ptr.749", %"class.std::__1::unique_ptr.755", %"class.std::__1::unique_ptr.761", %"class.std::__1::unique_ptr.767", %"class.std::__1::set.773", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.731" = type { %"class.std::__1::__compressed_pair.732" }
%"class.std::__1::__compressed_pair.732" = type { %"struct.std::__1::__compressed_pair_elem.733" }
%"struct.std::__1::__compressed_pair_elem.733" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.737" = type { %"class.std::__1::__compressed_pair.738" }
%"class.std::__1::__compressed_pair.738" = type { %"struct.std::__1::__compressed_pair_elem.739" }
%"struct.std::__1::__compressed_pair_elem.739" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.743" = type { %"class.std::__1::__compressed_pair.744" }
%"class.std::__1::__compressed_pair.744" = type { %"struct.std::__1::__compressed_pair_elem.745" }
%"struct.std::__1::__compressed_pair_elem.745" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.749" = type { %"class.std::__1::__compressed_pair.750" }
%"class.std::__1::__compressed_pair.750" = type { %"struct.std::__1::__compressed_pair_elem.751" }
%"struct.std::__1::__compressed_pair_elem.751" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.755" = type { %"class.std::__1::__compressed_pair.756" }
%"class.std::__1::__compressed_pair.756" = type { %"struct.std::__1::__compressed_pair_elem.757" }
%"struct.std::__1::__compressed_pair_elem.757" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.761" = type { %"class.std::__1::__compressed_pair.762" }
%"class.std::__1::__compressed_pair.762" = type { %"struct.std::__1::__compressed_pair_elem.763" }
%"struct.std::__1::__compressed_pair_elem.763" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.767" = type { %"class.std::__1::__compressed_pair.768" }
%"class.std::__1::__compressed_pair.768" = type { %"struct.std::__1::__compressed_pair_elem.769" }
%"struct.std::__1::__compressed_pair_elem.769" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.773" = type { %"class.std::__1::__tree.774" }
%"class.std::__1::__tree.774" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.775", %"class.std::__1::__compressed_pair.779" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.775" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.779" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.782" }
%"class.v8::internal::TaggedImpl.782" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.781" }
%"class.v8::internal::TaggedImpl.781" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.657", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.657" = type { %"class.std::__1::__compressed_pair.658" }
%"class.std::__1::__compressed_pair.658" = type { %"struct.std::__1::__compressed_pair_elem.659" }
%"struct.std::__1::__compressed_pair_elem.659" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.783", %"class.v8::internal::DetachableVector.784", %"class.v8::internal::DetachableVector.783", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.784" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.783" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.651", %"class.std::__1::unique_ptr.478" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.v8::internal::VirtualMemory"* }
%"class.std::__1::unique_ptr.478" = type { %"class.std::__1::__compressed_pair.479" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.480" }
%"struct.std::__1::__compressed_pair_elem.480" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.481", %"class.std::__1::set.489" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.481" = type { %"class.std::__1::__tree.482" }
%"class.std::__1::__tree.482" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.483", %"class.std::__1::__compressed_pair.487" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::set.489" = type { %"class.std::__1::__tree.490" }
%"class.std::__1::__tree.490" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.483", %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.785", %"class.std::__1::vector.791", %"class.std::__1::unique_ptr.798", %"class.std::__1::vector.805", %"class.std::__1::unique_ptr.812", i64, %"class.std::__1::vector.818", %"class.std::__1::vector.826", %"class.std::__1::vector.834", i8, i8, i32 }
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.791" = type { %"class.std::__1::__vector_base.792" }
%"class.std::__1::__vector_base.792" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.793" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.793" = type { %"struct.std::__1::__compressed_pair_elem.794" }
%"struct.std::__1::__compressed_pair_elem.794" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.798" = type { %"class.std::__1::__compressed_pair.799" }
%"class.std::__1::__compressed_pair.799" = type { %"struct.std::__1::__compressed_pair_elem.800" }
%"struct.std::__1::__compressed_pair_elem.800" = type { %"class.v8::internal::GlobalHandles::NodeSpace.801"* }
%"class.v8::internal::GlobalHandles::NodeSpace.801" = type opaque
%"class.std::__1::vector.805" = type { %"class.std::__1::__vector_base.806" }
%"class.std::__1::__vector_base.806" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.807" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.807" = type { %"struct.std::__1::__compressed_pair_elem.808" }
%"struct.std::__1::__compressed_pair_elem.808" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.812" = type { %"class.std::__1::__compressed_pair.813" }
%"class.std::__1::__compressed_pair.813" = type { %"struct.std::__1::__compressed_pair_elem.814" }
%"struct.std::__1::__compressed_pair_elem.814" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.818" = type { %"class.std::__1::__vector_base.819" }
%"class.std::__1::__vector_base.819" = type { %"struct.std::__1::pair.820"*, %"struct.std::__1::pair.820"*, %"class.std::__1::__compressed_pair.821" }
%"struct.std::__1::pair.820" = type opaque
%"class.std::__1::__compressed_pair.821" = type { %"struct.std::__1::__compressed_pair_elem.822" }
%"struct.std::__1::__compressed_pair_elem.822" = type { %"struct.std::__1::pair.820"* }
%"class.std::__1::vector.826" = type { %"class.std::__1::__vector_base.827" }
%"class.std::__1::__vector_base.827" = type { %"struct.std::__1::pair.828"*, %"struct.std::__1::pair.828"*, %"class.std::__1::__compressed_pair.829" }
%"struct.std::__1::pair.828" = type opaque
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.830" }
%"struct.std::__1::__compressed_pair_elem.830" = type { %"struct.std::__1::pair.828"* }
%"class.std::__1::vector.834" = type { %"class.std::__1::__vector_base.835" }
%"class.std::__1::__vector_base.835" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.836" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.836" = type { %"struct.std::__1::__compressed_pair_elem.837" }
%"struct.std::__1::__compressed_pair_elem.837" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.663", %"class.std::__1::vector.841" }
%"class.std::__1::vector.663" = type { %"class.std::__1::__vector_base.664" }
%"class.std::__1::__vector_base.664" = type { i64**, i64**, %"class.std::__1::__compressed_pair.665" }
%"class.std::__1::__compressed_pair.665" = type { %"struct.std::__1::__compressed_pair_elem.666" }
%"struct.std::__1::__compressed_pair_elem.666" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.848" }
%"class.std::__1::unique_ptr.848" = type { %"class.std::__1::__compressed_pair.849" }
%"class.std::__1::__compressed_pair.849" = type { %"struct.std::__1::__compressed_pair_elem.850" }
%"struct.std::__1::__compressed_pair_elem.850" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.841" = type { %"class.std::__1::__vector_base.842" }
%"class.std::__1::__vector_base.842" = type { i32*, i32*, %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.854" = type { %"struct.std::__1::__atomic_base.855" }
%"struct.std::__1::__atomic_base.855" = type { %"struct.std::__1::__cxx_atomic_impl.856" }
%"struct.std::__1::__cxx_atomic_impl.856" = type { %"struct.std::__1::__cxx_atomic_base_impl.857" }
%"struct.std::__1::__cxx_atomic_base_impl.857" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.864" = type { %"struct.std::__1::__atomic_base.865" }
%"struct.std::__1::__atomic_base.865" = type { %"struct.std::__1::__cxx_atomic_impl.866" }
%"struct.std::__1::__cxx_atomic_impl.866" = type { %"struct.std::__1::__cxx_atomic_base_impl.867" }
%"struct.std::__1::__cxx_atomic_base_impl.867" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.869" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.870" }
%"struct.std::__1::__compressed_pair_elem.870" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.871 }
%union.anon.871 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.875" = type { %"class.std::__1::__hash_table.876" }
%"class.std::__1::__hash_table.876" = type <{ %"class.std::__1::unique_ptr.877", %"class.std::__1::__compressed_pair.887", %"class.std::__1::__compressed_pair.892", %"class.std::__1::__compressed_pair.895", [4 x i8] }>
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879", %"struct.std::__1::__compressed_pair_elem.881" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"struct.std::__1::__hash_node_base.880"** }
%"struct.std::__1::__hash_node_base.880" = type { %"struct.std::__1::__hash_node_base.880"* }
%"struct.std::__1::__compressed_pair_elem.881" = type { %"class.std::__1::__bucket_list_deallocator.882" }
%"class.std::__1::__bucket_list_deallocator.882" = type { %"class.std::__1::__compressed_pair.883" }
%"class.std::__1::__compressed_pair.883" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.887" = type { %"struct.std::__1::__compressed_pair_elem.888" }
%"struct.std::__1::__compressed_pair_elem.888" = type { %"struct.std::__1::__hash_node_base.880" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.895" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.149" = type { %"struct.std::__1::__atomic_base.150" }
%"struct.std::__1::__atomic_base.150" = type { %"struct.std::__1::__cxx_atomic_impl.151" }
%"struct.std::__1::__cxx_atomic_impl.151" = type { %"struct.std::__1::__cxx_atomic_base_impl.152" }
%"struct.std::__1::__cxx_atomic_base_impl.152" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.901", %"class.v8::internal::Handle.907", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.908", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.901" = type { %"class.std::__1::__compressed_pair.902" }
%"class.std::__1::__compressed_pair.902" = type { %"struct.std::__1::__compressed_pair_elem.903" }
%"struct.std::__1::__compressed_pair_elem.903" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.907" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.908" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"class.std::__1::unique_ptr.923", %"class.std::__1::unique_ptr.929", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.935", %"class.std::__1::vector.941", %"struct.std::__1::pair.949" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"class.std::__1::unique_ptr.917"*, %"class.std::__1::unique_ptr.917"*, %"class.std::__1::__compressed_pair.918" }
%"class.std::__1::unique_ptr.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"class.std::__1::unique_ptr.917"* }
%"class.std::__1::unique_ptr.923" = type { %"class.std::__1::__compressed_pair.924" }
%"class.std::__1::__compressed_pair.924" = type { %"struct.std::__1::__compressed_pair_elem.925" }
%"struct.std::__1::__compressed_pair_elem.925" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.935" = type { %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.937" }
%"struct.std::__1::__compressed_pair_elem.937" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.941" = type { %"class.std::__1::__vector_base.942" }
%"class.std::__1::__vector_base.942" = type { %"struct.std::__1::pair.943"*, %"struct.std::__1::pair.943"*, %"class.std::__1::__compressed_pair.944" }
%"struct.std::__1::pair.943" = type opaque
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.945" }
%"struct.std::__1::__compressed_pair_elem.945" = type { %"struct.std::__1::pair.943"* }
%"struct.std::__1::pair.949" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.691"*, i16, i8*)*, i8* }
%"class.v8::Local.691" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.950" = type { %"class.std::__1::__compressed_pair.951" }
%"class.std::__1::__compressed_pair.951" = type { %"struct.std::__1::__compressed_pair_elem.952" }
%"struct.std::__1::__compressed_pair_elem.952" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.953", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.953" = type { %"class.std::__1::__hash_table.954" }
%"class.std::__1::__hash_table.954" = type <{ %"class.std::__1::unique_ptr.955", %"class.std::__1::__compressed_pair.965", %"class.std::__1::__compressed_pair.970", %"class.std::__1::__compressed_pair.974", [4 x i8] }>
%"class.std::__1::unique_ptr.955" = type { %"class.std::__1::__compressed_pair.956" }
%"class.std::__1::__compressed_pair.956" = type { %"struct.std::__1::__compressed_pair_elem.957", %"struct.std::__1::__compressed_pair_elem.959" }
%"struct.std::__1::__compressed_pair_elem.957" = type { %"struct.std::__1::__hash_node_base.958"** }
%"struct.std::__1::__hash_node_base.958" = type { %"struct.std::__1::__hash_node_base.958"* }
%"struct.std::__1::__compressed_pair_elem.959" = type { %"class.std::__1::__bucket_list_deallocator.960" }
%"class.std::__1::__bucket_list_deallocator.960" = type { %"class.std::__1::__compressed_pair.961" }
%"class.std::__1::__compressed_pair.961" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.965" = type { %"struct.std::__1::__compressed_pair_elem.966" }
%"struct.std::__1::__compressed_pair_elem.966" = type { %"struct.std::__1::__hash_node_base.958" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.974" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.988" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.982"**, %"struct.std::__1::pair.982"**, %"struct.std::__1::pair.982"**, %"class.std::__1::__compressed_pair.983" }
%"struct.std::__1::pair.982" = type opaque
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { %"struct.std::__1::pair.982"** }
%"class.std::__1::__compressed_pair.988" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.993" = type { %"class.std::__1::__vector_base.994" }
%"class.std::__1::__vector_base.994" = type { %"class.v8::internal::Handle.995"*, %"class.v8::internal::Handle.995"*, %"class.std::__1::__compressed_pair.996" }
%"class.v8::internal::Handle.995" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.996" = type { %"struct.std::__1::__compressed_pair_elem.997" }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"class.v8::internal::Handle.995"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.859", i32, %"class.v8::Local.691" }
%"class.v8::Local.859" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1001" = type { %"class.std::__1::__compressed_pair.1002" }
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.663", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1007" = type { %"class.std::__1::__vector_base.1008" }
%"class.std::__1::__vector_base.1008" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1009" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.1010" }
%"struct.std::__1::__compressed_pair_elem.1010" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1014" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1015" = type { %"class.std::__1::__hash_table.1016" }
%"class.std::__1::__hash_table.1016" = type <{ %"class.std::__1::unique_ptr.1017", %"class.std::__1::__compressed_pair.1027", %"class.std::__1::__compressed_pair.1032", %"class.std::__1::__compressed_pair.1035", [4 x i8] }>
%"class.std::__1::unique_ptr.1017" = type { %"class.std::__1::__compressed_pair.1018" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.1019", %"struct.std::__1::__compressed_pair_elem.1021" }
%"struct.std::__1::__compressed_pair_elem.1019" = type { %"struct.std::__1::__hash_node_base.1020"** }
%"struct.std::__1::__hash_node_base.1020" = type { %"struct.std::__1::__hash_node_base.1020"* }
%"struct.std::__1::__compressed_pair_elem.1021" = type { %"class.std::__1::__bucket_list_deallocator.1022" }
%"class.std::__1::__bucket_list_deallocator.1022" = type { %"class.std::__1::__compressed_pair.1023" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::__hash_node_base.1020" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.538" = type { %"class.std::__1::__vector_base.539" }
%"class.std::__1::__vector_base.539" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.540" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.541" }
%"struct.std::__1::__compressed_pair_elem.541" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.157" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1039", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1068", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1069", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1039" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1064, %union.anon.1066, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1064 = type { i64 }
%union.anon.1066 = type { i64 }
%"class.std::__1::weak_ptr.1068" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.157" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1069" = type { %"class.v8::PersistentBase.1070" }
%"class.v8::PersistentBase.1070" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1040", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1040" = type { %"class.std::__1::__hash_table.1041" }
%"class.std::__1::__hash_table.1041" = type <{ %"class.std::__1::unique_ptr.1042", %"class.std::__1::__compressed_pair.1052", %"class.std::__1::__compressed_pair.1057", %"class.std::__1::__compressed_pair.1060", [4 x i8] }>
%"class.std::__1::unique_ptr.1042" = type { %"class.std::__1::__compressed_pair.1043" }
%"class.std::__1::__compressed_pair.1043" = type { %"struct.std::__1::__compressed_pair_elem.1044", %"struct.std::__1::__compressed_pair_elem.1046" }
%"struct.std::__1::__compressed_pair_elem.1044" = type { %"struct.std::__1::__hash_node_base.1045"** }
%"struct.std::__1::__hash_node_base.1045" = type { %"struct.std::__1::__hash_node_base.1045"* }
%"struct.std::__1::__compressed_pair_elem.1046" = type { %"class.std::__1::__bucket_list_deallocator.1047" }
%"class.std::__1::__bucket_list_deallocator.1047" = type { %"class.std::__1::__compressed_pair.1048" }
%"class.std::__1::__compressed_pair.1048" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"struct.std::__1::__hash_node_base.1045" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1060" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1071" = type { %"class.std::__1::__compressed_pair.1072" }
%"class.std::__1::__compressed_pair.1072" = type { %"struct.std::__1::__compressed_pair_elem.1073" }
%"struct.std::__1::__compressed_pair_elem.1073" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1076", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.644", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.648", %"class.std::__1::unique_ptr.673", %"class.std::__1::unique_ptr.471", %"class.std::__1::vector.679", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.644" = type { %"struct.std::__1::__atomic_base.645" }
%"struct.std::__1::__atomic_base.645" = type { %"struct.std::__1::__cxx_atomic_impl.646" }
%"struct.std::__1::__cxx_atomic_impl.646" = type { %"struct.std::__1::__cxx_atomic_base_impl.647" }
%"struct.std::__1::__cxx_atomic_base_impl.647" = type { i32 }
%"class.std::__1::unique_ptr.648" = type { %"class.std::__1::__compressed_pair.649" }
%"class.std::__1::__compressed_pair.649" = type { %"struct.std::__1::__compressed_pair_elem.650" }
%"struct.std::__1::__compressed_pair_elem.650" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.663" }
%"class.std::__1::unique_ptr.673" = type { %"class.std::__1::__compressed_pair.674" }
%"class.std::__1::__compressed_pair.674" = type { %"struct.std::__1::__compressed_pair_elem.675" }
%"struct.std::__1::__compressed_pair_elem.675" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.679" = type { %"class.std::__1::__vector_base.680" }
%"class.std::__1::__vector_base.680" = type { %"struct.std::__1::pair.681"*, %"struct.std::__1::pair.681"*, %"class.std::__1::__compressed_pair.682" }
%"struct.std::__1::pair.681" = type opaque
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"struct.std::__1::pair.681"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.96" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.37", %"class.std::__1::vector.37", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.39" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.44" }
%"class.std::__1::__hash_table.44" = type <{ %"class.std::__1::unique_ptr.45", %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.60", %"class.std::__1::__compressed_pair.62", [4 x i8] }>
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47", %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.std::__1::__hash_node_base.48"** }
%"struct.std::__1::__hash_node_base.48" = type { %"struct.std::__1::__hash_node_base.48"* }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::__bucket_list_deallocator.50" }
%"class.std::__1::__bucket_list_deallocator.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::__hash_node_base.48" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.21", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.85", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.21", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.71" }
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.73" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.78", %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::atomic.85" = type { %"struct.std::__1::__atomic_base.86" }
%"struct.std::__1::__atomic_base.86" = type { %"struct.std::__1::__cxx_atomic_impl.87" }
%"struct.std::__1::__cxx_atomic_impl.87" = type { %"struct.std::__1::__cxx_atomic_base_impl.88" }
%"struct.std::__1::__cxx_atomic_base_impl.88" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.89", i8, [7 x i8] }>
%"class.std::__1::vector.89" = type { %"class.std::__1::__vector_base.90" }
%"class.std::__1::__vector_base.90" = type { i64*, i64*, %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1076" = type { %"class.std::__1::__compressed_pair.1077" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1085" = type { %"class.std::__1::__compressed_pair.1086" }
%"class.std::__1::__compressed_pair.1086" = type { %"struct.std::__1::__compressed_pair_elem.1087" }
%"struct.std::__1::__compressed_pair_elem.1087" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.860", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.860" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1093" }
%"class.std::__1::unordered_map.1093" = type { %"class.std::__1::__hash_table.1094" }
%"class.std::__1::__hash_table.1094" = type <{ %"class.std::__1::unique_ptr.1095", %"class.std::__1::__compressed_pair.1105", %"class.std::__1::__compressed_pair.1110", %"class.std::__1::__compressed_pair.1113", [4 x i8] }>
%"class.std::__1::unique_ptr.1095" = type { %"class.std::__1::__compressed_pair.1096" }
%"class.std::__1::__compressed_pair.1096" = type { %"struct.std::__1::__compressed_pair_elem.1097", %"struct.std::__1::__compressed_pair_elem.1099" }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"struct.std::__1::__hash_node_base.1098"** }
%"struct.std::__1::__hash_node_base.1098" = type { %"struct.std::__1::__hash_node_base.1098"* }
%"struct.std::__1::__compressed_pair_elem.1099" = type { %"class.std::__1::__bucket_list_deallocator.1100" }
%"class.std::__1::__bucket_list_deallocator.1100" = type { %"class.std::__1::__compressed_pair.1101" }
%"class.std::__1::__compressed_pair.1101" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.1106" }
%"struct.std::__1::__compressed_pair_elem.1106" = type { %"struct.std::__1::__hash_node_base.1098" }
%"class.std::__1::__compressed_pair.1110" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.1113" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.1119" = type { %"struct.std::__1::__atomic_base.1120" }
%"struct.std::__1::__atomic_base.1120" = type { %"struct.std::__1::__cxx_atomic_impl.1121" }
%"struct.std::__1::__cxx_atomic_impl.1121" = type { %"struct.std::__1::__cxx_atomic_base_impl.1122" }
%"struct.std::__1::__cxx_atomic_base_impl.1122" = type { %"class.std::__1::vector.1123"* }
%"class.std::__1::vector.1123" = type { %"class.std::__1::__vector_base.1124" }
%"class.std::__1::__vector_base.1124" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1125" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1125" = type { %"struct.std::__1::__compressed_pair_elem.1126" }
%"struct.std::__1::__compressed_pair_elem.1126" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i32 }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.32" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.100" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"struct.std::__1::pair.102"*, %"struct.std::__1::pair.102"*, %"class.std::__1::__compressed_pair.103" }
%"struct.std::__1::pair.102" = type { i32, i64 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::pair.102"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.108" }
%"class.std::__1::unordered_map.108" = type { %"class.std::__1::__hash_table.109" }
%"class.std::__1::__hash_table.109" = type <{ %"class.std::__1::unique_ptr.110", %"class.std::__1::__compressed_pair.120", %"class.std::__1::__compressed_pair.125", %"class.std::__1::__compressed_pair.130", [4 x i8] }>
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112", %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"struct.std::__1::__hash_node_base.113"** }
%"struct.std::__1::__hash_node_base.113" = type { %"struct.std::__1::__hash_node_base.113"* }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.std::__1::__bucket_list_deallocator.115" }
%"class.std::__1::__bucket_list_deallocator.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"struct.std::__1::__hash_node_base.113" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.149", %"struct.std::__1::atomic.153", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.153" = type { %"struct.std::__1::__atomic_base.154" }
%"struct.std::__1::__atomic_base.154" = type { %"struct.std::__1::__cxx_atomic_impl.155" }
%"struct.std::__1::__cxx_atomic_impl.155" = type { %"struct.std::__1::__cxx_atomic_base_impl.156" }
%"struct.std::__1::__cxx_atomic_base_impl.156" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__cxx_atomic_impl.160" }
%"struct.std::__1::__cxx_atomic_impl.160" = type { %"struct.std::__1::__cxx_atomic_base_impl.161" }
%"struct.std::__1::__cxx_atomic_base_impl.161" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.162" = type { %"class.std::__1::__vector_base.163" }
%"class.std::__1::__vector_base.163" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.164" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.v8::internal::GCTracer"* }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.217", %"class.std::__1::unique_ptr.223", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.277", %"class.std::__1::vector.277", %"class.std::__1::vector.277", %"class.std::__1::vector.284", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.178", %"class.std::__1::vector.179", %"class.std::__1::vector.186", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.178" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.181" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.186" = type { %"class.std::__1::__vector_base.187" }
%"class.std::__1::__vector_base.187" = type { %"class.std::__1::unique_ptr.188"*, %"class.std::__1::unique_ptr.188"*, %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::unique_ptr.188" = type opaque
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.std::__1::unique_ptr.188"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.194", %"class.v8::internal::Worklist.196", %"class.v8::internal::Worklist.196", %"class.v8::internal::Worklist.196", %"class.v8::internal::Worklist.198", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.202", %"class.v8::internal::Worklist.204", %"class.v8::internal::Worklist.206", %"class.v8::internal::Worklist.208" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.194" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.196" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.198" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.200" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.202" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.204" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.206" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.208" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.210", i8, i64 }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.226" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.178"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.226" = type { %"class.std::__1::__hash_table.227" }
%"class.std::__1::__hash_table.227" = type <{ %"class.std::__1::unique_ptr.228", %"class.std::__1::__compressed_pair.238", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.246", [4 x i8] }>
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230", %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.std::__1::__hash_node_base.231"** }
%"struct.std::__1::__hash_node_base.231" = type { %"struct.std::__1::__hash_node_base.231"* }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.std::__1::__bucket_list_deallocator.233" }
%"class.std::__1::__bucket_list_deallocator.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"struct.std::__1::__hash_node_base.231" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.253" }
%"class.std::__1::unordered_map.253" = type { %"class.std::__1::__hash_table.254" }
%"class.std::__1::__hash_table.254" = type <{ %"class.std::__1::unique_ptr.255", %"class.std::__1::__compressed_pair.265", %"class.std::__1::__compressed_pair.270", %"class.std::__1::__compressed_pair.273", [4 x i8] }>
%"class.std::__1::unique_ptr.255" = type { %"class.std::__1::__compressed_pair.256" }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257", %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"struct.std::__1::__hash_node_base.258"** }
%"struct.std::__1::__hash_node_base.258" = type { %"struct.std::__1::__hash_node_base.258"* }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.std::__1::__bucket_list_deallocator.260" }
%"class.std::__1::__bucket_list_deallocator.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"struct.std::__1::__hash_node_base.258" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.277" = type { %"class.std::__1::__vector_base.278" }
%"class.std::__1::__vector_base.278" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.279" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.284" = type { %"class.std::__1::__vector_base.285" }
%"class.std::__1::__vector_base.285" = type { %"struct.std::__1::pair.286"*, %"struct.std::__1::pair.286"*, %"class.std::__1::__compressed_pair.287" }
%"struct.std::__1::pair.286" = type opaque
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"struct.std::__1::pair.286"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.292", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.277"], [3 x %"class.std::__1::vector.277"], i8, %"struct.std::__1::atomic.149", [6 x i8], %"class.std::__1::vector.277", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.302"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.277", %"class.std::__1::vector.277", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.302" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.311" = type { %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.317" = type { %"class.std::__1::__compressed_pair.318" }
%"class.std::__1::__compressed_pair.318" = type { %"struct.std::__1::__compressed_pair_elem.319" }
%"struct.std::__1::__compressed_pair_elem.319" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.327", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.320"], %"class.std::__1::unique_ptr.292" }
%"class.std::__1::vector.320" = type { %"class.std::__1::__vector_base.321" }
%"class.std::__1::__vector_base.321" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.356" = type { %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.359", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.363", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.368" }
%"struct.std::__1::atomic.359" = type { %"struct.std::__1::__atomic_base.360" }
%"struct.std::__1::__atomic_base.360" = type { %"struct.std::__1::__cxx_atomic_impl.361" }
%"struct.std::__1::__cxx_atomic_impl.361" = type { %"struct.std::__1::__cxx_atomic_base_impl.362" }
%"struct.std::__1::__cxx_atomic_base_impl.362" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.363" = type { %"struct.std::__1::__atomic_base.364" }
%"struct.std::__1::__atomic_base.364" = type { %"struct.std::__1::__cxx_atomic_impl.365" }
%"struct.std::__1::__cxx_atomic_impl.365" = type { %"struct.std::__1::__cxx_atomic_base_impl.366" }
%"struct.std::__1::__cxx_atomic_base_impl.366" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.368" = type { %"class.std::__1::__hash_table.369" }
%"class.std::__1::__hash_table.369" = type <{ %"class.std::__1::unique_ptr.370", %"class.std::__1::__compressed_pair.380", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.388", [4 x i8] }>
%"class.std::__1::unique_ptr.370" = type { %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372", %"struct.std::__1::__compressed_pair_elem.374" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"struct.std::__1::__hash_node_base.373"** }
%"struct.std::__1::__hash_node_base.373" = type { %"struct.std::__1::__hash_node_base.373"* }
%"struct.std::__1::__compressed_pair_elem.374" = type { %"class.std::__1::__bucket_list_deallocator.375" }
%"class.std::__1::__bucket_list_deallocator.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"struct.std::__1::__hash_node_base.373" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.395" = type { %"class.std::__1::__compressed_pair.396" }
%"class.std::__1::__compressed_pair.396" = type { %"struct.std::__1::__compressed_pair_elem.397" }
%"struct.std::__1::__compressed_pair_elem.397" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.292", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.149", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.398", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.398" = type { %"class.std::__1::__hash_table.399" }
%"class.std::__1::__hash_table.399" = type <{ %"class.std::__1::unique_ptr.400", %"class.std::__1::__compressed_pair.410", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.418", [4 x i8] }>
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402", %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"struct.std::__1::__hash_node_base.403"** }
%"struct.std::__1::__hash_node_base.403" = type { %"struct.std::__1::__hash_node_base.403"* }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"class.std::__1::__bucket_list_deallocator.405" }
%"class.std::__1::__bucket_list_deallocator.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"struct.std::__1::__hash_node_base.403" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.431" = type { %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.433" }
%"struct.std::__1::__compressed_pair_elem.433" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.434" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.434" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::unique_ptr.441" = type { %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.447" = type { %"class.std::__1::__compressed_pair.448" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.449" }
%"struct.std::__1::__compressed_pair_elem.449" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.453" = type { %"class.std::__1::__compressed_pair.454" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.459" = type { %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.465" = type { %"class.std::__1::__compressed_pair.466" }
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.471" = type { %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.477" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.496", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.478", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.496" = type { %"struct.std::__1::__atomic_base.497" }
%"struct.std::__1::__atomic_base.497" = type { %"struct.std::__1::__cxx_atomic_impl.498" }
%"struct.std::__1::__cxx_atomic_impl.498" = type { %"struct.std::__1::__cxx_atomic_base_impl.499" }
%"struct.std::__1::__cxx_atomic_base_impl.499" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.500" = type { %"class.std::__1::__hash_table.501" }
%"class.std::__1::__hash_table.501" = type <{ %"class.std::__1::unique_ptr.502", %"class.std::__1::__compressed_pair.512", %"class.std::__1::__compressed_pair.517", %"class.std::__1::__compressed_pair.520", [4 x i8] }>
%"class.std::__1::unique_ptr.502" = type { %"class.std::__1::__compressed_pair.503" }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.504", %"struct.std::__1::__compressed_pair_elem.506" }
%"struct.std::__1::__compressed_pair_elem.504" = type { %"struct.std::__1::__hash_node_base.505"** }
%"struct.std::__1::__hash_node_base.505" = type { %"struct.std::__1::__hash_node_base.505"* }
%"struct.std::__1::__compressed_pair_elem.506" = type { %"class.std::__1::__bucket_list_deallocator.507" }
%"class.std::__1::__bucket_list_deallocator.507" = type { %"class.std::__1::__compressed_pair.508" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.513" }
%"struct.std::__1::__compressed_pair_elem.513" = type { %"struct.std::__1::__hash_node_base.505" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.526" = type { %"class.std::__1::__compressed_pair.527" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.538", %"class.std::__1::vector.538" }
%"class.std::__1::unique_ptr.545" = type { %"class.std::__1::__compressed_pair.546" }
%"class.std::__1::__compressed_pair.546" = type { %"struct.std::__1::__compressed_pair_elem.547" }
%"struct.std::__1::__compressed_pair_elem.547" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.std::__1::unordered_set.327" = type { %"class.std::__1::__hash_table.328" }
%"class.std::__1::__hash_table.328" = type <{ %"class.std::__1::unique_ptr.329", %"class.std::__1::__compressed_pair.339", %"class.std::__1::__compressed_pair.344", %"class.std::__1::__compressed_pair.348", [4 x i8] }>
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331", %"struct.std::__1::__compressed_pair_elem.333" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"struct.std::__1::__hash_node_base.332"** }
%"struct.std::__1::__hash_node_base.332" = type { %"struct.std::__1::__hash_node_base.332"* }
%"struct.std::__1::__compressed_pair_elem.333" = type { %"class.std::__1::__bucket_list_deallocator.334" }
%"class.std::__1::__bucket_list_deallocator.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"struct.std::__1::__hash_node_base.332" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.577" = type { %"class.std::__1::__hash_table.578" }
%"class.std::__1::__hash_table.578" = type <{ %"class.std::__1::unique_ptr.579", %"class.std::__1::__compressed_pair.589", %"class.std::__1::__compressed_pair.594", %"class.std::__1::__compressed_pair.597", [4 x i8] }>
%"class.std::__1::unique_ptr.579" = type { %"class.std::__1::__compressed_pair.580" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581", %"struct.std::__1::__compressed_pair_elem.583" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"struct.std::__1::__hash_node_base.582"** }
%"struct.std::__1::__hash_node_base.582" = type { %"struct.std::__1::__hash_node_base.582"* }
%"struct.std::__1::__compressed_pair_elem.583" = type { %"class.std::__1::__bucket_list_deallocator.584" }
%"class.std::__1::__bucket_list_deallocator.584" = type { %"class.std::__1::__compressed_pair.585" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.589" = type { %"struct.std::__1::__compressed_pair_elem.590" }
%"struct.std::__1::__compressed_pair_elem.590" = type { %"struct.std::__1::__hash_node_base.582" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.551" = type { %"class.std::__1::__hash_table.552" }
%"class.std::__1::__hash_table.552" = type <{ %"class.std::__1::unique_ptr.553", %"class.std::__1::__compressed_pair.563", %"class.std::__1::__compressed_pair.568", %"class.std::__1::__compressed_pair.571", [4 x i8] }>
%"class.std::__1::unique_ptr.553" = type { %"class.std::__1::__compressed_pair.554" }
%"class.std::__1::__compressed_pair.554" = type { %"struct.std::__1::__compressed_pair_elem.555", %"struct.std::__1::__compressed_pair_elem.557" }
%"struct.std::__1::__compressed_pair_elem.555" = type { %"struct.std::__1::__hash_node_base.556"** }
%"struct.std::__1::__hash_node_base.556" = type { %"struct.std::__1::__hash_node_base.556"* }
%"struct.std::__1::__compressed_pair_elem.557" = type { %"class.std::__1::__bucket_list_deallocator.558" }
%"class.std::__1::__bucket_list_deallocator.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.564" }
%"struct.std::__1::__compressed_pair_elem.564" = type { %"struct.std::__1::__hash_node_base.556" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.601" = type { %"class.std::__1::__hash_table.602" }
%"class.std::__1::__hash_table.602" = type <{ %"class.std::__1::unique_ptr.603", %"class.std::__1::__compressed_pair.613", %"class.std::__1::__compressed_pair.618", %"class.std::__1::__compressed_pair.623", [4 x i8] }>
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605", %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"struct.std::__1::__hash_node_base.606"** }
%"struct.std::__1::__hash_node_base.606" = type { %"struct.std::__1::__hash_node_base.606"* }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"class.std::__1::__bucket_list_deallocator.608" }
%"class.std::__1::__bucket_list_deallocator.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.614" }
%"struct.std::__1::__compressed_pair_elem.614" = type { %"struct.std::__1::__hash_node_base.606" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.629" = type { %"class.std::__1::__vector_base.630" }
%"class.std::__1::__vector_base.630" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.631" }
%"class.std::__1::__compressed_pair.631" = type { %"struct.std::__1::__compressed_pair_elem.632" }
%"struct.std::__1::__compressed_pair_elem.632" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.636" = type { %"class.std::__1::__compressed_pair.637" }
%"class.std::__1::__compressed_pair.637" = type { %"struct.std::__1::__compressed_pair_elem.638" }
%"struct.std::__1::__compressed_pair_elem.638" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::GCTracer::Event" = type { i32, i32, i8*, double, double, i8, i64, i64, i64, i64, i64, i64, i64, i64, i64, double, [124 x double], [10 x %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"] }
%"struct.v8::internal::GCTracer::IncrementalMarkingInfos" = type <{ double, double, i32, [4 x i8] }>
%"class.v8::base::RingBuffer" = type { [10 x %"struct.std::__1::pair.642"], i32, i32 }
%"struct.std::__1::pair.642" = type { i64, double }
%"class.v8::base::RingBuffer.643" = type { [10 x double], i32, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.v8::internal::GCTracer::BackgroundCounter" = type { double }
%"class.v8::internal::PagedSpaceIterator" = type <{ %"class.v8::internal::Heap"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1151" = type { %"class.std::__1::__compressed_pair.1152" }
%"class.std::__1::__compressed_pair.1152" = type { %"struct.std::__1::__compressed_pair_elem.1153" }
%"struct.std::__1::__compressed_pair_elem.1153" = type { %"class.v8::ConvertableToTraceFormat"* }
%"class.v8::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.v8::TracingController" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_iostream" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@_ZN2v88internal16FLAG_predictableE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [21 x i8] c"V8.GC_MC_INCREMENTAL\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"V8.GC_MC_INCREMENTAL_FINALIZE\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"V8.GC_MC_INCREMENTAL_FINALIZE_BODY\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_INCREMENTAL_START\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"V8.GC_MC_INCREMENTAL_SWEEPING\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"V8.GC_HEAP_EPILOGUE\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"V8.GC_HEAP_EPILOGUE_SAFEPOINT\00", align 1
@.str.14 = private unnamed_addr constant [29 x i8] c"V8.GC_HEAP_EXTERNAL_EPILOGUE\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"V8.GC_HEAP_EXTERNAL_PROLOGUE\00", align 1
@.str.16 = private unnamed_addr constant [40 x i8] c"V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"V8.GC_HEAP_PROLOGUE\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"V8.GC_HEAP_PROLOGUE_SAFEPOINT\00", align 1
@.str.19 = private unnamed_addr constant [21 x i8] c"V8.GC_MARK_COMPACTOR\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"V8.GC_MC_CLEAR\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"V8.GC_MC_EPILOGUE\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"V8.GC_MC_EVACUATE\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"V8.GC_MC_FINISH\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"V8.GC_MC_MARK\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"V8.GC_MC_PROLOGUE\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"V8.GC_MC_SWEEP\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"V8.GC_MC_CLEAR_DEPENDENT_CODE\00", align 1
@.str.28 = private unnamed_addr constant [34 x i8] c"V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"V8.GC_MC_CLEAR_MAPS\00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"V8.GC_MC_CLEAR_SLOTS_BUFFER\00", align 1
@.str.32 = private unnamed_addr constant [28 x i8] c"V8.GC_MC_CLEAR_STRING_TABLE\00", align 1
@.str.33 = private unnamed_addr constant [32 x i8] c"V8.GC_MC_CLEAR_WEAK_COLLECTIONS\00", align 1
@.str.34 = private unnamed_addr constant [26 x i8] c"V8.GC_MC_CLEAR_WEAK_LISTS\00", align 1
@.str.35 = private unnamed_addr constant [31 x i8] c"V8.GC_MC_CLEAR_WEAK_REFERENCES\00", align 1
@.str.36 = private unnamed_addr constant [38 x i8] c"V8.GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS\00", align 1
@.str.37 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_COMPLETE_SWEEPING\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"V8.GC_MC_EVACUATE_CANDIDATES\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_EVACUATE_CLEAN_UP\00", align 1
@.str.40 = private unnamed_addr constant [23 x i8] c"V8.GC_MC_EVACUATE_COPY\00", align 1
@.str.41 = private unnamed_addr constant [32 x i8] c"V8.GC_MC_EVACUATE_COPY_PARALLEL\00", align 1
@.str.42 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_EVACUATE_EPILOGUE\00", align 1
@.str.43 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_EVACUATE_PROLOGUE\00", align 1
@.str.44 = private unnamed_addr constant [28 x i8] c"V8.GC_MC_EVACUATE_REBALANCE\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"V8.GC_MC_EVACUATE_UPDATE_POINTERS\00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"V8.GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL\00", align 1
@.str.47 = private unnamed_addr constant [45 x i8] c"V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN\00", align 1
@.str.48 = private unnamed_addr constant [47 x i8] c"V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS\00", align 1
@.str.49 = private unnamed_addr constant [39 x i8] c"V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK\00", align 1
@.str.50 = private unnamed_addr constant [36 x i8] c"V8.GC_MC_FINISH_SWEEP_ARRAY_BUFFERS\00", align 1
@.str.51 = private unnamed_addr constant [32 x i8] c"V8.GC_MC_MARK_EMBEDDER_PROLOGUE\00", align 1
@.str.52 = private unnamed_addr constant [31 x i8] c"V8.GC_MC_MARK_EMBEDDER_TRACING\00", align 1
@.str.53 = private unnamed_addr constant [39 x i8] c"V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE\00", align 1
@.str.54 = private unnamed_addr constant [33 x i8] c"V8.GC_MC_MARK_FINISH_INCREMENTAL\00", align 1
@.str.55 = private unnamed_addr constant [19 x i8] c"V8.GC_MC_MARK_MAIN\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"V8.GC_MC_MARK_ROOTS\00", align 1
@.str.57 = private unnamed_addr constant [27 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE\00", align 1
@.str.58 = private unnamed_addr constant [37 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON\00", align 1
@.str.59 = private unnamed_addr constant [45 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING\00", align 1
@.str.60 = private unnamed_addr constant [44 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_LINEAR\00", align 1
@.str.61 = private unnamed_addr constant [40 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES\00", align 1
@.str.62 = private unnamed_addr constant [38 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS\00", align 1
@.str.63 = private unnamed_addr constant [35 x i8] c"V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY\00", align 1
@.str.64 = private unnamed_addr constant [20 x i8] c"V8.GC_MC_SWEEP_CODE\00", align 1
@.str.65 = private unnamed_addr constant [19 x i8] c"V8.GC_MC_SWEEP_MAP\00", align 1
@.str.66 = private unnamed_addr constant [19 x i8] c"V8.GC_MC_SWEEP_OLD\00", align 1
@.str.67 = private unnamed_addr constant [27 x i8] c"V8.GC_MINOR_MARK_COMPACTOR\00", align 1
@.str.68 = private unnamed_addr constant [15 x i8] c"V8.GC_MINOR_MC\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"V8.GC_MINOR_MC_CLEAR\00", align 1
@.str.70 = private unnamed_addr constant [34 x i8] c"V8.GC_MINOR_MC_CLEAR_STRING_TABLE\00", align 1
@.str.71 = private unnamed_addr constant [32 x i8] c"V8.GC_MINOR_MC_CLEAR_WEAK_LISTS\00", align 1
@.str.72 = private unnamed_addr constant [44 x i8] c"V8.GC_MINOR_MC_COMPLETE_SWEEP_ARRAY_BUFFERS\00", align 1
@.str.73 = private unnamed_addr constant [24 x i8] c"V8.GC_MINOR_MC_EVACUATE\00", align 1
@.str.74 = private unnamed_addr constant [33 x i8] c"V8.GC_MINOR_MC_EVACUATE_CLEAN_UP\00", align 1
@.str.75 = private unnamed_addr constant [29 x i8] c"V8.GC_MINOR_MC_EVACUATE_COPY\00", align 1
@.str.76 = private unnamed_addr constant [38 x i8] c"V8.GC_MINOR_MC_EVACUATE_COPY_PARALLEL\00", align 1
@.str.77 = private unnamed_addr constant [33 x i8] c"V8.GC_MINOR_MC_EVACUATE_EPILOGUE\00", align 1
@.str.78 = private unnamed_addr constant [33 x i8] c"V8.GC_MINOR_MC_EVACUATE_PROLOGUE\00", align 1
@.str.79 = private unnamed_addr constant [34 x i8] c"V8.GC_MINOR_MC_EVACUATE_REBALANCE\00", align 1
@.str.80 = private unnamed_addr constant [40 x i8] c"V8.GC_MINOR_MC_EVACUATE_UPDATE_POINTERS\00", align 1
@.str.81 = private unnamed_addr constant [49 x i8] c"V8.GC_MINOR_MC_EVACUATE_UPDATE_POINTERS_PARALLEL\00", align 1
@.str.82 = private unnamed_addr constant [46 x i8] c"V8.GC_MINOR_MC_EVACUATE_UPDATE_POINTERS_SLOTS\00", align 1
@.str.83 = private unnamed_addr constant [53 x i8] c"V8.GC_MINOR_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS\00", align 1
@.str.84 = private unnamed_addr constant [45 x i8] c"V8.GC_MINOR_MC_EVACUATE_UPDATE_POINTERS_WEAK\00", align 1
@.str.85 = private unnamed_addr constant [20 x i8] c"V8.GC_MINOR_MC_MARK\00", align 1
@.str.86 = private unnamed_addr constant [35 x i8] c"V8.GC_MINOR_MC_MARK_GLOBAL_HANDLES\00", align 1
@.str.87 = private unnamed_addr constant [29 x i8] c"V8.GC_MINOR_MC_MARK_PARALLEL\00", align 1
@.str.88 = private unnamed_addr constant [25 x i8] c"V8.GC_MINOR_MC_MARK_SEED\00", align 1
@.str.89 = private unnamed_addr constant [26 x i8] c"V8.GC_MINOR_MC_MARK_ROOTS\00", align 1
@.str.90 = private unnamed_addr constant [25 x i8] c"V8.GC_MINOR_MC_MARK_WEAK\00", align 1
@.str.91 = private unnamed_addr constant [29 x i8] c"V8.GC_MINOR_MC_MARKING_DEQUE\00", align 1
@.str.92 = private unnamed_addr constant [30 x i8] c"V8.GC_MINOR_MC_RESET_LIVENESS\00", align 1
@.str.93 = private unnamed_addr constant [24 x i8] c"V8.GC_MINOR_MC_SWEEPING\00", align 1
@.str.94 = private unnamed_addr constant [16 x i8] c"V8.GC_SCAVENGER\00", align 1
@.str.95 = private unnamed_addr constant [45 x i8] c"V8.GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS\00", align 1
@.str.96 = private unnamed_addr constant [29 x i8] c"V8.GC_SCAVENGER_FAST_PROMOTE\00", align 1
@.str.97 = private unnamed_addr constant [36 x i8] c"V8.GC_SCAVENGER_FREE_REMEMBERED_SET\00", align 1
@.str.98 = private unnamed_addr constant [25 x i8] c"V8.GC_SCAVENGER_SCAVENGE\00", align 1
@.str.99 = private unnamed_addr constant [54 x i8] c"V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY\00", align 1
@.str.100 = private unnamed_addr constant [53 x i8] c"V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS\00", align 1
@.str.101 = private unnamed_addr constant [34 x i8] c"V8.GC_SCAVENGER_SCAVENGE_PARALLEL\00", align 1
@.str.102 = private unnamed_addr constant [31 x i8] c"V8.GC_SCAVENGER_SCAVENGE_ROOTS\00", align 1
@.str.103 = private unnamed_addr constant [37 x i8] c"V8.GC_SCAVENGER_SCAVENGE_STACK_ROOTS\00", align 1
@.str.104 = private unnamed_addr constant [37 x i8] c"V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS\00", align 1
@.str.105 = private unnamed_addr constant [30 x i8] c"V8.GC_SCAVENGER_SCAVENGE_WEAK\00", align 1
@.str.106 = private unnamed_addr constant [34 x i8] c"V8.GC_SCAVENGER_SCAVENGE_FINALIZE\00", align 1
@.str.107 = private unnamed_addr constant [36 x i8] c"V8.GC_SCAVENGER_SWEEP_ARRAY_BUFFERS\00", align 1
@.str.108 = private unnamed_addr constant [24 x i8] c"V8.GC_TIME_TO_SAFEPOINT\00", align 1
@.str.109 = private unnamed_addr constant [15 x i8] c"V8.GC_UNMAPPER\00", align 1
@.str.110 = private unnamed_addr constant [42 x i8] c"V8.GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"V8.GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP\00", align 1
@.str.112 = private unnamed_addr constant [28 x i8] c"V8.GC_BACKGROUND_COLLECTION\00", align 1
@.str.113 = private unnamed_addr constant [26 x i8] c"V8.GC_BACKGROUND_UNMAPPER\00", align 1
@.str.114 = private unnamed_addr constant [24 x i8] c"V8.GC_BACKGROUND_UNPARK\00", align 1
@.str.115 = private unnamed_addr constant [27 x i8] c"V8.GC_BACKGROUND_SAFEPOINT\00", align 1
@.str.116 = private unnamed_addr constant [34 x i8] c"V8.GC_MC_BACKGROUND_EVACUATE_COPY\00", align 1
@.str.117 = private unnamed_addr constant [45 x i8] c"V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS\00", align 1
@.str.118 = private unnamed_addr constant [28 x i8] c"V8.GC_MC_BACKGROUND_MARKING\00", align 1
@.str.119 = private unnamed_addr constant [29 x i8] c"V8.GC_MC_BACKGROUND_SWEEPING\00", align 1
@.str.120 = private unnamed_addr constant [40 x i8] c"V8.GC_MINOR_MC_BACKGROUND_EVACUATE_COPY\00", align 1
@.str.121 = private unnamed_addr constant [51 x i8] c"V8.GC_MINOR_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS\00", align 1
@.str.122 = private unnamed_addr constant [34 x i8] c"V8.GC_MINOR_MC_BACKGROUND_MARKING\00", align 1
@.str.123 = private unnamed_addr constant [45 x i8] c"V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL\00", align 1
@.str.124 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.125 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.126 = private unnamed_addr constant [9 x i8] c"Scavenge\00", align 1
@.str.127 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Mark-sweep\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"mmc\00", align 1
@.str.130 = private unnamed_addr constant [19 x i8] c"Minor Mark-Compact\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.132 = private unnamed_addr constant [6 x i8] c"Start\00", align 1
@.str.133 = private unnamed_addr constant [19 x i8] c"Unknown Event Type\00", align 1
@_ZN2v88internal23FLAG_trace_gc_freelistsE = external local_unnamed_addr global i8, align 1
@.str.134 = private unnamed_addr constant [41 x i8] c"FreeLists statistics before collection:\0A\00", align 1
@_ZN2v88internal21FLAG_trace_gc_verboseE = external local_unnamed_addr global i8, align 1
@.str.135 = private unnamed_addr constant [36 x i8] c"[Finished reentrant %s during %s.]\0A\00", align 1
@_ZN2v88internal30FLAG_trace_gc_ignore_scavengerE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal17FLAG_trace_gc_nvpE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal13FLAG_trace_gcE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal12TracingFlags2gcE = external local_unnamed_addr global %"struct.std::__1::atomic.1135", align 4
@_ZZN2v88internal8GCTracer4StopENS0_16GarbageCollectorEE28trace_event_unique_atomic432 = internal global i64 0, align 8
@.str.136 = private unnamed_addr constant [26 x i8] c"disabled-by-default-v8.gc\00", align 1
@.str.137 = private unnamed_addr constant [17 x i8] c"V8.GC_Heap_Stats\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"stats\00", align 1
@.str.139 = private unnamed_addr constant [48 x i8] c"FreeLists statistics after sweeping completed:\0A\00", align 1
@_ZN2v88internal30FLAG_trace_allocations_originsE = external local_unnamed_addr global i8, align 1
@.str.140 = private unnamed_addr constant [110 x i8] c" (+ %.1f ms in %d steps since start of marking, biggest step %.1f ms, walltime since start of marking %.f ms)\00", align 1
@.str.141 = private unnamed_addr constant [118 x i8] c"[%d:%p] %8.0f ms: %s%s %.1f (%.1f) -> %.1f (%.1f) MB, %.1f / %.1f ms %s (average mu = %.3f, current mu = %.3f) %s %s\0A\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c" (reduce)\00", align 1
@.str.143 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.144 = private unnamed_addr constant [1055 x i8] c"pause=%.1f mutator=%.1f gc=%s reduce_memory=%d time_to_safepoint=%.2f heap.prologue=%.2f heap.epilogue=%.2f heap.epilogue.reduce_new_space=%.2f heap.external.prologue=%.2f heap.external.epilogue=%.2f heap.external_weak_global_handles=%.2f fast_promote=%.2f complete.sweep_array_buffers=%.2f scavenge=%.2f scavenge.free_remembered_set=%.2f scavenge.roots=%.2f scavenge.weak=%.2f scavenge.weak_global_handles.identify=%.2f scavenge.weak_global_handles.process=%.2f scavenge.parallel=%.2f scavenge.update_refs=%.2f scavenge.sweep_array_buffers=%.2f background.scavenge.parallel=%.2f background.unmapper=%.2f unmapper=%.2f incremental.steps_count=%d incremental.steps_took=%.1f scavenge_throughput=%.f total_size_before=%zu total_size_after=%zu holes_size_before=%zu holes_size_after=%zu allocated=%zu promoted=%zu semi_space_copied=%zu nodes_died_in_new=%d nodes_copied_in_new=%d nodes_promoted=%d promotion_ratio=%.1f%% average_survival_ratio=%.1f%% promotion_rate=%.1f%% semi_space_copy_rate=%.1f%% new_space_allocation_throughput=%.1f unmapper_chunks=%d\0A\00", align 1
@.str.145 = private unnamed_addr constant [563 x i8] c"pause=%.1f mutator=%.1f gc=%s reduce_memory=%d minor_mc=%.2f finish_sweeping=%.2f time_to_safepoint=%.2f mark=%.2f mark.seed=%.2f mark.roots=%.2f mark.weak=%.2f mark.global_handles=%.2f clear=%.2f clear.string_table=%.2f clear.weak_lists=%.2f evacuate=%.2f evacuate.copy=%.2f evacuate.update_pointers=%.2f evacuate.update_pointers.to_new_roots=%.2f evacuate.update_pointers.slots=%.2f background.mark=%.2f background.evacuate.copy=%.2f background.evacuate.update_pointers=%.2f background.unmapper=%.2f unmapper=%.2f update_marking_deque=%.2f reset_liveness=%.2f\0A\00", align 1
@.str.146 = private unnamed_addr constant [2382 x i8] c"pause=%.1f mutator=%.1f gc=%s reduce_memory=%d time_to_safepoint=%.2f heap.prologue=%.2f heap.embedder_tracing_epilogue=%.2f heap.epilogue=%.2f heap.epilogue.reduce_new_space=%.2f heap.external.prologue=%.1f heap.external.epilogue=%.1f heap.external.weak_global_handles=%.1f clear=%1.f clear.dependent_code=%.1f clear.maps=%.1f clear.slots_buffer=%.1f clear.string_table=%.1f clear.weak_collections=%.1f clear.weak_lists=%.1f clear.weak_references=%.1f complete.sweep_array_buffers=%.1f epilogue=%.1f evacuate=%.1f evacuate.candidates=%.1f evacuate.clean_up=%.1f evacuate.copy=%.1f evacuate.prologue=%.1f evacuate.epilogue=%.1f evacuate.rebalance=%.1f evacuate.update_pointers=%.1f evacuate.update_pointers.to_new_roots=%.1f evacuate.update_pointers.slots.main=%.1f evacuate.update_pointers.weak=%.1f finish=%.1f finish.sweep_array_buffers=%.1f mark=%.1f mark.finish_incremental=%.1f mark.roots=%.1f mark.main=%.1f mark.weak_closure=%.1f mark.weak_closure.ephemeron=%.1f mark.weak_closure.ephemeron.marking=%.1f mark.weak_closure.ephemeron.linear=%.1f mark.weak_closure.weak_handles=%.1f mark.weak_closure.weak_roots=%.1f mark.weak_closure.harmony=%.1f mark.embedder_prologue=%.1f mark.embedder_tracing=%.1f prologue=%.1f sweep=%.1f sweep.code=%.1f sweep.map=%.1f sweep.old=%.1f incremental=%.1f incremental.finalize=%.1f incremental.finalize.body=%.1f incremental.finalize.external.prologue=%.1f incremental.finalize.external.epilogue=%.1f incremental.layout_change=%.1f incremental.sweep_array_buffers=%.1f incremental.sweeping=%.1f incremental.embedder_prologue=%.1f incremental.embedder_tracing=%.1f incremental_wrapper_tracing_longest_step=%.1f incremental_finalize_longest_step=%.1f incremental_finalize_steps_count=%d incremental_longest_step=%.1f incremental_steps_count=%d incremental_marking_throughput=%.f incremental_walltime_duration=%.f background.mark=%.1f background.sweep=%.1f background.evacuate.copy=%.1f background.evacuate.update_pointers=%.1f background.unmapper=%.1f unmapper=%.1f total_size_before=%zu total_size_after=%zu holes_size_before=%zu holes_size_after=%zu allocated=%zu promoted=%zu semi_space_copied=%zu nodes_died_in_new=%d nodes_copied_in_new=%d nodes_promoted=%d promotion_ratio=%.1f%% average_survival_ratio=%.1f%% promotion_rate=%.1f%% semi_space_copy_rate=%.1f%% new_space_allocation_throughput=%.1f unmapper_chunks=%d compaction_speed=%.f\0A\00", align 1
@_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1291 = internal global i64 0, align 8
@.str.147 = private unnamed_addr constant [26 x i8] c"V8.GCMarkCompactorSummary\00", align 1
@.str.148 = private unnamed_addr constant [9 x i8] c"duration\00", align 1
@.str.149 = private unnamed_addr constant [20 x i8] c"background_duration\00", align 1
@_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1295 = internal global i64 0, align 8
@.str.150 = private unnamed_addr constant [33 x i8] c"V8.GCMarkCompactorMarkingSummary\00", align 1
@_ZN2v88internal12TracingFlags13runtime_statsE = external local_unnamed_addr global %"struct.std::__1::atomic.1135", align 4
@.str.151 = private unnamed_addr constant [10 x i8] c"Scavenger\00", align 1
@.str.152 = private unnamed_addr constant [13 x i8] c"Mark-Compact\00", align 1
@.str.153 = private unnamed_addr constant [18 x i8] c"Unknown collector\00", align 1
@_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [10 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@switch.table._ZN2v88internal8GCTracer5Scope4NameENS2_7ScopeIdE = private unnamed_addr constant [124 x i8*] [i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.73, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.95, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.97, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.98, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.100, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.105, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.108, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.112, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.115, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.116, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.117, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.118, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.119, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.120, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.121, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.122, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.123, i64 0, i64 0)], align 8
@switch.table._ZN2v88internal8GCTracer4StopENS0_16GarbageCollectorE = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.151, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.152, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.130, i64 0, i64 0)], align 8
@switch.table._ZNK2v88internal8GCTracer5PrintEv = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.130, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.132, i64 0, i64 0)], align 8

@_ZN2v88internal8GCTracer5ScopeC1EPS1_NS2_7ScopeIdENS0_10ThreadKindE = hidden unnamed_addr alias void (%"class.v8::internal::GCTracer::Scope"*, %"class.v8::internal::GCTracer"*, i32, i32), void (%"class.v8::internal::GCTracer::Scope"*, %"class.v8::internal::GCTracer"*, i32, i32)* @_ZN2v88internal8GCTracer5ScopeC2EPS1_NS2_7ScopeIdENS0_10ThreadKindE
@_ZN2v88internal8GCTracer5ScopeD1Ev = hidden unnamed_addr alias void (%"class.v8::internal::GCTracer::Scope"*), void (%"class.v8::internal::GCTracer::Scope"*)* @_ZN2v88internal8GCTracer5ScopeD2Ev
@_ZN2v88internal8GCTracer5EventC1ENS2_4TypeENS0_23GarbageCollectionReasonEPKc = hidden unnamed_addr alias void (%"class.v8::internal::GCTracer::Event"*, i32, i32, i8*), void (%"class.v8::internal::GCTracer::Event"*, i32, i32, i8*)* @_ZN2v88internal8GCTracer5EventC2ENS2_4TypeENS0_23GarbageCollectionReasonEPKc
@_ZN2v88internal8GCTracerC1EPNS0_4HeapE = hidden unnamed_addr alias void (%"class.v8::internal::GCTracer"*, %"class.v8::internal::Heap"*), void (%"class.v8::internal::GCTracer"*, %"class.v8::internal::Heap"*)* @_ZN2v88internal8GCTracerC2EPNS0_4HeapE

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::WorkerThreadRuntimeCallStats"* @_ZN2v88internal8GCTracer32worker_thread_runtime_call_statsEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -41416
  %5 = inttoptr i64 %4 to %"class.v8::internal::Isolate"*
  %6 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %5, i64 0, i32 14, i32 0
  %7 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %7, i64 0, i32 758
  ret %"class.v8::internal::WorkerThreadRuntimeCallStats"* %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2v88internal8GCTracer19RCSCounterFromScopeENS1_5Scope7ScopeIdE(i32 returned) local_unnamed_addr #1 align 2 {
  ret i32 %0
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal8GCTracer31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %8, label %4, !prof !3

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %7 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %6) #7
  br label %12

8:                                                ; preds = %1
  %9 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %10 = sitofp i64 %9 to double
  %11 = fdiv double %10, 1.000000e+03
  br label %12

12:                                               ; preds = %8, %4
  %13 = phi double [ %7, %4 ], [ %11, %8 ]
  ret double %13
}

declare double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @_ZN2v84base9TimeTicks3NowEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2v88internal8GCTracer12CurrentEpochENS1_5Scope7ScopeIdE(%"class.v8::internal::GCTracer"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %7 [
    i32 110, label %3
    i32 67, label %3
    i32 72, label %3
    i32 94, label %3
    i32 123, label %3
    i32 95, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %5, i64 0, i32 141
  br label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %9, i64 0, i32 142
  br label %11

11:                                               ; preds = %7, %3
  %12 = phi i32* [ %6, %3 ], [ %10, %7 ]
  %13 = load i32, i32* %12, align 4
  ret i32 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8GCTracer5Scope15NeedsYoungEpochENS2_7ScopeIdE(i32) local_unnamed_addr #1 align 2 {
  %2 = add i32 %0, -67
  %3 = icmp ult i32 %2, 57
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = zext i32 %2 to i57
  %6 = lshr i57 -72048797542252511, %5
  %7 = and i57 %6, 1
  %8 = icmp ne i57 %7, 0
  ret i1 %8

9:                                                ; preds = %1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer5ScopeC2EPS1_NS2_7ScopeIdENS0_10ThreadKindE(%"class.v8::internal::GCTracer::Scope"*, %"class.v8::internal::GCTracer"*, i32, i32) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 0
  store %"class.v8::internal::GCTracer"* %1, %"class.v8::internal::GCTracer"** %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 2
  store i32 %3, i32* %7, align 4
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 5
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %union.anon.1134* %11 to i8*
  store i8 0, i8* %12, align 8
  %13 = bitcast %"class.v8::internal::RuntimeCallTimer"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 41, i1 false)
  %14 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16, !prof !3

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %1, i64 0, i32 0
  %18 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %17, align 8
  %19 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %18) #7
  br label %24

20:                                               ; preds = %4
  %21 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %22 = sitofp i64 %21 to double
  %23 = fdiv double %22, 1.000000e+03
  br label %24

24:                                               ; preds = %16, %20
  %25 = phi double [ %19, %16 ], [ %23, %20 ]
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 3
  store double %25, double* %26, align 8
  %27 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1135", %"struct.std::__1::atomic.1135"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %59, label %29, !prof !3

29:                                               ; preds = %24
  %30 = load i32, i32* %7, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %41

32:                                               ; preds = %29
  %33 = bitcast %"class.v8::internal::GCTracer::Scope"* %0 to i64**
  %34 = load i64*, i64** %33, align 8
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, -41416
  %37 = inttoptr i64 %36 to %"class.v8::internal::Isolate"*
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %37, i64 0, i32 14, i32 0
  %39 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %39, i64 0, i32 757
  br label %57

41:                                               ; preds = %29
  %42 = bitcast %"class.v8::internal::GCTracer"* %1 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, -41416
  %45 = inttoptr i64 %44 to %"class.v8::internal::Isolate"*
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %45, i64 0, i32 14, i32 0
  %47 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %47, i64 0, i32 758
  %49 = load i8, i8* %10, align 8, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN2v88internal33WorkerThreadRuntimeCallStatsScopeD1Ev(%"class.v8::internal::WorkerThreadRuntimeCallStatsScope"* %52) #7
  store i8 0, i8* %10, align 8
  br label %53

53:                                               ; preds = %41, %51
  %54 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN2v88internal33WorkerThreadRuntimeCallStatsScopeC1EPNS0_28WorkerThreadRuntimeCallStatsE(%"class.v8::internal::WorkerThreadRuntimeCallStatsScope"* %54, %"class.v8::internal::WorkerThreadRuntimeCallStats"* %48) #7
  store i8 1, i8* %10, align 8
  %55 = getelementptr inbounds %"class.v8::internal::WorkerThreadRuntimeCallStatsScope", %"class.v8::internal::WorkerThreadRuntimeCallStatsScope"* %54, i64 0, i32 0
  %56 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %55, align 8
  br label %57

57:                                               ; preds = %32, %53
  %58 = phi %"class.v8::internal::RuntimeCallStats"* [ %56, %53 ], [ %40, %32 ]
  store %"class.v8::internal::RuntimeCallStats"* %58, %"class.v8::internal::RuntimeCallStats"** %9, align 8
  tail call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %58, %"class.v8::internal::RuntimeCallTimer"* %8, i32 %2) #7
  br label %59

59:                                               ; preds = %57, %24
  ret void
}

declare void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer5ScopeD2Ev(%"class.v8::internal::GCTracer::Scope"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 0
  %3 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5, !prof !3

5:                                                ; preds = %1
  %6 = load %"class.v8::internal::GCTracer"*, %"class.v8::internal::GCTracer"** %2, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %6, i64 0, i32 0
  %8 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %7, align 8
  %9 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %8) #7
  br label %14

10:                                               ; preds = %1
  %11 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %12 = sitofp i64 %11 to double
  %13 = fdiv double %12, 1.000000e+03
  br label %14

14:                                               ; preds = %5, %10
  %15 = phi double [ %9, %5 ], [ %13, %10 ]
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 3
  %17 = load double, double* %16, align 8
  %18 = fsub double %15, %17
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  %22 = load %"class.v8::internal::GCTracer"*, %"class.v8::internal::GCTracer"** %2, align 8
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  br i1 %21, label %25, label %58

25:                                               ; preds = %14
  %26 = icmp ult i32 %24, 10
  br i1 %26, label %27, label %39

27:                                               ; preds = %25
  %28 = sext i32 %24 to i64
  %29 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 9, i64 %28, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 9, i64 %28, i32 0
  %33 = load double, double* %32, align 8
  %34 = fadd double %18, %33
  store double %34, double* %32, align 8
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 9, i64 %28, i32 1
  %36 = load double, double* %35, align 8
  %37 = fcmp olt double %36, %18
  br i1 %37, label %38, label %44

38:                                               ; preds = %27
  store double %18, double* %35, align 8
  br label %44

39:                                               ; preds = %25
  %40 = zext i32 %24 to i64
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 1, i32 16, i64 %40
  %42 = load double, double* %41, align 8
  %43 = fadd double %18, %42
  store double %43, double* %41, align 8
  br label %44

44:                                               ; preds = %27, %38, %39
  %45 = load i32, i32* %23, align 8
  switch i32 %45, label %64 [
    i32 0, label %46
    i32 8, label %46
    i32 5, label %46
  ]

46:                                               ; preds = %44, %44, %44
  %47 = bitcast %"class.v8::internal::GCTracer::Scope"* %0 to i64**
  %48 = load i64*, i64** %47, align 8
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, -41416
  %51 = inttoptr i64 %50 to %"class.v8::internal::Isolate"*
  %52 = tail call %"struct.v8::metrics::LongTaskStats"* @_ZN2v88internal7Isolate23GetCurrentLongTaskStatsEv(%"class.v8::internal::Isolate"* %51) #7
  %53 = fmul double %18, 1.000000e+03
  %54 = fptosi double %53 to i64
  %55 = getelementptr inbounds %"struct.v8::metrics::LongTaskStats", %"struct.v8::metrics::LongTaskStats"* %52, i64 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = add nsw i64 %56, %54
  store i64 %57, i64* %55, align 8
  br label %64

58:                                               ; preds = %14
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %59) #7
  %60 = zext i32 %24 to i64
  %61 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %22, i64 0, i32 34, i64 %60, i32 0
  %62 = load double, double* %61, align 8
  %63 = fadd double %18, %62
  store double %63, double* %61, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %59) #7
  br label %64

64:                                               ; preds = %44, %46, %58
  %65 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 5
  %66 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %65, align 8
  %67 = icmp eq %"class.v8::internal::RuntimeCallStats"* %66, null
  br i1 %67, label %70, label %68, !prof !3

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 4
  tail call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %66, %"class.v8::internal::RuntimeCallTimer"* %69) #7
  br label %70

70:                                               ; preds = %64, %68
  %71 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.v8::internal::GCTracer::Scope", %"class.v8::internal::GCTracer::Scope"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN2v88internal33WorkerThreadRuntimeCallStatsScopeD1Ev(%"class.v8::internal::WorkerThreadRuntimeCallStatsScope"* %75) #7
  br label %76

76:                                               ; preds = %70, %74
  ret void
}

declare %"struct.v8::metrics::LongTaskStats"* @_ZN2v88internal7Isolate23GetCurrentLongTaskStatsEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer24AddScopeSampleBackgroundENS1_5Scope7ScopeIdEd(%"class.v8::internal::GCTracer"*, i32, double) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %4) #7
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 %5, i32 0
  %7 = load double, double* %6, align 8
  %8 = fadd double %7, %2
  store double %8, double* %6, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %4) #7
  ret void
}

declare void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal8GCTracer5Scope4NameENS2_7ScopeIdE(i32) local_unnamed_addr #2 align 2 {
  %2 = icmp ult i32 %0, 124
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.124, i64 0, i64 0)) #13
  unreachable

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [124 x i8*], [124 x i8*]* @switch.table._ZN2v88internal8GCTracer5Scope4NameENS2_7ScopeIdE, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  ret i8* %7
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer5EventC2ENS2_4TypeENS0_23GarbageCollectionReasonEPKc(%"class.v8::internal::GCTracer::Event"*, i32, i32, i8*) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 2
  store i8* %3, i8** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 6
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 0
  %11 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #7
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 1
  %13 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %12 to i8*
  %14 = bitcast double* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 17, i1 false)
  %15 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 80, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #7
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 2
  %17 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false) #7
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 3
  %19 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 20, i1 false) #7
  %20 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 4
  %21 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 20, i1 false) #7
  %22 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 5
  %23 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 20, i1 false) #7
  %24 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 6
  %25 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 20, i1 false) #7
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 7
  %27 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 20, i1 false) #7
  %28 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 8
  %29 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 20, i1 false) #7
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 17, i64 9
  %31 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 20, i1 false) #7
  %32 = getelementptr %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 16, i64 0
  %33 = bitcast double* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 992, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK2v88internal8GCTracer5Event8TypeNameEb(%"class.v8::internal::GCTracer::Event"* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %13 [
    i32 0, label %5
    i32 1, label %7
    i32 2, label %7
    i32 3, label %9
    i32 4, label %11
  ]

5:                                                ; preds = %2
  %6 = select i1 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i64 0, i64 0)
  br label %13

7:                                                ; preds = %2, %2
  %8 = select i1 %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i64 0, i64 0)
  br label %13

9:                                                ; preds = %2
  %10 = select i1 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.130, i64 0, i64 0)
  br label %13

11:                                               ; preds = %2
  %12 = select i1 %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.132, i64 0, i64 0)
  br label %13

13:                                               ; preds = %2, %11, %9, %7, %5
  %14 = phi i8* [ %12, %11 ], [ %10, %9 ], [ %8, %7 ], [ %6, %5 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.133, i64 0, i64 0), %2 ]
  ret i8* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracerC2EPNS0_4HeapE(%"class.v8::internal::GCTracer"*, %"class.v8::internal::Heap"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  store %"class.v8::internal::Heap"* %1, %"class.v8::internal::Heap"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event"* %4, i64 0, i32 0
  store i32 4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 6
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 1
  %9 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #7
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 2
  %11 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #7
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 3
  %13 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #7
  %14 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 4
  %15 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 20, i1 false) #7
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 5
  %17 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false) #7
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6
  %19 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 20, i1 false) #7
  %20 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 7
  %21 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 20, i1 false) #7
  %22 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 8
  %23 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 20, i1 false) #7
  %24 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 9
  %25 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 20, i1 false) #7
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 2
  %27 = bitcast %"class.v8::internal::GCTracer::Event"* %26 to i8*
  %28 = bitcast %"class.v8::internal::GCTracer::Event"* %4 to i8*
  %29 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 29, i1 false)
  %30 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 1092, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 1352, i1 false)
  %31 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 1
  %33 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %32 to i8*
  %34 = bitcast i64* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 68, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 20, i1 false) #7
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 2
  %36 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 20, i1 false) #7
  %37 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 3
  %38 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 20, i1 false) #7
  %39 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 4
  %40 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 20, i1 false) #7
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 5
  %42 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 20, i1 false) #7
  %43 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 6
  %44 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 20, i1 false) #7
  %45 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 7
  %46 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 20, i1 false) #7
  %47 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 8
  %48 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 20, i1 false) #7
  %49 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 9
  %50 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 20, i1 false) #7
  %51 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 10
  %52 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %53 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  %54 = bitcast double* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 76, i1 false)
  %55 = bitcast double* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 16, i1 false)
  store double 1.000000e+00, double* %53, align 8
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 23
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  store i32 0, i32* %57, align 4
  %58 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  store i32 0, i32* %58, align 8
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  %60 = bitcast double* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 1352, i1 false)
  tail call void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"* %59) #7
  %61 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %66, label %63, !prof !3

63:                                               ; preds = %2
  %64 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %65 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %64) #7
  br label %70

66:                                               ; preds = %2
  %67 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %68 = sitofp i64 %67 to double
  %69 = fdiv double %68, 1.000000e+03
  br label %70

70:                                               ; preds = %63, %66
  %71 = phi double [ %65, %63 ], [ %69, %66 ]
  %72 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 4
  store double %71, double* %72, align 8
  %73 = getelementptr %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 0
  %74 = bitcast %"struct.v8::internal::GCTracer::BackgroundCounter"* %73 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 992, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer15ResetForTestingEv(%"class.v8::internal::GCTracer"*) local_unnamed_addr #2 align 2 {
  %2 = alloca [87 x i8], align 1
  %3 = alloca [24 x i8], align 4
  %4 = alloca [24 x i8], align 4
  %5 = alloca [24 x i8], align 4
  %6 = alloca [24 x i8], align 4
  %7 = alloca [24 x i8], align 4
  %8 = alloca [24 x i8], align 4
  %9 = alloca [24 x i8], align 4
  %10 = alloca [24 x i8], align 4
  %11 = alloca [24 x i8], align 4
  %12 = getelementptr inbounds [87 x i8], [87 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 87, i8* nonnull %12)
  %13 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13)
  %14 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14)
  %15 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15)
  %16 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16)
  %17 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17)
  %18 = getelementptr inbounds [24 x i8], [24 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18)
  %19 = getelementptr inbounds [24 x i8], [24 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19)
  %20 = getelementptr inbounds [24 x i8], [24 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20)
  %21 = getelementptr inbounds [24 x i8], [24 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21)
  %22 = getelementptr inbounds [87 x i8], [87 x i8]* %2, i64 0, i64 7
  call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 80, i1 false)
  %23 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 20, i1 false)
  %24 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 20, i1 false)
  %25 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 20, i1 false)
  %26 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 20, i1 false)
  %27 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 20, i1 false)
  %28 = getelementptr inbounds [24 x i8], [24 x i8]* %8, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %28, i8 0, i64 20, i1 false)
  %29 = getelementptr inbounds [24 x i8], [24 x i8]* %9, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 20, i1 false)
  %30 = getelementptr inbounds [24 x i8], [24 x i8]* %10, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 20, i1 false)
  %31 = getelementptr inbounds [24 x i8], [24 x i8]* %11, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 20, i1 false)
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1
  %33 = bitcast %"class.v8::internal::GCTracer::Event"* %32 to i8*
  %34 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  store i32 4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 1
  store i32 21, i32* %35, align 4
  %36 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 2
  %37 = bitcast %"class.v8::internal::GCTracer"* %0 to i8*
  %38 = getelementptr inbounds i8, i8* %37, i64 41
  %39 = bitcast i8** %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 25, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* nonnull align 1 %12, i64 87, i1 false)
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 3, i64 0
  %42 = bitcast [124 x double]* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 1012, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* nonnull align 4 %13, i64 24, i1 false)
  %43 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 1, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* nonnull align 4 %14, i64 24, i1 false)
  %44 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 2, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* nonnull align 4 %15, i64 24, i1 false)
  %45 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 3, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* nonnull align 4 %16, i64 24, i1 false)
  %46 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 4, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* nonnull align 4 %17, i64 24, i1 false)
  %47 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 5, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* nonnull align 4 %18, i64 24, i1 false)
  %48 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* nonnull align 4 %19, i64 24, i1 false)
  %49 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 7, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %20, i64 24, i1 false)
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 8, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %21, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 87, i8* nonnull %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21)
  %51 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %57, label %53, !prof !3

53:                                               ; preds = %1
  %54 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %55 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %54, align 8
  %56 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %55) #7
  br label %61

57:                                               ; preds = %1
  %58 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %59 = sitofp i64 %58 to double
  %60 = fdiv double %59, 1.000000e+03
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi double [ %56, %53 ], [ %60, %57 ]
  %63 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 4
  store double %62, double* %63, align 8
  %64 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 2
  %65 = bitcast %"class.v8::internal::GCTracer::Event"* %64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %33, i64 1352, i1 false)
  %66 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %67 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 0
  %68 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 20, i1 false) #7
  %69 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 1
  %70 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 20, i1 false) #7
  %71 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 2
  %72 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %71 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 20, i1 false) #7
  %73 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 3
  %74 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 20, i1 false) #7
  %75 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 4
  %76 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 20, i1 false) #7
  %77 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 5
  %78 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 20, i1 false) #7
  %79 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 6
  %80 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 20, i1 false) #7
  %81 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 7
  %82 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 20, i1 false) #7
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 8
  %84 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 20, i1 false) #7
  %85 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 9
  %86 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 20, i1 false) #7
  %87 = bitcast i64* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 16, i1 false) #7
  %88 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 10
  %89 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %90 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 18
  store double 0.000000e+00, double* %90, align 8
  %91 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 2
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 1
  store i32 0, i32* %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 2
  store i32 0, i32* %93, align 4
  %94 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 1
  store i32 0, i32* %94, align 8
  %95 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 2
  store i32 0, i32* %95, align 4
  %96 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 1
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 2
  store i32 0, i32* %97, align 4
  %98 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 1
  store i32 0, i32* %98, align 8
  %99 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 2
  store i32 0, i32* %99, align 4
  %100 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 1
  store i32 0, i32* %100, align 8
  %101 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  store i32 0, i32* %101, align 4
  %102 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  store i32 0, i32* %102, align 8
  %103 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 2
  store i32 0, i32* %103, align 4
  %104 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 1
  store i32 0, i32* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 2
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 1
  store i32 0, i32* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  store i32 0, i32* %107, align 4
  %108 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  store i32 0, i32* %108, align 8
  %109 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 19
  store i32 0, i32* %109, align 8
  %110 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %111 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  %112 = bitcast double* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 24, i1 false)
  %113 = bitcast double* %89 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false)
  %114 = bitcast double* %110 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 16, i1 false)
  %115 = bitcast double* %111 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %115, align 8
  %116 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %116) #7
  %117 = getelementptr %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 0
  %118 = bitcast %"struct.v8::internal::GCTracer::BackgroundCounter"* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 992, i1 false)
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %116) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer31ResetIncrementalMarkingCountersEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 0
  %4 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 20, i1 false) #7
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 1
  %6 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 20, i1 false) #7
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 2
  %8 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false) #7
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 3
  %10 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 20, i1 false) #7
  %11 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 4
  %12 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 20, i1 false) #7
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 5
  %14 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 20, i1 false) #7
  %15 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 6
  %16 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 20, i1 false) #7
  %17 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 7
  %18 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 20, i1 false) #7
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 8
  %20 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 20, i1 false) #7
  %21 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 9
  %22 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 20, i1 false) #7
  %23 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer29NotifyYoungGenerationHandlingENS0_23YoungGenerationHandlingE(%"class.v8::internal::GCTracer"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to %"class.v8::internal::Isolate"*
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 14, i32 0
  %8 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %8, i64 0, i32 23
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %9, i32 %1) #7
  ret void
}

declare void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer5StartENS0_16GarbageCollectorENS0_23GarbageCollectionReasonEPKc(%"class.v8::internal::GCTracer"* nocapture, i32, i32, i8*) local_unnamed_addr #2 align 2 {
  %5 = alloca [87 x i8], align 1
  %6 = alloca [24 x i8], align 4
  %7 = alloca [24 x i8], align 4
  %8 = alloca [24 x i8], align 4
  %9 = alloca [24 x i8], align 4
  %10 = alloca [24 x i8], align 4
  %11 = alloca [24 x i8], align 4
  %12 = alloca [24 x i8], align 4
  %13 = alloca [24 x i8], align 4
  %14 = alloca [24 x i8], align 4
  %15 = alloca [87 x i8], align 1
  %16 = alloca [24 x i8], align 4
  %17 = alloca [24 x i8], align 4
  %18 = alloca [24 x i8], align 4
  %19 = alloca [24 x i8], align 4
  %20 = alloca [24 x i8], align 4
  %21 = alloca [24 x i8], align 4
  %22 = alloca [24 x i8], align 4
  %23 = alloca [24 x i8], align 4
  %24 = alloca [24 x i8], align 4
  %25 = alloca [87 x i8], align 1
  %26 = alloca [24 x i8], align 4
  %27 = alloca [24 x i8], align 4
  %28 = alloca [24 x i8], align 4
  %29 = alloca [24 x i8], align 4
  %30 = alloca [24 x i8], align 4
  %31 = alloca [24 x i8], align 4
  %32 = alloca [24 x i8], align 4
  %33 = alloca [24 x i8], align 4
  %34 = alloca [24 x i8], align 4
  %35 = alloca [87 x i8], align 1
  %36 = alloca [24 x i8], align 4
  %37 = alloca [24 x i8], align 4
  %38 = alloca [24 x i8], align 4
  %39 = alloca [24 x i8], align 4
  %40 = alloca [24 x i8], align 4
  %41 = alloca [24 x i8], align 4
  %42 = alloca [24 x i8], align 4
  %43 = alloca [24 x i8], align 4
  %44 = alloca [24 x i8], align 4
  %45 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 19
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %45, align 8
  %48 = icmp eq i32 %46, 0
  br i1 %48, label %49, label %194

49:                                               ; preds = %4
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1
  %51 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 2
  %52 = bitcast %"class.v8::internal::GCTracer::Event"* %51 to i8*
  %53 = bitcast %"class.v8::internal::GCTracer::Event"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 1352, i1 false)
  switch i32 %1, label %150 [
    i32 0, label %54
    i32 2, label %64
    i32 1, label %74
  ]

54:                                               ; preds = %49
  %55 = getelementptr inbounds [87 x i8], [87 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 87, i8* nonnull %55)
  %56 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56)
  %57 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57)
  %58 = getelementptr inbounds [24 x i8], [24 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58)
  %59 = getelementptr inbounds [24 x i8], [24 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59)
  %60 = getelementptr inbounds [24 x i8], [24 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %60)
  %61 = getelementptr inbounds [24 x i8], [24 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61)
  %62 = getelementptr inbounds [24 x i8], [24 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62)
  %63 = getelementptr inbounds [24 x i8], [24 x i8]* %13, i64 0, i64 0
  br label %100

64:                                               ; preds = %49
  %65 = getelementptr inbounds [87 x i8], [87 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 87, i8* nonnull %65)
  %66 = getelementptr inbounds [24 x i8], [24 x i8]* %16, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66)
  %67 = getelementptr inbounds [24 x i8], [24 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67)
  %68 = getelementptr inbounds [24 x i8], [24 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68)
  %69 = getelementptr inbounds [24 x i8], [24 x i8]* %19, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69)
  %70 = getelementptr inbounds [24 x i8], [24 x i8]* %20, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70)
  %71 = getelementptr inbounds [24 x i8], [24 x i8]* %21, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71)
  %72 = getelementptr inbounds [24 x i8], [24 x i8]* %22, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72)
  %73 = getelementptr inbounds [24 x i8], [24 x i8]* %23, i64 0, i64 0
  br label %100

74:                                               ; preds = %49
  %75 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %76 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %76, i64 0, i32 86, i32 0, i32 0, i32 0
  %78 = load %"class.v8::internal::IncrementalMarking"*, %"class.v8::internal::IncrementalMarking"** %77, align 8
  %79 = tail call zeroext i1 @_ZN2v88internal18IncrementalMarking12WasActivatedEv(%"class.v8::internal::IncrementalMarking"* %78) #7
  br i1 %79, label %80, label %90

80:                                               ; preds = %74
  %81 = getelementptr inbounds [87 x i8], [87 x i8]* %25, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 87, i8* nonnull %81)
  %82 = getelementptr inbounds [24 x i8], [24 x i8]* %26, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82)
  %83 = getelementptr inbounds [24 x i8], [24 x i8]* %27, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83)
  %84 = getelementptr inbounds [24 x i8], [24 x i8]* %28, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84)
  %85 = getelementptr inbounds [24 x i8], [24 x i8]* %29, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85)
  %86 = getelementptr inbounds [24 x i8], [24 x i8]* %30, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86)
  %87 = getelementptr inbounds [24 x i8], [24 x i8]* %31, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87)
  %88 = getelementptr inbounds [24 x i8], [24 x i8]* %32, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %88)
  %89 = getelementptr inbounds [24 x i8], [24 x i8]* %33, i64 0, i64 0
  br label %100

90:                                               ; preds = %74
  %91 = getelementptr inbounds [87 x i8], [87 x i8]* %35, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 87, i8* nonnull %91)
  %92 = getelementptr inbounds [24 x i8], [24 x i8]* %36, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92)
  %93 = getelementptr inbounds [24 x i8], [24 x i8]* %37, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93)
  %94 = getelementptr inbounds [24 x i8], [24 x i8]* %38, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %94)
  %95 = getelementptr inbounds [24 x i8], [24 x i8]* %39, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %95)
  %96 = getelementptr inbounds [24 x i8], [24 x i8]* %40, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %96)
  %97 = getelementptr inbounds [24 x i8], [24 x i8]* %41, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97)
  %98 = getelementptr inbounds [24 x i8], [24 x i8]* %42, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98)
  %99 = getelementptr inbounds [24 x i8], [24 x i8]* %43, i64 0, i64 0
  br label %100

100:                                              ; preds = %54, %64, %90, %80
  %101 = phi i8* [ %63, %54 ], [ %73, %64 ], [ %99, %90 ], [ %89, %80 ]
  %102 = phi [24 x i8]* [ %14, %54 ], [ %24, %64 ], [ %44, %90 ], [ %34, %80 ]
  %103 = phi [87 x i8]* [ %5, %54 ], [ %15, %64 ], [ %35, %90 ], [ %25, %80 ]
  %104 = phi [24 x i8]* [ %6, %54 ], [ %16, %64 ], [ %36, %90 ], [ %26, %80 ]
  %105 = phi [24 x i8]* [ %7, %54 ], [ %17, %64 ], [ %37, %90 ], [ %27, %80 ]
  %106 = phi [24 x i8]* [ %8, %54 ], [ %18, %64 ], [ %38, %90 ], [ %28, %80 ]
  %107 = phi [24 x i8]* [ %9, %54 ], [ %19, %64 ], [ %39, %90 ], [ %29, %80 ]
  %108 = phi [24 x i8]* [ %10, %54 ], [ %20, %64 ], [ %40, %90 ], [ %30, %80 ]
  %109 = phi [24 x i8]* [ %11, %54 ], [ %21, %64 ], [ %41, %90 ], [ %31, %80 ]
  %110 = phi [24 x i8]* [ %12, %54 ], [ %22, %64 ], [ %42, %90 ], [ %32, %80 ]
  %111 = phi [24 x i8]* [ %13, %54 ], [ %23, %64 ], [ %43, %90 ], [ %33, %80 ]
  %112 = phi i32 [ 0, %54 ], [ 3, %64 ], [ 1, %90 ], [ 2, %80 ]
  %113 = phi i8* [ %55, %54 ], [ %65, %64 ], [ %91, %90 ], [ %81, %80 ]
  %114 = phi i8* [ %56, %54 ], [ %66, %64 ], [ %92, %90 ], [ %82, %80 ]
  %115 = phi i8* [ %57, %54 ], [ %67, %64 ], [ %93, %90 ], [ %83, %80 ]
  %116 = phi i8* [ %58, %54 ], [ %68, %64 ], [ %94, %90 ], [ %84, %80 ]
  %117 = phi i8* [ %59, %54 ], [ %69, %64 ], [ %95, %90 ], [ %85, %80 ]
  %118 = phi i8* [ %60, %54 ], [ %70, %64 ], [ %96, %90 ], [ %86, %80 ]
  %119 = phi i8* [ %61, %54 ], [ %71, %64 ], [ %97, %90 ], [ %87, %80 ]
  %120 = phi i8* [ %62, %54 ], [ %72, %64 ], [ %98, %90 ], [ %88, %80 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101)
  %121 = getelementptr inbounds [24 x i8], [24 x i8]* %102, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %121)
  %122 = getelementptr inbounds [87 x i8], [87 x i8]* %103, i64 0, i64 7
  call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 0, i64 80, i1 false)
  %123 = getelementptr inbounds [24 x i8], [24 x i8]* %104, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %123, i8 0, i64 20, i1 false)
  %124 = getelementptr inbounds [24 x i8], [24 x i8]* %105, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %124, i8 0, i64 20, i1 false)
  %125 = getelementptr inbounds [24 x i8], [24 x i8]* %106, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %125, i8 0, i64 20, i1 false)
  %126 = getelementptr inbounds [24 x i8], [24 x i8]* %107, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %126, i8 0, i64 20, i1 false)
  %127 = getelementptr inbounds [24 x i8], [24 x i8]* %108, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %127, i8 0, i64 20, i1 false)
  %128 = getelementptr inbounds [24 x i8], [24 x i8]* %109, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %128, i8 0, i64 20, i1 false)
  %129 = getelementptr inbounds [24 x i8], [24 x i8]* %110, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %129, i8 0, i64 20, i1 false)
  %130 = getelementptr inbounds [24 x i8], [24 x i8]* %111, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %130, i8 0, i64 20, i1 false)
  %131 = getelementptr inbounds [24 x i8], [24 x i8]* %102, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %131, i8 0, i64 20, i1 false)
  %132 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  store i32 %112, i32* %132, align 8
  %133 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 1
  store i32 %2, i32* %133, align 4
  %134 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 2
  store i8* %3, i8** %134, align 8
  %135 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  %136 = bitcast double* %135 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %136, i8 0, i64 17, i1 false)
  %137 = bitcast %"class.v8::internal::GCTracer"* %0 to i8*
  %138 = getelementptr inbounds i8, i8* %137, i64 41
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* nonnull align 1 %113, i64 87, i1 false)
  %139 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16
  %140 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 3, i64 0
  %141 = bitcast [124 x double]* %139 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 1012, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %140, i8* nonnull align 4 %114, i64 24, i1 false)
  %142 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 1, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %142, i8* nonnull align 4 %115, i64 24, i1 false)
  %143 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 2, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %143, i8* nonnull align 4 %116, i64 24, i1 false)
  %144 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 3, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* nonnull align 4 %117, i64 24, i1 false)
  %145 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 4, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* nonnull align 4 %118, i64 24, i1 false)
  %146 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 5, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %146, i8* nonnull align 4 %119, i64 24, i1 false)
  %147 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %147, i8* nonnull align 4 %120, i64 24, i1 false)
  %148 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 7, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* nonnull align 4 %101, i64 24, i1 false)
  %149 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 8, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* nonnull align 4 %121, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 87, i8* nonnull %113)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %114)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %116)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %119)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %121)
  br label %150

150:                                              ; preds = %100, %49
  %151 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %152 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %151, align 8
  %153 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %152, i64 0, i32 115
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 5
  %156 = trunc i32 %154 to i8
  %157 = and i8 %156, 1
  store i8 %157, i8* %155, align 8
  %158 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %162, label %160, !prof !3

160:                                              ; preds = %150
  %161 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %152) #7
  br label %166

162:                                              ; preds = %150
  %163 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %164 = sitofp i64 %163 to double
  %165 = fdiv double %164, 1.000000e+03
  br label %166

166:                                              ; preds = %160, %162
  %167 = phi double [ %161, %160 ], [ %165, %162 ]
  %168 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  store double %167, double* %168, align 8
  %169 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 6
  store i64 0, i64* %169, align 8
  %170 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 8
  store i64 0, i64* %170, align 8
  %171 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 10
  store i64 0, i64* %171, align 8
  %172 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 12
  store i64 0, i64* %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 14
  %174 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %175 = bitcast i64* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 1008, i1 false)
  %176 = load i64, i64* %174, align 8
  %177 = add i64 %176, -41416
  %178 = inttoptr i64 %177 to %"class.v8::internal::Isolate"*
  %179 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %178, i64 0, i32 14, i32 0
  %180 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %179, align 8
  %181 = and i32 %1, -3
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %166
  %184 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %180, i64 0, i32 22
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %184, i32 %2) #7
  br label %194

185:                                              ; preds = %166
  %186 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %180, i64 0, i32 9
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %186, i32 %2) #7
  %187 = load i8, i8* @_ZN2v88internal23FLAG_trace_gc_freelistsE, align 1, !range !2
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %194, label %189

189:                                              ; preds = %185
  %190 = load i64, i64* %174, align 8
  %191 = add i64 %190, -41416
  %192 = inttoptr i64 %191 to i8*
  tail call void (i8*, i8*, ...) @_ZN2v88internal12PrintIsolateEPvPKcz(i8* %192, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.134, i64 0, i64 0)) #7
  %193 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %151, align 8
  tail call void @_ZN2v88internal4Heap19PrintFreeListsStatsEv(%"class.v8::internal::Heap"* %193) #7
  br label %194

194:                                              ; preds = %183, %189, %185, %4
  ret void
}

declare zeroext i1 @_ZN2v88internal18IncrementalMarking12WasActivatedEv(%"class.v8::internal::IncrementalMarking"*) local_unnamed_addr #3

declare void @_ZN2v88internal12PrintIsolateEPvPKcz(i8*, i8*, ...) local_unnamed_addr #3

declare void @_ZN2v88internal4Heap19PrintFreeListsStatsEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer16StartInSafepointEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.v8::internal::PagedSpaceIterator", align 8
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %7 = tail call i64 @_ZN2v88internal4Heap25NewSpaceAllocationCounterEv(%"class.v8::internal::Heap"* %6) #7
  %8 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %8, i64 0, i32 105
  %10 = load i64, i64* %9, align 8
  %11 = tail call i64 @_ZN2v88internal4Heap26OldGenerationSizeOfObjectsEv(%"class.v8::internal::Heap"* %8) #7
  %12 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %8, i64 0, i32 106
  %13 = load i64, i64* %12, align 8
  %14 = tail call i64 @llvm.usub.sat.i64(i64 %11, i64 %13) #7
  %15 = add i64 %14, %10
  %16 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %17 = tail call i64 @_ZNK2v88internal4Heap25EmbedderAllocationCounterEv(%"class.v8::internal::Heap"* %16) #7
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 10
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %21, label %25

21:                                               ; preds = %1
  store double %4, double* %18, align 8
  %22 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 11
  store i64 %7, i64* %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 12
  store i64 %15, i64* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 13
  store i64 %17, i64* %24, align 8
  br label %48

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 11
  %27 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 12
  %28 = bitcast i64* %26 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = insertelement <2 x i64> undef, i64 %7, i32 0
  %31 = insertelement <2 x i64> %30, i64 %15, i32 1
  %32 = sub <2 x i64> %31, %29
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 13
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %17, %34
  %36 = fsub double %4, %19
  store double %4, double* %18, align 8
  store i64 %7, i64* %26, align 8
  store i64 %15, i64* %27, align 8
  store i64 %17, i64* %33, align 8
  %37 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %38 = load double, double* %37, align 8
  %39 = fadd double %36, %38
  store double %39, double* %37, align 8
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %41 = bitcast i64* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 8
  %43 = add <2 x i64> %32, %42
  %44 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 8
  %45 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 17
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %35, %46
  store i64 %47, i64* %45, align 8
  br label %48

48:                                               ; preds = %21, %25
  %49 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %50 = tail call i64 @_ZN2v88internal4Heap13SizeOfObjectsEv(%"class.v8::internal::Heap"* %49) #7
  %51 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 6
  store i64 %50, i64* %51, align 8
  %52 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %53 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %52, i64 0, i32 85, i32 0, i32 0, i32 0
  %54 = load %"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::MemoryAllocator"** %53, align 8
  %55 = getelementptr inbounds %"class.v8::internal::MemoryAllocator", %"class.v8::internal::MemoryAllocator"* %54, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i64, i64* %55 seq_cst, align 8
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 8
  store i64 %56, i64* %57, align 8
  %58 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.v8::internal::PagedSpaceIterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #7
  %61 = bitcast %"class.v8::internal::PagedSpaceIterator"* %2 to i64*
  store i64 %59, i64* %61, align 8
  %62 = getelementptr inbounds %"class.v8::internal::PagedSpaceIterator", %"class.v8::internal::PagedSpaceIterator"* %2, i64 0, i32 1
  store i32 1, i32* %62, align 8
  %63 = call %"class.v8::internal::PagedSpace"* @_ZN2v88internal18PagedSpaceIterator4NextEv(%"class.v8::internal::PagedSpaceIterator"* nonnull %2) #7
  %64 = icmp eq %"class.v8::internal::PagedSpace"* %63, null
  br i1 %64, label %81, label %65

65:                                               ; preds = %48, %65
  %66 = phi %"class.v8::internal::PagedSpace"* [ %79, %65 ], [ %63, %48 ]
  %67 = phi i64 [ %78, %65 ], [ 0, %48 ]
  %68 = bitcast %"class.v8::internal::PagedSpace"* %66 to i64 (%"class.v8::internal::PagedSpace"*)***
  %69 = load i64 (%"class.v8::internal::PagedSpace"*)**, i64 (%"class.v8::internal::PagedSpace"*)*** %68, align 8
  %70 = getelementptr inbounds i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %69, i64 18
  %71 = load i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %70, align 8
  %72 = call i64 %71(%"class.v8::internal::PagedSpace"* nonnull %66) #7
  %73 = load i64 (%"class.v8::internal::PagedSpace"*)**, i64 (%"class.v8::internal::PagedSpace"*)*** %68, align 8
  %74 = getelementptr inbounds i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %73, i64 12
  %75 = load i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %74, align 8
  %76 = call i64 %75(%"class.v8::internal::PagedSpace"* nonnull %66) #7
  %77 = add i64 %72, %67
  %78 = add i64 %77, %76
  %79 = call %"class.v8::internal::PagedSpace"* @_ZN2v88internal18PagedSpaceIterator4NextEv(%"class.v8::internal::PagedSpaceIterator"* nonnull %2) #7
  %80 = icmp eq %"class.v8::internal::PagedSpace"* %79, null
  br i1 %80, label %81, label %65

81:                                               ; preds = %65, %48
  %82 = phi i64 [ 0, %48 ], [ %78, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #7
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 10
  store i64 %82, i64* %83, align 8
  %84 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %84, i64 0, i32 24
  %86 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %85, align 8
  %87 = icmp eq %"class.v8::internal::NewSpace"* %86, null
  br i1 %87, label %105, label %88

88:                                               ; preds = %81
  %89 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %86, i64 0, i32 4, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -262144
  %92 = lshr i64 %91, 18
  %93 = call i64 @_ZN2v88internal17MemoryChunkLayout27AllocatableMemoryInDataPageEv() #7
  %94 = mul i64 %92, %93
  %95 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %86, i64 0, i32 0, i32 1, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %86, i64 0, i32 4, i32 7
  %98 = bitcast %"class.v8::internal::Page"** %97 to %"class.v8::internal::BasicMemoryChunk"**
  %99 = load %"class.v8::internal::BasicMemoryChunk"*, %"class.v8::internal::BasicMemoryChunk"** %98, align 8
  %100 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %99, i64 0, i32 3
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %94, %96
  %103 = sub i64 %102, %101
  %104 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  br label %105

105:                                              ; preds = %81, %88
  %106 = phi %"class.v8::internal::Heap"* [ %104, %88 ], [ %84, %81 ]
  %107 = phi i64 [ %103, %88 ], [ 0, %81 ]
  %108 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %106, i64 0, i32 30
  %109 = load %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"** %108, align 8
  %110 = icmp eq %"class.v8::internal::NewLargeObjectSpace"* %109, null
  br i1 %110, label %118, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds %"class.v8::internal::NewLargeObjectSpace", %"class.v8::internal::NewLargeObjectSpace"* %109, i64 0, i32 0
  %113 = bitcast %"class.v8::internal::NewLargeObjectSpace"* %109 to i64 (%"class.v8::internal::LargeObjectSpace"*)***
  %114 = load i64 (%"class.v8::internal::LargeObjectSpace"*)**, i64 (%"class.v8::internal::LargeObjectSpace"*)*** %113, align 8
  %115 = getelementptr inbounds i64 (%"class.v8::internal::LargeObjectSpace"*)*, i64 (%"class.v8::internal::LargeObjectSpace"*)** %114, i64 11
  %116 = load i64 (%"class.v8::internal::LargeObjectSpace"*)*, i64 (%"class.v8::internal::LargeObjectSpace"*)** %115, align 8
  %117 = call i64 %116(%"class.v8::internal::LargeObjectSpace"* %112) #7
  br label %118

118:                                              ; preds = %105, %111
  %119 = phi i64 [ %117, %111 ], [ 0, %105 ]
  %120 = add i64 %119, %107
  %121 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 12
  store i64 %120, i64* %121, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer16SampleAllocationEdmmm(%"class.v8::internal::GCTracer"* nocapture, double, i64, i64, i64) local_unnamed_addr #6 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 10
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  store double %1, double* %6, align 8
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 11
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 12
  store i64 %3, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 13
  store i64 %4, i64* %12, align 8
  br label %36

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 11
  %15 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 12
  %16 = bitcast i64* %14 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 8
  %18 = insertelement <2 x i64> undef, i64 %2, i32 0
  %19 = insertelement <2 x i64> %18, i64 %3, i32 1
  %20 = sub <2 x i64> %19, %17
  %21 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 13
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %4, %22
  %24 = fsub double %1, %7
  store double %1, double* %6, align 8
  store i64 %2, i64* %14, align 8
  store i64 %3, i64* %15, align 8
  store i64 %4, i64* %21, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %26 = load double, double* %25, align 8
  %27 = fadd double %24, %26
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %29 = bitcast i64* %28 to <2 x i64>*
  %30 = load <2 x i64>, <2 x i64>* %29, align 8
  %31 = add <2 x i64> %20, %30
  %32 = bitcast i64* %28 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 17
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %23, %34
  store i64 %35, i64* %33, align 8
  br label %36

36:                                               ; preds = %13, %9
  ret void
}

declare i64 @_ZN2v88internal4Heap25NewSpaceAllocationCounterEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal4Heap25EmbedderAllocationCounterEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal4Heap13SizeOfObjectsEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer15StopInSafepointEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.v8::internal::PagedSpaceIterator", align 8
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %4 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %5 = tail call i64 @_ZN2v88internal4Heap13SizeOfObjectsEv(%"class.v8::internal::Heap"* %4) #7
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  store i64 %5, i64* %6, align 8
  %7 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %7, i64 0, i32 85, i32 0, i32 0, i32 0
  %9 = load %"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::MemoryAllocator"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::MemoryAllocator", %"class.v8::internal::MemoryAllocator"* %9, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i64, i64* %10 seq_cst, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 9
  store i64 %11, i64* %12, align 8
  %13 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.v8::internal::PagedSpaceIterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #7
  %16 = bitcast %"class.v8::internal::PagedSpaceIterator"* %2 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::PagedSpaceIterator", %"class.v8::internal::PagedSpaceIterator"* %2, i64 0, i32 1
  store i32 1, i32* %17, align 8
  %18 = call %"class.v8::internal::PagedSpace"* @_ZN2v88internal18PagedSpaceIterator4NextEv(%"class.v8::internal::PagedSpaceIterator"* nonnull %2) #7
  %19 = icmp eq %"class.v8::internal::PagedSpace"* %18, null
  br i1 %19, label %36, label %20

20:                                               ; preds = %1, %20
  %21 = phi %"class.v8::internal::PagedSpace"* [ %34, %20 ], [ %18, %1 ]
  %22 = phi i64 [ %33, %20 ], [ 0, %1 ]
  %23 = bitcast %"class.v8::internal::PagedSpace"* %21 to i64 (%"class.v8::internal::PagedSpace"*)***
  %24 = load i64 (%"class.v8::internal::PagedSpace"*)**, i64 (%"class.v8::internal::PagedSpace"*)*** %23, align 8
  %25 = getelementptr inbounds i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %24, i64 18
  %26 = load i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %25, align 8
  %27 = call i64 %26(%"class.v8::internal::PagedSpace"* nonnull %21) #7
  %28 = load i64 (%"class.v8::internal::PagedSpace"*)**, i64 (%"class.v8::internal::PagedSpace"*)*** %23, align 8
  %29 = getelementptr inbounds i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %28, i64 12
  %30 = load i64 (%"class.v8::internal::PagedSpace"*)*, i64 (%"class.v8::internal::PagedSpace"*)** %29, align 8
  %31 = call i64 %30(%"class.v8::internal::PagedSpace"* nonnull %21) #7
  %32 = add i64 %27, %22
  %33 = add i64 %32, %31
  %34 = call %"class.v8::internal::PagedSpace"* @_ZN2v88internal18PagedSpaceIterator4NextEv(%"class.v8::internal::PagedSpaceIterator"* nonnull %2) #7
  %35 = icmp eq %"class.v8::internal::PagedSpace"* %34, null
  br i1 %35, label %36, label %20

36:                                               ; preds = %20, %1
  %37 = phi i64 [ 0, %1 ], [ %33, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #7
  %38 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 11
  store i64 %37, i64* %38, align 8
  %39 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %39, i64 0, i32 67
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %39, i64 0, i32 70
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, %41
  %45 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 13
  store i64 %44, i64* %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer4StopENS0_16GarbageCollectorE(%"class.v8::internal::GCTracer"*, i32) local_unnamed_addr #2 align 2 {
  %3 = alloca [2 x %"class.std::__1::unique_ptr.1151"], align 16
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i64, align 8
  %7 = alloca %"class.std::__1::basic_stringstream", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 19
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* %9, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %2
  %14 = load i8, i8* @_ZN2v88internal21FLAG_trace_gc_verboseE, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %616, label %16

16:                                               ; preds = %13
  %17 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, -41416
  %20 = inttoptr i64 %19 to %"class.v8::internal::Isolate"*
  %21 = icmp ult i32 %1, 3
  br i1 %21, label %22, label %26

22:                                               ; preds = %16
  %23 = sext i32 %1 to i64
  %24 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZN2v88internal8GCTracer4StopENS0_16GarbageCollectorE, i64 0, i64 %23
  %25 = load i8*, i8** %24, align 8
  br label %26

26:                                               ; preds = %16, %22
  %27 = phi i8* [ %25, %22 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.153, i64 0, i64 0), %16 ]
  %28 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp ult i32 %29, 5
  br i1 %30, label %31, label %35

31:                                               ; preds = %26
  %32 = sext i32 %29 to i64
  %33 = getelementptr inbounds [5 x i8*], [5 x i8*]* @switch.table._ZNK2v88internal8GCTracer5PrintEv, i64 0, i64 %32
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %31, %26
  %36 = phi i8* [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.133, i64 0, i64 0), %26 ], [ %34, %31 ]
  tail call void (%"class.v8::internal::Isolate"*, i8*, ...) @_ZN2v88internal7Isolate18PrintWithTimestampEPKcz(%"class.v8::internal::Isolate"* %20, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.135, i64 0, i64 0), i8* %27, i8* nonnull %36) #7
  br label %616

37:                                               ; preds = %2
  %38 = load i8, i8* @_ZN2v88internal16FLAG_predictableE, align 1, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %44, label %40, !prof !3

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %42 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %41, align 8
  %43 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %42) #7
  br label %48

44:                                               ; preds = %37
  %45 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #7
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+03
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi double [ %43, %40 ], [ %47, %44 ]
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 4
  store double %49, double* %50, align 8
  tail call void @_ZN2v88internal8GCTracer13AddAllocationEd(%"class.v8::internal::GCTracer"* %0, double %49)
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  %53 = load double, double* %52, align 8
  %54 = fsub double %51, %53
  %55 = fmul double %54, 1.000000e+03
  %56 = fptosi double %55 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %58 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, -41416
  %61 = inttoptr i64 %60 to %"class.v8::internal::Isolate"*
  %62 = tail call %"struct.v8::metrics::LongTaskStats"* @_ZN2v88internal7Isolate23GetCurrentLongTaskStatsEv(%"class.v8::internal::Isolate"* %61) #7
  %63 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  %64 = load i32, i32* %63, align 8
  switch i32 %64, label %444 [
    i32 0, label %65
    i32 3, label %65
    i32 2, label %137
    i32 1, label %327
    i32 4, label %439
  ]

65:                                               ; preds = %48, %48
  %66 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 12
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 10
  br i1 %70, label %71, label %81

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 8
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %75, i32 0
  store i64 %67, i64* %76, align 8
  %77 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %75, i32 1
  store double %54, double* %77, align 8
  %78 = load i32, i32* %72, align 8
  %79 = icmp eq i32 %78, 10
  br i1 %79, label %80, label %86

80:                                               ; preds = %71
  store i32 0, i32* %72, align 8
  br label %86

81:                                               ; preds = %65
  %82 = add nsw i32 %69, 1
  store i32 %82, i32* %68, align 4
  %83 = sext i32 %69 to i64
  %84 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %83, i32 0
  store i64 %67, i64* %84, align 8
  %85 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %83, i32 1
  store double %54, double* %85, align 8
  br label %86

86:                                               ; preds = %71, %80, %81
  %87 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 13
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 10
  br i1 %91, label %92, label %102

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %93, align 8
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %96, i32 0
  store i64 %88, i64* %97, align 8
  %98 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %96, i32 1
  store double %54, double* %98, align 8
  %99 = load i32, i32* %93, align 8
  %100 = icmp eq i32 %99, 10
  br i1 %100, label %101, label %107

101:                                              ; preds = %92
  store i32 0, i32* %93, align 8
  br label %107

102:                                              ; preds = %86
  %103 = add nsw i32 %90, 1
  store i32 %103, i32* %89, align 4
  %104 = sext i32 %90 to i64
  %105 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %104, i32 0
  store i64 %88, i64* %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %104, i32 1
  store double %54, double* %106, align 8
  br label %107

107:                                              ; preds = %92, %101, %102
  %108 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %108) #7
  %109 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 120, i32 0
  %110 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 120
  %111 = bitcast double* %109 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 8
  %113 = bitcast double* %110 to <2 x double>*
  %114 = load <2 x double>, <2 x double>* %113, align 8
  %115 = fadd <2 x double> %112, %114
  %116 = bitcast double* %110 to <2 x double>*
  store <2 x double> %115, <2 x double>* %116, align 8
  %117 = bitcast double* %109 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %117, align 8
  %118 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 122, i32 0
  %119 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 122
  %120 = bitcast double* %118 to <2 x double>*
  %121 = load <2 x double>, <2 x double>* %120, align 8
  %122 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 123
  %123 = bitcast double* %119 to <2 x double>*
  %124 = load <2 x double>, <2 x double>* %123, align 8
  %125 = fadd <2 x double> %121, %124
  %126 = bitcast double* %119 to <2 x double>*
  store <2 x double> %125, <2 x double>* %126, align 8
  %127 = bitcast double* %118 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %127, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %108) #7
  %128 = load i64, i64* %58, align 8
  %129 = add i64 %128, -41416
  %130 = inttoptr i64 %129 to %"class.v8::internal::Isolate"*
  %131 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %130, i64 0, i32 14, i32 0
  %132 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %131, align 8
  %133 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %132, i64 0, i32 2
  %134 = load double, double* %122, align 8
  %135 = fptosi double %134 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %133, i32 %135) #7
  %136 = getelementptr inbounds %"struct.v8::metrics::LongTaskStats", %"struct.v8::metrics::LongTaskStats"* %62, i64 0, i32 2
  br label %440

137:                                              ; preds = %48
  %138 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %139 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 14
  %140 = bitcast i64* %138 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8
  %142 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 15
  %143 = bitcast i64* %139 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %143, align 8
  %144 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 0
  %145 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0
  %146 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %145 to i8*
  %147 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 20, i1 false)
  %148 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %144 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 0
  %151 = bitcast double* %150 to i64*
  store i64 %149, i64* %151, align 8
  %152 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 1
  %153 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 1
  %154 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %153 to i8*
  %155 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 20, i1 false)
  %156 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %152 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 1
  %159 = bitcast double* %158 to i64*
  store i64 %157, i64* %159, align 8
  %160 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 2
  %161 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 2
  %162 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %161 to i8*
  %163 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %160 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 8 %163, i64 20, i1 false)
  %164 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %160 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 2
  %167 = bitcast double* %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 3
  %169 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 3
  %170 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %169 to i8*
  %171 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %168 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* align 8 %171, i64 20, i1 false)
  %172 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %168 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 3
  %175 = bitcast double* %174 to i64*
  store i64 %173, i64* %175, align 8
  %176 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 4
  %177 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 4
  %178 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %177 to i8*
  %179 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %176 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* align 8 %179, i64 20, i1 false)
  %180 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %176 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 4
  %183 = bitcast double* %182 to i64*
  store i64 %181, i64* %183, align 8
  %184 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 5
  %185 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 5
  %186 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %185 to i8*
  %187 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %184 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %186, i8* align 8 %187, i64 20, i1 false)
  %188 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %184 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 5
  %191 = bitcast double* %190 to i64*
  store i64 %189, i64* %191, align 8
  %192 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 6
  %193 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6
  %194 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %193 to i8*
  %195 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %192 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %194, i8* align 8 %195, i64 20, i1 false)
  %196 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %192 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 6
  %199 = bitcast double* %198 to i64*
  store i64 %197, i64* %199, align 8
  %200 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 7
  %201 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 7
  %202 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %201 to i8*
  %203 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %200 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* align 8 %203, i64 20, i1 false)
  %204 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %200 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 7
  %207 = bitcast double* %206 to i64*
  store i64 %205, i64* %207, align 8
  %208 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 8
  %209 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 8
  %210 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %209 to i8*
  %211 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %208 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 20, i1 false)
  %212 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %208 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 8
  %215 = bitcast double* %214 to i64*
  store i64 %213, i64* %215, align 8
  %216 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 9
  %217 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 9
  %218 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %217 to i8*
  %219 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 20, i1 false)
  %220 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %216 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 9
  %223 = bitcast double* %222 to i64*
  store i64 %221, i64* %223, align 8
  %224 = load double, double* %50, align 8
  %225 = load double, double* %142, align 8
  %226 = fadd double %54, %225
  %227 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 23
  %228 = load double, double* %227, align 8
  %229 = fcmp oeq double %228, 0.000000e+00
  br i1 %229, label %252, label %230

230:                                              ; preds = %137
  %231 = fsub double %224, %228
  %232 = fsub double %231, %226
  %233 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 21
  %234 = load double, double* %233, align 8
  %235 = fcmp oeq double %234, 0.000000e+00
  %236 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %237 = load double, double* %236, align 8
  %238 = fcmp oeq double %237, 0.000000e+00
  %239 = and i1 %235, %238
  br i1 %239, label %240, label %241

240:                                              ; preds = %230
  store double %226, double* %233, align 8
  br label %246

241:                                              ; preds = %230
  %242 = fadd double %226, %234
  %243 = fmul double %242, 5.000000e-01
  store double %243, double* %233, align 8
  %244 = fadd double %232, %237
  %245 = fmul double %244, 5.000000e-01
  br label %246

246:                                              ; preds = %241, %240
  %247 = phi double [ %245, %241 ], [ %232, %240 ]
  store double %247, double* %236, align 8
  %248 = fcmp une double %231, 0.000000e+00
  %249 = fdiv double %232, %231
  %250 = select i1 %248, double %249, double 0.000000e+00
  %251 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  store double %250, double* %251, align 8
  br label %252

252:                                              ; preds = %137, %246
  store double %224, double* %227, align 8
  %253 = fcmp oeq double %225, 0.000000e+00
  %254 = extractelement <2 x i64> %141, i32 0
  %255 = icmp eq i64 %254, 0
  %256 = or i1 %255, %253
  br i1 %256, label %266, label %257

257:                                              ; preds = %252
  %258 = uitofp i64 %254 to double
  %259 = fdiv double %258, %225
  %260 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 6
  %261 = load double, double* %260, align 8
  %262 = fcmp oeq double %261, 0.000000e+00
  %263 = fadd double %259, %261
  %264 = fmul double %263, 5.000000e-01
  %265 = select i1 %262, double %259, double %264
  store double %265, double* %260, align 8
  br label %266

266:                                              ; preds = %252, %257
  %267 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  %268 = load i64, i64* %267, align 8
  %269 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 2
  %270 = load i32, i32* %269, align 4
  %271 = icmp eq i32 %270, 10
  br i1 %271, label %272, label %282

272:                                              ; preds = %266
  %273 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 1
  %274 = load i32, i32* %273, align 8
  %275 = add nsw i32 %274, 1
  store i32 %275, i32* %273, align 8
  %276 = sext i32 %274 to i64
  %277 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %276, i32 0
  store i64 %268, i64* %277, align 8
  %278 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %276, i32 1
  store double %54, double* %278, align 8
  %279 = load i32, i32* %273, align 8
  %280 = icmp eq i32 %279, 10
  br i1 %280, label %281, label %287

281:                                              ; preds = %272
  store i32 0, i32* %273, align 8
  br label %287

282:                                              ; preds = %266
  %283 = add nsw i32 %270, 1
  store i32 %283, i32* %269, align 4
  %284 = sext i32 %270 to i64
  %285 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %284, i32 0
  store i64 %268, i64* %285, align 8
  %286 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %284, i32 1
  store double %54, double* %286, align 8
  br label %287

287:                                              ; preds = %272, %281, %282
  tail call void @_ZN2v88internal8GCTracer19RecordGCSumCountersEd(%"class.v8::internal::GCTracer"* %0, double %54)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %147, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %155, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %163, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %179, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %187, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %195, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %203, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %211, i8 0, i64 20, i1 false) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %219, i8 0, i64 20, i1 false) #7
  %288 = bitcast i64* %138 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %288, i8 0, i64 16, i1 false) #7
  %289 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 18
  store double 0.000000e+00, double* %289, align 8
  %290 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %290) #7
  %291 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 116, i32 0
  %292 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 116
  %293 = bitcast double* %291 to <2 x double>*
  %294 = load <2 x double>, <2 x double>* %293, align 8
  %295 = bitcast double* %292 to <2 x double>*
  %296 = load <2 x double>, <2 x double>* %295, align 8
  %297 = fadd <2 x double> %294, %296
  %298 = bitcast double* %292 to <2 x double>*
  store <2 x double> %297, <2 x double>* %298, align 8
  %299 = bitcast double* %291 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %299, align 8
  %300 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 118, i32 0
  %301 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 118
  %302 = bitcast double* %300 to <2 x double>*
  %303 = load <2 x double>, <2 x double>* %302, align 8
  %304 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 119
  %305 = bitcast double* %301 to <2 x double>*
  %306 = load <2 x double>, <2 x double>* %305, align 8
  %307 = fadd <2 x double> %303, %306
  %308 = bitcast double* %301 to <2 x double>*
  store <2 x double> %307, <2 x double>* %308, align 8
  %309 = bitcast double* %300 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %309, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %290) #7
  %310 = load i64, i64* %58, align 8
  %311 = add i64 %310, -41416
  %312 = inttoptr i64 %311 to %"class.v8::internal::Isolate"*
  %313 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %312, i64 0, i32 14, i32 0
  %314 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %313, align 8
  %315 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %314, i64 0, i32 1
  %316 = load double, double* %301, align 8
  %317 = fptosi double %316 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %315, i32 %317) #7
  %318 = load i64, i64* %58, align 8
  %319 = add i64 %318, -41416
  %320 = inttoptr i64 %319 to %"class.v8::internal::Isolate"*
  %321 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %320, i64 0, i32 14, i32 0
  %322 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %321, align 8
  %323 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %322, i64 0, i32 3
  %324 = load double, double* %304, align 8
  %325 = fptosi double %324 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %323, i32 %325) #7
  %326 = getelementptr inbounds %"struct.v8::metrics::LongTaskStats", %"struct.v8::metrics::LongTaskStats"* %62, i64 0, i32 0
  br label %440

327:                                              ; preds = %48
  %328 = load double, double* %50, align 8
  %329 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 15
  %330 = load double, double* %329, align 8
  %331 = fadd double %54, %330
  %332 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 23
  %333 = load double, double* %332, align 8
  %334 = fcmp oeq double %333, 0.000000e+00
  br i1 %334, label %357, label %335

335:                                              ; preds = %327
  %336 = fsub double %328, %333
  %337 = fsub double %336, %331
  %338 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 21
  %339 = load double, double* %338, align 8
  %340 = fcmp oeq double %339, 0.000000e+00
  %341 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %342 = load double, double* %341, align 8
  %343 = fcmp oeq double %342, 0.000000e+00
  %344 = and i1 %340, %343
  br i1 %344, label %345, label %346

345:                                              ; preds = %335
  store double %331, double* %338, align 8
  br label %351

346:                                              ; preds = %335
  %347 = fadd double %331, %339
  %348 = fmul double %347, 5.000000e-01
  store double %348, double* %338, align 8
  %349 = fadd double %337, %342
  %350 = fmul double %349, 5.000000e-01
  br label %351

351:                                              ; preds = %346, %345
  %352 = phi double [ %350, %346 ], [ %337, %345 ]
  store double %352, double* %341, align 8
  %353 = fcmp une double %336, 0.000000e+00
  %354 = fdiv double %337, %336
  %355 = select i1 %353, double %354, double 0.000000e+00
  %356 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  store double %355, double* %356, align 8
  br label %357

357:                                              ; preds = %327, %351
  store double %328, double* %332, align 8
  %358 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  %359 = load i64, i64* %358, align 8
  %360 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 10
  br i1 %362, label %363, label %373

363:                                              ; preds = %357
  %364 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 1
  %365 = load i32, i32* %364, align 8
  %366 = add nsw i32 %365, 1
  store i32 %366, i32* %364, align 8
  %367 = sext i32 %365 to i64
  %368 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %367, i32 0
  store i64 %359, i64* %368, align 8
  %369 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %367, i32 1
  store double %54, double* %369, align 8
  %370 = load i32, i32* %364, align 8
  %371 = icmp eq i32 %370, 10
  br i1 %371, label %372, label %378

372:                                              ; preds = %363
  store i32 0, i32* %364, align 8
  br label %378

373:                                              ; preds = %357
  %374 = add nsw i32 %361, 1
  store i32 %374, i32* %360, align 4
  %375 = sext i32 %361 to i64
  %376 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %375, i32 0
  store i64 %359, i64* %376, align 8
  %377 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %375, i32 1
  store double %54, double* %377, align 8
  br label %378

378:                                              ; preds = %363, %372, %373
  tail call void @_ZN2v88internal8GCTracer19RecordGCSumCountersEd(%"class.v8::internal::GCTracer"* %0, double %54)
  %379 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %380 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 0
  %381 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %380 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %381, i8 0, i64 20, i1 false) #7
  %382 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 1
  %383 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %382 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %383, i8 0, i64 20, i1 false) #7
  %384 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 2
  %385 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %384 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %385, i8 0, i64 20, i1 false) #7
  %386 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 3
  %387 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %386 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %387, i8 0, i64 20, i1 false) #7
  %388 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 4
  %389 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %388 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %389, i8 0, i64 20, i1 false) #7
  %390 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 5
  %391 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %390 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %391, i8 0, i64 20, i1 false) #7
  %392 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 6
  %393 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %392 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %393, i8 0, i64 20, i1 false) #7
  %394 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 7
  %395 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %394 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %395, i8 0, i64 20, i1 false) #7
  %396 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 8
  %397 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %396 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %397, i8 0, i64 20, i1 false) #7
  %398 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 9, i64 9
  %399 = bitcast %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"* %398 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %399, i8 0, i64 20, i1 false) #7
  %400 = bitcast i64* %379 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %400, i8 0, i64 16, i1 false) #7
  %401 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 18
  store double 0.000000e+00, double* %401, align 8
  %402 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %402) #7
  %403 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 116, i32 0
  %404 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 116
  %405 = bitcast double* %403 to <2 x double>*
  %406 = load <2 x double>, <2 x double>* %405, align 8
  %407 = bitcast double* %404 to <2 x double>*
  %408 = load <2 x double>, <2 x double>* %407, align 8
  %409 = fadd <2 x double> %406, %408
  %410 = bitcast double* %404 to <2 x double>*
  store <2 x double> %409, <2 x double>* %410, align 8
  %411 = bitcast double* %403 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %411, align 8
  %412 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 118, i32 0
  %413 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 118
  %414 = bitcast double* %412 to <2 x double>*
  %415 = load <2 x double>, <2 x double>* %414, align 8
  %416 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 119
  %417 = bitcast double* %413 to <2 x double>*
  %418 = load <2 x double>, <2 x double>* %417, align 8
  %419 = fadd <2 x double> %415, %418
  %420 = bitcast double* %413 to <2 x double>*
  store <2 x double> %419, <2 x double>* %420, align 8
  %421 = bitcast double* %412 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %421, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %402) #7
  %422 = load i64, i64* %58, align 8
  %423 = add i64 %422, -41416
  %424 = inttoptr i64 %423 to %"class.v8::internal::Isolate"*
  %425 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %424, i64 0, i32 14, i32 0
  %426 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %425, align 8
  %427 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %426, i64 0, i32 1
  %428 = load double, double* %413, align 8
  %429 = fptosi double %428 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %427, i32 %429) #7
  %430 = load i64, i64* %58, align 8
  %431 = add i64 %430, -41416
  %432 = inttoptr i64 %431 to %"class.v8::internal::Isolate"*
  %433 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %432, i64 0, i32 14, i32 0
  %434 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %433, align 8
  %435 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %434, i64 0, i32 3
  %436 = load double, double* %416, align 8
  %437 = fptosi double %436 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %435, i32 %437) #7
  %438 = getelementptr inbounds %"struct.v8::metrics::LongTaskStats", %"struct.v8::metrics::LongTaskStats"* %62, i64 0, i32 0
  br label %440

439:                                              ; preds = %48
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.124, i64 0, i64 0)) #13
  unreachable

440:                                              ; preds = %107, %287, %378
  %441 = phi i64* [ %438, %378 ], [ %326, %287 ], [ %136, %107 ]
  %442 = load i64, i64* %441, align 8
  %443 = add nsw i64 %442, %56
  store i64 %443, i64* %441, align 8
  br label %444

444:                                              ; preds = %440, %48
  %445 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %445) #7
  %446 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 110, i32 0
  %447 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 110
  %448 = bitcast double* %446 to <2 x double>*
  %449 = load <2 x double>, <2 x double>* %448, align 8
  %450 = bitcast double* %447 to <2 x double>*
  %451 = load <2 x double>, <2 x double>* %450, align 8
  %452 = fadd <2 x double> %449, %451
  %453 = bitcast double* %447 to <2 x double>*
  store <2 x double> %452, <2 x double>* %453, align 8
  %454 = bitcast double* %446 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %454, align 8
  %455 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 112, i32 0
  %456 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 112
  %457 = bitcast double* %455 to <2 x double>*
  %458 = load <2 x double>, <2 x double>* %457, align 8
  %459 = bitcast double* %456 to <2 x double>*
  %460 = load <2 x double>, <2 x double>* %459, align 8
  %461 = fadd <2 x double> %458, %460
  %462 = bitcast double* %456 to <2 x double>*
  store <2 x double> %461, <2 x double>* %462, align 8
  %463 = bitcast double* %455 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %463, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %445) #7
  %464 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %57, align 8
  tail call void @_ZN2v88internal4Heap17UpdateTotalGCTimeEd(%"class.v8::internal::Heap"* %464, double %54) #7
  %465 = load i32, i32* %63, align 8
  switch i32 %465, label %469 [
    i32 0, label %466
    i32 3, label %466
  ]

466:                                              ; preds = %444, %444
  %467 = load i8, i8* @_ZN2v88internal30FLAG_trace_gc_ignore_scavengerE, align 1, !range !2
  %468 = icmp eq i8 %467, 0
  br i1 %468, label %469, label %616

469:                                              ; preds = %444, %466
  %470 = load i8, i8* @_ZN2v88internal17FLAG_trace_gc_nvpE, align 1, !range !2
  %471 = icmp eq i8 %470, 0
  br i1 %471, label %473, label %472

472:                                              ; preds = %469
  tail call void @_ZNK2v88internal8GCTracer8PrintNVPEv(%"class.v8::internal::GCTracer"* %0)
  br label %474

473:                                              ; preds = %469
  tail call void @_ZNK2v88internal8GCTracer5PrintEv(%"class.v8::internal::GCTracer"* %0)
  br label %474

474:                                              ; preds = %473, %472
  %475 = load i8, i8* @_ZN2v88internal13FLAG_trace_gcE, align 1, !range !2
  %476 = icmp eq i8 %475, 0
  br i1 %476, label %479, label %477

477:                                              ; preds = %474
  %478 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %57, align 8
  tail call void @_ZN2v88internal4Heap24PrintShortHeapStatisticsEv(%"class.v8::internal::Heap"* %478) #7
  br label %479

479:                                              ; preds = %474, %477
  %480 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1135", %"struct.std::__1::atomic.1135"* @_ZN2v88internal12TracingFlags2gcE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %481 = and i32 %480, 2
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %616, label %483, !prof !3

483:                                              ; preds = %479
  %484 = bitcast %"class.std::__1::basic_stringstream"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %484) #7
  %485 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 2, i32 0, i32 0
  %486 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %485, align 8
  %487 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %487, align 8
  %488 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 1
  %489 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %488, i64 0, i32 0
  %490 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %491 = bitcast %"class.std::__1::basic_stringstream"* %7 to i64*
  store i64 %490, i64* %491, align 8
  %492 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %493 = bitcast %"class.std::__1::basic_stringstream"* %7 to i8**
  %494 = inttoptr i64 %490 to i8*
  %495 = getelementptr i8, i8* %494, i64 -24
  %496 = bitcast i8* %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = getelementptr inbounds i8, i8* %484, i64 %497
  %499 = bitcast i8* %498 to i64*
  store i64 %492, i64* %499, align 8
  %500 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %500, align 8
  %501 = load i8*, i8** %493, align 8
  %502 = getelementptr i8, i8* %501, i64 -24
  %503 = bitcast i8* %502 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = getelementptr inbounds i8, i8* %484, i64 %504
  %506 = bitcast i8* %505 to %"class.std::__1::ios_base"*
  %507 = bitcast %"class.std::__1::basic_stringbuf"* %488 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %506, i8* %507) #7
  %508 = getelementptr inbounds i8, i8* %505, i64 136
  %509 = bitcast i8* %508 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %509, align 8
  %510 = getelementptr inbounds i8, i8* %505, i64 144
  %511 = bitcast i8* %510 to i32*
  store i32 -1, i32* %511, align 8
  %512 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 0, i32 1
  %513 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 4) to i64*), align 8
  %514 = bitcast %"class.std::__1::basic_ostream.base"* %512 to i64*
  store i64 %513, i64* %514, align 8
  %515 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 5) to i64*), align 8
  %516 = inttoptr i64 %513 to i8*
  %517 = getelementptr i8, i8* %516, i64 -24
  %518 = bitcast i8* %517 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = bitcast %"class.std::__1::basic_ostream.base"* %512 to i8*
  %521 = getelementptr inbounds i8, i8* %520, i64 %519
  %522 = bitcast i8* %521 to i64*
  store i64 %515, i64* %522, align 8
  %523 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  store i64 %523, i64* %491, align 8
  %524 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 6) to i64*), align 8
  %525 = inttoptr i64 %523 to i8*
  %526 = getelementptr i8, i8* %525, i64 -24
  %527 = bitcast i8* %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = getelementptr inbounds i8, i8* %484, i64 %528
  %530 = bitcast i8* %529 to i64*
  store i64 %524, i64* %530, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %486, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %485, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %487, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %489) #7
  %531 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %488, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %531, align 8
  %532 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 1, i32 1
  %533 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 1, i32 3
  %534 = bitcast %"class.std::__1::basic_string"* %532 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %534, i8 0, i64 32, i1 false) #7
  store i32 24, i32* %533, align 8
  %535 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %57, align 8
  call void @_ZN2v88internal4Heap22DumpJSONHeapStatisticsERNSt3__118basic_stringstreamIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.v8::internal::Heap"* %535, %"class.std::__1::basic_stringstream"* nonnull dereferenceable(280) %7) #7
  %536 = load atomic i64, i64* @_ZZN2v88internal8GCTracer4StopENS0_16GarbageCollectorEE28trace_event_unique_atomic432 monotonic, align 8
  %537 = inttoptr i64 %536 to i8*
  %538 = icmp eq i64 %536, 0
  br i1 %538, label %539, label %547

539:                                              ; preds = %483
  %540 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %541 = bitcast %"class.v8::TracingController"* %540 to i8* (%"class.v8::TracingController"*, i8*)***
  %542 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %541, align 8
  %543 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %542, i64 2
  %544 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %543, align 8
  %545 = call i8* %544(%"class.v8::TracingController"* %540, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.136, i64 0, i64 0)) #7
  %546 = ptrtoint i8* %545 to i64
  store atomic volatile i64 %546, i64* @_ZZN2v88internal8GCTracer4StopENS0_16GarbageCollectorEE28trace_event_unique_atomic432 monotonic, align 8
  br label %547

547:                                              ; preds = %483, %539
  %548 = phi i8* [ %537, %483 ], [ %545, %539 ]
  %549 = load atomic i8, i8* %548 monotonic, align 1
  %550 = and i8 %549, 5
  %551 = icmp eq i8 %550, 0
  br i1 %551, label %595, label %552

552:                                              ; preds = %547
  %553 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %553) #7
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.std::__1::basic_stringbuf"* %488) #7
  %554 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %555 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %554, i64 0, i32 1, i32 0
  %556 = load i8, i8* %555, align 1
  %557 = icmp slt i8 %556, 0
  %558 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %559 = load i8*, i8** %558, align 8
  %560 = select i1 %557, i8* %559, i8* %553
  %561 = ptrtoint i8* %560 to i64
  %562 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %562)
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i64 0, i64 0), i8** %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #7
  %563 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %563) #7
  store i8 7, i8* %5, align 1
  store i64 %561, i64* %6, align 8
  %564 = bitcast [2 x %"class.std::__1::unique_ptr.1151"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %564) #7
  %565 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %564, i8 0, i64 16, i1 false) #7
  %566 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %567 = bitcast %"class.v8::TracingController"* %566 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)***
  %568 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*** %567, align 8
  %569 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %568, i64 3
  %570 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %569, align 8
  %571 = call i64 %570(%"class.v8::TracingController"* %566, i8 signext 73, i8* %548, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.137, i64 0, i64 0), i8* null, i64 0, i64 0, i32 1, i8** nonnull %4, i8* nonnull %5, i64* nonnull %6, %"class.std::__1::unique_ptr.1151"* nonnull %565, i32 8) #7
  %572 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 1, i32 0, i32 0, i32 0
  %573 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %572, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %572, align 8
  %574 = icmp eq %"class.v8::ConvertableToTraceFormat"* %573, null
  br i1 %574, label %580, label %575

575:                                              ; preds = %552
  %576 = bitcast %"class.v8::ConvertableToTraceFormat"* %573 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %577 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %576, align 8
  %578 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %577, i64 1
  %579 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %578, align 8
  call void %579(%"class.v8::ConvertableToTraceFormat"* nonnull %573) #7
  br label %580

580:                                              ; preds = %575, %552
  %581 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0
  %582 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %581, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %581, align 16
  %583 = icmp eq %"class.v8::ConvertableToTraceFormat"* %582, null
  br i1 %583, label %589, label %584

584:                                              ; preds = %580
  %585 = bitcast %"class.v8::ConvertableToTraceFormat"* %582 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %586 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %585, align 8
  %587 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %586, i64 1
  %588 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %587, align 8
  call void %588(%"class.v8::ConvertableToTraceFormat"* nonnull %582) #7
  br label %589

589:                                              ; preds = %580, %584
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %564) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %562)
  %590 = load i8, i8* %555, align 1
  %591 = icmp slt i8 %590, 0
  br i1 %591, label %592, label %594

592:                                              ; preds = %589
  %593 = load i8*, i8** %558, align 8
  call void @_ZdlPv(i8* %593) #14
  br label %594

594:                                              ; preds = %589, %592
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %553) #7
  br label %595

595:                                              ; preds = %547, %594
  %596 = load i64, i64* bitcast ([10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %596, i64* %491, align 8
  %597 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 8) to i64*), align 8
  %598 = inttoptr i64 %596 to i8*
  %599 = getelementptr i8, i8* %598, i64 -24
  %600 = bitcast i8* %599 to i64*
  %601 = load i64, i64* %600, align 8
  %602 = getelementptr inbounds i8, i8* %484, i64 %601
  %603 = bitcast i8* %602 to i64*
  store i64 %597, i64* %603, align 8
  %604 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 9) to i64*), align 8
  store i64 %604, i64* %514, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %531, align 8
  %605 = bitcast %"class.std::__1::basic_string"* %532 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %606 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %605, i64 0, i32 1, i32 0
  %607 = load i8, i8* %606, align 1
  %608 = icmp slt i8 %607, 0
  br i1 %608, label %609, label %612

609:                                              ; preds = %595
  %610 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %532, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %611 = load i8*, i8** %610, align 8
  call void @_ZdlPv(i8* %611) #14
  br label %612

612:                                              ; preds = %595, %609
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %489) #7
  %613 = bitcast %"class.std::__1::basic_stringstream"* %7 to %"class.std::__1::basic_iostream"*
  call void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"* nonnull %613, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #7
  %614 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %7, i64 0, i32 2
  %615 = bitcast %"class.std::__1::basic_ios.base"* %614 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %615) #7
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %484) #7
  br label %616

616:                                              ; preds = %466, %479, %612, %13, %35
  ret void
}

declare void @_ZN2v88internal7Isolate18PrintWithTimestampEPKcz(%"class.v8::internal::Isolate"*, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer13AddAllocationEd(%"class.v8::internal::GCTracer"* nocapture, double) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 10
  store double %1, double* %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %5 = load double, double* %4, align 8
  %6 = fcmp ogt double %5, 0.000000e+00
  br i1 %6, label %7, label %77

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 10
  br i1 %12, label %13, label %23

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 8
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %17, i32 0
  store i64 %9, i64* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %17, i32 1
  store double %5, double* %19, align 8
  %20 = load i32, i32* %14, align 8
  %21 = icmp eq i32 %20, 10
  br i1 %21, label %22, label %28

22:                                               ; preds = %13
  store i32 0, i32* %14, align 8
  br label %28

23:                                               ; preds = %7
  %24 = add nsw i32 %11, 1
  store i32 %24, i32* %10, align 4
  %25 = sext i32 %11 to i64
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %25, i32 0
  store i64 %9, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %25, i32 1
  store double %5, double* %27, align 8
  br label %28

28:                                               ; preds = %13, %22, %23
  %29 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 16
  %30 = load i64, i64* %29, align 8
  %31 = bitcast double* %4 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 10
  br i1 %35, label %36, label %47

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %37, align 8
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %40, i32 0
  store i64 %30, i64* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %40, i32 1
  %43 = bitcast double* %42 to i64*
  store i64 %32, i64* %43, align 8
  %44 = load i32, i32* %37, align 8
  %45 = icmp eq i32 %44, 10
  br i1 %45, label %46, label %53

46:                                               ; preds = %36
  store i32 0, i32* %37, align 8
  br label %53

47:                                               ; preds = %28
  %48 = add nsw i32 %34, 1
  store i32 %48, i32* %33, align 4
  %49 = sext i32 %34 to i64
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %49, i32 0
  store i64 %30, i64* %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %49, i32 1
  %52 = bitcast double* %51 to i64*
  store i64 %32, i64* %52, align 8
  br label %53

53:                                               ; preds = %36, %46, %47
  %54 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 17
  %55 = load i64, i64* %54, align 8
  %56 = load i64, i64* %31, align 8
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 10
  br i1 %59, label %60, label %71

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %61, align 8
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %64, i32 0
  store i64 %55, i64* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %64, i32 1
  %67 = bitcast double* %66 to i64*
  store i64 %56, i64* %67, align 8
  %68 = load i32, i32* %61, align 8
  %69 = icmp eq i32 %68, 10
  br i1 %69, label %70, label %77

70:                                               ; preds = %60
  store i32 0, i32* %61, align 8
  br label %77

71:                                               ; preds = %53
  %72 = add nsw i32 %58, 1
  store i32 %72, i32* %57, align 4
  %73 = sext i32 %58 to i64
  %74 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %73, i32 0
  store i64 %55, i64* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %73, i32 1
  %76 = bitcast double* %75 to i64*
  store i64 %56, i64* %76, align 8
  br label %77

77:                                               ; preds = %71, %70, %60, %2
  %78 = bitcast double* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer30FetchBackgroundMinorGCCountersEv(%"class.v8::internal::GCTracer"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %2) #7
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 120, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 120
  %5 = bitcast double* %3 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast double* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fadd <2 x double> %6, %8
  %10 = bitcast double* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 8
  %11 = bitcast double* %3 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 122, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 122
  %14 = bitcast double* %12 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 123
  %17 = bitcast double* %13 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fadd <2 x double> %15, %18
  %20 = bitcast double* %13 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 8
  %21 = bitcast double* %12 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %21, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %2) #7
  %22 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, -41416
  %25 = inttoptr i64 %24 to %"class.v8::internal::Isolate"*
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %25, i64 0, i32 14, i32 0
  %27 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %27, i64 0, i32 2
  %29 = load double, double* %16, align 8
  %30 = fptosi double %29 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %28, i32 %30) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer24RecordMutatorUtilizationEdd(%"class.v8::internal::GCTracer"* nocapture, double, double) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 23
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 0.000000e+00
  br i1 %6, label %32, label %7

7:                                                ; preds = %3
  %8 = fsub double %1, %5
  %9 = fsub double %8, %2
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = extractelement <2 x double> %12, i32 1
  %14 = fcmp oeq double %13, 0.000000e+00
  %15 = extractelement <2 x double> %12, i32 0
  %16 = fcmp oeq double %15, 0.000000e+00
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 21
  store double %2, double* %19, align 8
  store double %9, double* %10, align 8
  br label %27

20:                                               ; preds = %7
  %21 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %22 = insertelement <2 x double> undef, double %9, i32 0
  %23 = insertelement <2 x double> %22, double %2, i32 1
  %24 = fadd <2 x double> %23, %12
  %25 = fmul <2 x double> %24, <double 5.000000e-01, double 5.000000e-01>
  %26 = bitcast double* %21 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 8
  br label %27

27:                                               ; preds = %20, %18
  %28 = fcmp une double %8, 0.000000e+00
  %29 = fdiv double %9, %8
  %30 = select i1 %28, double %29, double 0.000000e+00
  %31 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  store double %30, double* %31, align 8
  br label %32

32:                                               ; preds = %3, %27
  store double %1, double* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer29RecordIncrementalMarkingSpeedEmd(%"class.v8::internal::GCTracer"* nocapture, i64, double) local_unnamed_addr #6 align 2 {
  %4 = fcmp oeq double %2, 0.000000e+00
  %5 = icmp eq i64 %1, 0
  %6 = or i1 %5, %4
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = uitofp i64 %1 to double
  %9 = fdiv double %8, %2
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 6
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  %13 = fadd double %9, %11
  %14 = fmul double %13, 5.000000e-01
  %15 = select i1 %12, double %9, double %14
  store double %15, double* %10, align 8
  br label %16

16:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer19RecordGCSumCountersEd(%"class.v8::internal::GCTracer"*, double) local_unnamed_addr #2 align 2 {
  %3 = alloca [2 x %"class.std::__1::unique_ptr.1151"], align 16
  %4 = alloca <2 x i8*>, align 16
  %5 = alloca [2 x i8], align 1
  %6 = alloca <2 x double>, align 16
  %7 = bitcast <2 x double>* %6 to [2 x i64]*
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %8) #7
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 7, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 8, i32 0
  %12 = load double, double* %11, align 8
  %13 = fadd double %10, %12
  %14 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 9, i32 0
  %15 = load double, double* %14, align 8
  %16 = fadd double %13, %15
  %17 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 5, i32 0
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 116, i32 0
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 117, i32 0
  %24 = load double, double* %23, align 8
  %25 = insertelement <2 x double> undef, double %16, i32 0
  %26 = insertelement <2 x double> %25, double %22, i32 1
  %27 = insertelement <2 x double> undef, double %18, i32 0
  %28 = insertelement <2 x double> %27, double %24, i32 1
  %29 = fadd <2 x double> %26, %28
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 118, i32 0
  %31 = load double, double* %30, align 8
  %32 = insertelement <2 x double> undef, double %20, i32 0
  %33 = insertelement <2 x double> %32, double %31, i32 1
  %34 = fadd <2 x double> %29, %33
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 119, i32 0
  %36 = load double, double* %35, align 8
  %37 = insertelement <2 x double> undef, double %1, i32 0
  %38 = insertelement <2 x double> %37, double %36, i32 1
  %39 = fadd <2 x double> %34, %38
  %40 = fadd double %13, %18
  %41 = fadd double %40, %20
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 24
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, -41416
  %48 = inttoptr i64 %47 to %"class.v8::internal::Isolate"*
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %48, i64 0, i32 14, i32 0
  %50 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %50, i64 0, i32 19
  %52 = extractelement <2 x double> %39, i32 0
  %53 = fptosi double %52 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %51, i32 %53) #7
  %54 = load atomic i64, i64* @_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1291 monotonic, align 8
  %55 = inttoptr i64 %54 to i8*
  %56 = icmp eq i64 %54, 0
  br i1 %56, label %57, label %65

57:                                               ; preds = %2
  %58 = tail call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %59 = bitcast %"class.v8::TracingController"* %58 to i8* (%"class.v8::TracingController"*, i8*)***
  %60 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %59, align 8
  %61 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %60, i64 2
  %62 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %61, align 8
  %63 = tail call i8* %62(%"class.v8::TracingController"* %58, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.136, i64 0, i64 0)) #7
  %64 = ptrtoint i8* %63 to i64
  store atomic volatile i64 %64, i64* @_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1291 monotonic, align 8
  br label %65

65:                                               ; preds = %2, %57
  %66 = phi i8* [ %55, %2 ], [ %63, %57 ]
  %67 = load atomic i8, i8* %66 monotonic, align 1
  %68 = and i8 %67, 5
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %103, label %70

70:                                               ; preds = %65
  %71 = bitcast <2 x i8*>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #7
  %72 = getelementptr inbounds <2 x i8*>, <2 x i8*>* %4, i64 0, i64 0
  store <2 x i8*> <i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.149, i64 0, i64 0)>, <2 x i8*>* %4, align 16
  %73 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %73) #7
  %74 = bitcast <2 x double>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74) #7
  %75 = bitcast <2 x double>* %6 to i64*
  store i8 4, i8* %73, align 1
  %76 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 1
  store i8 4, i8* %76, align 1
  store <2 x double> %39, <2 x double>* %6, align 16
  %77 = bitcast [2 x %"class.std::__1::unique_ptr.1151"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %77) #7
  %78 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %77, i8 0, i64 16, i1 false) #7
  %79 = tail call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %80 = bitcast %"class.v8::TracingController"* %79 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)***
  %81 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*** %80, align 8
  %82 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %81, i64 3
  %83 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %82, align 8
  %84 = call i64 %83(%"class.v8::TracingController"* %79, i8 signext 73, i8* %66, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.147, i64 0, i64 0), i8* null, i64 0, i64 0, i32 2, i8** nonnull %72, i8* nonnull %73, i64* nonnull %75, %"class.std::__1::unique_ptr.1151"* nonnull %78, i32 8) #7
  %85 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 1, i32 0, i32 0, i32 0
  %86 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %85, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %85, align 8
  %87 = icmp eq %"class.v8::ConvertableToTraceFormat"* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %70
  %89 = bitcast %"class.v8::ConvertableToTraceFormat"* %86 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %90 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %90, i64 1
  %92 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %91, align 8
  call void %92(%"class.v8::ConvertableToTraceFormat"* nonnull %86) #7
  br label %93

93:                                               ; preds = %88, %70
  %94 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %94, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %94, align 16
  %96 = icmp eq %"class.v8::ConvertableToTraceFormat"* %95, null
  br i1 %96, label %102, label %97

97:                                               ; preds = %93
  %98 = bitcast %"class.v8::ConvertableToTraceFormat"* %95 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %99 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %98, align 8
  %100 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %99, i64 1
  %101 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %100, align 8
  call void %101(%"class.v8::ConvertableToTraceFormat"* nonnull %95) #7
  br label %102

102:                                              ; preds = %93, %97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %77) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %73) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #7
  br label %103

103:                                              ; preds = %65, %102
  %104 = load atomic i64, i64* @_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1295 monotonic, align 8
  %105 = inttoptr i64 %104 to i8*
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %109 = bitcast %"class.v8::TracingController"* %108 to i8* (%"class.v8::TracingController"*, i8*)***
  %110 = load i8* (%"class.v8::TracingController"*, i8*)**, i8* (%"class.v8::TracingController"*, i8*)*** %109, align 8
  %111 = getelementptr inbounds i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %110, i64 2
  %112 = load i8* (%"class.v8::TracingController"*, i8*)*, i8* (%"class.v8::TracingController"*, i8*)** %111, align 8
  %113 = call i8* %112(%"class.v8::TracingController"* %108, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.136, i64 0, i64 0)) #7
  %114 = ptrtoint i8* %113 to i64
  store atomic volatile i64 %114, i64* @_ZZN2v88internal8GCTracer19RecordGCSumCountersEdE29trace_event_unique_atomic1295 monotonic, align 8
  br label %115

115:                                              ; preds = %103, %107
  %116 = phi i8* [ %105, %103 ], [ %113, %107 ]
  %117 = load atomic i8, i8* %116 monotonic, align 1
  %118 = and i8 %117, 5
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %156, label %120

120:                                              ; preds = %115
  %121 = bitcast <2 x i8*>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #7
  %122 = getelementptr inbounds <2 x i8*>, <2 x i8*>* %4, i64 0, i64 0
  store <2 x i8*> <i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.149, i64 0, i64 0)>, <2 x i8*>* %4, align 16
  %123 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %123) #7
  %124 = bitcast <2 x double>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124) #7
  %125 = bitcast <2 x double>* %6 to i64*
  store i8 4, i8* %123, align 1
  %126 = getelementptr inbounds <2 x double>, <2 x double>* %6, i64 0, i64 0
  store double %44, double* %126, align 16
  %127 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 1
  %128 = getelementptr inbounds [2 x i64], [2 x i64]* %7, i64 0, i64 1
  store i8 4, i8* %127, align 1
  %129 = bitcast i64* %128 to double*
  store double %31, double* %129, align 8
  %130 = bitcast [2 x %"class.std::__1::unique_ptr.1151"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %130) #7
  %131 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %130, i8 0, i64 16, i1 false) #7
  %132 = call %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() #7
  %133 = bitcast %"class.v8::TracingController"* %132 to i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)***
  %134 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)**, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*** %133, align 8
  %135 = getelementptr inbounds i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %134, i64 3
  %136 = load i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)*, i64 (%"class.v8::TracingController"*, i8, i8*, i8*, i8*, i64, i64, i32, i8**, i8*, i64*, %"class.std::__1::unique_ptr.1151"*, i32)** %135, align 8
  %137 = call i64 %136(%"class.v8::TracingController"* %132, i8 signext 73, i8* %116, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.150, i64 0, i64 0), i8* null, i64 0, i64 0, i32 2, i8** nonnull %122, i8* nonnull %123, i64* nonnull %125, %"class.std::__1::unique_ptr.1151"* nonnull %131, i32 8) #7
  %138 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 1, i32 0, i32 0, i32 0
  %139 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %138, align 8
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %138, align 8
  %140 = icmp eq %"class.v8::ConvertableToTraceFormat"* %139, null
  br i1 %140, label %146, label %141

141:                                              ; preds = %120
  %142 = bitcast %"class.v8::ConvertableToTraceFormat"* %139 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %143 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %143, i64 1
  %145 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %144, align 8
  call void %145(%"class.v8::ConvertableToTraceFormat"* nonnull %139) #7
  br label %146

146:                                              ; preds = %141, %120
  %147 = getelementptr inbounds [2 x %"class.std::__1::unique_ptr.1151"], [2 x %"class.std::__1::unique_ptr.1151"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0
  %148 = load %"class.v8::ConvertableToTraceFormat"*, %"class.v8::ConvertableToTraceFormat"** %147, align 16
  store %"class.v8::ConvertableToTraceFormat"* null, %"class.v8::ConvertableToTraceFormat"** %147, align 16
  %149 = icmp eq %"class.v8::ConvertableToTraceFormat"* %148, null
  br i1 %149, label %155, label %150

150:                                              ; preds = %146
  %151 = bitcast %"class.v8::ConvertableToTraceFormat"* %148 to void (%"class.v8::ConvertableToTraceFormat"*)***
  %152 = load void (%"class.v8::ConvertableToTraceFormat"*)**, void (%"class.v8::ConvertableToTraceFormat"*)*** %151, align 8
  %153 = getelementptr inbounds void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %152, i64 1
  %154 = load void (%"class.v8::ConvertableToTraceFormat"*)*, void (%"class.v8::ConvertableToTraceFormat"*)** %153, align 8
  call void %154(%"class.v8::ConvertableToTraceFormat"* nonnull %148) #7
  br label %155

155:                                              ; preds = %146, %150
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %130) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %123) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #7
  br label %156

156:                                              ; preds = %115, %155
  call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer34FetchBackgroundMarkCompactCountersEv(%"class.v8::internal::GCTracer"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %2) #7
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 116, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 116
  %5 = bitcast double* %3 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast double* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fadd <2 x double> %6, %8
  %10 = bitcast double* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 8
  %11 = bitcast double* %3 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 118, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 118
  %14 = bitcast double* %12 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 119
  %17 = bitcast double* %13 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fadd <2 x double> %15, %18
  %20 = bitcast double* %13 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 8
  %21 = bitcast double* %12 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %21, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %2) #7
  %22 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, -41416
  %25 = inttoptr i64 %24 to %"class.v8::internal::Isolate"*
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %25, i64 0, i32 14, i32 0
  %27 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %27, i64 0, i32 1
  %29 = load double, double* %13, align 8
  %30 = fptosi double %29 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %28, i32 %30) #7
  %31 = load i64, i64* %22, align 8
  %32 = add i64 %31, -41416
  %33 = inttoptr i64 %32 to %"class.v8::internal::Isolate"*
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %33, i64 0, i32 14, i32 0
  %35 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %35, i64 0, i32 3
  %37 = load double, double* %16, align 8
  %38 = fptosi double %37 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %36, i32 %38) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer30FetchBackgroundGeneralCountersEv(%"class.v8::internal::GCTracer"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %2) #7
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 110, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 110
  %5 = bitcast double* %3 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = bitcast double* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fadd <2 x double> %6, %8
  %10 = bitcast double* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 8
  %11 = bitcast double* %3 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 112, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 112
  %14 = bitcast double* %12 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = bitcast double* %13 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = fadd <2 x double> %15, %17
  %19 = bitcast double* %13 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 8
  %20 = bitcast double* %12 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %20, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %2) #7
  ret void
}

declare void @_ZN2v88internal4Heap17UpdateTotalGCTimeEd(%"class.v8::internal::Heap"*, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal8GCTracer8PrintNVPEv(%"class.v8::internal::GCTracer"* readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 4
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  %5 = load double, double* %4, align 8
  %6 = fsub double %3, %5
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 2, i32 4
  %8 = load double, double* %7, align 8
  %9 = fsub double %5, %8
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 6
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 2, i32 7
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  switch i32 %16, label %740 [
    i32 2, label %17
    i32 0, label %21
    i32 3, label %299
    i32 1, label %353
    i32 4, label %741
  ]

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 5
  %19 = load double, double* %18, align 8
  %20 = fsub double %3, %19
  br label %353

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %23 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %22, align 8
  %24 = ptrtoint %"class.v8::internal::Heap"* %23 to i64
  %25 = add i64 %24, -41416
  %26 = inttoptr i64 %25 to %"class.v8::internal::Isolate"*
  %27 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 5
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 108
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 17
  %33 = load double, double* %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 11
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 12
  %37 = load double, double* %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 15
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 14
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 16
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 96
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 95
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 98
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 97
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 102
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 105
  %55 = load double, double* %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 99
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 100
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 101
  %61 = load double, double* %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 104
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 107
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 123
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 113
  %69 = load double, double* %68, align 8
  %70 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 109
  %71 = load double, double* %70, align 8
  %72 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 2
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 0
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = add nsw i32 %79, %77
  %81 = add nsw i32 %80, -1
  %82 = icmp sgt i32 %79, 0
  br i1 %82, label %83, label %144

83:                                               ; preds = %21
  %84 = icmp sgt i32 %81, 9
  %85 = add nsw i32 %80, -11
  %86 = select i1 %84, i32 %85, i32 %81
  %87 = and i32 %79, 1
  %88 = icmp eq i32 %79, 1
  br i1 %88, label %118, label %89

89:                                               ; preds = %83
  %90 = sub i32 %79, %87
  br label %91

91:                                               ; preds = %91, %89
  %92 = phi i32 [ %86, %89 ], [ %115, %91 ]
  %93 = phi double [ 0.000000e+00, %89 ], [ %111, %91 ]
  %94 = phi i64 [ 0, %89 ], [ %112, %91 ]
  %95 = phi i32 [ %90, %89 ], [ %116, %91 ]
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %96, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %96, i32 1
  %100 = load double, double* %99, align 8
  %101 = fadd double %93, %100
  %102 = add i64 %98, %94
  %103 = add nsw i32 %92, -1
  %104 = icmp eq i32 %92, 0
  %105 = select i1 %104, i32 9, i32 %103
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %106, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %106, i32 1
  %110 = load double, double* %109, align 8
  %111 = fadd double %101, %110
  %112 = add i64 %108, %102
  %113 = add nsw i32 %105, -1
  %114 = icmp eq i32 %105, 0
  %115 = select i1 %114, i32 9, i32 %113
  %116 = add i32 %95, -2
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %91

118:                                              ; preds = %91, %83
  %119 = phi double [ undef, %83 ], [ %111, %91 ]
  %120 = phi i64 [ undef, %83 ], [ %112, %91 ]
  %121 = phi i32 [ %86, %83 ], [ %115, %91 ]
  %122 = phi double [ 0.000000e+00, %83 ], [ %111, %91 ]
  %123 = phi i64 [ 0, %83 ], [ %112, %91 ]
  %124 = icmp eq i32 %87, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %118
  %126 = sext i32 %121 to i64
  %127 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %126, i32 0
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %128, %123
  %130 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %126, i32 1
  %131 = load double, double* %130, align 8
  %132 = fadd double %122, %131
  br label %133

133:                                              ; preds = %118, %125
  %134 = phi double [ %119, %118 ], [ %132, %125 ]
  %135 = phi i64 [ %120, %118 ], [ %129, %125 ]
  %136 = fcmp oeq double %134, 0.000000e+00
  br i1 %136, label %144, label %137

137:                                              ; preds = %133
  %138 = uitofp i64 %135 to double
  %139 = fdiv double %138, %134
  %140 = fcmp ult double %139, 0x41D0000000000000
  %141 = fcmp ole double %139, 1.000000e+00
  %142 = select i1 %141, double 1.000000e+00, double %139
  %143 = select i1 %140, double %142, double 0x41D0000000000000
  br label %144

144:                                              ; preds = %21, %133, %137
  %145 = phi double [ 0.000000e+00, %133 ], [ %143, %137 ], [ 0.000000e+00, %21 ]
  %146 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 10
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 11
  %151 = load i64, i64* %150, align 8
  %152 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 67
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 70
  %155 = load i64, i64* %154, align 8
  %156 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 73
  %157 = load i32, i32* %156, align 8
  %158 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 74
  %159 = load i32, i32* %158, align 4
  %160 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 75
  %161 = load i32, i32* %160, align 8
  %162 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 68
  %163 = load double, double* %162, align 8
  %164 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %215, label %167

167:                                              ; preds = %144
  %168 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  %169 = load i32, i32* %168, align 8
  %170 = add nsw i32 %169, %165
  %171 = add nsw i32 %170, -1
  %172 = icmp sgt i32 %165, 0
  br i1 %172, label %173, label %211

173:                                              ; preds = %167
  %174 = icmp sgt i32 %171, 9
  %175 = add nsw i32 %170, -11
  %176 = select i1 %174, i32 %175, i32 %171
  %177 = and i32 %165, 1
  %178 = icmp eq i32 %165, 1
  br i1 %178, label %201, label %179

179:                                              ; preds = %173
  %180 = sub i32 %165, %177
  br label %181

181:                                              ; preds = %181, %179
  %182 = phi double [ 0.000000e+00, %179 ], [ %195, %181 ]
  %183 = phi i32 [ %176, %179 ], [ %198, %181 ]
  %184 = phi i32 [ %180, %179 ], [ %199, %181 ]
  %185 = sext i32 %183 to i64
  %186 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %185
  %187 = load double, double* %186, align 8
  %188 = fadd double %182, %187
  %189 = add nsw i32 %183, -1
  %190 = icmp eq i32 %183, 0
  %191 = select i1 %190, i32 9, i32 %189
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %192
  %194 = load double, double* %193, align 8
  %195 = fadd double %188, %194
  %196 = add nsw i32 %191, -1
  %197 = icmp eq i32 %191, 0
  %198 = select i1 %197, i32 9, i32 %196
  %199 = add i32 %184, -2
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %181

201:                                              ; preds = %181, %173
  %202 = phi double [ undef, %173 ], [ %195, %181 ]
  %203 = phi double [ 0.000000e+00, %173 ], [ %195, %181 ]
  %204 = phi i32 [ %176, %173 ], [ %198, %181 ]
  %205 = icmp eq i32 %177, 0
  br i1 %205, label %211, label %206

206:                                              ; preds = %201
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %207
  %209 = load double, double* %208, align 8
  %210 = fadd double %203, %209
  br label %211

211:                                              ; preds = %206, %201, %167
  %212 = phi double [ 0.000000e+00, %167 ], [ %202, %201 ], [ %210, %206 ]
  %213 = sitofp i32 %165 to double
  %214 = fdiv double %212, %213
  br label %215

215:                                              ; preds = %144, %211
  %216 = phi double [ %214, %211 ], [ 0.000000e+00, %144 ]
  %217 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 69
  %218 = load double, double* %217, align 8
  %219 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 72
  %220 = load double, double* %219, align 8
  %221 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %222 = load i64, i64* %221, align 8
  %223 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %224 = load double, double* %223, align 8
  %225 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  %226 = load i32, i32* %225, align 8
  %227 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  %228 = load i32, i32* %227, align 4
  %229 = add nsw i32 %228, %226
  %230 = add nsw i32 %229, -1
  %231 = icmp sgt i32 %228, 0
  br i1 %231, label %232, label %282

232:                                              ; preds = %215
  %233 = icmp sgt i32 %230, 9
  %234 = add nsw i32 %229, -11
  %235 = select i1 %233, i32 %234, i32 %230
  %236 = and i32 %228, 1
  %237 = icmp eq i32 %228, 1
  br i1 %237, label %267, label %238

238:                                              ; preds = %232
  %239 = sub i32 %228, %236
  br label %240

240:                                              ; preds = %240, %238
  %241 = phi i32 [ %235, %238 ], [ %264, %240 ]
  %242 = phi double [ %224, %238 ], [ %260, %240 ]
  %243 = phi i64 [ %222, %238 ], [ %261, %240 ]
  %244 = phi i32 [ %239, %238 ], [ %265, %240 ]
  %245 = sext i32 %241 to i64
  %246 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %245, i32 0
  %247 = load i64, i64* %246, align 8
  %248 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %245, i32 1
  %249 = load double, double* %248, align 8
  %250 = fadd double %242, %249
  %251 = add i64 %247, %243
  %252 = add nsw i32 %241, -1
  %253 = icmp eq i32 %241, 0
  %254 = select i1 %253, i32 9, i32 %252
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %255, i32 0
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %255, i32 1
  %259 = load double, double* %258, align 8
  %260 = fadd double %250, %259
  %261 = add i64 %257, %251
  %262 = add nsw i32 %254, -1
  %263 = icmp eq i32 %254, 0
  %264 = select i1 %263, i32 9, i32 %262
  %265 = add i32 %244, -2
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %240

267:                                              ; preds = %240, %232
  %268 = phi double [ undef, %232 ], [ %260, %240 ]
  %269 = phi i64 [ undef, %232 ], [ %261, %240 ]
  %270 = phi i32 [ %235, %232 ], [ %264, %240 ]
  %271 = phi double [ %224, %232 ], [ %260, %240 ]
  %272 = phi i64 [ %222, %232 ], [ %261, %240 ]
  %273 = icmp eq i32 %236, 0
  br i1 %273, label %282, label %274

274:                                              ; preds = %267
  %275 = sext i32 %270 to i64
  %276 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %275, i32 0
  %277 = load i64, i64* %276, align 8
  %278 = add i64 %277, %272
  %279 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %275, i32 1
  %280 = load double, double* %279, align 8
  %281 = fadd double %271, %280
  br label %282

282:                                              ; preds = %274, %267, %215
  %283 = phi i64 [ %222, %215 ], [ %269, %267 ], [ %278, %274 ]
  %284 = phi double [ %224, %215 ], [ %268, %267 ], [ %281, %274 ]
  %285 = fcmp oeq double %284, 0.000000e+00
  br i1 %285, label %293, label %286

286:                                              ; preds = %282
  %287 = uitofp i64 %283 to double
  %288 = fdiv double %287, %284
  %289 = fcmp ult double %288, 0x41D0000000000000
  %290 = fcmp ole double %288, 1.000000e+00
  %291 = select i1 %290, double 1.000000e+00, double %288
  %292 = select i1 %289, double %291, double 0x41D0000000000000
  br label %293

293:                                              ; preds = %282, %286
  %294 = phi double [ 0.000000e+00, %282 ], [ %292, %286 ]
  %295 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 85, i32 0, i32 0, i32 0
  %296 = load %"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::MemoryAllocator"** %295, align 8
  %297 = getelementptr inbounds %"class.v8::internal::MemoryAllocator", %"class.v8::internal::MemoryAllocator"* %296, i64 0, i32 9
  %298 = tail call i32 @_ZN2v88internal15MemoryAllocator8Unmapper14NumberOfChunksEv(%"class.v8::internal::MemoryAllocator::Unmapper"* %297) #7
  tail call void (%"class.v8::internal::Isolate"*, i8*, ...) @_ZN2v88internal7Isolate18PrintWithTimestampEPKcz(%"class.v8::internal::Isolate"* %26, i8* getelementptr inbounds ([1055 x i8], [1055 x i8]* @.str.144, i64 0, i64 0), double %6, double %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i64 0, i64 0), i32 %29, double %31, double %33, double %35, double %37, double %39, double %41, double %43, double %45, double %47, double %49, double %51, double %53, double %55, double %57, double %59, double %61, double %63, double %65, double %67, double %69, double %71, i32 %73, double %75, double %145, i64 %11, i64 %147, i64 %149, i64 %151, i64 %14, i64 %153, i64 %155, i32 %157, i32 %159, i32 %161, double %163, double %216, double %218, double %220, double %294, i32 %298) #7
  br label %741

299:                                              ; preds = %1
  %300 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = add i64 %301, -41416
  %303 = inttoptr i64 %302 to %"class.v8::internal::Isolate"*
  %304 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 5
  %305 = load i8, i8* %304, align 8, !range !2
  %306 = zext i8 %305 to i32
  %307 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 68
  %308 = load double, double* %307, align 8
  %309 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 93
  %310 = load double, double* %309, align 8
  %311 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 108
  %312 = load double, double* %311, align 8
  %313 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 85
  %314 = load double, double* %313, align 8
  %315 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 88
  %316 = load double, double* %315, align 8
  %317 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 89
  %318 = load double, double* %317, align 8
  %319 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 90
  %320 = load double, double* %319, align 8
  %321 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 86
  %322 = load double, double* %321, align 8
  %323 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 69
  %324 = load double, double* %323, align 8
  %325 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 70
  %326 = load double, double* %325, align 8
  %327 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 71
  %328 = load double, double* %327, align 8
  %329 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 73
  %330 = load double, double* %329, align 8
  %331 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 75
  %332 = load double, double* %331, align 8
  %333 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 80
  %334 = load double, double* %333, align 8
  %335 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 83
  %336 = load double, double* %335, align 8
  %337 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 82
  %338 = load double, double* %337, align 8
  %339 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 122
  %340 = load double, double* %339, align 8
  %341 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 120
  %342 = load double, double* %341, align 8
  %343 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 121
  %344 = load double, double* %343, align 8
  %345 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 113
  %346 = load double, double* %345, align 8
  %347 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 109
  %348 = load double, double* %347, align 8
  %349 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 91
  %350 = load double, double* %349, align 8
  %351 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 92
  %352 = load double, double* %351, align 8
  tail call void (%"class.v8::internal::Isolate"*, i8*, ...) @_ZN2v88internal7Isolate18PrintWithTimestampEPKcz(%"class.v8::internal::Isolate"* %303, i8* getelementptr inbounds ([563 x i8], [563 x i8]* @.str.145, i64 0, i64 0), double %6, double %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i64 0, i64 0), i32 %306, double %308, double %310, double %312, double %314, double %316, double %318, double %320, double %322, double %324, double %326, double %328, double %330, double %332, double %334, double %336, double %338, double %340, double %342, double %344, double %346, double %348, double %350, double %352) #7
  br label %741

353:                                              ; preds = %1, %17
  %354 = phi double [ %20, %17 ], [ 0.000000e+00, %1 ]
  %355 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %356 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %355, align 8
  %357 = ptrtoint %"class.v8::internal::Heap"* %356 to i64
  %358 = add i64 %357, -41416
  %359 = inttoptr i64 %358 to %"class.v8::internal::Isolate"*
  %360 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 5
  %361 = load i8, i8* %360, align 8, !range !2
  %362 = zext i8 %361 to i32
  %363 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 108
  %364 = load double, double* %363, align 8
  %365 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 17
  %366 = load double, double* %365, align 8
  %367 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 10
  %368 = load double, double* %367, align 8
  %369 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 11
  %370 = load double, double* %369, align 8
  %371 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 12
  %372 = load double, double* %371, align 8
  %373 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 15
  %374 = load double, double* %373, align 8
  %375 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 14
  %376 = load double, double* %375, align 8
  %377 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 16
  %378 = load double, double* %377, align 8
  %379 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 20
  %380 = load double, double* %379, align 8
  %381 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 27
  %382 = load double, double* %381, align 8
  %383 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 30
  %384 = load double, double* %383, align 8
  %385 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 31
  %386 = load double, double* %385, align 8
  %387 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 32
  %388 = load double, double* %387, align 8
  %389 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 33
  %390 = load double, double* %389, align 8
  %391 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 34
  %392 = load double, double* %391, align 8
  %393 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 35
  %394 = load double, double* %393, align 8
  %395 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 36
  %396 = load double, double* %395, align 8
  %397 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 21
  %398 = load double, double* %397, align 8
  %399 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 22
  %400 = load double, double* %399, align 8
  %401 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 38
  %402 = load double, double* %401, align 8
  %403 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 39
  %404 = load double, double* %403, align 8
  %405 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 40
  %406 = load double, double* %405, align 8
  %407 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 43
  %408 = load double, double* %407, align 8
  %409 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 42
  %410 = load double, double* %409, align 8
  %411 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 44
  %412 = load double, double* %411, align 8
  %413 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 45
  %414 = load double, double* %413, align 8
  %415 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 48
  %416 = load double, double* %415, align 8
  %417 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 47
  %418 = load double, double* %417, align 8
  %419 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 49
  %420 = load double, double* %419, align 8
  %421 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 23
  %422 = load double, double* %421, align 8
  %423 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 50
  %424 = load double, double* %423, align 8
  %425 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 24
  %426 = load double, double* %425, align 8
  %427 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 54
  %428 = load double, double* %427, align 8
  %429 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 56
  %430 = load double, double* %429, align 8
  %431 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 55
  %432 = load double, double* %431, align 8
  %433 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 57
  %434 = load double, double* %433, align 8
  %435 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 58
  %436 = load double, double* %435, align 8
  %437 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 59
  %438 = load double, double* %437, align 8
  %439 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 60
  %440 = load double, double* %439, align 8
  %441 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 61
  %442 = load double, double* %441, align 8
  %443 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 62
  %444 = load double, double* %443, align 8
  %445 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 63
  %446 = load double, double* %445, align 8
  %447 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 51
  %448 = load double, double* %447, align 8
  %449 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 52
  %450 = load double, double* %449, align 8
  %451 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 25
  %452 = load double, double* %451, align 8
  %453 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 26
  %454 = load double, double* %453, align 8
  %455 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 64
  %456 = load double, double* %455, align 8
  %457 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 65
  %458 = load double, double* %457, align 8
  %459 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 66
  %460 = load double, double* %459, align 8
  %461 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 0
  %462 = load double, double* %461, align 8
  %463 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 5
  %464 = load double, double* %463, align 8
  %465 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 6
  %466 = load double, double* %465, align 8
  %467 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 4
  %468 = load double, double* %467, align 8
  %469 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 3
  %470 = load double, double* %469, align 8
  %471 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 7
  %472 = load double, double* %471, align 8
  %473 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 8
  %474 = load double, double* %473, align 8
  %475 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 9
  %476 = load double, double* %475, align 8
  %477 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 1
  %478 = load double, double* %477, align 8
  %479 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 2
  %480 = load double, double* %479, align 8
  %481 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 2, i32 1
  %482 = load double, double* %481, align 8
  %483 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6, i32 1
  %484 = load double, double* %483, align 8
  %485 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 6, i32 2
  %486 = load i32, i32* %485, align 8
  %487 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 1
  %488 = load double, double* %487, align 8
  %489 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 2
  %490 = load i32, i32* %489, align 8
  %491 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 6
  %492 = load double, double* %491, align 8
  %493 = fcmp une double %492, 0.000000e+00
  br i1 %493, label %503, label %494

494:                                              ; preds = %353
  %495 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %496 = load double, double* %495, align 8
  %497 = fcmp une double %496, 0.000000e+00
  br i1 %497, label %498, label %503

498:                                              ; preds = %494
  %499 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %500 = load i64, i64* %499, align 8
  %501 = uitofp i64 %500 to double
  %502 = fdiv double %501, %496
  br label %503

503:                                              ; preds = %353, %494, %498
  %504 = phi double [ %502, %498 ], [ %492, %353 ], [ 1.310720e+05, %494 ]
  %505 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 118
  %506 = load double, double* %505, align 8
  %507 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 119
  %508 = load double, double* %507, align 8
  %509 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 116
  %510 = load double, double* %509, align 8
  %511 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 117
  %512 = load double, double* %511, align 8
  %513 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 113
  %514 = load double, double* %513, align 8
  %515 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 109
  %516 = load double, double* %515, align 8
  %517 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  %518 = load i64, i64* %517, align 8
  %519 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 10
  %520 = load i64, i64* %519, align 8
  %521 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 11
  %522 = load i64, i64* %521, align 8
  %523 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 67
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 70
  %526 = load i64, i64* %525, align 8
  %527 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 73
  %528 = load i32, i32* %527, align 8
  %529 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 74
  %530 = load i32, i32* %529, align 4
  %531 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 75
  %532 = load i32, i32* %531, align 8
  %533 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 68
  %534 = load double, double* %533, align 8
  %535 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  %536 = load i32, i32* %535, align 4
  %537 = icmp eq i32 %536, 0
  br i1 %537, label %586, label %538

538:                                              ; preds = %503
  %539 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  %540 = load i32, i32* %539, align 8
  %541 = add nsw i32 %540, %536
  %542 = add nsw i32 %541, -1
  %543 = icmp sgt i32 %536, 0
  br i1 %543, label %544, label %582

544:                                              ; preds = %538
  %545 = icmp sgt i32 %542, 9
  %546 = add nsw i32 %541, -11
  %547 = select i1 %545, i32 %546, i32 %542
  %548 = and i32 %536, 1
  %549 = icmp eq i32 %536, 1
  br i1 %549, label %572, label %550

550:                                              ; preds = %544
  %551 = sub i32 %536, %548
  br label %552

552:                                              ; preds = %552, %550
  %553 = phi double [ 0.000000e+00, %550 ], [ %566, %552 ]
  %554 = phi i32 [ %547, %550 ], [ %569, %552 ]
  %555 = phi i32 [ %551, %550 ], [ %570, %552 ]
  %556 = sext i32 %554 to i64
  %557 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %556
  %558 = load double, double* %557, align 8
  %559 = fadd double %553, %558
  %560 = add nsw i32 %554, -1
  %561 = icmp eq i32 %554, 0
  %562 = select i1 %561, i32 9, i32 %560
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %563
  %565 = load double, double* %564, align 8
  %566 = fadd double %559, %565
  %567 = add nsw i32 %562, -1
  %568 = icmp eq i32 %562, 0
  %569 = select i1 %568, i32 9, i32 %567
  %570 = add i32 %555, -2
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %572, label %552

572:                                              ; preds = %552, %544
  %573 = phi double [ undef, %544 ], [ %566, %552 ]
  %574 = phi double [ 0.000000e+00, %544 ], [ %566, %552 ]
  %575 = phi i32 [ %547, %544 ], [ %569, %552 ]
  %576 = icmp eq i32 %548, 0
  br i1 %576, label %582, label %577

577:                                              ; preds = %572
  %578 = sext i32 %575 to i64
  %579 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %578
  %580 = load double, double* %579, align 8
  %581 = fadd double %574, %580
  br label %582

582:                                              ; preds = %577, %572, %538
  %583 = phi double [ 0.000000e+00, %538 ], [ %573, %572 ], [ %581, %577 ]
  %584 = sitofp i32 %536 to double
  %585 = fdiv double %583, %584
  br label %586

586:                                              ; preds = %503, %582
  %587 = phi double [ %585, %582 ], [ 0.000000e+00, %503 ]
  %588 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 69
  %589 = load double, double* %588, align 8
  %590 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 72
  %591 = load double, double* %590, align 8
  %592 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %593 = load i64, i64* %592, align 8
  %594 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %595 = load double, double* %594, align 8
  %596 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  %597 = load i32, i32* %596, align 8
  %598 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  %599 = load i32, i32* %598, align 4
  %600 = add nsw i32 %599, %597
  %601 = add nsw i32 %600, -1
  %602 = icmp sgt i32 %599, 0
  br i1 %602, label %603, label %653

603:                                              ; preds = %586
  %604 = icmp sgt i32 %601, 9
  %605 = add nsw i32 %600, -11
  %606 = select i1 %604, i32 %605, i32 %601
  %607 = and i32 %599, 1
  %608 = icmp eq i32 %599, 1
  br i1 %608, label %638, label %609

609:                                              ; preds = %603
  %610 = sub i32 %599, %607
  br label %611

611:                                              ; preds = %611, %609
  %612 = phi i32 [ %606, %609 ], [ %635, %611 ]
  %613 = phi double [ %595, %609 ], [ %631, %611 ]
  %614 = phi i64 [ %593, %609 ], [ %632, %611 ]
  %615 = phi i32 [ %610, %609 ], [ %636, %611 ]
  %616 = sext i32 %612 to i64
  %617 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %616, i32 0
  %618 = load i64, i64* %617, align 8
  %619 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %616, i32 1
  %620 = load double, double* %619, align 8
  %621 = fadd double %613, %620
  %622 = add i64 %618, %614
  %623 = add nsw i32 %612, -1
  %624 = icmp eq i32 %612, 0
  %625 = select i1 %624, i32 9, i32 %623
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %626, i32 0
  %628 = load i64, i64* %627, align 8
  %629 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %626, i32 1
  %630 = load double, double* %629, align 8
  %631 = fadd double %621, %630
  %632 = add i64 %628, %622
  %633 = add nsw i32 %625, -1
  %634 = icmp eq i32 %625, 0
  %635 = select i1 %634, i32 9, i32 %633
  %636 = add i32 %615, -2
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %638, label %611

638:                                              ; preds = %611, %603
  %639 = phi double [ undef, %603 ], [ %631, %611 ]
  %640 = phi i64 [ undef, %603 ], [ %632, %611 ]
  %641 = phi i32 [ %606, %603 ], [ %635, %611 ]
  %642 = phi double [ %595, %603 ], [ %631, %611 ]
  %643 = phi i64 [ %593, %603 ], [ %632, %611 ]
  %644 = icmp eq i32 %607, 0
  br i1 %644, label %653, label %645

645:                                              ; preds = %638
  %646 = sext i32 %641 to i64
  %647 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %646, i32 0
  %648 = load i64, i64* %647, align 8
  %649 = add i64 %648, %643
  %650 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %646, i32 1
  %651 = load double, double* %650, align 8
  %652 = fadd double %642, %651
  br label %653

653:                                              ; preds = %645, %638, %586
  %654 = phi i64 [ %593, %586 ], [ %640, %638 ], [ %649, %645 ]
  %655 = phi double [ %595, %586 ], [ %639, %638 ], [ %652, %645 ]
  %656 = fcmp oeq double %655, 0.000000e+00
  br i1 %656, label %664, label %657

657:                                              ; preds = %653
  %658 = uitofp i64 %654 to double
  %659 = fdiv double %658, %655
  %660 = fcmp ult double %659, 0x41D0000000000000
  %661 = fcmp ole double %659, 1.000000e+00
  %662 = select i1 %661, double 1.000000e+00, double %659
  %663 = select i1 %660, double %662, double 0x41D0000000000000
  br label %664

664:                                              ; preds = %653, %657
  %665 = phi double [ 0.000000e+00, %653 ], [ %663, %657 ]
  %666 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %356, i64 0, i32 85, i32 0, i32 0, i32 0
  %667 = load %"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::MemoryAllocator"** %666, align 8
  %668 = getelementptr inbounds %"class.v8::internal::MemoryAllocator", %"class.v8::internal::MemoryAllocator"* %667, i64 0, i32 9
  %669 = tail call i32 @_ZN2v88internal15MemoryAllocator8Unmapper14NumberOfChunksEv(%"class.v8::internal::MemoryAllocator::Unmapper"* %668) #7
  %670 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 1
  %671 = load i32, i32* %670, align 8
  %672 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 2
  %673 = load i32, i32* %672, align 4
  %674 = add nsw i32 %673, %671
  %675 = add nsw i32 %674, -1
  %676 = icmp sgt i32 %673, 0
  br i1 %676, label %677, label %738

677:                                              ; preds = %664
  %678 = icmp sgt i32 %675, 9
  %679 = add nsw i32 %674, -11
  %680 = select i1 %678, i32 %679, i32 %675
  %681 = and i32 %673, 1
  %682 = icmp eq i32 %673, 1
  br i1 %682, label %712, label %683

683:                                              ; preds = %677
  %684 = sub i32 %673, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i32 [ %680, %683 ], [ %709, %685 ]
  %687 = phi double [ 0.000000e+00, %683 ], [ %705, %685 ]
  %688 = phi i64 [ 0, %683 ], [ %706, %685 ]
  %689 = phi i32 [ %684, %683 ], [ %710, %685 ]
  %690 = sext i32 %686 to i64
  %691 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %690, i32 0
  %692 = load i64, i64* %691, align 8
  %693 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %690, i32 1
  %694 = load double, double* %693, align 8
  %695 = fadd double %687, %694
  %696 = add i64 %692, %688
  %697 = add nsw i32 %686, -1
  %698 = icmp eq i32 %686, 0
  %699 = select i1 %698, i32 9, i32 %697
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %700, i32 0
  %702 = load i64, i64* %701, align 8
  %703 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %700, i32 1
  %704 = load double, double* %703, align 8
  %705 = fadd double %695, %704
  %706 = add i64 %702, %696
  %707 = add nsw i32 %699, -1
  %708 = icmp eq i32 %699, 0
  %709 = select i1 %708, i32 9, i32 %707
  %710 = add i32 %689, -2
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %712, label %685

712:                                              ; preds = %685, %677
  %713 = phi double [ undef, %677 ], [ %705, %685 ]
  %714 = phi i64 [ undef, %677 ], [ %706, %685 ]
  %715 = phi i32 [ %680, %677 ], [ %709, %685 ]
  %716 = phi double [ 0.000000e+00, %677 ], [ %705, %685 ]
  %717 = phi i64 [ 0, %677 ], [ %706, %685 ]
  %718 = icmp eq i32 %681, 0
  br i1 %718, label %727, label %719

719:                                              ; preds = %712
  %720 = sext i32 %715 to i64
  %721 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %720, i32 0
  %722 = load i64, i64* %721, align 8
  %723 = add i64 %722, %717
  %724 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %720, i32 1
  %725 = load double, double* %724, align 8
  %726 = fadd double %716, %725
  br label %727

727:                                              ; preds = %712, %719
  %728 = phi double [ %713, %712 ], [ %726, %719 ]
  %729 = phi i64 [ %714, %712 ], [ %723, %719 ]
  %730 = fcmp oeq double %728, 0.000000e+00
  br i1 %730, label %738, label %731

731:                                              ; preds = %727
  %732 = uitofp i64 %729 to double
  %733 = fdiv double %732, %728
  %734 = fcmp ult double %733, 0x41D0000000000000
  %735 = fcmp ole double %733, 1.000000e+00
  %736 = select i1 %735, double 1.000000e+00, double %733
  %737 = select i1 %734, double %736, double 0x41D0000000000000
  br label %738

738:                                              ; preds = %664, %727, %731
  %739 = phi double [ 0.000000e+00, %727 ], [ %737, %731 ], [ 0.000000e+00, %664 ]
  tail call void (%"class.v8::internal::Isolate"*, i8*, ...) @_ZN2v88internal7Isolate18PrintWithTimestampEPKcz(%"class.v8::internal::Isolate"* %359, i8* getelementptr inbounds ([2382 x i8], [2382 x i8]* @.str.146, i64 0, i64 0), double %6, double %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i64 0, i64 0), i32 %362, double %364, double %366, double %368, double %370, double %372, double %374, double %376, double %378, double %380, double %382, double %384, double %386, double %388, double %390, double %392, double %394, double %396, double %398, double %400, double %402, double %404, double %406, double %408, double %410, double %412, double %414, double %416, double %418, double %420, double %422, double %424, double %426, double %428, double %430, double %432, double %434, double %436, double %438, double %440, double %442, double %444, double %446, double %448, double %450, double %452, double %454, double %456, double %458, double %460, double %462, double %464, double %466, double %468, double %470, double %472, double %474, double %476, double %478, double %480, double %482, double %484, i32 %486, double %488, i32 %490, double %504, double %354, double %506, double %508, double %510, double %512, double %514, double %516, i64 %11, i64 %518, i64 %520, i64 %522, i64 %14, i64 %524, i64 %526, i32 %528, i32 %530, i32 %532, double %534, double %587, double %589, double %591, double %665, i32 %669, double %739) #7
  br label %741

740:                                              ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.124, i64 0, i64 0)) #13
  unreachable

741:                                              ; preds = %1, %738, %299, %293
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal8GCTracer5PrintEv(%"class.v8::internal::GCTracer"* readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca [128 x i8], align 16
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 4
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 3
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 128, i1 false)
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %23

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 0
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 17, i64 0, i32 1
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 5
  %20 = load double, double* %19, align 8
  %21 = fsub double %4, %20
  %22 = call i32 (i8*, i32, i8*, ...) @_ZN2v84base2OS8SNPrintFEPciPKcz(i8* nonnull %8, i32 128, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.140, i64 0, i64 0), double %14, i32 %16, double %18, double %21) #7
  br label %23

23:                                               ; preds = %12, %1
  %24 = call i32 @_ZN2v84base2OS19GetCurrentProcessIdEv() #7
  %25 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, -41416
  %28 = inttoptr i64 %27 to %"class.v8::internal::Isolate"*
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %28, i64 0, i32 2
  %30 = call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %29) #7
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %28, i64 0, i32 67
  %32 = load double, double* %31, align 8
  %33 = fsub double %30, %32
  %34 = load i32, i32* %9, align 8
  %35 = icmp ult i32 %34, 5
  br i1 %35, label %36, label %40

36:                                               ; preds = %23
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds [5 x i8*], [5 x i8*]* @switch.table._ZNK2v88internal8GCTracer5PrintEv, i64 0, i64 %37
  %39 = load i8*, i8** %38, align 8
  br label %40

40:                                               ; preds = %36, %23
  %41 = phi i8* [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.133, i64 0, i64 0), %23 ], [ %39, %36 ]
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 5
  %43 = load i8, i8* %42, align 8, !range !2
  %44 = icmp eq i8 %43, 0
  %45 = select i1 %44, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.143, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.142, i64 0, i64 0)
  %46 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 6
  %47 = load i64, i64* %46, align 8
  %48 = uitofp i64 %47 to double
  %49 = fmul double %48, 0x3EB0000000000000
  %50 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 8
  %51 = load i64, i64* %50, align 8
  %52 = uitofp i64 %51 to double
  %53 = fmul double %52, 0x3EB0000000000000
  %54 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 7
  %55 = load i64, i64* %54, align 8
  %56 = uitofp i64 %55 to double
  %57 = fmul double %56, 0x3EB0000000000000
  %58 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 9
  %59 = load i64, i64* %58, align 8
  %60 = uitofp i64 %59 to double
  %61 = fmul double %60, 0x3EB0000000000000
  %62 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 16
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 14
  %65 = load double, double* %64, align 8
  %66 = fadd double %63, %65
  %67 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 15
  %68 = load double, double* %67, align 8
  %69 = fadd double %66, %68
  %70 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 3
  %71 = load double, double* %70, align 8
  %72 = fadd double %69, %71
  %73 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 4
  %74 = load double, double* %73, align 8
  %75 = fadd double %72, %74
  %76 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 21
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %79 = load double, double* %78, align 8
  %80 = fadd double %77, %79
  %81 = fcmp oeq double %80, 0.000000e+00
  %82 = fdiv double %79, %80
  %83 = select i1 %81, double 1.000000e+00, double %82
  %84 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = call i8* @_ZN2v88internal4Heap31GarbageCollectionReasonToStringENS0_23GarbageCollectionReasonE(i32 %87) #7
  %89 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 2
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  %92 = select i1 %91, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.143, i64 0, i64 0), i8* %90
  call void (%"class.v8::internal::GCTracer"*, i8*, ...) @_ZNK2v88internal8GCTracer6OutputEPKcz(%"class.v8::internal::GCTracer"* %0, i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.141, i64 0, i64 0), i32 %24, %"class.v8::internal::Isolate"* %28, double %33, i8* nonnull %41, i8* %45, double %49, double %53, double %57, double %61, double %7, double %75, i8* nonnull %8, double %83, double %85, i8* %88, i8* %92)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #7
  ret void
}

declare void @_ZN2v88internal4Heap24PrintShortHeapStatisticsEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

declare void @_ZN2v88internal4Heap22DumpJSONHeapStatisticsERNSt3__118basic_stringstreamIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.v8::internal::Heap"*, %"class.std::__1::basic_stringstream"* dereferenceable(280)) local_unnamed_addr #3

declare %"class.v8::TracingController"* @_ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer23NotifySweepingCompletedEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = load i8, i8* @_ZN2v88internal23FLAG_trace_gc_freelistsE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %6 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -41416
  %9 = inttoptr i64 %8 to i8*
  tail call void (i8*, i8*, ...) @_ZN2v88internal12PrintIsolateEPvPKcz(i8* %9, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.139, i64 0, i64 0)) #7
  %10 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  tail call void @_ZN2v88internal4Heap19PrintFreeListsStatsEv(%"class.v8::internal::Heap"* %10) #7
  br label %11

11:                                               ; preds = %1, %4
  %12 = load i8, i8* @_ZN2v88internal30FLAG_trace_allocations_originsE, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %16 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %16, i64 0, i32 24
  %18 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %18, i64 0, i32 0
  tail call void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"* %19) #7
  %20 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %15, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %20, i64 0, i32 25
  %22 = load %"class.v8::internal::OldSpace"*, %"class.v8::internal::OldSpace"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::OldSpace", %"class.v8::internal::OldSpace"* %22, i64 0, i32 0, i32 0
  tail call void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"* %23) #7
  %24 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %15, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %24, i64 0, i32 26
  %26 = load %"class.v8::internal::CodeSpace"*, %"class.v8::internal::CodeSpace"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::CodeSpace", %"class.v8::internal::CodeSpace"* %26, i64 0, i32 0, i32 0
  tail call void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"* %27) #7
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %15, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %28, i64 0, i32 27
  %30 = load %"class.v8::internal::MapSpace"*, %"class.v8::internal::MapSpace"** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::MapSpace", %"class.v8::internal::MapSpace"* %30, i64 0, i32 0, i32 0
  tail call void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"* %31) #7
  br label %32

32:                                               ; preds = %11, %14
  ret void
}

declare void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer18AddCompactionEventEdm(%"class.v8::internal::GCTracer"* nocapture, double, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 10
  br i1 %6, label %7, label %17

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 8
  %11 = sext i32 %9 to i64
  %12 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %11, i32 0
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %11, i32 1
  store double %1, double* %13, align 8
  %14 = load i32, i32* %8, align 8
  %15 = icmp eq i32 %14, 10
  br i1 %15, label %16, label %22

16:                                               ; preds = %7
  store i32 0, i32* %8, align 8
  br label %22

17:                                               ; preds = %3
  %18 = add nsw i32 %5, 1
  store i32 %18, i32* %4, align 4
  %19 = sext i32 %5 to i64
  %20 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %19, i32 0
  store i64 %2, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %19, i32 1
  store double %1, double* %21, align 8
  br label %22

22:                                               ; preds = %7, %16, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer16AddSurvivalRatioEd(%"class.v8::internal::GCTracer"* nocapture, double) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 10
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %10
  store double %1, double* %11, align 8
  %12 = load i32, i32* %7, align 8
  %13 = icmp eq i32 %12, 10
  br i1 %13, label %14, label %19

14:                                               ; preds = %6
  store i32 0, i32* %7, align 8
  br label %19

15:                                               ; preds = %2
  %16 = add nsw i32 %4, 1
  store i32 %16, i32* %3, align 4
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %17
  store double %1, double* %18, align 8
  br label %19

19:                                               ; preds = %6, %14, %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer25AddIncrementalMarkingStepEdm(%"class.v8::internal::GCTracer"* nocapture, double, i64) local_unnamed_addr #6 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %2
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %10 = load double, double* %9, align 8
  %11 = fadd double %10, %1
  store double %11, double* %9, align 8
  br label %12

12:                                               ; preds = %3, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal8GCTracer6OutputEPKcz(%"class.v8::internal::GCTracer"* nocapture readonly, i8*, ...) local_unnamed_addr #2 align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = alloca [256 x i8], align 16
  %5 = alloca [1 x %struct.__va_list_tag], align 16
  %6 = load i8, i8* @_ZN2v88internal13FLAG_trace_gcE, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %9)
  call void @_ZN2v84base2OS6VPrintEPKcP13__va_list_tag(i8* %1, %struct.__va_list_tag* nonnull %10) #7
  call void @llvm.va_end(i8* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  br label %11

11:                                               ; preds = %2, %8
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #7
  %13 = bitcast [1 x %struct.__va_list_tag]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #7
  %14 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %13)
  %15 = call i32 @_ZN2v88internal9VSNPrintFENS0_6VectorIcEEPKcP13__va_list_tag(i8* nonnull %12, i64 256, i8* %1, %struct.__va_list_tag* nonnull %14) #7
  call void @llvm.va_end(i8* nonnull %13)
  %16 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %17 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %16, align 8
  call void @_ZN2v88internal4Heap15AddToRingBufferEPKc(%"class.v8::internal::Heap"* %17, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #7
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #7

declare void @_ZN2v84base2OS6VPrintEPKcP13__va_list_tag(i8*, %struct.__va_list_tag*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #7

declare i32 @_ZN2v88internal9VSNPrintFENS0_6VectorIcEEPKcP13__va_list_tag(i8*, i64, i8*, %struct.__va_list_tag*) local_unnamed_addr #3

declare void @_ZN2v88internal4Heap15AddToRingBufferEPKc(%"class.v8::internal::Heap"*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i32 @_ZN2v84base2OS8SNPrintFEPciPKcz(i8*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @_ZN2v84base2OS19GetCurrentProcessIdEv() local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer36AverageMarkCompactMutatorUtilizationEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 21
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 20
  %5 = load double, double* %4, align 8
  %6 = fadd double %3, %5
  %7 = fcmp oeq double %6, 0.000000e+00
  %8 = fdiv double %5, %6
  %9 = select i1 %7, double 1.000000e+00, double %8
  ret double %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer36CurrentMarkCompactMutatorUtilizationEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 22
  %3 = load double, double* %2, align 8
  ret double %3
}

declare i8* @_ZN2v88internal4Heap31GarbageCollectionReasonToStringENS0_23GarbageCollectionReasonE(i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer34ScavengeSpeedInBytesPerMillisecondENS0_17ScavengeSpeedModeE(%"class.v8::internal::GCTracer"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %73

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %6
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %142

12:                                               ; preds = %4
  %13 = icmp sgt i32 %10, 9
  %14 = add nsw i32 %9, -11
  %15 = select i1 %13, i32 %14, i32 %10
  %16 = and i32 %8, 1
  %17 = icmp eq i32 %8, 1
  br i1 %17, label %47, label %18

18:                                               ; preds = %12
  %19 = sub i32 %8, %16
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i32 [ %15, %18 ], [ %44, %20 ]
  %22 = phi double [ 0.000000e+00, %18 ], [ %40, %20 ]
  %23 = phi i64 [ 0, %18 ], [ %41, %20 ]
  %24 = phi i32 [ %19, %18 ], [ %45, %20 ]
  %25 = sext i32 %21 to i64
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %25, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %25, i32 1
  %29 = load double, double* %28, align 8
  %30 = fadd double %22, %29
  %31 = add i64 %27, %23
  %32 = add nsw i32 %21, -1
  %33 = icmp eq i32 %21, 0
  %34 = select i1 %33, i32 9, i32 %32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %35, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %35, i32 1
  %39 = load double, double* %38, align 8
  %40 = fadd double %30, %39
  %41 = add i64 %37, %31
  %42 = add nsw i32 %34, -1
  %43 = icmp eq i32 %34, 0
  %44 = select i1 %43, i32 9, i32 %42
  %45 = add i32 %24, -2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %20

47:                                               ; preds = %20, %12
  %48 = phi double [ undef, %12 ], [ %40, %20 ]
  %49 = phi i64 [ undef, %12 ], [ %41, %20 ]
  %50 = phi i32 [ %15, %12 ], [ %44, %20 ]
  %51 = phi double [ 0.000000e+00, %12 ], [ %40, %20 ]
  %52 = phi i64 [ 0, %12 ], [ %41, %20 ]
  %53 = icmp eq i32 %16, 0
  br i1 %53, label %62, label %54

54:                                               ; preds = %47
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %55, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %52
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 24, i32 0, i64 %55, i32 1
  %60 = load double, double* %59, align 8
  %61 = fadd double %51, %60
  br label %62

62:                                               ; preds = %47, %54
  %63 = phi double [ %48, %47 ], [ %61, %54 ]
  %64 = phi i64 [ %49, %47 ], [ %58, %54 ]
  %65 = fcmp oeq double %63, 0.000000e+00
  br i1 %65, label %142, label %66

66:                                               ; preds = %62
  %67 = uitofp i64 %64 to double
  %68 = fdiv double %67, %63
  %69 = fcmp ult double %68, 0x41D0000000000000
  %70 = fcmp ole double %68, 1.000000e+00
  %71 = select i1 %70, double 1.000000e+00, double %68
  %72 = select i1 %69, double %71, double 0x41D0000000000000
  br label %142

73:                                               ; preds = %2
  %74 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, %75
  %79 = add nsw i32 %78, -1
  %80 = icmp sgt i32 %77, 0
  br i1 %80, label %81, label %142

81:                                               ; preds = %73
  %82 = icmp sgt i32 %79, 9
  %83 = add nsw i32 %78, -11
  %84 = select i1 %82, i32 %83, i32 %79
  %85 = and i32 %77, 1
  %86 = icmp eq i32 %77, 1
  br i1 %86, label %116, label %87

87:                                               ; preds = %81
  %88 = sub i32 %77, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i32 [ %84, %87 ], [ %113, %89 ]
  %91 = phi double [ 0.000000e+00, %87 ], [ %109, %89 ]
  %92 = phi i64 [ 0, %87 ], [ %110, %89 ]
  %93 = phi i32 [ %88, %87 ], [ %114, %89 ]
  %94 = sext i32 %90 to i64
  %95 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %94, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %94, i32 1
  %98 = load double, double* %97, align 8
  %99 = fadd double %91, %98
  %100 = add i64 %96, %92
  %101 = add nsw i32 %90, -1
  %102 = icmp eq i32 %90, 0
  %103 = select i1 %102, i32 9, i32 %101
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %104, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %104, i32 1
  %108 = load double, double* %107, align 8
  %109 = fadd double %99, %108
  %110 = add i64 %106, %100
  %111 = add nsw i32 %103, -1
  %112 = icmp eq i32 %103, 0
  %113 = select i1 %112, i32 9, i32 %111
  %114 = add i32 %93, -2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %89

116:                                              ; preds = %89, %81
  %117 = phi double [ undef, %81 ], [ %109, %89 ]
  %118 = phi i64 [ undef, %81 ], [ %110, %89 ]
  %119 = phi i32 [ %84, %81 ], [ %113, %89 ]
  %120 = phi double [ 0.000000e+00, %81 ], [ %109, %89 ]
  %121 = phi i64 [ 0, %81 ], [ %110, %89 ]
  %122 = icmp eq i32 %85, 0
  br i1 %122, label %131, label %123

123:                                              ; preds = %116
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %124, i32 0
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, %121
  %128 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 25, i32 0, i64 %124, i32 1
  %129 = load double, double* %128, align 8
  %130 = fadd double %120, %129
  br label %131

131:                                              ; preds = %116, %123
  %132 = phi double [ %117, %116 ], [ %130, %123 ]
  %133 = phi i64 [ %118, %116 ], [ %127, %123 ]
  %134 = fcmp oeq double %132, 0.000000e+00
  br i1 %134, label %142, label %135

135:                                              ; preds = %131
  %136 = uitofp i64 %133 to double
  %137 = fdiv double %136, %132
  %138 = fcmp ult double %137, 0x41D0000000000000
  %139 = fcmp ole double %137, 1.000000e+00
  %140 = select i1 %139, double 1.000000e+00, double %137
  %141 = select i1 %138, double %140, double 0x41D0000000000000
  br label %142

142:                                              ; preds = %135, %131, %73, %66, %62, %4
  %143 = phi double [ 0.000000e+00, %62 ], [ %72, %66 ], [ 0.000000e+00, %4 ], [ 0.000000e+00, %131 ], [ %141, %135 ], [ 0.000000e+00, %73 ]
  ret double %143
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer20AverageSurvivalRatioEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %53, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, %3
  %9 = add nsw i32 %8, -1
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %49

11:                                               ; preds = %5
  %12 = icmp sgt i32 %9, 9
  %13 = add nsw i32 %8, -11
  %14 = select i1 %12, i32 %13, i32 %9
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %39, label %17

17:                                               ; preds = %11
  %18 = sub i32 %3, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi double [ 0.000000e+00, %17 ], [ %33, %19 ]
  %21 = phi i32 [ %14, %17 ], [ %36, %19 ]
  %22 = phi i32 [ %18, %17 ], [ %37, %19 ]
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %20, %25
  %27 = add nsw i32 %21, -1
  %28 = icmp eq i32 %21, 0
  %29 = select i1 %28, i32 9, i32 %27
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %30
  %32 = load double, double* %31, align 8
  %33 = fadd double %26, %32
  %34 = add nsw i32 %29, -1
  %35 = icmp eq i32 %29, 0
  %36 = select i1 %35, i32 9, i32 %34
  %37 = add i32 %22, -2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %19

39:                                               ; preds = %19, %11
  %40 = phi double [ undef, %11 ], [ %33, %19 ]
  %41 = phi double [ 0.000000e+00, %11 ], [ %33, %19 ]
  %42 = phi i32 [ %14, %11 ], [ %36, %19 ]
  %43 = icmp eq i32 %15, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = sext i32 %42 to i64
  %46 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 0, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fadd double %41, %47
  br label %49

49:                                               ; preds = %44, %39, %5
  %50 = phi double [ 0.000000e+00, %5 ], [ %40, %39 ], [ %48, %44 ]
  %51 = sitofp i32 %3 to double
  %52 = fdiv double %50, %51
  br label %53

53:                                               ; preds = %1, %49
  %54 = phi double [ %52, %49 ], [ 0.000000e+00, %1 ]
  ret double %54
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer49NewSpaceAllocationThroughputInBytesPerMillisecondEd(%"class.v8::internal::GCTracer"* nocapture readonly, double) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = add nsw i32 %11, -1
  %13 = icmp sgt i32 %12, 9
  %14 = add nsw i32 %11, -11
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %86

17:                                               ; preds = %2
  %18 = fcmp oeq double %1, 0.000000e+00
  br i1 %18, label %19, label %51

19:                                               ; preds = %17
  %20 = and i32 %10, 1
  %21 = icmp eq i32 %10, 1
  br i1 %21, label %71, label %22

22:                                               ; preds = %19
  %23 = sub i32 %10, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ %15, %22 ], [ %48, %24 ]
  %26 = phi double [ %6, %22 ], [ %44, %24 ]
  %27 = phi i64 [ %4, %22 ], [ %45, %24 ]
  %28 = phi i32 [ %23, %22 ], [ %49, %24 ]
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %29, i32 1
  %33 = load double, double* %32, align 8
  %34 = fadd double %26, %33
  %35 = add i64 %31, %27
  %36 = add nsw i32 %25, -1
  %37 = icmp eq i32 %25, 0
  %38 = select i1 %37, i32 9, i32 %36
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %39, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %39, i32 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %34, %43
  %45 = add i64 %41, %35
  %46 = add nsw i32 %38, -1
  %47 = icmp eq i32 %38, 0
  %48 = select i1 %47, i32 9, i32 %46
  %49 = add i32 %28, -2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %71, label %24

51:                                               ; preds = %17, %51
  %52 = phi i32 [ %68, %51 ], [ %15, %17 ]
  %53 = phi i32 [ %69, %51 ], [ 0, %17 ]
  %54 = phi double [ %65, %51 ], [ %6, %17 ]
  %55 = phi i64 [ %64, %51 ], [ %4, %17 ]
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %56, i32 1
  %60 = load double, double* %59, align 8
  %61 = fcmp ult double %54, %1
  %62 = fadd double %54, %60
  %63 = select i1 %61, i64 %58, i64 0
  %64 = add i64 %63, %55
  %65 = select i1 %61, double %62, double %54
  %66 = add nsw i32 %52, -1
  %67 = icmp eq i32 %52, 0
  %68 = select i1 %67, i32 9, i32 %66
  %69 = add nuw nsw i32 %53, 1
  %70 = icmp eq i32 %69, %10
  br i1 %70, label %86, label %51

71:                                               ; preds = %24, %19
  %72 = phi double [ undef, %19 ], [ %44, %24 ]
  %73 = phi i64 [ undef, %19 ], [ %45, %24 ]
  %74 = phi i32 [ %15, %19 ], [ %48, %24 ]
  %75 = phi double [ %6, %19 ], [ %44, %24 ]
  %76 = phi i64 [ %4, %19 ], [ %45, %24 ]
  %77 = icmp eq i32 %20, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = sext i32 %74 to i64
  %80 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %79, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %76
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %79, i32 1
  %84 = load double, double* %83, align 8
  %85 = fadd double %75, %84
  br label %86

86:                                               ; preds = %51, %78, %71, %2
  %87 = phi i64 [ %4, %2 ], [ %73, %71 ], [ %82, %78 ], [ %64, %51 ]
  %88 = phi double [ %6, %2 ], [ %72, %71 ], [ %85, %78 ], [ %65, %51 ]
  %89 = fcmp oeq double %88, 0.000000e+00
  br i1 %89, label %97, label %90

90:                                               ; preds = %86
  %91 = uitofp i64 %87 to double
  %92 = fdiv double %91, %88
  %93 = fcmp ult double %92, 0x41D0000000000000
  %94 = fcmp ole double %92, 1.000000e+00
  %95 = select i1 %94, double 1.000000e+00, double %92
  %96 = select i1 %93, double %95, double 0x41D0000000000000
  br label %97

97:                                               ; preds = %86, %90
  %98 = phi double [ 0.000000e+00, %86 ], [ %96, %90 ]
  ret double %98
}

declare i32 @_ZN2v88internal15MemoryAllocator8Unmapper14NumberOfChunksEv(%"class.v8::internal::MemoryAllocator::Unmapper"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer44IncrementalMarkingSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 6
  %3 = load double, double* %2, align 8
  %4 = fcmp une double %3, 0.000000e+00
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %7 = load double, double* %6, align 8
  %8 = fcmp une double %7, 0.000000e+00
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = uitofp i64 %11 to double
  %13 = fdiv double %12, %7
  br label %14

14:                                               ; preds = %5, %1, %9
  %15 = phi double [ %13, %9 ], [ %3, %1 ], [ 1.310720e+05, %5 ]
  ret double %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer36CompactionSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = add nsw i32 %6, -1
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %1
  %10 = icmp sgt i32 %7, 9
  %11 = add nsw i32 %6, -11
  %12 = select i1 %10, i32 %11, i32 %7
  %13 = and i32 %5, 1
  %14 = icmp eq i32 %5, 1
  br i1 %14, label %44, label %15

15:                                               ; preds = %9
  %16 = sub i32 %5, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ %12, %15 ], [ %41, %17 ]
  %19 = phi double [ 0.000000e+00, %15 ], [ %37, %17 ]
  %20 = phi i64 [ 0, %15 ], [ %38, %17 ]
  %21 = phi i32 [ %16, %15 ], [ %42, %17 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fadd double %19, %26
  %28 = add i64 %24, %20
  %29 = add nsw i32 %18, -1
  %30 = icmp eq i32 %18, 0
  %31 = select i1 %30, i32 9, i32 %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %32, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %32, i32 1
  %36 = load double, double* %35, align 8
  %37 = fadd double %27, %36
  %38 = add i64 %34, %28
  %39 = add nsw i32 %31, -1
  %40 = icmp eq i32 %31, 0
  %41 = select i1 %40, i32 9, i32 %39
  %42 = add i32 %21, -2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %17

44:                                               ; preds = %17, %9
  %45 = phi double [ undef, %9 ], [ %37, %17 ]
  %46 = phi i64 [ undef, %9 ], [ %38, %17 ]
  %47 = phi i32 [ %12, %9 ], [ %41, %17 ]
  %48 = phi double [ 0.000000e+00, %9 ], [ %37, %17 ]
  %49 = phi i64 [ 0, %9 ], [ %38, %17 ]
  %50 = icmp eq i32 %13, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %44
  %52 = sext i32 %47 to i64
  %53 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %52, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %49
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 26, i32 0, i64 %52, i32 1
  %57 = load double, double* %56, align 8
  %58 = fadd double %48, %57
  br label %59

59:                                               ; preds = %44, %51
  %60 = phi double [ %45, %44 ], [ %58, %51 ]
  %61 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %62 = fcmp oeq double %60, 0.000000e+00
  br i1 %62, label %70, label %63

63:                                               ; preds = %59
  %64 = uitofp i64 %61 to double
  %65 = fdiv double %64, %60
  %66 = fcmp ult double %65, 0x41D0000000000000
  %67 = fcmp ole double %65, 1.000000e+00
  %68 = select i1 %67, double 1.000000e+00, double %65
  %69 = select i1 %66, double %68, double 0x41D0000000000000
  br label %70

70:                                               ; preds = %1, %59, %63
  %71 = phi double [ 0.000000e+00, %59 ], [ %69, %63 ], [ 0.000000e+00, %1 ]
  ret double %71
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN2v88internal8GCTracer12AverageSpeedERKNS_4base10RingBufferINSt3__14pairImdEEEERKS6_d(%"class.v8::base::RingBuffer"* nocapture readonly dereferenceable(168), %"struct.std::__1::pair.642"* nocapture readonly dereferenceable(16), double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  %9 = add nsw i32 %8, -1
  %10 = icmp sgt i32 %9, 9
  %11 = add nsw i32 %8, -11
  %12 = select i1 %10, i32 %11, i32 %9
  %13 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %1, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.std::__1::pair.642", %"struct.std::__1::pair.642"* %1, i64 0, i32 1
  %16 = load double, double* %15, align 8
  %17 = icmp sgt i32 %7, 0
  br i1 %17, label %18, label %87

18:                                               ; preds = %3
  %19 = fcmp oeq double %2, 0.000000e+00
  br i1 %19, label %20, label %52

20:                                               ; preds = %18
  %21 = and i32 %7, 1
  %22 = icmp eq i32 %7, 1
  br i1 %22, label %72, label %23

23:                                               ; preds = %20
  %24 = sub i32 %7, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i32 [ %12, %23 ], [ %49, %25 ]
  %27 = phi double [ %16, %23 ], [ %45, %25 ]
  %28 = phi i64 [ %14, %23 ], [ %46, %25 ]
  %29 = phi i32 [ %24, %23 ], [ %50, %25 ]
  %30 = sext i32 %26 to i64
  %31 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %30, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %30, i32 1
  %34 = load double, double* %33, align 8
  %35 = fadd double %27, %34
  %36 = add i64 %32, %28
  %37 = add nsw i32 %26, -1
  %38 = icmp eq i32 %26, 0
  %39 = select i1 %38, i32 9, i32 %37
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %40, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %40, i32 1
  %44 = load double, double* %43, align 8
  %45 = fadd double %35, %44
  %46 = add i64 %42, %36
  %47 = add nsw i32 %39, -1
  %48 = icmp eq i32 %39, 0
  %49 = select i1 %48, i32 9, i32 %47
  %50 = add i32 %29, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %72, label %25

52:                                               ; preds = %18, %52
  %53 = phi i32 [ %69, %52 ], [ %12, %18 ]
  %54 = phi i32 [ %70, %52 ], [ 0, %18 ]
  %55 = phi double [ %66, %52 ], [ %16, %18 ]
  %56 = phi i64 [ %65, %52 ], [ %14, %18 ]
  %57 = sext i32 %53 to i64
  %58 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %57, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %57, i32 1
  %61 = load double, double* %60, align 8
  %62 = fcmp ult double %55, %2
  %63 = fadd double %55, %61
  %64 = select i1 %62, i64 %59, i64 0
  %65 = add i64 %64, %56
  %66 = select i1 %62, double %63, double %55
  %67 = add nsw i32 %53, -1
  %68 = icmp eq i32 %53, 0
  %69 = select i1 %68, i32 9, i32 %67
  %70 = add nuw nsw i32 %54, 1
  %71 = icmp eq i32 %70, %7
  br i1 %71, label %87, label %52

72:                                               ; preds = %25, %20
  %73 = phi double [ undef, %20 ], [ %45, %25 ]
  %74 = phi i64 [ undef, %20 ], [ %46, %25 ]
  %75 = phi i32 [ %12, %20 ], [ %49, %25 ]
  %76 = phi double [ %16, %20 ], [ %45, %25 ]
  %77 = phi i64 [ %14, %20 ], [ %46, %25 ]
  %78 = icmp eq i32 %21, 0
  br i1 %78, label %87, label %79

79:                                               ; preds = %72
  %80 = sext i32 %75 to i64
  %81 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %80, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, %77
  %84 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %80, i32 1
  %85 = load double, double* %84, align 8
  %86 = fadd double %76, %85
  br label %87

87:                                               ; preds = %52, %79, %72, %3
  %88 = phi i64 [ %14, %3 ], [ %74, %72 ], [ %83, %79 ], [ %65, %52 ]
  %89 = phi double [ %16, %3 ], [ %73, %72 ], [ %86, %79 ], [ %66, %52 ]
  %90 = fcmp oeq double %89, 0.000000e+00
  br i1 %90, label %98, label %91

91:                                               ; preds = %87
  %92 = uitofp i64 %88 to double
  %93 = fdiv double %92, %89
  %94 = fcmp ult double %93, 0x41D0000000000000
  %95 = fcmp ole double %93, 1.000000e+00
  %96 = select i1 %95, double 1.000000e+00, double %93
  %97 = select i1 %94, double %96, double 0x41D0000000000000
  br label %98

98:                                               ; preds = %91, %87
  %99 = phi double [ 0.000000e+00, %87 ], [ %97, %91 ]
  ret double %99
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZN2v88internal8GCTracer12AverageSpeedERKNS_4base10RingBufferINSt3__14pairImdEEEE(%"class.v8::base::RingBuffer"* nocapture readonly dereferenceable(168)) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = add nsw i32 %6, -1
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %1
  %10 = icmp sgt i32 %7, 9
  %11 = add nsw i32 %6, -11
  %12 = select i1 %10, i32 %11, i32 %7
  %13 = and i32 %5, 1
  %14 = icmp eq i32 %5, 1
  br i1 %14, label %44, label %15

15:                                               ; preds = %9
  %16 = sub i32 %5, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ %12, %15 ], [ %41, %17 ]
  %19 = phi double [ 0.000000e+00, %15 ], [ %37, %17 ]
  %20 = phi i64 [ 0, %15 ], [ %38, %17 ]
  %21 = phi i32 [ %16, %15 ], [ %42, %17 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fadd double %19, %26
  %28 = add i64 %24, %20
  %29 = add nsw i32 %18, -1
  %30 = icmp eq i32 %18, 0
  %31 = select i1 %30, i32 9, i32 %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %32, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %32, i32 1
  %36 = load double, double* %35, align 8
  %37 = fadd double %27, %36
  %38 = add i64 %34, %28
  %39 = add nsw i32 %31, -1
  %40 = icmp eq i32 %31, 0
  %41 = select i1 %40, i32 9, i32 %39
  %42 = add i32 %21, -2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %17

44:                                               ; preds = %17, %9
  %45 = phi double [ undef, %9 ], [ %37, %17 ]
  %46 = phi i64 [ undef, %9 ], [ %38, %17 ]
  %47 = phi i32 [ %12, %9 ], [ %41, %17 ]
  %48 = phi double [ 0.000000e+00, %9 ], [ %37, %17 ]
  %49 = phi i64 [ 0, %9 ], [ %38, %17 ]
  %50 = icmp eq i32 %13, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %44
  %52 = sext i32 %47 to i64
  %53 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %52, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %49
  %56 = getelementptr inbounds %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer"* %0, i64 0, i32 0, i64 %52, i32 1
  %57 = load double, double* %56, align 8
  %58 = fadd double %48, %57
  br label %59

59:                                               ; preds = %44, %51
  %60 = phi double [ %45, %44 ], [ %58, %51 ]
  %61 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %62 = fcmp oeq double %60, 0.000000e+00
  br i1 %62, label %70, label %63

63:                                               ; preds = %59
  %64 = uitofp i64 %61 to double
  %65 = fdiv double %64, %60
  %66 = fcmp ult double %65, 0x41D0000000000000
  %67 = fcmp ole double %65, 1.000000e+00
  %68 = select i1 %67, double 1.000000e+00, double %65
  %69 = select i1 %66, double %68, double 0x41D0000000000000
  br label %70

70:                                               ; preds = %1, %59, %63
  %71 = phi double [ 0.000000e+00, %59 ], [ %69, %63 ], [ 0.000000e+00, %1 ]
  ret double %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer34RecordTimeToIncrementalMarkingTaskEd(%"class.v8::internal::GCTracer"* nocapture, double) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 7
  %4 = load double, double* %3, align 8
  %5 = fcmp oeq double %4, 0.000000e+00
  %6 = fadd double %4, %1
  %7 = fmul double %6, 5.000000e-01
  %8 = select i1 %5, double %1, double %7
  store double %8, double* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer35AverageTimeToIncrementalMarkingTaskEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 7
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer19RecordEmbedderSpeedEmd(%"class.v8::internal::GCTracer"* nocapture, i64, double) local_unnamed_addr #6 align 2 {
  %4 = fcmp oeq double %2, 0.000000e+00
  %5 = icmp eq i64 %1, 0
  %6 = or i1 %5, %4
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = uitofp i64 %1 to double
  %9 = fdiv double %8, %2
  %10 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 8
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  %13 = fadd double %9, %11
  %14 = fmul double %13, 5.000000e-01
  %15 = select i1 %12, double %9, double %14
  store double %15, double* %10, align 8
  br label %16

16:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer34EmbedderSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 8
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer37MarkCompactSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = add nsw i32 %6, -1
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %1
  %10 = icmp sgt i32 %7, 9
  %11 = add nsw i32 %6, -11
  %12 = select i1 %10, i32 %11, i32 %7
  %13 = and i32 %5, 1
  %14 = icmp eq i32 %5, 1
  br i1 %14, label %44, label %15

15:                                               ; preds = %9
  %16 = sub i32 %5, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ %12, %15 ], [ %41, %17 ]
  %19 = phi double [ 0.000000e+00, %15 ], [ %37, %17 ]
  %20 = phi i64 [ 0, %15 ], [ %38, %17 ]
  %21 = phi i32 [ %16, %15 ], [ %42, %17 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fadd double %19, %26
  %28 = add i64 %24, %20
  %29 = add nsw i32 %18, -1
  %30 = icmp eq i32 %18, 0
  %31 = select i1 %30, i32 9, i32 %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %32, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %32, i32 1
  %36 = load double, double* %35, align 8
  %37 = fadd double %27, %36
  %38 = add i64 %34, %28
  %39 = add nsw i32 %31, -1
  %40 = icmp eq i32 %31, 0
  %41 = select i1 %40, i32 9, i32 %39
  %42 = add i32 %21, -2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %17

44:                                               ; preds = %17, %9
  %45 = phi double [ undef, %9 ], [ %37, %17 ]
  %46 = phi i64 [ undef, %9 ], [ %38, %17 ]
  %47 = phi i32 [ %12, %9 ], [ %41, %17 ]
  %48 = phi double [ 0.000000e+00, %9 ], [ %37, %17 ]
  %49 = phi i64 [ 0, %9 ], [ %38, %17 ]
  %50 = icmp eq i32 %13, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %44
  %52 = sext i32 %47 to i64
  %53 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %52, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %49
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %52, i32 1
  %57 = load double, double* %56, align 8
  %58 = fadd double %48, %57
  br label %59

59:                                               ; preds = %44, %51
  %60 = phi double [ %45, %44 ], [ %58, %51 ]
  %61 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %62 = fcmp oeq double %60, 0.000000e+00
  br i1 %62, label %70, label %63

63:                                               ; preds = %59
  %64 = uitofp i64 %61 to double
  %65 = fdiv double %64, %60
  %66 = fcmp ult double %65, 0x41D0000000000000
  %67 = fcmp ole double %65, 1.000000e+00
  %68 = select i1 %67, double 1.000000e+00, double %65
  %69 = select i1 %66, double %68, double 0x41D0000000000000
  br label %70

70:                                               ; preds = %1, %59, %63
  %71 = phi double [ 0.000000e+00, %59 ], [ %69, %63 ], [ 0.000000e+00, %1 ]
  ret double %71
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer53FinalIncrementalMarkCompactSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = add nsw i32 %6, -1
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %1
  %10 = icmp sgt i32 %7, 9
  %11 = add nsw i32 %6, -11
  %12 = select i1 %10, i32 %11, i32 %7
  %13 = and i32 %5, 1
  %14 = icmp eq i32 %5, 1
  br i1 %14, label %44, label %15

15:                                               ; preds = %9
  %16 = sub i32 %5, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ %12, %15 ], [ %41, %17 ]
  %19 = phi double [ 0.000000e+00, %15 ], [ %37, %17 ]
  %20 = phi i64 [ 0, %15 ], [ %38, %17 ]
  %21 = phi i32 [ %16, %15 ], [ %42, %17 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fadd double %19, %26
  %28 = add i64 %24, %20
  %29 = add nsw i32 %18, -1
  %30 = icmp eq i32 %18, 0
  %31 = select i1 %30, i32 9, i32 %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %32, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %32, i32 1
  %36 = load double, double* %35, align 8
  %37 = fadd double %27, %36
  %38 = add i64 %34, %28
  %39 = add nsw i32 %31, -1
  %40 = icmp eq i32 %31, 0
  %41 = select i1 %40, i32 9, i32 %39
  %42 = add i32 %21, -2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %17

44:                                               ; preds = %17, %9
  %45 = phi double [ undef, %9 ], [ %37, %17 ]
  %46 = phi i64 [ undef, %9 ], [ %38, %17 ]
  %47 = phi i32 [ %12, %9 ], [ %41, %17 ]
  %48 = phi double [ 0.000000e+00, %9 ], [ %37, %17 ]
  %49 = phi i64 [ 0, %9 ], [ %38, %17 ]
  %50 = icmp eq i32 %13, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %44
  %52 = sext i32 %47 to i64
  %53 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %52, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %49
  %56 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %52, i32 1
  %57 = load double, double* %56, align 8
  %58 = fadd double %48, %57
  br label %59

59:                                               ; preds = %44, %51
  %60 = phi double [ %45, %44 ], [ %58, %51 ]
  %61 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %62 = fcmp oeq double %60, 0.000000e+00
  br i1 %62, label %70, label %63

63:                                               ; preds = %59
  %64 = uitofp i64 %61 to double
  %65 = fdiv double %64, %60
  %66 = fcmp ult double %65, 0x41D0000000000000
  %67 = fcmp ole double %65, 1.000000e+00
  %68 = select i1 %67, double 1.000000e+00, double %65
  %69 = select i1 %66, double %68, double 0x41D0000000000000
  br label %70

70:                                               ; preds = %1, %59, %63
  %71 = phi double [ 0.000000e+00, %59 ], [ %69, %63 ], [ 0.000000e+00, %1 ]
  ret double %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden double @_ZN2v88internal8GCTracer45CombinedMarkCompactSpeedInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 18
  %3 = load double, double* %2, align 8
  %4 = fcmp ogt double %3, 0.000000e+00
  br i1 %4, label %231, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %74

13:                                               ; preds = %5
  %14 = icmp sgt i32 %11, 9
  %15 = add nsw i32 %10, -11
  %16 = select i1 %14, i32 %15, i32 %11
  %17 = and i32 %9, 1
  %18 = icmp eq i32 %9, 1
  br i1 %18, label %48, label %19

19:                                               ; preds = %13
  %20 = sub i32 %9, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i32 [ %16, %19 ], [ %45, %21 ]
  %23 = phi double [ 0.000000e+00, %19 ], [ %41, %21 ]
  %24 = phi i64 [ 0, %19 ], [ %42, %21 ]
  %25 = phi i32 [ %20, %19 ], [ %46, %21 ]
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %26, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %26, i32 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %23, %30
  %32 = add i64 %28, %24
  %33 = add nsw i32 %22, -1
  %34 = icmp eq i32 %22, 0
  %35 = select i1 %34, i32 9, i32 %33
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %36, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %36, i32 1
  %40 = load double, double* %39, align 8
  %41 = fadd double %31, %40
  %42 = add i64 %38, %32
  %43 = add nsw i32 %35, -1
  %44 = icmp eq i32 %35, 0
  %45 = select i1 %44, i32 9, i32 %43
  %46 = add i32 %25, -2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %21

48:                                               ; preds = %21, %13
  %49 = phi double [ undef, %13 ], [ %41, %21 ]
  %50 = phi i64 [ undef, %13 ], [ %42, %21 ]
  %51 = phi i32 [ %16, %13 ], [ %45, %21 ]
  %52 = phi double [ 0.000000e+00, %13 ], [ %41, %21 ]
  %53 = phi i64 [ 0, %13 ], [ %42, %21 ]
  %54 = icmp eq i32 %17, 0
  br i1 %54, label %63, label %55

55:                                               ; preds = %48
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, %53
  %60 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %56, i32 1
  %61 = load double, double* %60, align 8
  %62 = fadd double %52, %61
  br label %63

63:                                               ; preds = %48, %55
  %64 = phi double [ %49, %48 ], [ %62, %55 ]
  %65 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %66 = fcmp oeq double %64, 0.000000e+00
  br i1 %66, label %74, label %67

67:                                               ; preds = %63
  %68 = uitofp i64 %65 to double
  %69 = fdiv double %68, %64
  %70 = fcmp ult double %69, 0x41D0000000000000
  %71 = fcmp ole double %69, 1.000000e+00
  %72 = select i1 %71, double 1.000000e+00, double %69
  br i1 %70, label %75, label %73

73:                                               ; preds = %67
  store double 0x41D0000000000000, double* %2, align 8
  br label %231

74:                                               ; preds = %63, %5
  store double 0.000000e+00, double* %2, align 8
  br label %77

75:                                               ; preds = %67
  store double %72, double* %2, align 8
  %76 = fcmp ogt double %72, 0.000000e+00
  br i1 %76, label %231, label %77

77:                                               ; preds = %74, %75
  %78 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 6
  %79 = load double, double* %78, align 8
  %80 = fcmp une double %79, 0.000000e+00
  br i1 %80, label %90, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %83 = load double, double* %82, align 8
  %84 = fcmp une double %83, 0.000000e+00
  br i1 %84, label %85, label %90

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 3
  %87 = load i64, i64* %86, align 8
  %88 = uitofp i64 %87 to double
  %89 = fdiv double %88, %83
  br label %90

90:                                               ; preds = %77, %81, %85
  %91 = phi double [ %89, %85 ], [ %79, %77 ], [ 1.310720e+05, %81 ]
  %92 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 1
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 2
  %95 = load i32, i32* %94, align 4
  %96 = add nsw i32 %95, %93
  %97 = add nsw i32 %96, -1
  %98 = icmp sgt i32 %95, 0
  br i1 %98, label %99, label %163

99:                                               ; preds = %90
  %100 = icmp sgt i32 %97, 9
  %101 = add nsw i32 %96, -11
  %102 = select i1 %100, i32 %101, i32 %97
  %103 = and i32 %95, 1
  %104 = icmp eq i32 %95, 1
  br i1 %104, label %134, label %105

105:                                              ; preds = %99
  %106 = sub i32 %95, %103
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i32 [ %102, %105 ], [ %131, %107 ]
  %109 = phi double [ 0.000000e+00, %105 ], [ %127, %107 ]
  %110 = phi i64 [ 0, %105 ], [ %128, %107 ]
  %111 = phi i32 [ %106, %105 ], [ %132, %107 ]
  %112 = sext i32 %108 to i64
  %113 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %112, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %112, i32 1
  %116 = load double, double* %115, align 8
  %117 = fadd double %109, %116
  %118 = add i64 %114, %110
  %119 = add nsw i32 %108, -1
  %120 = icmp eq i32 %108, 0
  %121 = select i1 %120, i32 9, i32 %119
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %122, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %122, i32 1
  %126 = load double, double* %125, align 8
  %127 = fadd double %117, %126
  %128 = add i64 %124, %118
  %129 = add nsw i32 %121, -1
  %130 = icmp eq i32 %121, 0
  %131 = select i1 %130, i32 9, i32 %129
  %132 = add i32 %111, -2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %107

134:                                              ; preds = %107, %99
  %135 = phi double [ undef, %99 ], [ %127, %107 ]
  %136 = phi i64 [ undef, %99 ], [ %128, %107 ]
  %137 = phi i32 [ %102, %99 ], [ %131, %107 ]
  %138 = phi double [ 0.000000e+00, %99 ], [ %127, %107 ]
  %139 = phi i64 [ 0, %99 ], [ %128, %107 ]
  %140 = icmp eq i32 %103, 0
  br i1 %140, label %149, label %141

141:                                              ; preds = %134
  %142 = sext i32 %137 to i64
  %143 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %142, i32 0
  %144 = load i64, i64* %143, align 8
  %145 = add i64 %144, %139
  %146 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 27, i32 0, i64 %142, i32 1
  %147 = load double, double* %146, align 8
  %148 = fadd double %138, %147
  br label %149

149:                                              ; preds = %134, %141
  %150 = phi double [ %135, %134 ], [ %148, %141 ]
  %151 = phi i64 [ %136, %134 ], [ %145, %141 ]
  %152 = fcmp oeq double %150, 0.000000e+00
  br i1 %152, label %163, label %153

153:                                              ; preds = %149
  %154 = uitofp i64 %151 to double
  %155 = fdiv double %154, %150
  %156 = fcmp ult double %155, 0x41D0000000000000
  %157 = fcmp ole double %155, 1.000000e+00
  %158 = select i1 %157, double 1.000000e+00, double %155
  %159 = select i1 %156, double %158, double 0x41D0000000000000
  %160 = fcmp olt double %91, 5.000000e-01
  %161 = fcmp olt double %159, 5.000000e-01
  %162 = or i1 %160, %161
  br i1 %162, label %163, label %225

163:                                              ; preds = %90, %149, %153
  br i1 %12, label %164, label %229

164:                                              ; preds = %163
  %165 = icmp sgt i32 %11, 9
  %166 = add nsw i32 %10, -11
  %167 = select i1 %165, i32 %166, i32 %11
  %168 = and i32 %9, 1
  %169 = icmp eq i32 %9, 1
  br i1 %169, label %199, label %170

170:                                              ; preds = %164
  %171 = sub i32 %9, %168
  br label %172

172:                                              ; preds = %172, %170
  %173 = phi i32 [ %167, %170 ], [ %196, %172 ]
  %174 = phi double [ 0.000000e+00, %170 ], [ %192, %172 ]
  %175 = phi i64 [ 0, %170 ], [ %193, %172 ]
  %176 = phi i32 [ %171, %170 ], [ %197, %172 ]
  %177 = sext i32 %173 to i64
  %178 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %177, i32 0
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %177, i32 1
  %181 = load double, double* %180, align 8
  %182 = fadd double %174, %181
  %183 = add i64 %179, %175
  %184 = add nsw i32 %173, -1
  %185 = icmp eq i32 %173, 0
  %186 = select i1 %185, i32 9, i32 %184
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %187, i32 0
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %187, i32 1
  %191 = load double, double* %190, align 8
  %192 = fadd double %182, %191
  %193 = add i64 %189, %183
  %194 = add nsw i32 %186, -1
  %195 = icmp eq i32 %186, 0
  %196 = select i1 %195, i32 9, i32 %194
  %197 = add i32 %176, -2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %172

199:                                              ; preds = %172, %164
  %200 = phi double [ undef, %164 ], [ %192, %172 ]
  %201 = phi i64 [ undef, %164 ], [ %193, %172 ]
  %202 = phi i32 [ %167, %164 ], [ %196, %172 ]
  %203 = phi double [ 0.000000e+00, %164 ], [ %192, %172 ]
  %204 = phi i64 [ 0, %164 ], [ %193, %172 ]
  %205 = icmp eq i32 %168, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %199
  %207 = sext i32 %202 to i64
  %208 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %207, i32 0
  %209 = load i64, i64* %208, align 8
  %210 = add i64 %209, %204
  %211 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 28, i32 0, i64 %207, i32 1
  %212 = load double, double* %211, align 8
  %213 = fadd double %203, %212
  br label %214

214:                                              ; preds = %199, %206
  %215 = phi double [ %200, %199 ], [ %213, %206 ]
  %216 = phi i64 [ %201, %199 ], [ %210, %206 ]
  %217 = fcmp oeq double %215, 0.000000e+00
  br i1 %217, label %229, label %218

218:                                              ; preds = %214
  %219 = uitofp i64 %216 to double
  %220 = fdiv double %219, %215
  %221 = fcmp ult double %220, 0x41D0000000000000
  %222 = fcmp ole double %220, 1.000000e+00
  %223 = select i1 %222, double 1.000000e+00, double %220
  %224 = select i1 %221, double %223, double 0x41D0000000000000
  br label %229

225:                                              ; preds = %153
  %226 = fmul double %91, %159
  %227 = fadd double %91, %159
  %228 = fdiv double %226, %227
  br label %229

229:                                              ; preds = %218, %214, %163, %225
  %230 = phi double [ %228, %225 ], [ 0.000000e+00, %214 ], [ %224, %218 ], [ 0.000000e+00, %163 ]
  store double %230, double* %2, align 8
  br label %231

231:                                              ; preds = %73, %75, %1, %229
  %232 = phi double [ %230, %229 ], [ %3, %1 ], [ %72, %75 ], [ 0x41D0000000000000, %73 ]
  ret double %232
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN2v88internal8GCTracer34CombineSpeedsInBytesPerMillisecondEdd(double, double) local_unnamed_addr #1 align 2 {
  %3 = fcmp olt double %1, 5.000000e-01
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = fmul double %0, %1
  %6 = fadd double %0, %1
  %7 = fdiv double %5, %6
  br label %8

8:                                                ; preds = %2, %4
  %9 = phi double [ %7, %4 ], [ %0, %2 ]
  ret double %9
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer54OldGenerationAllocationThroughputInBytesPerMillisecondEd(%"class.v8::internal::GCTracer"* nocapture readonly, double) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 16
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = add nsw i32 %11, -1
  %13 = icmp sgt i32 %12, 9
  %14 = add nsw i32 %11, -11
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %86

17:                                               ; preds = %2
  %18 = fcmp oeq double %1, 0.000000e+00
  br i1 %18, label %19, label %51

19:                                               ; preds = %17
  %20 = and i32 %10, 1
  %21 = icmp eq i32 %10, 1
  br i1 %21, label %71, label %22

22:                                               ; preds = %19
  %23 = sub i32 %10, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ %15, %22 ], [ %48, %24 ]
  %26 = phi double [ %6, %22 ], [ %44, %24 ]
  %27 = phi i64 [ %4, %22 ], [ %45, %24 ]
  %28 = phi i32 [ %23, %22 ], [ %49, %24 ]
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %29, i32 1
  %33 = load double, double* %32, align 8
  %34 = fadd double %26, %33
  %35 = add i64 %31, %27
  %36 = add nsw i32 %25, -1
  %37 = icmp eq i32 %25, 0
  %38 = select i1 %37, i32 9, i32 %36
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %39, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %39, i32 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %34, %43
  %45 = add i64 %41, %35
  %46 = add nsw i32 %38, -1
  %47 = icmp eq i32 %38, 0
  %48 = select i1 %47, i32 9, i32 %46
  %49 = add i32 %28, -2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %71, label %24

51:                                               ; preds = %17, %51
  %52 = phi i32 [ %68, %51 ], [ %15, %17 ]
  %53 = phi i32 [ %69, %51 ], [ 0, %17 ]
  %54 = phi double [ %65, %51 ], [ %6, %17 ]
  %55 = phi i64 [ %64, %51 ], [ %4, %17 ]
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %56, i32 1
  %60 = load double, double* %59, align 8
  %61 = fcmp ult double %54, %1
  %62 = fadd double %54, %60
  %63 = select i1 %61, i64 %58, i64 0
  %64 = add i64 %63, %55
  %65 = select i1 %61, double %62, double %54
  %66 = add nsw i32 %52, -1
  %67 = icmp eq i32 %52, 0
  %68 = select i1 %67, i32 9, i32 %66
  %69 = add nuw nsw i32 %53, 1
  %70 = icmp eq i32 %69, %10
  br i1 %70, label %86, label %51

71:                                               ; preds = %24, %19
  %72 = phi double [ undef, %19 ], [ %44, %24 ]
  %73 = phi i64 [ undef, %19 ], [ %45, %24 ]
  %74 = phi i32 [ %15, %19 ], [ %48, %24 ]
  %75 = phi double [ %6, %19 ], [ %44, %24 ]
  %76 = phi i64 [ %4, %19 ], [ %45, %24 ]
  %77 = icmp eq i32 %20, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = sext i32 %74 to i64
  %80 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %79, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %76
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %79, i32 1
  %84 = load double, double* %83, align 8
  %85 = fadd double %75, %84
  br label %86

86:                                               ; preds = %51, %78, %71, %2
  %87 = phi i64 [ %4, %2 ], [ %73, %71 ], [ %82, %78 ], [ %64, %51 ]
  %88 = phi double [ %6, %2 ], [ %72, %71 ], [ %85, %78 ], [ %65, %51 ]
  %89 = fcmp oeq double %88, 0.000000e+00
  br i1 %89, label %97, label %90

90:                                               ; preds = %86
  %91 = uitofp i64 %87 to double
  %92 = fdiv double %91, %88
  %93 = fcmp ult double %92, 0x41D0000000000000
  %94 = fcmp ole double %92, 1.000000e+00
  %95 = select i1 %94, double 1.000000e+00, double %92
  %96 = select i1 %93, double %95, double 0x41D0000000000000
  br label %97

97:                                               ; preds = %86, %90
  %98 = phi double [ 0.000000e+00, %86 ], [ %96, %90 ]
  ret double %98
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer49EmbedderAllocationThroughputInBytesPerMillisecondEd(%"class.v8::internal::GCTracer"* nocapture readonly, double) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 17
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = add nsw i32 %11, -1
  %13 = icmp sgt i32 %12, 9
  %14 = add nsw i32 %11, -11
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %86

17:                                               ; preds = %2
  %18 = fcmp oeq double %1, 0.000000e+00
  br i1 %18, label %19, label %51

19:                                               ; preds = %17
  %20 = and i32 %10, 1
  %21 = icmp eq i32 %10, 1
  br i1 %21, label %71, label %22

22:                                               ; preds = %19
  %23 = sub i32 %10, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ %15, %22 ], [ %48, %24 ]
  %26 = phi double [ %6, %22 ], [ %44, %24 ]
  %27 = phi i64 [ %4, %22 ], [ %45, %24 ]
  %28 = phi i32 [ %23, %22 ], [ %49, %24 ]
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %29, i32 1
  %33 = load double, double* %32, align 8
  %34 = fadd double %26, %33
  %35 = add i64 %31, %27
  %36 = add nsw i32 %25, -1
  %37 = icmp eq i32 %25, 0
  %38 = select i1 %37, i32 9, i32 %36
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %39, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %39, i32 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %34, %43
  %45 = add i64 %41, %35
  %46 = add nsw i32 %38, -1
  %47 = icmp eq i32 %38, 0
  %48 = select i1 %47, i32 9, i32 %46
  %49 = add i32 %28, -2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %71, label %24

51:                                               ; preds = %17, %51
  %52 = phi i32 [ %68, %51 ], [ %15, %17 ]
  %53 = phi i32 [ %69, %51 ], [ 0, %17 ]
  %54 = phi double [ %65, %51 ], [ %6, %17 ]
  %55 = phi i64 [ %64, %51 ], [ %4, %17 ]
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %56, i32 1
  %60 = load double, double* %59, align 8
  %61 = fcmp ult double %54, %1
  %62 = fadd double %54, %60
  %63 = select i1 %61, i64 %58, i64 0
  %64 = add i64 %63, %55
  %65 = select i1 %61, double %62, double %54
  %66 = add nsw i32 %52, -1
  %67 = icmp eq i32 %52, 0
  %68 = select i1 %67, i32 9, i32 %66
  %69 = add nuw nsw i32 %53, 1
  %70 = icmp eq i32 %69, %10
  br i1 %70, label %86, label %51

71:                                               ; preds = %24, %19
  %72 = phi double [ undef, %19 ], [ %44, %24 ]
  %73 = phi i64 [ undef, %19 ], [ %45, %24 ]
  %74 = phi i32 [ %15, %19 ], [ %48, %24 ]
  %75 = phi double [ %6, %19 ], [ %44, %24 ]
  %76 = phi i64 [ %4, %19 ], [ %45, %24 ]
  %77 = icmp eq i32 %20, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = sext i32 %74 to i64
  %80 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %79, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %76
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %79, i32 1
  %84 = load double, double* %83, align 8
  %85 = fadd double %75, %84
  br label %86

86:                                               ; preds = %51, %78, %71, %2
  %87 = phi i64 [ %4, %2 ], [ %73, %71 ], [ %82, %78 ], [ %64, %51 ]
  %88 = phi double [ %6, %2 ], [ %72, %71 ], [ %85, %78 ], [ %65, %51 ]
  %89 = fcmp oeq double %88, 0.000000e+00
  br i1 %89, label %97, label %90

90:                                               ; preds = %86
  %91 = uitofp i64 %87 to double
  %92 = fdiv double %91, %88
  %93 = fcmp ult double %92, 0x41D0000000000000
  %94 = fcmp ole double %92, 1.000000e+00
  %95 = select i1 %94, double 1.000000e+00, double %92
  %96 = select i1 %93, double %95, double 0x41D0000000000000
  br label %97

97:                                               ; preds = %86, %90
  %98 = phi double [ 0.000000e+00, %86 ], [ %96, %90 ]
  ret double %98
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer41AllocationThroughputInBytesPerMillisecondEd(%"class.v8::internal::GCTracer"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 15
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = add nsw i32 %11, -1
  %13 = icmp sgt i32 %12, 9
  %14 = add nsw i32 %11, -11
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %86

17:                                               ; preds = %2
  %18 = fcmp oeq double %1, 0.000000e+00
  br i1 %18, label %19, label %51

19:                                               ; preds = %17
  %20 = and i32 %10, 1
  %21 = icmp eq i32 %10, 1
  br i1 %21, label %71, label %22

22:                                               ; preds = %19
  %23 = sub i32 %10, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ %15, %22 ], [ %48, %24 ]
  %26 = phi double [ %6, %22 ], [ %44, %24 ]
  %27 = phi i64 [ %4, %22 ], [ %45, %24 ]
  %28 = phi i32 [ %23, %22 ], [ %49, %24 ]
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %29, i32 1
  %33 = load double, double* %32, align 8
  %34 = fadd double %26, %33
  %35 = add i64 %31, %27
  %36 = add nsw i32 %25, -1
  %37 = icmp eq i32 %25, 0
  %38 = select i1 %37, i32 9, i32 %36
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %39, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %39, i32 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %34, %43
  %45 = add i64 %41, %35
  %46 = add nsw i32 %38, -1
  %47 = icmp eq i32 %38, 0
  %48 = select i1 %47, i32 9, i32 %46
  %49 = add i32 %28, -2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %71, label %24

51:                                               ; preds = %17, %51
  %52 = phi i32 [ %68, %51 ], [ %15, %17 ]
  %53 = phi i32 [ %69, %51 ], [ 0, %17 ]
  %54 = phi double [ %65, %51 ], [ %6, %17 ]
  %55 = phi i64 [ %64, %51 ], [ %4, %17 ]
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %56, i32 1
  %60 = load double, double* %59, align 8
  %61 = fcmp ult double %54, %1
  %62 = fadd double %54, %60
  %63 = select i1 %61, i64 %58, i64 0
  %64 = add i64 %63, %55
  %65 = select i1 %61, double %62, double %54
  %66 = add nsw i32 %52, -1
  %67 = icmp eq i32 %52, 0
  %68 = select i1 %67, i32 9, i32 %66
  %69 = add nuw nsw i32 %53, 1
  %70 = icmp eq i32 %69, %10
  br i1 %70, label %86, label %51

71:                                               ; preds = %24, %19
  %72 = phi double [ undef, %19 ], [ %44, %24 ]
  %73 = phi i64 [ undef, %19 ], [ %45, %24 ]
  %74 = phi i32 [ %15, %19 ], [ %48, %24 ]
  %75 = phi double [ %6, %19 ], [ %44, %24 ]
  %76 = phi i64 [ %4, %19 ], [ %45, %24 ]
  %77 = icmp eq i32 %20, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = sext i32 %74 to i64
  %80 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %79, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %76
  %83 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 29, i32 0, i64 %79, i32 1
  %84 = load double, double* %83, align 8
  %85 = fadd double %75, %84
  br label %86

86:                                               ; preds = %51, %78, %71, %2
  %87 = phi i64 [ %4, %2 ], [ %73, %71 ], [ %82, %78 ], [ %64, %51 ]
  %88 = phi double [ %6, %2 ], [ %72, %71 ], [ %85, %78 ], [ %65, %51 ]
  %89 = fcmp oeq double %88, 0.000000e+00
  br i1 %89, label %97, label %90

90:                                               ; preds = %86
  %91 = uitofp i64 %87 to double
  %92 = fdiv double %91, %88
  %93 = fcmp ult double %92, 0x41D0000000000000
  %94 = fcmp ole double %92, 1.000000e+00
  %95 = select i1 %94, double 1.000000e+00, double %92
  %96 = select i1 %93, double %95, double 0x41D0000000000000
  br label %97

97:                                               ; preds = %86, %90
  %98 = phi double [ 0.000000e+00, %86 ], [ %96, %90 ]
  %99 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 16
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 2
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, %102
  %106 = add nsw i32 %105, -1
  %107 = icmp sgt i32 %106, 9
  %108 = add nsw i32 %105, -11
  %109 = select i1 %107, i32 %108, i32 %106
  %110 = icmp sgt i32 %104, 0
  br i1 %110, label %111, label %180

111:                                              ; preds = %97
  %112 = fcmp oeq double %1, 0.000000e+00
  br i1 %112, label %113, label %145

113:                                              ; preds = %111
  %114 = and i32 %104, 1
  %115 = icmp eq i32 %104, 1
  br i1 %115, label %165, label %116

116:                                              ; preds = %113
  %117 = sub i32 %104, %114
  br label %118

118:                                              ; preds = %118, %116
  %119 = phi i32 [ %109, %116 ], [ %142, %118 ]
  %120 = phi double [ %6, %116 ], [ %138, %118 ]
  %121 = phi i64 [ %100, %116 ], [ %139, %118 ]
  %122 = phi i32 [ %117, %116 ], [ %143, %118 ]
  %123 = sext i32 %119 to i64
  %124 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %123, i32 0
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %123, i32 1
  %127 = load double, double* %126, align 8
  %128 = fadd double %120, %127
  %129 = add i64 %125, %121
  %130 = add nsw i32 %119, -1
  %131 = icmp eq i32 %119, 0
  %132 = select i1 %131, i32 9, i32 %130
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %133, i32 0
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %133, i32 1
  %137 = load double, double* %136, align 8
  %138 = fadd double %128, %137
  %139 = add i64 %135, %129
  %140 = add nsw i32 %132, -1
  %141 = icmp eq i32 %132, 0
  %142 = select i1 %141, i32 9, i32 %140
  %143 = add i32 %122, -2
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %165, label %118

145:                                              ; preds = %111, %145
  %146 = phi i32 [ %162, %145 ], [ %109, %111 ]
  %147 = phi i32 [ %163, %145 ], [ 0, %111 ]
  %148 = phi double [ %159, %145 ], [ %6, %111 ]
  %149 = phi i64 [ %158, %145 ], [ %100, %111 ]
  %150 = sext i32 %146 to i64
  %151 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %150, i32 0
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %150, i32 1
  %154 = load double, double* %153, align 8
  %155 = fcmp ult double %148, %1
  %156 = fadd double %148, %154
  %157 = select i1 %155, i64 %152, i64 0
  %158 = add i64 %157, %149
  %159 = select i1 %155, double %156, double %148
  %160 = add nsw i32 %146, -1
  %161 = icmp eq i32 %146, 0
  %162 = select i1 %161, i32 9, i32 %160
  %163 = add nuw nsw i32 %147, 1
  %164 = icmp eq i32 %163, %104
  br i1 %164, label %180, label %145

165:                                              ; preds = %118, %113
  %166 = phi double [ undef, %113 ], [ %138, %118 ]
  %167 = phi i64 [ undef, %113 ], [ %139, %118 ]
  %168 = phi i32 [ %109, %113 ], [ %142, %118 ]
  %169 = phi double [ %6, %113 ], [ %138, %118 ]
  %170 = phi i64 [ %100, %113 ], [ %139, %118 ]
  %171 = icmp eq i32 %114, 0
  br i1 %171, label %180, label %172

172:                                              ; preds = %165
  %173 = sext i32 %168 to i64
  %174 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %173, i32 0
  %175 = load i64, i64* %174, align 8
  %176 = add i64 %175, %170
  %177 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %173, i32 1
  %178 = load double, double* %177, align 8
  %179 = fadd double %169, %178
  br label %180

180:                                              ; preds = %145, %172, %165, %97
  %181 = phi i64 [ %100, %97 ], [ %167, %165 ], [ %176, %172 ], [ %158, %145 ]
  %182 = phi double [ %6, %97 ], [ %166, %165 ], [ %179, %172 ], [ %159, %145 ]
  %183 = fcmp oeq double %182, 0.000000e+00
  br i1 %183, label %191, label %184

184:                                              ; preds = %180
  %185 = uitofp i64 %181 to double
  %186 = fdiv double %185, %182
  %187 = fcmp ult double %186, 0x41D0000000000000
  %188 = fcmp ole double %186, 1.000000e+00
  %189 = select i1 %188, double 1.000000e+00, double %186
  %190 = select i1 %187, double %189, double 0x41D0000000000000
  br label %191

191:                                              ; preds = %180, %184
  %192 = phi double [ 0.000000e+00, %180 ], [ %190, %184 ]
  %193 = fadd double %98, %192
  ret double %193
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer48CurrentAllocationThroughputInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call double @_ZNK2v88internal8GCTracer41AllocationThroughputInBytesPerMillisecondEd(%"class.v8::internal::GCTracer"* %0, double 5.000000e+03)
  ret double %2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer61CurrentOldGenerationAllocationThroughputInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 16
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %37

13:                                               ; preds = %1
  %14 = icmp sgt i32 %11, 9
  %15 = add nsw i32 %10, -11
  %16 = select i1 %14, i32 %15, i32 %11
  br label %17

17:                                               ; preds = %13, %17
  %18 = phi i32 [ %34, %17 ], [ %16, %13 ]
  %19 = phi i32 [ %35, %17 ], [ 0, %13 ]
  %20 = phi double [ %31, %17 ], [ %5, %13 ]
  %21 = phi i64 [ %30, %17 ], [ %3, %13 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 30, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fcmp ult double %20, 5.000000e+03
  %28 = fadd double %20, %26
  %29 = select i1 %27, i64 %24, i64 0
  %30 = add i64 %29, %21
  %31 = select i1 %27, double %28, double %20
  %32 = add nsw i32 %18, -1
  %33 = icmp eq i32 %18, 0
  %34 = select i1 %33, i32 9, i32 %32
  %35 = add nuw nsw i32 %19, 1
  %36 = icmp eq i32 %35, %9
  br i1 %36, label %37, label %17

37:                                               ; preds = %17, %1
  %38 = phi i64 [ %3, %1 ], [ %30, %17 ]
  %39 = phi double [ %5, %1 ], [ %31, %17 ]
  %40 = fcmp oeq double %39, 0.000000e+00
  br i1 %40, label %48, label %41

41:                                               ; preds = %37
  %42 = uitofp i64 %38 to double
  %43 = fdiv double %42, %39
  %44 = fcmp ult double %43, 0x41D0000000000000
  %45 = fcmp ole double %43, 1.000000e+00
  %46 = select i1 %45, double 1.000000e+00, double %43
  %47 = select i1 %44, double %46, double 0x41D0000000000000
  br label %48

48:                                               ; preds = %37, %41
  %49 = phi double [ 0.000000e+00, %37 ], [ %47, %41 ]
  ret double %49
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK2v88internal8GCTracer56CurrentEmbedderAllocationThroughputInBytesPerMillisecondEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 17
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 14
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %37

13:                                               ; preds = %1
  %14 = icmp sgt i32 %11, 9
  %15 = add nsw i32 %10, -11
  %16 = select i1 %14, i32 %15, i32 %11
  br label %17

17:                                               ; preds = %13, %17
  %18 = phi i32 [ %34, %17 ], [ %16, %13 ]
  %19 = phi i32 [ %35, %17 ], [ 0, %13 ]
  %20 = phi double [ %31, %17 ], [ %5, %13 ]
  %21 = phi i64 [ %30, %17 ], [ %3, %13 ]
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %22, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 31, i32 0, i64 %22, i32 1
  %26 = load double, double* %25, align 8
  %27 = fcmp ult double %20, 5.000000e+03
  %28 = fadd double %20, %26
  %29 = select i1 %27, i64 %24, i64 0
  %30 = add i64 %29, %21
  %31 = select i1 %27, double %28, double %20
  %32 = add nsw i32 %18, -1
  %33 = icmp eq i32 %18, 0
  %34 = select i1 %33, i32 9, i32 %32
  %35 = add nuw nsw i32 %19, 1
  %36 = icmp eq i32 %35, %9
  br i1 %36, label %37, label %17

37:                                               ; preds = %17, %1
  %38 = phi i64 [ %3, %1 ], [ %30, %17 ]
  %39 = phi double [ %5, %1 ], [ %31, %17 ]
  %40 = fcmp oeq double %39, 0.000000e+00
  br i1 %40, label %48, label %41

41:                                               ; preds = %37
  %42 = uitofp i64 %38 to double
  %43 = fdiv double %42, %39
  %44 = fcmp ult double %43, 0x41D0000000000000
  %45 = fcmp ole double %43, 1.000000e+00
  %46 = select i1 %45, double 1.000000e+00, double %43
  %47 = select i1 %44, double %46, double 0x41D0000000000000
  br label %48

48:                                               ; preds = %37, %41
  %49 = phi double [ 0.000000e+00, %37 ], [ %47, %41 ]
  ret double %49
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8GCTracer22SurvivalEventsRecordedEv(%"class.v8::internal::GCTracer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal8GCTracer19ResetSurvivalEventsEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 2
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 32, i32 1
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer29NotifyIncrementalMarkingStartEv(%"class.v8::internal::GCTracer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %3 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %2, align 8
  %4 = tail call double @_ZNK2v88internal4Heap31MonotonicallyIncreasingTimeInMsEv(%"class.v8::internal::Heap"* %3) #7
  %5 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 5
  store double %4, double* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer23FetchBackgroundCountersEii(%"class.v8::internal::GCTracer"*, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 33
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %4) #7
  %5 = icmp sgt i32 %1, %2
  br i1 %5, label %69, label %6

6:                                                ; preds = %3
  %7 = sext i32 %1 to i64
  %8 = sext i32 %2 to i64
  %9 = icmp sgt i64 %8, %7
  %10 = select i1 %9, i64 %8, i64 %7
  %11 = add nsw i64 %10, 1
  %12 = sub nsw i64 %11, %7
  %13 = icmp ult i64 %12, 2
  br i1 %13, label %14, label %16

14:                                               ; preds = %67, %6
  %15 = phi i64 [ %7, %6 ], [ %18, %67 ]
  br label %70

16:                                               ; preds = %6
  %17 = and i64 %12, -2
  %18 = add nsw i64 %17, %7
  %19 = add nsw i64 %17, -2
  %20 = lshr exact i64 %19, 1
  %21 = add nuw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %53, label %24

24:                                               ; preds = %16
  %25 = sub nuw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %50, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %51, %26 ]
  %29 = add i64 %27, %7
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 %29, i32 0
  %31 = bitcast double* %30 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 %29
  %34 = bitcast double* %33 to <2 x double>*
  %35 = load <2 x double>, <2 x double>* %34, align 8
  %36 = fadd <2 x double> %32, %35
  %37 = bitcast double* %33 to <2 x double>*
  store <2 x double> %36, <2 x double>* %37, align 8
  %38 = bitcast double* %30 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %38, align 8
  %39 = or i64 %27, 2
  %40 = add i64 %39, %7
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 %40, i32 0
  %42 = bitcast double* %41 to <2 x double>*
  %43 = load <2 x double>, <2 x double>* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 %40
  %45 = bitcast double* %44 to <2 x double>*
  %46 = load <2 x double>, <2 x double>* %45, align 8
  %47 = fadd <2 x double> %43, %46
  %48 = bitcast double* %44 to <2 x double>*
  store <2 x double> %47, <2 x double>* %48, align 8
  %49 = bitcast double* %41 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8
  %50 = add i64 %27, 4
  %51 = add i64 %28, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %26, !llvm.loop !4

53:                                               ; preds = %26, %16
  %54 = phi i64 [ 0, %16 ], [ %50, %26 ]
  %55 = icmp eq i64 %22, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %53
  %57 = add i64 %54, %7
  %58 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 %57, i32 0
  %59 = bitcast double* %58 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 %57
  %62 = bitcast double* %61 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 8
  %64 = fadd <2 x double> %60, %63
  %65 = bitcast double* %61 to <2 x double>*
  store <2 x double> %64, <2 x double>* %65, align 8
  %66 = bitcast double* %58 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %66, align 8
  br label %67

67:                                               ; preds = %53, %56
  %68 = icmp eq i64 %12, %17
  br i1 %68, label %69, label %14

69:                                               ; preds = %70, %67, %3
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %4) #7
  ret void

70:                                               ; preds = %14, %70
  %71 = phi i64 [ %77, %70 ], [ %15, %14 ]
  %72 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 34, i64 %71, i32 0
  %73 = load double, double* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 %71
  %75 = load double, double* %74, align 8
  %76 = fadd double %73, %75
  store double %76, double* %74, align 8
  store double 0.000000e+00, double* %72, align 8
  %77 = add nsw i64 %71, 1
  %78 = icmp slt i64 %71, %8
  br i1 %78, label %70, label %69, !llvm.loop !6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8GCTracer24RecordGCPhasesHistogramsEPNS0_14TimedHistogramE(%"class.v8::internal::GCTracer"* nocapture readonly, %"class.v8::internal::TimedHistogram"* readnone) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 0
  %4 = bitcast %"class.v8::internal::GCTracer"* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -41416
  %7 = inttoptr i64 %6 to %"class.v8::internal::Isolate"*
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %7, i64 0, i32 14, i32 0
  %9 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 71
  %11 = icmp eq %"class.v8::internal::TimedHistogram"* %10, %1
  br i1 %11, label %12, label %91

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 10
  %14 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 20
  %15 = load double, double* %14, align 8
  %16 = fptosi double %15 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %13, i32 %16) #7
  %17 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 11
  %18 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 21
  %19 = load double, double* %18, align 8
  %20 = fptosi double %19 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %17, i32 %20) #7
  %21 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 12
  %22 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 22
  %23 = load double, double* %22, align 8
  %24 = fptosi double %23 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %21, i32 %24) #7
  %25 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 13
  %26 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 23
  %27 = load double, double* %26, align 8
  %28 = fptosi double %27 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %25, i32 %28) #7
  %29 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 14
  %30 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 24
  %31 = load double, double* %30, align 8
  %32 = fptosi double %31 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %29, i32 %32) #7
  %33 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 15
  %34 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 25
  %35 = load double, double* %34, align 8
  %36 = fptosi double %35 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %33, i32 %36) #7
  %37 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 16
  %38 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 26
  %39 = load double, double* %38, align 8
  %40 = fptosi double %39 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %37, i32 %40) #7
  %41 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 4
  %42 = load double, double* %41, align 8
  %43 = fcmp ogt double %42, 0.000000e+00
  br i1 %43, label %44, label %53

44:                                               ; preds = %12
  %45 = load i64, i64* %4, align 8
  %46 = add i64 %45, -41416
  %47 = inttoptr i64 %46 to %"class.v8::internal::Isolate"*
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %47, i64 0, i32 14, i32 0
  %49 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %49, i64 0, i32 8
  %51 = fptosi double %42 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %50, i32 %51) #7
  %52 = load double, double* %41, align 8
  br label %53

53:                                               ; preds = %44, %12
  %54 = phi double [ %52, %44 ], [ %42, %12 ]
  %55 = load double, double* %30, align 8
  %56 = fadd double %54, %55
  %57 = load i64, i64* %4, align 8
  %58 = add i64 %57, -41416
  %59 = inttoptr i64 %58 to %"class.v8::internal::Isolate"*
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %59, i64 0, i32 14, i32 0
  %61 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %61, i64 0, i32 20
  %63 = fptosi double %56 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %62, i32 %63) #7
  %64 = tail call zeroext i1 @_ZN2v84base9TimeTicks16IsHighResolutionEv() #7
  br i1 %64, label %65, label %103

65:                                               ; preds = %53
  %66 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %67 = tail call i64 @_ZN2v88internal4Heap13SizeOfObjectsEv(%"class.v8::internal::Heap"* %66) #7
  %68 = icmp ugt i64 %67, 1048576
  %69 = fcmp ogt double %56, 0.000000e+00
  %70 = and i1 %69, %68
  br i1 %70, label %71, label %103

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 52
  %73 = load double, double* %72, align 8
  %74 = fsub double %56, %73
  %75 = fcmp ogt double %74, 0.000000e+00
  br i1 %75, label %76, label %103

76:                                               ; preds = %71
  %77 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %3, align 8
  %78 = tail call i64 @_ZN2v88internal4Heap13SizeOfObjectsEv(%"class.v8::internal::Heap"* %77) #7
  %79 = uitofp i64 %78 to double
  %80 = fdiv double %79, %74
  %81 = fmul double %80, 1.000000e+03
  %82 = fmul double %81, 0x3F50000000000000
  %83 = fmul double %82, 0x3F50000000000000
  %84 = fptosi double %83 to i32
  %85 = load i64, i64* %4, align 8
  %86 = add i64 %85, -41416
  %87 = inttoptr i64 %86 to %"class.v8::internal::Isolate"*
  %88 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %87, i64 0, i32 14, i32 0
  %89 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %89, i64 0, i32 21
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %90, i32 %84) #7
  br label %103

91:                                               ; preds = %2
  %92 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 78
  %93 = icmp eq %"class.v8::internal::TimedHistogram"* %92, %1
  br i1 %93, label %94, label %103

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 17
  %96 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 101
  %97 = load double, double* %96, align 8
  %98 = fptosi double %97 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %95, i32 %98) #7
  %99 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %9, i64 0, i32 18
  %100 = getelementptr inbounds %"class.v8::internal::GCTracer", %"class.v8::internal::GCTracer"* %0, i64 0, i32 1, i32 16, i64 102
  %101 = load double, double* %100, align 8
  %102 = fptosi double %101 to i32
  tail call void @_ZN2v88internal9Histogram9AddSampleEi(%"class.v8::internal::Histogram"* %99, i32 %102) #7
  br label %103

103:                                              ; preds = %53, %65, %76, %71, %91, %94
  ret void
}

declare zeroext i1 @_ZN2v84base9TimeTicks16IsHighResolutionEv() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2v88internal33WorkerThreadRuntimeCallStatsScopeD1Ev(%"class.v8::internal::WorkerThreadRuntimeCallStatsScope"*) unnamed_addr #10

declare i64 @_ZN2v88internal4Heap26OldGenerationSizeOfObjectsEv(%"class.v8::internal::Heap"*) local_unnamed_addr #3

declare %"class.v8::internal::PagedSpace"* @_ZN2v88internal18PagedSpaceIterator4NextEv(%"class.v8::internal::PagedSpaceIterator"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal17MemoryChunkLayout27AllocatableMemoryInDataPageEv() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"*, i8**) unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #3

declare void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #3

declare void @_ZN2v88internal33WorkerThreadRuntimeCallStatsScopeC1EPNS0_28WorkerThreadRuntimeCallStatsE(%"class.v8::internal::WorkerThreadRuntimeCallStatsScope"*, %"class.v8::internal::WorkerThreadRuntimeCallStats"*) unnamed_addr #3

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #3

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #3

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #12

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
