; ModuleID = '../../third_party/webrtc/common_audio/real_fourier_ooura.cc'
source_filename = "../../third_party/webrtc/common_audio/real_fourier_ooura.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RealFourierOoura" = type { %"class.webrtc::RealFourier", i32, i64, i64, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1" }
%"class.webrtc::RealFourier" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { float* }
%"class.std::__1::complex" = type { float, float }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@_ZTVN6webrtc16RealFourierOouraE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::RealFourierOoura"*)* @_ZN6webrtc16RealFourierOouraD2Ev to i8*), i8* bitcast (void (%"class.webrtc::RealFourierOoura"*)* @_ZN6webrtc16RealFourierOouraD0Ev to i8*), i8* bitcast (void (%"class.webrtc::RealFourierOoura"*, float*, %"class.std::__1::complex"*)* @_ZNK6webrtc16RealFourierOoura7ForwardEPKfPNSt3__17complexIfEE to i8*), i8* bitcast (void (%"class.webrtc::RealFourierOoura"*, %"class.std::__1::complex"*, float*)* @_ZNK6webrtc16RealFourierOoura7InverseEPKNSt3__17complexIfEEPf to i8*), i8* bitcast (i32 (%"class.webrtc::RealFourierOoura"*)* @_ZNK6webrtc16RealFourierOoura5orderEv to i8*)] }, align 8
@.str = private unnamed_addr constant [60 x i8] c"../../third_party/webrtc/common_audio/real_fourier_ooura.cc\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"fft_order >= 1\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1

@_ZN6webrtc16RealFourierOouraC1Ei = hidden unnamed_addr alias void (%"class.webrtc::RealFourierOoura"*, i32), void (%"class.webrtc::RealFourierOoura"*, i32)* @_ZN6webrtc16RealFourierOouraC2Ei
@_ZN6webrtc16RealFourierOouraD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RealFourierOoura"*), void (%"class.webrtc::RealFourierOoura"*)* @_ZN6webrtc16RealFourierOouraD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RealFourierOouraC2Ei(%"class.webrtc::RealFourierOoura"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc16RealFourierOouraE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 2
  %6 = tail call i64 @_ZN6webrtc11RealFourier9FftLengthEi(i32 %1) #10
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 3
  %8 = load i32, i32* %4, align 8
  %9 = tail call i64 @_ZN6webrtc11RealFourier13ComplexLengthEi(i32 %8) #10
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 4
  %11 = load i64, i64* %5, align 8
  %12 = uitofp i64 %11 to float
  %13 = tail call float @sqrtf(float %12) #10
  %14 = tail call float @llvm.ceil.f32(float %13) #10
  %15 = fadd float %14, 2.000000e+00
  %16 = fptoui float %15 to i64
  %17 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %16, i64 8)
  %18 = extractvalue { i64, i1 } %17, 1
  %19 = extractvalue { i64, i1 } %17, 0
  %20 = select i1 %18, i64 -1, i64 %19
  %21 = tail call i8* @_Znam(i64 %20) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 %20, i1 false)
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 5
  %25 = load i64, i64* %7, align 8
  %26 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %25, i64 4)
  %27 = extractvalue { i64, i1 } %26, 1
  %28 = extractvalue { i64, i1 } %26, 0
  %29 = select i1 %27, i64 -1, i64 %28
  %30 = tail call i8* @_Znam(i64 %29) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %30, i8 0, i64 %29, i1 false)
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast %"class.std::__1::unique_ptr.1"* %24 to i64*
  store i64 %31, i64* %32, align 8
  %33 = icmp sgt i32 %1, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %2
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %1, i32 1) #12
  unreachable

35:                                               ; preds = %2
  ret void
}

declare i64 @_ZN6webrtc11RealFourier9FftLengthEi(i32) local_unnamed_addr #1

declare i64 @_ZN6webrtc11RealFourier13ComplexLengthEi(i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RealFourierOouraD2Ev(%"class.webrtc::RealFourierOoura"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc16RealFourierOouraE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  store float* null, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast float* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #11
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %10 = load i64*, i64** %9, align 8
  store i64* null, i64** %9, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = bitcast i64* %10 to i8*
  tail call void @_ZdaPv(i8* %13) #11
  br label %14

14:                                               ; preds = %8, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RealFourierOouraD0Ev(%"class.webrtc::RealFourierOoura"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6webrtc16RealFourierOouraE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  store float* null, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast float* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #11
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %10 = load i64*, i64** %9, align 8
  store i64* null, i64** %9, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = bitcast i64* %10 to i8*
  tail call void @_ZdaPv(i8* %13) #11
  br label %14

14:                                               ; preds = %8, %12
  %15 = bitcast %"class.webrtc::RealFourierOoura"* %0 to i8*
  tail call void @_ZdlPv(i8* %15) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc16RealFourierOoura7ForwardEPKfPNSt3__17complexIfEE(%"class.webrtc::RealFourierOoura"* nocapture readonly, float*, %"class.std::__1::complex"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 0, i32 0
  %5 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = shl nuw i64 %6, 2
  %10 = bitcast %"class.std::__1::complex"* %2 to i8*
  %11 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 %9, i1 false) #10
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %3, %8
  %14 = phi i64 [ 0, %3 ], [ %12, %8 ]
  %15 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 %14, i32 1, float* %4, i64* %16, float* %18) #10
  %19 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 0, i32 1
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, -1
  %25 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 %24
  %26 = bitcast %"class.std::__1::complex"* %25 to i32*
  store i32 %21, i32* %26, align 4
  %27 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 %24, i32 1
  %28 = bitcast float* %27 to i32*
  store i32 0, i32* %28, align 4
  store i32 0, i32* %20, align 4
  %29 = load i64, i64* %22, align 8
  %30 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 %29
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %105, label %32

32:                                               ; preds = %13
  %33 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = insertelement <2 x float> <float undef, float -0.000000e+00>, float %34, i32 0
  %36 = bitcast %"class.std::__1::complex"* %2 to <2 x float>*
  store <2 x float> %35, <2 x float>* %36, align 4
  %37 = icmp eq i64 %29, 1
  br i1 %37, label %105, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %2, i64 1
  %40 = shl nsw i64 %29, 3
  %41 = add i64 %40, -16
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %61, label %46

46:                                               ; preds = %38, %46
  %47 = phi %"class.std::__1::complex"* [ %58, %46 ], [ %39, %38 ]
  %48 = phi %"class.std::__1::complex"* [ %47, %46 ], [ %2, %38 ]
  %49 = phi i64 [ %59, %46 ], [ %44, %38 ]
  %50 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %48, i64 1, i32 1
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %47, i64 0, i32 0
  %53 = load float, float* %52, align 4
  %54 = fsub float -0.000000e+00, %51
  %55 = insertelement <2 x float> undef, float %53, i32 0
  %56 = insertelement <2 x float> %55, float %54, i32 1
  %57 = bitcast %"class.std::__1::complex"* %47 to <2 x float>*
  store <2 x float> %56, <2 x float>* %57, align 4
  %58 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %47, i64 1
  %59 = add i64 %49, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %46, !llvm.loop !2

61:                                               ; preds = %46, %38
  %62 = phi %"class.std::__1::complex"* [ %39, %38 ], [ %58, %46 ]
  %63 = phi %"class.std::__1::complex"* [ %2, %38 ], [ %47, %46 ]
  %64 = icmp ult i64 %41, 24
  br i1 %64, label %105, label %65

65:                                               ; preds = %61, %65
  %66 = phi %"class.std::__1::complex"* [ %103, %65 ], [ %62, %61 ]
  %67 = phi %"class.std::__1::complex"* [ %94, %65 ], [ %63, %61 ]
  %68 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %67, i64 1, i32 1
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 0, i32 0
  %71 = load float, float* %70, align 4
  %72 = fsub float -0.000000e+00, %69
  %73 = insertelement <2 x float> undef, float %71, i32 0
  %74 = insertelement <2 x float> %73, float %72, i32 1
  %75 = bitcast %"class.std::__1::complex"* %66 to <2 x float>*
  store <2 x float> %74, <2 x float>* %75, align 4
  %76 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 1
  %77 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 1, i32 1
  %78 = load float, float* %77, align 4
  %79 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %76, i64 0, i32 0
  %80 = load float, float* %79, align 4
  %81 = fsub float -0.000000e+00, %78
  %82 = insertelement <2 x float> undef, float %80, i32 0
  %83 = insertelement <2 x float> %82, float %81, i32 1
  %84 = bitcast %"class.std::__1::complex"* %76 to <2 x float>*
  store <2 x float> %83, <2 x float>* %84, align 4
  %85 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 2
  %86 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 2, i32 1
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %85, i64 0, i32 0
  %89 = load float, float* %88, align 4
  %90 = fsub float -0.000000e+00, %87
  %91 = insertelement <2 x float> undef, float %89, i32 0
  %92 = insertelement <2 x float> %91, float %90, i32 1
  %93 = bitcast %"class.std::__1::complex"* %85 to <2 x float>*
  store <2 x float> %92, <2 x float>* %93, align 4
  %94 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 3
  %95 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 3, i32 1
  %96 = load float, float* %95, align 4
  %97 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %94, i64 0, i32 0
  %98 = load float, float* %97, align 4
  %99 = fsub float -0.000000e+00, %96
  %100 = insertelement <2 x float> undef, float %98, i32 0
  %101 = insertelement <2 x float> %100, float %99, i32 1
  %102 = bitcast %"class.std::__1::complex"* %94 to <2 x float>*
  store <2 x float> %101, <2 x float>* %102, align 4
  %103 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %66, i64 4
  %104 = icmp eq %"class.std::__1::complex"* %103, %30
  br i1 %104, label %105, label %65

105:                                              ; preds = %61, %65, %32, %13
  ret void
}

declare void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64, i32, float*, i64*, float*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc16RealFourierOoura7InverseEPKNSt3__17complexIfEEPf(%"class.webrtc::RealFourierOoura"* nocapture readonly, %"class.std::__1::complex"*, float*) unnamed_addr #6 align 2 {
  %4 = bitcast float* %2 to %"class.std::__1::complex"*
  %5 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %76, label %9

9:                                                ; preds = %3
  %10 = shl nuw i64 %7, 3
  %11 = bitcast float* %2 to i8*
  %12 = bitcast %"class.std::__1::complex"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 %10, i1 false) #10
  %13 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %4, i64 %7
  %14 = shl i64 %6, 3
  %15 = add i64 %14, -16
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 3
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %9, %20
  %21 = phi %"class.std::__1::complex"* [ %31, %20 ], [ %4, %9 ]
  %22 = phi i64 [ %32, %20 ], [ %18, %9 ]
  %23 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %21, i64 0, i32 0
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %21, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fsub float -0.000000e+00, %26
  %28 = insertelement <2 x float> undef, float %24, i32 0
  %29 = insertelement <2 x float> %28, float %27, i32 1
  %30 = bitcast %"class.std::__1::complex"* %21 to <2 x float>*
  store <2 x float> %29, <2 x float>* %30, align 4
  %31 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %21, i64 1
  %32 = add i64 %22, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %20, !llvm.loop !4

34:                                               ; preds = %20, %9
  %35 = phi %"class.std::__1::complex"* [ %4, %9 ], [ %31, %20 ]
  %36 = icmp ult i64 %15, 24
  br i1 %36, label %76, label %37

37:                                               ; preds = %34, %37
  %38 = phi %"class.std::__1::complex"* [ %74, %37 ], [ %35, %34 ]
  %39 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = fsub float -0.000000e+00, %42
  %44 = insertelement <2 x float> undef, float %40, i32 0
  %45 = insertelement <2 x float> %44, float %43, i32 1
  %46 = bitcast %"class.std::__1::complex"* %38 to <2 x float>*
  store <2 x float> %45, <2 x float>* %46, align 4
  %47 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 1
  %48 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %47, i64 0, i32 0
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 1, i32 1
  %51 = load float, float* %50, align 4
  %52 = fsub float -0.000000e+00, %51
  %53 = insertelement <2 x float> undef, float %49, i32 0
  %54 = insertelement <2 x float> %53, float %52, i32 1
  %55 = bitcast %"class.std::__1::complex"* %47 to <2 x float>*
  store <2 x float> %54, <2 x float>* %55, align 4
  %56 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 2
  %57 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %56, i64 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 2, i32 1
  %60 = load float, float* %59, align 4
  %61 = fsub float -0.000000e+00, %60
  %62 = insertelement <2 x float> undef, float %58, i32 0
  %63 = insertelement <2 x float> %62, float %61, i32 1
  %64 = bitcast %"class.std::__1::complex"* %56 to <2 x float>*
  store <2 x float> %63, <2 x float>* %64, align 4
  %65 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 3
  %66 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %65, i64 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 3, i32 1
  %69 = load float, float* %68, align 4
  %70 = fsub float -0.000000e+00, %69
  %71 = insertelement <2 x float> undef, float %67, i32 0
  %72 = insertelement <2 x float> %71, float %70, i32 1
  %73 = bitcast %"class.std::__1::complex"* %65 to <2 x float>*
  store <2 x float> %72, <2 x float>* %73, align 4
  %74 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %38, i64 4
  %75 = icmp eq %"class.std::__1::complex"* %74, %13
  br i1 %75, label %76, label %37

76:                                               ; preds = %34, %37, %3
  %77 = load i64, i64* %5, align 8
  %78 = add i64 %77, -1
  %79 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %1, i64 %78, i32 0
  %80 = bitcast float* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds float, float* %2, i64 1
  %83 = bitcast float* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 2
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %87 = load i64*, i64** %86, align 8
  %88 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %89 = load float*, float** %88, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 %85, i32 -1, float* %2, i64* %87, float* %89) #10
  %90 = load i64, i64* %84, align 8
  %91 = uitofp i64 %90 to float
  %92 = fdiv float 2.000000e+00, %91
  %93 = getelementptr inbounds float, float* %2, i64 %90
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %166, label %95

95:                                               ; preds = %76
  %96 = shl nsw i64 %90, 2
  %97 = add i64 %96, -4
  %98 = lshr exact i64 %97, 2
  %99 = add nuw nsw i64 %98, 1
  %100 = icmp ult i64 %99, 8
  br i1 %100, label %158, label %101

101:                                              ; preds = %95
  %102 = and i64 %99, 9223372036854775800
  %103 = getelementptr float, float* %2, i64 %102
  %104 = insertelement <4 x float> undef, float %92, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = insertelement <4 x float> undef, float %92, i32 0
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> zeroinitializer
  %108 = add nsw i64 %102, -8
  %109 = lshr exact i64 %108, 3
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 1
  %112 = icmp eq i64 %108, 0
  br i1 %112, label %142, label %113

113:                                              ; preds = %101
  %114 = sub nuw nsw i64 %110, %111
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi i64 [ 0, %113 ], [ %139, %115 ]
  %117 = phi i64 [ %114, %113 ], [ %140, %115 ]
  %118 = getelementptr float, float* %2, i64 %116
  %119 = bitcast float* %118 to <4 x float>*
  %120 = load <4 x float>, <4 x float>* %119, align 4
  %121 = getelementptr float, float* %118, i64 4
  %122 = bitcast float* %121 to <4 x float>*
  %123 = load <4 x float>, <4 x float>* %122, align 4
  %124 = fmul <4 x float> %105, %120
  %125 = fmul <4 x float> %107, %123
  %126 = bitcast float* %118 to <4 x float>*
  store <4 x float> %124, <4 x float>* %126, align 4
  %127 = bitcast float* %121 to <4 x float>*
  store <4 x float> %125, <4 x float>* %127, align 4
  %128 = or i64 %116, 8
  %129 = getelementptr float, float* %2, i64 %128
  %130 = bitcast float* %129 to <4 x float>*
  %131 = load <4 x float>, <4 x float>* %130, align 4
  %132 = getelementptr float, float* %129, i64 4
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 4
  %135 = fmul <4 x float> %105, %131
  %136 = fmul <4 x float> %107, %134
  %137 = bitcast float* %129 to <4 x float>*
  store <4 x float> %135, <4 x float>* %137, align 4
  %138 = bitcast float* %132 to <4 x float>*
  store <4 x float> %136, <4 x float>* %138, align 4
  %139 = add i64 %116, 16
  %140 = add i64 %117, -2
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %115, !llvm.loop !5

142:                                              ; preds = %115, %101
  %143 = phi i64 [ 0, %101 ], [ %139, %115 ]
  %144 = icmp eq i64 %111, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %142
  %146 = getelementptr float, float* %2, i64 %143
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 4
  %149 = getelementptr float, float* %146, i64 4
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 4
  %152 = fmul <4 x float> %105, %148
  %153 = fmul <4 x float> %107, %151
  %154 = bitcast float* %146 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 4
  %155 = bitcast float* %149 to <4 x float>*
  store <4 x float> %153, <4 x float>* %155, align 4
  br label %156

156:                                              ; preds = %142, %145
  %157 = icmp eq i64 %99, %102
  br i1 %157, label %166, label %158

158:                                              ; preds = %156, %95
  %159 = phi float* [ %2, %95 ], [ %103, %156 ]
  br label %160

160:                                              ; preds = %158, %160
  %161 = phi float* [ %164, %160 ], [ %159, %158 ]
  %162 = load float, float* %161, align 4
  %163 = fmul float %92, %162
  store float %163, float* %161, align 4
  %164 = getelementptr inbounds float, float* %161, i64 1
  %165 = icmp eq float* %164, %93
  br i1 %165, label %166, label %160, !llvm.loop !7

166:                                              ; preds = %160, %156, %76
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc16RealFourierOoura5orderEv(%"class.webrtc::RealFourierOoura"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RealFourierOoura", %"class.webrtc::RealFourierOoura"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8, !6}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
