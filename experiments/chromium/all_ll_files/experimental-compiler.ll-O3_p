; ModuleID = '../../v8/src/regexp/experimental/experimental-compiler.cc'
source_filename = "../../v8/src/regexp/experimental/experimental-compiler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::RegExpTree" = type { i32 (...)** }
%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor" = type <{ %"class.v8::internal::RegExpVisitor", i32, i8, [3 x i8] }>
%"class.v8::internal::RegExpVisitor" = type { i32 (...)** }
%"class.v8::internal::ZoneList" = type { %"struct.v8::internal::RegExpInstruction"*, i32, i32 }
%"struct.v8::internal::RegExpInstruction" = type { i32, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::(anonymous namespace)::CompileVisitor" = type { %"class.v8::internal::RegExpVisitor", %"class.v8::internal::Zone"*, %"class.v8::internal::(anonymous namespace)::BytecodeAssembler" }
%"class.v8::internal::(anonymous namespace)::BytecodeAssembler" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList" }
%"class.v8::internal::RegExpDisjunction" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.8"*, i32, i32 }
%"class.v8::internal::ZoneList.8" = type { %"class.v8::internal::RegExpTree"**, i32, i32 }
%"class.v8::internal::RegExpAlternative" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.8"*, i32, i32 }
%"class.v8::internal::RegExpAssertion" = type { %"class.v8::internal::RegExpTree", i32, %"class.v8::base::Flags" }
%"class.v8::base::Flags" = type { i32 }
%"class.v8::internal::RegExpCharacterClass" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::CharacterSet", %"class.v8::base::Flags", %"class.v8::base::Flags.10" }
%"class.v8::internal::CharacterSet" = type <{ %"class.v8::internal::ZoneList.9"*, i16, [6 x i8] }>
%"class.v8::internal::ZoneList.9" = type { %"class.v8::internal::CharacterRange"*, i32, i32 }
%"class.v8::internal::CharacterRange" = type { i32, i32 }
%"class.v8::base::Flags.10" = type { i32 }
%"class.v8::internal::RegExpAtom" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::Vector", %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::Vector" = type { i16*, i64 }
%"class.v8::internal::RegExpQuantifier" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::RegExpCapture" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, %"class.v8::internal::ZoneVector"* }
%"class.v8::internal::ZoneVector" = type opaque
%"class.v8::internal::RegExpGroup" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32 }
%"class.v8::internal::RegExpLookaround" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i8, i32, i32, i32 }
%"class.v8::internal::RegExpBackReference" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::ZoneVector"*, %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::RegExpEmpty" = type { %"class.v8::internal::RegExpTree" }
%"class.v8::internal::RegExpText" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.11", i32, [4 x i8] }>
%"class.v8::internal::ZoneList.11" = type { %"class.v8::internal::TextElement"*, i32, i32 }
%"class.v8::internal::TextElement" = type { i32, i32, %"class.v8::internal::RegExpTree"* }

$_ZN2v88internal13RegExpVisitorD2Ev = comdat any

@_ZTVN2v88internal12_GLOBAL__N_119CanBeHandledVisitorE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpVisitor"*)* @_ZN2v88internal13RegExpVisitorD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitorD0Ev to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpDisjunction"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor16VisitDisjunctionEPNS0_17RegExpDisjunctionEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpAlternative"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor16VisitAlternativeEPNS0_17RegExpAlternativeEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpAssertion"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor14VisitAssertionEPNS0_15RegExpAssertionEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpCharacterClass"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor19VisitCharacterClassEPNS0_20RegExpCharacterClassEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpAtom"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor9VisitAtomEPNS0_10RegExpAtomEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpQuantifier"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor15VisitQuantifierEPNS0_16RegExpQuantifierEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpCapture"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor12VisitCaptureEPNS0_13RegExpCaptureEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpGroup"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor10VisitGroupEPNS0_11RegExpGroupEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpLookaround"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor15VisitLookaroundEPNS0_16RegExpLookaroundEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpBackReference"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor18VisitBackReferenceEPNS0_19RegExpBackReferenceEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpEmpty"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor10VisitEmptyEPNS0_11RegExpEmptyEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpText"*, i8*)* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor9VisitTextEPNS0_10RegExpTextEPv to i8*)] }, align 8
@_ZTVN2v88internal12_GLOBAL__N_114CompileVisitorE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpVisitor"*)* @_ZN2v88internal13RegExpVisitorD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitorD0Ev to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpDisjunction"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor16VisitDisjunctionEPNS0_17RegExpDisjunctionEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpAlternative"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor16VisitAlternativeEPNS0_17RegExpAlternativeEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpAssertion"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor14VisitAssertionEPNS0_15RegExpAssertionEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpCharacterClass"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor19VisitCharacterClassEPNS0_20RegExpCharacterClassEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpAtom"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor9VisitAtomEPNS0_10RegExpAtomEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpQuantifier"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor15VisitQuantifierEPNS0_16RegExpQuantifierEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpCapture"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor12VisitCaptureEPNS0_13RegExpCaptureEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpGroup"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor10VisitGroupEPNS0_11RegExpGroupEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpLookaround"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor15VisitLookaroundEPNS0_16RegExpLookaroundEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpBackReference"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor18VisitBackReferenceEPNS0_19RegExpBackReferenceEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpEmpty"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor10VisitEmptyEPNS0_11RegExpEmptyEPv to i8*), i8* bitcast (i8* (%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpText"*, i8*)* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor9VisitTextEPNS0_10RegExpTextEPv to i8*)] }, align 8
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal26ExperimentalRegExpCompiler12CanBeHandledEPNS0_10RegExpTreeENS_4base5FlagsINS0_8JSRegExp4FlagEiEEi(%"class.v8::internal::RegExpTree"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", align 8
  %5 = and i32 %1, -110
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %3
  %8 = bitcast %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_119CanBeHandledVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %4, i64 0, i32 1
  store i32 1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %4, i64 0, i32 2
  store i8 1, i8* %11, align 4
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %4, i64 0, i32 0
  %13 = bitcast %"class.v8::internal::RegExpTree"* %0 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %14 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %13, align 8
  %15 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %14, i64 2
  %16 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %15, align 8
  %17 = call i8* %16(%"class.v8::internal::RegExpTree"* %0, %"class.v8::internal::RegExpVisitor"* nonnull %12, i8* null) #10
  %18 = load i8, i8* %11, align 4, !range !2
  %19 = icmp ne i8 %18, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #10
  br label %20

20:                                               ; preds = %3, %7
  %21 = phi i1 [ %19, %7 ], [ false, %3 ]
  ret i1 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal26ExperimentalRegExpCompiler7CompileEPNS0_10RegExpTreeENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_4ZoneE(%"class.v8::internal::ZoneList"* noalias nocapture sret, %"class.v8::internal::RegExpTree"*, i32, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::(anonymous namespace)::CompileVisitor", align 8
  %6 = bitcast %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #10, !noalias !3
  %7 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_114CompileVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8, !noalias !3
  %8 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 1
  store %"class.v8::internal::Zone"* %3, %"class.v8::internal::Zone"** %8, align 8, !noalias !3
  %9 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 0
  store %"class.v8::internal::Zone"* %3, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %10 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1, i32 0
  %11 = bitcast %"struct.v8::internal::RegExpInstruction"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #10, !noalias !3
  %12 = and i32 %2, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %214

14:                                               ; preds = %4
  %15 = bitcast %"class.v8::internal::RegExpTree"* %1 to i1 (%"class.v8::internal::RegExpTree"*)***
  %16 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %15, align 8, !noalias !3
  %17 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %16, i64 5
  %18 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %17, align 8, !noalias !3
  %19 = tail call zeroext i1 %18(%"class.v8::internal::RegExpTree"* %1) #10, !noalias !3
  br i1 %19, label %214, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1, i32 2
  %22 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1
  %23 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1, i32 1
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 2
  %25 = load i64, i64* %24, align 8, !noalias !3
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 3
  %27 = load i64, i64* %26, align 8, !noalias !3
  %28 = sub i64 %27, %25
  %29 = icmp ult i64 %28, 8
  br i1 %29, label %30, label %32, !prof !6

30:                                               ; preds = %20
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 8) #10, !noalias !3
  br label %34

32:                                               ; preds = %20
  %33 = add i64 %25, 8
  store i64 %33, i64* %24, align 8, !noalias !3
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to %"struct.v8::internal::RegExpInstruction"*
  %37 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %22, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %36, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  store i32 1, i32* %23, align 8, !noalias !3
  store i32 1, i32* %21, align 4, !noalias !3
  %38 = inttoptr i64 %35 to i64*
  store i64 -4294967292, i64* %38, align 4, !noalias !3
  %39 = load i32, i32* %21, align 4, !noalias !3
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %41 = load i32, i32* %23, align 8, !noalias !3
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %45

43:                                               ; preds = %34
  %44 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  br label %81

45:                                               ; preds = %34
  %46 = shl nsw i32 %41, 1
  %47 = or i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = shl nsw i64 %48, 3
  %50 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %51 = load i64, i64* %50, align 8, !noalias !3
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %53 = load i64, i64* %52, align 8, !noalias !3
  %54 = sub i64 %53, %51
  %55 = icmp ugt i64 %49, %54
  br i1 %55, label %56, label %58, !prof !6

56:                                               ; preds = %45
  %57 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 %49) #10, !noalias !3
  br label %61

58:                                               ; preds = %45
  %59 = add i64 %51, %49
  store i64 %59, i64* %50, align 8, !noalias !3
  %60 = load i32, i32* %21, align 4, !noalias !3
  br label %61

61:                                               ; preds = %58, %56
  %62 = phi i32 [ %39, %56 ], [ %60, %58 ]
  %63 = phi i64 [ %57, %56 ], [ %51, %58 ]
  %64 = inttoptr i64 %63 to %"struct.v8::internal::RegExpInstruction"*
  %65 = icmp sgt i32 %62, 0
  br i1 %65, label %66, label %79

66:                                               ; preds = %61
  %67 = inttoptr i64 %63 to i8*
  %68 = bitcast %"class.v8::internal::ZoneList"* %22 to i8**
  %69 = load i8*, i8** %68, align 8, !noalias !3
  %70 = sext i32 %62 to i64
  %71 = shl nsw i64 %70, 3
  switch i64 %71, label %78 [
    i64 16, label %77
    i64 8, label %72
  ]

72:                                               ; preds = %66
  %73 = bitcast i8* %69 to i64*
  %74 = inttoptr i64 %63 to i64*
  %75 = load i64, i64* %73, align 1, !noalias !3
  store i64 %75, i64* %74, align 1, !noalias !3
  %76 = load i32, i32* %21, align 4, !noalias !3
  br label %79

77:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %69, i64 16, i1 false) #10, !noalias !3
  br label %79

78:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %69, i64 %71, i1 false) #10, !noalias !3
  br label %79

79:                                               ; preds = %78, %77, %72, %61
  %80 = phi i32 [ %62, %78 ], [ %62, %77 ], [ %76, %72 ], [ %62, %61 ]
  store %"struct.v8::internal::RegExpInstruction"* %64, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  store i32 %47, i32* %23, align 8, !noalias !3
  br label %81

81:                                               ; preds = %79, %43
  %82 = phi i32 [ %80, %79 ], [ %39, %43 ]
  %83 = phi %"struct.v8::internal::RegExpInstruction"* [ %64, %79 ], [ %44, %43 ]
  %84 = add nsw i32 %82, 1
  store i32 %84, i32* %21, align 4, !noalias !3
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %83, i64 %85
  %87 = bitcast %"struct.v8::internal::RegExpInstruction"* %86 to i64*
  store i64 -4294967291, i64* %87, align 4, !noalias !3
  %88 = load i32, i32* %21, align 4, !noalias !3
  br label %89

89:                                               ; preds = %89, %81
  %90 = phi i32 [ %94, %89 ], [ 0, %81 ]
  %91 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %10, align 8, !noalias !3
  %92 = sext i32 %90 to i64
  %93 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %91, i64 %92, i32 1, i32 0
  %94 = load i32, i32* %93, align 4, !noalias !3
  store i32 %88, i32* %93, align 4, !noalias !3
  %95 = icmp eq i32 %94, -1
  br i1 %95, label %96, label %89

96:                                               ; preds = %89
  %97 = load i32, i32* %21, align 4, !noalias !3
  %98 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %99 = load i32, i32* %23, align 8, !noalias !3
  %100 = icmp slt i32 %97, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %96
  %102 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  br label %139

103:                                              ; preds = %96
  %104 = shl nsw i32 %99, 1
  %105 = or i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 3
  %108 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %98, i64 0, i32 2
  %109 = load i64, i64* %108, align 8, !noalias !3
  %110 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %98, i64 0, i32 3
  %111 = load i64, i64* %110, align 8, !noalias !3
  %112 = sub i64 %111, %109
  %113 = icmp ugt i64 %107, %112
  br i1 %113, label %114, label %116, !prof !6

114:                                              ; preds = %103
  %115 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %98, i64 %107) #10, !noalias !3
  br label %119

116:                                              ; preds = %103
  %117 = add i64 %109, %107
  store i64 %117, i64* %108, align 8, !noalias !3
  %118 = load i32, i32* %21, align 4, !noalias !3
  br label %119

119:                                              ; preds = %116, %114
  %120 = phi i32 [ %97, %114 ], [ %118, %116 ]
  %121 = phi i64 [ %115, %114 ], [ %109, %116 ]
  %122 = inttoptr i64 %121 to %"struct.v8::internal::RegExpInstruction"*
  %123 = icmp sgt i32 %120, 0
  br i1 %123, label %124, label %137

124:                                              ; preds = %119
  %125 = inttoptr i64 %121 to i8*
  %126 = bitcast %"class.v8::internal::ZoneList"* %22 to i8**
  %127 = load i8*, i8** %126, align 8, !noalias !3
  %128 = sext i32 %120 to i64
  %129 = shl nsw i64 %128, 3
  switch i64 %129, label %136 [
    i64 16, label %135
    i64 8, label %130
  ]

130:                                              ; preds = %124
  %131 = bitcast i8* %127 to i64*
  %132 = inttoptr i64 %121 to i64*
  %133 = load i64, i64* %131, align 1, !noalias !3
  store i64 %133, i64* %132, align 1, !noalias !3
  %134 = load i32, i32* %21, align 4, !noalias !3
  br label %137

135:                                              ; preds = %124
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 16, i1 false) #10, !noalias !3
  br label %137

136:                                              ; preds = %124
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 %129, i1 false) #10, !noalias !3
  br label %137

137:                                              ; preds = %136, %135, %130, %119
  %138 = phi i32 [ %120, %136 ], [ %120, %135 ], [ %134, %130 ], [ %120, %119 ]
  store %"struct.v8::internal::RegExpInstruction"* %122, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  store i32 %105, i32* %23, align 8, !noalias !3
  br label %139

139:                                              ; preds = %137, %101
  %140 = phi i32 [ %138, %137 ], [ %97, %101 ]
  %141 = phi %"struct.v8::internal::RegExpInstruction"* [ %122, %137 ], [ %102, %101 ]
  %142 = add nsw i32 %140, 1
  store i32 %142, i32* %21, align 4, !noalias !3
  %143 = sext i32 %140 to i64
  %144 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %141, i64 %143
  %145 = bitcast %"struct.v8::internal::RegExpInstruction"* %144 to i64*
  store i64 -281474976710653, i64* %145, align 4, !noalias !3
  %146 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %147 = load i32, i32* %21, align 4, !noalias !3
  %148 = load i32, i32* %23, align 8, !noalias !3
  %149 = icmp slt i32 %147, %148
  br i1 %149, label %150, label %159

150:                                              ; preds = %139
  %151 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  %152 = add nsw i32 %147, 1
  store i32 %152, i32* %21, align 4, !noalias !3
  %153 = sext i32 %147 to i64
  %154 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %151, i64 %153
  %155 = bitcast %"struct.v8::internal::RegExpInstruction"* %154 to i64*
  %156 = zext i32 %88 to i64
  %157 = shl nuw i64 %156, 32
  %158 = or i64 %157, 4
  store i64 %158, i64* %155, align 4, !noalias !3
  br label %202

159:                                              ; preds = %139
  %160 = shl nsw i32 %148, 1
  %161 = or i32 %160, 1
  %162 = zext i32 %88 to i64
  %163 = shl nuw i64 %162, 32
  %164 = or i64 %163, 4
  %165 = sext i32 %161 to i64
  %166 = shl nsw i64 %165, 3
  %167 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %146, i64 0, i32 2
  %168 = load i64, i64* %167, align 8, !noalias !3
  %169 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %146, i64 0, i32 3
  %170 = load i64, i64* %169, align 8, !noalias !3
  %171 = sub i64 %170, %168
  %172 = icmp ugt i64 %166, %171
  br i1 %172, label %173, label %175, !prof !6

173:                                              ; preds = %159
  %174 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %146, i64 %166) #10, !noalias !3
  br label %178

175:                                              ; preds = %159
  %176 = add i64 %168, %166
  store i64 %176, i64* %167, align 8, !noalias !3
  %177 = load i32, i32* %21, align 4, !noalias !3
  br label %178

178:                                              ; preds = %175, %173
  %179 = phi i32 [ %147, %173 ], [ %177, %175 ]
  %180 = phi i64 [ %174, %173 ], [ %168, %175 ]
  %181 = inttoptr i64 %180 to %"struct.v8::internal::RegExpInstruction"*
  %182 = icmp sgt i32 %179, 0
  br i1 %182, label %183, label %196

183:                                              ; preds = %178
  %184 = inttoptr i64 %180 to i8*
  %185 = bitcast %"class.v8::internal::ZoneList"* %22 to i8**
  %186 = load i8*, i8** %185, align 8, !noalias !3
  %187 = sext i32 %179 to i64
  %188 = shl nsw i64 %187, 3
  switch i64 %188, label %195 [
    i64 16, label %194
    i64 8, label %189
  ]

189:                                              ; preds = %183
  %190 = bitcast i8* %186 to i64*
  %191 = inttoptr i64 %180 to i64*
  %192 = load i64, i64* %190, align 1, !noalias !3
  store i64 %192, i64* %191, align 1, !noalias !3
  %193 = load i32, i32* %21, align 4, !noalias !3
  br label %196

194:                                              ; preds = %183
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %184, i8* align 1 %186, i64 16, i1 false) #10, !noalias !3
  br label %196

195:                                              ; preds = %183
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %184, i8* align 1 %186, i64 %188, i1 false) #10, !noalias !3
  br label %196

196:                                              ; preds = %195, %194, %189, %178
  %197 = phi i32 [ %179, %195 ], [ %179, %194 ], [ %193, %189 ], [ %179, %178 ]
  store %"struct.v8::internal::RegExpInstruction"* %181, %"struct.v8::internal::RegExpInstruction"** %37, align 8, !noalias !3
  store i32 %161, i32* %23, align 8, !noalias !3
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %21, align 4, !noalias !3
  %199 = sext i32 %197 to i64
  %200 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %181, i64 %199
  %201 = bitcast %"struct.v8::internal::RegExpInstruction"* %200 to i64*
  store i64 %164, i64* %201, align 4, !noalias !3
  br label %202

202:                                              ; preds = %196, %150
  %203 = load i32, i32* %21, align 4, !noalias !3
  %204 = icmp eq i32 %39, -1
  br i1 %204, label %214, label %205

205:                                              ; preds = %202, %205
  %206 = phi i32 [ %210, %205 ], [ %39, %202 ]
  %207 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %10, align 8, !noalias !3
  %208 = sext i32 %206 to i64
  %209 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %207, i64 %208, i32 1, i32 0
  %210 = load i32, i32* %209, align 4, !noalias !3
  store i32 %203, i32* %209, align 4, !noalias !3
  %211 = icmp eq i32 %210, -1
  br i1 %211, label %212, label %205

212:                                              ; preds = %205
  %213 = load i32, i32* %21, align 4, !noalias !3
  br label %214

214:                                              ; preds = %212, %202, %14, %4
  %215 = phi i32 [ %213, %212 ], [ 0, %4 ], [ %203, %202 ], [ 0, %14 ]
  %216 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1
  %217 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %218 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1, i32 2
  %219 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 2, i32 1, i32 1
  %220 = load i32, i32* %219, align 8, !noalias !3
  %221 = icmp slt i32 %215, %220
  br i1 %221, label %222, label %225

222:                                              ; preds = %214
  %223 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  %224 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %223, align 8, !noalias !3
  br label %262

225:                                              ; preds = %214
  %226 = shl nsw i32 %220, 1
  %227 = or i32 %226, 1
  %228 = sext i32 %227 to i64
  %229 = shl nsw i64 %228, 3
  %230 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %217, i64 0, i32 2
  %231 = load i64, i64* %230, align 8, !noalias !3
  %232 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %217, i64 0, i32 3
  %233 = load i64, i64* %232, align 8, !noalias !3
  %234 = sub i64 %233, %231
  %235 = icmp ugt i64 %229, %234
  br i1 %235, label %236, label %238, !prof !6

236:                                              ; preds = %225
  %237 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %217, i64 %229) #10, !noalias !3
  br label %241

238:                                              ; preds = %225
  %239 = add i64 %231, %229
  store i64 %239, i64* %230, align 8, !noalias !3
  %240 = load i32, i32* %218, align 4, !noalias !3
  br label %241

241:                                              ; preds = %238, %236
  %242 = phi i32 [ %215, %236 ], [ %240, %238 ]
  %243 = phi i64 [ %237, %236 ], [ %231, %238 ]
  %244 = inttoptr i64 %243 to %"struct.v8::internal::RegExpInstruction"*
  %245 = icmp sgt i32 %242, 0
  br i1 %245, label %246, label %259

246:                                              ; preds = %241
  %247 = inttoptr i64 %243 to i8*
  %248 = bitcast %"class.v8::internal::ZoneList"* %216 to i8**
  %249 = load i8*, i8** %248, align 8, !noalias !3
  %250 = sext i32 %242 to i64
  %251 = shl nsw i64 %250, 3
  switch i64 %251, label %258 [
    i64 16, label %257
    i64 8, label %252
  ]

252:                                              ; preds = %246
  %253 = bitcast i8* %249 to i64*
  %254 = inttoptr i64 %243 to i64*
  %255 = load i64, i64* %253, align 1, !noalias !3
  store i64 %255, i64* %254, align 1, !noalias !3
  %256 = load i32, i32* %218, align 4, !noalias !3
  br label %259

257:                                              ; preds = %246
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %247, i8* align 1 %249, i64 16, i1 false) #10, !noalias !3
  br label %259

258:                                              ; preds = %246
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %247, i8* align 1 %249, i64 %251, i1 false) #10, !noalias !3
  br label %259

259:                                              ; preds = %258, %257, %252, %241
  %260 = phi i32 [ %242, %258 ], [ %242, %257 ], [ %256, %252 ], [ %242, %241 ]
  %261 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %244, %"struct.v8::internal::RegExpInstruction"** %261, align 8, !noalias !3
  store i32 %227, i32* %219, align 8, !noalias !3
  br label %262

262:                                              ; preds = %259, %222
  %263 = phi i32 [ %260, %259 ], [ %215, %222 ]
  %264 = phi %"struct.v8::internal::RegExpInstruction"* [ %244, %259 ], [ %224, %222 ]
  %265 = add nsw i32 %263, 1
  store i32 %265, i32* %218, align 4, !noalias !3
  %266 = sext i32 %263 to i64
  %267 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %264, i64 %266
  %268 = bitcast %"struct.v8::internal::RegExpInstruction"* %267 to i64*
  store i64 6, i64* %268, align 4, !noalias !3
  %269 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %5, i64 0, i32 0
  %270 = bitcast %"class.v8::internal::RegExpTree"* %1 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %271 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %270, align 8, !noalias !3
  %272 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %271, i64 2
  %273 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %272, align 8, !noalias !3
  %274 = call i8* %273(%"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::RegExpVisitor"* nonnull %269, i8* null) #10, !noalias !3
  %275 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %276 = load i32, i32* %218, align 4, !noalias !3
  %277 = load i32, i32* %219, align 8, !noalias !3
  %278 = icmp slt i32 %276, %277
  br i1 %278, label %279, label %282

279:                                              ; preds = %262
  %280 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  %281 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %280, align 8, !noalias !3
  br label %317

282:                                              ; preds = %262
  %283 = shl nsw i32 %277, 1
  %284 = or i32 %283, 1
  %285 = sext i32 %284 to i64
  %286 = shl nsw i64 %285, 3
  %287 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %275, i64 0, i32 2
  %288 = load i64, i64* %287, align 8, !noalias !3
  %289 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %275, i64 0, i32 3
  %290 = load i64, i64* %289, align 8, !noalias !3
  %291 = sub i64 %290, %288
  %292 = icmp ugt i64 %286, %291
  br i1 %292, label %293, label %295, !prof !6

293:                                              ; preds = %282
  %294 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %275, i64 %286) #10, !noalias !3
  br label %297

295:                                              ; preds = %282
  %296 = add i64 %288, %286
  store i64 %296, i64* %287, align 8, !noalias !3
  br label %297

297:                                              ; preds = %295, %293
  %298 = phi i64 [ %294, %293 ], [ %288, %295 ]
  %299 = inttoptr i64 %298 to %"struct.v8::internal::RegExpInstruction"*
  %300 = load i32, i32* %218, align 4, !noalias !3
  %301 = icmp sgt i32 %300, 0
  br i1 %301, label %302, label %314

302:                                              ; preds = %297
  %303 = inttoptr i64 %298 to i8*
  %304 = bitcast %"class.v8::internal::ZoneList"* %216 to i8**
  %305 = load i8*, i8** %304, align 8, !noalias !3
  %306 = sext i32 %300 to i64
  %307 = shl nsw i64 %306, 3
  switch i64 %307, label %313 [
    i64 16, label %312
    i64 8, label %308
  ]

308:                                              ; preds = %302
  %309 = bitcast i8* %305 to i64*
  %310 = inttoptr i64 %298 to i64*
  %311 = load i64, i64* %309, align 1, !noalias !3
  store i64 %311, i64* %310, align 1, !noalias !3
  br label %314

312:                                              ; preds = %302
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 %305, i64 16, i1 false) #10, !noalias !3
  br label %314

313:                                              ; preds = %302
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 %305, i64 %307, i1 false) #10, !noalias !3
  br label %314

314:                                              ; preds = %313, %312, %308, %297
  %315 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %299, %"struct.v8::internal::RegExpInstruction"** %315, align 8, !noalias !3
  store i32 %284, i32* %219, align 8, !noalias !3
  %316 = load i32, i32* %218, align 4, !noalias !3
  br label %317

317:                                              ; preds = %314, %279
  %318 = phi i32 [ %316, %314 ], [ %276, %279 ]
  %319 = phi %"struct.v8::internal::RegExpInstruction"* [ %299, %314 ], [ %281, %279 ]
  %320 = add nsw i32 %318, 1
  store i32 %320, i32* %218, align 4, !noalias !3
  %321 = sext i32 %318 to i64
  %322 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %319, i64 %321
  %323 = bitcast %"struct.v8::internal::RegExpInstruction"* %322 to i64*
  store i64 4294967302, i64* %323, align 4, !noalias !3
  %324 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8, !noalias !3
  %325 = load i32, i32* %218, align 4, !noalias !3
  %326 = load i32, i32* %219, align 8, !noalias !3
  %327 = icmp slt i32 %325, %326
  br i1 %327, label %328, label %331

328:                                              ; preds = %317
  %329 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  %330 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %329, align 8, !noalias !3
  br label %366

331:                                              ; preds = %317
  %332 = shl nsw i32 %326, 1
  %333 = or i32 %332, 1
  %334 = sext i32 %333 to i64
  %335 = shl nsw i64 %334, 3
  %336 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %324, i64 0, i32 2
  %337 = load i64, i64* %336, align 8, !noalias !3
  %338 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %324, i64 0, i32 3
  %339 = load i64, i64* %338, align 8, !noalias !3
  %340 = sub i64 %339, %337
  %341 = icmp ugt i64 %335, %340
  br i1 %341, label %342, label %344, !prof !6

342:                                              ; preds = %331
  %343 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %324, i64 %335) #10, !noalias !3
  br label %346

344:                                              ; preds = %331
  %345 = add i64 %337, %335
  store i64 %345, i64* %336, align 8, !noalias !3
  br label %346

346:                                              ; preds = %344, %342
  %347 = phi i64 [ %343, %342 ], [ %337, %344 ]
  %348 = inttoptr i64 %347 to %"struct.v8::internal::RegExpInstruction"*
  %349 = load i32, i32* %218, align 4, !noalias !3
  %350 = icmp sgt i32 %349, 0
  br i1 %350, label %351, label %363

351:                                              ; preds = %346
  %352 = inttoptr i64 %347 to i8*
  %353 = bitcast %"class.v8::internal::ZoneList"* %216 to i8**
  %354 = load i8*, i8** %353, align 8, !noalias !3
  %355 = sext i32 %349 to i64
  %356 = shl nsw i64 %355, 3
  switch i64 %356, label %362 [
    i64 16, label %361
    i64 8, label %357
  ]

357:                                              ; preds = %351
  %358 = bitcast i8* %354 to i64*
  %359 = inttoptr i64 %347 to i64*
  %360 = load i64, i64* %358, align 1, !noalias !3
  store i64 %360, i64* %359, align 1, !noalias !3
  br label %363

361:                                              ; preds = %351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %352, i8* align 1 %354, i64 16, i1 false) #10, !noalias !3
  br label %363

362:                                              ; preds = %351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %352, i8* align 1 %354, i64 %356, i1 false) #10, !noalias !3
  br label %363

363:                                              ; preds = %362, %361, %357, %346
  %364 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %216, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %348, %"struct.v8::internal::RegExpInstruction"** %364, align 8, !noalias !3
  store i32 %333, i32* %219, align 8, !noalias !3
  %365 = load i32, i32* %218, align 4, !noalias !3
  br label %366

366:                                              ; preds = %328, %363
  %367 = phi i32 [ %325, %328 ], [ %365, %363 ]
  %368 = phi %"struct.v8::internal::RegExpInstruction"* [ %330, %328 ], [ %348, %363 ]
  %369 = add nsw i32 %367, 1
  store i32 %369, i32* %218, align 4, !noalias !3
  %370 = sext i32 %367 to i64
  %371 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %368, i64 %370
  %372 = bitcast %"struct.v8::internal::RegExpInstruction"* %371 to i64*
  store i64 0, i64* %372, align 4, !noalias !3
  %373 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %0, i64 0, i32 1
  %374 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %0, i64 0, i32 2
  %375 = bitcast %"class.v8::internal::ZoneList"* %216 to i64*
  %376 = load i64, i64* %375, align 8, !noalias !7
  %377 = bitcast %"class.v8::internal::ZoneList"* %0 to i64*
  store i64 %376, i64* %377, align 8, !alias.scope !7
  %378 = load i32, i32* %219, align 8, !noalias !7
  store i32 %378, i32* %373, align 8, !alias.scope !7
  %379 = load i32, i32* %218, align 4, !noalias !7
  store i32 %379, i32* %374, align 4, !alias.scope !7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #10, !noalias !3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13RegExpVisitorD2Ev(%"class.v8::internal::RegExpVisitor"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitorD0Ev(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor16VisitDisjunctionEPNS0_17RegExpDisjunctionEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpDisjunction"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.8"*, %"class.v8::internal::ZoneList.8"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 0
  %7 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi %"class.v8::internal::RegExpTree"** [ %7, %13 ], [ %26, %16 ]
  %18 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, align 8
  %19 = bitcast %"class.v8::internal::RegExpTree"* %18 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %20 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %19, align 8
  %21 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %20, i64 2
  %22 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %21, align 8
  %23 = tail call i8* %22(%"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::RegExpVisitor"* %14, i8* null) #10
  %24 = load i8, i8* %15, align 4, !range !2
  %25 = icmp ne i8 %24, 1
  %26 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, i64 1
  %27 = icmp eq %"class.v8::internal::RegExpTree"** %26, %11
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %16

29:                                               ; preds = %16, %3
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor16VisitAlternativeEPNS0_17RegExpAlternativeEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpAlternative"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpAlternative", %"class.v8::internal::RegExpAlternative"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.8"*, %"class.v8::internal::ZoneList.8"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 0
  %7 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi %"class.v8::internal::RegExpTree"** [ %7, %13 ], [ %26, %16 ]
  %18 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, align 8
  %19 = bitcast %"class.v8::internal::RegExpTree"* %18 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %20 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %19, align 8
  %21 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %20, i64 2
  %22 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %21, align 8
  %23 = tail call i8* %22(%"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::RegExpVisitor"* %14, i8* null) #10
  %24 = load i8, i8* %15, align 4, !range !2
  %25 = icmp ne i8 %24, 1
  %26 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, i64 1
  %27 = icmp eq %"class.v8::internal::RegExpTree"** %26, %11
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %16

29:                                               ; preds = %16, %3
  ret i8* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor14VisitAssertionEPNS0_15RegExpAssertionEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture, %"class.v8::internal::RegExpAssertion"* nocapture readonly, i8* nocapture readnone) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %1, i64 0, i32 2, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, -110
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i8
  br label %13

13:                                               ; preds = %3, %7
  %14 = phi i8 [ 0, %3 ], [ %12, %7 ]
  store i8 %14, i8* %4, align 4
  ret i8* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor19VisitCharacterClassEPNS0_20RegExpCharacterClassEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture, %"class.v8::internal::RegExpCharacterClass"* nocapture readonly, i8* nocapture readnone) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 2, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, -110
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i8
  br label %13

13:                                               ; preds = %3, %7
  %14 = phi i8 [ 0, %3 ], [ %12, %7 ]
  store i8 %14, i8* %4, align 4
  ret i8* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor9VisitAtomEPNS0_10RegExpAtomEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture, %"class.v8::internal::RegExpAtom"* nocapture readonly, i8* nocapture readnone) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %1, i64 0, i32 2, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, -110
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i8
  br label %13

13:                                               ; preds = %3, %7
  %14 = phi i8 [ 0, %3 ], [ %12, %7 ]
  store i8 %14, i8* %4, align 4
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor15VisitQuantifierEPNS0_16RegExpQuantifierEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpQuantifier"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 16
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 2147483647
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = icmp sgt i32 %9, 16
  br i1 %12, label %13, label %17

13:                                               ; preds = %11, %3
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  store i8 0, i8* %14, align 4
  br label %40

15:                                               ; preds = %7
  %16 = add nsw i32 %5, 1
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i32 [ %16, %15 ], [ %9, %11 ]
  %19 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = mul nsw i32 %20, %18
  store i32 %21, i32* %19, align 8
  %22 = icmp sgt i32 %21, 16
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  store i8 0, i8* %24, align 4
  br label %40

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 6
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  store i8 0, i8* %30, align 4
  br label %40

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 1
  %33 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %35 = bitcast %"class.v8::internal::RegExpTree"* %33 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %36 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %35, align 8
  %37 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %36, i64 2
  %38 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %37, align 8
  %39 = tail call i8* %38(%"class.v8::internal::RegExpTree"* %33, %"class.v8::internal::RegExpVisitor"* %34, i8* null) #10
  store i32 %20, i32* %19, align 8
  br label %40

40:                                               ; preds = %23, %29, %31, %13
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor12VisitCaptureEPNS0_13RegExpCaptureEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpCapture"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %7 = bitcast %"class.v8::internal::RegExpTree"* %5 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %8 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %7, align 8
  %9 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %8, i64 2
  %10 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %9, align 8
  %11 = tail call i8* %10(%"class.v8::internal::RegExpTree"* %5, %"class.v8::internal::RegExpVisitor"* %6, i8* null) #10
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor10VisitGroupEPNS0_11RegExpGroupEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpGroup"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %7 = bitcast %"class.v8::internal::RegExpTree"* %5 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %8 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %7, align 8
  %9 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %8, i64 2
  %10 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %9, align 8
  %11 = tail call i8* %10(%"class.v8::internal::RegExpTree"* %5, %"class.v8::internal::RegExpVisitor"* %6, i8* null) #10
  ret i8* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor15VisitLookaroundEPNS0_16RegExpLookaroundEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture, %"class.v8::internal::RegExpLookaround"* nocapture readnone, i8* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 4
  ret i8* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor18VisitBackReferenceEPNS0_19RegExpBackReferenceEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture, %"class.v8::internal::RegExpBackReference"* nocapture readnone, i8* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 4
  ret i8* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor10VisitEmptyEPNS0_11RegExpEmptyEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* nocapture readnone, %"class.v8::internal::RegExpEmpty"* nocapture readnone, i8* nocapture readnone) unnamed_addr #5 align 2 {
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_119CanBeHandledVisitor9VisitTextEPNS0_10RegExpTextEPv(%"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"*, %"class.v8::internal::RegExpText"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %1, i64 0, i32 1, i32 0
  %5 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %1, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor", %"class.v8::internal::(anonymous namespace)::CanBeHandledVisitor"* %0, i64 0, i32 2
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi %"class.v8::internal::TextElement"* [ %5, %11 ], [ %25, %14 ]
  %16 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 0, i32 2
  %17 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, align 8
  %18 = bitcast %"class.v8::internal::RegExpTree"* %17 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %19 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %18, align 8
  %20 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %19, i64 2
  %21 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %20, align 8
  %22 = tail call i8* %21(%"class.v8::internal::RegExpTree"* %17, %"class.v8::internal::RegExpVisitor"* %12, i8* null) #10
  %23 = load i8, i8* %13, align 4, !range !2
  %24 = icmp ne i8 %23, 1
  %25 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 1
  %26 = icmp eq %"class.v8::internal::TextElement"* %25, %9
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %14

28:                                               ; preds = %14, %3
  ret i8* null
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal12_GLOBAL__N_114CompileVisitorD0Ev(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor16VisitDisjunctionEPNS0_17RegExpDisjunctionEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpDisjunction"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.8"*, %"class.v8::internal::ZoneList.8"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %7, -1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %78, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %17 = bitcast %"class.v8::internal::ZoneList"* %14 to i8**
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %14, i64 0, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  %20 = zext i32 %10 to i64
  %21 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 0
  br label %103

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %26 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp slt i32 %28, %30
  br i1 %31, label %32, label %39

32:                                               ; preds = %23
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %24, i64 0, i32 0
  %34 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %33, align 8
  %35 = add nsw i32 %28, 1
  store i32 %35, i32* %27, align 4
  %36 = sext i32 %28 to i64
  %37 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %34, i64 %36
  %38 = bitcast %"struct.v8::internal::RegExpInstruction"* %37 to i64*
  store i64 281470681743363, i64* %38, align 4
  br label %226

39:                                               ; preds = %23
  %40 = shl nsw i32 %30, 1
  %41 = or i32 %40, 1
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 3
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !6

50:                                               ; preds = %39
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %26, i64 %43) #10
  br label %54

52:                                               ; preds = %39
  %53 = add i64 %45, %43
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to %"struct.v8::internal::RegExpInstruction"*
  %57 = load i32, i32* %27, align 4
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %71

59:                                               ; preds = %54
  %60 = inttoptr i64 %55 to i8*
  %61 = bitcast %"class.v8::internal::ZoneList"* %24 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = sext i32 %57 to i64
  %64 = shl nsw i64 %63, 3
  switch i64 %64, label %70 [
    i64 16, label %69
    i64 8, label %65
  ]

65:                                               ; preds = %59
  %66 = bitcast i8* %62 to i64*
  %67 = inttoptr i64 %55 to i64*
  %68 = load i64, i64* %66, align 1
  store i64 %68, i64* %67, align 1
  br label %71

69:                                               ; preds = %59
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %62, i64 16, i1 false) #10
  br label %71

70:                                               ; preds = %59
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %62, i64 %64, i1 false) #10
  br label %71

71:                                               ; preds = %70, %69, %65, %54
  %72 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %24, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %56, %"struct.v8::internal::RegExpInstruction"** %72, align 8
  store i32 %41, i32* %29, align 8
  %73 = load i32, i32* %27, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %27, align 4
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %56, i64 %75
  %77 = bitcast %"struct.v8::internal::RegExpInstruction"* %76 to i64*
  store i64 281470681743363, i64* %77, align 4
  br label %226

78:                                               ; preds = %223, %9
  %79 = phi i32 [ -1, %9 ], [ %160, %223 ]
  %80 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %81 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 0
  %82 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %81, align 8
  %83 = sext i32 %10 to i64
  %84 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %82, i64 %83
  %85 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %84, align 8
  %86 = bitcast %"class.v8::internal::RegExpTree"* %85 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %87 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %86, align 8
  %88 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %87, i64 2
  %89 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %88, align 8
  %90 = tail call i8* %89(%"class.v8::internal::RegExpTree"* %85, %"class.v8::internal::RegExpVisitor"* %80, i8* null) #10
  %91 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %79, -1
  br i1 %93, label %226, label %94

94:                                               ; preds = %78
  %95 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i32 [ %79, %94 ], [ %101, %96 ]
  %98 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %95, align 8
  %99 = sext i32 %97 to i64
  %100 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %98, i64 %99, i32 1, i32 0
  %101 = load i32, i32* %100, align 4
  store i32 %92, i32* %100, align 4
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %226, label %96

103:                                              ; preds = %223, %12
  %104 = phi i64 [ 0, %12 ], [ %224, %223 ]
  %105 = phi i32 [ -1, %12 ], [ %160, %223 ]
  %106 = load i32, i32* %13, align 4
  %107 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %108 = load i32, i32* %16, align 8
  %109 = icmp slt i32 %106, %108
  br i1 %109, label %110, label %112

110:                                              ; preds = %103
  %111 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %18, align 8
  br label %145

112:                                              ; preds = %103
  %113 = shl nsw i32 %108, 1
  %114 = or i32 %113, 1
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 3
  %117 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %107, i64 0, i32 2
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %107, i64 0, i32 3
  %120 = load i64, i64* %119, align 8
  %121 = sub i64 %120, %118
  %122 = icmp ugt i64 %116, %121
  br i1 %122, label %123, label %125, !prof !6

123:                                              ; preds = %112
  %124 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %107, i64 %116) #10
  br label %127

125:                                              ; preds = %112
  %126 = add i64 %118, %116
  store i64 %126, i64* %117, align 8
  br label %127

127:                                              ; preds = %125, %123
  %128 = phi i64 [ %124, %123 ], [ %118, %125 ]
  %129 = inttoptr i64 %128 to %"struct.v8::internal::RegExpInstruction"*
  %130 = load i32, i32* %13, align 4
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %143

132:                                              ; preds = %127
  %133 = inttoptr i64 %128 to i8*
  %134 = load i8*, i8** %17, align 8
  %135 = sext i32 %130 to i64
  %136 = shl nsw i64 %135, 3
  switch i64 %136, label %142 [
    i64 16, label %141
    i64 8, label %137
  ]

137:                                              ; preds = %132
  %138 = bitcast i8* %134 to i64*
  %139 = inttoptr i64 %128 to i64*
  %140 = load i64, i64* %138, align 1
  store i64 %140, i64* %139, align 1
  br label %143

141:                                              ; preds = %132
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* align 1 %134, i64 16, i1 false) #10
  br label %143

142:                                              ; preds = %132
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* align 1 %134, i64 %136, i1 false) #10
  br label %143

143:                                              ; preds = %142, %141, %137, %127
  store %"struct.v8::internal::RegExpInstruction"* %129, %"struct.v8::internal::RegExpInstruction"** %18, align 8
  store i32 %114, i32* %16, align 8
  %144 = load i32, i32* %13, align 4
  br label %145

145:                                              ; preds = %143, %110
  %146 = phi i32 [ %144, %143 ], [ %106, %110 ]
  %147 = phi %"struct.v8::internal::RegExpInstruction"* [ %129, %143 ], [ %111, %110 ]
  %148 = add nsw i32 %146, 1
  store i32 %148, i32* %13, align 4
  %149 = sext i32 %146 to i64
  %150 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %147, i64 %149
  %151 = bitcast %"struct.v8::internal::RegExpInstruction"* %150 to i64*
  store i64 -4294967292, i64* %151, align 4
  %152 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %22, align 8
  %153 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %152, i64 %104
  %154 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %153, align 8
  %155 = bitcast %"class.v8::internal::RegExpTree"* %154 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %156 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %155, align 8
  %157 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %156, i64 2
  %158 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %157, align 8
  %159 = tail call i8* %158(%"class.v8::internal::RegExpTree"* %154, %"class.v8::internal::RegExpVisitor"* %21, i8* null) #10
  %160 = load i32, i32* %13, align 4
  %161 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %162 = load i32, i32* %16, align 8
  %163 = icmp slt i32 %160, %162
  br i1 %163, label %164, label %173

164:                                              ; preds = %145
  %165 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %18, align 8
  %166 = add nsw i32 %160, 1
  store i32 %166, i32* %13, align 4
  %167 = sext i32 %160 to i64
  %168 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %165, i64 %167
  %169 = bitcast %"struct.v8::internal::RegExpInstruction"* %168 to i64*
  %170 = zext i32 %105 to i64
  %171 = shl nuw i64 %170, 32
  %172 = or i64 %171, 5
  store i64 %172, i64* %169, align 4
  br label %213

173:                                              ; preds = %145
  %174 = shl nsw i32 %162, 1
  %175 = or i32 %174, 1
  %176 = zext i32 %105 to i64
  %177 = shl nuw i64 %176, 32
  %178 = or i64 %177, 5
  %179 = sext i32 %175 to i64
  %180 = shl nsw i64 %179, 3
  %181 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %161, i64 0, i32 2
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %161, i64 0, i32 3
  %184 = load i64, i64* %183, align 8
  %185 = sub i64 %184, %182
  %186 = icmp ugt i64 %180, %185
  br i1 %186, label %187, label %189, !prof !6

187:                                              ; preds = %173
  %188 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %161, i64 %180) #10
  br label %191

189:                                              ; preds = %173
  %190 = add i64 %182, %180
  store i64 %190, i64* %181, align 8
  br label %191

191:                                              ; preds = %189, %187
  %192 = phi i64 [ %188, %187 ], [ %182, %189 ]
  %193 = inttoptr i64 %192 to %"struct.v8::internal::RegExpInstruction"*
  %194 = load i32, i32* %13, align 4
  %195 = icmp sgt i32 %194, 0
  br i1 %195, label %196, label %207

196:                                              ; preds = %191
  %197 = inttoptr i64 %192 to i8*
  %198 = load i8*, i8** %17, align 8
  %199 = sext i32 %194 to i64
  %200 = shl nsw i64 %199, 3
  switch i64 %200, label %206 [
    i64 16, label %205
    i64 8, label %201
  ]

201:                                              ; preds = %196
  %202 = bitcast i8* %198 to i64*
  %203 = inttoptr i64 %192 to i64*
  %204 = load i64, i64* %202, align 1
  store i64 %204, i64* %203, align 1
  br label %207

205:                                              ; preds = %196
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %197, i8* align 1 %198, i64 16, i1 false) #10
  br label %207

206:                                              ; preds = %196
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %197, i8* align 1 %198, i64 %200, i1 false) #10
  br label %207

207:                                              ; preds = %206, %205, %201, %191
  store %"struct.v8::internal::RegExpInstruction"* %193, %"struct.v8::internal::RegExpInstruction"** %18, align 8
  store i32 %175, i32* %16, align 8
  %208 = load i32, i32* %13, align 4
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %13, align 4
  %210 = sext i32 %208 to i64
  %211 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %193, i64 %210
  %212 = bitcast %"struct.v8::internal::RegExpInstruction"* %211 to i64*
  store i64 %178, i64* %212, align 4
  br label %213

213:                                              ; preds = %207, %164
  %214 = load i32, i32* %13, align 4
  %215 = icmp eq i32 %106, -1
  br i1 %215, label %223, label %216

216:                                              ; preds = %213, %216
  %217 = phi i32 [ %221, %216 ], [ %106, %213 ]
  %218 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %19, align 8
  %219 = sext i32 %217 to i64
  %220 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %218, i64 %219, i32 1, i32 0
  %221 = load i32, i32* %220, align 4
  store i32 %214, i32* %220, align 4
  %222 = icmp eq i32 %221, -1
  br i1 %222, label %223, label %216

223:                                              ; preds = %216, %213
  %224 = add nuw nsw i64 %104, 1
  %225 = icmp eq i64 %224, %20
  br i1 %225, label %78, label %103

226:                                              ; preds = %96, %32, %71, %78
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor16VisitAlternativeEPNS0_17RegExpAlternativeEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpAlternative"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpAlternative", %"class.v8::internal::RegExpAlternative"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.8"*, %"class.v8::internal::ZoneList.8"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 0
  %7 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.8", %"class.v8::internal::ZoneList.8"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  br label %16

15:                                               ; preds = %16, %3
  ret i8* null

16:                                               ; preds = %13, %16
  %17 = phi %"class.v8::internal::RegExpTree"** [ %7, %13 ], [ %24, %16 ]
  %18 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, align 8
  %19 = bitcast %"class.v8::internal::RegExpTree"* %18 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %20 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %19, align 8
  %21 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %20, i64 2
  %22 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %21, align 8
  %23 = tail call i8* %22(%"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::RegExpVisitor"* %14, i8* null) #10
  %24 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %17, i64 1
  %25 = icmp eq %"class.v8::internal::RegExpTree"** %24, %11
  br i1 %25, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor14VisitAssertionEPNS0_15RegExpAssertionEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"* nocapture, %"class.v8::internal::RegExpAssertion"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %7 = zext i32 %5 to i64
  %8 = shl nuw i64 %7, 32
  %9 = or i64 %8, 1
  %10 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %6, i64 0, i32 0
  %19 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %18, align 8
  br label %55

20:                                               ; preds = %3
  %21 = shl nsw i32 %15, 1
  %22 = or i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !6

31:                                               ; preds = %20
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 %24) #10
  br label %35

33:                                               ; preds = %20
  %34 = add i64 %26, %24
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to %"struct.v8::internal::RegExpInstruction"*
  %38 = load i32, i32* %12, align 4
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = inttoptr i64 %36 to i8*
  %42 = bitcast %"class.v8::internal::ZoneList"* %6 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = sext i32 %38 to i64
  %45 = shl nsw i64 %44, 3
  switch i64 %45, label %51 [
    i64 16, label %50
    i64 8, label %46
  ]

46:                                               ; preds = %40
  %47 = bitcast i8* %43 to i64*
  %48 = inttoptr i64 %36 to i64*
  %49 = load i64, i64* %47, align 1
  store i64 %49, i64* %48, align 1
  br label %52

50:                                               ; preds = %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %43, i64 16, i1 false) #10
  br label %52

51:                                               ; preds = %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %43, i64 %45, i1 false) #10
  br label %52

52:                                               ; preds = %51, %50, %46, %35
  %53 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %6, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %37, %"struct.v8::internal::RegExpInstruction"** %53, align 8
  store i32 %22, i32* %14, align 8
  %54 = load i32, i32* %12, align 4
  br label %55

55:                                               ; preds = %17, %52
  %56 = phi i32 [ %13, %17 ], [ %54, %52 ]
  %57 = phi %"struct.v8::internal::RegExpInstruction"* [ %19, %17 ], [ %37, %52 ]
  %58 = add nsw i32 %56, 1
  store i32 %58, i32* %12, align 4
  %59 = sext i32 %56 to i64
  %60 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %57, i64 %59
  %61 = bitcast %"struct.v8::internal::RegExpInstruction"* %60 to i64*
  store i64 %9, i64* %61, align 4
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor19VisitCharacterClassEPNS0_20RegExpCharacterClassEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpCharacterClass"*, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 1
  %7 = tail call %"class.v8::internal::ZoneList.9"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %6, %"class.v8::internal::Zone"* %5) #10
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.9"* %7) #10
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 3, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %54, label %12

12:                                               ; preds = %3
  %13 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %7, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  %22 = icmp ult i64 %21, 16
  br i1 %22, label %23, label %25, !prof !6

23:                                               ; preds = %12
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %13, i64 16) #10
  br label %27

25:                                               ; preds = %12
  %26 = add i64 %18, 16
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i64 [ %24, %23 ], [ %18, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::ZoneList.9"*
  %30 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %29, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %29, i64 0, i32 1
  store i32 %16, i32* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %29, i64 0, i32 2
  store i32 0, i32* %33, align 4
  %34 = icmp sgt i32 %15, -1
  br i1 %34, label %35, label %51

35:                                               ; preds = %27
  %36 = sext i32 %16 to i64
  %37 = shl nsw i64 %36, 3
  %38 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %30, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %30, i64 0, i32 3
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %41, %39
  %43 = icmp ugt i64 %37, %42
  br i1 %43, label %44, label %46, !prof !6

44:                                               ; preds = %35
  %45 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %30, i64 %37) #10
  br label %48

46:                                               ; preds = %35
  %47 = add i64 %39, %37
  store i64 %47, i64* %38, align 8
  br label %48

48:                                               ; preds = %46, %44
  %49 = phi i64 [ %45, %44 ], [ %39, %46 ]
  %50 = inttoptr i64 %49 to %"class.v8::internal::CharacterRange"*
  br label %51

51:                                               ; preds = %27, %48
  %52 = phi %"class.v8::internal::CharacterRange"* [ %50, %48 ], [ null, %27 ]
  store %"class.v8::internal::CharacterRange"* %52, %"class.v8::internal::CharacterRange"** %31, align 8
  %53 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  tail call void @_ZN2v88internal14CharacterRange6NegateEPNS0_8ZoneListIS1_EES4_PNS0_4ZoneE(%"class.v8::internal::ZoneList.9"* %7, %"class.v8::internal::ZoneList.9"* %29, %"class.v8::internal::Zone"* %53) #10
  br label %54

54:                                               ; preds = %3, %51
  %55 = phi %"class.v8::internal::ZoneList.9"* [ %29, %51 ], [ %7, %3 ]
  %56 = getelementptr inbounds %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %55, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %54
  %60 = add nsw i32 %57, -1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %127, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %64 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %65 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %66 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %67 = bitcast %"class.v8::internal::ZoneList"* %64 to i8**
  %68 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %64, i64 0, i32 0
  %69 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  %70 = zext i32 %60 to i64
  %71 = getelementptr %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %55, i64 0, i32 0
  br label %209

72:                                               ; preds = %54
  %73 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %75 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %79 = load i32, i32* %78, align 8
  %80 = icmp slt i32 %77, %79
  br i1 %80, label %81, label %88

81:                                               ; preds = %72
  %82 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %73, i64 0, i32 0
  %83 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %82, align 8
  %84 = add nsw i32 %77, 1
  store i32 %84, i32* %76, align 4
  %85 = sext i32 %77 to i64
  %86 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %83, i64 %85
  %87 = bitcast %"struct.v8::internal::RegExpInstruction"* %86 to i64*
  store i64 281470681743363, i64* %87, align 4
  br label %384

88:                                               ; preds = %72
  %89 = shl nsw i32 %79, 1
  %90 = or i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 3
  %93 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %75, i64 0, i32 2
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %75, i64 0, i32 3
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %96, %94
  %98 = icmp ugt i64 %92, %97
  br i1 %98, label %99, label %101, !prof !6

99:                                               ; preds = %88
  %100 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %75, i64 %92) #10
  br label %103

101:                                              ; preds = %88
  %102 = add i64 %94, %92
  store i64 %102, i64* %93, align 8
  br label %103

103:                                              ; preds = %101, %99
  %104 = phi i64 [ %100, %99 ], [ %94, %101 ]
  %105 = inttoptr i64 %104 to %"struct.v8::internal::RegExpInstruction"*
  %106 = load i32, i32* %76, align 4
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %120

108:                                              ; preds = %103
  %109 = inttoptr i64 %104 to i8*
  %110 = bitcast %"class.v8::internal::ZoneList"* %73 to i8**
  %111 = load i8*, i8** %110, align 8
  %112 = sext i32 %106 to i64
  %113 = shl nsw i64 %112, 3
  switch i64 %113, label %119 [
    i64 16, label %118
    i64 8, label %114
  ]

114:                                              ; preds = %108
  %115 = bitcast i8* %111 to i64*
  %116 = inttoptr i64 %104 to i64*
  %117 = load i64, i64* %115, align 1
  store i64 %117, i64* %116, align 1
  br label %120

118:                                              ; preds = %108
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %111, i64 16, i1 false) #10
  br label %120

119:                                              ; preds = %108
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %111, i64 %113, i1 false) #10
  br label %120

120:                                              ; preds = %119, %118, %114, %103
  %121 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %73, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %105, %"struct.v8::internal::RegExpInstruction"** %121, align 8
  store i32 %90, i32* %78, align 8
  %122 = load i32, i32* %76, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %76, align 4
  %124 = sext i32 %122 to i64
  %125 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %105, i64 %124
  %126 = bitcast %"struct.v8::internal::RegExpInstruction"* %125 to i64*
  store i64 281470681743363, i64* %126, align 4
  br label %384

127:                                              ; preds = %381, %59
  %128 = phi i32 [ -1, %59 ], [ %318, %381 ]
  %129 = getelementptr %"class.v8::internal::ZoneList.9", %"class.v8::internal::ZoneList.9"* %55, i64 0, i32 0
  %130 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %129, align 8
  %131 = sext i32 %60 to i64
  %132 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %130, i64 %131, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %130, i64 %131, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = icmp ult i32 %135, 65535
  %137 = select i1 %136, i32 %135, i32 65535
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %140 = shl nuw i64 %138, 48
  %141 = and i32 %133, 65535
  %142 = zext i32 %141 to i64
  %143 = shl nuw nsw i64 %142, 32
  %144 = or i64 %143, %140
  %145 = or i64 %144, 3
  %146 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %147 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %146, align 8
  %148 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %151 = load i32, i32* %150, align 8
  %152 = icmp slt i32 %149, %151
  br i1 %152, label %153, label %156

153:                                              ; preds = %127
  %154 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %139, i64 0, i32 0
  %155 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %154, align 8
  br label %191

156:                                              ; preds = %127
  %157 = shl nsw i32 %151, 1
  %158 = or i32 %157, 1
  %159 = sext i32 %158 to i64
  %160 = shl nsw i64 %159, 3
  %161 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %147, i64 0, i32 2
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %147, i64 0, i32 3
  %164 = load i64, i64* %163, align 8
  %165 = sub i64 %164, %162
  %166 = icmp ugt i64 %160, %165
  br i1 %166, label %167, label %169, !prof !6

167:                                              ; preds = %156
  %168 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %147, i64 %160) #10
  br label %171

169:                                              ; preds = %156
  %170 = add i64 %162, %160
  store i64 %170, i64* %161, align 8
  br label %171

171:                                              ; preds = %169, %167
  %172 = phi i64 [ %168, %167 ], [ %162, %169 ]
  %173 = inttoptr i64 %172 to %"struct.v8::internal::RegExpInstruction"*
  %174 = load i32, i32* %148, align 4
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %188

176:                                              ; preds = %171
  %177 = inttoptr i64 %172 to i8*
  %178 = bitcast %"class.v8::internal::ZoneList"* %139 to i8**
  %179 = load i8*, i8** %178, align 8
  %180 = sext i32 %174 to i64
  %181 = shl nsw i64 %180, 3
  switch i64 %181, label %187 [
    i64 16, label %186
    i64 8, label %182
  ]

182:                                              ; preds = %176
  %183 = bitcast i8* %179 to i64*
  %184 = inttoptr i64 %172 to i64*
  %185 = load i64, i64* %183, align 1
  store i64 %185, i64* %184, align 1
  br label %188

186:                                              ; preds = %176
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %179, i64 16, i1 false) #10
  br label %188

187:                                              ; preds = %176
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %179, i64 %181, i1 false) #10
  br label %188

188:                                              ; preds = %187, %186, %182, %171
  %189 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %139, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %173, %"struct.v8::internal::RegExpInstruction"** %189, align 8
  store i32 %158, i32* %150, align 8
  %190 = load i32, i32* %148, align 4
  br label %191

191:                                              ; preds = %188, %153
  %192 = phi i32 [ %190, %188 ], [ %149, %153 ]
  %193 = phi %"struct.v8::internal::RegExpInstruction"* [ %173, %188 ], [ %155, %153 ]
  %194 = add nsw i32 %192, 1
  store i32 %194, i32* %148, align 4
  %195 = sext i32 %192 to i64
  %196 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %193, i64 %195
  %197 = bitcast %"struct.v8::internal::RegExpInstruction"* %196 to i64*
  store i64 %145, i64* %197, align 4
  %198 = load i32, i32* %148, align 4
  %199 = icmp eq i32 %128, -1
  br i1 %199, label %384, label %200

200:                                              ; preds = %191
  %201 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %202

202:                                              ; preds = %202, %200
  %203 = phi i32 [ %128, %200 ], [ %207, %202 ]
  %204 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %201, align 8
  %205 = sext i32 %203 to i64
  %206 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %204, i64 %205, i32 1, i32 0
  %207 = load i32, i32* %206, align 4
  store i32 %198, i32* %206, align 4
  %208 = icmp eq i32 %207, -1
  br i1 %208, label %384, label %202

209:                                              ; preds = %381, %62
  %210 = phi i64 [ 0, %62 ], [ %382, %381 ]
  %211 = phi i32 [ -1, %62 ], [ %318, %381 ]
  %212 = load i32, i32* %63, align 4
  %213 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %65, align 8
  %214 = load i32, i32* %66, align 8
  %215 = icmp slt i32 %212, %214
  br i1 %215, label %216, label %218

216:                                              ; preds = %209
  %217 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  br label %251

218:                                              ; preds = %209
  %219 = shl nsw i32 %214, 1
  %220 = or i32 %219, 1
  %221 = sext i32 %220 to i64
  %222 = shl nsw i64 %221, 3
  %223 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %213, i64 0, i32 2
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %213, i64 0, i32 3
  %226 = load i64, i64* %225, align 8
  %227 = sub i64 %226, %224
  %228 = icmp ugt i64 %222, %227
  br i1 %228, label %229, label %231, !prof !6

229:                                              ; preds = %218
  %230 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %213, i64 %222) #10
  br label %233

231:                                              ; preds = %218
  %232 = add i64 %224, %222
  store i64 %232, i64* %223, align 8
  br label %233

233:                                              ; preds = %231, %229
  %234 = phi i64 [ %230, %229 ], [ %224, %231 ]
  %235 = inttoptr i64 %234 to %"struct.v8::internal::RegExpInstruction"*
  %236 = load i32, i32* %63, align 4
  %237 = icmp sgt i32 %236, 0
  br i1 %237, label %238, label %249

238:                                              ; preds = %233
  %239 = inttoptr i64 %234 to i8*
  %240 = load i8*, i8** %67, align 8
  %241 = sext i32 %236 to i64
  %242 = shl nsw i64 %241, 3
  switch i64 %242, label %248 [
    i64 16, label %247
    i64 8, label %243
  ]

243:                                              ; preds = %238
  %244 = bitcast i8* %240 to i64*
  %245 = inttoptr i64 %234 to i64*
  %246 = load i64, i64* %244, align 1
  store i64 %246, i64* %245, align 1
  br label %249

247:                                              ; preds = %238
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* align 1 %240, i64 16, i1 false) #10
  br label %249

248:                                              ; preds = %238
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* align 1 %240, i64 %242, i1 false) #10
  br label %249

249:                                              ; preds = %248, %247, %243, %233
  store %"struct.v8::internal::RegExpInstruction"* %235, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  store i32 %220, i32* %66, align 8
  %250 = load i32, i32* %63, align 4
  br label %251

251:                                              ; preds = %249, %216
  %252 = phi i32 [ %250, %249 ], [ %212, %216 ]
  %253 = phi %"struct.v8::internal::RegExpInstruction"* [ %235, %249 ], [ %217, %216 ]
  %254 = add nsw i32 %252, 1
  store i32 %254, i32* %63, align 4
  %255 = sext i32 %252 to i64
  %256 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %253, i64 %255
  %257 = bitcast %"struct.v8::internal::RegExpInstruction"* %256 to i64*
  store i64 -4294967292, i64* %257, align 4
  %258 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %71, align 8
  %259 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %258, i64 %210, i32 0
  %260 = load i32, i32* %259, align 4
  %261 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %258, i64 %210, i32 1
  %262 = load i32, i32* %261, align 4
  %263 = icmp ult i32 %262, 65535
  %264 = select i1 %263, i32 %262, i32 65535
  %265 = zext i32 %264 to i64
  %266 = shl nuw i64 %265, 48
  %267 = and i32 %260, 65535
  %268 = zext i32 %267 to i64
  %269 = shl nuw nsw i64 %268, 32
  %270 = or i64 %269, %266
  %271 = or i64 %270, 3
  %272 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %65, align 8
  %273 = load i32, i32* %63, align 4
  %274 = load i32, i32* %66, align 8
  %275 = icmp slt i32 %273, %274
  br i1 %275, label %276, label %278

276:                                              ; preds = %251
  %277 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  br label %311

278:                                              ; preds = %251
  %279 = shl nsw i32 %274, 1
  %280 = or i32 %279, 1
  %281 = sext i32 %280 to i64
  %282 = shl nsw i64 %281, 3
  %283 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %272, i64 0, i32 2
  %284 = load i64, i64* %283, align 8
  %285 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %272, i64 0, i32 3
  %286 = load i64, i64* %285, align 8
  %287 = sub i64 %286, %284
  %288 = icmp ugt i64 %282, %287
  br i1 %288, label %289, label %291, !prof !6

289:                                              ; preds = %278
  %290 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %272, i64 %282) #10
  br label %293

291:                                              ; preds = %278
  %292 = add i64 %284, %282
  store i64 %292, i64* %283, align 8
  br label %293

293:                                              ; preds = %291, %289
  %294 = phi i64 [ %290, %289 ], [ %284, %291 ]
  %295 = inttoptr i64 %294 to %"struct.v8::internal::RegExpInstruction"*
  %296 = load i32, i32* %63, align 4
  %297 = icmp sgt i32 %296, 0
  br i1 %297, label %298, label %309

298:                                              ; preds = %293
  %299 = inttoptr i64 %294 to i8*
  %300 = load i8*, i8** %67, align 8
  %301 = sext i32 %296 to i64
  %302 = shl nsw i64 %301, 3
  switch i64 %302, label %308 [
    i64 16, label %307
    i64 8, label %303
  ]

303:                                              ; preds = %298
  %304 = bitcast i8* %300 to i64*
  %305 = inttoptr i64 %294 to i64*
  %306 = load i64, i64* %304, align 1
  store i64 %306, i64* %305, align 1
  br label %309

307:                                              ; preds = %298
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %299, i8* align 1 %300, i64 16, i1 false) #10
  br label %309

308:                                              ; preds = %298
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %299, i8* align 1 %300, i64 %302, i1 false) #10
  br label %309

309:                                              ; preds = %308, %307, %303, %293
  store %"struct.v8::internal::RegExpInstruction"* %295, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  store i32 %280, i32* %66, align 8
  %310 = load i32, i32* %63, align 4
  br label %311

311:                                              ; preds = %309, %276
  %312 = phi i32 [ %310, %309 ], [ %273, %276 ]
  %313 = phi %"struct.v8::internal::RegExpInstruction"* [ %295, %309 ], [ %277, %276 ]
  %314 = add nsw i32 %312, 1
  store i32 %314, i32* %63, align 4
  %315 = sext i32 %312 to i64
  %316 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %313, i64 %315
  %317 = bitcast %"struct.v8::internal::RegExpInstruction"* %316 to i64*
  store i64 %271, i64* %317, align 4
  %318 = load i32, i32* %63, align 4
  %319 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %65, align 8
  %320 = load i32, i32* %66, align 8
  %321 = icmp slt i32 %318, %320
  br i1 %321, label %322, label %331

322:                                              ; preds = %311
  %323 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  %324 = add nsw i32 %318, 1
  store i32 %324, i32* %63, align 4
  %325 = sext i32 %318 to i64
  %326 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %323, i64 %325
  %327 = bitcast %"struct.v8::internal::RegExpInstruction"* %326 to i64*
  %328 = zext i32 %211 to i64
  %329 = shl nuw i64 %328, 32
  %330 = or i64 %329, 5
  store i64 %330, i64* %327, align 4
  br label %371

331:                                              ; preds = %311
  %332 = shl nsw i32 %320, 1
  %333 = or i32 %332, 1
  %334 = zext i32 %211 to i64
  %335 = shl nuw i64 %334, 32
  %336 = or i64 %335, 5
  %337 = sext i32 %333 to i64
  %338 = shl nsw i64 %337, 3
  %339 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %319, i64 0, i32 2
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %319, i64 0, i32 3
  %342 = load i64, i64* %341, align 8
  %343 = sub i64 %342, %340
  %344 = icmp ugt i64 %338, %343
  br i1 %344, label %345, label %347, !prof !6

345:                                              ; preds = %331
  %346 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %319, i64 %338) #10
  br label %349

347:                                              ; preds = %331
  %348 = add i64 %340, %338
  store i64 %348, i64* %339, align 8
  br label %349

349:                                              ; preds = %347, %345
  %350 = phi i64 [ %346, %345 ], [ %340, %347 ]
  %351 = inttoptr i64 %350 to %"struct.v8::internal::RegExpInstruction"*
  %352 = load i32, i32* %63, align 4
  %353 = icmp sgt i32 %352, 0
  br i1 %353, label %354, label %365

354:                                              ; preds = %349
  %355 = inttoptr i64 %350 to i8*
  %356 = load i8*, i8** %67, align 8
  %357 = sext i32 %352 to i64
  %358 = shl nsw i64 %357, 3
  switch i64 %358, label %364 [
    i64 16, label %363
    i64 8, label %359
  ]

359:                                              ; preds = %354
  %360 = bitcast i8* %356 to i64*
  %361 = inttoptr i64 %350 to i64*
  %362 = load i64, i64* %360, align 1
  store i64 %362, i64* %361, align 1
  br label %365

363:                                              ; preds = %354
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %355, i8* align 1 %356, i64 16, i1 false) #10
  br label %365

364:                                              ; preds = %354
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %355, i8* align 1 %356, i64 %358, i1 false) #10
  br label %365

365:                                              ; preds = %364, %363, %359, %349
  store %"struct.v8::internal::RegExpInstruction"* %351, %"struct.v8::internal::RegExpInstruction"** %68, align 8
  store i32 %333, i32* %66, align 8
  %366 = load i32, i32* %63, align 4
  %367 = add nsw i32 %366, 1
  store i32 %367, i32* %63, align 4
  %368 = sext i32 %366 to i64
  %369 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %351, i64 %368
  %370 = bitcast %"struct.v8::internal::RegExpInstruction"* %369 to i64*
  store i64 %336, i64* %370, align 4
  br label %371

371:                                              ; preds = %365, %322
  %372 = load i32, i32* %63, align 4
  %373 = icmp eq i32 %212, -1
  br i1 %373, label %381, label %374

374:                                              ; preds = %371, %374
  %375 = phi i32 [ %379, %374 ], [ %212, %371 ]
  %376 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %69, align 8
  %377 = sext i32 %375 to i64
  %378 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %376, i64 %377, i32 1, i32 0
  %379 = load i32, i32* %378, align 4
  store i32 %372, i32* %378, align 4
  %380 = icmp eq i32 %379, -1
  br i1 %380, label %381, label %374

381:                                              ; preds = %374, %371
  %382 = add nuw nsw i64 %210, 1
  %383 = icmp eq i64 %382, %70
  br i1 %383, label %127, label %209

384:                                              ; preds = %202, %81, %120, %191
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor9VisitAtomEPNS0_10RegExpAtomEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"* nocapture, %"class.v8::internal::RegExpAtom"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %1, i64 0, i32 1, i32 0
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %1, i64 0, i32 1, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i16, i16* %5, i64 %7
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %15 = bitcast %"class.v8::internal::ZoneList"* %11 to i8**
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  br label %18

17:                                               ; preds = %65, %3
  ret i8* null

18:                                               ; preds = %10, %65
  %19 = phi i16* [ %5, %10 ], [ %72, %65 ]
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i64
  %22 = shl nuw i64 %21, 48
  %23 = shl nuw nsw i64 %21, 32
  %24 = or i64 %22, %23
  %25 = or i64 %24, 3
  %26 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  %27 = load i32, i32* %13, align 4
  %28 = load i32, i32* %14, align 8
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %18
  %31 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %16, align 8
  br label %65

32:                                               ; preds = %18
  %33 = shl nsw i32 %28, 1
  %34 = or i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 3
  %37 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %26, i64 0, i32 3
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %40, %38
  %42 = icmp ugt i64 %36, %41
  br i1 %42, label %43, label %45, !prof !6

43:                                               ; preds = %32
  %44 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %26, i64 %36) #10
  br label %47

45:                                               ; preds = %32
  %46 = add i64 %38, %36
  store i64 %46, i64* %37, align 8
  br label %47

47:                                               ; preds = %45, %43
  %48 = phi i64 [ %44, %43 ], [ %38, %45 ]
  %49 = inttoptr i64 %48 to %"struct.v8::internal::RegExpInstruction"*
  %50 = load i32, i32* %13, align 4
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %63

52:                                               ; preds = %47
  %53 = inttoptr i64 %48 to i8*
  %54 = load i8*, i8** %15, align 8
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 3
  switch i64 %56, label %62 [
    i64 16, label %61
    i64 8, label %57
  ]

57:                                               ; preds = %52
  %58 = bitcast i8* %54 to i64*
  %59 = inttoptr i64 %48 to i64*
  %60 = load i64, i64* %58, align 1
  store i64 %60, i64* %59, align 1
  br label %63

61:                                               ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %54, i64 16, i1 false) #10
  br label %63

62:                                               ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %54, i64 %56, i1 false) #10
  br label %63

63:                                               ; preds = %62, %61, %57, %47
  store %"struct.v8::internal::RegExpInstruction"* %49, %"struct.v8::internal::RegExpInstruction"** %16, align 8
  store i32 %34, i32* %14, align 8
  %64 = load i32, i32* %13, align 4
  br label %65

65:                                               ; preds = %30, %63
  %66 = phi i32 [ %27, %30 ], [ %64, %63 ]
  %67 = phi %"struct.v8::internal::RegExpInstruction"* [ %31, %30 ], [ %49, %63 ]
  %68 = add nsw i32 %66, 1
  store i32 %68, i32* %13, align 4
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %67, i64 %69
  %71 = bitcast %"struct.v8::internal::RegExpInstruction"* %70 to i64*
  store i64 %25, i64* %71, align 4
  %72 = getelementptr inbounds i16, i16* %19, i64 1
  %73 = icmp eq i16* %72, %8
  br i1 %73, label %17, label %18
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor15VisitQuantifierEPNS0_16RegExpQuantifierEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpQuantifier"*, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = bitcast %"class.v8::internal::RegExpTree"* %5 to i64 (%"class.v8::internal::RegExpTree"*)***
  %7 = load i64 (%"class.v8::internal::RegExpTree"*)**, i64 (%"class.v8::internal::RegExpTree"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.v8::internal::RegExpTree"*)*, i64 (%"class.v8::internal::RegExpTree"*)** %7, i64 9
  %9 = load i64 (%"class.v8::internal::RegExpTree"*)*, i64 (%"class.v8::internal::RegExpTree"*)** %8, align 8
  %10 = tail call i64 %9(%"class.v8::internal::RegExpTree"* %5) #10
  %11 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %39, label %14

14:                                               ; preds = %3
  %15 = trunc i64 %10 to i32
  %16 = lshr i64 %10, 32
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %15, -1
  %19 = icmp sgt i32 %15, %17
  %20 = or i1 %18, %19
  %21 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %23 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %24 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %25 = bitcast %"class.v8::internal::ZoneList"* %21 to i8**
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %21, i64 0, i32 0
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  br i1 %20, label %28, label %43

28:                                               ; preds = %14, %28
  %29 = phi i32 [ %36, %28 ], [ 0, %14 ]
  %30 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %31 = bitcast %"class.v8::internal::RegExpTree"* %30 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %32 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %31, align 8
  %33 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %32, i64 2
  %34 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %33, align 8
  %35 = tail call i8* %34(%"class.v8::internal::RegExpTree"* %30, %"class.v8::internal::RegExpVisitor"* %27, i8* null) #10
  %36 = add nuw nsw i32 %29, 1
  %37 = load i32, i32* %11, align 8
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %28

39:                                               ; preds = %98, %28, %3
  %40 = phi i32 [ 0, %3 ], [ %36, %28 ], [ %105, %98 ]
  %41 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  switch i32 %42, label %915 [
    i32 2, label %108
    i32 0, label %109
    i32 1, label %454
  ]

43:                                               ; preds = %14, %98
  %44 = phi i32 [ %105, %98 ], [ 0, %14 ]
  br label %45

45:                                               ; preds = %89, %43
  %46 = phi i32 [ %15, %43 ], [ %96, %89 ]
  %47 = zext i32 %46 to i64
  %48 = shl nuw i64 %47, 32
  %49 = or i64 %48, 2
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %51 = load i32, i32* %23, align 4
  %52 = load i32, i32* %24, align 8
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %45
  %55 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %26, align 8
  br label %89

56:                                               ; preds = %45
  %57 = shl nsw i32 %52, 1
  %58 = or i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 3
  %61 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %50, i64 0, i32 3
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %64, %62
  %66 = icmp ugt i64 %60, %65
  br i1 %66, label %67, label %69, !prof !6

67:                                               ; preds = %56
  %68 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %50, i64 %60) #10
  br label %71

69:                                               ; preds = %56
  %70 = add i64 %62, %60
  store i64 %70, i64* %61, align 8
  br label %71

71:                                               ; preds = %69, %67
  %72 = phi i64 [ %68, %67 ], [ %62, %69 ]
  %73 = inttoptr i64 %72 to %"struct.v8::internal::RegExpInstruction"*
  %74 = load i32, i32* %23, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %87

76:                                               ; preds = %71
  %77 = inttoptr i64 %72 to i8*
  %78 = load i8*, i8** %25, align 8
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 3
  switch i64 %80, label %86 [
    i64 16, label %85
    i64 8, label %81
  ]

81:                                               ; preds = %76
  %82 = bitcast i8* %78 to i64*
  %83 = inttoptr i64 %72 to i64*
  %84 = load i64, i64* %82, align 1
  store i64 %84, i64* %83, align 1
  br label %87

85:                                               ; preds = %76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %78, i64 16, i1 false) #10
  br label %87

86:                                               ; preds = %76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %78, i64 %80, i1 false) #10
  br label %87

87:                                               ; preds = %86, %85, %81, %71
  store %"struct.v8::internal::RegExpInstruction"* %73, %"struct.v8::internal::RegExpInstruction"** %26, align 8
  store i32 %58, i32* %24, align 8
  %88 = load i32, i32* %23, align 4
  br label %89

89:                                               ; preds = %87, %54
  %90 = phi i32 [ %88, %87 ], [ %51, %54 ]
  %91 = phi %"struct.v8::internal::RegExpInstruction"* [ %73, %87 ], [ %55, %54 ]
  %92 = add nsw i32 %90, 1
  store i32 %92, i32* %23, align 4
  %93 = sext i32 %90 to i64
  %94 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %91, i64 %93
  %95 = bitcast %"struct.v8::internal::RegExpInstruction"* %94 to i64*
  store i64 %49, i64* %95, align 4
  %96 = add nsw i32 %46, 2
  %97 = icmp sgt i32 %96, %17
  br i1 %97, label %98, label %45

98:                                               ; preds = %89
  %99 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %100 = bitcast %"class.v8::internal::RegExpTree"* %99 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %101 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %100, align 8
  %102 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %101, i64 2
  %103 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %102, align 8
  %104 = tail call i8* %103(%"class.v8::internal::RegExpTree"* %99, %"class.v8::internal::RegExpVisitor"* %27, i8* null) #10
  %105 = add nuw nsw i32 %44, 1
  %106 = load i32, i32* %11, align 8
  %107 = icmp eq i32 %105, %106
  br i1 %107, label %39, label %43

108:                                              ; preds = %39
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

109:                                              ; preds = %39
  %110 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 3
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, 2147483647
  br i1 %112, label %113, label %305

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %117 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %118 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %117, align 8
  %119 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %120 = load i32, i32* %119, align 8
  %121 = icmp slt i32 %115, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %113
  %123 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %116, i64 0, i32 0
  %124 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %123, align 8
  br label %160

125:                                              ; preds = %113
  %126 = shl nsw i32 %120, 1
  %127 = or i32 %126, 1
  %128 = sext i32 %127 to i64
  %129 = shl nsw i64 %128, 3
  %130 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %118, i64 0, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %118, i64 0, i32 3
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %133, %131
  %135 = icmp ugt i64 %129, %134
  br i1 %135, label %136, label %138, !prof !6

136:                                              ; preds = %125
  %137 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %118, i64 %129) #10
  br label %140

138:                                              ; preds = %125
  %139 = add i64 %131, %129
  store i64 %139, i64* %130, align 8
  br label %140

140:                                              ; preds = %138, %136
  %141 = phi i64 [ %137, %136 ], [ %131, %138 ]
  %142 = inttoptr i64 %141 to %"struct.v8::internal::RegExpInstruction"*
  %143 = load i32, i32* %114, align 4
  %144 = icmp sgt i32 %143, 0
  br i1 %144, label %145, label %157

145:                                              ; preds = %140
  %146 = inttoptr i64 %141 to i8*
  %147 = bitcast %"class.v8::internal::ZoneList"* %116 to i8**
  %148 = load i8*, i8** %147, align 8
  %149 = sext i32 %143 to i64
  %150 = shl nsw i64 %149, 3
  switch i64 %150, label %156 [
    i64 16, label %155
    i64 8, label %151
  ]

151:                                              ; preds = %145
  %152 = bitcast i8* %148 to i64*
  %153 = inttoptr i64 %141 to i64*
  %154 = load i64, i64* %152, align 1
  store i64 %154, i64* %153, align 1
  br label %157

155:                                              ; preds = %145
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %148, i64 16, i1 false) #10
  br label %157

156:                                              ; preds = %145
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %148, i64 %150, i1 false) #10
  br label %157

157:                                              ; preds = %156, %155, %151, %140
  %158 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %116, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %142, %"struct.v8::internal::RegExpInstruction"** %158, align 8
  store i32 %127, i32* %119, align 8
  %159 = load i32, i32* %114, align 4
  br label %160

160:                                              ; preds = %157, %122
  %161 = phi i32 [ %159, %157 ], [ %115, %122 ]
  %162 = phi %"struct.v8::internal::RegExpInstruction"* [ %142, %157 ], [ %124, %122 ]
  %163 = add nsw i32 %161, 1
  store i32 %163, i32* %114, align 4
  %164 = sext i32 %161 to i64
  %165 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %162, i64 %164
  %166 = bitcast %"struct.v8::internal::RegExpInstruction"* %165 to i64*
  store i64 -4294967292, i64* %166, align 4
  %167 = trunc i64 %10 to i32
  %168 = lshr i64 %10, 32
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %167, -1
  %171 = icmp sgt i32 %167, %169
  %172 = or i1 %170, %171
  br i1 %172, label %229, label %173

173:                                              ; preds = %160
  %174 = bitcast %"class.v8::internal::ZoneList"* %116 to i8**
  %175 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %116, i64 0, i32 0
  br label %176

176:                                              ; preds = %220, %173
  %177 = phi i32 [ %167, %173 ], [ %227, %220 ]
  %178 = zext i32 %177 to i64
  %179 = shl nuw i64 %178, 32
  %180 = or i64 %179, 2
  %181 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %117, align 8
  %182 = load i32, i32* %114, align 4
  %183 = load i32, i32* %119, align 8
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %185, label %187

185:                                              ; preds = %176
  %186 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %175, align 8
  br label %220

187:                                              ; preds = %176
  %188 = shl nsw i32 %183, 1
  %189 = or i32 %188, 1
  %190 = sext i32 %189 to i64
  %191 = shl nsw i64 %190, 3
  %192 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %181, i64 0, i32 2
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %181, i64 0, i32 3
  %195 = load i64, i64* %194, align 8
  %196 = sub i64 %195, %193
  %197 = icmp ugt i64 %191, %196
  br i1 %197, label %198, label %200, !prof !6

198:                                              ; preds = %187
  %199 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %181, i64 %191) #10
  br label %202

200:                                              ; preds = %187
  %201 = add i64 %193, %191
  store i64 %201, i64* %192, align 8
  br label %202

202:                                              ; preds = %200, %198
  %203 = phi i64 [ %199, %198 ], [ %193, %200 ]
  %204 = inttoptr i64 %203 to %"struct.v8::internal::RegExpInstruction"*
  %205 = load i32, i32* %114, align 4
  %206 = icmp sgt i32 %205, 0
  br i1 %206, label %207, label %218

207:                                              ; preds = %202
  %208 = inttoptr i64 %203 to i8*
  %209 = load i8*, i8** %174, align 8
  %210 = sext i32 %205 to i64
  %211 = shl nsw i64 %210, 3
  switch i64 %211, label %217 [
    i64 16, label %216
    i64 8, label %212
  ]

212:                                              ; preds = %207
  %213 = bitcast i8* %209 to i64*
  %214 = inttoptr i64 %203 to i64*
  %215 = load i64, i64* %213, align 1
  store i64 %215, i64* %214, align 1
  br label %218

216:                                              ; preds = %207
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* align 1 %209, i64 16, i1 false) #10
  br label %218

217:                                              ; preds = %207
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* align 1 %209, i64 %211, i1 false) #10
  br label %218

218:                                              ; preds = %217, %216, %212, %202
  store %"struct.v8::internal::RegExpInstruction"* %204, %"struct.v8::internal::RegExpInstruction"** %175, align 8
  store i32 %189, i32* %119, align 8
  %219 = load i32, i32* %114, align 4
  br label %220

220:                                              ; preds = %218, %185
  %221 = phi i32 [ %219, %218 ], [ %182, %185 ]
  %222 = phi %"struct.v8::internal::RegExpInstruction"* [ %204, %218 ], [ %186, %185 ]
  %223 = add nsw i32 %221, 1
  store i32 %223, i32* %114, align 4
  %224 = sext i32 %221 to i64
  %225 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %222, i64 %224
  %226 = bitcast %"struct.v8::internal::RegExpInstruction"* %225 to i64*
  store i64 %180, i64* %226, align 4
  %227 = add nsw i32 %177, 2
  %228 = icmp sgt i32 %227, %169
  br i1 %228, label %229, label %176

229:                                              ; preds = %220, %160
  %230 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %231 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %232 = bitcast %"class.v8::internal::RegExpTree"* %230 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %233 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %232, align 8
  %234 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %233, i64 2
  %235 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %234, align 8
  %236 = tail call i8* %235(%"class.v8::internal::RegExpTree"* %230, %"class.v8::internal::RegExpVisitor"* %231, i8* null) #10
  %237 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %117, align 8
  %238 = load i32, i32* %114, align 4
  %239 = load i32, i32* %119, align 8
  %240 = icmp slt i32 %238, %239
  br i1 %240, label %241, label %251

241:                                              ; preds = %229
  %242 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %116, i64 0, i32 0
  %243 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %242, align 8
  %244 = add nsw i32 %238, 1
  store i32 %244, i32* %114, align 4
  %245 = sext i32 %238 to i64
  %246 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %243, i64 %245
  %247 = bitcast %"struct.v8::internal::RegExpInstruction"* %246 to i64*
  %248 = zext i32 %115 to i64
  %249 = shl nuw i64 %248, 32
  %250 = or i64 %249, 5
  store i64 %250, i64* %247, align 4
  br label %293

251:                                              ; preds = %229
  %252 = shl nsw i32 %239, 1
  %253 = or i32 %252, 1
  %254 = zext i32 %115 to i64
  %255 = shl nuw i64 %254, 32
  %256 = or i64 %255, 5
  %257 = sext i32 %253 to i64
  %258 = shl nsw i64 %257, 3
  %259 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %237, i64 0, i32 2
  %260 = load i64, i64* %259, align 8
  %261 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %237, i64 0, i32 3
  %262 = load i64, i64* %261, align 8
  %263 = sub i64 %262, %260
  %264 = icmp ugt i64 %258, %263
  br i1 %264, label %265, label %267, !prof !6

265:                                              ; preds = %251
  %266 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %237, i64 %258) #10
  br label %269

267:                                              ; preds = %251
  %268 = add i64 %260, %258
  store i64 %268, i64* %259, align 8
  br label %269

269:                                              ; preds = %267, %265
  %270 = phi i64 [ %266, %265 ], [ %260, %267 ]
  %271 = inttoptr i64 %270 to %"struct.v8::internal::RegExpInstruction"*
  %272 = load i32, i32* %114, align 4
  %273 = icmp sgt i32 %272, 0
  br i1 %273, label %274, label %286

274:                                              ; preds = %269
  %275 = inttoptr i64 %270 to i8*
  %276 = bitcast %"class.v8::internal::ZoneList"* %116 to i8**
  %277 = load i8*, i8** %276, align 8
  %278 = sext i32 %272 to i64
  %279 = shl nsw i64 %278, 3
  switch i64 %279, label %285 [
    i64 16, label %284
    i64 8, label %280
  ]

280:                                              ; preds = %274
  %281 = bitcast i8* %277 to i64*
  %282 = inttoptr i64 %270 to i64*
  %283 = load i64, i64* %281, align 1
  store i64 %283, i64* %282, align 1
  br label %286

284:                                              ; preds = %274
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %275, i8* align 1 %277, i64 16, i1 false) #10
  br label %286

285:                                              ; preds = %274
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %275, i8* align 1 %277, i64 %279, i1 false) #10
  br label %286

286:                                              ; preds = %285, %284, %280, %269
  %287 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %116, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %271, %"struct.v8::internal::RegExpInstruction"** %287, align 8
  store i32 %253, i32* %119, align 8
  %288 = load i32, i32* %114, align 4
  %289 = add nsw i32 %288, 1
  store i32 %289, i32* %114, align 4
  %290 = sext i32 %288 to i64
  %291 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %271, i64 %290
  %292 = bitcast %"struct.v8::internal::RegExpInstruction"* %291 to i64*
  store i64 %256, i64* %292, align 4
  br label %293

293:                                              ; preds = %286, %241
  %294 = load i32, i32* %114, align 4
  %295 = icmp eq i32 %115, -1
  br i1 %295, label %915, label %296

296:                                              ; preds = %293
  %297 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %298

298:                                              ; preds = %298, %296
  %299 = phi i32 [ %115, %296 ], [ %303, %298 ]
  %300 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %297, align 8
  %301 = sext i32 %299 to i64
  %302 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %300, i64 %301, i32 1, i32 0
  %303 = load i32, i32* %302, align 4
  store i32 %294, i32* %302, align 4
  %304 = icmp eq i32 %303, -1
  br i1 %304, label %915, label %298

305:                                              ; preds = %109
  %306 = sub nsw i32 %111, %40
  %307 = icmp eq i32 %306, 0
  %308 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  br i1 %307, label %915, label %309

309:                                              ; preds = %305
  %310 = load i32, i32* %308, align 4
  %311 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %312 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %313 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %314 = bitcast %"class.v8::internal::ZoneList"* %311 to i8**
  %315 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %311, i64 0, i32 0
  %316 = trunc i64 %10 to i32
  %317 = lshr i64 %10, 32
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %316, -1
  %320 = icmp sgt i32 %316, %318
  %321 = or i1 %319, %320
  %322 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  br label %334

323:                                              ; preds = %444
  %324 = icmp eq i32 %335, -1
  br i1 %324, label %915, label %325

325:                                              ; preds = %323
  %326 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %327

327:                                              ; preds = %327, %325
  %328 = phi i32 [ %335, %325 ], [ %332, %327 ]
  %329 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %326, align 8
  %330 = sext i32 %328 to i64
  %331 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %329, i64 %330, i32 1, i32 0
  %332 = load i32, i32* %331, align 4
  store i32 %453, i32* %331, align 4
  %333 = icmp eq i32 %332, -1
  br i1 %333, label %915, label %327

334:                                              ; preds = %444, %309
  %335 = phi i32 [ %310, %309 ], [ %453, %444 ]
  %336 = phi i32 [ 0, %309 ], [ %451, %444 ]
  %337 = phi i32 [ -1, %309 ], [ %335, %444 ]
  %338 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %312, align 8
  %339 = load i32, i32* %313, align 8
  %340 = icmp slt i32 %335, %339
  br i1 %340, label %341, label %350

341:                                              ; preds = %334
  %342 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %315, align 8
  %343 = add nsw i32 %335, 1
  store i32 %343, i32* %308, align 4
  %344 = sext i32 %335 to i64
  %345 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %342, i64 %344
  %346 = bitcast %"struct.v8::internal::RegExpInstruction"* %345 to i64*
  %347 = zext i32 %337 to i64
  %348 = shl nuw i64 %347, 32
  %349 = or i64 %348, 4
  store i64 %349, i64* %346, align 4
  br label %390

350:                                              ; preds = %334
  %351 = shl nsw i32 %339, 1
  %352 = or i32 %351, 1
  %353 = zext i32 %337 to i64
  %354 = shl nuw i64 %353, 32
  %355 = or i64 %354, 4
  %356 = sext i32 %352 to i64
  %357 = shl nsw i64 %356, 3
  %358 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %338, i64 0, i32 2
  %359 = load i64, i64* %358, align 8
  %360 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %338, i64 0, i32 3
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %361, %359
  %363 = icmp ugt i64 %357, %362
  br i1 %363, label %364, label %366, !prof !6

364:                                              ; preds = %350
  %365 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %338, i64 %357) #10
  br label %368

366:                                              ; preds = %350
  %367 = add i64 %359, %357
  store i64 %367, i64* %358, align 8
  br label %368

368:                                              ; preds = %366, %364
  %369 = phi i64 [ %365, %364 ], [ %359, %366 ]
  %370 = inttoptr i64 %369 to %"struct.v8::internal::RegExpInstruction"*
  %371 = load i32, i32* %308, align 4
  %372 = icmp sgt i32 %371, 0
  br i1 %372, label %373, label %384

373:                                              ; preds = %368
  %374 = inttoptr i64 %369 to i8*
  %375 = load i8*, i8** %314, align 8
  %376 = sext i32 %371 to i64
  %377 = shl nsw i64 %376, 3
  switch i64 %377, label %383 [
    i64 16, label %382
    i64 8, label %378
  ]

378:                                              ; preds = %373
  %379 = bitcast i8* %375 to i64*
  %380 = inttoptr i64 %369 to i64*
  %381 = load i64, i64* %379, align 1
  store i64 %381, i64* %380, align 1
  br label %384

382:                                              ; preds = %373
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %374, i8* align 1 %375, i64 16, i1 false) #10
  br label %384

383:                                              ; preds = %373
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %374, i8* align 1 %375, i64 %377, i1 false) #10
  br label %384

384:                                              ; preds = %383, %382, %378, %368
  store %"struct.v8::internal::RegExpInstruction"* %370, %"struct.v8::internal::RegExpInstruction"** %315, align 8
  store i32 %352, i32* %313, align 8
  %385 = load i32, i32* %308, align 4
  %386 = add nsw i32 %385, 1
  store i32 %386, i32* %308, align 4
  %387 = sext i32 %385 to i64
  %388 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %370, i64 %387
  %389 = bitcast %"struct.v8::internal::RegExpInstruction"* %388 to i64*
  store i64 %355, i64* %389, align 4
  br label %390

390:                                              ; preds = %384, %341
  br i1 %321, label %444, label %391

391:                                              ; preds = %390, %435
  %392 = phi i32 [ %442, %435 ], [ %316, %390 ]
  %393 = zext i32 %392 to i64
  %394 = shl nuw i64 %393, 32
  %395 = or i64 %394, 2
  %396 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %312, align 8
  %397 = load i32, i32* %308, align 4
  %398 = load i32, i32* %313, align 8
  %399 = icmp slt i32 %397, %398
  br i1 %399, label %400, label %402

400:                                              ; preds = %391
  %401 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %315, align 8
  br label %435

402:                                              ; preds = %391
  %403 = shl nsw i32 %398, 1
  %404 = or i32 %403, 1
  %405 = sext i32 %404 to i64
  %406 = shl nsw i64 %405, 3
  %407 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %396, i64 0, i32 2
  %408 = load i64, i64* %407, align 8
  %409 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %396, i64 0, i32 3
  %410 = load i64, i64* %409, align 8
  %411 = sub i64 %410, %408
  %412 = icmp ugt i64 %406, %411
  br i1 %412, label %413, label %415, !prof !6

413:                                              ; preds = %402
  %414 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %396, i64 %406) #10
  br label %417

415:                                              ; preds = %402
  %416 = add i64 %408, %406
  store i64 %416, i64* %407, align 8
  br label %417

417:                                              ; preds = %415, %413
  %418 = phi i64 [ %414, %413 ], [ %408, %415 ]
  %419 = inttoptr i64 %418 to %"struct.v8::internal::RegExpInstruction"*
  %420 = load i32, i32* %308, align 4
  %421 = icmp sgt i32 %420, 0
  br i1 %421, label %422, label %433

422:                                              ; preds = %417
  %423 = inttoptr i64 %418 to i8*
  %424 = load i8*, i8** %314, align 8
  %425 = sext i32 %420 to i64
  %426 = shl nsw i64 %425, 3
  switch i64 %426, label %432 [
    i64 16, label %431
    i64 8, label %427
  ]

427:                                              ; preds = %422
  %428 = bitcast i8* %424 to i64*
  %429 = inttoptr i64 %418 to i64*
  %430 = load i64, i64* %428, align 1
  store i64 %430, i64* %429, align 1
  br label %433

431:                                              ; preds = %422
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %423, i8* align 1 %424, i64 16, i1 false) #10
  br label %433

432:                                              ; preds = %422
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %423, i8* align 1 %424, i64 %426, i1 false) #10
  br label %433

433:                                              ; preds = %432, %431, %427, %417
  store %"struct.v8::internal::RegExpInstruction"* %419, %"struct.v8::internal::RegExpInstruction"** %315, align 8
  store i32 %404, i32* %313, align 8
  %434 = load i32, i32* %308, align 4
  br label %435

435:                                              ; preds = %433, %400
  %436 = phi i32 [ %434, %433 ], [ %397, %400 ]
  %437 = phi %"struct.v8::internal::RegExpInstruction"* [ %419, %433 ], [ %401, %400 ]
  %438 = add nsw i32 %436, 1
  store i32 %438, i32* %308, align 4
  %439 = sext i32 %436 to i64
  %440 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %437, i64 %439
  %441 = bitcast %"struct.v8::internal::RegExpInstruction"* %440 to i64*
  store i64 %395, i64* %441, align 4
  %442 = add nsw i32 %392, 2
  %443 = icmp sgt i32 %442, %318
  br i1 %443, label %444, label %391

444:                                              ; preds = %435, %390
  %445 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %446 = bitcast %"class.v8::internal::RegExpTree"* %445 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %447 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %446, align 8
  %448 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %447, i64 2
  %449 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %448, align 8
  %450 = tail call i8* %449(%"class.v8::internal::RegExpTree"* %445, %"class.v8::internal::RegExpVisitor"* %322, i8* null) #10
  %451 = add nuw nsw i32 %336, 1
  %452 = icmp eq i32 %451, %306
  %453 = load i32, i32* %308, align 4
  br i1 %452, label %323, label %334

454:                                              ; preds = %39
  %455 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %1, i64 0, i32 3
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 2147483647
  br i1 %457, label %458, label %711

458:                                              ; preds = %454
  %459 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %460 = load i32, i32* %459, align 4
  %461 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %462 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %463 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %462, align 8
  %464 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %465 = load i32, i32* %464, align 8
  %466 = icmp slt i32 %460, %465
  br i1 %466, label %467, label %470

467:                                              ; preds = %458
  %468 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  %469 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %468, align 8
  br label %505

470:                                              ; preds = %458
  %471 = shl nsw i32 %465, 1
  %472 = or i32 %471, 1
  %473 = sext i32 %472 to i64
  %474 = shl nsw i64 %473, 3
  %475 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %463, i64 0, i32 2
  %476 = load i64, i64* %475, align 8
  %477 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %463, i64 0, i32 3
  %478 = load i64, i64* %477, align 8
  %479 = sub i64 %478, %476
  %480 = icmp ugt i64 %474, %479
  br i1 %480, label %481, label %483, !prof !6

481:                                              ; preds = %470
  %482 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %463, i64 %474) #10
  br label %485

483:                                              ; preds = %470
  %484 = add i64 %476, %474
  store i64 %484, i64* %475, align 8
  br label %485

485:                                              ; preds = %483, %481
  %486 = phi i64 [ %482, %481 ], [ %476, %483 ]
  %487 = inttoptr i64 %486 to %"struct.v8::internal::RegExpInstruction"*
  %488 = load i32, i32* %459, align 4
  %489 = icmp sgt i32 %488, 0
  br i1 %489, label %490, label %502

490:                                              ; preds = %485
  %491 = inttoptr i64 %486 to i8*
  %492 = bitcast %"class.v8::internal::ZoneList"* %461 to i8**
  %493 = load i8*, i8** %492, align 8
  %494 = sext i32 %488 to i64
  %495 = shl nsw i64 %494, 3
  switch i64 %495, label %501 [
    i64 16, label %500
    i64 8, label %496
  ]

496:                                              ; preds = %490
  %497 = bitcast i8* %493 to i64*
  %498 = inttoptr i64 %486 to i64*
  %499 = load i64, i64* %497, align 1
  store i64 %499, i64* %498, align 1
  br label %502

500:                                              ; preds = %490
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %491, i8* align 1 %493, i64 16, i1 false) #10
  br label %502

501:                                              ; preds = %490
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %491, i8* align 1 %493, i64 %495, i1 false) #10
  br label %502

502:                                              ; preds = %501, %500, %496, %485
  %503 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %487, %"struct.v8::internal::RegExpInstruction"** %503, align 8
  store i32 %472, i32* %464, align 8
  %504 = load i32, i32* %459, align 4
  br label %505

505:                                              ; preds = %502, %467
  %506 = phi i32 [ %504, %502 ], [ %460, %467 ]
  %507 = phi %"struct.v8::internal::RegExpInstruction"* [ %487, %502 ], [ %469, %467 ]
  %508 = add nsw i32 %506, 1
  store i32 %508, i32* %459, align 4
  %509 = sext i32 %506 to i64
  %510 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %507, i64 %509
  %511 = bitcast %"struct.v8::internal::RegExpInstruction"* %510 to i64*
  store i64 -4294967292, i64* %511, align 4
  %512 = load i32, i32* %459, align 4
  %513 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %462, align 8
  %514 = load i32, i32* %464, align 8
  %515 = icmp slt i32 %512, %514
  br i1 %515, label %516, label %519

516:                                              ; preds = %505
  %517 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  %518 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %517, align 8
  br label %554

519:                                              ; preds = %505
  %520 = shl nsw i32 %514, 1
  %521 = or i32 %520, 1
  %522 = sext i32 %521 to i64
  %523 = shl nsw i64 %522, 3
  %524 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %513, i64 0, i32 2
  %525 = load i64, i64* %524, align 8
  %526 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %513, i64 0, i32 3
  %527 = load i64, i64* %526, align 8
  %528 = sub i64 %527, %525
  %529 = icmp ugt i64 %523, %528
  br i1 %529, label %530, label %532, !prof !6

530:                                              ; preds = %519
  %531 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %513, i64 %523) #10
  br label %534

532:                                              ; preds = %519
  %533 = add i64 %525, %523
  store i64 %533, i64* %524, align 8
  br label %534

534:                                              ; preds = %532, %530
  %535 = phi i64 [ %531, %530 ], [ %525, %532 ]
  %536 = inttoptr i64 %535 to %"struct.v8::internal::RegExpInstruction"*
  %537 = load i32, i32* %459, align 4
  %538 = icmp sgt i32 %537, 0
  br i1 %538, label %539, label %551

539:                                              ; preds = %534
  %540 = inttoptr i64 %535 to i8*
  %541 = bitcast %"class.v8::internal::ZoneList"* %461 to i8**
  %542 = load i8*, i8** %541, align 8
  %543 = sext i32 %537 to i64
  %544 = shl nsw i64 %543, 3
  switch i64 %544, label %550 [
    i64 16, label %549
    i64 8, label %545
  ]

545:                                              ; preds = %539
  %546 = bitcast i8* %542 to i64*
  %547 = inttoptr i64 %535 to i64*
  %548 = load i64, i64* %546, align 1
  store i64 %548, i64* %547, align 1
  br label %551

549:                                              ; preds = %539
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %540, i8* align 1 %542, i64 16, i1 false) #10
  br label %551

550:                                              ; preds = %539
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %540, i8* align 1 %542, i64 %544, i1 false) #10
  br label %551

551:                                              ; preds = %550, %549, %545, %534
  %552 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %536, %"struct.v8::internal::RegExpInstruction"** %552, align 8
  store i32 %521, i32* %464, align 8
  %553 = load i32, i32* %459, align 4
  br label %554

554:                                              ; preds = %551, %516
  %555 = phi i32 [ %553, %551 ], [ %512, %516 ]
  %556 = phi %"struct.v8::internal::RegExpInstruction"* [ %536, %551 ], [ %518, %516 ]
  %557 = add nsw i32 %555, 1
  store i32 %557, i32* %459, align 4
  %558 = sext i32 %555 to i64
  %559 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %556, i64 %558
  %560 = bitcast %"struct.v8::internal::RegExpInstruction"* %559 to i64*
  store i64 -4294967291, i64* %560, align 4
  %561 = load i32, i32* %459, align 4
  %562 = icmp eq i32 %460, -1
  br i1 %562, label %572, label %563

563:                                              ; preds = %554
  %564 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %565

565:                                              ; preds = %565, %563
  %566 = phi i32 [ %460, %563 ], [ %570, %565 ]
  %567 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %564, align 8
  %568 = sext i32 %566 to i64
  %569 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %567, i64 %568, i32 1, i32 0
  %570 = load i32, i32* %569, align 4
  store i32 %561, i32* %569, align 4
  %571 = icmp eq i32 %570, -1
  br i1 %571, label %572, label %565

572:                                              ; preds = %565, %554
  %573 = trunc i64 %10 to i32
  %574 = lshr i64 %10, 32
  %575 = trunc i64 %574 to i32
  %576 = icmp eq i32 %573, -1
  %577 = icmp sgt i32 %573, %575
  %578 = or i1 %576, %577
  br i1 %578, label %635, label %579

579:                                              ; preds = %572
  %580 = bitcast %"class.v8::internal::ZoneList"* %461 to i8**
  %581 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  br label %582

582:                                              ; preds = %626, %579
  %583 = phi i32 [ %573, %579 ], [ %633, %626 ]
  %584 = zext i32 %583 to i64
  %585 = shl nuw i64 %584, 32
  %586 = or i64 %585, 2
  %587 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %462, align 8
  %588 = load i32, i32* %459, align 4
  %589 = load i32, i32* %464, align 8
  %590 = icmp slt i32 %588, %589
  br i1 %590, label %591, label %593

591:                                              ; preds = %582
  %592 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %581, align 8
  br label %626

593:                                              ; preds = %582
  %594 = shl nsw i32 %589, 1
  %595 = or i32 %594, 1
  %596 = sext i32 %595 to i64
  %597 = shl nsw i64 %596, 3
  %598 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %587, i64 0, i32 2
  %599 = load i64, i64* %598, align 8
  %600 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %587, i64 0, i32 3
  %601 = load i64, i64* %600, align 8
  %602 = sub i64 %601, %599
  %603 = icmp ugt i64 %597, %602
  br i1 %603, label %604, label %606, !prof !6

604:                                              ; preds = %593
  %605 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %587, i64 %597) #10
  br label %608

606:                                              ; preds = %593
  %607 = add i64 %599, %597
  store i64 %607, i64* %598, align 8
  br label %608

608:                                              ; preds = %606, %604
  %609 = phi i64 [ %605, %604 ], [ %599, %606 ]
  %610 = inttoptr i64 %609 to %"struct.v8::internal::RegExpInstruction"*
  %611 = load i32, i32* %459, align 4
  %612 = icmp sgt i32 %611, 0
  br i1 %612, label %613, label %624

613:                                              ; preds = %608
  %614 = inttoptr i64 %609 to i8*
  %615 = load i8*, i8** %580, align 8
  %616 = sext i32 %611 to i64
  %617 = shl nsw i64 %616, 3
  switch i64 %617, label %623 [
    i64 16, label %622
    i64 8, label %618
  ]

618:                                              ; preds = %613
  %619 = bitcast i8* %615 to i64*
  %620 = inttoptr i64 %609 to i64*
  %621 = load i64, i64* %619, align 1
  store i64 %621, i64* %620, align 1
  br label %624

622:                                              ; preds = %613
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %614, i8* align 1 %615, i64 16, i1 false) #10
  br label %624

623:                                              ; preds = %613
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %614, i8* align 1 %615, i64 %617, i1 false) #10
  br label %624

624:                                              ; preds = %623, %622, %618, %608
  store %"struct.v8::internal::RegExpInstruction"* %610, %"struct.v8::internal::RegExpInstruction"** %581, align 8
  store i32 %595, i32* %464, align 8
  %625 = load i32, i32* %459, align 4
  br label %626

626:                                              ; preds = %624, %591
  %627 = phi i32 [ %625, %624 ], [ %588, %591 ]
  %628 = phi %"struct.v8::internal::RegExpInstruction"* [ %610, %624 ], [ %592, %591 ]
  %629 = add nsw i32 %627, 1
  store i32 %629, i32* %459, align 4
  %630 = sext i32 %627 to i64
  %631 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %628, i64 %630
  %632 = bitcast %"struct.v8::internal::RegExpInstruction"* %631 to i64*
  store i64 %586, i64* %632, align 4
  %633 = add nsw i32 %583, 2
  %634 = icmp sgt i32 %633, %575
  br i1 %634, label %635, label %582

635:                                              ; preds = %626, %572
  %636 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %637 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %638 = bitcast %"class.v8::internal::RegExpTree"* %636 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %639 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %638, align 8
  %640 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %639, i64 2
  %641 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %640, align 8
  %642 = tail call i8* %641(%"class.v8::internal::RegExpTree"* %636, %"class.v8::internal::RegExpVisitor"* %637, i8* null) #10
  %643 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %462, align 8
  %644 = load i32, i32* %459, align 4
  %645 = load i32, i32* %464, align 8
  %646 = icmp slt i32 %644, %645
  br i1 %646, label %647, label %657

647:                                              ; preds = %635
  %648 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  %649 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %648, align 8
  %650 = add nsw i32 %644, 1
  store i32 %650, i32* %459, align 4
  %651 = sext i32 %644 to i64
  %652 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %649, i64 %651
  %653 = bitcast %"struct.v8::internal::RegExpInstruction"* %652 to i64*
  %654 = zext i32 %561 to i64
  %655 = shl nuw i64 %654, 32
  %656 = or i64 %655, 4
  store i64 %656, i64* %653, align 4
  br label %699

657:                                              ; preds = %635
  %658 = shl nsw i32 %645, 1
  %659 = or i32 %658, 1
  %660 = zext i32 %561 to i64
  %661 = shl nuw i64 %660, 32
  %662 = or i64 %661, 4
  %663 = sext i32 %659 to i64
  %664 = shl nsw i64 %663, 3
  %665 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %643, i64 0, i32 2
  %666 = load i64, i64* %665, align 8
  %667 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %643, i64 0, i32 3
  %668 = load i64, i64* %667, align 8
  %669 = sub i64 %668, %666
  %670 = icmp ugt i64 %664, %669
  br i1 %670, label %671, label %673, !prof !6

671:                                              ; preds = %657
  %672 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %643, i64 %664) #10
  br label %675

673:                                              ; preds = %657
  %674 = add i64 %666, %664
  store i64 %674, i64* %665, align 8
  br label %675

675:                                              ; preds = %673, %671
  %676 = phi i64 [ %672, %671 ], [ %666, %673 ]
  %677 = inttoptr i64 %676 to %"struct.v8::internal::RegExpInstruction"*
  %678 = load i32, i32* %459, align 4
  %679 = icmp sgt i32 %678, 0
  br i1 %679, label %680, label %692

680:                                              ; preds = %675
  %681 = inttoptr i64 %676 to i8*
  %682 = bitcast %"class.v8::internal::ZoneList"* %461 to i8**
  %683 = load i8*, i8** %682, align 8
  %684 = sext i32 %678 to i64
  %685 = shl nsw i64 %684, 3
  switch i64 %685, label %691 [
    i64 16, label %690
    i64 8, label %686
  ]

686:                                              ; preds = %680
  %687 = bitcast i8* %683 to i64*
  %688 = inttoptr i64 %676 to i64*
  %689 = load i64, i64* %687, align 1
  store i64 %689, i64* %688, align 1
  br label %692

690:                                              ; preds = %680
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %681, i8* align 1 %683, i64 16, i1 false) #10
  br label %692

691:                                              ; preds = %680
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %681, i8* align 1 %683, i64 %685, i1 false) #10
  br label %692

692:                                              ; preds = %691, %690, %686, %675
  %693 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %461, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %677, %"struct.v8::internal::RegExpInstruction"** %693, align 8
  store i32 %659, i32* %464, align 8
  %694 = load i32, i32* %459, align 4
  %695 = add nsw i32 %694, 1
  store i32 %695, i32* %459, align 4
  %696 = sext i32 %694 to i64
  %697 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %677, i64 %696
  %698 = bitcast %"struct.v8::internal::RegExpInstruction"* %697 to i64*
  store i64 %662, i64* %698, align 4
  br label %699

699:                                              ; preds = %692, %647
  %700 = load i32, i32* %459, align 4
  %701 = icmp eq i32 %512, -1
  br i1 %701, label %915, label %702

702:                                              ; preds = %699
  %703 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  br label %704

704:                                              ; preds = %704, %702
  %705 = phi i32 [ %512, %702 ], [ %709, %704 ]
  %706 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %703, align 8
  %707 = sext i32 %705 to i64
  %708 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %706, i64 %707, i32 1, i32 0
  %709 = load i32, i32* %708, align 4
  store i32 %700, i32* %708, align 4
  %710 = icmp eq i32 %709, -1
  br i1 %710, label %915, label %704

711:                                              ; preds = %454
  %712 = sub nsw i32 %456, %40
  %713 = icmp eq i32 %712, 0
  %714 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  br i1 %713, label %915, label %715

715:                                              ; preds = %711
  %716 = load i32, i32* %714, align 4
  %717 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %718 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %719 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %720 = bitcast %"class.v8::internal::ZoneList"* %717 to i8**
  %721 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %717, i64 0, i32 0
  %722 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 0
  %723 = trunc i64 %10 to i32
  %724 = lshr i64 %10, 32
  %725 = trunc i64 %724 to i32
  %726 = icmp eq i32 %723, -1
  %727 = icmp sgt i32 %723, %725
  %728 = or i1 %726, %727
  %729 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  br label %739

730:                                              ; preds = %905
  %731 = icmp eq i32 %788, -1
  br i1 %731, label %915, label %732

732:                                              ; preds = %730, %732
  %733 = phi i32 [ %737, %732 ], [ %788, %730 ]
  %734 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %722, align 8
  %735 = sext i32 %733 to i64
  %736 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %734, i64 %735, i32 1, i32 0
  %737 = load i32, i32* %736, align 4
  store i32 %914, i32* %736, align 4
  %738 = icmp eq i32 %737, -1
  br i1 %738, label %915, label %732

739:                                              ; preds = %905, %715
  %740 = phi i32 [ %716, %715 ], [ %914, %905 ]
  %741 = phi i32 [ 0, %715 ], [ %912, %905 ]
  %742 = phi i32 [ -1, %715 ], [ %788, %905 ]
  %743 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %718, align 8
  %744 = load i32, i32* %719, align 8
  %745 = icmp slt i32 %740, %744
  br i1 %745, label %746, label %748

746:                                              ; preds = %739
  %747 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  br label %781

748:                                              ; preds = %739
  %749 = shl nsw i32 %744, 1
  %750 = or i32 %749, 1
  %751 = sext i32 %750 to i64
  %752 = shl nsw i64 %751, 3
  %753 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %743, i64 0, i32 2
  %754 = load i64, i64* %753, align 8
  %755 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %743, i64 0, i32 3
  %756 = load i64, i64* %755, align 8
  %757 = sub i64 %756, %754
  %758 = icmp ugt i64 %752, %757
  br i1 %758, label %759, label %761, !prof !6

759:                                              ; preds = %748
  %760 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %743, i64 %752) #10
  br label %763

761:                                              ; preds = %748
  %762 = add i64 %754, %752
  store i64 %762, i64* %753, align 8
  br label %763

763:                                              ; preds = %761, %759
  %764 = phi i64 [ %760, %759 ], [ %754, %761 ]
  %765 = inttoptr i64 %764 to %"struct.v8::internal::RegExpInstruction"*
  %766 = load i32, i32* %714, align 4
  %767 = icmp sgt i32 %766, 0
  br i1 %767, label %768, label %779

768:                                              ; preds = %763
  %769 = inttoptr i64 %764 to i8*
  %770 = load i8*, i8** %720, align 8
  %771 = sext i32 %766 to i64
  %772 = shl nsw i64 %771, 3
  switch i64 %772, label %778 [
    i64 16, label %777
    i64 8, label %773
  ]

773:                                              ; preds = %768
  %774 = bitcast i8* %770 to i64*
  %775 = inttoptr i64 %764 to i64*
  %776 = load i64, i64* %774, align 1
  store i64 %776, i64* %775, align 1
  br label %779

777:                                              ; preds = %768
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %769, i8* align 1 %770, i64 16, i1 false) #10
  br label %779

778:                                              ; preds = %768
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %769, i8* align 1 %770, i64 %772, i1 false) #10
  br label %779

779:                                              ; preds = %778, %777, %773, %763
  store %"struct.v8::internal::RegExpInstruction"* %765, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  store i32 %750, i32* %719, align 8
  %780 = load i32, i32* %714, align 4
  br label %781

781:                                              ; preds = %779, %746
  %782 = phi i32 [ %780, %779 ], [ %740, %746 ]
  %783 = phi %"struct.v8::internal::RegExpInstruction"* [ %765, %779 ], [ %747, %746 ]
  %784 = add nsw i32 %782, 1
  store i32 %784, i32* %714, align 4
  %785 = sext i32 %782 to i64
  %786 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %783, i64 %785
  %787 = bitcast %"struct.v8::internal::RegExpInstruction"* %786 to i64*
  store i64 -4294967292, i64* %787, align 4
  %788 = load i32, i32* %714, align 4
  %789 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %718, align 8
  %790 = load i32, i32* %719, align 8
  %791 = icmp slt i32 %788, %790
  br i1 %791, label %792, label %801

792:                                              ; preds = %781
  %793 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  %794 = add nsw i32 %788, 1
  store i32 %794, i32* %714, align 4
  %795 = sext i32 %788 to i64
  %796 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %793, i64 %795
  %797 = bitcast %"struct.v8::internal::RegExpInstruction"* %796 to i64*
  %798 = zext i32 %742 to i64
  %799 = shl nuw i64 %798, 32
  %800 = or i64 %799, 5
  store i64 %800, i64* %797, align 4
  br label %841

801:                                              ; preds = %781
  %802 = shl nsw i32 %790, 1
  %803 = or i32 %802, 1
  %804 = zext i32 %742 to i64
  %805 = shl nuw i64 %804, 32
  %806 = or i64 %805, 5
  %807 = sext i32 %803 to i64
  %808 = shl nsw i64 %807, 3
  %809 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %789, i64 0, i32 2
  %810 = load i64, i64* %809, align 8
  %811 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %789, i64 0, i32 3
  %812 = load i64, i64* %811, align 8
  %813 = sub i64 %812, %810
  %814 = icmp ugt i64 %808, %813
  br i1 %814, label %815, label %817, !prof !6

815:                                              ; preds = %801
  %816 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %789, i64 %808) #10
  br label %819

817:                                              ; preds = %801
  %818 = add i64 %810, %808
  store i64 %818, i64* %809, align 8
  br label %819

819:                                              ; preds = %817, %815
  %820 = phi i64 [ %816, %815 ], [ %810, %817 ]
  %821 = inttoptr i64 %820 to %"struct.v8::internal::RegExpInstruction"*
  %822 = load i32, i32* %714, align 4
  %823 = icmp sgt i32 %822, 0
  br i1 %823, label %824, label %835

824:                                              ; preds = %819
  %825 = inttoptr i64 %820 to i8*
  %826 = load i8*, i8** %720, align 8
  %827 = sext i32 %822 to i64
  %828 = shl nsw i64 %827, 3
  switch i64 %828, label %834 [
    i64 16, label %833
    i64 8, label %829
  ]

829:                                              ; preds = %824
  %830 = bitcast i8* %826 to i64*
  %831 = inttoptr i64 %820 to i64*
  %832 = load i64, i64* %830, align 1
  store i64 %832, i64* %831, align 1
  br label %835

833:                                              ; preds = %824
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %825, i8* align 1 %826, i64 16, i1 false) #10
  br label %835

834:                                              ; preds = %824
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %825, i8* align 1 %826, i64 %828, i1 false) #10
  br label %835

835:                                              ; preds = %834, %833, %829, %819
  store %"struct.v8::internal::RegExpInstruction"* %821, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  store i32 %803, i32* %719, align 8
  %836 = load i32, i32* %714, align 4
  %837 = add nsw i32 %836, 1
  store i32 %837, i32* %714, align 4
  %838 = sext i32 %836 to i64
  %839 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %821, i64 %838
  %840 = bitcast %"struct.v8::internal::RegExpInstruction"* %839 to i64*
  store i64 %806, i64* %840, align 4
  br label %841

841:                                              ; preds = %835, %792
  %842 = load i32, i32* %714, align 4
  %843 = icmp eq i32 %740, -1
  br i1 %843, label %851, label %844

844:                                              ; preds = %841, %844
  %845 = phi i32 [ %849, %844 ], [ %740, %841 ]
  %846 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %722, align 8
  %847 = sext i32 %845 to i64
  %848 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %846, i64 %847, i32 1, i32 0
  %849 = load i32, i32* %848, align 4
  store i32 %842, i32* %848, align 4
  %850 = icmp eq i32 %849, -1
  br i1 %850, label %851, label %844

851:                                              ; preds = %844, %841
  br i1 %728, label %905, label %852

852:                                              ; preds = %851, %896
  %853 = phi i32 [ %903, %896 ], [ %723, %851 ]
  %854 = zext i32 %853 to i64
  %855 = shl nuw i64 %854, 32
  %856 = or i64 %855, 2
  %857 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %718, align 8
  %858 = load i32, i32* %714, align 4
  %859 = load i32, i32* %719, align 8
  %860 = icmp slt i32 %858, %859
  br i1 %860, label %861, label %863

861:                                              ; preds = %852
  %862 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  br label %896

863:                                              ; preds = %852
  %864 = shl nsw i32 %859, 1
  %865 = or i32 %864, 1
  %866 = sext i32 %865 to i64
  %867 = shl nsw i64 %866, 3
  %868 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %857, i64 0, i32 2
  %869 = load i64, i64* %868, align 8
  %870 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %857, i64 0, i32 3
  %871 = load i64, i64* %870, align 8
  %872 = sub i64 %871, %869
  %873 = icmp ugt i64 %867, %872
  br i1 %873, label %874, label %876, !prof !6

874:                                              ; preds = %863
  %875 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %857, i64 %867) #10
  br label %878

876:                                              ; preds = %863
  %877 = add i64 %869, %867
  store i64 %877, i64* %868, align 8
  br label %878

878:                                              ; preds = %876, %874
  %879 = phi i64 [ %875, %874 ], [ %869, %876 ]
  %880 = inttoptr i64 %879 to %"struct.v8::internal::RegExpInstruction"*
  %881 = load i32, i32* %714, align 4
  %882 = icmp sgt i32 %881, 0
  br i1 %882, label %883, label %894

883:                                              ; preds = %878
  %884 = inttoptr i64 %879 to i8*
  %885 = load i8*, i8** %720, align 8
  %886 = sext i32 %881 to i64
  %887 = shl nsw i64 %886, 3
  switch i64 %887, label %893 [
    i64 16, label %892
    i64 8, label %888
  ]

888:                                              ; preds = %883
  %889 = bitcast i8* %885 to i64*
  %890 = inttoptr i64 %879 to i64*
  %891 = load i64, i64* %889, align 1
  store i64 %891, i64* %890, align 1
  br label %894

892:                                              ; preds = %883
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %884, i8* align 1 %885, i64 16, i1 false) #10
  br label %894

893:                                              ; preds = %883
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %884, i8* align 1 %885, i64 %887, i1 false) #10
  br label %894

894:                                              ; preds = %893, %892, %888, %878
  store %"struct.v8::internal::RegExpInstruction"* %880, %"struct.v8::internal::RegExpInstruction"** %721, align 8
  store i32 %865, i32* %719, align 8
  %895 = load i32, i32* %714, align 4
  br label %896

896:                                              ; preds = %894, %861
  %897 = phi i32 [ %895, %894 ], [ %858, %861 ]
  %898 = phi %"struct.v8::internal::RegExpInstruction"* [ %880, %894 ], [ %862, %861 ]
  %899 = add nsw i32 %897, 1
  store i32 %899, i32* %714, align 4
  %900 = sext i32 %897 to i64
  %901 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %898, i64 %900
  %902 = bitcast %"struct.v8::internal::RegExpInstruction"* %901 to i64*
  store i64 %856, i64* %902, align 4
  %903 = add nsw i32 %853, 2
  %904 = icmp sgt i32 %903, %725
  br i1 %904, label %905, label %852

905:                                              ; preds = %896, %851
  %906 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %907 = bitcast %"class.v8::internal::RegExpTree"* %906 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %908 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %907, align 8
  %909 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %908, i64 2
  %910 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %909, align 8
  %911 = tail call i8* %910(%"class.v8::internal::RegExpTree"* %906, %"class.v8::internal::RegExpVisitor"* %729, i8* null) #10
  %912 = add nuw nsw i32 %741, 1
  %913 = icmp eq i32 %912, %712
  %914 = load i32, i32* %714, align 4
  br i1 %913, label %730, label %739

915:                                              ; preds = %732, %704, %327, %298, %730, %711, %699, %323, %305, %293, %39
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor12VisitCaptureEPNS0_13RegExpCaptureEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpCapture"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = shl nsw i32 %5, 1
  %7 = or i32 %6, 1
  %8 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1
  %9 = zext i32 %6 to i64
  %10 = shl nuw i64 %9, 32
  %11 = or i64 %10, 6
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 0
  %13 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 2, i32 1, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp slt i32 %15, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 0
  %21 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %20, align 8
  br label %57

22:                                               ; preds = %3
  %23 = shl nsw i32 %17, 1
  %24 = or i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = shl nsw i64 %25, 3
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %30, %28
  %32 = icmp ugt i64 %26, %31
  br i1 %32, label %33, label %35, !prof !6

33:                                               ; preds = %22
  %34 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %13, i64 %26) #10
  br label %37

35:                                               ; preds = %22
  %36 = add i64 %28, %26
  store i64 %36, i64* %27, align 8
  br label %37

37:                                               ; preds = %35, %33
  %38 = phi i64 [ %34, %33 ], [ %28, %35 ]
  %39 = inttoptr i64 %38 to %"struct.v8::internal::RegExpInstruction"*
  %40 = load i32, i32* %14, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = inttoptr i64 %38 to i8*
  %44 = bitcast %"class.v8::internal::ZoneList"* %8 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = sext i32 %40 to i64
  %47 = shl nsw i64 %46, 3
  switch i64 %47, label %53 [
    i64 16, label %52
    i64 8, label %48
  ]

48:                                               ; preds = %42
  %49 = bitcast i8* %45 to i64*
  %50 = inttoptr i64 %38 to i64*
  %51 = load i64, i64* %49, align 1
  store i64 %51, i64* %50, align 1
  br label %54

52:                                               ; preds = %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %45, i64 16, i1 false) #10
  br label %54

53:                                               ; preds = %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %45, i64 %47, i1 false) #10
  br label %54

54:                                               ; preds = %53, %52, %48, %37
  %55 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %39, %"struct.v8::internal::RegExpInstruction"** %55, align 8
  store i32 %24, i32* %16, align 8
  %56 = load i32, i32* %14, align 4
  br label %57

57:                                               ; preds = %19, %54
  %58 = phi i32 [ %15, %19 ], [ %56, %54 ]
  %59 = phi %"struct.v8::internal::RegExpInstruction"* [ %21, %19 ], [ %39, %54 ]
  %60 = add nsw i32 %58, 1
  store i32 %60, i32* %14, align 4
  %61 = sext i32 %58 to i64
  %62 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %59, i64 %61
  %63 = bitcast %"struct.v8::internal::RegExpInstruction"* %62 to i64*
  store i64 %11, i64* %63, align 4
  %64 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %1, i64 0, i32 1
  %65 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %67 = bitcast %"class.v8::internal::RegExpTree"* %65 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %68 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %67, align 8
  %69 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %68, i64 2
  %70 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %69, align 8
  %71 = tail call i8* %70(%"class.v8::internal::RegExpTree"* %65, %"class.v8::internal::RegExpVisitor"* %66, i8* null) #10
  %72 = zext i32 %7 to i64
  %73 = shl nuw i64 %72, 32
  %74 = or i64 %73, 6
  %75 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  %76 = load i32, i32* %14, align 4
  %77 = load i32, i32* %16, align 8
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %79, label %82

79:                                               ; preds = %57
  %80 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 0
  %81 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %80, align 8
  br label %117

82:                                               ; preds = %57
  %83 = shl nsw i32 %77, 1
  %84 = or i32 %83, 1
  %85 = sext i32 %84 to i64
  %86 = shl nsw i64 %85, 3
  %87 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %75, i64 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %75, i64 0, i32 3
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %90, %88
  %92 = icmp ugt i64 %86, %91
  br i1 %92, label %93, label %95, !prof !6

93:                                               ; preds = %82
  %94 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %75, i64 %86) #10
  br label %97

95:                                               ; preds = %82
  %96 = add i64 %88, %86
  store i64 %96, i64* %87, align 8
  br label %97

97:                                               ; preds = %95, %93
  %98 = phi i64 [ %94, %93 ], [ %88, %95 ]
  %99 = inttoptr i64 %98 to %"struct.v8::internal::RegExpInstruction"*
  %100 = load i32, i32* %14, align 4
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %114

102:                                              ; preds = %97
  %103 = inttoptr i64 %98 to i8*
  %104 = bitcast %"class.v8::internal::ZoneList"* %8 to i8**
  %105 = load i8*, i8** %104, align 8
  %106 = sext i32 %100 to i64
  %107 = shl nsw i64 %106, 3
  switch i64 %107, label %113 [
    i64 16, label %112
    i64 8, label %108
  ]

108:                                              ; preds = %102
  %109 = bitcast i8* %105 to i64*
  %110 = inttoptr i64 %98 to i64*
  %111 = load i64, i64* %109, align 1
  store i64 %111, i64* %110, align 1
  br label %114

112:                                              ; preds = %102
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %105, i64 16, i1 false) #10
  br label %114

113:                                              ; preds = %102
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %105, i64 %107, i1 false) #10
  br label %114

114:                                              ; preds = %113, %112, %108, %97
  %115 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %99, %"struct.v8::internal::RegExpInstruction"** %115, align 8
  store i32 %84, i32* %16, align 8
  %116 = load i32, i32* %14, align 4
  br label %117

117:                                              ; preds = %79, %114
  %118 = phi i32 [ %76, %79 ], [ %116, %114 ]
  %119 = phi %"struct.v8::internal::RegExpInstruction"* [ %81, %79 ], [ %99, %114 ]
  %120 = add nsw i32 %118, 1
  store i32 %120, i32* %14, align 4
  %121 = sext i32 %118 to i64
  %122 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %119, i64 %121
  %123 = bitcast %"struct.v8::internal::RegExpInstruction"* %122 to i64*
  store i64 %74, i64* %123, align 4
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor10VisitGroupEPNS0_11RegExpGroupEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpGroup"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %1, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  %7 = bitcast %"class.v8::internal::RegExpTree"* %5 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %8 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %7, align 8
  %9 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %8, i64 2
  %10 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %9, align 8
  %11 = tail call i8* %10(%"class.v8::internal::RegExpTree"* %5, %"class.v8::internal::RegExpVisitor"* %6, i8* null) #10
  ret i8* null
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal noalias nonnull i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor15VisitLookaroundEPNS0_16RegExpLookaroundEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"* nocapture readnone, %"class.v8::internal::RegExpLookaround"* nocapture readnone, i8* nocapture readnone) unnamed_addr #7 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal noalias nonnull i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor18VisitBackReferenceEPNS0_19RegExpBackReferenceEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"* nocapture readnone, %"class.v8::internal::RegExpBackReference"* nocapture readnone, i8* nocapture readnone) unnamed_addr #7 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor10VisitEmptyEPNS0_11RegExpEmptyEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"* nocapture readnone, %"class.v8::internal::RegExpEmpty"* nocapture readnone, i8* nocapture readnone) unnamed_addr #5 align 2 {
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @_ZN2v88internal12_GLOBAL__N_114CompileVisitor9VisitTextEPNS0_10RegExpTextEPv(%"class.v8::internal::(anonymous namespace)::CompileVisitor"*, %"class.v8::internal::RegExpText"* nocapture readonly, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %1, i64 0, i32 1, i32 0
  %5 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %1, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CompileVisitor", %"class.v8::internal::(anonymous namespace)::CompileVisitor"* %0, i64 0, i32 0
  br label %14

13:                                               ; preds = %14, %3
  ret i8* null

14:                                               ; preds = %11, %14
  %15 = phi %"class.v8::internal::TextElement"* [ %5, %11 ], [ %23, %14 ]
  %16 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 0, i32 2
  %17 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, align 8
  %18 = bitcast %"class.v8::internal::RegExpTree"* %17 to i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)***
  %19 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)**, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*** %18, align 8
  %20 = getelementptr inbounds i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %19, i64 2
  %21 = load i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)*, i8* (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpVisitor"*, i8*)** %20, align 8
  %22 = tail call i8* %21(%"class.v8::internal::RegExpTree"* %17, %"class.v8::internal::RegExpVisitor"* %12, i8* null) #10
  %23 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 1
  %24 = icmp eq %"class.v8::internal::TextElement"* %23, %9
  br i1 %24, label %13, label %14
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #8

declare void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.9"*) local_unnamed_addr #8

declare void @_ZN2v88internal14CharacterRange6NegateEPNS0_8ZoneListIS1_EES4_PNS0_4ZoneE(%"class.v8::internal::ZoneList.9"*, %"class.v8::internal::ZoneList.9"*, %"class.v8::internal::Zone"*) local_unnamed_addr #8

declare %"class.v8::internal::ZoneList.9"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"*, %"class.v8::internal::Zone"*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN2v88internal12_GLOBAL__N_114CompileVisitor7CompileEPNS0_10RegExpTreeENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_4ZoneE: argument 0"}
!5 = distinct !{!5, !"_ZN2v88internal12_GLOBAL__N_114CompileVisitor7CompileEPNS0_10RegExpTreeENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_4ZoneE"}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8, !4}
!8 = distinct !{!8, !9, !"_ZNO2v88internal12_GLOBAL__N_117BytecodeAssembler8IntoCodeEv: argument 0"}
!9 = distinct !{!9, !"_ZNO2v88internal12_GLOBAL__N_117BytecodeAssembler8IntoCodeEv"}
