; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_external_image.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_external_image.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.1", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.13", %"class.std::__1::vector", %"class.std::__1::vector.20", %"class.std::__1::vector.27", %"class.std::__1::vector.36", %"class.std::__1::vector.50", %"class.std::__1::vector.4", %"class.std::__1::vector", %"class.std::__1::vector.4", i32, i8, %"class.std::__1::vector.4" }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { i32*, i32*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i32* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.22" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.31" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.29", %"struct.std::__1::array.30", i32, i8, [3 x i8] }>
%"struct.std::__1::array.29" = type { [17 x i32] }
%"struct.std::__1::array.30" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.45" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.38" }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { i16*, i16*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i16* }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.67" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.52", i32, %"class.std::__1::vector.53", %"class.std::__1::vector.60" }
%"struct.std::__1::array.52" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { i32*, i32*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::vector.4"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i8*, i8*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"class.jxl::ThreadPool::RunCallState.96" = type { i32 (i64)*, %class.anon.93* }
%class.anon.93 = type { %class.anon*, i64*, i64*, i64*, %"class.jxl::Image3"*, i64*, i8**, float*, i64*, i64*, i8* }
%class.anon = type { i8, i64 }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon.92* }
%class.anon.92 = type { %class.anon*, i64*, i64*, i64*, %"class.jxl::Image3"*, i8*, i64*, i8**, i64* }
%"class.jxl::ThreadPool::RunCallState.97" = type { i32 (i64)*, %class.anon.94* }
%class.anon.94 = type { %class.anon*, i64*, i64*, i64*, %"class.jxl::Plane"*, i8*, i64*, i8**, i64* }
%"class.jxl::ThreadPool::RunCallState.98" = type { i32 (i64)*, %class.anon.95* }
%class.anon.95 = type { %class.anon*, i64*, i64*, i64*, %"class.jxl::Plane"*, i64*, i8**, float*, i64*, i64*, i8* }
%struct.JxlPixelFormat = type { i32, i32, i32, i64 }

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

@.str.5 = private unnamed_addr constant [16 x i8] c"ConvertRGBFloat\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"ConvertRGBUint\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"ConvertAlphaFloat\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"ConvertAlphaUint\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.15 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPNS_10ThreadPoolEPNS_11ImageBundleE(i8*, i64, i64, i64, %"struct.jxl::ColorEncoding"* dereferenceable(152), i1 zeroext, i1 zeroext, i64, i32, i1 zeroext, %"class.jxl::ThreadPool"* readonly, %"class.jxl::ImageBundle"*) local_unnamed_addr #0 {
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.96", align 8
  %14 = alloca %"class.jxl::ThreadPool::RunCallState.96", align 8
  %15 = alloca double, align 8
  %16 = alloca %"class.jxl::ThreadPool", align 8
  %17 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %18 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %19 = alloca double, align 8
  %20 = alloca %"class.jxl::ThreadPool", align 8
  %21 = alloca %"class.jxl::ThreadPool::RunCallState.97", align 8
  %22 = alloca %"class.jxl::ThreadPool::RunCallState.97", align 8
  %23 = alloca double, align 8
  %24 = alloca %"class.jxl::ThreadPool", align 8
  %25 = alloca %"class.jxl::ThreadPool::RunCallState.98", align 8
  %26 = alloca %"class.jxl::ThreadPool::RunCallState.98", align 8
  %27 = alloca double, align 8
  %28 = alloca %"class.jxl::ThreadPool", align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i8, align 1
  %36 = alloca i8*, align 8
  %37 = alloca %"class.jxl::Image3", align 8
  %38 = alloca %"class.jxl::Plane", align 8
  %39 = alloca %"class.jxl::Plane", align 8
  %40 = alloca %class.anon, align 8
  %41 = alloca i64, align 8
  %42 = alloca %class.anon.92, align 8
  %43 = alloca float, align 4
  %44 = alloca i64, align 8
  %45 = alloca %class.anon.93, align 8
  %46 = alloca %class.anon.94, align 8
  %47 = alloca float, align 4
  %48 = alloca %class.anon.95, align 8
  store i64 %2, i64* %29, align 8
  store i64 %7, i64* %30, align 8
  %49 = zext i1 %9 to i8
  %50 = add i64 %7, -1
  %51 = icmp ugt i64 %50, 31
  %52 = icmp eq i64 %7, 1
  %53 = or i1 %52, %51
  br i1 %53, label %455, label %54

54:                                               ; preds = %12
  %55 = bitcast i64* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #4
  %56 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %4, i64 0, i32 9
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 1
  %59 = select i1 %58, i64 1, i64 3
  store i64 %59, i64* %31, align 8
  %60 = zext i1 %5 to i64
  %61 = add nuw nsw i64 %59, %60
  %62 = bitcast i64* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #4
  %63 = add nuw nsw i64 %7, 7
  %64 = lshr i64 %63, 3
  %65 = and i64 %64, 31
  store i64 %65, i64* %32, align 8
  %66 = bitcast i64* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #4
  %67 = mul nuw nsw i64 %61, %65
  store i64 %67, i64* %33, align 8
  %68 = bitcast i64* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #4
  %69 = mul i64 %67, %2
  store i64 %69, i64* %34, align 8
  %70 = icmp eq i64 %3, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %54
  %72 = udiv i64 %1, %3
  %73 = icmp ult i64 %72, %69
  br i1 %73, label %453, label %74

74:                                               ; preds = %54, %71
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %35) #4
  %75 = icmp ult i32 %8, 2
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %35, align 1
  %77 = bitcast i8** %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #4
  store i8* %0, i8** %36, align 8
  %78 = bitcast %"class.jxl::Image3"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %78) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 96, i1 false)
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %79, i64 %2, i64 %3, i64 4) #4
  %80 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %80, i64 %2, i64 %3, i64 4) #4
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %81, i64 %2, i64 %3, i64 4) #4
  %82 = bitcast %"class.jxl::Plane"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %82) #4
  %83 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 0, i64 32, i1 false) #4
  br i1 %5, label %84, label %106

84:                                               ; preds = %74
  %85 = bitcast %"class.jxl::Plane"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %85) #4
  %86 = load i64, i64* %29, align 8
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %87, i64 %86, i64 %3, i64 4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %82, i8* nonnull align 8 %85, i64 24, i1 false) #4
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 5
  %89 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %89, i64 0, i32 0, i32 0, i32 0
  %91 = bitcast %"class.std::__1::unique_ptr"* %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i8* null, i8** %90, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %88 to i64*
  store i64 %92, i64* %95, align 8
  %96 = icmp eq i8* %94, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %84
  %98 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %98, align 8
  br label %105

99:                                               ; preds = %84
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #4
  %100 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %102, align 8
  %103 = icmp eq i8* %101, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %99
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %101) #4
  br label %105

105:                                              ; preds = %97, %99, %104
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %85) #4
  br label %106

106:                                              ; preds = %105, %74
  %107 = load i64, i64* %30, align 8
  %108 = icmp eq i64 %107, 32
  %109 = getelementptr inbounds %class.anon, %class.anon* %40, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #4
  %110 = bitcast %class.anon* %40 to i64*
  store i64 -6148914691236517206, i64* %110, align 8
  store i8 %49, i8* %109, align 8
  %111 = getelementptr inbounds %class.anon, %class.anon* %40, i64 0, i32 1
  store i64 %3, i64* %111, align 8
  br i1 %108, label %112, label %162

112:                                              ; preds = %106
  %113 = bitcast i64* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113) #4
  store i64 0, i64* %41, align 8
  %114 = load i64, i64* %31, align 8
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %143, label %116

116:                                              ; preds = %112
  %117 = trunc i64 %3 to i32
  %118 = bitcast %class.anon.92* %42 to i8*
  %119 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 0
  %120 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 1
  %121 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 2
  %122 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 3
  %123 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 4
  %124 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 5
  %125 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 6
  %126 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 7
  %127 = getelementptr inbounds %class.anon.92, %class.anon.92* %42, i64 0, i32 8
  %128 = bitcast double* %19 to i8*
  %129 = icmp eq %"class.jxl::ThreadPool"* %10, null
  %130 = icmp eq i32 %117, 0
  %131 = bitcast %"class.jxl::ThreadPool::RunCallState"* %18 to i8*
  %132 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %18, i64 0, i32 0
  %133 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %18, i64 0, i32 1
  %134 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %135 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  %136 = bitcast %"class.jxl::ThreadPool"* %20 to i8*
  %137 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 0
  %138 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 1
  %139 = bitcast i8** %138 to %"class.jxl::ThreadPool"**
  %140 = bitcast %"class.jxl::ThreadPool::RunCallState"* %17 to i8*
  %141 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %17, i64 0, i32 0
  %142 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %17, i64 0, i32 1
  br label %145

143:                                              ; preds = %156, %112
  %144 = phi i64 [ 0, %112 ], [ %160, %156 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %113) #4
  br label %220

145:                                              ; preds = %116, %156
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %118) #4
  store %class.anon* %40, %class.anon** %119, align 8
  store i64* %34, i64** %120, align 8
  store i64* %41, i64** %121, align 8
  store i64* %30, i64** %122, align 8
  store %"class.jxl::Image3"* %37, %"class.jxl::Image3"** %123, align 8
  store i8* %35, i8** %124, align 8
  store i64* %29, i64** %125, align 8
  store i8** %36, i8*** %126, align 8
  store i64* %33, i64** %127, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %128) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %19, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), double* nonnull %19) #4
  br i1 %129, label %146, label %149

146:                                              ; preds = %145
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136) #4
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %137, align 8
  store %"class.jxl::ThreadPool"* %20, %"class.jxl::ThreadPool"** %139, align 8
  br i1 %130, label %154, label %147

147:                                              ; preds = %146
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %140) #4
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %141, align 8
  store %class.anon.92* %42, %class.anon.92** %142, align 8
  %148 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %136, i8* nonnull %140, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %117) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %140) #4
  br label %154

149:                                              ; preds = %145
  br i1 %130, label %156, label %150

150:                                              ; preds = %149
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131) #4
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %132, align 8
  store %class.anon.92* %42, %class.anon.92** %133, align 8
  %151 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %134, align 8
  %152 = load i8*, i8** %135, align 8
  %153 = call i32 %151(i8* %152, i8* nonnull %131, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %117) #4
  br label %154

154:                                              ; preds = %146, %147, %150
  %155 = phi i8* [ %131, %150 ], [ %136, %147 ], [ %136, %146 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %155) #4
  br label %156

156:                                              ; preds = %154, %149
  %157 = load double, double* %19, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), double %157) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %128) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %118) #4
  %158 = load i64, i64* %41, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %41, align 8
  %160 = load i64, i64* %31, align 8
  %161 = icmp ult i64 %159, %160
  br i1 %161, label %145, label %143

162:                                              ; preds = %106
  %163 = bitcast float* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #4
  %164 = shl nsw i64 -1, %107
  %165 = xor i64 %164, -1
  %166 = uitofp i64 %165 to double
  %167 = fdiv double 1.000000e+00, %166
  %168 = fptrunc double %167 to float
  store float %168, float* %43, align 4
  %169 = bitcast i64* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #4
  store i64 0, i64* %44, align 8
  %170 = load i64, i64* %31, align 8
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %201, label %172

172:                                              ; preds = %162
  %173 = trunc i64 %3 to i32
  %174 = bitcast %class.anon.93* %45 to i8*
  %175 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 0
  %176 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 1
  %177 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 2
  %178 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 3
  %179 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 4
  %180 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 5
  %181 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 6
  %182 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 7
  %183 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 8
  %184 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 9
  %185 = getelementptr inbounds %class.anon.93, %class.anon.93* %45, i64 0, i32 10
  %186 = bitcast double* %15 to i8*
  %187 = icmp eq %"class.jxl::ThreadPool"* %10, null
  %188 = icmp eq i32 %173, 0
  %189 = bitcast %"class.jxl::ThreadPool::RunCallState.96"* %14 to i8*
  %190 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.96", %"class.jxl::ThreadPool::RunCallState.96"* %14, i64 0, i32 0
  %191 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.96", %"class.jxl::ThreadPool::RunCallState.96"* %14, i64 0, i32 1
  %192 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %193 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  %194 = bitcast %"class.jxl::ThreadPool"* %16 to i8*
  %195 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 0
  %196 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 1
  %197 = bitcast i8** %196 to %"class.jxl::ThreadPool"**
  %198 = bitcast %"class.jxl::ThreadPool::RunCallState.96"* %13 to i8*
  %199 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.96", %"class.jxl::ThreadPool::RunCallState.96"* %13, i64 0, i32 0
  %200 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.96", %"class.jxl::ThreadPool::RunCallState.96"* %13, i64 0, i32 1
  br label %203

201:                                              ; preds = %214, %162
  %202 = phi i64 [ 0, %162 ], [ %218, %214 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #4
  br label %220

203:                                              ; preds = %172, %214
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %174) #4
  store %class.anon* %40, %class.anon** %175, align 8
  store i64* %34, i64** %176, align 8
  store i64* %44, i64** %177, align 8
  store i64* %32, i64** %178, align 8
  store %"class.jxl::Image3"* %37, %"class.jxl::Image3"** %179, align 8
  store i64* %30, i64** %180, align 8
  store i8** %36, i8*** %181, align 8
  store float* %43, float** %182, align 8
  store i64* %29, i64** %183, align 8
  store i64* %33, i64** %184, align 8
  store i8* %35, i8** %185, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), double* nonnull %15) #4
  br i1 %187, label %204, label %207

204:                                              ; preds = %203
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #4
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %195, align 8
  store %"class.jxl::ThreadPool"* %16, %"class.jxl::ThreadPool"** %197, align 8
  br i1 %188, label %212, label %205

205:                                              ; preds = %204
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %198) #4
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %199, align 8
  store %class.anon.93* %45, %class.anon.93** %200, align 8
  %206 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %194, i8* nonnull %198, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %173) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %198) #4
  br label %212

207:                                              ; preds = %203
  br i1 %188, label %214, label %208

208:                                              ; preds = %207
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %189) #4
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %190, align 8
  store %class.anon.93* %45, %class.anon.93** %191, align 8
  %209 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %192, align 8
  %210 = load i8*, i8** %193, align 8
  %211 = call i32 %209(i8* %210, i8* nonnull %189, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %173) #4
  br label %212

212:                                              ; preds = %204, %205, %208
  %213 = phi i8* [ %189, %208 ], [ %194, %205 ], [ %194, %204 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %213) #4
  br label %214

214:                                              ; preds = %212, %207
  %215 = load double, double* %15, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), double %215) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %174) #4
  %216 = load i64, i64* %44, align 8
  %217 = add i64 %216, 1
  store i64 %217, i64* %44, align 8
  %218 = load i64, i64* %31, align 8
  %219 = icmp ult i64 %217, %218
  br i1 %219, label %203, label %201

220:                                              ; preds = %201, %143
  %221 = phi i64 [ %202, %201 ], [ %144, %143 ]
  %222 = icmp eq i64 %221, 1
  br i1 %222, label %223, label %337

223:                                              ; preds = %220
  %224 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 0
  %225 = load i32, i32* %224, align 8, !noalias !2
  %226 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 0
  %227 = load i32, i32* %226, align 8, !alias.scope !2
  %228 = icmp eq i32 %225, %227
  br i1 %228, label %229, label %235

229:                                              ; preds = %223
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 1
  %231 = load i32, i32* %230, align 4, !noalias !2
  %232 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 1
  %233 = load i32, i32* %232, align 4, !alias.scope !2
  %234 = icmp eq i32 %231, %233
  br i1 %234, label %238, label %235

235:                                              ; preds = %229, %223
  %236 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0)) #4, !noalias !2
  %237 = call zeroext i1 @_ZN3jxl5AbortEv() #6, !noalias !2
  unreachable

238:                                              ; preds = %229
  %239 = icmp eq i32 %231, 0
  %240 = icmp eq i32 %225, 0
  %241 = or i1 %240, %239
  br i1 %241, label %281, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %244 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %245 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8, !alias.scope !2
  %247 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 4
  %248 = load i64, i64* %247, align 8, !alias.scope !2
  %249 = load i8*, i8** %243, align 8, !noalias !2
  %250 = ptrtoint i8* %249 to i64
  %251 = and i64 %250, 63
  %252 = icmp eq i64 %251, 0
  call void @llvm.assume(i1 %252) #4, !noalias !2
  %253 = ptrtoint i8* %246 to i64
  %254 = and i64 %253, 63
  %255 = icmp eq i64 %254, 0
  call void @llvm.assume(i1 %255) #4, !noalias !2
  %256 = zext i32 %225 to i64
  %257 = shl nuw nsw i64 %256, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %246, i8* align 64 %249, i64 %257, i1 false) #4, !noalias !2
  %258 = load i32, i32* %230, align 4, !noalias !2
  %259 = icmp ugt i32 %258, 1
  br i1 %259, label %260, label %281

260:                                              ; preds = %242, %260
  %261 = phi i64 [ %277, %260 ], [ 1, %242 ]
  %262 = load i32, i32* %224, align 8, !noalias !2
  %263 = load i8*, i8** %243, align 8, !noalias !2
  %264 = load i64, i64* %244, align 8, !noalias !2
  %265 = mul i64 %264, %261
  %266 = getelementptr inbounds i8, i8* %263, i64 %265
  %267 = ptrtoint i8* %266 to i64
  %268 = and i64 %267, 63
  %269 = icmp eq i64 %268, 0
  call void @llvm.assume(i1 %269) #4, !noalias !2
  %270 = mul i64 %261, %248
  %271 = getelementptr inbounds i8, i8* %246, i64 %270
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #4, !noalias !2
  %275 = zext i32 %262 to i64
  %276 = shl nuw nsw i64 %275, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %271, i8* align 64 %266, i64 %276, i1 false) #4, !noalias !2
  %277 = add nuw nsw i64 %261, 1
  %278 = load i32, i32* %230, align 4, !noalias !2
  %279 = zext i32 %278 to i64
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %260, label %281

281:                                              ; preds = %260, %242, %238
  %282 = phi i32 [ %258, %242 ], [ %231, %238 ], [ %278, %260 ]
  %283 = load i32, i32* %224, align 8, !noalias !5
  %284 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 0
  %285 = load i32, i32* %284, align 8, !alias.scope !5
  %286 = icmp eq i32 %283, %285
  br i1 %286, label %287, label %291

287:                                              ; preds = %281
  %288 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 1
  %289 = load i32, i32* %288, align 4, !alias.scope !5
  %290 = icmp eq i32 %282, %289
  br i1 %290, label %294, label %291

291:                                              ; preds = %287, %281
  %292 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0)) #4, !noalias !5
  %293 = call zeroext i1 @_ZN3jxl5AbortEv() #6, !noalias !5
  unreachable

294:                                              ; preds = %287
  %295 = icmp eq i32 %282, 0
  %296 = icmp eq i32 %283, 0
  %297 = or i1 %296, %295
  br i1 %297, label %337, label %298

298:                                              ; preds = %294
  %299 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %301 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %302 = load i8*, i8** %301, align 8, !alias.scope !5
  %303 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 4
  %304 = load i64, i64* %303, align 8, !alias.scope !5
  %305 = load i8*, i8** %299, align 8, !noalias !5
  %306 = ptrtoint i8* %305 to i64
  %307 = and i64 %306, 63
  %308 = icmp eq i64 %307, 0
  call void @llvm.assume(i1 %308) #4, !noalias !5
  %309 = ptrtoint i8* %302 to i64
  %310 = and i64 %309, 63
  %311 = icmp eq i64 %310, 0
  call void @llvm.assume(i1 %311) #4, !noalias !5
  %312 = zext i32 %283 to i64
  %313 = shl nuw nsw i64 %312, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %302, i8* align 64 %305, i64 %313, i1 false) #4, !noalias !5
  %314 = load i32, i32* %230, align 4, !noalias !5
  %315 = icmp ugt i32 %314, 1
  br i1 %315, label %316, label %337

316:                                              ; preds = %298, %316
  %317 = phi i64 [ %333, %316 ], [ 1, %298 ]
  %318 = load i32, i32* %224, align 8, !noalias !5
  %319 = load i8*, i8** %299, align 8, !noalias !5
  %320 = load i64, i64* %300, align 8, !noalias !5
  %321 = mul i64 %320, %317
  %322 = getelementptr inbounds i8, i8* %319, i64 %321
  %323 = ptrtoint i8* %322 to i64
  %324 = and i64 %323, 63
  %325 = icmp eq i64 %324, 0
  call void @llvm.assume(i1 %325) #4, !noalias !5
  %326 = mul i64 %317, %304
  %327 = getelementptr inbounds i8, i8* %302, i64 %326
  %328 = ptrtoint i8* %327 to i64
  %329 = and i64 %328, 63
  %330 = icmp eq i64 %329, 0
  call void @llvm.assume(i1 %330) #4, !noalias !5
  %331 = zext i32 %318 to i64
  %332 = shl nuw nsw i64 %331, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %327, i8* align 64 %322, i64 %332, i1 false) #4, !noalias !5
  %333 = add nuw nsw i64 %317, 1
  %334 = load i32, i32* %230, align 4, !noalias !5
  %335 = zext i32 %334 to i64
  %336 = icmp ult i64 %333, %335
  br i1 %336, label %316, label %337

337:                                              ; preds = %316, %298, %294, %220
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %11, %"class.jxl::Image3"* nonnull dereferenceable(96) %37, %"struct.jxl::ColorEncoding"* dereferenceable(152) %4) #4
  br i1 %5, label %338, label %432

338:                                              ; preds = %337
  br i1 %108, label %339, label %382

339:                                              ; preds = %338
  %340 = load i64, i64* %30, align 8
  %341 = icmp eq i64 %340, 32
  br i1 %341, label %342, label %432

342:                                              ; preds = %339
  %343 = trunc i64 %3 to i32
  %344 = bitcast %class.anon.94* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %344) #4
  %345 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 0
  store %class.anon* %40, %class.anon** %345, align 8
  %346 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 1
  store i64* %34, i64** %346, align 8
  %347 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 2
  store i64* %31, i64** %347, align 8
  %348 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 3
  store i64* %30, i64** %348, align 8
  %349 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 4
  store %"class.jxl::Plane"* %38, %"class.jxl::Plane"** %349, align 8
  %350 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 5
  store i8* %35, i8** %350, align 8
  %351 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 6
  store i64* %29, i64** %351, align 8
  %352 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 7
  store i8** %36, i8*** %352, align 8
  %353 = getelementptr inbounds %class.anon.94, %class.anon.94* %46, i64 0, i32 8
  store i64* %33, i64** %353, align 8
  %354 = bitcast double* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %354) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %23, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), double* nonnull %23) #4
  %355 = icmp eq %"class.jxl::ThreadPool"* %10, null
  br i1 %355, label %356, label %367

356:                                              ; preds = %342
  %357 = bitcast %"class.jxl::ThreadPool"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %357) #4
  %358 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 0
  %359 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %358, align 8
  %360 = bitcast i8** %359 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %24, %"class.jxl::ThreadPool"** %360, align 8
  %361 = icmp eq i32 %343, 0
  br i1 %361, label %378, label %362

362:                                              ; preds = %356
  %363 = bitcast %"class.jxl::ThreadPool::RunCallState.97"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %363) #4
  %364 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.97", %"class.jxl::ThreadPool::RunCallState.97"* %21, i64 0, i32 0
  %365 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.97", %"class.jxl::ThreadPool::RunCallState.97"* %21, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %364, align 8
  store %class.anon.94* %46, %class.anon.94** %365, align 8
  %366 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %357, i8* nonnull %363, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %343) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %363) #4
  br label %378

367:                                              ; preds = %342
  %368 = icmp eq i32 %343, 0
  br i1 %368, label %380, label %369

369:                                              ; preds = %367
  %370 = bitcast %"class.jxl::ThreadPool::RunCallState.97"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %370) #4
  %371 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.97", %"class.jxl::ThreadPool::RunCallState.97"* %22, i64 0, i32 0
  %372 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.97", %"class.jxl::ThreadPool::RunCallState.97"* %22, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %371, align 8
  store %class.anon.94* %46, %class.anon.94** %372, align 8
  %373 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %374 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %373, align 8
  %375 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  %376 = load i8*, i8** %375, align 8
  %377 = call i32 %374(i8* %376, i8* nonnull %370, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %343) #4
  br label %378

378:                                              ; preds = %356, %362, %369
  %379 = phi i8* [ %370, %369 ], [ %357, %362 ], [ %357, %356 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %379) #4
  br label %380

380:                                              ; preds = %378, %367
  %381 = load double, double* %23, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), double %381) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %354) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %344) #4
  br label %431

382:                                              ; preds = %338
  %383 = bitcast float* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %383) #4
  %384 = load i64, i64* %30, align 8
  %385 = shl nsw i64 -1, %384
  %386 = xor i64 %385, -1
  %387 = uitofp i64 %386 to double
  %388 = fdiv double 1.000000e+00, %387
  %389 = fptrunc double %388 to float
  store float %389, float* %47, align 4
  %390 = trunc i64 %3 to i32
  %391 = bitcast %class.anon.95* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %391) #4
  %392 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 0
  store %class.anon* %40, %class.anon** %392, align 8
  %393 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 1
  store i64* %34, i64** %393, align 8
  %394 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 2
  store i64* %31, i64** %394, align 8
  %395 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 3
  store i64* %32, i64** %395, align 8
  %396 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 4
  store %"class.jxl::Plane"* %38, %"class.jxl::Plane"** %396, align 8
  %397 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 5
  store i64* %30, i64** %397, align 8
  %398 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 6
  store i8** %36, i8*** %398, align 8
  %399 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 7
  store float* %47, float** %399, align 8
  %400 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 8
  store i64* %29, i64** %400, align 8
  %401 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 9
  store i64* %33, i64** %401, align 8
  %402 = getelementptr inbounds %class.anon.95, %class.anon.95* %48, i64 0, i32 10
  store i8* %35, i8** %402, align 8
  %403 = bitcast double* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %403) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %27, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), double* nonnull %27) #4
  %404 = icmp eq %"class.jxl::ThreadPool"* %10, null
  br i1 %404, label %405, label %416

405:                                              ; preds = %382
  %406 = bitcast %"class.jxl::ThreadPool"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %406) #4
  %407 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %28, i64 0, i32 0
  %408 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %28, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %407, align 8
  %409 = bitcast i8** %408 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %28, %"class.jxl::ThreadPool"** %409, align 8
  %410 = icmp eq i32 %390, 0
  br i1 %410, label %427, label %411

411:                                              ; preds = %405
  %412 = bitcast %"class.jxl::ThreadPool::RunCallState.98"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %412) #4
  %413 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.98", %"class.jxl::ThreadPool::RunCallState.98"* %25, i64 0, i32 0
  %414 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.98", %"class.jxl::ThreadPool::RunCallState.98"* %25, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %413, align 8
  store %class.anon.95* %48, %class.anon.95** %414, align 8
  %415 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %406, i8* nonnull %412, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %390) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %412) #4
  br label %427

416:                                              ; preds = %382
  %417 = icmp eq i32 %390, 0
  br i1 %417, label %429, label %418

418:                                              ; preds = %416
  %419 = bitcast %"class.jxl::ThreadPool::RunCallState.98"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %419) #4
  %420 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.98", %"class.jxl::ThreadPool::RunCallState.98"* %26, i64 0, i32 0
  %421 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.98", %"class.jxl::ThreadPool::RunCallState.98"* %26, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %420, align 8
  store %class.anon.95* %48, %class.anon.95** %421, align 8
  %422 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %423 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %422, align 8
  %424 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  %425 = load i8*, i8** %424, align 8
  %426 = call i32 %423(i8* %425, i8* nonnull %419, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %390) #4
  br label %427

427:                                              ; preds = %405, %411, %418
  %428 = phi i8* [ %419, %418 ], [ %406, %411 ], [ %406, %405 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %428) #4
  br label %429

429:                                              ; preds = %427, %416
  %430 = load double, double* %27, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), double %430) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %403) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %391) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %383) #4
  br label %431

431:                                              ; preds = %429, %380
  call void @_ZN3jxl11ImageBundle8SetAlphaEONS_5PlaneIfEEb(%"class.jxl::ImageBundle"* %11, %"class.jxl::Plane"* nonnull dereferenceable(32) %38, i1 zeroext %6) #4
  br label %432

432:                                              ; preds = %337, %431, %339
  %433 = phi i32 [ 1, %339 ], [ 0, %431 ], [ 0, %337 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #4
  %434 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %435 = icmp eq i8* %434, null
  br i1 %435, label %437, label %436

436:                                              ; preds = %432
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %434) #4
  br label %437

437:                                              ; preds = %432, %436
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %82) #4
  %438 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %439 = load i8*, i8** %438, align 8
  store i8* null, i8** %438, align 8
  %440 = icmp eq i8* %439, null
  br i1 %440, label %442, label %441

441:                                              ; preds = %437
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %439) #4
  br label %442

442:                                              ; preds = %441, %437
  %443 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %444 = load i8*, i8** %443, align 8
  store i8* null, i8** %443, align 8
  %445 = icmp eq i8* %444, null
  br i1 %445, label %447, label %446

446:                                              ; preds = %442
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %444) #4
  br label %447

447:                                              ; preds = %446, %442
  %448 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %449 = load i8*, i8** %448, align 8
  store i8* null, i8** %448, align 8
  %450 = icmp eq i8* %449, null
  br i1 %450, label %452, label %451

451:                                              ; preds = %447
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %449) #4
  br label %452

452:                                              ; preds = %447, %451
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %78) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %35) #4
  br label %453

453:                                              ; preds = %71, %452
  %454 = phi i32 [ %433, %452 ], [ 1, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #4
  br label %455

455:                                              ; preds = %12, %453
  %456 = phi i32 [ %454, %453 ], [ 1, %12 ]
  ret i32 %456
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #2

declare void @_ZN3jxl11ImageBundle8SetAlphaEONS_5PlaneIfEEb(%"class.jxl::ImageBundle"*, %"class.jxl::Plane"* dereferenceable(32), i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19BufferToImageBundleERK14JxlPixelFormatjjPKvmPNS_10ThreadPoolERKNS_13ColorEncodingEPNS_11ImageBundleE(%struct.JxlPixelFormat* nocapture readonly dereferenceable(24), i32, i32, i8*, i64, %"class.jxl::ThreadPool"*, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ImageBundle"*) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  switch i32 %10, label %27 [
    i32 0, label %13
    i32 2, label %11
    i32 3, label %12
  ]

11:                                               ; preds = %8
  br label %13

12:                                               ; preds = %8
  br label %13

13:                                               ; preds = %8, %12, %11
  %14 = phi i64 [ 8, %11 ], [ 16, %12 ], [ 32, %8 ]
  %15 = zext i32 %1 to i64
  %16 = zext i32 %2 to i64
  %17 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 2
  %20 = icmp eq i32 %18, 4
  %21 = or i1 %19, %20
  %22 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = tail call i32 @_ZN3jxl19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPNS_10ThreadPoolEPNS_11ImageBundleE(i8* %3, i64 %4, i64 %15, i64 %16, %"struct.jxl::ColorEncoding"* dereferenceable(152) %6, i1 zeroext %21, i1 zeroext false, i64 %14, i32 %23, i1 zeroext false, %"class.jxl::ThreadPool"* %5, %"class.jxl::ImageBundle"* %7)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %13
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %7) #4
  br label %27

27:                                               ; preds = %13, %8, %26
  %28 = phi i32 [ 0, %26 ], [ 1, %8 ], [ %24, %13 ]
  ret i32 %28
}

declare void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #4
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.92**
  %6 = load %class.anon.92*, %class.anon.92** %5, align 8
  %7 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 0
  %8 = load %class.anon*, %class.anon** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %9, -1
  %17 = add i64 %15, %16
  br label %18

18:                                               ; preds = %13, %3
  %19 = phi i64 [ %17, %13 ], [ %9, %3 ]
  %20 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %22, %9
  %24 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 2
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 3
  %28 = load i64*, i64** %27, align 8
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %26
  %31 = lshr i64 %30, 3
  %32 = add i64 %31, %23
  %33 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 4
  %34 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %33, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %36 = load i64, i64* %35, align 8
  %37 = mul i64 %36, %19
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 %26, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #4
  %43 = getelementptr inbounds i8, i8* %39, i64 %37
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #4
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 5
  %49 = load i8*, i8** %48, align 8
  %50 = load i8, i8* %49, align 1, !range !8
  %51 = icmp eq i8 %50, 0
  %52 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 6
  %53 = load i64*, i64** %52, align 8
  %54 = load i64, i64* %53, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %51, label %60, label %56

56:                                               ; preds = %18
  br i1 %55, label %57, label %99

57:                                               ; preds = %56
  %58 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 7
  %59 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 8
  br label %64

60:                                               ; preds = %18
  br i1 %55, label %61, label %99

61:                                               ; preds = %60
  %62 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 7
  %63 = getelementptr inbounds %class.anon.92, %class.anon.92* %6, i64 0, i32 8
  br label %81

64:                                               ; preds = %64, %57
  %65 = phi i64 [ 0, %57 ], [ %77, %64 ]
  %66 = phi i64 [ %32, %57 ], [ %76, %64 ]
  %67 = load i8**, i8*** %58, align 8
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 %66
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = getelementptr inbounds float, float* %47, i64 %65
  %73 = bitcast float* %72 to i32*
  store i32 %71, i32* %73, align 4
  %74 = load i64*, i64** %59, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %66
  %77 = add nuw i64 %65, 1
  %78 = load i64*, i64** %52, align 8
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %77, %79
  br i1 %80, label %64, label %99

81:                                               ; preds = %81, %61
  %82 = phi i64 [ 0, %61 ], [ %95, %81 ]
  %83 = phi i64 [ %32, %61 ], [ %94, %81 ]
  %84 = load i8**, i8*** %62, align 8
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %83
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 1
  %89 = tail call i32 @llvm.bswap.i32(i32 %88) #4
  %90 = getelementptr inbounds float, float* %47, i64 %82
  %91 = bitcast float* %90 to i32*
  store i32 %89, i32* %91, align 4
  %92 = load i64*, i64** %63, align 8
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %83
  %95 = add nuw i64 %82, 1
  %96 = load i64*, i64** %52, align 8
  %97 = load i64, i64* %96, align 8
  %98 = icmp ult i64 %95, %97
  br i1 %98, label %81, label %99

99:                                               ; preds = %64, %81, %56, %60
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #5

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #4
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.93**
  %6 = load %class.anon.93*, %class.anon.93** %5, align 8
  %7 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 0
  %8 = load %class.anon*, %class.anon** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %9, -1
  %17 = add i64 %15, %16
  br label %18

18:                                               ; preds = %13, %3
  %19 = phi i64 [ %17, %13 ], [ %9, %3 ]
  %20 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %22, %9
  %24 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 2
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 3
  %28 = load i64*, i64** %27, align 8
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %26
  %31 = add i64 %30, %23
  %32 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 4
  %33 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %32, align 8
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %33, i64 0, i32 0, i64 0, i32 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = mul i64 %35, %19
  %37 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %33, i64 0, i32 0, i64 %26, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #4
  %42 = getelementptr inbounds i8, i8* %38, i64 %36
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #4
  %46 = bitcast i8* %42 to float*
  %47 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 5
  %48 = load i64*, i64** %47, align 8
  %49 = load i64, i64* %48, align 8
  %50 = icmp ult i64 %49, 9
  br i1 %50, label %51, label %178

51:                                               ; preds = %18
  %52 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 6
  %53 = load i8**, i8*** %52, align 8
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 %31
  %56 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 7
  %57 = load float*, float** %56, align 8
  %58 = load float, float* %57, align 4
  %59 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 8
  %60 = load i64*, i64** %59, align 8
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 9
  %63 = load i64*, i64** %62, align 8
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %772, label %66

66:                                               ; preds = %51
  %67 = icmp ugt i64 %61, 7
  %68 = icmp eq i64 %64, 1
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %142

70:                                               ; preds = %66
  %71 = and i64 %61, -8
  %72 = mul i64 %71, %64
  %73 = insertelement <4 x float> undef, float %58, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x float> undef, float %58, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = add i64 %71, -8
  %78 = lshr exact i64 %77, 3
  %79 = add nuw nsw i64 %78, 1
  %80 = and i64 %79, 1
  %81 = icmp eq i64 %77, 0
  br i1 %81, label %121, label %82

82:                                               ; preds = %70
  %83 = sub nuw nsw i64 %79, %80
  br label %84

84:                                               ; preds = %84, %82
  %85 = phi i64 [ 0, %82 ], [ %118, %84 ]
  %86 = phi i64 [ %83, %82 ], [ %119, %84 ]
  %87 = mul i64 %85, %64
  %88 = getelementptr inbounds i8, i8* %55, i64 %87
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1, !noalias !9
  %91 = getelementptr inbounds i8, i8* %88, i64 4
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1, !noalias !9
  %94 = uitofp <4 x i8> %90 to <4 x float>
  %95 = uitofp <4 x i8> %93 to <4 x float>
  %96 = fmul <4 x float> %74, %94
  %97 = fmul <4 x float> %76, %95
  %98 = getelementptr inbounds float, float* %46, i64 %85
  %99 = bitcast float* %98 to <4 x float>*
  store <4 x float> %96, <4 x float>* %99, align 64, !alias.scope !9
  %100 = getelementptr inbounds float, float* %98, i64 4
  %101 = bitcast float* %100 to <4 x float>*
  store <4 x float> %97, <4 x float>* %101, align 16, !alias.scope !9
  %102 = or i64 %85, 8
  %103 = mul i64 %102, %64
  %104 = getelementptr inbounds i8, i8* %55, i64 %103
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1, !noalias !9
  %107 = getelementptr inbounds i8, i8* %104, i64 4
  %108 = bitcast i8* %107 to <4 x i8>*
  %109 = load <4 x i8>, <4 x i8>* %108, align 1, !noalias !9
  %110 = uitofp <4 x i8> %106 to <4 x float>
  %111 = uitofp <4 x i8> %109 to <4 x float>
  %112 = fmul <4 x float> %74, %110
  %113 = fmul <4 x float> %76, %111
  %114 = getelementptr inbounds float, float* %46, i64 %102
  %115 = bitcast float* %114 to <4 x float>*
  store <4 x float> %112, <4 x float>* %115, align 32, !alias.scope !9
  %116 = getelementptr inbounds float, float* %114, i64 4
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %113, <4 x float>* %117, align 16, !alias.scope !9
  %118 = add i64 %85, 16
  %119 = add i64 %86, -2
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %84, !llvm.loop !12

121:                                              ; preds = %84, %70
  %122 = phi i64 [ 0, %70 ], [ %118, %84 ]
  %123 = icmp eq i64 %80, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121
  %125 = mul i64 %122, %64
  %126 = getelementptr inbounds i8, i8* %55, i64 %125
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1, !noalias !9
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1, !noalias !9
  %132 = uitofp <4 x i8> %128 to <4 x float>
  %133 = uitofp <4 x i8> %131 to <4 x float>
  %134 = fmul <4 x float> %74, %132
  %135 = fmul <4 x float> %76, %133
  %136 = getelementptr inbounds float, float* %46, i64 %122
  %137 = bitcast float* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 32, !alias.scope !9
  %138 = getelementptr inbounds float, float* %136, i64 4
  %139 = bitcast float* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 16, !alias.scope !9
  br label %140

140:                                              ; preds = %121, %124
  %141 = icmp eq i64 %61, %71
  br i1 %141, label %772, label %142

142:                                              ; preds = %66, %140
  %143 = phi i64 [ 0, %66 ], [ %71, %140 ]
  %144 = phi i64 [ 0, %66 ], [ %72, %140 ]
  %145 = and i64 %61, 1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %155, label %147

147:                                              ; preds = %142
  %148 = getelementptr inbounds i8, i8* %55, i64 %144
  %149 = load i8, i8* %148, align 1, !noalias !9
  %150 = uitofp i8 %149 to float
  %151 = fmul float %58, %150
  %152 = getelementptr inbounds float, float* %46, i64 %143
  store float %151, float* %152, align 32, !alias.scope !9
  %153 = add i64 %144, %64
  %154 = or i64 %143, 1
  br label %155

155:                                              ; preds = %142, %147
  %156 = phi i64 [ %143, %142 ], [ %154, %147 ]
  %157 = phi i64 [ %144, %142 ], [ %153, %147 ]
  %158 = or i64 %143, 1
  %159 = icmp eq i64 %61, %158
  br i1 %159, label %772, label %160

160:                                              ; preds = %155, %160
  %161 = phi i64 [ %176, %160 ], [ %156, %155 ]
  %162 = phi i64 [ %175, %160 ], [ %157, %155 ]
  %163 = getelementptr inbounds i8, i8* %55, i64 %162
  %164 = load i8, i8* %163, align 1, !noalias !9
  %165 = uitofp i8 %164 to float
  %166 = fmul float %58, %165
  %167 = getelementptr inbounds float, float* %46, i64 %161
  store float %166, float* %167, align 4, !alias.scope !9
  %168 = add i64 %162, %64
  %169 = add nuw i64 %161, 1
  %170 = getelementptr inbounds i8, i8* %55, i64 %168
  %171 = load i8, i8* %170, align 1, !noalias !9
  %172 = uitofp i8 %171 to float
  %173 = fmul float %58, %172
  %174 = getelementptr inbounds float, float* %46, i64 %169
  store float %173, float* %174, align 4, !alias.scope !9
  %175 = add i64 %168, %64
  %176 = add nuw i64 %161, 2
  %177 = icmp eq i64 %176, %61
  br i1 %177, label %772, label %160, !llvm.loop !14

178:                                              ; preds = %18
  %179 = icmp ult i64 %49, 17
  br i1 %179, label %180, label %457

180:                                              ; preds = %178
  %181 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 10
  %182 = load i8*, i8** %181, align 8
  %183 = load i8, i8* %182, align 1, !range !8
  %184 = icmp eq i8 %183, 0
  %185 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 6
  %186 = load i8**, i8*** %185, align 8
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 %31
  %189 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 7
  %190 = load float*, float** %189, align 8
  %191 = load float, float* %190, align 4
  %192 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 8
  %193 = load i64*, i64** %192, align 8
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 9
  %196 = load i64*, i64** %195, align 8
  %197 = load i64, i64* %196, align 8
  %198 = icmp eq i64 %194, 0
  br i1 %184, label %328, label %199

199:                                              ; preds = %180
  br i1 %198, label %772, label %200

200:                                              ; preds = %199
  %201 = icmp ugt i64 %194, 3
  %202 = icmp eq i64 %197, 1
  %203 = and i1 %201, %202
  br i1 %203, label %204, label %274

204:                                              ; preds = %200
  %205 = and i64 %194, -4
  %206 = mul i64 %205, %197
  %207 = insertelement <4 x float> undef, float %191, i32 0
  %208 = shufflevector <4 x float> %207, <4 x float> undef, <4 x i32> zeroinitializer
  %209 = add i64 %205, -4
  %210 = lshr exact i64 %209, 2
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 1
  %213 = icmp eq i64 %209, 0
  br i1 %213, label %253, label %214

214:                                              ; preds = %204
  %215 = sub nuw nsw i64 %211, %212
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %250, %216 ]
  %218 = phi i64 [ %215, %214 ], [ %251, %216 ]
  %219 = mul i64 %217, %197
  %220 = getelementptr inbounds i8, i8* %188, i64 %219
  %221 = bitcast i8* %220 to <4 x i8>*
  %222 = load <4 x i8>, <4 x i8>* %221, align 1, !noalias !15
  %223 = zext <4 x i8> %222 to <4 x i32>
  %224 = getelementptr inbounds i8, i8* %220, i64 1
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 1, !noalias !15
  %227 = zext <4 x i8> %226 to <4 x i32>
  %228 = shl nuw nsw <4 x i32> %227, <i32 8, i32 8, i32 8, i32 8>
  %229 = or <4 x i32> %228, %223
  %230 = uitofp <4 x i32> %229 to <4 x float>
  %231 = fmul <4 x float> %208, %230
  %232 = getelementptr inbounds float, float* %46, i64 %217
  %233 = bitcast float* %232 to <4 x float>*
  store <4 x float> %231, <4 x float>* %233, align 32, !alias.scope !15
  %234 = or i64 %217, 4
  %235 = mul i64 %234, %197
  %236 = getelementptr inbounds i8, i8* %188, i64 %235
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1, !noalias !15
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = getelementptr inbounds i8, i8* %236, i64 1
  %241 = bitcast i8* %240 to <4 x i8>*
  %242 = load <4 x i8>, <4 x i8>* %241, align 1, !noalias !15
  %243 = zext <4 x i8> %242 to <4 x i32>
  %244 = shl nuw nsw <4 x i32> %243, <i32 8, i32 8, i32 8, i32 8>
  %245 = or <4 x i32> %244, %239
  %246 = uitofp <4 x i32> %245 to <4 x float>
  %247 = fmul <4 x float> %208, %246
  %248 = getelementptr inbounds float, float* %46, i64 %234
  %249 = bitcast float* %248 to <4 x float>*
  store <4 x float> %247, <4 x float>* %249, align 16, !alias.scope !15
  %250 = add i64 %217, 8
  %251 = add i64 %218, -2
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %216, !llvm.loop !18

253:                                              ; preds = %216, %204
  %254 = phi i64 [ 0, %204 ], [ %250, %216 ]
  %255 = icmp eq i64 %212, 0
  br i1 %255, label %272, label %256

256:                                              ; preds = %253
  %257 = mul i64 %254, %197
  %258 = getelementptr inbounds i8, i8* %188, i64 %257
  %259 = bitcast i8* %258 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1, !noalias !15
  %261 = zext <4 x i8> %260 to <4 x i32>
  %262 = getelementptr inbounds i8, i8* %258, i64 1
  %263 = bitcast i8* %262 to <4 x i8>*
  %264 = load <4 x i8>, <4 x i8>* %263, align 1, !noalias !15
  %265 = zext <4 x i8> %264 to <4 x i32>
  %266 = shl nuw nsw <4 x i32> %265, <i32 8, i32 8, i32 8, i32 8>
  %267 = or <4 x i32> %266, %261
  %268 = uitofp <4 x i32> %267 to <4 x float>
  %269 = fmul <4 x float> %208, %268
  %270 = getelementptr inbounds float, float* %46, i64 %254
  %271 = bitcast float* %270 to <4 x float>*
  store <4 x float> %269, <4 x float>* %271, align 16, !alias.scope !15
  br label %272

272:                                              ; preds = %253, %256
  %273 = icmp eq i64 %194, %205
  br i1 %273, label %772, label %274

274:                                              ; preds = %200, %272
  %275 = phi i64 [ 0, %200 ], [ %205, %272 ]
  %276 = phi i64 [ 0, %200 ], [ %206, %272 ]
  %277 = and i64 %194, 1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %293, label %279

279:                                              ; preds = %274
  %280 = getelementptr inbounds i8, i8* %188, i64 %276
  %281 = load i8, i8* %280, align 1, !noalias !15
  %282 = zext i8 %281 to i32
  %283 = getelementptr inbounds i8, i8* %280, i64 1
  %284 = load i8, i8* %283, align 1, !noalias !15
  %285 = zext i8 %284 to i32
  %286 = shl nuw nsw i32 %285, 8
  %287 = or i32 %286, %282
  %288 = uitofp i32 %287 to float
  %289 = fmul float %191, %288
  %290 = getelementptr inbounds float, float* %46, i64 %275
  store float %289, float* %290, align 16, !alias.scope !15
  %291 = add i64 %276, %197
  %292 = or i64 %275, 1
  br label %293

293:                                              ; preds = %274, %279
  %294 = phi i64 [ %275, %274 ], [ %292, %279 ]
  %295 = phi i64 [ %276, %274 ], [ %291, %279 ]
  %296 = or i64 %275, 1
  %297 = icmp eq i64 %194, %296
  br i1 %297, label %772, label %298

298:                                              ; preds = %293, %298
  %299 = phi i64 [ %326, %298 ], [ %294, %293 ]
  %300 = phi i64 [ %325, %298 ], [ %295, %293 ]
  %301 = getelementptr inbounds i8, i8* %188, i64 %300
  %302 = load i8, i8* %301, align 1, !noalias !15
  %303 = zext i8 %302 to i32
  %304 = getelementptr inbounds i8, i8* %301, i64 1
  %305 = load i8, i8* %304, align 1, !noalias !15
  %306 = zext i8 %305 to i32
  %307 = shl nuw nsw i32 %306, 8
  %308 = or i32 %307, %303
  %309 = uitofp i32 %308 to float
  %310 = fmul float %191, %309
  %311 = getelementptr inbounds float, float* %46, i64 %299
  store float %310, float* %311, align 4, !alias.scope !15
  %312 = add i64 %300, %197
  %313 = add nuw i64 %299, 1
  %314 = getelementptr inbounds i8, i8* %188, i64 %312
  %315 = load i8, i8* %314, align 1, !noalias !15
  %316 = zext i8 %315 to i32
  %317 = getelementptr inbounds i8, i8* %314, i64 1
  %318 = load i8, i8* %317, align 1, !noalias !15
  %319 = zext i8 %318 to i32
  %320 = shl nuw nsw i32 %319, 8
  %321 = or i32 %320, %316
  %322 = uitofp i32 %321 to float
  %323 = fmul float %191, %322
  %324 = getelementptr inbounds float, float* %46, i64 %313
  store float %323, float* %324, align 4, !alias.scope !15
  %325 = add i64 %312, %197
  %326 = add nuw i64 %299, 2
  %327 = icmp eq i64 %326, %194
  br i1 %327, label %772, label %298, !llvm.loop !19

328:                                              ; preds = %180
  br i1 %198, label %772, label %329

329:                                              ; preds = %328
  %330 = icmp ugt i64 %194, 3
  %331 = icmp eq i64 %197, 1
  %332 = and i1 %330, %331
  br i1 %332, label %333, label %403

333:                                              ; preds = %329
  %334 = and i64 %194, -4
  %335 = mul i64 %334, %197
  %336 = insertelement <4 x float> undef, float %191, i32 0
  %337 = shufflevector <4 x float> %336, <4 x float> undef, <4 x i32> zeroinitializer
  %338 = add i64 %334, -4
  %339 = lshr exact i64 %338, 2
  %340 = add nuw nsw i64 %339, 1
  %341 = and i64 %340, 1
  %342 = icmp eq i64 %338, 0
  br i1 %342, label %382, label %343

343:                                              ; preds = %333
  %344 = sub nuw nsw i64 %340, %341
  br label %345

345:                                              ; preds = %345, %343
  %346 = phi i64 [ 0, %343 ], [ %379, %345 ]
  %347 = phi i64 [ %344, %343 ], [ %380, %345 ]
  %348 = mul i64 %346, %197
  %349 = getelementptr inbounds i8, i8* %188, i64 %348
  %350 = bitcast i8* %349 to <4 x i8>*
  %351 = load <4 x i8>, <4 x i8>* %350, align 1, !noalias !20
  %352 = zext <4 x i8> %351 to <4 x i32>
  %353 = getelementptr inbounds i8, i8* %349, i64 1
  %354 = bitcast i8* %353 to <4 x i8>*
  %355 = load <4 x i8>, <4 x i8>* %354, align 1, !noalias !20
  %356 = zext <4 x i8> %355 to <4 x i32>
  %357 = shl nuw nsw <4 x i32> %352, <i32 8, i32 8, i32 8, i32 8>
  %358 = or <4 x i32> %357, %356
  %359 = uitofp <4 x i32> %358 to <4 x float>
  %360 = fmul <4 x float> %337, %359
  %361 = getelementptr inbounds float, float* %46, i64 %346
  %362 = bitcast float* %361 to <4 x float>*
  store <4 x float> %360, <4 x float>* %362, align 32, !alias.scope !20
  %363 = or i64 %346, 4
  %364 = mul i64 %363, %197
  %365 = getelementptr inbounds i8, i8* %188, i64 %364
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1, !noalias !20
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = getelementptr inbounds i8, i8* %365, i64 1
  %370 = bitcast i8* %369 to <4 x i8>*
  %371 = load <4 x i8>, <4 x i8>* %370, align 1, !noalias !20
  %372 = zext <4 x i8> %371 to <4 x i32>
  %373 = shl nuw nsw <4 x i32> %368, <i32 8, i32 8, i32 8, i32 8>
  %374 = or <4 x i32> %373, %372
  %375 = uitofp <4 x i32> %374 to <4 x float>
  %376 = fmul <4 x float> %337, %375
  %377 = getelementptr inbounds float, float* %46, i64 %363
  %378 = bitcast float* %377 to <4 x float>*
  store <4 x float> %376, <4 x float>* %378, align 16, !alias.scope !20
  %379 = add i64 %346, 8
  %380 = add i64 %347, -2
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %345, !llvm.loop !23

382:                                              ; preds = %345, %333
  %383 = phi i64 [ 0, %333 ], [ %379, %345 ]
  %384 = icmp eq i64 %341, 0
  br i1 %384, label %401, label %385

385:                                              ; preds = %382
  %386 = mul i64 %383, %197
  %387 = getelementptr inbounds i8, i8* %188, i64 %386
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1, !noalias !20
  %390 = zext <4 x i8> %389 to <4 x i32>
  %391 = getelementptr inbounds i8, i8* %387, i64 1
  %392 = bitcast i8* %391 to <4 x i8>*
  %393 = load <4 x i8>, <4 x i8>* %392, align 1, !noalias !20
  %394 = zext <4 x i8> %393 to <4 x i32>
  %395 = shl nuw nsw <4 x i32> %390, <i32 8, i32 8, i32 8, i32 8>
  %396 = or <4 x i32> %395, %394
  %397 = uitofp <4 x i32> %396 to <4 x float>
  %398 = fmul <4 x float> %337, %397
  %399 = getelementptr inbounds float, float* %46, i64 %383
  %400 = bitcast float* %399 to <4 x float>*
  store <4 x float> %398, <4 x float>* %400, align 16, !alias.scope !20
  br label %401

401:                                              ; preds = %382, %385
  %402 = icmp eq i64 %194, %334
  br i1 %402, label %772, label %403

403:                                              ; preds = %329, %401
  %404 = phi i64 [ 0, %329 ], [ %334, %401 ]
  %405 = phi i64 [ 0, %329 ], [ %335, %401 ]
  %406 = and i64 %194, 1
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %422, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds i8, i8* %188, i64 %405
  %410 = load i8, i8* %409, align 1, !noalias !20
  %411 = zext i8 %410 to i32
  %412 = getelementptr inbounds i8, i8* %409, i64 1
  %413 = load i8, i8* %412, align 1, !noalias !20
  %414 = zext i8 %413 to i32
  %415 = shl nuw nsw i32 %411, 8
  %416 = or i32 %415, %414
  %417 = uitofp i32 %416 to float
  %418 = fmul float %191, %417
  %419 = getelementptr inbounds float, float* %46, i64 %404
  store float %418, float* %419, align 16, !alias.scope !20
  %420 = add i64 %405, %197
  %421 = or i64 %404, 1
  br label %422

422:                                              ; preds = %403, %408
  %423 = phi i64 [ %404, %403 ], [ %421, %408 ]
  %424 = phi i64 [ %405, %403 ], [ %420, %408 ]
  %425 = or i64 %404, 1
  %426 = icmp eq i64 %194, %425
  br i1 %426, label %772, label %427

427:                                              ; preds = %422, %427
  %428 = phi i64 [ %455, %427 ], [ %423, %422 ]
  %429 = phi i64 [ %454, %427 ], [ %424, %422 ]
  %430 = getelementptr inbounds i8, i8* %188, i64 %429
  %431 = load i8, i8* %430, align 1, !noalias !20
  %432 = zext i8 %431 to i32
  %433 = getelementptr inbounds i8, i8* %430, i64 1
  %434 = load i8, i8* %433, align 1, !noalias !20
  %435 = zext i8 %434 to i32
  %436 = shl nuw nsw i32 %432, 8
  %437 = or i32 %436, %435
  %438 = uitofp i32 %437 to float
  %439 = fmul float %191, %438
  %440 = getelementptr inbounds float, float* %46, i64 %428
  store float %439, float* %440, align 4, !alias.scope !20
  %441 = add i64 %429, %197
  %442 = add nuw i64 %428, 1
  %443 = getelementptr inbounds i8, i8* %188, i64 %441
  %444 = load i8, i8* %443, align 1, !noalias !20
  %445 = zext i8 %444 to i32
  %446 = getelementptr inbounds i8, i8* %443, i64 1
  %447 = load i8, i8* %446, align 1, !noalias !20
  %448 = zext i8 %447 to i32
  %449 = shl nuw nsw i32 %445, 8
  %450 = or i32 %449, %448
  %451 = uitofp i32 %450 to float
  %452 = fmul float %191, %451
  %453 = getelementptr inbounds float, float* %46, i64 %442
  store float %452, float* %453, align 4, !alias.scope !20
  %454 = add i64 %441, %197
  %455 = add nuw i64 %428, 2
  %456 = icmp eq i64 %455, %194
  br i1 %456, label %772, label %427, !llvm.loop !24

457:                                              ; preds = %178
  %458 = icmp ult i64 %49, 25
  %459 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 10
  %460 = load i8*, i8** %459, align 8
  %461 = load i8, i8* %460, align 1, !range !8
  %462 = icmp ne i8 %461, 0
  %463 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 6
  %464 = load i8**, i8*** %463, align 8
  %465 = load i8*, i8** %464, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 %31
  %467 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 7
  %468 = load float*, float** %467, align 8
  %469 = load float, float* %468, align 4
  %470 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 8
  %471 = load i64*, i64** %470, align 8
  %472 = load i64, i64* %471, align 8
  %473 = getelementptr inbounds %class.anon.93, %class.anon.93* %6, i64 0, i32 9
  %474 = load i64*, i64** %473, align 8
  %475 = load i64, i64* %474, align 8
  %476 = icmp eq i64 %472, 0
  br i1 %458, label %477, label %690

477:                                              ; preds = %457
  br i1 %462, label %478, label %584

478:                                              ; preds = %477
  br i1 %476, label %772, label %479

479:                                              ; preds = %478
  %480 = icmp ugt i64 %472, 3
  %481 = icmp eq i64 %475, 1
  %482 = and i1 %480, %481
  br i1 %482, label %483, label %515

483:                                              ; preds = %479
  %484 = and i64 %472, -4
  %485 = mul i64 %484, %475
  %486 = insertelement <4 x float> undef, float %469, i32 0
  %487 = shufflevector <4 x float> %486, <4 x float> undef, <4 x i32> zeroinitializer
  br label %488

488:                                              ; preds = %488, %483
  %489 = phi i64 [ 0, %483 ], [ %511, %488 ]
  %490 = mul i64 %489, %475
  %491 = getelementptr inbounds i8, i8* %466, i64 %490
  %492 = bitcast i8* %491 to <4 x i8>*
  %493 = load <4 x i8>, <4 x i8>* %492, align 1, !noalias !25
  %494 = zext <4 x i8> %493 to <4 x i32>
  %495 = getelementptr inbounds i8, i8* %491, i64 1
  %496 = bitcast i8* %495 to <4 x i8>*
  %497 = load <4 x i8>, <4 x i8>* %496, align 1, !noalias !25
  %498 = zext <4 x i8> %497 to <4 x i32>
  %499 = getelementptr inbounds i8, i8* %491, i64 2
  %500 = bitcast i8* %499 to <4 x i8>*
  %501 = load <4 x i8>, <4 x i8>* %500, align 1, !noalias !25
  %502 = zext <4 x i8> %501 to <4 x i32>
  %503 = shl nuw nsw <4 x i32> %502, <i32 16, i32 16, i32 16, i32 16>
  %504 = shl nuw nsw <4 x i32> %498, <i32 8, i32 8, i32 8, i32 8>
  %505 = or <4 x i32> %504, %494
  %506 = or <4 x i32> %505, %503
  %507 = uitofp <4 x i32> %506 to <4 x float>
  %508 = fmul <4 x float> %487, %507
  %509 = getelementptr inbounds float, float* %46, i64 %489
  %510 = bitcast float* %509 to <4 x float>*
  store <4 x float> %508, <4 x float>* %510, align 16, !alias.scope !25
  %511 = add i64 %489, 4
  %512 = icmp eq i64 %511, %484
  br i1 %512, label %513, label %488, !llvm.loop !28

513:                                              ; preds = %488
  %514 = icmp eq i64 %472, %484
  br i1 %514, label %772, label %515

515:                                              ; preds = %479, %513
  %516 = phi i64 [ 0, %479 ], [ %484, %513 ]
  %517 = phi i64 [ 0, %479 ], [ %485, %513 ]
  %518 = and i64 %472, 1
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %539, label %520

520:                                              ; preds = %515
  %521 = getelementptr inbounds i8, i8* %466, i64 %517
  %522 = load i8, i8* %521, align 1, !noalias !25
  %523 = zext i8 %522 to i32
  %524 = getelementptr inbounds i8, i8* %521, i64 1
  %525 = load i8, i8* %524, align 1, !noalias !25
  %526 = zext i8 %525 to i32
  %527 = getelementptr inbounds i8, i8* %521, i64 2
  %528 = load i8, i8* %527, align 1, !noalias !25
  %529 = zext i8 %528 to i32
  %530 = shl nuw nsw i32 %529, 16
  %531 = shl nuw nsw i32 %526, 8
  %532 = or i32 %531, %523
  %533 = or i32 %532, %530
  %534 = uitofp i32 %533 to float
  %535 = fmul float %469, %534
  %536 = getelementptr inbounds float, float* %46, i64 %516
  store float %535, float* %536, align 16, !alias.scope !25
  %537 = add i64 %517, %475
  %538 = or i64 %516, 1
  br label %539

539:                                              ; preds = %515, %520
  %540 = phi i64 [ %516, %515 ], [ %538, %520 ]
  %541 = phi i64 [ %517, %515 ], [ %537, %520 ]
  %542 = or i64 %516, 1
  %543 = icmp eq i64 %472, %542
  br i1 %543, label %772, label %544

544:                                              ; preds = %539, %544
  %545 = phi i64 [ %582, %544 ], [ %540, %539 ]
  %546 = phi i64 [ %581, %544 ], [ %541, %539 ]
  %547 = getelementptr inbounds i8, i8* %466, i64 %546
  %548 = load i8, i8* %547, align 1, !noalias !25
  %549 = zext i8 %548 to i32
  %550 = getelementptr inbounds i8, i8* %547, i64 1
  %551 = load i8, i8* %550, align 1, !noalias !25
  %552 = zext i8 %551 to i32
  %553 = getelementptr inbounds i8, i8* %547, i64 2
  %554 = load i8, i8* %553, align 1, !noalias !25
  %555 = zext i8 %554 to i32
  %556 = shl nuw nsw i32 %555, 16
  %557 = shl nuw nsw i32 %552, 8
  %558 = or i32 %557, %549
  %559 = or i32 %558, %556
  %560 = uitofp i32 %559 to float
  %561 = fmul float %469, %560
  %562 = getelementptr inbounds float, float* %46, i64 %545
  store float %561, float* %562, align 4, !alias.scope !25
  %563 = add i64 %546, %475
  %564 = add nuw i64 %545, 1
  %565 = getelementptr inbounds i8, i8* %466, i64 %563
  %566 = load i8, i8* %565, align 1, !noalias !25
  %567 = zext i8 %566 to i32
  %568 = getelementptr inbounds i8, i8* %565, i64 1
  %569 = load i8, i8* %568, align 1, !noalias !25
  %570 = zext i8 %569 to i32
  %571 = getelementptr inbounds i8, i8* %565, i64 2
  %572 = load i8, i8* %571, align 1, !noalias !25
  %573 = zext i8 %572 to i32
  %574 = shl nuw nsw i32 %573, 16
  %575 = shl nuw nsw i32 %570, 8
  %576 = or i32 %575, %567
  %577 = or i32 %576, %574
  %578 = uitofp i32 %577 to float
  %579 = fmul float %469, %578
  %580 = getelementptr inbounds float, float* %46, i64 %564
  store float %579, float* %580, align 4, !alias.scope !25
  %581 = add i64 %563, %475
  %582 = add nuw i64 %545, 2
  %583 = icmp eq i64 %582, %472
  br i1 %583, label %772, label %544, !llvm.loop !29

584:                                              ; preds = %477
  br i1 %476, label %772, label %585

585:                                              ; preds = %584
  %586 = icmp ugt i64 %472, 3
  %587 = icmp eq i64 %475, 1
  %588 = and i1 %586, %587
  br i1 %588, label %589, label %621

589:                                              ; preds = %585
  %590 = and i64 %472, -4
  %591 = mul i64 %590, %475
  %592 = insertelement <4 x float> undef, float %469, i32 0
  %593 = shufflevector <4 x float> %592, <4 x float> undef, <4 x i32> zeroinitializer
  br label %594

594:                                              ; preds = %594, %589
  %595 = phi i64 [ 0, %589 ], [ %617, %594 ]
  %596 = mul i64 %595, %475
  %597 = getelementptr inbounds i8, i8* %466, i64 %596
  %598 = bitcast i8* %597 to <4 x i8>*
  %599 = load <4 x i8>, <4 x i8>* %598, align 1, !noalias !30
  %600 = zext <4 x i8> %599 to <4 x i32>
  %601 = getelementptr inbounds i8, i8* %597, i64 1
  %602 = bitcast i8* %601 to <4 x i8>*
  %603 = load <4 x i8>, <4 x i8>* %602, align 1, !noalias !30
  %604 = zext <4 x i8> %603 to <4 x i32>
  %605 = getelementptr inbounds i8, i8* %597, i64 2
  %606 = bitcast i8* %605 to <4 x i8>*
  %607 = load <4 x i8>, <4 x i8>* %606, align 1, !noalias !30
  %608 = zext <4 x i8> %607 to <4 x i32>
  %609 = shl nuw nsw <4 x i32> %600, <i32 16, i32 16, i32 16, i32 16>
  %610 = shl nuw nsw <4 x i32> %604, <i32 8, i32 8, i32 8, i32 8>
  %611 = or <4 x i32> %610, %609
  %612 = or <4 x i32> %611, %608
  %613 = uitofp <4 x i32> %612 to <4 x float>
  %614 = fmul <4 x float> %593, %613
  %615 = getelementptr inbounds float, float* %46, i64 %595
  %616 = bitcast float* %615 to <4 x float>*
  store <4 x float> %614, <4 x float>* %616, align 16, !alias.scope !30
  %617 = add i64 %595, 4
  %618 = icmp eq i64 %617, %590
  br i1 %618, label %619, label %594, !llvm.loop !33

619:                                              ; preds = %594
  %620 = icmp eq i64 %472, %590
  br i1 %620, label %772, label %621

621:                                              ; preds = %585, %619
  %622 = phi i64 [ 0, %585 ], [ %590, %619 ]
  %623 = phi i64 [ 0, %585 ], [ %591, %619 ]
  %624 = and i64 %472, 1
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %645, label %626

626:                                              ; preds = %621
  %627 = getelementptr inbounds i8, i8* %466, i64 %623
  %628 = load i8, i8* %627, align 1, !noalias !30
  %629 = zext i8 %628 to i32
  %630 = getelementptr inbounds i8, i8* %627, i64 1
  %631 = load i8, i8* %630, align 1, !noalias !30
  %632 = zext i8 %631 to i32
  %633 = getelementptr inbounds i8, i8* %627, i64 2
  %634 = load i8, i8* %633, align 1, !noalias !30
  %635 = zext i8 %634 to i32
  %636 = shl nuw nsw i32 %629, 16
  %637 = shl nuw nsw i32 %632, 8
  %638 = or i32 %637, %636
  %639 = or i32 %638, %635
  %640 = uitofp i32 %639 to float
  %641 = fmul float %469, %640
  %642 = getelementptr inbounds float, float* %46, i64 %622
  store float %641, float* %642, align 16, !alias.scope !30
  %643 = add i64 %623, %475
  %644 = or i64 %622, 1
  br label %645

645:                                              ; preds = %621, %626
  %646 = phi i64 [ %622, %621 ], [ %644, %626 ]
  %647 = phi i64 [ %623, %621 ], [ %643, %626 ]
  %648 = or i64 %622, 1
  %649 = icmp eq i64 %472, %648
  br i1 %649, label %772, label %650

650:                                              ; preds = %645, %650
  %651 = phi i64 [ %688, %650 ], [ %646, %645 ]
  %652 = phi i64 [ %687, %650 ], [ %647, %645 ]
  %653 = getelementptr inbounds i8, i8* %466, i64 %652
  %654 = load i8, i8* %653, align 1, !noalias !30
  %655 = zext i8 %654 to i32
  %656 = getelementptr inbounds i8, i8* %653, i64 1
  %657 = load i8, i8* %656, align 1, !noalias !30
  %658 = zext i8 %657 to i32
  %659 = getelementptr inbounds i8, i8* %653, i64 2
  %660 = load i8, i8* %659, align 1, !noalias !30
  %661 = zext i8 %660 to i32
  %662 = shl nuw nsw i32 %655, 16
  %663 = shl nuw nsw i32 %658, 8
  %664 = or i32 %663, %662
  %665 = or i32 %664, %661
  %666 = uitofp i32 %665 to float
  %667 = fmul float %469, %666
  %668 = getelementptr inbounds float, float* %46, i64 %651
  store float %667, float* %668, align 4, !alias.scope !30
  %669 = add i64 %652, %475
  %670 = add nuw i64 %651, 1
  %671 = getelementptr inbounds i8, i8* %466, i64 %669
  %672 = load i8, i8* %671, align 1, !noalias !30
  %673 = zext i8 %672 to i32
  %674 = getelementptr inbounds i8, i8* %671, i64 1
  %675 = load i8, i8* %674, align 1, !noalias !30
  %676 = zext i8 %675 to i32
  %677 = getelementptr inbounds i8, i8* %671, i64 2
  %678 = load i8, i8* %677, align 1, !noalias !30
  %679 = zext i8 %678 to i32
  %680 = shl nuw nsw i32 %673, 16
  %681 = shl nuw nsw i32 %676, 8
  %682 = or i32 %681, %680
  %683 = or i32 %682, %679
  %684 = uitofp i32 %683 to float
  %685 = fmul float %469, %684
  %686 = getelementptr inbounds float, float* %46, i64 %670
  store float %685, float* %686, align 4, !alias.scope !30
  %687 = add i64 %669, %475
  %688 = add nuw i64 %651, 2
  %689 = icmp eq i64 %688, %472
  br i1 %689, label %772, label %650, !llvm.loop !34

690:                                              ; preds = %457
  br i1 %462, label %691, label %719

691:                                              ; preds = %690
  br i1 %476, label %772, label %692

692:                                              ; preds = %691
  %693 = and i64 %472, 1
  %694 = icmp eq i64 %472, 1
  br i1 %694, label %749, label %695

695:                                              ; preds = %692
  %696 = sub i64 %472, %693
  br label %697

697:                                              ; preds = %697, %695
  %698 = phi i64 [ 0, %695 ], [ %716, %697 ]
  %699 = phi i64 [ 0, %695 ], [ %715, %697 ]
  %700 = phi i64 [ %696, %695 ], [ %717, %697 ]
  %701 = getelementptr inbounds i8, i8* %466, i64 %699
  %702 = bitcast i8* %701 to i32*
  %703 = load i32, i32* %702, align 1, !noalias !35
  %704 = uitofp i32 %703 to float
  %705 = fmul float %469, %704
  %706 = getelementptr inbounds float, float* %46, i64 %698
  store float %705, float* %706, align 8, !alias.scope !35
  %707 = add i64 %699, %475
  %708 = or i64 %698, 1
  %709 = getelementptr inbounds i8, i8* %466, i64 %707
  %710 = bitcast i8* %709 to i32*
  %711 = load i32, i32* %710, align 1, !noalias !35
  %712 = uitofp i32 %711 to float
  %713 = fmul float %469, %712
  %714 = getelementptr inbounds float, float* %46, i64 %708
  store float %713, float* %714, align 4, !alias.scope !35
  %715 = add i64 %707, %475
  %716 = add nuw i64 %698, 2
  %717 = add i64 %700, -2
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %749, label %697

719:                                              ; preds = %690
  br i1 %476, label %772, label %720

720:                                              ; preds = %719
  %721 = and i64 %472, 1
  %722 = icmp eq i64 %472, 1
  br i1 %722, label %760, label %723

723:                                              ; preds = %720
  %724 = sub i64 %472, %721
  br label %725

725:                                              ; preds = %725, %723
  %726 = phi i64 [ 0, %723 ], [ %746, %725 ]
  %727 = phi i64 [ 0, %723 ], [ %745, %725 ]
  %728 = phi i64 [ %724, %723 ], [ %747, %725 ]
  %729 = getelementptr inbounds i8, i8* %466, i64 %727
  %730 = bitcast i8* %729 to i32*
  %731 = load i32, i32* %730, align 1, !noalias !38
  %732 = tail call i32 @llvm.bswap.i32(i32 %731) #4
  %733 = uitofp i32 %732 to float
  %734 = fmul float %469, %733
  %735 = getelementptr inbounds float, float* %46, i64 %726
  store float %734, float* %735, align 8, !alias.scope !38
  %736 = add i64 %727, %475
  %737 = or i64 %726, 1
  %738 = getelementptr inbounds i8, i8* %466, i64 %736
  %739 = bitcast i8* %738 to i32*
  %740 = load i32, i32* %739, align 1, !noalias !38
  %741 = tail call i32 @llvm.bswap.i32(i32 %740) #4
  %742 = uitofp i32 %741 to float
  %743 = fmul float %469, %742
  %744 = getelementptr inbounds float, float* %46, i64 %737
  store float %743, float* %744, align 4, !alias.scope !38
  %745 = add i64 %736, %475
  %746 = add nuw i64 %726, 2
  %747 = add i64 %728, -2
  %748 = icmp eq i64 %747, 0
  br i1 %748, label %760, label %725

749:                                              ; preds = %697, %692
  %750 = phi i64 [ 0, %692 ], [ %716, %697 ]
  %751 = phi i64 [ 0, %692 ], [ %715, %697 ]
  %752 = icmp eq i64 %693, 0
  br i1 %752, label %772, label %753

753:                                              ; preds = %749
  %754 = getelementptr inbounds i8, i8* %466, i64 %751
  %755 = bitcast i8* %754 to i32*
  %756 = load i32, i32* %755, align 1, !noalias !35
  %757 = uitofp i32 %756 to float
  %758 = fmul float %469, %757
  %759 = getelementptr inbounds float, float* %46, i64 %750
  store float %758, float* %759, align 4, !alias.scope !35
  br label %772

760:                                              ; preds = %725, %720
  %761 = phi i64 [ 0, %720 ], [ %746, %725 ]
  %762 = phi i64 [ 0, %720 ], [ %745, %725 ]
  %763 = icmp eq i64 %721, 0
  br i1 %763, label %772, label %764

764:                                              ; preds = %760
  %765 = getelementptr inbounds i8, i8* %466, i64 %762
  %766 = bitcast i8* %765 to i32*
  %767 = load i32, i32* %766, align 1, !noalias !38
  %768 = tail call i32 @llvm.bswap.i32(i32 %767) #4
  %769 = uitofp i32 %768 to float
  %770 = fmul float %469, %769
  %771 = getelementptr inbounds float, float* %46, i64 %761
  store float %770, float* %771, align 4, !alias.scope !38
  br label %772

772:                                              ; preds = %764, %760, %753, %749, %645, %650, %539, %544, %293, %298, %422, %427, %155, %160, %619, %513, %272, %401, %140, %51, %199, %328, %478, %584, %691, %719
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #4
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.94**
  %6 = load %class.anon.94*, %class.anon.94** %5, align 8
  %7 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 0
  %8 = load %class.anon*, %class.anon** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %9, -1
  %17 = add i64 %15, %16
  br label %18

18:                                               ; preds = %13, %3
  %19 = phi i64 [ %17, %13 ], [ %9, %3 ]
  %20 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %22, %9
  %24 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 2
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 3
  %28 = load i64*, i64** %27, align 8
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %26
  %31 = lshr i64 %30, 3
  %32 = add i64 %31, %23
  %33 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 4
  %34 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %33, align 8
  %35 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %34, i64 0, i32 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, %19
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #4
  %44 = bitcast i8* %40 to float*
  %45 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 5
  %46 = load i8*, i8** %45, align 8
  %47 = load i8, i8* %46, align 1, !range !8
  %48 = icmp eq i8 %47, 0
  %49 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 6
  %50 = load i64*, i64** %49, align 8
  %51 = load i64, i64* %50, align 8
  %52 = icmp ne i64 %51, 0
  br i1 %48, label %57, label %53

53:                                               ; preds = %18
  br i1 %52, label %54, label %96

54:                                               ; preds = %53
  %55 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 7
  %56 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 8
  br label %61

57:                                               ; preds = %18
  br i1 %52, label %58, label %96

58:                                               ; preds = %57
  %59 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 7
  %60 = getelementptr inbounds %class.anon.94, %class.anon.94* %6, i64 0, i32 8
  br label %78

61:                                               ; preds = %61, %54
  %62 = phi i64 [ 0, %54 ], [ %74, %61 ]
  %63 = phi i64 [ %32, %54 ], [ %73, %61 ]
  %64 = load i8**, i8*** %55, align 8
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %63
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = getelementptr inbounds float, float* %44, i64 %62
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = load i64*, i64** %56, align 8
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, %63
  %74 = add nuw i64 %62, 1
  %75 = load i64*, i64** %49, align 8
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %74, %76
  br i1 %77, label %61, label %96

78:                                               ; preds = %78, %58
  %79 = phi i64 [ 0, %58 ], [ %92, %78 ]
  %80 = phi i64 [ %32, %58 ], [ %91, %78 ]
  %81 = load i8**, i8*** %59, align 8
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 %80
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 1
  %86 = tail call i32 @llvm.bswap.i32(i32 %85) #4
  %87 = getelementptr inbounds float, float* %44, i64 %79
  %88 = bitcast float* %87 to i32*
  store i32 %86, i32* %88, align 4
  %89 = load i64*, i64** %60, align 8
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, %80
  %92 = add nuw i64 %79, 1
  %93 = load i64*, i64** %49, align 8
  %94 = load i64, i64* %93, align 8
  %95 = icmp ult i64 %92, %94
  br i1 %95, label %78, label %96

96:                                               ; preds = %61, %78, %53, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #4
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ConvertFromExternalENS_4SpanIKhEEmmRKNS_13ColorEncodingEbbm13JxlEndiannessbPS0_PNS_11ImageBundleEE3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.95**
  %6 = load %class.anon.95*, %class.anon.95** %5, align 8
  %7 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 0
  %8 = load %class.anon*, %class.anon** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.anon, %class.anon* %8, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %9, -1
  %17 = add i64 %15, %16
  br label %18

18:                                               ; preds = %13, %3
  %19 = phi i64 [ %17, %13 ], [ %9, %3 ]
  %20 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %22, %9
  %24 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 2
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 3
  %28 = load i64*, i64** %27, align 8
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %26
  %31 = add i64 %30, %23
  %32 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 4
  %33 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %32, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %19
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #4
  %43 = bitcast i8* %39 to float*
  %44 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 5
  %45 = load i64*, i64** %44, align 8
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %46, 9
  br i1 %47, label %48, label %175

48:                                               ; preds = %18
  %49 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 6
  %50 = load i8**, i8*** %49, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %31
  %53 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 7
  %54 = load float*, float** %53, align 8
  %55 = load float, float* %54, align 4
  %56 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 8
  %57 = load i64*, i64** %56, align 8
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 9
  %60 = load i64*, i64** %59, align 8
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %58, 0
  br i1 %62, label %769, label %63

63:                                               ; preds = %48
  %64 = icmp ugt i64 %58, 7
  %65 = icmp eq i64 %61, 1
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %139

67:                                               ; preds = %63
  %68 = and i64 %58, -8
  %69 = mul i64 %68, %61
  %70 = insertelement <4 x float> undef, float %55, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x float> undef, float %55, i32 0
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> zeroinitializer
  %74 = add i64 %68, -8
  %75 = lshr exact i64 %74, 3
  %76 = add nuw nsw i64 %75, 1
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %74, 0
  br i1 %78, label %118, label %79

79:                                               ; preds = %67
  %80 = sub nuw nsw i64 %76, %77
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %115, %81 ]
  %83 = phi i64 [ %80, %79 ], [ %116, %81 ]
  %84 = mul i64 %82, %61
  %85 = getelementptr inbounds i8, i8* %52, i64 %84
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1, !noalias !41
  %88 = getelementptr inbounds i8, i8* %85, i64 4
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1, !noalias !41
  %91 = uitofp <4 x i8> %87 to <4 x float>
  %92 = uitofp <4 x i8> %90 to <4 x float>
  %93 = fmul <4 x float> %71, %91
  %94 = fmul <4 x float> %73, %92
  %95 = getelementptr inbounds float, float* %43, i64 %82
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %93, <4 x float>* %96, align 64, !alias.scope !41
  %97 = getelementptr inbounds float, float* %95, i64 4
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %94, <4 x float>* %98, align 16, !alias.scope !41
  %99 = or i64 %82, 8
  %100 = mul i64 %99, %61
  %101 = getelementptr inbounds i8, i8* %52, i64 %100
  %102 = bitcast i8* %101 to <4 x i8>*
  %103 = load <4 x i8>, <4 x i8>* %102, align 1, !noalias !41
  %104 = getelementptr inbounds i8, i8* %101, i64 4
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1, !noalias !41
  %107 = uitofp <4 x i8> %103 to <4 x float>
  %108 = uitofp <4 x i8> %106 to <4 x float>
  %109 = fmul <4 x float> %71, %107
  %110 = fmul <4 x float> %73, %108
  %111 = getelementptr inbounds float, float* %43, i64 %99
  %112 = bitcast float* %111 to <4 x float>*
  store <4 x float> %109, <4 x float>* %112, align 32, !alias.scope !41
  %113 = getelementptr inbounds float, float* %111, i64 4
  %114 = bitcast float* %113 to <4 x float>*
  store <4 x float> %110, <4 x float>* %114, align 16, !alias.scope !41
  %115 = add i64 %82, 16
  %116 = add i64 %83, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %81, !llvm.loop !44

118:                                              ; preds = %81, %67
  %119 = phi i64 [ 0, %67 ], [ %115, %81 ]
  %120 = icmp eq i64 %77, 0
  br i1 %120, label %137, label %121

121:                                              ; preds = %118
  %122 = mul i64 %119, %61
  %123 = getelementptr inbounds i8, i8* %52, i64 %122
  %124 = bitcast i8* %123 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 1, !noalias !41
  %126 = getelementptr inbounds i8, i8* %123, i64 4
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1, !noalias !41
  %129 = uitofp <4 x i8> %125 to <4 x float>
  %130 = uitofp <4 x i8> %128 to <4 x float>
  %131 = fmul <4 x float> %71, %129
  %132 = fmul <4 x float> %73, %130
  %133 = getelementptr inbounds float, float* %43, i64 %119
  %134 = bitcast float* %133 to <4 x float>*
  store <4 x float> %131, <4 x float>* %134, align 32, !alias.scope !41
  %135 = getelementptr inbounds float, float* %133, i64 4
  %136 = bitcast float* %135 to <4 x float>*
  store <4 x float> %132, <4 x float>* %136, align 16, !alias.scope !41
  br label %137

137:                                              ; preds = %118, %121
  %138 = icmp eq i64 %58, %68
  br i1 %138, label %769, label %139

139:                                              ; preds = %63, %137
  %140 = phi i64 [ 0, %63 ], [ %68, %137 ]
  %141 = phi i64 [ 0, %63 ], [ %69, %137 ]
  %142 = and i64 %58, 1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %152, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds i8, i8* %52, i64 %141
  %146 = load i8, i8* %145, align 1, !noalias !41
  %147 = uitofp i8 %146 to float
  %148 = fmul float %55, %147
  %149 = getelementptr inbounds float, float* %43, i64 %140
  store float %148, float* %149, align 32, !alias.scope !41
  %150 = add i64 %141, %61
  %151 = or i64 %140, 1
  br label %152

152:                                              ; preds = %139, %144
  %153 = phi i64 [ %140, %139 ], [ %151, %144 ]
  %154 = phi i64 [ %141, %139 ], [ %150, %144 ]
  %155 = or i64 %140, 1
  %156 = icmp eq i64 %58, %155
  br i1 %156, label %769, label %157

157:                                              ; preds = %152, %157
  %158 = phi i64 [ %173, %157 ], [ %153, %152 ]
  %159 = phi i64 [ %172, %157 ], [ %154, %152 ]
  %160 = getelementptr inbounds i8, i8* %52, i64 %159
  %161 = load i8, i8* %160, align 1, !noalias !41
  %162 = uitofp i8 %161 to float
  %163 = fmul float %55, %162
  %164 = getelementptr inbounds float, float* %43, i64 %158
  store float %163, float* %164, align 4, !alias.scope !41
  %165 = add i64 %159, %61
  %166 = add nuw i64 %158, 1
  %167 = getelementptr inbounds i8, i8* %52, i64 %165
  %168 = load i8, i8* %167, align 1, !noalias !41
  %169 = uitofp i8 %168 to float
  %170 = fmul float %55, %169
  %171 = getelementptr inbounds float, float* %43, i64 %166
  store float %170, float* %171, align 4, !alias.scope !41
  %172 = add i64 %165, %61
  %173 = add nuw i64 %158, 2
  %174 = icmp eq i64 %173, %58
  br i1 %174, label %769, label %157, !llvm.loop !45

175:                                              ; preds = %18
  %176 = icmp ult i64 %46, 17
  br i1 %176, label %177, label %454

177:                                              ; preds = %175
  %178 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 10
  %179 = load i8*, i8** %178, align 8
  %180 = load i8, i8* %179, align 1, !range !8
  %181 = icmp eq i8 %180, 0
  %182 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 6
  %183 = load i8**, i8*** %182, align 8
  %184 = load i8*, i8** %183, align 8
  %185 = getelementptr inbounds i8, i8* %184, i64 %31
  %186 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 7
  %187 = load float*, float** %186, align 8
  %188 = load float, float* %187, align 4
  %189 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 8
  %190 = load i64*, i64** %189, align 8
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 9
  %193 = load i64*, i64** %192, align 8
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %191, 0
  br i1 %181, label %325, label %196

196:                                              ; preds = %177
  br i1 %195, label %769, label %197

197:                                              ; preds = %196
  %198 = icmp ugt i64 %191, 3
  %199 = icmp eq i64 %194, 1
  %200 = and i1 %198, %199
  br i1 %200, label %201, label %271

201:                                              ; preds = %197
  %202 = and i64 %191, -4
  %203 = mul i64 %202, %194
  %204 = insertelement <4 x float> undef, float %188, i32 0
  %205 = shufflevector <4 x float> %204, <4 x float> undef, <4 x i32> zeroinitializer
  %206 = add i64 %202, -4
  %207 = lshr exact i64 %206, 2
  %208 = add nuw nsw i64 %207, 1
  %209 = and i64 %208, 1
  %210 = icmp eq i64 %206, 0
  br i1 %210, label %250, label %211

211:                                              ; preds = %201
  %212 = sub nuw nsw i64 %208, %209
  br label %213

213:                                              ; preds = %213, %211
  %214 = phi i64 [ 0, %211 ], [ %247, %213 ]
  %215 = phi i64 [ %212, %211 ], [ %248, %213 ]
  %216 = mul i64 %214, %194
  %217 = getelementptr inbounds i8, i8* %185, i64 %216
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1, !noalias !46
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = getelementptr inbounds i8, i8* %217, i64 1
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1, !noalias !46
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = shl nuw nsw <4 x i32> %224, <i32 8, i32 8, i32 8, i32 8>
  %226 = or <4 x i32> %225, %220
  %227 = uitofp <4 x i32> %226 to <4 x float>
  %228 = fmul <4 x float> %205, %227
  %229 = getelementptr inbounds float, float* %43, i64 %214
  %230 = bitcast float* %229 to <4 x float>*
  store <4 x float> %228, <4 x float>* %230, align 32, !alias.scope !46
  %231 = or i64 %214, 4
  %232 = mul i64 %231, %194
  %233 = getelementptr inbounds i8, i8* %185, i64 %232
  %234 = bitcast i8* %233 to <4 x i8>*
  %235 = load <4 x i8>, <4 x i8>* %234, align 1, !noalias !46
  %236 = zext <4 x i8> %235 to <4 x i32>
  %237 = getelementptr inbounds i8, i8* %233, i64 1
  %238 = bitcast i8* %237 to <4 x i8>*
  %239 = load <4 x i8>, <4 x i8>* %238, align 1, !noalias !46
  %240 = zext <4 x i8> %239 to <4 x i32>
  %241 = shl nuw nsw <4 x i32> %240, <i32 8, i32 8, i32 8, i32 8>
  %242 = or <4 x i32> %241, %236
  %243 = uitofp <4 x i32> %242 to <4 x float>
  %244 = fmul <4 x float> %205, %243
  %245 = getelementptr inbounds float, float* %43, i64 %231
  %246 = bitcast float* %245 to <4 x float>*
  store <4 x float> %244, <4 x float>* %246, align 16, !alias.scope !46
  %247 = add i64 %214, 8
  %248 = add i64 %215, -2
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %250, label %213, !llvm.loop !49

250:                                              ; preds = %213, %201
  %251 = phi i64 [ 0, %201 ], [ %247, %213 ]
  %252 = icmp eq i64 %209, 0
  br i1 %252, label %269, label %253

253:                                              ; preds = %250
  %254 = mul i64 %251, %194
  %255 = getelementptr inbounds i8, i8* %185, i64 %254
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1, !noalias !46
  %258 = zext <4 x i8> %257 to <4 x i32>
  %259 = getelementptr inbounds i8, i8* %255, i64 1
  %260 = bitcast i8* %259 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1, !noalias !46
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = shl nuw nsw <4 x i32> %262, <i32 8, i32 8, i32 8, i32 8>
  %264 = or <4 x i32> %263, %258
  %265 = uitofp <4 x i32> %264 to <4 x float>
  %266 = fmul <4 x float> %205, %265
  %267 = getelementptr inbounds float, float* %43, i64 %251
  %268 = bitcast float* %267 to <4 x float>*
  store <4 x float> %266, <4 x float>* %268, align 16, !alias.scope !46
  br label %269

269:                                              ; preds = %250, %253
  %270 = icmp eq i64 %191, %202
  br i1 %270, label %769, label %271

271:                                              ; preds = %197, %269
  %272 = phi i64 [ 0, %197 ], [ %202, %269 ]
  %273 = phi i64 [ 0, %197 ], [ %203, %269 ]
  %274 = and i64 %191, 1
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %290, label %276

276:                                              ; preds = %271
  %277 = getelementptr inbounds i8, i8* %185, i64 %273
  %278 = load i8, i8* %277, align 1, !noalias !46
  %279 = zext i8 %278 to i32
  %280 = getelementptr inbounds i8, i8* %277, i64 1
  %281 = load i8, i8* %280, align 1, !noalias !46
  %282 = zext i8 %281 to i32
  %283 = shl nuw nsw i32 %282, 8
  %284 = or i32 %283, %279
  %285 = uitofp i32 %284 to float
  %286 = fmul float %188, %285
  %287 = getelementptr inbounds float, float* %43, i64 %272
  store float %286, float* %287, align 16, !alias.scope !46
  %288 = add i64 %273, %194
  %289 = or i64 %272, 1
  br label %290

290:                                              ; preds = %271, %276
  %291 = phi i64 [ %272, %271 ], [ %289, %276 ]
  %292 = phi i64 [ %273, %271 ], [ %288, %276 ]
  %293 = or i64 %272, 1
  %294 = icmp eq i64 %191, %293
  br i1 %294, label %769, label %295

295:                                              ; preds = %290, %295
  %296 = phi i64 [ %323, %295 ], [ %291, %290 ]
  %297 = phi i64 [ %322, %295 ], [ %292, %290 ]
  %298 = getelementptr inbounds i8, i8* %185, i64 %297
  %299 = load i8, i8* %298, align 1, !noalias !46
  %300 = zext i8 %299 to i32
  %301 = getelementptr inbounds i8, i8* %298, i64 1
  %302 = load i8, i8* %301, align 1, !noalias !46
  %303 = zext i8 %302 to i32
  %304 = shl nuw nsw i32 %303, 8
  %305 = or i32 %304, %300
  %306 = uitofp i32 %305 to float
  %307 = fmul float %188, %306
  %308 = getelementptr inbounds float, float* %43, i64 %296
  store float %307, float* %308, align 4, !alias.scope !46
  %309 = add i64 %297, %194
  %310 = add nuw i64 %296, 1
  %311 = getelementptr inbounds i8, i8* %185, i64 %309
  %312 = load i8, i8* %311, align 1, !noalias !46
  %313 = zext i8 %312 to i32
  %314 = getelementptr inbounds i8, i8* %311, i64 1
  %315 = load i8, i8* %314, align 1, !noalias !46
  %316 = zext i8 %315 to i32
  %317 = shl nuw nsw i32 %316, 8
  %318 = or i32 %317, %313
  %319 = uitofp i32 %318 to float
  %320 = fmul float %188, %319
  %321 = getelementptr inbounds float, float* %43, i64 %310
  store float %320, float* %321, align 4, !alias.scope !46
  %322 = add i64 %309, %194
  %323 = add nuw i64 %296, 2
  %324 = icmp eq i64 %323, %191
  br i1 %324, label %769, label %295, !llvm.loop !50

325:                                              ; preds = %177
  br i1 %195, label %769, label %326

326:                                              ; preds = %325
  %327 = icmp ugt i64 %191, 3
  %328 = icmp eq i64 %194, 1
  %329 = and i1 %327, %328
  br i1 %329, label %330, label %400

330:                                              ; preds = %326
  %331 = and i64 %191, -4
  %332 = mul i64 %331, %194
  %333 = insertelement <4 x float> undef, float %188, i32 0
  %334 = shufflevector <4 x float> %333, <4 x float> undef, <4 x i32> zeroinitializer
  %335 = add i64 %331, -4
  %336 = lshr exact i64 %335, 2
  %337 = add nuw nsw i64 %336, 1
  %338 = and i64 %337, 1
  %339 = icmp eq i64 %335, 0
  br i1 %339, label %379, label %340

340:                                              ; preds = %330
  %341 = sub nuw nsw i64 %337, %338
  br label %342

342:                                              ; preds = %342, %340
  %343 = phi i64 [ 0, %340 ], [ %376, %342 ]
  %344 = phi i64 [ %341, %340 ], [ %377, %342 ]
  %345 = mul i64 %343, %194
  %346 = getelementptr inbounds i8, i8* %185, i64 %345
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1, !noalias !51
  %349 = zext <4 x i8> %348 to <4 x i32>
  %350 = getelementptr inbounds i8, i8* %346, i64 1
  %351 = bitcast i8* %350 to <4 x i8>*
  %352 = load <4 x i8>, <4 x i8>* %351, align 1, !noalias !51
  %353 = zext <4 x i8> %352 to <4 x i32>
  %354 = shl nuw nsw <4 x i32> %349, <i32 8, i32 8, i32 8, i32 8>
  %355 = or <4 x i32> %354, %353
  %356 = uitofp <4 x i32> %355 to <4 x float>
  %357 = fmul <4 x float> %334, %356
  %358 = getelementptr inbounds float, float* %43, i64 %343
  %359 = bitcast float* %358 to <4 x float>*
  store <4 x float> %357, <4 x float>* %359, align 32, !alias.scope !51
  %360 = or i64 %343, 4
  %361 = mul i64 %360, %194
  %362 = getelementptr inbounds i8, i8* %185, i64 %361
  %363 = bitcast i8* %362 to <4 x i8>*
  %364 = load <4 x i8>, <4 x i8>* %363, align 1, !noalias !51
  %365 = zext <4 x i8> %364 to <4 x i32>
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1, !noalias !51
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = shl nuw nsw <4 x i32> %365, <i32 8, i32 8, i32 8, i32 8>
  %371 = or <4 x i32> %370, %369
  %372 = uitofp <4 x i32> %371 to <4 x float>
  %373 = fmul <4 x float> %334, %372
  %374 = getelementptr inbounds float, float* %43, i64 %360
  %375 = bitcast float* %374 to <4 x float>*
  store <4 x float> %373, <4 x float>* %375, align 16, !alias.scope !51
  %376 = add i64 %343, 8
  %377 = add i64 %344, -2
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %342, !llvm.loop !54

379:                                              ; preds = %342, %330
  %380 = phi i64 [ 0, %330 ], [ %376, %342 ]
  %381 = icmp eq i64 %338, 0
  br i1 %381, label %398, label %382

382:                                              ; preds = %379
  %383 = mul i64 %380, %194
  %384 = getelementptr inbounds i8, i8* %185, i64 %383
  %385 = bitcast i8* %384 to <4 x i8>*
  %386 = load <4 x i8>, <4 x i8>* %385, align 1, !noalias !51
  %387 = zext <4 x i8> %386 to <4 x i32>
  %388 = getelementptr inbounds i8, i8* %384, i64 1
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1, !noalias !51
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = shl nuw nsw <4 x i32> %387, <i32 8, i32 8, i32 8, i32 8>
  %393 = or <4 x i32> %392, %391
  %394 = uitofp <4 x i32> %393 to <4 x float>
  %395 = fmul <4 x float> %334, %394
  %396 = getelementptr inbounds float, float* %43, i64 %380
  %397 = bitcast float* %396 to <4 x float>*
  store <4 x float> %395, <4 x float>* %397, align 16, !alias.scope !51
  br label %398

398:                                              ; preds = %379, %382
  %399 = icmp eq i64 %191, %331
  br i1 %399, label %769, label %400

400:                                              ; preds = %326, %398
  %401 = phi i64 [ 0, %326 ], [ %331, %398 ]
  %402 = phi i64 [ 0, %326 ], [ %332, %398 ]
  %403 = and i64 %191, 1
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %419, label %405

405:                                              ; preds = %400
  %406 = getelementptr inbounds i8, i8* %185, i64 %402
  %407 = load i8, i8* %406, align 1, !noalias !51
  %408 = zext i8 %407 to i32
  %409 = getelementptr inbounds i8, i8* %406, i64 1
  %410 = load i8, i8* %409, align 1, !noalias !51
  %411 = zext i8 %410 to i32
  %412 = shl nuw nsw i32 %408, 8
  %413 = or i32 %412, %411
  %414 = uitofp i32 %413 to float
  %415 = fmul float %188, %414
  %416 = getelementptr inbounds float, float* %43, i64 %401
  store float %415, float* %416, align 16, !alias.scope !51
  %417 = add i64 %402, %194
  %418 = or i64 %401, 1
  br label %419

419:                                              ; preds = %400, %405
  %420 = phi i64 [ %401, %400 ], [ %418, %405 ]
  %421 = phi i64 [ %402, %400 ], [ %417, %405 ]
  %422 = or i64 %401, 1
  %423 = icmp eq i64 %191, %422
  br i1 %423, label %769, label %424

424:                                              ; preds = %419, %424
  %425 = phi i64 [ %452, %424 ], [ %420, %419 ]
  %426 = phi i64 [ %451, %424 ], [ %421, %419 ]
  %427 = getelementptr inbounds i8, i8* %185, i64 %426
  %428 = load i8, i8* %427, align 1, !noalias !51
  %429 = zext i8 %428 to i32
  %430 = getelementptr inbounds i8, i8* %427, i64 1
  %431 = load i8, i8* %430, align 1, !noalias !51
  %432 = zext i8 %431 to i32
  %433 = shl nuw nsw i32 %429, 8
  %434 = or i32 %433, %432
  %435 = uitofp i32 %434 to float
  %436 = fmul float %188, %435
  %437 = getelementptr inbounds float, float* %43, i64 %425
  store float %436, float* %437, align 4, !alias.scope !51
  %438 = add i64 %426, %194
  %439 = add nuw i64 %425, 1
  %440 = getelementptr inbounds i8, i8* %185, i64 %438
  %441 = load i8, i8* %440, align 1, !noalias !51
  %442 = zext i8 %441 to i32
  %443 = getelementptr inbounds i8, i8* %440, i64 1
  %444 = load i8, i8* %443, align 1, !noalias !51
  %445 = zext i8 %444 to i32
  %446 = shl nuw nsw i32 %442, 8
  %447 = or i32 %446, %445
  %448 = uitofp i32 %447 to float
  %449 = fmul float %188, %448
  %450 = getelementptr inbounds float, float* %43, i64 %439
  store float %449, float* %450, align 4, !alias.scope !51
  %451 = add i64 %438, %194
  %452 = add nuw i64 %425, 2
  %453 = icmp eq i64 %452, %191
  br i1 %453, label %769, label %424, !llvm.loop !55

454:                                              ; preds = %175
  %455 = icmp ult i64 %46, 25
  %456 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 10
  %457 = load i8*, i8** %456, align 8
  %458 = load i8, i8* %457, align 1, !range !8
  %459 = icmp ne i8 %458, 0
  %460 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 6
  %461 = load i8**, i8*** %460, align 8
  %462 = load i8*, i8** %461, align 8
  %463 = getelementptr inbounds i8, i8* %462, i64 %31
  %464 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 7
  %465 = load float*, float** %464, align 8
  %466 = load float, float* %465, align 4
  %467 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 8
  %468 = load i64*, i64** %467, align 8
  %469 = load i64, i64* %468, align 8
  %470 = getelementptr inbounds %class.anon.95, %class.anon.95* %6, i64 0, i32 9
  %471 = load i64*, i64** %470, align 8
  %472 = load i64, i64* %471, align 8
  %473 = icmp eq i64 %469, 0
  br i1 %455, label %474, label %687

474:                                              ; preds = %454
  br i1 %459, label %475, label %581

475:                                              ; preds = %474
  br i1 %473, label %769, label %476

476:                                              ; preds = %475
  %477 = icmp ugt i64 %469, 3
  %478 = icmp eq i64 %472, 1
  %479 = and i1 %477, %478
  br i1 %479, label %480, label %512

480:                                              ; preds = %476
  %481 = and i64 %469, -4
  %482 = mul i64 %481, %472
  %483 = insertelement <4 x float> undef, float %466, i32 0
  %484 = shufflevector <4 x float> %483, <4 x float> undef, <4 x i32> zeroinitializer
  br label %485

485:                                              ; preds = %485, %480
  %486 = phi i64 [ 0, %480 ], [ %508, %485 ]
  %487 = mul i64 %486, %472
  %488 = getelementptr inbounds i8, i8* %463, i64 %487
  %489 = bitcast i8* %488 to <4 x i8>*
  %490 = load <4 x i8>, <4 x i8>* %489, align 1, !noalias !56
  %491 = zext <4 x i8> %490 to <4 x i32>
  %492 = getelementptr inbounds i8, i8* %488, i64 1
  %493 = bitcast i8* %492 to <4 x i8>*
  %494 = load <4 x i8>, <4 x i8>* %493, align 1, !noalias !56
  %495 = zext <4 x i8> %494 to <4 x i32>
  %496 = getelementptr inbounds i8, i8* %488, i64 2
  %497 = bitcast i8* %496 to <4 x i8>*
  %498 = load <4 x i8>, <4 x i8>* %497, align 1, !noalias !56
  %499 = zext <4 x i8> %498 to <4 x i32>
  %500 = shl nuw nsw <4 x i32> %499, <i32 16, i32 16, i32 16, i32 16>
  %501 = shl nuw nsw <4 x i32> %495, <i32 8, i32 8, i32 8, i32 8>
  %502 = or <4 x i32> %501, %491
  %503 = or <4 x i32> %502, %500
  %504 = uitofp <4 x i32> %503 to <4 x float>
  %505 = fmul <4 x float> %484, %504
  %506 = getelementptr inbounds float, float* %43, i64 %486
  %507 = bitcast float* %506 to <4 x float>*
  store <4 x float> %505, <4 x float>* %507, align 16, !alias.scope !56
  %508 = add i64 %486, 4
  %509 = icmp eq i64 %508, %481
  br i1 %509, label %510, label %485, !llvm.loop !59

510:                                              ; preds = %485
  %511 = icmp eq i64 %469, %481
  br i1 %511, label %769, label %512

512:                                              ; preds = %476, %510
  %513 = phi i64 [ 0, %476 ], [ %481, %510 ]
  %514 = phi i64 [ 0, %476 ], [ %482, %510 ]
  %515 = and i64 %469, 1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %536, label %517

517:                                              ; preds = %512
  %518 = getelementptr inbounds i8, i8* %463, i64 %514
  %519 = load i8, i8* %518, align 1, !noalias !56
  %520 = zext i8 %519 to i32
  %521 = getelementptr inbounds i8, i8* %518, i64 1
  %522 = load i8, i8* %521, align 1, !noalias !56
  %523 = zext i8 %522 to i32
  %524 = getelementptr inbounds i8, i8* %518, i64 2
  %525 = load i8, i8* %524, align 1, !noalias !56
  %526 = zext i8 %525 to i32
  %527 = shl nuw nsw i32 %526, 16
  %528 = shl nuw nsw i32 %523, 8
  %529 = or i32 %528, %520
  %530 = or i32 %529, %527
  %531 = uitofp i32 %530 to float
  %532 = fmul float %466, %531
  %533 = getelementptr inbounds float, float* %43, i64 %513
  store float %532, float* %533, align 16, !alias.scope !56
  %534 = add i64 %514, %472
  %535 = or i64 %513, 1
  br label %536

536:                                              ; preds = %512, %517
  %537 = phi i64 [ %513, %512 ], [ %535, %517 ]
  %538 = phi i64 [ %514, %512 ], [ %534, %517 ]
  %539 = or i64 %513, 1
  %540 = icmp eq i64 %469, %539
  br i1 %540, label %769, label %541

541:                                              ; preds = %536, %541
  %542 = phi i64 [ %579, %541 ], [ %537, %536 ]
  %543 = phi i64 [ %578, %541 ], [ %538, %536 ]
  %544 = getelementptr inbounds i8, i8* %463, i64 %543
  %545 = load i8, i8* %544, align 1, !noalias !56
  %546 = zext i8 %545 to i32
  %547 = getelementptr inbounds i8, i8* %544, i64 1
  %548 = load i8, i8* %547, align 1, !noalias !56
  %549 = zext i8 %548 to i32
  %550 = getelementptr inbounds i8, i8* %544, i64 2
  %551 = load i8, i8* %550, align 1, !noalias !56
  %552 = zext i8 %551 to i32
  %553 = shl nuw nsw i32 %552, 16
  %554 = shl nuw nsw i32 %549, 8
  %555 = or i32 %554, %546
  %556 = or i32 %555, %553
  %557 = uitofp i32 %556 to float
  %558 = fmul float %466, %557
  %559 = getelementptr inbounds float, float* %43, i64 %542
  store float %558, float* %559, align 4, !alias.scope !56
  %560 = add i64 %543, %472
  %561 = add nuw i64 %542, 1
  %562 = getelementptr inbounds i8, i8* %463, i64 %560
  %563 = load i8, i8* %562, align 1, !noalias !56
  %564 = zext i8 %563 to i32
  %565 = getelementptr inbounds i8, i8* %562, i64 1
  %566 = load i8, i8* %565, align 1, !noalias !56
  %567 = zext i8 %566 to i32
  %568 = getelementptr inbounds i8, i8* %562, i64 2
  %569 = load i8, i8* %568, align 1, !noalias !56
  %570 = zext i8 %569 to i32
  %571 = shl nuw nsw i32 %570, 16
  %572 = shl nuw nsw i32 %567, 8
  %573 = or i32 %572, %564
  %574 = or i32 %573, %571
  %575 = uitofp i32 %574 to float
  %576 = fmul float %466, %575
  %577 = getelementptr inbounds float, float* %43, i64 %561
  store float %576, float* %577, align 4, !alias.scope !56
  %578 = add i64 %560, %472
  %579 = add nuw i64 %542, 2
  %580 = icmp eq i64 %579, %469
  br i1 %580, label %769, label %541, !llvm.loop !60

581:                                              ; preds = %474
  br i1 %473, label %769, label %582

582:                                              ; preds = %581
  %583 = icmp ugt i64 %469, 3
  %584 = icmp eq i64 %472, 1
  %585 = and i1 %583, %584
  br i1 %585, label %586, label %618

586:                                              ; preds = %582
  %587 = and i64 %469, -4
  %588 = mul i64 %587, %472
  %589 = insertelement <4 x float> undef, float %466, i32 0
  %590 = shufflevector <4 x float> %589, <4 x float> undef, <4 x i32> zeroinitializer
  br label %591

591:                                              ; preds = %591, %586
  %592 = phi i64 [ 0, %586 ], [ %614, %591 ]
  %593 = mul i64 %592, %472
  %594 = getelementptr inbounds i8, i8* %463, i64 %593
  %595 = bitcast i8* %594 to <4 x i8>*
  %596 = load <4 x i8>, <4 x i8>* %595, align 1, !noalias !61
  %597 = zext <4 x i8> %596 to <4 x i32>
  %598 = getelementptr inbounds i8, i8* %594, i64 1
  %599 = bitcast i8* %598 to <4 x i8>*
  %600 = load <4 x i8>, <4 x i8>* %599, align 1, !noalias !61
  %601 = zext <4 x i8> %600 to <4 x i32>
  %602 = getelementptr inbounds i8, i8* %594, i64 2
  %603 = bitcast i8* %602 to <4 x i8>*
  %604 = load <4 x i8>, <4 x i8>* %603, align 1, !noalias !61
  %605 = zext <4 x i8> %604 to <4 x i32>
  %606 = shl nuw nsw <4 x i32> %597, <i32 16, i32 16, i32 16, i32 16>
  %607 = shl nuw nsw <4 x i32> %601, <i32 8, i32 8, i32 8, i32 8>
  %608 = or <4 x i32> %607, %606
  %609 = or <4 x i32> %608, %605
  %610 = uitofp <4 x i32> %609 to <4 x float>
  %611 = fmul <4 x float> %590, %610
  %612 = getelementptr inbounds float, float* %43, i64 %592
  %613 = bitcast float* %612 to <4 x float>*
  store <4 x float> %611, <4 x float>* %613, align 16, !alias.scope !61
  %614 = add i64 %592, 4
  %615 = icmp eq i64 %614, %587
  br i1 %615, label %616, label %591, !llvm.loop !64

616:                                              ; preds = %591
  %617 = icmp eq i64 %469, %587
  br i1 %617, label %769, label %618

618:                                              ; preds = %582, %616
  %619 = phi i64 [ 0, %582 ], [ %587, %616 ]
  %620 = phi i64 [ 0, %582 ], [ %588, %616 ]
  %621 = and i64 %469, 1
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %642, label %623

623:                                              ; preds = %618
  %624 = getelementptr inbounds i8, i8* %463, i64 %620
  %625 = load i8, i8* %624, align 1, !noalias !61
  %626 = zext i8 %625 to i32
  %627 = getelementptr inbounds i8, i8* %624, i64 1
  %628 = load i8, i8* %627, align 1, !noalias !61
  %629 = zext i8 %628 to i32
  %630 = getelementptr inbounds i8, i8* %624, i64 2
  %631 = load i8, i8* %630, align 1, !noalias !61
  %632 = zext i8 %631 to i32
  %633 = shl nuw nsw i32 %626, 16
  %634 = shl nuw nsw i32 %629, 8
  %635 = or i32 %634, %633
  %636 = or i32 %635, %632
  %637 = uitofp i32 %636 to float
  %638 = fmul float %466, %637
  %639 = getelementptr inbounds float, float* %43, i64 %619
  store float %638, float* %639, align 16, !alias.scope !61
  %640 = add i64 %620, %472
  %641 = or i64 %619, 1
  br label %642

642:                                              ; preds = %618, %623
  %643 = phi i64 [ %619, %618 ], [ %641, %623 ]
  %644 = phi i64 [ %620, %618 ], [ %640, %623 ]
  %645 = or i64 %619, 1
  %646 = icmp eq i64 %469, %645
  br i1 %646, label %769, label %647

647:                                              ; preds = %642, %647
  %648 = phi i64 [ %685, %647 ], [ %643, %642 ]
  %649 = phi i64 [ %684, %647 ], [ %644, %642 ]
  %650 = getelementptr inbounds i8, i8* %463, i64 %649
  %651 = load i8, i8* %650, align 1, !noalias !61
  %652 = zext i8 %651 to i32
  %653 = getelementptr inbounds i8, i8* %650, i64 1
  %654 = load i8, i8* %653, align 1, !noalias !61
  %655 = zext i8 %654 to i32
  %656 = getelementptr inbounds i8, i8* %650, i64 2
  %657 = load i8, i8* %656, align 1, !noalias !61
  %658 = zext i8 %657 to i32
  %659 = shl nuw nsw i32 %652, 16
  %660 = shl nuw nsw i32 %655, 8
  %661 = or i32 %660, %659
  %662 = or i32 %661, %658
  %663 = uitofp i32 %662 to float
  %664 = fmul float %466, %663
  %665 = getelementptr inbounds float, float* %43, i64 %648
  store float %664, float* %665, align 4, !alias.scope !61
  %666 = add i64 %649, %472
  %667 = add nuw i64 %648, 1
  %668 = getelementptr inbounds i8, i8* %463, i64 %666
  %669 = load i8, i8* %668, align 1, !noalias !61
  %670 = zext i8 %669 to i32
  %671 = getelementptr inbounds i8, i8* %668, i64 1
  %672 = load i8, i8* %671, align 1, !noalias !61
  %673 = zext i8 %672 to i32
  %674 = getelementptr inbounds i8, i8* %668, i64 2
  %675 = load i8, i8* %674, align 1, !noalias !61
  %676 = zext i8 %675 to i32
  %677 = shl nuw nsw i32 %670, 16
  %678 = shl nuw nsw i32 %673, 8
  %679 = or i32 %678, %677
  %680 = or i32 %679, %676
  %681 = uitofp i32 %680 to float
  %682 = fmul float %466, %681
  %683 = getelementptr inbounds float, float* %43, i64 %667
  store float %682, float* %683, align 4, !alias.scope !61
  %684 = add i64 %666, %472
  %685 = add nuw i64 %648, 2
  %686 = icmp eq i64 %685, %469
  br i1 %686, label %769, label %647, !llvm.loop !65

687:                                              ; preds = %454
  br i1 %459, label %688, label %716

688:                                              ; preds = %687
  br i1 %473, label %769, label %689

689:                                              ; preds = %688
  %690 = and i64 %469, 1
  %691 = icmp eq i64 %469, 1
  br i1 %691, label %746, label %692

692:                                              ; preds = %689
  %693 = sub i64 %469, %690
  br label %694

694:                                              ; preds = %694, %692
  %695 = phi i64 [ 0, %692 ], [ %713, %694 ]
  %696 = phi i64 [ 0, %692 ], [ %712, %694 ]
  %697 = phi i64 [ %693, %692 ], [ %714, %694 ]
  %698 = getelementptr inbounds i8, i8* %463, i64 %696
  %699 = bitcast i8* %698 to i32*
  %700 = load i32, i32* %699, align 1, !noalias !66
  %701 = uitofp i32 %700 to float
  %702 = fmul float %466, %701
  %703 = getelementptr inbounds float, float* %43, i64 %695
  store float %702, float* %703, align 8, !alias.scope !66
  %704 = add i64 %696, %472
  %705 = or i64 %695, 1
  %706 = getelementptr inbounds i8, i8* %463, i64 %704
  %707 = bitcast i8* %706 to i32*
  %708 = load i32, i32* %707, align 1, !noalias !66
  %709 = uitofp i32 %708 to float
  %710 = fmul float %466, %709
  %711 = getelementptr inbounds float, float* %43, i64 %705
  store float %710, float* %711, align 4, !alias.scope !66
  %712 = add i64 %704, %472
  %713 = add nuw i64 %695, 2
  %714 = add i64 %697, -2
  %715 = icmp eq i64 %714, 0
  br i1 %715, label %746, label %694

716:                                              ; preds = %687
  br i1 %473, label %769, label %717

717:                                              ; preds = %716
  %718 = and i64 %469, 1
  %719 = icmp eq i64 %469, 1
  br i1 %719, label %757, label %720

720:                                              ; preds = %717
  %721 = sub i64 %469, %718
  br label %722

722:                                              ; preds = %722, %720
  %723 = phi i64 [ 0, %720 ], [ %743, %722 ]
  %724 = phi i64 [ 0, %720 ], [ %742, %722 ]
  %725 = phi i64 [ %721, %720 ], [ %744, %722 ]
  %726 = getelementptr inbounds i8, i8* %463, i64 %724
  %727 = bitcast i8* %726 to i32*
  %728 = load i32, i32* %727, align 1, !noalias !69
  %729 = tail call i32 @llvm.bswap.i32(i32 %728) #4
  %730 = uitofp i32 %729 to float
  %731 = fmul float %466, %730
  %732 = getelementptr inbounds float, float* %43, i64 %723
  store float %731, float* %732, align 8, !alias.scope !69
  %733 = add i64 %724, %472
  %734 = or i64 %723, 1
  %735 = getelementptr inbounds i8, i8* %463, i64 %733
  %736 = bitcast i8* %735 to i32*
  %737 = load i32, i32* %736, align 1, !noalias !69
  %738 = tail call i32 @llvm.bswap.i32(i32 %737) #4
  %739 = uitofp i32 %738 to float
  %740 = fmul float %466, %739
  %741 = getelementptr inbounds float, float* %43, i64 %734
  store float %740, float* %741, align 4, !alias.scope !69
  %742 = add i64 %733, %472
  %743 = add nuw i64 %723, 2
  %744 = add i64 %725, -2
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %757, label %722

746:                                              ; preds = %694, %689
  %747 = phi i64 [ 0, %689 ], [ %713, %694 ]
  %748 = phi i64 [ 0, %689 ], [ %712, %694 ]
  %749 = icmp eq i64 %690, 0
  br i1 %749, label %769, label %750

750:                                              ; preds = %746
  %751 = getelementptr inbounds i8, i8* %463, i64 %748
  %752 = bitcast i8* %751 to i32*
  %753 = load i32, i32* %752, align 1, !noalias !66
  %754 = uitofp i32 %753 to float
  %755 = fmul float %466, %754
  %756 = getelementptr inbounds float, float* %43, i64 %747
  store float %755, float* %756, align 4, !alias.scope !66
  br label %769

757:                                              ; preds = %722, %717
  %758 = phi i64 [ 0, %717 ], [ %743, %722 ]
  %759 = phi i64 [ 0, %717 ], [ %742, %722 ]
  %760 = icmp eq i64 %718, 0
  br i1 %760, label %769, label %761

761:                                              ; preds = %757
  %762 = getelementptr inbounds i8, i8* %463, i64 %759
  %763 = bitcast i8* %762 to i32*
  %764 = load i32, i32* %763, align 1, !noalias !69
  %765 = tail call i32 @llvm.bswap.i32(i32 %764) #4
  %766 = uitofp i32 %765 to float
  %767 = fmul float %466, %766
  %768 = getelementptr inbounds float, float* %43, i64 %758
  store float %767, float* %768, align 4, !alias.scope !69
  br label %769

769:                                              ; preds = %761, %757, %750, %746, %642, %647, %536, %541, %290, %295, %419, %424, %152, %157, %616, %510, %269, %398, %137, %48, %196, %325, %475, %581, %688, %716
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZNS0_5Load8EPKhEEEEvPfS3_fmm: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZNS0_5Load8EPKhEEEEvPfS3_fmm"}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE16PKhEEEEvPfS3_fmm: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE16PKhEEEEvPfS3_fmm"}
!18 = distinct !{!18, !13}
!19 = distinct !{!19, !13}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE16PKhEEEEvPfS3_fmm: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE16PKhEEEEvPfS3_fmm"}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !13}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE24PKhEEEEvPfS3_fmm: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE24PKhEEEEvPfS3_fmm"}
!28 = distinct !{!28, !13}
!29 = distinct !{!29, !13}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE24PKhEEEEvPfS3_fmm: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE24PKhEEEEvPfS3_fmm"}
!33 = distinct !{!33, !13}
!34 = distinct !{!34, !13}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE32PKhEEEEvPfS3_fmm: argument 0"}
!37 = distinct !{!37, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE32PKhEEEEvPfS3_fmm"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE32PKhEEEEvPfS3_fmm: argument 0"}
!40 = distinct !{!40, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE32PKhEEEEvPfS3_fmm"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZNS0_5Load8EPKhEEEEvPfS3_fmm: argument 0"}
!43 = distinct !{!43, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZNS0_5Load8EPKhEEEEvPfS3_fmm"}
!44 = distinct !{!44, !13}
!45 = distinct !{!45, !13}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE16PKhEEEEvPfS3_fmm: argument 0"}
!48 = distinct !{!48, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE16PKhEEEEvPfS3_fmm"}
!49 = distinct !{!49, !13}
!50 = distinct !{!50, !13}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE16PKhEEEEvPfS3_fmm: argument 0"}
!53 = distinct !{!53, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE16PKhEEEEvPfS3_fmm"}
!54 = distinct !{!54, !13}
!55 = distinct !{!55, !13}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE24PKhEEEEvPfS3_fmm: argument 0"}
!58 = distinct !{!58, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE24PKhEEEEvPfS3_fmm"}
!59 = distinct !{!59, !13}
!60 = distinct !{!60, !13}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE24PKhEEEEvPfS3_fmm: argument 0"}
!63 = distinct !{!63, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE24PKhEEEEvPfS3_fmm"}
!64 = distinct !{!64, !13}
!65 = distinct !{!65, !13}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE32PKhEEEEvPfS3_fmm: argument 0"}
!68 = distinct !{!68, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadLE32PKhEEEEvPfS3_fmm"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE32PKhEEEEvPfS3_fmm: argument 0"}
!71 = distinct !{!71, !"_ZN3jxl12_GLOBAL__N_112LoadFloatRowIXadL_ZL8LoadBE32PKhEEEEvPfS3_fmm"}
