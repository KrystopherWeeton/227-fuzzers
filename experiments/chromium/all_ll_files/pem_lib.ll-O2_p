; ModuleID = '../../third_party/boringssl/src/crypto/pem/pem_lib.c'
source_filename = "../../third_party/boringssl/src/crypto/pem/pem_lib.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.evp_cipher_info_st = type { %struct.evp_cipher_st*, [16 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_encode_ctx_st = type { i32, [48 x i8], i8, i8 }
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.env_md_st = type opaque
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [10 x i8] c"ENCRYPTED\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"MIC-CLEAR\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"MIC-ONLY\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"BAD-TYPE\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Proc-Type: 4,\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PEM_dek_info.map = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str.6 = private unnamed_addr constant [11 x i8] c"DEK-Info: \00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.8 = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/pem/pem_lib.c\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Expecting: \00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Proc-Type: \00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"-----BEGIN \00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"-----\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"-----END \00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"ANY PRIVATE KEY\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"ENCRYPTED PRIVATE KEY\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"PRIVATE KEY\00", align 1
@.str.17 = private unnamed_addr constant [16 x i8] c"RSA PRIVATE KEY\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"EC PRIVATE KEY\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"DSA PRIVATE KEY\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"X509 CERTIFICATE\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"CERTIFICATE\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"NEW CERTIFICATE REQUEST\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"CERTIFICATE REQUEST\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"TRUSTED CERTIFICATE\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"PKCS7\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"PKCS #7 SIGNED DATA\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"DES-CBC\00", align 1
@.str.28 = private unnamed_addr constant [13 x i8] c"DES-EDE3-CBC\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"AES-128-CBC\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c"AES-192-CBC\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"AES-256-CBC\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @PEM_proc_type(i8*, i32) local_unnamed_addr #0 {
  switch i32 %1, label %5 [
    i32 10, label %6
    i32 30, label %3
    i32 20, label %4
  ]

3:                                                ; preds = %2
  br label %6

4:                                                ; preds = %2
  br label %6

5:                                                ; preds = %2
  br label %6

6:                                                ; preds = %2, %3, %5, %4
  %7 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), %3 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), %4 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), %5 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), %2 ]
  %8 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i64 1024) #6
  %9 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* nonnull %7, i64 1024) #6
  %10 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1024) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @OPENSSL_strlcat(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @PEM_dek_info(i8*, i8*, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i64 1024) #6
  %6 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* %1, i64 1024) #6
  %7 = tail call i64 @OPENSSL_strlcat(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i64 1024) #6
  %8 = tail call i64 @strlen(i8* %0) #7
  %9 = trunc i64 %8 to i32
  %10 = shl i32 %2, 1
  %11 = add nsw i32 %10, %9
  %12 = icmp sgt i32 %11, 1023
  br i1 %12, label %46, label %13

13:                                               ; preds = %4
  %14 = sext i32 %2 to i64
  %15 = icmp sgt i32 %2, 0
  %16 = shl i64 %8, 32
  %17 = ashr exact i64 %16, 32
  br i1 %15, label %18, label %40

18:                                               ; preds = %13, %18
  %19 = phi i64 [ %36, %18 ], [ 0, %13 ]
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = lshr i8 %21, 4
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [17 x i8], [17 x i8]* @PEM_dek_info.map, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = shl nuw nsw i64 %19, 1
  %27 = add nsw i64 %26, %17
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  store i8 %25, i8* %28, align 1
  %29 = load i8, i8* %20, align 1
  %30 = and i8 %29, 15
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [17 x i8], [17 x i8]* @PEM_dek_info.map, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = add nsw i64 %27, 1
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  store i8 %33, i8* %35, align 1
  %36 = add nuw nsw i64 %19, 1
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %18

38:                                               ; preds = %18
  %39 = shl nsw i64 %14, 1
  br label %40

40:                                               ; preds = %13, %38
  %41 = phi i64 [ %39, %38 ], [ 0, %13 ]
  %42 = add nsw i64 %41, %17
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  store i8 10, i8* %43, align 1
  %44 = add nsw i64 %42, 1
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  store i8 0, i8* %45, align 1
  br label %46

46:                                               ; preds = %4, %40
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8* @PEM_ASN1_read(i8* (i8**, i8**, i64)*, i8*, %struct._IO_FILE*, i8**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %7 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %2, i32 0) #6
  %8 = icmp eq %struct.bio_st* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  tail call void @ERR_put_error(i32 9, i32 0, i32 7, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 126) #6
  br label %13

10:                                               ; preds = %6
  %11 = tail call i8* @PEM_ASN1_read_bio(i8* (i8**, i8**, i64)* %0, i8* %1, %struct.bio_st* nonnull %7, i8** %3, i32 (i8*, i32, i32, i8*)* %4, i8* %5) #6
  %12 = tail call i32 @BIO_free(%struct.bio_st* nonnull %7) #6
  br label %13

13:                                               ; preds = %10, %9
  %14 = phi i8* [ null, %9 ], [ %11, %10 ]
  ret i8* %14
}

declare %struct.bio_st* @BIO_new_fp(%struct._IO_FILE*, i32) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i8* @PEM_ASN1_read_bio(i8* (i8**, i8**, i64)*, i8*, %struct.bio_st*, i8**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_bytes_read_bio(i8** nocapture, i64* nocapture, i8**, i8*, %struct.bio_st*, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %8 = alloca %struct.evp_cipher_info_st, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = bitcast %struct.evp_cipher_info_st* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #6
  %14 = bitcast i8** %9 to i8*
  %15 = bitcast %struct.evp_cipher_info_st* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  store i8* null, i8** %9, align 8
  %16 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  store i8* null, i8** %10, align 8
  %17 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  store i8* null, i8** %11, align 8
  %18 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  store i64 -6148914691236517206, i64* %12, align 8
  %19 = call i32 @PEM_read_bio(%struct.bio_st* %4, i8** nonnull %9, i8** nonnull %10, i8** nonnull %11, i64* nonnull %12)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %80, %7
  %22 = tail call i32 @ERR_peek_error() #6
  %23 = and i32 %22, -16773121
  %24 = icmp eq i32 %23, 150995054
  br i1 %24, label %25, label %104

25:                                               ; preds = %21
  tail call void (i32, ...) @ERR_add_error_data(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i8* %3) #6
  br label %104

26:                                               ; preds = %7, %80
  %27 = load i8*, i8** %9, align 8
  %28 = tail call i32 @strcmp(i8* %27, i8* %3) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %85, label %30

30:                                               ; preds = %26
  %31 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0)) #7
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %30
  %34 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i64 0, i64 0)) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %85, label %36

36:                                               ; preds = %33
  %37 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #7
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %85, label %39

39:                                               ; preds = %36
  %40 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i64 0, i64 0)) #7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %85, label %42

42:                                               ; preds = %39
  %43 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i64 0, i64 0)) #7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %85, label %77

45:                                               ; preds = %30
  %46 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i64 0, i64 0)) #7
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #7
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %85, label %51

51:                                               ; preds = %48, %45
  %52 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i64 0, i64 0)) #7
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0)) #7
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %85, label %57

57:                                               ; preds = %54, %51
  %58 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #7
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %85, label %63

63:                                               ; preds = %60, %57
  br i1 %47, label %64, label %67

64:                                               ; preds = %63
  %65 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #7
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %85, label %67

67:                                               ; preds = %64, %63
  br i1 %59, label %68, label %71

68:                                               ; preds = %67
  %69 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i64 0, i64 0)) #7
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %71

71:                                               ; preds = %68, %67
  %72 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #7
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %80

74:                                               ; preds = %71
  %75 = tail call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i64 0, i64 0)) #7
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %85, label %80

77:                                               ; preds = %42
  %78 = tail call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0)) #7
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %77, %74, %71
  tail call void @OPENSSL_free(i8* %27) #6
  %81 = load i8*, i8** %10, align 8
  tail call void @OPENSSL_free(i8* %81) #6
  %82 = load i8*, i8** %11, align 8
  tail call void @OPENSSL_free(i8* %82) #6
  %83 = call i32 @PEM_read_bio(%struct.bio_st* %4, i8** nonnull %9, i8** nonnull %10, i8** nonnull %11, i64* nonnull %12)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %21, label %26

85:                                               ; preds = %77, %74, %68, %64, %60, %54, %48, %33, %36, %39, %42, %26
  %86 = ptrtoint i8* %27 to i64
  %87 = load i8*, i8** %10, align 8
  %88 = call i32 @PEM_get_EVP_CIPHER_INFO(i8* %87, %struct.evp_cipher_info_st* nonnull %8)
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %99, label %90

90:                                               ; preds = %85
  %91 = load i8*, i8** %11, align 8
  %92 = call i32 @PEM_do_header(%struct.evp_cipher_info_st* nonnull %8, i8* %91, i64* nonnull %12, i32 (i8*, i32, i32, i8*)* %5, i8* %6)
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = ptrtoint i8* %91 to i64
  %96 = bitcast i8** %0 to i64*
  store i64 %95, i64* %96, align 8
  %97 = load i64, i64* %12, align 8
  store i64 %97, i64* %1, align 8
  %98 = icmp eq i8** %2, null
  br i1 %98, label %103, label %101

99:                                               ; preds = %90, %85
  call void @OPENSSL_free(i8* %27) #6
  call void @OPENSSL_free(i8* %87) #6
  %100 = load i8*, i8** %11, align 8
  call void @OPENSSL_free(i8* %100) #6
  br label %104

101:                                              ; preds = %94
  %102 = bitcast i8** %2 to i64*
  store i64 %86, i64* %102, align 8
  call void @OPENSSL_free(i8* %87) #6
  br label %104

103:                                              ; preds = %94
  call void @OPENSSL_free(i8* %27) #6
  call void @OPENSSL_free(i8* %87) #6
  br label %104

104:                                              ; preds = %103, %101, %99, %21, %25
  %105 = phi i32 [ 0, %25 ], [ 0, %21 ], [ 0, %99 ], [ 1, %101 ], [ 1, %103 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #6
  ret i32 %105
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_read_bio(%struct.bio_st*, i8** nocapture, i8** nocapture, i8** nocapture, i64* nocapture) local_unnamed_addr #0 {
  %6 = alloca %struct.evp_encode_ctx_st, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [256 x i8], align 16
  %10 = bitcast %struct.evp_encode_ctx_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 -86, i64 56, i1 false)
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6
  store i32 -1431655766, i32* %7, align 4
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #6
  store i32 0, i32* %8, align 4
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = tail call %struct.buf_mem_st* @BUF_MEM_new() #6
  %15 = tail call %struct.buf_mem_st* @BUF_MEM_new() #6
  %16 = tail call %struct.buf_mem_st* @BUF_MEM_new() #6
  %17 = icmp eq %struct.buf_mem_st* %14, null
  %18 = icmp eq %struct.buf_mem_st* %15, null
  %19 = or i1 %17, %18
  %20 = icmp eq %struct.buf_mem_st* %16, null
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %5
  tail call void @BUF_MEM_free(%struct.buf_mem_st* %14) #6
  tail call void @BUF_MEM_free(%struct.buf_mem_st* %15) #6
  tail call void @BUF_MEM_free(%struct.buf_mem_st* %16) #6
  tail call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 613) #6
  br label %286

23:                                               ; preds = %5
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 254
  store i8 0, i8* %24, align 2
  %25 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 11
  br label %29

29:                                               ; preds = %55, %27
  %30 = phi i32 [ %25, %27 ], [ %56, %55 ]
  %31 = sext i32 %30 to i64
  br label %33

32:                                               ; preds = %55, %23
  call void @ERR_put_error(i32 9, i32 0, i32 110, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 622) #6
  br label %283

33:                                               ; preds = %29, %39
  %34 = phi i64 [ %31, %29 ], [ %40, %39 ]
  %35 = phi i32 [ %30, %29 ], [ %41, %39 ]
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %34
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 33
  br i1 %38, label %39, label %43

39:                                               ; preds = %33
  %40 = add nsw i64 %34, -1
  %41 = add nsw i32 %35, -1
  %42 = icmp sgt i64 %34, 0
  br i1 %42, label %33, label %45

43:                                               ; preds = %33
  %44 = trunc i64 %34 to i32
  br label %45

45:                                               ; preds = %39, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %39 ]
  %47 = add nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %48
  store i8 10, i8* %49, align 1
  %50 = add nsw i32 %46, 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %51
  store i8 0, i8* %52, align 1
  %53 = call i32 @bcmp(i8* nonnull %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i64 11)
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %45, %58
  %56 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %57 = icmp slt i32 %56, 1
  br i1 %57, label %32, label %29

58:                                               ; preds = %45
  %59 = call i64 @strlen(i8* %28) #7
  %60 = shl i64 %59, 32
  %61 = add i64 %60, 21474836480
  %62 = ashr exact i64 %61, 32
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %62
  %64 = call i32 @strncmp(i8* %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i64 6) #7
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %55

66:                                               ; preds = %58
  %67 = add i64 %60, 38654705664
  %68 = ashr exact i64 %67, 32
  %69 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* %14, i64 %68) #6
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %66
  call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 637) #6
  br label %283

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %14, i64 0, i32 1
  %74 = add i64 %60, -25769803776
  %75 = ashr exact i64 %74, 32
  %76 = icmp eq i64 %74, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %72
  %78 = load i8*, i8** %73, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %28, i64 %75, i1 false) #6
  br label %79

79:                                               ; preds = %72, %77
  %80 = load i8*, i8** %73, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 %75
  store i8 0, i8* %81, align 1
  %82 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* %15, i64 256) #6
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %79
  call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 647) #6
  br label %283

85:                                               ; preds = %79
  %86 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %15, i64 0, i32 1
  %87 = load i8*, i8** %86, align 8
  store i8 0, i8* %87, align 1
  %88 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %89 = icmp slt i32 %88, 1
  br i1 %89, label %138, label %90

90:                                               ; preds = %85, %132
  %91 = phi i32 [ %136, %132 ], [ %88, %85 ]
  %92 = phi i32 [ %117, %132 ], [ 0, %85 ]
  %93 = sext i32 %91 to i64
  br label %94

94:                                               ; preds = %90, %100
  %95 = phi i64 [ %93, %90 ], [ %101, %100 ]
  %96 = phi i32 [ %91, %90 ], [ %102, %100 ]
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %95
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 33
  br i1 %99, label %100, label %104

100:                                              ; preds = %94
  %101 = add nsw i64 %95, -1
  %102 = add nsw i32 %96, -1
  %103 = icmp sgt i64 %95, 0
  br i1 %103, label %94, label %106

104:                                              ; preds = %94
  %105 = trunc i64 %95 to i32
  br label %106

106:                                              ; preds = %100, %104
  %107 = phi i32 [ %105, %104 ], [ %102, %100 ]
  %108 = add nsw i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %109
  store i8 10, i8* %110, align 1
  %111 = add nsw i32 %107, 2
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %112
  store i8 0, i8* %113, align 1
  %114 = load i8, i8* %13, align 16
  %115 = icmp eq i8 %114, 10
  br i1 %115, label %138, label %116

116:                                              ; preds = %106
  %117 = add nsw i32 %111, %92
  %118 = add nsw i32 %117, 9
  %119 = sext i32 %118 to i64
  %120 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* %15, i64 %119) #6
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %116
  call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 664) #6
  br label %283

123:                                              ; preds = %116
  %124 = call i32 @bcmp(i8* nonnull %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i64 9)
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %138, label %126

126:                                              ; preds = %123
  %127 = icmp eq i32 %111, 0
  br i1 %127, label %132, label %128

128:                                              ; preds = %126
  %129 = load i8*, i8** %86, align 8
  %130 = sext i32 %92 to i64
  %131 = getelementptr inbounds i8, i8* %129, i64 %130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* nonnull align 16 %13, i64 %112, i1 false) #6
  br label %132

132:                                              ; preds = %126, %128
  %133 = load i8*, i8** %86, align 8
  %134 = sext i32 %117 to i64
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  store i8 0, i8* %135, align 1
  %136 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %137 = icmp slt i32 %136, 1
  br i1 %137, label %138, label %90

138:                                              ; preds = %132, %106, %123, %85
  %139 = phi i32 [ 0, %85 ], [ %92, %123 ], [ %92, %106 ], [ %117, %132 ]
  %140 = phi i32 [ 0, %85 ], [ 1, %123 ], [ 0, %106 ], [ 0, %132 ]
  store i32 0, i32* %8, align 4
  %141 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* %16, i64 1024) #6
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %138
  call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 678) #6
  br label %283

144:                                              ; preds = %138
  %145 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %16, i64 0, i32 1
  %146 = load i8*, i8** %145, align 8
  store i8 0, i8* %146, align 1
  %147 = icmp eq i32 %140, 0
  br i1 %147, label %148, label %226

148:                                              ; preds = %144, %193
  %149 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %150 = icmp slt i32 %149, 1
  br i1 %150, label %227, label %151

151:                                              ; preds = %148
  %152 = sext i32 %149 to i64
  br label %153

153:                                              ; preds = %151, %159
  %154 = phi i64 [ %152, %151 ], [ %160, %159 ]
  %155 = phi i32 [ %149, %151 ], [ %161, %159 ]
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %154
  %157 = load i8, i8* %156, align 1
  %158 = icmp slt i8 %157, 33
  br i1 %158, label %159, label %163

159:                                              ; preds = %153
  %160 = add nsw i64 %154, -1
  %161 = add nsw i32 %155, -1
  %162 = icmp sgt i64 %154, 0
  br i1 %162, label %153, label %165

163:                                              ; preds = %153
  %164 = trunc i64 %154 to i32
  br label %165

165:                                              ; preds = %159, %163
  %166 = phi i32 [ %164, %163 ], [ %161, %159 ]
  %167 = add nsw i32 %166, 1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %168
  store i8 10, i8* %169, align 1
  %170 = add nsw i32 %166, 2
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %171
  store i8 0, i8* %172, align 1
  %173 = icmp eq i32 %170, 65
  %174 = call i32 @bcmp(i8* nonnull %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i64 9)
  %175 = icmp eq i32 %174, 0
  %176 = icmp sgt i32 %170, 65
  %177 = or i1 %176, %175
  br i1 %177, label %227, label %178

178:                                              ; preds = %165
  %179 = load i32, i32* %8, align 4
  %180 = add i32 %166, 11
  %181 = add i32 %180, %179
  %182 = sext i32 %181 to i64
  %183 = call i64 @BUF_MEM_grow_clean(%struct.buf_mem_st* %16, i64 %182) #6
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %178
  call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 700) #6
  br label %283

186:                                              ; preds = %178
  %187 = icmp eq i32 %170, 0
  br i1 %187, label %193, label %188

188:                                              ; preds = %186
  %189 = load i8*, i8** %145, align 8
  %190 = load i32, i32* %8, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %189, i64 %191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %192, i8* nonnull align 16 %13, i64 %171, i1 false) #6
  br label %193

193:                                              ; preds = %186, %188
  %194 = load i8*, i8** %145, align 8
  %195 = load i32, i32* %8, align 4
  %196 = add nsw i32 %195, %170
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %194, i64 %197
  store i8 0, i8* %198, align 1
  %199 = load i32, i32* %8, align 4
  %200 = add nsw i32 %199, %170
  store i32 %200, i32* %8, align 4
  br i1 %173, label %148, label %201

201:                                              ; preds = %193
  store i8 0, i8* %13, align 16
  %202 = call i32 @BIO_gets(%struct.bio_st* %0, i8* nonnull %13, i32 254) #6
  %203 = icmp slt i32 %202, 1
  br i1 %203, label %227, label %204

204:                                              ; preds = %201
  %205 = sext i32 %202 to i64
  br label %206

206:                                              ; preds = %204, %212
  %207 = phi i64 [ %205, %204 ], [ %213, %212 ]
  %208 = phi i32 [ %202, %204 ], [ %214, %212 ]
  %209 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %207
  %210 = load i8, i8* %209, align 1
  %211 = icmp slt i8 %210, 33
  br i1 %211, label %212, label %216

212:                                              ; preds = %206
  %213 = add nsw i64 %207, -1
  %214 = add nsw i32 %208, -1
  %215 = icmp sgt i64 %207, 0
  br i1 %215, label %206, label %218

216:                                              ; preds = %206
  %217 = trunc i64 %207 to i32
  br label %218

218:                                              ; preds = %212, %216
  %219 = phi i32 [ %217, %216 ], [ %214, %212 ]
  %220 = add nsw i32 %219, 1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %221
  store i8 10, i8* %222, align 1
  %223 = add nsw i32 %219, 2
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %224
  store i8 0, i8* %225, align 1
  br label %227

226:                                              ; preds = %144
  store i32 %139, i32* %8, align 4
  br label %227

227:                                              ; preds = %148, %165, %218, %201, %226
  %228 = phi %struct.buf_mem_st* [ %16, %226 ], [ %15, %201 ], [ %15, %218 ], [ %15, %165 ], [ %15, %148 ]
  %229 = phi %struct.buf_mem_st* [ %15, %226 ], [ %16, %201 ], [ %16, %218 ], [ %16, %165 ], [ %16, %148 ]
  %230 = load i8*, i8** %73, align 8
  %231 = call i32 @bcmp(i8* nonnull %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i64 9)
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %246

233:                                              ; preds = %227
  %234 = call i64 @strlen(i8* %230) #7
  %235 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 9
  %236 = shl i64 %234, 32
  %237 = ashr exact i64 %236, 32
  %238 = call i32 @strncmp(i8* %230, i8* %235, i64 %237) #7
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %246

240:                                              ; preds = %233
  %241 = add i64 %236, 38654705664
  %242 = ashr exact i64 %241, 32
  %243 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %242
  %244 = call i32 @strncmp(i8* %243, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i64 6) #7
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %247, label %246

246:                                              ; preds = %240, %233, %227
  call void @ERR_put_error(i32 9, i32 0, i32 102, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 730) #6
  br label %283

247:                                              ; preds = %240
  call void @EVP_DecodeInit(%struct.evp_encode_ctx_st* nonnull %6) #6
  %248 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %229, i64 0, i32 1
  %249 = load i8*, i8** %248, align 8
  %250 = load i32, i32* %8, align 4
  %251 = sext i32 %250 to i64
  %252 = call i32 @EVP_DecodeUpdate(%struct.evp_encode_ctx_st* nonnull %6, i8* %249, i32* nonnull %8, i8* %249, i64 %251) #6
  %253 = icmp slt i32 %252, 0
  br i1 %253, label %254, label %255

254:                                              ; preds = %247
  call void @ERR_put_error(i32 9, i32 0, i32 100, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 739) #6
  br label %283

255:                                              ; preds = %247
  %256 = load i8*, i8** %248, align 8
  %257 = load i32, i32* %8, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %256, i64 %258
  %260 = call i32 @EVP_DecodeFinal(%struct.evp_encode_ctx_st* nonnull %6, i8* %259, i32* nonnull %7) #6
  %261 = icmp slt i32 %260, 0
  br i1 %261, label %262, label %263

262:                                              ; preds = %255
  call void @ERR_put_error(i32 9, i32 0, i32 100, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 744) #6
  br label %283

263:                                              ; preds = %255
  %264 = load i32, i32* %7, align 4
  %265 = load i32, i32* %8, align 4
  %266 = add nsw i32 %265, %264
  store i32 %266, i32* %8, align 4
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %283, label %268

268:                                              ; preds = %263
  %269 = bitcast i8** %73 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast i8** %1 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %228, i64 0, i32 1
  %273 = bitcast i8** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast i8** %2 to i64*
  store i64 %274, i64* %275, align 8
  %276 = bitcast i8** %248 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = bitcast i8** %3 to i64*
  store i64 %277, i64* %278, align 8
  %279 = sext i32 %266 to i64
  store i64 %279, i64* %4, align 8
  %280 = bitcast %struct.buf_mem_st* %14 to i8*
  call void @OPENSSL_free(i8* %280) #6
  %281 = bitcast %struct.buf_mem_st* %228 to i8*
  call void @OPENSSL_free(i8* %281) #6
  %282 = bitcast %struct.buf_mem_st* %229 to i8*
  call void @OPENSSL_free(i8* %282) #6
  br label %286

283:                                              ; preds = %263, %262, %254, %246, %185, %143, %122, %84, %71, %32
  %284 = phi %struct.buf_mem_st* [ %15, %32 ], [ %228, %246 ], [ %228, %254 ], [ %228, %262 ], [ %228, %263 ], [ %15, %185 ], [ %15, %143 ], [ %15, %122 ], [ %15, %84 ], [ %15, %71 ]
  %285 = phi %struct.buf_mem_st* [ %16, %32 ], [ %229, %246 ], [ %229, %254 ], [ %229, %262 ], [ %229, %263 ], [ %16, %185 ], [ %16, %143 ], [ %16, %122 ], [ %16, %84 ], [ %16, %71 ]
  call void @BUF_MEM_free(%struct.buf_mem_st* %14) #6
  call void @BUF_MEM_free(%struct.buf_mem_st* %284) #6
  call void @BUF_MEM_free(%struct.buf_mem_st* %285) #6
  br label %286

286:                                              ; preds = %283, %268, %22
  %287 = phi i32 [ 0, %22 ], [ 0, %283 ], [ 1, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %10) #6
  ret i32 %287
}

declare i32 @ERR_peek_error() local_unnamed_addr #2

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_get_EVP_CIPHER_INFO(i8*, %struct.evp_cipher_info_st* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.evp_cipher_info_st, %struct.evp_cipher_info_st* %1, i64 0, i32 0
  %4 = getelementptr inbounds %struct.evp_cipher_info_st, %struct.evp_cipher_info_st* %1, i64 0, i32 1, i64 0
  %5 = icmp eq i8* %0, null
  %6 = bitcast %struct.evp_cipher_info_st* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false)
  br i1 %5, label %94, label %7

7:                                                ; preds = %2
  %8 = load i8, i8* %0, align 1
  switch i8 %8, label %9 [
    i8 0, label %94
    i8 10, label %94
  ]

9:                                                ; preds = %7
  %10 = tail call i32 @strncmp(i8* nonnull %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), i64 11) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %9
  tail call void @ERR_put_error(i32 9, i32 0, i32 109, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 426) #6
  br label %94

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 52
  br i1 %16, label %17, label %94

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %0, i64 12
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 44
  br i1 %20, label %21, label %94

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %0, i64 13
  %23 = tail call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i64 9) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void @ERR_put_error(i32 9, i32 0, i32 108, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 437) #6
  br label %94

26:                                               ; preds = %21, %29
  %27 = phi i8* [ %30, %29 ], [ %22, %21 ]
  %28 = load i8, i8* %27, align 1
  switch i8 %28, label %29 [
    i8 0, label %31
    i8 10, label %32
  ]

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  br label %26

31:                                               ; preds = %26
  tail call void @ERR_put_error(i32 9, i32 0, i32 112, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 442) #6
  br label %94

32:                                               ; preds = %26
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  %34 = tail call i32 @strncmp(i8* %33, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i64 10) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @ERR_put_error(i32 9, i32 0, i32 107, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 447) #6
  br label %94

37:                                               ; preds = %32
  %38 = getelementptr inbounds i8, i8* %27, i64 11
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i8* [ %38, %37 ], [ %49, %39 ]
  %41 = load i8, i8* %40, align 1
  %42 = add i8 %41, -65
  %43 = icmp ult i8 %42, 26
  %44 = icmp eq i8 %41, 45
  %45 = or i1 %44, %43
  %46 = add i8 %41, -48
  %47 = icmp ult i8 %46, 10
  %48 = or i1 %47, %45
  %49 = getelementptr inbounds i8, i8* %40, i64 1
  br i1 %48, label %39, label %50

50:                                               ; preds = %39
  store i8 0, i8* %40, align 1
  %51 = tail call fastcc %struct.evp_cipher_st* @cipher_by_name(i8* %38)
  store %struct.evp_cipher_st* %51, %struct.evp_cipher_st** %3, align 8
  store i8 %41, i8* %40, align 1
  %52 = icmp eq %struct.evp_cipher_st* %51, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @ERR_put_error(i32 9, i32 0, i32 114, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 466) #6
  br label %94

54:                                               ; preds = %50
  %55 = tail call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* nonnull %51) #6
  %56 = icmp ult i32 %55, 8
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @ERR_put_error(i32 9, i32 0, i32 114, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 473) #6
  br label %94

58:                                               ; preds = %54
  %59 = tail call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* nonnull %51) #6
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %94

61:                                               ; preds = %58
  %62 = zext i32 %59 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 %62, i1 false) #6
  %63 = shl nsw i32 %59, 1
  br label %64

64:                                               ; preds = %78, %61
  %65 = phi i8* [ %67, %78 ], [ %40, %61 ]
  %66 = phi i32 [ %91, %78 ], [ 0, %61 ]
  %67 = getelementptr inbounds i8, i8* %65, i64 1
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = add i8 %68, -48
  %71 = icmp ult i8 %70, 10
  br i1 %71, label %78, label %72

72:                                               ; preds = %64
  %73 = add i8 %68, -65
  %74 = icmp ult i8 %73, 6
  br i1 %74, label %78, label %75

75:                                               ; preds = %72
  %76 = add i8 %68, -97
  %77 = icmp ult i8 %76, 6
  br i1 %77, label %78, label %93

78:                                               ; preds = %75, %72, %64
  %79 = phi i32 [ -48, %64 ], [ -55, %72 ], [ -87, %75 ]
  %80 = add nsw i32 %79, %69
  %81 = shl i32 %66, 2
  %82 = and i32 %81, 4
  %83 = xor i32 %82, 4
  %84 = shl i32 %80, %83
  %85 = lshr i32 %66, 1
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %struct.evp_cipher_info_st, %struct.evp_cipher_info_st* %1, i64 0, i32 1, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = trunc i32 %84 to i8
  %90 = or i8 %88, %89
  store i8 %90, i8* %87, align 1
  %91 = add nuw nsw i32 %66, 1
  %92 = icmp slt i32 %91, %63
  br i1 %92, label %64, label %94

93:                                               ; preds = %75
  tail call void @ERR_put_error(i32 9, i32 0, i32 103, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 499) #6
  br label %94

94:                                               ; preds = %78, %58, %93, %17, %13, %2, %7, %7, %57, %53, %36, %31, %25, %12
  %95 = phi i32 [ 0, %12 ], [ 0, %25 ], [ 0, %31 ], [ 0, %36 ], [ 0, %53 ], [ 0, %57 ], [ 1, %7 ], [ 1, %7 ], [ 1, %2 ], [ 0, %13 ], [ 0, %17 ], [ 0, %93 ], [ 1, %58 ], [ 1, %78 ]
  ret i32 %95
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_do_header(%struct.evp_cipher_info_st*, i8*, i64* nocapture, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.evp_cipher_ctx_st, align 8
  %9 = alloca [64 x i8], align 16
  %10 = alloca [1024 x i8], align 16
  %11 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6
  store i32 0, i32* %6, align 4
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #6
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast %struct.evp_cipher_ctx_st* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 144, i1 false)
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 1024, i1 false)
  %16 = load i64, i64* %2, align 8
  %17 = getelementptr inbounds %struct.evp_cipher_info_st, %struct.evp_cipher_info_st* %0, i64 0, i32 0
  %18 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %17, align 8
  %19 = icmp eq %struct.evp_cipher_st* %18, null
  br i1 %19, label %56, label %20

20:                                               ; preds = %5
  %21 = icmp eq i32 (i8*, i32, i32, i8*)* %3, null
  %22 = select i1 %21, i32 (i8*, i32, i32, i8*)* @PEM_def_callback, i32 (i8*, i32, i32, i8*)* %3
  %23 = call i32 %22(i8* nonnull %15, i32 1024, i32 0, i8* %4) #6
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  call void @ERR_put_error(i32 9, i32 0, i32 104, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 388) #6
  br label %56

26:                                               ; preds = %20
  %27 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %17, align 8
  %28 = call %struct.env_md_st* @EVP_md5() #6
  %29 = getelementptr inbounds %struct.evp_cipher_info_st, %struct.evp_cipher_info_st* %0, i64 0, i32 1, i64 0
  %30 = sext i32 %23 to i64
  %31 = call i32 @EVP_BytesToKey(%struct.evp_cipher_st* %27, %struct.env_md_st* %28, i8* %29, i8* nonnull %15, i64 %30, i32 1, i8* nonnull %14, i8* null) #6
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %56, label %33

33:                                               ; preds = %26
  %34 = trunc i64 %16 to i32
  store i32 %34, i32* %7, align 4
  call void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st* nonnull %8) #6
  %35 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %17, align 8
  %36 = call i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st* nonnull %8, %struct.evp_cipher_st* %35, %struct.engine_st* null, i8* nonnull %14, i8* %29) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %33
  %39 = call i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st* nonnull %8, i8* %1, i32* nonnull %6, i8* %1, i32 %34) #6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %38
  %42 = load i32, i32* %6, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = call i32 @EVP_DecryptFinal_ex(%struct.evp_cipher_ctx_st* nonnull %8, i8* %44, i32* nonnull %7) #6
  %46 = icmp eq i32 %45, 0
  %47 = call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* nonnull %8) #6
  call void @OPENSSL_cleanse(i8* nonnull %15, i64 1024) #6
  call void @OPENSSL_cleanse(i8* nonnull %14, i64 64) #6
  br i1 %46, label %50, label %51

48:                                               ; preds = %33, %38
  %49 = call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* nonnull %8) #6
  call void @OPENSSL_cleanse(i8* nonnull %15, i64 1024) #6
  call void @OPENSSL_cleanse(i8* nonnull %14, i64 64) #6
  br label %50

50:                                               ; preds = %48, %41
  call void @ERR_put_error(i32 9, i32 0, i32 101, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 407) #6
  br label %56

51:                                               ; preds = %41
  %52 = load i32, i32* %6, align 4
  %53 = load i32, i32* %7, align 4
  %54 = add nsw i32 %53, %52
  store i32 %54, i32* %7, align 4
  %55 = sext i32 %54 to i64
  store i64 %55, i64* %2, align 8
  br label %56

56:                                               ; preds = %26, %5, %51, %50, %25
  %57 = phi i32 [ 0, %25 ], [ 1, %51 ], [ 0, %50 ], [ 1, %5 ], [ 0, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_ASN1_write(i32 (i8*, i8**)* nocapture, i8*, %struct._IO_FILE*, i8*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %10 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %2, i32 0) #6
  %11 = icmp eq %struct.bio_st* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  tail call void @ERR_put_error(i32 9, i32 0, i32 7, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 262) #6
  br label %16

13:                                               ; preds = %9
  %14 = tail call i32 @PEM_ASN1_write_bio(i32 (i8*, i8**)* %0, i8* %1, %struct.bio_st* nonnull %10, i8* %3, %struct.evp_cipher_st* %4, i8* %5, i32 %6, i32 (i8*, i32, i32, i8*)* %7, i8* %8)
  %15 = tail call i32 @BIO_free(%struct.bio_st* nonnull %10) #6
  br label %16

16:                                               ; preds = %13, %12
  %17 = phi i32 [ 0, %12 ], [ %14, %13 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_ASN1_write_bio(i32 (i8*, i8**)* nocapture, i8*, %struct.bio_st*, i8*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %10 = alloca %struct.evp_cipher_ctx_st, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca [1024 x i8], align 16
  %15 = alloca [64 x i8], align 16
  %16 = alloca [16 x i8], align 16
  %17 = bitcast %struct.evp_cipher_ctx_st* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 144, i1 false)
  %18 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #6
  store i32 -1431655766, i32* %11, align 4
  %19 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 -1431655766, i32* %12, align 4
  %20 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %13, align 8
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 1024, i1 false)
  %22 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 64, i1 false)
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #6
  %24 = icmp ne %struct.evp_cipher_st* %4, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 16, i1 false)
  br i1 %24, label %25, label %36

25:                                               ; preds = %9
  %26 = tail call i32 @EVP_CIPHER_nid(%struct.evp_cipher_st* nonnull %4) #6
  %27 = tail call i8* @OBJ_nid2sn(i32 %26) #6
  %28 = icmp eq i8* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = tail call fastcc %struct.evp_cipher_st* @cipher_by_name(i8* nonnull %27)
  %31 = icmp eq %struct.evp_cipher_st* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = tail call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* nonnull %4) #6
  %34 = icmp ult i32 %33, 8
  br i1 %34, label %35, label %36

35:                                               ; preds = %32, %29, %25
  tail call void @ERR_put_error(i32 9, i32 0, i32 113, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 288) #6
  br label %103

36:                                               ; preds = %32, %9
  %37 = phi i8* [ %27, %32 ], [ null, %9 ]
  %38 = tail call i32 %0(i8* %3, i8** null) #6
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  tail call void @ERR_put_error(i32 9, i32 0, i32 12, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 294) #6
  br label %103

41:                                               ; preds = %36
  %42 = add nuw i32 %38, 20
  %43 = zext i32 %42 to i64
  %44 = tail call i8* @OPENSSL_malloc(i64 %43) #6
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  tail call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 302) #6
  br label %103

47:                                               ; preds = %41
  store i8* %44, i8** %13, align 8
  %48 = call i32 %0(i8* %3, i8** nonnull %13) #6
  store i32 %48, i32* %11, align 4
  br i1 %24, label %49, label %96

49:                                               ; preds = %47
  %50 = call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* nonnull %4) #6
  %51 = icmp eq i8* %5, null
  br i1 %51, label %52, label %58

52:                                               ; preds = %49
  %53 = icmp eq i32 (i8*, i32, i32, i8*)* %7, null
  %54 = select i1 %53, i32 (i8*, i32, i32, i8*)* @PEM_def_callback, i32 (i8*, i32, i32, i8*)* %7
  %55 = call i32 %54(i8* nonnull %21, i32 1024, i32 1, i8* %8) #6
  %56 = icmp slt i32 %55, 1
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  call void @ERR_put_error(i32 9, i32 0, i32 111, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 317) #6
  br label %103

58:                                               ; preds = %52, %49
  %59 = phi i8* [ %5, %49 ], [ %21, %52 ]
  %60 = phi i32 [ %6, %49 ], [ %55, %52 ]
  %61 = zext i32 %50 to i64
  %62 = call i32 @RAND_bytes(i8* nonnull %23, i64 %61) #6
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %103, label %64

64:                                               ; preds = %58
  %65 = call %struct.env_md_st* @EVP_md5() #6
  %66 = sext i32 %60 to i64
  %67 = call i32 @EVP_BytesToKey(%struct.evp_cipher_st* nonnull %4, %struct.env_md_st* %65, i8* nonnull %23, i8* %59, i64 %66, i32 1, i8* nonnull %22, i8* null) #6
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %103, label %69

69:                                               ; preds = %64
  %70 = icmp eq i8* %59, %21
  br i1 %70, label %71, label %72

71:                                               ; preds = %69
  call void @OPENSSL_cleanse(i8* nonnull %21, i64 1024) #6
  br label %72

72:                                               ; preds = %71, %69
  store i8 0, i8* %21, align 16
  %73 = call i64 @OPENSSL_strlcat(i8* nonnull %21, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i64 1024) #6
  %74 = call i64 @OPENSSL_strlcat(i8* nonnull %21, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i64 1024) #6
  %75 = call i64 @OPENSSL_strlcat(i8* nonnull %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1024) #6
  call void @PEM_dek_info(i8* nonnull %21, i8* %37, i32 %50, i8* nonnull %23)
  call void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st* nonnull %10) #6
  %76 = call i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st* nonnull %10, %struct.evp_cipher_st* nonnull %4, %struct.engine_st* null, i8* nonnull %22, i8* nonnull %23) #6
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %72
  %79 = load i32, i32* %11, align 4
  %80 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* nonnull %10, i8* nonnull %44, i32* nonnull %12, i8* nonnull %44, i32 %79) #6
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %78
  %83 = load i32, i32* %12, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %44, i64 %84
  %86 = call i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st* nonnull %10, i8* %85, i32* nonnull %11) #6
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %82, %78, %72
  %89 = call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* nonnull %10) #6
  br label %103

90:                                               ; preds = %82
  %91 = load i32, i32* %12, align 4
  %92 = load i32, i32* %11, align 4
  %93 = add nsw i32 %92, %91
  store i32 %93, i32* %11, align 4
  %94 = call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* nonnull %10) #6
  %95 = load i32, i32* %11, align 4
  br label %97

96:                                               ; preds = %47
  store i8 0, i8* %21, align 16
  br label %97

97:                                               ; preds = %90, %96
  %98 = phi i32 [ %95, %90 ], [ %48, %96 ]
  %99 = sext i32 %98 to i64
  %100 = call i32 @PEM_write_bio(%struct.bio_st* %2, i8* %1, i8* nonnull %21, i8* nonnull %44, i64 %99)
  store i32 %100, i32* %11, align 4
  %101 = icmp sgt i32 %100, 0
  %102 = zext i1 %101 to i32
  br label %103

103:                                              ; preds = %88, %64, %58, %57, %97, %46, %40, %35
  %104 = phi i32 [ 0, %35 ], [ 0, %40 ], [ 0, %46 ], [ %102, %97 ], [ 0, %57 ], [ 0, %58 ], [ 0, %64 ], [ 0, %88 ]
  %105 = phi i8* [ null, %35 ], [ null, %40 ], [ null, %46 ], [ %44, %97 ], [ %44, %57 ], [ %44, %58 ], [ %44, %64 ], [ %44, %88 ]
  call void @OPENSSL_cleanse(i8* nonnull %22, i64 64) #6
  call void @OPENSSL_cleanse(i8* nonnull %23, i64 16) #6
  call void @OPENSSL_cleanse(i8* nonnull %17, i64 144) #6
  call void @OPENSSL_cleanse(i8* nonnull %21, i64 1024) #6
  call void @OPENSSL_free(i8* %105) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %17) #6
  ret i32 %104
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @OBJ_nid2sn(i32) local_unnamed_addr #2

declare i32 @EVP_CIPHER_nid(%struct.evp_cipher_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.evp_cipher_st* @cipher_by_name(i8* nocapture readonly) unnamed_addr #0 {
  %2 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0)) #7
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call %struct.evp_cipher_st* @EVP_des_cbc() #6
  br label %26

6:                                                ; preds = %1
  %7 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0)) #7
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call %struct.evp_cipher_st* @EVP_des_ede3_cbc() #6
  br label %26

11:                                               ; preds = %6
  %12 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0)) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = tail call %struct.evp_cipher_st* @EVP_aes_128_cbc() #6
  br label %26

16:                                               ; preds = %11
  %17 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i64 0, i64 0)) #7
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  %20 = tail call %struct.evp_cipher_st* @EVP_aes_192_cbc() #6
  br label %26

21:                                               ; preds = %16
  %22 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0)) #7
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = tail call %struct.evp_cipher_st* @EVP_aes_256_cbc() #6
  br label %26

26:                                               ; preds = %21, %24, %19, %14, %9, %4
  %27 = phi %struct.evp_cipher_st* [ %5, %4 ], [ %10, %9 ], [ %15, %14 ], [ %20, %19 ], [ %25, %24 ], [ null, %21 ]
  ret %struct.evp_cipher_st* %27
}

declare i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st*) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_def_callback(i8*, i32, i32, i8*) local_unnamed_addr #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i8* %3, null
  %7 = or i1 %5, %6
  %8 = icmp slt i32 %1, 0
  %9 = or i1 %8, %7
  br i1 %9, label %17, label %10

10:                                               ; preds = %4
  %11 = tail call i64 @strlen(i8* nonnull %3) #7
  %12 = sext i32 %1 to i64
  %13 = icmp ult i64 %11, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = tail call i64 @OPENSSL_strlcpy(i8* nonnull %0, i8* nonnull %3, i64 %12) #6
  %16 = trunc i64 %11 to i32
  br label %17

17:                                               ; preds = %14, %10, %4
  %18 = phi i32 [ 0, %4 ], [ %16, %14 ], [ 0, %10 ]
  ret i32 %18
}

declare i32 @RAND_bytes(i8*, i64) local_unnamed_addr #2

declare i32 @EVP_BytesToKey(%struct.evp_cipher_st*, %struct.env_md_st*, i8*, i8*, i64, i32, i8*, i8*) local_unnamed_addr #2

declare %struct.env_md_st* @EVP_md5() local_unnamed_addr #2

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #2

declare void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #2

declare i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_write_bio(%struct.bio_st*, i8*, i8*, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.evp_encode_ctx_st, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  store i32 -1431655766, i32* %6, align 4
  %9 = bitcast %struct.evp_encode_ctx_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 -86, i64 56, i1 false)
  call void @EVP_EncodeInit(%struct.evp_encode_ctx_st* nonnull %7) #6
  %10 = call i64 @strlen(i8* %1) #7
  %11 = trunc i64 %10 to i32
  %12 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 11) #6
  %13 = icmp eq i32 %12, 11
  br i1 %13, label %14, label %79

14:                                               ; preds = %5
  %15 = call i32 @BIO_write(%struct.bio_st* %0, i8* %1, i32 %11) #6
  %16 = icmp eq i32 %15, %11
  br i1 %16, label %17, label %79

17:                                               ; preds = %14
  %18 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i32 6) #6
  %19 = icmp eq i32 %18, 6
  br i1 %19, label %20, label %79

20:                                               ; preds = %17
  %21 = call i64 @strlen(i8* %2) #7
  %22 = trunc i64 %21 to i32
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = call i32 @BIO_write(%struct.bio_st* %0, i8* %2, i32 %22) #6
  %26 = icmp eq i32 %25, %22
  br i1 %26, label %27, label %79

27:                                               ; preds = %24
  %28 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 1) #6
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %79

30:                                               ; preds = %27, %20
  %31 = call i8* @OPENSSL_malloc(i64 8192) #6
  %32 = icmp eq i8* %31, null
  br i1 %32, label %79, label %33

33:                                               ; preds = %30
  %34 = icmp sgt i64 %4, 0
  br i1 %34, label %35, label %58

35:                                               ; preds = %33, %52
  %36 = phi i32 [ %56, %52 ], [ 0, %33 ]
  %37 = phi i32 [ %54, %52 ], [ 0, %33 ]
  %38 = phi i64 [ %55, %52 ], [ %4, %33 ]
  %39 = icmp slt i64 %38, 5120
  %40 = select i1 %39, i64 %38, i64 5120
  %41 = trunc i64 %40 to i32
  %42 = sext i32 %36 to i64
  %43 = getelementptr inbounds i8, i8* %3, i64 %42
  %44 = shl i64 %40, 32
  %45 = ashr exact i64 %44, 32
  call void @EVP_EncodeUpdate(%struct.evp_encode_ctx_st* nonnull %7, i8* nonnull %31, i32* nonnull %6, i8* %43, i64 %45) #6
  %46 = load i32, i32* %6, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %35
  %49 = call i32 @BIO_write(%struct.bio_st* %0, i8* nonnull %31, i32 %46) #6
  %50 = load i32, i32* %6, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

52:                                               ; preds = %48, %35
  %53 = phi i32 [ %49, %48 ], [ 0, %35 ]
  %54 = add nsw i32 %53, %37
  %55 = sub nsw i64 %38, %45
  %56 = add nsw i32 %36, %41
  %57 = icmp sgt i64 %55, 0
  br i1 %57, label %35, label %58

58:                                               ; preds = %52, %33
  %59 = phi i32 [ 0, %33 ], [ %54, %52 ]
  call void @EVP_EncodeFinal(%struct.evp_encode_ctx_st* nonnull %7, i8* nonnull %31, i32* nonnull %6) #6
  %60 = load i32, i32* %6, align 4
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = call i32 @BIO_write(%struct.bio_st* %0, i8* nonnull %31, i32 %60) #6
  %64 = load i32, i32* %6, align 4
  %65 = icmp eq i32 %63, %64
  br i1 %65, label %66, label %78

66:                                               ; preds = %62, %58
  call void @OPENSSL_free(i8* nonnull %31) #6
  %67 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 9) #6
  %68 = icmp eq i32 %67, 9
  br i1 %68, label %69, label %79

69:                                               ; preds = %66
  %70 = call i32 @BIO_write(%struct.bio_st* %0, i8* %1, i32 %11) #6
  %71 = icmp eq i32 %70, %11
  br i1 %71, label %72, label %79

72:                                               ; preds = %69
  %73 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i32 6) #6
  %74 = icmp eq i32 %73, 6
  br i1 %74, label %75, label %79

75:                                               ; preds = %72
  %76 = load i32, i32* %6, align 4
  %77 = add nsw i32 %76, %59
  br label %81

78:                                               ; preds = %48, %62
  call void @OPENSSL_free(i8* nonnull %31) #6
  br label %79

79:                                               ; preds = %30, %72, %69, %66, %27, %24, %17, %14, %5, %78
  %80 = phi i32 [ 7, %78 ], [ 65, %30 ], [ 7, %72 ], [ 7, %69 ], [ 7, %66 ], [ 7, %27 ], [ 7, %24 ], [ 7, %17 ], [ 7, %14 ], [ 7, %5 ]
  call void @ERR_put_error(i32 9, i32 0, i32 %80, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 577) #6
  br label %81

81:                                               ; preds = %79, %75
  %82 = phi i32 [ 0, %79 ], [ %77, %75 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  ret i32 %82
}

declare i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #2

declare i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_DecryptFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_write(%struct._IO_FILE*, i8*, i8*, i8*, i64) local_unnamed_addr #0 {
  %6 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %0, i32 0) #6
  %7 = icmp eq %struct.bio_st* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call void @ERR_put_error(i32 9, i32 0, i32 7, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 516) #6
  br label %12

9:                                                ; preds = %5
  %10 = tail call i32 @PEM_write_bio(%struct.bio_st* nonnull %6, i8* %1, i8* %2, i8* %3, i64 %4)
  %11 = tail call i32 @BIO_free(%struct.bio_st* nonnull %6) #6
  br label %12

12:                                               ; preds = %9, %8
  %13 = phi i32 [ 0, %8 ], [ %10, %9 ]
  ret i32 %13
}

declare void @EVP_EncodeInit(%struct.evp_encode_ctx_st*) local_unnamed_addr #2

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

declare void @EVP_EncodeUpdate(%struct.evp_encode_ctx_st*, i8*, i32*, i8*, i64) local_unnamed_addr #2

declare void @EVP_EncodeFinal(%struct.evp_encode_ctx_st*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_read(%struct._IO_FILE*, i8** nocapture, i8** nocapture, i8** nocapture, i64* nocapture) local_unnamed_addr #0 {
  %6 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %0, i32 0) #6
  %7 = icmp eq %struct.bio_st* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call void @ERR_put_error(i32 9, i32 0, i32 7, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 587) #6
  br label %12

9:                                                ; preds = %5
  %10 = tail call i32 @PEM_read_bio(%struct.bio_st* nonnull %6, i8** %1, i8** %2, i8** %3, i64* %4)
  %11 = tail call i32 @BIO_free(%struct.bio_st* nonnull %6) #6
  br label %12

12:                                               ; preds = %9, %8
  %13 = phi i32 [ 0, %8 ], [ %10, %9 ]
  ret i32 %13
}

declare %struct.buf_mem_st* @BUF_MEM_new() local_unnamed_addr #2

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #2

declare i32 @BIO_gets(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

declare i64 @BUF_MEM_grow(%struct.buf_mem_st*, i64) local_unnamed_addr #2

declare i64 @BUF_MEM_grow_clean(%struct.buf_mem_st*, i64) local_unnamed_addr #2

declare void @EVP_DecodeInit(%struct.evp_encode_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_DecodeUpdate(%struct.evp_encode_ctx_st*, i8*, i32*, i8*, i64) local_unnamed_addr #2

declare i32 @EVP_DecodeFinal(%struct.evp_encode_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

declare %struct.evp_cipher_st* @EVP_des_cbc() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_des_ede3_cbc() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_128_cbc() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_192_cbc() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_256_cbc() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
