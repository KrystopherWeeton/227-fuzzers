; ModuleID = '../../third_party/webrtc/common_audio/vad/vad_core.c'
source_filename = "../../third_party/webrtc/common_audio/vad/vad_core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VadInstT_ = type { i32, [4 x i32], %struct.WebRtcSpl_State48khzTo8khz, [12 x i16], [12 x i16], [12 x i16], [12 x i16], i32, i16, i16, [96 x i16], [96 x i16], [6 x i16], [5 x i16], [5 x i16], [4 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], i32 }
%struct.WebRtcSpl_State48khzTo8khz = type { [8 x i32], [16 x i32], [8 x i32], [8 x i32] }

@kNoiseDataMeans = internal unnamed_addr constant [12 x i16] [i16 6738, i16 4892, i16 7065, i16 6715, i16 6771, i16 3369, i16 7646, i16 3863, i16 7820, i16 7266, i16 5020, i16 4362], align 16
@kSpeechDataMeans = internal unnamed_addr constant [12 x i16] [i16 8306, i16 10085, i16 10078, i16 11823, i16 11843, i16 6309, i16 9473, i16 9571, i16 10879, i16 7581, i16 8180, i16 7483], align 16
@kNoiseDataStds = internal unnamed_addr constant [12 x i16] [i16 378, i16 1064, i16 493, i16 582, i16 688, i16 593, i16 474, i16 697, i16 475, i16 688, i16 421, i16 455], align 16
@kSpeechDataStds = internal unnamed_addr constant [12 x i16] [i16 555, i16 505, i16 567, i16 524, i16 585, i16 1231, i16 509, i16 828, i16 492, i16 1540, i16 1079, i16 850], align 16
@kLocalThresholdQ = internal unnamed_addr constant [3 x i16] [i16 24, i16 21, i16 24], align 2
@kGlobalThresholdQ = internal unnamed_addr constant [3 x i16] [i16 57, i16 48, i16 57], align 2
@kOverHangMax1LBR = internal unnamed_addr constant [3 x i16] [i16 8, i16 4, i16 3], align 2
@kOverHangMax2LBR = internal unnamed_addr constant [3 x i16] [i16 14, i16 7, i16 5], align 2
@kLocalThresholdLBR = internal unnamed_addr constant [3 x i16] [i16 37, i16 32, i16 37], align 2
@kGlobalThresholdLBR = internal unnamed_addr constant [3 x i16] [i16 100, i16 80, i16 100], align 2
@kLocalThresholdAGG = internal unnamed_addr constant [3 x i16] [i16 82, i16 78, i16 82], align 2
@kGlobalThresholdAGG = internal unnamed_addr constant [3 x i16] [i16 285, i16 260, i16 285], align 2
@kOverHangMax1VAG = internal unnamed_addr constant [3 x i16] [i16 6, i16 3, i16 2], align 2
@kOverHangMax2VAG = internal unnamed_addr constant [3 x i16] [i16 9, i16 5, i16 3], align 2
@kLocalThresholdVAG = internal unnamed_addr constant [3 x i16] [i16 94, i16 94, i16 94], align 2
@kGlobalThresholdVAG = internal unnamed_addr constant [3 x i16] [i16 1100, i16 1050, i16 1100], align 2
@kNoiseDataWeights = internal unnamed_addr constant [12 x i16] [i16 34, i16 62, i16 72, i16 66, i16 53, i16 25, i16 94, i16 66, i16 56, i16 62, i16 75, i16 103], align 16
@kSpeechDataWeights = internal unnamed_addr constant [12 x i16] [i16 48, i16 82, i16 45, i16 87, i16 50, i16 47, i16 80, i16 46, i16 83, i16 41, i16 78, i16 81], align 16
@kSpectrumWeight = internal unnamed_addr constant [6 x i16] [i16 6, i16 8, i16 10, i16 12, i16 14, i16 16], align 2
@kMinimumMean = internal unnamed_addr constant [2 x i16] [i16 640, i16 768], align 2
@kMinimumDifference = internal unnamed_addr constant [6 x i16] [i16 544, i16 544, i16 576, i16 576, i16 576, i16 576], align 2
@kMaximumSpeech = internal unnamed_addr constant [6 x i16] [i16 11392, i16 11392, i16 11520, i16 11520, i16 11520, i16 11520], align 2
@kMaximumNoise = internal unnamed_addr constant [6 x i16] [i16 9216, i16 9088, i16 8960, i16 8832, i16 8704, i16 8576], align 2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_InitCore(%struct.VadInstT_*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VadInstT_* %0, null
  br i1 %2, label %61, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 7
  %6 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 1, i64 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 2
  %9 = bitcast i32* %5 to i64*
  store i64 0, i64* %9, align 4
  tail call void @WebRtcSpl_ResetResample48khzTo8khz(%struct.WebRtcSpl_State48khzTo8khz* %8) #4
  %10 = getelementptr %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 0
  %11 = bitcast i16* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %11, i8* align 16 bitcast ([12 x i16]* @kNoiseDataMeans to i8*), i64 24, i1 false)
  %12 = getelementptr %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 0
  %13 = bitcast i16* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %13, i8* align 16 bitcast ([12 x i16]* @kSpeechDataMeans to i8*), i64 24, i1 false)
  %14 = getelementptr %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 5, i64 0
  %15 = bitcast i16* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %15, i8* align 16 bitcast ([12 x i16]* @kNoiseDataStds to i8*), i64 24, i1 false)
  %16 = getelementptr %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 6, i64 0
  %17 = bitcast i16* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %17, i8* align 16 bitcast ([12 x i16]* @kSpeechDataStds to i8*), i64 24, i1 false)
  %18 = getelementptr %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 10, i64 0
  %19 = bitcast i16* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %19, i8 0, i64 192, i1 false)
  %20 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 0
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 8
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 16
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 24
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 32
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 40
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 48
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 56
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 64
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 72
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 80
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 11, i64 88
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000, i16 10000>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 0
  %45 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 0
  %46 = bitcast i16* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %46, i8 0, i64 28, i1 false)
  store i16 1600, i16* %45, align 2
  %47 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 1
  store i16 1600, i16* %47, align 2
  %48 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 2
  store i16 1600, i16* %48, align 2
  %49 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 3
  store i16 1600, i16* %49, align 2
  %50 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 4
  store i16 1600, i16* %50, align 2
  %51 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 12, i64 5
  store i16 1600, i16* %51, align 2
  %52 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %53 = bitcast i16* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 2 bitcast ([3 x i16]* @kOverHangMax1LBR to i8*), i64 6, i1 false) #4
  %54 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %55 = bitcast i16* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 bitcast ([3 x i16]* @kOverHangMax2LBR to i8*), i64 6, i1 false) #4
  %56 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %57 = bitcast i16* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 2 bitcast ([3 x i16]* @kLocalThresholdQ to i8*), i64 6, i1 false) #4
  %58 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  %59 = bitcast i16* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %59, i8* align 2 bitcast ([3 x i16]* @kGlobalThresholdQ to i8*), i64 6, i1 false) #4
  %60 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 20
  store i32 42, i32* %60, align 4
  br label %61

61:                                               ; preds = %1, %3
  %62 = phi i32 [ 0, %3 ], [ -1, %1 ]
  ret i32 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @WebRtcSpl_ResetResample48khzTo8khz(%struct.WebRtcSpl_State48khzTo8khz*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_set_mode_core(%struct.VadInstT_* nocapture, i32) local_unnamed_addr #0 {
  switch i32 %1, label %39 [
    i32 0, label %3
    i32 1, label %12
    i32 2, label %21
    i32 3, label %30
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %5 = bitcast i16* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 2 bitcast ([3 x i16]* @kOverHangMax1LBR to i8*), i64 6, i1 false)
  %6 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %7 = bitcast i16* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %7, i8* align 2 bitcast ([3 x i16]* @kOverHangMax2LBR to i8*), i64 6, i1 false)
  %8 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %9 = bitcast i16* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 2 bitcast ([3 x i16]* @kLocalThresholdQ to i8*), i64 6, i1 false)
  %10 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  %11 = bitcast i16* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %11, i8* align 2 bitcast ([3 x i16]* @kGlobalThresholdQ to i8*), i64 6, i1 false)
  br label %39

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %14 = bitcast i16* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 2 bitcast ([3 x i16]* @kOverHangMax1LBR to i8*), i64 6, i1 false)
  %15 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %16 = bitcast i16* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %16, i8* align 2 bitcast ([3 x i16]* @kOverHangMax2LBR to i8*), i64 6, i1 false)
  %17 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %18 = bitcast i16* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 2 bitcast ([3 x i16]* @kLocalThresholdLBR to i8*), i64 6, i1 false)
  %19 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  %20 = bitcast i16* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %20, i8* align 2 bitcast ([3 x i16]* @kGlobalThresholdLBR to i8*), i64 6, i1 false)
  br label %39

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %23 = bitcast i16* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 2 bitcast ([3 x i16]* @kOverHangMax1VAG to i8*), i64 6, i1 false)
  %24 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %25 = bitcast i16* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %25, i8* align 2 bitcast ([3 x i16]* @kOverHangMax2VAG to i8*), i64 6, i1 false)
  %26 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %27 = bitcast i16* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 2 bitcast ([3 x i16]* @kLocalThresholdAGG to i8*), i64 6, i1 false)
  %28 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  %29 = bitcast i16* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %29, i8* align 2 bitcast ([3 x i16]* @kGlobalThresholdAGG to i8*), i64 6, i1 false)
  br label %39

30:                                               ; preds = %2
  %31 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %32 = bitcast i16* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 2 bitcast ([3 x i16]* @kOverHangMax1VAG to i8*), i64 6, i1 false)
  %33 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %34 = bitcast i16* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %34, i8* align 2 bitcast ([3 x i16]* @kOverHangMax2VAG to i8*), i64 6, i1 false)
  %35 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %36 = bitcast i16* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 2 bitcast ([3 x i16]* @kLocalThresholdVAG to i8*), i64 6, i1 false)
  %37 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  %38 = bitcast i16* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %38, i8* align 2 bitcast ([3 x i16]* @kGlobalThresholdVAG to i8*), i64 6, i1 false)
  br label %39

39:                                               ; preds = %2, %30, %21, %12, %3
  %40 = phi i32 [ 0, %30 ], [ 0, %21 ], [ 0, %12 ], [ 0, %3 ], [ -1, %2 ]
  ret i32 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_CalcVad48khz(%struct.VadInstT_*, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca [240 x i16], align 16
  %5 = alloca [736 x i32], align 16
  %6 = bitcast [240 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 480, i1 false)
  %7 = bitcast [736 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2944, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 2944, i1 false)
  %8 = udiv i64 %2, 480
  %9 = icmp ugt i64 %2, 479
  br i1 %9, label %10, label %19

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 2
  %12 = getelementptr inbounds [736 x i32], [736 x i32]* %5, i64 0, i64 0
  br label %13

13:                                               ; preds = %10, %13
  %14 = phi i64 [ 0, %10 ], [ %17, %13 ]
  %15 = mul nuw nsw i64 %14, 80
  %16 = getelementptr inbounds [240 x i16], [240 x i16]* %4, i64 0, i64 %15
  call void @WebRtcSpl_Resample48khzTo8khz(i16* %1, i16* %16, %struct.WebRtcSpl_State48khzTo8khz* %11, i32* nonnull %12) #4
  %17 = add nuw nsw i64 %14, 1
  %18 = icmp ult i64 %17, %8
  br i1 %18, label %13, label %19

19:                                               ; preds = %13, %3
  %20 = getelementptr inbounds [240 x i16], [240 x i16]* %4, i64 0, i64 0
  %21 = udiv i64 %2, 6
  %22 = call i32 @WebRtcVad_CalcVad8khz(%struct.VadInstT_* %0, i16* nonnull %20, i64 %21)
  call void @llvm.lifetime.end.p0i8(i64 2944, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %6) #4
  ret i32 %22
}

declare void @WebRtcSpl_Resample48khzTo8khz(i16*, i16*, %struct.WebRtcSpl_State48khzTo8khz*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_CalcVad8khz(%struct.VadInstT_*, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca [12 x i16], align 16
  %5 = alloca [12 x i16], align 16
  %6 = alloca [12 x i16], align 16
  %7 = alloca [12 x i16], align 16
  %8 = alloca [6 x i16], align 2
  %9 = bitcast [6 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %9) #4
  %10 = getelementptr inbounds [6 x i16], [6 x i16]* %8, i64 0, i64 0
  %11 = bitcast [6 x i16]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %11, i8 -86, i64 12, i1 false)
  %12 = call signext i16 @WebRtcVad_CalculateFeatures(%struct.VadInstT_* %0, i16* %1, i64 %2, i16* nonnull %10) #4
  %13 = bitcast [12 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #4
  %14 = bitcast [12 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 24, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #4
  %15 = bitcast [12 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 24, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 24, i1 false) #4
  %16 = bitcast [12 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 24, i1 false) #4
  switch i64 %2, label %27 [
    i64 80, label %17
    i64 160, label %22
  ]

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 0
  %19 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 0
  %20 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 0
  %21 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 0
  br label %32

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 1
  %24 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 1
  %25 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 1
  %26 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 1
  br label %32

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 16, i64 2
  %29 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 17, i64 2
  %30 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 18, i64 2
  %31 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 19, i64 2
  br label %32

32:                                               ; preds = %27, %22, %17
  %33 = phi i16* [ %18, %17 ], [ %23, %22 ], [ %28, %27 ]
  %34 = phi i16* [ %19, %17 ], [ %24, %22 ], [ %29, %27 ]
  %35 = phi i16* [ %20, %17 ], [ %25, %22 ], [ %30, %27 ]
  %36 = phi i16* [ %21, %17 ], [ %26, %22 ], [ %31, %27 ]
  %37 = load i16, i16* %36, align 2
  %38 = load i16, i16* %34, align 2
  %39 = load i16, i16* %33, align 2
  %40 = icmp sgt i16 %12, 10
  br i1 %40, label %41, label %413

41:                                               ; preds = %32
  %42 = load i16, i16* %35, align 2
  %43 = sext i16 %42 to i32
  br label %44

44:                                               ; preds = %147, %41
  %45 = phi i64 [ 0, %41 ], [ %148, %147 ]
  %46 = phi i32 [ 0, %41 ], [ %119, %147 ]
  %47 = phi i16 [ 0, %41 ], [ %122, %147 ]
  %48 = getelementptr inbounds [6 x i16], [6 x i16]* %8, i64 0, i64 %45
  %49 = load i16, i16* %48, align 2
  %50 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 %45
  %51 = load i16, i16* %50, align 2
  %52 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 5, i64 %45
  %53 = load i16, i16* %52, align 2
  %54 = getelementptr inbounds [12 x i16], [12 x i16]* %4, i64 0, i64 %45
  %55 = call i32 @WebRtcVad_GaussianProbability(i16 signext %49, i16 signext %51, i16 signext %53, i16* %54) #4
  %56 = getelementptr inbounds [12 x i16], [12 x i16]* @kNoiseDataWeights, i64 0, i64 %45
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %55, %58
  %60 = load i16, i16* %48, align 2
  %61 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 %45
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 6, i64 %45
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds [12 x i16], [12 x i16]* %5, i64 0, i64 %45
  %66 = call i32 @WebRtcVad_GaussianProbability(i16 signext %60, i16 signext %62, i16 signext %64, i16* %65) #4
  %67 = getelementptr inbounds [12 x i16], [12 x i16]* @kSpeechDataWeights, i64 0, i64 %45
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %66, %69
  %71 = add nuw nsw i64 %45, 6
  %72 = load i16, i16* %48, align 2
  %73 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 %71
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 5, i64 %71
  %76 = load i16, i16* %75, align 2
  %77 = getelementptr inbounds [12 x i16], [12 x i16]* %4, i64 0, i64 %71
  %78 = call i32 @WebRtcVad_GaussianProbability(i16 signext %72, i16 signext %74, i16 signext %76, i16* %77) #4
  %79 = getelementptr inbounds [12 x i16], [12 x i16]* @kNoiseDataWeights, i64 0, i64 %71
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = mul nsw i32 %78, %81
  %83 = add nsw i32 %82, %59
  %84 = load i16, i16* %48, align 2
  %85 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 %71
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 6, i64 %71
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds [12 x i16], [12 x i16]* %5, i64 0, i64 %71
  %90 = call i32 @WebRtcVad_GaussianProbability(i16 signext %84, i16 signext %86, i16 signext %88, i16* %89) #4
  %91 = getelementptr inbounds [12 x i16], [12 x i16]* @kSpeechDataWeights, i64 0, i64 %71
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %90, %93
  %95 = add nsw i32 %94, %70
  %96 = icmp eq i32 %83, 0
  br i1 %96, label %102, label %97

97:                                               ; preds = %44
  %98 = ashr i32 %83, 31
  %99 = xor i32 %98, %83
  %100 = call i32 @llvm.ctlz.i32(i32 %99, i1 false) #4, !range !2
  %101 = add nsw i32 %100, -1
  br label %102

102:                                              ; preds = %97, %44
  %103 = phi i32 [ %101, %97 ], [ 0, %44 ]
  %104 = icmp eq i32 %95, 0
  br i1 %104, label %110, label %105

105:                                              ; preds = %102
  %106 = ashr i32 %95, 31
  %107 = xor i32 %106, %95
  %108 = call i32 @llvm.ctlz.i32(i32 %107, i1 false) #4, !range !2
  %109 = add nsw i32 %108, -1
  br label %110

110:                                              ; preds = %105, %102
  %111 = phi i32 [ %109, %105 ], [ 0, %102 ]
  %112 = select i1 %96, i32 31, i32 %103
  %113 = select i1 %104, i32 31, i32 %111
  %114 = sub nsw i32 %112, %113
  %115 = getelementptr inbounds [6 x i16], [6 x i16]* @kSpectrumWeight, i64 0, i64 %45
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = mul nsw i32 %114, %117
  %119 = add nsw i32 %118, %46
  %120 = shl nsw i32 %114, 2
  %121 = icmp sgt i32 %120, %43
  %122 = select i1 %121, i16 1, i16 %47
  %123 = lshr i32 %83, 12
  %124 = trunc i32 %123 to i16
  %125 = icmp sgt i16 %124, 0
  br i1 %125, label %126, label %133

126:                                              ; preds = %110
  %127 = shl i32 %59, 2
  %128 = and i32 %127, -16384
  %129 = call i32 @WebRtcSpl_DivW32W16(i32 %128, i16 signext %124) #4
  %130 = trunc i32 %129 to i16
  %131 = sub i16 16384, %130
  %132 = getelementptr inbounds [12 x i16], [12 x i16]* %6, i64 0, i64 %71
  store i16 %131, i16* %132, align 2
  br label %133

133:                                              ; preds = %126, %110
  %134 = phi i16 [ %130, %126 ], [ 16384, %110 ]
  %135 = getelementptr inbounds [12 x i16], [12 x i16]* %6, i64 0, i64 %45
  store i16 %134, i16* %135, align 2
  %136 = lshr i32 %95, 12
  %137 = trunc i32 %136 to i16
  %138 = icmp sgt i16 %137, 0
  br i1 %138, label %139, label %147

139:                                              ; preds = %133
  %140 = shl i32 %70, 2
  %141 = and i32 %140, -16384
  %142 = call i32 @WebRtcSpl_DivW32W16(i32 %141, i16 signext %137) #4
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds [12 x i16], [12 x i16]* %7, i64 0, i64 %45
  store i16 %143, i16* %144, align 2
  %145 = sub i16 16384, %143
  %146 = getelementptr inbounds [12 x i16], [12 x i16]* %7, i64 0, i64 %71
  store i16 %145, i16* %146, align 2
  br label %147

147:                                              ; preds = %139, %133
  %148 = add nuw nsw i64 %45, 1
  %149 = icmp eq i64 %148, 6
  br i1 %149, label %150, label %44

150:                                              ; preds = %147
  %151 = sext i16 %37 to i32
  %152 = icmp sge i32 %119, %151
  %153 = zext i1 %152 to i16
  %154 = or i16 %122, %153
  %155 = icmp ne i16 %154, 0
  br label %156

156:                                              ; preds = %405, %150
  %157 = phi i64 [ 0, %150 ], [ %406, %405 ]
  %158 = phi i16 [ 12800, %150 ], [ %379, %405 ]
  %159 = getelementptr inbounds [6 x i16], [6 x i16]* %8, i64 0, i64 %157
  %160 = load i16, i16* %159, align 2
  %161 = trunc i64 %157 to i32
  %162 = call signext i16 @WebRtcVad_FindMinimum(%struct.VadInstT_* %0, i16 signext %160, i32 %161) #4
  %163 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 %157
  %164 = getelementptr inbounds [12 x i16], [12 x i16]* @kNoiseDataWeights, i64 0, i64 %157
  %165 = load i16, i16* %163, align 2
  %166 = sext i16 %165 to i32
  %167 = load i16, i16* %164, align 2
  %168 = sext i16 %167 to i32
  %169 = mul nsw i32 %168, %166
  %170 = getelementptr inbounds i16, i16* %163, i64 6
  %171 = load i16, i16* %170, align 2
  %172 = sext i16 %171 to i32
  %173 = getelementptr inbounds i16, i16* %164, i64 6
  %174 = load i16, i16* %173, align 2
  %175 = sext i16 %174 to i32
  %176 = mul nsw i32 %175, %172
  %177 = add nsw i32 %176, %169
  %178 = sext i16 %162 to i32
  %179 = shl nsw i32 %178, 4
  %180 = lshr i32 %177, 6
  %181 = sub nsw i32 %179, %180
  %182 = shl i32 %181, 16
  %183 = ashr exact i32 %182, 16
  %184 = mul nsw i32 %183, 19712
  %185 = lshr i32 %184, 16
  %186 = trunc i32 %185 to i16
  %187 = add i16 %158, 640
  %188 = sub i32 72, %161
  br label %189

189:                                              ; preds = %299, %156
  %190 = phi i64 [ 0, %156 ], [ %312, %299 ]
  %191 = phi i32 [ 0, %156 ], [ %313, %299 ]
  %192 = mul nuw nsw i64 %190, 6
  %193 = add nuw nsw i64 %192, %157
  %194 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 %193
  %197 = load i16, i16* %196, align 2
  %198 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 5, i64 %193
  %199 = load i16, i16* %198, align 2
  %200 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 6, i64 %193
  %201 = load i16, i16* %200, align 2
  br i1 %155, label %216, label %202

202:                                              ; preds = %189
  %203 = getelementptr inbounds [12 x i16], [12 x i16]* %6, i64 0, i64 %193
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = getelementptr inbounds [12 x i16], [12 x i16]* %4, i64 0, i64 %193
  %207 = load i16, i16* %206, align 2
  %208 = sext i16 %207 to i32
  %209 = shl nsw i32 %205, 5
  %210 = mul i32 %209, %208
  %211 = ashr i32 %210, 16
  %212 = mul nsw i32 %211, 655
  %213 = ashr i32 %212, 22
  %214 = trunc i32 %213 to i16
  %215 = add i16 %195, %214
  br label %216

216:                                              ; preds = %202, %189
  %217 = phi i16 [ %195, %189 ], [ %215, %202 ]
  %218 = add i16 %217, %186
  %219 = trunc i32 %191 to i16
  %220 = shl i16 %219, 7
  %221 = add nuw nsw i16 %220, 640
  %222 = icmp slt i16 %218, %221
  %223 = select i1 %222, i16 %221, i16 %218
  %224 = add nuw nsw i32 %188, %191
  %225 = trunc i32 %224 to i16
  %226 = shl i16 %225, 7
  %227 = icmp sgt i16 %223, %226
  %228 = select i1 %227, i16 %226, i16 %223
  store i16 %228, i16* %194, align 2
  br i1 %155, label %229, label %274

229:                                              ; preds = %216
  %230 = getelementptr inbounds [12 x i16], [12 x i16]* %7, i64 0, i64 %193
  %231 = load i16, i16* %230, align 2
  %232 = sext i16 %231 to i32
  %233 = getelementptr inbounds [12 x i16], [12 x i16]* %5, i64 0, i64 %193
  %234 = load i16, i16* %233, align 2
  %235 = sext i16 %234 to i32
  %236 = shl nsw i32 %232, 5
  %237 = mul i32 %236, %235
  %238 = ashr i32 %237, 16
  %239 = mul nsw i32 %238, 6554
  %240 = ashr i32 %239, 21
  %241 = sext i16 %197 to i32
  %242 = add nsw i32 %240, 1
  %243 = ashr i32 %242, 1
  %244 = trunc i32 %243 to i16
  %245 = add i16 %197, %244
  %246 = getelementptr inbounds [2 x i16], [2 x i16]* @kMinimumMean, i64 0, i64 %190
  %247 = load i16, i16* %246, align 2
  %248 = icmp slt i16 %245, %247
  %249 = select i1 %248, i16 %247, i16 %245
  %250 = icmp sgt i16 %249, %187
  %251 = select i1 %250, i16 %187, i16 %249
  store i16 %251, i16* %196, align 2
  %252 = add nsw i32 %241, 4
  %253 = ashr i32 %252, 3
  %254 = load i16, i16* %159, align 2
  %255 = trunc i32 %253 to i16
  %256 = sub i16 %254, %255
  %257 = sext i16 %256 to i32
  %258 = mul nsw i32 %257, %235
  %259 = ashr i32 %258, 3
  %260 = add nsw i32 %259, -4096
  %261 = ashr i16 %231, 2
  %262 = sext i16 %261 to i32
  %263 = mul nsw i32 %260, %262
  %264 = ashr i32 %263, 4
  %265 = icmp sgt i32 %263, 15
  br i1 %265, label %266, label %269

266:                                              ; preds = %229
  %267 = mul i16 %201, 10
  %268 = call i32 @WebRtcSpl_DivW32W16(i32 %264, i16 signext %267) #4
  br label %299

269:                                              ; preds = %229
  %270 = sub nsw i32 0, %264
  %271 = mul i16 %201, 10
  %272 = call i32 @WebRtcSpl_DivW32W16(i32 %270, i16 signext %271) #4
  %273 = sub i32 0, %272
  br label %299

274:                                              ; preds = %216
  %275 = load i16, i16* %159, align 2
  %276 = ashr i16 %195, 3
  %277 = sub i16 %275, %276
  %278 = getelementptr inbounds [12 x i16], [12 x i16]* %4, i64 0, i64 %193
  %279 = load i16, i16* %278, align 2
  %280 = sext i16 %279 to i32
  %281 = sext i16 %277 to i32
  %282 = mul nsw i32 %280, %281
  %283 = ashr i32 %282, 3
  %284 = add nsw i32 %283, -4096
  %285 = getelementptr inbounds [12 x i16], [12 x i16]* %6, i64 0, i64 %193
  %286 = load i16, i16* %285, align 2
  %287 = sext i16 %286 to i32
  %288 = add nsw i32 %287, 2
  %289 = ashr i32 %288, 2
  %290 = mul nsw i32 %289, %284
  %291 = ashr i32 %290, 14
  %292 = icmp sgt i32 %290, 16383
  br i1 %292, label %293, label %295

293:                                              ; preds = %274
  %294 = call i32 @WebRtcSpl_DivW32W16(i32 %291, i16 signext %199) #4
  br label %299

295:                                              ; preds = %274
  %296 = sub nsw i32 0, %291
  %297 = call i32 @WebRtcSpl_DivW32W16(i32 %296, i16 signext %199) #4
  %298 = sub i32 0, %297
  br label %299

299:                                              ; preds = %293, %295, %266, %269
  %300 = phi i32 [ %268, %266 ], [ %273, %269 ], [ %294, %293 ], [ %298, %295 ]
  %301 = phi i32 [ 8388608, %266 ], [ 8388608, %269 ], [ 2097152, %293 ], [ 2097152, %295 ]
  %302 = phi i32 [ 24, %266 ], [ 24, %269 ], [ 22, %293 ], [ 22, %295 ]
  %303 = phi i16 [ %201, %266 ], [ %201, %269 ], [ %199, %293 ], [ %199, %295 ]
  %304 = phi i16* [ %200, %266 ], [ %200, %269 ], [ %198, %293 ], [ %198, %295 ]
  %305 = shl i32 %300, 16
  %306 = add i32 %305, %301
  %307 = ashr i32 %306, %302
  %308 = trunc i32 %307 to i16
  %309 = add i16 %303, %308
  %310 = icmp sgt i16 %309, 384
  %311 = select i1 %310, i16 %309, i16 384
  store i16 %311, i16* %304, align 2
  %312 = add nuw nsw i64 %190, 1
  %313 = add nuw nsw i32 %191, 1
  %314 = icmp eq i64 %312, 2
  br i1 %314, label %315, label %189

315:                                              ; preds = %299
  %316 = load i16, i16* %163, align 2
  %317 = sext i16 %316 to i32
  %318 = mul nsw i32 %317, %168
  %319 = load i16, i16* %170, align 2
  %320 = sext i16 %319 to i32
  %321 = mul nsw i32 %320, %175
  %322 = add nsw i32 %321, %318
  %323 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 %157
  %324 = getelementptr inbounds [12 x i16], [12 x i16]* @kSpeechDataWeights, i64 0, i64 %157
  %325 = load i16, i16* %323, align 2
  %326 = sext i16 %325 to i32
  %327 = load i16, i16* %324, align 2
  %328 = sext i16 %327 to i32
  %329 = mul nsw i32 %328, %326
  %330 = getelementptr inbounds i16, i16* %323, i64 6
  %331 = load i16, i16* %330, align 2
  %332 = sext i16 %331 to i32
  %333 = getelementptr inbounds i16, i16* %324, i64 6
  %334 = load i16, i16* %333, align 2
  %335 = sext i16 %334 to i32
  %336 = mul nsw i32 %335, %332
  %337 = add nsw i32 %336, %329
  %338 = lshr i32 %337, 9
  %339 = lshr i32 %322, 9
  %340 = sub nsw i32 %338, %339
  %341 = shl i32 %340, 16
  %342 = ashr exact i32 %341, 16
  %343 = getelementptr inbounds [6 x i16], [6 x i16]* @kMinimumDifference, i64 0, i64 %157
  %344 = load i16, i16* %343, align 2
  %345 = sext i16 %344 to i32
  %346 = icmp slt i32 %342, %345
  br i1 %346, label %347, label %371

347:                                              ; preds = %315
  %348 = trunc i32 %342 to i16
  %349 = sub i16 %344, %348
  %350 = sext i16 %349 to i32
  %351 = mul nsw i32 %350, 13
  %352 = lshr i32 %351, 2
  %353 = trunc i32 %352 to i16
  %354 = add i16 %325, %353
  store i16 %354, i16* %323, align 2
  %355 = sext i16 %354 to i32
  %356 = mul nsw i32 %355, %328
  %357 = add i16 %331, %353
  store i16 %357, i16* %330, align 2
  %358 = sext i16 %357 to i32
  %359 = mul nsw i32 %358, %335
  %360 = add nsw i32 %359, %356
  %361 = mul nsw i32 %350, 49152
  %362 = lshr i32 %361, 16
  %363 = trunc i32 %362 to i16
  %364 = sub i16 %316, %363
  store i16 %364, i16* %163, align 2
  %365 = sext i16 %364 to i32
  %366 = mul nsw i32 %365, %168
  %367 = sub i16 %319, %363
  store i16 %367, i16* %170, align 2
  %368 = sext i16 %367 to i32
  %369 = mul nsw i32 %368, %175
  %370 = add nsw i32 %369, %366
  br label %371

371:                                              ; preds = %347, %315
  %372 = phi i16 [ %367, %347 ], [ %319, %315 ]
  %373 = phi i16 [ %364, %347 ], [ %316, %315 ]
  %374 = phi i16 [ %357, %347 ], [ %331, %315 ]
  %375 = phi i16 [ %354, %347 ], [ %325, %315 ]
  %376 = phi i32 [ %370, %347 ], [ %322, %315 ]
  %377 = phi i32 [ %360, %347 ], [ %337, %315 ]
  %378 = getelementptr inbounds [6 x i16], [6 x i16]* @kMaximumSpeech, i64 0, i64 %157
  %379 = load i16, i16* %378, align 2
  %380 = shl i32 %377, 9
  %381 = ashr i32 %380, 16
  %382 = sext i16 %379 to i32
  %383 = icmp sgt i32 %381, %382
  br i1 %383, label %384, label %391

384:                                              ; preds = %371
  %385 = trunc i32 %381 to i16
  %386 = sub i16 %379, %385
  %387 = add i16 %386, %375
  store i16 %387, i16* %323, align 2
  %388 = add nuw nsw i64 %157, 6
  %389 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 4, i64 %388
  %390 = add i16 %374, %386
  store i16 %390, i16* %389, align 2
  br label %391

391:                                              ; preds = %384, %371
  %392 = shl i32 %376, 9
  %393 = ashr i32 %392, 16
  %394 = getelementptr inbounds [6 x i16], [6 x i16]* @kMaximumNoise, i64 0, i64 %157
  %395 = load i16, i16* %394, align 2
  %396 = sext i16 %395 to i32
  %397 = icmp sgt i32 %393, %396
  br i1 %397, label %398, label %405

398:                                              ; preds = %391
  %399 = trunc i32 %393 to i16
  %400 = sub i16 %395, %399
  %401 = add i16 %373, %400
  store i16 %401, i16* %163, align 2
  %402 = add nuw nsw i64 %157, 6
  %403 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 3, i64 %402
  %404 = add i16 %372, %400
  store i16 %404, i16* %403, align 2
  br label %405

405:                                              ; preds = %398, %391
  %406 = add nuw nsw i64 %157, 1
  %407 = icmp eq i64 %406, 6
  br i1 %407, label %408, label %156

408:                                              ; preds = %405
  %409 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 7
  %410 = load i32, i32* %409, align 4
  %411 = add nsw i32 %410, 1
  store i32 %411, i32* %409, align 4
  %412 = icmp eq i16 %154, 0
  br i1 %412, label %413, label %423

413:                                              ; preds = %408, %32
  %414 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 8
  %415 = load i16, i16* %414, align 4
  %416 = icmp sgt i16 %415, 0
  br i1 %416, label %417, label %420

417:                                              ; preds = %413
  %418 = add nuw i16 %415, 2
  %419 = add nsw i16 %415, -1
  store i16 %419, i16* %414, align 4
  br label %420

420:                                              ; preds = %417, %413
  %421 = phi i16 [ %418, %417 ], [ 0, %413 ]
  %422 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 9
  store i16 0, i16* %422, align 2
  br label %432

423:                                              ; preds = %408
  %424 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 9
  %425 = load i16, i16* %424, align 2
  %426 = add i16 %425, 1
  store i16 %426, i16* %424, align 2
  %427 = icmp sgt i16 %426, 6
  br i1 %427, label %428, label %430

428:                                              ; preds = %423
  store i16 6, i16* %424, align 2
  %429 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 8
  store i16 %38, i16* %429, align 4
  br label %432

430:                                              ; preds = %423
  %431 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 8
  store i16 %39, i16* %431, align 4
  br label %432

432:                                              ; preds = %420, %428, %430
  %433 = phi i16 [ %154, %428 ], [ %154, %430 ], [ %421, %420 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #4
  %434 = sext i16 %433 to i32
  %435 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 0
  store i32 %434, i32* %435, align 4
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %9) #4
  ret i32 %434
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_CalcVad32khz(%struct.VadInstT_*, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca [480 x i16], align 16
  %5 = alloca [240 x i16], align 16
  %6 = bitcast [480 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 960, i1 false)
  %7 = bitcast [240 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 480, i1 false)
  %8 = getelementptr inbounds [480 x i16], [480 x i16]* %4, i64 0, i64 0
  %9 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 1, i64 2
  call void @WebRtcVad_Downsampling(i16* %1, i16* nonnull %8, i32* %9, i64 %2) #4
  %10 = lshr i64 %2, 1
  %11 = getelementptr inbounds [240 x i16], [240 x i16]* %5, i64 0, i64 0
  %12 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 1, i64 0
  call void @WebRtcVad_Downsampling(i16* nonnull %8, i16* nonnull %11, i32* %12, i64 %10) #4
  %13 = lshr i64 %2, 2
  %14 = call i32 @WebRtcVad_CalcVad8khz(%struct.VadInstT_* %0, i16* nonnull %11, i64 %13)
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %6) #4
  ret i32 %14
}

declare void @WebRtcVad_Downsampling(i16*, i16*, i32*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcVad_CalcVad16khz(%struct.VadInstT_*, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca [240 x i16], align 16
  %5 = bitcast [240 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 480, i1 false)
  %6 = getelementptr inbounds [240 x i16], [240 x i16]* %4, i64 0, i64 0
  %7 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 1, i64 0
  call void @WebRtcVad_Downsampling(i16* %1, i16* nonnull %6, i32* %7, i64 %2) #4
  %8 = lshr i64 %2, 1
  %9 = call i32 @WebRtcVad_CalcVad8khz(%struct.VadInstT_* %0, i16* nonnull %6, i64 %8)
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %5) #4
  ret i32 %9
}

declare signext i16 @WebRtcVad_CalculateFeatures(%struct.VadInstT_*, i16*, i64, i16*) local_unnamed_addr #2

declare i32 @WebRtcVad_GaussianProbability(i16 signext, i16 signext, i16 signext, i16*) local_unnamed_addr #2

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcVad_FindMinimum(%struct.VadInstT_*, i16 signext, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
