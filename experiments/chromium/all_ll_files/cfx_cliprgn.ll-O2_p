; ModuleID = '../../third_party/pdfium/core/fxge/cfx_cliprgn.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_cliprgn.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ClipRgn = type { i8, %struct.FX_RECT, %"class.fxcrt::RetainPtr" }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.4", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }

@_ZN11CFX_ClipRgnC1Eii = hidden unnamed_addr alias void (%class.CFX_ClipRgn*, i32, i32), void (%class.CFX_ClipRgn*, i32, i32)* @_ZN11CFX_ClipRgnC2Eii
@_ZN11CFX_ClipRgnC1ERKS_ = hidden unnamed_addr alias void (%class.CFX_ClipRgn*, %class.CFX_ClipRgn*), void (%class.CFX_ClipRgn*, %class.CFX_ClipRgn*)* @_ZN11CFX_ClipRgnC2ERKS_
@_ZN11CFX_ClipRgnD1Ev = hidden unnamed_addr alias void (%class.CFX_ClipRgn*), void (%class.CFX_ClipRgn*)* @_ZN11CFX_ClipRgnD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN11CFX_ClipRgnC2Eii(%class.CFX_ClipRgn* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 0
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 2
  store i32 %1, i32* %7, align 4
  %8 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 3
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2
  %10 = bitcast %"class.fxcrt::RetainPtr"* %9 to i64*
  store i64 0, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_ClipRgnC2ERKS_(%class.CFX_ClipRgn* nocapture, %class.CFX_ClipRgn* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 20, i1 false)
  %5 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %6, align 8
  %8 = ptrtoint %class.CFX_DIBitmap* %7 to i64
  %9 = bitcast %"class.fxcrt::RetainPtr"* %5 to i64*
  store i64 %8, i64* %9, align 8
  %10 = icmp eq %class.CFX_DIBitmap* %7, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %7, i64 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, 1
  store i64 %14, i64* %12, align 8
  br label %15

15:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_ClipRgnD2Ev(%class.CFX_ClipRgn* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %2, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %2, align 8
  %4 = icmp eq %class.CFX_DIBitmap* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %3, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %3, i64 0, i32 0, i32 0
  %12 = bitcast %class.CFX_DIBitmap* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_ClipRgn13IntersectRectERK7FX_RECT(%class.CFX_ClipRgn*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1
  tail call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* %7, %struct.FX_RECT* dereferenceable(16) %1) #5
  br label %21

8:                                                ; preds = %2
  %9 = bitcast %struct.FX_RECT* %1 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %1, i64 0, i32 2
  %12 = bitcast i32* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1
  %15 = bitcast %struct.FX_RECT* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 2
  %18 = bitcast i32* %17 to i64*
  %19 = load i64, i64* %18, align 4
  %20 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2
  tail call void @_ZN11CFX_ClipRgn17IntersectMaskRectE7FX_RECTS0_RKN5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_ClipRgn* %0, i64 %10, i64 %13, i64 %16, i64 %19, %"class.fxcrt::RetainPtr"* dereferenceable(8) %20)
  br label %21

21:                                               ; preds = %8, %6
  ret void
}

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_ClipRgn17IntersectMaskRectE7FX_RECTS0_RKN5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_ClipRgn*, i64, i64, i64, i64, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.FX_RECT*
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %3, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 0
  store i8 1, i8* %11, align 8
  %12 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1
  %13 = bitcast %struct.FX_RECT* %12 to i64*
  store i64 %1, i64* %13, align 4
  %14 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 2
  %15 = bitcast i32* %14 to i64*
  store i64 %2, i64* %15, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* %12, %struct.FX_RECT* nonnull dereferenceable(16) %8) #5
  %16 = load i32, i32* %14, align 4
  %17 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %12, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %6
  %21 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %22, %24
  br i1 %25, label %27, label %26

26:                                               ; preds = %20, %6
  store i8 0, i8* %11, align 8
  br label %163

27:                                               ; preds = %20
  %28 = bitcast { i64, i64 }* %7 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %18, %29
  br i1 %30, label %31, label %70

31:                                               ; preds = %27
  %32 = bitcast i64* %10 to i32*
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %16, %33
  br i1 %34, label %35, label %70

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %24, %37
  br i1 %38, label %39, label %70

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %22, %41
  br i1 %42, label %43, label %70

43:                                               ; preds = %39
  %44 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %45 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %44, align 8
  %46 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %46, align 8
  %48 = icmp eq %class.CFX_DIBitmap* %45, %47
  br i1 %48, label %163, label %49

49:                                               ; preds = %43
  %50 = icmp eq %class.CFX_DIBitmap* %47, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %47, i64 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = add nsw i64 %53, 1
  store i64 %54, i64* %52, align 8
  %55 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %44, align 8
  br label %56

56:                                               ; preds = %51, %49
  %57 = phi %class.CFX_DIBitmap* [ %55, %51 ], [ %45, %49 ]
  store %class.CFX_DIBitmap* %47, %class.CFX_DIBitmap** %44, align 8
  %58 = icmp eq %class.CFX_DIBitmap* %57, null
  br i1 %58, label %163, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %57, i64 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = add nsw i64 %61, -1
  store i64 %62, i64* %60, align 8
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %163

64:                                               ; preds = %59
  %65 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %57, i64 0, i32 0, i32 0
  %66 = bitcast %class.CFX_DIBitmap* %57 to void (%"class.fxcrt::Retainable"*)***
  %67 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %67, i64 1
  %69 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %68, align 8
  call void %69(%"class.fxcrt::Retainable"* nonnull %65) #5
  br label %163

70:                                               ; preds = %27, %31, %35, %39
  %71 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %72 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %71, align 8
  %73 = icmp eq %class.CFX_DIBitmap* %72, null
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = add nsw i64 %76, 1
  store i64 %77, i64* %75, align 8
  br label %78

78:                                               ; preds = %70, %74
  %79 = call i8* @_Znwm(i64 80) #6, !noalias !3
  %80 = bitcast i8* %79 to %class.CFX_DIBitmap*
  call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %80) #5, !noalias !3
  %81 = ptrtoint i8* %79 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 8
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 8, !noalias !3
  %85 = add nsw i64 %84, 1
  store i64 %85, i64* %83, align 8, !noalias !3
  %86 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2
  %87 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %86, i64 0, i32 0, i32 0, i32 0, i32 0
  %88 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %87, align 8
  %89 = bitcast %"class.fxcrt::RetainPtr"* %86 to i64*
  store i64 %81, i64* %89, align 8
  %90 = icmp eq %class.CFX_DIBitmap* %88, null
  br i1 %90, label %102, label %91

91:                                               ; preds = %78
  %92 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %88, i64 0, i32 0, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add nsw i64 %93, -1
  store i64 %94, i64* %92, align 8
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %102

96:                                               ; preds = %91
  %97 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %88, i64 0, i32 0, i32 0
  %98 = bitcast %class.CFX_DIBitmap* %88 to void (%"class.fxcrt::Retainable"*)***
  %99 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %98, align 8
  %100 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %99, i64 1
  %101 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %100, align 8
  call void %101(%"class.fxcrt::Retainable"* nonnull %97) #5
  br label %102

102:                                              ; preds = %96, %91, %78
  %103 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %87, align 8
  %104 = load i32, i32* %14, align 4
  %105 = load i32, i32* %17, align 4
  %106 = sub nsw i32 %104, %105
  %107 = load i32, i32* %21, align 4
  %108 = load i32, i32* %23, align 4
  %109 = sub nsw i32 %107, %108
  %110 = call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* %103, i32 %106, i32 %109, i16 zeroext 264) #5
  %111 = load i32, i32* %23, align 4
  %112 = load i32, i32* %21, align 4
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %114, label %121

114:                                              ; preds = %102
  %115 = load i32, i32* %17, align 4
  %116 = load i32, i32* %28, align 8
  %117 = sub nsw i32 %115, %116
  %118 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 1
  %119 = bitcast %class.CFX_DIBitmap* %72 to i8* (%class.CFX_DIBitmap*, i32)***
  %120 = sext i32 %117 to i64
  br label %133

121:                                              ; preds = %133, %102
  br i1 %73, label %163, label %122

122:                                              ; preds = %121
  %123 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0, i32 0, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = add nsw i64 %124, -1
  store i64 %125, i64* %123, align 8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %163

127:                                              ; preds = %122
  %128 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0, i32 0
  %129 = bitcast %class.CFX_DIBitmap* %72 to void (%"class.fxcrt::Retainable"*)***
  %130 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %129, align 8
  %131 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %130, i64 1
  %132 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %131, align 8
  call void %132(%"class.fxcrt::Retainable"* nonnull %128) #5
  br label %163

133:                                              ; preds = %114, %133
  %134 = phi i32 [ %111, %114 ], [ %160, %133 ]
  %135 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %87, align 8
  %136 = bitcast %class.CFX_DIBitmap* %135 to i8* (%class.CFX_DIBitmap*)***
  %137 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %136, align 8
  %138 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %137, i64 2
  %139 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %138, align 8
  %140 = call i8* %139(%class.CFX_DIBitmap* %135) #5
  %141 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %87, align 8
  %142 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %141, i64 0, i32 0, i32 4
  %143 = load i32, i32* %142, align 4
  %144 = load i32, i32* %23, align 4
  %145 = sub nsw i32 %134, %144
  %146 = mul i32 %145, %143
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %140, i64 %147
  %149 = load i32, i32* %118, align 4
  %150 = sub nsw i32 %134, %149
  %151 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %119, align 8
  %152 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %151, i64 3
  %153 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %152, align 8
  %154 = call i8* %153(%class.CFX_DIBitmap* %72, i32 %150) #5
  %155 = getelementptr inbounds i8, i8* %154, i64 %120
  %156 = load i32, i32* %14, align 4
  %157 = load i32, i32* %17, align 4
  %158 = sub nsw i32 %156, %157
  %159 = sext i32 %158 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %155, i64 %159, i1 false)
  %160 = add nsw i32 %134, 1
  %161 = load i32, i32* %21, align 4
  %162 = icmp slt i32 %160, %161
  br i1 %162, label %133, label %121

163:                                              ; preds = %127, %122, %121, %64, %59, %56, %43, %26
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap*, i32, i32, i16 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_ClipRgn14IntersectMaskFEiiRKN5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_ClipRgn*, i32, i32, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %5 = alloca %struct.FX_RECT, align 8
  %6 = alloca %struct.FX_RECT, align 4
  %7 = bitcast %struct.FX_RECT* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 0
  %9 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 1
  %10 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 2
  %11 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 3
  %12 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %12, align 8
  %14 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %13, i64 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, %1
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %13, i64 0, i32 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, %2
  store i32 %1, i32* %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %16, i32* %10, align 8
  store i32 %19, i32* %11, align 4
  %20 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 0
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %34

23:                                               ; preds = %4
  %24 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1
  %25 = bitcast %struct.FX_RECT* %24 to i64*
  %26 = load i64, i64* %25, align 4
  %27 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 2
  %28 = bitcast i32* %27 to i64*
  %29 = load i64, i64* %28, align 4
  %30 = bitcast %struct.FX_RECT* %5 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast i32* %10 to i64*
  %33 = load i64, i64* %32, align 8
  tail call void @_ZN11CFX_ClipRgn17IntersectMaskRectE7FX_RECTS0_RKN5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_ClipRgn* %0, i64 %26, i64 %29, i64 %31, i64 %33, %"class.fxcrt::RetainPtr"* dereferenceable(8) %3)
  br label %170

34:                                               ; preds = %4
  %35 = bitcast %struct.FX_RECT* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #5
  %36 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 0
  %37 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 1
  %38 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 2
  %39 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 3
  %40 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1
  %41 = bitcast %struct.FX_RECT* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %35, i8* align 4 %41, i64 16, i1 false)
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %6, %struct.FX_RECT* nonnull dereferenceable(16) %5) #5
  %42 = load i32, i32* %38, align 4
  %43 = load i32, i32* %36, align 4
  %44 = icmp sgt i32 %42, %43
  br i1 %44, label %45, label %49

45:                                               ; preds = %34
  %46 = load i32, i32* %39, align 4
  %47 = load i32, i32* %37, align 4
  %48 = icmp sgt i32 %46, %47
  br i1 %48, label %65, label %49

49:                                               ; preds = %45, %34
  store i8 0, i8* %20, align 8
  %50 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %51 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %50, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %50, align 8
  %52 = icmp eq %class.CFX_DIBitmap* %51, null
  br i1 %52, label %64, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = add nsw i64 %55, -1
  store i64 %56, i64* %54, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %53
  %59 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0
  %60 = bitcast %class.CFX_DIBitmap* %51 to void (%"class.fxcrt::Retainable"*)***
  %61 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %61, i64 1
  %63 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %62, align 8
  call void %63(%"class.fxcrt::Retainable"* nonnull %59) #5
  br label %64

64:                                               ; preds = %49, %53, %58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* nonnull align 4 %35, i64 16, i1 false)
  br label %169

65:                                               ; preds = %45
  %66 = call i8* @_Znwm(i64 80) #6, !noalias !6
  %67 = bitcast i8* %66 to %class.CFX_DIBitmap*
  call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %67) #5, !noalias !6
  %68 = ptrtoint i8* %66 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8, !noalias !6
  %72 = add nsw i64 %71, 1
  store i64 %72, i64* %70, align 8, !noalias !6
  %73 = load i32, i32* %38, align 4
  %74 = load i32, i32* %36, align 4
  %75 = sub nsw i32 %73, %74
  %76 = load i32, i32* %39, align 4
  %77 = load i32, i32* %37, align 4
  %78 = sub nsw i32 %76, %77
  %79 = call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %67, i32 %75, i32 %78, i16 zeroext 264) #5
  %80 = load i32, i32* %37, align 4
  %81 = load i32, i32* %39, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %83, label %91

83:                                               ; preds = %65
  %84 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 1, i32 1
  %86 = bitcast i8* %66 to i8* (%class.CFX_DIBitmap*)***
  %87 = getelementptr inbounds i8, i8* %66, i64 28
  %88 = bitcast i8* %87 to i32*
  %89 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %40, i64 0, i32 0
  %90 = sext i32 %1 to i64
  br label %108

91:                                               ; preds = %140, %65
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* nonnull align 4 %35, i64 16, i1 false)
  %92 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %0, i64 0, i32 2
  %93 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %92, i64 0, i32 0, i32 0, i32 0, i32 0
  %94 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %93, align 8
  %95 = bitcast %"class.fxcrt::RetainPtr"* %92 to i64*
  store i64 %68, i64* %95, align 8
  %96 = icmp eq %class.CFX_DIBitmap* %94, null
  br i1 %96, label %169, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %94, i64 0, i32 0, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = add nsw i64 %99, -1
  store i64 %100, i64* %98, align 8
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %169

102:                                              ; preds = %97
  %103 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %94, i64 0, i32 0, i32 0
  %104 = bitcast %class.CFX_DIBitmap* %94 to void (%"class.fxcrt::Retainable"*)***
  %105 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %105, i64 1
  %107 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %106, align 8
  call void %107(%"class.fxcrt::Retainable"* nonnull %103) #5
  br label %169

108:                                              ; preds = %83, %140
  %109 = phi i32 [ %80, %83 ], [ %141, %140 ]
  %110 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %84, align 8
  %111 = load i32, i32* %85, align 4
  %112 = sub nsw i32 %109, %111
  %113 = bitcast %class.CFX_DIBitmap* %110 to i8* (%class.CFX_DIBitmap*, i32)***
  %114 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %113, align 8
  %115 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %114, i64 3
  %116 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %115, align 8
  %117 = call i8* %116(%class.CFX_DIBitmap* %110, i32 %112) #5
  %118 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %12, align 8
  %119 = sub nsw i32 %109, %2
  %120 = bitcast %class.CFX_DIBitmap* %118 to i8* (%class.CFX_DIBitmap*, i32)***
  %121 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %120, align 8
  %122 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %121, i64 3
  %123 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %122, align 8
  %124 = call i8* %123(%class.CFX_DIBitmap* %118, i32 %119) #5
  %125 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %86, align 8
  %126 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %125, i64 2
  %127 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %126, align 8
  %128 = call i8* %127(%class.CFX_DIBitmap* nonnull %67) #5
  %129 = load i32, i32* %37, align 4
  %130 = sub nsw i32 %109, %129
  %131 = load i32, i32* %88, align 4
  %132 = mul i32 %130, %131
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %128, i64 %133
  %135 = load i32, i32* %36, align 4
  %136 = load i32, i32* %38, align 4
  %137 = icmp slt i32 %135, %136
  br i1 %137, label %138, label %140

138:                                              ; preds = %108
  %139 = sext i32 %135 to i64
  br label %144

140:                                              ; preds = %144, %108
  %141 = add nsw i32 %109, 1
  %142 = load i32, i32* %39, align 4
  %143 = icmp slt i32 %141, %142
  br i1 %143, label %108, label %91

144:                                              ; preds = %167, %138
  %145 = phi i32 [ %135, %138 ], [ %168, %167 ]
  %146 = phi i64 [ %139, %138 ], [ %163, %167 ]
  %147 = load i32, i32* %89, align 4
  %148 = sext i32 %147 to i64
  %149 = sub nsw i64 %146, %148
  %150 = getelementptr inbounds i8, i8* %117, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i16
  %153 = sub nsw i64 %146, %90
  %154 = getelementptr inbounds i8, i8* %124, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i16
  %157 = mul nuw i16 %156, %152
  %158 = udiv i16 %157, 255
  %159 = trunc i16 %158 to i8
  %160 = sext i32 %145 to i64
  %161 = sub nsw i64 %146, %160
  %162 = getelementptr inbounds i8, i8* %134, i64 %161
  store i8 %159, i8* %162, align 1
  %163 = add nsw i64 %146, 1
  %164 = load i32, i32* %38, align 4
  %165 = sext i32 %164 to i64
  %166 = icmp slt i64 %163, %165
  br i1 %166, label %167, label %140

167:                                              ; preds = %144
  %168 = load i32, i32* %36, align 4
  br label %144

169:                                              ; preds = %91, %97, %102, %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #5
  br label %170

170:                                              ; preds = %169, %23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap*) unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!5 = distinct !{!5, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
