; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_detokenize.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_detokenize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TileWorkerData = type { i8*, i32, i32, %struct.vpx_reader, %struct.FRAME_COUNTS, %struct.LoopFilterWorkerData*, %struct.VP9LfSyncData*, [8 x i8], %struct.macroblockd, [1024 x i32], [25600 x i16], %struct.vpx_internal_error_info, [8 x i8] }
%struct.vpx_reader = type { i64, i32, i32, i8*, i8*, void (i8*, i8*, i8*, i32)*, i8*, [9 x i8] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.scan_order = type { i16*, i16*, i16* }

@vp9_cat6_prob_high12 = external local_unnamed_addr constant [18 x i8], align 16
@vp9_cat6_prob = external local_unnamed_addr constant [14 x i8], align 16
@vp9_pareto8_full = external local_unnamed_addr constant [255 x [8 x i8]], align 16
@vp9_cat5_prob = external local_unnamed_addr constant [5 x i8], align 16
@vp9_cat4_prob = external local_unnamed_addr constant [4 x i8], align 16
@vp9_cat3_prob = external local_unnamed_addr constant [3 x i8], align 16
@vp9_cat2_prob = external local_unnamed_addr constant [2 x i8], align 16
@vp9_cat1_prob = external local_unnamed_addr constant [1 x i8], align 16
@vp9_coefband_trans_4x4 = external local_unnamed_addr constant [16 x i8], align 16
@vp9_coefband_trans_8x8plus = external local_unnamed_addr constant [1024 x i8], align 16
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_decode_block_tokens(%struct.TileWorkerData*, i32, %struct.scan_order* nocapture readonly, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %10
  %12 = sext i32 %6 to i64
  %13 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %10, i32 7, i64 %12, i64 0
  %14 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %10, i32 5
  %15 = load i8*, i8** %14, align 8
  %16 = sext i32 %3 to i64
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %10, i32 6
  %19 = load i8*, i8** %18, align 8
  %20 = sext i32 %4 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  switch i8 %5, label %168 [
    i8 0, label %22
    i8 1, label %41
    i8 2, label %84
    i8 3, label %125
  ]

22:                                               ; preds = %7
  %23 = load i8, i8* %17, align 1
  %24 = icmp ne i8 %23, 0
  %25 = zext i1 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = icmp ne i8 %26, 0
  %28 = zext i1 %27 to i32
  %29 = add nuw nsw i32 %28, %25
  %30 = icmp sgt i32 %1, 0
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %11, i64 0, i32 0
  %33 = load i32*, i32** %32, align 8
  %34 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 2
  %37 = load i16*, i16** %36, align 8
  %38 = tail call fastcc i32 @decode_coefs(%struct.macroblockd* %9, i32 %31, i32* %33, i8 zeroext 0, i16* %13, i32 %29, i16* %35, i16* %37, %struct.vpx_reader* %8)
  %39 = icmp sgt i32 %38, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %21, align 1
  store i8 %40, i8* %17, align 1
  br label %168

41:                                               ; preds = %7
  %42 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = icmp ne i32 %43, 0
  %45 = add i32 %3, 2
  %46 = icmp ugt i32 %45, %43
  %47 = and i1 %44, %46
  %48 = sub i32 %45, %43
  %49 = shl i32 %48, 3
  %50 = select i1 %47, i32 %49, i32 0
  %51 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %52, 0
  %54 = add i32 %4, 2
  %55 = icmp ugt i32 %54, %52
  %56 = and i1 %53, %55
  %57 = sub i32 %54, %52
  %58 = shl i32 %57, 3
  %59 = select i1 %56, i32 %58, i32 0
  %60 = bitcast i8* %17 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = icmp ne i16 %61, 0
  %63 = zext i1 %62 to i32
  %64 = bitcast i8* %21 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = icmp ne i16 %65, 0
  %67 = zext i1 %66 to i32
  %68 = add nuw nsw i32 %67, %63
  %69 = icmp sgt i32 %1, 0
  %70 = zext i1 %69 to i32
  %71 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %11, i64 0, i32 0
  %72 = load i32*, i32** %71, align 8
  %73 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 0
  %74 = load i16*, i16** %73, align 8
  %75 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 2
  %76 = load i16*, i16** %75, align 8
  %77 = tail call fastcc i32 @decode_coefs(%struct.macroblockd* %9, i32 %70, i32* %72, i8 zeroext 1, i16* %13, i32 %68, i16* %74, i16* %76, %struct.vpx_reader* %8)
  %78 = icmp sgt i32 %77, 0
  %79 = select i1 %78, i32 257, i32 0
  %80 = lshr i32 %79, %50
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* %60, align 2
  %82 = lshr i32 %79, %59
  %83 = trunc i32 %82 to i16
  store i16 %83, i16* %64, align 2
  br label %168

84:                                               ; preds = %7
  %85 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %86 = load i32, i32* %85, align 8
  %87 = icmp ne i32 %86, 0
  %88 = add i32 %3, 4
  %89 = icmp ugt i32 %88, %86
  %90 = and i1 %87, %89
  %91 = sub i32 %88, %86
  %92 = shl i32 %91, 3
  %93 = select i1 %90, i32 %92, i32 0
  %94 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %95 = load i32, i32* %94, align 4
  %96 = icmp ne i32 %95, 0
  %97 = add i32 %4, 4
  %98 = icmp ugt i32 %97, %95
  %99 = and i1 %96, %98
  %100 = sub i32 %97, %95
  %101 = shl i32 %100, 3
  %102 = select i1 %99, i32 %101, i32 0
  %103 = bitcast i8* %17 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = icmp ne i32 %104, 0
  %106 = zext i1 %105 to i32
  %107 = bitcast i8* %21 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = icmp ne i32 %108, 0
  %110 = zext i1 %109 to i32
  %111 = add nuw nsw i32 %110, %106
  %112 = icmp sgt i32 %1, 0
  %113 = zext i1 %112 to i32
  %114 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %11, i64 0, i32 0
  %115 = load i32*, i32** %114, align 8
  %116 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 0
  %117 = load i16*, i16** %116, align 8
  %118 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 2
  %119 = load i16*, i16** %118, align 8
  %120 = tail call fastcc i32 @decode_coefs(%struct.macroblockd* %9, i32 %113, i32* %115, i8 zeroext 2, i16* %13, i32 %111, i16* %117, i16* %119, %struct.vpx_reader* %8)
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 16843009, i32 0
  %123 = lshr i32 %122, %93
  store i32 %123, i32* %103, align 4
  %124 = lshr i32 %122, %102
  store i32 %124, i32* %107, align 4
  br label %168

125:                                              ; preds = %7
  %126 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %127 = load i32, i32* %126, align 8
  %128 = icmp ne i32 %127, 0
  %129 = add i32 %3, 8
  %130 = icmp ugt i32 %129, %127
  %131 = and i1 %128, %130
  %132 = sub i32 %129, %127
  %133 = shl i32 %132, 3
  %134 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %135 = load i32, i32* %134, align 4
  %136 = icmp ne i32 %135, 0
  %137 = add i32 %4, 8
  %138 = icmp ugt i32 %137, %135
  %139 = and i1 %136, %138
  %140 = sub i32 %137, %135
  %141 = shl i32 %140, 3
  %142 = bitcast i8* %17 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = icmp ne i64 %143, 0
  %145 = zext i1 %144 to i32
  %146 = bitcast i8* %21 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = icmp ne i64 %147, 0
  %149 = zext i1 %148 to i32
  %150 = add nuw nsw i32 %149, %145
  %151 = icmp sgt i32 %1, 0
  %152 = zext i1 %151 to i32
  %153 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %11, i64 0, i32 0
  %154 = load i32*, i32** %153, align 8
  %155 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 0
  %156 = load i16*, i16** %155, align 8
  %157 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %2, i64 0, i32 2
  %158 = load i16*, i16** %157, align 8
  %159 = tail call fastcc i32 @decode_coefs(%struct.macroblockd* %9, i32 %152, i32* %154, i8 zeroext 3, i16* %13, i32 %150, i16* %156, i16* %158, %struct.vpx_reader* %8)
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i64 72340172838076673, i64 0
  %162 = zext i32 %133 to i64
  %163 = select i1 %131, i64 %162, i64 0
  %164 = lshr i64 %161, %163
  store i64 %164, i64* %142, align 8
  %165 = zext i32 %141 to i64
  %166 = select i1 %139, i64 %165, i64 0
  %167 = lshr i64 %161, %166
  store i64 %167, i64* %146, align 8
  br label %168

168:                                              ; preds = %7, %125, %84, %41, %22
  %169 = phi i32 [ %159, %125 ], [ %120, %84 ], [ %77, %41 ], [ %38, %22 ], [ 0, %7 ]
  ret i32 %169
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @decode_coefs(%struct.macroblockd* nocapture readonly, i32, i32* nocapture, i8 zeroext, i16* nocapture readonly, i32, i16* nocapture readonly, i16* nocapture readonly, %struct.vpx_reader*) unnamed_addr #0 {
  %10 = alloca [1024 x i8], align 16
  %11 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 3
  %12 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %11, align 8
  %13 = zext i8 %3 to i32
  %14 = shl nuw nsw i32 %13, 1
  %15 = shl i32 16, %14
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 16
  %17 = load %struct.frame_contexts*, %struct.frame_contexts** %16, align 8
  %18 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 6
  %19 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %18, align 8
  %20 = load %struct.MODE_INFO*, %struct.MODE_INFO** %19, align 8
  %21 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %20, i64 0, i32 8, i64 0
  %22 = load i8, i8* %21, align 4
  %23 = icmp sgt i8 %22, 0
  %24 = zext i8 %3 to i64
  %25 = zext i32 %1 to i64
  %26 = zext i1 %23 to i64
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %27) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 1024, i1 false)
  %28 = icmp eq i8 %3, 3
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 12
  %33 = icmp eq i32 %31, 10
  %34 = select i1 %33, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @vp9_cat6_prob_high12, i64 0, i64 2), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @vp9_cat6_prob, i64 0, i64 0)
  %35 = select i1 %32, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @vp9_cat6_prob_high12, i64 0, i64 0), i8* %34
  %36 = select i1 %33, i64 16, i64 14
  %37 = select i1 %32, i64 18, i64 %36
  %38 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp ne %struct.FRAME_COUNTS* %12, null
  %45 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %12, i64 0, i32 3, i64 %24, i64 %25, i64 %26, i64 0
  %46 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %12, i64 0, i32 4, i64 %24, i64 %25, i64 %26, i64 0
  %47 = select i1 %44, [6 x [4 x i32]]* %45, [6 x [4 x i32]]* inttoptr (i64 -6148914691236517206 to [6 x [4 x i32]]*)
  %48 = select i1 %44, [6 x i32]* %46, [6 x i32]* inttoptr (i64 -6148914691236517206 to [6 x i32]*)
  %49 = icmp sgt i32 %15, 0
  br i1 %49, label %50, label %956

50:                                               ; preds = %9
  %51 = icmp eq i8 %3, 0
  %52 = select i1 %51, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @vp9_coefband_trans_4x4, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @vp9_coefband_trans_8x8plus, i64 0, i64 0)
  %53 = getelementptr inbounds i16, i16* %4, i64 1
  %54 = zext i1 %28 to i64
  %55 = sext i32 %15 to i64
  %56 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_cat4_prob, i64 0, i64 0), align 16
  %57 = zext i8 %56 to i32
  %58 = sub nuw nsw i32 256, %57
  %59 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_cat4_prob, i64 0, i64 1), align 1
  %60 = zext i8 %59 to i32
  %61 = sub nuw nsw i32 256, %60
  %62 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_cat4_prob, i64 0, i64 2), align 2
  %63 = zext i8 %62 to i32
  %64 = sub nuw nsw i32 256, %63
  %65 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_cat4_prob, i64 0, i64 3), align 1
  %66 = zext i8 %65 to i32
  %67 = sub nuw nsw i32 256, %66
  %68 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @vp9_cat3_prob, i64 0, i64 0), align 16
  %69 = zext i8 %68 to i32
  %70 = sub nuw nsw i32 256, %69
  %71 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @vp9_cat3_prob, i64 0, i64 1), align 1
  %72 = zext i8 %71 to i32
  %73 = sub nuw nsw i32 256, %72
  %74 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @vp9_cat3_prob, i64 0, i64 2), align 2
  %75 = zext i8 %74 to i32
  %76 = sub nuw nsw i32 256, %75
  %77 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @vp9_cat2_prob, i64 0, i64 0), align 16
  %78 = zext i8 %77 to i32
  %79 = sub nuw nsw i32 256, %78
  %80 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @vp9_cat2_prob, i64 0, i64 1), align 1
  %81 = zext i8 %80 to i32
  %82 = sub nuw nsw i32 256, %81
  %83 = load i8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @vp9_cat1_prob, i64 0, i64 0), align 16
  %84 = zext i8 %83 to i32
  %85 = sub nuw nsw i32 256, %84
  br label %86

86:                                               ; preds = %50, %921
  %87 = phi i16* [ %4, %50 ], [ %53, %921 ]
  %88 = phi i8* [ %52, %50 ], [ %156, %921 ]
  %89 = phi i32 [ 0, %50 ], [ %933, %921 ]
  %90 = phi i32 [ %5, %50 ], [ %952, %921 ]
  %91 = phi i32 [ %43, %50 ], [ %932, %921 ]
  %92 = phi i32 [ %41, %50 ], [ %924, %921 ]
  %93 = phi i64 [ %39, %50 ], [ %925, %921 ]
  %94 = load i16, i16* %87, align 2
  %95 = load i8, i8* %88, align 1
  %96 = zext i8 %95 to i64
  %97 = sext i32 %90 to i64
  %98 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %17, i64 0, i32 3, i64 %24, i64 %25, i64 %26, i64 %96, i64 %97, i64 0
  br i1 %44, label %99, label %103

99:                                               ; preds = %86
  %100 = getelementptr inbounds [6 x i32], [6 x i32]* %48, i64 %96, i64 %97
  %101 = load i32, i32* %100, align 4
  %102 = add i32 %101, 1
  store i32 %102, i32* %100, align 4
  br label %103

103:                                              ; preds = %99, %86
  %104 = load i8, i8* %98, align 1
  %105 = zext i8 %104 to i32
  %106 = mul i32 %92, %105
  %107 = sub nuw nsw i32 256, %105
  %108 = add i32 %107, %106
  %109 = lshr i32 %108, 8
  %110 = zext i32 %109 to i64
  %111 = shl i64 %110, 56
  %112 = icmp slt i32 %91, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %103
  store i64 %93, i64* %38, align 8
  store i32 %91, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %114 = load i64, i64* %38, align 8
  %115 = load i32, i32* %42, align 4
  br label %116

116:                                              ; preds = %113, %103
  %117 = phi i64 [ %114, %113 ], [ %93, %103 ]
  %118 = phi i32 [ %115, %113 ], [ %91, %103 ]
  %119 = icmp ult i64 %117, %111
  br i1 %119, label %132, label %120

120:                                              ; preds = %116
  %121 = sub i32 %92, %109
  %122 = sub i64 %117, %111
  %123 = zext i32 %121 to i64
  %124 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = shl i32 %121, %126
  %128 = zext i8 %125 to i64
  %129 = shl i64 %122, %128
  %130 = sub nsw i32 %118, %126
  %131 = sext i32 %89 to i64
  br label %146

132:                                              ; preds = %116
  %133 = zext i32 %109 to i64
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = shl i32 %109, %136
  %138 = zext i8 %135 to i64
  %139 = shl i64 %117, %138
  %140 = sub nsw i32 %118, %136
  br i1 %44, label %141, label %956

141:                                              ; preds = %132
  %142 = zext i8 %95 to i64
  %143 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* %47, i64 %142, i64 %97, i64 3
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %144, 1
  store i32 %145, i32* %143, align 4
  br label %956

146:                                              ; preds = %120, %197
  %147 = phi i64 [ %131, %120 ], [ %194, %197 ]
  %148 = phi i64 [ %129, %120 ], [ %180, %197 ]
  %149 = phi i32 [ %127, %120 ], [ %178, %197 ]
  %150 = phi i32 [ %130, %120 ], [ %181, %197 ]
  %151 = phi i32 [ %90, %120 ], [ %216, %197 ]
  %152 = phi i8 [ %95, %120 ], [ %217, %197 ]
  %153 = phi i8* [ %98, %120 ], [ %220, %197 ]
  %154 = phi i8* [ %88, %120 ], [ %156, %197 ]
  %155 = phi i16 [ %94, %120 ], [ %189, %197 ]
  %156 = getelementptr inbounds i8, i8* %154, i64 1
  %157 = getelementptr inbounds i8, i8* %153, i64 1
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = mul i32 %149, %159
  %161 = sub nuw nsw i32 256, %159
  %162 = add i32 %161, %160
  %163 = lshr i32 %162, 8
  %164 = zext i32 %163 to i64
  %165 = shl i64 %164, 56
  %166 = icmp slt i32 %150, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %146
  store i64 %148, i64* %38, align 8
  store i32 %150, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %168 = load i64, i64* %38, align 8
  %169 = load i32, i32* %42, align 4
  br label %170

170:                                              ; preds = %167, %146
  %171 = phi i64 [ %168, %167 ], [ %148, %146 ]
  %172 = phi i32 [ %169, %167 ], [ %150, %146 ]
  %173 = icmp ult i64 %171, %165
  br i1 %173, label %174, label %221

174:                                              ; preds = %170
  %175 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %164
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = shl i32 %163, %177
  %179 = zext i8 %176 to i64
  %180 = shl i64 %171, %179
  %181 = sub nsw i32 %172, %177
  br i1 %44, label %182, label %188

182:                                              ; preds = %174
  %183 = zext i8 %152 to i64
  %184 = sext i32 %151 to i64
  %185 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* %47, i64 %183, i64 %184, i64 0
  %186 = load i32, i32* %185, align 4
  %187 = add i32 %186, 1
  store i32 %187, i32* %185, align 4
  br label %188

188:                                              ; preds = %182, %174
  %189 = load i16, i16* %53, align 2
  %190 = getelementptr inbounds i16, i16* %6, i64 %147
  %191 = load i16, i16* %190, align 2
  %192 = sext i16 %191 to i64
  %193 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %192
  store i8 0, i8* %193, align 1
  %194 = add nsw i64 %147, 1
  %195 = icmp slt i64 %194, %55
  %196 = trunc i64 %194 to i32
  br i1 %195, label %197, label %954

197:                                              ; preds = %188
  %198 = shl nsw i32 %196, 1
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i16, i16* %7, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = sext i16 %201 to i64
  %203 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = add nuw nsw i32 %205, 1
  %207 = or i32 %198, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %7, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = sext i16 %210 to i64
  %212 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = add nuw nsw i32 %206, %214
  %216 = lshr i32 %215, 1
  %217 = load i8, i8* %156, align 1
  %218 = zext i8 %217 to i64
  %219 = zext i32 %216 to i64
  %220 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %17, i64 0, i32 3, i64 %24, i64 %25, i64 %26, i64 %218, i64 %219, i64 0
  br label %146

221:                                              ; preds = %170
  %222 = trunc i64 %147 to i32
  %223 = sub i32 %149, %163
  %224 = sub i64 %171, %165
  %225 = zext i32 %223 to i64
  %226 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl i32 %223, %228
  %230 = zext i8 %227 to i64
  %231 = shl i64 %224, %230
  %232 = sub nsw i32 %172, %228
  %233 = getelementptr inbounds i8, i8* %153, i64 2
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = mul i32 %229, %235
  %237 = sub nuw nsw i32 256, %235
  %238 = add i32 %237, %236
  %239 = lshr i32 %238, 8
  %240 = zext i32 %239 to i64
  %241 = shl i64 %240, 56
  %242 = icmp slt i32 %232, 0
  br i1 %242, label %243, label %246

243:                                              ; preds = %221
  store i64 %231, i64* %38, align 8
  store i32 %232, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %244 = load i64, i64* %38, align 8
  %245 = load i32, i32* %42, align 4
  br label %246

246:                                              ; preds = %243, %221
  %247 = phi i64 [ %244, %243 ], [ %231, %221 ]
  %248 = phi i32 [ %245, %243 ], [ %232, %221 ]
  %249 = icmp ult i64 %247, %241
  br i1 %249, label %862, label %250

250:                                              ; preds = %246
  %251 = sub i32 %229, %239
  %252 = sub i64 %247, %241
  %253 = zext i32 %251 to i64
  %254 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = shl i32 %251, %256
  %258 = zext i8 %255 to i64
  %259 = shl i64 %252, %258
  %260 = sub nsw i32 %248, %256
  %261 = load i8, i8* %233, align 1
  %262 = zext i8 %261 to i64
  %263 = add nsw i64 %262, -1
  %264 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 0
  br i1 %44, label %265, label %271

265:                                              ; preds = %250
  %266 = zext i8 %152 to i64
  %267 = sext i32 %151 to i64
  %268 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* %47, i64 %266, i64 %267, i64 2
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, 1
  store i32 %270, i32* %268, align 4
  br label %271

271:                                              ; preds = %265, %250
  %272 = load i8, i8* %264, align 8
  %273 = zext i8 %272 to i32
  %274 = mul i32 %257, %273
  %275 = sub nuw nsw i32 256, %273
  %276 = add i32 %275, %274
  %277 = lshr i32 %276, 8
  %278 = zext i32 %277 to i64
  %279 = shl i64 %278, 56
  %280 = icmp slt i32 %260, 0
  br i1 %280, label %281, label %284

281:                                              ; preds = %271
  store i64 %259, i64* %38, align 8
  store i32 %260, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %282 = load i64, i64* %38, align 8
  %283 = load i32, i32* %42, align 4
  br label %284

284:                                              ; preds = %281, %271
  %285 = phi i64 [ %282, %281 ], [ %259, %271 ]
  %286 = phi i32 [ %283, %281 ], [ %260, %271 ]
  %287 = icmp ult i64 %285, %279
  br i1 %287, label %761, label %288

288:                                              ; preds = %284
  %289 = sub i32 %257, %277
  %290 = sub i64 %285, %279
  %291 = zext i32 %289 to i64
  %292 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  %295 = shl i32 %289, %294
  %296 = zext i8 %293 to i64
  %297 = shl i64 %290, %296
  %298 = sub nsw i32 %286, %294
  %299 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 3
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = mul i32 %295, %301
  %303 = sub nuw nsw i32 256, %301
  %304 = add i32 %303, %302
  %305 = lshr i32 %304, 8
  %306 = zext i32 %305 to i64
  %307 = shl i64 %306, 56
  %308 = icmp slt i32 %298, 0
  br i1 %308, label %309, label %312

309:                                              ; preds = %288
  store i64 %297, i64* %38, align 8
  store i32 %298, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %310 = load i64, i64* %38, align 8
  %311 = load i32, i32* %42, align 4
  br label %312

312:                                              ; preds = %309, %288
  %313 = phi i64 [ %310, %309 ], [ %297, %288 ]
  %314 = phi i32 [ %311, %309 ], [ %298, %288 ]
  %315 = icmp ult i64 %313, %307
  br i1 %315, label %625, label %316

316:                                              ; preds = %312
  %317 = sub i32 %295, %305
  %318 = sub i64 %313, %307
  %319 = zext i32 %317 to i64
  %320 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = shl i32 %317, %322
  %324 = zext i8 %321 to i64
  %325 = shl i64 %318, %324
  %326 = sub nsw i32 %314, %322
  %327 = shl i64 %147, 32
  %328 = ashr exact i64 %327, 32
  %329 = getelementptr inbounds i16, i16* %6, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = sext i16 %330 to i64
  %332 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %331
  store i8 5, i8* %332, align 1
  %333 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 5
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = mul i32 %323, %335
  %337 = sub nuw nsw i32 256, %335
  %338 = add i32 %337, %336
  %339 = lshr i32 %338, 8
  %340 = zext i32 %339 to i64
  %341 = shl i64 %340, 56
  %342 = icmp slt i32 %326, 0
  br i1 %342, label %343, label %346

343:                                              ; preds = %316
  store i64 %325, i64* %38, align 8
  store i32 %326, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %344 = load i64, i64* %38, align 8
  %345 = load i32, i32* %42, align 4
  br label %346

346:                                              ; preds = %343, %316
  %347 = phi i64 [ %344, %343 ], [ %325, %316 ]
  %348 = phi i32 [ %345, %343 ], [ %326, %316 ]
  %349 = icmp ult i64 %347, %341
  br i1 %349, label %499, label %350

350:                                              ; preds = %346
  %351 = sub i32 %323, %339
  %352 = sub i64 %347, %341
  %353 = zext i32 %351 to i64
  %354 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i32
  %357 = shl i32 %351, %356
  %358 = zext i8 %355 to i64
  %359 = shl i64 %352, %358
  %360 = sub nsw i32 %348, %356
  %361 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 7
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = mul i32 %357, %363
  %365 = sub nuw nsw i32 256, %363
  %366 = add i32 %365, %364
  %367 = lshr i32 %366, 8
  %368 = zext i32 %367 to i64
  %369 = shl i64 %368, 56
  %370 = icmp slt i32 %360, 0
  br i1 %370, label %371, label %374

371:                                              ; preds = %350
  store i64 %359, i64* %38, align 8
  store i32 %360, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %372 = load i64, i64* %38, align 8
  %373 = load i32, i32* %42, align 4
  br label %374

374:                                              ; preds = %371, %350
  %375 = phi i64 [ %372, %371 ], [ %359, %350 ]
  %376 = phi i32 [ %373, %371 ], [ %360, %350 ]
  %377 = icmp ult i64 %375, %369
  br i1 %377, label %440, label %378

378:                                              ; preds = %374
  %379 = sub i32 %357, %367
  %380 = sub i64 %375, %369
  %381 = zext i32 %379 to i64
  %382 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %381
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = shl i32 %379, %384
  %386 = zext i8 %383 to i64
  %387 = shl i64 %380, %386
  %388 = sub nsw i32 %376, %384
  br label %389

389:                                              ; preds = %426, %378
  %390 = phi i64 [ %387, %378 ], [ %433, %426 ]
  %391 = phi i32 [ %385, %378 ], [ %429, %426 ]
  %392 = phi i32 [ %388, %378 ], [ %434, %426 ]
  %393 = phi i64 [ 0, %378 ], [ %436, %426 ]
  %394 = phi i32 [ 0, %378 ], [ %435, %426 ]
  %395 = shl i32 %394, 1
  %396 = getelementptr inbounds i8, i8* %35, i64 %393
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = mul i32 %391, %398
  %400 = sub nuw nsw i32 256, %398
  %401 = add i32 %400, %399
  %402 = lshr i32 %401, 8
  %403 = zext i32 %402 to i64
  %404 = shl i64 %403, 56
  %405 = icmp slt i32 %392, 0
  br i1 %405, label %406, label %409

406:                                              ; preds = %389
  store i64 %390, i64* %38, align 8
  store i32 %392, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %407 = load i64, i64* %38, align 8
  %408 = load i32, i32* %42, align 4
  br label %409

409:                                              ; preds = %406, %389
  %410 = phi i64 [ %407, %406 ], [ %390, %389 ]
  %411 = phi i32 [ %408, %406 ], [ %392, %389 ]
  %412 = icmp ult i64 %410, %404
  br i1 %412, label %421, label %413

413:                                              ; preds = %409
  %414 = sub i32 %391, %402
  %415 = sub i64 %410, %404
  %416 = zext i32 %414 to i64
  %417 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %416
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = shl i32 %414, %419
  br label %426

421:                                              ; preds = %409
  %422 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %403
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = shl i32 %402, %424
  br label %426

426:                                              ; preds = %421, %413
  %427 = phi i8 [ %423, %421 ], [ %418, %413 ]
  %428 = phi i64 [ %410, %421 ], [ %415, %413 ]
  %429 = phi i32 [ %425, %421 ], [ %420, %413 ]
  %430 = phi i32 [ %424, %421 ], [ %419, %413 ]
  %431 = phi i32 [ 0, %421 ], [ 1, %413 ]
  %432 = zext i8 %427 to i64
  %433 = shl i64 %428, %432
  %434 = sub nsw i32 %411, %430
  %435 = or i32 %431, %395
  %436 = add nuw nsw i64 %393, 1
  %437 = icmp eq i64 %436, %37
  br i1 %437, label %438, label %389

438:                                              ; preds = %426
  %439 = add nsw i32 %435, 67
  br label %751

440:                                              ; preds = %374
  %441 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %368
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = shl i32 %367, %443
  %445 = zext i8 %442 to i64
  %446 = shl i64 %375, %445
  %447 = sub nsw i32 %376, %443
  br label %448

448:                                              ; preds = %485, %440
  %449 = phi i64 [ %446, %440 ], [ %492, %485 ]
  %450 = phi i32 [ %444, %440 ], [ %488, %485 ]
  %451 = phi i32 [ %447, %440 ], [ %493, %485 ]
  %452 = phi i64 [ 0, %440 ], [ %495, %485 ]
  %453 = phi i32 [ 0, %440 ], [ %494, %485 ]
  %454 = shl i32 %453, 1
  %455 = getelementptr inbounds [5 x i8], [5 x i8]* @vp9_cat5_prob, i64 0, i64 %452
  %456 = load i8, i8* %455, align 1
  %457 = zext i8 %456 to i32
  %458 = mul i32 %450, %457
  %459 = sub nuw nsw i32 256, %457
  %460 = add i32 %459, %458
  %461 = lshr i32 %460, 8
  %462 = zext i32 %461 to i64
  %463 = shl i64 %462, 56
  %464 = icmp slt i32 %451, 0
  br i1 %464, label %465, label %468

465:                                              ; preds = %448
  store i64 %449, i64* %38, align 8
  store i32 %451, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %466 = load i64, i64* %38, align 8
  %467 = load i32, i32* %42, align 4
  br label %468

468:                                              ; preds = %465, %448
  %469 = phi i64 [ %466, %465 ], [ %449, %448 ]
  %470 = phi i32 [ %467, %465 ], [ %451, %448 ]
  %471 = icmp ult i64 %469, %463
  br i1 %471, label %480, label %472

472:                                              ; preds = %468
  %473 = sub i32 %450, %461
  %474 = sub i64 %469, %463
  %475 = zext i32 %473 to i64
  %476 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %475
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i32
  %479 = shl i32 %473, %478
  br label %485

480:                                              ; preds = %468
  %481 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %462
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i32
  %484 = shl i32 %461, %483
  br label %485

485:                                              ; preds = %480, %472
  %486 = phi i8 [ %482, %480 ], [ %477, %472 ]
  %487 = phi i64 [ %469, %480 ], [ %474, %472 ]
  %488 = phi i32 [ %484, %480 ], [ %479, %472 ]
  %489 = phi i32 [ %483, %480 ], [ %478, %472 ]
  %490 = phi i32 [ 0, %480 ], [ 1, %472 ]
  %491 = zext i8 %486 to i64
  %492 = shl i64 %487, %491
  %493 = sub nsw i32 %470, %489
  %494 = or i32 %490, %454
  %495 = add nuw nsw i64 %452, 1
  %496 = icmp eq i64 %495, 5
  br i1 %496, label %497, label %448

497:                                              ; preds = %485
  %498 = add nsw i32 %494, 35
  br label %751

499:                                              ; preds = %346
  %500 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %340
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i32
  %503 = shl i32 %339, %502
  %504 = zext i8 %501 to i64
  %505 = shl i64 %347, %504
  %506 = sub nsw i32 %348, %502
  %507 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 6
  %508 = load i8, i8* %507, align 2
  %509 = zext i8 %508 to i32
  %510 = mul i32 %503, %509
  %511 = sub nuw nsw i32 256, %509
  %512 = add i32 %511, %510
  %513 = lshr i32 %512, 8
  %514 = zext i32 %513 to i64
  %515 = shl i64 %514, 56
  %516 = icmp slt i32 %506, 0
  br i1 %516, label %517, label %520

517:                                              ; preds = %499
  store i64 %505, i64* %38, align 8
  store i32 %506, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %518 = load i64, i64* %38, align 8
  %519 = load i32, i32* %42, align 4
  br label %520

520:                                              ; preds = %517, %499
  %521 = phi i64 [ %518, %517 ], [ %505, %499 ]
  %522 = phi i32 [ %519, %517 ], [ %506, %499 ]
  %523 = icmp ult i64 %521, %515
  br i1 %523, label %576, label %524

524:                                              ; preds = %520
  %525 = sub i32 %503, %513
  %526 = sub i64 %521, %515
  %527 = zext i32 %525 to i64
  %528 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %527
  %529 = load i8, i8* %528, align 1
  %530 = zext i8 %529 to i32
  %531 = shl i32 %525, %530
  %532 = zext i8 %529 to i64
  %533 = shl i64 %526, %532
  %534 = sub nsw i32 %522, %530
  %535 = mul i32 %531, %57
  %536 = add i32 %58, %535
  %537 = lshr i32 %536, 8
  %538 = zext i32 %537 to i64
  %539 = shl i64 %538, 56
  %540 = icmp slt i32 %534, 0
  br i1 %540, label %541, label %544

541:                                              ; preds = %524
  store i64 %533, i64* %38, align 8
  store i32 %534, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %542 = load i64, i64* %38, align 8
  %543 = load i32, i32* %42, align 4
  br label %544

544:                                              ; preds = %541, %524
  %545 = phi i64 [ %542, %541 ], [ %533, %524 ]
  %546 = phi i32 [ %543, %541 ], [ %534, %524 ]
  %547 = icmp ult i64 %545, %539
  br i1 %547, label %556, label %548

548:                                              ; preds = %544
  %549 = sub i32 %531, %537
  %550 = sub i64 %545, %539
  %551 = zext i32 %549 to i64
  %552 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %551
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = shl i32 %549, %554
  br label %561

556:                                              ; preds = %544
  %557 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %538
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i32
  %560 = shl i32 %537, %559
  br label %561

561:                                              ; preds = %556, %548
  %562 = phi i8 [ %558, %556 ], [ %553, %548 ]
  %563 = phi i64 [ %545, %556 ], [ %550, %548 ]
  %564 = phi i32 [ %560, %556 ], [ %555, %548 ]
  %565 = phi i32 [ %559, %556 ], [ %554, %548 ]
  %566 = phi i32 [ 0, %556 ], [ 8, %548 ]
  %567 = zext i8 %562 to i64
  %568 = shl i64 %563, %567
  %569 = sub nsw i32 %546, %565
  %570 = mul i32 %564, %60
  %571 = add i32 %61, %570
  %572 = lshr i32 %571, 8
  %573 = zext i32 %572 to i64
  %574 = shl i64 %573, 56
  %575 = icmp slt i32 %569, 0
  br i1 %575, label %961, label %964

576:                                              ; preds = %520
  %577 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %514
  %578 = load i8, i8* %577, align 1
  %579 = zext i8 %578 to i32
  %580 = shl i32 %513, %579
  %581 = zext i8 %578 to i64
  %582 = shl i64 %521, %581
  %583 = sub nsw i32 %522, %579
  %584 = mul i32 %580, %69
  %585 = add i32 %70, %584
  %586 = lshr i32 %585, 8
  %587 = zext i32 %586 to i64
  %588 = shl i64 %587, 56
  %589 = icmp slt i32 %583, 0
  br i1 %589, label %590, label %593

590:                                              ; preds = %576
  store i64 %582, i64* %38, align 8
  store i32 %583, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %591 = load i64, i64* %38, align 8
  %592 = load i32, i32* %42, align 4
  br label %593

593:                                              ; preds = %590, %576
  %594 = phi i64 [ %591, %590 ], [ %582, %576 ]
  %595 = phi i32 [ %592, %590 ], [ %583, %576 ]
  %596 = icmp ult i64 %594, %588
  br i1 %596, label %605, label %597

597:                                              ; preds = %593
  %598 = sub i32 %580, %586
  %599 = sub i64 %594, %588
  %600 = zext i32 %598 to i64
  %601 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %600
  %602 = load i8, i8* %601, align 1
  %603 = zext i8 %602 to i32
  %604 = shl i32 %598, %603
  br label %610

605:                                              ; preds = %593
  %606 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %587
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i32
  %609 = shl i32 %586, %608
  br label %610

610:                                              ; preds = %605, %597
  %611 = phi i8 [ %607, %605 ], [ %602, %597 ]
  %612 = phi i64 [ %594, %605 ], [ %599, %597 ]
  %613 = phi i32 [ %609, %605 ], [ %604, %597 ]
  %614 = phi i32 [ %608, %605 ], [ %603, %597 ]
  %615 = phi i32 [ 0, %605 ], [ 4, %597 ]
  %616 = zext i8 %611 to i64
  %617 = shl i64 %612, %616
  %618 = sub nsw i32 %595, %614
  %619 = mul i32 %613, %72
  %620 = add i32 %73, %619
  %621 = lshr i32 %620, 8
  %622 = zext i32 %621 to i64
  %623 = shl i64 %622, 56
  %624 = icmp slt i32 %618, 0
  br i1 %624, label %1064, label %1067

625:                                              ; preds = %312
  %626 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %306
  %627 = load i8, i8* %626, align 1
  %628 = zext i8 %627 to i32
  %629 = shl i32 %305, %628
  %630 = zext i8 %627 to i64
  %631 = shl i64 %313, %630
  %632 = sub nsw i32 %314, %628
  %633 = shl i64 %147, 32
  %634 = ashr exact i64 %633, 32
  %635 = getelementptr inbounds i16, i16* %6, i64 %634
  %636 = load i16, i16* %635, align 2
  %637 = sext i16 %636 to i64
  %638 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %637
  store i8 4, i8* %638, align 1
  %639 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 4
  %640 = load i8, i8* %639, align 4
  %641 = zext i8 %640 to i32
  %642 = mul i32 %629, %641
  %643 = sub nuw nsw i32 256, %641
  %644 = add i32 %643, %642
  %645 = lshr i32 %644, 8
  %646 = zext i32 %645 to i64
  %647 = shl i64 %646, 56
  %648 = icmp slt i32 %632, 0
  br i1 %648, label %649, label %652

649:                                              ; preds = %625
  store i64 %631, i64* %38, align 8
  store i32 %632, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %650 = load i64, i64* %38, align 8
  %651 = load i32, i32* %42, align 4
  br label %652

652:                                              ; preds = %649, %625
  %653 = phi i64 [ %650, %649 ], [ %631, %625 ]
  %654 = phi i32 [ %651, %649 ], [ %632, %625 ]
  %655 = icmp ult i64 %653, %647
  br i1 %655, label %708, label %656

656:                                              ; preds = %652
  %657 = sub i32 %629, %645
  %658 = sub i64 %653, %647
  %659 = zext i32 %657 to i64
  %660 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %659
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i32
  %663 = shl i32 %657, %662
  %664 = zext i8 %661 to i64
  %665 = shl i64 %658, %664
  %666 = sub nsw i32 %654, %662
  %667 = mul i32 %663, %78
  %668 = add i32 %79, %667
  %669 = lshr i32 %668, 8
  %670 = zext i32 %669 to i64
  %671 = shl i64 %670, 56
  %672 = icmp slt i32 %666, 0
  br i1 %672, label %673, label %676

673:                                              ; preds = %656
  store i64 %665, i64* %38, align 8
  store i32 %666, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %674 = load i64, i64* %38, align 8
  %675 = load i32, i32* %42, align 4
  br label %676

676:                                              ; preds = %673, %656
  %677 = phi i64 [ %674, %673 ], [ %665, %656 ]
  %678 = phi i32 [ %675, %673 ], [ %666, %656 ]
  %679 = icmp ult i64 %677, %671
  br i1 %679, label %688, label %680

680:                                              ; preds = %676
  %681 = sub i32 %663, %669
  %682 = sub i64 %677, %671
  %683 = zext i32 %681 to i64
  %684 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %683
  %685 = load i8, i8* %684, align 1
  %686 = zext i8 %685 to i32
  %687 = shl i32 %681, %686
  br label %693

688:                                              ; preds = %676
  %689 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %670
  %690 = load i8, i8* %689, align 1
  %691 = zext i8 %690 to i32
  %692 = shl i32 %669, %691
  br label %693

693:                                              ; preds = %688, %680
  %694 = phi i8 [ %690, %688 ], [ %685, %680 ]
  %695 = phi i64 [ %677, %688 ], [ %682, %680 ]
  %696 = phi i32 [ %692, %688 ], [ %687, %680 ]
  %697 = phi i32 [ %691, %688 ], [ %686, %680 ]
  %698 = phi i32 [ 0, %688 ], [ 2, %680 ]
  %699 = zext i8 %694 to i64
  %700 = shl i64 %695, %699
  %701 = sub nsw i32 %678, %697
  %702 = mul i32 %696, %81
  %703 = add i32 %82, %702
  %704 = lshr i32 %703, 8
  %705 = zext i32 %704 to i64
  %706 = shl i64 %705, 56
  %707 = icmp slt i32 %701, 0
  br i1 %707, label %1131, label %1134

708:                                              ; preds = %652
  %709 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %646
  %710 = load i8, i8* %709, align 1
  %711 = zext i8 %710 to i32
  %712 = shl i32 %645, %711
  %713 = zext i8 %710 to i64
  %714 = shl i64 %653, %713
  %715 = sub nsw i32 %654, %711
  %716 = mul i32 %712, %84
  %717 = add i32 %85, %716
  %718 = lshr i32 %717, 8
  %719 = zext i32 %718 to i64
  %720 = shl i64 %719, 56
  %721 = icmp slt i32 %715, 0
  br i1 %721, label %722, label %725

722:                                              ; preds = %708
  store i64 %714, i64* %38, align 8
  store i32 %715, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %723 = load i64, i64* %38, align 8
  %724 = load i32, i32* %42, align 4
  br label %725

725:                                              ; preds = %722, %708
  %726 = phi i64 [ %723, %722 ], [ %714, %708 ]
  %727 = phi i32 [ %724, %722 ], [ %715, %708 ]
  %728 = icmp ult i64 %726, %720
  br i1 %728, label %737, label %729

729:                                              ; preds = %725
  %730 = sub i32 %712, %718
  %731 = sub i64 %726, %720
  %732 = zext i32 %730 to i64
  %733 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %732
  %734 = load i8, i8* %733, align 1
  %735 = zext i8 %734 to i32
  %736 = shl i32 %730, %735
  br label %742

737:                                              ; preds = %725
  %738 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %719
  %739 = load i8, i8* %738, align 1
  %740 = zext i8 %739 to i32
  %741 = shl i32 %718, %740
  br label %742

742:                                              ; preds = %737, %729
  %743 = phi i8 [ %739, %737 ], [ %734, %729 ]
  %744 = phi i64 [ %726, %737 ], [ %731, %729 ]
  %745 = phi i32 [ %741, %737 ], [ %736, %729 ]
  %746 = phi i32 [ %740, %737 ], [ %735, %729 ]
  %747 = phi i32 [ 5, %737 ], [ 6, %729 ]
  %748 = zext i8 %743 to i64
  %749 = shl i64 %744, %748
  %750 = sub nsw i32 %727, %746
  br label %751

751:                                              ; preds = %1151, %742, %497, %438, %1120, %1053
  %752 = phi i64 [ %749, %742 ], [ %1158, %1151 ], [ %1127, %1120 ], [ %1060, %1053 ], [ %492, %497 ], [ %433, %438 ]
  %753 = phi i32 [ %745, %742 ], [ %1154, %1151 ], [ %1123, %1120 ], [ %1056, %1053 ], [ %488, %497 ], [ %429, %438 ]
  %754 = phi i32 [ %750, %742 ], [ %1159, %1151 ], [ %1128, %1120 ], [ %1061, %1053 ], [ %493, %497 ], [ %434, %438 ]
  %755 = phi i32 [ %747, %742 ], [ %1161, %1151 ], [ %1130, %1120 ], [ %1063, %1053 ], [ %498, %497 ], [ %439, %438 ]
  %756 = sext i32 %755 to i64
  %757 = sext i16 %155 to i64
  %758 = mul nsw i64 %756, %757
  %759 = ashr i64 %758, %54
  %760 = trunc i64 %759 to i32
  br label %885

761:                                              ; preds = %284
  %762 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %278
  %763 = load i8, i8* %762, align 1
  %764 = zext i8 %763 to i32
  %765 = shl i32 %277, %764
  %766 = zext i8 %763 to i64
  %767 = shl i64 %285, %766
  %768 = sub nsw i32 %286, %764
  %769 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 1
  %770 = load i8, i8* %769, align 1
  %771 = zext i8 %770 to i32
  %772 = mul i32 %765, %771
  %773 = sub nuw nsw i32 256, %771
  %774 = add i32 %773, %772
  %775 = lshr i32 %774, 8
  %776 = zext i32 %775 to i64
  %777 = shl i64 %776, 56
  %778 = icmp slt i32 %768, 0
  br i1 %778, label %779, label %782

779:                                              ; preds = %761
  store i64 %767, i64* %38, align 8
  store i32 %768, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %780 = load i64, i64* %38, align 8
  %781 = load i32, i32* %42, align 4
  br label %782

782:                                              ; preds = %779, %761
  %783 = phi i64 [ %780, %779 ], [ %767, %761 ]
  %784 = phi i32 [ %781, %779 ], [ %768, %761 ]
  %785 = icmp ult i64 %783, %777
  br i1 %785, label %845, label %786

786:                                              ; preds = %782
  %787 = sub i32 %765, %775
  %788 = sub i64 %783, %777
  %789 = zext i32 %787 to i64
  %790 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %789
  %791 = load i8, i8* %790, align 1
  %792 = zext i8 %791 to i32
  %793 = shl i32 %787, %792
  %794 = zext i8 %791 to i64
  %795 = shl i64 %788, %794
  %796 = sub nsw i32 %784, %792
  %797 = shl i64 %147, 32
  %798 = ashr exact i64 %797, 32
  %799 = getelementptr inbounds i16, i16* %6, i64 %798
  %800 = load i16, i16* %799, align 2
  %801 = sext i16 %800 to i64
  %802 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %801
  store i8 3, i8* %802, align 1
  %803 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %263, i64 2
  %804 = load i8, i8* %803, align 2
  %805 = zext i8 %804 to i32
  %806 = mul i32 %793, %805
  %807 = sub nuw nsw i32 256, %805
  %808 = add i32 %807, %806
  %809 = lshr i32 %808, 8
  %810 = zext i32 %809 to i64
  %811 = shl i64 %810, 56
  %812 = icmp slt i32 %796, 0
  br i1 %812, label %813, label %816

813:                                              ; preds = %786
  store i64 %795, i64* %38, align 8
  store i32 %796, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %814 = load i64, i64* %38, align 8
  %815 = load i32, i32* %42, align 4
  br label %816

816:                                              ; preds = %813, %786
  %817 = phi i64 [ %814, %813 ], [ %795, %786 ]
  %818 = phi i32 [ %815, %813 ], [ %796, %786 ]
  %819 = icmp ult i64 %817, %811
  br i1 %819, label %828, label %820

820:                                              ; preds = %816
  %821 = sub i32 %793, %809
  %822 = sub i64 %817, %811
  %823 = zext i32 %821 to i64
  %824 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %823
  %825 = load i8, i8* %824, align 1
  %826 = zext i8 %825 to i32
  %827 = shl i32 %821, %826
  br label %833

828:                                              ; preds = %816
  %829 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %810
  %830 = load i8, i8* %829, align 1
  %831 = zext i8 %830 to i32
  %832 = shl i32 %809, %831
  br label %833

833:                                              ; preds = %820, %828
  %834 = phi i8 [ %825, %820 ], [ %830, %828 ]
  %835 = phi i64 [ %822, %820 ], [ %817, %828 ]
  %836 = phi i32 [ %827, %820 ], [ %832, %828 ]
  %837 = phi i32 [ %826, %820 ], [ %831, %828 ]
  %838 = phi i32 [ 4, %820 ], [ 3, %828 ]
  %839 = zext i8 %834 to i64
  %840 = shl i64 %835, %839
  %841 = sub nsw i32 %818, %837
  %842 = sext i16 %155 to i32
  %843 = mul nsw i32 %838, %842
  %844 = ashr i32 %843, %29
  br label %885

845:                                              ; preds = %782
  %846 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %776
  %847 = load i8, i8* %846, align 1
  %848 = zext i8 %847 to i32
  %849 = shl i32 %775, %848
  %850 = zext i8 %847 to i64
  %851 = shl i64 %783, %850
  %852 = sub nsw i32 %784, %848
  %853 = shl i64 %147, 32
  %854 = ashr exact i64 %853, 32
  %855 = getelementptr inbounds i16, i16* %6, i64 %854
  %856 = load i16, i16* %855, align 2
  %857 = sext i16 %856 to i64
  %858 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %857
  store i8 2, i8* %858, align 1
  %859 = sext i16 %155 to i32
  %860 = shl nsw i32 %859, 1
  %861 = ashr i32 %860, %29
  br label %885

862:                                              ; preds = %246
  %863 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %240
  %864 = load i8, i8* %863, align 1
  %865 = zext i8 %864 to i32
  %866 = shl i32 %239, %865
  %867 = zext i8 %864 to i64
  %868 = shl i64 %247, %867
  %869 = sub nsw i32 %248, %865
  br i1 %44, label %870, label %876

870:                                              ; preds = %862
  %871 = zext i8 %152 to i64
  %872 = sext i32 %151 to i64
  %873 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* %47, i64 %871, i64 %872, i64 1
  %874 = load i32, i32* %873, align 4
  %875 = add i32 %874, 1
  store i32 %875, i32* %873, align 4
  br label %876

876:                                              ; preds = %870, %862
  %877 = shl i64 %147, 32
  %878 = ashr exact i64 %877, 32
  %879 = getelementptr inbounds i16, i16* %6, i64 %878
  %880 = load i16, i16* %879, align 2
  %881 = sext i16 %880 to i64
  %882 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %881
  store i8 1, i8* %882, align 1
  %883 = sext i16 %155 to i32
  %884 = ashr i32 %883, %29
  br label %885

885:                                              ; preds = %751, %845, %833, %876
  %886 = phi i64 [ %868, %876 ], [ %851, %845 ], [ %840, %833 ], [ %752, %751 ]
  %887 = phi i32 [ %866, %876 ], [ %849, %845 ], [ %836, %833 ], [ %753, %751 ]
  %888 = phi i32 [ %869, %876 ], [ %852, %845 ], [ %841, %833 ], [ %754, %751 ]
  %889 = phi i32 [ %884, %876 ], [ %861, %845 ], [ %844, %833 ], [ %760, %751 ]
  %890 = shl i32 %887, 7
  %891 = add i32 %890, 128
  %892 = lshr i32 %891, 8
  %893 = zext i32 %892 to i64
  %894 = shl i64 %893, 56
  %895 = icmp slt i32 %888, 0
  br i1 %895, label %896, label %899

896:                                              ; preds = %885
  store i64 %886, i64* %38, align 8
  store i32 %888, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %897 = load i64, i64* %38, align 8
  %898 = load i32, i32* %42, align 4
  br label %899

899:                                              ; preds = %896, %885
  %900 = phi i64 [ %897, %896 ], [ %886, %885 ]
  %901 = phi i32 [ %898, %896 ], [ %888, %885 ]
  %902 = icmp ult i64 %900, %894
  br i1 %902, label %914, label %903

903:                                              ; preds = %899
  %904 = sub i32 %887, %892
  %905 = sub i64 %900, %894
  %906 = zext i32 %904 to i64
  %907 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %906
  %908 = load i8, i8* %907, align 1
  %909 = zext i8 %908 to i32
  %910 = shl i32 %904, %909
  %911 = zext i8 %908 to i64
  %912 = shl i64 %905, %911
  %913 = sub nsw i32 0, %889
  br label %921

914:                                              ; preds = %899
  %915 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %893
  %916 = load i8, i8* %915, align 1
  %917 = zext i8 %916 to i32
  %918 = shl i32 %892, %917
  %919 = zext i8 %916 to i64
  %920 = shl i64 %900, %919
  br label %921

921:                                              ; preds = %903, %914
  %922 = phi i32 [ %913, %903 ], [ %889, %914 ]
  %923 = phi i32 [ %909, %903 ], [ %917, %914 ]
  %924 = phi i32 [ %910, %903 ], [ %918, %914 ]
  %925 = phi i64 [ %912, %903 ], [ %920, %914 ]
  %926 = shl i64 %147, 32
  %927 = ashr exact i64 %926, 32
  %928 = getelementptr inbounds i16, i16* %6, i64 %927
  %929 = load i16, i16* %928, align 2
  %930 = sext i16 %929 to i64
  %931 = getelementptr inbounds i32, i32* %2, i64 %930
  store i32 %922, i32* %931, align 4
  %932 = sub nsw i32 %901, %923
  %933 = add nsw i32 %222, 1
  %934 = shl nsw i32 %933, 1
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i16, i16* %7, i64 %935
  %937 = load i16, i16* %936, align 2
  %938 = sext i16 %937 to i64
  %939 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %938
  %940 = load i8, i8* %939, align 1
  %941 = zext i8 %940 to i32
  %942 = add nuw nsw i32 %941, 1
  %943 = or i32 %934, 1
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i16, i16* %7, i64 %944
  %946 = load i16, i16* %945, align 2
  %947 = sext i16 %946 to i64
  %948 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 %947
  %949 = load i8, i8* %948, align 1
  %950 = zext i8 %949 to i32
  %951 = add nuw nsw i32 %942, %950
  %952 = lshr i32 %951, 1
  %953 = icmp slt i32 %933, %15
  br i1 %953, label %86, label %956

954:                                              ; preds = %188
  %955 = trunc i64 %194 to i32
  br label %956

956:                                              ; preds = %921, %954, %9, %141, %132
  %957 = phi i64 [ %139, %141 ], [ %139, %132 ], [ %39, %9 ], [ %180, %954 ], [ %925, %921 ]
  %958 = phi i32 [ %137, %141 ], [ %137, %132 ], [ %41, %9 ], [ %178, %954 ], [ %924, %921 ]
  %959 = phi i32 [ %140, %141 ], [ %140, %132 ], [ %43, %9 ], [ %181, %954 ], [ %932, %921 ]
  %960 = phi i32 [ %89, %141 ], [ %89, %132 ], [ 0, %9 ], [ %955, %954 ], [ %933, %921 ]
  store i64 %957, i64* %38, align 8
  store i32 %958, i32* %40, align 8
  store i32 %959, i32* %42, align 4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %27) #3
  ret i32 %960

961:                                              ; preds = %561
  store i64 %568, i64* %38, align 8
  store i32 %569, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %962 = load i64, i64* %38, align 8
  %963 = load i32, i32* %42, align 4
  br label %964

964:                                              ; preds = %961, %561
  %965 = phi i64 [ %962, %961 ], [ %568, %561 ]
  %966 = phi i32 [ %963, %961 ], [ %569, %561 ]
  %967 = icmp ult i64 %965, %574
  br i1 %967, label %976, label %968

968:                                              ; preds = %964
  %969 = sub i32 %564, %572
  %970 = sub i64 %965, %574
  %971 = zext i32 %969 to i64
  %972 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %971
  %973 = load i8, i8* %972, align 1
  %974 = zext i8 %973 to i32
  %975 = shl i32 %969, %974
  br label %981

976:                                              ; preds = %964
  %977 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %573
  %978 = load i8, i8* %977, align 1
  %979 = zext i8 %978 to i32
  %980 = shl i32 %572, %979
  br label %981

981:                                              ; preds = %976, %968
  %982 = phi i8 [ %978, %976 ], [ %973, %968 ]
  %983 = phi i64 [ %965, %976 ], [ %970, %968 ]
  %984 = phi i32 [ %980, %976 ], [ %975, %968 ]
  %985 = phi i32 [ %979, %976 ], [ %974, %968 ]
  %986 = phi i32 [ 0, %976 ], [ 4, %968 ]
  %987 = zext i8 %982 to i64
  %988 = shl i64 %983, %987
  %989 = sub nsw i32 %966, %985
  %990 = or i32 %986, %566
  %991 = mul i32 %984, %63
  %992 = add i32 %64, %991
  %993 = lshr i32 %992, 8
  %994 = zext i32 %993 to i64
  %995 = shl i64 %994, 56
  %996 = icmp slt i32 %989, 0
  br i1 %996, label %997, label %1000

997:                                              ; preds = %981
  store i64 %988, i64* %38, align 8
  store i32 %989, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %998 = load i64, i64* %38, align 8
  %999 = load i32, i32* %42, align 4
  br label %1000

1000:                                             ; preds = %997, %981
  %1001 = phi i64 [ %998, %997 ], [ %988, %981 ]
  %1002 = phi i32 [ %999, %997 ], [ %989, %981 ]
  %1003 = icmp ult i64 %1001, %995
  br i1 %1003, label %1012, label %1004

1004:                                             ; preds = %1000
  %1005 = sub i32 %984, %993
  %1006 = sub i64 %1001, %995
  %1007 = zext i32 %1005 to i64
  %1008 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1007
  %1009 = load i8, i8* %1008, align 1
  %1010 = zext i8 %1009 to i32
  %1011 = shl i32 %1005, %1010
  br label %1017

1012:                                             ; preds = %1000
  %1013 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %994
  %1014 = load i8, i8* %1013, align 1
  %1015 = zext i8 %1014 to i32
  %1016 = shl i32 %993, %1015
  br label %1017

1017:                                             ; preds = %1012, %1004
  %1018 = phi i8 [ %1014, %1012 ], [ %1009, %1004 ]
  %1019 = phi i64 [ %1001, %1012 ], [ %1006, %1004 ]
  %1020 = phi i32 [ %1016, %1012 ], [ %1011, %1004 ]
  %1021 = phi i32 [ %1015, %1012 ], [ %1010, %1004 ]
  %1022 = phi i32 [ 0, %1012 ], [ 2, %1004 ]
  %1023 = zext i8 %1018 to i64
  %1024 = shl i64 %1019, %1023
  %1025 = sub nsw i32 %1002, %1021
  %1026 = or i32 %1022, %990
  %1027 = mul i32 %1020, %66
  %1028 = add i32 %67, %1027
  %1029 = lshr i32 %1028, 8
  %1030 = zext i32 %1029 to i64
  %1031 = shl i64 %1030, 56
  %1032 = icmp slt i32 %1025, 0
  br i1 %1032, label %1033, label %1036

1033:                                             ; preds = %1017
  store i64 %1024, i64* %38, align 8
  store i32 %1025, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %1034 = load i64, i64* %38, align 8
  %1035 = load i32, i32* %42, align 4
  br label %1036

1036:                                             ; preds = %1033, %1017
  %1037 = phi i64 [ %1034, %1033 ], [ %1024, %1017 ]
  %1038 = phi i32 [ %1035, %1033 ], [ %1025, %1017 ]
  %1039 = icmp ult i64 %1037, %1031
  br i1 %1039, label %1048, label %1040

1040:                                             ; preds = %1036
  %1041 = sub i32 %1020, %1029
  %1042 = sub i64 %1037, %1031
  %1043 = zext i32 %1041 to i64
  %1044 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = shl i32 %1041, %1046
  br label %1053

1048:                                             ; preds = %1036
  %1049 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1030
  %1050 = load i8, i8* %1049, align 1
  %1051 = zext i8 %1050 to i32
  %1052 = shl i32 %1029, %1051
  br label %1053

1053:                                             ; preds = %1048, %1040
  %1054 = phi i8 [ %1050, %1048 ], [ %1045, %1040 ]
  %1055 = phi i64 [ %1037, %1048 ], [ %1042, %1040 ]
  %1056 = phi i32 [ %1052, %1048 ], [ %1047, %1040 ]
  %1057 = phi i32 [ %1051, %1048 ], [ %1046, %1040 ]
  %1058 = phi i32 [ 0, %1048 ], [ 1, %1040 ]
  %1059 = zext i8 %1054 to i64
  %1060 = shl i64 %1055, %1059
  %1061 = sub nsw i32 %1038, %1057
  %1062 = or i32 %1058, %1026
  %1063 = add nuw nsw i32 %1062, 19
  br label %751

1064:                                             ; preds = %610
  store i64 %617, i64* %38, align 8
  store i32 %618, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %1065 = load i64, i64* %38, align 8
  %1066 = load i32, i32* %42, align 4
  br label %1067

1067:                                             ; preds = %1064, %610
  %1068 = phi i64 [ %1065, %1064 ], [ %617, %610 ]
  %1069 = phi i32 [ %1066, %1064 ], [ %618, %610 ]
  %1070 = icmp ult i64 %1068, %623
  br i1 %1070, label %1079, label %1071

1071:                                             ; preds = %1067
  %1072 = sub i32 %613, %621
  %1073 = sub i64 %1068, %623
  %1074 = zext i32 %1072 to i64
  %1075 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1074
  %1076 = load i8, i8* %1075, align 1
  %1077 = zext i8 %1076 to i32
  %1078 = shl i32 %1072, %1077
  br label %1084

1079:                                             ; preds = %1067
  %1080 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %622
  %1081 = load i8, i8* %1080, align 1
  %1082 = zext i8 %1081 to i32
  %1083 = shl i32 %621, %1082
  br label %1084

1084:                                             ; preds = %1079, %1071
  %1085 = phi i8 [ %1081, %1079 ], [ %1076, %1071 ]
  %1086 = phi i64 [ %1068, %1079 ], [ %1073, %1071 ]
  %1087 = phi i32 [ %1083, %1079 ], [ %1078, %1071 ]
  %1088 = phi i32 [ %1082, %1079 ], [ %1077, %1071 ]
  %1089 = phi i32 [ 0, %1079 ], [ 2, %1071 ]
  %1090 = zext i8 %1085 to i64
  %1091 = shl i64 %1086, %1090
  %1092 = sub nsw i32 %1069, %1088
  %1093 = or i32 %1089, %615
  %1094 = mul i32 %1087, %75
  %1095 = add i32 %76, %1094
  %1096 = lshr i32 %1095, 8
  %1097 = zext i32 %1096 to i64
  %1098 = shl i64 %1097, 56
  %1099 = icmp slt i32 %1092, 0
  br i1 %1099, label %1100, label %1103

1100:                                             ; preds = %1084
  store i64 %1091, i64* %38, align 8
  store i32 %1092, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %1101 = load i64, i64* %38, align 8
  %1102 = load i32, i32* %42, align 4
  br label %1103

1103:                                             ; preds = %1100, %1084
  %1104 = phi i64 [ %1101, %1100 ], [ %1091, %1084 ]
  %1105 = phi i32 [ %1102, %1100 ], [ %1092, %1084 ]
  %1106 = icmp ult i64 %1104, %1098
  br i1 %1106, label %1115, label %1107

1107:                                             ; preds = %1103
  %1108 = sub i32 %1087, %1096
  %1109 = sub i64 %1104, %1098
  %1110 = zext i32 %1108 to i64
  %1111 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1110
  %1112 = load i8, i8* %1111, align 1
  %1113 = zext i8 %1112 to i32
  %1114 = shl i32 %1108, %1113
  br label %1120

1115:                                             ; preds = %1103
  %1116 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1097
  %1117 = load i8, i8* %1116, align 1
  %1118 = zext i8 %1117 to i32
  %1119 = shl i32 %1096, %1118
  br label %1120

1120:                                             ; preds = %1115, %1107
  %1121 = phi i8 [ %1117, %1115 ], [ %1112, %1107 ]
  %1122 = phi i64 [ %1104, %1115 ], [ %1109, %1107 ]
  %1123 = phi i32 [ %1119, %1115 ], [ %1114, %1107 ]
  %1124 = phi i32 [ %1118, %1115 ], [ %1113, %1107 ]
  %1125 = phi i32 [ 0, %1115 ], [ 1, %1107 ]
  %1126 = zext i8 %1121 to i64
  %1127 = shl i64 %1122, %1126
  %1128 = sub nsw i32 %1105, %1124
  %1129 = or i32 %1125, %1093
  %1130 = add nuw nsw i32 %1129, 11
  br label %751

1131:                                             ; preds = %693
  store i64 %700, i64* %38, align 8
  store i32 %701, i32* %42, align 4
  tail call void @vpx_reader_fill(%struct.vpx_reader* %8) #3
  %1132 = load i64, i64* %38, align 8
  %1133 = load i32, i32* %42, align 4
  br label %1134

1134:                                             ; preds = %1131, %693
  %1135 = phi i64 [ %1132, %1131 ], [ %700, %693 ]
  %1136 = phi i32 [ %1133, %1131 ], [ %701, %693 ]
  %1137 = icmp ult i64 %1135, %706
  br i1 %1137, label %1146, label %1138

1138:                                             ; preds = %1134
  %1139 = sub i32 %696, %704
  %1140 = sub i64 %1135, %706
  %1141 = zext i32 %1139 to i64
  %1142 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1141
  %1143 = load i8, i8* %1142, align 1
  %1144 = zext i8 %1143 to i32
  %1145 = shl i32 %1139, %1144
  br label %1151

1146:                                             ; preds = %1134
  %1147 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %705
  %1148 = load i8, i8* %1147, align 1
  %1149 = zext i8 %1148 to i32
  %1150 = shl i32 %704, %1149
  br label %1151

1151:                                             ; preds = %1146, %1138
  %1152 = phi i8 [ %1148, %1146 ], [ %1143, %1138 ]
  %1153 = phi i64 [ %1135, %1146 ], [ %1140, %1138 ]
  %1154 = phi i32 [ %1150, %1146 ], [ %1145, %1138 ]
  %1155 = phi i32 [ %1149, %1146 ], [ %1144, %1138 ]
  %1156 = phi i32 [ 0, %1146 ], [ 1, %1138 ]
  %1157 = zext i8 %1152 to i64
  %1158 = shl i64 %1153, %1157
  %1159 = sub nsw i32 %1136, %1155
  %1160 = or i32 %1156, %698
  %1161 = add nuw nsw i32 %1160, 7
  br label %751
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_reader_fill(%struct.vpx_reader*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
