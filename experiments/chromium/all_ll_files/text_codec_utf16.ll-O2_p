; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/text_codec_utf16.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/text_codec_utf16.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.WTF::TextEncoding" = type opaque
%"class.WTF::TextCodecUTF16" = type <{ %"class.WTF::TextCodec", i8, i8, i8, i8, i16, [2 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF14TextCodecUTF16D0Ev = comdat any

$_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm = comdat any

$_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm = comdat any

@.str = private unnamed_addr constant [9 x i8] c"UTF-16LE\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"UTF-16BE\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"ISO-10646-UCS-2\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"UCS-2\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"UTF-16\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Unicode\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"csUnicode\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"unicodeFEFF\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"unicodeFFFE\00", align 1
@_ZN3WTF7unicodeL21kReplacementCharacterE = internal constant i16 -3, align 2
@.str.9 = private unnamed_addr constant [53 x i8] c"length <= std::numeric_limits<wtf_size_t>::max() / 2\00", align 1
@.str.10 = private unnamed_addr constant [71 x i8] c"../../third_party/blink/renderer/platform/wtf/text/text_codec_utf16.cc\00", align 1
@_ZTVN3WTF14TextCodecUTF16E = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::TextCodec"*)* @_ZN3WTF9TextCodecD2Ev to i8*), i8* bitcast (void (%"class.WTF::TextCodecUTF16"*)* @_ZN3WTF14TextCodecUTF16D0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.WTF::TextCodecUTF16"*, i8*, i32, i32, i1, i8*)* @_ZN3WTF14TextCodecUTF166DecodeEPKcjNS_13FlushBehaviorEbRb to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF16"*, i16*, i32, i32)* @_ZN3WTF14TextCodecUTF166EncodeEPKDsjNS_19UnencodableHandlingE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF16"*, i8*, i32, i32)* @_ZN3WTF14TextCodecUTF166EncodeEPKhjNS_19UnencodableHandlingE to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodec"*, i8*, i32, i8*, i64)* @_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodec"*, i16*, i32, i8*, i64)* @_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm to i8*)] }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF14TextCodecUTF1621RegisterEncodingNamesEPFvPKcS2_E(void (i8*, i8*)* nocapture) local_unnamed_addr #0 align 2 {
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #9
  tail call void %0(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF14TextCodecUTF1614RegisterCodecsEPFvPKcPFNSt3__110unique_ptrINS_9TextCodecENS3_14default_deleteIS5_EEEERKNS_12TextEncodingEPKvESD_E(void (i8*, %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)*, i8*)* nocapture) local_unnamed_addr #0 align 2 {
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL30NewStreamingTextDecoderUTF16LEERKNS_12TextEncodingEPKv, i8* null) #9
  tail call void %0(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTFL30NewStreamingTextDecoderUTF16BEERKNS_12TextEncodingEPKv, i8* null) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.WTF::TextCodec"* @_ZN3WTFL30NewStreamingTextDecoderUTF16LEERKNS_12TextEncodingEPKv(%"class.WTF::TextEncoding"* nocapture readnone, i8* nocapture readnone) #0 {
  %3 = tail call noalias i8* @malloc(i64 16) #9
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF14TextCodecUTF16E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  store i8 1, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 9
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 11
  store i8 0, i8* %7, align 1
  %8 = bitcast i8* %3 to %"class.WTF::TextCodec"*
  ret %"class.WTF::TextCodec"* %8
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.WTF::TextCodec"* @_ZN3WTFL30NewStreamingTextDecoderUTF16BEERKNS_12TextEncodingEPKv(%"class.WTF::TextEncoding"* nocapture readnone, i8* nocapture readnone) #0 {
  %3 = tail call noalias i8* @malloc(i64 16) #9
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF14TextCodecUTF16E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 9
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 11
  store i8 0, i8* %7, align 1
  %8 = bitcast i8* %3 to %"class.WTF::TextCodec"*
  ret %"class.WTF::TextCodec"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF14TextCodecUTF166DecodeEPKcjNS_13FlushBehaviorEbRb(%"class.WTF::TextCodecUTF16"* nocapture, i8* nocapture readonly, i32, i32, i1 zeroext, i8* nocapture dereferenceable(1)) unnamed_addr #0 align 2 {
  %7 = alloca i16*, align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = icmp ugt i32 %3, 1
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %24

11:                                               ; preds = %6
  br i1 %9, label %12, label %22

12:                                               ; preds = %11
  %13 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 2
  %14 = load i8, i8* %13, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 4
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %16, %12
  %21 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 4
  store i8 0, i8* %21, align 1
  store i8 0, i8* %13, align 1
  store i8 1, i8* %5, align 1
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %8, i16* nonnull @_ZN3WTF7unicodeL21kReplacementCharacterE, i32 1) #9
  br label %221

22:                                               ; preds = %16, %11
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  br label %221

24:                                               ; preds = %6
  %25 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 2
  %26 = load i8, i8* %25, align 1, !range !2
  %27 = zext i8 %26 to i32
  %28 = add i32 %27, %2
  %29 = and i32 %28, 1
  %30 = icmp ne i32 %29, 0
  %31 = lshr i32 %28, 1
  %32 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 4
  %33 = load i8, i8* %32, align 1, !range !2
  %34 = zext i8 %33 to i32
  %35 = add nuw i32 %31, %34
  %36 = and i1 %9, %30
  %37 = zext i1 %36 to i32
  %38 = add nuw i32 %35, %37
  %39 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #9
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %40 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %38, i16** nonnull dereferenceable(8) %7) #9
  %41 = ptrtoint %"class.WTF::StringImpl"* %40 to i64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #9
  %42 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %42, label %50, label %43

43:                                               ; preds = %24
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 1
  %49 = bitcast %"class.WTF::StringImpl"* %48 to i16*
  br label %50

50:                                               ; preds = %24, %43, %47
  %51 = phi i16* [ %49, %47 ], [ null, %43 ], [ null, %24 ]
  %52 = icmp eq i32 %31, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 1
  %55 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 3
  %56 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 5
  br label %60

57:                                               ; preds = %124, %50
  %58 = phi i8* [ %1, %50 ], [ %101, %124 ]
  %59 = phi i16* [ %51, %50 ], [ %125, %124 ]
  br i1 %30, label %128, label %131

60:                                               ; preds = %124, %53
  %61 = phi i32 [ 0, %53 ], [ %126, %124 ]
  %62 = phi i16* [ %51, %53 ], [ %125, %124 ]
  %63 = phi i8* [ %1, %53 ], [ %101, %124 ]
  %64 = load i8, i8* %25, align 1, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = load i8, i8* %54, align 8, !range !2
  %67 = icmp ne i8 %66, 0
  br i1 %65, label %83, label %68

68:                                               ; preds = %60
  %69 = load i8, i8* %55, align 2
  %70 = zext i8 %69 to i32
  br i1 %67, label %71, label %76

71:                                               ; preds = %68
  %72 = load i8, i8* %63, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 8
  %75 = or i32 %74, %70
  br label %81

76:                                               ; preds = %68
  %77 = shl nuw nsw i32 %70, 8
  %78 = load i8, i8* %63, align 1
  %79 = zext i8 %78 to i32
  %80 = or i32 %77, %79
  br label %81

81:                                               ; preds = %76, %71
  %82 = phi i32 [ %75, %71 ], [ %80, %76 ]
  store i8 0, i8* %25, align 1
  br label %98

83:                                               ; preds = %60
  %84 = load i8, i8* %63, align 1
  %85 = zext i8 %84 to i32
  br i1 %67, label %86, label %92

86:                                               ; preds = %83
  %87 = getelementptr inbounds i8, i8* %63, i64 1
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 8
  %91 = or i32 %90, %85
  br label %98

92:                                               ; preds = %83
  %93 = shl nuw nsw i32 %85, 8
  %94 = getelementptr inbounds i8, i8* %63, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = or i32 %93, %96
  br label %98

98:                                               ; preds = %86, %92, %81
  %99 = phi i64 [ 1, %81 ], [ 2, %92 ], [ 2, %86 ]
  %100 = phi i32 [ %82, %81 ], [ %97, %92 ], [ %91, %86 ]
  %101 = getelementptr inbounds i8, i8* %63, i64 %99
  %102 = trunc i32 %100 to i16
  %103 = load i8, i8* %32, align 1, !range !2
  %104 = icmp ne i8 %103, 0
  %105 = and i32 %100, 64512
  %106 = icmp eq i32 %105, 56320
  %107 = and i1 %104, %106
  br i1 %107, label %108, label %112

108:                                              ; preds = %98
  %109 = load i16, i16* %56, align 4
  %110 = getelementptr inbounds i16, i16* %62, i64 1
  store i16 %109, i16* %62, align 2
  store i8 0, i8* %32, align 1
  %111 = getelementptr inbounds i16, i16* %62, i64 2
  store i16 %102, i16* %110, align 2
  br label %124

112:                                              ; preds = %98
  %113 = icmp eq i8 %103, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %112
  store i8 0, i8* %32, align 1
  store i8 1, i8* %5, align 1
  %115 = getelementptr inbounds i16, i16* %62, i64 1
  store i16 -3, i16* %62, align 2
  br label %116

116:                                              ; preds = %112, %114
  %117 = phi i16* [ %115, %114 ], [ %62, %112 ]
  %118 = trunc i32 %105 to i16
  switch i16 %118, label %122 [
    i16 -10240, label %119
    i16 -9216, label %120
  ]

119:                                              ; preds = %116
  store i8 1, i8* %32, align 1
  store i16 %102, i16* %56, align 4
  br label %124

120:                                              ; preds = %116
  store i8 1, i8* %5, align 1
  %121 = getelementptr inbounds i16, i16* %117, i64 1
  store i16 -3, i16* %117, align 2
  br label %124

122:                                              ; preds = %116
  %123 = getelementptr inbounds i16, i16* %117, i64 1
  store i16 %102, i16* %117, align 2
  br label %124

124:                                              ; preds = %119, %122, %120, %108
  %125 = phi i16* [ %111, %108 ], [ %117, %119 ], [ %121, %120 ], [ %123, %122 ]
  %126 = add nuw nsw i32 %61, 1
  %127 = icmp eq i32 %126, %31
  br i1 %127, label %57, label %60

128:                                              ; preds = %57
  store i8 1, i8* %25, align 1
  %129 = load i8, i8* %58, align 1
  %130 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 3
  store i8 %129, i8* %130, align 2
  br label %131

131:                                              ; preds = %128, %57
  br i1 %9, label %132, label %140

132:                                              ; preds = %131
  %133 = load i8, i8* %25, align 1, !range !2
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %132
  %136 = load i8, i8* %32, align 1, !range !2
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %135, %132
  store i8 0, i8* %32, align 1
  store i8 0, i8* %25, align 1
  store i8 1, i8* %5, align 1
  %139 = getelementptr inbounds i16, i16* %59, i64 1
  store i16 -3, i16* %59, align 2
  br label %140

140:                                              ; preds = %135, %138, %131
  %141 = phi i16* [ %139, %138 ], [ %59, %135 ], [ %59, %131 ]
  br i1 %42, label %142, label %144

142:                                              ; preds = %140
  %143 = load i32, i32* inttoptr (i64 4 to i32*), align 4
  br label %151

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 1
  %150 = ptrtoint %"class.WTF::StringImpl"* %149 to i64
  br label %151

151:                                              ; preds = %142, %144, %148
  %152 = phi i32 [ %146, %148 ], [ 0, %144 ], [ %143, %142 ]
  %153 = phi i64 [ %150, %148 ], [ 0, %144 ], [ 0, %142 ]
  %154 = ptrtoint i16* %141 to i64
  %155 = sub i64 %154, %153
  %156 = lshr exact i64 %155, 1
  %157 = trunc i64 %156 to i32
  %158 = icmp eq i32 %152, %157
  br i1 %158, label %175, label %159

159:                                              ; preds = %151
  %160 = call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %40, i32 0, i32 %157) #9
  %161 = ptrtoint %"class.WTF::StringImpl"* %160 to i64
  br i1 %42, label %175, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #9
  br label %175

175:                                              ; preds = %151, %159, %171, %174
  %176 = phi i64 [ %41, %151 ], [ %161, %159 ], [ %161, %174 ], [ %161, %171 ]
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %185, label %178

178:                                              ; preds = %175
  %179 = inttoptr i64 %176 to %"class.WTF::StringImpl"*
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 1
  %181 = load i32, i32* %180, align 4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %185, label %183

183:                                              ; preds = %178
  %184 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %179, %"class.WTF::StringImpl"** %184, align 8
  br label %221

185:                                              ; preds = %178, %175
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %205, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %205

193:                                              ; preds = %188
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i33
  %197 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %196, i33 1) #9
  %198 = extractvalue { i33, i1 } %197, 1
  %199 = extractvalue { i33, i1 } %197, 0
  %200 = icmp slt i33 %199, 0
  %201 = or i1 %198, %200
  br i1 %201, label %202, label %203, !prof !3

202:                                              ; preds = %193
  call void @llvm.trap() #9
  unreachable

203:                                              ; preds = %193
  %204 = trunc i33 %199 to i32
  store i32 %204, i32* %194, align 4
  br label %205

205:                                              ; preds = %185, %188, %203
  %206 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %186, %"class.WTF::StringImpl"** %206, align 8
  %207 = inttoptr i64 %176 to %"class.WTF::StringImpl"*
  br i1 %177, label %221, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 monotonic, align 4
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %215, label %217

215:                                              ; preds = %208
  %216 = add i32 %214, -1
  store i32 %216, i32* %213, align 4
  br label %217

217:                                              ; preds = %215, %208
  %218 = phi i32 [ %216, %215 ], [ %214, %208 ]
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %207) #9
  br label %221

221:                                              ; preds = %220, %217, %205, %183, %22, %20
  %222 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %223 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %222, align 8
  ret %"class.WTF::StringImpl"* %223
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF14TextCodecUTF166EncodeEPKDsjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.WTF::TextCodecUTF16"* nocapture readonly, i16* nocapture readonly, i32, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = shl i32 %3, 1
  %8 = zext i32 %7 to i64
  %9 = icmp ult i32 %7, 23
  %10 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 24, i1 false)
  br i1 %9, label %18, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = add nuw nsw i64 %8, 16
  %15 = and i64 %14, 8589934576
  %16 = tail call i8* @_Znwm(i64 %15) #10
  store i8* %16, i8** %6, align 8
  %17 = or i64 %15, -9223372036854775808
  store i64 %17, i64* %12, align 8
  store i64 %8, i64* %13, align 8
  br label %24

18:                                               ; preds = %5
  %19 = trunc i32 %7 to i8
  %20 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  store i8 %19, i8* %21, align 1
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %23 = icmp eq i32 %7, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %18, %11
  %25 = phi i8* [ %16, %11 ], [ %22, %18 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 0, i64 %8, i1 false) #9
  br label %26

26:                                               ; preds = %18, %24
  %27 = phi i8* [ %22, %18 ], [ %25, %24 ]
  %28 = getelementptr inbounds i8, i8* %27, i64 %8
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %1, i64 0, i32 1
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = icmp ne i32 %3, 0
  br i1 %31, label %39, label %33

33:                                               ; preds = %26
  br i1 %32, label %34, label %93

34:                                               ; preds = %33
  %35 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %38 = zext i32 %3 to i64
  br label %45

39:                                               ; preds = %26
  br i1 %32, label %40, label %93

40:                                               ; preds = %39
  %41 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %44 = zext i32 %3 to i64
  br label %69

45:                                               ; preds = %45, %34
  %46 = phi i64 [ 0, %34 ], [ %67, %45 ]
  %47 = getelementptr inbounds i16, i16* %2, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = trunc i16 %48 to i8
  %50 = trunc i64 %46 to i32
  %51 = shl i32 %50, 1
  %52 = zext i32 %51 to i64
  %53 = load i8, i8* %36, align 1
  %54 = icmp slt i8 %53, 0
  %55 = load i8*, i8** %6, align 8
  %56 = select i1 %54, i8* %55, i8* %37
  %57 = getelementptr inbounds i8, i8* %56, i64 %52
  store i8 %49, i8* %57, align 1
  %58 = lshr i16 %48, 8
  %59 = trunc i16 %58 to i8
  %60 = or i32 %51, 1
  %61 = zext i32 %60 to i64
  %62 = load i8, i8* %36, align 1
  %63 = icmp slt i8 %62, 0
  %64 = load i8*, i8** %6, align 8
  %65 = select i1 %63, i8* %64, i8* %37
  %66 = getelementptr inbounds i8, i8* %65, i64 %61
  store i8 %59, i8* %66, align 1
  %67 = add nuw nsw i64 %46, 1
  %68 = icmp eq i64 %67, %38
  br i1 %68, label %93, label %45

69:                                               ; preds = %69, %40
  %70 = phi i64 [ 0, %40 ], [ %91, %69 ]
  %71 = getelementptr inbounds i16, i16* %2, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = lshr i16 %72, 8
  %74 = trunc i16 %73 to i8
  %75 = trunc i64 %70 to i32
  %76 = shl i32 %75, 1
  %77 = zext i32 %76 to i64
  %78 = load i8, i8* %42, align 1
  %79 = icmp slt i8 %78, 0
  %80 = load i8*, i8** %6, align 8
  %81 = select i1 %79, i8* %80, i8* %43
  %82 = getelementptr inbounds i8, i8* %81, i64 %77
  store i8 %74, i8* %82, align 1
  %83 = trunc i16 %72 to i8
  %84 = or i32 %76, 1
  %85 = zext i32 %84 to i64
  %86 = load i8, i8* %42, align 1
  %87 = icmp slt i8 %86, 0
  %88 = load i8*, i8** %6, align 8
  %89 = select i1 %87, i8* %88, i8* %43
  %90 = getelementptr inbounds i8, i8* %89, i64 %85
  store i8 %83, i8* %90, align 1
  %91 = add nuw nsw i64 %70, 1
  %92 = icmp eq i64 %91, %44
  br i1 %92, label %93, label %69

93:                                               ; preds = %45, %69, %33, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF14TextCodecUTF166EncodeEPKhjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.WTF::TextCodecUTF16"* nocapture readonly, i8* nocapture readonly, i32, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp slt i32 %3, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %3) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2147483647) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.9, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.10, i64 0, i64 0), i32 186, %"class.logging::CheckOpResult"* nonnull %7) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = shl i32 %3, 1
  %26 = zext i32 %25 to i64
  %27 = icmp ult i32 %25, 23
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 -86, i64 24, i1 false)
  br i1 %27, label %36, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = add nuw nsw i64 %26, 16
  %33 = and i64 %32, 8589934576
  %34 = call i8* @_Znwm(i64 %33) #10
  store i8* %34, i8** %24, align 8
  %35 = or i64 %33, -9223372036854775808
  store i64 %35, i64* %30, align 8
  store i64 %26, i64* %31, align 8
  br label %42

36:                                               ; preds = %23
  %37 = trunc i32 %25 to i8
  %38 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  store i8 %37, i8* %39, align 1
  %40 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %41 = icmp eq i32 %25, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %36, %29
  %43 = phi i8* [ %34, %29 ], [ %40, %36 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 0, i64 %26, i1 false) #9
  br label %44

44:                                               ; preds = %36, %42
  %45 = phi i8* [ %40, %36 ], [ %43, %42 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %26
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %1, i64 0, i32 1
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  %50 = icmp ne i32 %3, 0
  br i1 %49, label %57, label %51

51:                                               ; preds = %44
  br i1 %50, label %52, label %105

52:                                               ; preds = %51
  %53 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %56 = zext i32 %3 to i64
  br label %63

57:                                               ; preds = %44
  br i1 %50, label %58, label %105

58:                                               ; preds = %57
  %59 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %62 = zext i32 %3 to i64
  br label %84

63:                                               ; preds = %63, %52
  %64 = phi i64 [ 0, %52 ], [ %82, %63 ]
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = trunc i64 %64 to i32
  %68 = shl i32 %67, 1
  %69 = zext i32 %68 to i64
  %70 = load i8, i8* %54, align 1
  %71 = icmp slt i8 %70, 0
  %72 = load i8*, i8** %24, align 8
  %73 = select i1 %71, i8* %72, i8* %55
  %74 = getelementptr inbounds i8, i8* %73, i64 %69
  store i8 %66, i8* %74, align 1
  %75 = or i32 %68, 1
  %76 = zext i32 %75 to i64
  %77 = load i8, i8* %54, align 1
  %78 = icmp slt i8 %77, 0
  %79 = load i8*, i8** %24, align 8
  %80 = select i1 %78, i8* %79, i8* %55
  %81 = getelementptr inbounds i8, i8* %80, i64 %76
  store i8 0, i8* %81, align 1
  %82 = add nuw nsw i64 %64, 1
  %83 = icmp eq i64 %82, %56
  br i1 %83, label %105, label %63

84:                                               ; preds = %84, %58
  %85 = phi i64 [ 0, %58 ], [ %103, %84 ]
  %86 = trunc i64 %85 to i32
  %87 = shl i32 %86, 1
  %88 = zext i32 %87 to i64
  %89 = load i8, i8* %60, align 1
  %90 = icmp slt i8 %89, 0
  %91 = load i8*, i8** %24, align 8
  %92 = select i1 %90, i8* %91, i8* %61
  %93 = getelementptr inbounds i8, i8* %92, i64 %88
  store i8 0, i8* %93, align 1
  %94 = getelementptr inbounds i8, i8* %2, i64 %85
  %95 = load i8, i8* %94, align 1
  %96 = or i32 %87, 1
  %97 = zext i32 %96 to i64
  %98 = load i8, i8* %60, align 1
  %99 = icmp slt i8 %98, 0
  %100 = load i8*, i8** %24, align 8
  %101 = select i1 %99, i8* %100, i8* %61
  %102 = getelementptr inbounds i8, i8* %101, i64 %97
  store i8 %95, i8* %102, align 1
  %103 = add nuw nsw i64 %85, 1
  %104 = icmp eq i64 %103, %62
  br i1 %104, label %105, label %84

105:                                              ; preds = %63, %84, %51, %57
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF14TextCodecUTF16D0Ev(%"class.WTF::TextCodecUTF16"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::TextCodecUTF16", %"class.WTF::TextCodecUTF16"* %0, i64 0, i32 0
  tail call void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"* %2) #9
  %3 = bitcast %"class.WTF::TextCodecUTF16"* %0 to i8*
  tail call void @free(i8* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZN3WTF9TextCodec10EncodeIntoEPKhjPhm(%"class.WTF::TextCodec"*, i8*, i32, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret { i32, i64 } zeroinitializer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZN3WTF9TextCodec10EncodeIntoEPKDsjPhm(%"class.WTF::TextCodec"*, i16*, i32, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret { i32, i64 } zeroinitializer
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
