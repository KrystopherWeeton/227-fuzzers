; ModuleID = '../../third_party/skia/src/pathops/SkDCubicToQuads.cpp'
source_filename = "../../third_party/skia/src/pathops/SkDCubicToQuads.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkDCubic6toQuadEv(%struct.SkDQuad* noalias nocapture sret, %struct.SkDCubic* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %struct.SkDQuad* %0 to i8*
  %4 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %5 = bitcast %struct.SkDCubic* %1 to i8*
  %6 = getelementptr %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2
  %7 = bitcast %struct.SkDPoint* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -1, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %5, i64 16, i1 false)
  %8 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 0
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fmul <2 x double> %10, <double 3.000000e+00, double 3.000000e+00>
  %12 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fsub <2 x double> %11, %13
  %15 = fmul <2 x double> %14, <double 5.000000e-01, double 5.000000e-01>
  %16 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %18 = bitcast double* %16 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = fmul <2 x double> %19, <double 3.000000e+00, double 3.000000e+00>
  %21 = bitcast %struct.SkDPoint* %17 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = fsub <2 x double> %20, %22
  %24 = fmul <2 x double> %23, <double 5.000000e-01, double 5.000000e-01>
  %25 = fadd <2 x double> %15, %24
  %26 = fmul <2 x double> %25, <double 5.000000e-01, double 5.000000e-01>
  %27 = bitcast double* %4 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 8
  %28 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2
  %29 = bitcast %struct.SkDPoint* %28 to i8*
  %30 = bitcast %struct.SkDPoint* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
