; ModuleID = '../../third_party/skia/src/sksl/SkSLAnalysis.cpp'
source_filename = "../../third_party/skia/src/sksl/SkSLAnalysis.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Variable" = type <{ %"class.SkSL::Symbol", %"class.SkSL::VarDeclaration"*, %"struct.SkSL::Modifiers"*, i8, i8, [6 x i8] }>
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.6", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.8" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::VarDeclaration" = type { %"class.SkSL::Statement", %"class.SkSL::Variable"*, %"class.SkSL::Type"*, i32, %"class.std::__1::unique_ptr" }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::TProgramVisitor" = type { i32 (...)** }
%"class.SkSL::AnyConstructor" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Statement"* }
%"class.SkSL::ProgramElement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::TProgramVisitor.88" = type { i32 (...)** }
%"struct.SkSL::Program" = type { %"class.std::__1::unique_ptr.90", %"class.std::__1::unique_ptr.96", %"class.std::__1::shared_ptr.103", %"class.std::__1::shared_ptr", %"class.std::__1::unique_ptr.136", %"struct.SkSL::Program::Inputs", %"class.std::__1::vector.148", %"class.std::__1::vector.161", %"class.std::__1::unique_ptr.168", %"class.std::__1::unique_ptr.174" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.SkSL::String"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.SkSL::ProgramConfig"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.99"* }
%"class.std::__1::vector.99" = type opaque
%"class.std::__1::shared_ptr.103" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104" }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.110" }
%"struct.std::__1::__atomic_base.110" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set.111" }
%"class.std::__1::unordered_set.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.131", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i64 }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { float }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector.61", i8, %"class.std::__1::vector.69", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"class.std::__1::unique_ptr.63"*, %"class.std::__1::unique_ptr.63"*, %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::unique_ptr.63"* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"class.std::__1::unique_ptr.71"*, %"class.std::__1::unique_ptr.71"*, %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.std::__1::unique_ptr.71"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.82" }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.SkSL::Pool"* }
%"class.SkSL::Pool" = type { %"class.std::__1::unique_ptr.139" }
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %class.GrMemoryPool* }
%class.GrMemoryPool = type { %class.GrBlockAllocator }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%"struct.SkSL::Program::Inputs" = type { i8, i8 }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"*, %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.SkSL::ProgramElement"* }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.std::__1::unique_ptr.150"* }
%"class.std::__1::vector.161" = type { %"class.std::__1::__vector_base.162" }
%"class.std::__1::__vector_base.162" = type { %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"**, %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.SkSL::ProgramElement"** }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.SkSL::ModifiersPool"* }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.SkSL::ProgramUsage"* }
%"class.SkSL::ProgramUsage" = type { %class.SkTHashMap.177, %class.SkTHashMap.186 }
%class.SkTHashMap.177 = type { %class.SkTHashTable.178 }
%class.SkTHashTable.178 = type { i32, i32, %class.SkAutoTArray.179 }
%class.SkAutoTArray.179 = type { %"class.std::__1::unique_ptr.180" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", i32, [4 x i8] }
%"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.base", [4 x i8] }
%"struct.std::__1::pair.base" = type <{ %"class.SkSL::Variable"*, %"struct.SkSL::ProgramUsage::VariableCounts" }>
%"struct.SkSL::ProgramUsage::VariableCounts" = type { i32, i32, i32 }
%class.SkTHashMap.186 = type { %class.SkTHashTable.187 }
%class.SkTHashTable.187 = type { i32, i32, %class.SkAutoTArray.188 }
%class.SkAutoTArray.188 = type { %"class.std::__1::unique_ptr.189" }
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", i32, [4 x i8] }
%"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.base.221", [4 x i8] }
%"struct.std::__1::pair.base.221" = type <{ %"class.SkSL::FunctionDeclaration"*, i32 }>
%"class.SkSL::FunctionDeclaration" = type { %"class.SkSL::Symbol", %"class.SkSL::FunctionDefinition"*, %"struct.SkSL::Modifiers"*, %"class.std::__1::vector.48", %"class.SkSL::Type"*, i8, i8, i32 }
%"class.SkSL::FunctionDefinition" = type { %"class.SkSL::ProgramElement", %"class.SkSL::FunctionDeclaration"*, i8, %"class.std::__1::unique_ptr.16", %"class.std::__1::unordered_set", %"struct.SkSL::ASTNode"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.22", %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.36", %"class.std::__1::__compressed_pair.38", [4 x i8] }>
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24", %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.SkSL::ASTNode" = type { %"class.std::__1::vector.41"*, %"struct.SkSL::ASTNode::NodeData", i32, i32, %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID" }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { %"struct.SkSL::ASTNode"*, %"struct.SkSL::ASTNode"*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.SkSL::ASTNode"* }
%"struct.SkSL::ASTNode::NodeData" = type { [128 x i8], i32 }
%"class.SkSL::ASTNode::ID" = type { i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"class.SkSL::Variable"**, %"class.SkSL::Variable"**, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.SkSL::Variable"** }
%"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor" = type { %"class.SkSL::ProgramVisitor", %"class.SkSL::Context"*, %"class.SkSL::Variable"*, i8, [3 x i8], %"struct.SkSL::SampleUsage", i32 }
%"class.SkSL::ProgramVisitor" = type { %"class.SkSL::TProgramVisitor" }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor" = type <{ %"class.SkSL::ProgramVisitor", i32, [4 x i8] }>
%"class.SkSL::(anonymous namespace)::NodeCountVisitor" = type { %"class.SkSL::ProgramVisitor", i32, i32 }
%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit" = type { %"class.SkSL::ProgramVisitor", i8, i32, i32, i32 }
%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor" = type <{ %"class.SkSL::ProgramVisitor", %"class.SkSL::ProgramUsage"*, i32, [4 x i8] }>
%"struct.SkSL::LoadedModule" = type { i8, %"class.std::__1::shared_ptr", %"class.std::__1::vector.148" }
%"class.SkSL::(anonymous namespace)::VariableWriteVisitor" = type { %"class.SkSL::ProgramVisitor", %"class.SkSL::Variable"* }
%"struct.SkSL::Analysis::AssignmentInfo" = type { %"class.SkSL::VariableReference"* }
%"class.SkSL::VariableReference" = type <{ %"class.SkSL::Expression", %"class.SkSL::Variable"*, i8, [7 x i8] }>
%"class.SkSL::(anonymous namespace)::TrivialErrorReporter" = type <{ %"class.SkSL::ErrorReporter", i32, [4 x i8] }>
%"class.SkSL::(anonymous namespace)::IsAssignableVisitor" = type { %"class.SkSL::ErrorReporter"*, %"class.SkSL::VariableReference"* }
%class.RefKindWriter = type <{ %"class.SkSL::ProgramWriter", i8, [7 x i8] }>
%"class.SkSL::ProgramWriter" = type { %"class.SkSL::TProgramVisitor.88" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.SkSL::Analysis::UnrollableLoopInfo" = type { %"class.SkSL::Variable"*, double, double, i32 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.SkSL::ES2IndexingVisitor" = type { %"class.SkSL::ProgramVisitor", %"class.SkSL::ErrorReporter"*, %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.200", %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.SkSL::Variable"* }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.SkSL::ConstantExpressionVisitor" = type { %"class.SkSL::ProgramVisitor", %"class.std::__1::set"* }
%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor" = type <{ %"class.SkSL::ProgramVisitor", i8, i8, i8, [5 x i8] }>
%"class.SkSL::SwitchCase" = type { %"class.SkSL::Statement", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.16" }

$_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE = comdat any

$_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE = comdat any

$_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE = comdat any

$_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE15visitExpressionERNS_10ExpressionE = comdat any

$_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE14visitStatementERNS_9StatementE = comdat any

$_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE19visitProgramElementERNS_14ProgramElementE = comdat any

$_ZN4SkSL13ErrorReporterD2Ev = comdat any

$_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED2Ev = comdat any

$_ZN4SkSL13ErrorReporter5errorEiPKc = comdat any

$_ZN4SkSL18ES2IndexingVisitorD2Ev = comdat any

$_ZN4SkSL25ConstantExpressionVisitor15visitExpressionERKNS_10ExpressionE = comdat any

$_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev = comdat any

$_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED0Ev = comdat any

$_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED0Ev = comdat any

$_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE = comdat any

$_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE = comdat any

$_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_ = comdat any

$_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL8VariableENS1_12ProgramUsage14VariableCountsE10SkGoodHashE4PairES4_S9_E6resizeEi = comdat any

$_ZN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE3setES3_i = comdat any

$_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE4PairES4_S7_E6resizeEi = comdat any

$_ZN4SkSL13ProgramWriter18visitExpressionPtrERNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE = comdat any

$_ZN4SkSL13ProgramWriter17visitStatementPtrERNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE = comdat any

$_ZN4SkSL18ES2IndexingVisitorD0Ev = comdat any

$_ZN4SkSL18ES2IndexingVisitor15visitExpressionERKNS_10ExpressionE = comdat any

$_ZN4SkSL18ES2IndexingVisitor14visitStatementERKNS_9StatementE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE = comdat any

$_ZN4SkSL25ConstantExpressionVisitorD0Ev = comdat any

$_ZTVN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEEE = comdat any

$_ZTVN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEEE = comdat any

$_ZTVN4SkSL18ES2IndexingVisitorE = comdat any

$_ZTVN4SkSL25ConstantExpressionVisitorE = comdat any

@.str = private unnamed_addr constant [29 x i8] c"can't assign to expression '\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@__const._ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE.ignored = private unnamed_addr constant { %"class.SkSL::Variable"*, double, double, i32, [4 x i8] } { %"class.SkSL::Variable"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Variable"*), double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@_ZTVN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEEE = weak_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTVN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEEE = weak_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor.88"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::TProgramVisitor.88"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE15visitExpressionERNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE14visitStatementERNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE19visitProgramElementERNS_14ProgramElementE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTVN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"*)* @_ZN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"sample\00", align 1
@_ZTVN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"*)* @_ZN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_122BuiltinVariableVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@_ZTVN4SkSL12_GLOBAL__N_116NodeCountVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*)* @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@_ZTVN4SkSL12_GLOBAL__N_122SwitchCaseContainsExitE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"*)* @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExitD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"*, %"class.SkSL::Statement"*)* @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExit14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*)* @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@_ZN6SkOpts7hash_fnE = external local_unnamed_addr global i32 (i8*, i64, i32)*, align 8
@_ZTVN4SkSL12_GLOBAL__N_120VariableWriteVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::VariableWriteVisitor"*)* @_ZN4SkSL12_GLOBAL__N_120VariableWriteVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::VariableWriteVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_120VariableWriteVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@_ZTVN4SkSL12_GLOBAL__N_120TrivialErrorReporterE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::ErrorReporter"*)* @_ZN4SkSL13ErrorReporterD2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"*)* @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporterD0Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"*, i32, %"class.SkSL::String"*)* @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter5errorEiNS_6StringE to i8*), i8* bitcast (i32 (%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"*)* @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter10errorCountEv to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"*, i32)* @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter13setErrorCountEi to i8*)] }, align 8
@.str.3 = private unnamed_addr constant [35 x i8] c"cannot modify immutable variable '\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"cannot assign to this expression\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"cannot write to the same swizzle field more than once\00", align 1
@_ZTVZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEE13RefKindWriter = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor.88"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED2Ev to i8*), i8* bitcast (void (%class.RefKindWriter*)* @_ZZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEEN13RefKindWriterD0Ev to i8*), i8* bitcast (i1 (%class.RefKindWriter*, %"class.SkSL::Expression"*)* @_ZZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEEN13RefKindWriter15visitExpressionERS1_ to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE14visitStatementERNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE19visitProgramElementERNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramWriter"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL13ProgramWriter18visitExpressionPtrERNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramWriter"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL13ProgramWriter17visitStatementPtrERNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8
@.str.7 = private unnamed_addr constant [25 x i8] c"missing init declaration\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"invalid init declaration\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"invalid type for loop index\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"missing loop index initializer\00", align 1
@.str.11 = private unnamed_addr constant [53 x i8] c"loop index initializer must be a constant expression\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"missing condition\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"invalid condition\00", align 1
@.str.14 = private unnamed_addr constant [51 x i8] c"expected loop index on left hand side of condition\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"invalid relational operator\00", align 1
@.str.16 = private unnamed_addr constant [55 x i8] c"loop index must be compared with a constant expression\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"missing loop expression\00", align 1
@.str.18 = private unnamed_addr constant [39 x i8] c"expected loop index in loop expression\00", align 1
@.str.19 = private unnamed_addr constant [53 x i8] c"loop index must be modified by a constant expression\00", align 1
@.str.20 = private unnamed_addr constant [36 x i8] c"invalid operator in loop expression\00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"invalid loop expression\00", align 1
@.str.22 = private unnamed_addr constant [56 x i8] c"loop index must not be modified within body of the loop\00", align 1
@.str.23 = private unnamed_addr constant [52 x i8] c"loop must guarantee termination in fewer iterations\00", align 1
@_ZTVN4SkSL18ES2IndexingVisitorE = linkonce_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::ES2IndexingVisitor"*)* @_ZN4SkSL18ES2IndexingVisitorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ES2IndexingVisitor"*)* @_ZN4SkSL18ES2IndexingVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL18ES2IndexingVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL18ES2IndexingVisitor14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, comdat, align 8
@.str.24 = private unnamed_addr constant [34 x i8] c"index expression must be constant\00", align 1
@_ZTVN4SkSL25ConstantExpressionVisitorE = linkonce_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::ConstantExpressionVisitor"*)* @_ZN4SkSL25ConstantExpressionVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::ConstantExpressionVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL25ConstantExpressionVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, comdat, align 8
@_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::TProgramVisitor"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev to i8*), i8* bitcast (void (%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"*)* @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorD0Ev to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"*, %"class.SkSL::Expression"*)* @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor15visitExpressionERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"*, %"class.SkSL::Statement"*)* @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE to i8*), i8* bitcast (i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)* @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"*)* @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (i1 (%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)* @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %186 [
    i32 31, label %187
    i32 42, label %187
    i32 45, label %187
    i32 46, label %187
    i32 43, label %187
    i32 51, label %187
    i32 54, label %187
    i32 55, label %187
    i32 30, label %5
    i32 33, label %29
    i32 34, label %29
    i32 35, label %29
    i32 36, label %29
    i32 37, label %29
    i32 38, label %29
    i32 39, label %29
    i32 40, label %29
    i32 41, label %51
    i32 44, label %76
    i32 47, label %84
    i32 48, label %113
    i32 50, label %128
    i32 49, label %136
    i32 52, label %144
    i32 53, label %156
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %7 = bitcast %"class.SkSL::Expression"* %6 to %"class.SkSL::Expression"**
  %8 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %7, align 8
  %9 = icmp eq %"class.SkSL::Expression"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %5
  %11 = bitcast %"class.SkSL::Expression"* %6 to %"class.std::__1::unique_ptr"*
  %12 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %13 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %13, i64 5
  %15 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %11) #14
  br i1 %16, label %187, label %17

17:                                               ; preds = %5, %10
  %18 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 1
  %19 = bitcast %"class.SkSL::Type"** %18 to %"class.SkSL::Expression"**
  %20 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %19, align 8
  %21 = icmp eq %"class.SkSL::Expression"* %20, null
  br i1 %21, label %187, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.SkSL::Type"** %18 to %"class.std::__1::unique_ptr"*
  %24 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %25 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %25, i64 5
  %27 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %23) #14
  br label %187

29:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %30 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %1) #14
  %31 = bitcast %"class.SkSL::AnyConstructor"* %30 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %32 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %31, align 8
  %33 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %32, i64 12
  %34 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %33, align 8
  %35 = tail call { %"class.std::__1::unique_ptr"*, i64 } %34(%"class.SkSL::AnyConstructor"* %30) #14
  %36 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %35, 0
  %37 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %35, 1
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %37
  %39 = icmp eq i64 %37, 0
  br i1 %39, label %187, label %40

40:                                               ; preds = %29
  %41 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  br label %44

42:                                               ; preds = %44
  %43 = icmp eq %"class.std::__1::unique_ptr"* %50, %38
  br i1 %43, label %187, label %44

44:                                               ; preds = %40, %42
  %45 = phi %"class.std::__1::unique_ptr"* [ %36, %40 ], [ %50, %42 ]
  %46 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %41, align 8
  %47 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %46, i64 5
  %48 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %47, align 8
  %49 = tail call zeroext i1 %48(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %45) #14
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 1
  br i1 %49, label %187, label %42

51:                                               ; preds = %2
  %52 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %53 = getelementptr inbounds i32, i32* %52, i64 4
  %54 = bitcast i32* %53 to %"class.std::__1::unique_ptr"**
  %55 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %54, align 8
  %56 = icmp eq %"class.std::__1::unique_ptr"* %55, null
  br i1 %56, label %187, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds i32, i32* %52, i64 6
  %59 = bitcast i32* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 %62
  %64 = icmp eq i64 %62, 0
  br i1 %64, label %187, label %65

65:                                               ; preds = %57
  %66 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  br label %69

67:                                               ; preds = %69
  %68 = icmp eq %"class.std::__1::unique_ptr"* %75, %63
  br i1 %68, label %187, label %69

69:                                               ; preds = %65, %67
  %70 = phi %"class.std::__1::unique_ptr"* [ %55, %65 ], [ %75, %67 ]
  %71 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %66, align 8
  %72 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %71, i64 5
  %73 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %72, align 8
  %74 = tail call zeroext i1 %73(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %70) #14
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 1
  br i1 %74, label %187, label %67

76:                                               ; preds = %2
  %77 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %78 = bitcast i32* %77 to %"class.std::__1::unique_ptr"*
  %79 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %80 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %79, align 8
  %81 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %80, i64 5
  %82 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %81, align 8
  %83 = tail call zeroext i1 %82(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %78) #14
  br label %187

84:                                               ; preds = %2
  %85 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %86 = getelementptr inbounds i32, i32* %85, i64 4
  %87 = bitcast i32* %86 to %"class.std::__1::unique_ptr"**
  %88 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %87, align 8
  %89 = icmp eq %"class.std::__1::unique_ptr"* %88, null
  br i1 %89, label %187, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds i32, i32* %85, i64 6
  %92 = bitcast i32* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = lshr i64 %93, 1
  %95 = and i64 %94, 2147483647
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 %95
  %97 = icmp eq i64 %95, 0
  br i1 %97, label %187, label %98

98:                                               ; preds = %90
  %99 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  br label %100

100:                                              ; preds = %98, %110
  %101 = phi %"class.std::__1::unique_ptr"* [ %88, %98 ], [ %111, %110 ]
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %102, align 8
  %104 = icmp eq %"class.SkSL::Expression"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %100
  %106 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %99, align 8
  %107 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %106, i64 5
  %108 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %107, align 8
  %109 = tail call zeroext i1 %108(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %101) #14
  br i1 %109, label %187, label %110

110:                                              ; preds = %100, %105
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 1
  %112 = icmp eq %"class.std::__1::unique_ptr"* %111, %96
  br i1 %112, label %187, label %100

113:                                              ; preds = %2
  %114 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %115 = bitcast %"class.SkSL::Expression"* %114 to %"class.std::__1::unique_ptr"*
  %116 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %117 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %116, align 8
  %118 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %117, i64 5
  %119 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %118, align 8
  %120 = tail call zeroext i1 %119(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %115) #14
  br i1 %120, label %187, label %121

121:                                              ; preds = %113
  %122 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %123 = bitcast i32* %122 to %"class.std::__1::unique_ptr"*
  %124 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %116, align 8
  %125 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %124, i64 5
  %126 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %125, align 8
  %127 = tail call zeroext i1 %126(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %123) #14
  br label %187

128:                                              ; preds = %2
  %129 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %130 = bitcast %"class.SkSL::Expression"* %129 to %"class.std::__1::unique_ptr"*
  %131 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %132 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %131, align 8
  %133 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %132, i64 5
  %134 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %133, align 8
  %135 = tail call zeroext i1 %134(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %130) #14
  br label %187

136:                                              ; preds = %2
  %137 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %138 = bitcast i32* %137 to %"class.std::__1::unique_ptr"*
  %139 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %140 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %139, align 8
  %141 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %140, i64 5
  %142 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %141, align 8
  %143 = tail call zeroext i1 %142(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %138) #14
  br label %187

144:                                              ; preds = %2
  %145 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %146 = bitcast %"class.SkSL::Expression"* %145 to %"class.SkSL::Expression"**
  %147 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %146, align 8
  %148 = icmp eq %"class.SkSL::Expression"* %147, null
  br i1 %148, label %187, label %149

149:                                              ; preds = %144
  %150 = bitcast %"class.SkSL::Expression"* %145 to %"class.std::__1::unique_ptr"*
  %151 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %152 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %151, align 8
  %153 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %152, i64 5
  %154 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %153, align 8
  %155 = tail call zeroext i1 %154(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %150) #14
  br label %187

156:                                              ; preds = %2
  %157 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %158 = bitcast %"class.SkSL::Expression"* %157 to %"class.std::__1::unique_ptr"*
  %159 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %160 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %161 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %160, i64 5
  %162 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %161, align 8
  %163 = tail call zeroext i1 %162(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %158) #14
  br i1 %163, label %187, label %164

164:                                              ; preds = %156
  %165 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %166 = bitcast i32* %165 to %"class.SkSL::Expression"**
  %167 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %166, align 8
  %168 = icmp eq %"class.SkSL::Expression"* %167, null
  br i1 %168, label %175, label %169

169:                                              ; preds = %164
  %170 = bitcast i32* %165 to %"class.std::__1::unique_ptr"*
  %171 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %172 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %171, i64 5
  %173 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %172, align 8
  %174 = tail call zeroext i1 %173(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %170) #14
  br i1 %174, label %187, label %175

175:                                              ; preds = %164, %169
  %176 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 1
  %177 = bitcast %"class.SkSL::Type"** %176 to %"class.SkSL::Expression"**
  %178 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %177, align 8
  %179 = icmp eq %"class.SkSL::Expression"* %178, null
  br i1 %179, label %187, label %180

180:                                              ; preds = %175
  %181 = bitcast %"class.SkSL::Type"** %176 to %"class.std::__1::unique_ptr"*
  %182 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %183 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %182, i64 5
  %184 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %183, align 8
  %185 = tail call zeroext i1 %184(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %181) #14
  br label %187

186:                                              ; preds = %2
  tail call void @llvm.trap()
  unreachable

187:                                              ; preds = %110, %105, %67, %69, %42, %44, %84, %51, %90, %57, %29, %17, %144, %175, %156, %169, %180, %149, %113, %121, %10, %22, %2, %2, %2, %2, %2, %2, %2, %2, %136, %128, %76
  %188 = phi i1 [ %143, %136 ], [ %135, %128 ], [ %83, %76 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ true, %10 ], [ false, %17 ], [ %28, %22 ], [ true, %113 ], [ %127, %121 ], [ false, %144 ], [ %155, %149 ], [ true, %169 ], [ true, %156 ], [ false, %175 ], [ %185, %180 ], [ false, %29 ], [ false, %57 ], [ false, %90 ], [ false, %51 ], [ false, %84 ], [ false, %42 ], [ true, %44 ], [ false, %67 ], [ true, %69 ], [ false, %110 ], [ true, %105 ]
  ret i1 %188
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %215 [
    i32 17, label %33
    i32 18, label %33
    i32 19, label %33
    i32 24, label %33
    i32 25, label %33
    i32 16, label %5
    i32 28, label %35
    i32 20, label %55
    i32 21, label %71
    i32 22, label %79
    i32 23, label %123
    i32 26, label %159
    i32 27, label %171
    i32 29, label %203
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %7 = bitcast %"class.SkSL::Statement"* %6 to %"class.std::__1::unique_ptr.16"**
  %8 = load %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr.16"* %8, null
  br i1 %9, label %33, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %12 = bitcast i32* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = lshr i64 %13, 1
  %15 = and i64 %14, 2147483647
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %8, i64 %15
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %33, label %18

18:                                               ; preds = %10
  %19 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  br label %20

20:                                               ; preds = %18, %30
  %21 = phi %"class.std::__1::unique_ptr.16"* [ %8, %18 ], [ %31, %30 ]
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %22, align 8
  %24 = icmp eq %"class.SkSL::Statement"* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %20
  %26 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %19, align 8
  %27 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %26, i64 6
  %28 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %21) #14
  br i1 %29, label %33, label %30

30:                                               ; preds = %20, %25
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %21, i64 1
  %32 = icmp eq %"class.std::__1::unique_ptr.16"* %31, %16
  br i1 %32, label %33, label %20

33:                                               ; preds = %194, %196, %25, %30, %179, %5, %184, %10, %147, %159, %203, %71, %2, %2, %2, %2, %2, %40, %47, %63, %55, %115, %108, %96, %84, %152, %140, %128, %164, %171, %208
  %34 = phi i1 [ %78, %71 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ %54, %47 ], [ true, %40 ], [ true, %55 ], [ %70, %63 ], [ true, %108 ], [ true, %96 ], [ true, %84 ], [ %122, %115 ], [ true, %140 ], [ true, %128 ], [ false, %147 ], [ %158, %152 ], [ false, %159 ], [ %170, %164 ], [ true, %171 ], [ false, %203 ], [ %214, %208 ], [ false, %10 ], [ false, %184 ], [ false, %5 ], [ false, %179 ], [ true, %25 ], [ false, %30 ], [ false, %194 ], [ true, %196 ]
  ret i1 %34

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %37 = bitcast %"class.SkSL::Statement"* %36 to %"class.SkSL::Expression"**
  %38 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %37, align 8
  %39 = icmp eq %"class.SkSL::Expression"* %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.SkSL::Statement"* %36 to %"class.std::__1::unique_ptr"*
  %42 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %43 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %42, align 8
  %44 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %43, i64 5
  %45 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %44, align 8
  %46 = tail call zeroext i1 %45(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %41) #14
  br i1 %46, label %33, label %47

47:                                               ; preds = %35, %40
  %48 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %49 = bitcast i32* %48 to %"class.std::__1::unique_ptr.16"*
  %50 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %51 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %51, i64 6
  %53 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %49) #14
  br label %33

55:                                               ; preds = %2
  %56 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %57 = bitcast i32* %56 to %"class.std::__1::unique_ptr"*
  %58 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %59 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %58, align 8
  %60 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %59, i64 5
  %61 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %60, align 8
  %62 = tail call zeroext i1 %61(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %57) #14
  br i1 %62, label %33, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %65 = bitcast %"class.SkSL::Statement"* %64 to %"class.std::__1::unique_ptr.16"*
  %66 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %67 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %66, align 8
  %68 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %67, i64 6
  %69 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %68, align 8
  %70 = tail call zeroext i1 %69(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %65) #14
  br label %33

71:                                               ; preds = %2
  %72 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %73 = bitcast %"class.SkSL::Statement"* %72 to %"class.std::__1::unique_ptr"*
  %74 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %75 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %74, align 8
  %76 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %75, i64 5
  %77 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %76, align 8
  %78 = tail call zeroext i1 %77(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %73) #14
  br label %33

79:                                               ; preds = %2
  %80 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %81 = bitcast %"class.SkSL::Statement"* %80 to %"class.SkSL::Statement"**
  %82 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %81, align 8
  %83 = icmp eq %"class.SkSL::Statement"* %82, null
  br i1 %83, label %91, label %84

84:                                               ; preds = %79
  %85 = bitcast %"class.SkSL::Statement"* %80 to %"class.std::__1::unique_ptr.16"*
  %86 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %87 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %86, align 8
  %88 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %87, i64 6
  %89 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %88, align 8
  %90 = tail call zeroext i1 %89(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %85) #14
  br i1 %90, label %33, label %91

91:                                               ; preds = %79, %84
  %92 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %93 = bitcast i32* %92 to %"class.SkSL::Expression"**
  %94 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %93, align 8
  %95 = icmp eq %"class.SkSL::Expression"* %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %91
  %97 = bitcast i32* %92 to %"class.std::__1::unique_ptr"*
  %98 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %99 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %98, align 8
  %100 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %99, i64 5
  %101 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %100, align 8
  %102 = tail call zeroext i1 %101(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %97) #14
  br i1 %102, label %33, label %103

103:                                              ; preds = %91, %96
  %104 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3
  %105 = bitcast %"class.SkSL::Statement"* %104 to %"class.SkSL::Expression"**
  %106 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %105, align 8
  %107 = icmp eq %"class.SkSL::Expression"* %106, null
  br i1 %107, label %115, label %108

108:                                              ; preds = %103
  %109 = bitcast %"class.SkSL::Statement"* %104 to %"class.std::__1::unique_ptr"*
  %110 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %111 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %110, align 8
  %112 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %111, i64 5
  %113 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %112, align 8
  %114 = tail call zeroext i1 %113(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %109) #14
  br i1 %114, label %33, label %115

115:                                              ; preds = %103, %108
  %116 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %117 = bitcast i32* %116 to %"class.std::__1::unique_ptr.16"*
  %118 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %119 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %118, align 8
  %120 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %119, i64 6
  %121 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %120, align 8
  %122 = tail call zeroext i1 %121(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %117) #14
  br label %33

123:                                              ; preds = %2
  %124 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %125 = bitcast %"class.SkSL::Statement"* %124 to %"class.SkSL::Expression"**
  %126 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %125, align 8
  %127 = icmp eq %"class.SkSL::Expression"* %126, null
  br i1 %127, label %135, label %128

128:                                              ; preds = %123
  %129 = bitcast %"class.SkSL::Statement"* %124 to %"class.std::__1::unique_ptr"*
  %130 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %131 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %130, align 8
  %132 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %131, i64 5
  %133 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %132, align 8
  %134 = tail call zeroext i1 %133(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %129) #14
  br i1 %134, label %33, label %135

135:                                              ; preds = %123, %128
  %136 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %137 = bitcast i32* %136 to %"class.SkSL::Statement"**
  %138 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %137, align 8
  %139 = icmp eq %"class.SkSL::Statement"* %138, null
  br i1 %139, label %147, label %140

140:                                              ; preds = %135
  %141 = bitcast i32* %136 to %"class.std::__1::unique_ptr.16"*
  %142 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %143 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %142, align 8
  %144 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %143, i64 6
  %145 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %144, align 8
  %146 = tail call zeroext i1 %145(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %141) #14
  br i1 %146, label %33, label %147

147:                                              ; preds = %135, %140
  %148 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %149 = bitcast %"class.SkSL::Statement"* %148 to %"class.SkSL::Statement"**
  %150 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %149, align 8
  %151 = icmp eq %"class.SkSL::Statement"* %150, null
  br i1 %151, label %33, label %152

152:                                              ; preds = %147
  %153 = bitcast %"class.SkSL::Statement"* %148 to %"class.std::__1::unique_ptr.16"*
  %154 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %155 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %154, align 8
  %156 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %155, i64 6
  %157 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %156, align 8
  %158 = tail call zeroext i1 %157(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %153) #14
  br label %33

159:                                              ; preds = %2
  %160 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %161 = bitcast %"class.SkSL::Statement"* %160 to %"class.SkSL::Expression"**
  %162 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %161, align 8
  %163 = icmp eq %"class.SkSL::Expression"* %162, null
  br i1 %163, label %33, label %164

164:                                              ; preds = %159
  %165 = bitcast %"class.SkSL::Statement"* %160 to %"class.std::__1::unique_ptr"*
  %166 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %167 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %166, align 8
  %168 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %167, i64 5
  %169 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %168, align 8
  %170 = tail call zeroext i1 %169(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %165) #14
  br label %33

171:                                              ; preds = %2
  %172 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %173 = bitcast i32* %172 to %"class.std::__1::unique_ptr"*
  %174 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %175 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %174, align 8
  %176 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %175, i64 5
  %177 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %176, align 8
  %178 = tail call zeroext i1 %177(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %173) #14
  br i1 %178, label %33, label %179

179:                                              ; preds = %171
  %180 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3
  %181 = bitcast %"class.SkSL::Statement"* %180 to %"class.std::__1::unique_ptr.16"**
  %182 = load %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"** %181, align 8
  %183 = icmp eq %"class.std::__1::unique_ptr.16"* %182, null
  br i1 %183, label %33, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %186 = bitcast i32* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = lshr i64 %187, 1
  %189 = and i64 %188, 2147483647
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %182, i64 %189
  %191 = icmp eq i64 %189, 0
  br i1 %191, label %33, label %192

192:                                              ; preds = %184
  %193 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  br label %196

194:                                              ; preds = %196
  %195 = icmp eq %"class.std::__1::unique_ptr.16"* %202, %190
  br i1 %195, label %33, label %196

196:                                              ; preds = %192, %194
  %197 = phi %"class.std::__1::unique_ptr.16"* [ %182, %192 ], [ %202, %194 ]
  %198 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %193, align 8
  %199 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %198, i64 6
  %200 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %199, align 8
  %201 = tail call zeroext i1 %200(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %197) #14
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %197, i64 1
  br i1 %201, label %33, label %194

203:                                              ; preds = %2
  %204 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %205 = bitcast i32* %204 to %"class.SkSL::Expression"**
  %206 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %205, align 8
  %207 = icmp eq %"class.SkSL::Expression"* %206, null
  br i1 %207, label %33, label %208

208:                                              ; preds = %203
  %209 = bitcast i32* %204 to %"class.std::__1::unique_ptr"*
  %210 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)***
  %211 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*** %210, align 8
  %212 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %211, i64 5
  %213 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr"*)** %212, align 8
  %214 = tail call zeroext i1 %213(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %209) #14
  br label %33

215:                                              ; preds = %2
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %21 [
    i32 0, label %22
    i32 1, label %22
    i32 3, label %22
    i32 5, label %22
    i32 6, label %22
    i32 7, label %22
    i32 8, label %22
    i32 2, label %5
    i32 4, label %13
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 2
  %7 = bitcast %"class.SkSL::ProgramElement"* %6 to %"class.std::__1::unique_ptr.16"*
  %8 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %9 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %9, i64 6
  %11 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %7) #14
  br label %22

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %15 = bitcast %"class.SkSL::ProgramElement"* %14 to %"class.std::__1::unique_ptr.16"*
  %16 = bitcast %"class.SkSL::TProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %17 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %17, i64 6
  %19 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.SkSL::TProgramVisitor"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %15) #14
  br label %22

21:                                               ; preds = %2
  tail call void @llvm.trap()
  unreachable

22:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %13, %5
  %23 = phi i1 [ %20, %13 ], [ %12, %5 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE15visitExpressionERNS_10ExpressionE(%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %186 [
    i32 31, label %187
    i32 42, label %187
    i32 45, label %187
    i32 46, label %187
    i32 43, label %187
    i32 51, label %187
    i32 54, label %187
    i32 55, label %187
    i32 30, label %5
    i32 33, label %29
    i32 34, label %29
    i32 35, label %29
    i32 36, label %29
    i32 37, label %29
    i32 38, label %29
    i32 39, label %29
    i32 40, label %29
    i32 41, label %51
    i32 44, label %76
    i32 47, label %84
    i32 48, label %113
    i32 50, label %128
    i32 49, label %136
    i32 52, label %144
    i32 53, label %156
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %7 = bitcast %"class.SkSL::Expression"* %6 to %"class.SkSL::Expression"**
  %8 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %7, align 8
  %9 = icmp eq %"class.SkSL::Expression"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %5
  %11 = bitcast %"class.SkSL::Expression"* %6 to %"class.std::__1::unique_ptr"*
  %12 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %13 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %13, i64 5
  %15 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %11) #14
  br i1 %16, label %187, label %17

17:                                               ; preds = %5, %10
  %18 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 1
  %19 = bitcast %"class.SkSL::Type"** %18 to %"class.SkSL::Expression"**
  %20 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %19, align 8
  %21 = icmp eq %"class.SkSL::Expression"* %20, null
  br i1 %21, label %187, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.SkSL::Type"** %18 to %"class.std::__1::unique_ptr"*
  %24 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %25 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %25, i64 5
  %27 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %23) #14
  br label %187

29:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %30 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZN4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %1) #14
  %31 = bitcast %"class.SkSL::AnyConstructor"* %30 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %32 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %31, align 8
  %33 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %32, i64 11
  %34 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %33, align 8
  %35 = tail call { %"class.std::__1::unique_ptr"*, i64 } %34(%"class.SkSL::AnyConstructor"* %30) #14
  %36 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %35, 0
  %37 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %35, 1
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %37
  %39 = icmp eq i64 %37, 0
  br i1 %39, label %187, label %40

40:                                               ; preds = %29
  %41 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  br label %44

42:                                               ; preds = %44
  %43 = icmp eq %"class.std::__1::unique_ptr"* %50, %38
  br i1 %43, label %187, label %44

44:                                               ; preds = %40, %42
  %45 = phi %"class.std::__1::unique_ptr"* [ %36, %40 ], [ %50, %42 ]
  %46 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %41, align 8
  %47 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %46, i64 5
  %48 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %47, align 8
  %49 = tail call zeroext i1 %48(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %45) #14
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 1
  br i1 %49, label %187, label %42

51:                                               ; preds = %2
  %52 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %53 = getelementptr inbounds i32, i32* %52, i64 4
  %54 = bitcast i32* %53 to %"class.std::__1::unique_ptr"**
  %55 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %54, align 8
  %56 = icmp eq %"class.std::__1::unique_ptr"* %55, null
  br i1 %56, label %187, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds i32, i32* %52, i64 6
  %59 = bitcast i32* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 %62
  %64 = icmp eq i64 %62, 0
  br i1 %64, label %187, label %65

65:                                               ; preds = %57
  %66 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  br label %69

67:                                               ; preds = %69
  %68 = icmp eq %"class.std::__1::unique_ptr"* %75, %63
  br i1 %68, label %187, label %69

69:                                               ; preds = %65, %67
  %70 = phi %"class.std::__1::unique_ptr"* [ %55, %65 ], [ %75, %67 ]
  %71 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %66, align 8
  %72 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %71, i64 5
  %73 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %72, align 8
  %74 = tail call zeroext i1 %73(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %70) #14
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 1
  br i1 %74, label %187, label %67

76:                                               ; preds = %2
  %77 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %78 = bitcast i32* %77 to %"class.std::__1::unique_ptr"*
  %79 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %80 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %79, align 8
  %81 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %80, i64 5
  %82 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %81, align 8
  %83 = tail call zeroext i1 %82(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %78) #14
  br label %187

84:                                               ; preds = %2
  %85 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %86 = getelementptr inbounds i32, i32* %85, i64 4
  %87 = bitcast i32* %86 to %"class.std::__1::unique_ptr"**
  %88 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %87, align 8
  %89 = icmp eq %"class.std::__1::unique_ptr"* %88, null
  br i1 %89, label %187, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds i32, i32* %85, i64 6
  %92 = bitcast i32* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = lshr i64 %93, 1
  %95 = and i64 %94, 2147483647
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 %95
  %97 = icmp eq i64 %95, 0
  br i1 %97, label %187, label %98

98:                                               ; preds = %90
  %99 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  br label %100

100:                                              ; preds = %98, %110
  %101 = phi %"class.std::__1::unique_ptr"* [ %88, %98 ], [ %111, %110 ]
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %102, align 8
  %104 = icmp eq %"class.SkSL::Expression"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %100
  %106 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %99, align 8
  %107 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %106, i64 5
  %108 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %107, align 8
  %109 = tail call zeroext i1 %108(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %101) #14
  br i1 %109, label %187, label %110

110:                                              ; preds = %100, %105
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 1
  %112 = icmp eq %"class.std::__1::unique_ptr"* %111, %96
  br i1 %112, label %187, label %100

113:                                              ; preds = %2
  %114 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %115 = bitcast %"class.SkSL::Expression"* %114 to %"class.std::__1::unique_ptr"*
  %116 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %117 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %116, align 8
  %118 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %117, i64 5
  %119 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %118, align 8
  %120 = tail call zeroext i1 %119(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %115) #14
  br i1 %120, label %187, label %121

121:                                              ; preds = %113
  %122 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %123 = bitcast i32* %122 to %"class.std::__1::unique_ptr"*
  %124 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %116, align 8
  %125 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %124, i64 5
  %126 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %125, align 8
  %127 = tail call zeroext i1 %126(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %123) #14
  br label %187

128:                                              ; preds = %2
  %129 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %130 = bitcast %"class.SkSL::Expression"* %129 to %"class.std::__1::unique_ptr"*
  %131 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %132 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %131, align 8
  %133 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %132, i64 5
  %134 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %133, align 8
  %135 = tail call zeroext i1 %134(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %130) #14
  br label %187

136:                                              ; preds = %2
  %137 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %138 = bitcast i32* %137 to %"class.std::__1::unique_ptr"*
  %139 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %140 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %139, align 8
  %141 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %140, i64 5
  %142 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %141, align 8
  %143 = tail call zeroext i1 %142(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %138) #14
  br label %187

144:                                              ; preds = %2
  %145 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %146 = bitcast %"class.SkSL::Expression"* %145 to %"class.SkSL::Expression"**
  %147 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %146, align 8
  %148 = icmp eq %"class.SkSL::Expression"* %147, null
  br i1 %148, label %187, label %149

149:                                              ; preds = %144
  %150 = bitcast %"class.SkSL::Expression"* %145 to %"class.std::__1::unique_ptr"*
  %151 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %152 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %151, align 8
  %153 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %152, i64 5
  %154 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %153, align 8
  %155 = tail call zeroext i1 %154(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %150) #14
  br label %187

156:                                              ; preds = %2
  %157 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %158 = bitcast %"class.SkSL::Expression"* %157 to %"class.std::__1::unique_ptr"*
  %159 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %160 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %161 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %160, i64 5
  %162 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %161, align 8
  %163 = tail call zeroext i1 %162(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %158) #14
  br i1 %163, label %187, label %164

164:                                              ; preds = %156
  %165 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %166 = bitcast i32* %165 to %"class.SkSL::Expression"**
  %167 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %166, align 8
  %168 = icmp eq %"class.SkSL::Expression"* %167, null
  br i1 %168, label %175, label %169

169:                                              ; preds = %164
  %170 = bitcast i32* %165 to %"class.std::__1::unique_ptr"*
  %171 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %172 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %171, i64 5
  %173 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %172, align 8
  %174 = tail call zeroext i1 %173(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %170) #14
  br i1 %174, label %187, label %175

175:                                              ; preds = %164, %169
  %176 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 1
  %177 = bitcast %"class.SkSL::Type"** %176 to %"class.SkSL::Expression"**
  %178 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %177, align 8
  %179 = icmp eq %"class.SkSL::Expression"* %178, null
  br i1 %179, label %187, label %180

180:                                              ; preds = %175
  %181 = bitcast %"class.SkSL::Type"** %176 to %"class.std::__1::unique_ptr"*
  %182 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %159, align 8
  %183 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %182, i64 5
  %184 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %183, align 8
  %185 = tail call zeroext i1 %184(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %181) #14
  br label %187

186:                                              ; preds = %2
  tail call void @llvm.trap()
  unreachable

187:                                              ; preds = %110, %105, %67, %69, %42, %44, %84, %51, %90, %57, %29, %17, %144, %175, %156, %169, %180, %149, %113, %121, %10, %22, %2, %2, %2, %2, %2, %2, %2, %2, %136, %128, %76
  %188 = phi i1 [ %143, %136 ], [ %135, %128 ], [ %83, %76 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ true, %10 ], [ false, %17 ], [ %28, %22 ], [ true, %113 ], [ %127, %121 ], [ false, %144 ], [ %155, %149 ], [ true, %169 ], [ true, %156 ], [ false, %175 ], [ %185, %180 ], [ false, %29 ], [ false, %57 ], [ false, %90 ], [ false, %51 ], [ false, %84 ], [ false, %42 ], [ true, %44 ], [ false, %67 ], [ true, %69 ], [ false, %110 ], [ true, %105 ]
  ret i1 %188
}

declare dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZN4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE14visitStatementERNS_9StatementE(%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %215 [
    i32 17, label %33
    i32 18, label %33
    i32 19, label %33
    i32 24, label %33
    i32 25, label %33
    i32 16, label %5
    i32 28, label %35
    i32 20, label %55
    i32 21, label %71
    i32 22, label %79
    i32 23, label %123
    i32 26, label %159
    i32 27, label %171
    i32 29, label %203
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %7 = bitcast %"class.SkSL::Statement"* %6 to %"class.std::__1::unique_ptr.16"**
  %8 = load %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr.16"* %8, null
  br i1 %9, label %33, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %12 = bitcast i32* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = lshr i64 %13, 1
  %15 = and i64 %14, 2147483647
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %8, i64 %15
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %33, label %18

18:                                               ; preds = %10
  %19 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  br label %20

20:                                               ; preds = %18, %30
  %21 = phi %"class.std::__1::unique_ptr.16"* [ %8, %18 ], [ %31, %30 ]
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %22, align 8
  %24 = icmp eq %"class.SkSL::Statement"* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %20
  %26 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %19, align 8
  %27 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %26, i64 6
  %28 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %21) #14
  br i1 %29, label %33, label %30

30:                                               ; preds = %20, %25
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %21, i64 1
  %32 = icmp eq %"class.std::__1::unique_ptr.16"* %31, %16
  br i1 %32, label %33, label %20

33:                                               ; preds = %194, %196, %25, %30, %179, %5, %184, %10, %147, %159, %203, %71, %2, %2, %2, %2, %2, %40, %47, %63, %55, %115, %108, %96, %84, %152, %140, %128, %164, %171, %208
  %34 = phi i1 [ %78, %71 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ %54, %47 ], [ true, %40 ], [ true, %55 ], [ %70, %63 ], [ true, %108 ], [ true, %96 ], [ true, %84 ], [ %122, %115 ], [ true, %140 ], [ true, %128 ], [ false, %147 ], [ %158, %152 ], [ false, %159 ], [ %170, %164 ], [ true, %171 ], [ false, %203 ], [ %214, %208 ], [ false, %10 ], [ false, %184 ], [ false, %5 ], [ false, %179 ], [ true, %25 ], [ false, %30 ], [ false, %194 ], [ true, %196 ]
  ret i1 %34

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %37 = bitcast %"class.SkSL::Statement"* %36 to %"class.SkSL::Expression"**
  %38 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %37, align 8
  %39 = icmp eq %"class.SkSL::Expression"* %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.SkSL::Statement"* %36 to %"class.std::__1::unique_ptr"*
  %42 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %43 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %42, align 8
  %44 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %43, i64 5
  %45 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %44, align 8
  %46 = tail call zeroext i1 %45(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %41) #14
  br i1 %46, label %33, label %47

47:                                               ; preds = %35, %40
  %48 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %49 = bitcast i32* %48 to %"class.std::__1::unique_ptr.16"*
  %50 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %51 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %51, i64 6
  %53 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %49) #14
  br label %33

55:                                               ; preds = %2
  %56 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %57 = bitcast i32* %56 to %"class.std::__1::unique_ptr"*
  %58 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %59 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %58, align 8
  %60 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %59, i64 5
  %61 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %60, align 8
  %62 = tail call zeroext i1 %61(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %57) #14
  br i1 %62, label %33, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %65 = bitcast %"class.SkSL::Statement"* %64 to %"class.std::__1::unique_ptr.16"*
  %66 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %67 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %66, align 8
  %68 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %67, i64 6
  %69 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %68, align 8
  %70 = tail call zeroext i1 %69(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %65) #14
  br label %33

71:                                               ; preds = %2
  %72 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %73 = bitcast %"class.SkSL::Statement"* %72 to %"class.std::__1::unique_ptr"*
  %74 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %75 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %74, align 8
  %76 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %75, i64 5
  %77 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %76, align 8
  %78 = tail call zeroext i1 %77(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %73) #14
  br label %33

79:                                               ; preds = %2
  %80 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %81 = bitcast %"class.SkSL::Statement"* %80 to %"class.SkSL::Statement"**
  %82 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %81, align 8
  %83 = icmp eq %"class.SkSL::Statement"* %82, null
  br i1 %83, label %91, label %84

84:                                               ; preds = %79
  %85 = bitcast %"class.SkSL::Statement"* %80 to %"class.std::__1::unique_ptr.16"*
  %86 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %87 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %86, align 8
  %88 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %87, i64 6
  %89 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %88, align 8
  %90 = tail call zeroext i1 %89(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %85) #14
  br i1 %90, label %33, label %91

91:                                               ; preds = %79, %84
  %92 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %93 = bitcast i32* %92 to %"class.SkSL::Expression"**
  %94 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %93, align 8
  %95 = icmp eq %"class.SkSL::Expression"* %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %91
  %97 = bitcast i32* %92 to %"class.std::__1::unique_ptr"*
  %98 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %99 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %98, align 8
  %100 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %99, i64 5
  %101 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %100, align 8
  %102 = tail call zeroext i1 %101(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %97) #14
  br i1 %102, label %33, label %103

103:                                              ; preds = %91, %96
  %104 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3
  %105 = bitcast %"class.SkSL::Statement"* %104 to %"class.SkSL::Expression"**
  %106 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %105, align 8
  %107 = icmp eq %"class.SkSL::Expression"* %106, null
  br i1 %107, label %115, label %108

108:                                              ; preds = %103
  %109 = bitcast %"class.SkSL::Statement"* %104 to %"class.std::__1::unique_ptr"*
  %110 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %111 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %110, align 8
  %112 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %111, i64 5
  %113 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %112, align 8
  %114 = tail call zeroext i1 %113(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %109) #14
  br i1 %114, label %33, label %115

115:                                              ; preds = %103, %108
  %116 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %117 = bitcast i32* %116 to %"class.std::__1::unique_ptr.16"*
  %118 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %119 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %118, align 8
  %120 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %119, i64 6
  %121 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %120, align 8
  %122 = tail call zeroext i1 %121(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %117) #14
  br label %33

123:                                              ; preds = %2
  %124 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %125 = bitcast %"class.SkSL::Statement"* %124 to %"class.SkSL::Expression"**
  %126 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %125, align 8
  %127 = icmp eq %"class.SkSL::Expression"* %126, null
  br i1 %127, label %135, label %128

128:                                              ; preds = %123
  %129 = bitcast %"class.SkSL::Statement"* %124 to %"class.std::__1::unique_ptr"*
  %130 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %131 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %130, align 8
  %132 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %131, i64 5
  %133 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %132, align 8
  %134 = tail call zeroext i1 %133(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %129) #14
  br i1 %134, label %33, label %135

135:                                              ; preds = %123, %128
  %136 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %137 = bitcast i32* %136 to %"class.SkSL::Statement"**
  %138 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %137, align 8
  %139 = icmp eq %"class.SkSL::Statement"* %138, null
  br i1 %139, label %147, label %140

140:                                              ; preds = %135
  %141 = bitcast i32* %136 to %"class.std::__1::unique_ptr.16"*
  %142 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %143 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %142, align 8
  %144 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %143, i64 6
  %145 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %144, align 8
  %146 = tail call zeroext i1 %145(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %141) #14
  br i1 %146, label %33, label %147

147:                                              ; preds = %135, %140
  %148 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %149 = bitcast %"class.SkSL::Statement"* %148 to %"class.SkSL::Statement"**
  %150 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %149, align 8
  %151 = icmp eq %"class.SkSL::Statement"* %150, null
  br i1 %151, label %33, label %152

152:                                              ; preds = %147
  %153 = bitcast %"class.SkSL::Statement"* %148 to %"class.std::__1::unique_ptr.16"*
  %154 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %155 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %154, align 8
  %156 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %155, i64 6
  %157 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %156, align 8
  %158 = tail call zeroext i1 %157(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %153) #14
  br label %33

159:                                              ; preds = %2
  %160 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %161 = bitcast %"class.SkSL::Statement"* %160 to %"class.SkSL::Expression"**
  %162 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %161, align 8
  %163 = icmp eq %"class.SkSL::Expression"* %162, null
  br i1 %163, label %33, label %164

164:                                              ; preds = %159
  %165 = bitcast %"class.SkSL::Statement"* %160 to %"class.std::__1::unique_ptr"*
  %166 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %167 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %166, align 8
  %168 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %167, i64 5
  %169 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %168, align 8
  %170 = tail call zeroext i1 %169(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %165) #14
  br label %33

171:                                              ; preds = %2
  %172 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %173 = bitcast i32* %172 to %"class.std::__1::unique_ptr"*
  %174 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %175 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %174, align 8
  %176 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %175, i64 5
  %177 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %176, align 8
  %178 = tail call zeroext i1 %177(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %173) #14
  br i1 %178, label %33, label %179

179:                                              ; preds = %171
  %180 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3
  %181 = bitcast %"class.SkSL::Statement"* %180 to %"class.std::__1::unique_ptr.16"**
  %182 = load %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"** %181, align 8
  %183 = icmp eq %"class.std::__1::unique_ptr.16"* %182, null
  br i1 %183, label %33, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %186 = bitcast i32* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = lshr i64 %187, 1
  %189 = and i64 %188, 2147483647
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %182, i64 %189
  %191 = icmp eq i64 %189, 0
  br i1 %191, label %33, label %192

192:                                              ; preds = %184
  %193 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  br label %196

194:                                              ; preds = %196
  %195 = icmp eq %"class.std::__1::unique_ptr.16"* %202, %190
  br i1 %195, label %33, label %196

196:                                              ; preds = %192, %194
  %197 = phi %"class.std::__1::unique_ptr.16"* [ %182, %192 ], [ %202, %194 ]
  %198 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %193, align 8
  %199 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %198, i64 6
  %200 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %199, align 8
  %201 = tail call zeroext i1 %200(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %197) #14
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %197, i64 1
  br i1 %201, label %33, label %194

203:                                              ; preds = %2
  %204 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %205 = bitcast i32* %204 to %"class.SkSL::Expression"**
  %206 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %205, align 8
  %207 = icmp eq %"class.SkSL::Expression"* %206, null
  br i1 %207, label %33, label %208

208:                                              ; preds = %203
  %209 = bitcast i32* %204 to %"class.std::__1::unique_ptr"*
  %210 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)***
  %211 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*** %210, align 8
  %212 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %211, i64 5
  %213 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr"*)** %212, align 8
  %214 = tail call zeroext i1 %213(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr"* dereferenceable(8) %209) #14
  br label %33

215:                                              ; preds = %2
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE19visitProgramElementERNS_14ProgramElementE(%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::ProgramElement"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %21 [
    i32 0, label %22
    i32 1, label %22
    i32 3, label %22
    i32 5, label %22
    i32 6, label %22
    i32 7, label %22
    i32 8, label %22
    i32 2, label %5
    i32 4, label %13
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 2
  %7 = bitcast %"class.SkSL::ProgramElement"* %6 to %"class.std::__1::unique_ptr.16"*
  %8 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %9 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %9, i64 6
  %11 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %7) #14
  br label %22

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %15 = bitcast %"class.SkSL::ProgramElement"* %14 to %"class.std::__1::unique_ptr.16"*
  %16 = bitcast %"class.SkSL::TProgramVisitor.88"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)***
  %17 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %17, i64 6
  %19 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.std::__1::unique_ptr.16"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.SkSL::TProgramVisitor.88"* %0, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %15) #14
  br label %22

21:                                               ; preds = %2
  tail call void @llvm.trap()
  unreachable

22:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %13, %5
  %23 = phi i1 [ %20, %13 ], [ %12, %5 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4SkSL8Analysis14GetSampleUsageERKNS_7ProgramERKNS_8VariableEbPi(%"struct.SkSL::Program"* nocapture readonly dereferenceable(128), %"class.SkSL::Variable"* dereferenceable(64), i1 zeroext, i32*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", align 8
  %6 = bitcast %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 40, i1 false)
  %7 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 2, i32 0
  %8 = bitcast %"class.SkSL::Context"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = zext i1 %2 to i8
  %11 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 1
  %13 = bitcast %"class.SkSL::Context"** %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 2
  store %"class.SkSL::Variable"* %1, %"class.SkSL::Variable"** %14, align 8
  %15 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 3
  store i8 %10, i8* %15, align 8
  %16 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 5, i32 0
  %17 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 6
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %19 = bitcast %"class.std::__1::vector.148"* %18 to i64*
  %20 = bitcast i32* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 5, i1 false)
  %21 = load i64, i64* %19, align 8, !noalias !2
  %22 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %23 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %24 = bitcast %"class.std::__1::vector.161"* %23 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !2
  %26 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %27 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %26, align 8, !noalias !2
  %28 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %22, align 8, !noalias !5
  %29 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 0, i32 0
  %30 = bitcast %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %31 = inttoptr i64 %21 to %"class.std::__1::unique_ptr.150"*
  %32 = icmp eq %"class.std::__1::unique_ptr.150"* %28, %31
  %33 = inttoptr i64 %25 to %"class.SkSL::ProgramElement"**
  %34 = icmp eq %"class.SkSL::ProgramElement"** %27, %33
  %35 = and i1 %34, %32
  br i1 %35, label %66, label %36

36:                                               ; preds = %4
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %31, i64 0, i32 0, i32 0, i32 0
  %38 = select i1 %34, %"class.SkSL::ProgramElement"** %37, %"class.SkSL::ProgramElement"** %33
  %39 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %38, align 8
  %40 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::TProgramVisitor"* nonnull %29, %"class.SkSL::ProgramElement"* dereferenceable(16) %39) #14
  br i1 %40, label %66, label %41

41:                                               ; preds = %36, %58
  %42 = phi i64 [ %51, %58 ], [ %21, %36 ]
  %43 = phi i64 [ %52, %58 ], [ %25, %36 ]
  %44 = phi %"class.std::__1::unique_ptr.150"* [ %53, %58 ], [ %31, %36 ]
  %45 = phi %"class.SkSL::ProgramElement"** [ %55, %58 ], [ %33, %36 ]
  %46 = phi i1 [ %56, %58 ], [ %34, %36 ]
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %44, i64 1
  %48 = ptrtoint %"class.std::__1::unique_ptr.150"* %47 to i64
  %49 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %45, i64 1
  %50 = ptrtoint %"class.SkSL::ProgramElement"** %49 to i64
  %51 = select i1 %46, i64 %48, i64 %42
  %52 = select i1 %46, i64 %43, i64 %50
  %53 = inttoptr i64 %51 to %"class.std::__1::unique_ptr.150"*
  %54 = icmp eq %"class.std::__1::unique_ptr.150"* %28, %53
  %55 = inttoptr i64 %52 to %"class.SkSL::ProgramElement"**
  %56 = icmp eq %"class.SkSL::ProgramElement"** %27, %55
  %57 = and i1 %56, %54
  br i1 %57, label %66, label %58

58:                                               ; preds = %41
  %59 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %30, align 8
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %53, i64 0, i32 0, i32 0, i32 0
  %61 = select i1 %56, %"class.SkSL::ProgramElement"** %60, %"class.SkSL::ProgramElement"** %55
  %62 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %61, align 8
  %63 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %59, i64 4
  %64 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %63, align 8
  %65 = call zeroext i1 %64(%"class.SkSL::TProgramVisitor"* nonnull %29, %"class.SkSL::ProgramElement"* dereferenceable(16) %62) #14
  br i1 %65, label %66, label %41

66:                                               ; preds = %41, %58, %36, %4
  %67 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %5, i64 0, i32 5
  %68 = bitcast %"struct.SkSL::SampleUsage"* %67 to i64*
  %69 = load i64, i64* %68, align 4
  %70 = icmp eq i32* %3, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %66
  %72 = load i32, i32* %17, align 4
  %73 = load i32, i32* %3, align 4
  %74 = add nsw i32 %73, %72
  store i32 %74, i32* %3, align 4
  br label %75

75:                                               ; preds = %66, %71
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #14
  ret i64 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis17ReferencesBuiltinERKNS_7ProgramEi(%"struct.SkSL::Program"* nocapture readonly dereferenceable(128), i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3, i64 0, i32 1
  %7 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store i32 %1, i32* %6, align 8
  %8 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %9 = bitcast %"class.std::__1::vector.148"* %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !8
  %11 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %12 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %13 = bitcast %"class.std::__1::vector.161"* %12 to i64*
  %14 = load i64, i64* %13, align 8, !noalias !8
  %15 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %16 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %15, align 8, !noalias !8
  %17 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %11, align 8, !noalias !11
  %18 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3, i64 0, i32 0, i32 0
  %19 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %3 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %20 = inttoptr i64 %10 to %"class.std::__1::unique_ptr.150"*
  %21 = icmp eq %"class.std::__1::unique_ptr.150"* %17, %20
  %22 = inttoptr i64 %14 to %"class.SkSL::ProgramElement"**
  %23 = icmp eq %"class.SkSL::ProgramElement"** %16, %22
  %24 = and i1 %21, %23
  br i1 %24, label %55, label %25

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %20, i64 0, i32 0, i32 0, i32 0
  %27 = select i1 %23, %"class.SkSL::ProgramElement"** %26, %"class.SkSL::ProgramElement"** %22
  %28 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %27, align 8
  %29 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::TProgramVisitor"* nonnull %18, %"class.SkSL::ProgramElement"* dereferenceable(16) %28) #14
  br i1 %29, label %55, label %30

30:                                               ; preds = %25, %47
  %31 = phi i64 [ %40, %47 ], [ %10, %25 ]
  %32 = phi i64 [ %41, %47 ], [ %14, %25 ]
  %33 = phi %"class.std::__1::unique_ptr.150"* [ %42, %47 ], [ %20, %25 ]
  %34 = phi %"class.SkSL::ProgramElement"** [ %44, %47 ], [ %22, %25 ]
  %35 = phi i1 [ %45, %47 ], [ %23, %25 ]
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %33, i64 1
  %37 = ptrtoint %"class.std::__1::unique_ptr.150"* %36 to i64
  %38 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %34, i64 1
  %39 = ptrtoint %"class.SkSL::ProgramElement"** %38 to i64
  %40 = select i1 %35, i64 %37, i64 %31
  %41 = select i1 %35, i64 %32, i64 %39
  %42 = inttoptr i64 %40 to %"class.std::__1::unique_ptr.150"*
  %43 = icmp eq %"class.std::__1::unique_ptr.150"* %17, %42
  %44 = inttoptr i64 %41 to %"class.SkSL::ProgramElement"**
  %45 = icmp eq %"class.SkSL::ProgramElement"** %16, %44
  %46 = and i1 %43, %45
  br i1 %46, label %55, label %47

47:                                               ; preds = %30
  %48 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %19, align 8
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %42, i64 0, i32 0, i32 0, i32 0
  %50 = select i1 %45, %"class.SkSL::ProgramElement"** %49, %"class.SkSL::ProgramElement"** %44
  %51 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %48, i64 4
  %53 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %52, align 8
  %54 = call zeroext i1 %53(%"class.SkSL::TProgramVisitor"* nonnull %18, %"class.SkSL::ProgramElement"* dereferenceable(16) %51) #14
  br i1 %54, label %55, label %30

55:                                               ; preds = %30, %47, %25, %2
  %56 = phi i1 [ false, %2 ], [ true, %25 ], [ true, %47 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #14
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL14ProgramVisitor5visitERKNS_7ProgramE(%"class.SkSL::ProgramVisitor"*, %"struct.SkSL::Program"* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %1, i64 0, i32 6
  %4 = bitcast %"class.std::__1::vector.148"* %3 to i64*
  %5 = load i64, i64* %4, align 8, !noalias !14
  %6 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %1, i64 0, i32 6, i32 0, i32 1
  %7 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %1, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector.161"* %7 to i64*
  %9 = load i64, i64* %8, align 8, !noalias !14
  %10 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %1, i64 0, i32 7, i32 0, i32 1
  %11 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %10, align 8, !noalias !14
  %12 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %6, align 8, !noalias !17
  %13 = getelementptr inbounds %"class.SkSL::ProgramVisitor", %"class.SkSL::ProgramVisitor"* %0, i64 0, i32 0
  %14 = bitcast %"class.SkSL::ProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %15 = inttoptr i64 %5 to %"class.std::__1::unique_ptr.150"*
  %16 = icmp eq %"class.std::__1::unique_ptr.150"* %12, %15
  %17 = inttoptr i64 %9 to %"class.SkSL::ProgramElement"**
  %18 = icmp eq %"class.SkSL::ProgramElement"** %11, %17
  %19 = and i1 %16, %18
  br i1 %19, label %45, label %20

20:                                               ; preds = %2, %33
  %21 = phi i1 [ %43, %33 ], [ %18, %2 ]
  %22 = phi %"class.SkSL::ProgramElement"** [ %42, %33 ], [ %17, %2 ]
  %23 = phi %"class.std::__1::unique_ptr.150"* [ %40, %33 ], [ %15, %2 ]
  %24 = phi i64 [ %39, %33 ], [ %9, %2 ]
  %25 = phi i64 [ %38, %33 ], [ %5, %2 ]
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %23, i64 0, i32 0, i32 0, i32 0
  %27 = select i1 %21, %"class.SkSL::ProgramElement"** %26, %"class.SkSL::ProgramElement"** %22
  %28 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %27, align 8
  %29 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %14, align 8
  %30 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %29, i64 4
  %31 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.SkSL::TProgramVisitor"* %13, %"class.SkSL::ProgramElement"* dereferenceable(16) %28) #14
  br i1 %32, label %45, label %33

33:                                               ; preds = %20
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %23, i64 1
  %35 = ptrtoint %"class.std::__1::unique_ptr.150"* %34 to i64
  %36 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %22, i64 1
  %37 = ptrtoint %"class.SkSL::ProgramElement"** %36 to i64
  %38 = select i1 %21, i64 %35, i64 %25
  %39 = select i1 %21, i64 %24, i64 %37
  %40 = inttoptr i64 %38 to %"class.std::__1::unique_ptr.150"*
  %41 = icmp eq %"class.std::__1::unique_ptr.150"* %12, %40
  %42 = inttoptr i64 %39 to %"class.SkSL::ProgramElement"**
  %43 = icmp eq %"class.SkSL::ProgramElement"** %11, %42
  %44 = and i1 %41, %43
  br i1 %44, label %45, label %20

45:                                               ; preds = %20, %33, %2
  %46 = phi i1 [ false, %2 ], [ true, %20 ], [ false, %33 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis22ReferencesSampleCoordsERKNS_7ProgramE(%"struct.SkSL::Program"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", align 8
  %3 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  store i32 10009, i32* %5, align 8
  %6 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %7 = bitcast %"class.std::__1::vector.148"* %6 to i64*
  %8 = load i64, i64* %7, align 8, !noalias !20
  %9 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %10 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %11 = bitcast %"class.std::__1::vector.161"* %10 to i64*
  %12 = load i64, i64* %11, align 8, !noalias !20
  %13 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %14 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %13, align 8, !noalias !20
  %15 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %9, align 8, !noalias !23
  %16 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 0, i32 0
  %17 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %18 = inttoptr i64 %8 to %"class.std::__1::unique_ptr.150"*
  %19 = icmp eq %"class.std::__1::unique_ptr.150"* %15, %18
  %20 = inttoptr i64 %12 to %"class.SkSL::ProgramElement"**
  %21 = icmp eq %"class.SkSL::ProgramElement"** %14, %20
  %22 = and i1 %21, %19
  br i1 %22, label %53, label %23

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %18, i64 0, i32 0, i32 0, i32 0
  %25 = select i1 %21, %"class.SkSL::ProgramElement"** %24, %"class.SkSL::ProgramElement"** %20
  %26 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %25, align 8
  %27 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::TProgramVisitor"* nonnull %16, %"class.SkSL::ProgramElement"* dereferenceable(16) %26) #14
  br i1 %27, label %53, label %28

28:                                               ; preds = %23, %45
  %29 = phi i64 [ %38, %45 ], [ %8, %23 ]
  %30 = phi i64 [ %39, %45 ], [ %12, %23 ]
  %31 = phi %"class.std::__1::unique_ptr.150"* [ %40, %45 ], [ %18, %23 ]
  %32 = phi %"class.SkSL::ProgramElement"** [ %42, %45 ], [ %20, %23 ]
  %33 = phi i1 [ %43, %45 ], [ %21, %23 ]
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %31, i64 1
  %35 = ptrtoint %"class.std::__1::unique_ptr.150"* %34 to i64
  %36 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %32, i64 1
  %37 = ptrtoint %"class.SkSL::ProgramElement"** %36 to i64
  %38 = select i1 %33, i64 %35, i64 %29
  %39 = select i1 %33, i64 %30, i64 %37
  %40 = inttoptr i64 %38 to %"class.std::__1::unique_ptr.150"*
  %41 = icmp eq %"class.std::__1::unique_ptr.150"* %15, %40
  %42 = inttoptr i64 %39 to %"class.SkSL::ProgramElement"**
  %43 = icmp eq %"class.SkSL::ProgramElement"** %14, %42
  %44 = and i1 %43, %41
  br i1 %44, label %53, label %45

45:                                               ; preds = %28
  %46 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %17, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %40, i64 0, i32 0, i32 0, i32 0
  %48 = select i1 %43, %"class.SkSL::ProgramElement"** %47, %"class.SkSL::ProgramElement"** %42
  %49 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %48, align 8
  %50 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %46, i64 4
  %51 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %50, align 8
  %52 = call zeroext i1 %51(%"class.SkSL::TProgramVisitor"* nonnull %16, %"class.SkSL::ProgramElement"* dereferenceable(16) %49) #14
  br i1 %52, label %53, label %28

53:                                               ; preds = %28, %45, %23, %1
  %54 = phi i1 [ false, %1 ], [ true, %23 ], [ false, %28 ], [ true, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #14
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis20ReferencesFragCoordsERKNS_7ProgramE(%"struct.SkSL::Program"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", align 8
  %3 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  store i32 15, i32* %5, align 8
  %6 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %7 = bitcast %"class.std::__1::vector.148"* %6 to i64*
  %8 = load i64, i64* %7, align 8, !noalias !26
  %9 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %10 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %11 = bitcast %"class.std::__1::vector.161"* %10 to i64*
  %12 = load i64, i64* %11, align 8, !noalias !26
  %13 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %14 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %13, align 8, !noalias !26
  %15 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %9, align 8, !noalias !29
  %16 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2, i64 0, i32 0, i32 0
  %17 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %2 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %18 = inttoptr i64 %8 to %"class.std::__1::unique_ptr.150"*
  %19 = icmp eq %"class.std::__1::unique_ptr.150"* %15, %18
  %20 = inttoptr i64 %12 to %"class.SkSL::ProgramElement"**
  %21 = icmp eq %"class.SkSL::ProgramElement"** %14, %20
  %22 = and i1 %21, %19
  br i1 %22, label %53, label %23

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %18, i64 0, i32 0, i32 0, i32 0
  %25 = select i1 %21, %"class.SkSL::ProgramElement"** %24, %"class.SkSL::ProgramElement"** %20
  %26 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %25, align 8
  %27 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::TProgramVisitor"* nonnull %16, %"class.SkSL::ProgramElement"* dereferenceable(16) %26) #14
  br i1 %27, label %53, label %28

28:                                               ; preds = %23, %45
  %29 = phi i64 [ %38, %45 ], [ %8, %23 ]
  %30 = phi i64 [ %39, %45 ], [ %12, %23 ]
  %31 = phi %"class.std::__1::unique_ptr.150"* [ %40, %45 ], [ %18, %23 ]
  %32 = phi %"class.SkSL::ProgramElement"** [ %42, %45 ], [ %20, %23 ]
  %33 = phi i1 [ %43, %45 ], [ %21, %23 ]
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %31, i64 1
  %35 = ptrtoint %"class.std::__1::unique_ptr.150"* %34 to i64
  %36 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %32, i64 1
  %37 = ptrtoint %"class.SkSL::ProgramElement"** %36 to i64
  %38 = select i1 %33, i64 %35, i64 %29
  %39 = select i1 %33, i64 %30, i64 %37
  %40 = inttoptr i64 %38 to %"class.std::__1::unique_ptr.150"*
  %41 = icmp eq %"class.std::__1::unique_ptr.150"* %15, %40
  %42 = inttoptr i64 %39 to %"class.SkSL::ProgramElement"**
  %43 = icmp eq %"class.SkSL::ProgramElement"** %14, %42
  %44 = and i1 %43, %41
  br i1 %44, label %53, label %45

45:                                               ; preds = %28
  %46 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %17, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %40, i64 0, i32 0, i32 0, i32 0
  %48 = select i1 %43, %"class.SkSL::ProgramElement"** %47, %"class.SkSL::ProgramElement"** %42
  %49 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %48, align 8
  %50 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %46, i64 4
  %51 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %50, align 8
  %52 = call zeroext i1 %51(%"class.SkSL::TProgramVisitor"* nonnull %16, %"class.SkSL::ProgramElement"* dereferenceable(16) %49) #14
  br i1 %52, label %53, label %28

53:                                               ; preds = %28, %45, %23, %1
  %54 = phi i1 [ false, %1 ], [ true, %23 ], [ false, %28 ], [ true, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #14
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4SkSL8Analysis18NodeCountUpToLimitERKNS_18FunctionDefinitionEi(%"class.SkSL::FunctionDefinition"* nocapture readonly dereferenceable(88), i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::NodeCountVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_116NodeCountVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %3, i64 0, i32 2
  store i32 %1, i32* %7, align 4
  %8 = getelementptr inbounds %"class.SkSL::FunctionDefinition", %"class.SkSL::FunctionDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %9 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %8, align 8
  store i32 1, i32* %6, align 8
  %10 = icmp sgt i32 %1, 1
  br i1 %10, label %11, label %15

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %3, i64 0, i32 0, i32 0
  %13 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* nonnull %12, %"class.SkSL::Statement"* dereferenceable(16) %9) #14
  %14 = load i32, i32* %6, align 8
  br label %15

15:                                               ; preds = %2, %11
  %16 = phi i32 [ 1, %2 ], [ %14, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #14
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis35SwitchCaseContainsUnconditionalExitERNS_9StatementE(%"class.SkSL::Statement"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", align 8
  %3 = bitcast %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_122SwitchCaseContainsExitE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 2
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 3
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 4
  store i32 0, i32* %8, align 4
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExit14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* nonnull %2, %"class.SkSL::Statement"* dereferenceable(16) %0)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #14
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExit14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %79 [
    i32 16, label %5
    i32 28, label %5
    i32 26, label %8
    i32 18, label %18
    i32 17, label %32
    i32 23, label %50
    i32 22, label %58
    i32 20, label %58
    i32 27, label %71
  ]

5:                                                ; preds = %2, %2
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 0, i32 0
  %7 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %6, %"class.SkSL::Statement"* dereferenceable(16) %1)
  br label %79

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !32
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  %15 = zext i1 %14 to i32
  %16 = select i1 %11, i32 %15, i32 %13
  %17 = icmp ne i32 %16, 0
  br label %79

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 3
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %79

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 1
  %24 = load i8, i8* %23, align 8, !range !32
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  %29 = zext i1 %28 to i32
  %30 = select i1 %25, i32 %29, i32 %27
  %31 = icmp ne i32 %30, 0
  br label %79

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %79

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %79

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 1
  %42 = load i8, i8* %41, align 8, !range !32
  %43 = icmp eq i8 %42, 0
  %44 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  %47 = zext i1 %46 to i32
  %48 = select i1 %43, i32 %47, i32 %45
  %49 = icmp ne i32 %48, 0
  br label %79

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %51, align 4
  %54 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 0, i32 0
  %55 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %54, %"class.SkSL::Statement"* dereferenceable(16) %1)
  %56 = load i32, i32* %51, align 4
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %51, align 4
  br label %79

58:                                               ; preds = %2, %2
  %59 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %59, align 4
  %62 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 8
  %65 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 0, i32 0
  %66 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %65, %"class.SkSL::Statement"* dereferenceable(16) %1)
  %67 = load i32, i32* %62, align 8
  %68 = add nsw i32 %67, -1
  store i32 %68, i32* %62, align 8
  %69 = load i32, i32* %59, align 4
  %70 = add nsw i32 %69, -1
  store i32 %70, i32* %59, align 4
  br label %79

71:                                               ; preds = %2
  %72 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 4
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 4
  %75 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0, i64 0, i32 0, i32 0
  %76 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %75, %"class.SkSL::Statement"* dereferenceable(16) %1)
  %77 = load i32, i32* %72, align 4
  %78 = add nsw i32 %77, -1
  store i32 %78, i32* %72, align 4
  br label %79

79:                                               ; preds = %2, %40, %32, %36, %22, %18, %71, %58, %50, %8, %5
  %80 = phi i1 [ %76, %71 ], [ %66, %58 ], [ %55, %50 ], [ %17, %8 ], [ %7, %5 ], [ false, %18 ], [ %31, %22 ], [ false, %36 ], [ false, %32 ], [ %49, %40 ], [ false, %2 ]
  ret i1 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis33SwitchCaseContainsConditionalExitERNS_9StatementE(%"class.SkSL::Statement"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", align 8
  %3 = bitcast %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_122SwitchCaseContainsExitE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 1
  store i8 1, i8* %5, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 2
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 3
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit", %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %2, i64 0, i32 4
  store i32 0, i32* %8, align 4
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExit14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* nonnull %2, %"class.SkSL::Statement"* dereferenceable(16) %0)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #14
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::ProgramUsage"* @_ZN4SkSL8Analysis8GetUsageERKNS_7ProgramE(%"struct.SkSL::Program"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %3 = tail call i8* @_Znwm(i64 32) #15
  %4 = bitcast i8* %3 to %"class.SkSL::ProgramUsage"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 32, i1 false) #14
  %5 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 2
  %9 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %10 = bitcast %"class.SkSL::ProgramUsage"** %7 to i8**
  store i8* %3, i8** %10, align 8
  store i32 1, i32* %8, align 8
  %11 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6
  %12 = bitcast %"class.std::__1::vector.148"* %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !33
  %14 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 6, i32 0, i32 1
  %15 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7
  %16 = bitcast %"class.std::__1::vector.161"* %15 to i64*
  %17 = load i64, i64* %16, align 8, !noalias !33
  %18 = getelementptr inbounds %"struct.SkSL::Program", %"struct.SkSL::Program"* %0, i64 0, i32 7, i32 0, i32 1
  %19 = load %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"*** %18, align 8, !noalias !33
  %20 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %14, align 8, !noalias !36
  %21 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 0, i32 0
  %22 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)***
  %23 = inttoptr i64 %13 to %"class.std::__1::unique_ptr.150"*
  %24 = icmp eq %"class.std::__1::unique_ptr.150"* %20, %23
  %25 = inttoptr i64 %17 to %"class.SkSL::ProgramElement"**
  %26 = icmp eq %"class.SkSL::ProgramElement"** %19, %25
  %27 = and i1 %24, %26
  br i1 %27, label %58, label %28

28:                                               ; preds = %1
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = select i1 %26, %"class.SkSL::ProgramElement"** %29, %"class.SkSL::ProgramElement"** %25
  %31 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %30, align 8
  %32 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %2, %"class.SkSL::ProgramElement"* dereferenceable(16) %31) #14
  br i1 %32, label %58, label %33

33:                                               ; preds = %28, %50
  %34 = phi i64 [ %43, %50 ], [ %13, %28 ]
  %35 = phi i64 [ %44, %50 ], [ %17, %28 ]
  %36 = phi %"class.std::__1::unique_ptr.150"* [ %45, %50 ], [ %23, %28 ]
  %37 = phi %"class.SkSL::ProgramElement"** [ %47, %50 ], [ %25, %28 ]
  %38 = phi i1 [ %48, %50 ], [ %26, %28 ]
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %36, i64 1
  %40 = ptrtoint %"class.std::__1::unique_ptr.150"* %39 to i64
  %41 = getelementptr inbounds %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %37, i64 1
  %42 = ptrtoint %"class.SkSL::ProgramElement"** %41 to i64
  %43 = select i1 %38, i64 %40, i64 %34
  %44 = select i1 %38, i64 %35, i64 %42
  %45 = inttoptr i64 %43 to %"class.std::__1::unique_ptr.150"*
  %46 = icmp eq %"class.std::__1::unique_ptr.150"* %20, %45
  %47 = inttoptr i64 %44 to %"class.SkSL::ProgramElement"**
  %48 = icmp eq %"class.SkSL::ProgramElement"** %19, %47
  %49 = and i1 %46, %48
  br i1 %49, label %58, label %50

50:                                               ; preds = %33
  %51 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*** %22, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %45, i64 0, i32 0, i32 0, i32 0
  %53 = select i1 %48, %"class.SkSL::ProgramElement"** %52, %"class.SkSL::ProgramElement"** %47
  %54 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %53, align 8
  %55 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %51, i64 4
  %56 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::ProgramElement"*)** %55, align 8
  %57 = call zeroext i1 %56(%"class.SkSL::TProgramVisitor"* nonnull %21, %"class.SkSL::ProgramElement"* dereferenceable(16) %54) #14
  br i1 %57, label %58, label %33

58:                                               ; preds = %33, %50, %28, %1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  ret %"class.SkSL::ProgramUsage"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::ProgramUsage"* @_ZN4SkSL8Analysis8GetUsageERKNS_12LoadedModuleE(%"struct.SkSL::LoadedModule"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %3 = tail call i8* @_Znwm(i64 32) #15
  %4 = bitcast i8* %3 to %"class.SkSL::ProgramUsage"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 32, i1 false) #14
  %5 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2, i64 0, i32 2
  %9 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %10 = bitcast %"class.SkSL::ProgramUsage"** %7 to i8**
  store i8* %3, i8** %10, align 8
  store i32 1, i32* %8, align 8
  %11 = getelementptr inbounds %"struct.SkSL::LoadedModule", %"struct.SkSL::LoadedModule"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %11, align 8
  %13 = getelementptr inbounds %"struct.SkSL::LoadedModule", %"struct.SkSL::LoadedModule"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load %"class.std::__1::unique_ptr.150"*, %"class.std::__1::unique_ptr.150"** %13, align 8
  %15 = icmp eq %"class.std::__1::unique_ptr.150"* %12, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %17, %1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  ret %"class.SkSL::ProgramUsage"* %4

17:                                               ; preds = %1, %17
  %18 = phi %"class.std::__1::unique_ptr.150"* [ %22, %17 ], [ %12, %1 ]
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.SkSL::ProgramElement"*, %"class.SkSL::ProgramElement"** %19, align 8
  %21 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %2, %"class.SkSL::ProgramElement"* dereferenceable(16) %20)
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150"* %18, i64 1
  %23 = icmp eq %"class.std::__1::unique_ptr.150"* %22, %14
  br i1 %23, label %16, label %17
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::ProgramElement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::Variable"*, align 8
  %4 = alloca %"class.SkSL::Variable"*, align 8
  %5 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %123 [
    i32 2, label %7
    i32 5, label %70
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %9 = bitcast %"class.SkSL::ProgramElement"* %8 to %"class.SkSL::FunctionDeclaration"**
  %10 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %9, align 8
  %11 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %10, i64 0, i32 3, i32 0, i32 0
  %12 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %10, i64 0, i32 3, i32 0, i32 1
  %14 = load %"class.SkSL::Variable"**, %"class.SkSL::Variable"*** %13, align 8
  %15 = icmp eq %"class.SkSL::Variable"** %12, %14
  br i1 %15, label %121, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.SkSL::Variable"** %3 to i8*
  %18 = bitcast %"class.SkSL::Variable"** %3 to i64*
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 1
  br label %20

20:                                               ; preds = %16, %67
  %21 = phi %"class.SkSL::Variable"** [ %12, %16 ], [ %68, %67 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  store %"class.SkSL::Variable"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Variable"*), %"class.SkSL::Variable"** %3, align 8
  %22 = bitcast %"class.SkSL::Variable"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %18, align 8
  %24 = load %"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramUsage"** %19, align 8
  %25 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %24, i64 0, i32 0
  %26 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %27 = call i32 %26(i8* nonnull %17, i64 8, i32 0) #14
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 1, i32 %27
  %30 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %24, i64 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %20
  %34 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %64

35:                                               ; preds = %20
  %36 = add nsw i32 %31, -1
  %37 = and i32 %29, %36
  %38 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %24, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %39 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %38, align 8
  %40 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %41

41:                                               ; preds = %55, %35
  %42 = phi i32 [ 0, %35 ], [ %60, %55 ]
  %43 = phi i32 [ %37, %35 ], [ %59, %55 ]
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %39, i64 %44, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %41
  %49 = icmp eq i32 %29, %46
  br i1 %49, label %50, label %55

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %39, i64 %44, i32 0
  %52 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %51, i64 0, i32 0, i32 0
  %53 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %52, align 8
  %54 = icmp eq %"class.SkSL::Variable"* %40, %53
  br i1 %54, label %62, label %55

55:                                               ; preds = %50, %48
  %56 = add nsw i32 %43, -1
  %57 = icmp slt i32 %43, 1
  %58 = select i1 %57, i32 %31, i32 0
  %59 = add nsw i32 %56, %58
  %60 = add nuw nsw i32 %42, 1
  %61 = icmp eq i32 %60, %31
  br i1 %61, label %64, label %41

62:                                               ; preds = %50
  %63 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %51, null
  br i1 %63, label %64, label %67

64:                                               ; preds = %55, %41, %33, %62
  %65 = phi %"class.SkSL::Variable"* [ %34, %33 ], [ %40, %62 ], [ %40, %41 ], [ %40, %55 ]
  %66 = call %"struct.SkSL::ProgramUsage::VariableCounts"* @_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_(%class.SkTHashMap.177* %25, %"class.SkSL::Variable"* %65, i64 0, i32 0) #14
  br label %67

67:                                               ; preds = %62, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  %68 = getelementptr inbounds %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %21, i64 1
  %69 = icmp eq %"class.SkSL::Variable"** %68, %14
  br i1 %69, label %121, label %20

70:                                               ; preds = %2
  %71 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 1
  %72 = load %"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramUsage"** %71, align 8
  %73 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %72, i64 0, i32 0
  %74 = bitcast %"class.SkSL::Variable"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #14
  %75 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %76 = bitcast %"class.SkSL::ProgramElement"* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.SkSL::Variable"** %4 to i64*
  store i64 %77, i64* %78, align 8
  %79 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %80 = call i32 %79(i8* nonnull %74, i64 8, i32 0) #14
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i32 1, i32 %80
  %83 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %72, i64 0, i32 0, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %70
  %87 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  br label %117

88:                                               ; preds = %70
  %89 = add nsw i32 %84, -1
  %90 = and i32 %82, %89
  %91 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %72, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %92 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %91, align 8
  %93 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  br label %94

94:                                               ; preds = %108, %88
  %95 = phi i32 [ 0, %88 ], [ %113, %108 ]
  %96 = phi i32 [ %90, %88 ], [ %112, %108 ]
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %92, i64 %97, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %94
  %102 = icmp eq i32 %82, %99
  br i1 %102, label %103, label %108

103:                                              ; preds = %101
  %104 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %92, i64 %97, i32 0
  %105 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %104, i64 0, i32 0, i32 0
  %106 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %105, align 8
  %107 = icmp eq %"class.SkSL::Variable"* %93, %106
  br i1 %107, label %115, label %108

108:                                              ; preds = %103, %101
  %109 = add nsw i32 %96, -1
  %110 = icmp slt i32 %96, 1
  %111 = select i1 %110, i32 %84, i32 0
  %112 = add nsw i32 %109, %111
  %113 = add nuw nsw i32 %95, 1
  %114 = icmp eq i32 %113, %84
  br i1 %114, label %117, label %94

115:                                              ; preds = %103
  %116 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %104, null
  br i1 %116, label %117, label %120

117:                                              ; preds = %108, %94, %86, %115
  %118 = phi %"class.SkSL::Variable"* [ %87, %86 ], [ %93, %115 ], [ %93, %94 ], [ %93, %108 ]
  %119 = call %"struct.SkSL::ProgramUsage::VariableCounts"* @_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_(%class.SkTHashMap.177* %73, %"class.SkSL::Variable"* %118, i64 0, i32 0) #14
  br label %120

120:                                              ; preds = %115, %117
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #14
  br label %121

121:                                              ; preds = %67, %7, %120
  %122 = load i32, i32* %5, align 4
  br label %123

123:                                              ; preds = %2, %121
  %124 = phi i32 [ %122, %121 ], [ %6, %2 ]
  %125 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 0, i32 0
  switch i32 %124, label %142 [
    i32 0, label %143
    i32 1, label %143
    i32 3, label %143
    i32 5, label %143
    i32 6, label %143
    i32 7, label %143
    i32 8, label %143
    i32 2, label %126
    i32 4, label %134
  ]

126:                                              ; preds = %123
  %127 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 2
  %128 = bitcast %"class.SkSL::ProgramElement"* %127 to %"class.std::__1::unique_ptr.16"*
  %129 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %130 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %129, align 8
  %131 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %130, i64 6
  %132 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %131, align 8
  %133 = call zeroext i1 %132(%"class.SkSL::TProgramVisitor"* %125, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %128) #14
  br label %143

134:                                              ; preds = %123
  %135 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %136 = bitcast %"class.SkSL::ProgramElement"* %135 to %"class.std::__1::unique_ptr.16"*
  %137 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %138 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %137, align 8
  %139 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %138, i64 6
  %140 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %139, align 8
  %141 = call zeroext i1 %140(%"class.SkSL::TProgramVisitor"* %125, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %136) #14
  br label %143

142:                                              ; preds = %123
  call void @llvm.trap() #14
  unreachable

143:                                              ; preds = %123, %123, %123, %123, %123, %123, %123, %126, %134
  %144 = phi i1 [ %141, %134 ], [ %133, %126 ], [ false, %123 ], [ false, %123 ], [ false, %123 ], [ false, %123 ], [ false, %123 ], [ false, %123 ], [ false, %123 ]
  ret i1 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZNK4SkSL12ProgramUsage3getERKNS_8VariableE(%"class.SkSL::ProgramUsage"* nocapture readonly, %"class.SkSL::Variable"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::Variable"*, align 8
  %4 = bitcast %"class.SkSL::Variable"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #14
  store %"class.SkSL::Variable"* %1, %"class.SkSL::Variable"** %3, align 8
  %5 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %6 = call i32 %5(i8* nonnull %4, i64 8, i32 0) #14
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 1, i32 %6
  %9 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %39

12:                                               ; preds = %2
  %13 = add nsw i32 %10, -1
  %14 = and i32 %8, %13
  %15 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %16 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %15, align 8
  %17 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %18

18:                                               ; preds = %32, %12
  %19 = phi i32 [ 0, %12 ], [ %37, %32 ]
  %20 = phi i32 [ %14, %12 ], [ %36, %32 ]
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %16, i64 %21, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %18
  %26 = icmp eq i32 %8, %23
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %16, i64 %21, i32 0
  %29 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %29, align 8
  %31 = icmp eq %"class.SkSL::Variable"* %17, %30
  br i1 %31, label %39, label %32

32:                                               ; preds = %27, %25
  %33 = add nsw i32 %20, -1
  %34 = icmp slt i32 %20, 1
  %35 = select i1 %34, i32 %10, i32 0
  %36 = add nsw i32 %33, %35
  %37 = add nuw nsw i32 %19, 1
  %38 = icmp eq i32 %37, %10
  br i1 %38, label %39, label %18

39:                                               ; preds = %18, %27, %32, %2
  %40 = phi %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* [ null, %2 ], [ %28, %27 ], [ null, %18 ], [ null, %32 ]
  %41 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %40, null
  %42 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %40, i64 0, i32 0, i32 1
  %43 = select i1 %41, %"struct.SkSL::ProgramUsage::VariableCounts"* null, %"struct.SkSL::ProgramUsage::VariableCounts"* %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  %44 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %43, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = insertvalue { i64, i32 } undef, i64 %45, 0
  %49 = insertvalue { i64, i32 } %48, i32 %47, 1
  ret { i64, i32 } %49
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL12ProgramUsage6isDeadERKNS_8VariableE(%"class.SkSL::ProgramUsage"* nocapture readonly, %"class.SkSL::Variable"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::Variable"*, align 8
  %4 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %1, i64 0, i32 2
  %5 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %4, align 8
  %6 = bitcast %"class.SkSL::Variable"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  store %"class.SkSL::Variable"* %1, %"class.SkSL::Variable"** %3, align 8
  %7 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %8 = call i32 %7(i8* nonnull %6, i64 8, i32 0) #14
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 1, i32 %8
  %11 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %41

14:                                               ; preds = %2
  %15 = add nsw i32 %12, -1
  %16 = and i32 %10, %15
  %17 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %18 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %17, align 8
  %19 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %20

20:                                               ; preds = %34, %14
  %21 = phi i32 [ 0, %14 ], [ %39, %34 ]
  %22 = phi i32 [ %16, %14 ], [ %38, %34 ]
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %18, i64 %23, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %10, %25
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %18, i64 %23, i32 0
  %31 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %30, i64 0, i32 0, i32 0
  %32 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %31, align 8
  %33 = icmp eq %"class.SkSL::Variable"* %19, %32
  br i1 %33, label %41, label %34

34:                                               ; preds = %29, %27
  %35 = add nsw i32 %22, -1
  %36 = icmp slt i32 %22, 1
  %37 = select i1 %36, i32 %12, i32 0
  %38 = add nsw i32 %35, %37
  %39 = add nuw nsw i32 %21, 1
  %40 = icmp eq i32 %39, %12
  br i1 %40, label %41, label %20

41:                                               ; preds = %20, %29, %34, %2
  %42 = phi %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* [ null, %2 ], [ null, %34 ], [ null, %20 ], [ %30, %29 ]
  %43 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %42, null
  %44 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %42, i64 0, i32 0, i32 1
  %45 = select i1 %43, %"struct.SkSL::ProgramUsage::VariableCounts"* null, %"struct.SkSL::ProgramUsage::VariableCounts"* %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %46 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %45 to i64*
  %47 = load i64, i64* %46, align 4
  %48 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %45, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %1, i64 0, i32 3
  %51 = load i8, i8* %50, align 8
  %52 = icmp eq i8 %51, 2
  %53 = icmp ult i64 %47, 4294967296
  %54 = or i1 %53, %52
  br i1 %54, label %55, label %66

55:                                               ; preds = %41
  %56 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %5, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = and i32 %57, 14
  %59 = icmp eq i32 %58, 0
  %60 = and i1 %53, %59
  br i1 %60, label %61, label %66

61:                                               ; preds = %55
  %62 = call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %1) #14
  %63 = icmp ne %"class.SkSL::Expression"* %62, null
  %64 = zext i1 %63 to i32
  %65 = icmp sle i32 %49, %64
  br label %66

66:                                               ; preds = %61, %55, %41
  %67 = phi i1 [ false, %41 ], [ false, %55 ], [ %65, %61 ]
  ret i1 %67
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4SkSL12ProgramUsage3getERKNS_19FunctionDeclarationE(%"class.SkSL::ProgramUsage"* nocapture readonly, %"class.SkSL::FunctionDeclaration"* dereferenceable(96)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::FunctionDeclaration"*, align 8
  %4 = bitcast %"class.SkSL::FunctionDeclaration"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #14
  store %"class.SkSL::FunctionDeclaration"* %1, %"class.SkSL::FunctionDeclaration"** %3, align 8
  %5 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %6 = call i32 %5(i8* nonnull %4, i64 8, i32 0) #14
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 1, i32 %6
  %9 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %39

12:                                               ; preds = %2
  %13 = add nsw i32 %10, -1
  %14 = and i32 %8, %13
  %15 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %16 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %15, align 8
  %17 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %3, align 8
  br label %18

18:                                               ; preds = %32, %12
  %19 = phi i32 [ 0, %12 ], [ %37, %32 ]
  %20 = phi i32 [ %14, %12 ], [ %36, %32 ]
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %16, i64 %21, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %18
  %26 = icmp eq i32 %8, %23
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %16, i64 %21, i32 0
  %29 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %29, align 8
  %31 = icmp eq %"class.SkSL::FunctionDeclaration"* %17, %30
  br i1 %31, label %40, label %32

32:                                               ; preds = %27, %25
  %33 = add nsw i32 %20, -1
  %34 = icmp slt i32 %20, 1
  %35 = select i1 %34, i32 %10, i32 0
  %36 = add nsw i32 %33, %35
  %37 = add nuw nsw i32 %19, 1
  %38 = icmp eq i32 %37, %10
  br i1 %38, label %39, label %18

39:                                               ; preds = %32, %18, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  br label %47

40:                                               ; preds = %27
  %41 = icmp eq %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %28, null
  %42 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %16, i64 %21, i32 0, i32 0, i32 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  %43 = icmp eq i32* %42, null
  %44 = or i1 %41, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = load i32, i32* %42, align 4
  br label %47

47:                                               ; preds = %39, %40, %45
  %48 = phi i32 [ %46, %45 ], [ 0, %40 ], [ 0, %39 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL12ProgramUsage7replaceEPKNS_10ExpressionES3_(%"class.SkSL::ProgramUsage"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %5 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %6 = icmp eq %"class.SkSL::Expression"* %1, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %4, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %4, i64 0, i32 2
  %12 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %10, align 8
  store i32 -1, i32* %11, align 8
  %13 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %4, %"class.SkSL::Expression"* nonnull dereferenceable(24) %1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #14
  br label %14

14:                                               ; preds = %3, %7
  %15 = icmp eq %"class.SkSL::Expression"* %2, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %14
  %17 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #14
  %18 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %5, i64 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %5, i64 0, i32 1
  %20 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %5, i64 0, i32 2
  %21 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %19, align 8
  store i32 1, i32* %20, align 8
  %22 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %5, %"class.SkSL::Expression"* nonnull dereferenceable(24) %2)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #14
  br label %23

23:                                               ; preds = %14, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::FunctionDeclaration"*, align 8
  %4 = alloca %"class.SkSL::Variable"*, align 8
  %5 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %142 [
    i32 47, label %7
    i32 55, label %64
  ]

7:                                                ; preds = %2
  %8 = bitcast %"class.SkSL::FunctionDeclaration"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.SkSL::FunctionDeclaration"** %3 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 1
  %16 = load %"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramUsage"** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %16, i64 0, i32 1
  %18 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %19 = call i32 %18(i8* nonnull %8, i64 8, i32 0) #14
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 1, i32 %19
  %22 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %16, i64 0, i32 1, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %7
  %26 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %3, align 8
  br label %57

27:                                               ; preds = %7
  %28 = add nsw i32 %23, -1
  %29 = and i32 %21, %28
  %30 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %16, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %31 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %30, align 8
  %32 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %3, align 8
  br label %33

33:                                               ; preds = %47, %27
  %34 = phi i32 [ 0, %27 ], [ %52, %47 ]
  %35 = phi i32 [ %29, %27 ], [ %51, %47 ]
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %36, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %57, label %40

40:                                               ; preds = %33
  %41 = icmp eq i32 %21, %38
  br i1 %41, label %42, label %47

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %36, i32 0
  %44 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %44, align 8
  %46 = icmp eq %"class.SkSL::FunctionDeclaration"* %32, %45
  br i1 %46, label %54, label %47

47:                                               ; preds = %42, %40
  %48 = add nsw i32 %35, -1
  %49 = icmp slt i32 %35, 1
  %50 = select i1 %49, i32 %23, i32 0
  %51 = add nsw i32 %48, %50
  %52 = add nuw nsw i32 %34, 1
  %53 = icmp eq i32 %52, %23
  br i1 %53, label %57, label %33

54:                                               ; preds = %42
  %55 = icmp eq %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %43, null
  %56 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %36, i32 0, i32 0, i32 1
  br i1 %55, label %57, label %60

57:                                               ; preds = %47, %33, %25, %54
  %58 = phi %"class.SkSL::FunctionDeclaration"* [ %26, %25 ], [ %32, %54 ], [ %32, %33 ], [ %32, %47 ]
  %59 = call i32* @_ZN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE3setES3_i(%class.SkTHashMap.186* %17, %"class.SkSL::FunctionDeclaration"* %58, i32 0) #14
  br label %60

60:                                               ; preds = %54, %57
  %61 = phi i32* [ %59, %57 ], [ %56, %54 ]
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, %14
  store i32 %63, i32* %61, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  br label %142

64:                                               ; preds = %2
  %65 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 1
  %66 = load %"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramUsage"** %65, align 8
  %67 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %66, i64 0, i32 0
  %68 = bitcast %"class.SkSL::Variable"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #14
  %69 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %70 = bitcast %"class.SkSL::Expression"* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.SkSL::Variable"** %4 to i64*
  store i64 %71, i64* %72, align 8
  %73 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %74 = call i32 %73(i8* nonnull %68, i64 8, i32 0) #14
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %75, i32 1, i32 %74
  %77 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %66, i64 0, i32 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %64
  %81 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  br label %112

82:                                               ; preds = %64
  %83 = add nsw i32 %78, -1
  %84 = and i32 %76, %83
  %85 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %66, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %86 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %85, align 8
  %87 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %4, align 8
  br label %88

88:                                               ; preds = %102, %82
  %89 = phi i32 [ 0, %82 ], [ %107, %102 ]
  %90 = phi i32 [ %84, %82 ], [ %106, %102 ]
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %86, i64 %91, i32 1
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %88
  %96 = icmp eq i32 %76, %93
  br i1 %96, label %97, label %102

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %86, i64 %91, i32 0
  %99 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %98, i64 0, i32 0, i32 0
  %100 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %99, align 8
  %101 = icmp eq %"class.SkSL::Variable"* %87, %100
  br i1 %101, label %109, label %102

102:                                              ; preds = %97, %95
  %103 = add nsw i32 %90, -1
  %104 = icmp slt i32 %90, 1
  %105 = select i1 %104, i32 %78, i32 0
  %106 = add nsw i32 %103, %105
  %107 = add nuw nsw i32 %89, 1
  %108 = icmp eq i32 %107, %78
  br i1 %108, label %112, label %88

109:                                              ; preds = %97
  %110 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %98, null
  %111 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %86, i64 %91, i32 0, i32 0, i32 1
  br i1 %110, label %112, label %115

112:                                              ; preds = %102, %88, %80, %109
  %113 = phi %"class.SkSL::Variable"* [ %81, %80 ], [ %87, %109 ], [ %87, %88 ], [ %87, %102 ]
  %114 = call %"struct.SkSL::ProgramUsage::VariableCounts"* @_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_(%class.SkTHashMap.177* %67, %"class.SkSL::Variable"* %113, i64 0, i32 0) #14
  br label %115

115:                                              ; preds = %109, %112
  %116 = phi %"struct.SkSL::ProgramUsage::VariableCounts"* [ %114, %112 ], [ %111, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #14
  %117 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %118 = bitcast i32* %117 to i8*
  %119 = load i8, i8* %118, align 8
  switch i8 %119, label %142 [
    i8 0, label %120
    i8 1, label %126
    i8 2, label %132
    i8 3, label %132
  ]

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %116, i64 0, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = add nsw i32 %124, %122
  store i32 %125, i32* %123, align 4
  br label %142

126:                                              ; preds = %115
  %127 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 2
  %128 = load i32, i32* %127, align 8
  %129 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %116, i64 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = add nsw i32 %130, %128
  store i32 %131, i32* %129, align 4
  br label %142

132:                                              ; preds = %115, %115
  %133 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %116, i64 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, %134
  store i32 %137, i32* %135, align 4
  %138 = load i32, i32* %133, align 8
  %139 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %116, i64 0, i32 2
  %140 = load i32, i32* %139, align 4
  %141 = add nsw i32 %140, %138
  store i32 %141, i32* %139, align 4
  br label %142

142:                                              ; preds = %2, %120, %126, %132, %115, %60
  %143 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 0, i32 0
  %144 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %143, %"class.SkSL::Expression"* dereferenceable(24) %1)
  ret i1 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL12ProgramUsage3addEPKNS_9StatementE(%"class.SkSL::ProgramUsage"*, %"class.SkSL::Statement"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 2
  %8 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %6, align 8
  store i32 1, i32* %7, align 8
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::Variable"*, align 8
  %4 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 29
  br i1 %6, label %7, label %74

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 1
  %9 = load %"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramUsage"** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %9, i64 0, i32 0
  %11 = bitcast %"class.SkSL::Variable"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #14
  %12 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %13 = bitcast %"class.SkSL::Statement"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.SkSL::Variable"** %3 to i64*
  store i64 %14, i64* %15, align 8
  %16 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %17 = call i32 %16(i8* nonnull %11, i64 8, i32 0) #14
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 1, i32 %17
  %20 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %9, i64 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %7
  %24 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %55

25:                                               ; preds = %7
  %26 = add nsw i32 %21, -1
  %27 = and i32 %19, %26
  %28 = getelementptr inbounds %"class.SkSL::ProgramUsage", %"class.SkSL::ProgramUsage"* %9, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %29 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %28, align 8
  %30 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %3, align 8
  br label %31

31:                                               ; preds = %45, %25
  %32 = phi i32 [ 0, %25 ], [ %50, %45 ]
  %33 = phi i32 [ %27, %25 ], [ %49, %45 ]
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %29, i64 %34, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %55, label %38

38:                                               ; preds = %31
  %39 = icmp eq i32 %19, %36
  br i1 %39, label %40, label %45

40:                                               ; preds = %38
  %41 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %29, i64 %34, i32 0
  %42 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %41, i64 0, i32 0, i32 0
  %43 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %42, align 8
  %44 = icmp eq %"class.SkSL::Variable"* %30, %43
  br i1 %44, label %52, label %45

45:                                               ; preds = %40, %38
  %46 = add nsw i32 %33, -1
  %47 = icmp slt i32 %33, 1
  %48 = select i1 %47, i32 %21, i32 0
  %49 = add nsw i32 %46, %48
  %50 = add nuw nsw i32 %32, 1
  %51 = icmp eq i32 %50, %21
  br i1 %51, label %55, label %31

52:                                               ; preds = %40
  %53 = icmp eq %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %41, null
  %54 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %29, i64 %34, i32 0, i32 0, i32 1
  br i1 %53, label %55, label %58

55:                                               ; preds = %45, %31, %23, %52
  %56 = phi %"class.SkSL::Variable"* [ %24, %23 ], [ %30, %52 ], [ %30, %31 ], [ %30, %45 ]
  %57 = call %"struct.SkSL::ProgramUsage::VariableCounts"* @_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_(%class.SkTHashMap.177* %10, %"class.SkSL::Variable"* %56, i64 0, i32 0) #14
  br label %58

58:                                               ; preds = %52, %55
  %59 = phi %"struct.SkSL::ProgramUsage::VariableCounts"* [ %57, %55 ], [ %54, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #14
  %60 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %59, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, %61
  store i32 %64, i32* %62, align 4
  %65 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %66 = bitcast i32* %65 to %"class.SkSL::Expression"**
  %67 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %66, align 8
  %68 = icmp eq %"class.SkSL::Expression"* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %58
  %70 = load i32, i32* %60, align 8
  %71 = getelementptr inbounds %"struct.SkSL::ProgramUsage::VariableCounts", %"struct.SkSL::ProgramUsage::VariableCounts"* %59, i64 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %72, %70
  store i32 %73, i32* %71, align 4
  br label %74

74:                                               ; preds = %58, %69, %2
  %75 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0, i64 0, i32 0, i32 0
  %76 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %75, %"class.SkSL::Statement"* dereferenceable(16) %1)
  ret i1 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL12ProgramUsage6removeEPKNS_10ExpressionE(%"class.SkSL::ProgramUsage"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 2
  %8 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %6, align 8
  store i32 -1, i32* %7, align 8
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %3, %"class.SkSL::Expression"* dereferenceable(24) %1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL12ProgramUsage6removeEPKNS_9StatementE(%"class.SkSL::ProgramUsage"*, %"class.SkSL::Statement"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 2
  %8 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %6, align 8
  store i32 -1, i32* %7, align 8
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL12ProgramUsage6removeERKNS_14ProgramElementE(%"class.SkSL::ProgramUsage"*, %"class.SkSL::ProgramElement"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor", %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3, i64 0, i32 2
  %8 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_119ProgramUsageVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store %"class.SkSL::ProgramUsage"* %0, %"class.SkSL::ProgramUsage"** %6, align 8
  store i32 -1, i32* %7, align 8
  %9 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitor19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* nonnull %3, %"class.SkSL::ProgramElement"* dereferenceable(16) %1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis25StatementWritesToVariableERKNS_9StatementERKNS_8VariableE(%"class.SkSL::Statement"* dereferenceable(16), %"class.SkSL::Variable"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", align 8
  %4 = bitcast %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_120VariableWriteVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %3, i64 0, i32 1
  store %"class.SkSL::Variable"* %1, %"class.SkSL::Variable"** %6, align 8
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %3, i64 0, i32 0, i32 0
  %8 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* nonnull %7, %"class.SkSL::Statement"* dereferenceable(16) %0) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #14
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis12IsAssignableERNS_10ExpressionEPNS0_14AssignmentInfoEPNS_13ErrorReporterE(%"class.SkSL::Expression"* dereferenceable(24), %"struct.SkSL::Analysis::AssignmentInfo"*, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", align 8
  %5 = alloca %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", align 8
  %6 = bitcast %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 1
  %9 = bitcast %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_120TrivialErrorReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  store i32 0, i32* %8, align 8
  %10 = bitcast %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = icmp eq %"class.SkSL::ErrorReporter"* %2, null
  %12 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 0
  %13 = select i1 %11, %"class.SkSL::ErrorReporter"* %12, %"class.SkSL::ErrorReporter"* %2
  %14 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5, i64 0, i32 0
  store %"class.SkSL::ErrorReporter"* %13, %"class.SkSL::ErrorReporter"** %14, align 8
  %15 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5, i64 0, i32 1
  store %"class.SkSL::VariableReference"* null, %"class.SkSL::VariableReference"** %15, align 8
  %16 = bitcast %"class.SkSL::ErrorReporter"* %13 to i32 (%"class.SkSL::ErrorReporter"*)***
  %17 = load i32 (%"class.SkSL::ErrorReporter"*)**, i32 (%"class.SkSL::ErrorReporter"*)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %17, i64 3
  %19 = load i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %18, align 8
  %20 = call i32 %19(%"class.SkSL::ErrorReporter"* %13) #14
  call fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* nonnull %5, %"class.SkSL::Expression"* dereferenceable(24) %0) #14
  %21 = icmp eq %"struct.SkSL::Analysis::AssignmentInfo"* %1, null
  br i1 %21, label %26, label %22

22:                                               ; preds = %3
  %23 = bitcast %"class.SkSL::VariableReference"** %15 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"struct.SkSL::Analysis::AssignmentInfo"* %1 to i64*
  store i64 %24, i64* %25, align 8
  br label %26

26:                                               ; preds = %3, %22
  %27 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %14, align 8
  %28 = bitcast %"class.SkSL::ErrorReporter"* %27 to i32 (%"class.SkSL::ErrorReporter"*)***
  %29 = load i32 (%"class.SkSL::ErrorReporter"*)**, i32 (%"class.SkSL::ErrorReporter"*)*** %28, align 8
  %30 = getelementptr inbounds i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %29, i64 3
  %31 = load i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %30, align 8
  %32 = call i32 %31(%"class.SkSL::ErrorReporter"* %27) #14
  %33 = icmp eq i32 %32, %20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #14
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL13ErrorReporterD2Ev(%"class.SkSL::ErrorReporter"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindE(%"class.SkSL::Expression"*, i8 signext) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.RefKindWriter, align 8
  %4 = bitcast %class.RefKindWriter* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #14
  %5 = getelementptr inbounds %class.RefKindWriter, %class.RefKindWriter* %3, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEE13RefKindWriter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.RefKindWriter, %class.RefKindWriter* %3, i64 0, i32 1
  store i8 %1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 55
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::VariableReference"*
  tail call void @_ZN4SkSL17VariableReference10setRefKindENS_15VariableRefKindE(%"class.SkSL::VariableReference"* %11, i8 signext %1) #14
  br label %12

12:                                               ; preds = %2, %10
  %13 = getelementptr inbounds %class.RefKindWriter, %class.RefKindWriter* %3, i64 0, i32 0, i32 0
  %14 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE15visitExpressionERNS_10ExpressionE(%"class.SkSL::TProgramVisitor.88"* nonnull %13, %"class.SkSL::Expression"* dereferenceable(24) %0) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEEN13RefKindWriter15visitExpressionERS1_(%class.RefKindWriter*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::VariableReference"*
  %8 = getelementptr inbounds %class.RefKindWriter, %class.RefKindWriter* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  tail call void @_ZN4SkSL17VariableReference10setRefKindENS_15VariableRefKindE(%"class.SkSL::VariableReference"* %7, i8 signext %9) #14
  br label %10

10:                                               ; preds = %6, %2
  %11 = getelementptr inbounds %class.RefKindWriter, %class.RefKindWriter* %0, i64 0, i32 0, i32 0
  %12 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEE15visitExpressionERNS_10ExpressionE(%"class.SkSL::TProgramVisitor.88"* %11, %"class.SkSL::Expression"* dereferenceable(24) %1)
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED2Ev(%"class.SkSL::TProgramVisitor.88"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis18MakeAssignmentExprEPNS_10ExpressionENS_15VariableRefKindEPNS_13ErrorReporterE(%"class.SkSL::Expression"*, i8 signext, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", align 8
  %5 = alloca %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = bitcast %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_120TrivialErrorReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  store i32 0, i32* %11, align 8
  %12 = bitcast %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #14
  %13 = icmp eq %"class.SkSL::ErrorReporter"* %2, null
  %14 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %4, i64 0, i32 0
  %15 = select i1 %13, %"class.SkSL::ErrorReporter"* %14, %"class.SkSL::ErrorReporter"* %2
  %16 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5, i64 0, i32 0
  store %"class.SkSL::ErrorReporter"* %15, %"class.SkSL::ErrorReporter"** %16, align 8
  %17 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %5, i64 0, i32 1
  store %"class.SkSL::VariableReference"* null, %"class.SkSL::VariableReference"** %17, align 8
  %18 = bitcast %"class.SkSL::ErrorReporter"* %15 to i32 (%"class.SkSL::ErrorReporter"*)***
  %19 = load i32 (%"class.SkSL::ErrorReporter"*)**, i32 (%"class.SkSL::ErrorReporter"*)*** %18, align 8
  %20 = getelementptr inbounds i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %19, i64 3
  %21 = load i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %20, align 8
  %22 = call i32 %21(%"class.SkSL::ErrorReporter"* %15) #14
  call fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* nonnull %5, %"class.SkSL::Expression"* dereferenceable(24) %0) #14
  %23 = load %"class.SkSL::VariableReference"*, %"class.SkSL::VariableReference"** %17, align 8
  %24 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %16, align 8
  %25 = bitcast %"class.SkSL::ErrorReporter"* %24 to i32 (%"class.SkSL::ErrorReporter"*)***
  %26 = load i32 (%"class.SkSL::ErrorReporter"*)**, i32 (%"class.SkSL::ErrorReporter"*)*** %25, align 8
  %27 = getelementptr inbounds i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %26, i64 3
  %28 = load i32 (%"class.SkSL::ErrorReporter"*)*, i32 (%"class.SkSL::ErrorReporter"*)** %27, align 8
  %29 = call i32 %28(%"class.SkSL::ErrorReporter"* %24) #14
  %30 = icmp eq i32 %29, %22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #14
  br i1 %30, label %31, label %72

31:                                               ; preds = %3
  %32 = icmp eq %"class.SkSL::VariableReference"* %23, null
  br i1 %32, label %33, label %71

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0
  %35 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #14
  %38 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #14
  %39 = bitcast %"class.SkSL::Expression"* %0 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %40 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %40, i64 2
  %42 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %41, align 8
  call void %42(%"class.SkSL::String"* nonnull sret %8, %"class.SkSL::IRNode"* %34) #14
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %8) #14
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::String"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #14
  %43 = bitcast %"class.SkSL::ErrorReporter"* %2 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %44 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %44, i64 2
  %46 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %45, align 8
  call void %46(%"class.SkSL::ErrorReporter"* %2, i32 %36, %"class.SkSL::String"* nonnull %6) #14
  %47 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %33
  %52 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #15
  br label %54

54:                                               ; preds = %33, %51
  %55 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %61) #15
  br label %62

62:                                               ; preds = %54, %59
  %63 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %69) #15
  br label %70

70:                                               ; preds = %62, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #14
  br label %72

71:                                               ; preds = %31
  call void @_ZN4SkSL17VariableReference10setRefKindENS_15VariableRefKindE(%"class.SkSL::VariableReference"* nonnull %23, i8 signext %1) #14
  br label %72

72:                                               ; preds = %3, %71, %70
  %73 = phi i1 [ true, %71 ], [ false, %70 ], [ false, %3 ]
  ret i1 %73
}

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZN4SkSL17VariableReference10setRefKindENS_15VariableRefKindE(%"class.SkSL::VariableReference"*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  br label %2

2:                                                ; preds = %69, %1
  %3 = phi %"class.SkSL::Expression"* [ %0, %1 ], [ %72, %69 ]
  %4 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %13 [
    i32 43, label %73
    i32 45, label %73
    i32 31, label %73
    i32 55, label %73
    i32 52, label %6
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %8 = bitcast %"class.SkSL::Expression"* %7 to %"class.SkSL::Expression"**
  %9 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %8, align 8
  %10 = tail call zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %9)
  br i1 %10, label %73, label %11

11:                                               ; preds = %6
  %12 = load i32, i32* %4, align 4
  br label %13

13:                                               ; preds = %11, %2
  %14 = phi i32 [ %12, %11 ], [ %5, %2 ]
  %15 = icmp eq i32 %14, 44
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %18 = bitcast i32* %17 to %"class.SkSL::Expression"**
  %19 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %18, align 8
  %20 = tail call zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %19)
  br i1 %20, label %73, label %21

21:                                               ; preds = %16
  %22 = load i32, i32* %4, align 4
  br label %23

23:                                               ; preds = %21, %13
  %24 = phi i32 [ %22, %21 ], [ %14, %13 ]
  %25 = add i32 %24, -33
  %26 = icmp ult i32 %25, 8
  br i1 %26, label %27, label %47

27:                                               ; preds = %23
  %28 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %3) #14
  %29 = bitcast %"class.SkSL::AnyConstructor"* %28 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %30 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %29, align 8
  %31 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %30, i64 12
  %32 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %31, align 8
  %33 = tail call { %"class.std::__1::unique_ptr"*, i64 } %32(%"class.SkSL::AnyConstructor"* %28) #14
  %34 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %33, 1
  %35 = icmp eq i64 %34, 1
  br i1 %35, label %36, label %47

36:                                               ; preds = %27
  %37 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %3) #14
  %38 = bitcast %"class.SkSL::AnyConstructor"* %37 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %39 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %38, align 8
  %40 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %39, i64 12
  %41 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %40, align 8
  %42 = tail call { %"class.std::__1::unique_ptr"*, i64 } %41(%"class.SkSL::AnyConstructor"* %37) #14
  %43 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %42, 0
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %44, align 8
  %46 = tail call zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %45)
  br i1 %46, label %73, label %47

47:                                               ; preds = %36, %27, %23
  %48 = load i32, i32* %4, align 4
  %49 = add i32 %48, -33
  %50 = icmp ult i32 %49, 8
  br i1 %50, label %51, label %59

51:                                               ; preds = %47
  %52 = bitcast %"class.SkSL::Expression"* %3 to i1 (%"class.SkSL::Expression"*)***
  %53 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %52, align 8
  %54 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %53, i64 6
  %55 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %54, align 8
  %56 = tail call zeroext i1 %55(%"class.SkSL::Expression"* %3) #14
  br i1 %56, label %73, label %57

57:                                               ; preds = %51
  %58 = load i32, i32* %4, align 4
  br label %59

59:                                               ; preds = %57, %47
  %60 = phi i32 [ %58, %57 ], [ %48, %47 ]
  %61 = icmp eq i32 %60, 48
  br i1 %61, label %62, label %73

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %64 = bitcast i32* %63 to %"class.SkSL::Expression"**
  %65 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %64, align 8
  %66 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %65, i64 0, i32 0, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 43
  br i1 %68, label %69, label %73

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %71 = bitcast %"class.SkSL::Expression"* %70 to %"class.SkSL::Expression"**
  %72 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %71, align 8
  br label %2

73:                                               ; preds = %2, %2, %2, %2, %59, %62, %51, %36, %16, %6
  %74 = phi i1 [ true, %51 ], [ true, %36 ], [ true, %16 ], [ true, %6 ], [ true, %2 ], [ false, %62 ], [ false, %59 ], [ true, %2 ], [ true, %2 ], [ true, %2 ]
  ret i1 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24), %"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %175

9:                                                ; preds = %2
  %10 = bitcast <2 x i64>* %3 to %"struct.SkSL::StringFragment"*
  %11 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %12 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %12, i64 3
  %14 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %13, align 8
  %15 = tail call dereferenceable(184) %"class.SkSL::Type"* %14(%"class.SkSL::Expression"* %0) #14
  %16 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %17 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %17, i64 3
  %19 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %18, align 8
  %20 = tail call dereferenceable(184) %"class.SkSL::Type"* %19(%"class.SkSL::Expression"* %1) #14
  %21 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #14
  %22 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %15, i64 0, i32 0, i32 1, i32 0
  %23 = bitcast i8** %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 8
  store <2 x i64> %24, <2 x i64>* %3, align 16
  %25 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %20, i64 0, i32 0, i32 1, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %20, i64 0, i32 0, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = call zeroext i1 @_ZNK4SkSL14StringFragmentneES0_(%"struct.SkSL::StringFragment"* nonnull %10, i8* %26, i64 %28) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #14
  br i1 %29, label %175, label %30

30:                                               ; preds = %9
  %31 = load i32, i32* %4, align 4
  switch i32 %31, label %175 [
    i32 43, label %32
    i32 45, label %40
    i32 31, label %48
    i32 33, label %58
    i32 34, label %58
    i32 35, label %58
    i32 36, label %58
    i32 37, label %58
    i32 38, label %58
    i32 40, label %58
    i32 39, label %58
    i32 44, label %91
    i32 48, label %107
    i32 52, label %123
    i32 55, label %167
  ]

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %34 = bitcast %"class.SkSL::Expression"* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %37 = bitcast %"class.SkSL::Expression"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %35, %38
  br label %175

40:                                               ; preds = %30
  %41 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %42 = bitcast %"class.SkSL::Expression"* %41 to float*
  %43 = load float, float* %42, align 8
  %44 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %45 = bitcast %"class.SkSL::Expression"* %44 to float*
  %46 = load float, float* %45, align 8
  %47 = fcmp oeq float %43, %46
  br label %175

48:                                               ; preds = %30
  %49 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %50 = bitcast %"class.SkSL::Expression"* %49 to i8*
  %51 = load i8, i8* %50, align 8, !range !32
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %54 = bitcast %"class.SkSL::Expression"* %53 to i8*
  %55 = load i8, i8* %54, align 8, !range !32
  %56 = icmp ne i8 %55, 0
  %57 = xor i1 %52, %56
  br label %175

58:                                               ; preds = %30, %30, %30, %30, %30, %30, %30, %30
  %59 = load i32, i32* %6, align 4
  %60 = icmp eq i32 %31, %59
  br i1 %60, label %61, label %175

61:                                               ; preds = %58
  %62 = call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %0) #14
  %63 = call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %1) #14
  %64 = bitcast %"class.SkSL::AnyConstructor"* %62 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %65 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %64, align 8
  %66 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %65, i64 12
  %67 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %66, align 8
  %68 = call { %"class.std::__1::unique_ptr"*, i64 } %67(%"class.SkSL::AnyConstructor"* %62) #14
  %69 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %68, 0
  %70 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %68, 1
  %71 = bitcast %"class.SkSL::AnyConstructor"* %63 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %72 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %71, align 8
  %73 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %72, i64 12
  %74 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %73, align 8
  %75 = call { %"class.std::__1::unique_ptr"*, i64 } %74(%"class.SkSL::AnyConstructor"* %63) #14
  %76 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %75, 0
  %77 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %75, 1
  %78 = icmp eq i64 %70, %77
  br i1 %78, label %79, label %175

79:                                               ; preds = %61
  %80 = icmp eq i64 %70, 0
  br i1 %80, label %175, label %83

81:                                               ; preds = %83
  %82 = icmp eq i64 %90, %70
  br i1 %82, label %175, label %83

83:                                               ; preds = %79, %81
  %84 = phi i64 [ %90, %81 ], [ 0, %79 ]
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 %84, i32 0, i32 0, i32 0
  %86 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %76, i64 %84, i32 0, i32 0, i32 0
  %88 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %87, align 8
  %89 = call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %86, %"class.SkSL::Expression"* dereferenceable(24) %88)
  %90 = add nuw i64 %84, 1
  br i1 %89, label %81, label %175

91:                                               ; preds = %30
  %92 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %93 = bitcast %"class.SkSL::Expression"* %92 to i32*
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %96 = bitcast %"class.SkSL::Expression"* %95 to i32*
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %94, %97
  br i1 %98, label %99, label %175

99:                                               ; preds = %91
  %100 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1, i32 0, i32 1
  %101 = bitcast i32* %100 to %"class.SkSL::Expression"**
  %102 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %101, align 8
  %103 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %104 = bitcast i32* %103 to %"class.SkSL::Expression"**
  %105 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %104, align 8
  %106 = call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %102, %"class.SkSL::Expression"* dereferenceable(24) %105)
  br label %175

107:                                              ; preds = %30
  %108 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1, i32 0, i32 1
  %109 = bitcast i32* %108 to %"class.SkSL::Expression"**
  %110 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %109, align 8
  %111 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %112 = bitcast i32* %111 to %"class.SkSL::Expression"**
  %113 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %112, align 8
  %114 = call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %110, %"class.SkSL::Expression"* dereferenceable(24) %113)
  br i1 %114, label %115, label %175

115:                                              ; preds = %107
  %116 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %117 = bitcast %"class.SkSL::Expression"* %116 to %"class.SkSL::Expression"**
  %118 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %117, align 8
  %119 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %120 = bitcast %"class.SkSL::Expression"* %119 to %"class.SkSL::Expression"**
  %121 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %120, align 8
  %122 = call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %118, %"class.SkSL::Expression"* dereferenceable(24) %121)
  br label %175

123:                                              ; preds = %30
  %124 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1, i32 0, i32 1
  %125 = getelementptr inbounds i32, i32* %124, i64 2
  %126 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %127 = getelementptr inbounds i32, i32* %126, i64 2
  %128 = getelementptr inbounds i32, i32* %124, i64 4
  %129 = bitcast i32* %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = lshr i64 %130, 1
  %132 = trunc i64 %131 to i32
  %133 = and i32 %132, 2147483647
  %134 = getelementptr inbounds i32, i32* %126, i64 4
  %135 = bitcast i32* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = lshr i64 %136, 1
  %138 = trunc i64 %137 to i32
  %139 = and i32 %138, 2147483647
  %140 = icmp eq i32 %133, %139
  br i1 %140, label %141, label %175

141:                                              ; preds = %123
  %142 = icmp eq i32 %133, 0
  br i1 %142, label %159, label %143

143:                                              ; preds = %141
  %144 = bitcast i32* %125 to i8**
  %145 = load i8*, i8** %144, align 8
  %146 = bitcast i32* %127 to i8**
  %147 = load i8*, i8** %146, align 8
  %148 = zext i32 %133 to i64
  br label %151

149:                                              ; preds = %151
  %150 = icmp eq i64 %158, %148
  br i1 %150, label %159, label %151

151:                                              ; preds = %149, %143
  %152 = phi i64 [ 0, %143 ], [ %158, %149 ]
  %153 = getelementptr inbounds i8, i8* %145, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = getelementptr inbounds i8, i8* %147, i64 %152
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %154, %156
  %158 = add nuw nsw i64 %152, 1
  br i1 %157, label %149, label %175

159:                                              ; preds = %149, %141
  %160 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %161 = bitcast %"class.SkSL::Expression"* %160 to %"class.SkSL::Expression"**
  %162 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %161, align 8
  %163 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %164 = bitcast %"class.SkSL::Expression"* %163 to %"class.SkSL::Expression"**
  %165 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %164, align 8
  %166 = call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %162, %"class.SkSL::Expression"* dereferenceable(24) %165)
  br label %175

167:                                              ; preds = %30
  %168 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 1
  %169 = bitcast %"class.SkSL::Expression"* %168 to %"class.SkSL::Variable"**
  %170 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %169, align 8
  %171 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %172 = bitcast %"class.SkSL::Expression"* %171 to %"class.SkSL::Variable"**
  %173 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %172, align 8
  %174 = icmp eq %"class.SkSL::Variable"* %170, %173
  br label %175

175:                                              ; preds = %151, %83, %81, %79, %123, %61, %30, %159, %107, %115, %91, %99, %58, %9, %2, %167, %48, %40, %32
  %176 = phi i1 [ %174, %167 ], [ %57, %48 ], [ %47, %40 ], [ %39, %32 ], [ false, %2 ], [ false, %9 ], [ false, %58 ], [ false, %91 ], [ %106, %99 ], [ false, %107 ], [ %122, %115 ], [ %166, %159 ], [ false, %30 ], [ false, %61 ], [ false, %123 ], [ true, %79 ], [ false, %83 ], [ true, %81 ], [ false, %151 ]
  ret i1 %176
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE(i32, %"class.SkSL::Statement"* readonly, %"class.SkSL::Expression"* readonly, %"class.SkSL::Expression"* readonly, %"class.SkSL::Statement"*, %"struct.SkSL::Analysis::UnrollableLoopInfo"*, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", align 8
  %9 = alloca %"struct.SkSL::Analysis::UnrollableLoopInfo", align 8
  %10 = bitcast %"struct.SkSL::Analysis::UnrollableLoopInfo"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 bitcast ({ %"class.SkSL::Variable"*, double, double, i32, [4 x i8] }* @__const._ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE.ignored to i8*), i64 32, i1 false)
  %11 = icmp eq %"struct.SkSL::Analysis::UnrollableLoopInfo"* %5, null
  %12 = select i1 %11, %"struct.SkSL::Analysis::UnrollableLoopInfo"* %9, %"struct.SkSL::Analysis::UnrollableLoopInfo"* %5
  %13 = icmp eq %"class.SkSL::Statement"* %1, null
  br i1 %13, label %234, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 29
  br i1 %17, label %18, label %234

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %20 = bitcast i32* %19 to %"class.SkSL::Type"**
  %21 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %20, align 8
  %22 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %21, i64 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = icmp ult i32 %23, 3
  br i1 %24, label %25, label %234

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %27 = bitcast %"class.SkSL::Statement"* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %234

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2, i32 0, i32 1
  %32 = bitcast i32* %31 to %"class.SkSL::Expression"**
  %33 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %32, align 8
  %34 = icmp eq %"class.SkSL::Expression"* %33, null
  br i1 %34, label %234, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 1
  %37 = bitcast %"class.SkSL::Expression"* %33 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %38 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %37, align 8
  %39 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %38, i64 9
  %40 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %39, align 8
  %41 = tail call %"class.SkSL::Expression"* %40(%"class.SkSL::Expression"* nonnull %33, i32 0) #14
  %42 = icmp eq %"class.SkSL::Expression"* %41, null
  br i1 %42, label %234, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %41, i64 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  switch i32 %45, label %234 [
    i32 43, label %46
    i32 45, label %51
  ]

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %41, i64 1
  %48 = bitcast %"class.SkSL::Expression"* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sitofp i64 %49 to double
  br label %56

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %41, i64 1
  %53 = bitcast %"class.SkSL::Expression"* %52 to float*
  %54 = load float, float* %53, align 8
  %55 = fpext float %54 to double
  br label %56

56:                                               ; preds = %51, %46
  %57 = phi double [ %55, %51 ], [ %50, %46 ]
  store double %57, double* %36, align 8
  %58 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %59 = bitcast %"class.SkSL::Statement"* %58 to %"class.SkSL::Variable"**
  %60 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %59, align 8
  %61 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 0
  store %"class.SkSL::Variable"* %60, %"class.SkSL::Variable"** %61, align 8
  %62 = icmp eq %"class.SkSL::Expression"* %2, null
  br i1 %62, label %234, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 0, i32 2
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 30
  br i1 %66, label %67, label %234

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1
  %69 = bitcast %"class.SkSL::Expression"* %68 to %"class.SkSL::Expression"**
  %70 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %69, align 8
  %71 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %70, i64 0, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 55
  br i1 %73, label %74, label %234

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %70, i64 1
  %76 = bitcast %"class.SkSL::Expression"* %75 to %"class.SkSL::Variable"**
  %77 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %76, align 8
  %78 = icmp eq %"class.SkSL::Variable"* %77, %60
  br i1 %78, label %79, label %234

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, -65
  %83 = icmp ult i32 %82, 6
  br i1 %83, label %84, label %234

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 1, i32 1
  %86 = bitcast %"class.SkSL::Type"** %85 to %"class.SkSL::Expression"**
  %87 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %86, align 8
  %88 = bitcast %"class.SkSL::Expression"* %87 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %89 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %88, align 8
  %90 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %89, i64 9
  %91 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %90, align 8
  %92 = tail call %"class.SkSL::Expression"* %91(%"class.SkSL::Expression"* %87, i32 0) #14
  %93 = icmp eq %"class.SkSL::Expression"* %92, null
  br i1 %93, label %234, label %94

94:                                               ; preds = %84
  %95 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %92, i64 0, i32 0, i32 2
  %96 = load i32, i32* %95, align 4
  switch i32 %96, label %234 [
    i32 43, label %97
    i32 45, label %102
  ]

97:                                               ; preds = %94
  %98 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %92, i64 1
  %99 = bitcast %"class.SkSL::Expression"* %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sitofp i64 %100 to double
  br label %107

102:                                              ; preds = %94
  %103 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %92, i64 1
  %104 = bitcast %"class.SkSL::Expression"* %103 to float*
  %105 = load float, float* %104, align 8
  %106 = fpext float %105 to double
  br label %107

107:                                              ; preds = %102, %97
  %108 = phi double [ %101, %97 ], [ %106, %102 ]
  %109 = icmp eq %"class.SkSL::Expression"* %3, null
  br i1 %109, label %234, label %110

110:                                              ; preds = %107
  %111 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 0, i32 0, i32 2
  %112 = load i32, i32* %111, align 4
  switch i32 %112, label %234 [
    i32 30, label %113
    i32 49, label %156
    i32 50, label %177
  ]

113:                                              ; preds = %110
  %114 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %115 = bitcast %"class.SkSL::Expression"* %114 to %"class.SkSL::Expression"**
  %116 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %115, align 8
  %117 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %116, i64 0, i32 0, i32 2
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, 55
  br i1 %119, label %120, label %234

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %116, i64 1
  %122 = bitcast %"class.SkSL::Expression"* %121 to %"class.SkSL::Variable"**
  %123 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %122, align 8
  %124 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %61, align 8
  %125 = icmp eq %"class.SkSL::Variable"* %123, %124
  br i1 %125, label %126, label %234

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 1
  %128 = bitcast %"class.SkSL::Type"** %127 to %"class.SkSL::Expression"**
  %129 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %128, align 8
  %130 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  %131 = bitcast %"class.SkSL::Expression"* %129 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %132 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %131, align 8
  %133 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %132, i64 9
  %134 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %133, align 8
  %135 = tail call %"class.SkSL::Expression"* %134(%"class.SkSL::Expression"* %129, i32 0) #14
  %136 = icmp eq %"class.SkSL::Expression"* %135, null
  br i1 %136, label %234, label %137

137:                                              ; preds = %126
  %138 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %135, i64 0, i32 0, i32 2
  %139 = load i32, i32* %138, align 4
  switch i32 %139, label %234 [
    i32 43, label %140
    i32 45, label %145
  ]

140:                                              ; preds = %137
  %141 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %135, i64 1
  %142 = bitcast %"class.SkSL::Expression"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = sitofp i64 %143 to double
  br label %150

145:                                              ; preds = %137
  %146 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %135, i64 1
  %147 = bitcast %"class.SkSL::Expression"* %146 to float*
  %148 = load float, float* %147, align 8
  %149 = fpext float %148 to double
  br label %150

150:                                              ; preds = %145, %140
  %151 = phi double [ %149, %145 ], [ %144, %140 ]
  store double %151, double* %130, align 8
  %152 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %153 = load i32, i32* %152, align 8
  switch i32 %153, label %234 [
    i32 71, label %197
    i32 72, label %154
  ]

154:                                              ; preds = %150
  %155 = fsub double -0.000000e+00, %151
  store double %155, double* %130, align 8
  br label %197

156:                                              ; preds = %110
  %157 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %158 = bitcast i32* %157 to %"class.SkSL::Expression"**
  %159 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %158, align 8
  %160 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %159, i64 0, i32 0, i32 2
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 55
  br i1 %162, label %163, label %234

163:                                              ; preds = %156
  %164 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %159, i64 1
  %165 = bitcast %"class.SkSL::Expression"* %164 to %"class.SkSL::Variable"**
  %166 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %165, align 8
  %167 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %61, align 8
  %168 = icmp eq %"class.SkSL::Variable"* %166, %167
  br i1 %168, label %169, label %234

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %171 = bitcast %"class.SkSL::Expression"* %170 to i32*
  %172 = load i32, i32* %171, align 8
  switch i32 %172, label %234 [
    i32 44, label %173
    i32 45, label %175
  ]

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  store double 1.000000e+00, double* %174, align 8
  br label %197

175:                                              ; preds = %169
  %176 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  store double -1.000000e+00, double* %176, align 8
  br label %197

177:                                              ; preds = %110
  %178 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %179 = bitcast %"class.SkSL::Expression"* %178 to %"class.SkSL::Expression"**
  %180 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %179, align 8
  %181 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %180, i64 0, i32 0, i32 2
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 55
  br i1 %183, label %184, label %234

184:                                              ; preds = %177
  %185 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %180, i64 1
  %186 = bitcast %"class.SkSL::Expression"* %185 to %"class.SkSL::Variable"**
  %187 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %186, align 8
  %188 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %61, align 8
  %189 = icmp eq %"class.SkSL::Variable"* %187, %188
  br i1 %189, label %190, label %234

190:                                              ; preds = %184
  %191 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %192 = load i32, i32* %191, align 8
  switch i32 %192, label %234 [
    i32 44, label %193
    i32 45, label %195
  ]

193:                                              ; preds = %190
  %194 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  store double 1.000000e+00, double* %194, align 8
  br label %197

195:                                              ; preds = %190
  %196 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  store double -1.000000e+00, double* %196, align 8
  br label %197

197:                                              ; preds = %195, %193, %175, %173, %154, %150
  %198 = bitcast %"class.SkSL::Statement"* %58 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %200) #14
  %201 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %8, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_120VariableWriteVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %201, align 8
  %202 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %8, i64 0, i32 1
  %203 = bitcast %"class.SkSL::Variable"** %202 to i64*
  store i64 %199, i64* %203, align 8
  %204 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %8, i64 0, i32 0, i32 0
  %205 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* nonnull %204, %"class.SkSL::Statement"* dereferenceable(16) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %200) #14
  br i1 %205, label %234, label %206

206:                                              ; preds = %197
  %207 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 3
  %208 = load double, double* %36, align 8
  store i32 0, i32* %207, align 8
  %209 = getelementptr inbounds %"struct.SkSL::Analysis::UnrollableLoopInfo", %"struct.SkSL::Analysis::UnrollableLoopInfo"* %12, i64 0, i32 2
  br label %210

210:                                              ; preds = %227, %206
  %211 = phi i32 [ 0, %206 ], [ %230, %227 ]
  %212 = phi double [ %208, %206 ], [ %229, %227 ]
  %213 = load i32, i32* %80, align 8
  switch i32 %213, label %224 [
    i32 67, label %225
    i32 69, label %214
    i32 68, label %216
    i32 70, label %218
    i32 65, label %220
    i32 66, label %222
  ]

214:                                              ; preds = %210
  %215 = fcmp ult double %212, %108
  br i1 %215, label %232, label %227

216:                                              ; preds = %210
  %217 = fcmp olt double %212, %108
  br i1 %217, label %227, label %232

218:                                              ; preds = %210
  %219 = fcmp ugt double %212, %108
  br i1 %219, label %232, label %227

220:                                              ; preds = %210
  %221 = fcmp oeq double %212, %108
  br i1 %221, label %227, label %232

222:                                              ; preds = %210
  %223 = fcmp une double %212, %108
  br i1 %223, label %227, label %232

224:                                              ; preds = %210
  call void @llvm.trap() #14
  unreachable

225:                                              ; preds = %210
  %226 = fcmp ogt double %212, %108
  br i1 %226, label %227, label %232

227:                                              ; preds = %225, %222, %220, %218, %216, %214
  %228 = load double, double* %209, align 8
  %229 = fadd double %212, %228
  %230 = add nuw nsw i32 %211, 1
  store i32 %230, i32* %207, align 8
  %231 = icmp eq i32 %230, 129
  br i1 %231, label %234, label %210

232:                                              ; preds = %225, %222, %220, %218, %216, %214
  %233 = icmp ugt i32 %211, 128
  br i1 %233, label %234, label %238

234:                                              ; preds = %227, %232, %7, %14, %18, %25, %30, %35, %43, %56, %63, %74, %79, %107, %110, %197, %84, %94, %67, %137, %126, %150, %120, %113, %169, %163, %156, %190, %184, %177
  %235 = phi i8* [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %177 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %184 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.20, i64 0, i64 0), %190 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %156 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %163 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.20, i64 0, i64 0), %169 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %113 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.18, i64 0, i64 0), %120 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.20, i64 0, i64 0), %150 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.19, i64 0, i64 0), %126 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.19, i64 0, i64 0), %137 ], [ getelementptr inbounds ([51 x i8], [51 x i8]* @.str.14, i64 0, i64 0), %67 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), %94 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), %84 ], [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.22, i64 0, i64 0), %197 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0), %110 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0), %107 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i64 0, i64 0), %79 ], [ getelementptr inbounds ([51 x i8], [51 x i8]* @.str.14, i64 0, i64 0), %74 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), %63 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), %56 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.11, i64 0, i64 0), %43 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.11, i64 0, i64 0), %35 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0), %30 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), %25 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), %18 ], [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), %14 ], [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), %7 ], [ getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0), %232 ], [ getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0), %227 ]
  %236 = icmp eq %"class.SkSL::ErrorReporter"* %6, null
  br i1 %236, label %238, label %237

237:                                              ; preds = %234
  call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* nonnull %6, i32 %0, i8* nonnull %235)
  br label %238

238:                                              ; preds = %237, %234, %232
  %239 = phi i1 [ true, %232 ], [ false, %234 ], [ false, %237 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #14
  ret i1 %239
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"*, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = tail call i64 @strlen(i8* %2) #14
  %6 = icmp ugt i64 %5, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.SkSL::String"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #16
  unreachable

9:                                                ; preds = %3
  %10 = icmp ult i64 %5, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %5, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #15
  %15 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %18, align 8
  %19 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %26

20:                                               ; preds = %9
  %21 = trunc i64 %5 to i8
  %22 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.SkSL::String"* %4 to i8*
  %25 = icmp eq i64 %5, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20, %11
  %27 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %28 = phi i8* [ %24, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 %2, i64 %5, i1 false) #14
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %27, %26 ]
  %31 = phi i8* [ %24, %20 ], [ %28, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %5
  store i8 0, i8* %32, align 1
  %33 = bitcast %"class.SkSL::ErrorReporter"* %0 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %34 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %34, i64 2
  %36 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %35, align 8
  call void %36(%"class.SkSL::ErrorReporter"* %0, i32 %1, %"class.SkSL::String"* nonnull %4) #14
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #15
  br label %43

43:                                               ; preds = %29, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL8Analysis22ValidateIndexingForES2ERKNS_14ProgramElementERNS_13ErrorReporterE(%"class.SkSL::ProgramElement"* nocapture readonly dereferenceable(16), %"class.SkSL::ErrorReporter"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::ES2IndexingVisitor", align 8
  %4 = bitcast %"class.SkSL::ES2IndexingVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL18ES2IndexingVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store %"class.SkSL::ErrorReporter"* %1, %"class.SkSL::ErrorReporter"** %6, align 8
  %9 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.std::__1::__tree_node_base"** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %9, %"class.std::__1::__tree_end_node"** %7, align 8
  %11 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %0, i64 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %23 [
    i32 0, label %24
    i32 1, label %24
    i32 3, label %24
    i32 5, label %24
    i32 6, label %24
    i32 7, label %24
    i32 8, label %24
    i32 2, label %13
    i32 4, label %18
  ]

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %0, i64 2
  %15 = bitcast %"class.SkSL::ProgramElement"* %14 to %"class.SkSL::Statement"**
  %16 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %15, align 8
  %17 = call zeroext i1 @_ZN4SkSL18ES2IndexingVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::ES2IndexingVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %16) #14
  br label %24

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %0, i64 1
  %20 = bitcast %"class.SkSL::ProgramElement"* %19 to %"class.SkSL::Statement"**
  %21 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %20, align 8
  %22 = call zeroext i1 @_ZN4SkSL18ES2IndexingVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::ES2IndexingVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %21) #14
  br label %24

23:                                               ; preds = %2
  call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %13, %18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL18ES2IndexingVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %25 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %3, i64 0, i32 2, i32 0
  %26 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %27 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %26, align 8
  call void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %25, %"class.std::__1::__tree_node"* %27) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL18ES2IndexingVisitorD2Ev(%"class.SkSL::ES2IndexingVisitor"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL18ES2IndexingVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %3, %"class.std::__1::__tree_node"* %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis20IsConstantExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::ConstantExpressionVisitor", align 8
  %3 = bitcast %"class.SkSL::ConstantExpressionVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %2, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL25ConstantExpressionVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  store %"class.std::__1::set"* null, %"class.std::__1::set"** %5, align 8
  %6 = call zeroext i1 @_ZN4SkSL25ConstantExpressionVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::ConstantExpressionVisitor"* nonnull %2, %"class.SkSL::Expression"* dereferenceable(24) %0)
  %7 = xor i1 %6, true
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #14
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL25ConstantExpressionVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::ConstantExpressionVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %56 [
    i32 31, label %57
    i32 43, label %57
    i32 45, label %57
    i32 51, label %57
    i32 55, label %5
    i32 30, label %52
    i32 33, label %52
    i32 34, label %52
    i32 35, label %52
    i32 36, label %52
    i32 37, label %52
    i32 38, label %52
    i32 39, label %52
    i32 40, label %52
    i32 44, label %52
    i32 48, label %52
    i32 49, label %52
    i32 50, label %52
    i32 52, label %52
    i32 53, label %52
    i32 41, label %55
    i32 47, label %55
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %7 = bitcast %"class.SkSL::Expression"* %6 to %"class.SkSL::Variable"**
  %8 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %8, i64 0, i32 3
  %10 = load i8, i8* %9, align 8
  switch i8 %10, label %18 [
    i8 0, label %11
    i8 2, label %11
  ]

11:                                               ; preds = %5, %5
  %12 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %8, i64 0, i32 2
  %13 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %12, align 8
  %14 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %57

18:                                               ; preds = %5, %11
  %19 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %0, i64 0, i32 1
  %20 = load %"class.std::__1::set"*, %"class.std::__1::set"** %19, align 8
  %21 = icmp eq %"class.std::__1::set"* %20, null
  br i1 %21, label %57, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %20, i64 0, i32 0, i32 1, i32 0, i32 0
  %24 = bitcast %"class.std::__1::__tree_end_node"* %23 to %"class.std::__1::__tree_node"**
  %25 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %24, align 8
  %26 = icmp eq %"class.std::__1::__tree_node"* %25, null
  br i1 %26, label %48, label %27

27:                                               ; preds = %22, %27
  %28 = phi %"class.std::__1::__tree_end_node"* [ %38, %27 ], [ %23, %22 ]
  %29 = phi %"class.std::__1::__tree_node"* [ %39, %27 ], [ %25, %22 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 1
  %31 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %30, align 8
  %32 = icmp ult %"class.SkSL::Variable"* %31, %8
  %33 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 0, i32 1
  %34 = bitcast %"class.std::__1::__tree_node_base"** %33 to %"class.std::__1::__tree_node"**
  %35 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::__tree_node"* %29 to %"class.std::__1::__tree_node"**
  %37 = select i1 %32, %"class.std::__1::__tree_node"** %34, %"class.std::__1::__tree_node"** %36
  %38 = select i1 %32, %"class.std::__1::__tree_end_node"* %28, %"class.std::__1::__tree_end_node"* %35
  %39 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %37, align 8
  %40 = icmp eq %"class.std::__1::__tree_node"* %39, null
  br i1 %40, label %41, label %27

41:                                               ; preds = %27
  %42 = icmp eq %"class.std::__1::__tree_end_node"* %38, %23
  br i1 %42, label %48, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 4
  %45 = bitcast %"class.std::__1::__tree_end_node"* %44 to %"class.SkSL::Variable"**
  %46 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %45, align 8
  %47 = icmp ult %"class.SkSL::Variable"* %8, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %43, %41, %22
  br label %49

49:                                               ; preds = %43, %48
  %50 = phi %"class.std::__1::__tree_end_node"* [ %23, %48 ], [ %38, %43 ]
  %51 = icmp eq %"class.std::__1::__tree_end_node"* %50, %23
  br label %57

52:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2
  %53 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %0, i64 0, i32 0, i32 0
  %54 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %53, %"class.SkSL::Expression"* dereferenceable(24) %1)
  br label %57

55:                                               ; preds = %2, %2
  br label %57

56:                                               ; preds = %2
  br label %57

57:                                               ; preds = %11, %18, %49, %2, %2, %2, %2, %56, %55, %52
  %58 = phi i1 [ true, %56 ], [ true, %55 ], [ %54, %52 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %2 ], [ false, %11 ], [ true, %18 ], [ %51, %49 ]
  ret i1 %58
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED2Ev(%"class.SkSL::TProgramVisitor"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Analysis28CanExitWithoutReturningValueERKNS_19FunctionDeclarationERKNS_9StatementE(%"class.SkSL::FunctionDeclaration"* nocapture readonly dereferenceable(96), %"class.SkSL::Statement"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %4 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %0, i64 0, i32 4
  %5 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 12
  br i1 %8, label %19, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 2
  %14 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 3
  %15 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  store i8 0, i8* %12, align 8
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 2
  %16 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %1)
  %17 = load i8, i8* %12, align 8, !range !32
  %18 = icmp eq i8 %17, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #14
  br label %19

19:                                               ; preds = %2, %9
  %20 = phi i1 [ %18, %9 ], [ false, %2 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %4 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %5 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %6 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %7 = alloca %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", align 8
  %8 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  switch i32 %9, label %147 [
    i32 26, label %10
    i32 17, label %12
    i32 18, label %14
    i32 23, label %16
    i32 22, label %63
    i32 20, label %77
    i32 16, label %91
    i32 27, label %94
    i32 28, label %144
  ]

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 1
  store i8 1, i8* %11, align 8
  br label %147

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 2
  store i8 1, i8* %13, align 1
  br label %147

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 3
  store i8 1, i8* %15, align 2
  br label %147

16:                                               ; preds = %2
  %17 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #14
  %18 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 1
  %20 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 2
  %21 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3, i64 0, i32 3
  %22 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  store i8 0, i8* %19, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %21, align 2
  %23 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4, i64 0, i32 1
  %26 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4, i64 0, i32 2
  %27 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4, i64 0, i32 3
  %28 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  store i8 0, i8* %25, align 8
  store i8 0, i8* %26, align 1
  store i8 0, i8* %27, align 2
  %29 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1, i32 0, i32 1
  %30 = bitcast i32* %29 to %"class.SkSL::Statement"**
  %31 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %30, align 8
  %32 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %3, %"class.SkSL::Statement"* dereferenceable(16) %31)
  %33 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %34 = bitcast %"class.SkSL::Statement"* %33 to %"class.SkSL::Statement"**
  %35 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %34, align 8
  %36 = icmp eq %"class.SkSL::Statement"* %35, null
  br i1 %36, label %45, label %37

37:                                               ; preds = %16
  %38 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %4, %"class.SkSL::Statement"* nonnull dereferenceable(16) %35)
  %39 = bitcast i8* %26 to <2 x i8>*
  %40 = load <2 x i8>, <2 x i8>* %39, align 1
  %41 = load i8, i8* %25, align 8
  %42 = and <2 x i8> %40, <i8 1, i8 1>
  %43 = and i8 %41, 1
  %44 = icmp ne i8 %43, 0
  br label %45

45:                                               ; preds = %16, %37
  %46 = phi i1 [ false, %16 ], [ %44, %37 ]
  %47 = phi <2 x i8> [ zeroinitializer, %16 ], [ %42, %37 ]
  %48 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 2
  %49 = bitcast i8* %20 to <2 x i8>*
  %50 = load <2 x i8>, <2 x i8>* %49, align 1
  %51 = or <2 x i8> %47, %50
  %52 = extractelement <2 x i8> %51, i32 0
  store i8 %52, i8* %48, align 1
  %53 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 3
  %54 = extractelement <2 x i8> %51, i32 1
  store i8 %54, i8* %53, align 2
  %55 = load i8, i8* %19, align 8, !range !32
  %56 = icmp ne i8 %55, 0
  %57 = and i1 %56, %46
  %58 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 1
  %59 = zext i1 %57 to i8
  store i8 %59, i8* %58, align 8
  %60 = or i8 %54, %52
  %61 = icmp ne i8 %60, 0
  %62 = or i1 %61, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #14
  br label %147

63:                                               ; preds = %2
  %64 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #14
  %65 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5, i64 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5, i64 0, i32 1
  %67 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5, i64 0, i32 2
  %68 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5, i64 0, i32 3
  %69 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  store i8 0, i8* %66, align 8
  store i8 0, i8* %67, align 1
  store i8 0, i8* %68, align 2
  %70 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %71 = bitcast i32* %70 to %"class.SkSL::Statement"**
  %72 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %71, align 8
  %73 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %5, %"class.SkSL::Statement"* dereferenceable(16) %72)
  %74 = load i8, i8* %66, align 8, !range !32
  %75 = icmp ne i8 %74, 0
  %76 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 1
  store i8 %74, i8* %76, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #14
  br label %147

77:                                               ; preds = %2
  %78 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #14
  %79 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6, i64 0, i32 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6, i64 0, i32 1
  %81 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6, i64 0, i32 2
  %82 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6, i64 0, i32 3
  %83 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %79, align 8
  store i8 0, i8* %80, align 8
  store i8 0, i8* %81, align 1
  store i8 0, i8* %82, align 2
  %84 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 1
  %85 = bitcast %"class.SkSL::Statement"* %84 to %"class.SkSL::Statement"**
  %86 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %85, align 8
  %87 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %6, %"class.SkSL::Statement"* dereferenceable(16) %86)
  %88 = load i8, i8* %80, align 8, !range !32
  %89 = icmp ne i8 %88, 0
  %90 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 1
  store i8 %88, i8* %90, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #14
  br label %147

91:                                               ; preds = %2
  %92 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 0, i32 0
  %93 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %92, %"class.SkSL::Statement"* dereferenceable(16) %1)
  br label %147

94:                                               ; preds = %2
  %95 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3
  %96 = bitcast %"class.SkSL::Statement"* %95 to %"class.std::__1::unique_ptr.16"**
  %97 = load %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"** %96, align 8
  %98 = icmp eq %"class.std::__1::unique_ptr.16"* %97, null
  br i1 %98, label %147, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %101 = bitcast i32* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = lshr i64 %102, 1
  %104 = and i64 %103, 2147483647
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %97, i64 %104
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %147, label %107

107:                                              ; preds = %99
  %108 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7 to i8*
  %109 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7, i64 0, i32 0, i32 0, i32 0
  %110 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7, i64 0, i32 1
  %111 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7, i64 0, i32 2
  %112 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7, i64 0, i32 3
  %113 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %7 to i8*
  br label %114

114:                                              ; preds = %107, %132
  %115 = phi %"class.std::__1::unique_ptr.16"* [ %97, %107 ], [ %134, %132 ]
  %116 = phi i8 [ 0, %107 ], [ %122, %132 ]
  %117 = bitcast %"class.std::__1::unique_ptr.16"* %115 to %"class.SkSL::SwitchCase"**
  %118 = load %"class.SkSL::SwitchCase"*, %"class.SkSL::SwitchCase"** %117, align 8
  %119 = getelementptr inbounds %"class.SkSL::SwitchCase", %"class.SkSL::SwitchCase"* %118, i64 0, i32 1, i32 0, i32 0, i32 0
  %120 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %119, align 8
  %121 = icmp eq %"class.SkSL::Expression"* %120, null
  %122 = select i1 %121, i8 1, i8 %116
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %108) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 -86, i64 16, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  store i8 0, i8* %110, align 8
  store i8 0, i8* %111, align 1
  store i8 0, i8* %112, align 2
  %123 = getelementptr inbounds %"class.SkSL::SwitchCase", %"class.SkSL::SwitchCase"* %118, i64 0, i32 0
  %124 = call zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nonnull %7, %"class.SkSL::Statement"* dereferenceable(16) %123)
  %125 = load i8, i8* %112, align 2, !range !32
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %129, label %127

127:                                              ; preds = %114
  %128 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 3
  store i8 1, i8* %128, align 2
  br label %136

129:                                              ; preds = %114
  %130 = load i8, i8* %111, align 1, !range !32
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %129
  %133 = load i8, i8* %110, align 8, !range !32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #14
  %134 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %115, i64 1
  %135 = icmp eq %"class.std::__1::unique_ptr.16"* %134, %105
  br i1 %135, label %137, label %114

136:                                              ; preds = %129, %127
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #14
  br label %147

137:                                              ; preds = %132
  %138 = icmp ne i8 %133, 1
  %139 = and i8 %122, 1
  %140 = icmp eq i8 %139, 0
  %141 = or i1 %138, %140
  br i1 %141, label %147, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 1
  store i8 1, i8* %143, align 8
  br label %147

144:                                              ; preds = %2
  %145 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor", %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0, i64 0, i32 0, i32 0
  %146 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %145, %"class.SkSL::Statement"* dereferenceable(16) %1)
  br label %147

147:                                              ; preds = %94, %99, %136, %2, %142, %137, %144, %91, %77, %63, %45, %14, %12, %10
  %148 = phi i1 [ %146, %144 ], [ %93, %91 ], [ %89, %77 ], [ %75, %63 ], [ %62, %45 ], [ true, %14 ], [ true, %12 ], [ true, %10 ], [ true, %142 ], [ false, %136 ], [ false, %137 ], [ false, %2 ], [ false, %99 ], [ false, %94 ]
  ret i1 %148
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEED0Ev(%"class.SkSL::TProgramVisitor"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15TProgramVisitorINS_18ProgramWriterTypesEED0Ev(%"class.SkSL::TProgramVisitor.88"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitorD0Ev(%"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_123MergeSampleUsageVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"struct.SkSL::StringFragment"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"struct.SkSL::StringFragment"*
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %"struct.SkSL::SampleUsage"*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %"struct.SkSL::SampleUsage"*
  %11 = alloca i64, align 8
  %12 = bitcast i64* %11 to %"struct.SkSL::SampleUsage"*
  %13 = alloca i64, align 8
  %14 = bitcast i64* %13 to %"struct.SkSL::SampleUsage"*
  %15 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 47
  br i1 %17, label %18, label %114

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 2
  %20 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %19, align 8
  %21 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %22 = bitcast %"class.SkSL::Expression"* %21 to %"class.SkSL::FunctionDeclaration"**
  %23 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %22, align 8
  %24 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %23, i64 0, i32 5
  %25 = load i8, i8* %24, align 8, !range !32
  %26 = icmp eq i8 %25, 0
  %27 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  br i1 %26, label %48, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.SkSL::FunctionDeclaration", %"class.SkSL::FunctionDeclaration"* %23, i64 0, i32 0, i32 1, i32 0
  %30 = bitcast i8** %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  store <2 x i64> %31, <2 x i64>* %3, align 16
  %32 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqEPKc(%"struct.SkSL::StringFragment"* nonnull %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #14
  br i1 %32, label %33, label %48

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 2, i32 0, i32 1
  %35 = bitcast i32* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = and i64 %36, 4294967294
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %48, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 2
  %41 = bitcast %"class.SkSL::Expression"* %40 to %"class.std::__1::unique_ptr"**
  %42 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %43, align 8
  %45 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %44, i64 0, i32 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 55
  br i1 %47, label %49, label %48

48:                                               ; preds = %39, %33, %28, %18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  br label %114

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %44, i64 1
  %51 = bitcast %"class.SkSL::Expression"* %50 to %"class.SkSL::Variable"**
  %52 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %51, align 8
  %53 = icmp eq %"class.SkSL::Variable"* %52, %20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  br i1 %53, label %54, label %114

54:                                               ; preds = %49
  %55 = and i64 %36, 4294967292
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %110, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 1, i32 0, i32 0, i32 0
  %59 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %58, align 8
  %60 = bitcast %"class.SkSL::Expression"* %59 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %61 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %60, align 8
  %62 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %61, i64 3
  %63 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %62, align 8
  %64 = call dereferenceable(184) %"class.SkSL::Type"* %63(%"class.SkSL::Expression"* %59) #14
  %65 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 1
  %66 = load %"class.SkSL::Context"*, %"class.SkSL::Context"** %65, align 8
  %67 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %66, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %68 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %67, align 8
  %69 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #14
  %70 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %64, i64 0, i32 0, i32 1, i32 0
  %71 = bitcast i8** %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 8
  store <2 x i64> %72, <2 x i64>* %5, align 16
  %73 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %68, i64 0, i32 0, i32 1, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %68, i64 0, i32 0, i32 1, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %6, i8* %74, i64 %76) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #14
  br i1 %77, label %78, label %106

78:                                               ; preds = %57
  %79 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 3
  %80 = load i8, i8* %79, align 8, !range !32
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %102

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %59, i64 0, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 55
  br i1 %85, label %86, label %102

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %59, i64 1
  %88 = bitcast %"class.SkSL::Expression"* %87 to %"class.SkSL::Variable"**
  %89 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %88, align 8
  %90 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %89, i64 0, i32 2
  %91 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %90, align 8
  %92 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %91, i64 0, i32 0, i32 6
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 10009
  br i1 %94, label %95, label %102

95:                                               ; preds = %86
  %96 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 5
  %97 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #14
  store i64 1, i64* %7, align 8
  %98 = call i64 @_ZN4SkSL11SampleUsage5mergeERKS0_(%"struct.SkSL::SampleUsage"* %96, %"struct.SkSL::SampleUsage"* nonnull dereferenceable(8) %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #14
  %99 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 6
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %99, align 4
  br label %114

102:                                              ; preds = %78, %86, %82
  %103 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 5
  %104 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #14
  store i64 3, i64* %9, align 8
  %105 = call i64 @_ZN4SkSL11SampleUsage5mergeERKS0_(%"struct.SkSL::SampleUsage"* %103, %"struct.SkSL::SampleUsage"* nonnull dereferenceable(8) %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %104) #14
  br label %114

106:                                              ; preds = %57
  %107 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 5
  %108 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %108) #14
  store i64 1, i64* %11, align 8
  %109 = call i64 @_ZN4SkSL11SampleUsage5mergeERKS0_(%"struct.SkSL::SampleUsage"* %107, %"struct.SkSL::SampleUsage"* nonnull dereferenceable(8) %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %108) #14
  br label %114

110:                                              ; preds = %54
  %111 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 5
  %112 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #14
  store i64 1, i64* %13, align 8
  %113 = call i64 @_ZN4SkSL11SampleUsage5mergeERKS0_(%"struct.SkSL::SampleUsage"* %111, %"struct.SkSL::SampleUsage"* nonnull dereferenceable(8) %14) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #14
  br label %114

114:                                              ; preds = %48, %49, %110, %95, %102, %106, %2
  %115 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor", %"class.SkSL::(anonymous namespace)::MergeSampleUsageVisitor"* %0, i64 0, i32 0, i32 0
  %116 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %115, %"class.SkSL::Expression"* dereferenceable(24) %1)
  ret i1 %116
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL14ProgramVisitor18visitExpressionPtrERKNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE(%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramVisitor", %"class.SkSL::ProgramVisitor"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %4, align 8
  %6 = bitcast %"class.SkSL::ProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)***
  %7 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)** %7, i64 2
  %9 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Expression"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.SkSL::TProgramVisitor"* %3, %"class.SkSL::Expression"* dereferenceable(24) %5) #14
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL14ProgramVisitor17visitStatementPtrERKNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE(%"class.SkSL::ProgramVisitor"*, %"class.std::__1::unique_ptr.16"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramVisitor", %"class.SkSL::ProgramVisitor"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %4, align 8
  %6 = bitcast %"class.SkSL::ProgramVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)***
  %7 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)** %7, i64 3
  %9 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.SkSL::Statement"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.SkSL::TProgramVisitor"* %3, %"class.SkSL::Statement"* dereferenceable(16) %5) #14
  ret i1 %10
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i64 @_ZN4SkSL11SampleUsage5mergeERKS0_(%"struct.SkSL::SampleUsage"*, %"struct.SkSL::SampleUsage"* dereferenceable(8)) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqEPKc(%"struct.SkSL::StringFragment"*, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_122BuiltinVariableVisitorD0Ev(%"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_122BuiltinVariableVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %8 = bitcast %"class.SkSL::Expression"* %7 to %"class.SkSL::Variable"**
  %9 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %9, i64 0, i32 2
  %11 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %10, align 8
  %12 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %11, i64 0, i32 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %13, %15
  br label %20

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor", %"class.SkSL::(anonymous namespace)::BuiltinVariableVisitor"* %0, i64 0, i32 0, i32 0
  %19 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %18, %"class.SkSL::Expression"* dereferenceable(24) %1)
  br label %20

20:                                               ; preds = %17, %6
  %21 = phi i1 [ %16, %6 ], [ %19, %17 ]
  ret i1 %21
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitorD0Ev(%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 0, i32 0
  %11 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %10, %"class.SkSL::Expression"* dereferenceable(24) %1)
  br label %12

12:                                               ; preds = %2, %9
  %13 = phi i1 [ true, %2 ], [ %11, %9 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 0, i32 0
  %11 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %10, %"class.SkSL::Statement"* dereferenceable(16) %1)
  br label %12

12:                                               ; preds = %2, %9
  %13 = phi i1 [ true, %2 ], [ %11, %9 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_116NodeCountVisitor19visitProgramElementERKNS_14ProgramElementE(%"class.SkSL::(anonymous namespace)::NodeCountVisitor"*, %"class.SkSL::ProgramElement"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %30

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::NodeCountVisitor", %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %29 [
    i32 0, label %30
    i32 1, label %30
    i32 3, label %30
    i32 5, label %30
    i32 6, label %30
    i32 7, label %30
    i32 8, label %30
    i32 2, label %13
    i32 4, label %21
  ]

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 2
  %15 = bitcast %"class.SkSL::ProgramElement"* %14 to %"class.std::__1::unique_ptr.16"*
  %16 = bitcast %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %17 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %17, i64 6
  %19 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.SkSL::TProgramVisitor"* %10, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %15) #14
  br label %30

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.SkSL::ProgramElement", %"class.SkSL::ProgramElement"* %1, i64 1
  %23 = bitcast %"class.SkSL::ProgramElement"* %22 to %"class.std::__1::unique_ptr.16"*
  %24 = bitcast %"class.SkSL::(anonymous namespace)::NodeCountVisitor"* %0 to i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)***
  %25 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)**, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %25, i64 6
  %27 = load i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)*, i1 (%"class.SkSL::TProgramVisitor"*, %"class.std::__1::unique_ptr.16"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.SkSL::TProgramVisitor"* %10, %"class.std::__1::unique_ptr.16"* dereferenceable(8) %23) #14
  br label %30

29:                                               ; preds = %9
  tail call void @llvm.trap() #14
  unreachable

30:                                               ; preds = %21, %13, %9, %9, %9, %9, %9, %9, %9, %2
  %31 = phi i1 [ true, %2 ], [ %28, %21 ], [ %20, %13 ], [ false, %9 ], [ false, %9 ], [ false, %9 ], [ false, %9 ], [ false, %9 ], [ false, %9 ], [ false, %9 ]
  ret i1 %31
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_122SwitchCaseContainsExitD0Ev(%"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::SwitchCaseContainsExit"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_119ProgramUsageVisitorD0Ev(%"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::ProgramUsageVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.SkSL::ProgramUsage::VariableCounts"* @_ZN10SkTHashMapIPKN4SkSL8VariableENS0_12ProgramUsage14VariableCountsE10SkGoodHashE3setES3_S5_(%class.SkTHashMap.177*, %"class.SkSL::Variable"*, i64, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", align 8
  %6 = ptrtoint %"class.SkSL::Variable"* %1 to i64
  %7 = bitcast %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7)
  %8 = bitcast %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %5 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %5, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %9 to i64*
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %5, i64 0, i32 0, i32 1, i32 2
  store i32 %3, i32* %11, align 8
  %12 = getelementptr inbounds %class.SkTHashMap.177, %class.SkTHashMap.177* %0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = shl nsw i32 %13, 2
  %15 = getelementptr inbounds %class.SkTHashMap.177, %class.SkTHashMap.177* %0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = mul nsw i32 %16, 3
  %18 = icmp slt i32 %14, %17
  br i1 %18, label %24, label %19

19:                                               ; preds = %4
  %20 = getelementptr inbounds %class.SkTHashMap.177, %class.SkTHashMap.177* %0, i64 0, i32 0
  %21 = icmp sgt i32 %16, 0
  %22 = shl nsw i32 %16, 1
  %23 = select i1 %21, i32 %22, i32 4
  tail call void @_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL8VariableENS1_12ProgramUsage14VariableCountsE10SkGoodHashE4PairES4_S9_E6resizeEi(%class.SkTHashTable.178* %20, i32 %23) #14
  br label %24

24:                                               ; preds = %4, %19
  %25 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %26 = call i32 %25(i8* nonnull %7, i64 8, i32 0) #14
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %27, i32 1, i32 %26
  %29 = load i32, i32* %15, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %74

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %5, i64 0, i32 0, i32 0
  %33 = add nsw i32 %29, -1
  %34 = and i32 %28, %33
  %35 = getelementptr inbounds %class.SkTHashMap.177, %class.SkTHashMap.177* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %35, align 8
  %37 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %32, align 8
  %38 = ptrtoint %"class.SkSL::Variable"* %37 to i64
  br label %39

39:                                               ; preds = %67, %31
  %40 = phi i32 [ 0, %31 ], [ %72, %67 ]
  %41 = phi i32 [ %34, %31 ], [ %71, %67 ]
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %36, i64 %42
  %44 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %36, i64 %42, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %55

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %43, i64 0, i32 0
  %49 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %43 to i64*
  store i64 %38, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %36, i64 %42, i32 0, i32 0, i32 1
  %51 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %50 to i8*
  %52 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 12, i1 false) #14
  store i32 %28, i32* %44, align 8
  %53 = load i32, i32* %12, align 8
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %12, align 8
  br label %74

55:                                               ; preds = %39
  %56 = icmp eq i32 %28, %45
  br i1 %56, label %57, label %67

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %43, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %58, align 8
  %60 = icmp eq %"class.SkSL::Variable"* %37, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %43, i64 0, i32 0
  %63 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %43 to i64*
  store i64 %38, i64* %63, align 8
  %64 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %36, i64 %42, i32 0, i32 0, i32 1
  %65 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %64 to i8*
  %66 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 12, i1 false) #14
  br label %74

67:                                               ; preds = %57, %55
  %68 = add nsw i32 %41, -1
  %69 = icmp slt i32 %41, 1
  %70 = select i1 %69, i32 %29, i32 0
  %71 = add nsw i32 %68, %70
  %72 = add nuw nsw i32 %40, 1
  %73 = icmp eq i32 %72, %29
  br i1 %73, label %74, label %39

74:                                               ; preds = %67, %24, %47, %61
  %75 = phi %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* [ %62, %61 ], [ %48, %47 ], [ null, %24 ], [ null, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7)
  %76 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %75, i64 0, i32 0, i32 1
  ret %"struct.SkSL::ProgramUsage::VariableCounts"* %76
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL8VariableENS1_12ProgramUsage14VariableCountsE10SkGoodHashE4PairES4_S9_E6resizeEi(%class.SkTHashTable.178*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTHashTable.178, %class.SkTHashTable.178* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkTHashTable.178, %class.SkTHashTable.178* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  store i32 %1, i32* %3, align 4
  %6 = getelementptr inbounds %class.SkTHashTable.178, %class.SkTHashTable.178* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.SkAutoTArray.179, %class.SkAutoTArray.179* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %class.SkAutoTArray.179* %6 to i64*
  %9 = load i64, i64* %8, align 8
  store %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %7, align 8
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i64 0, i64* %8, align 8
  br label %62

12:                                               ; preds = %2
  %13 = sext i32 %1 to i64
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %13, i64 32) #14
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = tail call i8* @_Znam(i64 %17) #15
  %19 = bitcast i8* %18 to %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*
  %20 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %19, i64 %13
  %21 = shl nsw i64 %13, 5
  %22 = add nsw i64 %21, -32
  %23 = lshr exact i64 %22, 5
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 7
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %12, %27
  %28 = phi %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* [ %31, %27 ], [ %19, %12 ]
  %29 = phi i64 [ %32, %27 ], [ %25, %12 ]
  %30 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 28, i1 false) #14
  %31 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %28, i64 1
  %32 = add i64 %29, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %27, !llvm.loop !39

34:                                               ; preds = %27, %12
  %35 = phi %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* [ %19, %12 ], [ %31, %27 ]
  %36 = icmp ult i64 %22, 224
  br i1 %36, label %56, label %37

37:                                               ; preds = %34, %37
  %38 = phi %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* [ %54, %37 ], [ %35, %34 ]
  %39 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 28, i1 false) #14
  %40 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 1
  %41 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 28, i1 false) #14
  %42 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 2
  %43 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 28, i1 false) #14
  %44 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 3
  %45 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 28, i1 false) #14
  %46 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 4
  %47 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 28, i1 false) #14
  %48 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 5
  %49 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 28, i1 false) #14
  %50 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 6
  %51 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 28, i1 false) #14
  %52 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 7
  %53 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 28, i1 false) #14
  %54 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %38, i64 8
  %55 = icmp eq %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %54, %20
  br i1 %55, label %56, label %37

56:                                               ; preds = %37, %34
  %57 = ptrtoint i8* %18 to i64
  %58 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %7, align 8
  %59 = icmp eq %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %58, null
  store i64 %57, i64* %8, align 8
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %58 to i8*
  tail call void @_ZdaPv(i8* %61) #15
  br label %62

62:                                               ; preds = %60, %56, %11
  %63 = icmp sgt i32 %4, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %62
  %65 = inttoptr i64 %9 to %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*
  %66 = getelementptr inbounds %class.SkTHashTable.178, %class.SkTHashTable.178* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %67 = zext i32 %4 to i64
  br label %73

68:                                               ; preds = %131, %62
  %69 = icmp eq i64 %9, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %68
  %71 = inttoptr i64 %9 to i8*
  tail call void @_ZdaPv(i8* %71) #15
  br label %72

72:                                               ; preds = %68, %70
  ret void

73:                                               ; preds = %131, %64
  %74 = phi i64 [ 0, %64 ], [ %132, %131 ]
  %75 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %65, i64 %74, i32 1
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %131, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %65, i64 %74, i32 0
  %80 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %79, i64 0, i32 0, i32 0
  %81 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %82 = bitcast %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %79 to i8*
  %83 = tail call i32 %81(i8* %82, i64 8, i32 0) #14
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i32 1, i32 %83
  %86 = load i32, i32* %3, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %131

88:                                               ; preds = %78
  %89 = add nsw i32 %86, -1
  %90 = and i32 %85, %89
  %91 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"** %66, align 8
  br label %92

92:                                               ; preds = %124, %88
  %93 = phi i32 [ 0, %88 ], [ %129, %124 ]
  %94 = phi i32 [ %90, %88 ], [ %128, %124 ]
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %91, i64 %95
  %97 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %91, i64 %95, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %110

100:                                              ; preds = %92
  %101 = bitcast %"struct.SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair"* %79 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %96 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %65, i64 %74, i32 0, i32 0, i32 1
  %105 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %91, i64 %95, i32 0, i32 0, i32 1
  %106 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %105 to i8*
  %107 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 4 %107, i64 12, i1 false) #14
  store i32 %85, i32* %97, align 8
  %108 = load i32, i32* %5, align 8
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %5, align 8
  br label %131

110:                                              ; preds = %92
  %111 = icmp eq i32 %85, %98
  br i1 %111, label %112, label %124

112:                                              ; preds = %110
  %113 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %80, align 8
  %114 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %96, i64 0, i32 0, i32 0, i32 0
  %115 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %114, align 8
  %116 = icmp eq %"class.SkSL::Variable"* %113, %115
  br i1 %116, label %117, label %124

117:                                              ; preds = %112
  %118 = ptrtoint %"class.SkSL::Variable"* %113 to i64
  %119 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %96 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %65, i64 %74, i32 0, i32 0, i32 1
  %121 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair, const SkSL::Variable *, SkTHashMap<const SkSL::Variable *, SkSL::ProgramUsage::VariableCounts, SkGoodHash>::Pair>::Slot"* %91, i64 %95, i32 0, i32 0, i32 1
  %122 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %121 to i8*
  %123 = bitcast %"struct.SkSL::ProgramUsage::VariableCounts"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 4 %123, i64 12, i1 false) #14
  br label %131

124:                                              ; preds = %112, %110
  %125 = add nsw i32 %94, -1
  %126 = icmp slt i32 %94, 1
  %127 = select i1 %126, i32 %86, i32 0
  %128 = add nsw i32 %125, %127
  %129 = add nuw nsw i32 %93, 1
  %130 = icmp eq i32 %129, %86
  br i1 %130, label %131, label %92

131:                                              ; preds = %124, %117, %100, %78, %73
  %132 = add nuw nsw i64 %74, 1
  %133 = icmp eq i64 %132, %67
  br i1 %133, label %68, label %73
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE3setES3_i(%class.SkTHashMap.186*, %"class.SkSL::FunctionDeclaration"*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca { %"class.SkSL::FunctionDeclaration"*, i32 }, align 8
  %5 = bitcast { %"class.SkSL::FunctionDeclaration"*, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5)
  %6 = getelementptr inbounds { %"class.SkSL::FunctionDeclaration"*, i32 }, { %"class.SkSL::FunctionDeclaration"*, i32 }* %4, i64 0, i32 0
  store %"class.SkSL::FunctionDeclaration"* %1, %"class.SkSL::FunctionDeclaration"** %6, align 8
  %7 = getelementptr inbounds { %"class.SkSL::FunctionDeclaration"*, i32 }, { %"class.SkSL::FunctionDeclaration"*, i32 }* %4, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %class.SkTHashMap.186, %class.SkTHashMap.186* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = shl nsw i32 %9, 2
  %11 = getelementptr inbounds %class.SkTHashMap.186, %class.SkTHashMap.186* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, 3
  %14 = icmp slt i32 %10, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.SkTHashMap.186, %class.SkTHashMap.186* %0, i64 0, i32 0
  %17 = icmp sgt i32 %12, 0
  %18 = shl nsw i32 %12, 1
  %19 = select i1 %17, i32 %18, i32 4
  tail call void @_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE4PairES4_S7_E6resizeEi(%class.SkTHashTable.187* %16, i32 %19) #14
  br label %20

20:                                               ; preds = %3, %15
  %21 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %22 = call i32 %21(i8* nonnull %5, i64 8, i32 0) #14
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, i32 1, i32 %22
  %25 = load i32, i32* %11, align 4
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %67

27:                                               ; preds = %20
  %28 = add nsw i32 %25, -1
  %29 = and i32 %24, %28
  %30 = getelementptr inbounds %class.SkTHashMap.186, %class.SkTHashMap.186* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %31 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %30, align 8
  %32 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %6, align 8
  %33 = ptrtoint %"class.SkSL::FunctionDeclaration"* %32 to i64
  br label %34

34:                                               ; preds = %60, %27
  %35 = phi i32 [ 0, %27 ], [ %65, %60 ]
  %36 = phi i32 [ %29, %27 ], [ %64, %60 ]
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %37
  %39 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %37, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %38, i64 0, i32 0
  %44 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %38 to i64*
  store i64 %33, i64* %44, align 8
  %45 = load i32, i32* %7, align 8
  %46 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %37, i32 0, i32 0, i32 1
  store i32 %45, i32* %46, align 8
  store i32 %24, i32* %39, align 8
  %47 = load i32, i32* %8, align 8
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %8, align 8
  br label %67

49:                                               ; preds = %34
  %50 = icmp eq i32 %24, %40
  br i1 %50, label %51, label %60

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %38, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %52, align 8
  %54 = icmp eq %"class.SkSL::FunctionDeclaration"* %32, %53
  br i1 %54, label %55, label %60

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %38, i64 0, i32 0
  %57 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %38 to i64*
  store i64 %33, i64* %57, align 8
  %58 = load i32, i32* %7, align 8
  %59 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %31, i64 %37, i32 0, i32 0, i32 1
  store i32 %58, i32* %59, align 8
  br label %67

60:                                               ; preds = %51, %49
  %61 = add nsw i32 %36, -1
  %62 = icmp slt i32 %36, 1
  %63 = select i1 %62, i32 %25, i32 0
  %64 = add nsw i32 %61, %63
  %65 = add nuw nsw i32 %35, 1
  %66 = icmp eq i32 %65, %25
  br i1 %66, label %67, label %34

67:                                               ; preds = %60, %20, %42, %55
  %68 = phi %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* [ %56, %55 ], [ %43, %42 ], [ null, %20 ], [ null, %60 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5)
  %69 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %68, i64 0, i32 0, i32 1
  ret i32* %69
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkTHashTableIN10SkTHashMapIPKN4SkSL19FunctionDeclarationEi10SkGoodHashE4PairES4_S7_E6resizeEi(%class.SkTHashTable.187*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTHashTable.187, %class.SkTHashTable.187* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkTHashTable.187, %class.SkTHashTable.187* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  store i32 %1, i32* %3, align 4
  %6 = getelementptr inbounds %class.SkTHashTable.187, %class.SkTHashTable.187* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.SkAutoTArray.188, %class.SkAutoTArray.188* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %class.SkAutoTArray.188* %6 to i64*
  %9 = load i64, i64* %8, align 8
  store %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %7, align 8
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i64 0, i64* %8, align 8
  br label %32

12:                                               ; preds = %2
  %13 = sext i32 %1 to i64
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %13, i64 24) #14
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = tail call i8* @_Znam(i64 %17) #15
  %19 = bitcast i8* %18 to %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*
  %20 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %19, i64 %13
  br label %21

21:                                               ; preds = %21, %12
  %22 = phi %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* [ %19, %12 ], [ %24, %21 ]
  %23 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 20, i1 false) #14
  %24 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %22, i64 1
  %25 = icmp eq %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %24, %20
  br i1 %25, label %26, label %21

26:                                               ; preds = %21
  %27 = ptrtoint i8* %18 to i64
  %28 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %7, align 8
  %29 = icmp eq %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %28, null
  store i64 %27, i64* %8, align 8
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %28 to i8*
  tail call void @_ZdaPv(i8* %31) #15
  br label %32

32:                                               ; preds = %30, %26, %11
  %33 = icmp sgt i32 %4, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %32
  %35 = inttoptr i64 %9 to %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*
  %36 = getelementptr inbounds %class.SkTHashTable.187, %class.SkTHashTable.187* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %37 = zext i32 %4 to i64
  br label %43

38:                                               ; preds = %99, %32
  %39 = icmp eq i64 %9, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = inttoptr i64 %9 to i8*
  tail call void @_ZdaPv(i8* %41) #15
  br label %42

42:                                               ; preds = %38, %40
  ret void

43:                                               ; preds = %99, %34
  %44 = phi i64 [ 0, %34 ], [ %100, %99 ]
  %45 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %35, i64 %44, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %99, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %35, i64 %44, i32 0
  %50 = getelementptr inbounds %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair", %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %49, i64 0, i32 0, i32 0
  %51 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %52 = bitcast %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %49 to i8*
  %53 = tail call i32 %51(i8* %52, i64 8, i32 0) #14
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, i32 1, i32 %53
  %56 = load i32, i32* %3, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %99

58:                                               ; preds = %48
  %59 = add nsw i32 %56, -1
  %60 = and i32 %55, %59
  %61 = load %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"** %36, align 8
  br label %62

62:                                               ; preds = %92, %58
  %63 = phi i32 [ 0, %58 ], [ %97, %92 ]
  %64 = phi i32 [ %60, %58 ], [ %96, %92 ]
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %61, i64 %65
  %67 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %61, i64 %65, i32 1
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %79

70:                                               ; preds = %62
  %71 = bitcast %"struct.SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair"* %49 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %66 to i64*
  store i64 %72, i64* %73, align 8
  %74 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %35, i64 %44, i32 0, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %61, i64 %65, i32 0, i32 0, i32 1
  store i32 %75, i32* %76, align 8
  store i32 %55, i32* %67, align 8
  %77 = load i32, i32* %5, align 8
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %5, align 8
  br label %99

79:                                               ; preds = %62
  %80 = icmp eq i32 %55, %68
  br i1 %80, label %81, label %92

81:                                               ; preds = %79
  %82 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %50, align 8
  %83 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %66, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.SkSL::FunctionDeclaration"*, %"class.SkSL::FunctionDeclaration"** %83, align 8
  %85 = icmp eq %"class.SkSL::FunctionDeclaration"* %82, %84
  br i1 %85, label %86, label %92

86:                                               ; preds = %81
  %87 = ptrtoint %"class.SkSL::FunctionDeclaration"* %82 to i64
  %88 = bitcast %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %66 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %35, i64 %44, i32 0, i32 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair, const SkSL::FunctionDeclaration *, SkTHashMap<const SkSL::FunctionDeclaration *, int, SkGoodHash>::Pair>::Slot"* %61, i64 %65, i32 0, i32 0, i32 1
  store i32 %90, i32* %91, align 8
  br label %99

92:                                               ; preds = %81, %79
  %93 = add nsw i32 %64, -1
  %94 = icmp slt i32 %64, 1
  %95 = select i1 %94, i32 %56, i32 0
  %96 = add nsw i32 %93, %95
  %97 = add nuw nsw i32 %63, 1
  %98 = icmp eq i32 %97, %56
  br i1 %98, label %99, label %62

99:                                               ; preds = %92, %86, %70, %48, %43
  %100 = add nuw nsw i64 %44, 1
  %101 = icmp eq i64 %100, %37
  br i1 %101, label %38, label %43
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_120VariableWriteVisitorD0Ev(%"class.SkSL::(anonymous namespace)::VariableWriteVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_120VariableWriteVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::VariableWriteVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br i1 %5, label %6, label %19

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %8 = bitcast %"class.SkSL::Expression"* %7 to %"class.SkSL::Variable"**
  %9 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %0, i64 0, i32 1
  %11 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %10, align 8
  %12 = icmp eq %"class.SkSL::Variable"* %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %15 = bitcast i32* %14 to i8*
  %16 = load i8, i8* %15, align 8
  %17 = add i8 %16, -1
  %18 = icmp ult i8 %17, 3
  br i1 %18, label %22, label %19

19:                                               ; preds = %13, %6, %2
  %20 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::VariableWriteVisitor", %"class.SkSL::(anonymous namespace)::VariableWriteVisitor"* %0, i64 0, i32 0, i32 0
  %21 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %20, %"class.SkSL::Expression"* dereferenceable(24) %1)
  br label %22

22:                                               ; preds = %13, %19
  %23 = phi i1 [ %21, %19 ], [ true, %13 ]
  ret i1 %23
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporterD0Ev(%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter5errorEiNS_6StringE(%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* nocapture, i32, %"class.SkSL::String"* nocapture readnone) unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, 1
  store i32 %6, i32* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter10errorCountEv(%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* nocapture readonly) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN4SkSL12_GLOBAL__N_120TrivialErrorReporter13setErrorCountEi(%"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* nocapture, i32) unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::TrivialErrorReporter", %"class.SkSL::(anonymous namespace)::TrivialErrorReporter"* %0, i64 0, i32 1
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %125 [
    i32 55, label %8
    i32 44, label %83
    i32 52, label %87
    i32 48, label %121
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to %"class.SkSL::Variable"**
  %11 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %11, i64 0, i32 2
  %13 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %12, align 8
  %14 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 9
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %80, label %18

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, i64 0, i32 0
  %20 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %19, align 8
  %21 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #14
  %24 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #14
  %25 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %11, i64 0, i32 0, i32 1, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %11, i64 0, i32 0, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, -17
  br i1 %29, label %30, label %32

30:                                               ; preds = %18
  %31 = bitcast %"class.SkSL::String"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %31) #16
  unreachable

32:                                               ; preds = %18
  %33 = icmp ult i64 %28, 23
  br i1 %33, label %42, label %34

34:                                               ; preds = %32
  %35 = add nuw i64 %28, 16
  %36 = and i64 %35, -16
  %37 = tail call i8* @_Znwm(i64 %36) #15
  %38 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %37, i8** %38, align 8
  %39 = or i64 %36, -9223372036854775808
  %40 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %28, i64* %41, align 8
  br label %47

42:                                               ; preds = %32
  %43 = trunc i64 %28 to i8
  %44 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  %46 = icmp eq i64 %28, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %42, %34
  %48 = phi i8* [ %37, %34 ], [ %24, %42 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %26, i64 %28, i1 false) #14
  br label %49

49:                                               ; preds = %42, %47
  %50 = phi i8* [ %24, %42 ], [ %48, %47 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %28
  store i8 0, i8* %51, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %5) #14
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #14
  %52 = bitcast %"class.SkSL::ErrorReporter"* %20 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %53 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %53, i64 2
  %55 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %54, align 8
  call void %55(%"class.SkSL::ErrorReporter"* %20, i32 %22, %"class.SkSL::String"* nonnull %3) #14
  %56 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %49
  %61 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #15
  br label %63

63:                                               ; preds = %49, %60
  %64 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %63, %68
  %72 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %73 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %72, i64 0, i32 1, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  call void @_ZdlPv(i8* %78) #15
  br label %79

79:                                               ; preds = %71, %76
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #14
  br label %130

80:                                               ; preds = %8
  %81 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, i64 0, i32 1
  %82 = bitcast %"class.SkSL::VariableReference"** %81 to %"class.SkSL::Expression"**
  store %"class.SkSL::Expression"* %1, %"class.SkSL::Expression"** %82, align 8
  br label %130

83:                                               ; preds = %2
  %84 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %85 = bitcast i32* %84 to %"class.SkSL::Expression"**
  %86 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %85, align 8
  tail call fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, %"class.SkSL::Expression"* dereferenceable(24) %86)
  br label %130

87:                                               ; preds = %2
  %88 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 1
  %89 = bitcast %"class.SkSL::Type"** %88 to i8**
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %117, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 2
  %94 = bitcast %"class.SkSL::Expression"* %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = lshr i64 %95, 1
  %97 = and i64 %96, 2147483647
  %98 = getelementptr inbounds i8, i8* %90, i64 %97
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %117, label %100

100:                                              ; preds = %92, %113
  %101 = phi i32 [ %114, %113 ], [ 0, %92 ]
  %102 = phi i8* [ %115, %113 ], [ %90, %92 ]
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = shl i32 1, %104
  %106 = and i32 %105, %101
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %113, label %108

108:                                              ; preds = %100
  %109 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, i64 0, i32 0
  %110 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %109, align 8
  %111 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %112 = load i32, i32* %111, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %110, i32 %112, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #14
  br label %117

113:                                              ; preds = %100
  %114 = or i32 %105, %101
  %115 = getelementptr inbounds i8, i8* %102, i64 1
  %116 = icmp eq i8* %115, %98
  br i1 %116, label %117, label %100

117:                                              ; preds = %113, %87, %92, %108
  %118 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %119 = bitcast %"class.SkSL::Expression"* %118 to %"class.SkSL::Expression"**
  %120 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %119, align 8
  tail call fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, %"class.SkSL::Expression"* dereferenceable(24) %120)
  br label %130

121:                                              ; preds = %2
  %122 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %123 = bitcast %"class.SkSL::Expression"* %122 to %"class.SkSL::Expression"**
  %124 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %123, align 8
  tail call fastcc void @_ZN4SkSL12_GLOBAL__N_119IsAssignableVisitor15visitExpressionERNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, %"class.SkSL::Expression"* dereferenceable(24) %124)
  br label %130

125:                                              ; preds = %2
  %126 = getelementptr inbounds %"class.SkSL::(anonymous namespace)::IsAssignableVisitor", %"class.SkSL::(anonymous namespace)::IsAssignableVisitor"* %0, i64 0, i32 0
  %127 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %126, align 8
  %128 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %129 = load i32, i32* %128, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %127, i32 %129, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  br label %130

130:                                              ; preds = %79, %80, %125, %121, %117, %83
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindEEN13RefKindWriterD0Ev(%class.RefKindWriter*) unnamed_addr #4 align 2 {
  %2 = bitcast %class.RefKindWriter* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL13ProgramWriter18visitExpressionPtrERNSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE(%"class.SkSL::ProgramWriter"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramWriter", %"class.SkSL::ProgramWriter"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %4, align 8
  %6 = bitcast %"class.SkSL::ProgramWriter"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)***
  %7 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)** %7, i64 2
  %9 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Expression"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.SkSL::TProgramVisitor.88"* %3, %"class.SkSL::Expression"* dereferenceable(24) %5) #14
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL13ProgramWriter17visitStatementPtrERNSt3__110unique_ptrINS_9StatementENS1_14default_deleteIS3_EEEE(%"class.SkSL::ProgramWriter"*, %"class.std::__1::unique_ptr.16"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ProgramWriter", %"class.SkSL::ProgramWriter"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %4, align 8
  %6 = bitcast %"class.SkSL::ProgramWriter"* %0 to i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)***
  %7 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)**, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)** %7, i64 3
  %9 = load i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::TProgramVisitor.88"*, %"class.SkSL::Statement"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.SkSL::TProgramVisitor.88"* %3, %"class.SkSL::Statement"* dereferenceable(16) %5) #14
  ret i1 %10
}

declare zeroext i1 @_ZNK4SkSL14StringFragmentneES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #12

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL18ES2IndexingVisitorD0Ev(%"class.SkSL::ES2IndexingVisitor"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL18ES2IndexingVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %3, %"class.std::__1::__tree_node"* %6) #14
  %7 = bitcast %"class.SkSL::ES2IndexingVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL18ES2IndexingVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::ConstantExpressionVisitor", align 8
  %4 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 48
  br i1 %6, label %7, label %22

7:                                                ; preds = %2
  %8 = bitcast %"class.SkSL::ConstantExpressionVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.SkSL::ConstantExpressionVisitor", %"class.SkSL::ConstantExpressionVisitor"* %3, i64 0, i32 1
  %11 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4SkSL25ConstantExpressionVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store %"class.std::__1::set"* %11, %"class.std::__1::set"** %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1, i32 0, i32 1
  %13 = bitcast i32* %12 to %"class.SkSL::Expression"**
  %14 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %13, align 8
  %15 = call zeroext i1 @_ZN4SkSL25ConstantExpressionVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::ConstantExpressionVisitor"* nonnull %3, %"class.SkSL::Expression"* dereferenceable(24) %14)
  br i1 %15, label %16, label %21

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 1
  %18 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %18, i32 %20, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.24, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  br label %25

21:                                               ; preds = %7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  br label %22

22:                                               ; preds = %21, %2
  %23 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 0, i32 0
  %24 = call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE15visitExpressionERKNS_10ExpressionE(%"class.SkSL::TProgramVisitor"* %23, %"class.SkSL::Expression"* dereferenceable(24) %1)
  br label %25

25:                                               ; preds = %16, %22
  %26 = phi i1 [ %24, %22 ], [ true, %16 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4SkSL18ES2IndexingVisitor14visitStatementERKNS_9StatementE(%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 22
  br i1 %5, label %6, label %133

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 2
  %8 = bitcast %"class.SkSL::Statement"* %7 to %"class.SkSL::VarDeclaration"**
  %9 = load %"class.SkSL::VarDeclaration"*, %"class.SkSL::VarDeclaration"** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::VarDeclaration", %"class.SkSL::VarDeclaration"* %9, i64 0, i32 1
  %11 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %10, align 8
  %12 = ptrtoint %"class.SkSL::Variable"* %11 to i64
  %13 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %15 = bitcast %"class.std::__1::__tree_end_node"* %14 to %"class.std::__1::__tree_node"**
  %16 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %15, align 8
  %17 = icmp eq %"class.std::__1::__tree_node"* %16, null
  br i1 %17, label %46, label %18

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %20

20:                                               ; preds = %42, %18
  %21 = phi %"class.std::__1::__tree_node"* [ %45, %42 ], [ %16, %18 ]
  %22 = phi %"class.std::__1::__tree_node_base"** [ %44, %42 ], [ %19, %18 ]
  %23 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 1
  %24 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %23, align 8
  %25 = icmp ult %"class.SkSL::Variable"* %11, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %27, align 8
  %29 = icmp eq %"class.std::__1::__tree_node_base"* %28, null
  br i1 %29, label %30, label %42

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 0, i32 0
  br label %48

32:                                               ; preds = %20
  %33 = icmp ult %"class.SkSL::Variable"* %24, %11
  br i1 %33, label %34, label %40

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 0, i32 1
  %36 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %35, align 8
  %37 = icmp eq %"class.std::__1::__tree_node_base"* %36, null
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 0, i32 0
  br label %48

40:                                               ; preds = %32
  %41 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %21, i64 0, i32 0, i32 0
  br label %48

42:                                               ; preds = %34, %26
  %43 = phi %"class.std::__1::__tree_node_base"* [ %28, %26 ], [ %36, %34 ]
  %44 = phi %"class.std::__1::__tree_node_base"** [ %27, %26 ], [ %35, %34 ]
  %45 = bitcast %"class.std::__1::__tree_node_base"* %43 to %"class.std::__1::__tree_node"*
  br label %20

46:                                               ; preds = %6
  %47 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %14, i64 0, i32 0
  br label %48

48:                                               ; preds = %46, %40, %38, %30
  %49 = phi %"class.std::__1::__tree_end_node"* [ %14, %46 ], [ %31, %30 ], [ %39, %38 ], [ %41, %40 ]
  %50 = phi %"class.std::__1::__tree_node_base"** [ %47, %46 ], [ %27, %30 ], [ %35, %38 ], [ %22, %40 ]
  %51 = bitcast %"class.std::__1::__tree_node_base"** %50 to %"class.std::__1::__tree_node"**
  %52 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %51, align 8
  %53 = icmp eq %"class.std::__1::__tree_node"* %52, null
  br i1 %53, label %54, label %79

54:                                               ; preds = %48
  %55 = tail call i8* @_Znwm(i64 40) #15, !noalias !41
  %56 = getelementptr inbounds i8, i8* %55, i64 32
  %57 = bitcast i8* %56 to i64*
  store i64 %12, i64* %57, align 8, !noalias !41
  %58 = bitcast i8* %55 to %"class.std::__1::__tree_node"*
  %59 = bitcast i8* %55 to %"class.std::__1::__tree_node_base"*
  %60 = getelementptr inbounds i8, i8* %55, i64 16
  %61 = bitcast i8* %60 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %49, %"class.std::__1::__tree_end_node"** %61, align 8
  %62 = bitcast %"class.std::__1::__tree_node_base"** %50 to i8**
  store i8* %55, i8** %62, align 8
  %63 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %13, i64 0, i32 0, i32 0
  %64 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %64, i64 0, i32 0
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %65, align 8
  %67 = icmp eq %"class.std::__1::__tree_node_base"* %66, null
  br i1 %67, label %72, label %68

68:                                               ; preds = %54
  %69 = ptrtoint %"class.std::__1::__tree_node_base"* %66 to i64
  %70 = bitcast %"class.std::__1::set"* %13 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %50, align 8
  br label %72

72:                                               ; preds = %68, %54
  %73 = phi %"class.std::__1::__tree_node_base"* [ %59, %54 ], [ %71, %68 ]
  %74 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %75 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %74, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %75, %"class.std::__1::__tree_node_base"* %73) #14
  %76 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %76, align 8
  br label %79

79:                                               ; preds = %48, %72
  %80 = phi %"class.std::__1::__tree_node"* [ %58, %72 ], [ %52, %48 ]
  %81 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %80, i64 0, i32 0, i32 0
  %82 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %1, i64 3, i32 0, i32 1
  %83 = bitcast i32* %82 to %"class.SkSL::Statement"**
  %84 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %83, align 8
  %85 = bitcast %"class.SkSL::ES2IndexingVisitor"* %0 to i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)***
  %86 = load i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)**, i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)*** %85, align 8
  %87 = getelementptr inbounds i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)** %86, i64 3
  %88 = load i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)*, i1 (%"class.SkSL::ES2IndexingVisitor"*, %"class.SkSL::Statement"*)** %87, align 8
  %89 = tail call zeroext i1 %88(%"class.SkSL::ES2IndexingVisitor"* %0, %"class.SkSL::Statement"* dereferenceable(16) %84) #14
  %90 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %81, i64 1, i32 0
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %90, align 8
  %92 = icmp eq %"class.std::__1::__tree_node_base"* %91, null
  br i1 %92, label %93, label %101

93:                                               ; preds = %79
  %94 = bitcast %"class.std::__1::__tree_node"* %80 to %"class.std::__1::__tree_node_base"*
  %95 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %81, i64 2
  %96 = bitcast %"class.std::__1::__tree_end_node"* %95 to %"class.std::__1::__tree_end_node"**
  %97 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %96, align 8
  %98 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %97, i64 0, i32 0
  %99 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %98, align 8
  %100 = icmp eq %"class.std::__1::__tree_node_base"* %99, %94
  br i1 %100, label %117, label %108

101:                                              ; preds = %79, %101
  %102 = phi %"class.std::__1::__tree_node_base"* [ %104, %101 ], [ %91, %79 ]
  %103 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %102, i64 0, i32 0, i32 0
  %104 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %103, align 8
  %105 = icmp eq %"class.std::__1::__tree_node_base"* %104, null
  br i1 %105, label %106, label %101

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %102, i64 0, i32 0
  br label %117

108:                                              ; preds = %93, %108
  %109 = phi %"class.std::__1::__tree_end_node"** [ %112, %108 ], [ %96, %93 ]
  %110 = bitcast %"class.std::__1::__tree_end_node"** %109 to %"class.std::__1::__tree_node_base"**
  %111 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %112 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %111, i64 0, i32 2
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %112, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %111
  br i1 %116, label %117, label %108

117:                                              ; preds = %108, %106, %93
  %118 = phi %"class.std::__1::__tree_end_node"* [ %107, %106 ], [ %97, %93 ], [ %113, %108 ]
  %119 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %13, i64 0, i32 0, i32 0
  %120 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %119, align 8
  %121 = icmp eq %"class.std::__1::__tree_end_node"* %120, %81
  br i1 %121, label %122, label %125

122:                                              ; preds = %117
  %123 = ptrtoint %"class.std::__1::__tree_end_node"* %118 to i64
  %124 = bitcast %"class.std::__1::set"* %13 to i64*
  store i64 %123, i64* %124, align 8
  br label %125

125:                                              ; preds = %117, %122
  %126 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, -1
  store i64 %128, i64* %126, align 8
  %129 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = bitcast %"class.std::__1::__tree_node"* %80 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %130, %"class.std::__1::__tree_node_base"* %131) #14
  %132 = bitcast %"class.std::__1::__tree_node"* %80 to i8*
  tail call void @_ZdlPv(i8* %132) #15
  br label %136

133:                                              ; preds = %2
  %134 = getelementptr inbounds %"class.SkSL::ES2IndexingVisitor", %"class.SkSL::ES2IndexingVisitor"* %0, i64 0, i32 0, i32 0
  %135 = tail call zeroext i1 @_ZN4SkSL15TProgramVisitorINS_19ProgramVisitorTypesEE14visitStatementERKNS_9StatementE(%"class.SkSL::TProgramVisitor"* %134, %"class.SkSL::Statement"* dereferenceable(16) %1)
  br label %136

136:                                              ; preds = %133, %125
  %137 = phi i1 [ %89, %125 ], [ %135, %133 ]
  ret i1 %137
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !32
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !32
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !32
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !32
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !32
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %56, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %56
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %56, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %57, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %99
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !32
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %98, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %138, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %140, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !32
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !32
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %142
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !32
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %142, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !32
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %143
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %143, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %143, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !32
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %98, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %272, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %274, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !32
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !32
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !32
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %276
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !32
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %277
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %277, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %277, %306 ], [ %277, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !32
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %142, %165 ], [ %276, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #14
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL25ConstantExpressionVisitorD0Ev(%"class.SkSL::ConstantExpressionVisitor"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.SkSL::ConstantExpressionVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitorD0Ev(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN4SkSL12_GLOBAL__N_124ReturnsOnAllPathsVisitor15visitExpressionERKNS_10ExpressionE(%"class.SkSL::(anonymous namespace)::ReturnsOnAllPathsVisitor"* nocapture readnone, %"class.SkSL::Expression"* nocapture readnone dereferenceable(24)) unnamed_addr #13 align 2 {
  ret i1 false
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!10 = distinct !{!10, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!13 = distinct !{!13, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!16 = distinct !{!16, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!19 = distinct !{!19, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!22 = distinct !{!22, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!25 = distinct !{!25, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!28 = distinct !{!28, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!31 = distinct !{!31, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!32 = !{i8 0, i8 2}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZNK4SkSL7Program18ElementsCollection5beginEv: argument 0"}
!35 = distinct !{!35, !"_ZNK4SkSL7Program18ElementsCollection5beginEv"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZNK4SkSL7Program18ElementsCollection3endEv: argument 0"}
!38 = distinct !{!38, !"_ZNK4SkSL7Program18ElementsCollection3endEv"}
!39 = distinct !{!39, !40}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!43 = distinct !{!43, !"_ZNSt3__16__treeIPKN4SkSL8VariableENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
