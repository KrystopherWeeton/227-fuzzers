; ModuleID = '../../services/viz/public/cpp/compositing/paint_filter_mojom_traits.cc'
source_filename = "../../services/viz/public/cpp/compositing/paint_filter_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, %union.anon.6 }
%union.anon.6 = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.1, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.1 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"struct.cc::PaintOp::SerializeOptions" = type <{ %"class.cc::ImageProvider"*, %"class.cc::TransferCacheSerializeHelper"*, %"class.cc::ClientPaintCache"*, %class.SkStrikeServer*, %class.sk_sp.11, i8, i8, [2 x i8], i32, i8, [7 x i8] }>
%"class.cc::ImageProvider" = type { i32 (...)** }
%"class.cc::TransferCacheSerializeHelper" = type opaque
%"class.cc::ClientPaintCache" = type opaque
%class.SkStrikeServer = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.SkStrikeServerImpl* }
%class.SkStrikeServerImpl = type opaque
%class.sk_sp.11 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.12" }
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%"class.cc::PaintOpWriter" = type <{ i8*, i64, i64, %"struct.cc::PaintOp::SerializeOptions"*, i8, i8, [6 x i8] }>
%class.SkM44 = type { [16 x float] }
%"class.viz::mojom::internal::PaintFilter_Data" = type { %"struct.mojo::internal::StructHeader", %"struct.mojo::internal::Pointer" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector.17", %"class.std::__1::vector.25", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.mojo::ScopedHandleBase.19"*, %"class.mojo::ScopedHandleBase.19"*, %"class.std::__1::__compressed_pair.20" }
%"class.mojo::ScopedHandleBase.19" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.mojo::ScopedHandleBase.19"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.27" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.32 }
%class.scoped_refptr.32 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.35, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.37", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.33 }
%class.scoped_refptr.33 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.34", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.34" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.35 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.36" }>
%"class.base::RefCountedThreadSafe.36" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__cxx_atomic_impl.40" }
%"struct.std::__1::__cxx_atomic_impl.40" = type { %"struct.std::__1::__cxx_atomic_base_impl.41" }
%"struct.std::__1::__cxx_atomic_base_impl.41" = type { i32 }
%"class.mojo::internal::Array_Data" = type { %"struct.mojo::internal::ArrayHeader" }
%"struct.mojo::internal::ArrayHeader" = type { i32, i32 }
%"class.viz::mojom::PaintFilterDataView" = type { %"class.viz::mojom::internal::PaintFilter_Data"*, %"class.mojo::Message"* }
%"struct.cc::PaintOp::DeserializeOptions" = type { %"class.cc::TransferCacheDeserializeHelper"*, %"class.cc::ServicePaintCache"*, %class.SkStrikeClient*, i8, %"class.std::__1::vector"*, i8, %"class.cc::SharedImageProvider"* }
%"class.cc::TransferCacheDeserializeHelper" = type { i32 (...)**, i64 }
%"class.cc::ServicePaintCache" = type opaque
%class.SkStrikeClient = type { %"class.std::__1::unique_ptr.42" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %class.SkStrikeClientImpl* }
%class.SkStrikeClientImpl = type opaque
%"class.cc::SharedImageProvider" = type { i32 (...)** }
%"class.cc::PaintOpReader" = type <{ i8*, i64, i8, [7 x i8], %"struct.cc::PaintOp::DeserializeOptions"*, i8, [7 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIhEERPNS0_10Array_DataIhEEN4absl8optionalINSt3__16vectorIhNSA_9allocatorIhEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_ = comdat any

@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo12StructTraitsIN3viz5mojom19PaintFilterDataViewE5sk_spIN2cc11PaintFilterEEE4dataERKS7_(%"class.absl::optional.2"* noalias nocapture sret, %class.sk_sp* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = alloca %"struct.cc::PaintOp::SerializeOptions", align 8
  %5 = alloca %"class.cc::PaintOpWriter", align 8
  %6 = alloca %class.SkM44, align 4
  %7 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #8
  %11 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %12 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %11, align 8
  %13 = tail call i64 @_ZN2cc11PaintFilter13GetFilterSizeEPKS0_(%"class.cc::PaintFilter"* %12) #8
  %14 = add i64 %13, 4
  %15 = bitcast i8** %9 to i64*
  %16 = bitcast %"class.std::__1::vector"* %3 to i64*
  %17 = icmp eq i64 %14, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %2
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* nonnull %3, i64 %14) #8
  br label %19

19:                                               ; preds = %2, %18
  %20 = bitcast %"struct.cc::PaintOp::SerializeOptions"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 56, i1 false)
  call void @_ZN2cc7PaintOp16SerializeOptionsC1Ev(%"struct.cc::PaintOp::SerializeOptions"* nonnull %4) #8
  %21 = bitcast %"class.cc::PaintOpWriter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 40, i1 false)
  %22 = load i8*, i8** %8, align 8
  %23 = load i64, i64* %15, align 8
  %24 = ptrtoint i8* %22 to i64
  %25 = sub i64 %23, %24
  call void @_ZN2cc13PaintOpWriterC1EPvmRKNS_7PaintOp16SerializeOptionsEb(%"class.cc::PaintOpWriter"* nonnull %5, i8* %22, i64 %25, %"struct.cc::PaintOp::SerializeOptions"* nonnull dereferenceable(56) %4, i1 zeroext true) #8
  %26 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %11, align 8
  %27 = bitcast %class.SkM44* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %27, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #8
  call void @_ZN2cc13PaintOpWriter5WriteEPKNS_11PaintFilterERK5SkM44(%"class.cc::PaintOpWriter"* nonnull %5, %"class.cc::PaintFilter"* %26, %class.SkM44* nonnull dereferenceable(64) %6) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #8
  %28 = getelementptr inbounds %"class.cc::PaintOpWriter", %"class.cc::PaintOpWriter"* %5, i64 0, i32 4
  %29 = load i8, i8* %28, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %37, label %31

31:                                               ; preds = %19
  %32 = getelementptr inbounds %"class.cc::PaintOpWriter", %"class.cc::PaintOpWriter"* %5, i64 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.cc::PaintOpWriter", %"class.cc::PaintOpWriter"* %5, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %33, %35
  br i1 %36, label %37, label %41

37:                                               ; preds = %19, %31
  %38 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %38, align 8
  %39 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %40 = bitcast %union.anon.6* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #8
  br label %69

41:                                               ; preds = %31
  %42 = sub i64 %33, %35
  %43 = load i64, i64* %15, align 8
  %44 = load i64, i64* %16, align 8
  %45 = sub i64 %43, %44
  %46 = icmp ugt i64 %42, %45
  %47 = inttoptr i64 %44 to i8*
  br i1 %46, label %48, label %52

48:                                               ; preds = %41
  %49 = sub i64 %42, %45
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* nonnull %3, i64 %49) #8
  %50 = load i64, i64* %16, align 8
  %51 = load i64, i64* %15, align 8
  br label %57

52:                                               ; preds = %41
  %53 = icmp ult i64 %42, %45
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = getelementptr inbounds i8, i8* %47, i64 %42
  store i8* %55, i8** %9, align 8
  %56 = ptrtoint i8* %55 to i64
  br label %57

57:                                               ; preds = %48, %52, %54
  %58 = phi i64 [ %51, %48 ], [ %43, %52 ], [ %56, %54 ]
  %59 = phi i64 [ %50, %48 ], [ %44, %52 ], [ %44, %54 ]
  %60 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %60, align 8
  %61 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %62 = bitcast %"class.std::__1::vector"* %61 to i64*
  store i64 %59, i64* %62, align 8
  %63 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %64 = bitcast i8** %63 to i64*
  store i64 %58, i64* %64, align 8
  %65 = bitcast i8** %10 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #8
  br label %69

69:                                               ; preds = %57, %37
  call void @_ZN2cc13PaintOpWriterD1Ev(%"class.cc::PaintOpWriter"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #8
  call void @_ZN2cc7PaintOp16SerializeOptionsD1Ev(%"struct.cc::PaintOp::SerializeOptions"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #8
  %70 = load i8*, i8** %8, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = ptrtoint i8* %70 to i64
  store i64 %73, i64* %15, align 8
  call void @_ZdlPv(i8* nonnull %70) #9
  br label %74

74:                                               ; preds = %69, %72
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN2cc11PaintFilter13GetFilterSizeEPKS0_(%"class.cc::PaintFilter"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2cc7PaintOp16SerializeOptionsC1Ev(%"struct.cc::PaintOp::SerializeOptions"*) unnamed_addr #2

declare void @_ZN2cc13PaintOpWriterC1EPvmRKNS_7PaintOp16SerializeOptionsEb(%"class.cc::PaintOpWriter"*, i8*, i64, %"struct.cc::PaintOp::SerializeOptions"* dereferenceable(56), i1 zeroext) unnamed_addr #2

declare void @_ZN2cc13PaintOpWriter5WriteEPKNS_11PaintFilterERK5SkM44(%"class.cc::PaintOpWriter"*, %"class.cc::PaintFilter"*, %class.SkM44* dereferenceable(64)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN2cc13PaintOpWriterD1Ev(%"class.cc::PaintOpWriter"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2cc7PaintOp16SerializeOptionsD1Ev(%"struct.cc::PaintOp::SerializeOptions"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom19PaintFilterDataViewE5sk_spIN2cc11PaintFilterEEE4ReadES3_PS7_(%"class.viz::mojom::internal::PaintFilter_Data"*, %"class.mojo::Message"*, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo::internal::Array_Data"*, align 8
  %5 = alloca %"class.viz::mojom::PaintFilterDataView", align 8
  %6 = alloca %"class.absl::optional.2", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = alloca %"struct.cc::PaintOp::DeserializeOptions", align 8
  %9 = alloca %"class.cc::PaintOpReader", align 8
  %10 = alloca %class.sk_sp, align 8
  %11 = getelementptr inbounds %"class.viz::mojom::PaintFilterDataView", %"class.viz::mojom::PaintFilterDataView"* %5, i64 0, i32 0
  store %"class.viz::mojom::internal::PaintFilter_Data"* %0, %"class.viz::mojom::internal::PaintFilter_Data"** %11, align 8
  %12 = getelementptr inbounds %"class.viz::mojom::PaintFilterDataView", %"class.viz::mojom::PaintFilterDataView"* %5, i64 0, i32 1
  store %"class.mojo::Message"* %1, %"class.mojo::Message"** %12, align 8
  %13 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  %14 = bitcast %"class.absl::optional.2"* %6 to i64*
  store i64 -6148914691236517206, i64* %14, align 8
  store i8 0, i8* %13, align 8
  %15 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = bitcast %union.anon.6* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #8
  %17 = bitcast %"class.mojo::internal::Array_Data"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.viz::mojom::internal::PaintFilter_Data", %"class.viz::mojom::internal::PaintFilter_Data"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %18, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  %22 = bitcast %"struct.mojo::internal::Pointer"* %18 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 %20
  %24 = bitcast i8* %23 to %"class.mojo::internal::Array_Data"*
  %25 = select i1 %21, %"class.mojo::internal::Array_Data"* null, %"class.mojo::internal::Array_Data"* %24
  store %"class.mojo::internal::Array_Data"* %25, %"class.mojo::internal::Array_Data"** %4, align 8
  %26 = call zeroext i1 @_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIhEERPNS0_10Array_DataIhEEN4absl8optionalINSt3__16vectorIhNSA_9allocatorIhEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_(%"class.mojo::internal::Array_Data"** nonnull dereferenceable(8) %4, %"class.absl::optional.2"* nonnull %6, %"class.mojo::Message"** dereferenceable(8) %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br i1 %26, label %27, label %144

27:                                               ; preds = %3
  %28 = load i8, i8* %13, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %44

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %32 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %31, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %31, align 8
  %33 = icmp eq %"class.cc::PaintFilter"* %32, null
  br i1 %33, label %144, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %32, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %144

38:                                               ; preds = %34
  %39 = bitcast %"class.cc::PaintFilter"* %32 to %class.SkRefCntBase*
  %40 = bitcast %"class.cc::PaintFilter"* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  call void %43(%class.SkRefCntBase* nonnull %39) #8
  br label %144

44:                                               ; preds = %27
  %45 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #8
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 24, i1 false) #8
  %48 = bitcast %"struct.cc::PaintOp::DeserializeOptions"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %48) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 56, i1 false)
  call void @_ZN2cc7PaintOp18DeserializeOptionsC1EPNS_30TransferCacheDeserializeHelperEPNS_17ServicePaintCacheEP14SkStrikeClientPNSt3__16vectorIhNS8_9allocatorIhEEEEbPNS_19SharedImageProviderE(%"struct.cc::PaintOp::DeserializeOptions"* nonnull %8, %"class.cc::TransferCacheDeserializeHelper"* null, %"class.cc::ServicePaintCache"* null, %class.SkStrikeClient* null, %"class.std::__1::vector"* nonnull %7, i1 zeroext false, %"class.cc::SharedImageProvider"* null) #8
  %49 = bitcast %"class.cc::PaintOpReader"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %49) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 40, i1 false)
  %50 = load i8, i8* %13, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %44
  call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %44
  %54 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = ptrtoint i8* %55 to i64
  %60 = sub i64 %58, %59
  %61 = getelementptr inbounds %"class.cc::PaintOpReader", %"class.cc::PaintOpReader"* %9, i64 0, i32 0
  %62 = getelementptr inbounds i8, i8* %55, i64 4
  store i8* %62, i8** %61, align 8
  %63 = getelementptr inbounds %"class.cc::PaintOpReader", %"class.cc::PaintOpReader"* %9, i64 0, i32 1
  %64 = add i64 %60, -4
  store i64 %64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.cc::PaintOpReader", %"class.cc::PaintOpReader"* %9, i64 0, i32 2
  store i8 1, i8* %65, align 8
  %66 = getelementptr inbounds %"class.cc::PaintOpReader", %"class.cc::PaintOpReader"* %9, i64 0, i32 4
  store %"struct.cc::PaintOp::DeserializeOptions"* %8, %"struct.cc::PaintOp::DeserializeOptions"** %66, align 8
  %67 = getelementptr inbounds %"class.cc::PaintOpReader", %"class.cc::PaintOpReader"* %9, i64 0, i32 5
  store i8 1, i8* %67, align 8
  %68 = icmp ult i64 %60, 4
  br i1 %68, label %69, label %70

69:                                               ; preds = %53
  store i8 0, i8* %65, align 8
  br label %70

70:                                               ; preds = %53, %69
  %71 = bitcast %class.sk_sp* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #8
  %72 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %72, align 8
  call void @_ZN2cc13PaintOpReader4ReadEP5sk_spINS_11PaintFilterEE(%"class.cc::PaintOpReader"* nonnull %9, %class.sk_sp* nonnull %10) #8
  %73 = load i8, i8* %65, align 8, !range !2
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %89

75:                                               ; preds = %70
  %76 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %77 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %76, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %76, align 8
  %78 = icmp eq %"class.cc::PaintFilter"* %77, null
  br i1 %78, label %123, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %77, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = atomicrmw add i32* %80, i32 -1 acq_rel
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %123

83:                                               ; preds = %79
  %84 = bitcast %"class.cc::PaintFilter"* %77 to %class.SkRefCntBase*
  %85 = bitcast %"class.cc::PaintFilter"* %77 to void (%class.SkRefCntBase*)***
  %86 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %85, align 8
  %87 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %86, i64 2
  %88 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %87, align 8
  call void %88(%class.SkRefCntBase* nonnull %84) #8
  br label %123

89:                                               ; preds = %70
  %90 = load i64, i64* %63, align 8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %106, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %94 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %93, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %93, align 8
  %95 = icmp eq %"class.cc::PaintFilter"* %94, null
  br i1 %95, label %123, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %94, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = atomicrmw add i32* %97, i32 -1 acq_rel
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %100, label %123

100:                                              ; preds = %96
  %101 = bitcast %"class.cc::PaintFilter"* %94 to %class.SkRefCntBase*
  %102 = bitcast %"class.cc::PaintFilter"* %94 to void (%class.SkRefCntBase*)***
  %103 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %102, align 8
  %104 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %103, i64 2
  %105 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %104, align 8
  call void %105(%class.SkRefCntBase* nonnull %101) #8
  br label %123

106:                                              ; preds = %89
  %107 = bitcast %class.sk_sp* %10 to i64*
  %108 = load i64, i64* %107, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %72, align 8
  %109 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %110 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %109, align 8
  %111 = bitcast %class.sk_sp* %2 to i64*
  store i64 %108, i64* %111, align 8
  %112 = icmp eq %"class.cc::PaintFilter"* %110, null
  br i1 %112, label %123, label %113

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %110, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = atomicrmw add i32* %114, i32 -1 acq_rel
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = bitcast %"class.cc::PaintFilter"* %110 to %class.SkRefCntBase*
  %119 = bitcast %"class.cc::PaintFilter"* %110 to void (%class.SkRefCntBase*)***
  %120 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %119, align 8
  %121 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %120, i64 2
  %122 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %121, align 8
  call void %122(%class.SkRefCntBase* nonnull %118) #8
  br label %123

123:                                              ; preds = %117, %113, %106, %100, %96, %92, %83, %79, %75
  %124 = phi i1 [ false, %75 ], [ false, %79 ], [ false, %83 ], [ false, %92 ], [ false, %96 ], [ false, %100 ], [ true, %106 ], [ true, %113 ], [ true, %117 ]
  %125 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %72, align 8
  %126 = icmp eq %"class.cc::PaintFilter"* %125, null
  br i1 %126, label %137, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %125, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = atomicrmw add i32* %128, i32 -1 acq_rel
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = bitcast %"class.cc::PaintFilter"* %125 to %class.SkRefCntBase*
  %133 = bitcast %"class.cc::PaintFilter"* %125 to void (%class.SkRefCntBase*)***
  %134 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %133, align 8
  %135 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %134, i64 2
  %136 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %135, align 8
  call void %136(%class.SkRefCntBase* nonnull %132) #8
  br label %137

137:                                              ; preds = %123, %127, %131
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %49) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %48) #8
  %138 = load i8*, i8** %46, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %143, label %140

140:                                              ; preds = %137
  %141 = ptrtoint i8* %138 to i64
  %142 = bitcast i8** %47 to i64*
  store i64 %141, i64* %142, align 8
  call void @_ZdlPv(i8* nonnull %138) #9
  br label %143

143:                                              ; preds = %137, %140
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #8
  br label %144

144:                                              ; preds = %38, %34, %30, %3, %143
  %145 = phi i1 [ %124, %143 ], [ false, %3 ], [ true, %30 ], [ true, %34 ], [ true, %38 ]
  %146 = load i8, i8* %13, align 8, !range !2
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %157, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %156, label %152

152:                                              ; preds = %148
  %153 = ptrtoint i8* %150 to i64
  %154 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %155 = bitcast i8** %154 to i64*
  store i64 %153, i64* %155, align 8
  call void @_ZdlPv(i8* nonnull %150) #9
  br label %156

156:                                              ; preds = %152, %148
  store i8 0, i8* %13, align 8
  br label %157

157:                                              ; preds = %144, %156
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  ret i1 %145
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN2cc7PaintOp18DeserializeOptionsC1EPNS_30TransferCacheDeserializeHelperEPNS_17ServicePaintCacheEP14SkStrikeClientPNSt3__16vectorIhNS8_9allocatorIhEEEEbPNS_19SharedImageProviderE(%"struct.cc::PaintOp::DeserializeOptions"*, %"class.cc::TransferCacheDeserializeHelper"*, %"class.cc::ServicePaintCache"*, %class.SkStrikeClient*, %"class.std::__1::vector"*, i1 zeroext, %"class.cc::SharedImageProvider"*) unnamed_addr #2

declare void @_ZN2cc13PaintOpReader4ReadEP5sk_spINS_11PaintFilterEE(%"class.cc::PaintOpReader"*, %class.sk_sp*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #8
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #9
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #8
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #8
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #9
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIhEERPNS0_10Array_DataIhEEN4absl8optionalINSt3__16vectorIhNSA_9allocatorIhEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_(%"class.mojo::internal::Array_Data"** dereferenceable(8), %"class.absl::optional.2"*, %"class.mojo::Message"** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = load %"class.mojo::internal::Array_Data"*, %"class.mojo::internal::Array_Data"** %0, align 8
  %5 = icmp eq %"class.mojo::internal::Array_Data"* %4, null
  %6 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %5, label %9, label %19

9:                                                ; preds = %3
  br i1 %8, label %87, label %10

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_ZdlPv(i8* nonnull %12) #9
  br label %18

18:                                               ; preds = %14, %10
  store i8 0, i8* %6, align 8
  br label %87

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %8, label %21, label %31

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #8
  store i8 1, i8* %6, align 8
  %23 = load %"class.mojo::internal::Array_Data"*, %"class.mojo::internal::Array_Data"** %0, align 8
  %24 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %25 = icmp eq %"class.mojo::internal::Array_Data"* %23, null
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = bitcast %"class.std::__1::vector"* %24 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %30 = bitcast i8** %29 to i64*
  store i64 %28, i64* %30, align 8
  br label %87

31:                                               ; preds = %19, %21
  %32 = phi %"class.std::__1::vector"* [ %24, %21 ], [ %20, %19 ]
  %33 = phi %"class.mojo::internal::Array_Data"* [ %23, %21 ], [ %4, %19 ]
  %34 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %33, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 1
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %38 = bitcast i8** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector"* %32 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = icmp eq i64 %42, %36
  br i1 %43, label %62, label %44

44:                                               ; preds = %31
  %45 = icmp eq i32 %35, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %44
  %47 = tail call i8* @_Znwm(i64 %36) #9
  %48 = getelementptr inbounds i8, i8* %47, i64 %36
  %49 = ptrtoint i8* %47 to i64
  %50 = sub i64 %36, %49
  %51 = getelementptr i8, i8* %47, i64 %50
  %52 = ptrtoint i8* %51 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %47, i8 0, i64 %52, i1 false) #8
  %53 = ptrtoint i8* %48 to i64
  br label %54

54:                                               ; preds = %44, %46
  %55 = phi i64 [ %53, %46 ], [ 0, %44 ]
  %56 = phi i64 [ %49, %46 ], [ 0, %44 ]
  store i64 %56, i64* %40, align 8
  store i64 %55, i64* %38, align 8
  %57 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %58 = bitcast i8** %57 to i64*
  store i64 %55, i64* %58, align 8
  %59 = icmp eq i64 %41, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %54
  %61 = inttoptr i64 %41 to i8*
  tail call void @_ZdlPv(i8* nonnull %61) #9
  br label %62

62:                                               ; preds = %31, %60, %54
  %63 = load i32, i32* %34, align 1
  %64 = zext i32 %63 to i64
  %65 = icmp eq i32 %63, 0
  br i1 %65, label %87, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.absl::optional.2", %"class.absl::optional.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = icmp eq i8* %68, null
  %70 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %33, i64 1
  %71 = bitcast %"class.mojo::internal::Array_Data"* %70 to i8*
  br i1 %69, label %72, label %76

72:                                               ; preds = %66
  %73 = load i8, i8* %71, align 1
  store i8 %73, i8* null, align 536870912
  %74 = load i32, i32* %34, align 1
  %75 = icmp ugt i32 %74, 1
  br i1 %75, label %77, label %87

76:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* align 1 %71, i64 %64, i1 false) #8
  br label %87

77:                                               ; preds = %72, %77
  %78 = phi i64 [ %82, %77 ], [ 1, %72 ]
  %79 = load i8*, i8** %67, align 8
  %80 = getelementptr inbounds i8, i8* %71, i64 %78
  %81 = load i8, i8* %80, align 1
  %82 = add nuw nsw i64 %78, 1
  %83 = getelementptr inbounds i8, i8* %79, i64 %78
  store i8 %81, i8* %83, align 1
  %84 = load i32, i32* %34, align 1
  %85 = zext i32 %84 to i64
  %86 = icmp ult i64 %82, %85
  br i1 %86, label %77, label %87

87:                                               ; preds = %77, %76, %72, %62, %26, %18, %9
  ret i1 true
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
