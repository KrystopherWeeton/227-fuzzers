; ModuleID = '../../third_party/skia/src/core/SkRecordedDrawable.cpp'
source_filename = "../../third_party/skia/src/core/SkRecordedDrawable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.7 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.8 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkTDArray.51 = type { i32*, i32, i32 }
%class.SkTDArray.52 = type { i32*, i32, i32 }
%class.SkTArray = type { %class.SkPaint*, i64 }
%class.SkPaint = type <{ %class.sk_sp.53, %class.sk_sp.54, %class.sk_sp.55, %class.sk_sp.56, %class.sk_sp.57, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.53 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.54 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.55 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.56 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.57 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.58" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot" = type { %"struct.SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair", i32, [4 x i8] }
%"struct.SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair" = type { %"struct.std::__1::pair.base", [4 x i8] }
%"struct.std::__1::pair.base" = type { %class.SkPath, i32 }
%class.SkPath = type <{ %class.sk_sp.86, i32, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", i8, i8 }>
%class.sk_sp.86 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.87, %struct.SkRect, [4 x i8], %class.SkTDArray.88, %class.SkTDArray.89, %class.SkTDArray.90, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.87 = type { %"struct.std::__1::atomic" }
%class.SkTDArray.88 = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.89 = type { i8*, i32, i32 }
%class.SkTDArray.90 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.91 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.46" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.91 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.21", [3 x i8] }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i8 }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc.64 }
%class.SkAutoTMalloc.64 = type { %"class.std::__1::unique_ptr.65" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { i8* }
%class.SkTArray.68 = type { %class.sk_sp.69*, i64 }
%class.sk_sp.69 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.44, i32, i32 }
%class.sk_sp.44 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.45, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.45 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkTArray.70 = type { %class.sk_sp.71*, i64 }
%class.sk_sp.71 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.21", [7 x i8] }>
%class.SkTArray.72 = type { %class.sk_sp.73*, i64 }
%class.sk_sp.73 = type { %class.SkDrawable* }
%class.SkDrawable = type { %class.SkFlattenable.base, i32 }
%class.SkTArray.74 = type { %class.sk_sp.75*, i64 }
%class.sk_sp.75 = type { %class.SkTextBlob* }
%class.SkTextBlob = type { %class.SkNVRefCnt.76, %struct.SkRect, i32, %"struct.std::__1::atomic.77" }
%class.SkNVRefCnt.76 = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.77" = type { %"struct.std::__1::__atomic_base.78" }
%"struct.std::__1::__atomic_base.78" = type { %"struct.std::__1::__atomic_base.79" }
%"struct.std::__1::__atomic_base.79" = type { %"struct.std::__1::__cxx_atomic_impl.80" }
%"struct.std::__1::__cxx_atomic_impl.80" = type { %"struct.std::__1::__cxx_atomic_base_impl.81" }
%"struct.std::__1::__cxx_atomic_base_impl.81" = type { i32 }
%class.SkTArray.82 = type { %class.sk_sp.83*, i64 }
%class.sk_sp.83 = type { %class.SkVertices* }
%class.SkVertices = type <{ %class.SkNVRefCnt.84, i32, %struct.SkPoint*, i16*, %struct.SkPoint*, i32*, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkNVRefCnt.84 = type { %"struct.std::__1::atomic" }
%class.SkPictureData = type <{ %class.SkTArray, %class.SkTArray.85, %class.sk_sp.43, %class.SkPath, %class.SkBitmap, %class.SkTArray.70, %class.SkTArray.72, %class.SkTArray.74, %class.SkTArray.82, %class.SkTArray.68, %class.SkTypefacePlayback, %"class.std::__1::unique_ptr.101", %struct.SkPictInfo, [4 x i8] }>
%class.SkTArray.85 = type { %class.SkPath*, i64 }
%class.sk_sp.43 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkBitmap = type { %class.sk_sp.92, %class.SkPixmap, %class.sk_sp.93 }
%class.sk_sp.92 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.93 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.SkTypefacePlayback = type { i64, %"class.std::__1::unique_ptr.94" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.sk_sp.97* }
%class.sk_sp.97 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %class.SkFactoryPlayback* }
%class.SkFactoryPlayback = type { i32, void (%class.sk_sp.115*, %class.SkReadBuffer*)** }
%class.sk_sp.115 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap.104, i32, [4 x i8], %class.sk_sp.97*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap.104 = type { %class.SkTHashTable.105 }
%class.SkTHashTable.105 = type { i32, i32, %class.SkAutoTArray.106 }
%class.SkAutoTArray.106 = type { %"class.std::__1::unique_ptr.107" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.115*, %class.SkReadBuffer*)* }
%struct.SkDeserialProcs = type { void (%class.sk_sp.113*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.114*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.97*, i8*, i64, i8*)*, i8* }
%class.sk_sp.113 = type { %class.SkPicture* }
%class.sk_sp.114 = type { %class.SkImage* }
%struct.SkPictInfo = type { [8 x i8], i32, %struct.SkRect }
%class.sk_sp.2 = type { %class.SkBBoxHierarchy* }
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %class.SkRecorder* }
%class.SkRecorder = type { %class.SkCanvasVirtualEnforcer.128, i64, %class.SkRecord*, %"class.std::__1::unique_ptr.3", %class.SkMiniRecorder* }
%class.SkCanvasVirtualEnforcer.128 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.9", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.15" }
%class.SkRecord = type { %class.SkRefCnt.base, i32, i32, %class.SkAutoTMalloc, %class.SkArenaAlloc, i64 }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkRecord::Record"* }
%"struct.SkRecord::Record" = type { i32, i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.SkDrawableList* }
%class.SkDrawableList = type { %class.SkTDArray }
%class.SkTDArray = type { %class.SkDrawable**, i32, i32 }
%class.SkMiniRecorder = type { i32, [4 x i8], [88 x i8] }
%class.sk_sp = type { %class.SkRecord* }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %class.SkMiniRecorder* }
%class.SkRecordedDrawable = type { %class.SkDrawable, %class.sk_sp, %class.sk_sp.2, %"class.std::__1::unique_ptr.3", %struct.SkRect }
%"class.SkPicture::AbortCallback" = type { i32 (...)** }
%"class.SkBigPicture::SnapshotArray" = type <{ %class.SkAutoTMalloc.28, i32, [4 x i8] }>
%class.SkAutoTMalloc.28 = type { %"class.std::__1::unique_ptr.29" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %class.SkPicture** }
%class.SkBigPicture = type { %class.SkPicture.base, %struct.SkRect, i64, %class.sk_sp.35, %"class.std::__1::unique_ptr.36", %class.sk_sp.42 }
%class.SkPicture.base = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.21" }>
%class.sk_sp.35 = type { %class.SkRecord* }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.SkBigPicture::SnapshotArray"* }
%class.sk_sp.42 = type { %class.SkBBoxHierarchy* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.43*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.43*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.43*, %class.SkTypeface*, i8*)*, i8* }
%class.SkPictureRecord = type { %class.SkCanvasVirtualEnforcer, %class.SkTDArray.51, %class.SkTDArray.52, %class.SkTArray, %class.SkTHashMap, %class.SkWriter32, %class.SkTArray.68, %class.SkTArray.70, %class.SkTArray.72, %class.SkTArray.74, %class.SkTArray.82, i32, i32 }
%class.SkPicturePlayback = type { %class.SkPictureData*, i64 }
%class.SkPictureRecorder = type { i8, %struct.SkRect, %class.sk_sp.2, %"class.std::__1::unique_ptr.125", %class.sk_sp, %"class.std::__1::unique_ptr.132" }
%class.SkBBHFactory = type { i32 (...)** }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%class.SkMatrix = type { [9 x float], i32 }

$_ZN13SkPictureDataD2Ev = comdat any

$_ZN15SkPictureRecordD2Ev = comdat any

$_ZN18SkRecordedDrawableD2Ev = comdat any

$_ZN18SkRecordedDrawableD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK18SkRecordedDrawable10getFactoryEv = comdat any

$_ZNK18SkRecordedDrawable11getTypeNameEv = comdat any

$_ZNK10SkDrawable18getFlattenableTypeEv = comdat any

$_ZN18SkRecordedDrawable11onGetBoundsEv = comdat any

$_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo = comdat any

$_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix = comdat any

@__const._ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer.pictureRecord = private unnamed_addr constant { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.9", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.15" } }, %class.SkTDArray.51, %class.SkTDArray.52, %class.SkTArray, %class.SkTHashMap, %class.SkWriter32, %class.SkTArray.68, %class.SkTArray.70, %class.SkTArray.72, %class.SkTArray.74, %class.SkTArray.82, i32, i32 } { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.9", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.15" } } { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.9", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.15" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.7 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.8 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.9" { %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.15" { %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem.17" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } } }, %class.SkTDArray.51 { i32* inttoptr (i64 -6148914691236517206 to i32*), i32 -1431655766, i32 -1431655766 }, %class.SkTDArray.52 { i32* inttoptr (i64 -6148914691236517206 to i32*), i32 -1431655766, i32 -1431655766 }, %class.SkTArray { %class.SkPaint* inttoptr (i64 -6148914691236517206 to %class.SkPaint*), i64 -6148914691236517206 }, %class.SkTHashMap { %class.SkTHashTable { i32 -1431655766, i32 -1431655766, %class.SkAutoTArray { %"class.std::__1::unique_ptr.58" { %"class.std::__1::__compressed_pair.59" { %"struct.std::__1::__compressed_pair_elem.60" { %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* inttoptr (i64 -6148914691236517206 to %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"*) } } } } } }, %class.SkWriter32 { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), %class.SkAutoTMalloc.64 { %"class.std::__1::unique_ptr.65" { %"class.std::__1::__compressed_pair.66" { %"struct.std::__1::__compressed_pair_elem.67" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %class.SkTArray.68 { %class.sk_sp.69* inttoptr (i64 -6148914691236517206 to %class.sk_sp.69*), i64 -6148914691236517206 }, %class.SkTArray.70 { %class.sk_sp.71* inttoptr (i64 -6148914691236517206 to %class.sk_sp.71*), i64 -6148914691236517206 }, %class.SkTArray.72 { %class.sk_sp.73* inttoptr (i64 -6148914691236517206 to %class.sk_sp.73*), i64 -6148914691236517206 }, %class.SkTArray.74 { %class.sk_sp.75* inttoptr (i64 -6148914691236517206 to %class.sk_sp.75*), i64 -6148914691236517206 }, %class.SkTArray.82 { %class.sk_sp.83* inttoptr (i64 -6148914691236517206 to %class.sk_sp.83*), i64 -6148914691236517206 }, i32 -1431655766, i32 -1431655766 }, align 8
@__const._ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer.pictureData = private unnamed_addr constant %class.SkPictureData <{ %class.SkTArray { %class.SkPaint* inttoptr (i64 -6148914691236517206 to %class.SkPaint*), i64 -6148914691236517206 }, %class.SkTArray.85 { %class.SkPath* inttoptr (i64 -6148914691236517206 to %class.SkPath*), i64 -6148914691236517206 }, %class.sk_sp.43 { %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*) }, %class.SkPath <{ %class.sk_sp.86 { %class.SkPathRef* inttoptr (i64 -6148914691236517206 to %class.SkPathRef*) }, i32 -1431655766, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, i8 -86, i8 -86 }>, %class.SkBitmap { %class.sk_sp.92 { %class.SkPixelRef* inttoptr (i64 -6148914691236517206 to %class.SkPixelRef*) }, %class.SkPixmap { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, %struct.SkImageInfo { %class.SkColorInfo { %class.sk_sp.44 { %class.SkColorSpace* inttoptr (i64 -6148914691236517206 to %class.SkColorSpace*) }, i32 -1431655766, i32 -1431655766 }, %struct.SkISize { i32 -1431655766, i32 -1431655766 } } }, %class.sk_sp.93 { %class.SkMipmap* inttoptr (i64 -6148914691236517206 to %class.SkMipmap*) } }, %class.SkTArray.70 { %class.sk_sp.71* inttoptr (i64 -6148914691236517206 to %class.sk_sp.71*), i64 -6148914691236517206 }, %class.SkTArray.72 { %class.sk_sp.73* inttoptr (i64 -6148914691236517206 to %class.sk_sp.73*), i64 -6148914691236517206 }, %class.SkTArray.74 { %class.sk_sp.75* inttoptr (i64 -6148914691236517206 to %class.sk_sp.75*), i64 -6148914691236517206 }, %class.SkTArray.82 { %class.sk_sp.83* inttoptr (i64 -6148914691236517206 to %class.sk_sp.83*), i64 -6148914691236517206 }, %class.SkTArray.68 { %class.sk_sp.69* inttoptr (i64 -6148914691236517206 to %class.sk_sp.69*), i64 -6148914691236517206 }, %class.SkTypefacePlayback { i64 -6148914691236517206, %"class.std::__1::unique_ptr.94" { %"class.std::__1::__compressed_pair.95" { %"struct.std::__1::__compressed_pair_elem.96" { %class.sk_sp.97* inttoptr (i64 -6148914691236517206 to %class.sk_sp.97*) } } } }, %"class.std::__1::unique_ptr.101" { %"class.std::__1::__compressed_pair.102" { %"struct.std::__1::__compressed_pair_elem.103" { %class.SkFactoryPlayback* inttoptr (i64 -6148914691236517206 to %class.SkFactoryPlayback*) } } }, %struct.SkPictInfo { [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", i32 -1431655766, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@__const._ZN18SkRecordedDrawable10CreateProcER12SkReadBuffer.recorder = private unnamed_addr constant { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.2, %"class.std::__1::unique_ptr.125", %class.sk_sp, %"class.std::__1::unique_ptr.132" } { i8 -86, [3 x i8] c"\AA\AA\AA", %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [4 x i8] c"\AA\AA\AA\AA", %class.sk_sp.2 { %class.SkBBoxHierarchy* inttoptr (i64 -6148914691236517206 to %class.SkBBoxHierarchy*) }, %"class.std::__1::unique_ptr.125" { %"class.std::__1::__compressed_pair.126" { %"struct.std::__1::__compressed_pair_elem.127" { %class.SkRecorder* inttoptr (i64 -6148914691236517206 to %class.SkRecorder*) } } }, %class.sk_sp { %class.SkRecord* inttoptr (i64 -6148914691236517206 to %class.SkRecord*) }, %"class.std::__1::unique_ptr.132" { %"class.std::__1::__compressed_pair.133" { %"struct.std::__1::__compressed_pair_elem.134" { %class.SkMiniRecorder* inttoptr (i64 -6148914691236517206 to %class.SkMiniRecorder*) } } } }, align 8
@_ZTV18SkRecordedDrawable = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRecordedDrawable*)* @_ZN18SkRecordedDrawableD2Ev to i8*), i8* bitcast (void (%class.SkRecordedDrawable*)* @_ZN18SkRecordedDrawableD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.115*, %class.SkReadBuffer*)* (%class.SkRecordedDrawable*)* @_ZNK18SkRecordedDrawable10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkRecordedDrawable*)* @_ZNK18SkRecordedDrawable11getTypeNameEv to i8*), i8* bitcast (void (%class.SkRecordedDrawable*, %class.SkWriteBuffer*)* @_ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkDrawable*)* @_ZNK10SkDrawable18getFlattenableTypeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.SkRecordedDrawable*)* @_ZN18SkRecordedDrawable11onGetBoundsEv to i8*), i8* bitcast (void (%class.SkRecordedDrawable*, %class.SkCanvas*)* @_ZN18SkRecordedDrawable6onDrawEP8SkCanvas to i8*), i8* bitcast (%"class.SkDrawable::GpuDrawHandler"* (%class.SkDrawable*, i32, %class.SkMatrix*, %struct.SkIRect*, %struct.SkImageInfo*)* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo to i8*), i8* bitcast (%"class.SkDrawable::GpuDrawHandler"* (%class.SkDrawable*, i32, %class.SkMatrix*)* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix to i8*), i8* bitcast (%class.SkPicture* (%class.SkRecordedDrawable*)* @_ZN18SkRecordedDrawable20onNewPictureSnapshotEv to i8*)] }, align 8
@_ZTV15SkPictureRecord = external unnamed_addr constant { [56 x i8*] }, align 8
@.str = private unnamed_addr constant [19 x i8] c"SkRecordedDrawable\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkRecordedDrawable6onDrawEP8SkCanvas(%class.SkRecordedDrawable* nocapture readonly, %class.SkCanvas*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %class.SkDrawableList*, %class.SkDrawableList** %3, align 8
  %5 = icmp eq %class.SkDrawableList* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkDrawableList, %class.SkDrawableList* %4, i64 0, i32 0, i32 0
  %8 = load %class.SkDrawable**, %class.SkDrawable*** %7, align 8
  %9 = getelementptr inbounds %class.SkDrawableList, %class.SkDrawableList* %4, i64 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi %class.SkDrawable** [ %8, %6 ], [ null, %2 ]
  %13 = phi i32 [ %10, %6 ], [ 0, %2 ]
  %14 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 1, i32 0
  %15 = load %class.SkRecord*, %class.SkRecord** %14, align 8
  %16 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 2, i32 0
  %17 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %16, align 8
  tail call void @_Z12SkRecordDrawRK8SkRecordP8SkCanvasPKPK9SkPicturePKP10SkDrawableiPK15SkBBoxHierarchyPNS4_13AbortCallbackE(%class.SkRecord* dereferenceable(72) %15, %class.SkCanvas* %1, %class.SkPicture** null, %class.SkDrawable** %12, i32 %13, %class.SkBBoxHierarchy* %17, %"class.SkPicture::AbortCallback"* null) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_Z12SkRecordDrawRK8SkRecordP8SkCanvasPKPK9SkPicturePKP10SkDrawableiPK15SkBBoxHierarchyPNS4_13AbortCallbackE(%class.SkRecord* dereferenceable(72), %class.SkCanvas*, %class.SkPicture**, %class.SkDrawable**, i32, %class.SkBBoxHierarchy*, %"class.SkPicture::AbortCallback"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.SkPicture* @_ZN18SkRecordedDrawable20onNewPictureSnapshotEv(%class.SkRecordedDrawable*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp, align 8
  %3 = alloca %class.sk_sp.2, align 8
  %4 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %class.SkDrawableList*, %class.SkDrawableList** %4, align 8
  %6 = icmp eq %class.SkDrawableList* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = tail call %"class.SkBigPicture::SnapshotArray"* @_ZN14SkDrawableList19newDrawableSnapshotEv(%class.SkDrawableList* nonnull %5) #7
  %9 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %8, i64 0, i32 1
  %10 = icmp eq %"class.SkBigPicture::SnapshotArray"* %8, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.SkBigPicture::SnapshotArray", %"class.SkBigPicture::SnapshotArray"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %64, label %15

15:                                               ; preds = %64, %11, %1, %7
  %16 = phi %"class.SkBigPicture::SnapshotArray"* [ null, %7 ], [ null, %1 ], [ %8, %11 ], [ %8, %64 ]
  %17 = phi i64 [ 0, %7 ], [ 0, %1 ], [ 0, %11 ], [ %75, %64 ]
  %18 = tail call i8* @_Znwm(i64 72) #8
  %19 = bitcast i8* %18 to %class.SkBigPicture*
  %20 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4
  %21 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %22 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 1, i32 0
  %23 = load %class.SkRecord*, %class.SkRecord** %22, align 8
  %24 = icmp eq %class.SkRecord* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %23, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 1 monotonic
  br label %28

28:                                               ; preds = %15, %25
  store %class.SkRecord* %23, %class.SkRecord** %21, align 8
  %29 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %3, i64 0, i32 0
  %30 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 2, i32 0
  %31 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %30, align 8
  %32 = icmp eq %class.SkBBoxHierarchy* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %31, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %28, %33
  store %class.SkBBoxHierarchy* %31, %class.SkBBoxHierarchy** %29, align 8
  call void @_ZN12SkBigPictureC1ERK6SkRect5sk_spI8SkRecordENSt3__110unique_ptrINS_13SnapshotArrayENS6_14default_deleteIS8_EEEES3_I15SkBBoxHierarchyEm(%class.SkBigPicture* nonnull %19, %struct.SkRect* dereferenceable(16) %20, %class.sk_sp* nonnull %2, %"class.SkBigPicture::SnapshotArray"* %16, %class.sk_sp.2* nonnull %3, i64 %17) #7
  %37 = bitcast i8* %18 to %class.SkPicture*
  %38 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %29, align 8
  %39 = icmp eq %class.SkBBoxHierarchy* %38, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %38, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 -1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %50

44:                                               ; preds = %40
  %45 = bitcast %class.SkBBoxHierarchy* %38 to %class.SkRefCntBase*
  %46 = bitcast %class.SkBBoxHierarchy* %38 to void (%class.SkRefCntBase*)***
  %47 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %46, align 8
  %48 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %47, i64 2
  %49 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, align 8
  call void %49(%class.SkRefCntBase* nonnull %45) #7
  br label %50

50:                                               ; preds = %36, %40, %44
  %51 = load %class.SkRecord*, %class.SkRecord** %21, align 8
  %52 = icmp eq %class.SkRecord* %51, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %51, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = atomicrmw add i32* %54, i32 -1 acq_rel
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = bitcast %class.SkRecord* %51 to %class.SkRefCntBase*
  %59 = bitcast %class.SkRecord* %51 to void (%class.SkRefCntBase*)***
  %60 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %59, align 8
  %61 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %60, i64 2
  %62 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %61, align 8
  call void %62(%class.SkRefCntBase* nonnull %58) #7
  br label %63

63:                                               ; preds = %57, %53, %50
  ret %class.SkPicture* %37

64:                                               ; preds = %11, %64
  %65 = phi i64 [ %75, %64 ], [ 0, %11 ]
  %66 = phi i64 [ %76, %64 ], [ 0, %11 ]
  %67 = load %class.SkPicture**, %class.SkPicture*** %12, align 8
  %68 = getelementptr inbounds %class.SkPicture*, %class.SkPicture** %67, i64 %66
  %69 = load %class.SkPicture*, %class.SkPicture** %68, align 8
  %70 = bitcast %class.SkPicture* %69 to i64 (%class.SkPicture*)***
  %71 = load i64 (%class.SkPicture*)**, i64 (%class.SkPicture*)*** %70, align 8
  %72 = getelementptr inbounds i64 (%class.SkPicture*)*, i64 (%class.SkPicture*)** %71, i64 6
  %73 = load i64 (%class.SkPicture*)*, i64 (%class.SkPicture*)** %72, align 8
  %74 = tail call i64 %73(%class.SkPicture* %69) #7
  %75 = add i64 %74, %65
  %76 = add nuw nsw i64 %66, 1
  %77 = load i32, i32* %9, align 8
  %78 = sext i32 %77 to i64
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %64, label %15
}

declare %"class.SkBigPicture::SnapshotArray"* @_ZN14SkDrawableList19newDrawableSnapshotEv(%class.SkDrawableList*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN12SkBigPictureC1ERK6SkRect5sk_spI8SkRecordENSt3__110unique_ptrINS_13SnapshotArrayENS6_14default_deleteIS8_EEEES3_I15SkBBoxHierarchyEm(%class.SkBigPicture*, %struct.SkRect* dereferenceable(16), %class.sk_sp*, %"class.SkBigPicture::SnapshotArray"*, %class.sk_sp.2*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer(%class.SkRecordedDrawable*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkPictInfo, align 8
  %4 = alloca %class.SkPictureRecord, align 8
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to %struct.SkISize*
  %7 = alloca %class.SkPictureData, align 8
  %8 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4
  %9 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %struct.SkRect*)***
  %10 = load void (%class.SkWriteBuffer*, %struct.SkRect*)**, void (%class.SkWriteBuffer*, %struct.SkRect*)*** %9, align 8
  %11 = getelementptr inbounds void (%class.SkWriteBuffer*, %struct.SkRect*)*, void (%class.SkWriteBuffer*, %struct.SkRect*)** %10, i64 22
  %12 = load void (%class.SkWriteBuffer*, %struct.SkRect*)*, void (%class.SkWriteBuffer*, %struct.SkRect*)** %11, align 8
  tail call void %12(%class.SkWriteBuffer* %1, %struct.SkRect* dereferenceable(16) %8) #7
  %13 = getelementptr inbounds %struct.SkPictInfo, %struct.SkPictInfo* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %13) #7
  %14 = getelementptr inbounds %struct.SkPictInfo, %struct.SkPictInfo* %3, i64 0, i32 1
  %15 = bitcast %struct.SkPictInfo* %3 to i64*
  store i64 -6148914691236517206, i64* %15, align 8
  %16 = bitcast %class.SkPictureRecord* %4 to i8*
  %17 = bitcast i32* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 -1, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 3424, i8* nonnull %16) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 bitcast ({ { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.9", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.15" } }, %class.SkTDArray.51, %class.SkTDArray.52, %class.SkTArray, %class.SkTHashMap, %class.SkWriter32, %class.SkTArray.68, %class.SkTArray.70, %class.SkTArray.72, %class.SkTArray.74, %class.SkTArray.82, i32, i32 }* @__const._ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer.pictureRecord to i8*), i64 3424, i1 false)
  %18 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4, i32 2
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = fsub float %20, %22
  %24 = fptosi float %23 to i32
  %25 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4, i32 3
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4, i32 1
  %28 = load float, float* %27, align 4
  %29 = fsub float %26, %28
  %30 = fptosi float %29 to i32
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  %33 = zext i32 %24 to i64
  %34 = or i64 %32, %33
  store i64 %34, i64* %5, align 8
  call void @_ZN15SkPictureRecordC1ERK7SkISizej(%class.SkPictureRecord* nonnull %4, %struct.SkISize* nonnull dereferenceable(8) %6, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  %35 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %4, i64 0, i32 0, i32 0
  %36 = call { <2 x float>, <2 x float> } @_ZNK8SkCanvas18getLocalClipBoundsEv(%class.SkCanvas* nonnull %35) #7
  %37 = extractvalue { <2 x float>, <2 x float> } %36, 0
  %38 = extractvalue { <2 x float>, <2 x float> } %36, 1
  %39 = load float, float* %21, align 4
  %40 = load float, float* %19, align 4
  %41 = fcmp olt float %39, %40
  br i1 %41, label %42, label %62

42:                                               ; preds = %2
  %43 = load float, float* %27, align 4
  %44 = load float, float* %25, align 4
  %45 = fcmp uge float %43, %44
  br i1 %45, label %62, label %46

46:                                               ; preds = %42
  %47 = extractelement <2 x float> %37, i32 0
  %48 = extractelement <2 x float> %38, i32 0
  %49 = fcmp olt float %47, %48
  br i1 %49, label %50, label %62

50:                                               ; preds = %46
  %51 = extractelement <2 x float> %37, i32 1
  %52 = extractelement <2 x float> %38, i32 1
  %53 = fcmp uge float %51, %52
  %54 = fcmp ugt float %47, %39
  %55 = or i1 %54, %53
  br i1 %55, label %62, label %56

56:                                               ; preds = %50
  %57 = fcmp ole float %51, %43
  %58 = fcmp oge float %48, %40
  %59 = fcmp oge float %52, %44
  %60 = and i1 %58, %57
  %61 = and i1 %59, %60
  br i1 %61, label %65, label %62

62:                                               ; preds = %2, %42, %46, %50, %56
  %63 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 2, i32 0
  %64 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %63, align 8
  br label %65

65:                                               ; preds = %56, %62
  %66 = phi %class.SkBBoxHierarchy* [ %64, %62 ], [ null, %56 ]
  call void @_ZN15SkPictureRecord14beginRecordingEv(%class.SkPictureRecord* nonnull %4) #7
  %67 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 1, i32 0
  %68 = load %class.SkRecord*, %class.SkRecord** %67, align 8
  %69 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %70 = load %class.SkDrawableList*, %class.SkDrawableList** %69, align 8
  %71 = getelementptr inbounds %class.SkDrawableList, %class.SkDrawableList* %70, i64 0, i32 0, i32 0
  %72 = load %class.SkDrawable**, %class.SkDrawable*** %71, align 8
  %73 = getelementptr inbounds %class.SkDrawableList, %class.SkDrawableList* %70, i64 0, i32 0, i32 2
  %74 = load i32, i32* %73, align 4
  call void @_Z12SkRecordDrawRK8SkRecordP8SkCanvasPKPK9SkPicturePKP10SkDrawableiPK15SkBBoxHierarchyPNS4_13AbortCallbackE(%class.SkRecord* dereferenceable(72) %68, %class.SkCanvas* nonnull %35, %class.SkPicture** null, %class.SkDrawable** %72, i32 %74, %class.SkBBoxHierarchy* %66, %"class.SkPicture::AbortCallback"* null) #7
  call void @_ZN15SkPictureRecord12endRecordingEv(%class.SkPictureRecord* nonnull %4) #7
  %75 = bitcast %class.SkPictureData* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %75) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast (%class.SkPictureData* @__const._ZNK18SkRecordedDrawable7flattenER13SkWriteBuffer.pictureData to i8*), i64 248, i1 false)
  call void @_ZN13SkPictureDataC1ERK15SkPictureRecordRK10SkPictInfo(%class.SkPictureData* nonnull %7, %class.SkPictureRecord* nonnull dereferenceable(3424) %4, %struct.SkPictInfo* nonnull dereferenceable(28) %3) #7
  call void @_ZNK13SkPictureData7flattenER13SkWriteBuffer(%class.SkPictureData* nonnull %7, %class.SkWriteBuffer* dereferenceable(56) %1) #7
  call void @_ZN13SkPictureDataD2Ev(%class.SkPictureData* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %75) #7
  call void @_ZN15SkPictureRecordD2Ev(%class.SkPictureRecord* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 3424, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %13) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN15SkPictureRecordC1ERK7SkISizej(%class.SkPictureRecord*, %struct.SkISize* dereferenceable(8), i32) unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK8SkCanvas18getLocalClipBoundsEv(%class.SkCanvas*) local_unnamed_addr #2

declare void @_ZN15SkPictureRecord14beginRecordingEv(%class.SkPictureRecord*) local_unnamed_addr #2

declare void @_ZN15SkPictureRecord12endRecordingEv(%class.SkPictureRecord*) local_unnamed_addr #2

declare void @_ZN13SkPictureDataC1ERK15SkPictureRecordRK10SkPictInfo(%class.SkPictureData*, %class.SkPictureRecord* dereferenceable(3424), %struct.SkPictInfo* dereferenceable(28)) unnamed_addr #2

declare void @_ZNK13SkPictureData7flattenER13SkWriteBuffer(%class.SkPictureData*, %class.SkWriteBuffer* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkPictureDataD2Ev(%class.SkPictureData*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %3 = load %class.SkFactoryPlayback*, %class.SkFactoryPlayback** %2, align 8
  store %class.SkFactoryPlayback* null, %class.SkFactoryPlayback** %2, align 8
  %4 = icmp eq %class.SkFactoryPlayback* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkFactoryPlayback, %class.SkFactoryPlayback* %3, i64 0, i32 1
  %7 = load void (%class.sk_sp.115*, %class.SkReadBuffer*)**, void (%class.sk_sp.115*, %class.SkReadBuffer*)*** %6, align 8
  %8 = icmp eq void (%class.sk_sp.115*, %class.SkReadBuffer*)** %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = bitcast void (%class.sk_sp.115*, %class.SkReadBuffer*)** %7 to i8*
  tail call void @_ZdaPv(i8* %10) #8
  br label %11

11:                                               ; preds = %9, %5
  %12 = bitcast %class.SkFactoryPlayback* %3 to i8*
  tail call void @_ZdlPv(i8* %12) #8
  br label %13

13:                                               ; preds = %1, %11
  %14 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 10, i32 1, i32 0, i32 0, i32 0
  %15 = load %class.sk_sp.97*, %class.sk_sp.97** %14, align 8
  store %class.sk_sp.97* null, %class.sk_sp.97** %14, align 8
  %16 = icmp eq %class.sk_sp.97* %15, null
  br i1 %16, label %44, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.sk_sp.97, %class.sk_sp.97* %15, i64 -1
  %19 = bitcast %class.sk_sp.97* %18 to i8*
  %20 = bitcast %class.sk_sp.97* %18 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %43, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.sk_sp.97, %class.sk_sp.97* %15, i64 %21
  br label %25

25:                                               ; preds = %41, %23
  %26 = phi %class.sk_sp.97* [ %27, %41 ], [ %24, %23 ]
  %27 = getelementptr inbounds %class.sk_sp.97, %class.sk_sp.97* %26, i64 -1
  %28 = getelementptr inbounds %class.sk_sp.97, %class.sk_sp.97* %27, i64 0, i32 0
  %29 = load %class.SkTypeface*, %class.SkTypeface** %28, align 8
  %30 = icmp eq %class.SkTypeface* %29, null
  br i1 %30, label %41, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %29, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 -1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %41

35:                                               ; preds = %31
  %36 = bitcast %class.SkTypeface* %29 to %class.SkRefCntBase*
  %37 = bitcast %class.SkTypeface* %29 to void (%class.SkRefCntBase*)***
  %38 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %37, align 8
  %39 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, i64 2
  %40 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %39, align 8
  tail call void %40(%class.SkRefCntBase* nonnull %36) #7
  br label %41

41:                                               ; preds = %35, %31, %25
  %42 = icmp eq %class.sk_sp.97* %27, %15
  br i1 %42, label %43, label %25

43:                                               ; preds = %41, %17
  tail call void @_ZdaPv(i8* %19) #8
  br label %44

44:                                               ; preds = %13, %43
  %45 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 9
  %46 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 9, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 4294967294
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.SkTArray.68, %class.SkTArray.68* %45, i64 0, i32 0
  br label %56

52:                                               ; preds = %72, %44
  %53 = phi i64 [ %47, %44 ], [ %74, %72 ]
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %81, label %78

56:                                               ; preds = %72, %50
  %57 = phi i64 [ 0, %50 ], [ %73, %72 ]
  %58 = load %class.sk_sp.69*, %class.sk_sp.69** %51, align 8
  %59 = getelementptr inbounds %class.sk_sp.69, %class.sk_sp.69* %58, i64 %57, i32 0
  %60 = load %class.SkImage*, %class.SkImage** %59, align 8
  %61 = icmp eq %class.SkImage* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %class.SkImage, %class.SkImage* %60, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 -1 acq_rel
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = bitcast %class.SkImage* %60 to %class.SkRefCntBase*
  %68 = bitcast %class.SkImage* %60 to void (%class.SkRefCntBase*)***
  %69 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %68, align 8
  %70 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %69, i64 2
  %71 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %70, align 8
  tail call void %71(%class.SkRefCntBase* nonnull %67) #7
  br label %72

72:                                               ; preds = %66, %62, %56
  %73 = add nuw nsw i64 %57, 1
  %74 = load i64, i64* %46, align 8
  %75 = lshr i64 %74, 1
  %76 = and i64 %75, 2147483647
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %56, label %52

78:                                               ; preds = %52
  %79 = bitcast %class.SkTArray.68* %45 to i8**
  %80 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %80) #7
  br label %81

81:                                               ; preds = %52, %78
  %82 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 8
  %83 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 8, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = and i64 %84, 4294967294
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %class.SkTArray.82, %class.SkTArray.82* %82, i64 0, i32 0
  br label %93

89:                                               ; preds = %105, %81
  %90 = phi i64 [ %84, %81 ], [ %107, %105 ]
  %91 = and i64 %90, 1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %114, label %111

93:                                               ; preds = %105, %87
  %94 = phi i64 [ 0, %87 ], [ %106, %105 ]
  %95 = load %class.sk_sp.83*, %class.sk_sp.83** %88, align 8
  %96 = getelementptr inbounds %class.sk_sp.83, %class.sk_sp.83* %95, i64 %94, i32 0
  %97 = load %class.SkVertices*, %class.SkVertices** %96, align 8
  %98 = icmp eq %class.SkVertices* %97, null
  br i1 %98, label %105, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = atomicrmw add i32* %100, i32 -1 acq_rel
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = bitcast %class.SkVertices* %97 to i8*
  tail call void @_ZN10SkVerticesdlEPv(i8* nonnull %104) #7
  br label %105

105:                                              ; preds = %103, %99, %93
  %106 = add nuw nsw i64 %94, 1
  %107 = load i64, i64* %83, align 8
  %108 = lshr i64 %107, 1
  %109 = and i64 %108, 2147483647
  %110 = icmp ult i64 %106, %109
  br i1 %110, label %93, label %89

111:                                              ; preds = %89
  %112 = bitcast %class.SkTArray.82* %82 to i8**
  %113 = load i8*, i8** %112, align 8
  tail call void @_Z7sk_freePv(i8* %113) #7
  br label %114

114:                                              ; preds = %89, %111
  %115 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 7
  %116 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 7, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = and i64 %117, 4294967294
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %114
  %121 = getelementptr inbounds %class.SkTArray.74, %class.SkTArray.74* %115, i64 0, i32 0
  br label %126

122:                                              ; preds = %138, %114
  %123 = phi i64 [ %117, %114 ], [ %140, %138 ]
  %124 = and i64 %123, 1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %147, label %144

126:                                              ; preds = %138, %120
  %127 = phi i64 [ 0, %120 ], [ %139, %138 ]
  %128 = load %class.sk_sp.75*, %class.sk_sp.75** %121, align 8
  %129 = getelementptr inbounds %class.sk_sp.75, %class.sk_sp.75* %128, i64 %127, i32 0
  %130 = load %class.SkTextBlob*, %class.SkTextBlob** %129, align 8
  %131 = icmp eq %class.SkTextBlob* %130, null
  br i1 %131, label %138, label %132

132:                                              ; preds = %126
  %133 = getelementptr inbounds %class.SkTextBlob, %class.SkTextBlob* %130, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = atomicrmw add i32* %133, i32 -1 acq_rel
  %135 = icmp eq i32 %134, 1
  br i1 %135, label %136, label %138

136:                                              ; preds = %132
  tail call void @_ZN10SkTextBlobD1Ev(%class.SkTextBlob* nonnull %130) #7
  %137 = bitcast %class.SkTextBlob* %130 to i8*
  tail call void @_ZN10SkTextBlobdlEPv(i8* nonnull %137) #7
  br label %138

138:                                              ; preds = %136, %132, %126
  %139 = add nuw nsw i64 %127, 1
  %140 = load i64, i64* %116, align 8
  %141 = lshr i64 %140, 1
  %142 = and i64 %141, 2147483647
  %143 = icmp ult i64 %139, %142
  br i1 %143, label %126, label %122

144:                                              ; preds = %122
  %145 = bitcast %class.SkTArray.74* %115 to i8**
  %146 = load i8*, i8** %145, align 8
  tail call void @_Z7sk_freePv(i8* %146) #7
  br label %147

147:                                              ; preds = %122, %144
  %148 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 6
  %149 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 6, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = and i64 %150, 4294967294
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %147
  %154 = getelementptr inbounds %class.SkTArray.72, %class.SkTArray.72* %148, i64 0, i32 0
  br label %159

155:                                              ; preds = %175, %147
  %156 = phi i64 [ %150, %147 ], [ %177, %175 ]
  %157 = and i64 %156, 1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %184, label %181

159:                                              ; preds = %175, %153
  %160 = phi i64 [ 0, %153 ], [ %176, %175 ]
  %161 = load %class.sk_sp.73*, %class.sk_sp.73** %154, align 8
  %162 = getelementptr inbounds %class.sk_sp.73, %class.sk_sp.73* %161, i64 %160, i32 0
  %163 = load %class.SkDrawable*, %class.SkDrawable** %162, align 8
  %164 = icmp eq %class.SkDrawable* %163, null
  br i1 %164, label %175, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %163, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = atomicrmw add i32* %166, i32 -1 acq_rel
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %175

169:                                              ; preds = %165
  %170 = bitcast %class.SkDrawable* %163 to %class.SkRefCntBase*
  %171 = bitcast %class.SkDrawable* %163 to void (%class.SkRefCntBase*)***
  %172 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %171, align 8
  %173 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %172, i64 2
  %174 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %173, align 8
  tail call void %174(%class.SkRefCntBase* nonnull %170) #7
  br label %175

175:                                              ; preds = %169, %165, %159
  %176 = add nuw nsw i64 %160, 1
  %177 = load i64, i64* %149, align 8
  %178 = lshr i64 %177, 1
  %179 = and i64 %178, 2147483647
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %159, label %155

181:                                              ; preds = %155
  %182 = bitcast %class.SkTArray.72* %148 to i8**
  %183 = load i8*, i8** %182, align 8
  tail call void @_Z7sk_freePv(i8* %183) #7
  br label %184

184:                                              ; preds = %155, %181
  %185 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 5
  %186 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 5, i32 1
  %187 = load i64, i64* %186, align 8
  %188 = and i64 %187, 4294967294
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %192, label %190

190:                                              ; preds = %184
  %191 = getelementptr inbounds %class.SkTArray.70, %class.SkTArray.70* %185, i64 0, i32 0
  br label %196

192:                                              ; preds = %212, %184
  %193 = phi i64 [ %187, %184 ], [ %214, %212 ]
  %194 = and i64 %193, 1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %221, label %218

196:                                              ; preds = %212, %190
  %197 = phi i64 [ 0, %190 ], [ %213, %212 ]
  %198 = load %class.sk_sp.71*, %class.sk_sp.71** %191, align 8
  %199 = getelementptr inbounds %class.sk_sp.71, %class.sk_sp.71* %198, i64 %197, i32 0
  %200 = load %class.SkPicture*, %class.SkPicture** %199, align 8
  %201 = icmp eq %class.SkPicture* %200, null
  br i1 %201, label %212, label %202

202:                                              ; preds = %196
  %203 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %200, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = atomicrmw add i32* %203, i32 -1 acq_rel
  %205 = icmp eq i32 %204, 1
  br i1 %205, label %206, label %212

206:                                              ; preds = %202
  %207 = bitcast %class.SkPicture* %200 to %class.SkRefCntBase*
  %208 = bitcast %class.SkPicture* %200 to void (%class.SkRefCntBase*)***
  %209 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %208, align 8
  %210 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %209, i64 2
  %211 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %210, align 8
  tail call void %211(%class.SkRefCntBase* nonnull %207) #7
  br label %212

212:                                              ; preds = %206, %202, %196
  %213 = add nuw nsw i64 %197, 1
  %214 = load i64, i64* %186, align 8
  %215 = lshr i64 %214, 1
  %216 = and i64 %215, 2147483647
  %217 = icmp ult i64 %213, %216
  br i1 %217, label %196, label %192

218:                                              ; preds = %192
  %219 = bitcast %class.SkTArray.70* %185 to i8**
  %220 = load i8*, i8** %219, align 8
  tail call void @_Z7sk_freePv(i8* %220) #7
  br label %221

221:                                              ; preds = %192, %218
  %222 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 4
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %222) #7
  %223 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 3
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %223) #7
  %224 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 2, i32 0
  %225 = load %class.SkData*, %class.SkData** %224, align 8
  %226 = icmp eq %class.SkData* %225, null
  br i1 %226, label %233, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %class.SkData, %class.SkData* %225, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %229 = atomicrmw add i32* %228, i32 -1 acq_rel
  %230 = icmp eq i32 %229, 1
  br i1 %230, label %231, label %233

231:                                              ; preds = %227
  tail call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %225) #7
  %232 = bitcast %class.SkData* %225 to i8*
  tail call void @_ZN6SkDatadlEPv(i8* nonnull %232) #7
  br label %233

233:                                              ; preds = %221, %227, %231
  %234 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 1
  %235 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 1, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = and i64 %236, 4294967294
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %241, label %239

239:                                              ; preds = %233
  %240 = getelementptr inbounds %class.SkTArray.85, %class.SkTArray.85* %234, i64 0, i32 0
  br label %245

241:                                              ; preds = %245, %233
  %242 = phi i64 [ %236, %233 ], [ %250, %245 ]
  %243 = and i64 %242, 1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %257, label %254

245:                                              ; preds = %245, %239
  %246 = phi i64 [ 0, %239 ], [ %249, %245 ]
  %247 = load %class.SkPath*, %class.SkPath** %240, align 8
  %248 = getelementptr inbounds %class.SkPath, %class.SkPath* %247, i64 %246
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %248) #7
  %249 = add nuw nsw i64 %246, 1
  %250 = load i64, i64* %235, align 8
  %251 = lshr i64 %250, 1
  %252 = and i64 %251, 2147483647
  %253 = icmp ult i64 %249, %252
  br i1 %253, label %245, label %241

254:                                              ; preds = %241
  %255 = bitcast %class.SkTArray.85* %234 to i8**
  %256 = load i8*, i8** %255, align 8
  tail call void @_Z7sk_freePv(i8* %256) #7
  br label %257

257:                                              ; preds = %241, %254
  %258 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 0, i32 1
  %259 = load i64, i64* %258, align 8
  %260 = and i64 %259, 4294967294
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %264, label %262

262:                                              ; preds = %257
  %263 = getelementptr inbounds %class.SkPictureData, %class.SkPictureData* %0, i64 0, i32 0, i32 0
  br label %268

264:                                              ; preds = %268, %257
  %265 = phi i64 [ %259, %257 ], [ %273, %268 ]
  %266 = and i64 %265, 1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %280, label %277

268:                                              ; preds = %268, %262
  %269 = phi i64 [ 0, %262 ], [ %272, %268 ]
  %270 = load %class.SkPaint*, %class.SkPaint** %263, align 8
  %271 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %270, i64 %269
  tail call void @_ZN7SkPaintD1Ev(%class.SkPaint* %271) #7
  %272 = add nuw nsw i64 %269, 1
  %273 = load i64, i64* %258, align 8
  %274 = lshr i64 %273, 1
  %275 = and i64 %274, 2147483647
  %276 = icmp ult i64 %272, %275
  br i1 %276, label %268, label %264

277:                                              ; preds = %264
  %278 = bitcast %class.SkPictureData* %0 to i8**
  %279 = load i8*, i8** %278, align 8
  tail call void @_Z7sk_freePv(i8* %279) #7
  br label %280

280:                                              ; preds = %264, %277
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkPictureRecordD2Ev(%class.SkPictureRecord*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [56 x i8*] }, { [56 x i8*] }* @_ZTV15SkPictureRecord, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 10
  %4 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 10, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray.82, %class.SkTArray.82* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %26, %1
  %11 = phi i64 [ %5, %1 ], [ %28, %26 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %35, label %32

14:                                               ; preds = %26, %8
  %15 = phi i64 [ 0, %8 ], [ %27, %26 ]
  %16 = load %class.sk_sp.83*, %class.sk_sp.83** %9, align 8
  %17 = getelementptr inbounds %class.sk_sp.83, %class.sk_sp.83* %16, i64 %15, i32 0
  %18 = load %class.SkVertices*, %class.SkVertices** %17, align 8
  %19 = icmp eq %class.SkVertices* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast %class.SkVertices* %18 to i8*
  tail call void @_ZN10SkVerticesdlEPv(i8* nonnull %25) #7
  br label %26

26:                                               ; preds = %24, %20, %14
  %27 = add nuw nsw i64 %15, 1
  %28 = load i64, i64* %4, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = icmp ult i64 %27, %30
  br i1 %31, label %14, label %10

32:                                               ; preds = %10
  %33 = bitcast %class.SkTArray.82* %3 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_Z7sk_freePv(i8* %34) #7
  br label %35

35:                                               ; preds = %10, %32
  %36 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 9
  %37 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 9, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 4294967294
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %class.SkTArray.74, %class.SkTArray.74* %36, i64 0, i32 0
  br label %47

43:                                               ; preds = %59, %35
  %44 = phi i64 [ %38, %35 ], [ %61, %59 ]
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %68, label %65

47:                                               ; preds = %59, %41
  %48 = phi i64 [ 0, %41 ], [ %60, %59 ]
  %49 = load %class.sk_sp.75*, %class.sk_sp.75** %42, align 8
  %50 = getelementptr inbounds %class.sk_sp.75, %class.sk_sp.75* %49, i64 %48, i32 0
  %51 = load %class.SkTextBlob*, %class.SkTextBlob** %50, align 8
  %52 = icmp eq %class.SkTextBlob* %51, null
  br i1 %52, label %59, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %class.SkTextBlob, %class.SkTextBlob* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = atomicrmw add i32* %54, i32 -1 acq_rel
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  tail call void @_ZN10SkTextBlobD1Ev(%class.SkTextBlob* nonnull %51) #7
  %58 = bitcast %class.SkTextBlob* %51 to i8*
  tail call void @_ZN10SkTextBlobdlEPv(i8* nonnull %58) #7
  br label %59

59:                                               ; preds = %57, %53, %47
  %60 = add nuw nsw i64 %48, 1
  %61 = load i64, i64* %37, align 8
  %62 = lshr i64 %61, 1
  %63 = and i64 %62, 2147483647
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %47, label %43

65:                                               ; preds = %43
  %66 = bitcast %class.SkTArray.74* %36 to i8**
  %67 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %67) #7
  br label %68

68:                                               ; preds = %43, %65
  %69 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 8
  %70 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 8, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, 4294967294
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %class.SkTArray.72, %class.SkTArray.72* %69, i64 0, i32 0
  br label %80

76:                                               ; preds = %96, %68
  %77 = phi i64 [ %71, %68 ], [ %98, %96 ]
  %78 = and i64 %77, 1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %105, label %102

80:                                               ; preds = %96, %74
  %81 = phi i64 [ 0, %74 ], [ %97, %96 ]
  %82 = load %class.sk_sp.73*, %class.sk_sp.73** %75, align 8
  %83 = getelementptr inbounds %class.sk_sp.73, %class.sk_sp.73* %82, i64 %81, i32 0
  %84 = load %class.SkDrawable*, %class.SkDrawable** %83, align 8
  %85 = icmp eq %class.SkDrawable* %84, null
  br i1 %85, label %96, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %84, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = atomicrmw add i32* %87, i32 -1 acq_rel
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = bitcast %class.SkDrawable* %84 to %class.SkRefCntBase*
  %92 = bitcast %class.SkDrawable* %84 to void (%class.SkRefCntBase*)***
  %93 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %92, align 8
  %94 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %93, i64 2
  %95 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %94, align 8
  tail call void %95(%class.SkRefCntBase* nonnull %91) #7
  br label %96

96:                                               ; preds = %90, %86, %80
  %97 = add nuw nsw i64 %81, 1
  %98 = load i64, i64* %70, align 8
  %99 = lshr i64 %98, 1
  %100 = and i64 %99, 2147483647
  %101 = icmp ult i64 %97, %100
  br i1 %101, label %80, label %76

102:                                              ; preds = %76
  %103 = bitcast %class.SkTArray.72* %69 to i8**
  %104 = load i8*, i8** %103, align 8
  tail call void @_Z7sk_freePv(i8* %104) #7
  br label %105

105:                                              ; preds = %76, %102
  %106 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 7
  %107 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 7, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %108, 4294967294
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds %class.SkTArray.70, %class.SkTArray.70* %106, i64 0, i32 0
  br label %117

113:                                              ; preds = %133, %105
  %114 = phi i64 [ %108, %105 ], [ %135, %133 ]
  %115 = and i64 %114, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %142, label %139

117:                                              ; preds = %133, %111
  %118 = phi i64 [ 0, %111 ], [ %134, %133 ]
  %119 = load %class.sk_sp.71*, %class.sk_sp.71** %112, align 8
  %120 = getelementptr inbounds %class.sk_sp.71, %class.sk_sp.71* %119, i64 %118, i32 0
  %121 = load %class.SkPicture*, %class.SkPicture** %120, align 8
  %122 = icmp eq %class.SkPicture* %121, null
  br i1 %122, label %133, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %121, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = atomicrmw add i32* %124, i32 -1 acq_rel
  %126 = icmp eq i32 %125, 1
  br i1 %126, label %127, label %133

127:                                              ; preds = %123
  %128 = bitcast %class.SkPicture* %121 to %class.SkRefCntBase*
  %129 = bitcast %class.SkPicture* %121 to void (%class.SkRefCntBase*)***
  %130 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %129, align 8
  %131 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %130, i64 2
  %132 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %131, align 8
  tail call void %132(%class.SkRefCntBase* nonnull %128) #7
  br label %133

133:                                              ; preds = %127, %123, %117
  %134 = add nuw nsw i64 %118, 1
  %135 = load i64, i64* %107, align 8
  %136 = lshr i64 %135, 1
  %137 = and i64 %136, 2147483647
  %138 = icmp ult i64 %134, %137
  br i1 %138, label %117, label %113

139:                                              ; preds = %113
  %140 = bitcast %class.SkTArray.70* %106 to i8**
  %141 = load i8*, i8** %140, align 8
  tail call void @_Z7sk_freePv(i8* %141) #7
  br label %142

142:                                              ; preds = %113, %139
  %143 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 6
  %144 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 6, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = and i64 %145, 4294967294
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %150, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds %class.SkTArray.68, %class.SkTArray.68* %143, i64 0, i32 0
  br label %154

150:                                              ; preds = %170, %142
  %151 = phi i64 [ %145, %142 ], [ %172, %170 ]
  %152 = and i64 %151, 1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %179, label %176

154:                                              ; preds = %170, %148
  %155 = phi i64 [ 0, %148 ], [ %171, %170 ]
  %156 = load %class.sk_sp.69*, %class.sk_sp.69** %149, align 8
  %157 = getelementptr inbounds %class.sk_sp.69, %class.sk_sp.69* %156, i64 %155, i32 0
  %158 = load %class.SkImage*, %class.SkImage** %157, align 8
  %159 = icmp eq %class.SkImage* %158, null
  br i1 %159, label %170, label %160

160:                                              ; preds = %154
  %161 = getelementptr inbounds %class.SkImage, %class.SkImage* %158, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = atomicrmw add i32* %161, i32 -1 acq_rel
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %164, label %170

164:                                              ; preds = %160
  %165 = bitcast %class.SkImage* %158 to %class.SkRefCntBase*
  %166 = bitcast %class.SkImage* %158 to void (%class.SkRefCntBase*)***
  %167 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %166, align 8
  %168 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %167, i64 2
  %169 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %168, align 8
  tail call void %169(%class.SkRefCntBase* nonnull %165) #7
  br label %170

170:                                              ; preds = %164, %160, %154
  %171 = add nuw nsw i64 %155, 1
  %172 = load i64, i64* %144, align 8
  %173 = lshr i64 %172, 1
  %174 = and i64 %173, 2147483647
  %175 = icmp ult i64 %171, %174
  br i1 %175, label %154, label %150

176:                                              ; preds = %150
  %177 = bitcast %class.SkTArray.68* %143 to i8**
  %178 = load i8*, i8** %177, align 8
  tail call void @_Z7sk_freePv(i8* %178) #7
  br label %179

179:                                              ; preds = %150, %176
  %180 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 5, i32 4, i32 0, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  store i8* null, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %179
  tail call void @_Z7sk_freePv(i8* nonnull %181) #7
  br label %184

184:                                              ; preds = %179, %183
  %185 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %186 = load %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"** %185, align 8
  store %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"** %185, align 8
  %187 = icmp eq %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %186, null
  br i1 %187, label %202, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %186, i64 -1, i32 1
  %190 = bitcast i32* %189 to i8*
  %191 = bitcast i32* %189 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %201, label %194

194:                                              ; preds = %188
  %195 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %186, i64 %192
  br label %196

196:                                              ; preds = %196, %194
  %197 = phi %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* [ %198, %196 ], [ %195, %194 ]
  %198 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %197, i64 -1
  %199 = getelementptr inbounds %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot", %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %198, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %199) #7
  %200 = icmp eq %"struct.SkTHashTable<SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair, SkPath, SkTHashMap<SkPath, int, SkPictureRecord::PathHash>::Pair>::Slot"* %198, %186
  br i1 %200, label %201, label %196

201:                                              ; preds = %196, %188
  tail call void @_ZdaPv(i8* %190) #8
  br label %202

202:                                              ; preds = %184, %201
  %203 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 3
  %204 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 3, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = and i64 %205, 4294967294
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %210, label %208

208:                                              ; preds = %202
  %209 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %203, i64 0, i32 0
  br label %214

210:                                              ; preds = %214, %202
  %211 = phi i64 [ %205, %202 ], [ %219, %214 ]
  %212 = and i64 %211, 1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %226, label %223

214:                                              ; preds = %214, %208
  %215 = phi i64 [ 0, %208 ], [ %218, %214 ]
  %216 = load %class.SkPaint*, %class.SkPaint** %209, align 8
  %217 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %216, i64 %215
  tail call void @_ZN7SkPaintD1Ev(%class.SkPaint* %217) #7
  %218 = add nuw nsw i64 %215, 1
  %219 = load i64, i64* %204, align 8
  %220 = lshr i64 %219, 1
  %221 = and i64 %220, 2147483647
  %222 = icmp ult i64 %218, %221
  br i1 %222, label %214, label %210

223:                                              ; preds = %210
  %224 = bitcast %class.SkTArray* %203 to i8**
  %225 = load i8*, i8** %224, align 8
  tail call void @_Z7sk_freePv(i8* %225) #7
  br label %226

226:                                              ; preds = %210, %223
  %227 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 2
  %228 = bitcast %class.SkTDArray.52* %227 to i8**
  %229 = load i8*, i8** %228, align 8
  tail call void @_Z7sk_freePv(i8* %229) #7
  %230 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 1
  %231 = bitcast %class.SkTDArray.51* %230 to i8**
  %232 = load i8*, i8** %231, align 8
  tail call void @_Z7sk_freePv(i8* %232) #7
  %233 = getelementptr inbounds %class.SkPictureRecord, %class.SkPictureRecord* %0, i64 0, i32 0, i32 0
  tail call void @_ZN8SkCanvasD2Ev(%class.SkCanvas* %233) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkRecordedDrawable10CreateProcER12SkReadBuffer(%class.sk_sp.115* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %struct.SkRect, align 4
  %4 = alloca %struct.SkPictInfo, align 8
  %5 = alloca %class.SkPicturePlayback, align 8
  %6 = alloca %class.SkPictureRecorder, align 8
  %7 = alloca %class.sk_sp.73, align 8
  %8 = bitcast %struct.SkRect* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #7
  %9 = bitcast %struct.SkRect* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 -1, i64 16, i1 false)
  call void @_ZN12SkReadBuffer8readRectEP6SkRect(%class.SkReadBuffer* %1, %struct.SkRect* nonnull %3) #7
  %10 = getelementptr inbounds %struct.SkPictInfo, %struct.SkPictInfo* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %10) #7
  %11 = getelementptr inbounds %struct.SkPictInfo, %struct.SkPictInfo* %4, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkPictInfo, %struct.SkPictInfo* %4, i64 0, i32 2
  %13 = bitcast %struct.SkPictInfo* %4 to i64*
  store i64 -6148914691236517206, i64* %13, align 8
  %14 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %11, align 8
  %16 = bitcast %struct.SkRect* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* nonnull align 4 %8, i64 16, i1 false)
  %17 = call %class.SkPictureData* @_ZN13SkPictureData16CreateFromBufferER12SkReadBufferRK10SkPictInfo(%class.SkReadBuffer* dereferenceable(136) %1, %struct.SkPictInfo* nonnull dereferenceable(28) %4) #7
  %18 = icmp eq %class.SkPictureData* %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.sk_sp.115, %class.sk_sp.115* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %20, align 8
  br label %32

21:                                               ; preds = %2
  %22 = bitcast %class.SkPicturePlayback* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #7
  %23 = getelementptr inbounds %class.SkPicturePlayback, %class.SkPicturePlayback* %5, i64 0, i32 0
  %24 = getelementptr inbounds %class.SkPicturePlayback, %class.SkPicturePlayback* %5, i64 0, i32 1
  store %class.SkPictureData* %17, %class.SkPictureData** %23, align 8
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %class.SkPictureRecorder, %class.SkPictureRecorder* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 getelementptr inbounds ({ i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.2, %"class.std::__1::unique_ptr.125", %class.sk_sp, %"class.std::__1::unique_ptr.132" }, { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.2, %"class.std::__1::unique_ptr.125", %class.sk_sp, %"class.std::__1::unique_ptr.132" }* @__const._ZN18SkRecordedDrawable10CreateProcER12SkReadBuffer.recorder, i64 0, i32 0), i64 56, i1 false)
  call void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder* nonnull %6) #7
  %26 = call %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder* nonnull %6, %struct.SkRect* nonnull dereferenceable(16) %3, %class.SkBBHFactory* null) #7
  call void @_ZN17SkPicturePlayback4drawEP8SkCanvasPN9SkPicture13AbortCallbackEP12SkReadBuffer(%class.SkPicturePlayback* nonnull %5, %class.SkCanvas* %26, %"class.SkPicture::AbortCallback"* null, %class.SkReadBuffer* %1) #7
  %27 = bitcast %class.sk_sp.73* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #7
  call void @_ZN17SkPictureRecorder25finishRecordingAsDrawableEv(%class.sk_sp.73* nonnull sret %7, %class.SkPictureRecorder* nonnull %6) #7
  %28 = bitcast %class.sk_sp.73* %7 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %class.sk_sp.115* %0 to i64*
  store i64 %29, i64* %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #7
  call void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #7
  call void @_ZN13SkPictureDataD2Ev(%class.SkPictureData* nonnull %17) #7
  %31 = bitcast %class.SkPictureData* %17 to i8*
  call void @_ZdlPv(i8* %31) #8
  br label %32

32:                                               ; preds = %19, %21
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #7
  ret void
}

declare void @_ZN12SkReadBuffer8readRectEP6SkRect(%class.SkReadBuffer*, %struct.SkRect*) local_unnamed_addr #2

declare %class.SkPictureData* @_ZN13SkPictureData16CreateFromBufferER12SkReadBufferRK10SkPictInfo(%class.SkReadBuffer* dereferenceable(136), %struct.SkPictInfo* dereferenceable(28)) local_unnamed_addr #2

declare void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder*) unnamed_addr #2

declare void @_ZN17SkPicturePlayback4drawEP8SkCanvasPN9SkPicture13AbortCallbackEP12SkReadBuffer(%class.SkPicturePlayback*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*, %class.SkReadBuffer*) local_unnamed_addr #2

declare %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder*, %struct.SkRect* dereferenceable(16), %class.SkBBHFactory*) local_unnamed_addr #2

declare void @_ZN17SkPictureRecorder25finishRecordingAsDrawableEv(%class.sk_sp.73* sret, %class.SkPictureRecorder*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18SkRecordedDrawableD2Ev(%class.SkRecordedDrawable*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV18SkRecordedDrawable, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %class.SkDrawableList*, %class.SkDrawableList** %3, align 8
  store %class.SkDrawableList* null, %class.SkDrawableList** %3, align 8
  %5 = icmp eq %class.SkDrawableList* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN14SkDrawableListD1Ev(%class.SkDrawableList* nonnull %4) #7
  %7 = bitcast %class.SkDrawableList* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 2, i32 0
  %10 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %9, align 8
  %11 = icmp eq %class.SkBBoxHierarchy* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 -1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = bitcast %class.SkBBoxHierarchy* %10 to %class.SkRefCntBase*
  %18 = bitcast %class.SkBBoxHierarchy* %10 to void (%class.SkRefCntBase*)***
  %19 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %19, i64 2
  %21 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %20, align 8
  tail call void %21(%class.SkRefCntBase* nonnull %17) #7
  br label %22

22:                                               ; preds = %8, %12, %16
  %23 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 1, i32 0
  %24 = load %class.SkRecord*, %class.SkRecord** %23, align 8
  %25 = icmp eq %class.SkRecord* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %24, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 -1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = bitcast %class.SkRecord* %24 to %class.SkRefCntBase*
  %32 = bitcast %class.SkRecord* %24 to void (%class.SkRefCntBase*)***
  %33 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %33, i64 2
  %35 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %34, align 8
  tail call void %35(%class.SkRefCntBase* nonnull %31) #7
  br label %36

36:                                               ; preds = %22, %26, %30
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18SkRecordedDrawableD0Ev(%class.SkRecordedDrawable*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV18SkRecordedDrawable, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %class.SkDrawableList*, %class.SkDrawableList** %3, align 8
  store %class.SkDrawableList* null, %class.SkDrawableList** %3, align 8
  %5 = icmp eq %class.SkDrawableList* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN14SkDrawableListD1Ev(%class.SkDrawableList* nonnull %4) #7
  %7 = bitcast %class.SkDrawableList* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #8
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 2, i32 0
  %10 = load %class.SkBBoxHierarchy*, %class.SkBBoxHierarchy** %9, align 8
  %11 = icmp eq %class.SkBBoxHierarchy* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkBBoxHierarchy, %class.SkBBoxHierarchy* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 -1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = bitcast %class.SkBBoxHierarchy* %10 to %class.SkRefCntBase*
  %18 = bitcast %class.SkBBoxHierarchy* %10 to void (%class.SkRefCntBase*)***
  %19 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %19, i64 2
  %21 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %20, align 8
  tail call void %21(%class.SkRefCntBase* nonnull %17) #7
  br label %22

22:                                               ; preds = %16, %12, %8
  %23 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 1, i32 0
  %24 = load %class.SkRecord*, %class.SkRecord** %23, align 8
  %25 = icmp eq %class.SkRecord* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.SkRecord, %class.SkRecord* %24, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 -1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = bitcast %class.SkRecord* %24 to %class.SkRefCntBase*
  %32 = bitcast %class.SkRecord* %24 to void (%class.SkRefCntBase*)***
  %33 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %33, i64 2
  %35 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %34, align 8
  tail call void %35(%class.SkRefCntBase* nonnull %31) #7
  br label %36

36:                                               ; preds = %22, %26, %30
  %37 = bitcast %class.SkRecordedDrawable* %0 to i8*
  tail call void @_ZdlPv(i8* %37) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #7
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.115*, %class.SkReadBuffer*)* @_ZNK18SkRecordedDrawable10getFactoryEv(%class.SkRecordedDrawable*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.115*, %class.SkReadBuffer*)* @_ZN18SkRecordedDrawable10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK18SkRecordedDrawable11getTypeNameEv(%class.SkRecordedDrawable*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10SkDrawable18getFlattenableTypeEv(%class.SkDrawable*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { <2 x float>, <2 x float> } @_ZN18SkRecordedDrawable11onGetBoundsEv(%class.SkRecordedDrawable*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4
  %3 = bitcast %struct.SkRect* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 8
  %5 = getelementptr inbounds %class.SkRecordedDrawable, %class.SkRecordedDrawable* %0, i64 0, i32 4, i32 2
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 8
  %8 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %4, 0
  %9 = insertvalue { <2 x float>, <2 x float> } %8, <2 x float> %7, 1
  ret { <2 x float>, <2 x float> } %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkDrawable::GpuDrawHandler"* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo(%class.SkDrawable*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %struct.SkImageInfo* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret %"class.SkDrawable::GpuDrawHandler"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkDrawable::GpuDrawHandler"* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix(%class.SkDrawable*, i32, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 comdat align 2 {
  ret %"class.SkDrawable::GpuDrawHandler"* null
}

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN10SkVerticesdlEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN10SkTextBlobD1Ev(%class.SkTextBlob*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN10SkTextBlobdlEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN8SkCanvasD2Ev(%class.SkCanvas*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN14SkDrawableListD1Ev(%class.SkDrawableList*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
