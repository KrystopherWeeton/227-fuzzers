; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/noise_util.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/noise_util.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.aom_noise_tx_t = type { float*, float*, i32, void (float*, float*, float*)*, void (float*, float*, float*)* }

@aom_fft8x8_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@aom_ifft8x8_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@aom_fft16x16_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@aom_ifft16x16_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@aom_fft32x32_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@aom_ifft32x32_float = external local_unnamed_addr global void (float*, float*, float*)*, align 8
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [27 x i8] c"Unsupported block size %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Variance distance too large %f %f\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"Mean distance too large %f %f\0A\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @aom_noise_psd_get_default_value(i32, float) local_unnamed_addr #0 {
  %3 = fmul float %1, %1
  %4 = fdiv float %3, 1.000000e+04
  %5 = sitofp i32 %0 to float
  %6 = fmul float %4, %5
  %7 = fmul float %6, %5
  %8 = fmul float %7, 1.250000e-01
  ret float %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.aom_noise_tx_t* @aom_noise_tx_malloc(i32) local_unnamed_addr #1 {
  %2 = tail call i8* @aom_malloc(i64 40) #8
  %3 = bitcast i8* %2 to %struct.aom_noise_tx_t*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %57, label %5

5:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 40, i1 false)
  switch i32 %0, label %33 [
    i32 2, label %6
    i32 4, label %9
    i32 8, label %12
    i32 16, label %19
    i32 32, label %26
  ]

6:                                                ; preds = %5
  %7 = getelementptr inbounds i8, i8* %2, i64 24
  %8 = bitcast i8* %7 to <2 x void (float*, float*, float*)*>*
  store <2 x void (float*, float*, float*)*> <void (float*, float*, float*)* @aom_fft2x2_float_c, void (float*, float*, float*)* @aom_ifft2x2_float_c>, <2 x void (float*, float*, float*)*>* %8, align 8
  br label %36

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %2, i64 24
  %11 = bitcast i8* %10 to <2 x void (float*, float*, float*)*>*
  store <2 x void (float*, float*, float*)*> <void (float*, float*, float*)* @aom_fft4x4_float_sse2, void (float*, float*, float*)* @aom_ifft4x4_float_sse2>, <2 x void (float*, float*, float*)*>* %11, align 8
  br label %36

12:                                               ; preds = %5
  %13 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_fft8x8_float to i64*), align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 24
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_ifft8x8_float to i64*), align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to i64*
  store i64 %16, i64* %18, align 8
  br label %36

19:                                               ; preds = %5
  %20 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_fft16x16_float to i64*), align 8
  %21 = getelementptr inbounds i8, i8* %2, i64 24
  %22 = bitcast i8* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_ifft16x16_float to i64*), align 8
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to i64*
  store i64 %23, i64* %25, align 8
  br label %36

26:                                               ; preds = %5
  %27 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_fft32x32_float to i64*), align 8
  %28 = getelementptr inbounds i8, i8* %2, i64 24
  %29 = bitcast i8* %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = load i64, i64* bitcast (void (float*, float*, float*)** @aom_ifft32x32_float to i64*), align 8
  %31 = getelementptr inbounds i8, i8* %2, i64 32
  %32 = bitcast i8* %31 to i64*
  store i64 %30, i64* %32, align 8
  br label %36

33:                                               ; preds = %5
  tail call void @aom_free(i8* nonnull %2) #8
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %35 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 %0) #9
  br label %57

36:                                               ; preds = %26, %19, %12, %9, %6
  %37 = getelementptr inbounds i8, i8* %2, i64 16
  %38 = bitcast i8* %37 to i32*
  store i32 %0, i32* %38, align 8
  %39 = sext i32 %0 to i64
  %40 = shl nsw i64 %39, 3
  %41 = mul i64 %40, %39
  %42 = tail call i8* @aom_memalign(i64 32, i64 %41) #8
  %43 = bitcast i8* %2 to float**
  %44 = bitcast i8* %2 to i8**
  store i8* %42, i8** %44, align 8
  %45 = tail call i8* @aom_memalign(i64 32, i64 %41) #8
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i8**
  store i8* %45, i8** %47, align 8
  %48 = load float*, float** %43, align 8
  %49 = icmp eq float* %48, null
  %50 = icmp eq i8* %45, null
  %51 = or i1 %50, %49
  %52 = bitcast float* %48 to i8*
  br i1 %51, label %53, label %55

53:                                               ; preds = %36
  tail call void @aom_free(i8* %52) #8
  %54 = load i8*, i8** %47, align 8
  tail call void @aom_free(i8* %54) #8
  tail call void @aom_free(i8* nonnull %2) #8
  br label %57

55:                                               ; preds = %36
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %52, i8 0, i64 %41, i1 false)
  %56 = load i8*, i8** %47, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %56, i8 0, i64 %41, i1 false)
  br label %57

57:                                               ; preds = %1, %55, %53, %33
  %58 = phi %struct.aom_noise_tx_t* [ null, %33 ], [ %3, %55 ], [ null, %53 ], [ null, %1 ]
  ret %struct.aom_noise_tx_t* %58
}

declare i8* @aom_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @aom_fft2x2_float_c(float*, float*, float*) #2

declare void @aom_ifft2x2_float_c(float*, float*, float*) #2

declare void @aom_fft4x4_float_sse2(float*, float*, float*) #2

declare void @aom_ifft4x4_float_sse2(float*, float*, float*) #2

declare void @aom_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_tx_free(%struct.aom_noise_tx_t*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.aom_noise_tx_t* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.aom_noise_tx_t* %0 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @aom_free(i8* %5) #8
  %6 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 1
  %7 = bitcast float** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #8
  %9 = bitcast %struct.aom_noise_tx_t* %0 to i8*
  tail call void @aom_free(i8* nonnull %9) #8
  br label %10

10:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_tx_forward(%struct.aom_noise_tx_t* nocapture readonly, float*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 3
  %4 = load void (float*, float*, float*)*, void (float*, float*, float*)** %3, align 8
  %5 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 1
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 0
  %8 = load float*, float** %7, align 8
  tail call void %4(float* %1, float* %6, float* %8) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_noise_tx_filter(%struct.aom_noise_tx_t* nocapture readonly, float* nocapture readonly) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 0
  %8 = sext i32 %4 to i64
  %9 = zext i32 %4 to i64
  br label %10

10:                                               ; preds = %6, %15
  %11 = phi i64 [ 0, %6 ], [ %16, %15 ]
  %12 = mul nsw i64 %11, %8
  %13 = trunc i64 %12 to i32
  br label %18

14:                                               ; preds = %15, %2
  ret void

15:                                               ; preds = %56
  %16 = add nuw nsw i64 %11, 1
  %17 = icmp eq i64 %16, %9
  br i1 %17, label %14, label %10

18:                                               ; preds = %56, %10
  %19 = phi i64 [ 0, %10 ], [ %64, %56 ]
  %20 = phi i32 [ 0, %10 ], [ %65, %56 ]
  %21 = add nsw i64 %19, %12
  %22 = add nsw i32 %20, %13
  %23 = load float*, float** %7, align 8
  %24 = shl nsw i32 %22, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds float, float* %23, i64 %25
  %27 = bitcast float* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %28)
  %30 = fcmp ogt <2 x float> %29, <float 0x3E45798EE0000000, float 0x3E45798EE0000000>
  %31 = select <2 x i1> %30, <2 x float> %29, <2 x float> <float 0x3E45798EE0000000, float 0x3E45798EE0000000>
  %32 = fmul <2 x float> %31, %31
  %33 = extractelement <2 x float> %32, i32 0
  %34 = extractelement <2 x float> %32, i32 1
  %35 = fadd float %33, %34
  %36 = getelementptr inbounds float, float* %1, i64 %21
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, 0x3FF19999A0000000
  %39 = fcmp ogt float %35, %38
  %40 = fpext float %35 to double
  %41 = fcmp ogt double %40, 0x3EB0C6F7A0B5ED8D
  %42 = and i1 %39, %41
  br i1 %42, label %43, label %53

43:                                               ; preds = %18
  %44 = fsub float %35, %37
  %45 = fcmp ogt float %35, 0x3EB0C6F7A0000000
  %46 = select i1 %45, float %35, float 0x3EB0C6F7A0000000
  %47 = fdiv float %44, %46
  %48 = extractelement <2 x float> %28, i32 0
  %49 = fmul float %48, %47
  store float %49, float* %26, align 4
  %50 = load float, float* %36, align 4
  %51 = fsub float %35, %50
  %52 = fdiv float %51, %46
  br label %56

53:                                               ; preds = %18
  %54 = extractelement <2 x float> %28, i32 0
  %55 = fmul float %54, 0x3FB745D1C0000000
  store float %55, float* %26, align 4
  br label %56

56:                                               ; preds = %53, %43
  %57 = phi float [ 0x3FB745D1C0000000, %53 ], [ %52, %43 ]
  %58 = load float*, float** %7, align 8
  %59 = or i32 %24, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds float, float* %58, i64 %60
  %62 = load float, float* %61, align 4
  %63 = fmul float %62, %57
  store float %63, float* %61, align 4
  %64 = add nuw nsw i64 %19, 1
  %65 = add nuw nsw i32 %20, 1
  %66 = icmp eq i64 %64, %9
  br i1 %66, label %15, label %18
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_noise_tx_inverse(%struct.aom_noise_tx_t* nocapture readonly, float*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = mul i32 %4, %4
  %6 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 4
  %7 = load void (float*, float*, float*)*, void (float*, float*, float*)** %6, align 8
  %8 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 0
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 1
  %11 = load float*, float** %10, align 8
  tail call void %7(float* %9, float* %11, float* %1) #8
  %12 = icmp eq i32 %5, 0
  br i1 %12, label %58, label %13

13:                                               ; preds = %2
  %14 = sitofp i32 %5 to float
  %15 = zext i32 %5 to i64
  %16 = icmp ult i32 %5, 4
  br i1 %16, label %17, label %19

17:                                               ; preds = %56, %13
  %18 = phi i64 [ 0, %13 ], [ %20, %56 ]
  br label %59

19:                                               ; preds = %13
  %20 = and i64 %15, 4294967292
  %21 = insertelement <4 x float> undef, float %14, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = add nsw i64 %20, -4
  %24 = lshr exact i64 %23, 2
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %47, label %28

28:                                               ; preds = %19
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %44, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %45, %30 ]
  %33 = getelementptr inbounds float, float* %1, i64 %31
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4
  %36 = fdiv <4 x float> %35, %22
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4
  %38 = or i64 %31, 4
  %39 = getelementptr inbounds float, float* %1, i64 %38
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4
  %42 = fdiv <4 x float> %41, %22
  %43 = bitcast float* %39 to <4 x float>*
  store <4 x float> %42, <4 x float>* %43, align 4
  %44 = add i64 %31, 8
  %45 = add i64 %32, -2
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %30, !llvm.loop !2

47:                                               ; preds = %30, %19
  %48 = phi i64 [ 0, %19 ], [ %44, %30 ]
  %49 = icmp eq i64 %26, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds float, float* %1, i64 %48
  %52 = bitcast float* %51 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 4
  %54 = fdiv <4 x float> %53, %22
  %55 = bitcast float* %51 to <4 x float>*
  store <4 x float> %54, <4 x float>* %55, align 4
  br label %56

56:                                               ; preds = %47, %50
  %57 = icmp eq i64 %20, %15
  br i1 %57, label %58, label %17

58:                                               ; preds = %59, %56, %2
  ret void

59:                                               ; preds = %17, %59
  %60 = phi i64 [ %64, %59 ], [ %18, %17 ]
  %61 = getelementptr inbounds float, float* %1, i64 %60
  %62 = load float, float* %61, align 4
  %63 = fdiv float %62, %14
  store float %63, float* %61, align 4
  %64 = add nuw nsw i64 %60, 1
  %65 = icmp eq i64 %64, %15
  br i1 %65, label %58, label %59, !llvm.loop !4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_noise_tx_add_energy(%struct.aom_noise_tx_t* nocapture readonly, float* nocapture) local_unnamed_addr #7 {
  %3 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = lshr i32 %4, 1
  %8 = getelementptr inbounds %struct.aom_noise_tx_t, %struct.aom_noise_tx_t* %0, i64 0, i32 0
  %9 = add nuw nsw i32 %7, 1
  %10 = sext i32 %4 to i64
  %11 = zext i32 %4 to i64
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %6, %18
  %14 = phi i64 [ 0, %6 ], [ %19, %18 ]
  %15 = mul nsw i64 %14, %10
  %16 = trunc i64 %15 to i32
  br label %21

17:                                               ; preds = %18, %2
  ret void

18:                                               ; preds = %21
  %19 = add nuw nsw i64 %14, 1
  %20 = icmp eq i64 %19, %11
  br i1 %20, label %17, label %13

21:                                               ; preds = %21, %13
  %22 = phi i64 [ %39, %21 ], [ 0, %13 ]
  %23 = phi i32 [ %40, %21 ], [ 0, %13 ]
  %24 = load float*, float** %8, align 8
  %25 = add nsw i64 %22, %15
  %26 = add nsw i32 %23, %16
  %27 = shl nsw i32 %26, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %24, i64 %28
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, %30
  %32 = getelementptr inbounds float, float* %29, i64 1
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, %33
  %35 = fadd float %31, %34
  %36 = getelementptr inbounds float, float* %1, i64 %25
  %37 = load float, float* %36, align 4
  %38 = fadd float %37, %35
  store float %38, float* %36, align 4
  %39 = add nuw nsw i64 %22, 1
  %40 = add nuw nsw i32 %23, 1
  %41 = icmp eq i64 %39, %12
  br i1 %41, label %18, label %21
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @aom_normalized_cross_correlation(double* nocapture readonly, double* nocapture readonly, i32) local_unnamed_addr #5 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %31

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %40

11:                                               ; preds = %40, %5
  %12 = phi double [ undef, %5 ], [ %63, %40 ]
  %13 = phi <2 x double> [ undef, %5 ], [ %69, %40 ]
  %14 = phi i64 [ 0, %5 ], [ %70, %40 ]
  %15 = phi double [ 0.000000e+00, %5 ], [ %63, %40 ]
  %16 = phi <2 x double> [ zeroinitializer, %5 ], [ %69, %40 ]
  %17 = icmp eq i64 %7, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds double, double* %0, i64 %14
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds double, double* %1, i64 %14
  %22 = load double, double* %21, align 8
  %23 = insertelement <2 x double> undef, double %20, i32 0
  %24 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> zeroinitializer
  %25 = insertelement <2 x double> undef, double %22, i32 0
  %26 = insertelement <2 x double> %25, double %20, i32 1
  %27 = fmul <2 x double> %24, %26
  %28 = fadd <2 x double> %16, %27
  %29 = fmul double %22, %22
  %30 = fadd double %15, %29
  br label %31

31:                                               ; preds = %18, %11, %3
  %32 = phi double [ 0.000000e+00, %3 ], [ %12, %11 ], [ %30, %18 ]
  %33 = phi <2 x double> [ zeroinitializer, %3 ], [ %13, %11 ], [ %28, %18 ]
  %34 = extractelement <2 x double> %33, i32 1
  %35 = tail call double @sqrt(double %34) #8
  %36 = tail call double @sqrt(double %32) #8
  %37 = fmul double %35, %36
  %38 = extractelement <2 x double> %33, i32 0
  %39 = fdiv double %38, %37
  ret double %39

40:                                               ; preds = %40, %9
  %41 = phi i64 [ 0, %9 ], [ %70, %40 ]
  %42 = phi double [ 0.000000e+00, %9 ], [ %63, %40 ]
  %43 = phi <2 x double> [ zeroinitializer, %9 ], [ %69, %40 ]
  %44 = phi i64 [ %10, %9 ], [ %71, %40 ]
  %45 = getelementptr inbounds double, double* %0, i64 %41
  %46 = load double, double* %45, align 8
  %47 = getelementptr inbounds double, double* %1, i64 %41
  %48 = load double, double* %47, align 8
  %49 = fmul double %48, %48
  %50 = fadd double %42, %49
  %51 = insertelement <2 x double> undef, double %46, i32 0
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = insertelement <2 x double> undef, double %48, i32 0
  %54 = insertelement <2 x double> %53, double %46, i32 1
  %55 = fmul <2 x double> %52, %54
  %56 = fadd <2 x double> %43, %55
  %57 = or i64 %41, 1
  %58 = getelementptr inbounds double, double* %0, i64 %57
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds double, double* %1, i64 %57
  %61 = load double, double* %60, align 8
  %62 = fmul double %61, %61
  %63 = fadd double %50, %62
  %64 = insertelement <2 x double> undef, double %59, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = insertelement <2 x double> undef, double %61, i32 0
  %67 = insertelement <2 x double> %66, double %59, i32 1
  %68 = fmul <2 x double> %65, %67
  %69 = fadd <2 x double> %56, %68
  %70 = add nuw nsw i64 %41, 2
  %71 = add i64 %44, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %11, label %40
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_noise_data_validate(double* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %4 = sext i32 %1 to i64
  %5 = shl nsw i64 %4, 3
  %6 = tail call i8* @aom_malloc(i64 %5) #8
  %7 = bitcast i8* %6 to double*
  %8 = tail call i8* @aom_malloc(i64 %5) #8
  %9 = bitcast i8* %8 to double*
  %10 = sext i32 %2 to i64
  %11 = shl nsw i64 %10, 3
  %12 = tail call i8* @aom_malloc(i64 %11) #8
  %13 = bitcast i8* %12 to double*
  %14 = tail call i8* @aom_malloc(i64 %11) #8
  %15 = bitcast i8* %14 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 %5, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 %5, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 %11, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 %11, i1 false)
  %16 = icmp sgt i32 %2, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %3
  %18 = mul nsw i32 %2, %1
  %19 = sitofp i32 %18 to double
  %20 = fdiv double 0.000000e+00, %19
  %21 = fdiv double 0.000000e+00, %19
  %22 = fmul double %20, %20
  %23 = fsub double %21, %22
  br label %100

24:                                               ; preds = %3
  %25 = icmp sgt i32 %1, 0
  %26 = zext i32 %2 to i64
  %27 = zext i32 %1 to i64
  br label %28

28:                                               ; preds = %58, %24
  %29 = phi i64 [ 0, %24 ], [ %61, %58 ]
  %30 = phi double [ 0.000000e+00, %24 ], [ %60, %58 ]
  %31 = phi double [ 0.000000e+00, %24 ], [ %59, %58 ]
  br i1 %25, label %32, label %58

32:                                               ; preds = %28
  %33 = mul nsw i64 %29, %4
  %34 = getelementptr inbounds double, double* %15, i64 %29
  %35 = getelementptr inbounds double, double* %13, i64 %29
  br label %36

36:                                               ; preds = %36, %32
  %37 = phi i64 [ 0, %32 ], [ %56, %36 ]
  %38 = phi double [ %30, %32 ], [ %55, %36 ]
  %39 = phi double [ %31, %32 ], [ %54, %36 ]
  %40 = add nsw i64 %37, %33
  %41 = getelementptr inbounds double, double* %0, i64 %40
  %42 = load double, double* %41, align 8
  %43 = fmul double %42, %42
  %44 = getelementptr inbounds double, double* %9, i64 %37
  %45 = load double, double* %44, align 8
  %46 = fadd double %45, %43
  store double %46, double* %44, align 8
  %47 = load double, double* %34, align 8
  %48 = fadd double %43, %47
  store double %48, double* %34, align 8
  %49 = getelementptr inbounds double, double* %7, i64 %37
  %50 = load double, double* %49, align 8
  %51 = fadd double %42, %50
  store double %51, double* %49, align 8
  %52 = load double, double* %35, align 8
  %53 = fadd double %42, %52
  store double %53, double* %35, align 8
  %54 = fadd double %39, %43
  %55 = fadd double %38, %42
  %56 = add nuw nsw i64 %37, 1
  %57 = icmp eq i64 %56, %27
  br i1 %57, label %58, label %36

58:                                               ; preds = %36, %28
  %59 = phi double [ %31, %28 ], [ %54, %36 ]
  %60 = phi double [ %30, %28 ], [ %55, %36 ]
  %61 = add nuw nsw i64 %29, 1
  %62 = icmp eq i64 %61, %26
  br i1 %62, label %63, label %28

63:                                               ; preds = %58
  %64 = mul nsw i32 %2, %1
  %65 = sitofp i32 %64 to double
  %66 = fdiv double %60, %65
  %67 = fdiv double %59, %65
  %68 = fmul double %66, %66
  %69 = fsub double %67, %68
  br i1 %16, label %70, label %100

70:                                               ; preds = %63
  %71 = sitofp i32 %2 to double
  %72 = zext i32 %2 to i64
  br label %75

73:                                               ; preds = %91
  %74 = icmp eq i64 %96, %72
  br i1 %74, label %100, label %75

75:                                               ; preds = %73, %70
  %76 = phi i64 [ 0, %70 ], [ %96, %73 ]
  %77 = getelementptr inbounds double, double* %13, i64 %76
  %78 = load double, double* %77, align 8
  %79 = fdiv double %78, %71
  store double %79, double* %77, align 8
  %80 = getelementptr inbounds double, double* %15, i64 %76
  %81 = load double, double* %80, align 8
  %82 = fdiv double %81, %71
  %83 = fmul double %79, %79
  %84 = fsub double %82, %83
  store double %84, double* %80, align 8
  %85 = fsub double %84, %69
  %86 = tail call double @llvm.fabs.f64(double %85)
  %87 = fcmp ult double %86, 2.000000e+00
  br i1 %87, label %91, label %88

88:                                               ; preds = %75
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %90 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %89, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), double %84, double %69) #9
  br label %100

91:                                               ; preds = %75
  %92 = load double, double* %77, align 8
  %93 = fsub double %92, %66
  %94 = tail call double @llvm.fabs.f64(double %93)
  %95 = fcmp ult double %94, 2.000000e+00
  %96 = add nuw nsw i64 %76, 1
  br i1 %95, label %73, label %97

97:                                               ; preds = %91
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %99 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), double %92, double %66) #9
  br label %100

100:                                              ; preds = %73, %17, %63, %97, %88
  %101 = phi double [ %69, %88 ], [ %69, %97 ], [ %69, %63 ], [ %23, %17 ], [ %69, %73 ]
  %102 = phi double [ %66, %88 ], [ %66, %97 ], [ %66, %63 ], [ %20, %17 ], [ %66, %73 ]
  %103 = phi i32 [ 0, %88 ], [ 0, %97 ], [ 1, %63 ], [ 1, %17 ], [ 1, %73 ]
  %104 = icmp sgt i32 %1, 0
  br i1 %104, label %105, label %135

105:                                              ; preds = %100
  %106 = sitofp i32 %1 to double
  %107 = zext i32 %1 to i64
  br label %110

108:                                              ; preds = %126
  %109 = icmp eq i64 %131, %107
  br i1 %109, label %135, label %110

110:                                              ; preds = %108, %105
  %111 = phi i64 [ 0, %105 ], [ %131, %108 ]
  %112 = getelementptr inbounds double, double* %7, i64 %111
  %113 = load double, double* %112, align 8
  %114 = fdiv double %113, %106
  store double %114, double* %112, align 8
  %115 = getelementptr inbounds double, double* %9, i64 %111
  %116 = load double, double* %115, align 8
  %117 = fdiv double %116, %106
  %118 = fmul double %114, %114
  %119 = fsub double %117, %118
  store double %119, double* %115, align 8
  %120 = fsub double %119, %101
  %121 = tail call double @llvm.fabs.f64(double %120)
  %122 = fcmp ult double %121, 2.000000e+00
  br i1 %122, label %126, label %123

123:                                              ; preds = %110
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %125 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), double %119, double %101) #9
  br label %135

126:                                              ; preds = %110
  %127 = load double, double* %112, align 8
  %128 = fsub double %127, %102
  %129 = tail call double @llvm.fabs.f64(double %128)
  %130 = fcmp ult double %129, 2.000000e+00
  %131 = add nuw nsw i64 %111, 1
  br i1 %130, label %108, label %132

132:                                              ; preds = %126
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %134 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), double %127, double %102) #9
  br label %135

135:                                              ; preds = %108, %100, %132, %123
  %136 = phi i32 [ 0, %123 ], [ 0, %132 ], [ %103, %100 ], [ %103, %108 ]
  tail call void @aom_free(i8* %6) #8
  tail call void @aom_free(i8* %12) #8
  tail call void @aom_free(i8* %8) #8
  tail call void @aom_free(i8* %14) #8
  ret i32 %136
}

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
