; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_ssse3.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_quantize_b_ssse3(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = bitcast i16* %3 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = bitcast i16* %4 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %5 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = add <8 x i16> %15, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %21 = bitcast <8 x i16> %20 to <2 x i64>
  %22 = bitcast i16* %9 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 16
  %24 = bitcast i16* %6 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 16
  %26 = bitcast i32* %0 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = getelementptr inbounds i32, i32* %0, i64 4
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %30) #3
  %32 = getelementptr inbounds i32, i32* %0, i64 8
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 12
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #3
  %39 = sub <8 x i16> zeroinitializer, %31
  %40 = icmp slt <8 x i16> %31, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %31
  %42 = sub <8 x i16> zeroinitializer, %38
  %43 = icmp slt <8 x i16> %38, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %38
  %45 = icmp sgt <8 x i16> %41, %20
  %46 = sext <8 x i1> %45 to <8 x i16>
  %47 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %49 = icmp sgt <8 x i16> %44, %48
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = bitcast <2 x i64> %17 to <8 x i16>
  %52 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %41, <8 x i16> %51) #3
  %53 = bitcast <2 x i64> %19 to <8 x i16>
  %54 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %52, <8 x i16> %53) #3
  %55 = add <8 x i16> %54, %52
  %56 = bitcast <2 x i64> %25 to <8 x i16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %59 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %60 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %61 = bitcast <2 x i64> %58 to <8 x i16>
  %62 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %44, <8 x i16> %61) #3
  %63 = bitcast <2 x i64> %59 to <8 x i16>
  %64 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %62, <8 x i16> %63) #3
  %65 = add <8 x i16> %62, %64
  %66 = bitcast <2 x i64> %60 to <8 x i16>
  %67 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %65, <8 x i16> %66) #3
  %68 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %57, <8 x i16> %31) #3
  %69 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %67, <8 x i16> %38) #3
  %70 = and <8 x i16> %68, %46
  %71 = and <8 x i16> %69, %50
  %72 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %70, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %73 = shufflevector <8 x i16> %70, <8 x i16> %72, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = shufflevector <8 x i16> %70, <8 x i16> %72, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %75 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 16
  %76 = getelementptr inbounds i32, i32* %7, i64 4
  %77 = bitcast i32* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 16
  %78 = getelementptr inbounds i32, i32* %7, i64 8
  %79 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %71, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %80 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %81 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = bitcast i32* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 16
  %83 = getelementptr inbounds i32, i32* %7, i64 12
  %84 = bitcast i32* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 16
  %85 = bitcast <2 x i64> %23 to <8 x i16>
  %86 = mul <8 x i16> %70, %85
  %87 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %70, <8 x i16> %85) #3
  %88 = shufflevector <8 x i16> %86, <8 x i16> %87, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = shufflevector <8 x i16> %86, <8 x i16> %87, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %90 = bitcast i32* %8 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 16
  %91 = getelementptr inbounds i32, i32* %8, i64 4
  %92 = bitcast i32* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 16
  %93 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %94 = getelementptr inbounds i32, i32* %8, i64 8
  %95 = bitcast <2 x i64> %93 to <8 x i16>
  %96 = mul <8 x i16> %71, %95
  %97 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %71, <8 x i16> %95) #3
  %98 = shufflevector <8 x i16> %96, <8 x i16> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %99 = shufflevector <8 x i16> %96, <8 x i16> %97, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = bitcast i32* %94 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %100, align 16
  %101 = getelementptr inbounds i32, i32* %8, i64 12
  %102 = bitcast i32* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 16
  %103 = icmp eq <8 x i16> %70, zeroinitializer
  %104 = icmp eq <8 x i16> %71, zeroinitializer
  %105 = bitcast i16* %12 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 16
  %107 = getelementptr inbounds i16, i16* %12, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 16
  %110 = sub <8 x i16> %106, %46
  %111 = sub <8 x i16> %109, %50
  %112 = select <8 x i1> %103, <8 x i16> zeroinitializer, <8 x i16> %110
  %113 = select <8 x i1> %104, <8 x i16> zeroinitializer, <8 x i16> %111
  %114 = icmp sgt <8 x i16> %112, %113
  %115 = select <8 x i1> %114, <8 x i16> %112, <8 x i16> %113
  %116 = icmp sgt i64 %1, 16
  br i1 %116, label %117, label %204

117:                                              ; preds = %13, %117
  %118 = phi i64 [ %202, %117 ], [ 16, %13 ]
  %119 = phi <8 x i16> [ %201, %117 ], [ %115, %13 ]
  %120 = getelementptr inbounds i32, i32* %0, i64 %118
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 16
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 16
  %126 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %122, <4 x i32> %125) #3
  %127 = getelementptr inbounds i32, i32* %120, i64 8
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 16
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 16
  %133 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %129, <4 x i32> %132) #3
  %134 = sub <8 x i16> zeroinitializer, %126
  %135 = icmp slt <8 x i16> %126, zeroinitializer
  %136 = select <8 x i1> %135, <8 x i16> %134, <8 x i16> %126
  %137 = sub <8 x i16> zeroinitializer, %133
  %138 = icmp slt <8 x i16> %133, zeroinitializer
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> %133
  %140 = icmp sgt <8 x i16> %136, %48
  %141 = sext <8 x i1> %140 to <8 x i16>
  %142 = icmp sgt <8 x i16> %139, %48
  %143 = sext <8 x i1> %142 to <8 x i16>
  %144 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %136, <8 x i16> %61) #3
  %145 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %144, <8 x i16> %63) #3
  %146 = add <8 x i16> %145, %144
  %147 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %146, <8 x i16> %66) #3
  %148 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %139, <8 x i16> %61) #3
  %149 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %148, <8 x i16> %63) #3
  %150 = add <8 x i16> %148, %149
  %151 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %150, <8 x i16> %66) #3
  %152 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %147, <8 x i16> %126) #3
  %153 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %151, <8 x i16> %133) #3
  %154 = and <8 x i16> %152, %141
  %155 = and <8 x i16> %153, %143
  %156 = getelementptr inbounds i32, i32* %7, i64 %118
  %157 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %154, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %158 = shufflevector <8 x i16> %154, <8 x i16> %157, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %159 = shufflevector <8 x i16> %154, <8 x i16> %157, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %160 = bitcast i32* %156 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %160, align 16
  %161 = getelementptr inbounds i32, i32* %156, i64 4
  %162 = bitcast i32* %161 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %162, align 16
  %163 = getelementptr inbounds i32, i32* %156, i64 8
  %164 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %155, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %165 = shufflevector <8 x i16> %155, <8 x i16> %164, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %166 = shufflevector <8 x i16> %155, <8 x i16> %164, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %167 = bitcast i32* %163 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %167, align 16
  %168 = getelementptr inbounds i32, i32* %163, i64 4
  %169 = bitcast i32* %168 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds i32, i32* %8, i64 %118
  %171 = mul <8 x i16> %154, %95
  %172 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %154, <8 x i16> %95) #3
  %173 = shufflevector <8 x i16> %171, <8 x i16> %172, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %174 = shufflevector <8 x i16> %171, <8 x i16> %172, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %175 = bitcast i32* %170 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %175, align 16
  %176 = getelementptr inbounds i32, i32* %170, i64 4
  %177 = bitcast i32* %176 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %177, align 16
  %178 = getelementptr inbounds i32, i32* %170, i64 8
  %179 = mul <8 x i16> %155, %95
  %180 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %155, <8 x i16> %95) #3
  %181 = shufflevector <8 x i16> %179, <8 x i16> %180, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %182 = shufflevector <8 x i16> %179, <8 x i16> %180, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %183 = bitcast i32* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %183, align 16
  %184 = getelementptr inbounds i32, i32* %178, i64 4
  %185 = bitcast i32* %184 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %185, align 16
  %186 = icmp eq <8 x i16> %154, zeroinitializer
  %187 = icmp eq <8 x i16> %155, zeroinitializer
  %188 = getelementptr inbounds i16, i16* %12, i64 %118
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = getelementptr inbounds i16, i16* %188, i64 8
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 16
  %194 = sub <8 x i16> %190, %141
  %195 = sub <8 x i16> %193, %143
  %196 = select <8 x i1> %186, <8 x i16> zeroinitializer, <8 x i16> %194
  %197 = select <8 x i1> %187, <8 x i16> zeroinitializer, <8 x i16> %195
  %198 = icmp sgt <8 x i16> %196, %197
  %199 = select <8 x i1> %198, <8 x i16> %196, <8 x i16> %197
  %200 = icmp sgt <8 x i16> %119, %199
  %201 = select <8 x i1> %200, <8 x i16> %119, <8 x i16> %199
  %202 = add nuw i64 %118, 16
  %203 = icmp slt i64 %202, %1
  br i1 %203, label %117, label %204

204:                                              ; preds = %117, %13
  %205 = phi <8 x i16> [ %115, %13 ], [ %201, %117 ]
  %206 = bitcast <8 x i16> %205 to <4 x i32>
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %208 = bitcast <4 x i32> %207 to <8 x i16>
  %209 = icmp sgt <8 x i16> %205, %208
  %210 = select <8 x i1> %209, <8 x i16> %205, <8 x i16> %208
  %211 = shufflevector <8 x i16> %210, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %212 = icmp sgt <8 x i16> %210, %211
  %213 = select <8 x i1> %212, <8 x i16> %210, <8 x i16> %211
  %214 = shufflevector <8 x i16> %213, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %215 = icmp sgt <8 x i16> %213, %214
  %216 = select <8 x i1> %215, <8 x i16> %213, <8 x i16> %214
  %217 = extractelement <8 x i16> %216, i64 1
  store i16 %217, i16* %10, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_quantize_b_32x32_ssse3(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = bitcast i16* %3 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = add <8 x i16> %15, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = lshr <8 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = add <8 x i16> %17, <i16 undef, i16 undef, i16 undef, i16 undef, i16 -1, i16 -1, i16 -1, i16 -1>
  %19 = bitcast <8 x i16> %18 to <2 x i64>
  %20 = bitcast i16* %4 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = add <8 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = lshr <8 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = bitcast <8 x i16> %23 to <2 x i64>
  %25 = bitcast i16* %5 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = bitcast i16* %9 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 16
  %29 = bitcast i16* %6 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = shl <8 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %32 = bitcast <8 x i16> %31 to <2 x i64>
  %33 = bitcast i32* %0 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #3
  %39 = getelementptr inbounds i32, i32* %0, i64 8
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 16
  %42 = getelementptr inbounds i32, i32* %0, i64 12
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %41, <4 x i32> %44) #3
  %46 = sub <8 x i16> zeroinitializer, %38
  %47 = icmp slt <8 x i16> %38, zeroinitializer
  %48 = select <8 x i1> %47, <8 x i16> %46, <8 x i16> %38
  %49 = sub <8 x i16> zeroinitializer, %45
  %50 = icmp slt <8 x i16> %45, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %45
  %52 = icmp sge <8 x i16> %48, %17
  %53 = sext <8 x i1> %52 to <8 x i16>
  %54 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %55 = bitcast <2 x i64> %54 to <8 x i16>
  %56 = icmp sgt <8 x i16> %51, %55
  %57 = sext <8 x i1> %56 to <8 x i16>
  %58 = or <8 x i1> %56, %52
  %59 = sext <8 x i1> %58 to <8 x i16>
  %60 = bitcast <8 x i16> %59 to <16 x i8>
  %61 = icmp slt <16 x i8> %60, zeroinitializer
  %62 = bitcast <16 x i1> %61 to i16
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %64, label %87

64:                                               ; preds = %13
  %65 = bitcast i32* %7 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %65, align 16
  %66 = getelementptr inbounds i32, i32* %7, i64 8
  %67 = bitcast i32* %66 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %67, align 16
  %68 = bitcast i32* %8 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %68, align 16
  %69 = getelementptr inbounds i32, i32* %8, i64 8
  %70 = bitcast i32* %69 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %70, align 16
  %71 = getelementptr inbounds i32, i32* %7, i64 4
  %72 = bitcast i32* %71 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %72, align 16
  %73 = getelementptr inbounds i32, i32* %7, i64 12
  %74 = bitcast i32* %73 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %74, align 16
  %75 = getelementptr inbounds i32, i32* %8, i64 4
  %76 = bitcast i32* %75 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %76, align 16
  %77 = getelementptr inbounds i32, i32* %8, i64 12
  %78 = bitcast i32* %77 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %78, align 16
  %79 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %80 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %81 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %82 = shufflevector <2 x i64> %28, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %83 = bitcast <2 x i64> %79 to <8 x i16>
  %84 = bitcast <2 x i64> %80 to <8 x i16>
  %85 = bitcast <2 x i64> %81 to <8 x i16>
  %86 = bitcast <2 x i64> %82 to <8 x i16>
  br label %178

87:                                               ; preds = %13
  %88 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> %23) #3
  %89 = bitcast <2 x i64> %26 to <8 x i16>
  %90 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> %89) #3
  %91 = add <8 x i16> %90, %88
  %92 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %91, <8 x i16> %31) #3
  %93 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %94 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %95 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %96 = bitcast <2 x i64> %93 to <8 x i16>
  %97 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %51, <8 x i16> %96) #3
  %98 = bitcast <2 x i64> %94 to <8 x i16>
  %99 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %97, <8 x i16> %98) #3
  %100 = add <8 x i16> %99, %97
  %101 = bitcast <2 x i64> %95 to <8 x i16>
  %102 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %100, <8 x i16> %101) #3
  %103 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %92, <8 x i16> %38) #3
  %104 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %102, <8 x i16> %45) #3
  %105 = and <8 x i16> %103, %53
  %106 = and <8 x i16> %104, %57
  %107 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %105, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %108 = shufflevector <8 x i16> %105, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %105, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 16
  %111 = getelementptr inbounds i32, i32* %7, i64 4
  %112 = bitcast i32* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 16
  %113 = getelementptr inbounds i32, i32* %7, i64 8
  %114 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %106, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %115 = shufflevector <8 x i16> %106, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %116 = shufflevector <8 x i16> %106, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = bitcast i32* %113 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %117, align 16
  %118 = getelementptr inbounds i32, i32* %7, i64 12
  %119 = bitcast i32* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 16
  %120 = sub <8 x i16> zeroinitializer, %105
  %121 = icmp slt <8 x i16> %105, zeroinitializer
  %122 = select <8 x i1> %121, <8 x i16> %120, <8 x i16> %105
  %123 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %124 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = bitcast <2 x i64> %28 to <8 x i16>
  %126 = mul <8 x i16> %122, %125
  %127 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %122, <8 x i16> %125) #3
  %128 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %130 = bitcast <8 x i16> %128 to <4 x i32>
  %131 = lshr <4 x i32> %130, <i32 1, i32 1, i32 1, i32 1>
  %132 = bitcast <8 x i16> %129 to <4 x i32>
  %133 = lshr <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  %134 = bitcast <8 x i16> %123 to <4 x i32>
  %135 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %131, <4 x i32> %134) #3
  %136 = bitcast <8 x i16> %124 to <4 x i32>
  %137 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %133, <4 x i32> %136) #3
  %138 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %138, align 16
  %139 = getelementptr inbounds i32, i32* %8, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %140, align 16
  %141 = shufflevector <2 x i64> %28, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %142 = getelementptr inbounds i32, i32* %8, i64 8
  %143 = sub <8 x i16> zeroinitializer, %106
  %144 = icmp slt <8 x i16> %106, zeroinitializer
  %145 = select <8 x i1> %144, <8 x i16> %143, <8 x i16> %106
  %146 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %106, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %106, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %148 = bitcast <2 x i64> %141 to <8 x i16>
  %149 = mul <8 x i16> %145, %148
  %150 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %145, <8 x i16> %148) #3
  %151 = shufflevector <8 x i16> %149, <8 x i16> %150, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %152 = shufflevector <8 x i16> %149, <8 x i16> %150, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %153 = bitcast <8 x i16> %151 to <4 x i32>
  %154 = lshr <4 x i32> %153, <i32 1, i32 1, i32 1, i32 1>
  %155 = bitcast <8 x i16> %152 to <4 x i32>
  %156 = lshr <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  %157 = bitcast <8 x i16> %146 to <4 x i32>
  %158 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %154, <4 x i32> %157) #3
  %159 = bitcast <8 x i16> %147 to <4 x i32>
  %160 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %156, <4 x i32> %159) #3
  %161 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %161, align 16
  %162 = getelementptr inbounds i32, i32* %8, i64 12
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %163, align 16
  %164 = icmp eq <8 x i16> %105, zeroinitializer
  %165 = icmp eq <8 x i16> %106, zeroinitializer
  %166 = bitcast i16* %12 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 16
  %168 = getelementptr inbounds i16, i16* %12, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 16
  %171 = sub <8 x i16> %167, %53
  %172 = sub <8 x i16> %170, %57
  %173 = select <8 x i1> %164, <8 x i16> zeroinitializer, <8 x i16> %171
  %174 = select <8 x i1> %165, <8 x i16> zeroinitializer, <8 x i16> %172
  %175 = icmp sgt <8 x i16> %173, %174
  %176 = select <8 x i1> %175, <8 x i16> %173, <8 x i16> %174
  %177 = bitcast <8 x i16> %176 to <2 x i64>
  br label %178

178:                                              ; preds = %87, %64
  %179 = phi <8 x i16> [ %148, %87 ], [ %86, %64 ]
  %180 = phi <8 x i16> [ %101, %87 ], [ %85, %64 ]
  %181 = phi <8 x i16> [ %98, %87 ], [ %84, %64 ]
  %182 = phi <8 x i16> [ %96, %87 ], [ %83, %64 ]
  %183 = phi <8 x i16> [ %176, %87 ], [ zeroinitializer, %64 ]
  %184 = phi <2 x i64> [ %177, %87 ], [ zeroinitializer, %64 ]
  %185 = getelementptr inbounds i32, i32* %8, i64 8
  br label %186

186:                                              ; preds = %178, %323
  %187 = phi i64 [ 16, %178 ], [ %326, %323 ]
  %188 = phi <2 x i64> [ %184, %178 ], [ %325, %323 ]
  %189 = phi <8 x i16> [ %183, %178 ], [ %324, %323 ]
  %190 = getelementptr inbounds i32, i32* %0, i64 %187
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 16
  %193 = getelementptr inbounds i32, i32* %190, i64 4
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16
  %196 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %192, <4 x i32> %195) #3
  %197 = getelementptr inbounds i32, i32* %190, i64 8
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 16
  %200 = getelementptr inbounds i32, i32* %197, i64 4
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 16
  %203 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %199, <4 x i32> %202) #3
  %204 = sub <8 x i16> zeroinitializer, %196
  %205 = icmp slt <8 x i16> %196, zeroinitializer
  %206 = select <8 x i1> %205, <8 x i16> %204, <8 x i16> %196
  %207 = sub <8 x i16> zeroinitializer, %203
  %208 = icmp slt <8 x i16> %203, zeroinitializer
  %209 = select <8 x i1> %208, <8 x i16> %207, <8 x i16> %203
  %210 = icmp sgt <8 x i16> %206, %55
  %211 = sext <8 x i1> %210 to <8 x i16>
  %212 = icmp sgt <8 x i16> %209, %55
  %213 = sext <8 x i1> %212 to <8 x i16>
  %214 = or <8 x i1> %212, %210
  %215 = sext <8 x i1> %214 to <8 x i16>
  %216 = bitcast <8 x i16> %215 to <16 x i8>
  %217 = icmp slt <16 x i8> %216, zeroinitializer
  %218 = bitcast <16 x i1> %217 to i16
  %219 = icmp eq i16 %218, 0
  br i1 %219, label %220, label %237

220:                                              ; preds = %186
  %221 = getelementptr inbounds i32, i32* %7, i64 %187
  %222 = bitcast i32* %221 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %222, align 16
  %223 = getelementptr inbounds i32, i32* %221, i64 8
  %224 = bitcast i32* %223 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %224, align 16
  %225 = getelementptr inbounds i32, i32* %8, i64 %187
  %226 = bitcast i32* %225 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %226, align 16
  %227 = getelementptr inbounds i32, i32* %225, i64 8
  %228 = bitcast i32* %227 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %228, align 16
  %229 = getelementptr inbounds i32, i32* %221, i64 4
  %230 = bitcast i32* %229 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %230, align 16
  %231 = getelementptr inbounds i32, i32* %221, i64 12
  %232 = bitcast i32* %231 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %232, align 16
  %233 = getelementptr inbounds i32, i32* %225, i64 4
  %234 = bitcast i32* %233 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %234, align 16
  %235 = getelementptr inbounds i32, i32* %225, i64 12
  %236 = bitcast i32* %235 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %236, align 16
  br label %323

237:                                              ; preds = %186
  %238 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %206, <8 x i16> %182) #3
  %239 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %238, <8 x i16> %181) #3
  %240 = add <8 x i16> %239, %238
  %241 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %240, <8 x i16> %180) #3
  %242 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %209, <8 x i16> %182) #3
  %243 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %242, <8 x i16> %181) #3
  %244 = add <8 x i16> %243, %242
  %245 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %244, <8 x i16> %180) #3
  %246 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %241, <8 x i16> %196) #3
  %247 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %245, <8 x i16> %203) #3
  %248 = and <8 x i16> %246, %211
  %249 = and <8 x i16> %247, %213
  %250 = getelementptr inbounds i32, i32* %7, i64 %187
  %251 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %248, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %252 = shufflevector <8 x i16> %248, <8 x i16> %251, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %253 = shufflevector <8 x i16> %248, <8 x i16> %251, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %254 = bitcast i32* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %254, align 16
  %255 = getelementptr inbounds i32, i32* %250, i64 4
  %256 = bitcast i32* %255 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %256, align 16
  %257 = getelementptr inbounds i32, i32* %250, i64 8
  %258 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %249, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %259 = shufflevector <8 x i16> %249, <8 x i16> %258, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %260 = shufflevector <8 x i16> %249, <8 x i16> %258, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %261 = bitcast i32* %257 to <8 x i16>*
  store <8 x i16> %259, <8 x i16>* %261, align 16
  %262 = getelementptr inbounds i32, i32* %257, i64 4
  %263 = bitcast i32* %262 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %263, align 16
  %264 = getelementptr inbounds i32, i32* %8, i64 %187
  %265 = sub <8 x i16> zeroinitializer, %248
  %266 = icmp slt <8 x i16> %248, zeroinitializer
  %267 = select <8 x i1> %266, <8 x i16> %265, <8 x i16> %248
  %268 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %248, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %269 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %248, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %270 = mul <8 x i16> %267, %179
  %271 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %267, <8 x i16> %179) #3
  %272 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = shufflevector <8 x i16> %270, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %274 = bitcast <8 x i16> %272 to <4 x i32>
  %275 = lshr <4 x i32> %274, <i32 1, i32 1, i32 1, i32 1>
  %276 = bitcast <8 x i16> %273 to <4 x i32>
  %277 = lshr <4 x i32> %276, <i32 1, i32 1, i32 1, i32 1>
  %278 = bitcast <8 x i16> %268 to <4 x i32>
  %279 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %275, <4 x i32> %278) #3
  %280 = bitcast <8 x i16> %269 to <4 x i32>
  %281 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %277, <4 x i32> %280) #3
  %282 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %279, <4 x i32>* %282, align 16
  %283 = getelementptr inbounds i32, i32* %264, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %284, align 16
  %285 = getelementptr inbounds i32, i32* %185, i64 %187
  %286 = sub <8 x i16> zeroinitializer, %249
  %287 = icmp slt <8 x i16> %249, zeroinitializer
  %288 = select <8 x i1> %287, <8 x i16> %286, <8 x i16> %249
  %289 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %249, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %290 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %249, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %291 = mul <8 x i16> %288, %179
  %292 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %288, <8 x i16> %179) #3
  %293 = shufflevector <8 x i16> %291, <8 x i16> %292, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %294 = shufflevector <8 x i16> %291, <8 x i16> %292, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %295 = bitcast <8 x i16> %293 to <4 x i32>
  %296 = lshr <4 x i32> %295, <i32 1, i32 1, i32 1, i32 1>
  %297 = bitcast <8 x i16> %294 to <4 x i32>
  %298 = lshr <4 x i32> %297, <i32 1, i32 1, i32 1, i32 1>
  %299 = bitcast <8 x i16> %289 to <4 x i32>
  %300 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %296, <4 x i32> %299) #3
  %301 = bitcast <8 x i16> %290 to <4 x i32>
  %302 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %298, <4 x i32> %301) #3
  %303 = bitcast i32* %285 to <4 x i32>*
  store <4 x i32> %300, <4 x i32>* %303, align 16
  %304 = getelementptr inbounds i32, i32* %285, i64 4
  %305 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> %302, <4 x i32>* %305, align 16
  %306 = icmp eq <8 x i16> %248, zeroinitializer
  %307 = icmp eq <8 x i16> %249, zeroinitializer
  %308 = getelementptr inbounds i16, i16* %12, i64 %187
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 16
  %311 = getelementptr inbounds i16, i16* %308, i64 8
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 16
  %314 = sub <8 x i16> %310, %211
  %315 = sub <8 x i16> %313, %213
  %316 = select <8 x i1> %306, <8 x i16> zeroinitializer, <8 x i16> %314
  %317 = select <8 x i1> %307, <8 x i16> zeroinitializer, <8 x i16> %315
  %318 = icmp sgt <8 x i16> %316, %317
  %319 = select <8 x i1> %318, <8 x i16> %316, <8 x i16> %317
  %320 = icmp sgt <8 x i16> %189, %319
  %321 = select <8 x i1> %320, <8 x i16> %189, <8 x i16> %319
  %322 = bitcast <8 x i16> %321 to <2 x i64>
  br label %323

323:                                              ; preds = %237, %220
  %324 = phi <8 x i16> [ %189, %220 ], [ %321, %237 ]
  %325 = phi <2 x i64> [ %188, %220 ], [ %322, %237 ]
  %326 = add nuw nsw i64 %187, 16
  %327 = icmp ult i64 %326, 1024
  br i1 %327, label %186, label %328

328:                                              ; preds = %323
  %329 = bitcast <2 x i64> %325 to <4 x i32>
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %331 = bitcast <4 x i32> %330 to <8 x i16>
  %332 = icmp sgt <8 x i16> %324, %331
  %333 = select <8 x i1> %332, <8 x i16> %324, <8 x i16> %331
  %334 = shufflevector <8 x i16> %333, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %335 = icmp sgt <8 x i16> %333, %334
  %336 = select <8 x i1> %335, <8 x i16> %333, <8 x i16> %334
  %337 = shufflevector <8 x i16> %336, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %338 = icmp sgt <8 x i16> %336, %337
  %339 = select <8 x i1> %338, <8 x i16> %336, <8 x i16> %337
  %340 = extractelement <8 x i16> %339, i64 1
  store i16 %340, i16* %10, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32>, <4 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
