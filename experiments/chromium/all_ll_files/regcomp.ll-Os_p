; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/regcomp.c'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/regcomp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cclass = type { i8*, i8*, i8* }
%struct.cname = type { i8*, i8 }
%struct.llvm_regex = type { i32, i64, i8*, %struct.re_guts* }
%struct.re_guts = type { i32, i64*, i32, i32, %struct.cset*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, i8*, i8*, i32, i64, i32, i64, [1 x i8] }
%struct.cset = type { i8*, i8, i8, i64, i8* }
%struct.parse = type { i8*, i8*, i32, i64*, i64, i64, i32, %struct.re_guts*, [10 x i64], [10 x i64] }

@.str = private unnamed_addr constant [7 x i8] c"[:<:]]\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"[:>:]]\00", align 1
@cclasses = internal unnamed_addr constant [13 x %struct.cclass] [%struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }, %struct.cclass { i8* null, i8* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0) }], align 16
@.str.2 = private unnamed_addr constant [6 x i8] c"alnum\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.6 = private unnamed_addr constant [53 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"blank\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"cntrl\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"\07\08\09\0A\0B\0C\0D\01\02\03\04\05\06\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F\7F\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"digit\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"0123456789\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"graph\00", align 1
@.str.14 = private unnamed_addr constant [95 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\22#$%&'()*+,-./:;<=>?@[\5C]^_`{|}~\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"print\00", align 1
@.str.18 = private unnamed_addr constant [96 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\22#$%&'()*+,-./:;<=>?@[\5C]^_`{|}~ \00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"punct\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"!\22#$%&'()*+,-./:;<=>?@[\5C]^_`{|}~\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"space\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"\09\0A\0B\0C\0D \00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"xdigit\00", align 1
@.str.26 = private unnamed_addr constant [23 x i8] c"0123456789ABCDEFabcdef\00", align 1
@cnames = internal unnamed_addr constant [96 x %struct.cname] [%struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i8 0 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i8 1 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i8 2 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i32 0, i32 0), i8 3 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0), i8 4 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i32 0, i32 0), i8 5 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i8 6 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0), i8 7 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i8 7 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i8 8 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i32 0, i32 0), i8 8 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i8 9 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0), i8 9 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8 10 }, %struct.cname { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i8 10 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8 11 }, %struct.cname { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43, i32 0, i32 0), i8 11 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i8 12 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8 12 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i8 13 }, %struct.cname { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0), i8 13 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i8 14 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i8 15 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i32 0, i32 0), i8 16 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i32 0, i32 0), i8 17 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0), i8 18 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i32 0, i32 0), i8 19 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i32 0, i32 0), i8 20 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i32 0, i32 0), i8 21 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i32 0, i32 0), i8 22 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8 23 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), i8 24 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i8 25 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i32 0, i32 0), i8 26 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i32 0, i32 0), i8 27 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62, i32 0, i32 0), i8 28 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i8 28 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64, i32 0, i32 0), i8 29 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i32 0, i32 0), i8 29 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i32 0, i32 0), i8 30 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0), i8 30 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i8 31 }, %struct.cname { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i32 0, i32 0), i8 31 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8 32 }, %struct.cname { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i32 0, i32 0), i8 33 }, %struct.cname { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0), i8 34 }, %struct.cname { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0), i8 35 }, %struct.cname { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73, i32 0, i32 0), i8 36 }, %struct.cname { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.74, i32 0, i32 0), i8 37 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i8 38 }, %struct.cname { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.76, i32 0, i32 0), i8 39 }, %struct.cname { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.77, i32 0, i32 0), i8 40 }, %struct.cname { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78, i32 0, i32 0), i8 41 }, %struct.cname { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.79, i32 0, i32 0), i8 42 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i8 43 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), i8 44 }, %struct.cname { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i8 45 }, %struct.cname { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.83, i32 0, i32 0), i8 45 }, %struct.cname { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.84, i32 0, i32 0), i8 46 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.85, i32 0, i32 0), i8 46 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i8 47 }, %struct.cname { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.87, i32 0, i32 0), i8 47 }, %struct.cname { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), i8 48 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i32 0, i32 0), i8 49 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i32 0, i32 0), i8 50 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i32 0, i32 0), i8 51 }, %struct.cname { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92, i32 0, i32 0), i8 52 }, %struct.cname { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i32 0, i32 0), i8 53 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94, i32 0, i32 0), i8 54 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.95, i32 0, i32 0), i8 55 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), i8 56 }, %struct.cname { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i32 0, i32 0), i8 57 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.98, i32 0, i32 0), i8 58 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.99, i32 0, i32 0), i8 59 }, %struct.cname { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.100, i32 0, i32 0), i8 60 }, %struct.cname { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i8 61 }, %struct.cname { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.102, i32 0, i32 0), i8 62 }, %struct.cname { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.103, i32 0, i32 0), i8 63 }, %struct.cname { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.104, i32 0, i32 0), i8 64 }, %struct.cname { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.105, i32 0, i32 0), i8 91 }, %struct.cname { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.106, i32 0, i32 0), i8 92 }, %struct.cname { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.107, i32 0, i32 0), i8 92 }, %struct.cname { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.108, i32 0, i32 0), i8 93 }, %struct.cname { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.109, i32 0, i32 0), i8 94 }, %struct.cname { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.110, i32 0, i32 0), i8 94 }, %struct.cname { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i32 0, i32 0), i8 95 }, %struct.cname { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.112, i32 0, i32 0), i8 95 }, %struct.cname { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.113, i32 0, i32 0), i8 96 }, %struct.cname { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0), i8 123 }, %struct.cname { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.115, i32 0, i32 0), i8 123 }, %struct.cname { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.116, i32 0, i32 0), i8 124 }, %struct.cname { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.117, i32 0, i32 0), i8 125 }, %struct.cname { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.118, i32 0, i32 0), i8 125 }, %struct.cname { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.119, i32 0, i32 0), i8 126 }, %struct.cname { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.120, i32 0, i32 0), i8 127 }, %struct.cname zeroinitializer], align 16
@.str.27 = private unnamed_addr constant [4 x i8] c"NUL\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"SOH\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"STX\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"ETX\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"EOT\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"ENQ\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"ACK\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"BEL\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"alert\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"BS\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"backspace\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"HT\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"tab\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"LF\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"newline\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"VT\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"vertical-tab\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"FF\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"form-feed\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"carriage-return\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"SO\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"DLE\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"DC1\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"DC2\00", align 1
@.str.53 = private unnamed_addr constant [4 x i8] c"DC3\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"DC4\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c"NAK\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c"SYN\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"ETB\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"CAN\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"EM\00", align 1
@.str.60 = private unnamed_addr constant [4 x i8] c"SUB\00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"ESC\00", align 1
@.str.62 = private unnamed_addr constant [4 x i8] c"IS4\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"FS\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c"IS3\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"GS\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"IS2\00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"IS1\00", align 1
@.str.69 = private unnamed_addr constant [3 x i8] c"US\00", align 1
@.str.70 = private unnamed_addr constant [17 x i8] c"exclamation-mark\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"quotation-mark\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"number-sign\00", align 1
@.str.73 = private unnamed_addr constant [12 x i8] c"dollar-sign\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c"percent-sign\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"ampersand\00", align 1
@.str.76 = private unnamed_addr constant [11 x i8] c"apostrophe\00", align 1
@.str.77 = private unnamed_addr constant [17 x i8] c"left-parenthesis\00", align 1
@.str.78 = private unnamed_addr constant [18 x i8] c"right-parenthesis\00", align 1
@.str.79 = private unnamed_addr constant [9 x i8] c"asterisk\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c"plus-sign\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"comma\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"hyphen\00", align 1
@.str.83 = private unnamed_addr constant [13 x i8] c"hyphen-minus\00", align 1
@.str.84 = private unnamed_addr constant [7 x i8] c"period\00", align 1
@.str.85 = private unnamed_addr constant [10 x i8] c"full-stop\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"slash\00", align 1
@.str.87 = private unnamed_addr constant [8 x i8] c"solidus\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"one\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"two\00", align 1
@.str.91 = private unnamed_addr constant [6 x i8] c"three\00", align 1
@.str.92 = private unnamed_addr constant [5 x i8] c"four\00", align 1
@.str.93 = private unnamed_addr constant [5 x i8] c"five\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"six\00", align 1
@.str.95 = private unnamed_addr constant [6 x i8] c"seven\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"eight\00", align 1
@.str.97 = private unnamed_addr constant [5 x i8] c"nine\00", align 1
@.str.98 = private unnamed_addr constant [6 x i8] c"colon\00", align 1
@.str.99 = private unnamed_addr constant [10 x i8] c"semicolon\00", align 1
@.str.100 = private unnamed_addr constant [15 x i8] c"less-than-sign\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"equals-sign\00", align 1
@.str.102 = private unnamed_addr constant [18 x i8] c"greater-than-sign\00", align 1
@.str.103 = private unnamed_addr constant [14 x i8] c"question-mark\00", align 1
@.str.104 = private unnamed_addr constant [14 x i8] c"commercial-at\00", align 1
@.str.105 = private unnamed_addr constant [20 x i8] c"left-square-bracket\00", align 1
@.str.106 = private unnamed_addr constant [10 x i8] c"backslash\00", align 1
@.str.107 = private unnamed_addr constant [16 x i8] c"reverse-solidus\00", align 1
@.str.108 = private unnamed_addr constant [21 x i8] c"right-square-bracket\00", align 1
@.str.109 = private unnamed_addr constant [11 x i8] c"circumflex\00", align 1
@.str.110 = private unnamed_addr constant [18 x i8] c"circumflex-accent\00", align 1
@.str.111 = private unnamed_addr constant [11 x i8] c"underscore\00", align 1
@.str.112 = private unnamed_addr constant [9 x i8] c"low-line\00", align 1
@.str.113 = private unnamed_addr constant [13 x i8] c"grave-accent\00", align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"left-brace\00", align 1
@.str.115 = private unnamed_addr constant [19 x i8] c"left-curly-bracket\00", align 1
@.str.116 = private unnamed_addr constant [14 x i8] c"vertical-line\00", align 1
@.str.117 = private unnamed_addr constant [12 x i8] c"right-brace\00", align 1
@.str.118 = private unnamed_addr constant [20 x i8] c"right-curly-bracket\00", align 1
@.str.119 = private unnamed_addr constant [6 x i8] c"tilde\00", align 1
@.str.120 = private unnamed_addr constant [4 x i8] c"DEL\00", align 1
@nuls = internal global [10 x i8] zeroinitializer, align 1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @llvm_regcomp(%struct.llvm_regex*, i8*, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.parse, align 16
  %5 = bitcast %struct.parse* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 224, i8* nonnull %5) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 224, i1 false)
  %6 = and i32 %2, -129
  %7 = and i32 %2, 1
  %8 = icmp ne i32 %7, 0
  %9 = xor i1 %8, true
  %10 = and i32 %2, 16
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %11, %9
  br i1 %12, label %13, label %339

13:                                               ; preds = %3
  %14 = and i32 %2, 32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %0, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ult i8* %18, %1
  br i1 %19, label %339, label %20

20:                                               ; preds = %16
  %21 = ptrtoint i8* %18 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = sub i64 %21, %22
  br label %26

24:                                               ; preds = %13
  %25 = tail call i64 @strlen(i8* %1) #14
  br label %26

26:                                               ; preds = %24, %20
  %27 = phi i64 [ %23, %20 ], [ %25, %24 ]
  %28 = tail call noalias i8* @malloc(i64 399) #15
  %29 = icmp eq i8* %28, null
  br i1 %29, label %339, label %30

30:                                               ; preds = %26
  %31 = lshr i64 %27, 1
  %32 = mul i64 %31, 3
  %33 = add i64 %32, 1
  %34 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 4
  store i64 %33, i64* %34, align 16
  %35 = tail call noalias i8* @calloc(i64 %33, i64 8) #15
  %36 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 3
  %37 = bitcast i64** %36 to i8**
  store i8* %35, i8** %37, align 8
  %38 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 5
  store i64 0, i64* %38, align 8
  %39 = icmp eq i8* %35, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %30
  tail call void @free(i8* nonnull %28) #15
  br label %339

41:                                               ; preds = %30
  %42 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 7
  %43 = bitcast %struct.re_guts** %42 to i8**
  store i8* %28, i8** %43, align 8
  %44 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 0
  store i8* %1, i8** %44, align 16
  %45 = getelementptr inbounds i8, i8* %1, i64 %27
  %46 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 1
  store i8* %45, i8** %46, align 8
  %47 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 2
  store i32 0, i32* %47, align 16
  %48 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 6
  store i32 0, i32* %48, align 16
  %49 = getelementptr inbounds %struct.parse, %struct.parse* %4, i64 0, i32 8, i64 0
  %50 = getelementptr inbounds i8, i8* %28, i64 16
  %51 = bitcast i8* %50 to i32*
  %52 = bitcast i64* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %52, i8 0, i64 160, i1 false)
  store i32 256, i32* %51, align 8
  %53 = getelementptr inbounds i8, i8* %28, i64 32
  %54 = bitcast i8* %53 to i8**
  %55 = getelementptr inbounds i8, i8* %28, i64 20
  %56 = bitcast i8* %55 to i32*
  %57 = getelementptr inbounds i8, i8* %28, i64 40
  %58 = bitcast i8* %57 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 20, i1 false)
  store i32 %6, i32* %58, align 8
  %59 = getelementptr inbounds i8, i8* %28, i64 72
  %60 = bitcast i8* %59 to i32*
  %61 = getelementptr inbounds i8, i8* %28, i64 96
  %62 = bitcast i8* %61 to i8**
  store i8* null, i8** %62, align 8
  %63 = getelementptr inbounds i8, i8* %28, i64 104
  %64 = bitcast i8* %63 to i32*
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds i8, i8* %28, i64 112
  %66 = bitcast i8* %65 to i64*
  store i64 0, i64* %66, align 8
  %67 = getelementptr inbounds i8, i8* %28, i64 84
  %68 = bitcast i8* %67 to i32*
  %69 = bitcast i8* %59 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, <4 x i32>* %69, align 8
  %70 = getelementptr inbounds i8, i8* %28, i64 136
  %71 = getelementptr inbounds i8, i8* %28, i64 264
  %72 = getelementptr inbounds i8, i8* %28, i64 88
  %73 = bitcast i8* %72 to i8**
  store i8* %71, i8** %73, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 256, i1 false)
  %74 = getelementptr inbounds i8, i8* %28, i64 120
  %75 = bitcast i8* %74 to i32*
  store i32 0, i32* %75, align 8
  call fastcc void @doemit(%struct.parse* nonnull %4, i64 134217728, i64 0) #16
  %76 = load i64, i64* %38, align 8
  %77 = add nsw i64 %76, -1
  %78 = getelementptr inbounds i8, i8* %28, i64 56
  %79 = bitcast i8* %78 to i64*
  store i64 %77, i64* %79, align 8
  br i1 %8, label %80, label %81

80:                                               ; preds = %41
  call fastcc void @p_ere(%struct.parse* nonnull %4, i32 128) #16
  br label %101

81:                                               ; preds = %41
  br i1 %11, label %100, label %82

82:                                               ; preds = %81
  %83 = load i8*, i8** %44, align 16
  %84 = load i8*, i8** %46, align 8
  %85 = icmp ult i8* %83, %84
  br i1 %85, label %92, label %86

86:                                               ; preds = %82
  %87 = load i32, i32* %47, align 16
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %86
  store i32 14, i32* %47, align 16
  br label %90

90:                                               ; preds = %89, %86
  %91 = bitcast %struct.parse* %4 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %91, align 16
  br label %101

92:                                               ; preds = %82, %92
  %93 = phi i8* [ %97, %92 ], [ %83, %82 ]
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  store i8* %94, i8** %44, align 16
  %95 = load i8, i8* %93, align 1
  %96 = sext i8 %95 to i32
  call fastcc void @ordinary(%struct.parse* nonnull %4, i32 %96) #15
  %97 = load i8*, i8** %44, align 16
  %98 = load i8*, i8** %46, align 8
  %99 = icmp ult i8* %97, %98
  br i1 %99, label %92, label %101

100:                                              ; preds = %81
  call fastcc void @p_bre(%struct.parse* nonnull %4, i32 128, i32 128) #16
  br label %101

101:                                              ; preds = %92, %90, %100, %80
  call fastcc void @doemit(%struct.parse* nonnull %4, i64 134217728, i64 0) #16
  %102 = load i64, i64* %38, align 8
  %103 = add nsw i64 %102, -1
  %104 = getelementptr inbounds i8, i8* %28, i64 64
  %105 = bitcast i8* %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = load i8*, i8** %73, align 8
  %107 = load i32, i32* %47, align 16
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %177

109:                                              ; preds = %101, %171
  %110 = phi i64 [ %172, %171 ], [ -128, %101 ]
  %111 = phi i64 [ %173, %171 ], [ -127, %101 ]
  %112 = getelementptr inbounds i8, i8* %106, i64 %110
  %113 = load i8, i8* %112, align 1
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %115, label %171

115:                                              ; preds = %109
  %116 = load i32, i32* %56, align 4
  %117 = add nsw i32 %116, 7
  %118 = sdiv i32 %117, 8
  %119 = and i64 %110, 255
  %120 = icmp sgt i32 %116, 0
  br i1 %120, label %121, label %171

121:                                              ; preds = %115
  %122 = load i8*, i8** %54, align 8
  br label %123

123:                                              ; preds = %129, %121
  %124 = phi i32 [ 0, %121 ], [ %130, %129 ]
  %125 = phi i8* [ %122, %121 ], [ %133, %129 ]
  %126 = getelementptr inbounds i8, i8* %125, i64 %119
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %135

129:                                              ; preds = %123
  %130 = add nuw nsw i32 %124, 1
  %131 = load i32, i32* %51, align 8
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %125, i64 %132
  %134 = icmp slt i32 %130, %118
  br i1 %134, label %123, label %171

135:                                              ; preds = %123
  %136 = load i32, i32* %68, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %68, align 4
  %138 = trunc i32 %136 to i8
  store i8 %138, i8* %112, align 1
  %139 = icmp slt i64 %110, 127
  br i1 %139, label %140, label %171

140:                                              ; preds = %135, %168
  %141 = phi i64 [ %169, %168 ], [ %111, %135 ]
  %142 = getelementptr inbounds i8, i8* %106, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %168

145:                                              ; preds = %140
  %146 = load i32, i32* %56, align 4
  %147 = add nsw i32 %146, 7
  %148 = sdiv i32 %147, 8
  %149 = icmp sgt i32 %146, 0
  br i1 %149, label %150, label %167

150:                                              ; preds = %145
  %151 = load i8*, i8** %54, align 8
  %152 = and i64 %141, 255
  br label %153

153:                                              ; preds = %161, %150
  %154 = phi i32 [ 0, %150 ], [ %162, %161 ]
  %155 = phi i8* [ %151, %150 ], [ %165, %161 ]
  %156 = getelementptr inbounds i8, i8* %155, i64 %119
  %157 = load i8, i8* %156, align 1
  %158 = getelementptr inbounds i8, i8* %155, i64 %152
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %157, %159
  br i1 %160, label %161, label %168

161:                                              ; preds = %153
  %162 = add nuw nsw i32 %154, 1
  %163 = load i32, i32* %51, align 8
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %155, i64 %164
  %166 = icmp slt i32 %162, %148
  br i1 %166, label %153, label %167

167:                                              ; preds = %161, %145
  store i8 %138, i8* %142, align 1
  br label %168

168:                                              ; preds = %153, %167, %140
  %169 = add nsw i64 %141, 1
  %170 = icmp eq i64 %169, 128
  br i1 %170, label %171, label %140

171:                                              ; preds = %129, %168, %135, %115, %109
  %172 = add nsw i64 %110, 1
  %173 = add nsw i64 %111, 1
  %174 = icmp eq i64 %172, 128
  br i1 %174, label %175, label %109

175:                                              ; preds = %171
  %176 = load i64, i64* %38, align 8
  br label %177

177:                                              ; preds = %175, %101
  %178 = phi i64 [ %176, %175 ], [ %102, %101 ]
  %179 = getelementptr inbounds i8, i8* %28, i64 48
  %180 = bitcast i8* %179 to i64*
  store i64 %178, i64* %180, align 8
  %181 = icmp ugt i64 %178, 2305843009213693951
  %182 = load i64*, i64** %36, align 8
  br i1 %181, label %183, label %192

183:                                              ; preds = %177
  %184 = getelementptr inbounds i8, i8* %28, i64 8
  %185 = bitcast i8* %184 to i64**
  store i64* %182, i64** %185, align 8
  %186 = load i32, i32* %47, align 16
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %183
  store i32 12, i32* %47, align 16
  br label %189

189:                                              ; preds = %188, %183
  %190 = phi i32 [ 12, %188 ], [ %186, %183 ]
  %191 = bitcast %struct.parse* %4 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %191, align 16
  br label %314

192:                                              ; preds = %177
  %193 = bitcast i64* %182 to i8*
  %194 = shl i64 %178, 3
  %195 = call i8* @realloc(i8* %193, i64 %194) #15
  %196 = getelementptr inbounds i8, i8* %28, i64 8
  %197 = bitcast i8* %196 to i8**
  store i8* %195, i8** %197, align 8
  %198 = icmp eq i8* %195, null
  %199 = load i32, i32* %47, align 16
  %200 = icmp eq i32 %199, 0
  br i1 %198, label %201, label %209

201:                                              ; preds = %192
  br i1 %200, label %202, label %203

202:                                              ; preds = %201
  store i32 12, i32* %47, align 16
  br label %203

203:                                              ; preds = %202, %201
  %204 = phi i32 [ 12, %202 ], [ %199, %201 ]
  %205 = bitcast %struct.parse* %4 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %205, align 16
  %206 = bitcast i64** %36 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast i8* %196 to i64*
  store i64 %207, i64* %208, align 8
  br label %314

209:                                              ; preds = %192
  br i1 %200, label %210, label %314

210:                                              ; preds = %209
  %211 = getelementptr inbounds i8, i8* %28, i64 8
  %212 = bitcast i8* %211 to i64**
  %213 = getelementptr inbounds i8, i8* %195, i64 8
  %214 = bitcast i8* %213 to i64*
  br label %215

215:                                              ; preds = %251, %210
  %216 = phi i64* [ %214, %210 ], [ %252, %251 ]
  %217 = phi i64* [ null, %210 ], [ %253, %251 ]
  %218 = phi i64* [ null, %210 ], [ %254, %251 ]
  %219 = phi i64 [ 0, %210 ], [ %255, %251 ]
  %220 = getelementptr inbounds i64, i64* %216, i64 1
  %221 = load i64, i64* %216, align 8
  %222 = and i64 %221, 4160749568
  %223 = add nsw i64 %222, -268435456
  %224 = lshr exact i64 %223, 27
  switch i64 %224, label %243 [
    i64 0, label %226
    i64 7, label %251
    i64 11, label %251
    i64 12, label %251
    i64 9, label %225
    i64 13, label %225
  ]

225:                                              ; preds = %215, %215
  br label %230

226:                                              ; preds = %215
  %227 = icmp eq i64 %219, 0
  %228 = select i1 %227, i64* %216, i64* %218
  %229 = add nsw i64 %219, 1
  br label %251

230:                                              ; preds = %225, %238
  %231 = phi i64* [ %234, %238 ], [ %216, %225 ]
  %232 = phi i64 [ %235, %238 ], [ %221, %225 ]
  %233 = and i64 %232, 134217727
  %234 = getelementptr inbounds i64, i64* %231, i64 %233
  %235 = load i64, i64* %234, align 8
  %236 = and i64 %235, 4160749568
  %237 = icmp eq i64 %236, 1610612736
  br i1 %237, label %243, label %238

238:                                              ; preds = %230
  %239 = trunc i64 %236 to i32
  switch i32 %239, label %240 [
    i32 -1879048192, label %243
    i32 -2013265920, label %230
  ]

240:                                              ; preds = %238
  %241 = load i32, i32* %60, align 8
  %242 = or i32 %241, 4
  store i32 %242, i32* %60, align 8
  br label %289

243:                                              ; preds = %238, %230, %215
  %244 = phi i64* [ %220, %215 ], [ %234, %230 ], [ %234, %238 ]
  %245 = phi i64 [ %221, %215 ], [ %235, %230 ], [ %235, %238 ]
  %246 = load i32, i32* %64, align 8
  %247 = sext i32 %246 to i64
  %248 = icmp sgt i64 %219, %247
  br i1 %248, label %249, label %251

249:                                              ; preds = %243
  %250 = trunc i64 %219 to i32
  store i32 %250, i32* %64, align 8
  br label %251

251:                                              ; preds = %249, %243, %226, %215, %215, %215
  %252 = phi i64* [ %220, %215 ], [ %220, %215 ], [ %220, %215 ], [ %220, %226 ], [ %244, %249 ], [ %244, %243 ]
  %253 = phi i64* [ %217, %215 ], [ %217, %215 ], [ %217, %215 ], [ %217, %226 ], [ %218, %249 ], [ %217, %243 ]
  %254 = phi i64* [ %218, %215 ], [ %218, %215 ], [ %218, %215 ], [ %228, %226 ], [ %218, %249 ], [ %218, %243 ]
  %255 = phi i64 [ %219, %215 ], [ %219, %215 ], [ %219, %215 ], [ %229, %226 ], [ 0, %249 ], [ 0, %243 ]
  %256 = phi i64 [ %221, %215 ], [ %221, %215 ], [ %221, %215 ], [ %221, %226 ], [ %245, %249 ], [ %245, %243 ]
  %257 = and i64 %256, 4160749568
  %258 = icmp eq i64 %257, 134217728
  br i1 %258, label %259, label %215

259:                                              ; preds = %251
  %260 = load i32, i32* %64, align 8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %289, label %262

262:                                              ; preds = %259
  %263 = sext i32 %260 to i64
  %264 = add nsw i64 %263, 1
  %265 = call noalias i8* @malloc(i64 %264) #15
  store i8* %265, i8** %62, align 8
  %266 = icmp eq i8* %265, null
  br i1 %266, label %269, label %267

267:                                              ; preds = %262
  %268 = icmp sgt i32 %260, 0
  br i1 %268, label %270, label %285

269:                                              ; preds = %262
  store i32 0, i32* %64, align 8
  br label %289

270:                                              ; preds = %267, %280
  %271 = phi i64 [ %283, %280 ], [ %263, %267 ]
  %272 = phi i8* [ %282, %280 ], [ %265, %267 ]
  %273 = phi i64* [ %276, %280 ], [ %253, %267 ]
  br label %274

274:                                              ; preds = %274, %270
  %275 = phi i64* [ %276, %274 ], [ %273, %270 ]
  %276 = getelementptr inbounds i64, i64* %275, i64 1
  %277 = load i64, i64* %275, align 8
  %278 = and i64 %277, 4160749568
  %279 = icmp eq i64 %278, 268435456
  br i1 %279, label %280, label %274

280:                                              ; preds = %274
  %281 = trunc i64 %277 to i8
  %282 = getelementptr inbounds i8, i8* %272, i64 1
  store i8 %281, i8* %272, align 1
  %283 = add nsw i64 %271, -1
  %284 = icmp sgt i64 %283, 0
  br i1 %284, label %270, label %285

285:                                              ; preds = %280, %267
  %286 = phi i8* [ %265, %267 ], [ %282, %280 ]
  store i8 0, i8* %286, align 1
  %287 = load i32, i32* %47, align 16
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %314

289:                                              ; preds = %269, %259, %240, %285
  %290 = load i64*, i64** %212, align 8
  br label %291

291:                                              ; preds = %305, %289
  %292 = phi i64* [ %290, %289 ], [ %295, %305 ]
  %293 = phi i64 [ 0, %289 ], [ %306, %305 ]
  %294 = phi i64 [ 0, %289 ], [ %307, %305 ]
  %295 = getelementptr inbounds i64, i64* %292, i64 1
  %296 = load i64, i64* %295, align 8
  %297 = and i64 %296, 4160749568
  %298 = trunc i64 %297 to i32
  switch i32 %298, label %305 [
    i32 1207959552, label %299
    i32 1342177280, label %301
  ]

299:                                              ; preds = %291
  %300 = add nsw i64 %293, 1
  br label %305

301:                                              ; preds = %291
  %302 = icmp sgt i64 %293, %294
  %303 = select i1 %302, i64 %293, i64 %294
  %304 = add nsw i64 %293, -1
  br label %305

305:                                              ; preds = %301, %299, %291
  %306 = phi i64 [ %293, %291 ], [ %304, %301 ], [ %300, %299 ]
  %307 = phi i64 [ %294, %291 ], [ %303, %301 ], [ %294, %299 ]
  %308 = icmp eq i64 %297, 134217728
  br i1 %308, label %309, label %291

309:                                              ; preds = %305
  %310 = icmp eq i64 %306, 0
  br i1 %310, label %314, label %311

311:                                              ; preds = %309
  %312 = load i32, i32* %60, align 8
  %313 = or i32 %312, 4
  store i32 %313, i32* %60, align 8
  br label %314

314:                                              ; preds = %203, %189, %209, %285, %309, %311
  %315 = phi i32 [ %287, %285 ], [ 0, %309 ], [ 0, %311 ], [ %199, %209 ], [ %204, %203 ], [ %190, %189 ]
  %316 = phi i1 [ false, %285 ], [ true, %309 ], [ true, %311 ], [ false, %209 ], [ false, %203 ], [ false, %189 ]
  %317 = phi i64 [ 0, %285 ], [ %307, %309 ], [ %307, %311 ], [ 0, %209 ], [ 0, %203 ], [ 0, %189 ]
  %318 = getelementptr inbounds i8, i8* %28, i64 128
  %319 = bitcast i8* %318 to i64*
  store i64 %317, i64* %319, align 8
  %320 = bitcast i8* %28 to i32*
  store i32 53829, i32* %320, align 8
  %321 = load i64, i64* %66, align 8
  %322 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %0, i64 0, i32 1
  store i64 %321, i64* %322, align 8
  %323 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %0, i64 0, i32 3
  %324 = bitcast %struct.re_guts** %323 to i8**
  store i8* %28, i8** %324, align 8
  %325 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %0, i64 0, i32 0
  store i32 62053, i32* %325, align 8
  %326 = load i32, i32* %60, align 8
  %327 = and i32 %326, 4
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %334, label %329

329:                                              ; preds = %314
  br i1 %316, label %330, label %331

330:                                              ; preds = %329
  store i32 15, i32* %47, align 16
  br label %331

331:                                              ; preds = %329, %330
  %332 = phi i32 [ %315, %329 ], [ 15, %330 ]
  %333 = bitcast %struct.parse* %4 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %333, align 16
  br label %334

334:                                              ; preds = %314, %331
  %335 = phi i32 [ %315, %314 ], [ %332, %331 ]
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %339, label %337

337:                                              ; preds = %334
  call void @llvm_regfree(%struct.llvm_regex* %0) #15
  %338 = load i32, i32* %47, align 16
  br label %339

339:                                              ; preds = %337, %334, %26, %16, %3, %40
  %340 = phi i32 [ 12, %40 ], [ 16, %3 ], [ 16, %16 ], [ 12, %26 ], [ 0, %334 ], [ %338, %337 ]
  call void @llvm.lifetime.end.p0i8(i64 224, i8* nonnull %5) #13
  ret i32 %340
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind optsize
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @doemit(%struct.parse* nocapture, i64, i64) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = add nsw i64 %11, 1
  %15 = sdiv i64 %14, 2
  %16 = mul nsw i64 %15, 3
  tail call fastcc void @enlarge(%struct.parse* %0, i64 %16) #16
  %17 = load i64, i64* %8, align 8
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %9, %7 ], [ %17, %13 ]
  %20 = or i64 %2, %1
  %21 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  %22 = load i64*, i64** %21, align 8
  %23 = add nsw i64 %19, 1
  store i64 %23, i64* %8, align 8
  %24 = getelementptr inbounds i64, i64* %22, i64 %19
  store i64 %20, i64* %24, align 8
  br label %25

25:                                               ; preds = %3, %18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @p_ere(%struct.parse*, i32) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %9 = bitcast i32* %3 to [4 x i8]*
  %10 = bitcast %struct.parse* %0 to i64*
  %11 = bitcast i8** %6 to i64*
  %12 = bitcast i32* %3 to i8*
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  %14 = bitcast %struct.parse* %0 to i32**
  %15 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  %16 = load i64, i64* %4, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = load i8*, i8** %6, align 8
  %19 = icmp ult i8* %17, %18
  br i1 %19, label %20, label %351

20:                                               ; preds = %2
  %21 = bitcast %struct.parse* %0 to <2 x i8*>*
  %22 = bitcast %struct.parse* %0 to <2 x i8*>*
  %23 = bitcast %struct.parse* %0 to <2 x i8*>*
  %24 = bitcast %struct.parse* %0 to <2 x i8*>*
  %25 = bitcast %struct.parse* %0 to <2 x i8*>*
  %26 = bitcast %struct.parse* %0 to <2 x i8*>*
  %27 = bitcast %struct.parse* %0 to <2 x i8*>*
  %28 = bitcast %struct.parse* %0 to <2 x i8*>*
  %29 = bitcast %struct.parse* %0 to <2 x i8*>*
  %30 = bitcast %struct.parse* %0 to <2 x i8*>*
  %31 = bitcast %struct.parse* %0 to <2 x i8*>*
  %32 = bitcast %struct.parse* %0 to <2 x i8*>*
  %33 = bitcast %struct.parse* %0 to <2 x i8*>*
  br label %34

34:                                               ; preds = %20, %390
  %35 = phi i8* [ %394, %390 ], [ %18, %20 ]
  %36 = phi i8* [ %393, %390 ], [ %17, %20 ]
  %37 = phi i64 [ %392, %390 ], [ %16, %20 ]
  %38 = phi i32 [ 0, %390 ], [ 1, %20 ]
  %39 = phi i64 [ %391, %390 ], [ 0, %20 ]
  %40 = phi i64 [ %379, %390 ], [ 0, %20 ]
  br label %41

41:                                               ; preds = %34, %342
  %42 = phi i8* [ %343, %342 ], [ %35, %34 ]
  %43 = phi i8* [ %344, %342 ], [ %36, %34 ]
  %44 = ptrtoint i8* %42 to i64
  %45 = load i8, i8* %43, align 1
  %46 = icmp ne i8 %45, 124
  %47 = sext i8 %45 to i32
  %48 = icmp ne i32 %47, %1
  %49 = and i1 %46, %48
  br i1 %49, label %50, label %346

50:                                               ; preds = %41
  %51 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %51, i8** %5, align 8
  %52 = load i8, i8* %43, align 1
  %53 = load i64, i64* %4, align 8
  %54 = sext i8 %52 to i32
  %55 = ptrtoint i8* %51 to i64
  switch i32 %54, label %192 [
    i32 40, label %56
    i32 41, label %100
    i32 94, label %105
    i32 36, label %114
    i32 124, label %123
    i32 42, label %128
    i32 43, label %128
    i32 63, label %128
    i32 46, label %133
    i32 91, label %141
    i32 92, label %142
    i32 123, label %176
  ]

56:                                               ; preds = %50
  %57 = icmp ult i8* %51, %42
  br i1 %57, label %63, label %58

58:                                               ; preds = %56
  %59 = load i32, i32* %7, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  store i32 8, i32* %7, align 8
  br label %62

62:                                               ; preds = %61, %58
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %27, align 8
  br label %63

63:                                               ; preds = %62, %56
  %64 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %65 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %64, i64 0, i32 17
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  %68 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %69 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %68, i64 0, i32 17
  %70 = load i64, i64* %69, align 8
  %71 = icmp slt i64 %70, 10
  br i1 %71, label %72, label %75

72:                                               ; preds = %63
  %73 = load i64, i64* %4, align 8
  %74 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 8, i64 %70
  store i64 %73, i64* %74, align 8
  br label %75

75:                                               ; preds = %72, %63
  call fastcc void @doemit(%struct.parse* %0, i64 1744830464, i64 %70) #15
  %76 = load i8*, i8** %5, align 8
  %77 = load i8*, i8** %6, align 8
  %78 = icmp ult i8* %76, %77
  br i1 %78, label %79, label %82

79:                                               ; preds = %75
  %80 = load i8, i8* %76, align 1
  %81 = icmp eq i8 %80, 41
  br i1 %81, label %83, label %82

82:                                               ; preds = %79, %75
  call fastcc void @p_ere(%struct.parse* %0, i32 41) #15
  br label %83

83:                                               ; preds = %82, %79
  br i1 %71, label %84, label %87

84:                                               ; preds = %83
  %85 = load i64, i64* %4, align 8
  %86 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 9, i64 %70
  store i64 %85, i64* %86, align 8
  br label %87

87:                                               ; preds = %84, %83
  call fastcc void @doemit(%struct.parse* %0, i64 1879048192, i64 %70) #15
  %88 = load i8*, i8** %5, align 8
  %89 = load i8*, i8** %6, align 8
  %90 = icmp ult i8* %88, %89
  br i1 %90, label %91, label %95

91:                                               ; preds = %87
  %92 = getelementptr inbounds i8, i8* %88, i64 1
  store i8* %92, i8** %5, align 8
  %93 = load i8, i8* %88, align 1
  %94 = icmp eq i8 %93, 41
  br i1 %94, label %193, label %95

95:                                               ; preds = %91, %87
  %96 = load i32, i32* %7, align 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  store i32 8, i32* %7, align 8
  br label %99

99:                                               ; preds = %98, %95
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %28, align 8
  br label %193

100:                                              ; preds = %50
  %101 = load i32, i32* %7, align 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  store i32 8, i32* %7, align 8
  br label %104

104:                                              ; preds = %103, %100
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %26, align 8
  br label %193

105:                                              ; preds = %50
  call fastcc void @doemit(%struct.parse* %0, i64 402653184, i64 0) #15
  %106 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %107 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %106, i64 0, i32 10
  %108 = load i32, i32* %107, align 8
  %109 = or i32 %108, 1
  store i32 %109, i32* %107, align 8
  %110 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %111 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %110, i64 0, i32 11
  %112 = load i32, i32* %111, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %111, align 4
  br label %193

114:                                              ; preds = %50
  call fastcc void @doemit(%struct.parse* %0, i64 536870912, i64 0) #15
  %115 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %116 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %115, i64 0, i32 10
  %117 = load i32, i32* %116, align 8
  %118 = or i32 %117, 2
  store i32 %118, i32* %116, align 8
  %119 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %120 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %119, i64 0, i32 12
  %121 = load i32, i32* %120, align 8
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %120, align 8
  br label %193

123:                                              ; preds = %50
  %124 = load i32, i32* %7, align 8
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %123
  store i32 14, i32* %7, align 8
  br label %127

127:                                              ; preds = %126, %123
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %25, align 8
  br label %193

128:                                              ; preds = %50, %50, %50
  %129 = load i32, i32* %7, align 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %128
  store i32 13, i32* %7, align 8
  br label %132

132:                                              ; preds = %131, %128
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %24, align 8
  br label %193

133:                                              ; preds = %50
  %134 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %135 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %134, i64 0, i32 6
  %136 = load i32, i32* %135, align 8
  %137 = and i32 %136, 8
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %140, label %139

139:                                              ; preds = %133
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 6097502, i32* %3, align 4
  store i32* %3, i32** %14, align 8
  store i8* %13, i8** %6, align 8
  call fastcc void @p_bracket(%struct.parse* %0) #15
  store i64 %55, i64* %10, align 8
  store i64 %44, i64* %11, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  br label %193

140:                                              ; preds = %133
  call fastcc void @doemit(%struct.parse* %0, i64 671088640, i64 0) #15
  br label %193

141:                                              ; preds = %50
  call fastcc void @p_bracket(%struct.parse* %0) #15
  br label %193

142:                                              ; preds = %50
  %143 = icmp ult i8* %51, %42
  br i1 %143, label %149, label %144

144:                                              ; preds = %142
  %145 = load i32, i32* %7, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  store i32 5, i32* %7, align 8
  br label %148

148:                                              ; preds = %147, %144
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %22, align 8
  br label %149

149:                                              ; preds = %148, %142
  %150 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %148 ], [ %51, %142 ]
  %151 = getelementptr inbounds i8, i8* %150, i64 1
  store i8* %151, i8** %5, align 8
  %152 = load i8, i8* %150, align 1
  %153 = sext i8 %152 to i32
  %154 = add i8 %152, -49
  %155 = icmp ult i8 %154, 9
  br i1 %155, label %156, label %175

156:                                              ; preds = %149
  %157 = add nsw i32 %153, -48
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 9, i64 %158
  %160 = load i64, i64* %159, align 8
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %167

162:                                              ; preds = %156
  %163 = load i32, i32* %7, align 8
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  store i32 6, i32* %7, align 8
  br label %166

166:                                              ; preds = %165, %162
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %23, align 8
  br label %193

167:                                              ; preds = %156
  call fastcc void @doemit(%struct.parse* %0, i64 939524096, i64 %158) #15
  %168 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 8, i64 %158
  %169 = load i64, i64* %168, align 8
  %170 = add nsw i64 %169, 1
  %171 = load i64, i64* %159, align 8
  %172 = call fastcc i64 @dupl(%struct.parse* %0, i64 %170, i64 %171) #15
  call fastcc void @doemit(%struct.parse* %0, i64 1073741824, i64 %158) #15
  %173 = load %struct.re_guts*, %struct.re_guts** %8, align 8
  %174 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %173, i64 0, i32 18
  store i32 1, i32* %174, align 8
  br label %193

175:                                              ; preds = %149
  call fastcc void @ordinary(%struct.parse* %0, i32 %153) #15
  br label %193

176:                                              ; preds = %50
  %177 = icmp ult i8* %51, %42
  br i1 %177, label %178, label %192

178:                                              ; preds = %176
  %179 = tail call i16** @__ctype_b_loc() #17
  %180 = load i16*, i16** %179, align 8
  %181 = load i8, i8* %51, align 1
  %182 = zext i8 %181 to i64
  %183 = getelementptr inbounds i16, i16* %180, i64 %182
  %184 = load i16, i16* %183, align 2
  %185 = and i16 %184, 2048
  %186 = icmp eq i16 %185, 0
  br i1 %186, label %192, label %187

187:                                              ; preds = %178
  %188 = load i32, i32* %7, align 8
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  store i32 13, i32* %7, align 8
  br label %191

191:                                              ; preds = %190, %187
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %21, align 8
  br label %192

192:                                              ; preds = %191, %178, %176, %50
  call fastcc void @ordinary(%struct.parse* %0, i32 %54) #15
  br label %193

193:                                              ; preds = %192, %175, %167, %166, %141, %140, %139, %132, %127, %114, %105, %104, %99, %91
  %194 = phi i32 [ 0, %192 ], [ 0, %166 ], [ 0, %167 ], [ 0, %175 ], [ 0, %141 ], [ 0, %139 ], [ 0, %140 ], [ 0, %132 ], [ 0, %127 ], [ 0, %114 ], [ 1, %105 ], [ 0, %104 ], [ 0, %99 ], [ 0, %91 ]
  %195 = load i8*, i8** %5, align 8
  %196 = load i8*, i8** %6, align 8
  %197 = icmp ult i8* %195, %196
  br i1 %197, label %198, label %342

198:                                              ; preds = %193
  %199 = load i8, i8* %195, align 1
  %200 = sext i8 %199 to i32
  switch i8 %199, label %342 [
    i8 42, label %213
    i8 43, label %213
    i8 63, label %213
    i8 123, label %201
  ]

201:                                              ; preds = %198
  %202 = getelementptr inbounds i8, i8* %195, i64 1
  %203 = icmp ult i8* %202, %196
  br i1 %203, label %204, label %342

204:                                              ; preds = %201
  %205 = tail call i16** @__ctype_b_loc() #17
  %206 = load i16*, i16** %205, align 8
  %207 = load i8, i8* %202, align 1
  %208 = zext i8 %207 to i64
  %209 = getelementptr inbounds i16, i16* %206, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = and i16 %210, 2048
  %212 = icmp eq i16 %211, 0
  br i1 %212, label %342, label %213

213:                                              ; preds = %204, %198, %198, %198
  %214 = getelementptr inbounds i8, i8* %195, i64 1
  store i8* %214, i8** %5, align 8
  %215 = icmp eq i32 %194, 0
  br i1 %215, label %221, label %216

216:                                              ; preds = %213
  %217 = load i32, i32* %7, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %216
  store i32 13, i32* %7, align 8
  br label %220

220:                                              ; preds = %219, %216
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %29, align 8
  br label %221

221:                                              ; preds = %220, %213
  switch i32 %200, label %319 [
    i32 42, label %222
    i32 43, label %232
    i32 63, label %238
    i32 123, label %266
  ]

222:                                              ; preds = %221
  %223 = load i64, i64* %4, align 8
  %224 = sub i64 1, %53
  %225 = add i64 %224, %223
  call fastcc void @doinsert(%struct.parse* %0, i64 1207959552, i64 %225, i64 %53) #15
  %226 = load i64, i64* %4, align 8
  %227 = sub nsw i64 %226, %53
  call fastcc void @doemit(%struct.parse* %0, i64 1342177280, i64 %227) #15
  %228 = load i64, i64* %4, align 8
  %229 = add i64 %224, %228
  call fastcc void @doinsert(%struct.parse* %0, i64 1476395008, i64 %229, i64 %53) #15
  %230 = load i64, i64* %4, align 8
  %231 = sub nsw i64 %230, %53
  call fastcc void @doemit(%struct.parse* %0, i64 1610612736, i64 %231) #15
  br label %319

232:                                              ; preds = %221
  %233 = load i64, i64* %4, align 8
  %234 = sub i64 1, %53
  %235 = add i64 %234, %233
  call fastcc void @doinsert(%struct.parse* %0, i64 1207959552, i64 %235, i64 %53) #15
  %236 = load i64, i64* %4, align 8
  %237 = sub nsw i64 %236, %53
  call fastcc void @doemit(%struct.parse* %0, i64 1342177280, i64 %237) #15
  br label %319

238:                                              ; preds = %221
  %239 = load i64, i64* %4, align 8
  %240 = sub i64 1, %53
  %241 = add i64 %240, %239
  call fastcc void @doinsert(%struct.parse* %0, i64 2013265920, i64 %241, i64 %53) #15
  %242 = load i64, i64* %4, align 8
  %243 = sub nsw i64 %242, %53
  call fastcc void @doemit(%struct.parse* %0, i64 2147483648, i64 %243) #15
  %244 = load i32, i32* %7, align 8
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %254

246:                                              ; preds = %238
  %247 = load i64, i64* %4, align 8
  %248 = sub nsw i64 %247, %53
  %249 = load i64*, i64** %15, align 8
  %250 = getelementptr inbounds i64, i64* %249, i64 %53
  %251 = load i64, i64* %250, align 8
  %252 = and i64 %251, 4160749568
  %253 = or i64 %252, %248
  store i64 %253, i64* %250, align 8
  br label %254

254:                                              ; preds = %246, %238
  call fastcc void @doemit(%struct.parse* %0, i64 2281701376, i64 0) #15
  %255 = load i32, i32* %7, align 8
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %265

257:                                              ; preds = %254
  %258 = load i64, i64* %4, align 8
  %259 = add nsw i64 %258, -1
  %260 = load i64*, i64** %15, align 8
  %261 = getelementptr inbounds i64, i64* %260, i64 %259
  %262 = load i64, i64* %261, align 8
  %263 = and i64 %262, 4160749568
  %264 = or i64 %263, 1
  store i64 %264, i64* %261, align 8
  br label %265

265:                                              ; preds = %257, %254
  call fastcc void @doemit(%struct.parse* %0, i64 2415919104, i64 2) #15
  br label %319

266:                                              ; preds = %221
  %267 = call fastcc i32 @p_count(%struct.parse* %0) #15
  %268 = load i8*, i8** %5, align 8
  %269 = load i8*, i8** %6, align 8
  %270 = icmp ult i8* %268, %269
  br i1 %270, label %271, label %292

271:                                              ; preds = %266
  %272 = load i8, i8* %268, align 1
  %273 = icmp eq i8 %272, 44
  br i1 %273, label %274, label %292

274:                                              ; preds = %271
  %275 = getelementptr inbounds i8, i8* %268, i64 1
  store i8* %275, i8** %5, align 8
  %276 = tail call i16** @__ctype_b_loc() #17
  %277 = load i16*, i16** %276, align 8
  %278 = load i8, i8* %275, align 1
  %279 = zext i8 %278 to i64
  %280 = getelementptr inbounds i16, i16* %277, i64 %279
  %281 = load i16, i16* %280, align 2
  %282 = and i16 %281, 2048
  %283 = icmp eq i16 %282, 0
  br i1 %283, label %292, label %284

284:                                              ; preds = %274
  %285 = call fastcc i32 @p_count(%struct.parse* %0) #15
  %286 = icmp sgt i32 %267, %285
  br i1 %286, label %287, label %292

287:                                              ; preds = %284
  %288 = load i32, i32* %7, align 8
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %287
  store i32 10, i32* %7, align 8
  br label %291

291:                                              ; preds = %290, %287
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %30, align 8
  br label %292

292:                                              ; preds = %291, %284, %274, %271, %266
  %293 = phi i32 [ %285, %284 ], [ %285, %291 ], [ 256, %274 ], [ %267, %266 ], [ %267, %271 ]
  call fastcc void @repeat(%struct.parse* %0, i64 %53, i32 %267, i32 %293) #15
  %294 = load i8*, i8** %5, align 8
  %295 = load i8*, i8** %6, align 8
  %296 = icmp ult i8* %294, %295
  br i1 %296, label %297, label %309

297:                                              ; preds = %292
  %298 = load i8, i8* %294, align 1
  %299 = icmp eq i8 %298, 125
  br i1 %299, label %300, label %305

300:                                              ; preds = %297
  %301 = getelementptr inbounds i8, i8* %294, i64 1
  store i8* %301, i8** %5, align 8
  br label %319

302:                                              ; preds = %305
  %303 = load i8, i8* %307, align 1
  %304 = icmp eq i8 %303, 125
  br i1 %304, label %314, label %305

305:                                              ; preds = %297, %302
  %306 = phi i8* [ %307, %302 ], [ %294, %297 ]
  %307 = getelementptr inbounds i8, i8* %306, i64 1
  store i8* %307, i8** %5, align 8
  %308 = icmp eq i8* %307, %295
  br i1 %308, label %309, label %302

309:                                              ; preds = %305, %292
  %310 = load i32, i32* %7, align 8
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %312, label %313

312:                                              ; preds = %309
  store i32 9, i32* %7, align 8
  br label %313

313:                                              ; preds = %309, %312
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %31, align 8
  br label %318

314:                                              ; preds = %302
  %315 = load i32, i32* %7, align 8
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %318

317:                                              ; preds = %314
  store i32 10, i32* %7, align 8
  br label %318

318:                                              ; preds = %313, %317, %314
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %32, align 8
  br label %319

319:                                              ; preds = %318, %300, %265, %232, %222, %221
  %320 = load i8*, i8** %5, align 8
  %321 = load i8*, i8** %6, align 8
  %322 = icmp ult i8* %320, %321
  br i1 %322, label %323, label %342

323:                                              ; preds = %319
  %324 = load i8, i8* %320, align 1
  switch i8 %324, label %342 [
    i8 42, label %337
    i8 43, label %337
    i8 63, label %337
    i8 123, label %325
  ]

325:                                              ; preds = %323
  %326 = getelementptr inbounds i8, i8* %320, i64 1
  %327 = icmp ult i8* %326, %321
  br i1 %327, label %328, label %342

328:                                              ; preds = %325
  %329 = tail call i16** @__ctype_b_loc() #17
  %330 = load i16*, i16** %329, align 8
  %331 = load i8, i8* %326, align 1
  %332 = zext i8 %331 to i64
  %333 = getelementptr inbounds i16, i16* %330, i64 %332
  %334 = load i16, i16* %333, align 2
  %335 = and i16 %334, 2048
  %336 = icmp eq i16 %335, 0
  br i1 %336, label %342, label %337

337:                                              ; preds = %328, %323, %323, %323
  %338 = load i32, i32* %7, align 8
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %341

340:                                              ; preds = %337
  store i32 13, i32* %7, align 8
  br label %341

341:                                              ; preds = %337, %340
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %33, align 8
  br label %346

342:                                              ; preds = %193, %198, %201, %204, %319, %323, %325, %328
  %343 = phi i8* [ %196, %193 ], [ %196, %198 ], [ %196, %201 ], [ %196, %204 ], [ %321, %319 ], [ %321, %323 ], [ %321, %325 ], [ %321, %328 ]
  %344 = phi i8* [ %195, %193 ], [ %195, %198 ], [ %195, %201 ], [ %195, %204 ], [ %320, %319 ], [ %320, %323 ], [ %320, %325 ], [ %320, %328 ]
  %345 = icmp ult i8* %344, %343
  br i1 %345, label %41, label %346

346:                                              ; preds = %342, %41, %341
  %347 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %341 ], [ %343, %342 ], [ %42, %41 ]
  %348 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %341 ], [ %344, %342 ], [ %43, %41 ]
  %349 = load i64, i64* %4, align 8
  %350 = icmp eq i64 %349, %37
  br i1 %350, label %351, label %361

351:                                              ; preds = %346, %390, %2
  %352 = phi i64 [ 0, %2 ], [ %40, %346 ], [ %379, %390 ]
  %353 = phi i64 [ 0, %2 ], [ %39, %346 ], [ %391, %390 ]
  %354 = phi i32 [ 1, %2 ], [ %38, %346 ], [ 0, %390 ]
  %355 = phi i64 [ %16, %2 ], [ %349, %346 ], [ %392, %390 ]
  %356 = load i32, i32* %7, align 8
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %359

358:                                              ; preds = %351
  store i32 14, i32* %7, align 8
  br label %359

359:                                              ; preds = %358, %351
  %360 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %360, align 8
  br label %396

361:                                              ; preds = %346
  %362 = icmp ult i8* %348, %347
  br i1 %362, label %363, label %396

363:                                              ; preds = %361
  %364 = load i8, i8* %348, align 1
  %365 = icmp eq i8 %364, 124
  br i1 %365, label %366, label %396

366:                                              ; preds = %363
  %367 = getelementptr inbounds i8, i8* %348, i64 1
  store i8* %367, i8** %5, align 8
  %368 = icmp eq i32 %38, 0
  br i1 %368, label %373, label %369

369:                                              ; preds = %366
  %370 = sub i64 1, %37
  %371 = add i64 %370, %349
  call fastcc void @doinsert(%struct.parse* %0, i64 2013265920, i64 %371, i64 %37) #16
  %372 = load i64, i64* %4, align 8
  br label %373

373:                                              ; preds = %366, %369
  %374 = phi i64 [ %372, %369 ], [ %349, %366 ]
  %375 = phi i64 [ %37, %369 ], [ %40, %366 ]
  %376 = phi i64 [ %37, %369 ], [ %39, %366 ]
  %377 = sub nsw i64 %374, %375
  call fastcc void @doemit(%struct.parse* %0, i64 2147483648, i64 %377) #16
  %378 = load i64, i64* %4, align 8
  %379 = add nsw i64 %378, -1
  %380 = load i32, i32* %7, align 8
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %390

382:                                              ; preds = %373
  %383 = sub nsw i64 %378, %376
  %384 = load i64*, i64** %15, align 8
  %385 = getelementptr inbounds i64, i64* %384, i64 %376
  %386 = load i64, i64* %385, align 8
  %387 = and i64 %386, 4160749568
  %388 = or i64 %387, %383
  store i64 %388, i64* %385, align 8
  %389 = load i64, i64* %4, align 8
  br label %390

390:                                              ; preds = %373, %382
  %391 = phi i64 [ %378, %373 ], [ %389, %382 ]
  call fastcc void @doemit(%struct.parse* %0, i64 2281701376, i64 0) #16
  %392 = load i64, i64* %4, align 8
  %393 = load i8*, i8** %5, align 8
  %394 = load i8*, i8** %6, align 8
  %395 = icmp ult i8* %393, %394
  br i1 %395, label %34, label %351

396:                                              ; preds = %363, %361, %359
  %397 = phi i64 [ %352, %359 ], [ %40, %361 ], [ %40, %363 ]
  %398 = phi i64 [ %353, %359 ], [ %39, %361 ], [ %39, %363 ]
  %399 = phi i32 [ %354, %359 ], [ %38, %361 ], [ %38, %363 ]
  %400 = phi i64 [ %355, %359 ], [ %349, %361 ], [ %349, %363 ]
  %401 = icmp eq i32 %399, 0
  br i1 %401, label %402, label %416

402:                                              ; preds = %396
  %403 = load i32, i32* %7, align 8
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %405, label %413

405:                                              ; preds = %402
  %406 = sub nsw i64 %400, %398
  %407 = load i64*, i64** %15, align 8
  %408 = getelementptr inbounds i64, i64* %407, i64 %398
  %409 = load i64, i64* %408, align 8
  %410 = and i64 %409, 4160749568
  %411 = or i64 %410, %406
  store i64 %411, i64* %408, align 8
  %412 = load i64, i64* %4, align 8
  br label %413

413:                                              ; preds = %402, %405
  %414 = phi i64 [ %400, %402 ], [ %412, %405 ]
  %415 = sub nsw i64 %414, %397
  call fastcc void @doemit(%struct.parse* %0, i64 2415919104, i64 %415) #16
  br label %416

416:                                              ; preds = %396, %413
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @p_bre(%struct.parse*, i32, i32) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i8* %8, %10
  %12 = ptrtoint i8* %10 to i64
  br i1 %11, label %13, label %30

13:                                               ; preds = %3
  %14 = load i8, i8* %8, align 1
  %15 = icmp eq i8 %14, 94
  br i1 %15, label %16, label %30

16:                                               ; preds = %13
  %17 = getelementptr inbounds i8, i8* %8, i64 1
  store i8* %17, i8** %7, align 8
  tail call fastcc void @doemit(%struct.parse* %0, i64 402653184, i64 0) #16
  %18 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %19 = load %struct.re_guts*, %struct.re_guts** %18, align 8
  %20 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %19, i64 0, i32 10
  %21 = load i32, i32* %20, align 8
  %22 = or i32 %21, 1
  store i32 %22, i32* %20, align 8
  %23 = load %struct.re_guts*, %struct.re_guts** %18, align 8
  %24 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %23, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %24, align 4
  %27 = load i8*, i8** %7, align 8
  %28 = load i8*, i8** %9, align 8
  %29 = ptrtoint i8* %28 to i64
  br label %30

30:                                               ; preds = %3, %13, %16
  %31 = phi i64 [ %12, %3 ], [ %12, %13 ], [ %29, %16 ]
  %32 = phi i8* [ %10, %3 ], [ %10, %13 ], [ %28, %16 ]
  %33 = phi i8* [ %8, %3 ], [ %8, %13 ], [ %27, %16 ]
  %34 = icmp ult i8* %33, %32
  br i1 %34, label %35, label %316

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %37 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %38 = bitcast i32* %4 to [4 x i8]*
  %39 = bitcast %struct.parse* %0 to i64*
  %40 = bitcast i8** %9 to i64*
  %41 = bitcast i32* %4 to i8*
  %42 = getelementptr inbounds [4 x i8], [4 x i8]* %38, i64 0, i64 3
  %43 = bitcast %struct.parse* %0 to i32**
  %44 = bitcast %struct.parse* %0 to <2 x i8*>*
  %45 = bitcast %struct.parse* %0 to <2 x i8*>*
  %46 = bitcast %struct.parse* %0 to <2 x i8*>*
  %47 = bitcast %struct.parse* %0 to <2 x i8*>*
  %48 = bitcast %struct.parse* %0 to <2 x i8*>*
  %49 = bitcast %struct.parse* %0 to <2 x i8*>*
  %50 = bitcast %struct.parse* %0 to <2 x i8*>*
  %51 = bitcast %struct.parse* %0 to <2 x i8*>*
  %52 = bitcast %struct.parse* %0 to <2 x i8*>*
  br label %53

53:                                               ; preds = %35, %295
  %54 = phi i64 [ %31, %35 ], [ %300, %295 ]
  %55 = phi i8* [ %32, %35 ], [ %296, %295 ]
  %56 = phi i8* [ %33, %35 ], [ %297, %295 ]
  %57 = phi i32 [ 0, %35 ], [ %298, %295 ]
  %58 = phi i32 [ 1, %35 ], [ 0, %295 ]
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  %60 = icmp ult i8* %59, %55
  br i1 %60, label %61, label %69

61:                                               ; preds = %53
  %62 = load i8, i8* %56, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, %1
  br i1 %64, label %65, label %69

65:                                               ; preds = %61
  %66 = load i8, i8* %59, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp eq i32 %67, %2
  br i1 %68, label %301, label %69

69:                                               ; preds = %53, %61, %65
  %70 = load i64, i64* %5, align 8
  store i8* %59, i8** %7, align 8
  %71 = load i8, i8* %56, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp eq i8 %71, 92
  br i1 %73, label %74, label %87

74:                                               ; preds = %69
  br i1 %60, label %80, label %75

75:                                               ; preds = %74
  %76 = load i32, i32* %36, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  store i32 5, i32* %36, align 8
  br label %79

79:                                               ; preds = %78, %75
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %44, align 8
  br label %80

80:                                               ; preds = %79, %74
  %81 = phi i64 [ ptrtoint ([10 x i8]* @nuls to i64), %79 ], [ %54, %74 ]
  %82 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %79 ], [ %59, %74 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  store i8* %83, i8** %7, align 8
  %84 = load i8, i8* %82, align 1
  %85 = sext i8 %84 to i32
  %86 = or i32 %85, 256
  br label %87

87:                                               ; preds = %80, %69
  %88 = phi i64 [ %81, %80 ], [ %54, %69 ]
  %89 = phi i8* [ %83, %80 ], [ %59, %69 ]
  %90 = phi i32 [ %86, %80 ], [ %72, %69 ]
  %91 = ptrtoint i8* %89 to i64
  switch i32 %90, label %189 [
    i32 46, label %92
    i32 91, label %100
    i32 379, label %101
    i32 296, label %106
    i32 297, label %156
    i32 381, label %156
    i32 305, label %161
    i32 306, label %161
    i32 307, label %161
    i32 308, label %161
    i32 309, label %161
    i32 310, label %161
    i32 311, label %161
    i32 312, label %161
    i32 313, label %161
    i32 42, label %182
  ]

92:                                               ; preds = %87
  %93 = load %struct.re_guts*, %struct.re_guts** %37, align 8
  %94 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %93, i64 0, i32 6
  %95 = load i32, i32* %94, align 8
  %96 = and i32 %95, 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %99, label %98

98:                                               ; preds = %92
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #13
  store i32 6097502, i32* %4, align 4
  store i32* %4, i32** %43, align 8
  store i8* %42, i8** %9, align 8
  call fastcc void @p_bracket(%struct.parse* %0) #15
  store i64 %91, i64* %39, align 8
  store i64 %88, i64* %40, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #13
  br label %192

99:                                               ; preds = %92
  call fastcc void @doemit(%struct.parse* %0, i64 671088640, i64 0) #15
  br label %192

100:                                              ; preds = %87
  call fastcc void @p_bracket(%struct.parse* %0) #15
  br label %192

101:                                              ; preds = %87
  %102 = load i32, i32* %36, align 8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  store i32 13, i32* %36, align 8
  br label %105

105:                                              ; preds = %104, %101
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %49, align 8
  br label %192

106:                                              ; preds = %87
  %107 = load %struct.re_guts*, %struct.re_guts** %37, align 8
  %108 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %107, i64 0, i32 17
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %108, align 8
  %111 = load %struct.re_guts*, %struct.re_guts** %37, align 8
  %112 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %111, i64 0, i32 17
  %113 = load i64, i64* %112, align 8
  %114 = icmp slt i64 %113, 10
  br i1 %114, label %115, label %118

115:                                              ; preds = %106
  %116 = load i64, i64* %5, align 8
  %117 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 8, i64 %113
  store i64 %116, i64* %117, align 8
  br label %118

118:                                              ; preds = %115, %106
  call fastcc void @doemit(%struct.parse* %0, i64 1744830464, i64 %113) #15
  %119 = load i8*, i8** %7, align 8
  %120 = load i8*, i8** %9, align 8
  %121 = icmp ult i8* %119, %120
  br i1 %121, label %122, label %132

122:                                              ; preds = %118
  %123 = getelementptr inbounds i8, i8* %119, i64 1
  %124 = icmp ult i8* %123, %120
  br i1 %124, label %125, label %131

125:                                              ; preds = %122
  %126 = load i8, i8* %119, align 1
  %127 = icmp eq i8 %126, 92
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = load i8, i8* %123, align 1
  %130 = icmp eq i8 %129, 41
  br i1 %130, label %132, label %131

131:                                              ; preds = %128, %125, %122
  call fastcc void @p_bre(%struct.parse* %0, i32 92, i32 41) #15
  br label %132

132:                                              ; preds = %131, %128, %118
  br i1 %114, label %133, label %136

133:                                              ; preds = %132
  %134 = load i64, i64* %5, align 8
  %135 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 9, i64 %113
  store i64 %134, i64* %135, align 8
  br label %136

136:                                              ; preds = %133, %132
  call fastcc void @doemit(%struct.parse* %0, i64 1879048192, i64 %113) #15
  %137 = load i8*, i8** %7, align 8
  %138 = load i8*, i8** %9, align 8
  %139 = icmp ult i8* %137, %138
  br i1 %139, label %140, label %151

140:                                              ; preds = %136
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  %142 = icmp ult i8* %141, %138
  br i1 %142, label %143, label %151

143:                                              ; preds = %140
  %144 = load i8, i8* %137, align 1
  %145 = icmp eq i8 %144, 92
  br i1 %145, label %146, label %151

146:                                              ; preds = %143
  %147 = load i8, i8* %141, align 1
  %148 = icmp eq i8 %147, 41
  br i1 %148, label %149, label %151

149:                                              ; preds = %146
  %150 = getelementptr inbounds i8, i8* %137, i64 2
  store i8* %150, i8** %7, align 8
  br label %192

151:                                              ; preds = %146, %143, %140, %136
  %152 = load i32, i32* %36, align 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %151
  store i32 8, i32* %36, align 8
  br label %155

155:                                              ; preds = %154, %151
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %48, align 8
  br label %192

156:                                              ; preds = %87, %87
  %157 = load i32, i32* %36, align 8
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  store i32 8, i32* %36, align 8
  br label %160

160:                                              ; preds = %159, %156
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %47, align 8
  br label %192

161:                                              ; preds = %87, %87, %87, %87, %87, %87, %87, %87, %87
  %162 = and i32 %90, -257
  %163 = add nsw i32 %162, -48
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 9, i64 %164
  %166 = load i64, i64* %165, align 8
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %174, label %168

168:                                              ; preds = %161
  call fastcc void @doemit(%struct.parse* %0, i64 939524096, i64 %164) #15
  %169 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 8, i64 %164
  %170 = load i64, i64* %169, align 8
  %171 = add nsw i64 %170, 1
  %172 = load i64, i64* %165, align 8
  %173 = call fastcc i64 @dupl(%struct.parse* %0, i64 %171, i64 %172) #15
  call fastcc void @doemit(%struct.parse* %0, i64 1073741824, i64 %164) #15
  br label %179

174:                                              ; preds = %161
  %175 = load i32, i32* %36, align 8
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  store i32 6, i32* %36, align 8
  br label %178

178:                                              ; preds = %177, %174
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %46, align 8
  br label %179

179:                                              ; preds = %178, %168
  %180 = load %struct.re_guts*, %struct.re_guts** %37, align 8
  %181 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %180, i64 0, i32 18
  store i32 1, i32* %181, align 8
  br label %192

182:                                              ; preds = %87
  %183 = icmp eq i32 %58, 0
  br i1 %183, label %184, label %189

184:                                              ; preds = %182
  %185 = load i32, i32* %36, align 8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %184
  store i32 13, i32* %36, align 8
  br label %188

188:                                              ; preds = %187, %184
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %45, align 8
  br label %189

189:                                              ; preds = %188, %182, %87
  %190 = shl i32 %90, 24
  %191 = ashr exact i32 %190, 24
  call fastcc void @ordinary(%struct.parse* %0, i32 %191) #15
  br label %192

192:                                              ; preds = %189, %179, %160, %155, %149, %105, %100, %99, %98
  %193 = load i8*, i8** %7, align 8
  %194 = load i8*, i8** %9, align 8
  %195 = icmp ult i8* %193, %194
  br i1 %195, label %196, label %290

196:                                              ; preds = %192
  %197 = load i8, i8* %193, align 1
  %198 = icmp eq i8 %197, 42
  %199 = getelementptr inbounds i8, i8* %193, i64 1
  br i1 %198, label %200, label %212

200:                                              ; preds = %196
  store i8* %199, i8** %7, align 8
  %201 = load i64, i64* %5, align 8
  %202 = sub i64 1, %70
  %203 = add i64 %202, %201
  call fastcc void @doinsert(%struct.parse* %0, i64 1207959552, i64 %203, i64 %70) #15
  %204 = load i64, i64* %5, align 8
  %205 = sub nsw i64 %204, %70
  call fastcc void @doemit(%struct.parse* %0, i64 1342177280, i64 %205) #15
  %206 = load i64, i64* %5, align 8
  %207 = add i64 %202, %206
  call fastcc void @doinsert(%struct.parse* %0, i64 1476395008, i64 %207, i64 %70) #15
  %208 = load i64, i64* %5, align 8
  %209 = sub nsw i64 %208, %70
  call fastcc void @doemit(%struct.parse* %0, i64 1610612736, i64 %209) #15
  %210 = load i8*, i8** %7, align 8
  %211 = load i8*, i8** %9, align 8
  br label %292

212:                                              ; preds = %196
  %213 = icmp ult i8* %199, %194
  %214 = icmp eq i8 %197, 92
  %215 = and i1 %213, %214
  br i1 %215, label %216, label %290

216:                                              ; preds = %212
  %217 = load i8, i8* %199, align 1
  %218 = icmp eq i8 %217, 123
  br i1 %218, label %219, label %290

219:                                              ; preds = %216
  %220 = getelementptr inbounds i8, i8* %193, i64 2
  store i8* %220, i8** %7, align 8
  %221 = call fastcc i32 @p_count(%struct.parse* %0) #15
  %222 = load i8*, i8** %7, align 8
  %223 = load i8*, i8** %9, align 8
  %224 = icmp ult i8* %222, %223
  br i1 %224, label %225, label %248

225:                                              ; preds = %219
  %226 = load i8, i8* %222, align 1
  %227 = icmp eq i8 %226, 44
  br i1 %227, label %228, label %248

228:                                              ; preds = %225
  %229 = getelementptr inbounds i8, i8* %222, i64 1
  store i8* %229, i8** %7, align 8
  %230 = icmp ult i8* %229, %223
  br i1 %230, label %231, label %248

231:                                              ; preds = %228
  %232 = tail call i16** @__ctype_b_loc() #17
  %233 = load i16*, i16** %232, align 8
  %234 = load i8, i8* %229, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds i16, i16* %233, i64 %235
  %237 = load i16, i16* %236, align 2
  %238 = and i16 %237, 2048
  %239 = icmp eq i16 %238, 0
  br i1 %239, label %248, label %240

240:                                              ; preds = %231
  %241 = call fastcc i32 @p_count(%struct.parse* %0) #15
  %242 = icmp sgt i32 %221, %241
  br i1 %242, label %243, label %248

243:                                              ; preds = %240
  %244 = load i32, i32* %36, align 8
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %243
  store i32 10, i32* %36, align 8
  br label %247

247:                                              ; preds = %246, %243
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %50, align 8
  br label %248

248:                                              ; preds = %247, %240, %231, %228, %225, %219
  %249 = phi i32 [ %241, %240 ], [ %241, %247 ], [ 256, %231 ], [ 256, %228 ], [ %221, %219 ], [ %221, %225 ]
  call fastcc void @repeat(%struct.parse* %0, i64 %70, i32 %221, i32 %249) #15
  %250 = load i8*, i8** %7, align 8
  %251 = load i8*, i8** %9, align 8
  %252 = icmp ult i8* %250, %251
  br i1 %252, label %253, label %280

253:                                              ; preds = %248
  %254 = getelementptr inbounds i8, i8* %250, i64 1
  %255 = icmp ult i8* %254, %251
  br i1 %255, label %256, label %264

256:                                              ; preds = %253
  %257 = load i8, i8* %250, align 1
  %258 = icmp eq i8 %257, 92
  br i1 %258, label %259, label %264

259:                                              ; preds = %256
  %260 = load i8, i8* %254, align 1
  %261 = icmp eq i8 %260, 125
  br i1 %261, label %262, label %264

262:                                              ; preds = %259
  %263 = getelementptr inbounds i8, i8* %250, i64 2
  store i8* %263, i8** %7, align 8
  br label %292

264:                                              ; preds = %259, %256, %253
  %265 = getelementptr inbounds i8, i8* %250, i64 1
  %266 = icmp ult i8* %265, %251
  br i1 %266, label %267, label %278

267:                                              ; preds = %264, %275
  %268 = phi i8* [ %276, %275 ], [ %265, %264 ]
  %269 = phi i8* [ %268, %275 ], [ %250, %264 ]
  %270 = load i8, i8* %269, align 1
  %271 = icmp eq i8 %270, 92
  br i1 %271, label %272, label %275

272:                                              ; preds = %267
  %273 = load i8, i8* %268, align 1
  %274 = icmp eq i8 %273, 125
  br i1 %274, label %285, label %275

275:                                              ; preds = %272, %267
  store i8* %268, i8** %7, align 8
  %276 = getelementptr inbounds i8, i8* %268, i64 1
  %277 = icmp ult i8* %276, %251
  br i1 %277, label %267, label %278

278:                                              ; preds = %275, %264
  %279 = phi i8* [ %265, %264 ], [ %276, %275 ]
  store i8* %279, i8** %7, align 8
  br label %280

280:                                              ; preds = %248, %278
  %281 = load i32, i32* %36, align 8
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %284

283:                                              ; preds = %280
  store i32 9, i32* %36, align 8
  br label %284

284:                                              ; preds = %280, %283
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %51, align 8
  br label %289

285:                                              ; preds = %272
  %286 = load i32, i32* %36, align 8
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %289

288:                                              ; preds = %285
  store i32 10, i32* %36, align 8
  br label %289

289:                                              ; preds = %284, %288, %285
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %52, align 8
  br label %292

290:                                              ; preds = %192, %216, %212
  %291 = icmp eq i32 %90, 36
  br i1 %291, label %295, label %292

292:                                              ; preds = %290, %289, %262, %200
  %293 = phi i8* [ %194, %290 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %289 ], [ %251, %262 ], [ %211, %200 ]
  %294 = phi i8* [ %193, %290 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %289 ], [ %263, %262 ], [ %210, %200 ]
  br label %295

295:                                              ; preds = %290, %292
  %296 = phi i8* [ %293, %292 ], [ %194, %290 ]
  %297 = phi i8* [ %294, %292 ], [ %193, %290 ]
  %298 = phi i32 [ 0, %292 ], [ 1, %290 ]
  %299 = icmp ult i8* %297, %296
  %300 = ptrtoint i8* %296 to i64
  br i1 %299, label %53, label %301

301:                                              ; preds = %295, %65
  %302 = phi i32 [ %298, %295 ], [ %57, %65 ]
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %316, label %304

304:                                              ; preds = %301
  %305 = load i64, i64* %5, align 8
  %306 = add nsw i64 %305, -1
  store i64 %306, i64* %5, align 8
  call fastcc void @doemit(%struct.parse* %0, i64 536870912, i64 0) #16
  %307 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %308 = load %struct.re_guts*, %struct.re_guts** %307, align 8
  %309 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %308, i64 0, i32 10
  %310 = load i32, i32* %309, align 8
  %311 = or i32 %310, 2
  store i32 %311, i32* %309, align 8
  %312 = load %struct.re_guts*, %struct.re_guts** %307, align 8
  %313 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %312, i64 0, i32 12
  %314 = load i32, i32* %313, align 8
  %315 = add nsw i32 %314, 1
  store i32 %315, i32* %313, align 8
  br label %316

316:                                              ; preds = %30, %301, %304
  %317 = load i64, i64* %5, align 8
  %318 = icmp eq i64 %317, %6
  br i1 %318, label %319, label %326

319:                                              ; preds = %316
  %320 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %321 = load i32, i32* %320, align 8
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %324

323:                                              ; preds = %319
  store i32 14, i32* %320, align 8
  br label %324

324:                                              ; preds = %319, %323
  %325 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %325, align 8
  br label %326

326:                                              ; preds = %316, %324
  ret void
}

; Function Attrs: optsize
declare void @llvm_regfree(%struct.llvm_regex*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @doinsert(%struct.parse* nocapture, i64, i64, i64) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %43

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %10 = load i64, i64* %9, align 8
  tail call fastcc void @doemit(%struct.parse* %0, i64 %1, i64 %2) #16
  %11 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  %12 = load i64*, i64** %11, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 %10
  %14 = load i64, i64* %13, align 8
  br label %15

15:                                               ; preds = %28, %8
  %16 = phi i64 [ 1, %8 ], [ %29, %28 ]
  %17 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 8, i64 %16
  %18 = load i64, i64* %17, align 8
  %19 = icmp slt i64 %18, %3
  br i1 %19, label %22, label %20

20:                                               ; preds = %15
  %21 = add nsw i64 %18, 1
  store i64 %21, i64* %17, align 8
  br label %22

22:                                               ; preds = %15, %20
  %23 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 9, i64 %16
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %24, %3
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = add nsw i64 %24, 1
  store i64 %27, i64* %23, align 8
  br label %28

28:                                               ; preds = %22, %26
  %29 = add nuw nsw i64 %16, 1
  %30 = icmp eq i64 %29, 10
  br i1 %30, label %31, label %15

31:                                               ; preds = %28
  %32 = add nsw i64 %3, 1
  %33 = getelementptr inbounds i64, i64* %12, i64 %32
  %34 = bitcast i64* %33 to i8*
  %35 = getelementptr inbounds i64, i64* %12, i64 %3
  %36 = bitcast i64* %35 to i8*
  %37 = load i64, i64* %9, align 8
  %38 = xor i64 %3, 2305843009213693951
  %39 = add i64 %37, %38
  %40 = shl i64 %39, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %36, i64 %40, i1 false)
  %41 = load i64*, i64** %11, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 %3
  store i64 %14, i64* %42, align 8
  br label %43

43:                                               ; preds = %4, %31
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @p_bracket(%struct.parse*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 5
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %20

8:                                                ; preds = %1
  %9 = tail call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #14
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  tail call fastcc void @doemit(%struct.parse* %0, i64 2550136832, i64 0) #16
  %12 = load i8*, i8** %2, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 6
  store i8* %13, i8** %2, align 8
  br label %674

14:                                               ; preds = %8
  %15 = tail call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i64 6) #14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  tail call fastcc void @doemit(%struct.parse* %0, i64 2684354560, i64 0) #16
  %18 = load i8*, i8** %2, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 6
  store i8* %19, i8** %2, align 8
  br label %674

20:                                               ; preds = %1, %14
  %21 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %22 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %23 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %22, i64 0, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 4
  %26 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %27 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = icmp slt i32 %24, %31
  br i1 %32, label %85, label %33

33:                                               ; preds = %20
  %34 = add nsw i32 %31, 8
  store i32 %34, i32* %30, align 8
  %35 = sext i32 %34 to i64
  %36 = icmp slt i32 %34, 0
  br i1 %36, label %94, label %37

37:                                               ; preds = %33
  %38 = lshr i64 %35, 3
  %39 = mul i64 %38, %29
  %40 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %26, i64 0, i32 4
  %41 = bitcast %struct.cset** %40 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = shl nsw i64 %35, 5
  %44 = tail call i8* @realloc(i8* %42, i64 %43) #15
  %45 = icmp eq i8* %44, null
  br i1 %45, label %94, label %46

46:                                               ; preds = %37
  %47 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %48 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %47, i64 0, i32 4
  %49 = bitcast %struct.cset** %48 to i8**
  store i8* %44, i8** %49, align 8
  %50 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %51 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %50, i64 0, i32 5
  %52 = load i8*, i8** %51, align 8
  %53 = tail call i8* @realloc(i8* %52, i64 %39) #15
  %54 = icmp eq i8* %53, null
  br i1 %54, label %94, label %55

55:                                               ; preds = %46
  %56 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %57 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %56, i64 0, i32 5
  store i8* %53, i8** %57, align 8
  %58 = icmp sgt i32 %24, 0
  %59 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %60 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %59, i64 0, i32 5
  %61 = load i8*, i8** %60, align 8
  br i1 %58, label %62, label %80

62:                                               ; preds = %55
  %63 = zext i32 %24 to i64
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %75, %64 ]
  %66 = phi i8* [ %61, %62 ], [ %78, %64 ]
  %67 = phi %struct.re_guts* [ %59, %62 ], [ %76, %64 ]
  %68 = lshr i64 %65, 3
  %69 = and i64 %68, 536870911
  %70 = mul nsw i64 %69, %29
  %71 = getelementptr inbounds i8, i8* %66, i64 %70
  %72 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %67, i64 0, i32 4
  %73 = load %struct.cset*, %struct.cset** %72, align 8
  %74 = getelementptr inbounds %struct.cset, %struct.cset* %73, i64 %65, i32 0
  store i8* %71, i8** %74, align 8
  %75 = add nuw nsw i64 %65, 1
  %76 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %77 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %76, i64 0, i32 5
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i64 %75, %63
  br i1 %79, label %80, label %64

80:                                               ; preds = %64, %55
  %81 = phi i8* [ %61, %55 ], [ %78, %64 ]
  %82 = sub i64 %39, %29
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 0, i64 %29, i1 false) #13
  %84 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  br label %85

85:                                               ; preds = %80, %20
  %86 = phi %struct.re_guts* [ %84, %80 ], [ %26, %20 ]
  %87 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %86, i64 0, i32 4
  %88 = load %struct.cset*, %struct.cset** %87, align 8
  %89 = icmp eq %struct.cset* %88, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %86, i64 0, i32 5
  %92 = load i8*, i8** %91, align 8
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %112

94:                                               ; preds = %90, %85, %46, %37, %33
  %95 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %96 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %95, i64 0, i32 4
  %97 = bitcast %struct.cset** %96 to i8**
  %98 = load i8*, i8** %97, align 8
  tail call void @free(i8* %98) #15
  %99 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %100 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %99, i64 0, i32 4
  store %struct.cset* null, %struct.cset** %100, align 8
  %101 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %102 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %101, i64 0, i32 5
  %103 = load i8*, i8** %102, align 8
  tail call void @free(i8* %103) #15
  %104 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %105 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %104, i64 0, i32 5
  store i8* null, i8** %105, align 8
  %106 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %94
  store i32 12, i32* %106, align 8
  br label %110

110:                                              ; preds = %94, %109
  %111 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %111, align 8
  br label %674

112:                                              ; preds = %90
  %113 = sext i32 %24 to i64
  %114 = getelementptr inbounds %struct.cset, %struct.cset* %88, i64 %113
  %115 = sdiv i32 %24, 8
  %116 = sext i32 %115 to i64
  %117 = mul nsw i64 %29, %116
  %118 = getelementptr inbounds i8, i8* %92, i64 %117
  %119 = getelementptr inbounds %struct.cset, %struct.cset* %114, i64 0, i32 0
  store i8* %118, i8** %119, align 8
  %120 = and i32 %24, 7
  %121 = shl i32 1, %120
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds %struct.cset, %struct.cset* %88, i64 %113, i32 1
  store i8 %122, i8* %123, align 8
  %124 = getelementptr inbounds %struct.cset, %struct.cset* %88, i64 %113, i32 2
  store i8 0, i8* %124, align 1
  %125 = getelementptr inbounds %struct.cset, %struct.cset* %88, i64 %113, i32 3
  %126 = bitcast i64* %125 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 16, i1 false) #13
  %127 = icmp eq %struct.cset* %114, null
  br i1 %127, label %674, label %128

128:                                              ; preds = %112
  %129 = load i8*, i8** %2, align 8
  %130 = load i8*, i8** %5, align 8
  %131 = icmp ult i8* %129, %130
  br i1 %131, label %132, label %137

132:                                              ; preds = %128
  %133 = load i8, i8* %129, align 1
  %134 = icmp eq i8 %133, 94
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  %136 = getelementptr inbounds i8, i8* %129, i64 1
  store i8* %136, i8** %2, align 8
  br label %137

137:                                              ; preds = %128, %132, %135
  %138 = phi i8* [ %136, %135 ], [ %129, %132 ], [ %129, %128 ]
  %139 = phi i32 [ 1, %135 ], [ 0, %132 ], [ 0, %128 ]
  %140 = icmp ult i8* %138, %130
  br i1 %140, label %141, label %161

141:                                              ; preds = %137
  %142 = load i8, i8* %138, align 1
  switch i8 %142, label %161 [
    i8 93, label %143
    i8 45, label %152
  ]

143:                                              ; preds = %141
  %144 = getelementptr inbounds i8, i8* %138, i64 1
  store i8* %144, i8** %2, align 8
  %145 = load i8, i8* %123, align 8
  %146 = load i8*, i8** %119, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 93
  %148 = load i8, i8* %147, align 1
  %149 = or i8 %148, %145
  store i8 %149, i8* %147, align 1
  %150 = load i8, i8* %124, align 1
  %151 = add i8 %150, 93
  store i8 %151, i8* %124, align 1
  br label %161

152:                                              ; preds = %141
  %153 = getelementptr inbounds i8, i8* %138, i64 1
  store i8* %153, i8** %2, align 8
  %154 = load i8, i8* %123, align 8
  %155 = load i8*, i8** %119, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 45
  %157 = load i8, i8* %156, align 1
  %158 = or i8 %157, %154
  store i8 %158, i8* %156, align 1
  %159 = load i8, i8* %124, align 1
  %160 = add i8 %159, 45
  store i8 %160, i8* %124, align 1
  br label %161

161:                                              ; preds = %141, %137, %152, %143
  %162 = load i8*, i8** %2, align 8
  %163 = load i8*, i8** %5, align 8
  %164 = icmp ult i8* %162, %163
  br i1 %164, label %165, label %465

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %167 = getelementptr inbounds %struct.cset, %struct.cset* %88, i64 %113, i32 4
  %168 = bitcast %struct.parse* %0 to <2 x i8*>*
  %169 = bitcast %struct.parse* %0 to <2 x i8*>*
  %170 = bitcast %struct.parse* %0 to <2 x i8*>*
  %171 = bitcast %struct.parse* %0 to <2 x i8*>*
  %172 = bitcast %struct.parse* %0 to <2 x i8*>*
  %173 = bitcast %struct.parse* %0 to <2 x i8*>*
  br label %174

174:                                              ; preds = %165, %451
  %175 = phi i8* [ %163, %165 ], [ %452, %451 ]
  %176 = phi i8* [ %162, %165 ], [ %453, %451 ]
  %177 = load i8, i8* %176, align 1
  %178 = icmp eq i8 %177, 93
  br i1 %178, label %465, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds i8, i8* %176, i64 1
  %181 = icmp ult i8* %180, %175
  %182 = icmp eq i8 %177, 45
  %183 = and i1 %181, %182
  br i1 %183, label %184, label %187

184:                                              ; preds = %179
  %185 = load i8, i8* %180, align 1
  %186 = icmp eq i8 %185, 93
  br i1 %186, label %455, label %187

187:                                              ; preds = %184, %179
  %188 = sext i8 %177 to i32
  switch i32 %188, label %397 [
    i32 91, label %189
    i32 45, label %190
  ]

189:                                              ; preds = %187
  br i1 %181, label %196, label %397

190:                                              ; preds = %187
  %191 = load i32, i32* %166, align 8
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  store i32 11, i32* %166, align 8
  br label %194

194:                                              ; preds = %193, %190
  %195 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %195, align 8
  br label %473

196:                                              ; preds = %189
  %197 = load i8, i8* %180, align 1
  %198 = sext i8 %197 to i32
  switch i32 %198, label %397 [
    i32 58, label %199
    i32 61, label %345
  ]

199:                                              ; preds = %196
  %200 = getelementptr inbounds i8, i8* %176, i64 2
  store i8* %200, i8** %2, align 8
  %201 = icmp ult i8* %200, %175
  br i1 %201, label %207, label %202

202:                                              ; preds = %199
  %203 = load i32, i32* %166, align 8
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  store i32 7, i32* %166, align 8
  br label %206

206:                                              ; preds = %205, %202
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %170, align 8
  br label %207

207:                                              ; preds = %206, %199
  %208 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %206 ], [ %175, %199 ]
  %209 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %206 ], [ %200, %199 ]
  %210 = load i8, i8* %209, align 1
  switch i8 %210, label %216 [
    i8 45, label %211
    i8 93, label %211
  ]

211:                                              ; preds = %207, %207
  %212 = load i32, i32* %166, align 8
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  store i32 4, i32* %166, align 8
  br label %215

215:                                              ; preds = %214, %211
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %171, align 8
  br label %238

216:                                              ; preds = %207
  %217 = icmp ult i8* %209, %208
  br i1 %217, label %218, label %238

218:                                              ; preds = %216
  %219 = tail call i16** @__ctype_b_loc() #17
  %220 = load i16*, i16** %219, align 8
  %221 = zext i8 %210 to i64
  %222 = getelementptr inbounds i16, i16* %220, i64 %221
  %223 = load i16, i16* %222, align 2
  %224 = and i16 %223, 1024
  %225 = icmp eq i16 %224, 0
  br i1 %225, label %238, label %226

226:                                              ; preds = %218, %230
  %227 = phi i8* [ %228, %230 ], [ %209, %218 ]
  %228 = getelementptr inbounds i8, i8* %227, i64 1
  store i8* %228, i8** %2, align 8
  %229 = icmp eq i8* %228, %208
  br i1 %229, label %238, label %230

230:                                              ; preds = %226
  %231 = load i8, i8* %228, align 1
  %232 = load i16*, i16** %219, align 8
  %233 = zext i8 %231 to i64
  %234 = getelementptr inbounds i16, i16* %232, i64 %233
  %235 = load i16, i16* %234, align 2
  %236 = and i16 %235, 1024
  %237 = icmp eq i16 %236, 0
  br i1 %237, label %238, label %226

238:                                              ; preds = %230, %226, %218, %216, %215
  %239 = phi i8* [ %209, %216 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %215 ], [ %209, %218 ], [ %209, %226 ], [ %209, %230 ]
  %240 = phi i8* [ %209, %216 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %215 ], [ %209, %218 ], [ %228, %230 ], [ %208, %226 ]
  %241 = ptrtoint i8* %240 to i64
  %242 = ptrtoint i8* %239 to i64
  %243 = sub i64 %241, %242
  br label %244

244:                                              ; preds = %253, %238
  %245 = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), %238 ], [ %256, %253 ]
  %246 = phi %struct.cclass* [ getelementptr inbounds ([13 x %struct.cclass], [13 x %struct.cclass]* @cclasses, i64 0, i64 0), %238 ], [ %254, %253 ]
  %247 = tail call i32 @strncmp(i8* nonnull %245, i8* %239, i64 %243) #14
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %253

249:                                              ; preds = %244
  %250 = getelementptr inbounds i8, i8* %245, i64 %243
  %251 = load i8, i8* %250, align 1
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %249, %244
  %254 = getelementptr inbounds %struct.cclass, %struct.cclass* %246, i64 1
  %255 = getelementptr inbounds %struct.cclass, %struct.cclass* %254, i64 0, i32 0
  %256 = load i8*, i8** %255, align 8
  %257 = icmp eq i8* %256, null
  br i1 %257, label %258, label %244

258:                                              ; preds = %253
  %259 = load i32, i32* %166, align 8
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  store i32 4, i32* %166, align 8
  br label %262

262:                                              ; preds = %261, %258
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %172, align 8
  br label %318

263:                                              ; preds = %249
  %264 = getelementptr inbounds %struct.cclass, %struct.cclass* %246, i64 0, i32 1
  %265 = load i8*, i8** %264, align 8
  %266 = load i8, i8* %265, align 1
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %282, label %268

268:                                              ; preds = %263, %268
  %269 = phi i8 [ %280, %268 ], [ %266, %263 ]
  %270 = phi i8* [ %271, %268 ], [ %265, %263 ]
  %271 = getelementptr inbounds i8, i8* %270, i64 1
  %272 = load i8, i8* %123, align 8
  %273 = load i8*, i8** %119, align 8
  %274 = zext i8 %269 to i64
  %275 = getelementptr inbounds i8, i8* %273, i64 %274
  %276 = load i8, i8* %275, align 1
  %277 = or i8 %276, %272
  store i8 %277, i8* %275, align 1
  %278 = load i8, i8* %124, align 1
  %279 = add i8 %278, %269
  store i8 %279, i8* %124, align 1
  %280 = load i8, i8* %271, align 1
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %282, label %268

282:                                              ; preds = %268, %263
  %283 = getelementptr inbounds %struct.cclass, %struct.cclass* %246, i64 0, i32 2
  %284 = load i8*, i8** %283, align 8
  %285 = load i8, i8* %284, align 1
  %286 = icmp eq i8 %285, 0
  br i1 %286, label %318, label %287

287:                                              ; preds = %282, %312
  %288 = phi i8* [ %315, %312 ], [ %284, %282 ]
  %289 = load i64, i64* %125, align 8
  %290 = tail call i64 @strlen(i8* %288) #14
  %291 = add i64 %289, 1
  %292 = add i64 %291, %290
  store i64 %292, i64* %125, align 8
  %293 = load i8*, i8** %167, align 8
  %294 = tail call i8* @realloc(i8* %293, i64 %292) #15
  %295 = icmp eq i8* %294, null
  br i1 %295, label %296, label %305

296:                                              ; preds = %287
  %297 = load i8*, i8** %167, align 8
  %298 = icmp eq i8* %297, null
  br i1 %298, label %300, label %299

299:                                              ; preds = %296
  tail call void @free(i8* nonnull %297) #15
  br label %300

300:                                              ; preds = %299, %296
  store i8* null, i8** %167, align 8
  %301 = load i32, i32* %166, align 8
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %304

303:                                              ; preds = %300
  store i32 12, i32* %166, align 8
  br label %304

304:                                              ; preds = %303, %300
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %173, align 8
  br label %312

305:                                              ; preds = %287
  store i8* %294, i8** %167, align 8
  %306 = getelementptr inbounds i8, i8* %294, i64 -1
  %307 = getelementptr inbounds i8, i8* %306, i64 %289
  %308 = load i64, i64* %125, align 8
  %309 = sub i64 1, %289
  %310 = add i64 %309, %308
  %311 = tail call i64 @llvm_strlcpy(i8* %307, i8* %288, i64 %310) #15
  br label %312

312:                                              ; preds = %305, %304
  %313 = tail call i64 @strlen(i8* %288) #14
  %314 = add i64 %313, 1
  %315 = getelementptr inbounds i8, i8* %288, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = icmp eq i8 %316, 0
  br i1 %317, label %318, label %287

318:                                              ; preds = %312, %282, %262
  %319 = load i8*, i8** %2, align 8
  %320 = load i8*, i8** %5, align 8
  %321 = icmp ult i8* %319, %320
  br i1 %321, label %328, label %322

322:                                              ; preds = %318
  %323 = load i32, i32* %166, align 8
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %325, label %326

325:                                              ; preds = %322
  store i32 7, i32* %166, align 8
  br label %326

326:                                              ; preds = %325, %322
  %327 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %327, align 8
  br label %339

328:                                              ; preds = %318
  %329 = getelementptr inbounds i8, i8* %319, i64 1
  %330 = icmp ult i8* %329, %320
  br i1 %330, label %331, label %339

331:                                              ; preds = %328
  %332 = load i8, i8* %319, align 1
  %333 = icmp eq i8 %332, 58
  br i1 %333, label %334, label %339

334:                                              ; preds = %331
  %335 = load i8, i8* %329, align 1
  %336 = icmp eq i8 %335, 93
  br i1 %336, label %337, label %339

337:                                              ; preds = %334
  %338 = getelementptr inbounds i8, i8* %319, i64 2
  store i8* %338, i8** %2, align 8
  br label %451

339:                                              ; preds = %334, %331, %328, %326
  %340 = load i32, i32* %166, align 8
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %343

342:                                              ; preds = %339
  store i32 4, i32* %166, align 8
  br label %343

343:                                              ; preds = %342, %339
  %344 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %344, align 8
  br label %473

345:                                              ; preds = %196
  %346 = getelementptr inbounds i8, i8* %176, i64 2
  store i8* %346, i8** %2, align 8
  %347 = icmp ult i8* %346, %175
  br i1 %347, label %353, label %348

348:                                              ; preds = %345
  %349 = load i32, i32* %166, align 8
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %352

351:                                              ; preds = %348
  store i32 7, i32* %166, align 8
  br label %352

352:                                              ; preds = %351, %348
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %168, align 8
  br label %353

353:                                              ; preds = %352, %345
  %354 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %352 ], [ %346, %345 ]
  %355 = load i8, i8* %354, align 1
  switch i8 %355, label %361 [
    i8 45, label %356
    i8 93, label %356
  ]

356:                                              ; preds = %353, %353
  %357 = load i32, i32* %166, align 8
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %360

359:                                              ; preds = %356
  store i32 3, i32* %166, align 8
  br label %360

360:                                              ; preds = %359, %356
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %169, align 8
  br label %361

361:                                              ; preds = %360, %353
  %362 = tail call fastcc signext i8 @p_b_coll_elem(%struct.parse* %0, i32 61) #15
  %363 = load i8, i8* %123, align 8
  %364 = load i8*, i8** %119, align 8
  %365 = zext i8 %362 to i64
  %366 = getelementptr inbounds i8, i8* %364, i64 %365
  %367 = load i8, i8* %366, align 1
  %368 = or i8 %367, %363
  store i8 %368, i8* %366, align 1
  %369 = load i8, i8* %124, align 1
  %370 = add i8 %369, %362
  store i8 %370, i8* %124, align 1
  %371 = load i8*, i8** %2, align 8
  %372 = load i8*, i8** %5, align 8
  %373 = icmp ult i8* %371, %372
  br i1 %373, label %380, label %374

374:                                              ; preds = %361
  %375 = load i32, i32* %166, align 8
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %377, label %378

377:                                              ; preds = %374
  store i32 7, i32* %166, align 8
  br label %378

378:                                              ; preds = %377, %374
  %379 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %379, align 8
  br label %391

380:                                              ; preds = %361
  %381 = getelementptr inbounds i8, i8* %371, i64 1
  %382 = icmp ult i8* %381, %372
  br i1 %382, label %383, label %391

383:                                              ; preds = %380
  %384 = load i8, i8* %371, align 1
  %385 = icmp eq i8 %384, 61
  br i1 %385, label %386, label %391

386:                                              ; preds = %383
  %387 = load i8, i8* %381, align 1
  %388 = icmp eq i8 %387, 93
  br i1 %388, label %389, label %391

389:                                              ; preds = %386
  %390 = getelementptr inbounds i8, i8* %371, i64 2
  store i8* %390, i8** %2, align 8
  br label %451

391:                                              ; preds = %386, %383, %380, %378
  %392 = load i32, i32* %166, align 8
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %395

394:                                              ; preds = %391
  store i32 3, i32* %166, align 8
  br label %395

395:                                              ; preds = %394, %391
  %396 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %396, align 8
  br label %473

397:                                              ; preds = %196, %189, %187
  %398 = tail call fastcc signext i8 @p_b_symbol(%struct.parse* %0) #15
  %399 = load i8*, i8** %2, align 8
  %400 = load i8*, i8** %5, align 8
  %401 = icmp ult i8* %399, %400
  br i1 %401, label %402, label %418

402:                                              ; preds = %397
  %403 = load i8, i8* %399, align 1
  %404 = icmp eq i8 %403, 45
  br i1 %404, label %405, label %418

405:                                              ; preds = %402
  %406 = getelementptr inbounds i8, i8* %399, i64 1
  %407 = icmp ult i8* %406, %400
  br i1 %407, label %408, label %418

408:                                              ; preds = %405
  %409 = load i8, i8* %406, align 1
  %410 = icmp eq i8 %409, 93
  br i1 %410, label %418, label %411

411:                                              ; preds = %408
  store i8* %406, i8** %2, align 8
  %412 = load i8, i8* %406, align 1
  %413 = icmp eq i8 %412, 45
  br i1 %413, label %414, label %416

414:                                              ; preds = %411
  %415 = getelementptr inbounds i8, i8* %399, i64 2
  store i8* %415, i8** %2, align 8
  br label %420

416:                                              ; preds = %411
  %417 = tail call fastcc signext i8 @p_b_symbol(%struct.parse* %0) #15
  br label %420

418:                                              ; preds = %408, %405, %402, %397
  %419 = sext i8 %398 to i32
  br label %431

420:                                              ; preds = %416, %414
  %421 = phi i8 [ 45, %414 ], [ %417, %416 ]
  %422 = sext i8 %398 to i32
  %423 = sext i8 %421 to i32
  %424 = icmp sgt i8 %398, %421
  br i1 %424, label %425, label %431

425:                                              ; preds = %420
  %426 = load i32, i32* %166, align 8
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %429

428:                                              ; preds = %425
  store i32 11, i32* %166, align 8
  br label %429

429:                                              ; preds = %425, %428
  %430 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %430, align 8
  br label %473

431:                                              ; preds = %420, %418
  %432 = phi i32 [ %419, %418 ], [ %422, %420 ]
  %433 = phi i32 [ %419, %418 ], [ %423, %420 ]
  br label %434

434:                                              ; preds = %434, %431
  %435 = phi i32 [ %432, %431 ], [ %446, %434 ]
  %436 = load i8, i8* %123, align 8
  %437 = load i8*, i8** %119, align 8
  %438 = and i32 %435, 255
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds i8, i8* %437, i64 %439
  %441 = load i8, i8* %440, align 1
  %442 = or i8 %441, %436
  store i8 %442, i8* %440, align 1
  %443 = load i8, i8* %124, align 1
  %444 = trunc i32 %435 to i8
  %445 = add i8 %443, %444
  store i8 %445, i8* %124, align 1
  %446 = add nsw i32 %435, 1
  %447 = icmp slt i32 %435, %433
  br i1 %447, label %434, label %448

448:                                              ; preds = %434
  %449 = load i8*, i8** %2, align 8
  %450 = load i8*, i8** %5, align 8
  br label %451

451:                                              ; preds = %448, %337, %389
  %452 = phi i8* [ %450, %448 ], [ %320, %337 ], [ %372, %389 ]
  %453 = phi i8* [ %449, %448 ], [ %338, %337 ], [ %390, %389 ]
  %454 = icmp ult i8* %453, %452
  br i1 %454, label %174, label %465

455:                                              ; preds = %184
  store i8* %180, i8** %2, align 8
  %456 = load i8, i8* %123, align 8
  %457 = load i8*, i8** %119, align 8
  %458 = getelementptr inbounds i8, i8* %457, i64 45
  %459 = load i8, i8* %458, align 1
  %460 = or i8 %459, %456
  store i8 %460, i8* %458, align 1
  %461 = load i8, i8* %124, align 1
  %462 = add i8 %461, 45
  store i8 %462, i8* %124, align 1
  %463 = load i8*, i8** %2, align 8
  %464 = load i8*, i8** %5, align 8
  br label %465

465:                                              ; preds = %451, %174, %161, %455
  %466 = phi i8* [ %163, %161 ], [ %464, %455 ], [ %452, %451 ], [ %175, %174 ]
  %467 = phi i8* [ %162, %161 ], [ %463, %455 ], [ %453, %451 ], [ %176, %174 ]
  %468 = icmp ult i8* %467, %466
  br i1 %468, label %469, label %473

469:                                              ; preds = %465
  %470 = getelementptr inbounds i8, i8* %467, i64 1
  store i8* %470, i8** %2, align 8
  %471 = load i8, i8* %467, align 1
  %472 = icmp eq i8 %471, 93
  br i1 %472, label %480, label %473

473:                                              ; preds = %429, %194, %343, %395, %469, %465
  %474 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %475 = load i32, i32* %474, align 8
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %473
  store i32 7, i32* %474, align 8
  br label %478

478:                                              ; preds = %477, %473
  %479 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %479, align 8
  br label %484

480:                                              ; preds = %469
  %481 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %482 = load i32, i32* %481, align 8
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %485, label %484

484:                                              ; preds = %478, %480
  tail call fastcc void @freeset(%struct.parse* %0, %struct.cset* nonnull %114) #16
  br label %674

485:                                              ; preds = %480
  %486 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %487 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %486, i64 0, i32 6
  %488 = load i32, i32* %487, align 8
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  br i1 %490, label %529, label %491

491:                                              ; preds = %485
  %492 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %486, i64 0, i32 2
  %493 = load i32, i32* %492, align 8
  %494 = icmp sgt i32 %493, 0
  br i1 %494, label %495, label %529

495:                                              ; preds = %491
  %496 = sext i32 %493 to i64
  br label %497

497:                                              ; preds = %495, %527
  %498 = phi i64 [ %496, %495 ], [ %499, %527 ]
  %499 = add nsw i64 %498, -1
  %500 = load i8*, i8** %119, align 8
  %501 = trunc i64 %499 to i32
  %502 = and i64 %499, 255
  %503 = getelementptr inbounds i8, i8* %500, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = load i8, i8* %123, align 8
  %506 = and i8 %505, %504
  %507 = icmp eq i8 %506, 0
  br i1 %507, label %527, label %508

508:                                              ; preds = %497
  %509 = tail call i16** @__ctype_b_loc() #17
  %510 = load i16*, i16** %509, align 8
  %511 = getelementptr inbounds i16, i16* %510, i64 %499
  %512 = load i16, i16* %511, align 2
  %513 = and i16 %512, 1024
  %514 = icmp eq i16 %513, 0
  br i1 %514, label %527, label %515

515:                                              ; preds = %508
  %516 = tail call fastcc signext i8 @othercase(i32 %501) #16
  %517 = sext i8 %516 to i64
  %518 = and i64 %517, 4294967295
  %519 = icmp eq i64 %499, %518
  br i1 %519, label %527, label %520

520:                                              ; preds = %515
  %521 = zext i8 %516 to i64
  %522 = getelementptr inbounds i8, i8* %500, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = or i8 %523, %505
  store i8 %524, i8* %522, align 1
  %525 = load i8, i8* %124, align 1
  %526 = add i8 %525, %516
  store i8 %526, i8* %124, align 1
  br label %527

527:                                              ; preds = %515, %508, %497, %520
  %528 = icmp sgt i64 %499, 0
  br i1 %528, label %497, label %529

529:                                              ; preds = %527, %491, %485
  %530 = icmp eq i32 %139, 0
  br i1 %530, label %578, label %531

531:                                              ; preds = %529
  %532 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %533 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %532, i64 0, i32 2
  %534 = load i32, i32* %533, align 8
  %535 = icmp sgt i32 %534, 0
  br i1 %535, label %536, label %563

536:                                              ; preds = %531, %558
  %537 = phi i32 [ %538, %558 ], [ %534, %531 ]
  %538 = add nsw i32 %537, -1
  %539 = load i8*, i8** %119, align 8
  %540 = and i32 %538, 255
  %541 = zext i32 %540 to i64
  %542 = getelementptr inbounds i8, i8* %539, i64 %541
  %543 = load i8, i8* %542, align 1
  %544 = load i8, i8* %123, align 8
  %545 = and i8 %544, %543
  %546 = icmp eq i8 %545, 0
  br i1 %546, label %553, label %547

547:                                              ; preds = %536
  %548 = xor i8 %544, -1
  %549 = and i8 %543, %548
  store i8 %549, i8* %542, align 1
  %550 = load i8, i8* %124, align 1
  %551 = trunc i32 %538 to i8
  %552 = sub i8 %550, %551
  br label %558

553:                                              ; preds = %536
  %554 = or i8 %544, %543
  store i8 %554, i8* %542, align 1
  %555 = load i8, i8* %124, align 1
  %556 = trunc i32 %538 to i8
  %557 = add i8 %555, %556
  br label %558

558:                                              ; preds = %547, %553
  %559 = phi i8 [ %552, %547 ], [ %557, %553 ]
  store i8 %559, i8* %124, align 1
  %560 = icmp sgt i32 %538, 0
  br i1 %560, label %536, label %561

561:                                              ; preds = %558
  %562 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  br label %563

563:                                              ; preds = %561, %531
  %564 = phi %struct.re_guts* [ %562, %561 ], [ %532, %531 ]
  %565 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %564, i64 0, i32 6
  %566 = load i32, i32* %565, align 8
  %567 = and i32 %566, 8
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %578, label %569

569:                                              ; preds = %563
  %570 = load i8, i8* %123, align 8
  %571 = xor i8 %570, -1
  %572 = load i8*, i8** %119, align 8
  %573 = getelementptr inbounds i8, i8* %572, i64 10
  %574 = load i8, i8* %573, align 1
  %575 = and i8 %574, %571
  store i8 %575, i8* %573, align 1
  %576 = load i8, i8* %124, align 1
  %577 = add i8 %576, -10
  store i8 %577, i8* %124, align 1
  br label %578

578:                                              ; preds = %569, %563, %529
  %579 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  %580 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %579, i64 0, i32 2
  %581 = load i32, i32* %580, align 8
  %582 = sext i32 %581 to i64
  %583 = icmp eq i32 %581, 0
  br i1 %583, label %617, label %584

584:                                              ; preds = %578
  %585 = load i8*, i8** %119, align 8
  %586 = load i8, i8* %123, align 8
  br label %587

587:                                              ; preds = %587, %584
  %588 = phi i32 [ 0, %584 ], [ %596, %587 ]
  %589 = phi i64 [ 0, %584 ], [ %597, %587 ]
  %590 = and i64 %589, 255
  %591 = getelementptr inbounds i8, i8* %585, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = and i8 %592, %586
  %594 = icmp ne i8 %593, 0
  %595 = zext i1 %594 to i32
  %596 = add nuw nsw i32 %588, %595
  %597 = add nuw i64 %589, 1
  %598 = icmp ult i64 %597, %582
  br i1 %598, label %587, label %599

599:                                              ; preds = %587
  %600 = icmp eq i32 %596, 1
  br i1 %600, label %601, label %617

601:                                              ; preds = %599, %612
  %602 = phi i64 [ %613, %612 ], [ 0, %599 ]
  %603 = and i64 %602, 255
  %604 = getelementptr inbounds i8, i8* %585, i64 %603
  %605 = load i8, i8* %604, align 1
  %606 = and i8 %605, %586
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %612, label %608

608:                                              ; preds = %601
  %609 = trunc i64 %602 to i32
  %610 = shl i32 %609, 24
  %611 = ashr exact i32 %610, 24
  br label %615

612:                                              ; preds = %601
  %613 = add nuw i64 %602, 1
  %614 = icmp ult i64 %613, %582
  br i1 %614, label %601, label %615

615:                                              ; preds = %612, %608
  %616 = phi i32 [ %611, %608 ], [ 0, %612 ]
  tail call fastcc void @ordinary(%struct.parse* %0, i32 %616) #16
  tail call fastcc void @freeset(%struct.parse* %0, %struct.cset* nonnull %114) #16
  br label %674

617:                                              ; preds = %578, %599
  %618 = load i8, i8* %124, align 1
  %619 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %579, i64 0, i32 4
  %620 = load %struct.cset*, %struct.cset** %619, align 8
  %621 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %579, i64 0, i32 3
  %622 = load i32, i32* %621, align 4
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds %struct.cset, %struct.cset* %620, i64 %623
  %625 = icmp sgt i32 %622, 0
  br i1 %625, label %626, label %664

626:                                              ; preds = %617, %659
  %627 = phi %struct.cset* [ %660, %659 ], [ %620, %617 ]
  %628 = getelementptr inbounds %struct.cset, %struct.cset* %627, i64 0, i32 2
  %629 = load i8, i8* %628, align 1
  %630 = icmp ne i8 %629, %618
  %631 = icmp eq %struct.cset* %627, %114
  %632 = or i1 %631, %630
  br i1 %632, label %659, label %633

633:                                              ; preds = %626
  br i1 %583, label %656, label %634

634:                                              ; preds = %633
  %635 = getelementptr inbounds %struct.cset, %struct.cset* %627, i64 0, i32 0
  %636 = load i8*, i8** %635, align 8
  %637 = getelementptr inbounds %struct.cset, %struct.cset* %627, i64 0, i32 1
  %638 = load i8, i8* %637, align 8
  %639 = load i8*, i8** %119, align 8
  %640 = load i8, i8* %123, align 8
  br label %641

641:                                              ; preds = %653, %634
  %642 = phi i64 [ 0, %634 ], [ %654, %653 ]
  %643 = and i64 %642, 255
  %644 = getelementptr inbounds i8, i8* %636, i64 %643
  %645 = load i8, i8* %644, align 1
  %646 = and i8 %645, %638
  %647 = icmp ne i8 %646, 0
  %648 = getelementptr inbounds i8, i8* %639, i64 %643
  %649 = load i8, i8* %648, align 1
  %650 = and i8 %649, %640
  %651 = icmp ne i8 %650, 0
  %652 = xor i1 %647, %651
  br i1 %652, label %656, label %653

653:                                              ; preds = %641
  %654 = add nuw i64 %642, 1
  %655 = icmp ult i64 %654, %582
  br i1 %655, label %641, label %656

656:                                              ; preds = %653, %641, %633
  %657 = phi i64 [ 0, %633 ], [ %654, %653 ], [ %642, %641 ]
  %658 = icmp eq i64 %657, %582
  br i1 %658, label %662, label %659

659:                                              ; preds = %656, %626
  %660 = getelementptr inbounds %struct.cset, %struct.cset* %627, i64 1
  %661 = icmp ult %struct.cset* %660, %624
  br i1 %661, label %626, label %664

662:                                              ; preds = %656
  tail call fastcc void @freeset(%struct.parse* %0, %struct.cset* nonnull %114) #15
  %663 = load %struct.re_guts*, %struct.re_guts** %21, align 8
  br label %664

664:                                              ; preds = %659, %617, %662
  %665 = phi %struct.re_guts* [ %663, %662 ], [ %579, %617 ], [ %579, %659 ]
  %666 = phi %struct.cset* [ %627, %662 ], [ %114, %617 ], [ %114, %659 ]
  %667 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %665, i64 0, i32 4
  %668 = bitcast %struct.cset** %667 to i64*
  %669 = load i64, i64* %668, align 8
  %670 = ptrtoint %struct.cset* %666 to i64
  %671 = sub i64 %670, %669
  %672 = shl i64 %671, 27
  %673 = ashr i64 %672, 32
  tail call fastcc void @doemit(%struct.parse* %0, i64 805306368, i64 %673) #16
  br label %674

674:                                              ; preds = %110, %615, %664, %112, %484, %17, %11
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc i64 @dupl(%struct.parse* nocapture, i64, i64) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %5 = load i64, i64* %4, align 8
  %6 = sub nsw i64 %2, %1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 4
  %10 = load i64, i64* %9, align 8
  %11 = add nsw i64 %10, %6
  tail call fastcc void @enlarge(%struct.parse* %0, i64 %11) #16
  %12 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  %13 = load i64*, i64** %12, align 8
  %14 = load i64, i64* %4, align 8
  %15 = getelementptr inbounds i64, i64* %13, i64 %14
  %16 = bitcast i64* %15 to i8*
  %17 = getelementptr inbounds i64, i64* %13, i64 %1
  %18 = bitcast i64* %17 to i8*
  %19 = shl i64 %6, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %18, i64 %19, i1 false)
  %20 = load i64, i64* %4, align 8
  %21 = add nsw i64 %20, %6
  store i64 %21, i64* %4, align 8
  br label %22

22:                                               ; preds = %3, %8
  ret i64 %5
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @ordinary(%struct.parse*, i32) unnamed_addr #0 {
  %3 = alloca [3 x i8], align 1
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %5 = load %struct.re_guts*, %struct.re_guts** %4, align 8
  %6 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %5, i64 0, i32 14
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %5, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = and i32 %1, 255
  %14 = zext i32 %13 to i64
  br label %38

15:                                               ; preds = %2
  %16 = tail call i16** @__ctype_b_loc() #17
  %17 = load i16*, i16** %16, align 8
  %18 = and i32 %1, 255
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i16, i16* %17, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = and i16 %21, 1024
  %23 = icmp eq i16 %22, 0
  br i1 %23, label %38, label %24

24:                                               ; preds = %15
  %25 = tail call fastcc signext i8 @othercase(i32 %1) #16
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, %1
  br i1 %27, label %38, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %30 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %31 = bitcast %struct.parse* %0 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %33) #13
  %34 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 1
  %35 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 2
  %36 = trunc i32 %1 to i8
  store i8* %33, i8** %29, align 8
  store i8* %35, i8** %30, align 8
  store i8 %36, i8* %33, align 1
  store i8 93, i8* %34, align 1
  store i8 0, i8* %35, align 1
  call fastcc void @p_bracket(%struct.parse* %0) #15
  %37 = bitcast %struct.parse* %0 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %33) #13
  br label %50

38:                                               ; preds = %12, %24, %15
  %39 = phi i64 [ %14, %12 ], [ %19, %24 ], [ %19, %15 ]
  tail call fastcc void @doemit(%struct.parse* %0, i64 268435456, i64 %39) #16
  %40 = sext i32 %1 to i64
  %41 = getelementptr inbounds i8, i8* %7, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %38
  %45 = load %struct.re_guts*, %struct.re_guts** %4, align 8
  %46 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %45, i64 0, i32 13
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %46, align 4
  %49 = trunc i32 %47 to i8
  store i8 %49, i8* %41, align 1
  br label %50

50:                                               ; preds = %38, %44, %28
  ret void
}

; Function Attrs: nounwind optsize readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize ssp uwtable
define internal fastcc i32 @p_count(%struct.parse* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %7, label %37

7:                                                ; preds = %1
  %8 = tail call i16** @__ctype_b_loc() #17
  br label %9

9:                                                ; preds = %7, %22
  %10 = phi i8* [ %3, %7 ], [ %24, %22 ]
  %11 = phi i32 [ 0, %7 ], [ %29, %22 ]
  %12 = phi i32 [ 0, %7 ], [ %28, %22 ]
  %13 = load i16*, i16** %8, align 8
  %14 = load i8, i8* %10, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i16, i16* %13, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = and i16 %17, 2048
  %19 = icmp ne i16 %18, 0
  %20 = icmp slt i32 %12, 256
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %31

22:                                               ; preds = %9
  %23 = mul nsw i32 %12, 10
  %24 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %24, i8** %2, align 8
  %25 = load i8, i8* %10, align 1
  %26 = sext i8 %25 to i32
  %27 = add i32 %23, -48
  %28 = add i32 %27, %26
  %29 = add nuw nsw i32 %11, 1
  %30 = icmp ult i8* %24, %5
  br i1 %30, label %9, label %31

31:                                               ; preds = %9, %22
  %32 = phi i32 [ %12, %9 ], [ %28, %22 ]
  %33 = phi i32 [ %11, %9 ], [ 1, %22 ]
  %34 = icmp ne i32 %33, 0
  %35 = icmp slt i32 %32, 256
  %36 = and i1 %35, %34
  br i1 %36, label %45, label %37

37:                                               ; preds = %1, %31
  %38 = phi i32 [ %32, %31 ], [ 0, %1 ]
  %39 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  store i32 10, i32* %39, align 8
  br label %43

43:                                               ; preds = %37, %42
  %44 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %44, align 8
  br label %45

45:                                               ; preds = %31, %43
  %46 = phi i32 [ %32, %31 ], [ %38, %43 ]
  ret i32 %46
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @repeat(%struct.parse*, i64, i32, i32) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %109

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  br label %11

11:                                               ; preds = %9, %96
  %12 = phi i64 [ %1, %9 ], [ %97, %96 ]
  %13 = phi i32 [ %3, %9 ], [ %99, %96 ]
  %14 = phi i32 [ %2, %9 ], [ %98, %96 ]
  %15 = icmp slt i32 %13, 2
  %16 = icmp eq i32 %13, 256
  %17 = select i1 %16, i32 3, i32 2
  %18 = select i1 %15, i32 %13, i32 %17
  br label %19

19:                                               ; preds = %11, %102
  %20 = phi i64 [ %12, %11 ], [ %103, %102 ]
  %21 = phi i32 [ %14, %11 ], [ %104, %102 ]
  %22 = load i64, i64* %5, align 8
  %23 = icmp slt i32 %21, 2
  %24 = icmp eq i32 %21, 256
  %25 = select i1 %24, i32 3, i32 2
  %26 = select i1 %23, i32 %21, i32 %25
  %27 = shl i32 %26, 3
  %28 = add nsw i32 %27, %18
  switch i32 %28, label %107 [
    i32 0, label %29
    i32 1, label %30
    i32 2, label %30
    i32 3, label %30
    i32 9, label %109
    i32 10, label %58
    i32 11, label %88
    i32 18, label %93
    i32 19, label %102
  ]

29:                                               ; preds = %19
  store i64 %20, i64* %5, align 8
  br label %109

30:                                               ; preds = %19, %19, %19
  %31 = sub i64 1, %20
  %32 = add i64 %31, %22
  tail call fastcc void @doinsert(%struct.parse* %0, i64 2013265920, i64 %32, i64 %20) #16
  %33 = add nsw i64 %20, 1
  tail call fastcc void @repeat(%struct.parse* %0, i64 %33, i32 1, i32 %13) #16
  %34 = load i64, i64* %5, align 8
  %35 = sub nsw i64 %34, %20
  tail call fastcc void @doemit(%struct.parse* %0, i64 2147483648, i64 %35) #16
  %36 = load i32, i32* %6, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %46

38:                                               ; preds = %30
  %39 = load i64, i64* %5, align 8
  %40 = sub nsw i64 %39, %20
  %41 = load i64*, i64** %10, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 %20
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, 4160749568
  %45 = or i64 %44, %40
  store i64 %45, i64* %42, align 8
  br label %46

46:                                               ; preds = %30, %38
  tail call fastcc void @doemit(%struct.parse* %0, i64 2281701376, i64 0) #16
  %47 = load i32, i32* %6, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %57

49:                                               ; preds = %46
  %50 = load i64, i64* %5, align 8
  %51 = add nsw i64 %50, -1
  %52 = load i64*, i64** %10, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 %51
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 4160749568
  %56 = or i64 %55, 1
  store i64 %56, i64* %53, align 8
  br label %57

57:                                               ; preds = %46, %49
  tail call fastcc void @doemit(%struct.parse* %0, i64 2415919104, i64 2) #16
  br label %109

58:                                               ; preds = %19
  %59 = sub i64 1, %20
  %60 = add i64 %59, %22
  tail call fastcc void @doinsert(%struct.parse* %0, i64 2013265920, i64 %60, i64 %20) #16
  %61 = load i64, i64* %5, align 8
  %62 = sub nsw i64 %61, %20
  tail call fastcc void @doemit(%struct.parse* %0, i64 2147483648, i64 %62) #16
  %63 = load i32, i32* %6, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %73

65:                                               ; preds = %58
  %66 = load i64, i64* %5, align 8
  %67 = sub nsw i64 %66, %20
  %68 = load i64*, i64** %10, align 8
  %69 = getelementptr inbounds i64, i64* %68, i64 %20
  %70 = load i64, i64* %69, align 8
  %71 = and i64 %70, 4160749568
  %72 = or i64 %71, %67
  store i64 %72, i64* %69, align 8
  br label %73

73:                                               ; preds = %58, %65
  tail call fastcc void @doemit(%struct.parse* %0, i64 2281701376, i64 0) #16
  %74 = load i32, i32* %6, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %84

76:                                               ; preds = %73
  %77 = load i64, i64* %5, align 8
  %78 = add nsw i64 %77, -1
  %79 = load i64*, i64** %10, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 %78
  %81 = load i64, i64* %80, align 8
  %82 = and i64 %81, 4160749568
  %83 = or i64 %82, 1
  store i64 %83, i64* %80, align 8
  br label %84

84:                                               ; preds = %73, %76
  tail call fastcc void @doemit(%struct.parse* %0, i64 2415919104, i64 2) #16
  %85 = add nsw i64 %20, 1
  %86 = add nsw i64 %22, 1
  %87 = tail call fastcc i64 @dupl(%struct.parse* %0, i64 %85, i64 %86) #16
  br label %96

88:                                               ; preds = %19
  %89 = sub i64 1, %20
  %90 = add i64 %89, %22
  tail call fastcc void @doinsert(%struct.parse* %0, i64 1207959552, i64 %90, i64 %20) #16
  %91 = load i64, i64* %5, align 8
  %92 = sub nsw i64 %91, %20
  tail call fastcc void @doemit(%struct.parse* %0, i64 1342177280, i64 %92) #16
  br label %109

93:                                               ; preds = %19
  %94 = tail call fastcc i64 @dupl(%struct.parse* %0, i64 %20, i64 %22) #16
  %95 = add nsw i32 %21, -1
  br label %96

96:                                               ; preds = %93, %84
  %97 = phi i64 [ %87, %84 ], [ %94, %93 ]
  %98 = phi i32 [ 1, %84 ], [ %95, %93 ]
  %99 = add nsw i32 %13, -1
  %100 = load i32, i32* %6, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %11, label %109

102:                                              ; preds = %19
  %103 = tail call fastcc i64 @dupl(%struct.parse* %0, i64 %20, i64 %22) #16
  %104 = add nsw i32 %21, -1
  %105 = load i32, i32* %6, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %19, label %109

107:                                              ; preds = %19
  store i32 15, i32* %6, align 8
  %108 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %108, align 8
  br label %109

109:                                              ; preds = %96, %102, %19, %4, %29, %57, %88, %107
  ret void
}

; Function Attrs: nofree nounwind optsize readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @freeset(%struct.parse* nocapture readonly, %struct.cset*) unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 7
  %4 = load %struct.re_guts*, %struct.re_guts** %3, align 8
  %5 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %4, i64 0, i32 4
  %6 = load %struct.cset*, %struct.cset** %5, align 8
  %7 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %4, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.cset, %struct.cset* %6, i64 %9
  %11 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %4, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %33, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.cset, %struct.cset* %1, i64 0, i32 1
  %17 = getelementptr inbounds %struct.cset, %struct.cset* %1, i64 0, i32 0
  %18 = getelementptr inbounds %struct.cset, %struct.cset* %1, i64 0, i32 2
  br label %19

19:                                               ; preds = %15, %19
  %20 = phi i64 [ 0, %15 ], [ %31, %19 ]
  %21 = load i8, i8* %16, align 8
  %22 = xor i8 %21, -1
  %23 = load i8*, i8** %17, align 8
  %24 = and i64 %20, 255
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = and i8 %26, %22
  store i8 %27, i8* %25, align 1
  %28 = load i8, i8* %18, align 1
  %29 = trunc i64 %20 to i8
  %30 = sub i8 %28, %29
  store i8 %30, i8* %18, align 1
  %31 = add nuw i64 %20, 1
  %32 = icmp ult i64 %31, %13
  br i1 %32, label %19, label %33

33:                                               ; preds = %19, %2
  %34 = getelementptr inbounds %struct.cset, %struct.cset* %10, i64 -1
  %35 = icmp eq %struct.cset* %34, %1
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = load %struct.re_guts*, %struct.re_guts** %3, align 8
  %38 = getelementptr inbounds %struct.re_guts, %struct.re_guts* %37, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i32 %39, -1
  store i32 %40, i32* %38, align 4
  br label %41

41:                                               ; preds = %36, %33
  ret void
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define internal fastcc signext i8 @othercase(i32) unnamed_addr #10 {
  %2 = and i32 %0, 255
  %3 = tail call i16** @__ctype_b_loc() #17
  %4 = load i16*, i16** %3, align 8
  %5 = zext i32 %2 to i64
  %6 = getelementptr inbounds i16, i16* %4, i64 %5
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 256
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %20, label %11

11:                                               ; preds = %1
  %12 = tail call i1 @llvm.is.constant.i32(i32 %2)
  br i1 %12, label %13, label %18

13:                                               ; preds = %11
  %14 = tail call i32** @__ctype_tolower_loc() #17
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds i32, i32* %15, i64 %5
  %17 = load i32, i32* %16, align 4
  br label %32

18:                                               ; preds = %11
  %19 = tail call i32 @tolower(i32 %2) #14
  br label %32

20:                                               ; preds = %1
  %21 = and i32 %8, 512
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %20
  %24 = tail call i1 @llvm.is.constant.i32(i32 %2)
  br i1 %24, label %25, label %30

25:                                               ; preds = %23
  %26 = tail call i32** @__ctype_toupper_loc() #17
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 %5
  %29 = load i32, i32* %28, align 4
  br label %32

30:                                               ; preds = %23
  %31 = tail call i32 @toupper(i32 %2) #14
  br label %32

32:                                               ; preds = %20, %25, %30, %13, %18
  %33 = phi i32 [ %17, %13 ], [ %19, %18 ], [ %29, %25 ], [ %31, %30 ], [ %0, %20 ]
  %34 = trunc i32 %33 to i8
  ret i8 %34
}

; Function Attrs: nounwind optsize
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind optsize ssp uwtable
define internal fastcc signext i8 @p_b_symbol(%struct.parse* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  store i32 7, i32* %8, align 8
  br label %12

12:                                               ; preds = %11, %7
  %13 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %13, align 8
  br label %29

14:                                               ; preds = %1
  %15 = getelementptr inbounds i8, i8* %3, i64 1
  %16 = icmp ult i8* %15, %5
  br i1 %16, label %17, label %29

17:                                               ; preds = %14
  %18 = load i8, i8* %3, align 1
  %19 = icmp eq i8 %18, 91
  br i1 %19, label %20, label %29

20:                                               ; preds = %17
  %21 = load i8, i8* %15, align 1
  %22 = icmp eq i8 %21, 46
  br i1 %22, label %23, label %29

23:                                               ; preds = %20
  %24 = getelementptr inbounds i8, i8* %3, i64 2
  store i8* %24, i8** %2, align 8
  %25 = tail call fastcc signext i8 @p_b_coll_elem(%struct.parse* %0, i32 46) #16
  %26 = load i8*, i8** %2, align 8
  %27 = load i8*, i8** %4, align 8
  %28 = icmp ult i8* %26, %27
  br i1 %28, label %33, label %44

29:                                               ; preds = %12, %14, %17, %20
  %30 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), %12 ], [ %3, %14 ], [ %3, %17 ], [ %3, %20 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  store i8* %31, i8** %2, align 8
  %32 = load i8, i8* %30, align 1
  br label %51

33:                                               ; preds = %23
  %34 = getelementptr inbounds i8, i8* %26, i64 1
  %35 = icmp ult i8* %34, %27
  br i1 %35, label %36, label %44

36:                                               ; preds = %33
  %37 = load i8, i8* %26, align 1
  %38 = icmp eq i8 %37, 46
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = load i8, i8* %34, align 1
  %41 = icmp eq i8 %40, 93
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = getelementptr inbounds i8, i8* %26, i64 2
  store i8* %43, i8** %2, align 8
  br label %51

44:                                               ; preds = %23, %33, %36, %39
  %45 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %44
  store i32 3, i32* %45, align 8
  br label %49

49:                                               ; preds = %44, %48
  %50 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %50, align 8
  br label %51

51:                                               ; preds = %49, %42, %29
  %52 = phi i8 [ %32, %29 ], [ %25, %42 ], [ %25, %49 ]
  ret i8 %52
}

; Function Attrs: optsize
declare i64 @llvm_strlcpy(i8*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize ssp uwtable
define internal fastcc signext i8 @p_b_coll_elem(%struct.parse* nocapture, i32) unnamed_addr #7 {
  %3 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  %10 = icmp ult i8* %9, %6
  br i1 %10, label %11, label %23

11:                                               ; preds = %8, %20
  %12 = phi i8* [ %21, %20 ], [ %9, %8 ]
  %13 = phi i8* [ %12, %20 ], [ %4, %8 ]
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, %1
  br i1 %16, label %17, label %20

17:                                               ; preds = %11
  %18 = load i8, i8* %12, align 1
  %19 = icmp eq i8 %18, 93
  br i1 %19, label %32, label %20

20:                                               ; preds = %17, %11
  store i8* %12, i8** %3, align 8
  %21 = getelementptr inbounds i8, i8* %12, i64 1
  %22 = icmp ult i8* %21, %6
  br i1 %22, label %11, label %23

23:                                               ; preds = %20, %8
  %24 = phi i8* [ %9, %8 ], [ %21, %20 ]
  store i8* %24, i8** %3, align 8
  br label %25

25:                                               ; preds = %23, %2
  %26 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  store i32 7, i32* %26, align 8
  br label %30

30:                                               ; preds = %25, %29
  %31 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %31, align 8
  br label %67

32:                                               ; preds = %17
  %33 = ptrtoint i8* %13 to i64
  %34 = ptrtoint i8* %4 to i64
  %35 = sub i64 %33, %34
  %36 = trunc i64 %35 to i32
  %37 = shl i64 %35, 32
  %38 = ashr exact i64 %37, 32
  br label %39

39:                                               ; preds = %32, %51
  %40 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), %32 ], [ %54, %51 ]
  %41 = phi %struct.cname* [ getelementptr inbounds ([96 x %struct.cname], [96 x %struct.cname]* @cnames, i64 0, i64 0), %32 ], [ %52, %51 ]
  %42 = tail call i32 @strncmp(i8* nonnull %40, i8* %4, i64 %38) #14
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, i8* %40, i64 %38
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.cname, %struct.cname* %41, i64 0, i32 1
  %50 = load i8, i8* %49, align 8
  br label %67

51:                                               ; preds = %39, %44
  %52 = getelementptr inbounds %struct.cname, %struct.cname* %41, i64 1
  %53 = getelementptr inbounds %struct.cname, %struct.cname* %52, i64 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %39

56:                                               ; preds = %51
  %57 = icmp eq i32 %36, 1
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = load i8, i8* %4, align 1
  br label %67

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  store i32 3, i32* %61, align 8
  br label %65

65:                                               ; preds = %60, %64
  %66 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %66, align 8
  br label %67

67:                                               ; preds = %65, %58, %48, %30
  %68 = phi i8 [ %50, %48 ], [ %59, %58 ], [ 0, %65 ], [ 0, %30 ]
  ret i8 %68
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #11

; Function Attrs: nounwind optsize readnone
declare i32** @__ctype_tolower_loc() local_unnamed_addr #6

; Function Attrs: nounwind optsize readonly
declare i32 @tolower(i32) local_unnamed_addr #12

; Function Attrs: nounwind optsize readnone
declare i32** @__ctype_toupper_loc() local_unnamed_addr #6

; Function Attrs: nounwind optsize readonly
declare i32 @toupper(i32) local_unnamed_addr #12

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @enlarge(%struct.parse* nocapture, i64) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %6, label %30

6:                                                ; preds = %2
  %7 = icmp ugt i64 %1, 2305843009213693951
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store i32 12, i32* %9, align 8
  br label %13

13:                                               ; preds = %8, %12
  %14 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %14, align 8
  br label %30

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 3
  %17 = bitcast i64** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = shl i64 %1, 3
  %20 = tail call i8* @realloc(i8* %18, i64 %19) #15
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %29

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.parse, %struct.parse* %0, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i32 12, i32* %23, align 8
  br label %27

27:                                               ; preds = %22, %26
  %28 = bitcast %struct.parse* %0 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @nuls, i64 0, i64 0)>, <2 x i8*>* %28, align 8
  br label %30

29:                                               ; preds = %15
  store i8* %20, i8** %17, align 8
  store i64 %1, i64* %3, align 8
  br label %30

30:                                               ; preds = %2, %29, %27, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone }
attributes #12 = { nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { nounwind optsize readonly }
attributes #15 = { nounwind optsize }
attributes #16 = { optsize }
attributes #17 = { nounwind optsize readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
