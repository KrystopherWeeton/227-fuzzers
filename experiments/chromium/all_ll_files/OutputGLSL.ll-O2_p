; ModuleID = '../../third_party/angle/src/compiler/translator/OutputGLSL.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/OutputGLSL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TOutputGLSL" = type { %"class.sh::TOutputGLSLBase" }
%"class.sh::TOutputGLSLBase" = type { %"class.sh::TIntermTraverser", %"class.sh::TInfoSinkBase"*, i8, i32, i64 (i8*, i64)*, %"class.std::__1::map.73"*, i32, i32, i32, i64 }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.37", %"class.std::__1::vector.44", %"class.sh::TVector", %"class.std::__1::vector.51" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.39" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.58", %"class.std::__1::vector.66" }
%"class.std::__1::basic_string.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.61 }
%union.anon.61 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { i32*, i32*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { i32* }
%"class.std::__1::map.73" = type { %"class.std::__1::__tree.74" }
%"class.std::__1::__tree.74" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.6", %"class.std::__1::vector.13", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::unique_ptr.15" = type opaque
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.std::__1::unique_ptr.15"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.21", %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.29"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.29" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.30"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.30" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.36, i32 }
%union.anon.36 = type { i32 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.84", i8, [7 x i8] }>
%"class.sh::TVector.84" = type { %"class.std::__1::vector.85" }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { i32*, i32*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.92"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.92" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh11TOutputGLSLD0Ev = comdat any

@_ZTVN2sh11TOutputGLSLE = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::TOutputGLSL"*)* @_ZN2sh11TOutputGLSLD0Ev to i8*), i8* bitcast (void (%"class.sh::TOutputGLSL"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh11TOutputGLSL11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh15TOutputGLSLBase18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh15TOutputGLSLBase12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh15TOutputGLSLBase11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh15TOutputGLSLBase10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh15TOutputGLSLBase12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh15TOutputGLSLBase11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh15TOutputGLSLBase11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh15TOutputGLSLBase9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh15TOutputGLSLBase22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh15TOutputGLSLBase23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh15TOutputGLSLBase14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh15TOutputGLSLBase10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh15TOutputGLSLBase31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh15TOutputGLSLBase16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh15TOutputGLSLBase9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh15TOutputGLSLBase11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh15TOutputGLSLBase26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermTyped"*)* @_ZN2sh15TOutputGLSLBase20writeLayoutQualifierEPNS_12TIntermTypedE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TType"*, %"class.sh::TSymbol"*, i1)* @_ZN2sh15TOutputGLSLBase17writeVariableTypeERKNS_5TTypeEPKNS_7TSymbolEb to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSL"*, i32)* @_ZN2sh11TOutputGLSL22writeVariablePrecisionENS_10TPrecisionE to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TOutputGLSL"*, %"class.sh::ImmutableString"*, i64*)* @_ZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKm to i8*)] }, align 8
@.str = private unnamed_addr constant [16 x i8] c"gl_FragDepthEXT\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"gl_FragDepth\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"gl_FragColor\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"webgl_FragColor\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"gl_FragData\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"webgl_FragData\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"gl_SecondaryFragColorEXT\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"angle_SecondaryFragColor\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"gl_SecondaryFragDataEXT\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"angle_SecondaryFragData\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"textureVideoWEBGL\00", align 1
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"texture2D\00", align 1
@_ZZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKmE12simpleRename = internal unnamed_addr constant [14 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i32 0, i32 0), i8* null, i8* null], align 16
@.str.13 = private unnamed_addr constant [16 x i8] c"texture2DLodEXT\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"texture2DLod\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"texture2DProjLodEXT\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"texture2DProjLod\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"textureCubeLodEXT\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"textureCubeLod\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"texture2DGradEXT\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"texture2DGradARB\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"texture2DProjGradEXT\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"texture2DProjGradARB\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"textureCubeGradEXT\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c"textureCubeGradARB\00", align 1
@_ZZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKmE18legacyToCoreRename = internal unnamed_addr constant [42 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* null, i8* null], align 16
@.str.25 = private unnamed_addr constant [8 x i8] c"texture\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"texture2DProj\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"textureProj\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"textureLod\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"textureProjLod\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"texture2DRect\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"texture2DRectProj\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"textureCube\00", align 1
@.str.33 = private unnamed_addr constant [12 x i8] c"textureGrad\00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c"textureProjGrad\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"texture3D\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"texture3DProj\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"texture3DLod\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"texture3DProjLod\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"shadow2DEXT\00", align 1
@.str.40 = private unnamed_addr constant [16 x i8] c"shadow2DProjEXT\00", align 1

@_ZN2sh11TOutputGLSLC1ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm = hidden unnamed_addr alias void (%"class.sh::TOutputGLSL"*, %"class.sh::TInfoSinkBase"*, i32, i64 (i8*, i64)*, %"class.std::__1::map.73"*, %"class.sh::TSymbolTable"*, i32, i32, i32, i64), void (%"class.sh::TOutputGLSL"*, %"class.sh::TInfoSinkBase"*, i32, i64 (i8*, i64)*, %"class.std::__1::map.73"*, %"class.sh::TSymbolTable"*, i32, i32, i32, i64)* @_ZN2sh11TOutputGLSLC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TOutputGLSLC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm(%"class.sh::TOutputGLSL"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i64 (i8*, i64)*, %"class.std::__1::map.73"* dereferenceable(24), %"class.sh::TSymbolTable"*, i32, i32, i32, i64) unnamed_addr #0 align 2 {
  %11 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0
  tail call void @_ZN2sh15TOutputGLSLBaseC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm(%"class.sh::TOutputGLSLBase"* %11, %"class.sh::TInfoSinkBase"* dereferenceable(48) %1, i32 %2, i64 (i8*, i64)* %3, %"class.std::__1::map.73"* dereferenceable(24) %4, %"class.sh::TSymbolTable"* %5, i32 %6, i32 %7, i32 %8, i64 %9) #6
  %12 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN2sh11TOutputGLSLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  ret void
}

declare void @_ZN2sh15TOutputGLSLBaseC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm(%"class.sh::TOutputGLSLBase"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i64 (i8*, i64)*, %"class.std::__1::map.73"* dereferenceable(24), %"class.sh::TSymbolTable"*, i32, i32, i32, i64) unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2sh11TOutputGLSL22writeVariablePrecisionENS_10TPrecisionE(%"class.sh::TOutputGLSL"* nocapture readnone, i32) unnamed_addr #2 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TOutputGLSL11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TOutputGLSL"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.sh::TInfoSinkBase"*, %"class.sh::TInfoSinkBase"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 1
  %7 = bitcast %"class.sh::TVariable"** %6 to %"class.sh::TSymbol"**
  %8 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %8, i64 0, i32 2
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  tail call void @_ZN2sh15TOutputGLSLBase11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TOutputGLSLBase"* %3, %"class.sh::TIntermSymbol"* %1) #6
  br label %56

13:                                               ; preds = %2
  %14 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* %1) #6
  %15 = extractvalue { i8*, i64 } %14, 0
  %16 = icmp eq i8* %15, null
  %17 = select i1 %16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0), i8* %15
  %18 = tail call i32 @strcmp(i8* %17, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %5, i64 0, i32 0
  %22 = tail call dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"* %21, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %56

23:                                               ; preds = %13
  %24 = tail call i32 @strcmp(i8* %17, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %33

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 8
  %28 = load i32, i32* %27, align 8
  %29 = tail call zeroext i1 @_ZN2sh16IsGLSL130OrNewerE14ShShaderOutput(i32 %28) #6
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %5, i64 0, i32 0
  %32 = tail call dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"* %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %56

33:                                               ; preds = %26, %23
  %34 = tail call i32 @strcmp(i8* %17, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0)) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 8
  %38 = load i32, i32* %37, align 8
  %39 = tail call zeroext i1 @_ZN2sh16IsGLSL130OrNewerE14ShShaderOutput(i32 %38) #6
  br i1 %39, label %40, label %43

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %5, i64 0, i32 0
  %42 = tail call dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"* %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0)) #6
  br label %56

43:                                               ; preds = %36, %33
  %44 = tail call i32 @strcmp(i8* %17, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0)) #7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %5, i64 0, i32 0
  %48 = tail call dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"* %47, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %56

49:                                               ; preds = %43
  %50 = tail call i32 @strcmp(i8* %17, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0)) #7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %5, i64 0, i32 0
  %54 = tail call dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"* %53, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0)) #6
  br label %56

55:                                               ; preds = %49
  tail call void @_ZN2sh15TOutputGLSLBase11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TOutputGLSLBase"* %3, %"class.sh::TIntermSymbol"* %1) #6
  br label %56

56:                                               ; preds = %20, %40, %52, %55, %46, %30, %12
  ret void
}

declare void @_ZN2sh15TOutputGLSLBase11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermSymbol"*) unnamed_addr #1

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh16IsGLSL130OrNewerE14ShShaderOutput(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKm(%"class.sh::TOutputGLSL"* nocapture readonly, %"class.sh::ImmutableString"* nocapture readonly dereferenceable(16), i64* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %1, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = select i1 %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0), i8* %5
  %8 = tail call i32 @strcmp(i8* %7, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)) #7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = load i64, i64* %2, align 8
  %12 = and i64 %11, 8796093022208
  %13 = icmp eq i64 %12, 0
  %14 = select i1 %13, i64 9, i64 0
  %15 = select i1 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0)
  br label %52

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 8
  %18 = load i32, i32* %17, align 8
  %19 = tail call zeroext i1 @_ZN2sh16IsGLSL130OrNewerE14ShShaderOutput(i32 %18) #6
  %20 = select i1 %19, i8** getelementptr inbounds ([42 x i8*], [42 x i8*]* @_ZZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKmE18legacyToCoreRename, i64 0, i64 0), i8** getelementptr inbounds ([14 x i8*], [14 x i8*]* @_ZZN2sh11TOutputGLSL24translateTextureFunctionERKNS_15ImmutableStringERKmE12simpleRename, i64 0, i64 0)
  %21 = load i8*, i8** %20, align 16
  %22 = icmp eq i8* %21, null
  %23 = load i8*, i8** %4, align 8
  br i1 %22, label %49, label %24

24:                                               ; preds = %16
  %25 = icmp eq i8* %23, null
  %26 = select i1 %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0), i8* %23
  br label %27

27:                                               ; preds = %24, %44
  %28 = phi i64 [ 0, %24 ], [ %45, %44 ]
  %29 = phi i8* [ %21, %24 ], [ %47, %44 ]
  %30 = tail call i32 @strcmp(i8* %26, i8* nonnull %29) #7
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %27
  %33 = and i64 %28, 4294967294
  %34 = or i64 %33, 1
  %35 = getelementptr inbounds i8*, i8** %20, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %52, label %38

38:                                               ; preds = %32, %38
  %39 = phi i64 [ %43, %38 ], [ 0, %32 ]
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = add i64 %39, 1
  br i1 %42, label %52, label %38

44:                                               ; preds = %27
  %45 = add nuw i64 %28, 2
  %46 = getelementptr inbounds i8*, i8** %20, i64 %45
  %47 = load i8*, i8** %46, align 16
  %48 = icmp eq i8* %47, null
  br i1 %48, label %49, label %27

49:                                               ; preds = %44, %16
  %50 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %1, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %38, %10, %32, %49
  %53 = phi i64 [ %51, %49 ], [ 0, %32 ], [ %14, %10 ], [ %39, %38 ]
  %54 = phi i8* [ %23, %49 ], [ null, %32 ], [ %15, %10 ], [ %36, %38 ]
  %55 = insertvalue { i8*, i64 } undef, i8* %54, 0
  %56 = insertvalue { i8*, i64 } %55, i64 %53, 1
  ret { i8*, i64 } %56
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh11TOutputGLSLD0Ev(%"class.sh::TOutputGLSL"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TOutputGLSL", %"class.sh::TOutputGLSL"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #6
  ret void
}

declare void @_ZN2sh15TOutputGLSLBase18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase20writeLayoutQualifierEPNS_12TIntermTypedE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase17writeVariableTypeERKNS_5TTypeEPKNS_7TSymbolEb(%"class.sh::TOutputGLSLBase"*, %"class.sh::TType"* dereferenceable(184), %"class.sh::TSymbol"*, i1 zeroext) unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

declare dereferenceable(24) %"class.std::__1::basic_string.58"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.58"*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
