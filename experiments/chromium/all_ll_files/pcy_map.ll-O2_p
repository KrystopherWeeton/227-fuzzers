; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/pcy_map.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/pcy_map.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type { %struct.X509_POLICY_DATA_st*, %struct.stack_st_X509_POLICY_DATA*, i64, i64, i64 }
%struct.X509_POLICY_DATA_st = type { i32, %struct.asn1_object_st*, %struct.stack_st_POLICYQUALINFO*, %struct.stack_st_ASN1_OBJECT* }
%struct.stack_st_POLICYQUALINFO = type opaque
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.stack_st_X509_POLICY_DATA = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.stack_st_POLICY_MAPPING = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.POLICYINFO_st = type { %struct.asn1_object_st*, %struct.stack_st_POLICYQUALINFO* }
%struct.POLICY_MAPPING_st = type { %struct.asn1_object_st*, %struct.asn1_object_st* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @policy_cache_set_mapping(%struct.x509_st* nocapture, %struct.stack_st_POLICY_MAPPING*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %0, i64 0, i32 13
  %4 = load %struct.X509_POLICY_CACHE_st*, %struct.X509_POLICY_CACHE_st** %3, align 8
  %5 = bitcast %struct.stack_st_POLICY_MAPPING* %1 to %struct.stack_st*
  %6 = tail call i64 @sk_num(%struct.stack_st* %5) #3
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %75, label %8

8:                                                ; preds = %2
  %9 = tail call i64 @sk_num(%struct.stack_st* %5) #3
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %79, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.X509_POLICY_CACHE_st, %struct.X509_POLICY_CACHE_st* %4, i64 0, i32 0
  %13 = getelementptr inbounds %struct.X509_POLICY_CACHE_st, %struct.X509_POLICY_CACHE_st* %4, i64 0, i32 1
  %14 = bitcast %struct.stack_st_X509_POLICY_DATA** %13 to %struct.stack_st**
  br label %15

15:                                               ; preds = %11, %71
  %16 = phi i64 [ 0, %11 ], [ %72, %71 ]
  %17 = tail call i8* @sk_value(%struct.stack_st* %5, i64 %16) #3
  %18 = getelementptr inbounds i8, i8* %17, i64 8
  %19 = bitcast i8* %18 to %struct.asn1_object_st**
  %20 = load %struct.asn1_object_st*, %struct.asn1_object_st** %19, align 8
  %21 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %20) #3
  %22 = icmp eq i32 %21, 746
  br i1 %22, label %75, label %23

23:                                               ; preds = %15
  %24 = bitcast i8* %17 to %struct.asn1_object_st**
  %25 = load %struct.asn1_object_st*, %struct.asn1_object_st** %24, align 8
  %26 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %25) #3
  %27 = icmp eq i32 %26, 746
  br i1 %27, label %75, label %28

28:                                               ; preds = %23
  %29 = load %struct.asn1_object_st*, %struct.asn1_object_st** %24, align 8
  %30 = tail call %struct.X509_POLICY_DATA_st* @policy_cache_find_data(%struct.X509_POLICY_CACHE_st* %4, %struct.asn1_object_st* %29) #3
  %31 = icmp eq %struct.X509_POLICY_DATA_st* %30, null
  br i1 %31, label %32, label %57

32:                                               ; preds = %28
  %33 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %12, align 8
  %34 = icmp eq %struct.X509_POLICY_DATA_st* %33, null
  br i1 %34, label %71, label %35

35:                                               ; preds = %32
  %36 = load %struct.asn1_object_st*, %struct.asn1_object_st** %24, align 8
  %37 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %33, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = and i32 %38, 16
  %40 = tail call %struct.X509_POLICY_DATA_st* @policy_data_new(%struct.POLICYINFO_st* null, %struct.asn1_object_st* %36, i32 %39) #3
  %41 = icmp eq %struct.X509_POLICY_DATA_st* %40, null
  br i1 %41, label %79, label %42

42:                                               ; preds = %35
  %43 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %12, align 8
  %44 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %43, i64 0, i32 2
  %45 = bitcast %struct.stack_st_POLICYQUALINFO** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %40, i64 0, i32 2
  %48 = bitcast %struct.stack_st_POLICYQUALINFO** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %40, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = or i32 %50, 6
  store i32 %51, i32* %49, align 8
  %52 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %53 = bitcast %struct.X509_POLICY_DATA_st* %40 to i8*
  %54 = tail call i64 @sk_push(%struct.stack_st* %52, i8* nonnull %53) #3
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %42
  tail call void @policy_data_free(%struct.X509_POLICY_DATA_st* nonnull %40) #3
  br label %79

57:                                               ; preds = %28
  %58 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %30, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = or i32 %59, 1
  store i32 %60, i32* %58, align 8
  br label %61

61:                                               ; preds = %42, %57
  %62 = phi %struct.X509_POLICY_DATA_st* [ %30, %57 ], [ %40, %42 ]
  %63 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %62, i64 0, i32 3
  %64 = bitcast %struct.stack_st_ASN1_OBJECT** %63 to %struct.stack_st**
  %65 = load %struct.stack_st*, %struct.stack_st** %64, align 8
  %66 = bitcast i8* %18 to i8**
  %67 = load i8*, i8** %66, align 8
  %68 = tail call i64 @sk_push(%struct.stack_st* %65, i8* %67) #3
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %79, label %70

70:                                               ; preds = %61
  store %struct.asn1_object_st* null, %struct.asn1_object_st** %19, align 8
  br label %71

71:                                               ; preds = %32, %70
  %72 = add nuw i64 %16, 1
  %73 = tail call i64 @sk_num(%struct.stack_st* %5) #3
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %15, label %79

75:                                               ; preds = %23, %15, %2
  %76 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %0, i64 0, i32 7
  %77 = load i64, i64* %76, align 8
  %78 = or i64 %77, 2048
  store i64 %78, i64* %76, align 8
  br label %79

79:                                               ; preds = %61, %35, %71, %8, %56, %75
  %80 = phi i32 [ -1, %75 ], [ 0, %56 ], [ 1, %8 ], [ 0, %61 ], [ 0, %35 ], [ 1, %71 ]
  tail call void @sk_pop_free_ex(%struct.stack_st* %5, void (void (i8*)*, i8*)* nonnull @sk_POLICY_MAPPING_call_free_func, void (i8*)* bitcast (void (%struct.POLICY_MAPPING_st*)* @POLICY_MAPPING_free to void (i8*)*)) #3
  ret i32 %80
}

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #1

declare %struct.X509_POLICY_DATA_st* @policy_cache_find_data(%struct.X509_POLICY_CACHE_st*, %struct.asn1_object_st*) local_unnamed_addr #1

declare %struct.X509_POLICY_DATA_st* @policy_data_new(%struct.POLICYINFO_st*, %struct.asn1_object_st*, i32) local_unnamed_addr #1

declare void @policy_data_free(%struct.X509_POLICY_DATA_st*) local_unnamed_addr #1

declare void @POLICY_MAPPING_free(%struct.POLICY_MAPPING_st*) #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_POLICY_MAPPING_call_free_func(void (i8*)* nocapture, i8*) #2 {
  %3 = bitcast void (i8*)* %0 to void (%struct.POLICY_MAPPING_st*)*
  %4 = bitcast i8* %1 to %struct.POLICY_MAPPING_st*
  tail call void %3(%struct.POLICY_MAPPING_st* %4) #3
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
