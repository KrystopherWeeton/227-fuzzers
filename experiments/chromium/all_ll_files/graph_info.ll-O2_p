; ModuleID = '../../third_party/tflite/src/tensorflow/lite/graph_info.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/graph_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.tflite::GraphInfo" = type { i32 (...)** }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"*, %"class.std::__1::__compressed_pair.3" }
%"struct.tflite::NodeSubset" = type { i32, %"class.std::__1::vector.0", %"class.std::__1::vector.0", %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.tflite::NodeSubset"* }
%"struct.std::__1::__less.22" = type { i8 }
%"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl" = type { %"class.tflite::GraphInfo"*, %"class.std::__1::vector"*, %"class.std::__1::vector.8", %"class.std::__1::vector.0", %"class.std::__1::vector.0" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi = comdat any

$_ZNSt3__16vectorIN6tflite10NodeSubsetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite40PartitionGraphIntoIndependentNodeSubsetsEPKNS_9GraphInfoEPK14TfLiteIntArrayPNSt3__16vectorINS_10NodeSubsetENS6_9allocatorIS8_EEEE(%"class.tflite::GraphInfo"*, %struct.TfLiteIntArray* readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %4 = alloca %"struct.tflite::NodeSubset", align 8
  %5 = alloca %"struct.std::__1::__less.22", align 1
  %6 = alloca %"struct.std::__1::__less.22", align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", align 8
  %10 = bitcast %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 0
  store %"class.tflite::GraphInfo"* %0, %"class.tflite::GraphInfo"** %11, align 8
  %12 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 1
  store %"class.std::__1::vector"* %2, %"class.std::__1::vector"** %12, align 8
  %13 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 2
  %14 = bitcast %"class.tflite::GraphInfo"* %0 to i64 (%"class.tflite::GraphInfo"*)***
  %15 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %14, align 8
  %16 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %15, i64 4
  %17 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %16, align 8
  %18 = tail call i64 %17(%"class.tflite::GraphInfo"* %0) #8
  %19 = bitcast %"class.std::__1::vector.8"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #8
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %118, label %21

21:                                               ; preds = %3
  %22 = icmp ugt i64 %18, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector.8"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #9
  unreachable

25:                                               ; preds = %21
  %26 = shl i64 %18, 2
  %27 = tail call i8* @_Znwm(i64 %26) #10
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 2, i32 0, i32 1
  %30 = bitcast i32** %29 to i8**
  store i8* %27, i8** %30, align 8
  %31 = bitcast %"class.std::__1::vector.8"* %13 to i8**
  store i8* %27, i8** %31, align 8
  %32 = getelementptr inbounds i32, i32* %28, i64 %18
  %33 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store i32* %32, i32** %33, align 8
  %34 = shl nsw i64 %18, 2
  %35 = add i64 %34, -4
  %36 = lshr exact i64 %35, 2
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %109, label %39

39:                                               ; preds = %25
  %40 = and i64 %37, 9223372036854775800
  %41 = getelementptr i32, i32* %28, i64 %40
  %42 = add nsw i64 %40, -8
  %43 = lshr exact i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 7
  %46 = icmp ult i64 %42, 56
  br i1 %46, label %94, label %47

47:                                               ; preds = %39
  %48 = sub nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %91, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %92, %49 ]
  %52 = getelementptr i32, i32* %28, i64 %50
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %53, align 4
  %54 = getelementptr i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %55, align 4
  %56 = or i64 %50, 8
  %57 = getelementptr i32, i32* %28, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %58, align 4
  %59 = getelementptr i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %60, align 4
  %61 = or i64 %50, 16
  %62 = getelementptr i32, i32* %28, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %63, align 4
  %64 = getelementptr i32, i32* %62, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %65, align 4
  %66 = or i64 %50, 24
  %67 = getelementptr i32, i32* %28, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %68, align 4
  %69 = getelementptr i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %70, align 4
  %71 = or i64 %50, 32
  %72 = getelementptr i32, i32* %28, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %73, align 4
  %74 = getelementptr i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %75, align 4
  %76 = or i64 %50, 40
  %77 = getelementptr i32, i32* %28, i64 %76
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %78, align 4
  %79 = getelementptr i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %80, align 4
  %81 = or i64 %50, 48
  %82 = getelementptr i32, i32* %28, i64 %81
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %83, align 4
  %84 = getelementptr i32, i32* %82, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %85, align 4
  %86 = or i64 %50, 56
  %87 = getelementptr i32, i32* %28, i64 %86
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %88, align 4
  %89 = getelementptr i32, i32* %87, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %90, align 4
  %91 = add i64 %50, 64
  %92 = add i64 %51, -8
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %49, !llvm.loop !2

94:                                               ; preds = %49, %39
  %95 = phi i64 [ 0, %39 ], [ %91, %49 ]
  %96 = icmp eq i64 %45, 0
  br i1 %96, label %107, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %104, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %105, %97 ], [ %45, %94 ]
  %100 = getelementptr i32, i32* %28, i64 %98
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %101, align 4
  %102 = getelementptr i32, i32* %100, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %103, align 4
  %104 = add i64 %98, 8
  %105 = add i64 %99, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %97, !llvm.loop !4

107:                                              ; preds = %97, %94
  %108 = icmp eq i64 %37, %40
  br i1 %108, label %115, label %109

109:                                              ; preds = %107, %25
  %110 = phi i32* [ %28, %25 ], [ %41, %107 ]
  br label %111

111:                                              ; preds = %109, %111
  %112 = phi i32* [ %113, %111 ], [ %110, %109 ]
  store i32 2, i32* %112, align 4
  %113 = getelementptr inbounds i32, i32* %112, i64 1
  %114 = icmp eq i32* %113, %32
  br i1 %114, label %115, label %111, !llvm.loop !6

115:                                              ; preds = %111, %107
  %116 = bitcast i32** %29 to i64*
  %117 = ptrtoint i32* %32 to i64
  store i64 %117, i64* %116, align 8
  br label %118

118:                                              ; preds = %115, %3
  %119 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 3
  %120 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1, i64 0, i32 0
  %121 = bitcast %"class.std::__1::vector.0"* %119 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 48, i1 false) #8
  %122 = load i32, i32* %120, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1, i64 0, i32 1, i64 %123
  %125 = icmp eq i32 %122, 0
  br i1 %125, label %171, label %126

126:                                              ; preds = %118
  %127 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1, i64 0, i32 1, i64 0
  %128 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %13, i64 0, i32 0, i32 0
  %129 = shl nsw i64 %123, 2
  %130 = add nsw i64 %129, -4
  %131 = lshr exact i64 %130, 2
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %126, %135
  %136 = phi i32* [ %142, %135 ], [ %127, %126 ]
  %137 = phi i64 [ %143, %135 ], [ %133, %126 ]
  %138 = load i32, i32* %136, align 4
  %139 = sext i32 %138 to i64
  %140 = load i32*, i32** %128, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 %139
  store i32 1, i32* %141, align 4
  %142 = getelementptr inbounds i32, i32* %136, i64 1
  %143 = add i64 %137, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !8

145:                                              ; preds = %135, %126
  %146 = phi i32* [ %127, %126 ], [ %142, %135 ]
  %147 = icmp ult i64 %130, 12
  br i1 %147, label %171, label %148

148:                                              ; preds = %145, %148
  %149 = phi i32* [ %169, %148 ], [ %146, %145 ]
  %150 = load i32, i32* %149, align 4
  %151 = sext i32 %150 to i64
  %152 = load i32*, i32** %128, align 8
  %153 = getelementptr inbounds i32, i32* %152, i64 %151
  store i32 1, i32* %153, align 4
  %154 = getelementptr inbounds i32, i32* %149, i64 1
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = load i32*, i32** %128, align 8
  %158 = getelementptr inbounds i32, i32* %157, i64 %156
  store i32 1, i32* %158, align 4
  %159 = getelementptr inbounds i32, i32* %149, i64 2
  %160 = load i32, i32* %159, align 4
  %161 = sext i32 %160 to i64
  %162 = load i32*, i32** %128, align 8
  %163 = getelementptr inbounds i32, i32* %162, i64 %161
  store i32 1, i32* %163, align 4
  %164 = getelementptr inbounds i32, i32* %149, i64 3
  %165 = load i32, i32* %164, align 4
  %166 = sext i32 %165 to i64
  %167 = load i32*, i32** %128, align 8
  %168 = getelementptr inbounds i32, i32* %167, i64 %166
  store i32 1, i32* %168, align 4
  %169 = getelementptr inbounds i32, i32* %149, i64 4
  %170 = icmp eq i32* %169, %124
  br i1 %170, label %171, label %148

171:                                              ; preds = %145, %148, %118
  %172 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %173 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %172, i64 0, i32 0, i32 0
  %174 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %173, align 8
  %175 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %172, i64 0, i32 0, i32 1
  %176 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %175, align 8
  %177 = icmp eq %"struct.tflite::NodeSubset"* %176, %174
  br i1 %177, label %209, label %178

178:                                              ; preds = %171, %207
  %179 = phi %"struct.tflite::NodeSubset"* [ %180, %207 ], [ %176, %171 ]
  %180 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1
  %181 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 3, i32 0, i32 0
  %182 = load i32*, i32** %181, align 8
  %183 = icmp eq i32* %182, null
  br i1 %183, label %189, label %184

184:                                              ; preds = %178
  %185 = ptrtoint i32* %182 to i64
  %186 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 3, i32 0, i32 1
  %187 = bitcast i32** %186 to i64*
  store i64 %185, i64* %187, align 8
  %188 = bitcast i32* %182 to i8*
  tail call void @_ZdlPv(i8* %188) #10
  br label %189

189:                                              ; preds = %184, %178
  %190 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 2, i32 0, i32 0
  %191 = load i32*, i32** %190, align 8
  %192 = icmp eq i32* %191, null
  br i1 %192, label %198, label %193

193:                                              ; preds = %189
  %194 = ptrtoint i32* %191 to i64
  %195 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 2, i32 0, i32 1
  %196 = bitcast i32** %195 to i64*
  store i64 %194, i64* %196, align 8
  %197 = bitcast i32* %191 to i8*
  tail call void @_ZdlPv(i8* %197) #10
  br label %198

198:                                              ; preds = %193, %189
  %199 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 1, i32 0, i32 0
  %200 = load i32*, i32** %199, align 8
  %201 = icmp eq i32* %200, null
  br i1 %201, label %207, label %202

202:                                              ; preds = %198
  %203 = ptrtoint i32* %200 to i64
  %204 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %179, i64 -1, i32 1, i32 0, i32 1
  %205 = bitcast i32** %204 to i64*
  store i64 %203, i64* %205, align 8
  %206 = bitcast i32* %200 to i8*
  tail call void @_ZdlPv(i8* %206) #10
  br label %207

207:                                              ; preds = %202, %198
  %208 = icmp eq %"struct.tflite::NodeSubset"* %180, %174
  br i1 %208, label %209, label %178

209:                                              ; preds = %207, %171
  store %"struct.tflite::NodeSubset"* %174, %"struct.tflite::NodeSubset"** %175, align 8
  %210 = bitcast %"class.std::__1::vector.0"* %119 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 3, i32 0, i32 1
  %213 = bitcast i32** %212 to i64*
  store i64 %211, i64* %213, align 8
  %214 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %215 = bitcast %"class.tflite::GraphInfo"* %214 to i64 (%"class.tflite::GraphInfo"*)***
  %216 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %215, align 8
  %217 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %216, i64 2
  %218 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %217, align 8
  %219 = tail call i64 %218(%"class.tflite::GraphInfo"* %214) #8
  %220 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %220) #8
  store i32 -2, i32* %7, align 4
  %221 = icmp eq i64 %219, 0
  br i1 %221, label %225, label %222

222:                                              ; preds = %209
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.0"* %119, i64 %219, i32* nonnull dereferenceable(4) %7) #8
  %223 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %224 = bitcast %"class.tflite::GraphInfo"* %223 to i64 (%"class.tflite::GraphInfo"*)***
  br label %225

225:                                              ; preds = %209, %222
  %226 = phi i64 (%"class.tflite::GraphInfo"*)*** [ %224, %222 ], [ %215, %209 ]
  %227 = phi %"class.tflite::GraphInfo"* [ %223, %222 ], [ %214, %209 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %220) #8
  %228 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 4
  %229 = bitcast %"class.std::__1::vector.0"* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 4, i32 0, i32 1
  %232 = bitcast i32** %231 to i64*
  store i64 %230, i64* %232, align 8
  %233 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %226, align 8
  %234 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %233, i64 4
  %235 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %234, align 8
  %236 = call i64 %235(%"class.tflite::GraphInfo"* %227) #8
  %237 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %237) #8
  store i32 -1, i32* %8, align 4
  %238 = load i64, i64* %232, align 8
  %239 = load i64, i64* %229, align 8
  %240 = sub i64 %238, %239
  %241 = ashr exact i64 %240, 2
  %242 = icmp ugt i64 %236, %241
  %243 = inttoptr i64 %239 to i32*
  br i1 %242, label %244, label %246

244:                                              ; preds = %225
  %245 = sub i64 %236, %241
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.0"* %228, i64 %245, i32* nonnull dereferenceable(4) %8) #8
  br label %250

246:                                              ; preds = %225
  %247 = icmp ult i64 %236, %241
  br i1 %247, label %248, label %250

248:                                              ; preds = %246
  %249 = getelementptr inbounds i32, i32* %243, i64 %236
  store i32* %249, i32** %231, align 8
  br label %250

250:                                              ; preds = %248, %246, %244
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #8
  %251 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %252 = bitcast %"class.tflite::GraphInfo"* %251 to i64 (%"class.tflite::GraphInfo"*)***
  %253 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %252, align 8
  %254 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %253, i64 4
  %255 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %254, align 8
  %256 = call i64 %255(%"class.tflite::GraphInfo"* %251) #8
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %250
  %259 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %119, i64 0, i32 0, i32 0
  br label %290

260:                                              ; preds = %326, %250
  %261 = bitcast %"struct.tflite::NodeSubset"* %4 to i8*
  %262 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 1
  %263 = bitcast %"class.std::__1::vector.0"* %262 to i8*
  %264 = bitcast %"class.std::__1::vector.0"* %262 to i64*
  %265 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 1, i32 0, i32 1
  %266 = bitcast i32** %265 to i64*
  %267 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %268 = bitcast i32** %267 to i64*
  %269 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 2
  %270 = bitcast %"class.std::__1::vector.0"* %269 to i64*
  %271 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 2, i32 0, i32 1
  %272 = bitcast i32** %271 to i64*
  %273 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %274 = bitcast i32** %273 to i64*
  %275 = bitcast %"class.std::__1::vector.0"* %269 to i8*
  %276 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 3
  %277 = bitcast %"class.std::__1::vector.0"* %276 to i64*
  %278 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 3, i32 0, i32 1
  %279 = bitcast i32** %278 to i64*
  %280 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %281 = bitcast i32** %280 to i64*
  %282 = bitcast %"class.std::__1::vector.0"* %276 to i8*
  %283 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 3, i32 0, i32 0
  %284 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 2, i32 0, i32 0
  %285 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %4, i64 0, i32 1, i32 0, i32 0
  %286 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 4, i32 0, i32 0
  %287 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 3, i32 0, i32 0
  %288 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 2, i32 0, i32 0
  %289 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  br label %358

290:                                              ; preds = %326, %258
  %291 = phi i64 [ 0, %258 ], [ %327, %326 ]
  %292 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %293 = bitcast %"class.tflite::GraphInfo"* %292 to %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)***
  %294 = load %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)**, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*** %293, align 8
  %295 = getelementptr inbounds %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)** %294, i64 5
  %296 = load %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)** %295, align 8
  %297 = call dereferenceable(72) %struct.TfLiteNode* %296(%"class.tflite::GraphInfo"* %292, i64 %291) #8
  %298 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %297, i64 0, i32 1
  %299 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %298, align 8
  %300 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %299, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %299, i64 0, i32 1, i64 %302
  %304 = icmp eq i32 %301, 0
  br i1 %304, label %326, label %305

305:                                              ; preds = %290
  %306 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %299, i64 0, i32 1, i64 0
  %307 = shl nsw i64 %302, 2
  %308 = add nsw i64 %307, -4
  %309 = lshr exact i64 %308, 2
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 3
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %323, label %313

313:                                              ; preds = %305, %313
  %314 = phi i32* [ %320, %313 ], [ %306, %305 ]
  %315 = phi i64 [ %321, %313 ], [ %311, %305 ]
  %316 = load i32, i32* %314, align 4
  %317 = sext i32 %316 to i64
  %318 = load i32*, i32** %259, align 8
  %319 = getelementptr inbounds i32, i32* %318, i64 %317
  store i32 -1, i32* %319, align 4
  %320 = getelementptr inbounds i32, i32* %314, i64 1
  %321 = add i64 %315, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %313, !llvm.loop !9

323:                                              ; preds = %313, %305
  %324 = phi i32* [ %306, %305 ], [ %320, %313 ]
  %325 = icmp ult i64 %308, 12
  br i1 %325, label %326, label %335

326:                                              ; preds = %323, %335, %290
  %327 = add nuw i64 %291, 1
  %328 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %329 = bitcast %"class.tflite::GraphInfo"* %328 to i64 (%"class.tflite::GraphInfo"*)***
  %330 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %329, align 8
  %331 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %330, i64 4
  %332 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %331, align 8
  %333 = call i64 %332(%"class.tflite::GraphInfo"* %328) #8
  %334 = icmp ugt i64 %333, %327
  br i1 %334, label %290, label %260

335:                                              ; preds = %323, %335
  %336 = phi i32* [ %356, %335 ], [ %324, %323 ]
  %337 = load i32, i32* %336, align 4
  %338 = sext i32 %337 to i64
  %339 = load i32*, i32** %259, align 8
  %340 = getelementptr inbounds i32, i32* %339, i64 %338
  store i32 -1, i32* %340, align 4
  %341 = getelementptr inbounds i32, i32* %336, i64 1
  %342 = load i32, i32* %341, align 4
  %343 = sext i32 %342 to i64
  %344 = load i32*, i32** %259, align 8
  %345 = getelementptr inbounds i32, i32* %344, i64 %343
  store i32 -1, i32* %345, align 4
  %346 = getelementptr inbounds i32, i32* %336, i64 2
  %347 = load i32, i32* %346, align 4
  %348 = sext i32 %347 to i64
  %349 = load i32*, i32** %259, align 8
  %350 = getelementptr inbounds i32, i32* %349, i64 %348
  store i32 -1, i32* %350, align 4
  %351 = getelementptr inbounds i32, i32* %336, i64 3
  %352 = load i32, i32* %351, align 4
  %353 = sext i32 %352 to i64
  %354 = load i32*, i32** %259, align 8
  %355 = getelementptr inbounds i32, i32* %354, i64 %353
  store i32 -1, i32* %355, align 4
  %356 = getelementptr inbounds i32, i32* %336, i64 4
  %357 = icmp eq i32* %356, %303
  br i1 %357, label %326, label %335

358:                                              ; preds = %793, %260
  %359 = phi %"class.std::__1::vector"* [ %289, %260 ], [ %794, %793 ]
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %261) #8
  %360 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %359, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 0, i64 80, i1 false) #8
  %361 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %359, i64 0, i32 0, i32 2, i32 0, i32 0
  %363 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %362, align 8
  %364 = icmp ult %"struct.tflite::NodeSubset"* %361, %363
  br i1 %364, label %365, label %400

365:                                              ; preds = %358
  %366 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 0
  store i32 0, i32* %366, align 8
  %367 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 1
  %368 = bitcast %"class.std::__1::vector.0"* %367 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %368, i8 0, i64 24, i1 false) #8
  %369 = load i64, i64* %264, align 8
  %370 = bitcast %"class.std::__1::vector.0"* %367 to i64*
  store i64 %369, i64* %370, align 8
  %371 = load i64, i64* %266, align 8
  %372 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 1, i32 0, i32 1
  %373 = bitcast i32** %372 to i64*
  store i64 %371, i64* %373, align 8
  %374 = load i64, i64* %268, align 8
  %375 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %376 = bitcast i32** %375 to i64*
  store i64 %374, i64* %376, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %263, i8 0, i64 24, i1 false) #8
  %377 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 2
  %378 = bitcast %"class.std::__1::vector.0"* %377 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %378, i8 0, i64 24, i1 false) #8
  %379 = load i64, i64* %270, align 8
  %380 = bitcast %"class.std::__1::vector.0"* %377 to i64*
  store i64 %379, i64* %380, align 8
  %381 = load i64, i64* %272, align 8
  %382 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 2, i32 0, i32 1
  %383 = bitcast i32** %382 to i64*
  store i64 %381, i64* %383, align 8
  %384 = load i64, i64* %274, align 8
  %385 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %386 = bitcast i32** %385 to i64*
  store i64 %384, i64* %386, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %275, i8 0, i64 24, i1 false) #8
  %387 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 3
  %388 = bitcast %"class.std::__1::vector.0"* %387 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %388, i8 0, i64 24, i1 false) #8
  %389 = load i64, i64* %277, align 8
  %390 = bitcast %"class.std::__1::vector.0"* %387 to i64*
  store i64 %389, i64* %390, align 8
  %391 = load i64, i64* %279, align 8
  %392 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 3, i32 0, i32 1
  %393 = bitcast i32** %392 to i64*
  store i64 %391, i64* %393, align 8
  %394 = load i64, i64* %281, align 8
  %395 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %396 = bitcast i32** %395 to i64*
  store i64 %394, i64* %396, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %282, i8 0, i64 24, i1 false) #8
  %397 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %361, i64 1
  %398 = ptrtoint %"struct.tflite::NodeSubset"* %397 to i64
  %399 = bitcast %"struct.tflite::NodeSubset"** %360 to i64*
  store i64 %398, i64* %399, align 8
  br label %401

400:                                              ; preds = %358
  call void @_ZNSt3__16vectorIN6tflite10NodeSubsetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"* %359, %"struct.tflite::NodeSubset"* nonnull dereferenceable(80) %4) #8
  br label %401

401:                                              ; preds = %400, %365
  %402 = load i32*, i32** %283, align 8
  %403 = icmp eq i32* %402, null
  br i1 %403, label %407, label %404

404:                                              ; preds = %401
  %405 = ptrtoint i32* %402 to i64
  store i64 %405, i64* %279, align 8
  %406 = bitcast i32* %402 to i8*
  call void @_ZdlPv(i8* %406) #10
  br label %407

407:                                              ; preds = %404, %401
  %408 = load i32*, i32** %284, align 8
  %409 = icmp eq i32* %408, null
  br i1 %409, label %413, label %410

410:                                              ; preds = %407
  %411 = ptrtoint i32* %408 to i64
  store i64 %411, i64* %272, align 8
  %412 = bitcast i32* %408 to i8*
  call void @_ZdlPv(i8* %412) #10
  br label %413

413:                                              ; preds = %410, %407
  %414 = load i32*, i32** %285, align 8
  %415 = icmp eq i32* %414, null
  br i1 %415, label %419, label %416

416:                                              ; preds = %413
  %417 = ptrtoint i32* %414 to i64
  store i64 %417, i64* %266, align 8
  %418 = bitcast i32* %414 to i8*
  call void @_ZdlPv(i8* %418) #10
  br label %419

419:                                              ; preds = %416, %413
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %261) #8
  br label %420

420:                                              ; preds = %428, %419
  %421 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %422 = bitcast %"class.tflite::GraphInfo"* %421 to i64 (%"class.tflite::GraphInfo"*)***
  %423 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %422, align 8
  %424 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %423, i64 4
  %425 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %424, align 8
  %426 = call i64 %425(%"class.tflite::GraphInfo"* %421) #8
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %793, label %431

428:                                              ; preds = %783
  %429 = and i8 %784, 1
  %430 = icmp eq i8 %429, 0
  br i1 %430, label %793, label %420

431:                                              ; preds = %420, %783
  %432 = phi i64 [ %785, %783 ], [ 0, %420 ]
  %433 = phi i8 [ %784, %783 ], [ 0, %420 ]
  %434 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %435 = bitcast %"class.tflite::GraphInfo"* %434 to %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)***
  %436 = load %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)**, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*** %435, align 8
  %437 = getelementptr inbounds %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)** %436, i64 5
  %438 = load %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)*, %struct.TfLiteNode* (%"class.tflite::GraphInfo"*, i64)** %437, align 8
  %439 = call dereferenceable(72) %struct.TfLiteNode* %438(%"class.tflite::GraphInfo"* %434, i64 %432) #8
  %440 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %441 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %440, i64 0, i32 0, i32 1
  %442 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %441, align 8
  %443 = ptrtoint %"struct.tflite::NodeSubset"* %442 to i64
  %444 = bitcast %"class.std::__1::vector"* %440 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = sub i64 %443, %445
  %447 = sdiv exact i64 %446, 80
  %448 = trunc i64 %447 to i32
  %449 = add i32 %448, -1
  %450 = load i32*, i32** %286, align 8
  %451 = getelementptr inbounds i32, i32* %450, i64 %432
  %452 = load i32, i32* %451, align 4
  %453 = icmp eq i32 %452, -1
  br i1 %453, label %454, label %783

454:                                              ; preds = %431
  %455 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %439, i64 0, i32 0
  %456 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %455, align 8
  %457 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %456, i64 0, i32 0
  %458 = load i32, i32* %457, align 4
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %456, i64 0, i32 1, i64 %459
  %461 = icmp eq i32 %458, 0
  br i1 %461, label %477, label %462

462:                                              ; preds = %454
  %463 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %456, i64 0, i32 1, i64 0
  %464 = load i32*, i32** %287, align 8
  br label %465

465:                                              ; preds = %474, %462
  %466 = phi i32* [ %463, %462 ], [ %475, %474 ]
  %467 = load i32, i32* %466, align 4
  %468 = icmp eq i32 %467, -1
  br i1 %468, label %474, label %469

469:                                              ; preds = %465
  %470 = sext i32 %467 to i64
  %471 = getelementptr inbounds i32, i32* %464, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %472, -1
  br i1 %473, label %783, label %474

474:                                              ; preds = %469, %465
  %475 = getelementptr inbounds i32, i32* %466, i64 1
  %476 = icmp eq i32* %475, %460
  br i1 %476, label %477, label %465

477:                                              ; preds = %474, %454
  %478 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 0
  %479 = load i32, i32* %478, align 8
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %485

481:                                              ; preds = %477
  %482 = load i32*, i32** %288, align 8
  %483 = getelementptr inbounds i32, i32* %482, i64 %432
  %484 = load i32, i32* %483, align 4
  store i32 %484, i32* %478, align 8
  br label %485

485:                                              ; preds = %481, %477
  %486 = phi i32 [ %484, %481 ], [ %479, %477 ]
  %487 = load i32*, i32** %288, align 8
  %488 = getelementptr inbounds i32, i32* %487, i64 %432
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %486, %489
  br i1 %490, label %491, label %783

491:                                              ; preds = %485
  %492 = load i32*, i32** %286, align 8
  %493 = getelementptr inbounds i32, i32* %492, i64 %432
  store i32 %449, i32* %493, align 4
  %494 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 1
  %495 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %496 = bitcast %"class.tflite::GraphInfo"* %495 to i64 (%"class.tflite::GraphInfo"*, i64)***
  %497 = load i64 (%"class.tflite::GraphInfo"*, i64)**, i64 (%"class.tflite::GraphInfo"*, i64)*** %496, align 8
  %498 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*, i64)*, i64 (%"class.tflite::GraphInfo"*, i64)** %497, i64 6
  %499 = load i64 (%"class.tflite::GraphInfo"*, i64)*, i64 (%"class.tflite::GraphInfo"*, i64)** %498, align 8
  %500 = call i64 %499(%"class.tflite::GraphInfo"* %495, i64 %432) #8
  %501 = trunc i64 %500 to i32
  %502 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 1, i32 0, i32 1
  %503 = load i32*, i32** %502, align 8
  %504 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %505 = load i32*, i32** %504, align 8
  %506 = icmp ult i32* %503, %505
  %507 = ptrtoint i32* %505 to i64
  br i1 %506, label %508, label %512

508:                                              ; preds = %491
  store i32 %501, i32* %503, align 4
  %509 = getelementptr inbounds i32, i32* %503, i64 1
  %510 = ptrtoint i32* %509 to i64
  %511 = bitcast i32** %502 to i64*
  store i64 %510, i64* %511, align 8
  br label %568

512:                                              ; preds = %491
  %513 = ptrtoint i32* %503 to i64
  %514 = bitcast i32** %502 to i64*
  %515 = bitcast %"class.std::__1::vector.0"* %494 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = sub i64 %513, %516
  %518 = ashr exact i64 %517, 2
  %519 = add nsw i64 %518, 1
  %520 = icmp ugt i64 %519, 4611686018427387903
  br i1 %520, label %521, label %523

521:                                              ; preds = %512
  %522 = bitcast %"class.std::__1::vector.0"* %494 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %522) #9
  unreachable

523:                                              ; preds = %512
  %524 = bitcast i32** %504 to i64*
  %525 = sub i64 %507, %516
  %526 = ashr exact i64 %525, 2
  %527 = icmp ult i64 %526, 2305843009213693951
  br i1 %527, label %528, label %536

528:                                              ; preds = %523
  %529 = ashr exact i64 %525, 1
  %530 = icmp ult i64 %529, %519
  %531 = select i1 %530, i64 %519, i64 %529
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %541, label %533

533:                                              ; preds = %528
  %534 = icmp ugt i64 %531, 4611686018427387903
  br i1 %534, label %535, label %536

535:                                              ; preds = %533
  call void @abort() #9
  unreachable

536:                                              ; preds = %533, %523
  %537 = phi i64 [ %531, %533 ], [ 4611686018427387903, %523 ]
  %538 = shl i64 %537, 2
  %539 = call i8* @_Znwm(i64 %538) #10
  %540 = bitcast i8* %539 to i32*
  br label %541

541:                                              ; preds = %536, %528
  %542 = phi i64 [ %537, %536 ], [ 0, %528 ]
  %543 = phi i32* [ %540, %536 ], [ null, %528 ]
  %544 = getelementptr inbounds i32, i32* %543, i64 %518
  %545 = getelementptr inbounds i32, i32* %543, i64 %542
  %546 = ptrtoint i32* %545 to i64
  store i32 %501, i32* %544, align 4
  %547 = getelementptr inbounds i32, i32* %544, i64 1
  %548 = ptrtoint i32* %547 to i64
  %549 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %494, i64 0, i32 0, i32 0
  %550 = load i32*, i32** %549, align 8
  %551 = load i64, i64* %514, align 8
  %552 = ptrtoint i32* %550 to i64
  %553 = sub i64 %551, %552
  %554 = ashr exact i64 %553, 2
  %555 = sub nsw i64 0, %554
  %556 = getelementptr inbounds i32, i32* %544, i64 %555
  %557 = ptrtoint i32* %556 to i64
  %558 = icmp sgt i64 %553, 0
  br i1 %558, label %559, label %563

559:                                              ; preds = %541
  %560 = bitcast i32* %556 to i8*
  %561 = bitcast i32* %550 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %560, i8* align 4 %561, i64 %553, i1 false) #8
  %562 = load i32*, i32** %549, align 8
  br label %563

563:                                              ; preds = %559, %541
  %564 = phi i32* [ %550, %541 ], [ %562, %559 ]
  store i64 %557, i64* %515, align 8
  store i64 %548, i64* %514, align 8
  store i64 %546, i64* %524, align 8
  %565 = icmp eq i32* %564, null
  br i1 %565, label %568, label %566

566:                                              ; preds = %563
  %567 = bitcast i32* %564 to i8*
  call void @_ZdlPv(i8* %567) #10
  br label %568

568:                                              ; preds = %566, %563, %508
  %569 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %439, i64 0, i32 1
  %570 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %569, align 8
  %571 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %570, i64 0, i32 0
  %572 = load i32, i32* %571, align 4
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %570, i64 0, i32 1, i64 %573
  %575 = icmp eq i32 %572, 0
  br i1 %575, label %597, label %576

576:                                              ; preds = %568
  %577 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %570, i64 0, i32 1, i64 0
  %578 = shl nsw i64 %573, 2
  %579 = add nsw i64 %578, -4
  %580 = lshr exact i64 %579, 2
  %581 = add nuw nsw i64 %580, 1
  %582 = and i64 %581, 3
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %594, label %584

584:                                              ; preds = %576, %584
  %585 = phi i32* [ %591, %584 ], [ %577, %576 ]
  %586 = phi i64 [ %592, %584 ], [ %582, %576 ]
  %587 = load i32, i32* %585, align 4
  %588 = sext i32 %587 to i64
  %589 = load i32*, i32** %287, align 8
  %590 = getelementptr inbounds i32, i32* %589, i64 %588
  store i32 %449, i32* %590, align 4
  %591 = getelementptr inbounds i32, i32* %585, i64 1
  %592 = add i64 %586, -1
  %593 = icmp eq i64 %592, 0
  br i1 %593, label %594, label %584, !llvm.loop !10

594:                                              ; preds = %584, %576
  %595 = phi i32* [ %577, %576 ], [ %591, %584 ]
  %596 = icmp ult i64 %579, 12
  br i1 %596, label %597, label %613

597:                                              ; preds = %594, %613, %568
  %598 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %455, align 8
  %599 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %598, i64 0, i32 0
  %600 = load i32, i32* %599, align 4
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %598, i64 0, i32 1, i64 %601
  %603 = icmp eq i32 %600, 0
  br i1 %603, label %783, label %604

604:                                              ; preds = %597
  %605 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %598, i64 0, i32 1, i64 0
  %606 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 2
  %607 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 2, i32 0, i32 1
  %608 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %442, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %609 = bitcast i32** %607 to i64*
  %610 = bitcast %"class.std::__1::vector.0"* %606 to i64*
  %611 = bitcast i32** %608 to i64*
  %612 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %606, i64 0, i32 0, i32 0
  br label %636

613:                                              ; preds = %594, %613
  %614 = phi i32* [ %634, %613 ], [ %595, %594 ]
  %615 = load i32, i32* %614, align 4
  %616 = sext i32 %615 to i64
  %617 = load i32*, i32** %287, align 8
  %618 = getelementptr inbounds i32, i32* %617, i64 %616
  store i32 %449, i32* %618, align 4
  %619 = getelementptr inbounds i32, i32* %614, i64 1
  %620 = load i32, i32* %619, align 4
  %621 = sext i32 %620 to i64
  %622 = load i32*, i32** %287, align 8
  %623 = getelementptr inbounds i32, i32* %622, i64 %621
  store i32 %449, i32* %623, align 4
  %624 = getelementptr inbounds i32, i32* %614, i64 2
  %625 = load i32, i32* %624, align 4
  %626 = sext i32 %625 to i64
  %627 = load i32*, i32** %287, align 8
  %628 = getelementptr inbounds i32, i32* %627, i64 %626
  store i32 %449, i32* %628, align 4
  %629 = getelementptr inbounds i32, i32* %614, i64 3
  %630 = load i32, i32* %629, align 4
  %631 = sext i32 %630 to i64
  %632 = load i32*, i32** %287, align 8
  %633 = getelementptr inbounds i32, i32* %632, i64 %631
  store i32 %449, i32* %633, align 4
  %634 = getelementptr inbounds i32, i32* %614, i64 4
  %635 = icmp eq i32* %634, %574
  br i1 %635, label %597, label %613

636:                                              ; preds = %780, %604
  %637 = phi i32* [ %605, %604 ], [ %781, %780 ]
  %638 = load i32, i32* %637, align 4
  %639 = icmp eq i32 %638, -1
  br i1 %639, label %780, label %640

640:                                              ; preds = %636
  %641 = sext i32 %638 to i64
  %642 = load i32*, i32** %287, align 8
  %643 = getelementptr inbounds i32, i32* %642, i64 %641
  %644 = load i32, i32* %643, align 4
  %645 = icmp eq i32 %644, %449
  br i1 %645, label %780, label %646

646:                                              ; preds = %640
  %647 = load i32*, i32** %607, align 8
  %648 = load i32*, i32** %608, align 8
  %649 = icmp eq i32* %647, %648
  %650 = ptrtoint i32* %648 to i64
  br i1 %649, label %654, label %651

651:                                              ; preds = %646
  store i32 %638, i32* %647, align 4
  %652 = getelementptr inbounds i32, i32* %647, i64 1
  %653 = ptrtoint i32* %652 to i64
  store i64 %653, i64* %609, align 8
  br label %706

654:                                              ; preds = %646
  %655 = ptrtoint i32* %647 to i64
  %656 = load i64, i64* %610, align 8
  %657 = sub i64 %655, %656
  %658 = ashr exact i64 %657, 2
  %659 = add nsw i64 %658, 1
  %660 = icmp ugt i64 %659, 4611686018427387903
  br i1 %660, label %661, label %663

661:                                              ; preds = %654
  %662 = bitcast %"class.std::__1::vector.0"* %606 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %662) #9
  unreachable

663:                                              ; preds = %654
  %664 = sub i64 %650, %656
  %665 = ashr exact i64 %664, 2
  %666 = icmp ult i64 %665, 2305843009213693951
  br i1 %666, label %667, label %675

667:                                              ; preds = %663
  %668 = ashr exact i64 %664, 1
  %669 = icmp ult i64 %668, %659
  %670 = select i1 %669, i64 %659, i64 %668
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %680, label %672

672:                                              ; preds = %667
  %673 = icmp ugt i64 %670, 4611686018427387903
  br i1 %673, label %674, label %675

674:                                              ; preds = %672
  call void @abort() #9
  unreachable

675:                                              ; preds = %672, %663
  %676 = phi i64 [ %670, %672 ], [ 4611686018427387903, %663 ]
  %677 = shl i64 %676, 2
  %678 = call i8* @_Znwm(i64 %677) #10
  %679 = bitcast i8* %678 to i32*
  br label %680

680:                                              ; preds = %675, %667
  %681 = phi i64 [ %676, %675 ], [ 0, %667 ]
  %682 = phi i32* [ %679, %675 ], [ null, %667 ]
  %683 = getelementptr inbounds i32, i32* %682, i64 %658
  %684 = getelementptr inbounds i32, i32* %682, i64 %681
  %685 = ptrtoint i32* %684 to i64
  store i32 %638, i32* %683, align 4
  %686 = getelementptr inbounds i32, i32* %683, i64 1
  %687 = ptrtoint i32* %686 to i64
  %688 = load i32*, i32** %612, align 8
  %689 = load i64, i64* %609, align 8
  %690 = ptrtoint i32* %688 to i64
  %691 = sub i64 %689, %690
  %692 = ashr exact i64 %691, 2
  %693 = sub nsw i64 0, %692
  %694 = getelementptr inbounds i32, i32* %683, i64 %693
  %695 = ptrtoint i32* %694 to i64
  %696 = icmp sgt i64 %691, 0
  br i1 %696, label %697, label %701

697:                                              ; preds = %680
  %698 = bitcast i32* %694 to i8*
  %699 = bitcast i32* %688 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %698, i8* align 4 %699, i64 %691, i1 false) #8
  %700 = load i32*, i32** %612, align 8
  br label %701

701:                                              ; preds = %697, %680
  %702 = phi i32* [ %688, %680 ], [ %700, %697 ]
  store i64 %695, i64* %610, align 8
  store i64 %687, i64* %609, align 8
  store i64 %685, i64* %611, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %701
  %705 = bitcast i32* %702 to i8*
  call void @_ZdlPv(i8* %705) #10
  br label %706

706:                                              ; preds = %704, %701, %651
  %707 = icmp sgt i32 %644, -1
  br i1 %707, label %708, label %780

708:                                              ; preds = %706
  %709 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %710 = sext i32 %644 to i64
  %711 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %709, i64 0, i32 0, i32 0
  %712 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %711, align 8
  %713 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %712, i64 %710, i32 3
  %714 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %712, i64 %710, i32 3, i32 0, i32 1
  %715 = load i32*, i32** %714, align 8
  %716 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %712, i64 %710, i32 3, i32 0, i32 2, i32 0, i32 0
  %717 = load i32*, i32** %716, align 8
  %718 = icmp eq i32* %715, %717
  %719 = ptrtoint i32* %717 to i64
  br i1 %718, label %724, label %720

720:                                              ; preds = %708
  store i32 %638, i32* %715, align 4
  %721 = getelementptr inbounds i32, i32* %715, i64 1
  %722 = ptrtoint i32* %721 to i64
  %723 = bitcast i32** %714 to i64*
  store i64 %722, i64* %723, align 8
  br label %780

724:                                              ; preds = %708
  %725 = ptrtoint i32* %715 to i64
  %726 = bitcast i32** %714 to i64*
  %727 = bitcast %"class.std::__1::vector.0"* %713 to i64*
  %728 = load i64, i64* %727, align 8
  %729 = sub i64 %725, %728
  %730 = ashr exact i64 %729, 2
  %731 = add nsw i64 %730, 1
  %732 = icmp ugt i64 %731, 4611686018427387903
  br i1 %732, label %733, label %735

733:                                              ; preds = %724
  %734 = bitcast %"class.std::__1::vector.0"* %713 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %734) #9
  unreachable

735:                                              ; preds = %724
  %736 = bitcast i32** %716 to i64*
  %737 = sub i64 %719, %728
  %738 = ashr exact i64 %737, 2
  %739 = icmp ult i64 %738, 2305843009213693951
  br i1 %739, label %740, label %748

740:                                              ; preds = %735
  %741 = ashr exact i64 %737, 1
  %742 = icmp ult i64 %741, %731
  %743 = select i1 %742, i64 %731, i64 %741
  %744 = icmp eq i64 %743, 0
  br i1 %744, label %753, label %745

745:                                              ; preds = %740
  %746 = icmp ugt i64 %743, 4611686018427387903
  br i1 %746, label %747, label %748

747:                                              ; preds = %745
  call void @abort() #9
  unreachable

748:                                              ; preds = %745, %735
  %749 = phi i64 [ %743, %745 ], [ 4611686018427387903, %735 ]
  %750 = shl i64 %749, 2
  %751 = call i8* @_Znwm(i64 %750) #10
  %752 = bitcast i8* %751 to i32*
  br label %753

753:                                              ; preds = %748, %740
  %754 = phi i64 [ %749, %748 ], [ 0, %740 ]
  %755 = phi i32* [ %752, %748 ], [ null, %740 ]
  %756 = getelementptr inbounds i32, i32* %755, i64 %730
  %757 = getelementptr inbounds i32, i32* %755, i64 %754
  %758 = ptrtoint i32* %757 to i64
  store i32 %638, i32* %756, align 4
  %759 = getelementptr inbounds i32, i32* %756, i64 1
  %760 = ptrtoint i32* %759 to i64
  %761 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %713, i64 0, i32 0, i32 0
  %762 = load i32*, i32** %761, align 8
  %763 = load i64, i64* %726, align 8
  %764 = ptrtoint i32* %762 to i64
  %765 = sub i64 %763, %764
  %766 = ashr exact i64 %765, 2
  %767 = sub nsw i64 0, %766
  %768 = getelementptr inbounds i32, i32* %756, i64 %767
  %769 = ptrtoint i32* %768 to i64
  %770 = icmp sgt i64 %765, 0
  br i1 %770, label %771, label %775

771:                                              ; preds = %753
  %772 = bitcast i32* %768 to i8*
  %773 = bitcast i32* %762 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %772, i8* align 4 %773, i64 %765, i1 false) #8
  %774 = load i32*, i32** %761, align 8
  br label %775

775:                                              ; preds = %771, %753
  %776 = phi i32* [ %762, %753 ], [ %774, %771 ]
  store i64 %769, i64* %727, align 8
  store i64 %760, i64* %726, align 8
  store i64 %758, i64* %736, align 8
  %777 = icmp eq i32* %776, null
  br i1 %777, label %780, label %778

778:                                              ; preds = %775
  %779 = bitcast i32* %776 to i8*
  call void @_ZdlPv(i8* %779) #10
  br label %780

780:                                              ; preds = %778, %775, %720, %706, %640, %636
  %781 = getelementptr inbounds i32, i32* %637, i64 1
  %782 = icmp eq i32* %781, %602
  br i1 %782, label %783, label %636

783:                                              ; preds = %469, %780, %597, %485, %431
  %784 = phi i8 [ 1, %597 ], [ %433, %431 ], [ %433, %485 ], [ 1, %780 ], [ %433, %469 ]
  %785 = add nuw i64 %432, 1
  %786 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %787 = bitcast %"class.tflite::GraphInfo"* %786 to i64 (%"class.tflite::GraphInfo"*)***
  %788 = load i64 (%"class.tflite::GraphInfo"*)**, i64 (%"class.tflite::GraphInfo"*)*** %787, align 8
  %789 = getelementptr inbounds i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %788, i64 4
  %790 = load i64 (%"class.tflite::GraphInfo"*)*, i64 (%"class.tflite::GraphInfo"*)** %789, align 8
  %791 = call i64 %790(%"class.tflite::GraphInfo"* %786) #8
  %792 = icmp ugt i64 %791, %785
  br i1 %792, label %431, label %428

793:                                              ; preds = %428, %420
  %794 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %795 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %794, i64 0, i32 0, i32 1
  %796 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %795, align 8
  %797 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 1, i32 0, i32 0
  %798 = load i32*, i32** %797, align 8
  %799 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 1, i32 0, i32 1
  %800 = load i32*, i32** %799, align 8
  %801 = icmp eq i32* %798, %800
  br i1 %801, label %802, label %358

802:                                              ; preds = %793
  %803 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %794, i64 0, i32 0, i32 1
  %804 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 1, i32 0, i32 0
  %805 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 1, i32 0, i32 1
  %806 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1
  %807 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 3, i32 0, i32 0
  %808 = load i32*, i32** %807, align 8
  %809 = icmp eq i32* %808, null
  br i1 %809, label %815, label %810

810:                                              ; preds = %802
  %811 = ptrtoint i32* %808 to i64
  %812 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 3, i32 0, i32 1
  %813 = bitcast i32** %812 to i64*
  store i64 %811, i64* %813, align 8
  %814 = bitcast i32* %808 to i8*
  call void @_ZdlPv(i8* %814) #10
  br label %815

815:                                              ; preds = %810, %802
  %816 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 2, i32 0, i32 0
  %817 = load i32*, i32** %816, align 8
  %818 = icmp eq i32* %817, null
  br i1 %818, label %824, label %819

819:                                              ; preds = %815
  %820 = ptrtoint i32* %817 to i64
  %821 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %796, i64 -1, i32 2, i32 0, i32 1
  %822 = bitcast i32** %821 to i64*
  store i64 %820, i64* %822, align 8
  %823 = bitcast i32* %817 to i8*
  call void @_ZdlPv(i8* %823) #10
  br label %824

824:                                              ; preds = %819, %815
  %825 = load i32*, i32** %804, align 8
  %826 = icmp eq i32* %825, null
  br i1 %826, label %831, label %827

827:                                              ; preds = %824
  %828 = ptrtoint i32* %825 to i64
  %829 = bitcast i32** %805 to i64*
  store i64 %828, i64* %829, align 8
  %830 = bitcast i32* %825 to i8*
  call void @_ZdlPv(i8* %830) #10
  br label %831

831:                                              ; preds = %827, %824
  store %"struct.tflite::NodeSubset"* %806, %"struct.tflite::NodeSubset"** %803, align 8
  %832 = load %"class.tflite::GraphInfo"*, %"class.tflite::GraphInfo"** %11, align 8
  %833 = bitcast %"class.tflite::GraphInfo"* %832 to %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)***
  %834 = load %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)**, %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)*** %833, align 8
  %835 = getelementptr inbounds %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)*, %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)** %834, i64 8
  %836 = load %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)*, %"class.std::__1::vector.0"* (%"class.tflite::GraphInfo"*)** %835, align 8
  %837 = call dereferenceable(24) %"class.std::__1::vector.0"* %836(%"class.tflite::GraphInfo"* %832) #8
  %838 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %837, i64 0, i32 0, i32 0
  %839 = load i32*, i32** %838, align 8
  %840 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %837, i64 0, i32 0, i32 1
  %841 = load i32*, i32** %840, align 8
  %842 = icmp eq i32* %839, %841
  br i1 %842, label %845, label %843

843:                                              ; preds = %831
  %844 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %119, i64 0, i32 0, i32 0
  br label %855

845:                                              ; preds = %935, %831
  %846 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %847 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %846, i64 0, i32 0, i32 0
  %848 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %847, align 8
  %849 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %846, i64 0, i32 0, i32 1
  %850 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %849, align 8
  %851 = icmp eq %"struct.tflite::NodeSubset"* %848, %850
  br i1 %851, label %1108, label %852

852:                                              ; preds = %845
  %853 = getelementptr inbounds %"struct.std::__1::__less.22", %"struct.std::__1::__less.22"* %5, i64 0, i32 0
  %854 = getelementptr inbounds %"struct.std::__1::__less.22", %"struct.std::__1::__less.22"* %6, i64 0, i32 0
  br label %938

855:                                              ; preds = %935, %843
  %856 = phi i32* [ %839, %843 ], [ %936, %935 ]
  %857 = load i32, i32* %856, align 4
  %858 = sext i32 %857 to i64
  %859 = load i32*, i32** %844, align 8
  %860 = getelementptr inbounds i32, i32* %859, i64 %858
  %861 = load i32, i32* %860, align 4
  %862 = icmp eq i32 %861, -2
  br i1 %862, label %935, label %863

863:                                              ; preds = %855
  %864 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %865 = sext i32 %861 to i64
  %866 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %864, i64 0, i32 0, i32 0
  %867 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %866, align 8
  %868 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %867, i64 %865, i32 3
  %869 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %867, i64 %865, i32 3, i32 0, i32 1
  %870 = load i32*, i32** %869, align 8
  %871 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %867, i64 %865, i32 3, i32 0, i32 2, i32 0, i32 0
  %872 = load i32*, i32** %871, align 8
  %873 = icmp eq i32* %870, %872
  %874 = ptrtoint i32* %872 to i64
  br i1 %873, label %879, label %875

875:                                              ; preds = %863
  store i32 %857, i32* %870, align 4
  %876 = getelementptr inbounds i32, i32* %870, i64 1
  %877 = ptrtoint i32* %876 to i64
  %878 = bitcast i32** %869 to i64*
  store i64 %877, i64* %878, align 8
  br label %935

879:                                              ; preds = %863
  %880 = ptrtoint i32* %870 to i64
  %881 = bitcast i32** %869 to i64*
  %882 = bitcast %"class.std::__1::vector.0"* %868 to i64*
  %883 = load i64, i64* %882, align 8
  %884 = sub i64 %880, %883
  %885 = ashr exact i64 %884, 2
  %886 = add nsw i64 %885, 1
  %887 = icmp ugt i64 %886, 4611686018427387903
  br i1 %887, label %888, label %890

888:                                              ; preds = %879
  %889 = bitcast %"class.std::__1::vector.0"* %868 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %889) #9
  unreachable

890:                                              ; preds = %879
  %891 = bitcast i32** %871 to i64*
  %892 = sub i64 %874, %883
  %893 = ashr exact i64 %892, 2
  %894 = icmp ult i64 %893, 2305843009213693951
  br i1 %894, label %895, label %903

895:                                              ; preds = %890
  %896 = ashr exact i64 %892, 1
  %897 = icmp ult i64 %896, %886
  %898 = select i1 %897, i64 %886, i64 %896
  %899 = icmp eq i64 %898, 0
  br i1 %899, label %908, label %900

900:                                              ; preds = %895
  %901 = icmp ugt i64 %898, 4611686018427387903
  br i1 %901, label %902, label %903

902:                                              ; preds = %900
  call void @abort() #9
  unreachable

903:                                              ; preds = %900, %890
  %904 = phi i64 [ %898, %900 ], [ 4611686018427387903, %890 ]
  %905 = shl i64 %904, 2
  %906 = call i8* @_Znwm(i64 %905) #10
  %907 = bitcast i8* %906 to i32*
  br label %908

908:                                              ; preds = %903, %895
  %909 = phi i64 [ %904, %903 ], [ 0, %895 ]
  %910 = phi i32* [ %907, %903 ], [ null, %895 ]
  %911 = getelementptr inbounds i32, i32* %910, i64 %885
  %912 = getelementptr inbounds i32, i32* %910, i64 %909
  %913 = ptrtoint i32* %912 to i64
  store i32 %857, i32* %911, align 4
  %914 = getelementptr inbounds i32, i32* %911, i64 1
  %915 = ptrtoint i32* %914 to i64
  %916 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %868, i64 0, i32 0, i32 0
  %917 = load i32*, i32** %916, align 8
  %918 = load i64, i64* %881, align 8
  %919 = ptrtoint i32* %917 to i64
  %920 = sub i64 %918, %919
  %921 = ashr exact i64 %920, 2
  %922 = sub nsw i64 0, %921
  %923 = getelementptr inbounds i32, i32* %911, i64 %922
  %924 = ptrtoint i32* %923 to i64
  %925 = icmp sgt i64 %920, 0
  br i1 %925, label %926, label %930

926:                                              ; preds = %908
  %927 = bitcast i32* %923 to i8*
  %928 = bitcast i32* %917 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %927, i8* align 4 %928, i64 %920, i1 false) #8
  %929 = load i32*, i32** %916, align 8
  br label %930

930:                                              ; preds = %926, %908
  %931 = phi i32* [ %917, %908 ], [ %929, %926 ]
  store i64 %924, i64* %882, align 8
  store i64 %915, i64* %881, align 8
  store i64 %913, i64* %891, align 8
  %932 = icmp eq i32* %931, null
  br i1 %932, label %935, label %933

933:                                              ; preds = %930
  %934 = bitcast i32* %931 to i8*
  call void @_ZdlPv(i8* %934) #10
  br label %935

935:                                              ; preds = %933, %930, %875, %855
  %936 = getelementptr inbounds i32, i32* %856, i64 1
  %937 = icmp eq i32* %936, %841
  br i1 %937, label %845, label %855

938:                                              ; preds = %1105, %852
  %939 = phi %"struct.tflite::NodeSubset"* [ %848, %852 ], [ %1106, %1105 ]
  %940 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %939, i64 0, i32 2, i32 0, i32 0
  %941 = load i32*, i32** %940, align 8
  %942 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %939, i64 0, i32 2, i32 0, i32 1
  %943 = load i32*, i32** %942, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %853) #8
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %941, i32* %943, %"struct.std::__1::__less.22"* nonnull dereferenceable(1) %5) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %853) #8
  %944 = load i32*, i32** %940, align 8
  %945 = load i32*, i32** %942, align 8
  %946 = icmp eq i32* %944, %945
  br i1 %946, label %955, label %947

947:                                              ; preds = %938, %951
  %948 = phi i32* [ %949, %951 ], [ %944, %938 ]
  %949 = getelementptr inbounds i32, i32* %948, i64 1
  %950 = icmp eq i32* %949, %945
  br i1 %950, label %1022, label %951

951:                                              ; preds = %947
  %952 = load i32, i32* %948, align 4
  %953 = load i32, i32* %949, align 4
  %954 = icmp eq i32 %952, %953
  br i1 %954, label %955, label %947

955:                                              ; preds = %951, %938
  %956 = phi i32* [ %944, %938 ], [ %948, %951 ]
  %957 = ptrtoint i32* %956 to i64
  %958 = icmp eq i32* %956, %945
  br i1 %958, label %1022, label %959

959:                                              ; preds = %955
  %960 = getelementptr inbounds i32, i32* %956, i64 2
  %961 = icmp eq i32* %960, %945
  br i1 %961, label %1016, label %962

962:                                              ; preds = %959
  %963 = getelementptr i32, i32* %945, i64 -3
  %964 = ptrtoint i32* %963 to i64
  %965 = sub i64 %964, %957
  %966 = lshr i64 %965, 2
  %967 = add nuw nsw i64 %966, 1
  %968 = and i64 %967, 3
  %969 = icmp eq i64 %968, 0
  br i1 %969, label %989, label %970

970:                                              ; preds = %962, %981
  %971 = phi i32* [ %984, %981 ], [ %956, %962 ]
  %972 = phi i32* [ %983, %981 ], [ %960, %962 ]
  %973 = phi i64 [ %982, %981 ], [ %957, %962 ]
  %974 = phi i64 [ %985, %981 ], [ %968, %962 ]
  %975 = load i32, i32* %971, align 4
  %976 = load i32, i32* %972, align 4
  %977 = icmp eq i32 %975, %976
  br i1 %977, label %981, label %978

978:                                              ; preds = %970
  %979 = getelementptr inbounds i32, i32* %971, i64 1
  %980 = ptrtoint i32* %979 to i64
  store i32 %976, i32* %979, align 4
  br label %981

981:                                              ; preds = %978, %970
  %982 = phi i64 [ %973, %970 ], [ %980, %978 ]
  %983 = getelementptr inbounds i32, i32* %972, i64 1
  %984 = inttoptr i64 %982 to i32*
  %985 = add i64 %974, -1
  %986 = icmp eq i64 %985, 0
  br i1 %986, label %987, label %970, !llvm.loop !11

987:                                              ; preds = %981
  %988 = inttoptr i64 %982 to i32*
  br label %989

989:                                              ; preds = %962, %987
  %990 = phi i64 [ undef, %962 ], [ %982, %987 ]
  %991 = phi i32* [ %956, %962 ], [ %988, %987 ]
  %992 = phi i32* [ %960, %962 ], [ %983, %987 ]
  %993 = phi i64 [ %957, %962 ], [ %982, %987 ]
  %994 = icmp ult i64 %965, 12
  br i1 %994, label %1012, label %995

995:                                              ; preds = %989, %1152
  %996 = phi i32* [ %1156, %1152 ], [ %991, %989 ]
  %997 = phi i32* [ %1154, %1152 ], [ %992, %989 ]
  %998 = phi i64 [ %1153, %1152 ], [ %993, %989 ]
  %999 = load i32, i32* %996, align 4
  %1000 = load i32, i32* %997, align 4
  %1001 = icmp eq i32 %999, %1000
  br i1 %1001, label %1005, label %1002

1002:                                             ; preds = %995
  %1003 = getelementptr inbounds i32, i32* %996, i64 1
  %1004 = ptrtoint i32* %1003 to i64
  store i32 %1000, i32* %1003, align 4
  br label %1005

1005:                                             ; preds = %1002, %995
  %1006 = phi i64 [ %998, %995 ], [ %1004, %1002 ]
  %1007 = getelementptr inbounds i32, i32* %997, i64 1
  %1008 = inttoptr i64 %1006 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = load i32, i32* %1007, align 4
  %1011 = icmp eq i32 %1009, %1010
  br i1 %1011, label %1132, label %1129

1012:                                             ; preds = %1152, %989
  %1013 = phi i64 [ %990, %989 ], [ %1153, %1152 ]
  %1014 = inttoptr i64 %1013 to i32*
  %1015 = load i32*, i32** %942, align 8
  br label %1016

1016:                                             ; preds = %1012, %959
  %1017 = phi i32* [ %1015, %1012 ], [ %945, %959 ]
  %1018 = phi i32* [ %1014, %1012 ], [ %956, %959 ]
  %1019 = getelementptr inbounds i32, i32* %1018, i64 1
  %1020 = icmp eq i32* %1019, %1017
  br i1 %1020, label %1022, label %1021

1021:                                             ; preds = %1016
  store i32* %1019, i32** %942, align 8
  br label %1022

1022:                                             ; preds = %947, %1021, %1016, %955
  %1023 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %939, i64 0, i32 3, i32 0, i32 0
  %1024 = load i32*, i32** %1023, align 8
  %1025 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %939, i64 0, i32 3, i32 0, i32 1
  %1026 = load i32*, i32** %1025, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %854) #8
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %1024, i32* %1026, %"struct.std::__1::__less.22"* nonnull dereferenceable(1) %6) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %854) #8
  %1027 = load i32*, i32** %1023, align 8
  %1028 = load i32*, i32** %1025, align 8
  %1029 = icmp eq i32* %1027, %1028
  br i1 %1029, label %1038, label %1030

1030:                                             ; preds = %1022, %1034
  %1031 = phi i32* [ %1032, %1034 ], [ %1027, %1022 ]
  %1032 = getelementptr inbounds i32, i32* %1031, i64 1
  %1033 = icmp eq i32* %1032, %1028
  br i1 %1033, label %1105, label %1034

1034:                                             ; preds = %1030
  %1035 = load i32, i32* %1031, align 4
  %1036 = load i32, i32* %1032, align 4
  %1037 = icmp eq i32 %1035, %1036
  br i1 %1037, label %1038, label %1030

1038:                                             ; preds = %1034, %1022
  %1039 = phi i32* [ %1027, %1022 ], [ %1031, %1034 ]
  %1040 = ptrtoint i32* %1039 to i64
  %1041 = icmp eq i32* %1039, %1028
  br i1 %1041, label %1105, label %1042

1042:                                             ; preds = %1038
  %1043 = getelementptr inbounds i32, i32* %1039, i64 2
  %1044 = icmp eq i32* %1043, %1028
  br i1 %1044, label %1099, label %1045

1045:                                             ; preds = %1042
  %1046 = getelementptr i32, i32* %1028, i64 -3
  %1047 = ptrtoint i32* %1046 to i64
  %1048 = sub i64 %1047, %1040
  %1049 = lshr i64 %1048, 2
  %1050 = add nuw nsw i64 %1049, 1
  %1051 = and i64 %1050, 3
  %1052 = icmp eq i64 %1051, 0
  br i1 %1052, label %1072, label %1053

1053:                                             ; preds = %1045, %1064
  %1054 = phi i32* [ %1067, %1064 ], [ %1039, %1045 ]
  %1055 = phi i32* [ %1066, %1064 ], [ %1043, %1045 ]
  %1056 = phi i64 [ %1065, %1064 ], [ %1040, %1045 ]
  %1057 = phi i64 [ %1068, %1064 ], [ %1051, %1045 ]
  %1058 = load i32, i32* %1054, align 4
  %1059 = load i32, i32* %1055, align 4
  %1060 = icmp eq i32 %1058, %1059
  br i1 %1060, label %1064, label %1061

1061:                                             ; preds = %1053
  %1062 = getelementptr inbounds i32, i32* %1054, i64 1
  %1063 = ptrtoint i32* %1062 to i64
  store i32 %1059, i32* %1062, align 4
  br label %1064

1064:                                             ; preds = %1061, %1053
  %1065 = phi i64 [ %1056, %1053 ], [ %1063, %1061 ]
  %1066 = getelementptr inbounds i32, i32* %1055, i64 1
  %1067 = inttoptr i64 %1065 to i32*
  %1068 = add i64 %1057, -1
  %1069 = icmp eq i64 %1068, 0
  br i1 %1069, label %1070, label %1053, !llvm.loop !12

1070:                                             ; preds = %1064
  %1071 = inttoptr i64 %1065 to i32*
  br label %1072

1072:                                             ; preds = %1045, %1070
  %1073 = phi i64 [ undef, %1045 ], [ %1065, %1070 ]
  %1074 = phi i32* [ %1039, %1045 ], [ %1071, %1070 ]
  %1075 = phi i32* [ %1043, %1045 ], [ %1066, %1070 ]
  %1076 = phi i64 [ %1040, %1045 ], [ %1065, %1070 ]
  %1077 = icmp ult i64 %1048, 12
  br i1 %1077, label %1095, label %1078

1078:                                             ; preds = %1072, %1180
  %1079 = phi i32* [ %1184, %1180 ], [ %1074, %1072 ]
  %1080 = phi i32* [ %1182, %1180 ], [ %1075, %1072 ]
  %1081 = phi i64 [ %1181, %1180 ], [ %1076, %1072 ]
  %1082 = load i32, i32* %1079, align 4
  %1083 = load i32, i32* %1080, align 4
  %1084 = icmp eq i32 %1082, %1083
  br i1 %1084, label %1088, label %1085

1085:                                             ; preds = %1078
  %1086 = getelementptr inbounds i32, i32* %1079, i64 1
  %1087 = ptrtoint i32* %1086 to i64
  store i32 %1083, i32* %1086, align 4
  br label %1088

1088:                                             ; preds = %1085, %1078
  %1089 = phi i64 [ %1081, %1078 ], [ %1087, %1085 ]
  %1090 = getelementptr inbounds i32, i32* %1080, i64 1
  %1091 = inttoptr i64 %1089 to i32*
  %1092 = load i32, i32* %1091, align 4
  %1093 = load i32, i32* %1090, align 4
  %1094 = icmp eq i32 %1092, %1093
  br i1 %1094, label %1160, label %1157

1095:                                             ; preds = %1180, %1072
  %1096 = phi i64 [ %1073, %1072 ], [ %1181, %1180 ]
  %1097 = inttoptr i64 %1096 to i32*
  %1098 = load i32*, i32** %1025, align 8
  br label %1099

1099:                                             ; preds = %1095, %1042
  %1100 = phi i32* [ %1098, %1095 ], [ %1028, %1042 ]
  %1101 = phi i32* [ %1097, %1095 ], [ %1039, %1042 ]
  %1102 = getelementptr inbounds i32, i32* %1101, i64 1
  %1103 = icmp eq i32* %1102, %1100
  br i1 %1103, label %1105, label %1104

1104:                                             ; preds = %1099
  store i32* %1102, i32** %1025, align 8
  br label %1105

1105:                                             ; preds = %1030, %1104, %1099, %1038
  %1106 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %939, i64 1
  %1107 = icmp eq %"struct.tflite::NodeSubset"* %1106, %850
  br i1 %1107, label %1108, label %938

1108:                                             ; preds = %1105, %845
  %1109 = load i32*, i32** %286, align 8
  %1110 = icmp eq i32* %1109, null
  br i1 %1110, label %1114, label %1111

1111:                                             ; preds = %1108
  %1112 = ptrtoint i32* %1109 to i64
  store i64 %1112, i64* %232, align 8
  %1113 = bitcast i32* %1109 to i8*
  call void @_ZdlPv(i8* %1113) #10
  br label %1114

1114:                                             ; preds = %1111, %1108
  %1115 = load i32*, i32** %287, align 8
  %1116 = icmp eq i32* %1115, null
  br i1 %1116, label %1120, label %1117

1117:                                             ; preds = %1114
  %1118 = ptrtoint i32* %1115 to i64
  store i64 %1118, i64* %213, align 8
  %1119 = bitcast i32* %1115 to i8*
  call void @_ZdlPv(i8* %1119) #10
  br label %1120

1120:                                             ; preds = %1117, %1114
  %1121 = load i32*, i32** %288, align 8
  %1122 = icmp eq i32* %1121, null
  br i1 %1122, label %1128, label %1123

1123:                                             ; preds = %1120
  %1124 = ptrtoint i32* %1121 to i64
  %1125 = getelementptr inbounds %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl", %"class.tflite::(anonymous namespace)::PartitionGraphIntoIndependentNodeSubsetsImpl"* %9, i64 0, i32 2, i32 0, i32 1
  %1126 = bitcast i32** %1125 to i64*
  store i64 %1124, i64* %1126, align 8
  %1127 = bitcast i32* %1121 to i8*
  call void @_ZdlPv(i8* %1127) #10
  br label %1128

1128:                                             ; preds = %1120, %1123
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %10) #8
  ret i32 0

1129:                                             ; preds = %1005
  %1130 = getelementptr inbounds i32, i32* %1008, i64 1
  %1131 = ptrtoint i32* %1130 to i64
  store i32 %1010, i32* %1130, align 4
  br label %1132

1132:                                             ; preds = %1129, %1005
  %1133 = phi i64 [ %1006, %1005 ], [ %1131, %1129 ]
  %1134 = getelementptr inbounds i32, i32* %997, i64 2
  %1135 = inttoptr i64 %1133 to i32*
  %1136 = load i32, i32* %1135, align 4
  %1137 = load i32, i32* %1134, align 4
  %1138 = icmp eq i32 %1136, %1137
  br i1 %1138, label %1142, label %1139

1139:                                             ; preds = %1132
  %1140 = getelementptr inbounds i32, i32* %1135, i64 1
  %1141 = ptrtoint i32* %1140 to i64
  store i32 %1137, i32* %1140, align 4
  br label %1142

1142:                                             ; preds = %1139, %1132
  %1143 = phi i64 [ %1133, %1132 ], [ %1141, %1139 ]
  %1144 = getelementptr inbounds i32, i32* %997, i64 3
  %1145 = inttoptr i64 %1143 to i32*
  %1146 = load i32, i32* %1145, align 4
  %1147 = load i32, i32* %1144, align 4
  %1148 = icmp eq i32 %1146, %1147
  br i1 %1148, label %1152, label %1149

1149:                                             ; preds = %1142
  %1150 = getelementptr inbounds i32, i32* %1145, i64 1
  %1151 = ptrtoint i32* %1150 to i64
  store i32 %1147, i32* %1150, align 4
  br label %1152

1152:                                             ; preds = %1149, %1142
  %1153 = phi i64 [ %1143, %1142 ], [ %1151, %1149 ]
  %1154 = getelementptr inbounds i32, i32* %997, i64 4
  %1155 = icmp eq i32* %1154, %945
  %1156 = inttoptr i64 %1153 to i32*
  br i1 %1155, label %1012, label %995

1157:                                             ; preds = %1088
  %1158 = getelementptr inbounds i32, i32* %1091, i64 1
  %1159 = ptrtoint i32* %1158 to i64
  store i32 %1093, i32* %1158, align 4
  br label %1160

1160:                                             ; preds = %1157, %1088
  %1161 = phi i64 [ %1089, %1088 ], [ %1159, %1157 ]
  %1162 = getelementptr inbounds i32, i32* %1080, i64 2
  %1163 = inttoptr i64 %1161 to i32*
  %1164 = load i32, i32* %1163, align 4
  %1165 = load i32, i32* %1162, align 4
  %1166 = icmp eq i32 %1164, %1165
  br i1 %1166, label %1170, label %1167

1167:                                             ; preds = %1160
  %1168 = getelementptr inbounds i32, i32* %1163, i64 1
  %1169 = ptrtoint i32* %1168 to i64
  store i32 %1165, i32* %1168, align 4
  br label %1170

1170:                                             ; preds = %1167, %1160
  %1171 = phi i64 [ %1161, %1160 ], [ %1169, %1167 ]
  %1172 = getelementptr inbounds i32, i32* %1080, i64 3
  %1173 = inttoptr i64 %1171 to i32*
  %1174 = load i32, i32* %1173, align 4
  %1175 = load i32, i32* %1172, align 4
  %1176 = icmp eq i32 %1174, %1175
  br i1 %1176, label %1180, label %1177

1177:                                             ; preds = %1170
  %1178 = getelementptr inbounds i32, i32* %1173, i64 1
  %1179 = ptrtoint i32* %1178 to i64
  store i32 %1175, i32* %1178, align 4
  br label %1180

1180:                                             ; preds = %1177, %1170
  %1181 = phi i64 [ %1171, %1170 ], [ %1179, %1177 ]
  %1182 = getelementptr inbounds i32, i32* %1080, i64 4
  %1183 = icmp eq i32* %1182, %1028
  %1184 = inttoptr i64 %1181 to i32*
  br i1 %1183, label %1095, label %1078
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.0"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !13

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !14
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !14
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !17, !noalias !14
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !17, !noalias !14
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !17, !noalias !14
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !17, !noalias !14
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !19

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !14
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !17, !noalias !14
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !17, !noalias !14
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !20

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.0"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #9
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #9
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #10
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !21
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !21
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !24, !noalias !21
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !24, !noalias !21
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !24, !noalias !21
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !24, !noalias !21
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !26

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !21
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !24, !noalias !21
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !24, !noalias !21
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !27

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !28

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #8
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #10
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6tflite10NodeSubsetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"*, %"struct.tflite::NodeSubset"* dereferenceable(80)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.tflite::NodeSubset"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 80
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 230584300921369395
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.tflite::NodeSubset"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 80
  %20 = icmp ult i64 %19, 115292150460684697
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 230584300921369395, %14 ]
  %28 = mul i64 %27, 80
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"struct.tflite::NodeSubset"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.tflite::NodeSubset"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %32
  %36 = ptrtoint %"struct.tflite::NodeSubset"* %35 to i64
  %37 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %34, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  store i32 %39, i32* %37, align 8
  %40 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 1
  %41 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 1
  %42 = bitcast %"class.std::__1::vector.0"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 24, i1 false) #8
  %43 = bitcast %"class.std::__1::vector.0"* %41 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector.0"* %40 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 1, i32 0, i32 1
  %47 = bitcast i32** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 1, i32 0, i32 1
  %50 = bitcast i32** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %52 = bitcast i32** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 1, i32 0, i32 2, i32 0, i32 0
  %55 = bitcast i32** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = bitcast %"class.std::__1::vector.0"* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #8
  %57 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 2
  %58 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 2
  %59 = bitcast %"class.std::__1::vector.0"* %57 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 24, i1 false) #8
  %60 = bitcast %"class.std::__1::vector.0"* %58 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.std::__1::vector.0"* %57 to i64*
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 2, i32 0, i32 1
  %64 = bitcast i32** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 2, i32 0, i32 1
  %67 = bitcast i32** %66 to i64*
  store i64 %65, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %69 = bitcast i32** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 2, i32 0, i32 2, i32 0, i32 0
  %72 = bitcast i32** %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = bitcast %"class.std::__1::vector.0"* %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #8
  %74 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 3
  %75 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 3
  %76 = bitcast %"class.std::__1::vector.0"* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #8
  %77 = bitcast %"class.std::__1::vector.0"* %75 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"class.std::__1::vector.0"* %74 to i64*
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 3, i32 0, i32 1
  %81 = bitcast i32** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 3, i32 0, i32 1
  %84 = bitcast i32** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast i32** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %33, i64 %9, i32 3, i32 0, i32 2, i32 0, i32 0
  %89 = bitcast i32** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = bitcast %"class.std::__1::vector.0"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #8
  %91 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %34, i64 1
  %92 = ptrtoint %"struct.tflite::NodeSubset"* %91 to i64
  %93 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %94 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %93, align 8
  %95 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %3, align 8
  %96 = icmp eq %"struct.tflite::NodeSubset"* %95, %94
  br i1 %96, label %97, label %99

97:                                               ; preds = %31
  %98 = ptrtoint %"struct.tflite::NodeSubset"* %94 to i64
  br label %162

99:                                               ; preds = %31, %99
  %100 = phi %"struct.tflite::NodeSubset"* [ %157, %99 ], [ %34, %31 ]
  %101 = phi %"struct.tflite::NodeSubset"* [ %102, %99 ], [ %95, %31 ]
  %102 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1
  %103 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 0
  %104 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %102, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  store i32 %105, i32* %103, align 8
  %106 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 1
  %107 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 1
  %108 = bitcast %"class.std::__1::vector.0"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 24, i1 false) #8
  %109 = bitcast %"class.std::__1::vector.0"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.std::__1::vector.0"* %106 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 1, i32 0, i32 1
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 1, i32 0, i32 1
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %121 = bitcast i32** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"class.std::__1::vector.0"* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 24, i1 false) #8
  %123 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 2
  %124 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 2
  %125 = bitcast %"class.std::__1::vector.0"* %123 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %125, i8 0, i64 24, i1 false) #8
  %126 = bitcast %"class.std::__1::vector.0"* %124 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast %"class.std::__1::vector.0"* %123 to i64*
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 2, i32 0, i32 1
  %130 = bitcast i32** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 2, i32 0, i32 1
  %133 = bitcast i32** %132 to i64*
  store i64 %131, i64* %133, align 8
  %134 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %135 = bitcast i32** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %138 = bitcast i32** %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = bitcast %"class.std::__1::vector.0"* %124 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #8
  %140 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 3
  %141 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 3
  %142 = bitcast %"class.std::__1::vector.0"* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 24, i1 false) #8
  %143 = bitcast %"class.std::__1::vector.0"* %141 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.std::__1::vector.0"* %140 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 3, i32 0, i32 1
  %147 = bitcast i32** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 3, i32 0, i32 1
  %150 = bitcast i32** %149 to i64*
  store i64 %148, i64* %150, align 8
  %151 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %101, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %152 = bitcast i32** %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %155 = bitcast i32** %154 to i64*
  store i64 %153, i64* %155, align 8
  %156 = bitcast %"class.std::__1::vector.0"* %141 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 24, i1 false) #8
  %157 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %100, i64 -1
  %158 = icmp eq %"struct.tflite::NodeSubset"* %102, %94
  br i1 %158, label %159, label %99

159:                                              ; preds = %99
  %160 = load i64, i64* %6, align 8
  %161 = load %"struct.tflite::NodeSubset"*, %"struct.tflite::NodeSubset"** %3, align 8
  br label %162

162:                                              ; preds = %97, %159
  %163 = phi %"struct.tflite::NodeSubset"* [ %94, %97 ], [ %161, %159 ]
  %164 = phi %"struct.tflite::NodeSubset"* [ %34, %97 ], [ %157, %159 ]
  %165 = phi i64 [ %98, %97 ], [ %160, %159 ]
  %166 = ptrtoint %"struct.tflite::NodeSubset"* %164 to i64
  store i64 %166, i64* %6, align 8
  store i64 %92, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %167 = inttoptr i64 %165 to %"struct.tflite::NodeSubset"*
  %168 = icmp eq %"struct.tflite::NodeSubset"* %163, %167
  br i1 %168, label %200, label %169

169:                                              ; preds = %162, %198
  %170 = phi %"struct.tflite::NodeSubset"* [ %171, %198 ], [ %163, %162 ]
  %171 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1
  %172 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 3, i32 0, i32 0
  %173 = load i32*, i32** %172, align 8
  %174 = icmp eq i32* %173, null
  br i1 %174, label %180, label %175

175:                                              ; preds = %169
  %176 = ptrtoint i32* %173 to i64
  %177 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 3, i32 0, i32 1
  %178 = bitcast i32** %177 to i64*
  store i64 %176, i64* %178, align 8
  %179 = bitcast i32* %173 to i8*
  tail call void @_ZdlPv(i8* %179) #10
  br label %180

180:                                              ; preds = %175, %169
  %181 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 2, i32 0, i32 0
  %182 = load i32*, i32** %181, align 8
  %183 = icmp eq i32* %182, null
  br i1 %183, label %189, label %184

184:                                              ; preds = %180
  %185 = ptrtoint i32* %182 to i64
  %186 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 2, i32 0, i32 1
  %187 = bitcast i32** %186 to i64*
  store i64 %185, i64* %187, align 8
  %188 = bitcast i32* %182 to i8*
  tail call void @_ZdlPv(i8* %188) #10
  br label %189

189:                                              ; preds = %184, %180
  %190 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 1, i32 0, i32 0
  %191 = load i32*, i32** %190, align 8
  %192 = icmp eq i32* %191, null
  br i1 %192, label %198, label %193

193:                                              ; preds = %189
  %194 = ptrtoint i32* %191 to i64
  %195 = getelementptr inbounds %"struct.tflite::NodeSubset", %"struct.tflite::NodeSubset"* %170, i64 -1, i32 1, i32 0, i32 1
  %196 = bitcast i32** %195 to i64*
  store i64 %194, i64* %196, align 8
  %197 = bitcast i32* %191 to i8*
  tail call void @_ZdlPv(i8* %197) #10
  br label %198

198:                                              ; preds = %193, %189
  %199 = icmp eq %"struct.tflite::NodeSubset"* %171, %167
  br i1 %199, label %200, label %169

200:                                              ; preds = %198, %162
  %201 = icmp eq i64 %165, 0
  br i1 %201, label %204, label %202

202:                                              ; preds = %200
  %203 = inttoptr i64 %165 to i8*
  tail call void @_ZdlPv(i8* %203) #10
  br label %204

204:                                              ; preds = %200, %202
  ret void
}

declare void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32*, i32*, %"struct.std::__1::__less.22"* dereferenceable(1)) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !3}
