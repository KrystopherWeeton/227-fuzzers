; ModuleID = '../../third_party/libyuv/source/compare.cc'
source_filename = "../../third_party/libyuv/source/compare.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @HashDjb2(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = tail call i32 @InitCpuFlags() #5
  br label %8

8:                                                ; preds = %3, %6
  %9 = phi i32 [ %7, %6 ], [ %4, %3 ]
  %10 = trunc i32 %9 to i8
  %11 = icmp sgt i8 %10, -1
  %12 = select i1 %11, i32 (i8*, i32, i32)* @HashDjb2_C, i32 (i8*, i32, i32)* @HashDjb2_SSE41
  %13 = icmp ugt i64 %1, 32767
  br i1 %13, label %14, label %24

14:                                               ; preds = %8, %14
  %15 = phi i8* [ %19, %14 ], [ %0, %8 ]
  %16 = phi i32 [ %18, %14 ], [ %2, %8 ]
  %17 = phi i64 [ %20, %14 ], [ %1, %8 ]
  %18 = tail call i32 %12(i8* %15, i32 32768, i32 %16) #5, !callees !2
  %19 = getelementptr inbounds i8, i8* %15, i64 32768
  %20 = add i64 %17, -32768
  %21 = icmp ugt i64 %20, 32767
  br i1 %21, label %14, label %22

22:                                               ; preds = %14
  %23 = and i64 %1, 32767
  br label %24

24:                                               ; preds = %22, %8
  %25 = phi i64 [ %1, %8 ], [ %23, %22 ]
  %26 = phi i32 [ %2, %8 ], [ %18, %22 ]
  %27 = phi i8* [ %0, %8 ], [ %19, %22 ]
  %28 = trunc i64 %25 to i32
  %29 = and i32 %28, -16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %37, label %31

31:                                               ; preds = %24
  %32 = tail call i32 %12(i8* %27, i32 %29, i32 %26) #5, !callees !2
  %33 = sext i32 %29 to i64
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = trunc i64 %25 to i32
  %36 = sub nsw i32 %35, %29
  br label %37

37:                                               ; preds = %24, %31
  %38 = phi i32 [ %28, %24 ], [ %36, %31 ]
  %39 = phi i32 [ %26, %24 ], [ %32, %31 ]
  %40 = phi i8* [ %27, %24 ], [ %34, %31 ]
  %41 = and i32 %38, 15
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %37
  %44 = tail call i32 @HashDjb2_C(i8* %40, i32 %41, i32 %39) #5
  br label %45

45:                                               ; preds = %37, %43
  %46 = phi i32 [ %44, %43 ], [ %39, %37 ]
  ret i32 %46
}

declare i32 @HashDjb2_C(i8*, i32, i32) local_unnamed_addr #1

declare i32 @HashDjb2_SSE41(i8*, i32, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ARGBDetect(i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 {
  %5 = shl nsw i32 %2, 2
  %6 = icmp eq i32 %5, %1
  %7 = select i1 %6, i32 %3, i32 1
  %8 = mul nsw i32 %7, %2
  %9 = select i1 %6, i32 1, i32 %3
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %55

11:                                               ; preds = %4
  %12 = select i1 %6, i32 0, i32 %1
  %13 = add nsw i32 %8, -1
  %14 = icmp sgt i32 %13, 0
  %15 = and i32 %8, 1
  %16 = icmp eq i32 %15, 0
  %17 = sext i32 %12 to i64
  br label %18

18:                                               ; preds = %11, %51
  %19 = phi i32 [ 0, %11 ], [ %53, %51 ]
  %20 = phi i8* [ %0, %11 ], [ %52, %51 ]
  br i1 %14, label %21, label %42

21:                                               ; preds = %18, %38
  %22 = phi i32 [ %40, %38 ], [ 0, %18 ]
  %23 = phi i8* [ %39, %38 ], [ %20, %18 ]
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -1
  br i1 %25, label %26, label %55

26:                                               ; preds = %21
  %27 = getelementptr inbounds i8, i8* %23, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, -1
  br i1 %29, label %30, label %55

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %23, i64 4
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, -1
  br i1 %33, label %34, label %55

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %23, i64 7
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, -1
  br i1 %37, label %38, label %55

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %23, i64 8
  %40 = add nuw nsw i32 %22, 2
  %41 = icmp slt i32 %40, %13
  br i1 %41, label %21, label %42

42:                                               ; preds = %38, %18
  %43 = phi i8* [ %20, %18 ], [ %39, %38 ]
  br i1 %16, label %51, label %44

44:                                               ; preds = %42
  %45 = load i8, i8* %43, align 1
  %46 = icmp eq i8 %45, -1
  br i1 %46, label %47, label %55

47:                                               ; preds = %44
  %48 = getelementptr inbounds i8, i8* %43, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, -1
  br i1 %50, label %51, label %55

51:                                               ; preds = %42, %47
  %52 = getelementptr inbounds i8, i8* %20, i64 %17
  %53 = add nuw nsw i32 %19, 1
  %54 = icmp slt i32 %53, %9
  br i1 %54, label %18, label %55

55:                                               ; preds = %47, %44, %51, %21, %26, %30, %34, %4
  %56 = phi i32 [ 0, %4 ], [ 1111970369, %34 ], [ 1095911234, %30 ], [ 1111970369, %26 ], [ 1095911234, %21 ], [ 1095911234, %44 ], [ 1111970369, %47 ], [ 0, %51 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @ComputeHammingDistance(i8*, i8*, i32) local_unnamed_addr #0 {
  %4 = and i32 %2, 32704
  %5 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 @InitCpuFlags() #5
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i32 [ %8, %7 ], [ %5, %3 ]
  %11 = and i32 %10, 64
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 (i8*, i8*, i32)* @HammingDistance_C, i32 (i8*, i8*, i32)* @HammingDistance_SSSE3
  %14 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = tail call i32 @InitCpuFlags() #5
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi i32 [ %17, %16 ], [ %14, %9 ]
  %20 = and i32 %19, 256
  %21 = icmp eq i32 %20, 0
  %22 = select i1 %21, i32 (i8*, i8*, i32)* %13, i32 (i8*, i8*, i32)* @HammingDistance_SSE42
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %18
  %26 = tail call i32 @InitCpuFlags() #5
  br label %27

27:                                               ; preds = %18, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %18 ]
  %29 = and i32 %28, 1024
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 (i8*, i8*, i32)* %22, i32 (i8*, i8*, i32)* @HammingDistance_AVX2
  %32 = add nsw i32 %2, -32767
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %45

34:                                               ; preds = %27, %34
  %35 = phi i64 [ %42, %34 ], [ 0, %27 ]
  %36 = phi i64 [ %41, %34 ], [ 0, %27 ]
  %37 = getelementptr inbounds i8, i8* %0, i64 %35
  %38 = getelementptr inbounds i8, i8* %1, i64 %35
  %39 = tail call i32 %31(i8* %37, i8* %38, i32 32768) #5, !callees !3
  %40 = zext i32 %39 to i64
  %41 = add i64 %36, %40
  %42 = add nuw i64 %35, 32768
  %43 = trunc i64 %42 to i32
  %44 = icmp sgt i32 %32, %43
  br i1 %44, label %34, label %45

45:                                               ; preds = %34, %27
  %46 = phi i64 [ 0, %27 ], [ %41, %34 ]
  %47 = and i32 %2, -32768
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %0, i64 %48
  %50 = getelementptr inbounds i8, i8* %1, i64 %48
  %51 = icmp eq i32 %4, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %45
  %53 = tail call i32 %31(i8* %49, i8* %50, i32 %4) #5, !callees !3
  %54 = zext i32 %53 to i64
  %55 = add i64 %46, %54
  %56 = zext i32 %4 to i64
  %57 = getelementptr inbounds i8, i8* %49, i64 %56
  %58 = getelementptr inbounds i8, i8* %50, i64 %56
  br label %59

59:                                               ; preds = %45, %52
  %60 = phi i8* [ %58, %52 ], [ %50, %45 ]
  %61 = phi i8* [ %57, %52 ], [ %49, %45 ]
  %62 = phi i64 [ %55, %52 ], [ %46, %45 ]
  %63 = and i32 %2, 63
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %59
  %66 = tail call i32 @HammingDistance_C(i8* %61, i8* %60, i32 %63) #5
  %67 = zext i32 %66 to i64
  %68 = add i64 %62, %67
  br label %69

69:                                               ; preds = %59, %65
  %70 = phi i64 [ %68, %65 ], [ %62, %59 ]
  ret i64 %70
}

declare i32 @HammingDistance_C(i8*, i8*, i32) local_unnamed_addr #1

declare i32 @HammingDistance_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare i32 @HammingDistance_SSE42(i8*, i8*, i32) local_unnamed_addr #1

declare i32 @HammingDistance_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @ComputeSumSquareError(i8*, i8*, i32) local_unnamed_addr #0 {
  %4 = and i32 %2, 65504
  %5 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 @InitCpuFlags() #5
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i32 [ %8, %7 ], [ %5, %3 ]
  %11 = and i32 %10, 32
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 (i8*, i8*, i32)* @SumSquareError_C, i32 (i8*, i8*, i32)* @SumSquareError_SSE2
  %14 = add nsw i32 %2, -65535
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %27

16:                                               ; preds = %9, %16
  %17 = phi i64 [ %24, %16 ], [ 0, %9 ]
  %18 = phi i64 [ %23, %16 ], [ 0, %9 ]
  %19 = getelementptr inbounds i8, i8* %0, i64 %17
  %20 = getelementptr inbounds i8, i8* %1, i64 %17
  %21 = tail call i32 %13(i8* %19, i8* %20, i32 65536) #5, !callees !4
  %22 = zext i32 %21 to i64
  %23 = add i64 %18, %22
  %24 = add nuw i64 %17, 65536
  %25 = trunc i64 %24 to i32
  %26 = icmp sgt i32 %14, %25
  br i1 %26, label %16, label %27

27:                                               ; preds = %16, %9
  %28 = phi i64 [ 0, %9 ], [ %23, %16 ]
  %29 = and i32 %2, -65536
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = getelementptr inbounds i8, i8* %1, i64 %30
  %33 = icmp eq i32 %4, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %27
  %35 = tail call i32 %13(i8* %31, i8* %32, i32 %4) #5, !callees !4
  %36 = zext i32 %35 to i64
  %37 = add i64 %28, %36
  %38 = zext i32 %4 to i64
  %39 = getelementptr inbounds i8, i8* %31, i64 %38
  %40 = getelementptr inbounds i8, i8* %32, i64 %38
  br label %41

41:                                               ; preds = %27, %34
  %42 = phi i8* [ %40, %34 ], [ %32, %27 ]
  %43 = phi i8* [ %39, %34 ], [ %31, %27 ]
  %44 = phi i64 [ %37, %34 ], [ %28, %27 ]
  %45 = and i32 %2, 31
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %41
  %48 = tail call i32 @SumSquareError_C(i8* %43, i8* %42, i32 %45) #5
  %49 = zext i32 %48 to i64
  %50 = add i64 %44, %49
  br label %51

51:                                               ; preds = %41, %47
  %52 = phi i64 [ %50, %47 ], [ %44, %41 ]
  ret i64 %52
}

declare i32 @SumSquareError_C(i8*, i8*, i32) local_unnamed_addr #1

declare i32 @SumSquareError_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @ComputeSumSquareErrorPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %1, %4
  %8 = icmp eq i32 %3, %4
  %9 = and i1 %7, %8
  %10 = select i1 %9, i32 %5, i32 1
  %11 = mul nsw i32 %10, %4
  %12 = select i1 %9, i32 1, i32 %5
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %78

14:                                               ; preds = %6
  %15 = and i32 %11, 65504
  %16 = add nsw i32 %11, -65535
  %17 = icmp sgt i32 %16, 0
  %18 = and i32 %11, -65536
  %19 = sext i32 %18 to i64
  %20 = icmp eq i32 %15, 0
  %21 = zext i32 %15 to i64
  %22 = and i32 %11, 31
  %23 = icmp eq i32 %22, 0
  %24 = sext i32 %1 to i64
  %25 = select i1 %9, i64 0, i64 %24
  %26 = sext i32 %3 to i64
  %27 = select i1 %9, i64 0, i64 %26
  br label %28

28:                                               ; preds = %71, %14
  %29 = phi i32 [ 0, %14 ], [ %76, %71 ]
  %30 = phi i64 [ 0, %14 ], [ %73, %71 ]
  %31 = phi i8* [ %2, %14 ], [ %75, %71 ]
  %32 = phi i8* [ %0, %14 ], [ %74, %71 ]
  %33 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = tail call i32 @InitCpuFlags() #5
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %33, %28 ]
  %39 = and i32 %38, 32
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i32 (i8*, i8*, i32)* @SumSquareError_C, i32 (i8*, i8*, i32)* @SumSquareError_SSE2
  br i1 %17, label %42, label %53

42:                                               ; preds = %37, %42
  %43 = phi i64 [ %50, %42 ], [ 0, %37 ]
  %44 = phi i64 [ %49, %42 ], [ 0, %37 ]
  %45 = getelementptr inbounds i8, i8* %32, i64 %43
  %46 = getelementptr inbounds i8, i8* %31, i64 %43
  %47 = tail call i32 %41(i8* %45, i8* %46, i32 65536) #5, !callees !4
  %48 = zext i32 %47 to i64
  %49 = add i64 %44, %48
  %50 = add nuw i64 %43, 65536
  %51 = trunc i64 %50 to i32
  %52 = icmp sgt i32 %16, %51
  br i1 %52, label %42, label %53

53:                                               ; preds = %42, %37
  %54 = phi i64 [ 0, %37 ], [ %49, %42 ]
  %55 = getelementptr inbounds i8, i8* %32, i64 %19
  %56 = getelementptr inbounds i8, i8* %31, i64 %19
  br i1 %20, label %63, label %57

57:                                               ; preds = %53
  %58 = tail call i32 %41(i8* %55, i8* %56, i32 %15) #5, !callees !4
  %59 = zext i32 %58 to i64
  %60 = add i64 %54, %59
  %61 = getelementptr inbounds i8, i8* %55, i64 %21
  %62 = getelementptr inbounds i8, i8* %56, i64 %21
  br label %63

63:                                               ; preds = %57, %53
  %64 = phi i8* [ %62, %57 ], [ %56, %53 ]
  %65 = phi i8* [ %61, %57 ], [ %55, %53 ]
  %66 = phi i64 [ %60, %57 ], [ %54, %53 ]
  br i1 %23, label %71, label %67

67:                                               ; preds = %63
  %68 = tail call i32 @SumSquareError_C(i8* %65, i8* %64, i32 %22) #5
  %69 = zext i32 %68 to i64
  %70 = add i64 %66, %69
  br label %71

71:                                               ; preds = %63, %67
  %72 = phi i64 [ %70, %67 ], [ %66, %63 ]
  %73 = add i64 %72, %30
  %74 = getelementptr inbounds i8, i8* %32, i64 %25
  %75 = getelementptr inbounds i8, i8* %31, i64 %27
  %76 = add nuw nsw i32 %29, 1
  %77 = icmp eq i32 %76, %12
  br i1 %77, label %78, label %28

78:                                               ; preds = %71, %6
  %79 = phi i64 [ 0, %6 ], [ %73, %71 ]
  ret i64 %79
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @SumSquareErrorToPsnr(i64, i64) local_unnamed_addr #3 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = uitofp i64 %1 to double
  %6 = uitofp i64 %0 to double
  %7 = fdiv double %5, %6
  %8 = fmul contract double %7, 6.502500e+04
  %9 = tail call double @log10(double %8) #5
  %10 = fmul contract double %9, 1.000000e+01
  br label %11

11:                                               ; preds = %2, %4
  %12 = phi double [ %10, %4 ], [ 1.280000e+02, %2 ]
  %13 = fcmp ogt double %12, 1.280000e+02
  %14 = select i1 %13, double 1.280000e+02, double %12
  ret double %14
}

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden double @CalcFramePsnr(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = tail call i64 @ComputeSumSquareErrorPlane(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %6
  %10 = sext i32 %4 to i64
  %11 = sext i32 %5 to i64
  %12 = mul nsw i64 %11, %10
  %13 = uitofp i64 %12 to double
  %14 = uitofp i64 %7 to double
  %15 = fdiv double %13, %14
  %16 = fmul contract double %15, 6.502500e+04
  %17 = tail call double @log10(double %16) #5
  %18 = fmul contract double %17, 1.000000e+01
  br label %19

19:                                               ; preds = %6, %9
  %20 = phi double [ %18, %9 ], [ 1.280000e+02, %6 ]
  %21 = fcmp ogt double %20, 1.280000e+02
  %22 = select i1 %21, double 1.280000e+02, double %20
  ret double %22
}

; Function Attrs: nounwind ssp uwtable
define hidden double @I420Psnr(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call i64 @ComputeSumSquareErrorPlane(i8* %0, i32 %1, i8* %6, i32 %7, i32 %12, i32 %13)
  %16 = add nsw i32 %12, 1
  %17 = ashr i32 %16, 1
  %18 = add nsw i32 %13, 1
  %19 = ashr i32 %18, 1
  %20 = tail call i64 @ComputeSumSquareErrorPlane(i8* %2, i32 %3, i8* %8, i32 %9, i32 %17, i32 %19)
  %21 = tail call i64 @ComputeSumSquareErrorPlane(i8* %4, i32 %5, i8* %10, i32 %11, i32 %17, i32 %19)
  %22 = add i64 %20, %15
  %23 = add i64 %22, %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %40, label %25

25:                                               ; preds = %14
  %26 = sext i32 %12 to i64
  %27 = sext i32 %13 to i64
  %28 = mul nsw i64 %27, %26
  %29 = sext i32 %17 to i64
  %30 = sext i32 %19 to i64
  %31 = shl nsw i64 %29, 1
  %32 = mul nsw i64 %31, %30
  %33 = add i64 %32, %28
  %34 = uitofp i64 %33 to double
  %35 = uitofp i64 %23 to double
  %36 = fdiv double %34, %35
  %37 = fmul contract double %36, 6.502500e+04
  %38 = tail call double @log10(double %37) #5
  %39 = fmul contract double %38, 1.000000e+01
  br label %40

40:                                               ; preds = %14, %25
  %41 = phi double [ %39, %25 ], [ 1.280000e+02, %14 ]
  %42 = fcmp ogt double %41, 1.280000e+02
  %43 = select i1 %42, double 1.280000e+02, double %41
  ret double %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @CalcFrameSsim(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 {
  %7 = add nsw i32 %5, -8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %233

9:                                                ; preds = %6
  %10 = add nsw i32 %4, -8
  %11 = icmp sgt i32 %10, 0
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = shl nsw i32 %3, 2
  %17 = sext i32 %16 to i64
  %18 = sext i32 %10 to i64
  %19 = add i32 %4, -9
  %20 = lshr i32 %19, 2
  %21 = add nuw nsw i32 %20, 1
  br label %22

22:                                               ; preds = %9, %226
  %23 = phi i32 [ 0, %9 ], [ %231, %226 ]
  %24 = phi double [ 0.000000e+00, %9 ], [ %228, %226 ]
  %25 = phi i32 [ 0, %9 ], [ %227, %226 ]
  %26 = phi i8* [ %0, %9 ], [ %229, %226 ]
  %27 = phi i8* [ %2, %9 ], [ %230, %226 ]
  br i1 %11, label %28, label %226

28:                                               ; preds = %22, %219
  %29 = phi i64 [ %222, %219 ], [ 0, %22 ]
  %30 = phi double [ %221, %219 ], [ %24, %22 ]
  %31 = getelementptr inbounds i8, i8* %26, i64 %29
  %32 = getelementptr inbounds i8, i8* %27, i64 %29
  br label %33

33:                                               ; preds = %33, %28
  %34 = phi i8* [ %31, %28 ], [ %192, %33 ]
  %35 = phi i8* [ %32, %28 ], [ %193, %33 ]
  %36 = phi i64 [ 0, %28 ], [ %176, %33 ]
  %37 = phi i64 [ 0, %28 ], [ %180, %33 ]
  %38 = phi i64 [ 0, %28 ], [ %184, %33 ]
  %39 = phi i32 [ 0, %28 ], [ %194, %33 ]
  %40 = phi i64 [ 0, %28 ], [ %191, %33 ]
  %41 = phi i64 [ 0, %28 ], [ %188, %33 ]
  %42 = load i8, i8* %34, align 1
  %43 = zext i8 %42 to i64
  %44 = add nsw i64 %36, %43
  %45 = load i8, i8* %35, align 1
  %46 = zext i8 %45 to i64
  %47 = add nsw i64 %37, %46
  %48 = zext i8 %42 to i32
  %49 = mul nuw nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add nsw i64 %38, %50
  %52 = zext i8 %45 to i32
  %53 = mul nuw nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add nsw i64 %41, %54
  %56 = mul nuw nsw i32 %52, %48
  %57 = zext i32 %56 to i64
  %58 = add nsw i64 %40, %57
  %59 = getelementptr inbounds i8, i8* %34, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = add nsw i64 %44, %61
  %63 = getelementptr inbounds i8, i8* %35, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = add nsw i64 %47, %65
  %67 = zext i8 %60 to i32
  %68 = mul nuw nsw i32 %67, %67
  %69 = zext i32 %68 to i64
  %70 = add nsw i64 %51, %69
  %71 = zext i8 %64 to i32
  %72 = mul nuw nsw i32 %71, %71
  %73 = zext i32 %72 to i64
  %74 = add nsw i64 %55, %73
  %75 = mul nuw nsw i32 %71, %67
  %76 = zext i32 %75 to i64
  %77 = add nsw i64 %58, %76
  %78 = getelementptr inbounds i8, i8* %34, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = add nsw i64 %62, %80
  %82 = getelementptr inbounds i8, i8* %35, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = add nsw i64 %66, %84
  %86 = zext i8 %79 to i32
  %87 = mul nuw nsw i32 %86, %86
  %88 = zext i32 %87 to i64
  %89 = add nsw i64 %70, %88
  %90 = zext i8 %83 to i32
  %91 = mul nuw nsw i32 %90, %90
  %92 = zext i32 %91 to i64
  %93 = add nsw i64 %74, %92
  %94 = mul nuw nsw i32 %90, %86
  %95 = zext i32 %94 to i64
  %96 = add nsw i64 %77, %95
  %97 = getelementptr inbounds i8, i8* %34, i64 3
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = add nsw i64 %81, %99
  %101 = getelementptr inbounds i8, i8* %35, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i64
  %104 = add nsw i64 %85, %103
  %105 = zext i8 %98 to i32
  %106 = mul nuw nsw i32 %105, %105
  %107 = zext i32 %106 to i64
  %108 = add nsw i64 %89, %107
  %109 = zext i8 %102 to i32
  %110 = mul nuw nsw i32 %109, %109
  %111 = zext i32 %110 to i64
  %112 = add nsw i64 %93, %111
  %113 = mul nuw nsw i32 %109, %105
  %114 = zext i32 %113 to i64
  %115 = add nsw i64 %96, %114
  %116 = getelementptr inbounds i8, i8* %34, i64 4
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = add nsw i64 %100, %118
  %120 = getelementptr inbounds i8, i8* %35, i64 4
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i64
  %123 = add nsw i64 %104, %122
  %124 = zext i8 %117 to i32
  %125 = mul nuw nsw i32 %124, %124
  %126 = zext i32 %125 to i64
  %127 = add nsw i64 %108, %126
  %128 = zext i8 %121 to i32
  %129 = mul nuw nsw i32 %128, %128
  %130 = zext i32 %129 to i64
  %131 = add nsw i64 %112, %130
  %132 = mul nuw nsw i32 %128, %124
  %133 = zext i32 %132 to i64
  %134 = add nsw i64 %115, %133
  %135 = getelementptr inbounds i8, i8* %34, i64 5
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = add nsw i64 %119, %137
  %139 = getelementptr inbounds i8, i8* %35, i64 5
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = add nsw i64 %123, %141
  %143 = zext i8 %136 to i32
  %144 = mul nuw nsw i32 %143, %143
  %145 = zext i32 %144 to i64
  %146 = add nsw i64 %127, %145
  %147 = zext i8 %140 to i32
  %148 = mul nuw nsw i32 %147, %147
  %149 = zext i32 %148 to i64
  %150 = add nsw i64 %131, %149
  %151 = mul nuw nsw i32 %147, %143
  %152 = zext i32 %151 to i64
  %153 = add nsw i64 %134, %152
  %154 = getelementptr inbounds i8, i8* %34, i64 6
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = add nsw i64 %138, %156
  %158 = getelementptr inbounds i8, i8* %35, i64 6
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = add nsw i64 %142, %160
  %162 = zext i8 %155 to i32
  %163 = mul nuw nsw i32 %162, %162
  %164 = zext i32 %163 to i64
  %165 = add nsw i64 %146, %164
  %166 = zext i8 %159 to i32
  %167 = mul nuw nsw i32 %166, %166
  %168 = zext i32 %167 to i64
  %169 = add nsw i64 %150, %168
  %170 = mul nuw nsw i32 %166, %162
  %171 = zext i32 %170 to i64
  %172 = add nsw i64 %153, %171
  %173 = getelementptr inbounds i8, i8* %34, i64 7
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i64
  %176 = add nsw i64 %157, %175
  %177 = getelementptr inbounds i8, i8* %35, i64 7
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i64
  %180 = add nsw i64 %161, %179
  %181 = zext i8 %174 to i32
  %182 = mul nuw nsw i32 %181, %181
  %183 = zext i32 %182 to i64
  %184 = add nsw i64 %165, %183
  %185 = zext i8 %178 to i32
  %186 = mul nuw nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add nsw i64 %169, %187
  %189 = mul nuw nsw i32 %185, %181
  %190 = zext i32 %189 to i64
  %191 = add nsw i64 %172, %190
  %192 = getelementptr inbounds i8, i8* %34, i64 %12
  %193 = getelementptr inbounds i8, i8* %35, i64 %13
  %194 = add nuw nsw i32 %39, 1
  %195 = icmp eq i32 %194, 8
  br i1 %195, label %196, label %33

196:                                              ; preds = %33
  %197 = shl i64 %180, 1
  %198 = mul i64 %197, %176
  %199 = mul nsw i64 %176, %176
  %200 = mul nsw i64 %180, %180
  %201 = add nuw i64 %199, 26634
  %202 = add i64 %201, %200
  %203 = add i64 %188, %184
  %204 = shl i64 %203, 6
  %205 = sub nsw i64 239708, %199
  %206 = sub i64 %205, %200
  %207 = add i64 %206, %204
  %208 = mul nsw i64 %207, %202
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %219, label %210

210:                                              ; preds = %196
  %211 = sitofp i64 %208 to double
  %212 = add nsw i64 %198, 26634
  %213 = shl i64 %191, 7
  %214 = sub i64 239708, %198
  %215 = add i64 %214, %213
  %216 = mul nsw i64 %215, %212
  %217 = sitofp i64 %216 to double
  %218 = fdiv double %217, %211
  br label %219

219:                                              ; preds = %196, %210
  %220 = phi double [ %218, %210 ], [ 0x7FEFFFFFFFFFFFFF, %196 ]
  %221 = fadd contract double %30, %220
  %222 = add nuw nsw i64 %29, 4
  %223 = icmp slt i64 %222, %18
  br i1 %223, label %28, label %224

224:                                              ; preds = %219
  %225 = add i32 %21, %25
  br label %226

226:                                              ; preds = %224, %22
  %227 = phi i32 [ %25, %22 ], [ %225, %224 ]
  %228 = phi double [ %24, %22 ], [ %221, %224 ]
  %229 = getelementptr inbounds i8, i8* %26, i64 %15
  %230 = getelementptr inbounds i8, i8* %27, i64 %17
  %231 = add nuw nsw i32 %23, 4
  %232 = icmp slt i32 %231, %7
  br i1 %232, label %22, label %233

233:                                              ; preds = %226, %6
  %234 = phi i32 [ 0, %6 ], [ %227, %226 ]
  %235 = phi double [ 0.000000e+00, %6 ], [ %228, %226 ]
  %236 = sitofp i32 %234 to double
  %237 = fdiv double %235, %236
  ret double %237
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @I420Ssim(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 {
  %15 = tail call double @CalcFrameSsim(i8* %0, i32 %1, i8* %6, i32 %7, i32 %12, i32 %13)
  %16 = add nsw i32 %12, 1
  %17 = ashr i32 %16, 1
  %18 = add nsw i32 %13, 1
  %19 = ashr i32 %18, 1
  %20 = tail call double @CalcFrameSsim(i8* %2, i32 %3, i8* %8, i32 %9, i32 %17, i32 %19)
  %21 = tail call double @CalcFrameSsim(i8* %4, i32 %5, i8* %10, i32 %11, i32 %17, i32 %19)
  %22 = fmul contract double %15, 8.000000e-01
  %23 = fadd contract double %20, %21
  %24 = fmul contract double %23, 1.000000e-01
  %25 = fadd contract double %22, %24
  ret double %25
}

declare i32 @InitCpuFlags() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (i8*, i32, i32)* @HashDjb2_C, i32 (i8*, i32, i32)* @HashDjb2_SSE41}
!3 = !{i32 (i8*, i8*, i32)* @HammingDistance_AVX2, i32 (i8*, i8*, i32)* @HammingDistance_C, i32 (i8*, i8*, i32)* @HammingDistance_SSE42, i32 (i8*, i8*, i32)* @HammingDistance_SSSE3}
!4 = !{i32 (i8*, i8*, i32)* @SumSquareError_C, i32 (i8*, i8*, i32)* @SumSquareError_SSE2}
