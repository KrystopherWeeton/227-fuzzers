; ModuleID = '../../extensions/browser/api/declarative_net_request/regex_rules_matcher.cc'
source_filename = "../../extensions/browser/api/declarative_net_request/regex_rules_matcher.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.extensions::declarative_net_request::RegexRuleInfo" = type { %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"class.re2::RE2"* }
%"struct.extensions::declarative_net_request::flat::RegexRule" = type { %"class.flatbuffers::Table" }
%"class.flatbuffers::Table" = type { [1 x i8] }
%"class.re2::RE2" = type { %"class.std::__1::basic_string", %"class.re2::RE2::Options", %"class.re2::Regexp"*, %"class.std::__1::basic_string"*, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.re2::Regexp"*, %"class.re2::Prog"*, i32, i8, %"class.re2::Prog"*, %"class.std::__1::map"*, %"class.std::__1::map.1"*, %"struct.std::__1::once_flag", %"struct.std::__1::once_flag", %"struct.std::__1::once_flag" }
%"class.re2::RE2::Options" = type { i32, i8, i8, i8, i64, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.re2::Regexp" = type opaque
%"class.re2::Prog" = type opaque
%"class.std::__1::map" = type opaque
%"class.std::__1::map.1" = type opaque
%"class.extensions::declarative_net_request::RegexRulesMatcher" = type { %"class.extensions::declarative_net_request::RulesetMatcherBase", %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector.11"*, i8, %"class.re2::FilteredRE2", %"class.std::__1::map.20", %"class.std::__1::unique_ptr.31" }
%"class.extensions::declarative_net_request::RulesetMatcherBase" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.util::IdType", %"class.std::__1::map.2" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.std::__1::map.2" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.3", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.re2::FilteredRE2" = type { %"class.std::__1::vector", i8, %"class.std::__1::unique_ptr" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.re2::RE2"**, %"class.re2::RE2"**, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.re2::RE2"** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.re2::PrefilterTree"* }
%"class.re2::PrefilterTree" = type opaque
%"class.std::__1::map.20" = type { %"class.std::__1::__tree.21" }
%"class.std::__1::__tree.21" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.url_matcher::SubstringSetMatcher"* }
%"class.url_matcher::SubstringSetMatcher" = type <{ %"class.std::__1::vector.34", i8, [7 x i8] }>
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.35" }
%"class.std::__1::__vector_base.35" = type { %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"*, %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"*, %"class.std::__1::__compressed_pair.43" }
%"class.url_matcher::SubstringSetMatcher::AhoCorasickNode" = type <{ %"class.base::flat_map", i32, i32, i32, [4 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.36" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.38" }
%"struct.std::__1::pair" = type { i8, i32 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"* }
%"class.flatbuffers::Vector" = type { i32 }
%"class.flatbuffers::Vector.11" = type { i32 }
%"class.re2::StringPiece" = type { i8*, i64 }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"*, %"class.std::__1::__compressed_pair.144" }
%"class.url_matcher::StringPattern" = type <{ %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.url_matcher::StringPattern"* }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.134" }
%"struct.std::__1::pair.134" = type { i32, %"struct.extensions::declarative_net_request::flat::RegexRule"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.url_pattern_index::flat::UrlRule" = type { %"class.flatbuffers::Table" }
%"struct.flatbuffers::String" = type { %"class.flatbuffers::Vector.132" }
%"class.flatbuffers::Vector.132" = type { i32 }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"struct.extensions::declarative_net_request::RequestAction"*, %"struct.extensions::declarative_net_request::RequestAction"*, %"class.std::__1::__compressed_pair.110" }
%"struct.extensions::declarative_net_request::RequestAction" = type <{ i32, [4 x i8], %"class.absl::optional.98", i32, [4 x i8], i64, %"class.util::IdType", [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.103", %"class.std::__1::vector.103", i8, [7 x i8] }>
%"class.absl::optional.98" = type { %"class.absl::optional_internal::optional_data.99" }
%"class.absl::optional_internal::optional_data.99" = type { %"class.absl::optional_internal::optional_data_base.100" }
%"class.absl::optional_internal::optional_data_base.100" = type { %"class.absl::optional_internal::optional_data_dtor_base.101" }
%"class.absl::optional_internal::optional_data_dtor_base.101" = type { i8, %union.anon.102 }
%union.anon.102 = type { %class.GURL }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.51" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %class.GURL* }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.extensions::declarative_net_request::RequestAction::HeaderInfo"*, %"struct.extensions::declarative_net_request::RequestAction::HeaderInfo"*, %"class.std::__1::__compressed_pair.105" }
%"struct.extensions::declarative_net_request::RequestAction::HeaderInfo" = type { %"class.std::__1::basic_string", i32, %"class.absl::optional.69" }
%"class.absl::optional.69" = type { %"class.absl::optional_internal::optional_data.70" }
%"class.absl::optional_internal::optional_data.70" = type { %"class.absl::optional_internal::optional_data_base.71" }
%"class.absl::optional_internal::optional_data_base.71" = type { %"class.absl::optional_internal::optional_data_dtor_base.72" }
%"class.absl::optional_internal::optional_data_dtor_base.72" = type { i8, %union.anon.73 }
%union.anon.73 = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.extensions::declarative_net_request::RequestAction::HeaderInfo"* }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.extensions::declarative_net_request::RequestAction"* }
%"struct.extensions::declarative_net_request::RequestParams" = type { %class.GURL*, %"class.url::Origin", i32, i8, i32, %"struct.content::GlobalFrameRoutingId", %"class.base::RepeatingCallback", %"class.base::flat_map.59", %"class.absl::optional.69", %"class.base::flat_map.74" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.57 }
%union.anon.57 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.content::GlobalFrameRoutingId" = type { i32, i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.58" }
%"struct.std::__1::__atomic_base.58" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::flat_map.59" = type { %"class.base::internal::flat_tree.60" }
%"class.base::internal::flat_tree.60" = type { %"class.std::__1::vector.61" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.std::__1::pair.63"*, %"struct.std::__1::pair.63"*, %"class.std::__1::__compressed_pair.64" }
%"struct.std::__1::pair.63" = type opaque
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.std::__1::pair.63"* }
%"class.base::flat_map.74" = type { %"class.base::internal::flat_tree.75" }
%"class.base::internal::flat_tree.75" = type { %"class.std::__1::vector.76" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"*, %"class.std::__1::__compressed_pair.86" }
%"struct.std::__1::pair.78" = type { %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.std::__1::vector.79" }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.extensions::declarative_net_request::RegexRuleInfo"* }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.std::__1::pair.78"* }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { %"struct.url_pattern_index::flat::UrlRule"**, %"struct.url_pattern_index::flat::UrlRule"**, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.url_pattern_index::flat::UrlRule"** }
%"class.re2::RE2::Arg" = type { i8*, i1 (i8*, i64, i8*)* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::set" = type { %"class.std::__1::__tree.152" }
%"class.std::__1::__tree.152" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.153", %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { i32*, i32*, %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { i32* }
%"class.std::__1::__tree_node.196" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.absl::optional.122" = type { %"class.absl::optional_internal::optional_data.123" }
%"class.absl::optional_internal::optional_data.123" = type { %"class.absl::optional_internal::optional_data_base.124" }
%"class.absl::optional_internal::optional_data_base.124" = type { %"class.absl::optional_internal::optional_data_dtor_base.125" }
%"class.absl::optional_internal::optional_data_dtor_base.125" = type { i8, [7 x i8], %union.anon.126 }
%union.anon.126 = type { %"struct.extensions::declarative_net_request::RequestAction" }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::__split_buffer.192" = type { %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"*, %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.87", %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::allocator.89"* }
%"class.std::__1::allocator.89" = type { i8 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEEC2INS_21__tree_const_iteratorIiPNS_11__tree_nodeIiPvEElEEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISB_EE5valuesr16is_constructibleIiNS_15iterator_traitsISB_E9referenceEEE5valueESB_E4typeE = comdat any

$_ZNK10extensions23declarative_net_request17RegexRulesMatcher21IsExtraHeadersMatcherEv = comdat any

$_ZNK10extensions23declarative_net_request17RegexRulesMatcher13GetRulesCountEv = comdat any

$_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEERmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS0_INS3_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS8_ISB_EEE7emplaceIJSB_EEENS_11__wrap_iterIPSB_EENSF_IPKSB_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS3_13RegexRuleInfoENS_9allocatorIS8_EEEEEERNS9_ISC_EEE12emplace_backIJSC_EEEvDpOT_ = comdat any

$_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@_ZTVN10extensions23declarative_net_request17RegexRulesMatcherE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*)* @_ZN10extensions23declarative_net_request17RegexRulesMatcherD2Ev to i8*), i8* bitcast (void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*)* @_ZN10extensions23declarative_net_request17RegexRulesMatcherD0Ev to i8*), i8* bitcast (void (%"class.std::__1::vector.96"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"*, i8, i64)* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher23GetModifyHeadersActionsERKNS0_13RequestParamsEN4absl8optionalImEE to i8*), i8* bitcast (i1 (%"class.extensions::declarative_net_request::RegexRulesMatcher"*)* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher21IsExtraHeadersMatcherEv to i8*), i8* bitcast (i64 (%"class.extensions::declarative_net_request::RegexRulesMatcher"*)* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher13GetRulesCountEv to i8*), i8* bitcast (void (%"class.absl::optional.122"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"*)* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher25GetAllowAllRequestsActionERKNS0_13RequestParamsE to i8*), i8* bitcast (void (%"class.absl::optional.122"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"*)* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher39GetBeforeRequestActionIgnoringAncestorsERKNS0_13RequestParamsE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [76 x i8] c"../../extensions/browser/api/declarative_net_request/regex_rules_matcher.cc\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"Rewrite failed. Regex:%s Substitution:%s URL:%s\0A\00", align 1
@_ZN3url17kJavaScriptSchemeE = external constant [0 x i8], align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN10extensions23declarative_net_request13RegexRuleInfoC1EPKNS0_4flat9RegexRuleEPKN3re23RE2E = hidden unnamed_addr alias void (%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"class.re2::RE2"*), void (%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"class.re2::RE2"*)* @_ZN10extensions23declarative_net_request13RegexRuleInfoC2EPKNS0_4flat9RegexRuleEPKN3re23RE2E
@_ZN10extensions23declarative_net_request13RegexRuleInfoC1ERKS1_ = hidden unnamed_addr alias void (%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"*), void (%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"*)* @_ZN10extensions23declarative_net_request13RegexRuleInfoC2ERKS1_
@_ZN10extensions23declarative_net_request17RegexRulesMatcherC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEPKN11flatbuffers6VectorINSF_6OffsetINS0_4flat9RegexRuleEEEEEPKNSG_INSH_INSI_15UrlRuleMetadataEEEEE = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.std::__1::basic_string"*, i32, %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector.11"*), void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.std::__1::basic_string"*, i32, %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector.11"*)* @_ZN10extensions23declarative_net_request17RegexRulesMatcherC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEPKN11flatbuffers6VectorINSF_6OffsetINS0_4flat9RegexRuleEEEEEPKNSG_INSH_INSI_15UrlRuleMetadataEEEEE
@_ZN10extensions23declarative_net_request17RegexRulesMatcherD1Ev = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*), void (%"class.extensions::declarative_net_request::RegexRulesMatcher"*)* @_ZN10extensions23declarative_net_request17RegexRulesMatcherD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10extensions23declarative_net_request13RegexRuleInfoC2EPKNS0_4flat9RegexRuleEPKN3re23RE2E(%"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"class.re2::RE2"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 0
  store %"struct.extensions::declarative_net_request::flat::RegexRule"* %1, %"struct.extensions::declarative_net_request::flat::RegexRule"** %4, align 8
  %5 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  store %"class.re2::RE2"* %2, %"class.re2::RE2"** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request13RegexRuleInfoC2ERKS1_(%"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  %4 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"struct.extensions::declarative_net_request::RegexRuleInfo"* @_ZN10extensions23declarative_net_request13RegexRuleInfoaSERKS1_(%"struct.extensions::declarative_net_request::RegexRuleInfo"* returned, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  %4 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  ret %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request17RegexRulesMatcherC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEPKN11flatbuffers6VectorINSF_6OffsetINS0_4flat9RegexRuleEEEEEPKNSG_INSH_INSI_15UrlRuleMetadataEEEEE(%"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.std::__1::basic_string"* dereferenceable(24), i32, %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector.11"*) unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0
  tail call void @_ZN10extensions23declarative_net_request18RulesetMatcherBaseC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEE(%"class.extensions::declarative_net_request::RulesetMatcherBase"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2) #13
  %7 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN10extensions23declarative_net_request17RegexRulesMatcherE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 1
  store %"class.flatbuffers::Vector"* %3, %"class.flatbuffers::Vector"** %8, align 8
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 2
  store %"class.flatbuffers::Vector.11"* %4, %"class.flatbuffers::Vector.11"** %9, align 8
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %3, i64 1, i32 0
  %12 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %3, i64 0, i32 0
  %13 = load i32, i32* %12, align 4, !noalias !2
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %11, i64 %14
  %16 = bitcast i32* %15 to i8*
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %48, label %18

18:                                               ; preds = %5
  %19 = bitcast i32* %11 to i8*
  br label %20

20:                                               ; preds = %45, %18
  %21 = phi i8* [ %46, %45 ], [ %19, %18 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %21, i64 %24
  %26 = bitcast i8* %25 to %"struct.extensions::declarative_net_request::flat::RegexRule"*
  %27 = bitcast i8* %25 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %26, i64 0, i32 0, i32 0, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = icmp ugt i16 %33, 6
  br i1 %34, label %35, label %45

35:                                               ; preds = %20
  %36 = getelementptr inbounds i8, i8* %31, i64 6
  %37 = bitcast i8* %36 to i16*
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = zext i16 %38 to i64
  %42 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %26, i64 0, i32 0, i32 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 4
  br i1 %44, label %48, label %45

45:                                               ; preds = %40, %35, %20
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = icmp eq i8* %46, %16
  br i1 %47, label %48, label %20

48:                                               ; preds = %40, %45, %5
  %49 = phi i8 [ 0, %5 ], [ 0, %45 ], [ 1, %40 ]
  store i8 %49, i8* %10, align 8
  %50 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  tail call void @_ZN3re211FilteredRE2C1Ev(%"class.re2::FilteredRE2"* %50) #13
  %51 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %52 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %53 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 0
  %54 = bitcast %"class.std::__1::__tree_node_base"** %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %52, %"class.std::__1::__tree_end_node"** %53, align 8
  %55 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 6
  %56 = bitcast %"class.std::__1::unique_ptr.31"* %55 to i64*
  store i64 0, i64* %56, align 8
  tail call void @_ZN10extensions23declarative_net_request17RegexRulesMatcher17InitializeMatcherEv(%"class.extensions::declarative_net_request::RegexRulesMatcher"* %0)
  ret void
}

declare void @_ZN10extensions23declarative_net_request18RulesetMatcherBaseC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEE(%"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"class.std::__1::basic_string"* dereferenceable(24), i32) unnamed_addr #3

declare void @_ZN3re211FilteredRE2C1Ev(%"class.re2::FilteredRE2"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request17RegexRulesMatcher17InitializeMatcherEv(%"class.extensions::declarative_net_request::RegexRulesMatcher"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca i32, align 4
  %4 = alloca %"class.re2::StringPiece", align 8
  %5 = alloca %"class.re2::RE2::Options", align 8
  %6 = alloca %"class.std::__1::vector.135", align 8
  %7 = alloca %"class.std::__1::vector.142", align 8
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 1
  %10 = load %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector"** %9, align 8
  %11 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %297, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %10, i64 1, i32 0
  %16 = zext i32 %12 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = bitcast i32* %17 to i8*
  %19 = bitcast i32* %15 to i8*
  %20 = bitcast i32* %3 to i8*
  %21 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  %22 = bitcast %"class.re2::StringPiece"* %4 to i8*
  %23 = bitcast %"class.re2::StringPiece"* %4 to i32**
  %24 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %4, i64 0, i32 1
  %25 = bitcast %"class.re2::RE2::Options"* %5 to i8*
  %26 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5
  %27 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %28 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node"**
  %29 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::map.20", %"class.std::__1::map.20"* %26, i64 0, i32 0, i32 0
  %32 = bitcast %"class.std::__1::map.20"* %26 to i64*
  %33 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  br label %59

34:                                               ; preds = %215
  %35 = bitcast %"class.std::__1::vector.135"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %6, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.135", %"class.std::__1::vector.135"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #13
  %38 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  call void @_ZN3re211FilteredRE27CompileEPNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE(%"class.re2::FilteredRE2"* %38, %"class.std::__1::vector.135"* nonnull %6) #13
  %39 = bitcast %"class.std::__1::vector.142"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #13
  %40 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %7, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %7, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 24, i1 false) #13
  %43 = bitcast %"class.std::__1::basic_string"** %37 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector.135"* %6 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = sdiv exact i64 %47, 24
  call void @_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.142"* nonnull %7, i64 %48)
  %49 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #13
  store i64 0, i64* %8, align 8
  %50 = load i64, i64* %43, align 8
  %51 = load i64, i64* %45, align 8
  %52 = icmp eq i64 %50, %51
  br i1 %52, label %218, label %53

53:                                               ; preds = %34
  %54 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %55 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = bitcast %"class.url_matcher::StringPattern"** %41 to i64*
  br label %270

59:                                               ; preds = %14, %215
  %60 = phi i8* [ %19, %14 ], [ %216, %215 ]
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %60, i64 %63
  %65 = bitcast i8* %64 to %"struct.extensions::declarative_net_request::flat::RegexRule"*
  %66 = ptrtoint i8* %64 to i64
  %67 = bitcast i8* %64 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %65, i64 0, i32 0, i32 0, i64 %70
  %72 = bitcast i8* %71 to i16*
  %73 = load i16, i16* %72, align 2
  %74 = icmp ugt i16 %73, 4
  br i1 %74, label %75, label %88

75:                                               ; preds = %59
  %76 = getelementptr inbounds i8, i8* %71, i64 4
  %77 = bitcast i8* %76 to i16*
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i64
  %80 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %65, i64 0, i32 0, i32 0, i64 %79
  %81 = icmp eq i16 %78, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %75
  %83 = bitcast i8* %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  %87 = bitcast i8* %86 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %88

88:                                               ; preds = %59, %75, %82
  %89 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %87, %82 ], [ null, %75 ], [ null, %59 ]
  %90 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = sub nsw i64 0, %92
  %94 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %89, i64 0, i32 0, i32 0, i64 %93
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = icmp ugt i16 %96, 4
  br i1 %97, label %98, label %107

98:                                               ; preds = %88
  %99 = getelementptr inbounds i8, i8* %94, i64 4
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %98
  %104 = zext i16 %101 to i64
  %105 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %89, i64 0, i32 0, i32 0, i64 %104
  %106 = load i8, i8* %105, align 1
  br label %107

107:                                              ; preds = %88, %98, %103
  %108 = phi i8 [ %106, %103 ], [ 0, %98 ], [ 0, %88 ]
  %109 = and i8 %108, 8
  %110 = icmp eq i8 %109, 0
  %111 = icmp ugt i16 %73, 8
  br i1 %111, label %112, label %125

112:                                              ; preds = %107
  %113 = getelementptr inbounds i8, i8* %71, i64 8
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i64
  %117 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %65, i64 0, i32 0, i32 0, i64 %116
  %118 = icmp eq i16 %115, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %112
  %120 = bitcast i8* %117 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %117, i64 %122
  %124 = bitcast i8* %123 to %"struct.flatbuffers::String"*
  br label %125

125:                                              ; preds = %107, %112, %119
  %126 = phi %"struct.flatbuffers::String"* [ %124, %119 ], [ null, %112 ], [ null, %107 ]
  %127 = icmp ne %"struct.flatbuffers::String"* %126, null
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #13
  store i32 -1431655766, i32* %3, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #13
  %128 = load i32, i32* %90, align 4
  %129 = sext i32 %128 to i64
  %130 = sub nsw i64 0, %129
  %131 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %89, i64 0, i32 0, i32 0, i64 %130
  %132 = bitcast i8* %131 to i16*
  %133 = load i16, i16* %132, align 2
  %134 = icmp ugt i16 %133, 22
  br i1 %134, label %135, label %148

135:                                              ; preds = %125
  %136 = getelementptr inbounds i8, i8* %131, i64 22
  %137 = bitcast i8* %136 to i16*
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i64
  %140 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %89, i64 0, i32 0, i32 0, i64 %139
  %141 = icmp eq i16 %138, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %135
  %143 = bitcast i8* %140 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %140, i64 %145
  %147 = bitcast i8* %146 to %"struct.flatbuffers::String"*
  br label %148

148:                                              ; preds = %125, %135, %142
  %149 = phi %"struct.flatbuffers::String"* [ %147, %142 ], [ null, %135 ], [ null, %125 ]
  %150 = getelementptr inbounds %"struct.flatbuffers::String", %"struct.flatbuffers::String"* %149, i64 0, i32 0
  %151 = getelementptr inbounds %"class.flatbuffers::Vector.132", %"class.flatbuffers::Vector.132"* %150, i64 1, i32 0
  %152 = getelementptr inbounds %"struct.flatbuffers::String", %"struct.flatbuffers::String"* %149, i64 0, i32 0, i32 0
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  store i32* %151, i32** %23, align 8
  store i64 %154, i64* %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #13
  call void @_ZN10extensions23declarative_net_request16CreateRE2OptionsEbb(%"class.re2::RE2::Options"* nonnull sret %5, i1 zeroext %110, i1 zeroext %127) #13
  %155 = call i32 @_ZN3re211FilteredRE23AddERKNS_11StringPieceERKNS_3RE27OptionsEPi(%"class.re2::FilteredRE2"* %21, %"class.re2::StringPiece"* nonnull dereferenceable(16) %4, %"class.re2::RE2::Options"* nonnull dereferenceable(24) %5, i32* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #13
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %215

157:                                              ; preds = %148
  %158 = load i32, i32* %3, align 4
  %159 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %28, align 8
  %160 = icmp eq %"class.std::__1::__tree_node"* %159, null
  br i1 %160, label %187, label %161

161:                                              ; preds = %157, %183
  %162 = phi %"class.std::__1::__tree_node"* [ %186, %183 ], [ %159, %157 ]
  %163 = phi %"class.std::__1::__tree_node_base"** [ %185, %183 ], [ %29, %157 ]
  %164 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 1, i32 0, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = icmp slt i32 %158, %165
  br i1 %166, label %167, label %173

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 0, i32 0
  %169 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %168, align 8
  %170 = icmp eq %"class.std::__1::__tree_node_base"* %169, null
  br i1 %170, label %171, label %183

171:                                              ; preds = %167
  %172 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 0
  br label %187

173:                                              ; preds = %161
  %174 = icmp slt i32 %165, %158
  br i1 %174, label %175, label %181

175:                                              ; preds = %173
  %176 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 1
  %177 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %176, align 8
  %178 = icmp eq %"class.std::__1::__tree_node_base"* %177, null
  br i1 %178, label %179, label %183

179:                                              ; preds = %175
  %180 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 0
  br label %187

181:                                              ; preds = %173
  %182 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 0
  br label %187

183:                                              ; preds = %175, %167
  %184 = phi %"class.std::__1::__tree_node_base"* [ %169, %167 ], [ %177, %175 ]
  %185 = phi %"class.std::__1::__tree_node_base"** [ %168, %167 ], [ %176, %175 ]
  %186 = bitcast %"class.std::__1::__tree_node_base"* %184 to %"class.std::__1::__tree_node"*
  br label %161

187:                                              ; preds = %157, %181, %179, %171
  %188 = phi %"class.std::__1::__tree_end_node"* [ %172, %171 ], [ %180, %179 ], [ %182, %181 ], [ %27, %157 ]
  %189 = phi %"class.std::__1::__tree_node_base"** [ %168, %171 ], [ %176, %179 ], [ %163, %181 ], [ %30, %157 ]
  %190 = bitcast %"class.std::__1::__tree_node_base"** %189 to %"class.std::__1::__tree_node"**
  %191 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %190, align 8
  %192 = icmp eq %"class.std::__1::__tree_node"* %191, null
  br i1 %192, label %193, label %215

193:                                              ; preds = %187
  %194 = call i8* @_Znwm(i64 48) #14, !noalias !5
  %195 = getelementptr inbounds i8, i8* %194, i64 32
  %196 = bitcast i8* %195 to i32*
  store i32 %158, i32* %196, align 8, !noalias !5
  %197 = getelementptr inbounds i8, i8* %194, i64 40
  %198 = bitcast i8* %197 to i64*
  store i64 %66, i64* %198, align 8, !noalias !5
  %199 = bitcast i8* %194 to %"class.std::__1::__tree_node_base"*
  %200 = getelementptr inbounds i8, i8* %194, i64 16
  %201 = bitcast i8* %200 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %194, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %188, %"class.std::__1::__tree_end_node"** %201, align 8
  %202 = bitcast %"class.std::__1::__tree_node_base"** %189 to i8**
  store i8* %194, i8** %202, align 8
  %203 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %31, align 8
  %204 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %203, i64 0, i32 0
  %205 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %204, align 8
  %206 = icmp eq %"class.std::__1::__tree_node_base"* %205, null
  br i1 %206, label %210, label %207

207:                                              ; preds = %193
  %208 = ptrtoint %"class.std::__1::__tree_node_base"* %205 to i64
  store i64 %208, i64* %32, align 8
  %209 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %189, align 8
  br label %210

210:                                              ; preds = %207, %193
  %211 = phi %"class.std::__1::__tree_node_base"* [ %199, %193 ], [ %209, %207 ]
  %212 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %29, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %212, %"class.std::__1::__tree_node_base"* %211) #13
  %213 = load i64, i64* %33, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %33, align 8
  br label %215

215:                                              ; preds = %148, %210, %187
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #13
  %216 = getelementptr inbounds i8, i8* %60, i64 4
  %217 = icmp eq i8* %216, %18
  br i1 %217, label %34, label %59

218:                                              ; preds = %289, %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #13
  %219 = call i8* @_Znwm(i64 32) #14
  %220 = bitcast i8* %219 to %"class.url_matcher::SubstringSetMatcher"*
  call void @_ZN11url_matcher19SubstringSetMatcherC1ERKNSt3__16vectorINS_13StringPatternENS1_9allocatorIS3_EEEE(%"class.url_matcher::SubstringSetMatcher"* nonnull %220, %"class.std::__1::vector.142"* nonnull dereferenceable(24) %7) #13
  %221 = ptrtoint i8* %219 to i64
  %222 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 6
  %223 = getelementptr inbounds %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.31"* %222, i64 0, i32 0, i32 0, i32 0
  %224 = load %"class.url_matcher::SubstringSetMatcher"*, %"class.url_matcher::SubstringSetMatcher"** %223, align 8
  %225 = bitcast %"class.std::__1::unique_ptr.31"* %222 to i64*
  store i64 %221, i64* %225, align 8
  %226 = icmp eq %"class.url_matcher::SubstringSetMatcher"* %224, null
  br i1 %226, label %229, label %227

227:                                              ; preds = %218
  call void @_ZN11url_matcher19SubstringSetMatcherD1Ev(%"class.url_matcher::SubstringSetMatcher"* nonnull %224) #13
  %228 = bitcast %"class.url_matcher::SubstringSetMatcher"* %224 to i8*
  call void @_ZdlPv(i8* %228) #14
  br label %229

229:                                              ; preds = %227, %218
  %230 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %40, align 8
  %231 = icmp eq %"class.url_matcher::StringPattern"* %230, null
  br i1 %231, label %245, label %232

232:                                              ; preds = %229
  %233 = bitcast %"class.url_matcher::StringPattern"* %230 to i8*
  %234 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %41, align 8
  %235 = icmp eq %"class.url_matcher::StringPattern"* %234, %230
  br i1 %235, label %243, label %236

236:                                              ; preds = %232, %236
  %237 = phi %"class.url_matcher::StringPattern"* [ %238, %236 ], [ %234, %232 ]
  %238 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %237, i64 -1
  call void @_ZN11url_matcher13StringPatternD1Ev(%"class.url_matcher::StringPattern"* %238) #13
  %239 = icmp eq %"class.url_matcher::StringPattern"* %238, %230
  br i1 %239, label %240, label %236

240:                                              ; preds = %236
  %241 = bitcast %"class.std::__1::vector.142"* %7 to i8**
  %242 = load i8*, i8** %241, align 8
  br label %243

243:                                              ; preds = %240, %232
  %244 = phi i8* [ %242, %240 ], [ %233, %232 ]
  store %"class.url_matcher::StringPattern"* %230, %"class.url_matcher::StringPattern"** %41, align 8
  call void @_ZdlPv(i8* %244) #14
  br label %245

245:                                              ; preds = %229, %243
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #13
  %246 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %36, align 8
  %247 = icmp eq %"class.std::__1::basic_string"* %246, null
  br i1 %247, label %269, label %248

248:                                              ; preds = %245
  %249 = bitcast %"class.std::__1::basic_string"* %246 to i8*
  %250 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %37, align 8
  %251 = icmp eq %"class.std::__1::basic_string"* %250, %246
  br i1 %251, label %267, label %252

252:                                              ; preds = %248, %262
  %253 = phi %"class.std::__1::basic_string"* [ %254, %262 ], [ %250, %248 ]
  %254 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %253, i64 -1
  %255 = bitcast %"class.std::__1::basic_string"* %254 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %256 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %255, i64 0, i32 1, i32 0
  %257 = load i8, i8* %256, align 1
  %258 = icmp slt i8 %257, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %252
  %260 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %254, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = load i8*, i8** %260, align 8
  call void @_ZdlPv(i8* %261) #14
  br label %262

262:                                              ; preds = %259, %252
  %263 = icmp eq %"class.std::__1::basic_string"* %254, %246
  br i1 %263, label %264, label %252

264:                                              ; preds = %262
  %265 = bitcast %"class.std::__1::vector.135"* %6 to i8**
  %266 = load i8*, i8** %265, align 8
  br label %267

267:                                              ; preds = %264, %248
  %268 = phi i8* [ %266, %264 ], [ %249, %248 ]
  store %"class.std::__1::basic_string"* %246, %"class.std::__1::basic_string"** %37, align 8
  call void @_ZdlPv(i8* %268) #14
  br label %269

269:                                              ; preds = %245, %267
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  br label %297

270:                                              ; preds = %53, %289
  %271 = phi i64 [ %51, %53 ], [ %293, %289 ]
  %272 = phi i64 [ 0, %53 ], [ %291, %289 ]
  %273 = inttoptr i64 %271 to %"class.std::__1::basic_string"*
  %274 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %273, i64 %272
  %275 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %41, align 8
  %276 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %42, align 8
  %277 = icmp ult %"class.url_matcher::StringPattern"* %275, %276
  br i1 %277, label %278, label %288

278:                                              ; preds = %270
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54) #13
  %279 = bitcast %"class.std::__1::basic_string"* %274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 8 %279, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* align 8 %279, i8 0, i64 24, i1 false) #13
  %280 = trunc i64 %272 to i32
  call void @_ZN11url_matcher13StringPatternC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.url_matcher::StringPattern"* %275, %"class.std::__1::basic_string"* nonnull %2, i32 %280) #13
  %281 = load i8, i8* %56, align 1
  %282 = icmp slt i8 %281, 0
  br i1 %282, label %283, label %285

283:                                              ; preds = %278
  %284 = load i8*, i8** %57, align 8
  call void @_ZdlPv(i8* %284) #14
  br label %285

285:                                              ; preds = %283, %278
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54) #13
  %286 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %275, i64 1
  %287 = ptrtoint %"class.url_matcher::StringPattern"* %286 to i64
  store i64 %287, i64* %58, align 8
  br label %289

288:                                              ; preds = %270
  call void @_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEERmEEEvDpOT_(%"class.std::__1::vector.142"* nonnull %7, %"class.std::__1::basic_string"* dereferenceable(24) %274, i64* nonnull dereferenceable(8) %8) #13
  br label %289

289:                                              ; preds = %285, %288
  %290 = load i64, i64* %8, align 8
  %291 = add i64 %290, 1
  store i64 %291, i64* %8, align 8
  %292 = load i64, i64* %43, align 8
  %293 = load i64, i64* %45, align 8
  %294 = sub i64 %292, %293
  %295 = sdiv exact i64 %294, 24
  %296 = icmp ult i64 %291, %295
  br i1 %296, label %270, label %218

297:                                              ; preds = %1, %269
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request17RegexRulesMatcherD2Ev(%"class.extensions::declarative_net_request::RegexRulesMatcher"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN10extensions23declarative_net_request17RegexRulesMatcherE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load %"class.url_matcher::SubstringSetMatcher"*, %"class.url_matcher::SubstringSetMatcher"** %3, align 8
  store %"class.url_matcher::SubstringSetMatcher"* null, %"class.url_matcher::SubstringSetMatcher"** %3, align 8
  %5 = icmp eq %"class.url_matcher::SubstringSetMatcher"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN11url_matcher19SubstringSetMatcherD1Ev(%"class.url_matcher::SubstringSetMatcher"* nonnull %4) #13
  %7 = bitcast %"class.url_matcher::SubstringSetMatcher"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.std::__1::__tree_end_node"* %10 to %"class.std::__1::__tree_node"**
  %12 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %11, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree.21"* %9, %"class.std::__1::__tree_node"* %12) #13
  %13 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  tail call void @_ZN3re211FilteredRE2D1Ev(%"class.re2::FilteredRE2"* %13) #13
  %14 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0
  tail call void @_ZN10extensions23declarative_net_request18RulesetMatcherBaseD2Ev(%"class.extensions::declarative_net_request::RulesetMatcherBase"* %14) #13
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3re211FilteredRE2D1Ev(%"class.re2::FilteredRE2"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN10extensions23declarative_net_request18RulesetMatcherBaseD2Ev(%"class.extensions::declarative_net_request::RulesetMatcherBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request17RegexRulesMatcherD0Ev(%"class.extensions::declarative_net_request::RegexRulesMatcher"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN10extensions23declarative_net_request17RegexRulesMatcherE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load %"class.url_matcher::SubstringSetMatcher"*, %"class.url_matcher::SubstringSetMatcher"** %3, align 8
  store %"class.url_matcher::SubstringSetMatcher"* null, %"class.url_matcher::SubstringSetMatcher"** %3, align 8
  %5 = icmp eq %"class.url_matcher::SubstringSetMatcher"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN11url_matcher19SubstringSetMatcherD1Ev(%"class.url_matcher::SubstringSetMatcher"* nonnull %4) #13
  %7 = bitcast %"class.url_matcher::SubstringSetMatcher"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.std::__1::__tree_end_node"* %10 to %"class.std::__1::__tree_node"**
  %12 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %11, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree.21"* %9, %"class.std::__1::__tree_node"* %12) #13
  %13 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  tail call void @_ZN3re211FilteredRE2D1Ev(%"class.re2::FilteredRE2"* %13) #13
  %14 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 0
  tail call void @_ZN10extensions23declarative_net_request18RulesetMatcherBaseD2Ev(%"class.extensions::declarative_net_request::RulesetMatcherBase"* %14) #13
  %15 = bitcast %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0 to i8*
  tail call void @_ZdlPv(i8* %15) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions23declarative_net_request17RegexRulesMatcher23GetModifyHeadersActionsERKNS0_13RequestParamsEN4absl8optionalImEE(%"class.std::__1::vector.96"* noalias sret, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), i8, i64) unnamed_addr #1 align 2 {
  %6 = alloca %"class.re2::StringPiece", align 8
  %7 = alloca %"class.std::__1::vector.115", align 8
  %8 = tail call dereferenceable(24) %"class.std::__1::vector.79"* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS0_13RequestParamsE(%"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2)
  %9 = bitcast %"class.std::__1::vector.115"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %7, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %7, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #13
  %13 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 0
  %14 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 1
  %16 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %15, align 8
  %17 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %14, %16
  br i1 %17, label %27, label %18

18:                                               ; preds = %5
  %19 = icmp eq i8 %3, 0
  %20 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %2, i64 0, i32 0
  %21 = bitcast %"class.re2::StringPiece"* %6 to i8*
  %22 = bitcast %"class.re2::StringPiece"* %6 to i64*
  %23 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %6, i64 0, i32 1
  %24 = bitcast %"struct.url_pattern_index::flat::UrlRule"*** %11 to i64*
  %25 = bitcast %"class.std::__1::vector.115"* %7 to i64*
  %26 = bitcast %"struct.url_pattern_index::flat::UrlRule"*** %12 to i64*
  br label %38

27:                                               ; preds = %198, %5
  %28 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  %29 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 2
  %30 = load %"class.flatbuffers::Vector.11"*, %"class.flatbuffers::Vector.11"** %29, align 8
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase35GetModifyHeadersActionsFromMetadataERKNS0_13RequestParamsERKNSt3__16vectorIPKN17url_pattern_index4flat7UrlRuleENS5_9allocatorISB_EEEERKN11flatbuffers6VectorINSH_6OffsetINS0_4flat15UrlRuleMetadataEEEEE(%"class.std::__1::vector.96"* sret %0, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %28, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"class.std::__1::vector.115"* nonnull dereferenceable(24) %7, %"class.flatbuffers::Vector.11"* dereferenceable(4) %30) #13
  %31 = load %"struct.url_pattern_index::flat::UrlRule"**, %"struct.url_pattern_index::flat::UrlRule"*** %10, align 8
  %32 = icmp eq %"struct.url_pattern_index::flat::UrlRule"** %31, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %31 to i64
  %35 = bitcast %"struct.url_pattern_index::flat::UrlRule"*** %11 to i64*
  store i64 %34, i64* %35, align 8
  %36 = bitcast %"struct.url_pattern_index::flat::UrlRule"** %31 to i8*
  call void @_ZdlPv(i8* %36) #14
  br label %37

37:                                               ; preds = %27, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  ret void

38:                                               ; preds = %18, %198
  %39 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %14, %18 ], [ %199, %198 ]
  %40 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %39, i64 0, i32 0
  %41 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %40, align 8
  %42 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = sext i32 %43 to i64
  %45 = sub nsw i64 0, %44
  br i1 %19, label %85, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %41, i64 0, i32 0, i32 0, i64 %45
  %48 = bitcast i8* %47 to i16*
  %49 = load i16, i16* %48, align 2
  %50 = icmp ugt i16 %49, 4
  br i1 %50, label %51, label %64

51:                                               ; preds = %46
  %52 = getelementptr inbounds i8, i8* %47, i64 4
  %53 = bitcast i8* %52 to i16*
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i64
  %56 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %41, i64 0, i32 0, i32 0, i64 %55
  %57 = icmp eq i16 %54, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %51
  %59 = bitcast i8* %56 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %56, i64 %61
  %63 = bitcast i8* %62 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %64

64:                                               ; preds = %46, %51, %58
  %65 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %63, %58 ], [ null, %51 ], [ null, %46 ]
  %66 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = sext i32 %67 to i64
  %69 = sub nsw i64 0, %68
  %70 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %65, i64 0, i32 0, i32 0, i64 %69
  %71 = bitcast i8* %70 to i16*
  %72 = load i16, i16* %71, align 2
  %73 = icmp ugt i16 %72, 26
  br i1 %73, label %74, label %198

74:                                               ; preds = %64
  %75 = getelementptr inbounds i8, i8* %70, i64 26
  %76 = bitcast i8* %75 to i16*
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %198, label %79

79:                                               ; preds = %74
  %80 = zext i16 %77 to i64
  %81 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %65, i64 0, i32 0, i32 0, i64 %80
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = icmp ugt i64 %83, %4
  br i1 %84, label %85, label %198

85:                                               ; preds = %38, %79
  %86 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %39, i64 0, i32 0
  %87 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %41, i64 0, i32 0, i32 0, i64 %45
  %88 = bitcast i8* %87 to i16*
  %89 = load i16, i16* %88, align 2
  %90 = icmp ugt i16 %89, 6
  br i1 %90, label %91, label %198

91:                                               ; preds = %85
  %92 = getelementptr inbounds i8, i8* %87, i64 6
  %93 = bitcast i8* %92 to i16*
  %94 = load i16, i16* %93, align 2
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %198, label %96

96:                                               ; preds = %91
  %97 = zext i16 %94 to i64
  %98 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %41, i64 0, i32 0, i32 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 4
  br i1 %100, label %101, label %198

101:                                              ; preds = %96
  %102 = load %class.GURL*, %class.GURL** %20, align 8
  %103 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %102) #13
  %104 = bitcast %"class.std::__1::basic_string"* %103 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %105 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %104, i64 0, i32 1, i32 0
  %106 = load i8, i8* %105, align 1
  %107 = icmp slt i8 %106, 0
  %108 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %103, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = bitcast %"class.std::__1::basic_string"* %103 to i8*
  %111 = select i1 %107, i8* %109, i8* %110
  %112 = ptrtoint i8* %111 to i64
  %113 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %103, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = zext i8 %106 to i64
  %116 = select i1 %107, i64 %114, i64 %115
  %117 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %39, i64 0, i32 1
  %118 = load %"class.re2::RE2"*, %"class.re2::RE2"** %117, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #13
  store i64 %112, i64* %22, align 8
  store i64 %116, i64* %23, align 8
  %119 = call zeroext i1 @_ZN3re23RE213PartialMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull dereferenceable(16) %6, %"class.re2::RE2"* dereferenceable(200) %118, %"class.re2::RE2::Arg"** null, i32 0) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #13
  br i1 %119, label %120, label %198

120:                                              ; preds = %101
  %121 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %86, align 8
  %122 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %121, i64 0, i32 0, i32 0, i64 %125
  %127 = bitcast i8* %126 to i16*
  %128 = load i16, i16* %127, align 2
  %129 = icmp ugt i16 %128, 4
  br i1 %129, label %130, label %143

130:                                              ; preds = %120
  %131 = getelementptr inbounds i8, i8* %126, i64 4
  %132 = bitcast i8* %131 to i16*
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i64
  %135 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %121, i64 0, i32 0, i32 0, i64 %134
  %136 = icmp eq i16 %133, 0
  br i1 %136, label %143, label %137

137:                                              ; preds = %130
  %138 = bitcast i8* %135 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %135, i64 %140
  %142 = bitcast i8* %141 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %143

143:                                              ; preds = %120, %130, %137
  %144 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %142, %137 ], [ null, %130 ], [ null, %120 ]
  %145 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"* %144 to i64
  %146 = load %"struct.url_pattern_index::flat::UrlRule"**, %"struct.url_pattern_index::flat::UrlRule"*** %11, align 8
  %147 = load %"struct.url_pattern_index::flat::UrlRule"**, %"struct.url_pattern_index::flat::UrlRule"*** %12, align 8
  %148 = icmp ult %"struct.url_pattern_index::flat::UrlRule"** %146, %147
  %149 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %147 to i64
  br i1 %148, label %150, label %154

150:                                              ; preds = %143
  %151 = bitcast %"struct.url_pattern_index::flat::UrlRule"** %146 to i64*
  store i64 %145, i64* %151, align 8
  %152 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule"*, %"struct.url_pattern_index::flat::UrlRule"** %146, i64 1
  %153 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %152 to i64
  store i64 %153, i64* %24, align 8
  br label %198

154:                                              ; preds = %143
  %155 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %146 to i64
  %156 = load i64, i64* %25, align 8
  %157 = sub i64 %155, %156
  %158 = ashr exact i64 %157, 3
  %159 = add nsw i64 %158, 1
  %160 = icmp ugt i64 %159, 2305843009213693951
  br i1 %160, label %161, label %163

161:                                              ; preds = %154
  %162 = bitcast %"class.std::__1::vector.115"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %162) #15
  unreachable

163:                                              ; preds = %154
  %164 = sub i64 %149, %156
  %165 = ashr exact i64 %164, 3
  %166 = icmp ult i64 %165, 1152921504606846975
  br i1 %166, label %167, label %175

167:                                              ; preds = %163
  %168 = ashr exact i64 %164, 2
  %169 = icmp ult i64 %168, %159
  %170 = select i1 %169, i64 %159, i64 %168
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %180, label %172

172:                                              ; preds = %167
  %173 = icmp ugt i64 %170, 2305843009213693951
  br i1 %173, label %174, label %175

174:                                              ; preds = %172
  call void @abort() #15
  unreachable

175:                                              ; preds = %172, %163
  %176 = phi i64 [ %170, %172 ], [ 2305843009213693951, %163 ]
  %177 = shl i64 %176, 3
  %178 = call i8* @_Znwm(i64 %177) #14
  %179 = bitcast i8* %178 to %"struct.url_pattern_index::flat::UrlRule"**
  br label %180

180:                                              ; preds = %175, %167
  %181 = phi i64 [ %176, %175 ], [ 0, %167 ]
  %182 = phi i8* [ %178, %175 ], [ null, %167 ]
  %183 = phi %"struct.url_pattern_index::flat::UrlRule"** [ %179, %175 ], [ null, %167 ]
  %184 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule"*, %"struct.url_pattern_index::flat::UrlRule"** %183, i64 %158
  %185 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule"*, %"struct.url_pattern_index::flat::UrlRule"** %183, i64 %181
  %186 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %185 to i64
  %187 = bitcast %"struct.url_pattern_index::flat::UrlRule"** %184 to i64*
  store i64 %145, i64* %187, align 8
  %188 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule"*, %"struct.url_pattern_index::flat::UrlRule"** %184, i64 1
  %189 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %188 to i64
  %190 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"** %183 to i64
  %191 = icmp sgt i64 %157, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %180
  %193 = inttoptr i64 %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* align 8 %193, i64 %157, i1 false) #13
  br label %194

194:                                              ; preds = %192, %180
  store i64 %190, i64* %25, align 8
  store i64 %189, i64* %24, align 8
  store i64 %186, i64* %26, align 8
  %195 = icmp eq i64 %156, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %194
  %197 = inttoptr i64 %156 to i8*
  call void @_ZdlPv(i8* %197) #14
  br label %198

198:                                              ; preds = %85, %91, %64, %74, %79, %96, %196, %194, %150, %101
  %199 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %39, i64 1
  %200 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %199, %16
  br i1 %200, label %27, label %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector.79"* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS0_13RequestParamsE(%"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"struct.std::__1::pair.78", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::set", align 8
  %6 = alloca %"class.std::__1::vector.159", align 8
  %7 = alloca %"class.std::__1::vector.159", align 8
  %8 = alloca %"class.std::__1::vector.79", align 8
  %9 = alloca %"struct.std::__1::pair.78", align 8
  %10 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 9, i32 0
  %11 = getelementptr inbounds %"class.base::internal::flat_tree.75", %"class.base::internal::flat_tree.75"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %11, align 8
  %13 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 9, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %"struct.std::__1::pair.78"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint %"struct.std::__1::pair.78"* %12 to i64
  %17 = sub i64 %15, %16
  %18 = icmp eq i64 %17, 0
  %19 = inttoptr i64 %15 to %"struct.std::__1::pair.78"*
  br i1 %18, label %38, label %20

20:                                               ; preds = %2
  %21 = ashr exact i64 %17, 5
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi %"struct.std::__1::pair.78"* [ %12, %20 ], [ %34, %22 ]
  %24 = phi i64 [ %21, %20 ], [ %33, %22 ]
  %25 = lshr i64 %24, 1
  %26 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %23, i64 %25
  %27 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 0, i32 0
  %28 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %27, align 8
  %29 = icmp ult %"class.extensions::declarative_net_request::RegexRulesMatcher"* %28, %0
  %30 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 1
  %31 = xor i64 %25, -1
  %32 = add i64 %24, %31
  %33 = select i1 %29, i64 %32, i64 %25
  %34 = select i1 %29, %"struct.std::__1::pair.78"* %30, %"struct.std::__1::pair.78"* %23
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %36, label %22

36:                                               ; preds = %22
  %37 = ptrtoint %"struct.std::__1::pair.78"* %34 to i64
  br label %38

38:                                               ; preds = %36, %2
  %39 = phi i64 [ %37, %36 ], [ %16, %2 ]
  %40 = phi %"struct.std::__1::pair.78"* [ %34, %36 ], [ %12, %2 ]
  %41 = icmp eq %"struct.std::__1::pair.78"* %40, %19
  br i1 %41, label %49, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %40, i64 0, i32 0
  %44 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %43, align 8
  %45 = icmp ugt %"class.extensions::declarative_net_request::RegexRulesMatcher"* %44, %0
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %40, i64 1
  %48 = ptrtoint %"struct.std::__1::pair.78"* %47 to i64
  br label %49

49:                                               ; preds = %38, %42, %46
  %50 = phi i64 [ %48, %46 ], [ %39, %38 ], [ %39, %42 ]
  %51 = inttoptr i64 %50 to %"struct.std::__1::pair.78"*
  %52 = icmp eq %"struct.std::__1::pair.78"* %40, %51
  %53 = select i1 %52, %"struct.std::__1::pair.78"* %19, %"struct.std::__1::pair.78"* %40
  %54 = icmp eq %"struct.std::__1::pair.78"* %53, %19
  br i1 %54, label %57, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %53, i64 0, i32 1
  br label %456

57:                                               ; preds = %49
  %58 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 1
  %59 = load %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector"** %58, align 8
  %60 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %59, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %106

63:                                               ; preds = %57
  %64 = bitcast %"struct.std::__1::pair.78"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %64) #13
  %65 = ptrtoint %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0 to i64
  %66 = bitcast %"struct.std::__1::pair.78"* %3 to i64*
  store i64 %65, i64* %66, align 8, !alias.scope !8
  %67 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %3, i64 0, i32 1
  %68 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %3, i64 0, i32 1, i32 0, i32 1
  %69 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %68 to i64*
  %70 = bitcast %"class.std::__1::vector.79"* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 24, i1 false)
  br i1 %18, label %87, label %71

71:                                               ; preds = %63
  %72 = ashr exact i64 %17, 5
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi %"struct.std::__1::pair.78"* [ %12, %71 ], [ %85, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %84, %73 ]
  %76 = lshr i64 %75, 1
  %77 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %74, i64 %76
  %78 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %77, i64 0, i32 0
  %79 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %78, align 8
  %80 = icmp ult %"class.extensions::declarative_net_request::RegexRulesMatcher"* %79, %0
  %81 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %77, i64 1
  %82 = xor i64 %76, -1
  %83 = add i64 %75, %82
  %84 = select i1 %80, i64 %83, i64 %76
  %85 = select i1 %80, %"struct.std::__1::pair.78"* %81, %"struct.std::__1::pair.78"* %74
  %86 = icmp eq i64 %84, 0
  br i1 %86, label %87, label %73

87:                                               ; preds = %73, %63
  %88 = phi %"struct.std::__1::pair.78"* [ %12, %63 ], [ %85, %73 ]
  %89 = icmp eq %"struct.std::__1::pair.78"* %88, %19
  br i1 %89, label %94, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %88, i64 0, i32 0
  %92 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %91, align 8
  %93 = icmp ugt %"class.extensions::declarative_net_request::RegexRulesMatcher"* %92, %0
  br i1 %93, label %94, label %103

94:                                               ; preds = %87, %90
  %95 = getelementptr inbounds %"class.base::internal::flat_tree.75", %"class.base::internal::flat_tree.75"* %10, i64 0, i32 0
  %96 = call %"struct.std::__1::pair.78"* @_ZNSt3__16vectorINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS0_INS3_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS8_ISB_EEE7emplaceIJSB_EEENS_11__wrap_iterIPSB_EENSF_IPKSB_EEDpOT_(%"class.std::__1::vector.76"* %95, %"struct.std::__1::pair.78"* %88, %"struct.std::__1::pair.78"* nonnull dereferenceable(32) %3) #13
  %97 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %3, i64 0, i32 1, i32 0, i32 0
  %98 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %97, align 8
  %99 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %94
  %101 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %98 to i8*
  %102 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %98 to i64
  store i64 %102, i64* %69, align 8
  call void @_ZdlPv(i8* %101) #14
  br label %103

103:                                              ; preds = %90, %100, %94
  %104 = phi %"struct.std::__1::pair.78"* [ %96, %100 ], [ %96, %94 ], [ %88, %90 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %64) #13
  %105 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %104, i64 0, i32 1
  br label %456

106:                                              ; preds = %57
  %107 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %108 = load i8, i8* %107, align 8, !range !11
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %110, label %147

110:                                              ; preds = %106
  %111 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %111) #13
  %112 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 0
  %113 = load %class.GURL*, %class.GURL** %112, align 8
  %114 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %113) #13
  %115 = bitcast %"class.std::__1::basic_string"* %114 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %116 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %115, i64 0, i32 1, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %117, 0
  %119 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %114, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = bitcast %"class.std::__1::basic_string"* %114 to i8*
  %122 = select i1 %118, i8* %120, i8* %121
  %123 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %114, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = zext i8 %117 to i64
  %126 = select i1 %118, i64 %124, i64 %125
  call void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %4, i8* %122, i64 %126) #13
  %127 = load i8, i8* %107, align 8, !range !11
  %128 = icmp eq i8 %127, 0
  %129 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %128, label %142, label %130

130:                                              ; preds = %110
  %131 = bitcast %"class.std::__1::basic_string"* %129 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %132 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %131, i64 0, i32 1, i32 0
  %133 = load i8, i8* %132, align 1
  %134 = icmp slt i8 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %129, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  call void @_ZdlPv(i8* %137) #14
  br label %138

138:                                              ; preds = %135, %130
  %139 = bitcast %"class.std::__1::basic_string"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* nonnull align 8 %111, i64 24, i1 false) #13
  %140 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %141 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %140, i64 0, i32 1, i32 0
  store i8 0, i8* %141, align 1
  store i8 0, i8* %111, align 8
  br label %144

142:                                              ; preds = %110
  %143 = bitcast %"class.std::__1::basic_string"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* nonnull align 8 %111, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %111, i8 0, i64 24, i1 false) #13
  store i8 1, i8* %107, align 8
  br label %144

144:                                              ; preds = %138, %142
  %145 = load i8, i8* %107, align 8, !range !11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %111) #13
  %146 = icmp eq i8 %145, 0
  br label %147

147:                                              ; preds = %106, %144
  %148 = phi i1 [ false, %106 ], [ %146, %144 ]
  %149 = bitcast %"class.std::__1::set"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #13
  %150 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %152 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %153 = bitcast %"class.std::__1::__tree_node_base"** %151 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %153, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %152, %"class.std::__1::__tree_end_node"** %150, align 8
  br i1 %148, label %154, label %155, !prof !12

154:                                              ; preds = %147
  call void @llvm.trap() #13
  unreachable

155:                                              ; preds = %147
  %156 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %157 = load %"class.url_matcher::SubstringSetMatcher"*, %"class.url_matcher::SubstringSetMatcher"** %156, align 8
  %158 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 8, i32 0, i32 0, i32 0, i32 1, i32 0
  %159 = call zeroext i1 @_ZNK11url_matcher19SubstringSetMatcher5MatchERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS1_3setIiNS1_4lessIiEENS5_IiEEEE(%"class.url_matcher::SubstringSetMatcher"* %157, %"class.std::__1::basic_string"* dereferenceable(24) %158, %"class.std::__1::set"* nonnull %5) #13
  %160 = bitcast %"class.std::__1::vector.159"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %160) #13
  %161 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %6, i64 0, i32 0, i32 0
  %162 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %6, i64 0, i32 0, i32 1
  %163 = bitcast %"class.std::__1::vector.159"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %163, i8 -86, i64 24, i1 false)
  %164 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %150, align 8
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEEC2INS_21__tree_const_iteratorIiPNS_11__tree_nodeIiPvEElEEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISB_EE5valuesr16is_constructibleIiNS_15iterator_traitsISB_E9referenceEEE5valueESB_E4typeE(%"class.std::__1::vector.159"* nonnull %6, %"class.std::__1::__tree_end_node"* %164, %"class.std::__1::__tree_end_node"* %152)
  %165 = bitcast %"class.std::__1::vector.159"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #13
  %166 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %7, i64 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %165, i8 0, i64 24, i1 false) #13
  %168 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 4
  call void @_ZNK3re211FilteredRE213AllPotentialsERKNSt3__16vectorIiNS1_9allocatorIiEEEEPS5_(%"class.re2::FilteredRE2"* %168, %"class.std::__1::vector.159"* nonnull dereferenceable(24) %6, %"class.std::__1::vector.159"* nonnull %7) #13
  %169 = bitcast %"class.std::__1::vector.79"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %169) #13
  %170 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 0
  %171 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 1
  %172 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %169, i8 0, i64 24, i1 false) #13
  %173 = load i32*, i32** %166, align 8
  %174 = load i32*, i32** %167, align 8
  %175 = icmp eq i32* %173, %174
  br i1 %175, label %176, label %180

176:                                              ; preds = %155
  %177 = bitcast %"class.std::__1::vector.79"* %8 to i64*
  %178 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %171 to i64*
  %179 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %172 to i64*
  br label %195

180:                                              ; preds = %155
  %181 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %182 = bitcast %"class.std::__1::__tree_end_node"* %181 to %"class.std::__1::__tree_node"**
  %183 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 2
  %184 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 4
  %185 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 3
  %186 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 6
  %187 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %1, i64 0, i32 1
  %188 = getelementptr inbounds %"class.re2::FilteredRE2", %"class.re2::FilteredRE2"* %168, i64 0, i32 0, i32 0, i32 0
  %189 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %171 to i64*
  %190 = bitcast %"class.std::__1::vector.79"* %8 to i64*
  %191 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %172 to i64*
  br label %280

192:                                              ; preds = %453
  %193 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %170, align 8
  %194 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %171, align 8
  br label %195

195:                                              ; preds = %176, %192
  %196 = phi i64* [ %179, %176 ], [ %191, %192 ]
  %197 = phi i64* [ %178, %176 ], [ %189, %192 ]
  %198 = phi i64* [ %177, %176 ], [ %190, %192 ]
  %199 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ null, %176 ], [ %194, %192 ]
  %200 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ null, %176 ], [ %193, %192 ]
  call fastcc void @"_ZNSt3__16__sortIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEvT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %200, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %199) #13
  %201 = bitcast %"struct.std::__1::pair.78"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %201) #13
  %202 = ptrtoint %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0 to i64
  %203 = bitcast %"struct.std::__1::pair.78"* %9 to i64*
  store i64 %202, i64* %203, align 8, !alias.scope !13
  %204 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %9, i64 0, i32 1
  %205 = load i64, i64* %198, align 8, !noalias !13
  %206 = bitcast %"class.std::__1::vector.79"* %204 to i64*
  store i64 %205, i64* %206, align 8, !alias.scope !13
  %207 = load i64, i64* %197, align 8, !noalias !13
  %208 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %9, i64 0, i32 1, i32 0, i32 1
  %209 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %208 to i64*
  store i64 %207, i64* %209, align 8, !alias.scope !13
  %210 = load i64, i64* %196, align 8, !noalias !13
  %211 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %9, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %212 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %211 to i64*
  store i64 %210, i64* %212, align 8, !alias.scope !13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %169, i8 0, i64 24, i1 false) #13, !noalias !13
  %213 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %11, align 8
  %214 = load i64, i64* %14, align 8
  %215 = ptrtoint %"struct.std::__1::pair.78"* %213 to i64
  %216 = sub i64 %214, %215
  %217 = icmp eq i64 %216, 0
  %218 = inttoptr i64 %214 to %"struct.std::__1::pair.78"*
  %219 = inttoptr i64 %205 to %"struct.extensions::declarative_net_request::RegexRuleInfo"*
  br i1 %217, label %236, label %220

220:                                              ; preds = %195
  %221 = ashr exact i64 %216, 5
  br label %222

222:                                              ; preds = %222, %220
  %223 = phi %"struct.std::__1::pair.78"* [ %213, %220 ], [ %234, %222 ]
  %224 = phi i64 [ %221, %220 ], [ %233, %222 ]
  %225 = lshr i64 %224, 1
  %226 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %223, i64 %225
  %227 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %226, i64 0, i32 0
  %228 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %227, align 8
  %229 = icmp ult %"class.extensions::declarative_net_request::RegexRulesMatcher"* %228, %0
  %230 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %226, i64 1
  %231 = xor i64 %225, -1
  %232 = add i64 %224, %231
  %233 = select i1 %229, i64 %232, i64 %225
  %234 = select i1 %229, %"struct.std::__1::pair.78"* %230, %"struct.std::__1::pair.78"* %223
  %235 = icmp eq i64 %233, 0
  br i1 %235, label %236, label %222

236:                                              ; preds = %222, %195
  %237 = phi %"struct.std::__1::pair.78"* [ %213, %195 ], [ %234, %222 ]
  %238 = icmp eq %"struct.std::__1::pair.78"* %237, %218
  br i1 %238, label %243, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %237, i64 0, i32 0
  %241 = load %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"class.extensions::declarative_net_request::RegexRulesMatcher"** %240, align 8
  %242 = icmp ugt %"class.extensions::declarative_net_request::RegexRulesMatcher"* %241, %0
  br i1 %242, label %243, label %248

243:                                              ; preds = %239, %236
  %244 = getelementptr inbounds %"class.base::internal::flat_tree.75", %"class.base::internal::flat_tree.75"* %10, i64 0, i32 0
  %245 = call %"struct.std::__1::pair.78"* @_ZNSt3__16vectorINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS0_INS3_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS8_ISB_EEE7emplaceIJSB_EEENS_11__wrap_iterIPSB_EENSF_IPKSB_EEDpOT_(%"class.std::__1::vector.76"* %244, %"struct.std::__1::pair.78"* %237, %"struct.std::__1::pair.78"* nonnull dereferenceable(32) %9) #13
  %246 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %9, i64 0, i32 1, i32 0, i32 0
  %247 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %246, align 8
  br label %248

248:                                              ; preds = %239, %243
  %249 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %247, %243 ], [ %219, %239 ]
  %250 = phi %"struct.std::__1::pair.78"* [ %245, %243 ], [ %237, %239 ]
  %251 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %249, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %248
  %253 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %249 to i64
  store i64 %253, i64* %209, align 8
  %254 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %249 to i8*
  call void @_ZdlPv(i8* %254) #14
  br label %255

255:                                              ; preds = %248, %252
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %201) #13
  %256 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %250, i64 0, i32 1
  %257 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %170, align 8
  %258 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %257, null
  br i1 %258, label %262, label %259

259:                                              ; preds = %255
  %260 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %257 to i64
  store i64 %260, i64* %197, align 8
  %261 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %257 to i8*
  call void @_ZdlPv(i8* %261) #14
  br label %262

262:                                              ; preds = %255, %259
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %169) #13
  %263 = load i32*, i32** %166, align 8
  %264 = icmp eq i32* %263, null
  br i1 %264, label %269, label %265

265:                                              ; preds = %262
  %266 = ptrtoint i32* %263 to i64
  %267 = bitcast i32** %167 to i64*
  store i64 %266, i64* %267, align 8
  %268 = bitcast i32* %263 to i8*
  call void @_ZdlPv(i8* %268) #14
  br label %269

269:                                              ; preds = %262, %265
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #13
  %270 = load i32*, i32** %161, align 8
  %271 = icmp eq i32* %270, null
  br i1 %271, label %276, label %272

272:                                              ; preds = %269
  %273 = ptrtoint i32* %270 to i64
  %274 = bitcast i32** %162 to i64*
  store i64 %273, i64* %274, align 8
  %275 = bitcast i32* %270 to i8*
  call void @_ZdlPv(i8* %275) #14
  br label %276

276:                                              ; preds = %269, %272
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %160) #13
  %277 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0
  %278 = bitcast %"class.std::__1::__tree_end_node"* %152 to %"class.std::__1::__tree_node.196"**
  %279 = load %"class.std::__1::__tree_node.196"*, %"class.std::__1::__tree_node.196"** %278, align 8
  call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.152"* nonnull %277, %"class.std::__1::__tree_node.196"* %279) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #13
  br label %456

280:                                              ; preds = %180, %453
  %281 = phi i32* [ %173, %180 ], [ %454, %453 ]
  %282 = load i32, i32* %281, align 4
  %283 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %182, align 8
  %284 = icmp eq %"class.std::__1::__tree_node"* %283, null
  br i1 %284, label %306, label %285

285:                                              ; preds = %280, %285
  %286 = phi %"class.std::__1::__tree_end_node"* [ %296, %285 ], [ %181, %280 ]
  %287 = phi %"class.std::__1::__tree_node"* [ %297, %285 ], [ %283, %280 ]
  %288 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %287, i64 0, i32 1, i32 0, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp slt i32 %289, %282
  %291 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %287, i64 0, i32 0, i32 1
  %292 = bitcast %"class.std::__1::__tree_node_base"** %291 to %"class.std::__1::__tree_node"**
  %293 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %287, i64 0, i32 0, i32 0
  %294 = bitcast %"class.std::__1::__tree_node"* %287 to %"class.std::__1::__tree_node"**
  %295 = select i1 %290, %"class.std::__1::__tree_node"** %292, %"class.std::__1::__tree_node"** %294
  %296 = select i1 %290, %"class.std::__1::__tree_end_node"* %286, %"class.std::__1::__tree_end_node"* %293
  %297 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %295, align 8
  %298 = icmp eq %"class.std::__1::__tree_node"* %297, null
  br i1 %298, label %299, label %285

299:                                              ; preds = %285
  %300 = icmp eq %"class.std::__1::__tree_end_node"* %296, %181
  br i1 %300, label %306, label %301

301:                                              ; preds = %299
  %302 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %296, i64 4
  %303 = bitcast %"class.std::__1::__tree_end_node"* %302 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = icmp slt i32 %282, %304
  br i1 %305, label %306, label %307

306:                                              ; preds = %301, %299, %280
  br label %307

307:                                              ; preds = %301, %306
  %308 = phi %"class.std::__1::__tree_end_node"* [ %181, %306 ], [ %296, %301 ]
  %309 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %308, i64 5
  %310 = bitcast %"class.std::__1::__tree_end_node"* %309 to %"struct.extensions::declarative_net_request::flat::RegexRule"**
  %311 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %310, align 8
  %312 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %311 to i64
  %313 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %311 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = sext i32 %314 to i64
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %311, i64 0, i32 0, i32 0, i64 %316
  %318 = bitcast i8* %317 to i16*
  %319 = load i16, i16* %318, align 2
  %320 = icmp ugt i16 %319, 4
  br i1 %320, label %321, label %334

321:                                              ; preds = %307
  %322 = getelementptr inbounds i8, i8* %317, i64 4
  %323 = bitcast i8* %322 to i16*
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i64
  %326 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %311, i64 0, i32 0, i32 0, i64 %325
  %327 = icmp eq i16 %324, 0
  br i1 %327, label %334, label %328

328:                                              ; preds = %321
  %329 = bitcast i8* %326 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %326, i64 %331
  %333 = bitcast i8* %332 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %334

334:                                              ; preds = %307, %321, %328
  %335 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %333, %328 ], [ null, %321 ], [ null, %307 ]
  %336 = load i32, i32* %183, align 8
  %337 = load i32, i32* %184, align 8
  %338 = load i8, i8* %185, align 4, !range !11
  %339 = icmp ne i8 %338, 0
  %340 = call zeroext i1 @_ZN17url_pattern_index18DoesRuleFlagsMatchERKNS_4flat7UrlRuleENS0_11ElementTypeENS0_14ActivationTypeENS0_13RequestMethodEbRKN4base17RepeatingCallbackIFbRKN11flatbuffers6VectorIhEEEEE(%"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %335, i32 %336, i32 0, i32 %337, i1 zeroext %339, %"class.base::RepeatingCallback"* dereferenceable(8) %186) #13
  br i1 %340, label %341, label %453

341:                                              ; preds = %334
  %342 = call zeroext i1 @_ZN17url_pattern_index25DoesOriginMatchDomainListERKN3url6OriginERKNS_4flat7UrlRuleEb(%"class.url::Origin"* dereferenceable(80) %187, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %335, i1 zeroext false) #13
  br i1 %342, label %343, label %453

343:                                              ; preds = %341
  %344 = sext i32 %282 to i64
  %345 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %188, align 8
  %346 = getelementptr inbounds %"class.re2::RE2"*, %"class.re2::RE2"** %345, i64 %344
  %347 = bitcast %"class.re2::RE2"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %171, align 8
  %350 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %172, align 8
  %351 = icmp ult %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349, %350
  %352 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349 to i64
  %353 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %350 to i64
  br i1 %351, label %354, label %360

354:                                              ; preds = %343
  %355 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349 to i64*
  store i64 %312, i64* %355, align 8
  %356 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349, i64 0, i32 1
  %357 = bitcast %"class.re2::RE2"** %356 to i64*
  store i64 %348, i64* %357, align 8
  %358 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349, i64 1
  %359 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %358 to i64
  store i64 %359, i64* %189, align 8
  br label %453

360:                                              ; preds = %343
  %361 = load i64, i64* %190, align 8
  %362 = sub i64 %352, %361
  %363 = ashr exact i64 %362, 4
  %364 = add nsw i64 %363, 1
  %365 = icmp ugt i64 %364, 1152921504606846975
  %366 = inttoptr i64 %361 to %"struct.extensions::declarative_net_request::RegexRuleInfo"*
  br i1 %365, label %367, label %369

367:                                              ; preds = %360
  %368 = bitcast %"class.std::__1::vector.79"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %368) #15
  unreachable

369:                                              ; preds = %360
  %370 = sub i64 %353, %361
  %371 = ashr exact i64 %370, 4
  %372 = icmp ult i64 %371, 576460752303423487
  br i1 %372, label %373, label %381

373:                                              ; preds = %369
  %374 = ashr exact i64 %370, 3
  %375 = icmp ult i64 %374, %364
  %376 = select i1 %375, i64 %364, i64 %374
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %386, label %378

378:                                              ; preds = %373
  %379 = icmp ugt i64 %376, 1152921504606846975
  br i1 %379, label %380, label %381

380:                                              ; preds = %378
  call void @abort() #15
  unreachable

381:                                              ; preds = %378, %369
  %382 = phi i64 [ %376, %378 ], [ 1152921504606846975, %369 ]
  %383 = shl i64 %382, 4
  %384 = call i8* @_Znwm(i64 %383) #14
  %385 = bitcast i8* %384 to %"struct.extensions::declarative_net_request::RegexRuleInfo"*
  br label %386

386:                                              ; preds = %381, %373
  %387 = phi i64 [ %382, %381 ], [ 0, %373 ]
  %388 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %385, %381 ], [ null, %373 ]
  %389 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %388, i64 %363
  %390 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %388, i64 %387
  %391 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %390 to i64
  %392 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %389 to i64*
  store i64 %312, i64* %392, align 8
  %393 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %388, i64 %363, i32 1
  %394 = bitcast %"class.re2::RE2"** %393 to i64*
  store i64 %348, i64* %394, align 8
  %395 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %389, i64 1
  %396 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %395 to i64
  %397 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349, %366
  br i1 %397, label %446, label %398

398:                                              ; preds = %386
  %399 = getelementptr %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %349, i64 -1
  %400 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %399 to i8*
  %401 = sub i64 0, %361
  %402 = getelementptr i8, i8* %400, i64 %401
  %403 = ptrtoint i8* %402 to i64
  %404 = lshr i64 %403, 4
  %405 = add nuw nsw i64 %404, 1
  %406 = and i64 %405, 3
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %418, label %408

408:                                              ; preds = %398, %408
  %409 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %412, %408 ], [ %389, %398 ]
  %410 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %413, %408 ], [ %349, %398 ]
  %411 = phi i64 [ %416, %408 ], [ %406, %398 ]
  %412 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %409, i64 -1
  %413 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %410, i64 -1
  %414 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %412 to i8*
  %415 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %413 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %414, i8* align 8 %415, i64 16, i1 false) #13
  %416 = add i64 %411, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %408, !llvm.loop !16

418:                                              ; preds = %408, %398
  %419 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ undef, %398 ], [ %412, %408 ]
  %420 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %389, %398 ], [ %412, %408 ]
  %421 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %349, %398 ], [ %413, %408 ]
  %422 = icmp ult i8* %402, inttoptr (i64 48 to i8*)
  br i1 %422, label %443, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %438, %423 ], [ %420, %418 ]
  %425 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %439, %423 ], [ %421, %418 ]
  %426 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %424, i64 -1
  %427 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %425, i64 -1
  %428 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %426 to i8*
  %429 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %427 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %428, i8* align 8 %429, i64 16, i1 false) #13
  %430 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %424, i64 -2
  %431 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %425, i64 -2
  %432 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %430 to i8*
  %433 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %431 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %432, i8* align 8 %433, i64 16, i1 false) #13
  %434 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %424, i64 -3
  %435 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %425, i64 -3
  %436 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %434 to i8*
  %437 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %435 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %436, i8* align 8 %437, i64 16, i1 false) #13
  %438 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %424, i64 -4
  %439 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %425, i64 -4
  %440 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %438 to i8*
  %441 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %439 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %440, i8* align 8 %441, i64 16, i1 false) #13
  %442 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %439, %366
  br i1 %442, label %443, label %423

443:                                              ; preds = %423, %418
  %444 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %419, %418 ], [ %438, %423 ]
  %445 = load i64, i64* %190, align 8
  br label %446

446:                                              ; preds = %386, %443
  %447 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %444, %443 ], [ %389, %386 ]
  %448 = phi i64 [ %445, %443 ], [ %352, %386 ]
  %449 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %447 to i64
  store i64 %449, i64* %190, align 8
  store i64 %396, i64* %189, align 8
  store i64 %391, i64* %191, align 8
  %450 = icmp eq i64 %448, 0
  br i1 %450, label %453, label %451

451:                                              ; preds = %446
  %452 = inttoptr i64 %448 to i8*
  call void @_ZdlPv(i8* %452) #14
  br label %453

453:                                              ; preds = %334, %341, %354, %446, %451
  %454 = getelementptr inbounds i32, i32* %281, i64 1
  %455 = icmp eq i32* %454, %174
  br i1 %455, label %192, label %280

456:                                              ; preds = %276, %103, %55
  %457 = phi %"class.std::__1::vector.79"* [ %56, %55 ], [ %105, %103 ], [ %256, %276 ]
  ret %"class.std::__1::vector.79"* %457
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase35GetModifyHeadersActionsFromMetadataERKNS0_13RequestParamsERKNSt3__16vectorIPKN17url_pattern_index4flat7UrlRuleENS5_9allocatorISB_EEEERKN11flatbuffers6VectorINSH_6OffsetINS0_4flat15UrlRuleMetadataEEEEE(%"class.std::__1::vector.96"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"class.std::__1::vector.115"* dereferenceable(24), %"class.flatbuffers::Vector.11"* dereferenceable(4)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions23declarative_net_request17RegexRulesMatcher25GetAllowAllRequestsActionERKNS0_13RequestParamsE(%"class.absl::optional.122"* noalias sret, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200)) unnamed_addr #1 align 2 {
  %4 = alloca %"class.re2::StringPiece", align 8
  %5 = alloca %"struct.extensions::declarative_net_request::RequestAction", align 8
  %6 = tail call dereferenceable(24) %"class.std::__1::vector.79"* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS0_13RequestParamsE(%"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2)
  %7 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %6, i64 0, i32 0, i32 0
  %8 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %6, i64 0, i32 0, i32 1
  %10 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %9, align 8
  %11 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %8, %10
  br i1 %11, label %65, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %2, i64 0, i32 0
  %14 = bitcast %"class.re2::StringPiece"* %4 to i8*
  %15 = bitcast %"class.re2::StringPiece"* %4 to i64*
  %16 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %4, i64 0, i32 1
  br label %17

17:                                               ; preds = %58, %12
  %18 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %8, %12 ], [ %59, %58 ]
  %19 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %18, i64 0, i32 0
  %20 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %19, align 8
  %21 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = sub nsw i64 0, %23
  %25 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %20, i64 0, i32 0, i32 0, i64 %24
  %26 = bitcast i8* %25 to i16*
  %27 = load i16, i16* %26, align 2
  %28 = icmp ugt i16 %27, 6
  br i1 %28, label %29, label %58

29:                                               ; preds = %17
  %30 = getelementptr inbounds i8, i8* %25, i64 6
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %58, label %34

34:                                               ; preds = %29
  %35 = zext i16 %32 to i64
  %36 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %20, i64 0, i32 0, i32 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 5
  br i1 %38, label %39, label %58

39:                                               ; preds = %34
  %40 = load %class.GURL*, %class.GURL** %13, align 8
  %41 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %40) #13
  %42 = bitcast %"class.std::__1::basic_string"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %42, i64 0, i32 1, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp slt i8 %44, 0
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = bitcast %"class.std::__1::basic_string"* %41 to i8*
  %49 = select i1 %45, i8* %47, i8* %48
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = zext i8 %44 to i64
  %54 = select i1 %45, i64 %52, i64 %53
  %55 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %18, i64 0, i32 1
  %56 = load %"class.re2::RE2"*, %"class.re2::RE2"** %55, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #13
  store i64 %50, i64* %15, align 8
  store i64 %54, i64* %16, align 8
  %57 = call zeroext i1 @_ZN3re23RE213PartialMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull dereferenceable(16) %4, %"class.re2::RE2"* dereferenceable(200) %56, %"class.re2::RE2::Arg"** null, i32 0) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #13
  br i1 %57, label %61, label %58

58:                                               ; preds = %39, %34, %29, %17
  %59 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %18, i64 1
  %60 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %59, %10
  br i1 %60, label %61, label %17

61:                                               ; preds = %39, %58
  %62 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %10, %58 ], [ %18, %39 ]
  %63 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %9, align 8
  %64 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %62, %63
  br i1 %64, label %65, label %69

65:                                               ; preds = %3, %61
  %66 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %66, align 8
  %67 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %68 = bitcast %union.anon.126* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 240, i1 false) #13
  br label %99

69:                                               ; preds = %61
  %70 = bitcast %"struct.extensions::declarative_net_request::RequestAction"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %70) #13
  %71 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  %72 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %62, i64 0, i32 0
  %73 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %72, align 8
  %74 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %73, i64 0, i32 0, i32 0, i64 %77
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = icmp ugt i16 %80, 4
  br i1 %81, label %82, label %95

82:                                               ; preds = %69
  %83 = getelementptr inbounds i8, i8* %78, i64 4
  %84 = bitcast i8* %83 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i64
  %87 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %73, i64 0, i32 0, i32 0, i64 %86
  %88 = icmp eq i16 %85, 0
  br i1 %88, label %95, label %89

89:                                               ; preds = %82
  %90 = bitcast i8* %87 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %87, i64 %92
  %94 = bitcast i8* %93 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %95

95:                                               ; preds = %69, %82, %89
  %96 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %94, %89 ], [ null, %82 ], [ null, %69 ]
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase28CreateAllowAllRequestsActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* nonnull sret %5, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %71, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %96) #13
  %97 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %97, align 8
  %98 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN10extensions23declarative_net_request13RequestActionC1EOS1_(%"struct.extensions::declarative_net_request::RequestAction"* %98, %"struct.extensions::declarative_net_request::RequestAction"* nonnull dereferenceable(240) %5) #13
  call void @_ZN10extensions23declarative_net_request13RequestActionD1Ev(%"struct.extensions::declarative_net_request::RequestAction"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %70) #13
  br label %99

99:                                               ; preds = %95, %65
  ret void
}

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase28CreateAllowAllRequestsActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN10extensions23declarative_net_request13RequestActionD1Ev(%"struct.extensions::declarative_net_request::RequestAction"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions23declarative_net_request17RegexRulesMatcher39GetBeforeRequestActionIgnoringAncestorsERKNS0_13RequestParamsE(%"class.absl::optional.122"* noalias sret, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200)) unnamed_addr #1 align 2 {
  %4 = alloca %"class.re2::StringPiece", align 8
  %5 = alloca %"struct.extensions::declarative_net_request::RequestAction", align 8
  %6 = alloca %"struct.extensions::declarative_net_request::RequestAction", align 8
  %7 = alloca %"struct.extensions::declarative_net_request::RequestAction", align 8
  %8 = tail call dereferenceable(24) %"class.std::__1::vector.79"* @_ZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS0_13RequestParamsE(%"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2)
  %9 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 0
  %10 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %8, i64 0, i32 0, i32 1
  %12 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %11, align 8
  %13 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %10, %12
  br i1 %13, label %66, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %2, i64 0, i32 0
  %16 = bitcast %"class.re2::StringPiece"* %4 to i8*
  %17 = bitcast %"class.re2::StringPiece"* %4 to i64*
  %18 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %4, i64 0, i32 1
  br label %19

19:                                               ; preds = %59, %14
  %20 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %10, %14 ], [ %60, %59 ]
  %21 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %20, i64 0, i32 0
  %22 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %21, align 8
  %23 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = sub nsw i64 0, %25
  %27 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %22, i64 0, i32 0, i32 0, i64 %26
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = icmp ugt i16 %29, 6
  br i1 %30, label %31, label %40

31:                                               ; preds = %19
  %32 = getelementptr inbounds i8, i8* %27, i64 6
  %33 = bitcast i8* %32 to i16*
  %34 = load i16, i16* %33, align 2
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %31
  %37 = zext i16 %34 to i64
  %38 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %22, i64 0, i32 0, i32 0, i64 %37
  %39 = load i8, i8* %38, align 1
  switch i8 %39, label %59 [
    i8 0, label %40
    i8 1, label %40
    i8 2, label %40
    i8 3, label %40
    i8 5, label %40
  ]

40:                                               ; preds = %36, %36, %36, %36, %36, %31, %19
  %41 = load %class.GURL*, %class.GURL** %15, align 8
  %42 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %41) #13
  %43 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::basic_string"* %42 to i8*
  %50 = select i1 %46, i8* %48, i8* %49
  %51 = ptrtoint i8* %50 to i64
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = zext i8 %45 to i64
  %55 = select i1 %46, i64 %53, i64 %54
  %56 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %20, i64 0, i32 1
  %57 = load %"class.re2::RE2"*, %"class.re2::RE2"** %56, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #13
  store i64 %51, i64* %17, align 8
  store i64 %55, i64* %18, align 8
  %58 = call zeroext i1 @_ZN3re23RE213PartialMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull dereferenceable(16) %4, %"class.re2::RE2"* dereferenceable(200) %57, %"class.re2::RE2::Arg"** null, i32 0) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #13
  br i1 %58, label %62, label %59

59:                                               ; preds = %40, %36
  %60 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %20, i64 1
  %61 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %60, %12
  br i1 %61, label %62, label %19

62:                                               ; preds = %40, %59
  %63 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %12, %59 ], [ %20, %40 ]
  %64 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %11, align 8
  %65 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %63, %64
  br i1 %65, label %66, label %70

66:                                               ; preds = %3, %62
  %67 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %67, align 8
  %68 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %69 = bitcast %union.anon.126* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 240, i1 false) #13
  br label %148

70:                                               ; preds = %62
  %71 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %63, i64 0, i32 0
  %72 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %71, align 8
  %73 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %72 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  %76 = sub nsw i64 0, %75
  %77 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %72, i64 0, i32 0, i32 0, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = load i16, i16* %78, align 2
  %80 = icmp ugt i16 %79, 4
  br i1 %80, label %81, label %106

81:                                               ; preds = %70
  %82 = getelementptr inbounds i8, i8* %77, i64 4
  %83 = bitcast i8* %82 to i16*
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i64
  %86 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %72, i64 0, i32 0, i32 0, i64 %85
  %87 = icmp eq i16 %84, 0
  br i1 %87, label %94, label %88

88:                                               ; preds = %81
  %89 = bitcast i8* %86 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %86, i64 %91
  %93 = bitcast i8* %92 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %94

94:                                               ; preds = %81, %88
  %95 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %93, %88 ], [ null, %81 ]
  %96 = icmp ugt i16 %79, 6
  br i1 %96, label %97, label %106

97:                                               ; preds = %94
  %98 = getelementptr inbounds i8, i8* %77, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = icmp eq i16 %100, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %97
  %103 = zext i16 %100 to i64
  %104 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %72, i64 0, i32 0, i32 0, i64 %103
  %105 = load i8, i8* %104, align 1
  switch i8 %105, label %144 [
    i8 0, label %106
    i8 1, label %112
    i8 2, label %117
    i8 3, label %137
    i8 5, label %139
  ]

106:                                              ; preds = %70, %94, %97, %102
  %107 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %95, %102 ], [ %95, %94 ], [ %95, %97 ], [ null, %70 ]
  %108 = bitcast %"struct.extensions::declarative_net_request::RequestAction"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %108) #13
  %109 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase34CreateBlockOrCollapseRequestActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* nonnull sret %5, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %109, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %107) #13
  %110 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %110, align 8
  %111 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN10extensions23declarative_net_request13RequestActionC1EOS1_(%"struct.extensions::declarative_net_request::RequestAction"* %111, %"struct.extensions::declarative_net_request::RequestAction"* nonnull dereferenceable(240) %5) #13
  call void @_ZN10extensions23declarative_net_request13RequestActionD1Ev(%"struct.extensions::declarative_net_request::RequestAction"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %108) #13
  br label %148

112:                                              ; preds = %102
  %113 = bitcast %"struct.extensions::declarative_net_request::RequestAction"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %113) #13
  %114 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase17CreateAllowActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* nonnull sret %6, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %114, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %95) #13
  %115 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %115, align 8
  %116 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN10extensions23declarative_net_request13RequestActionC1EOS1_(%"struct.extensions::declarative_net_request::RequestAction"* %116, %"struct.extensions::declarative_net_request::RequestAction"* nonnull dereferenceable(240) %6) #13
  call void @_ZN10extensions23declarative_net_request13RequestActionD1Ev(%"struct.extensions::declarative_net_request::RequestAction"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %113) #13
  br label %148

117:                                              ; preds = %102
  %118 = icmp ugt i16 %79, 8
  br i1 %118, label %119, label %133

119:                                              ; preds = %117
  %120 = getelementptr inbounds i8, i8* %77, i64 8
  %121 = bitcast i8* %120 to i16*
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i64
  %124 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %72, i64 0, i32 0, i32 0, i64 %123
  %125 = icmp eq i16 %122, 0
  br i1 %125, label %133, label %126

126:                                              ; preds = %119
  %127 = bitcast i8* %124 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %124, i64 %129
  %131 = icmp eq i8* %130, null
  br i1 %131, label %133, label %132

132:                                              ; preds = %126
  call void @_ZNK10extensions23declarative_net_request17RegexRulesMatcher37CreateRegexSubstitutionRedirectActionERKNS0_13RequestParamsERKNS0_13RegexRuleInfoE(%"class.absl::optional.122"* sret %0, %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.extensions::declarative_net_request::RegexRuleInfo"* dereferenceable(16) %63)
  br label %148

133:                                              ; preds = %117, %119, %126
  %134 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  %135 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 2
  %136 = load %"class.flatbuffers::Vector.11"*, %"class.flatbuffers::Vector.11"** %135, align 8
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase32CreateRedirectActionFromMetadataERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleERKN11flatbuffers6VectorINSA_6OffsetINS0_4flat15UrlRuleMetadataEEEEE(%"class.absl::optional.122"* sret %0, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %134, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %95, %"class.flatbuffers::Vector.11"* dereferenceable(4) %136) #13
  br label %148

137:                                              ; preds = %102
  %138 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase19CreateUpgradeActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"class.absl::optional.122"* sret %0, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %138, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %95) #13
  br label %148

139:                                              ; preds = %102
  %140 = bitcast %"struct.extensions::declarative_net_request::RequestAction"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %140) #13
  %141 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase28CreateAllowAllRequestsActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* nonnull sret %7, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %141, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %95) #13
  %142 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %142, align 8
  %143 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN10extensions23declarative_net_request13RequestActionC1EOS1_(%"struct.extensions::declarative_net_request::RequestAction"* %143, %"struct.extensions::declarative_net_request::RequestAction"* nonnull dereferenceable(240) %7) #13
  call void @_ZN10extensions23declarative_net_request13RequestActionD1Ev(%"struct.extensions::declarative_net_request::RequestAction"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %140) #13
  br label %148

144:                                              ; preds = %102
  %145 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %145, align 8
  %146 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %147 = bitcast %union.anon.126* %146 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %147, i8 0, i64 240, i1 false) #13
  br label %148

148:                                              ; preds = %106, %112, %137, %139, %144, %133, %132, %66
  ret void
}

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase34CreateBlockOrCollapseRequestActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1)) local_unnamed_addr #3

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase17CreateAllowActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"struct.extensions::declarative_net_request::RequestAction"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions23declarative_net_request17RegexRulesMatcher37CreateRegexSubstitutionRedirectActionERKNS0_13RequestParamsERKNS0_13RegexRuleInfoE(%"class.absl::optional.122"* noalias sret, %"class.extensions::declarative_net_request::RegexRulesMatcher"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.re2::StringPiece", align 8
  %7 = alloca %"class.logging::LogMessage", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %class.GURL, align 8
  %10 = alloca %class.GURL, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"struct.extensions::declarative_net_request::RequestParams", %"struct.extensions::declarative_net_request::RequestParams"* %2, i64 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  %16 = load %class.GURL*, %class.GURL** %14, align 8
  %17 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %16) #13
  %18 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %4
  %23 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %23, i64 24, i1 false) #13
  br label %29

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* %26, i64 %28) #13
  br label %29

29:                                               ; preds = %22, %24
  %30 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 1
  %31 = load %"class.re2::RE2"*, %"class.re2::RE2"** %30, align 8
  %32 = bitcast %"class.re2::StringPiece"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #13
  %33 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 0
  %34 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %33, align 8
  %35 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = sub nsw i64 0, %37
  %39 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %34, i64 0, i32 0, i32 0, i64 %38
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = icmp ugt i16 %41, 8
  br i1 %42, label %43, label %56

43:                                               ; preds = %29
  %44 = getelementptr inbounds i8, i8* %39, i64 8
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i64
  %48 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %34, i64 0, i32 0, i32 0, i64 %47
  %49 = icmp eq i16 %46, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %43
  %51 = bitcast i8* %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %48, i64 %53
  %55 = bitcast i8* %54 to %"struct.flatbuffers::String"*
  br label %56

56:                                               ; preds = %29, %43, %50
  %57 = phi %"struct.flatbuffers::String"* [ %55, %50 ], [ null, %43 ], [ null, %29 ]
  %58 = getelementptr inbounds %"struct.flatbuffers::String", %"struct.flatbuffers::String"* %57, i64 0, i32 0
  %59 = getelementptr inbounds %"class.flatbuffers::Vector.132", %"class.flatbuffers::Vector.132"* %58, i64 1, i32 0
  %60 = getelementptr inbounds %"struct.flatbuffers::String", %"struct.flatbuffers::String"* %57, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = bitcast %"class.re2::StringPiece"* %6 to i32**
  store i32* %59, i32** %63, align 8
  %64 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %6, i64 0, i32 1
  store i64 %62, i64* %64, align 8
  %65 = call zeroext i1 @_ZN3re23RE27ReplaceEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_RKNS_11StringPieceE(%"class.std::__1::basic_string"* nonnull %5, %"class.re2::RE2"* dereferenceable(200) %31, %"class.re2::StringPiece"* nonnull dereferenceable(16) %6) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #13
  br i1 %65, label %143, label %66

66:                                               ; preds = %56
  %67 = call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #13
  br i1 %67, label %68, label %138

68:                                               ; preds = %66
  %69 = bitcast %"class.logging::LogMessage"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %69) #13
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %7, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.1, i64 0, i64 0), i32 323, i32 2) #13
  %70 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %7, i64 0, i32 2
  %71 = bitcast %"class.std::__1::basic_ostringstream"* %70 to %"class.std::__1::basic_ostream"*
  %72 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #13
  %73 = load %"class.re2::RE2"*, %"class.re2::RE2"** %30, align 8
  %74 = bitcast %"class.re2::RE2"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %68
  %79 = getelementptr inbounds %"class.re2::RE2", %"class.re2::RE2"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  br label %83

81:                                               ; preds = %68
  %82 = bitcast %"class.re2::RE2"* %73 to i8*
  br label %83

83:                                               ; preds = %78, %81
  %84 = phi i8* [ %80, %78 ], [ %82, %81 ]
  %85 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %33, align 8
  %86 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = sub nsw i64 0, %88
  %90 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %85, i64 0, i32 0, i32 0, i64 %89
  %91 = bitcast i8* %90 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = icmp ugt i16 %92, 8
  br i1 %93, label %94, label %107

94:                                               ; preds = %83
  %95 = getelementptr inbounds i8, i8* %90, i64 8
  %96 = bitcast i8* %95 to i16*
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i64
  %99 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %85, i64 0, i32 0, i32 0, i64 %98
  %100 = icmp eq i16 %97, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %94
  %102 = bitcast i8* %99 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %99, i64 %104
  %106 = bitcast i8* %105 to %"struct.flatbuffers::String"*
  br label %107

107:                                              ; preds = %83, %94, %101
  %108 = phi %"struct.flatbuffers::String"* [ %106, %101 ], [ null, %94 ], [ null, %83 ]
  %109 = getelementptr inbounds %"struct.flatbuffers::String", %"struct.flatbuffers::String"* %108, i64 0, i32 0
  %110 = getelementptr inbounds %"class.flatbuffers::Vector.132", %"class.flatbuffers::Vector.132"* %109, i64 1, i32 0
  %111 = load %class.GURL*, %class.GURL** %14, align 8
  %112 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %111) #13
  %113 = bitcast %"class.std::__1::basic_string"* %112 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %114 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %113, i64 0, i32 1, i32 0
  %115 = load i8, i8* %114, align 1
  %116 = icmp slt i8 %115, 0
  %117 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %112, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = bitcast %"class.std::__1::basic_string"* %112 to i8*
  %120 = select i1 %116, i8* %118, i8* %119
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %8, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i8* %84, i32* %110, i8* %120) #13
  %121 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %121, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  %125 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = zext i8 %123 to i64
  %130 = select i1 %124, i8* %126, i8* %72
  %131 = select i1 %124, i64 %128, i64 %129
  %132 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %71, i8* %130, i64 %131) #13
  %133 = load i8, i8* %122, align 1
  %134 = icmp slt i8 %133, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %107
  %136 = load i8*, i8** %125, align 8
  call void @_ZdlPv(i8* %136) #14
  br label %137

137:                                              ; preds = %107, %135
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #13
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %69) #13
  br label %138

138:                                              ; preds = %66, %137
  %139 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %139, align 8
  %140 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %141 = bitcast %union.anon.126* %140 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 240, i1 false) #13
  %142 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %187

143:                                              ; preds = %56
  %144 = bitcast %class.GURL* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %144) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %144, i8 -86, i64 120, i1 false)
  %145 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %146 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %145, i64 0, i32 1, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %147, 0
  %149 = load i8*, i8** %12, align 8
  %150 = select i1 %148, i8* %149, i8* %11
  %151 = load i64, i64* %13, align 8
  %152 = zext i8 %147 to i64
  %153 = select i1 %148, i64 %151, i64 %152
  call void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* nonnull %9, i8* %150, i64 %153) #13
  %154 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kJavaScriptSchemeE, i64 0, i64 0)) #13
  %155 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* nonnull %9, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kJavaScriptSchemeE, i64 0, i64 0), i64 %154) #13
  br i1 %155, label %156, label %160

156:                                              ; preds = %143
  %157 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %157, align 8
  %158 = getelementptr inbounds %"class.absl::optional.122", %"class.absl::optional.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %159 = bitcast %union.anon.126* %158 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %159, i8 0, i64 240, i1 false) #13
  br label %186

160:                                              ; preds = %143
  %161 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %1, i64 0, i32 0
  %162 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %33, align 8
  %163 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = sext i32 %164 to i64
  %166 = sub nsw i64 0, %165
  %167 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %162, i64 0, i32 0, i32 0, i64 %166
  %168 = bitcast i8* %167 to i16*
  %169 = load i16, i16* %168, align 2
  %170 = icmp ugt i16 %169, 4
  br i1 %170, label %171, label %184

171:                                              ; preds = %160
  %172 = getelementptr inbounds i8, i8* %167, i64 4
  %173 = bitcast i8* %172 to i16*
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i64
  %176 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %162, i64 0, i32 0, i32 0, i64 %175
  %177 = icmp eq i16 %174, 0
  br i1 %177, label %184, label %178

178:                                              ; preds = %171
  %179 = bitcast i8* %176 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %176, i64 %181
  %183 = bitcast i8* %182 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %184

184:                                              ; preds = %160, %171, %178
  %185 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %183, %178 ], [ null, %171 ], [ null, %160 ]
  call void @_ZN4GURLC1EOS_(%class.GURL* nonnull %10, %class.GURL* nonnull dereferenceable(120) %9) #13
  call void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase20CreateRedirectActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE4GURL(%"class.absl::optional.122"* sret %0, %"class.extensions::declarative_net_request::RulesetMatcherBase"* %161, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200) %2, %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1) %185, %class.GURL* nonnull %10) #13
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %10) #13
  br label %186

186:                                              ; preds = %184, %156
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %144) #13
  br label %187

187:                                              ; preds = %186, %138
  %188 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %145, %186 ], [ %142, %138 ]
  %189 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %188, i64 0, i32 1, i32 0
  %190 = load i8, i8* %189, align 1
  %191 = icmp slt i8 %190, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %187
  %193 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %193) #14
  br label %194

194:                                              ; preds = %187, %192
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #13
  ret void
}

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase32CreateRedirectActionFromMetadataERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleERKN11flatbuffers6VectorINSA_6OffsetINS0_4flat15UrlRuleMetadataEEEEE(%"class.absl::optional.122"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1), %"class.flatbuffers::Vector.11"* dereferenceable(4)) local_unnamed_addr #3

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase19CreateUpgradeActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE(%"class.absl::optional.122"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10extensions23declarative_net_request17RegexRulesMatcher7IsEmptyEv(%"class.extensions::declarative_net_request::RegexRulesMatcher"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 1
  %3 = load %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector"** %2, align 8
  %4 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  ret i1 %6
}

declare i32 @_ZN3re211FilteredRE23AddERKNS_11StringPieceERKNS_3RE27OptionsEPi(%"class.re2::FilteredRE2"*, %"class.re2::StringPiece"* dereferenceable(16), %"class.re2::RE2::Options"* dereferenceable(24), i32*) local_unnamed_addr #3

declare void @_ZN10extensions23declarative_net_request16CreateRE2OptionsEbb(%"class.re2::RE2::Options"* sret, i1 zeroext, i1 zeroext) local_unnamed_addr #3

declare void @_ZN3re211FilteredRE27CompileEPNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE(%"class.re2::FilteredRE2"*, %"class.std::__1::vector.135"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.142"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.url_matcher::StringPattern"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.142"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.url_matcher::StringPattern"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.url_matcher::StringPattern"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #15
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #14
  %23 = bitcast i8* %22 to %"class.url_matcher::StringPattern"*
  %24 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %23, i64 %20
  %25 = ptrtoint %"class.url_matcher::StringPattern"* %24 to i64
  %26 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %23, i64 %1
  %27 = ptrtoint %"class.url_matcher::StringPattern"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.url_matcher::StringPattern"*
  %29 = icmp eq %"class.url_matcher::StringPattern"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.url_matcher::StringPattern"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.url_matcher::StringPattern"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %31, i64 -1
  %34 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %32, i64 -1
  tail call void @_ZN11url_matcher13StringPatternC1EOS0_(%"class.url_matcher::StringPattern"* %33, %"class.url_matcher::StringPattern"* dereferenceable(32) %34) #13
  %35 = icmp eq %"class.url_matcher::StringPattern"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.url_matcher::StringPattern"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.url_matcher::StringPattern"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.url_matcher::StringPattern"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.url_matcher::StringPattern"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.url_matcher::StringPattern"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.url_matcher::StringPattern"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %48, i64 -1
  tail call void @_ZN11url_matcher13StringPatternD1Ev(%"class.url_matcher::StringPattern"* %49) #13
  %50 = icmp eq %"class.url_matcher::StringPattern"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

declare void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #3

declare zeroext i1 @_ZNK11url_matcher19SubstringSetMatcher5MatchERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS1_3setIiNS1_4lessIiEENS5_IiEEEE(%"class.url_matcher::SubstringSetMatcher"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::set"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEEC2INS_21__tree_const_iteratorIiPNS_11__tree_nodeIiPvEElEEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISB_EE5valuesr16is_constructibleIiNS_15iterator_traitsISB_E9referenceEEE5valueESB_E4typeE(%"class.std::__1::vector.159"*, %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"*) unnamed_addr #1 comdat align 2 {
  %4 = bitcast %"class.std::__1::vector.159"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #13
  %5 = icmp eq %"class.std::__1::__tree_end_node"* %1, %2
  br i1 %5, label %94, label %6

6:                                                ; preds = %3, %37
  %7 = phi i64 [ %9, %37 ], [ 0, %3 ]
  %8 = phi %"class.std::__1::__tree_end_node"* [ %38, %37 ], [ %1, %3 ]
  %9 = add nuw nsw i64 %7, 1
  %10 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %8, i64 1, i32 0
  %11 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %10, align 8
  %12 = icmp eq %"class.std::__1::__tree_node_base"* %11, null
  br i1 %12, label %13, label %21

13:                                               ; preds = %6
  %14 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node_base"*
  %15 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %8, i64 2
  %16 = bitcast %"class.std::__1::__tree_end_node"* %15 to %"class.std::__1::__tree_end_node"**
  %17 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %17, i64 0, i32 0
  %19 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %18, align 8
  %20 = icmp eq %"class.std::__1::__tree_node_base"* %19, %14
  br i1 %20, label %37, label %28

21:                                               ; preds = %6, %21
  %22 = phi %"class.std::__1::__tree_node_base"* [ %24, %21 ], [ %11, %6 ]
  %23 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %22, i64 0, i32 0, i32 0
  %24 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %23, align 8
  %25 = icmp eq %"class.std::__1::__tree_node_base"* %24, null
  br i1 %25, label %26, label %21

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %22, i64 0, i32 0
  br label %37

28:                                               ; preds = %13, %28
  %29 = phi %"class.std::__1::__tree_end_node"** [ %32, %28 ], [ %16, %13 ]
  %30 = bitcast %"class.std::__1::__tree_end_node"** %29 to %"class.std::__1::__tree_node_base"**
  %31 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %31, i64 0, i32 2
  %33 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %32, align 8
  %34 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %33, i64 0, i32 0
  %35 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %34, align 8
  %36 = icmp eq %"class.std::__1::__tree_node_base"* %35, %31
  br i1 %36, label %37, label %28

37:                                               ; preds = %28, %26, %13
  %38 = phi %"class.std::__1::__tree_end_node"* [ %27, %26 ], [ %17, %13 ], [ %33, %28 ]
  %39 = icmp eq %"class.std::__1::__tree_end_node"* %38, %2
  br i1 %39, label %40, label %6

40:                                               ; preds = %37
  %41 = icmp ugt i64 %7, 4611686018427387902
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector.159"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %43) #15
  unreachable

44:                                               ; preds = %40
  %45 = shl i64 %9, 2
  %46 = tail call i8* @_Znwm(i64 %45) #14
  %47 = bitcast i8* %46 to i32*
  %48 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %0, i64 0, i32 0, i32 1
  %49 = bitcast i32** %48 to i8**
  store i8* %46, i8** %49, align 8
  %50 = bitcast %"class.std::__1::vector.159"* %0 to i8**
  store i8* %46, i8** %50, align 8
  %51 = getelementptr inbounds i32, i32* %47, i64 %9
  %52 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %51, i32** %52, align 8
  %53 = bitcast i32** %48 to i64*
  %54 = bitcast i8* %46 to i32*
  br label %55

55:                                               ; preds = %88, %44
  %56 = phi i32* [ %90, %88 ], [ %54, %44 ]
  %57 = phi %"class.std::__1::__tree_end_node"* [ %89, %88 ], [ %1, %44 ]
  %58 = bitcast %"class.std::__1::__tree_end_node"* %57 to %"class.std::__1::__tree_node.196"*
  %59 = getelementptr inbounds %"class.std::__1::__tree_node.196", %"class.std::__1::__tree_node.196"* %58, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %56, align 4
  %61 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %57, i64 1, i32 0
  %62 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %61, align 8
  %63 = icmp eq %"class.std::__1::__tree_node_base"* %62, null
  br i1 %63, label %64, label %72

64:                                               ; preds = %55
  %65 = bitcast %"class.std::__1::__tree_end_node"* %57 to %"class.std::__1::__tree_node_base"*
  %66 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %57, i64 2
  %67 = bitcast %"class.std::__1::__tree_end_node"* %66 to %"class.std::__1::__tree_end_node"**
  %68 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %67, align 8
  %69 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %68, i64 0, i32 0
  %70 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %69, align 8
  %71 = icmp eq %"class.std::__1::__tree_node_base"* %70, %65
  br i1 %71, label %88, label %79

72:                                               ; preds = %55, %72
  %73 = phi %"class.std::__1::__tree_node_base"* [ %75, %72 ], [ %62, %55 ]
  %74 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %73, i64 0, i32 0, i32 0
  %75 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %74, align 8
  %76 = icmp eq %"class.std::__1::__tree_node_base"* %75, null
  br i1 %76, label %77, label %72

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %73, i64 0, i32 0
  br label %88

79:                                               ; preds = %64, %79
  %80 = phi %"class.std::__1::__tree_end_node"** [ %83, %79 ], [ %67, %64 ]
  %81 = bitcast %"class.std::__1::__tree_end_node"** %80 to %"class.std::__1::__tree_node_base"**
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %82, i64 0, i32 2
  %84 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %84, i64 0, i32 0
  %86 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %85, align 8
  %87 = icmp eq %"class.std::__1::__tree_node_base"* %86, %82
  br i1 %87, label %88, label %79

88:                                               ; preds = %79, %77, %64
  %89 = phi %"class.std::__1::__tree_end_node"* [ %78, %77 ], [ %68, %64 ], [ %84, %79 ]
  %90 = getelementptr inbounds i32, i32* %56, i64 1
  %91 = icmp eq %"class.std::__1::__tree_end_node"* %89, %2
  br i1 %91, label %92, label %55

92:                                               ; preds = %88
  %93 = ptrtoint i32* %90 to i64
  store i64 %93, i64* %53, align 8
  br label %94

94:                                               ; preds = %3, %92
  ret void
}

declare void @_ZNK3re211FilteredRE213AllPotentialsERKNSt3__16vectorIiNS1_9allocatorIiEEEEPS5_(%"class.re2::FilteredRE2"*, %"class.std::__1::vector.159"* dereferenceable(24), %"class.std::__1::vector.159"*) local_unnamed_addr #3

declare zeroext i1 @_ZN3re23RE27ReplaceEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKS0_RKNS_11StringPieceE(%"class.std::__1::basic_string"*, %"class.re2::RE2"* dereferenceable(200), %"class.re2::StringPiece"* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #3

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #3

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) unnamed_addr #3

declare zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) local_unnamed_addr #3

declare void @_ZNK10extensions23declarative_net_request18RulesetMatcherBase20CreateRedirectActionERKNS0_13RequestParamsERKN17url_pattern_index4flat7UrlRuleE4GURL(%"class.absl::optional.122"* sret, %"class.extensions::declarative_net_request::RulesetMatcherBase"*, %"struct.extensions::declarative_net_request::RequestParams"* dereferenceable(200), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1), %class.GURL*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4GURLC1EOS_(%class.GURL*, %class.GURL* dereferenceable(120)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request17RegexRulesMatcher21IsExtraHeadersMatcherEv(%"class.extensions::declarative_net_request::RegexRulesMatcher"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 8, !range !11
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK10extensions23declarative_net_request17RegexRulesMatcher13GetRulesCountEv(%"class.extensions::declarative_net_request::RegexRulesMatcher"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RegexRulesMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher"* %0, i64 0, i32 1
  %3 = load %"class.flatbuffers::Vector"*, %"class.flatbuffers::Vector"** %2, align 8
  %4 = getelementptr inbounds %"class.flatbuffers::Vector", %"class.flatbuffers::Vector"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  ret i64 %6
}

declare void @_ZN10extensions23declarative_net_request13RequestActionC1EOS1_(%"struct.extensions::declarative_net_request::RequestAction"*, %"struct.extensions::declarative_net_request::RequestAction"* dereferenceable(240)) unnamed_addr #3

declare zeroext i1 @_ZN17url_pattern_index18DoesRuleFlagsMatchERKNS_4flat7UrlRuleENS0_11ElementTypeENS0_14ActivationTypeENS0_13RequestMethodEbRKN4base17RepeatingCallbackIFbRKN11flatbuffers6VectorIhEEEEE(%"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1), i32, i32, i32, i1 zeroext, %"class.base::RepeatingCallback"* dereferenceable(8)) local_unnamed_addr #3

declare zeroext i1 @_ZN17url_pattern_index25DoesOriginMatchDomainListERKN3url6OriginERKNS_4flat7UrlRuleEb(%"class.url::Origin"* dereferenceable(80), %"struct.url_pattern_index::flat::UrlRule"* dereferenceable(1), i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree.21"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree.21"* %0, %"class.std::__1::__tree_node"* %6) #13
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree.21"* %0, %"class.std::__1::__tree_node"* %9) #13
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #14
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11url_matcher19SubstringSetMatcherD1Ev(%"class.url_matcher::SubstringSetMatcher"*) unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare zeroext i1 @_ZN3re23RE213PartialMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* dereferenceable(16), %"class.re2::RE2"* dereferenceable(200), %"class.re2::RE2::Arg"**, i32) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !11
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !11
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !11
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11url_matcher13StringPatternD1Ev(%"class.url_matcher::StringPattern"*) unnamed_addr #4

declare void @_ZN11url_matcher13StringPatternC1EOS0_(%"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"* dereferenceable(32)) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN11url_matcher13StringPatternENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEERmEEEvDpOT_(%"class.std::__1::vector.142"*, %"class.std::__1::basic_string"* dereferenceable(24), i64* dereferenceable(8)) local_unnamed_addr #12 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.url_matcher::StringPattern"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.142"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 5
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 576460752303423487
  br i1 %13, label %14, label %16

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector.142"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #15
  unreachable

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"class.url_matcher::StringPattern"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = ashr exact i64 %20, 5
  %22 = icmp ult i64 %21, 288230376151711743
  br i1 %22, label %23, label %31

23:                                               ; preds = %16
  %24 = ashr exact i64 %20, 4
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %36, label %28

28:                                               ; preds = %23
  %29 = icmp ugt i64 %26, 576460752303423487
  br i1 %29, label %30, label %31

30:                                               ; preds = %28
  tail call void @abort() #15
  unreachable

31:                                               ; preds = %16, %28
  %32 = phi i64 [ %26, %28 ], [ 576460752303423487, %16 ]
  %33 = shl i64 %32, 5
  %34 = tail call i8* @_Znwm(i64 %33) #14
  %35 = bitcast i8* %34 to %"class.url_matcher::StringPattern"*
  br label %36

36:                                               ; preds = %23, %31
  %37 = phi i64 [ %32, %31 ], [ 0, %23 ]
  %38 = phi %"class.url_matcher::StringPattern"* [ %35, %31 ], [ null, %23 ]
  %39 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %38, i64 %11
  %40 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %38, i64 %37
  %41 = ptrtoint %"class.url_matcher::StringPattern"* %40 to i64
  %42 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #13
  %43 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %42, i8* align 8 %43, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #13
  %44 = load i64, i64* %2, align 8
  %45 = trunc i64 %44 to i32
  call void @_ZN11url_matcher13StringPatternC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.url_matcher::StringPattern"* %39, %"class.std::__1::basic_string"* nonnull %4, i32 %45) #13
  %46 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %36
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #14
  br label %53

53:                                               ; preds = %36, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #13
  %54 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %39, i64 1
  %55 = ptrtoint %"class.url_matcher::StringPattern"* %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 0
  %57 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %56, align 8
  %58 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %5, align 8
  %59 = icmp eq %"class.url_matcher::StringPattern"* %58, %57
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = ptrtoint %"class.url_matcher::StringPattern"* %57 to i64
  br label %71

62:                                               ; preds = %53, %62
  %63 = phi %"class.url_matcher::StringPattern"* [ %65, %62 ], [ %39, %53 ]
  %64 = phi %"class.url_matcher::StringPattern"* [ %66, %62 ], [ %58, %53 ]
  %65 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %63, i64 -1
  %66 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %64, i64 -1
  call void @_ZN11url_matcher13StringPatternC1EOS0_(%"class.url_matcher::StringPattern"* %65, %"class.url_matcher::StringPattern"* dereferenceable(32) %66) #13
  %67 = icmp eq %"class.url_matcher::StringPattern"* %66, %57
  br i1 %67, label %68, label %62

68:                                               ; preds = %62
  %69 = load i64, i64* %8, align 8
  %70 = load %"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"** %5, align 8
  br label %71

71:                                               ; preds = %60, %68
  %72 = phi %"class.url_matcher::StringPattern"* [ %57, %60 ], [ %70, %68 ]
  %73 = phi %"class.url_matcher::StringPattern"* [ %39, %60 ], [ %65, %68 ]
  %74 = phi i64 [ %61, %60 ], [ %69, %68 ]
  %75 = ptrtoint %"class.url_matcher::StringPattern"* %73 to i64
  store i64 %75, i64* %8, align 8
  store i64 %55, i64* %6, align 8
  store i64 %41, i64* %18, align 8
  %76 = inttoptr i64 %74 to %"class.url_matcher::StringPattern"*
  %77 = icmp eq %"class.url_matcher::StringPattern"* %72, %76
  br i1 %77, label %82, label %78

78:                                               ; preds = %71, %78
  %79 = phi %"class.url_matcher::StringPattern"* [ %80, %78 ], [ %72, %71 ]
  %80 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %79, i64 -1
  call void @_ZN11url_matcher13StringPatternD1Ev(%"class.url_matcher::StringPattern"* %80) #13
  %81 = icmp eq %"class.url_matcher::StringPattern"* %80, %76
  br i1 %81, label %82, label %78

82:                                               ; preds = %78, %71
  %83 = icmp eq i64 %74, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %82
  %85 = inttoptr i64 %74 to i8*
  call void @_ZdlPv(i8* %85) #14
  br label %86

86:                                               ; preds = %82, %84
  ret void
}

declare void @_ZN11url_matcher13StringPatternC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.url_matcher::StringPattern"*, %"class.std::__1::basic_string"*, i32) unnamed_addr #3

declare void @_ZN11url_matcher19SubstringSetMatcherC1ERKNSt3__16vectorINS_13StringPatternENS1_9allocatorIS3_EEEE(%"class.url_matcher::SubstringSetMatcher"*, %"class.std::__1::vector.142"* dereferenceable(24)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::pair.78"* @_ZNSt3__16vectorINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS0_INS3_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS8_ISB_EEE7emplaceIJSB_EEENS_11__wrap_iterIPSB_EENSF_IPKSB_EEDpOT_(%"class.std::__1::vector.76"*, %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"* dereferenceable(32)) local_unnamed_addr #1 comdat align 2 {
  %4 = ptrtoint %"struct.std::__1::pair.78"* %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer.192", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %0, i64 0, i32 0, i32 1
  %8 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %9, align 8
  %11 = icmp ult %"struct.std::__1::pair.78"* %8, %10
  %12 = ptrtoint %"struct.std::__1::pair.78"* %10 to i64
  br i1 %11, label %13, label %198

13:                                               ; preds = %3
  %14 = icmp eq %"struct.std::__1::pair.78"* %8, %1
  %15 = bitcast %"struct.std::__1::pair.78"* %2 to i64*
  %16 = load i64, i64* %15, align 8
  br i1 %14, label %17, label %39

17:                                               ; preds = %13
  %18 = bitcast %"struct.std::__1::pair.78"* %1 to i64*
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %2, i64 0, i32 1
  %21 = bitcast %"class.std::__1::vector.79"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #13
  %22 = bitcast %"class.std::__1::vector.79"* %20 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector.79"* %19 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %2, i64 0, i32 1, i32 0, i32 1
  %26 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 1
  %29 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = bitcast %"class.std::__1::vector.79"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #13
  %36 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 1
  %37 = ptrtoint %"struct.std::__1::pair.78"* %36 to i64
  %38 = bitcast %"struct.std::__1::pair.78"** %7 to i64*
  store i64 %37, i64* %38, align 8
  br label %481

39:                                               ; preds = %13
  %40 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %2, i64 0, i32 1
  %41 = bitcast %"class.std::__1::vector.79"* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector.79"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #13
  %47 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %7, align 8
  %48 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 1
  %49 = ptrtoint %"struct.std::__1::pair.78"* %47 to i64
  %50 = ptrtoint %"struct.std::__1::pair.78"* %48 to i64
  %51 = sub i64 %49, %50
  %52 = ashr exact i64 %51, 5
  %53 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 %52
  %54 = bitcast %"struct.std::__1::pair.78"** %7 to i64*
  %55 = icmp ult %"struct.std::__1::pair.78"* %53, %47
  br i1 %55, label %56, label %96

56:                                               ; preds = %39
  %57 = sub nsw i64 0, %52
  %58 = getelementptr %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %47, i64 %57, i32 0
  %59 = bitcast %"class.extensions::declarative_net_request::RegexRulesMatcher"** %58 to i8*
  %60 = xor i64 %4, -1
  %61 = getelementptr i8, i8* %59, i64 %60
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 32
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %88

65:                                               ; preds = %56
  %66 = bitcast %"struct.std::__1::pair.78"* %53 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"struct.std::__1::pair.78"* %47 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %47, i64 0, i32 1
  %70 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 %52, i32 1
  %71 = bitcast %"class.std::__1::vector.79"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 24, i1 false) #13
  %72 = bitcast %"class.std::__1::vector.79"* %70 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"class.std::__1::vector.79"* %69 to i64*
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 %52, i32 1, i32 0, i32 1
  %76 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %47, i64 0, i32 1, i32 0, i32 1
  %79 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 %52, i32 1, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %47, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = bitcast %"class.std::__1::vector.79"* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #13
  %86 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %53, i64 1
  %87 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %47, i64 1
  br label %88

88:                                               ; preds = %65, %56
  %89 = phi %"struct.std::__1::pair.78"* [ %47, %56 ], [ %87, %65 ]
  %90 = phi %"struct.std::__1::pair.78"* [ %53, %56 ], [ %86, %65 ]
  %91 = phi %"struct.std::__1::pair.78"* [ undef, %56 ], [ %87, %65 ]
  %92 = icmp ult i8* %61, inttoptr (i64 32 to i8*)
  br i1 %92, label %93, label %134

93:                                               ; preds = %134, %88
  %94 = phi %"struct.std::__1::pair.78"* [ %91, %88 ], [ %180, %134 ]
  %95 = ptrtoint %"struct.std::__1::pair.78"* %94 to i64
  br label %96

96:                                               ; preds = %93, %39
  %97 = phi i64 [ %95, %93 ], [ %49, %39 ]
  store i64 %97, i64* %54, align 8
  %98 = icmp eq i64 %51, 0
  br i1 %98, label %182, label %99

99:                                               ; preds = %96, %118
  %100 = phi %"struct.std::__1::pair.78"* [ %103, %118 ], [ %47, %96 ]
  %101 = phi %"struct.std::__1::pair.78"* [ %102, %118 ], [ %53, %96 ]
  %102 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %101, i64 -1
  %103 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %100, i64 -1
  %104 = bitcast %"struct.std::__1::pair.78"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"struct.std::__1::pair.78"* %103 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %101, i64 -1, i32 1
  %108 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %100, i64 -1, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %108, i64 0, i32 0, i32 0
  %110 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %109, align 8
  %111 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %110, null
  br i1 %111, label %118, label %112

112:                                              ; preds = %99
  %113 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %110 to i64
  %114 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %100, i64 -1, i32 1, i32 0, i32 1
  %115 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %110 to i8*
  tail call void @_ZdlPv(i8* %116) #14
  %117 = bitcast %"class.std::__1::vector.79"* %108 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #13
  br label %118

118:                                              ; preds = %99, %112
  %119 = bitcast %"class.std::__1::vector.79"* %107 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = bitcast %"class.std::__1::vector.79"* %108 to i64*
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %101, i64 -1, i32 1, i32 0, i32 1
  %123 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %100, i64 -1, i32 1, i32 0, i32 1
  %126 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %101, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %100, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %131 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %130 to i64*
  store i64 %129, i64* %131, align 8
  %132 = bitcast %"class.std::__1::vector.79"* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 24, i1 false) #13
  %133 = icmp eq %"struct.std::__1::pair.78"* %102, %1
  br i1 %133, label %182, label %99

134:                                              ; preds = %88, %134
  %135 = phi %"struct.std::__1::pair.78"* [ %180, %134 ], [ %89, %88 ]
  %136 = phi %"struct.std::__1::pair.78"* [ %179, %134 ], [ %90, %88 ]
  %137 = bitcast %"struct.std::__1::pair.78"* %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"struct.std::__1::pair.78"* %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 0, i32 1
  %141 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 0, i32 1
  %142 = bitcast %"class.std::__1::vector.79"* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 24, i1 false) #13
  %143 = bitcast %"class.std::__1::vector.79"* %141 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.std::__1::vector.79"* %140 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 0, i32 1, i32 0, i32 1
  %147 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 0, i32 1, i32 0, i32 1
  %150 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %149 to i64*
  store i64 %148, i64* %150, align 8
  %151 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %152 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %155 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %154 to i64*
  store i64 %153, i64* %155, align 8
  %156 = bitcast %"class.std::__1::vector.79"* %141 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 24, i1 false) #13
  %157 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 1
  %158 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 1
  %159 = bitcast %"struct.std::__1::pair.78"* %157 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"struct.std::__1::pair.78"* %158 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 1, i32 1
  %163 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 1, i32 1
  %164 = bitcast %"class.std::__1::vector.79"* %162 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 0, i64 24, i1 false) #13
  %165 = bitcast %"class.std::__1::vector.79"* %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.std::__1::vector.79"* %162 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 1, i32 1, i32 0, i32 1
  %169 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 1, i32 1, i32 0, i32 1
  %172 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %171 to i64*
  store i64 %170, i64* %172, align 8
  %173 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %174 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %177 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %176 to i64*
  store i64 %175, i64* %177, align 8
  %178 = bitcast %"class.std::__1::vector.79"* %163 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %178, i8 0, i64 24, i1 false) #13
  %179 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %136, i64 2
  %180 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %135, i64 2
  %181 = icmp ult %"struct.std::__1::pair.78"* %179, %47
  br i1 %181, label %134, label %93

182:                                              ; preds = %118, %96
  %183 = bitcast %"struct.std::__1::pair.78"* %1 to i64*
  store i64 %16, i64* %183, align 8
  %184 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1
  %185 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %184, i64 0, i32 0, i32 0
  %186 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %185, align 8
  %187 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %186, null
  br i1 %187, label %194, label %188

188:                                              ; preds = %182
  %189 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %186 to i64
  %190 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 1
  %191 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %190 to i64*
  store i64 %189, i64* %191, align 8
  %192 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %186 to i8*
  tail call void @_ZdlPv(i8* %192) #14
  %193 = bitcast %"class.std::__1::vector.79"* %184 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %193, i8 0, i64 24, i1 false) #13
  br label %194

194:                                              ; preds = %182, %188
  %195 = bitcast %"class.std::__1::vector.79"* %184 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %195, align 8
  %196 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %197 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %196 to i64*
  store i64 %45, i64* %197, align 8
  br label %481

198:                                              ; preds = %3
  %199 = ptrtoint %"struct.std::__1::pair.78"* %8 to i64
  %200 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %0, i64 0, i32 0, i32 2
  %201 = bitcast %"struct.std::__1::__split_buffer.192"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %201) #13
  %202 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %5, i64 0, i32 0
  %203 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %5, i64 0, i32 1
  %204 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %5, i64 0, i32 2
  %205 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %5, i64 0, i32 3, i32 0, i32 0
  %206 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %5, i64 0, i32 3, i32 1, i32 0
  %207 = bitcast %"struct.std::__1::pair.78"** %7 to i64*
  %208 = bitcast %"class.std::__1::vector.76"* %0 to i64*
  %209 = bitcast %"struct.std::__1::__split_buffer.192"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %209, i8 -86, i64 40, i1 false)
  %210 = load i64, i64* %208, align 8
  %211 = sub i64 %199, %210
  %212 = ashr exact i64 %211, 5
  %213 = add nsw i64 %212, 1
  %214 = icmp ugt i64 %213, 576460752303423487
  br i1 %214, label %215, label %217

215:                                              ; preds = %198
  %216 = bitcast %"class.std::__1::vector.76"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %216) #15
  unreachable

217:                                              ; preds = %198
  %218 = bitcast %"struct.std::__1::pair.78"** %9 to i64*
  %219 = sub i64 %12, %210
  %220 = ashr exact i64 %219, 5
  %221 = icmp ult i64 %220, 288230376151711743
  br i1 %221, label %226, label %222

222:                                              ; preds = %217
  %223 = sub i64 %4, %210
  %224 = ashr exact i64 %223, 5
  store %"struct.std::__1::pair.78"* null, %"struct.std::__1::pair.78"** %205, align 8
  %225 = bitcast %"class.std::__1::allocator.89"** %206 to %"class.std::__1::__compressed_pair.86"**
  store %"class.std::__1::__compressed_pair.86"* %200, %"class.std::__1::__compressed_pair.86"** %225, align 8
  br label %237

226:                                              ; preds = %217
  %227 = ashr exact i64 %219, 4
  %228 = icmp ult i64 %227, %213
  %229 = select i1 %228, i64 %213, i64 %227
  %230 = sub i64 %4, %210
  %231 = ashr exact i64 %230, 5
  store %"struct.std::__1::pair.78"* null, %"struct.std::__1::pair.78"** %205, align 8
  %232 = bitcast %"class.std::__1::allocator.89"** %206 to %"class.std::__1::__compressed_pair.86"**
  store %"class.std::__1::__compressed_pair.86"* %200, %"class.std::__1::__compressed_pair.86"** %232, align 8
  %233 = icmp eq i64 %229, 0
  br i1 %233, label %243, label %234

234:                                              ; preds = %226
  %235 = icmp ugt i64 %229, 576460752303423487
  br i1 %235, label %236, label %237

236:                                              ; preds = %234
  tail call void @abort() #15
  unreachable

237:                                              ; preds = %222, %234
  %238 = phi i64 [ 576460752303423487, %222 ], [ %229, %234 ]
  %239 = phi i64 [ %224, %222 ], [ %231, %234 ]
  %240 = shl i64 %238, 5
  %241 = tail call i8* @_Znwm(i64 %240) #14
  %242 = bitcast i8* %241 to %"struct.std::__1::pair.78"*
  br label %243

243:                                              ; preds = %226, %237
  %244 = phi i64 [ %239, %237 ], [ %231, %226 ]
  %245 = phi i64 [ %238, %237 ], [ 0, %226 ]
  %246 = phi %"struct.std::__1::pair.78"* [ %242, %237 ], [ null, %226 ]
  store %"struct.std::__1::pair.78"* %246, %"struct.std::__1::pair.78"** %202, align 8
  %247 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %246, i64 %244
  store %"struct.std::__1::pair.78"* %247, %"struct.std::__1::pair.78"** %204, align 8
  store %"struct.std::__1::pair.78"* %247, %"struct.std::__1::pair.78"** %203, align 8
  %248 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %246, i64 %245
  store %"struct.std::__1::pair.78"* %248, %"struct.std::__1::pair.78"** %205, align 8
  call void @_ZNSt3__114__split_bufferINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS3_13RegexRuleInfoENS_9allocatorIS8_EEEEEERNS9_ISC_EEE12emplace_backIJSC_EEEvDpOT_(%"struct.std::__1::__split_buffer.192"* nonnull %5, %"struct.std::__1::pair.78"* dereferenceable(32) %2)
  %249 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %203, align 8
  %250 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %6, align 8
  %251 = icmp eq %"struct.std::__1::pair.78"* %250, %1
  br i1 %251, label %341, label %252

252:                                              ; preds = %243
  %253 = ptrtoint %"struct.std::__1::pair.78"* %250 to i64
  %254 = getelementptr %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 -1, i32 0
  %255 = ptrtoint %"class.extensions::declarative_net_request::RegexRulesMatcher"** %254 to i64
  %256 = sub i64 %255, %253
  %257 = and i64 %256, 32
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %284

259:                                              ; preds = %252
  %260 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %249, i64 -1
  %261 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 -1
  %262 = bitcast %"struct.std::__1::pair.78"* %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast %"struct.std::__1::pair.78"* %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %249, i64 -1, i32 1
  %266 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 -1, i32 1
  %267 = bitcast %"class.std::__1::vector.79"* %265 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %267, i8 0, i64 24, i1 false) #13
  %268 = bitcast %"class.std::__1::vector.79"* %266 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = bitcast %"class.std::__1::vector.79"* %265 to i64*
  store i64 %269, i64* %270, align 8
  %271 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 -1, i32 1, i32 0, i32 1
  %272 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %249, i64 -1, i32 1, i32 0, i32 1
  %275 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %274 to i64*
  store i64 %273, i64* %275, align 8
  %276 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %277 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %249, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %280 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast %"class.std::__1::vector.79"* %266 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %281, i8 0, i64 24, i1 false) #13
  %282 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %203, align 8
  %283 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %282, i64 -1
  store %"struct.std::__1::pair.78"* %283, %"struct.std::__1::pair.78"** %203, align 8
  br label %284

284:                                              ; preds = %259, %252
  %285 = phi %"struct.std::__1::pair.78"* [ undef, %252 ], [ %283, %259 ]
  %286 = phi %"struct.std::__1::pair.78"* [ %249, %252 ], [ %283, %259 ]
  %287 = phi %"struct.std::__1::pair.78"* [ %1, %252 ], [ %261, %259 ]
  %288 = icmp ult i64 %256, 32
  br i1 %288, label %341, label %289

289:                                              ; preds = %284, %289
  %290 = phi %"struct.std::__1::pair.78"* [ %339, %289 ], [ %286, %284 ]
  %291 = phi %"struct.std::__1::pair.78"* [ %317, %289 ], [ %287, %284 ]
  %292 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %290, i64 -1
  %293 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -1
  %294 = bitcast %"struct.std::__1::pair.78"* %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"struct.std::__1::pair.78"* %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %290, i64 -1, i32 1
  %298 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -1, i32 1
  %299 = bitcast %"class.std::__1::vector.79"* %297 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %299, i8 0, i64 24, i1 false) #13
  %300 = bitcast %"class.std::__1::vector.79"* %298 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"class.std::__1::vector.79"* %297 to i64*
  store i64 %301, i64* %302, align 8
  %303 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -1, i32 1, i32 0, i32 1
  %304 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %290, i64 -1, i32 1, i32 0, i32 1
  %307 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %306 to i64*
  store i64 %305, i64* %307, align 8
  %308 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %309 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %290, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %312 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %311 to i64*
  store i64 %310, i64* %312, align 8
  %313 = bitcast %"class.std::__1::vector.79"* %298 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %313, i8 0, i64 24, i1 false) #13
  %314 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %203, align 8
  %315 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %314, i64 -1
  store %"struct.std::__1::pair.78"* %315, %"struct.std::__1::pair.78"** %203, align 8
  %316 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %314, i64 -2
  %317 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -2
  %318 = bitcast %"struct.std::__1::pair.78"* %317 to i64*
  %319 = load i64, i64* %318, align 8
  %320 = bitcast %"struct.std::__1::pair.78"* %316 to i64*
  store i64 %319, i64* %320, align 8
  %321 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %314, i64 -2, i32 1
  %322 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -2, i32 1
  %323 = bitcast %"class.std::__1::vector.79"* %321 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %323, i8 0, i64 24, i1 false) #13
  %324 = bitcast %"class.std::__1::vector.79"* %322 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = bitcast %"class.std::__1::vector.79"* %321 to i64*
  store i64 %325, i64* %326, align 8
  %327 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -2, i32 1, i32 0, i32 1
  %328 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %327 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %314, i64 -2, i32 1, i32 0, i32 1
  %331 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %330 to i64*
  store i64 %329, i64* %331, align 8
  %332 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %291, i64 -2, i32 1, i32 0, i32 2, i32 0, i32 0
  %333 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %332 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %314, i64 -2, i32 1, i32 0, i32 2, i32 0, i32 0
  %336 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %335 to i64*
  store i64 %334, i64* %336, align 8
  %337 = bitcast %"class.std::__1::vector.79"* %322 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %337, i8 0, i64 24, i1 false) #13
  %338 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %203, align 8
  %339 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %338, i64 -1
  store %"struct.std::__1::pair.78"* %339, %"struct.std::__1::pair.78"** %203, align 8
  %340 = icmp eq %"struct.std::__1::pair.78"* %317, %250
  br i1 %340, label %341, label %289

341:                                              ; preds = %284, %289, %243
  %342 = phi %"struct.std::__1::pair.78"* [ %249, %243 ], [ %285, %284 ], [ %339, %289 ]
  %343 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %7, align 8
  %344 = icmp eq %"struct.std::__1::pair.78"* %343, %1
  br i1 %344, label %345, label %351

345:                                              ; preds = %341
  %346 = ptrtoint %"struct.std::__1::pair.78"* %343 to i64
  %347 = ptrtoint %"struct.std::__1::pair.78"* %342 to i64
  %348 = bitcast %"struct.std::__1::pair.78"** %203 to i64*
  %349 = bitcast %"struct.std::__1::pair.78"** %204 to i64*
  %350 = load i64, i64* %349, align 8
  br label %444

351:                                              ; preds = %341
  %352 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %204, align 8
  %353 = getelementptr %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %343, i64 -1, i32 0
  %354 = ptrtoint %"class.extensions::declarative_net_request::RegexRulesMatcher"** %353 to i64
  %355 = sub i64 %354, %4
  %356 = and i64 %355, 32
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %382

358:                                              ; preds = %351
  %359 = bitcast %"struct.std::__1::pair.78"* %1 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = bitcast %"struct.std::__1::pair.78"* %352 to i64*
  store i64 %360, i64* %361, align 8
  %362 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %352, i64 0, i32 1
  %363 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1
  %364 = bitcast %"class.std::__1::vector.79"* %362 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %364, i8 0, i64 24, i1 false) #13
  %365 = bitcast %"class.std::__1::vector.79"* %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.std::__1::vector.79"* %362 to i64*
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 1
  %369 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %368 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %352, i64 0, i32 1, i32 0, i32 1
  %372 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %371 to i64*
  store i64 %370, i64* %372, align 8
  %373 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %374 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %373 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %352, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %377 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %376 to i64*
  store i64 %375, i64* %377, align 8
  %378 = bitcast %"class.std::__1::vector.79"* %363 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %378, i8 0, i64 24, i1 false) #13
  %379 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 1
  %380 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %204, align 8
  %381 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %380, i64 1
  store %"struct.std::__1::pair.78"* %381, %"struct.std::__1::pair.78"** %204, align 8
  br label %382

382:                                              ; preds = %358, %351
  %383 = phi %"struct.std::__1::pair.78"* [ undef, %351 ], [ %381, %358 ]
  %384 = phi %"struct.std::__1::pair.78"* [ %352, %351 ], [ %381, %358 ]
  %385 = phi %"struct.std::__1::pair.78"* [ %1, %351 ], [ %379, %358 ]
  %386 = icmp ult i64 %355, 32
  br i1 %386, label %437, label %387

387:                                              ; preds = %382, %387
  %388 = phi %"struct.std::__1::pair.78"* [ %435, %387 ], [ %384, %382 ]
  %389 = phi %"struct.std::__1::pair.78"* [ %433, %387 ], [ %385, %382 ]
  %390 = bitcast %"struct.std::__1::pair.78"* %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"struct.std::__1::pair.78"* %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %388, i64 0, i32 1
  %394 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 0, i32 1
  %395 = bitcast %"class.std::__1::vector.79"* %393 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %395, i8 0, i64 24, i1 false) #13
  %396 = bitcast %"class.std::__1::vector.79"* %394 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.std::__1::vector.79"* %393 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 0, i32 1, i32 0, i32 1
  %400 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %388, i64 0, i32 1, i32 0, i32 1
  %403 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %402 to i64*
  store i64 %401, i64* %403, align 8
  %404 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %405 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %388, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %408 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %407 to i64*
  store i64 %406, i64* %408, align 8
  %409 = bitcast %"class.std::__1::vector.79"* %394 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %409, i8 0, i64 24, i1 false) #13
  %410 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 1
  %411 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %204, align 8
  %412 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %411, i64 1
  store %"struct.std::__1::pair.78"* %412, %"struct.std::__1::pair.78"** %204, align 8
  %413 = bitcast %"struct.std::__1::pair.78"* %410 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %"struct.std::__1::pair.78"* %412 to i64*
  store i64 %414, i64* %415, align 8
  %416 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %411, i64 1, i32 1
  %417 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 1, i32 1
  %418 = bitcast %"class.std::__1::vector.79"* %416 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %418, i8 0, i64 24, i1 false) #13
  %419 = bitcast %"class.std::__1::vector.79"* %417 to i64*
  %420 = load i64, i64* %419, align 8
  %421 = bitcast %"class.std::__1::vector.79"* %416 to i64*
  store i64 %420, i64* %421, align 8
  %422 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 1, i32 1, i32 0, i32 1
  %423 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %422 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %411, i64 1, i32 1, i32 0, i32 1
  %426 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %425 to i64*
  store i64 %424, i64* %426, align 8
  %427 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %428 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %427 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %411, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %431 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %430 to i64*
  store i64 %429, i64* %431, align 8
  %432 = bitcast %"class.std::__1::vector.79"* %417 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %432, i8 0, i64 24, i1 false) #13
  %433 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %389, i64 2
  %434 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %204, align 8
  %435 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %434, i64 1
  store %"struct.std::__1::pair.78"* %435, %"struct.std::__1::pair.78"** %204, align 8
  %436 = icmp eq %"struct.std::__1::pair.78"* %433, %343
  br i1 %436, label %437, label %387

437:                                              ; preds = %387, %382
  %438 = phi %"struct.std::__1::pair.78"* [ %383, %382 ], [ %435, %387 ]
  %439 = ptrtoint %"struct.std::__1::pair.78"* %438 to i64
  %440 = bitcast %"struct.std::__1::pair.78"** %203 to i64*
  %441 = load i64, i64* %440, align 8
  %442 = load i64, i64* %207, align 8
  %443 = bitcast %"struct.std::__1::pair.78"** %204 to i64*
  br label %444

444:                                              ; preds = %345, %437
  %445 = phi i64* [ %349, %345 ], [ %443, %437 ]
  %446 = phi i64 [ %350, %345 ], [ %439, %437 ]
  %447 = phi i64 [ %346, %345 ], [ %442, %437 ]
  %448 = phi i64* [ %348, %345 ], [ %440, %437 ]
  %449 = phi i64 [ %347, %345 ], [ %441, %437 ]
  %450 = load i64, i64* %208, align 8
  store i64 %449, i64* %208, align 8
  store i64 %450, i64* %448, align 8
  store i64 %446, i64* %207, align 8
  store i64 %447, i64* %445, align 8
  %451 = load i64, i64* %218, align 8
  %452 = bitcast %"struct.std::__1::pair.78"** %205 to i64*
  %453 = load i64, i64* %452, align 8
  store i64 %453, i64* %218, align 8
  store i64 %451, i64* %452, align 8
  %454 = bitcast %"struct.std::__1::__split_buffer.192"* %5 to i64*
  store i64 %450, i64* %454, align 8
  %455 = inttoptr i64 %450 to %"struct.std::__1::pair.78"*
  %456 = inttoptr i64 %447 to %"struct.std::__1::pair.78"*
  %457 = icmp eq %"struct.std::__1::pair.78"* %456, %455
  br i1 %457, label %475, label %458

458:                                              ; preds = %444, %470
  %459 = phi %"struct.std::__1::pair.78"* [ %471, %470 ], [ %456, %444 ]
  %460 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %459, i64 -1
  store %"struct.std::__1::pair.78"* %460, %"struct.std::__1::pair.78"** %204, align 8
  %461 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %459, i64 -1, i32 1, i32 0, i32 0
  %462 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %461, align 8
  %463 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %462, null
  br i1 %463, label %470, label %464

464:                                              ; preds = %458
  %465 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %462 to i64
  %466 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %459, i64 -1, i32 1, i32 0, i32 1
  %467 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %466 to i64*
  store i64 %465, i64* %467, align 8
  %468 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %462 to i8*
  call void @_ZdlPv(i8* %468) #14
  %469 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %204, align 8
  br label %470

470:                                              ; preds = %464, %458
  %471 = phi %"struct.std::__1::pair.78"* [ %460, %458 ], [ %469, %464 ]
  %472 = icmp eq %"struct.std::__1::pair.78"* %471, %455
  br i1 %472, label %473, label %458

473:                                              ; preds = %470
  %474 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %202, align 8
  br label %475

475:                                              ; preds = %473, %444
  %476 = phi %"struct.std::__1::pair.78"* [ %474, %473 ], [ %455, %444 ]
  %477 = icmp eq %"struct.std::__1::pair.78"* %476, null
  br i1 %477, label %480, label %478

478:                                              ; preds = %475
  %479 = bitcast %"struct.std::__1::pair.78"* %476 to i8*
  call void @_ZdlPv(i8* %479) #14
  br label %480

480:                                              ; preds = %475, %478
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %201) #13
  br label %481

481:                                              ; preds = %17, %194, %480
  %482 = phi %"struct.std::__1::pair.78"* [ %1, %17 ], [ %1, %194 ], [ %249, %480 ]
  ret %"struct.std::__1::pair.78"* %482
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferINS_4pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS3_13RegexRuleInfoENS_9allocatorIS8_EEEEEERNS9_ISC_EEE12emplace_backIJSC_EEEvDpOT_(%"struct.std::__1::__split_buffer.192"*, %"struct.std::__1::pair.78"* dereferenceable(32)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %0, i64 0, i32 2
  %4 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %5, align 8
  %7 = icmp eq %"struct.std::__1::pair.78"* %4, %6
  %8 = ptrtoint %"struct.std::__1::pair.78"* %6 to i64
  br i1 %7, label %9, label %203

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %0, i64 0, i32 1
  %11 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.192", %"struct.std::__1::__split_buffer.192"* %0, i64 0, i32 0
  %13 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %12, align 8
  %14 = icmp ugt %"struct.std::__1::pair.78"* %11, %13
  %15 = ptrtoint %"struct.std::__1::pair.78"* %13 to i64
  br i1 %14, label %16, label %65

16:                                               ; preds = %9
  %17 = ptrtoint %"struct.std::__1::pair.78"* %11 to i64
  %18 = sub i64 %17, %15
  %19 = ashr exact i64 %18, 5
  %20 = add nsw i64 %19, 1
  %21 = sdiv i64 %20, -2
  %22 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %11, i64 %21
  %23 = icmp eq %"struct.std::__1::pair.78"* %11, %4
  br i1 %23, label %61, label %24

24:                                               ; preds = %16, %41
  %25 = phi %"struct.std::__1::pair.78"* [ %57, %41 ], [ %22, %16 ]
  %26 = phi %"struct.std::__1::pair.78"* [ %56, %41 ], [ %11, %16 ]
  %27 = bitcast %"struct.std::__1::pair.78"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"struct.std::__1::pair.78"* %25 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %25, i64 0, i32 1
  %32 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %31, i64 0, i32 0, i32 0
  %33 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %32, align 8
  %34 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %24
  %36 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %33 to i64
  %37 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %25, i64 0, i32 1, i32 0, i32 1
  %38 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %33 to i8*
  tail call void @_ZdlPv(i8* %39) #14
  %40 = bitcast %"class.std::__1::vector.79"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #13
  br label %41

41:                                               ; preds = %24, %35
  %42 = bitcast %"class.std::__1::vector.79"* %30 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.79"* %31 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 0, i32 1, i32 0, i32 1
  %46 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %25, i64 0, i32 1, i32 0, i32 1
  %49 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %51 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %25, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %54 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast %"class.std::__1::vector.79"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #13
  %56 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %26, i64 1
  %57 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %25, i64 1
  %58 = icmp eq %"struct.std::__1::pair.78"* %56, %4
  br i1 %58, label %59, label %24

59:                                               ; preds = %41
  %60 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %10, align 8
  br label %61

61:                                               ; preds = %59, %16
  %62 = phi %"struct.std::__1::pair.78"* [ %4, %16 ], [ %60, %59 ]
  %63 = phi %"struct.std::__1::pair.78"* [ %22, %16 ], [ %57, %59 ]
  store %"struct.std::__1::pair.78"* %63, %"struct.std::__1::pair.78"** %3, align 8
  %64 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %62, i64 %21
  store %"struct.std::__1::pair.78"* %64, %"struct.std::__1::pair.78"** %10, align 8
  br label %203

65:                                               ; preds = %9
  %66 = bitcast %"struct.std::__1::pair.78"** %5 to i64*
  %67 = bitcast %"struct.std::__1::__split_buffer.192"* %0 to i64*
  %68 = sub i64 %8, %15
  %69 = ashr exact i64 %68, 4
  %70 = icmp eq i64 %68, 0
  %71 = select i1 %70, i64 1, i64 %69
  %72 = icmp ugt i64 %71, 576460752303423487
  br i1 %72, label %73, label %74

73:                                               ; preds = %65
  tail call void @abort() #15
  unreachable

74:                                               ; preds = %65
  %75 = lshr i64 %71, 2
  %76 = shl i64 %71, 5
  %77 = tail call i8* @_Znwm(i64 %76) #14
  %78 = bitcast i8* %77 to %"struct.std::__1::pair.78"*
  %79 = ptrtoint i8* %77 to i64
  %80 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %78, i64 %75
  %81 = ptrtoint %"struct.std::__1::pair.78"* %80 to i64
  %82 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %78, i64 %71
  %83 = ptrtoint %"struct.std::__1::pair.78"* %82 to i64
  %84 = ptrtoint %"struct.std::__1::pair.78"* %11 to i64
  %85 = ptrtoint %"struct.std::__1::pair.78"* %4 to i64
  %86 = sub i64 %85, %84
  %87 = ashr exact i64 %86, 5
  %88 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %80, i64 %87
  %89 = icmp eq i64 %86, 0
  br i1 %89, label %178, label %90

90:                                               ; preds = %74
  %91 = add i64 %86, -32
  %92 = and i64 %91, 32
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %118

94:                                               ; preds = %90
  %95 = bitcast %"struct.std::__1::pair.78"* %11 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast %"struct.std::__1::pair.78"* %80 to i64*
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %78, i64 %75, i32 1
  %99 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %11, i64 0, i32 1
  %100 = bitcast %"class.std::__1::vector.79"* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 24, i1 false) #13
  %101 = bitcast %"class.std::__1::vector.79"* %99 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.std::__1::vector.79"* %98 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %11, i64 0, i32 1, i32 0, i32 1
  %105 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %78, i64 %75, i32 1, i32 0, i32 1
  %108 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %11, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %78, i64 %75, i32 1, i32 0, i32 2, i32 0, i32 0
  %113 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %112 to i64*
  store i64 %111, i64* %113, align 8
  %114 = bitcast %"class.std::__1::vector.79"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 24, i1 false) #13
  %115 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %80, i64 1
  %116 = ptrtoint %"struct.std::__1::pair.78"* %115 to i64
  %117 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %11, i64 1
  br label %118

118:                                              ; preds = %94, %90
  %119 = phi %"struct.std::__1::pair.78"* [ %80, %90 ], [ %115, %94 ]
  %120 = phi i64 [ %81, %90 ], [ %116, %94 ]
  %121 = phi %"struct.std::__1::pair.78"* [ %11, %90 ], [ %117, %94 ]
  %122 = icmp ult i64 %91, 32
  br i1 %122, label %173, label %123

123:                                              ; preds = %118, %123
  %124 = phi %"struct.std::__1::pair.78"* [ %169, %123 ], [ %119, %118 ]
  %125 = phi i64 [ %170, %123 ], [ %120, %118 ]
  %126 = phi %"struct.std::__1::pair.78"* [ %171, %123 ], [ %121, %118 ]
  %127 = bitcast %"struct.std::__1::pair.78"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 0, i32 1
  %131 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 0, i32 1
  %132 = bitcast %"class.std::__1::vector.79"* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 24, i1 false) #13
  %133 = bitcast %"class.std::__1::vector.79"* %131 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.std::__1::vector.79"* %130 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 0, i32 1, i32 0, i32 1
  %137 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 0, i32 1, i32 0, i32 1
  %140 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %139 to i64*
  store i64 %138, i64* %140, align 8
  %141 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %145 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %144 to i64*
  store i64 %143, i64* %145, align 8
  %146 = bitcast %"class.std::__1::vector.79"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 24, i1 false) #13
  %147 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 1
  %148 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 1
  %149 = bitcast %"struct.std::__1::pair.78"* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"struct.std::__1::pair.78"* %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 1, i32 1
  %153 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 1, i32 1
  %154 = bitcast %"class.std::__1::vector.79"* %152 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #13
  %155 = bitcast %"class.std::__1::vector.79"* %153 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.std::__1::vector.79"* %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 1, i32 1, i32 0, i32 1
  %159 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 1, i32 1, i32 0, i32 1
  %162 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %161 to i64*
  store i64 %160, i64* %162, align 8
  %163 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %164 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 1, i32 1, i32 0, i32 2, i32 0, i32 0
  %167 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = bitcast %"class.std::__1::vector.79"* %153 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %168, i8 0, i64 24, i1 false) #13
  %169 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %124, i64 2
  %170 = ptrtoint %"struct.std::__1::pair.78"* %169 to i64
  %171 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %126, i64 2
  %172 = icmp eq %"struct.std::__1::pair.78"* %88, %169
  br i1 %172, label %173, label %123

173:                                              ; preds = %123, %118
  %174 = ptrtoint %"struct.std::__1::pair.78"* %88 to i64
  %175 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %12, align 8
  %176 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %10, align 8
  %177 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %3, align 8
  br label %178

178:                                              ; preds = %74, %173
  %179 = phi %"struct.std::__1::pair.78"* [ %177, %173 ], [ %4, %74 ]
  %180 = phi %"struct.std::__1::pair.78"* [ %176, %173 ], [ %11, %74 ]
  %181 = phi %"struct.std::__1::pair.78"* [ %175, %173 ], [ %13, %74 ]
  %182 = phi i64 [ %174, %173 ], [ %81, %74 ]
  store i64 %79, i64* %67, align 8
  %183 = bitcast %"struct.std::__1::pair.78"** %10 to i64*
  store i64 %81, i64* %183, align 8
  %184 = bitcast %"struct.std::__1::pair.78"** %3 to i64*
  store i64 %182, i64* %184, align 8
  store i64 %83, i64* %66, align 8
  %185 = icmp eq %"struct.std::__1::pair.78"* %179, %180
  br i1 %185, label %199, label %186

186:                                              ; preds = %178, %197
  %187 = phi %"struct.std::__1::pair.78"* [ %188, %197 ], [ %179, %178 ]
  %188 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %187, i64 -1
  %189 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %187, i64 -1, i32 1, i32 0, i32 0
  %190 = load %"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"** %189, align 8
  %191 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %190, null
  br i1 %191, label %197, label %192

192:                                              ; preds = %186
  %193 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %190 to i64
  %194 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %187, i64 -1, i32 1, i32 0, i32 1
  %195 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %194 to i64*
  store i64 %193, i64* %195, align 8
  %196 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %190 to i8*
  tail call void @_ZdlPv(i8* %196) #14
  br label %197

197:                                              ; preds = %192, %186
  %198 = icmp eq %"struct.std::__1::pair.78"* %188, %180
  br i1 %198, label %199, label %186

199:                                              ; preds = %197, %178
  %200 = icmp eq %"struct.std::__1::pair.78"* %181, null
  br i1 %200, label %203, label %201

201:                                              ; preds = %199
  %202 = bitcast %"struct.std::__1::pair.78"* %181 to i8*
  tail call void @_ZdlPv(i8* %202) #14
  br label %203

203:                                              ; preds = %201, %199, %61, %2
  %204 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %3, align 8
  %205 = bitcast %"struct.std::__1::pair.78"* %1 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = bitcast %"struct.std::__1::pair.78"* %204 to i64*
  store i64 %206, i64* %207, align 8
  %208 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %204, i64 0, i32 1
  %209 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1
  %210 = bitcast %"class.std::__1::vector.79"* %208 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %210, i8 0, i64 24, i1 false) #13
  %211 = bitcast %"class.std::__1::vector.79"* %209 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.std::__1::vector.79"* %208 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 1
  %215 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %204, i64 0, i32 1, i32 0, i32 1
  %218 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %217 to i64*
  store i64 %216, i64* %218, align 8
  %219 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %220 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %204, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %223 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"** %222 to i64*
  store i64 %221, i64* %223, align 8
  %224 = bitcast %"class.std::__1::vector.79"* %209 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %224, i8 0, i64 24, i1 false) #13
  %225 = load %"struct.std::__1::pair.78"*, %"struct.std::__1::pair.78"** %3, align 8
  %226 = getelementptr inbounds %"struct.std::__1::pair.78", %"struct.std::__1::pair.78"* %225, i64 1
  store %"struct.std::__1::pair.78"* %226, %"struct.std::__1::pair.78"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.152"*, %"class.std::__1::__tree_node.196"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node.196"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node.196"* %1 to %"class.std::__1::__tree_node.196"**
  %6 = load %"class.std::__1::__tree_node.196"*, %"class.std::__1::__tree_node.196"** %5, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.152"* %0, %"class.std::__1::__tree_node.196"* %6) #13
  %7 = getelementptr inbounds %"class.std::__1::__tree_node.196", %"class.std::__1::__tree_node.196"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node.196"**
  %9 = load %"class.std::__1::__tree_node.196"*, %"class.std::__1::__tree_node.196"** %8, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.152"* %0, %"class.std::__1::__tree_node.196"* %9) #13
  %10 = bitcast %"class.std::__1::__tree_node.196"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #14
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEvT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"*) unnamed_addr #1 {
  br label %3

3:                                                ; preds = %1242, %2
  %4 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1, %2 ], [ %1129, %1242 ]
  %5 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %0, %2 ], [ %17, %1242 ]
  %6 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4 to i64
  %7 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1
  %8 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %7, i64 0, i32 0
  %9 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %7 to i8*
  %10 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %7 to i64*
  %11 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1, i32 1
  %12 = bitcast %"class.re2::RE2"** %11 to i64*
  %13 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4 to i64
  br label %14

14:                                               ; preds = %1251, %3
  %15 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %5, %3 ], [ %1252, %1251 ]
  br label %16

16:                                               ; preds = %821, %14
  %17 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %15, %14 ], [ %656, %821 ]
  %18 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17 to i64
  %19 = sub i64 %6, %18
  %20 = ashr exact i64 %19, 4
  switch i64 %20, label %139 [
    i64 0, label %1255
    i64 1, label %1255
    i64 2, label %21
    i64 3, label %124
    i64 4, label %128
    i64 5, label %133
  ]

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1
  %23 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %22, i64 0, i32 0
  %24 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %23, align 8
  %25 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = sub nsw i64 0, %27
  %29 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %24, i64 0, i32 0, i32 0, i64 %28
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = icmp ugt i16 %31, 4
  br i1 %32, label %33, label %46

33:                                               ; preds = %21
  %34 = getelementptr inbounds i8, i8* %29, i64 4
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i64
  %38 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %24, i64 0, i32 0, i32 0, i64 %37
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %33
  %41 = bitcast i8* %38 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %38, i64 %43
  %45 = bitcast i8* %44 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %46

46:                                               ; preds = %40, %33, %21
  %47 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %45, %40 ], [ null, %33 ], [ null, %21 ]
  %48 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = sub nsw i64 0, %50
  %52 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %47, i64 0, i32 0, i32 0, i64 %51
  %53 = bitcast i8* %52 to i16*
  %54 = load i16, i16* %53, align 2
  %55 = icmp ugt i16 %54, 26
  br i1 %55, label %56, label %66

56:                                               ; preds = %46
  %57 = getelementptr inbounds i8, i8* %52, i64 26
  %58 = bitcast i8* %57 to i16*
  %59 = load i16, i16* %58, align 2
  %60 = icmp eq i16 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %56
  %62 = zext i16 %59 to i64
  %63 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %47, i64 0, i32 0, i32 0, i64 %62
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 8
  br label %66

66:                                               ; preds = %61, %56, %46
  %67 = phi i64 [ %65, %61 ], [ 0, %56 ], [ 0, %46 ]
  %68 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 0, i32 0
  %69 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %68, align 8
  %70 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %69, i64 0, i32 0, i32 0, i64 %73
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp ugt i16 %76, 4
  %78 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %69 to i64
  br i1 %77, label %79, label %92

79:                                               ; preds = %66
  %80 = getelementptr inbounds i8, i8* %74, i64 4
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i64
  %84 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %69, i64 0, i32 0, i32 0, i64 %83
  %85 = icmp eq i16 %82, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %79
  %87 = bitcast i8* %84 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %84, i64 %89
  %91 = bitcast i8* %90 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %92

92:                                               ; preds = %86, %79, %66
  %93 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %91, %86 ], [ null, %79 ], [ null, %66 ]
  %94 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = sub nsw i64 0, %96
  %98 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %93, i64 0, i32 0, i32 0, i64 %97
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = icmp ugt i16 %100, 26
  br i1 %101, label %102, label %112

102:                                              ; preds = %92
  %103 = getelementptr inbounds i8, i8* %98, i64 26
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 0
  br i1 %106, label %112, label %107

107:                                              ; preds = %102
  %108 = zext i16 %105 to i64
  %109 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %93, i64 0, i32 0, i32 0, i64 %108
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 8
  br label %112

112:                                              ; preds = %92, %102, %107
  %113 = phi i64 [ %111, %107 ], [ 0, %102 ], [ 0, %92 ]
  %114 = icmp ugt i64 %67, %113
  br i1 %114, label %115, label %1255

115:                                              ; preds = %112
  %116 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 0, i32 1
  %117 = bitcast %"class.re2::RE2"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17 to i8*
  %120 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false) #13
  %121 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %22 to i64*
  store i64 %78, i64* %121, align 8
  %122 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1, i32 1
  %123 = bitcast %"class.re2::RE2"** %122 to i64*
  store i64 %118, i64* %123, align 8
  br label %1255

124:                                              ; preds = %16
  %125 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  %126 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1
  %127 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %125, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %126)
  br label %1255

128:                                              ; preds = %16
  %129 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  %130 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 2
  %131 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1
  %132 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %129, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %130, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %131)
  br label %1255

133:                                              ; preds = %16
  %134 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  %135 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 2
  %136 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 3
  %137 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 -1
  %138 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %134, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %135, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %136, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %137)
  br label %1255

139:                                              ; preds = %16
  %140 = icmp slt i64 %19, 112
  br i1 %140, label %141, label %349

141:                                              ; preds = %139
  %142 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 2
  %143 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  %144 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %143, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %142) #13
  %145 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 3
  %146 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %145, %4
  br i1 %146, label %1255, label %147

147:                                              ; preds = %141, %346
  %148 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %347, %346 ], [ %145, %141 ]
  %149 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %148, %346 ], [ %142, %141 ]
  %150 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %148, i64 0, i32 0
  %151 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %150, align 8
  %152 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %151 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = sext i32 %153 to i64
  %155 = sub nsw i64 0, %154
  %156 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %151, i64 0, i32 0, i32 0, i64 %155
  %157 = bitcast i8* %156 to i16*
  %158 = load i16, i16* %157, align 2
  %159 = icmp ugt i16 %158, 4
  br i1 %159, label %160, label %173

160:                                              ; preds = %147
  %161 = getelementptr inbounds i8, i8* %156, i64 4
  %162 = bitcast i8* %161 to i16*
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i64
  %165 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %151, i64 0, i32 0, i32 0, i64 %164
  %166 = icmp eq i16 %163, 0
  br i1 %166, label %173, label %167

167:                                              ; preds = %160
  %168 = bitcast i8* %165 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %165, i64 %170
  %172 = bitcast i8* %171 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %173

173:                                              ; preds = %167, %160, %147
  %174 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %172, %167 ], [ null, %160 ], [ null, %147 ]
  %175 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %174, i64 0, i32 0, i32 0, i64 %178
  %180 = bitcast i8* %179 to i16*
  %181 = load i16, i16* %180, align 2
  %182 = icmp ugt i16 %181, 26
  br i1 %182, label %183, label %193

183:                                              ; preds = %173
  %184 = getelementptr inbounds i8, i8* %179, i64 26
  %185 = bitcast i8* %184 to i16*
  %186 = load i16, i16* %185, align 2
  %187 = icmp eq i16 %186, 0
  br i1 %187, label %193, label %188

188:                                              ; preds = %183
  %189 = zext i16 %186 to i64
  %190 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %174, i64 0, i32 0, i32 0, i64 %189
  %191 = bitcast i8* %190 to i64*
  %192 = load i64, i64* %191, align 8
  br label %193

193:                                              ; preds = %188, %183, %173
  %194 = phi i64 [ %192, %188 ], [ 0, %183 ], [ 0, %173 ]
  %195 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %149, i64 0, i32 0
  %196 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %195, align 8
  %197 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %196 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = sext i32 %198 to i64
  %200 = sub nsw i64 0, %199
  %201 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %196, i64 0, i32 0, i32 0, i64 %200
  %202 = bitcast i8* %201 to i16*
  %203 = load i16, i16* %202, align 2
  %204 = icmp ugt i16 %203, 4
  br i1 %204, label %205, label %218

205:                                              ; preds = %193
  %206 = getelementptr inbounds i8, i8* %201, i64 4
  %207 = bitcast i8* %206 to i16*
  %208 = load i16, i16* %207, align 2
  %209 = zext i16 %208 to i64
  %210 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %196, i64 0, i32 0, i32 0, i64 %209
  %211 = icmp eq i16 %208, 0
  br i1 %211, label %218, label %212

212:                                              ; preds = %205
  %213 = bitcast i8* %210 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds i8, i8* %210, i64 %215
  %217 = bitcast i8* %216 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %218

218:                                              ; preds = %212, %205, %193
  %219 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %217, %212 ], [ null, %205 ], [ null, %193 ]
  %220 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %219 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = sub nsw i64 0, %222
  %224 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %219, i64 0, i32 0, i32 0, i64 %223
  %225 = bitcast i8* %224 to i16*
  %226 = load i16, i16* %225, align 2
  %227 = icmp ugt i16 %226, 26
  br i1 %227, label %228, label %238

228:                                              ; preds = %218
  %229 = getelementptr inbounds i8, i8* %224, i64 26
  %230 = bitcast i8* %229 to i16*
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 0
  br i1 %232, label %238, label %233

233:                                              ; preds = %228
  %234 = zext i16 %231 to i64
  %235 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %219, i64 0, i32 0, i32 0, i64 %234
  %236 = bitcast i8* %235 to i64*
  %237 = load i64, i64* %236, align 8
  br label %238

238:                                              ; preds = %233, %228, %218
  %239 = phi i64 [ %237, %233 ], [ 0, %228 ], [ 0, %218 ]
  %240 = icmp ugt i64 %194, %239
  br i1 %240, label %241, label %346

241:                                              ; preds = %238
  %242 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %148, i64 0, i32 1
  %243 = bitcast %"class.re2::RE2"** %242 to i64*
  %244 = load i64, i64* %243, align 8
  br label %245

245:                                              ; preds = %338, %241
  %246 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %148, %241 ], [ %247, %338 ]
  %247 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %149, %241 ], [ %252, %338 ]
  %248 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %246 to i8*
  %249 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %247 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %248, i8* align 8 %249, i64 16, i1 false) #13
  %250 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %247, %17
  br i1 %250, label %341, label %251

251:                                              ; preds = %245
  %252 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %247, i64 -1
  %253 = load i32, i32* %152, align 4
  %254 = sext i32 %253 to i64
  %255 = sub nsw i64 0, %254
  %256 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %151, i64 0, i32 0, i32 0, i64 %255
  %257 = bitcast i8* %256 to i16*
  %258 = load i16, i16* %257, align 2
  %259 = icmp ugt i16 %258, 4
  br i1 %259, label %260, label %273

260:                                              ; preds = %251
  %261 = getelementptr inbounds i8, i8* %256, i64 4
  %262 = bitcast i8* %261 to i16*
  %263 = load i16, i16* %262, align 2
  %264 = zext i16 %263 to i64
  %265 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %151, i64 0, i32 0, i32 0, i64 %264
  %266 = icmp eq i16 %263, 0
  br i1 %266, label %273, label %267

267:                                              ; preds = %260
  %268 = bitcast i8* %265 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %265, i64 %270
  %272 = bitcast i8* %271 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %273

273:                                              ; preds = %267, %260, %251
  %274 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %272, %267 ], [ null, %260 ], [ null, %251 ]
  %275 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %274 to i32*
  %276 = load i32, i32* %275, align 4
  %277 = sext i32 %276 to i64
  %278 = sub nsw i64 0, %277
  %279 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %274, i64 0, i32 0, i32 0, i64 %278
  %280 = bitcast i8* %279 to i16*
  %281 = load i16, i16* %280, align 2
  %282 = icmp ugt i16 %281, 26
  br i1 %282, label %283, label %293

283:                                              ; preds = %273
  %284 = getelementptr inbounds i8, i8* %279, i64 26
  %285 = bitcast i8* %284 to i16*
  %286 = load i16, i16* %285, align 2
  %287 = icmp eq i16 %286, 0
  br i1 %287, label %293, label %288

288:                                              ; preds = %283
  %289 = zext i16 %286 to i64
  %290 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %274, i64 0, i32 0, i32 0, i64 %289
  %291 = bitcast i8* %290 to i64*
  %292 = load i64, i64* %291, align 8
  br label %293

293:                                              ; preds = %288, %283, %273
  %294 = phi i64 [ %292, %288 ], [ 0, %283 ], [ 0, %273 ]
  %295 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %252, i64 0, i32 0
  %296 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %295, align 8
  %297 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %296 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = sext i32 %298 to i64
  %300 = sub nsw i64 0, %299
  %301 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %296, i64 0, i32 0, i32 0, i64 %300
  %302 = bitcast i8* %301 to i16*
  %303 = load i16, i16* %302, align 2
  %304 = icmp ugt i16 %303, 4
  br i1 %304, label %305, label %318

305:                                              ; preds = %293
  %306 = getelementptr inbounds i8, i8* %301, i64 4
  %307 = bitcast i8* %306 to i16*
  %308 = load i16, i16* %307, align 2
  %309 = zext i16 %308 to i64
  %310 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %296, i64 0, i32 0, i32 0, i64 %309
  %311 = icmp eq i16 %308, 0
  br i1 %311, label %318, label %312

312:                                              ; preds = %305
  %313 = bitcast i8* %310 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %310, i64 %315
  %317 = bitcast i8* %316 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %318

318:                                              ; preds = %312, %305, %293
  %319 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %317, %312 ], [ null, %305 ], [ null, %293 ]
  %320 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %319 to i32*
  %321 = load i32, i32* %320, align 4
  %322 = sext i32 %321 to i64
  %323 = sub nsw i64 0, %322
  %324 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %319, i64 0, i32 0, i32 0, i64 %323
  %325 = bitcast i8* %324 to i16*
  %326 = load i16, i16* %325, align 2
  %327 = icmp ugt i16 %326, 26
  br i1 %327, label %328, label %338

328:                                              ; preds = %318
  %329 = getelementptr inbounds i8, i8* %324, i64 26
  %330 = bitcast i8* %329 to i16*
  %331 = load i16, i16* %330, align 2
  %332 = icmp eq i16 %331, 0
  br i1 %332, label %338, label %333

333:                                              ; preds = %328
  %334 = zext i16 %331 to i64
  %335 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %319, i64 0, i32 0, i32 0, i64 %334
  %336 = bitcast i8* %335 to i64*
  %337 = load i64, i64* %336, align 8
  br label %338

338:                                              ; preds = %333, %328, %318
  %339 = phi i64 [ %337, %333 ], [ 0, %328 ], [ 0, %318 ]
  %340 = icmp ugt i64 %294, %339
  br i1 %340, label %245, label %341

341:                                              ; preds = %338, %245
  %342 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %17, %245 ], [ %247, %338 ]
  %343 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %342, i64 0, i32 0
  store %"struct.extensions::declarative_net_request::flat::RegexRule"* %151, %"struct.extensions::declarative_net_request::flat::RegexRule"** %343, align 8
  %344 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %342, i64 0, i32 1
  %345 = bitcast %"class.re2::RE2"** %344 to i64*
  store i64 %244, i64* %345, align 8
  br label %346

346:                                              ; preds = %341, %238
  %347 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %148, i64 1
  %348 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %347, %4
  br i1 %348, label %1255, label %147

349:                                              ; preds = %139
  %350 = icmp sgt i64 %19, 15984
  %351 = sdiv i64 %20, 2
  %352 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 %351
  br i1 %350, label %353, label %358

353:                                              ; preds = %349
  %354 = sdiv i64 %20, 4
  %355 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 %354
  %356 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %352, i64 %354
  %357 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %355, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %352, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %356, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %7)
  br label %360

358:                                              ; preds = %349
  %359 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %352, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %7)
  br label %360

360:                                              ; preds = %358, %353
  %361 = phi i32 [ %357, %353 ], [ %359, %358 ]
  %362 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 0, i32 0
  %363 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %362, align 8
  %364 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %363 to i32*
  %365 = load i32, i32* %364, align 4
  %366 = sext i32 %365 to i64
  %367 = sub nsw i64 0, %366
  %368 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %363, i64 0, i32 0, i32 0, i64 %367
  %369 = bitcast i8* %368 to i16*
  %370 = load i16, i16* %369, align 2
  %371 = icmp ugt i16 %370, 4
  br i1 %371, label %372, label %385

372:                                              ; preds = %360
  %373 = getelementptr inbounds i8, i8* %368, i64 4
  %374 = bitcast i8* %373 to i16*
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i64
  %377 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %363, i64 0, i32 0, i32 0, i64 %376
  %378 = icmp eq i16 %375, 0
  br i1 %378, label %385, label %379

379:                                              ; preds = %372
  %380 = bitcast i8* %377 to i32*
  %381 = load i32, i32* %380, align 4
  %382 = zext i32 %381 to i64
  %383 = getelementptr inbounds i8, i8* %377, i64 %382
  %384 = bitcast i8* %383 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %385

385:                                              ; preds = %379, %372, %360
  %386 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %384, %379 ], [ null, %372 ], [ null, %360 ]
  %387 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %386 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = sext i32 %388 to i64
  %390 = sub nsw i64 0, %389
  %391 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %386, i64 0, i32 0, i32 0, i64 %390
  %392 = bitcast i8* %391 to i16*
  %393 = load i16, i16* %392, align 2
  %394 = icmp ugt i16 %393, 26
  br i1 %394, label %395, label %405

395:                                              ; preds = %385
  %396 = getelementptr inbounds i8, i8* %391, i64 26
  %397 = bitcast i8* %396 to i16*
  %398 = load i16, i16* %397, align 2
  %399 = icmp eq i16 %398, 0
  br i1 %399, label %405, label %400

400:                                              ; preds = %395
  %401 = zext i16 %398 to i64
  %402 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %386, i64 0, i32 0, i32 0, i64 %401
  %403 = bitcast i8* %402 to i64*
  %404 = load i64, i64* %403, align 8
  br label %405

405:                                              ; preds = %400, %395, %385
  %406 = phi i64 [ %404, %400 ], [ 0, %395 ], [ 0, %385 ]
  %407 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %352, i64 0, i32 0
  %408 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %407, align 8
  %409 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %408 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = sext i32 %410 to i64
  %412 = sub nsw i64 0, %411
  %413 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %408, i64 0, i32 0, i32 0, i64 %412
  %414 = bitcast i8* %413 to i16*
  %415 = load i16, i16* %414, align 2
  %416 = icmp ugt i16 %415, 4
  br i1 %416, label %417, label %430

417:                                              ; preds = %405
  %418 = getelementptr inbounds i8, i8* %413, i64 4
  %419 = bitcast i8* %418 to i16*
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i64
  %422 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %408, i64 0, i32 0, i32 0, i64 %421
  %423 = icmp eq i16 %420, 0
  br i1 %423, label %430, label %424

424:                                              ; preds = %417
  %425 = bitcast i8* %422 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds i8, i8* %422, i64 %427
  %429 = bitcast i8* %428 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %430

430:                                              ; preds = %424, %417, %405
  %431 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %429, %424 ], [ null, %417 ], [ null, %405 ]
  %432 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %431 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = sext i32 %433 to i64
  %435 = sub nsw i64 0, %434
  %436 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %431, i64 0, i32 0, i32 0, i64 %435
  %437 = bitcast i8* %436 to i16*
  %438 = load i16, i16* %437, align 2
  %439 = icmp ugt i16 %438, 26
  br i1 %439, label %440, label %450

440:                                              ; preds = %430
  %441 = getelementptr inbounds i8, i8* %436, i64 26
  %442 = bitcast i8* %441 to i16*
  %443 = load i16, i16* %442, align 2
  %444 = icmp eq i16 %443, 0
  br i1 %444, label %450, label %445

445:                                              ; preds = %440
  %446 = zext i16 %443 to i64
  %447 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %431, i64 0, i32 0, i32 0, i64 %446
  %448 = bitcast i8* %447 to i64*
  %449 = load i64, i64* %448, align 8
  br label %450

450:                                              ; preds = %430, %440, %445
  %451 = phi i64 [ %449, %445 ], [ 0, %440 ], [ 0, %430 ]
  %452 = icmp ugt i64 %406, %451
  br i1 %452, label %923, label %453

453:                                              ; preds = %450
  %454 = getelementptr inbounds i8, i8* %413, i64 4
  %455 = bitcast i8* %454 to i16*
  br label %456

456:                                              ; preds = %453, %909
  %457 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %458, %909 ], [ %7, %453 ]
  %458 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %457, i64 -1
  %459 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %458
  br i1 %459, label %460, label %832

460:                                              ; preds = %456
  %461 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  br i1 %371, label %462, label %475

462:                                              ; preds = %460
  %463 = getelementptr inbounds i8, i8* %368, i64 4
  %464 = bitcast i8* %463 to i16*
  %465 = load i16, i16* %464, align 2
  %466 = zext i16 %465 to i64
  %467 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %363, i64 0, i32 0, i32 0, i64 %466
  %468 = icmp eq i16 %465, 0
  br i1 %468, label %475, label %469

469:                                              ; preds = %462
  %470 = bitcast i8* %467 to i32*
  %471 = load i32, i32* %470, align 4
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds i8, i8* %467, i64 %472
  %474 = bitcast i8* %473 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %475

475:                                              ; preds = %469, %462, %460
  %476 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %474, %469 ], [ null, %462 ], [ null, %460 ]
  %477 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %476 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  %480 = sub nsw i64 0, %479
  %481 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %476, i64 0, i32 0, i32 0, i64 %480
  %482 = bitcast i8* %481 to i16*
  %483 = load i16, i16* %482, align 2
  %484 = icmp ugt i16 %483, 26
  br i1 %484, label %485, label %495

485:                                              ; preds = %475
  %486 = getelementptr inbounds i8, i8* %481, i64 26
  %487 = bitcast i8* %486 to i16*
  %488 = load i16, i16* %487, align 2
  %489 = icmp eq i16 %488, 0
  br i1 %489, label %495, label %490

490:                                              ; preds = %485
  %491 = zext i16 %488 to i64
  %492 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %476, i64 0, i32 0, i32 0, i64 %491
  %493 = bitcast i8* %492 to i64*
  %494 = load i64, i64* %493, align 8
  br label %495

495:                                              ; preds = %490, %485, %475
  %496 = phi i64 [ %494, %490 ], [ 0, %485 ], [ 0, %475 ]
  %497 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %8, align 8
  %498 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %497 to i32*
  %499 = load i32, i32* %498, align 4
  %500 = sext i32 %499 to i64
  %501 = sub nsw i64 0, %500
  %502 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %497, i64 0, i32 0, i32 0, i64 %501
  %503 = bitcast i8* %502 to i16*
  %504 = load i16, i16* %503, align 2
  %505 = icmp ugt i16 %504, 4
  br i1 %505, label %506, label %519

506:                                              ; preds = %495
  %507 = getelementptr inbounds i8, i8* %502, i64 4
  %508 = bitcast i8* %507 to i16*
  %509 = load i16, i16* %508, align 2
  %510 = zext i16 %509 to i64
  %511 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %497, i64 0, i32 0, i32 0, i64 %510
  %512 = icmp eq i16 %509, 0
  br i1 %512, label %519, label %513

513:                                              ; preds = %506
  %514 = bitcast i8* %511 to i32*
  %515 = load i32, i32* %514, align 4
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %511, i64 %516
  %518 = bitcast i8* %517 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %519

519:                                              ; preds = %513, %506, %495
  %520 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %518, %513 ], [ null, %506 ], [ null, %495 ]
  %521 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %520 to i32*
  %522 = load i32, i32* %521, align 4
  %523 = sext i32 %522 to i64
  %524 = sub nsw i64 0, %523
  %525 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %520, i64 0, i32 0, i32 0, i64 %524
  %526 = bitcast i8* %525 to i16*
  %527 = load i16, i16* %526, align 2
  %528 = icmp ugt i16 %527, 26
  br i1 %528, label %529, label %539

529:                                              ; preds = %519
  %530 = getelementptr inbounds i8, i8* %525, i64 26
  %531 = bitcast i8* %530 to i16*
  %532 = load i16, i16* %531, align 2
  %533 = icmp eq i16 %532, 0
  br i1 %533, label %539, label %534

534:                                              ; preds = %529
  %535 = zext i16 %532 to i64
  %536 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %520, i64 0, i32 0, i32 0, i64 %535
  %537 = bitcast i8* %536 to i64*
  %538 = load i64, i64* %537, align 8
  br label %539

539:                                              ; preds = %519, %529, %534
  %540 = phi i64 [ %538, %534 ], [ 0, %529 ], [ 0, %519 ]
  %541 = icmp ugt i64 %496, %540
  br i1 %541, label %638, label %542

542:                                              ; preds = %539
  %543 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %461, %7
  br i1 %543, label %1255, label %544

544:                                              ; preds = %542
  %545 = getelementptr inbounds i8, i8* %368, i64 4
  %546 = bitcast i8* %545 to i16*
  br label %547

547:                                              ; preds = %544, %635
  %548 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %461, %544 ], [ %636, %635 ]
  br i1 %371, label %549, label %560

549:                                              ; preds = %547
  %550 = load i16, i16* %546, align 2
  %551 = zext i16 %550 to i64
  %552 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %363, i64 0, i32 0, i32 0, i64 %551
  %553 = icmp eq i16 %550, 0
  br i1 %553, label %560, label %554

554:                                              ; preds = %549
  %555 = bitcast i8* %552 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = zext i32 %556 to i64
  %558 = getelementptr inbounds i8, i8* %552, i64 %557
  %559 = bitcast i8* %558 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %560

560:                                              ; preds = %554, %549, %547
  %561 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %559, %554 ], [ null, %549 ], [ null, %547 ]
  %562 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %561 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = sext i32 %563 to i64
  %565 = sub nsw i64 0, %564
  %566 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %561, i64 0, i32 0, i32 0, i64 %565
  %567 = bitcast i8* %566 to i16*
  %568 = load i16, i16* %567, align 2
  %569 = icmp ugt i16 %568, 26
  br i1 %569, label %570, label %580

570:                                              ; preds = %560
  %571 = getelementptr inbounds i8, i8* %566, i64 26
  %572 = bitcast i8* %571 to i16*
  %573 = load i16, i16* %572, align 2
  %574 = icmp eq i16 %573, 0
  br i1 %574, label %580, label %575

575:                                              ; preds = %570
  %576 = zext i16 %573 to i64
  %577 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %561, i64 0, i32 0, i32 0, i64 %576
  %578 = bitcast i8* %577 to i64*
  %579 = load i64, i64* %578, align 8
  br label %580

580:                                              ; preds = %575, %570, %560
  %581 = phi i64 [ %579, %575 ], [ 0, %570 ], [ 0, %560 ]
  %582 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %548, i64 0, i32 0
  %583 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %582, align 8
  %584 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %583 to i32*
  %585 = load i32, i32* %584, align 4
  %586 = sext i32 %585 to i64
  %587 = sub nsw i64 0, %586
  %588 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %583, i64 0, i32 0, i32 0, i64 %587
  %589 = bitcast i8* %588 to i16*
  %590 = load i16, i16* %589, align 2
  %591 = icmp ugt i16 %590, 4
  br i1 %591, label %592, label %605

592:                                              ; preds = %580
  %593 = getelementptr inbounds i8, i8* %588, i64 4
  %594 = bitcast i8* %593 to i16*
  %595 = load i16, i16* %594, align 2
  %596 = zext i16 %595 to i64
  %597 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %583, i64 0, i32 0, i32 0, i64 %596
  %598 = icmp eq i16 %595, 0
  br i1 %598, label %605, label %599

599:                                              ; preds = %592
  %600 = bitcast i8* %597 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds i8, i8* %597, i64 %602
  %604 = bitcast i8* %603 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %605

605:                                              ; preds = %599, %592, %580
  %606 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %604, %599 ], [ null, %592 ], [ null, %580 ]
  %607 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %606 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = sext i32 %608 to i64
  %610 = sub nsw i64 0, %609
  %611 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %606, i64 0, i32 0, i32 0, i64 %610
  %612 = bitcast i8* %611 to i16*
  %613 = load i16, i16* %612, align 2
  %614 = icmp ugt i16 %613, 26
  br i1 %614, label %615, label %625

615:                                              ; preds = %605
  %616 = getelementptr inbounds i8, i8* %611, i64 26
  %617 = bitcast i8* %616 to i16*
  %618 = load i16, i16* %617, align 2
  %619 = icmp eq i16 %618, 0
  br i1 %619, label %625, label %620

620:                                              ; preds = %615
  %621 = zext i16 %618 to i64
  %622 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %606, i64 0, i32 0, i32 0, i64 %621
  %623 = bitcast i8* %622 to i64*
  %624 = load i64, i64* %623, align 8
  br label %625

625:                                              ; preds = %605, %615, %620
  %626 = phi i64 [ %624, %620 ], [ 0, %615 ], [ 0, %605 ]
  %627 = icmp ugt i64 %581, %626
  br i1 %627, label %628, label %635

628:                                              ; preds = %625
  %629 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %583 to i64
  %630 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %548, i64 0, i32 1
  %631 = bitcast %"class.re2::RE2"** %630 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %548 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %633, i8* align 8 %9, i64 16, i1 false) #13
  store i64 %629, i64* %10, align 8
  store i64 %632, i64* %12, align 8
  %634 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %548, i64 1
  br label %638

635:                                              ; preds = %625
  %636 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %548, i64 1
  %637 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %636, %7
  br i1 %637, label %1255, label %547

638:                                              ; preds = %628, %539
  %639 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %461, %539 ], [ %634, %628 ]
  %640 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %639, %7
  br i1 %640, label %1255, label %641

641:                                              ; preds = %638, %823
  %642 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %736, %823 ], [ %639, %638 ]
  %643 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %741, %823 ], [ %7, %638 ]
  %644 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %362, align 8
  %645 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %644 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = sext i32 %646 to i64
  %648 = sub nsw i64 0, %647
  %649 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %644, i64 0, i32 0, i32 0, i64 %648
  %650 = bitcast i8* %649 to i16*
  %651 = load i16, i16* %650, align 2
  %652 = icmp ugt i16 %651, 4
  %653 = getelementptr inbounds i8, i8* %649, i64 4
  %654 = bitcast i8* %653 to i16*
  br label %655

655:                                              ; preds = %733, %641
  %656 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %642, %641 ], [ %736, %733 ]
  br i1 %652, label %657, label %668

657:                                              ; preds = %655
  %658 = load i16, i16* %654, align 2
  %659 = zext i16 %658 to i64
  %660 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %644, i64 0, i32 0, i32 0, i64 %659
  %661 = icmp eq i16 %658, 0
  br i1 %661, label %668, label %662

662:                                              ; preds = %657
  %663 = bitcast i8* %660 to i32*
  %664 = load i32, i32* %663, align 4
  %665 = zext i32 %664 to i64
  %666 = getelementptr inbounds i8, i8* %660, i64 %665
  %667 = bitcast i8* %666 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %668

668:                                              ; preds = %662, %657, %655
  %669 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %667, %662 ], [ null, %657 ], [ null, %655 ]
  %670 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %669 to i32*
  %671 = load i32, i32* %670, align 4
  %672 = sext i32 %671 to i64
  %673 = sub nsw i64 0, %672
  %674 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %669, i64 0, i32 0, i32 0, i64 %673
  %675 = bitcast i8* %674 to i16*
  %676 = load i16, i16* %675, align 2
  %677 = icmp ugt i16 %676, 26
  br i1 %677, label %678, label %688

678:                                              ; preds = %668
  %679 = getelementptr inbounds i8, i8* %674, i64 26
  %680 = bitcast i8* %679 to i16*
  %681 = load i16, i16* %680, align 2
  %682 = icmp eq i16 %681, 0
  br i1 %682, label %688, label %683

683:                                              ; preds = %678
  %684 = zext i16 %681 to i64
  %685 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %669, i64 0, i32 0, i32 0, i64 %684
  %686 = bitcast i8* %685 to i64*
  %687 = load i64, i64* %686, align 8
  br label %688

688:                                              ; preds = %683, %678, %668
  %689 = phi i64 [ %687, %683 ], [ 0, %678 ], [ 0, %668 ]
  %690 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %656, i64 0, i32 0
  %691 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %690, align 8
  %692 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %691 to i32*
  %693 = load i32, i32* %692, align 4
  %694 = sext i32 %693 to i64
  %695 = sub nsw i64 0, %694
  %696 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %691, i64 0, i32 0, i32 0, i64 %695
  %697 = bitcast i8* %696 to i16*
  %698 = load i16, i16* %697, align 2
  %699 = icmp ugt i16 %698, 4
  br i1 %699, label %700, label %713

700:                                              ; preds = %688
  %701 = getelementptr inbounds i8, i8* %696, i64 4
  %702 = bitcast i8* %701 to i16*
  %703 = load i16, i16* %702, align 2
  %704 = zext i16 %703 to i64
  %705 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %691, i64 0, i32 0, i32 0, i64 %704
  %706 = icmp eq i16 %703, 0
  br i1 %706, label %713, label %707

707:                                              ; preds = %700
  %708 = bitcast i8* %705 to i32*
  %709 = load i32, i32* %708, align 4
  %710 = zext i32 %709 to i64
  %711 = getelementptr inbounds i8, i8* %705, i64 %710
  %712 = bitcast i8* %711 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %713

713:                                              ; preds = %707, %700, %688
  %714 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %712, %707 ], [ null, %700 ], [ null, %688 ]
  %715 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %714 to i32*
  %716 = load i32, i32* %715, align 4
  %717 = sext i32 %716 to i64
  %718 = sub nsw i64 0, %717
  %719 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %714, i64 0, i32 0, i32 0, i64 %718
  %720 = bitcast i8* %719 to i16*
  %721 = load i16, i16* %720, align 2
  %722 = icmp ugt i16 %721, 26
  br i1 %722, label %723, label %733

723:                                              ; preds = %713
  %724 = getelementptr inbounds i8, i8* %719, i64 26
  %725 = bitcast i8* %724 to i16*
  %726 = load i16, i16* %725, align 2
  %727 = icmp eq i16 %726, 0
  br i1 %727, label %733, label %728

728:                                              ; preds = %723
  %729 = zext i16 %726 to i64
  %730 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %714, i64 0, i32 0, i32 0, i64 %729
  %731 = bitcast i8* %730 to i64*
  %732 = load i64, i64* %731, align 8
  br label %733

733:                                              ; preds = %713, %723, %728
  %734 = phi i64 [ %732, %728 ], [ 0, %723 ], [ 0, %713 ]
  %735 = icmp ugt i64 %689, %734
  %736 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %656, i64 1
  br i1 %735, label %737, label %655

737:                                              ; preds = %733
  %738 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %691 to i64
  br label %739

739:                                              ; preds = %737, %818
  %740 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %741, %818 ], [ %643, %737 ]
  %741 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %740, i64 -1
  br i1 %652, label %742, label %753

742:                                              ; preds = %739
  %743 = load i16, i16* %654, align 2
  %744 = zext i16 %743 to i64
  %745 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %644, i64 0, i32 0, i32 0, i64 %744
  %746 = icmp eq i16 %743, 0
  br i1 %746, label %753, label %747

747:                                              ; preds = %742
  %748 = bitcast i8* %745 to i32*
  %749 = load i32, i32* %748, align 4
  %750 = zext i32 %749 to i64
  %751 = getelementptr inbounds i8, i8* %745, i64 %750
  %752 = bitcast i8* %751 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %753

753:                                              ; preds = %747, %742, %739
  %754 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %752, %747 ], [ null, %742 ], [ null, %739 ]
  %755 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %754 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = sext i32 %756 to i64
  %758 = sub nsw i64 0, %757
  %759 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %754, i64 0, i32 0, i32 0, i64 %758
  %760 = bitcast i8* %759 to i16*
  %761 = load i16, i16* %760, align 2
  %762 = icmp ugt i16 %761, 26
  br i1 %762, label %763, label %773

763:                                              ; preds = %753
  %764 = getelementptr inbounds i8, i8* %759, i64 26
  %765 = bitcast i8* %764 to i16*
  %766 = load i16, i16* %765, align 2
  %767 = icmp eq i16 %766, 0
  br i1 %767, label %773, label %768

768:                                              ; preds = %763
  %769 = zext i16 %766 to i64
  %770 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %754, i64 0, i32 0, i32 0, i64 %769
  %771 = bitcast i8* %770 to i64*
  %772 = load i64, i64* %771, align 8
  br label %773

773:                                              ; preds = %768, %763, %753
  %774 = phi i64 [ %772, %768 ], [ 0, %763 ], [ 0, %753 ]
  %775 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %741, i64 0, i32 0
  %776 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %775, align 8
  %777 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %776 to i32*
  %778 = load i32, i32* %777, align 4
  %779 = sext i32 %778 to i64
  %780 = sub nsw i64 0, %779
  %781 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %776, i64 0, i32 0, i32 0, i64 %780
  %782 = bitcast i8* %781 to i16*
  %783 = load i16, i16* %782, align 2
  %784 = icmp ugt i16 %783, 4
  br i1 %784, label %785, label %798

785:                                              ; preds = %773
  %786 = getelementptr inbounds i8, i8* %781, i64 4
  %787 = bitcast i8* %786 to i16*
  %788 = load i16, i16* %787, align 2
  %789 = zext i16 %788 to i64
  %790 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %776, i64 0, i32 0, i32 0, i64 %789
  %791 = icmp eq i16 %788, 0
  br i1 %791, label %798, label %792

792:                                              ; preds = %785
  %793 = bitcast i8* %790 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = zext i32 %794 to i64
  %796 = getelementptr inbounds i8, i8* %790, i64 %795
  %797 = bitcast i8* %796 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %798

798:                                              ; preds = %792, %785, %773
  %799 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %797, %792 ], [ null, %785 ], [ null, %773 ]
  %800 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %799 to i32*
  %801 = load i32, i32* %800, align 4
  %802 = sext i32 %801 to i64
  %803 = sub nsw i64 0, %802
  %804 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %799, i64 0, i32 0, i32 0, i64 %803
  %805 = bitcast i8* %804 to i16*
  %806 = load i16, i16* %805, align 2
  %807 = icmp ugt i16 %806, 26
  br i1 %807, label %808, label %818

808:                                              ; preds = %798
  %809 = getelementptr inbounds i8, i8* %804, i64 26
  %810 = bitcast i8* %809 to i16*
  %811 = load i16, i16* %810, align 2
  %812 = icmp eq i16 %811, 0
  br i1 %812, label %818, label %813

813:                                              ; preds = %808
  %814 = zext i16 %811 to i64
  %815 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %799, i64 0, i32 0, i32 0, i64 %814
  %816 = bitcast i8* %815 to i64*
  %817 = load i64, i64* %816, align 8
  br label %818

818:                                              ; preds = %798, %808, %813
  %819 = phi i64 [ %817, %813 ], [ 0, %808 ], [ 0, %798 ]
  %820 = icmp ugt i64 %774, %819
  br i1 %820, label %739, label %821

821:                                              ; preds = %818
  %822 = icmp ult %"struct.extensions::declarative_net_request::RegexRuleInfo"* %656, %741
  br i1 %822, label %823, label %16

823:                                              ; preds = %821
  %824 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %656, i64 0, i32 1
  %825 = bitcast %"class.re2::RE2"** %824 to i64*
  %826 = load i64, i64* %825, align 8
  %827 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %656 to i8*
  %828 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %741 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %827, i8* align 8 %828, i64 16, i1 false) #13
  %829 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %741 to i64*
  store i64 %738, i64* %829, align 8
  %830 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %740, i64 -1, i32 1
  %831 = bitcast %"class.re2::RE2"** %830 to i64*
  store i64 %826, i64* %831, align 8
  br label %641

832:                                              ; preds = %456
  %833 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %458, i64 0, i32 0
  %834 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %833, align 8
  %835 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %834 to i32*
  %836 = load i32, i32* %835, align 4
  %837 = sext i32 %836 to i64
  %838 = sub nsw i64 0, %837
  %839 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %834, i64 0, i32 0, i32 0, i64 %838
  %840 = bitcast i8* %839 to i16*
  %841 = load i16, i16* %840, align 2
  %842 = icmp ugt i16 %841, 4
  br i1 %842, label %843, label %856

843:                                              ; preds = %832
  %844 = getelementptr inbounds i8, i8* %839, i64 4
  %845 = bitcast i8* %844 to i16*
  %846 = load i16, i16* %845, align 2
  %847 = zext i16 %846 to i64
  %848 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %834, i64 0, i32 0, i32 0, i64 %847
  %849 = icmp eq i16 %846, 0
  br i1 %849, label %856, label %850

850:                                              ; preds = %843
  %851 = bitcast i8* %848 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = zext i32 %852 to i64
  %854 = getelementptr inbounds i8, i8* %848, i64 %853
  %855 = bitcast i8* %854 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %856

856:                                              ; preds = %850, %843, %832
  %857 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %855, %850 ], [ null, %843 ], [ null, %832 ]
  %858 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %857 to i32*
  %859 = load i32, i32* %858, align 4
  %860 = sext i32 %859 to i64
  %861 = sub nsw i64 0, %860
  %862 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %857, i64 0, i32 0, i32 0, i64 %861
  %863 = bitcast i8* %862 to i16*
  %864 = load i16, i16* %863, align 2
  %865 = icmp ugt i16 %864, 26
  br i1 %865, label %866, label %876

866:                                              ; preds = %856
  %867 = getelementptr inbounds i8, i8* %862, i64 26
  %868 = bitcast i8* %867 to i16*
  %869 = load i16, i16* %868, align 2
  %870 = icmp eq i16 %869, 0
  br i1 %870, label %876, label %871

871:                                              ; preds = %866
  %872 = zext i16 %869 to i64
  %873 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %857, i64 0, i32 0, i32 0, i64 %872
  %874 = bitcast i8* %873 to i64*
  %875 = load i64, i64* %874, align 8
  br label %876

876:                                              ; preds = %871, %866, %856
  %877 = phi i64 [ %875, %871 ], [ 0, %866 ], [ 0, %856 ]
  br i1 %416, label %878, label %889

878:                                              ; preds = %876
  %879 = load i16, i16* %455, align 2
  %880 = zext i16 %879 to i64
  %881 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %408, i64 0, i32 0, i32 0, i64 %880
  %882 = icmp eq i16 %879, 0
  br i1 %882, label %889, label %883

883:                                              ; preds = %878
  %884 = bitcast i8* %881 to i32*
  %885 = load i32, i32* %884, align 4
  %886 = zext i32 %885 to i64
  %887 = getelementptr inbounds i8, i8* %881, i64 %886
  %888 = bitcast i8* %887 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %889

889:                                              ; preds = %883, %878, %876
  %890 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %888, %883 ], [ null, %878 ], [ null, %876 ]
  %891 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %890 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = sext i32 %892 to i64
  %894 = sub nsw i64 0, %893
  %895 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %890, i64 0, i32 0, i32 0, i64 %894
  %896 = bitcast i8* %895 to i16*
  %897 = load i16, i16* %896, align 2
  %898 = icmp ugt i16 %897, 26
  br i1 %898, label %899, label %909

899:                                              ; preds = %889
  %900 = getelementptr inbounds i8, i8* %895, i64 26
  %901 = bitcast i8* %900 to i16*
  %902 = load i16, i16* %901, align 2
  %903 = icmp eq i16 %902, 0
  br i1 %903, label %909, label %904

904:                                              ; preds = %899
  %905 = zext i16 %902 to i64
  %906 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %890, i64 0, i32 0, i32 0, i64 %905
  %907 = bitcast i8* %906 to i64*
  %908 = load i64, i64* %907, align 8
  br label %909

909:                                              ; preds = %889, %899, %904
  %910 = phi i64 [ %908, %904 ], [ 0, %899 ], [ 0, %889 ]
  %911 = icmp ugt i64 %877, %910
  br i1 %911, label %912, label %456

912:                                              ; preds = %909
  %913 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %363 to i64
  %914 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 0, i32 1
  %915 = bitcast %"class.re2::RE2"** %914 to i64*
  %916 = load i64, i64* %915, align 8
  %917 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17 to i8*
  %918 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %458 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %917, i8* align 8 %918, i64 16, i1 false) #13
  %919 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %458 to i64*
  store i64 %913, i64* %919, align 8
  %920 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %457, i64 -1, i32 1
  %921 = bitcast %"class.re2::RE2"** %920 to i64*
  store i64 %916, i64* %921, align 8
  %922 = add i32 %361, 1
  br label %923

923:                                              ; preds = %450, %912
  %924 = phi i32 [ %922, %912 ], [ %361, %450 ]
  %925 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %458, %912 ], [ %7, %450 ]
  %926 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17 to i64
  %927 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, i64 1
  %928 = icmp ult %"struct.extensions::declarative_net_request::RegexRuleInfo"* %927, %925
  br i1 %928, label %929, label %1126

929:                                              ; preds = %923, %1114
  %930 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1125, %1114 ], [ %352, %923 ]
  %931 = phi i32 [ %1123, %1114 ], [ %924, %923 ]
  %932 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1027, %1114 ], [ %927, %923 ]
  %933 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1032, %1114 ], [ %925, %923 ]
  %934 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %930, i64 0, i32 0
  %935 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %934, align 8
  %936 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %935 to i32*
  %937 = load i32, i32* %936, align 4
  %938 = sext i32 %937 to i64
  %939 = sub nsw i64 0, %938
  %940 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %935, i64 0, i32 0, i32 0, i64 %939
  %941 = bitcast i8* %940 to i16*
  %942 = load i16, i16* %941, align 2
  %943 = icmp ugt i16 %942, 4
  %944 = getelementptr inbounds i8, i8* %940, i64 4
  %945 = bitcast i8* %944 to i16*
  br label %946

946:                                              ; preds = %1024, %929
  %947 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %932, %929 ], [ %1027, %1024 ]
  %948 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %947, i64 0, i32 0
  %949 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %948, align 8
  %950 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %949 to i32*
  %951 = load i32, i32* %950, align 4
  %952 = sext i32 %951 to i64
  %953 = sub nsw i64 0, %952
  %954 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %949, i64 0, i32 0, i32 0, i64 %953
  %955 = bitcast i8* %954 to i16*
  %956 = load i16, i16* %955, align 2
  %957 = icmp ugt i16 %956, 4
  br i1 %957, label %958, label %971

958:                                              ; preds = %946
  %959 = getelementptr inbounds i8, i8* %954, i64 4
  %960 = bitcast i8* %959 to i16*
  %961 = load i16, i16* %960, align 2
  %962 = zext i16 %961 to i64
  %963 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %949, i64 0, i32 0, i32 0, i64 %962
  %964 = icmp eq i16 %961, 0
  br i1 %964, label %971, label %965

965:                                              ; preds = %958
  %966 = bitcast i8* %963 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = zext i32 %967 to i64
  %969 = getelementptr inbounds i8, i8* %963, i64 %968
  %970 = bitcast i8* %969 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %971

971:                                              ; preds = %965, %958, %946
  %972 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %970, %965 ], [ null, %958 ], [ null, %946 ]
  %973 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %972 to i32*
  %974 = load i32, i32* %973, align 4
  %975 = sext i32 %974 to i64
  %976 = sub nsw i64 0, %975
  %977 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %972, i64 0, i32 0, i32 0, i64 %976
  %978 = bitcast i8* %977 to i16*
  %979 = load i16, i16* %978, align 2
  %980 = icmp ugt i16 %979, 26
  br i1 %980, label %981, label %991

981:                                              ; preds = %971
  %982 = getelementptr inbounds i8, i8* %977, i64 26
  %983 = bitcast i8* %982 to i16*
  %984 = load i16, i16* %983, align 2
  %985 = icmp eq i16 %984, 0
  br i1 %985, label %991, label %986

986:                                              ; preds = %981
  %987 = zext i16 %984 to i64
  %988 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %972, i64 0, i32 0, i32 0, i64 %987
  %989 = bitcast i8* %988 to i64*
  %990 = load i64, i64* %989, align 8
  br label %991

991:                                              ; preds = %986, %981, %971
  %992 = phi i64 [ %990, %986 ], [ 0, %981 ], [ 0, %971 ]
  br i1 %943, label %993, label %1004

993:                                              ; preds = %991
  %994 = load i16, i16* %945, align 2
  %995 = zext i16 %994 to i64
  %996 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %935, i64 0, i32 0, i32 0, i64 %995
  %997 = icmp eq i16 %994, 0
  br i1 %997, label %1004, label %998

998:                                              ; preds = %993
  %999 = bitcast i8* %996 to i32*
  %1000 = load i32, i32* %999, align 4
  %1001 = zext i32 %1000 to i64
  %1002 = getelementptr inbounds i8, i8* %996, i64 %1001
  %1003 = bitcast i8* %1002 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %1004

1004:                                             ; preds = %998, %993, %991
  %1005 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %1003, %998 ], [ null, %993 ], [ null, %991 ]
  %1006 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %1005 to i32*
  %1007 = load i32, i32* %1006, align 4
  %1008 = sext i32 %1007 to i64
  %1009 = sub nsw i64 0, %1008
  %1010 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1005, i64 0, i32 0, i32 0, i64 %1009
  %1011 = bitcast i8* %1010 to i16*
  %1012 = load i16, i16* %1011, align 2
  %1013 = icmp ugt i16 %1012, 26
  br i1 %1013, label %1014, label %1024

1014:                                             ; preds = %1004
  %1015 = getelementptr inbounds i8, i8* %1010, i64 26
  %1016 = bitcast i8* %1015 to i16*
  %1017 = load i16, i16* %1016, align 2
  %1018 = icmp eq i16 %1017, 0
  br i1 %1018, label %1024, label %1019

1019:                                             ; preds = %1014
  %1020 = zext i16 %1017 to i64
  %1021 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1005, i64 0, i32 0, i32 0, i64 %1020
  %1022 = bitcast i8* %1021 to i64*
  %1023 = load i64, i64* %1022, align 8
  br label %1024

1024:                                             ; preds = %1004, %1014, %1019
  %1025 = phi i64 [ %1023, %1019 ], [ 0, %1014 ], [ 0, %1004 ]
  %1026 = icmp ugt i64 %992, %1025
  %1027 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %947, i64 1
  br i1 %1026, label %946, label %1028

1028:                                             ; preds = %1024
  %1029 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %949 to i64
  br label %1030

1030:                                             ; preds = %1028, %1109
  %1031 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1032, %1109 ], [ %933, %1028 ]
  %1032 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1031, i64 -1
  %1033 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1032, i64 0, i32 0
  %1034 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %1033, align 8
  %1035 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %1034 to i32*
  %1036 = load i32, i32* %1035, align 4
  %1037 = sext i32 %1036 to i64
  %1038 = sub nsw i64 0, %1037
  %1039 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1034, i64 0, i32 0, i32 0, i64 %1038
  %1040 = bitcast i8* %1039 to i16*
  %1041 = load i16, i16* %1040, align 2
  %1042 = icmp ugt i16 %1041, 4
  br i1 %1042, label %1043, label %1056

1043:                                             ; preds = %1030
  %1044 = getelementptr inbounds i8, i8* %1039, i64 4
  %1045 = bitcast i8* %1044 to i16*
  %1046 = load i16, i16* %1045, align 2
  %1047 = zext i16 %1046 to i64
  %1048 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1034, i64 0, i32 0, i32 0, i64 %1047
  %1049 = icmp eq i16 %1046, 0
  br i1 %1049, label %1056, label %1050

1050:                                             ; preds = %1043
  %1051 = bitcast i8* %1048 to i32*
  %1052 = load i32, i32* %1051, align 4
  %1053 = zext i32 %1052 to i64
  %1054 = getelementptr inbounds i8, i8* %1048, i64 %1053
  %1055 = bitcast i8* %1054 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %1056

1056:                                             ; preds = %1050, %1043, %1030
  %1057 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %1055, %1050 ], [ null, %1043 ], [ null, %1030 ]
  %1058 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %1057 to i32*
  %1059 = load i32, i32* %1058, align 4
  %1060 = sext i32 %1059 to i64
  %1061 = sub nsw i64 0, %1060
  %1062 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1057, i64 0, i32 0, i32 0, i64 %1061
  %1063 = bitcast i8* %1062 to i16*
  %1064 = load i16, i16* %1063, align 2
  %1065 = icmp ugt i16 %1064, 26
  br i1 %1065, label %1066, label %1076

1066:                                             ; preds = %1056
  %1067 = getelementptr inbounds i8, i8* %1062, i64 26
  %1068 = bitcast i8* %1067 to i16*
  %1069 = load i16, i16* %1068, align 2
  %1070 = icmp eq i16 %1069, 0
  br i1 %1070, label %1076, label %1071

1071:                                             ; preds = %1066
  %1072 = zext i16 %1069 to i64
  %1073 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1057, i64 0, i32 0, i32 0, i64 %1072
  %1074 = bitcast i8* %1073 to i64*
  %1075 = load i64, i64* %1074, align 8
  br label %1076

1076:                                             ; preds = %1071, %1066, %1056
  %1077 = phi i64 [ %1075, %1071 ], [ 0, %1066 ], [ 0, %1056 ]
  br i1 %943, label %1078, label %1089

1078:                                             ; preds = %1076
  %1079 = load i16, i16* %945, align 2
  %1080 = zext i16 %1079 to i64
  %1081 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %935, i64 0, i32 0, i32 0, i64 %1080
  %1082 = icmp eq i16 %1079, 0
  br i1 %1082, label %1089, label %1083

1083:                                             ; preds = %1078
  %1084 = bitcast i8* %1081 to i32*
  %1085 = load i32, i32* %1084, align 4
  %1086 = zext i32 %1085 to i64
  %1087 = getelementptr inbounds i8, i8* %1081, i64 %1086
  %1088 = bitcast i8* %1087 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %1089

1089:                                             ; preds = %1083, %1078, %1076
  %1090 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %1088, %1083 ], [ null, %1078 ], [ null, %1076 ]
  %1091 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %1090 to i32*
  %1092 = load i32, i32* %1091, align 4
  %1093 = sext i32 %1092 to i64
  %1094 = sub nsw i64 0, %1093
  %1095 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1090, i64 0, i32 0, i32 0, i64 %1094
  %1096 = bitcast i8* %1095 to i16*
  %1097 = load i16, i16* %1096, align 2
  %1098 = icmp ugt i16 %1097, 26
  br i1 %1098, label %1099, label %1109

1099:                                             ; preds = %1089
  %1100 = getelementptr inbounds i8, i8* %1095, i64 26
  %1101 = bitcast i8* %1100 to i16*
  %1102 = load i16, i16* %1101, align 2
  %1103 = icmp eq i16 %1102, 0
  br i1 %1103, label %1109, label %1104

1104:                                             ; preds = %1099
  %1105 = zext i16 %1102 to i64
  %1106 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1090, i64 0, i32 0, i32 0, i64 %1105
  %1107 = bitcast i8* %1106 to i64*
  %1108 = load i64, i64* %1107, align 8
  br label %1109

1109:                                             ; preds = %1089, %1099, %1104
  %1110 = phi i64 [ %1108, %1104 ], [ 0, %1099 ], [ 0, %1089 ]
  %1111 = icmp ugt i64 %1077, %1110
  br i1 %1111, label %1112, label %1030

1112:                                             ; preds = %1109
  %1113 = icmp ugt %"struct.extensions::declarative_net_request::RegexRuleInfo"* %947, %1032
  br i1 %1113, label %1126, label %1114

1114:                                             ; preds = %1112
  %1115 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %947, i64 0, i32 1
  %1116 = bitcast %"class.re2::RE2"** %1115 to i64*
  %1117 = load i64, i64* %1116, align 8
  %1118 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %947 to i8*
  %1119 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1032 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1118, i8* align 8 %1119, i64 16, i1 false) #13
  %1120 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1032 to i64*
  store i64 %1029, i64* %1120, align 8
  %1121 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1031, i64 -1, i32 1
  %1122 = bitcast %"class.re2::RE2"** %1121 to i64*
  store i64 %1117, i64* %1122, align 8
  %1123 = add i32 %931, 1
  %1124 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %930, %947
  %1125 = select i1 %1124, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1032, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %930
  br label %929

1126:                                             ; preds = %1112, %923
  %1127 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %352, %923 ], [ %930, %1112 ]
  %1128 = phi i32 [ %924, %923 ], [ %931, %1112 ]
  %1129 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %927, %923 ], [ %947, %1112 ]
  %1130 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, %1127
  br i1 %1130, label %1234, label %1131

1131:                                             ; preds = %1126
  %1132 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1127, i64 0, i32 0
  %1133 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %1132, align 8
  %1134 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %1133 to i32*
  %1135 = load i32, i32* %1134, align 4
  %1136 = sext i32 %1135 to i64
  %1137 = sub nsw i64 0, %1136
  %1138 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1133, i64 0, i32 0, i32 0, i64 %1137
  %1139 = bitcast i8* %1138 to i16*
  %1140 = load i16, i16* %1139, align 2
  %1141 = icmp ugt i16 %1140, 4
  br i1 %1141, label %1142, label %1155

1142:                                             ; preds = %1131
  %1143 = getelementptr inbounds i8, i8* %1138, i64 4
  %1144 = bitcast i8* %1143 to i16*
  %1145 = load i16, i16* %1144, align 2
  %1146 = zext i16 %1145 to i64
  %1147 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1133, i64 0, i32 0, i32 0, i64 %1146
  %1148 = icmp eq i16 %1145, 0
  br i1 %1148, label %1155, label %1149

1149:                                             ; preds = %1142
  %1150 = bitcast i8* %1147 to i32*
  %1151 = load i32, i32* %1150, align 4
  %1152 = zext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, i8* %1147, i64 %1152
  %1154 = bitcast i8* %1153 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %1155

1155:                                             ; preds = %1149, %1142, %1131
  %1156 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %1154, %1149 ], [ null, %1142 ], [ null, %1131 ]
  %1157 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %1156 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = sext i32 %1158 to i64
  %1160 = sub nsw i64 0, %1159
  %1161 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1156, i64 0, i32 0, i32 0, i64 %1160
  %1162 = bitcast i8* %1161 to i16*
  %1163 = load i16, i16* %1162, align 2
  %1164 = icmp ugt i16 %1163, 26
  br i1 %1164, label %1165, label %1175

1165:                                             ; preds = %1155
  %1166 = getelementptr inbounds i8, i8* %1161, i64 26
  %1167 = bitcast i8* %1166 to i16*
  %1168 = load i16, i16* %1167, align 2
  %1169 = icmp eq i16 %1168, 0
  br i1 %1169, label %1175, label %1170

1170:                                             ; preds = %1165
  %1171 = zext i16 %1168 to i64
  %1172 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1156, i64 0, i32 0, i32 0, i64 %1171
  %1173 = bitcast i8* %1172 to i64*
  %1174 = load i64, i64* %1173, align 8
  br label %1175

1175:                                             ; preds = %1170, %1165, %1155
  %1176 = phi i64 [ %1174, %1170 ], [ 0, %1165 ], [ 0, %1155 ]
  %1177 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, i64 0, i32 0
  %1178 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %1177, align 8
  %1179 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %1178 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = sext i32 %1180 to i64
  %1182 = sub nsw i64 0, %1181
  %1183 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1178, i64 0, i32 0, i32 0, i64 %1182
  %1184 = bitcast i8* %1183 to i16*
  %1185 = load i16, i16* %1184, align 2
  %1186 = icmp ugt i16 %1185, 4
  %1187 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %1178 to i64
  br i1 %1186, label %1188, label %1201

1188:                                             ; preds = %1175
  %1189 = getelementptr inbounds i8, i8* %1183, i64 4
  %1190 = bitcast i8* %1189 to i16*
  %1191 = load i16, i16* %1190, align 2
  %1192 = zext i16 %1191 to i64
  %1193 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %1178, i64 0, i32 0, i32 0, i64 %1192
  %1194 = icmp eq i16 %1191, 0
  br i1 %1194, label %1201, label %1195

1195:                                             ; preds = %1188
  %1196 = bitcast i8* %1193 to i32*
  %1197 = load i32, i32* %1196, align 4
  %1198 = zext i32 %1197 to i64
  %1199 = getelementptr inbounds i8, i8* %1193, i64 %1198
  %1200 = bitcast i8* %1199 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %1201

1201:                                             ; preds = %1195, %1188, %1175
  %1202 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %1200, %1195 ], [ null, %1188 ], [ null, %1175 ]
  %1203 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %1202 to i32*
  %1204 = load i32, i32* %1203, align 4
  %1205 = sext i32 %1204 to i64
  %1206 = sub nsw i64 0, %1205
  %1207 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1202, i64 0, i32 0, i32 0, i64 %1206
  %1208 = bitcast i8* %1207 to i16*
  %1209 = load i16, i16* %1208, align 2
  %1210 = icmp ugt i16 %1209, 26
  br i1 %1210, label %1211, label %1221

1211:                                             ; preds = %1201
  %1212 = getelementptr inbounds i8, i8* %1207, i64 26
  %1213 = bitcast i8* %1212 to i16*
  %1214 = load i16, i16* %1213, align 2
  %1215 = icmp eq i16 %1214, 0
  br i1 %1215, label %1221, label %1216

1216:                                             ; preds = %1211
  %1217 = zext i16 %1214 to i64
  %1218 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %1202, i64 0, i32 0, i32 0, i64 %1217
  %1219 = bitcast i8* %1218 to i64*
  %1220 = load i64, i64* %1219, align 8
  br label %1221

1221:                                             ; preds = %1201, %1211, %1216
  %1222 = phi i64 [ %1220, %1216 ], [ 0, %1211 ], [ 0, %1201 ]
  %1223 = icmp ugt i64 %1176, %1222
  br i1 %1223, label %1224, label %1234

1224:                                             ; preds = %1221
  %1225 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, i64 0, i32 1
  %1226 = bitcast %"class.re2::RE2"** %1225 to i64*
  %1227 = load i64, i64* %1226, align 8
  %1228 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129 to i8*
  %1229 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1228, i8* align 8 %1229, i64 16, i1 false) #13
  %1230 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1127 to i64*
  store i64 %1187, i64* %1230, align 8
  %1231 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1127, i64 0, i32 1
  %1232 = bitcast %"class.re2::RE2"** %1231 to i64*
  store i64 %1227, i64* %1232, align 8
  %1233 = add i32 %1128, 1
  br label %1234

1234:                                             ; preds = %1126, %1224, %1221
  %1235 = phi i32 [ %1233, %1224 ], [ %1128, %1221 ], [ %1128, %1126 ]
  %1236 = icmp eq i32 %1235, 0
  br i1 %1236, label %1237, label %1244

1237:                                             ; preds = %1234
  %1238 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEbT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129)
  %1239 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, i64 1
  %1240 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEbT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %1239, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4)
  br i1 %1240, label %1241, label %1243

1241:                                             ; preds = %1237
  br i1 %1238, label %1255, label %1242

1242:                                             ; preds = %1241, %1253
  br label %3

1243:                                             ; preds = %1237
  br i1 %1238, label %1251, label %1244

1244:                                             ; preds = %1243, %1234
  %1245 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129 to i64
  %1246 = sub i64 %1245, %926
  %1247 = sub i64 %13, %1245
  %1248 = icmp slt i64 %1246, %1247
  br i1 %1248, label %1249, label %1253

1249:                                             ; preds = %1244
  tail call fastcc void @"_ZNSt3__16__sortIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEvT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %17, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129)
  %1250 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, i64 1
  br label %1251

1251:                                             ; preds = %1249, %1243
  %1252 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %1239, %1243 ], [ %1250, %1249 ]
  br label %14

1253:                                             ; preds = %1244
  %1254 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1129, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEvT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %1254, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4)
  br label %1242

1255:                                             ; preds = %1241, %638, %16, %16, %542, %635, %346, %141, %112, %115, %124, %128, %133
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture) unnamed_addr #1 {
  %4 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 0
  %5 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %4, align 8
  %6 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = sub nsw i64 0, %8
  %10 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %5, i64 0, i32 0, i32 0, i64 %9
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = icmp ugt i16 %12, 4
  %14 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %5 to i64
  br i1 %13, label %15, label %28

15:                                               ; preds = %3
  %16 = getelementptr inbounds i8, i8* %10, i64 4
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %5, i64 0, i32 0, i32 0, i64 %19
  %21 = icmp eq i16 %18, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = bitcast i8* %20 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %20, i64 %25
  %27 = bitcast i8* %26 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %28

28:                                               ; preds = %22, %15, %3
  %29 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %27, %22 ], [ null, %15 ], [ null, %3 ]
  %30 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = sub nsw i64 0, %32
  %34 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %29, i64 0, i32 0, i32 0, i64 %33
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = icmp ugt i16 %36, 26
  br i1 %37, label %38, label %48

38:                                               ; preds = %28
  %39 = getelementptr inbounds i8, i8* %34, i64 26
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %38
  %44 = zext i16 %41 to i64
  %45 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %29, i64 0, i32 0, i32 0, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %43, %38, %28
  %49 = phi i64 [ %47, %43 ], [ 0, %38 ], [ 0, %28 ]
  %50 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 0
  %51 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %50, align 8
  %52 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = sub nsw i64 0, %54
  %56 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %51, i64 0, i32 0, i32 0, i64 %55
  %57 = bitcast i8* %56 to i16*
  %58 = load i16, i16* %57, align 2
  %59 = icmp ugt i16 %58, 4
  %60 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %51 to i64
  br i1 %59, label %61, label %74

61:                                               ; preds = %48
  %62 = getelementptr inbounds i8, i8* %56, i64 4
  %63 = bitcast i8* %62 to i16*
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i64
  %66 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %51, i64 0, i32 0, i32 0, i64 %65
  %67 = icmp eq i16 %64, 0
  br i1 %67, label %74, label %68

68:                                               ; preds = %61
  %69 = bitcast i8* %66 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %66, i64 %71
  %73 = bitcast i8* %72 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %74

74:                                               ; preds = %68, %61, %48
  %75 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %73, %68 ], [ null, %61 ], [ null, %48 ]
  %76 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %75, i64 0, i32 0, i32 0, i64 %79
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = icmp ugt i16 %82, 26
  br i1 %83, label %84, label %94

84:                                               ; preds = %74
  %85 = getelementptr inbounds i8, i8* %80, i64 26
  %86 = bitcast i8* %85 to i16*
  %87 = load i16, i16* %86, align 2
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %84
  %90 = zext i16 %87 to i64
  %91 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %75, i64 0, i32 0, i32 0, i64 %90
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 8
  br label %94

94:                                               ; preds = %74, %84, %89
  %95 = phi i64 [ %93, %89 ], [ 0, %84 ], [ 0, %74 ]
  %96 = icmp ugt i64 %49, %95
  %97 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 0
  %98 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %97, align 8
  %99 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = sub nsw i64 0, %101
  %103 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %98, i64 0, i32 0, i32 0, i64 %102
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = icmp ugt i16 %105, 4
  br i1 %106, label %107, label %120

107:                                              ; preds = %94
  %108 = getelementptr inbounds i8, i8* %103, i64 4
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i64
  %112 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %98, i64 0, i32 0, i32 0, i64 %111
  %113 = icmp eq i16 %110, 0
  br i1 %113, label %120, label %114

114:                                              ; preds = %107
  %115 = bitcast i8* %112 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %112, i64 %117
  %119 = bitcast i8* %118 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %120

120:                                              ; preds = %114, %107, %94
  %121 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %119, %114 ], [ null, %107 ], [ null, %94 ]
  %122 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %121, i64 0, i32 0, i32 0, i64 %125
  %127 = bitcast i8* %126 to i16*
  %128 = load i16, i16* %127, align 2
  %129 = icmp ugt i16 %128, 26
  br i1 %129, label %130, label %140

130:                                              ; preds = %120
  %131 = getelementptr inbounds i8, i8* %126, i64 26
  %132 = bitcast i8* %131 to i16*
  %133 = load i16, i16* %132, align 2
  %134 = icmp eq i16 %133, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %130
  %136 = zext i16 %133 to i64
  %137 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %121, i64 0, i32 0, i32 0, i64 %136
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 8
  br label %140

140:                                              ; preds = %135, %130, %120
  %141 = phi i64 [ %139, %135 ], [ 0, %130 ], [ 0, %120 ]
  br i1 %13, label %142, label %155

142:                                              ; preds = %140
  %143 = getelementptr inbounds i8, i8* %10, i64 4
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i64
  %147 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %5, i64 0, i32 0, i32 0, i64 %146
  %148 = icmp eq i16 %145, 0
  br i1 %148, label %155, label %149

149:                                              ; preds = %142
  %150 = bitcast i8* %147 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %147, i64 %152
  %154 = bitcast i8* %153 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %155

155:                                              ; preds = %149, %142, %140
  %156 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %154, %149 ], [ null, %142 ], [ null, %140 ]
  %157 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = sext i32 %158 to i64
  %160 = sub nsw i64 0, %159
  %161 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %156, i64 0, i32 0, i32 0, i64 %160
  %162 = bitcast i8* %161 to i16*
  %163 = load i16, i16* %162, align 2
  %164 = icmp ugt i16 %163, 26
  br i1 %164, label %165, label %175

165:                                              ; preds = %155
  %166 = getelementptr inbounds i8, i8* %161, i64 26
  %167 = bitcast i8* %166 to i16*
  %168 = load i16, i16* %167, align 2
  %169 = icmp eq i16 %168, 0
  br i1 %169, label %175, label %170

170:                                              ; preds = %165
  %171 = zext i16 %168 to i64
  %172 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %156, i64 0, i32 0, i32 0, i64 %171
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 8
  br label %175

175:                                              ; preds = %155, %165, %170
  %176 = phi i64 [ %174, %170 ], [ 0, %165 ], [ 0, %155 ]
  %177 = icmp ugt i64 %141, %176
  br i1 %96, label %284, label %178

178:                                              ; preds = %175
  br i1 %177, label %179, label %391

179:                                              ; preds = %178
  %180 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i64*
  %181 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 1
  %182 = bitcast %"class.re2::RE2"** %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  %185 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 8 %185, i64 16, i1 false) #13
  %186 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i64*
  store i64 %14, i64* %186, align 8
  %187 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 1
  %188 = bitcast %"class.re2::RE2"** %187 to i64*
  store i64 %183, i64* %188, align 8
  %189 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %4, align 8
  %190 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %189 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = sub nsw i64 0, %192
  %194 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %189, i64 0, i32 0, i32 0, i64 %193
  %195 = bitcast i8* %194 to i16*
  %196 = load i16, i16* %195, align 2
  %197 = icmp ugt i16 %196, 4
  br i1 %197, label %198, label %211

198:                                              ; preds = %179
  %199 = getelementptr inbounds i8, i8* %194, i64 4
  %200 = bitcast i8* %199 to i16*
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i64
  %203 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %189, i64 0, i32 0, i32 0, i64 %202
  %204 = icmp eq i16 %201, 0
  br i1 %204, label %211, label %205

205:                                              ; preds = %198
  %206 = bitcast i8* %203 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %203, i64 %208
  %210 = bitcast i8* %209 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %211

211:                                              ; preds = %205, %198, %179
  %212 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %210, %205 ], [ null, %198 ], [ null, %179 ]
  %213 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %212 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = sext i32 %214 to i64
  %216 = sub nsw i64 0, %215
  %217 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %212, i64 0, i32 0, i32 0, i64 %216
  %218 = bitcast i8* %217 to i16*
  %219 = load i16, i16* %218, align 2
  %220 = icmp ugt i16 %219, 26
  br i1 %220, label %221, label %231

221:                                              ; preds = %211
  %222 = getelementptr inbounds i8, i8* %217, i64 26
  %223 = bitcast i8* %222 to i16*
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %221
  %227 = zext i16 %224 to i64
  %228 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %212, i64 0, i32 0, i32 0, i64 %227
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  br label %231

231:                                              ; preds = %226, %221, %211
  %232 = phi i64 [ %230, %226 ], [ 0, %221 ], [ 0, %211 ]
  %233 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %50, align 8
  %234 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %233 to i32*
  %235 = load i32, i32* %234, align 4
  %236 = sext i32 %235 to i64
  %237 = sub nsw i64 0, %236
  %238 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %233, i64 0, i32 0, i32 0, i64 %237
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = icmp ugt i16 %240, 4
  %242 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %233 to i64
  br i1 %241, label %243, label %256

243:                                              ; preds = %231
  %244 = getelementptr inbounds i8, i8* %238, i64 4
  %245 = bitcast i8* %244 to i16*
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i64
  %248 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %233, i64 0, i32 0, i32 0, i64 %247
  %249 = icmp eq i16 %246, 0
  br i1 %249, label %256, label %250

250:                                              ; preds = %243
  %251 = bitcast i8* %248 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %248, i64 %253
  %255 = bitcast i8* %254 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %256

256:                                              ; preds = %250, %243, %231
  %257 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %255, %250 ], [ null, %243 ], [ null, %231 ]
  %258 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %257 to i32*
  %259 = load i32, i32* %258, align 4
  %260 = sext i32 %259 to i64
  %261 = sub nsw i64 0, %260
  %262 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %257, i64 0, i32 0, i32 0, i64 %261
  %263 = bitcast i8* %262 to i16*
  %264 = load i16, i16* %263, align 2
  %265 = icmp ugt i16 %264, 26
  br i1 %265, label %266, label %276

266:                                              ; preds = %256
  %267 = getelementptr inbounds i8, i8* %262, i64 26
  %268 = bitcast i8* %267 to i16*
  %269 = load i16, i16* %268, align 2
  %270 = icmp eq i16 %269, 0
  br i1 %270, label %276, label %271

271:                                              ; preds = %266
  %272 = zext i16 %269 to i64
  %273 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %257, i64 0, i32 0, i32 0, i64 %272
  %274 = bitcast i8* %273 to i64*
  %275 = load i64, i64* %274, align 8
  br label %276

276:                                              ; preds = %256, %266, %271
  %277 = phi i64 [ %275, %271 ], [ 0, %266 ], [ 0, %256 ]
  %278 = icmp ugt i64 %232, %277
  br i1 %278, label %279, label %391

279:                                              ; preds = %276
  %280 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  %281 = bitcast %"class.re2::RE2"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %283, i8* align 8 %184, i64 16, i1 false) #13
  store i64 %242, i64* %180, align 8
  store i64 %282, i64* %182, align 8
  br label %391

284:                                              ; preds = %175
  %285 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  %286 = bitcast %"class.re2::RE2"** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  br i1 %177, label %289, label %294

289:                                              ; preds = %284
  %290 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %288, i8* align 8 %290, i64 16, i1 false) #13
  %291 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i64*
  store i64 %60, i64* %291, align 8
  %292 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 1
  %293 = bitcast %"class.re2::RE2"** %292 to i64*
  store i64 %287, i64* %293, align 8
  br label %391

294:                                              ; preds = %284
  %295 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %288, i8* align 8 %295, i64 16, i1 false) #13
  %296 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i64*
  store i64 %60, i64* %296, align 8
  %297 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 1
  %298 = bitcast %"class.re2::RE2"** %297 to i64*
  store i64 %287, i64* %298, align 8
  %299 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %97, align 8
  %300 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = sub nsw i64 0, %302
  %304 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %299, i64 0, i32 0, i32 0, i64 %303
  %305 = bitcast i8* %304 to i16*
  %306 = load i16, i16* %305, align 2
  %307 = icmp ugt i16 %306, 4
  br i1 %307, label %308, label %321

308:                                              ; preds = %294
  %309 = getelementptr inbounds i8, i8* %304, i64 4
  %310 = bitcast i8* %309 to i16*
  %311 = load i16, i16* %310, align 2
  %312 = zext i16 %311 to i64
  %313 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %299, i64 0, i32 0, i32 0, i64 %312
  %314 = icmp eq i16 %311, 0
  br i1 %314, label %321, label %315

315:                                              ; preds = %308
  %316 = bitcast i8* %313 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i8, i8* %313, i64 %318
  %320 = bitcast i8* %319 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %321

321:                                              ; preds = %315, %308, %294
  %322 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %320, %315 ], [ null, %308 ], [ null, %294 ]
  %323 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %322 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = sext i32 %324 to i64
  %326 = sub nsw i64 0, %325
  %327 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %322, i64 0, i32 0, i32 0, i64 %326
  %328 = bitcast i8* %327 to i16*
  %329 = load i16, i16* %328, align 2
  %330 = icmp ugt i16 %329, 26
  br i1 %330, label %331, label %341

331:                                              ; preds = %321
  %332 = getelementptr inbounds i8, i8* %327, i64 26
  %333 = bitcast i8* %332 to i16*
  %334 = load i16, i16* %333, align 2
  %335 = icmp eq i16 %334, 0
  br i1 %335, label %341, label %336

336:                                              ; preds = %331
  %337 = zext i16 %334 to i64
  %338 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %322, i64 0, i32 0, i32 0, i64 %337
  %339 = bitcast i8* %338 to i64*
  %340 = load i64, i64* %339, align 8
  br label %341

341:                                              ; preds = %336, %331, %321
  %342 = phi i64 [ %340, %336 ], [ 0, %331 ], [ 0, %321 ]
  %343 = load i32, i32* %52, align 4
  %344 = sext i32 %343 to i64
  %345 = sub nsw i64 0, %344
  %346 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %51, i64 0, i32 0, i32 0, i64 %345
  %347 = bitcast i8* %346 to i16*
  %348 = load i16, i16* %347, align 2
  %349 = icmp ugt i16 %348, 4
  br i1 %349, label %350, label %363

350:                                              ; preds = %341
  %351 = getelementptr inbounds i8, i8* %346, i64 4
  %352 = bitcast i8* %351 to i16*
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i64
  %355 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %51, i64 0, i32 0, i32 0, i64 %354
  %356 = icmp eq i16 %353, 0
  br i1 %356, label %363, label %357

357:                                              ; preds = %350
  %358 = bitcast i8* %355 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %355, i64 %360
  %362 = bitcast i8* %361 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %363

363:                                              ; preds = %357, %350, %341
  %364 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %362, %357 ], [ null, %350 ], [ null, %341 ]
  %365 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %364 to i32*
  %366 = load i32, i32* %365, align 4
  %367 = sext i32 %366 to i64
  %368 = sub nsw i64 0, %367
  %369 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %364, i64 0, i32 0, i32 0, i64 %368
  %370 = bitcast i8* %369 to i16*
  %371 = load i16, i16* %370, align 2
  %372 = icmp ugt i16 %371, 26
  br i1 %372, label %373, label %383

373:                                              ; preds = %363
  %374 = getelementptr inbounds i8, i8* %369, i64 26
  %375 = bitcast i8* %374 to i16*
  %376 = load i16, i16* %375, align 2
  %377 = icmp eq i16 %376, 0
  br i1 %377, label %383, label %378

378:                                              ; preds = %373
  %379 = zext i16 %376 to i64
  %380 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %364, i64 0, i32 0, i32 0, i64 %379
  %381 = bitcast i8* %380 to i64*
  %382 = load i64, i64* %381, align 8
  br label %383

383:                                              ; preds = %363, %373, %378
  %384 = phi i64 [ %382, %378 ], [ 0, %373 ], [ 0, %363 ]
  %385 = icmp ugt i64 %342, %384
  br i1 %385, label %386, label %391

386:                                              ; preds = %383
  %387 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %295, i8* align 8 %387, i64 16, i1 false) #13
  %388 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i64*
  store i64 %60, i64* %388, align 8
  %389 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 1
  %390 = bitcast %"class.re2::RE2"** %389 to i64*
  store i64 %287, i64* %390, align 8
  br label %391

391:                                              ; preds = %383, %386, %276, %279, %178, %289
  %392 = phi i32 [ 1, %289 ], [ 0, %178 ], [ 2, %279 ], [ 1, %276 ], [ 2, %386 ], [ 1, %383 ]
  ret i32 %392
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture) unnamed_addr #1 {
  %5 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2)
  %6 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 0
  %7 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %6, align 8
  %8 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sub nsw i64 0, %10
  %12 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %7, i64 0, i32 0, i32 0, i64 %11
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  %15 = icmp ugt i16 %14, 4
  br i1 %15, label %16, label %29

16:                                               ; preds = %4
  %17 = getelementptr inbounds i8, i8* %12, i64 4
  %18 = bitcast i8* %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i64
  %21 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %7, i64 0, i32 0, i32 0, i64 %20
  %22 = icmp eq i16 %19, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %16
  %24 = bitcast i8* %21 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %21, i64 %26
  %28 = bitcast i8* %27 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %29

29:                                               ; preds = %23, %16, %4
  %30 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %28, %23 ], [ null, %16 ], [ null, %4 ]
  %31 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = sub nsw i64 0, %33
  %35 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %30, i64 0, i32 0, i32 0, i64 %34
  %36 = bitcast i8* %35 to i16*
  %37 = load i16, i16* %36, align 2
  %38 = icmp ugt i16 %37, 26
  br i1 %38, label %39, label %49

39:                                               ; preds = %29
  %40 = getelementptr inbounds i8, i8* %35, i64 26
  %41 = bitcast i8* %40 to i16*
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = zext i16 %42 to i64
  %46 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %30, i64 0, i32 0, i32 0, i64 %45
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  br label %49

49:                                               ; preds = %44, %39, %29
  %50 = phi i64 [ %48, %44 ], [ 0, %39 ], [ 0, %29 ]
  %51 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 0
  %52 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %51, align 8
  %53 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %52, i64 0, i32 0, i32 0, i64 %56
  %58 = bitcast i8* %57 to i16*
  %59 = load i16, i16* %58, align 2
  %60 = icmp ugt i16 %59, 4
  %61 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %52 to i64
  br i1 %60, label %62, label %75

62:                                               ; preds = %49
  %63 = getelementptr inbounds i8, i8* %57, i64 4
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i64
  %67 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %52, i64 0, i32 0, i32 0, i64 %66
  %68 = icmp eq i16 %65, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %62
  %70 = bitcast i8* %67 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %67, i64 %72
  %74 = bitcast i8* %73 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %75

75:                                               ; preds = %69, %62, %49
  %76 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %74, %69 ], [ null, %62 ], [ null, %49 ]
  %77 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = sub nsw i64 0, %79
  %81 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %76, i64 0, i32 0, i32 0, i64 %80
  %82 = bitcast i8* %81 to i16*
  %83 = load i16, i16* %82, align 2
  %84 = icmp ugt i16 %83, 26
  br i1 %84, label %85, label %95

85:                                               ; preds = %75
  %86 = getelementptr inbounds i8, i8* %81, i64 26
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %85
  %91 = zext i16 %88 to i64
  %92 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %76, i64 0, i32 0, i32 0, i64 %91
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %75, %85, %90
  %96 = phi i64 [ %94, %90 ], [ 0, %85 ], [ 0, %75 ]
  %97 = icmp ugt i64 %50, %96
  br i1 %97, label %98, label %304

98:                                               ; preds = %95
  %99 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i64*
  %100 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 1
  %101 = bitcast %"class.re2::RE2"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i8*
  %104 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 16, i1 false) #13
  %105 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3 to i64*
  store i64 %61, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 1
  %107 = bitcast %"class.re2::RE2"** %106 to i64*
  store i64 %102, i64* %107, align 8
  %108 = add i32 %5, 1
  %109 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %51, align 8
  %110 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = sext i32 %111 to i64
  %113 = sub nsw i64 0, %112
  %114 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %109, i64 0, i32 0, i32 0, i64 %113
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = icmp ugt i16 %116, 4
  br i1 %117, label %118, label %131

118:                                              ; preds = %98
  %119 = getelementptr inbounds i8, i8* %114, i64 4
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i64
  %123 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %109, i64 0, i32 0, i32 0, i64 %122
  %124 = icmp eq i16 %121, 0
  br i1 %124, label %131, label %125

125:                                              ; preds = %118
  %126 = bitcast i8* %123 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %123, i64 %128
  %130 = bitcast i8* %129 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %131

131:                                              ; preds = %125, %118, %98
  %132 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %130, %125 ], [ null, %118 ], [ null, %98 ]
  %133 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = sext i32 %134 to i64
  %136 = sub nsw i64 0, %135
  %137 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %132, i64 0, i32 0, i32 0, i64 %136
  %138 = bitcast i8* %137 to i16*
  %139 = load i16, i16* %138, align 2
  %140 = icmp ugt i16 %139, 26
  br i1 %140, label %141, label %151

141:                                              ; preds = %131
  %142 = getelementptr inbounds i8, i8* %137, i64 26
  %143 = bitcast i8* %142 to i16*
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %151, label %146

146:                                              ; preds = %141
  %147 = zext i16 %144 to i64
  %148 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %132, i64 0, i32 0, i32 0, i64 %147
  %149 = bitcast i8* %148 to i64*
  %150 = load i64, i64* %149, align 8
  br label %151

151:                                              ; preds = %146, %141, %131
  %152 = phi i64 [ %150, %146 ], [ 0, %141 ], [ 0, %131 ]
  %153 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 0
  %154 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %153, align 8
  %155 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %154 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = sext i32 %156 to i64
  %158 = sub nsw i64 0, %157
  %159 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %154, i64 0, i32 0, i32 0, i64 %158
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = icmp ugt i16 %161, 4
  %163 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %154 to i64
  br i1 %162, label %164, label %177

164:                                              ; preds = %151
  %165 = getelementptr inbounds i8, i8* %159, i64 4
  %166 = bitcast i8* %165 to i16*
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i64
  %169 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %154, i64 0, i32 0, i32 0, i64 %168
  %170 = icmp eq i16 %167, 0
  br i1 %170, label %177, label %171

171:                                              ; preds = %164
  %172 = bitcast i8* %169 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %169, i64 %174
  %176 = bitcast i8* %175 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %177

177:                                              ; preds = %171, %164, %151
  %178 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %176, %171 ], [ null, %164 ], [ null, %151 ]
  %179 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = sub nsw i64 0, %181
  %183 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %178, i64 0, i32 0, i32 0, i64 %182
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = icmp ugt i16 %185, 26
  br i1 %186, label %187, label %197

187:                                              ; preds = %177
  %188 = getelementptr inbounds i8, i8* %183, i64 26
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = icmp eq i16 %190, 0
  br i1 %191, label %197, label %192

192:                                              ; preds = %187
  %193 = zext i16 %190 to i64
  %194 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %178, i64 0, i32 0, i32 0, i64 %193
  %195 = bitcast i8* %194 to i64*
  %196 = load i64, i64* %195, align 8
  br label %197

197:                                              ; preds = %177, %187, %192
  %198 = phi i64 [ %196, %192 ], [ 0, %187 ], [ 0, %177 ]
  %199 = icmp ugt i64 %152, %198
  br i1 %199, label %200, label %304

200:                                              ; preds = %197
  %201 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i64*
  %202 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 1
  %203 = bitcast %"class.re2::RE2"** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %205, i8* align 8 %103, i64 16, i1 false) #13
  store i64 %163, i64* %99, align 8
  store i64 %204, i64* %101, align 8
  %206 = add i32 %5, 2
  %207 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %153, align 8
  %208 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = sext i32 %209 to i64
  %211 = sub nsw i64 0, %210
  %212 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %207, i64 0, i32 0, i32 0, i64 %211
  %213 = bitcast i8* %212 to i16*
  %214 = load i16, i16* %213, align 2
  %215 = icmp ugt i16 %214, 4
  br i1 %215, label %216, label %229

216:                                              ; preds = %200
  %217 = getelementptr inbounds i8, i8* %212, i64 4
  %218 = bitcast i8* %217 to i16*
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i64
  %221 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %207, i64 0, i32 0, i32 0, i64 %220
  %222 = icmp eq i16 %219, 0
  br i1 %222, label %229, label %223

223:                                              ; preds = %216
  %224 = bitcast i8* %221 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %221, i64 %226
  %228 = bitcast i8* %227 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %229

229:                                              ; preds = %223, %216, %200
  %230 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %228, %223 ], [ null, %216 ], [ null, %200 ]
  %231 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %230 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = sub nsw i64 0, %233
  %235 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %230, i64 0, i32 0, i32 0, i64 %234
  %236 = bitcast i8* %235 to i16*
  %237 = load i16, i16* %236, align 2
  %238 = icmp ugt i16 %237, 26
  br i1 %238, label %239, label %249

239:                                              ; preds = %229
  %240 = getelementptr inbounds i8, i8* %235, i64 26
  %241 = bitcast i8* %240 to i16*
  %242 = load i16, i16* %241, align 2
  %243 = icmp eq i16 %242, 0
  br i1 %243, label %249, label %244

244:                                              ; preds = %239
  %245 = zext i16 %242 to i64
  %246 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %230, i64 0, i32 0, i32 0, i64 %245
  %247 = bitcast i8* %246 to i64*
  %248 = load i64, i64* %247, align 8
  br label %249

249:                                              ; preds = %244, %239, %229
  %250 = phi i64 [ %248, %244 ], [ 0, %239 ], [ 0, %229 ]
  %251 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 0
  %252 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %251, align 8
  %253 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %252 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = sext i32 %254 to i64
  %256 = sub nsw i64 0, %255
  %257 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %252, i64 0, i32 0, i32 0, i64 %256
  %258 = bitcast i8* %257 to i16*
  %259 = load i16, i16* %258, align 2
  %260 = icmp ugt i16 %259, 4
  %261 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %252 to i64
  br i1 %260, label %262, label %275

262:                                              ; preds = %249
  %263 = getelementptr inbounds i8, i8* %257, i64 4
  %264 = bitcast i8* %263 to i16*
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i64
  %267 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %252, i64 0, i32 0, i32 0, i64 %266
  %268 = icmp eq i16 %265, 0
  br i1 %268, label %275, label %269

269:                                              ; preds = %262
  %270 = bitcast i8* %267 to i32*
  %271 = load i32, i32* %270, align 4
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %267, i64 %272
  %274 = bitcast i8* %273 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %275

275:                                              ; preds = %269, %262, %249
  %276 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %274, %269 ], [ null, %262 ], [ null, %249 ]
  %277 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %276 to i32*
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %276, i64 0, i32 0, i32 0, i64 %280
  %282 = bitcast i8* %281 to i16*
  %283 = load i16, i16* %282, align 2
  %284 = icmp ugt i16 %283, 26
  br i1 %284, label %285, label %295

285:                                              ; preds = %275
  %286 = getelementptr inbounds i8, i8* %281, i64 26
  %287 = bitcast i8* %286 to i16*
  %288 = load i16, i16* %287, align 2
  %289 = icmp eq i16 %288, 0
  br i1 %289, label %295, label %290

290:                                              ; preds = %285
  %291 = zext i16 %288 to i64
  %292 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %276, i64 0, i32 0, i32 0, i64 %291
  %293 = bitcast i8* %292 to i64*
  %294 = load i64, i64* %293, align 8
  br label %295

295:                                              ; preds = %275, %285, %290
  %296 = phi i64 [ %294, %290 ], [ 0, %285 ], [ 0, %275 ]
  %297 = icmp ugt i64 %250, %296
  br i1 %297, label %298, label %304

298:                                              ; preds = %295
  %299 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  %300 = bitcast %"class.re2::RE2"** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %302, i8* align 8 %205, i64 16, i1 false) #13
  store i64 %261, i64* %201, align 8
  store i64 %301, i64* %203, align 8
  %303 = add i32 %5, 3
  br label %304

304:                                              ; preds = %197, %298, %295, %95
  %305 = phi i32 [ %303, %298 ], [ %206, %295 ], [ %108, %197 ], [ %5, %95 ]
  ret i32 %305
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort5IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture, %"struct.extensions::declarative_net_request::RegexRuleInfo"* nocapture) unnamed_addr #1 {
  %6 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3)
  %7 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 0, i32 0
  %8 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %7, align 8
  %9 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = sub nsw i64 0, %11
  %13 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %8, i64 0, i32 0, i32 0, i64 %12
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = icmp ugt i16 %15, 4
  br i1 %16, label %17, label %30

17:                                               ; preds = %5
  %18 = getelementptr inbounds i8, i8* %13, i64 4
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i64
  %22 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %8, i64 0, i32 0, i32 0, i64 %21
  %23 = icmp eq i16 %20, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %17
  %25 = bitcast i8* %22 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %22, i64 %27
  %29 = bitcast i8* %28 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %30

30:                                               ; preds = %24, %17, %5
  %31 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %29, %24 ], [ null, %17 ], [ null, %5 ]
  %32 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 0, %34
  %36 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %31, i64 0, i32 0, i32 0, i64 %35
  %37 = bitcast i8* %36 to i16*
  %38 = load i16, i16* %37, align 2
  %39 = icmp ugt i16 %38, 26
  br i1 %39, label %40, label %50

40:                                               ; preds = %30
  %41 = getelementptr inbounds i8, i8* %36, i64 26
  %42 = bitcast i8* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = zext i16 %43 to i64
  %47 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %31, i64 0, i32 0, i32 0, i64 %46
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 8
  br label %50

50:                                               ; preds = %45, %40, %30
  %51 = phi i64 [ %49, %45 ], [ 0, %40 ], [ 0, %30 ]
  %52 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 0
  %53 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %52, align 8
  %54 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = sub nsw i64 0, %56
  %58 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %53, i64 0, i32 0, i32 0, i64 %57
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = icmp ugt i16 %60, 4
  %62 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %53 to i64
  br i1 %61, label %63, label %76

63:                                               ; preds = %50
  %64 = getelementptr inbounds i8, i8* %58, i64 4
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i64
  %68 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %53, i64 0, i32 0, i32 0, i64 %67
  %69 = icmp eq i16 %66, 0
  br i1 %69, label %76, label %70

70:                                               ; preds = %63
  %71 = bitcast i8* %68 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %68, i64 %73
  %75 = bitcast i8* %74 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %76

76:                                               ; preds = %70, %63, %50
  %77 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %75, %70 ], [ null, %63 ], [ null, %50 ]
  %78 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %77, i64 0, i32 0, i32 0, i64 %81
  %83 = bitcast i8* %82 to i16*
  %84 = load i16, i16* %83, align 2
  %85 = icmp ugt i16 %84, 26
  br i1 %85, label %86, label %96

86:                                               ; preds = %76
  %87 = getelementptr inbounds i8, i8* %82, i64 26
  %88 = bitcast i8* %87 to i16*
  %89 = load i16, i16* %88, align 2
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %86
  %92 = zext i16 %89 to i64
  %93 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %77, i64 0, i32 0, i32 0, i64 %92
  %94 = bitcast i8* %93 to i64*
  %95 = load i64, i64* %94, align 8
  br label %96

96:                                               ; preds = %76, %86, %91
  %97 = phi i64 [ %95, %91 ], [ 0, %86 ], [ 0, %76 ]
  %98 = icmp ugt i64 %51, %97
  br i1 %98, label %99, label %403

99:                                               ; preds = %96
  %100 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3 to i64*
  %101 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3, i64 0, i32 1
  %102 = bitcast %"class.re2::RE2"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %3 to i8*
  %105 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #13
  %106 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4 to i64*
  store i64 %62, i64* %106, align 8
  %107 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %4, i64 0, i32 1
  %108 = bitcast %"class.re2::RE2"** %107 to i64*
  store i64 %103, i64* %108, align 8
  %109 = add i32 %6, 1
  %110 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %52, align 8
  %111 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = sub nsw i64 0, %113
  %115 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %110, i64 0, i32 0, i32 0, i64 %114
  %116 = bitcast i8* %115 to i16*
  %117 = load i16, i16* %116, align 2
  %118 = icmp ugt i16 %117, 4
  br i1 %118, label %119, label %132

119:                                              ; preds = %99
  %120 = getelementptr inbounds i8, i8* %115, i64 4
  %121 = bitcast i8* %120 to i16*
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i64
  %124 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %110, i64 0, i32 0, i32 0, i64 %123
  %125 = icmp eq i16 %122, 0
  br i1 %125, label %132, label %126

126:                                              ; preds = %119
  %127 = bitcast i8* %124 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %124, i64 %129
  %131 = bitcast i8* %130 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %132

132:                                              ; preds = %126, %119, %99
  %133 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %131, %126 ], [ null, %119 ], [ null, %99 ]
  %134 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %133 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = sub nsw i64 0, %136
  %138 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %133, i64 0, i32 0, i32 0, i64 %137
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = icmp ugt i16 %140, 26
  br i1 %141, label %142, label %152

142:                                              ; preds = %132
  %143 = getelementptr inbounds i8, i8* %138, i64 26
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = icmp eq i16 %145, 0
  br i1 %146, label %152, label %147

147:                                              ; preds = %142
  %148 = zext i16 %145 to i64
  %149 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %133, i64 0, i32 0, i32 0, i64 %148
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %150, align 8
  br label %152

152:                                              ; preds = %147, %142, %132
  %153 = phi i64 [ %151, %147 ], [ 0, %142 ], [ 0, %132 ]
  %154 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 0
  %155 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %154, align 8
  %156 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = sext i32 %157 to i64
  %159 = sub nsw i64 0, %158
  %160 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %155, i64 0, i32 0, i32 0, i64 %159
  %161 = bitcast i8* %160 to i16*
  %162 = load i16, i16* %161, align 2
  %163 = icmp ugt i16 %162, 4
  %164 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %155 to i64
  br i1 %163, label %165, label %178

165:                                              ; preds = %152
  %166 = getelementptr inbounds i8, i8* %160, i64 4
  %167 = bitcast i8* %166 to i16*
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i64
  %170 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %155, i64 0, i32 0, i32 0, i64 %169
  %171 = icmp eq i16 %168, 0
  br i1 %171, label %178, label %172

172:                                              ; preds = %165
  %173 = bitcast i8* %170 to i32*
  %174 = load i32, i32* %173, align 4
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %170, i64 %175
  %177 = bitcast i8* %176 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %178

178:                                              ; preds = %172, %165, %152
  %179 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %177, %172 ], [ null, %165 ], [ null, %152 ]
  %180 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = sub nsw i64 0, %182
  %184 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %179, i64 0, i32 0, i32 0, i64 %183
  %185 = bitcast i8* %184 to i16*
  %186 = load i16, i16* %185, align 2
  %187 = icmp ugt i16 %186, 26
  br i1 %187, label %188, label %198

188:                                              ; preds = %178
  %189 = getelementptr inbounds i8, i8* %184, i64 26
  %190 = bitcast i8* %189 to i16*
  %191 = load i16, i16* %190, align 2
  %192 = icmp eq i16 %191, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %188
  %194 = zext i16 %191 to i64
  %195 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %179, i64 0, i32 0, i32 0, i64 %194
  %196 = bitcast i8* %195 to i64*
  %197 = load i64, i64* %196, align 8
  br label %198

198:                                              ; preds = %178, %188, %193
  %199 = phi i64 [ %197, %193 ], [ 0, %188 ], [ 0, %178 ]
  %200 = icmp ugt i64 %153, %199
  br i1 %200, label %201, label %403

201:                                              ; preds = %198
  %202 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i64*
  %203 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2, i64 0, i32 1
  %204 = bitcast %"class.re2::RE2"** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 %104, i64 16, i1 false) #13
  store i64 %164, i64* %100, align 8
  store i64 %205, i64* %102, align 8
  %207 = add i32 %6, 2
  %208 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %154, align 8
  %209 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %208 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = sext i32 %210 to i64
  %212 = sub nsw i64 0, %211
  %213 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %208, i64 0, i32 0, i32 0, i64 %212
  %214 = bitcast i8* %213 to i16*
  %215 = load i16, i16* %214, align 2
  %216 = icmp ugt i16 %215, 4
  br i1 %216, label %217, label %230

217:                                              ; preds = %201
  %218 = getelementptr inbounds i8, i8* %213, i64 4
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i64
  %222 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %208, i64 0, i32 0, i32 0, i64 %221
  %223 = icmp eq i16 %220, 0
  br i1 %223, label %230, label %224

224:                                              ; preds = %217
  %225 = bitcast i8* %222 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds i8, i8* %222, i64 %227
  %229 = bitcast i8* %228 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %230

230:                                              ; preds = %224, %217, %201
  %231 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %229, %224 ], [ null, %217 ], [ null, %201 ]
  %232 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %231 to i32*
  %233 = load i32, i32* %232, align 4
  %234 = sext i32 %233 to i64
  %235 = sub nsw i64 0, %234
  %236 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %231, i64 0, i32 0, i32 0, i64 %235
  %237 = bitcast i8* %236 to i16*
  %238 = load i16, i16* %237, align 2
  %239 = icmp ugt i16 %238, 26
  br i1 %239, label %240, label %250

240:                                              ; preds = %230
  %241 = getelementptr inbounds i8, i8* %236, i64 26
  %242 = bitcast i8* %241 to i16*
  %243 = load i16, i16* %242, align 2
  %244 = icmp eq i16 %243, 0
  br i1 %244, label %250, label %245

245:                                              ; preds = %240
  %246 = zext i16 %243 to i64
  %247 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %231, i64 0, i32 0, i32 0, i64 %246
  %248 = bitcast i8* %247 to i64*
  %249 = load i64, i64* %248, align 8
  br label %250

250:                                              ; preds = %245, %240, %230
  %251 = phi i64 [ %249, %245 ], [ 0, %240 ], [ 0, %230 ]
  %252 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 0
  %253 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %252, align 8
  %254 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %255 to i64
  %257 = sub nsw i64 0, %256
  %258 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %253, i64 0, i32 0, i32 0, i64 %257
  %259 = bitcast i8* %258 to i16*
  %260 = load i16, i16* %259, align 2
  %261 = icmp ugt i16 %260, 4
  %262 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %253 to i64
  br i1 %261, label %263, label %276

263:                                              ; preds = %250
  %264 = getelementptr inbounds i8, i8* %258, i64 4
  %265 = bitcast i8* %264 to i16*
  %266 = load i16, i16* %265, align 2
  %267 = zext i16 %266 to i64
  %268 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %253, i64 0, i32 0, i32 0, i64 %267
  %269 = icmp eq i16 %266, 0
  br i1 %269, label %276, label %270

270:                                              ; preds = %263
  %271 = bitcast i8* %268 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %268, i64 %273
  %275 = bitcast i8* %274 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %276

276:                                              ; preds = %270, %263, %250
  %277 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %275, %270 ], [ null, %263 ], [ null, %250 ]
  %278 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %277 to i32*
  %279 = load i32, i32* %278, align 4
  %280 = sext i32 %279 to i64
  %281 = sub nsw i64 0, %280
  %282 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %277, i64 0, i32 0, i32 0, i64 %281
  %283 = bitcast i8* %282 to i16*
  %284 = load i16, i16* %283, align 2
  %285 = icmp ugt i16 %284, 26
  br i1 %285, label %286, label %296

286:                                              ; preds = %276
  %287 = getelementptr inbounds i8, i8* %282, i64 26
  %288 = bitcast i8* %287 to i16*
  %289 = load i16, i16* %288, align 2
  %290 = icmp eq i16 %289, 0
  br i1 %290, label %296, label %291

291:                                              ; preds = %286
  %292 = zext i16 %289 to i64
  %293 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %277, i64 0, i32 0, i32 0, i64 %292
  %294 = bitcast i8* %293 to i64*
  %295 = load i64, i64* %294, align 8
  br label %296

296:                                              ; preds = %276, %286, %291
  %297 = phi i64 [ %295, %291 ], [ 0, %286 ], [ 0, %276 ]
  %298 = icmp ugt i64 %251, %297
  br i1 %298, label %299, label %403

299:                                              ; preds = %296
  %300 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i64*
  %301 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 0, i32 1
  %302 = bitcast %"class.re2::RE2"** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %304, i8* align 8 %206, i64 16, i1 false) #13
  store i64 %262, i64* %202, align 8
  store i64 %303, i64* %204, align 8
  %305 = add i32 %6, 3
  %306 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %252, align 8
  %307 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %306 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = sext i32 %308 to i64
  %310 = sub nsw i64 0, %309
  %311 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %306, i64 0, i32 0, i32 0, i64 %310
  %312 = bitcast i8* %311 to i16*
  %313 = load i16, i16* %312, align 2
  %314 = icmp ugt i16 %313, 4
  br i1 %314, label %315, label %328

315:                                              ; preds = %299
  %316 = getelementptr inbounds i8, i8* %311, i64 4
  %317 = bitcast i8* %316 to i16*
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i64
  %320 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %306, i64 0, i32 0, i32 0, i64 %319
  %321 = icmp eq i16 %318, 0
  br i1 %321, label %328, label %322

322:                                              ; preds = %315
  %323 = bitcast i8* %320 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds i8, i8* %320, i64 %325
  %327 = bitcast i8* %326 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %328

328:                                              ; preds = %322, %315, %299
  %329 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %327, %322 ], [ null, %315 ], [ null, %299 ]
  %330 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %329 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = sext i32 %331 to i64
  %333 = sub nsw i64 0, %332
  %334 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %329, i64 0, i32 0, i32 0, i64 %333
  %335 = bitcast i8* %334 to i16*
  %336 = load i16, i16* %335, align 2
  %337 = icmp ugt i16 %336, 26
  br i1 %337, label %338, label %348

338:                                              ; preds = %328
  %339 = getelementptr inbounds i8, i8* %334, i64 26
  %340 = bitcast i8* %339 to i16*
  %341 = load i16, i16* %340, align 2
  %342 = icmp eq i16 %341, 0
  br i1 %342, label %348, label %343

343:                                              ; preds = %338
  %344 = zext i16 %341 to i64
  %345 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %329, i64 0, i32 0, i32 0, i64 %344
  %346 = bitcast i8* %345 to i64*
  %347 = load i64, i64* %346, align 8
  br label %348

348:                                              ; preds = %343, %338, %328
  %349 = phi i64 [ %347, %343 ], [ 0, %338 ], [ 0, %328 ]
  %350 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 0
  %351 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %350, align 8
  %352 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %351 to i32*
  %353 = load i32, i32* %352, align 4
  %354 = sext i32 %353 to i64
  %355 = sub nsw i64 0, %354
  %356 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %351, i64 0, i32 0, i32 0, i64 %355
  %357 = bitcast i8* %356 to i16*
  %358 = load i16, i16* %357, align 2
  %359 = icmp ugt i16 %358, 4
  %360 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %351 to i64
  br i1 %359, label %361, label %374

361:                                              ; preds = %348
  %362 = getelementptr inbounds i8, i8* %356, i64 4
  %363 = bitcast i8* %362 to i16*
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i64
  %366 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %351, i64 0, i32 0, i32 0, i64 %365
  %367 = icmp eq i16 %364, 0
  br i1 %367, label %374, label %368

368:                                              ; preds = %361
  %369 = bitcast i8* %366 to i32*
  %370 = load i32, i32* %369, align 4
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %366, i64 %371
  %373 = bitcast i8* %372 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %374

374:                                              ; preds = %368, %361, %348
  %375 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %373, %368 ], [ null, %361 ], [ null, %348 ]
  %376 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %375 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = sext i32 %377 to i64
  %379 = sub nsw i64 0, %378
  %380 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %375, i64 0, i32 0, i32 0, i64 %379
  %381 = bitcast i8* %380 to i16*
  %382 = load i16, i16* %381, align 2
  %383 = icmp ugt i16 %382, 26
  br i1 %383, label %384, label %394

384:                                              ; preds = %374
  %385 = getelementptr inbounds i8, i8* %380, i64 26
  %386 = bitcast i8* %385 to i16*
  %387 = load i16, i16* %386, align 2
  %388 = icmp eq i16 %387, 0
  br i1 %388, label %394, label %389

389:                                              ; preds = %384
  %390 = zext i16 %387 to i64
  %391 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %375, i64 0, i32 0, i32 0, i64 %390
  %392 = bitcast i8* %391 to i64*
  %393 = load i64, i64* %392, align 8
  br label %394

394:                                              ; preds = %374, %384, %389
  %395 = phi i64 [ %393, %389 ], [ 0, %384 ], [ 0, %374 ]
  %396 = icmp ugt i64 %349, %395
  br i1 %396, label %397, label %403

397:                                              ; preds = %394
  %398 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  %399 = bitcast %"class.re2::RE2"** %398 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %401, i8* align 8 %304, i64 16, i1 false) #13
  store i64 %360, i64* %300, align 8
  store i64 %400, i64* %302, align 8
  %402 = add i32 %6, 4
  br label %403

403:                                              ; preds = %198, %394, %397, %296, %96
  %404 = phi i32 [ %402, %397 ], [ %305, %394 ], [ %207, %296 ], [ %109, %198 ], [ %6, %96 ]
  ret i32 %404
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEbT0_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"*, %"struct.extensions::declarative_net_request::RegexRuleInfo"*) unnamed_addr #1 {
  %3 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1 to i64
  %4 = ptrtoint %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i64
  %5 = sub i64 %3, %4
  %6 = ashr exact i64 %5, 4
  switch i64 %6, label %125 [
    i64 0, label %340
    i64 1, label %340
    i64 2, label %7
    i64 3, label %110
    i64 4, label %114
    i64 5, label %119
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 -1
  %9 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %8, i64 0, i32 0
  %10 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %9, align 8
  %11 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = sub nsw i64 0, %13
  %15 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %10, i64 0, i32 0, i32 0, i64 %14
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = icmp ugt i16 %17, 4
  br i1 %18, label %19, label %32

19:                                               ; preds = %7
  %20 = getelementptr inbounds i8, i8* %15, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i64
  %24 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %10, i64 0, i32 0, i32 0, i64 %23
  %25 = icmp eq i16 %22, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %19
  %27 = bitcast i8* %24 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = bitcast i8* %30 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %32

32:                                               ; preds = %26, %19, %7
  %33 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %31, %26 ], [ null, %19 ], [ null, %7 ]
  %34 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %33, i64 0, i32 0, i32 0, i64 %37
  %39 = bitcast i8* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = icmp ugt i16 %40, 26
  br i1 %41, label %42, label %52

42:                                               ; preds = %32
  %43 = getelementptr inbounds i8, i8* %38, i64 26
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = zext i16 %45 to i64
  %49 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %33, i64 0, i32 0, i32 0, i64 %48
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %47, %42, %32
  %53 = phi i64 [ %51, %47 ], [ 0, %42 ], [ 0, %32 ]
  %54 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 0
  %55 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %54, align 8
  %56 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  %59 = sub nsw i64 0, %58
  %60 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %55, i64 0, i32 0, i32 0, i64 %59
  %61 = bitcast i8* %60 to i16*
  %62 = load i16, i16* %61, align 2
  %63 = icmp ugt i16 %62, 4
  %64 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %55 to i64
  br i1 %63, label %65, label %78

65:                                               ; preds = %52
  %66 = getelementptr inbounds i8, i8* %60, i64 4
  %67 = bitcast i8* %66 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i64
  %70 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %55, i64 0, i32 0, i32 0, i64 %69
  %71 = icmp eq i16 %68, 0
  br i1 %71, label %78, label %72

72:                                               ; preds = %65
  %73 = bitcast i8* %70 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %70, i64 %75
  %77 = bitcast i8* %76 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %78

78:                                               ; preds = %72, %65, %52
  %79 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %77, %72 ], [ null, %65 ], [ null, %52 ]
  %80 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %79, i64 0, i32 0, i32 0, i64 %83
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = icmp ugt i16 %86, 26
  br i1 %87, label %88, label %98

88:                                               ; preds = %78
  %89 = getelementptr inbounds i8, i8* %84, i64 26
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %88
  %94 = zext i16 %91 to i64
  %95 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %79, i64 0, i32 0, i32 0, i64 %94
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 8
  br label %98

98:                                               ; preds = %78, %88, %93
  %99 = phi i64 [ %97, %93 ], [ 0, %88 ], [ 0, %78 ]
  %100 = icmp ugt i64 %53, %99
  br i1 %100, label %101, label %340

101:                                              ; preds = %98
  %102 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 0, i32 1
  %103 = bitcast %"class.re2::RE2"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0 to i8*
  %106 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false) #13
  %107 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %8 to i64*
  store i64 %64, i64* %107, align 8
  %108 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 -1, i32 1
  %109 = bitcast %"class.re2::RE2"** %108 to i64*
  store i64 %104, i64* %109, align 8
  br label %340

110:                                              ; preds = %2
  %111 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 1
  %112 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 -1
  %113 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %111, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %112)
  br label %340

114:                                              ; preds = %2
  %115 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 1
  %116 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 2
  %117 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 -1
  %118 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %115, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %116, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %117)
  br label %340

119:                                              ; preds = %2
  %120 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 1
  %121 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 2
  %122 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 3
  %123 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %1, i64 -1
  %124 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %120, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %121, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %122, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %123)
  br label %340

125:                                              ; preds = %2
  %126 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 2
  %127 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 1
  %128 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZNK10extensions23declarative_net_request17RegexRulesMatcher19GetPotentialMatchesERKNS2_13RequestParamsEE3$_2PNS2_13RegexRuleInfoEEEjT0_SB_SB_T_"(%"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %127, %"struct.extensions::declarative_net_request::RegexRuleInfo"* %126)
  %129 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %0, i64 3
  %130 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %129, %1
  br i1 %130, label %340, label %131

131:                                              ; preds = %125, %333
  %132 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %335, %333 ], [ %129, %125 ]
  %133 = phi i32 [ %334, %333 ], [ 0, %125 ]
  %134 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %132, %333 ], [ %126, %125 ]
  %135 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %132, i64 0, i32 0
  %136 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %135, align 8
  %137 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  %140 = sub nsw i64 0, %139
  %141 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %136, i64 0, i32 0, i32 0, i64 %140
  %142 = bitcast i8* %141 to i16*
  %143 = load i16, i16* %142, align 2
  %144 = icmp ugt i16 %143, 4
  br i1 %144, label %145, label %158

145:                                              ; preds = %131
  %146 = getelementptr inbounds i8, i8* %141, i64 4
  %147 = bitcast i8* %146 to i16*
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i64
  %150 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %136, i64 0, i32 0, i32 0, i64 %149
  %151 = icmp eq i16 %148, 0
  br i1 %151, label %158, label %152

152:                                              ; preds = %145
  %153 = bitcast i8* %150 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %150, i64 %155
  %157 = bitcast i8* %156 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %158

158:                                              ; preds = %152, %145, %131
  %159 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %157, %152 ], [ null, %145 ], [ null, %131 ]
  %160 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = sext i32 %161 to i64
  %163 = sub nsw i64 0, %162
  %164 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %159, i64 0, i32 0, i32 0, i64 %163
  %165 = bitcast i8* %164 to i16*
  %166 = load i16, i16* %165, align 2
  %167 = icmp ugt i16 %166, 26
  br i1 %167, label %168, label %178

168:                                              ; preds = %158
  %169 = getelementptr inbounds i8, i8* %164, i64 26
  %170 = bitcast i8* %169 to i16*
  %171 = load i16, i16* %170, align 2
  %172 = icmp eq i16 %171, 0
  br i1 %172, label %178, label %173

173:                                              ; preds = %168
  %174 = zext i16 %171 to i64
  %175 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %159, i64 0, i32 0, i32 0, i64 %174
  %176 = bitcast i8* %175 to i64*
  %177 = load i64, i64* %176, align 8
  br label %178

178:                                              ; preds = %173, %168, %158
  %179 = phi i64 [ %177, %173 ], [ 0, %168 ], [ 0, %158 ]
  %180 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %134, i64 0, i32 0
  %181 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %180, align 8
  %182 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = sext i32 %183 to i64
  %185 = sub nsw i64 0, %184
  %186 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %181, i64 0, i32 0, i32 0, i64 %185
  %187 = bitcast i8* %186 to i16*
  %188 = load i16, i16* %187, align 2
  %189 = icmp ugt i16 %188, 4
  br i1 %189, label %190, label %203

190:                                              ; preds = %178
  %191 = getelementptr inbounds i8, i8* %186, i64 4
  %192 = bitcast i8* %191 to i16*
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i64
  %195 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %181, i64 0, i32 0, i32 0, i64 %194
  %196 = icmp eq i16 %193, 0
  br i1 %196, label %203, label %197

197:                                              ; preds = %190
  %198 = bitcast i8* %195 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %195, i64 %200
  %202 = bitcast i8* %201 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %203

203:                                              ; preds = %197, %190, %178
  %204 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %202, %197 ], [ null, %190 ], [ null, %178 ]
  %205 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = sext i32 %206 to i64
  %208 = sub nsw i64 0, %207
  %209 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %204, i64 0, i32 0, i32 0, i64 %208
  %210 = bitcast i8* %209 to i16*
  %211 = load i16, i16* %210, align 2
  %212 = icmp ugt i16 %211, 26
  br i1 %212, label %213, label %223

213:                                              ; preds = %203
  %214 = getelementptr inbounds i8, i8* %209, i64 26
  %215 = bitcast i8* %214 to i16*
  %216 = load i16, i16* %215, align 2
  %217 = icmp eq i16 %216, 0
  br i1 %217, label %223, label %218

218:                                              ; preds = %213
  %219 = zext i16 %216 to i64
  %220 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %204, i64 0, i32 0, i32 0, i64 %219
  %221 = bitcast i8* %220 to i64*
  %222 = load i64, i64* %221, align 8
  br label %223

223:                                              ; preds = %203, %213, %218
  %224 = phi i64 [ %222, %218 ], [ 0, %213 ], [ 0, %203 ]
  %225 = icmp ugt i64 %179, %224
  br i1 %225, label %226, label %333

226:                                              ; preds = %223
  %227 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %132, i64 0, i32 1
  %228 = bitcast %"class.re2::RE2"** %227 to i64*
  %229 = load i64, i64* %228, align 8
  br label %230

230:                                              ; preds = %323, %226
  %231 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %132, %226 ], [ %232, %323 ]
  %232 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %134, %226 ], [ %237, %323 ]
  %233 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %231 to i8*
  %234 = bitcast %"struct.extensions::declarative_net_request::RegexRuleInfo"* %232 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 16, i1 false) #13
  %235 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %232, %0
  br i1 %235, label %326, label %236

236:                                              ; preds = %230
  %237 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %232, i64 -1
  %238 = load i32, i32* %137, align 4
  %239 = sext i32 %238 to i64
  %240 = sub nsw i64 0, %239
  %241 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %136, i64 0, i32 0, i32 0, i64 %240
  %242 = bitcast i8* %241 to i16*
  %243 = load i16, i16* %242, align 2
  %244 = icmp ugt i16 %243, 4
  br i1 %244, label %245, label %258

245:                                              ; preds = %236
  %246 = getelementptr inbounds i8, i8* %241, i64 4
  %247 = bitcast i8* %246 to i16*
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i64
  %250 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %136, i64 0, i32 0, i32 0, i64 %249
  %251 = icmp eq i16 %248, 0
  br i1 %251, label %258, label %252

252:                                              ; preds = %245
  %253 = bitcast i8* %250 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %250, i64 %255
  %257 = bitcast i8* %256 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %258

258:                                              ; preds = %252, %245, %236
  %259 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %257, %252 ], [ null, %245 ], [ null, %236 ]
  %260 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %259 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = sext i32 %261 to i64
  %263 = sub nsw i64 0, %262
  %264 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %259, i64 0, i32 0, i32 0, i64 %263
  %265 = bitcast i8* %264 to i16*
  %266 = load i16, i16* %265, align 2
  %267 = icmp ugt i16 %266, 26
  br i1 %267, label %268, label %278

268:                                              ; preds = %258
  %269 = getelementptr inbounds i8, i8* %264, i64 26
  %270 = bitcast i8* %269 to i16*
  %271 = load i16, i16* %270, align 2
  %272 = icmp eq i16 %271, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %268
  %274 = zext i16 %271 to i64
  %275 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %259, i64 0, i32 0, i32 0, i64 %274
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 8
  br label %278

278:                                              ; preds = %273, %268, %258
  %279 = phi i64 [ %277, %273 ], [ 0, %268 ], [ 0, %258 ]
  %280 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %237, i64 0, i32 0
  %281 = load %"struct.extensions::declarative_net_request::flat::RegexRule"*, %"struct.extensions::declarative_net_request::flat::RegexRule"** %280, align 8
  %282 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %281 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = sub nsw i64 0, %284
  %286 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %281, i64 0, i32 0, i32 0, i64 %285
  %287 = bitcast i8* %286 to i16*
  %288 = load i16, i16* %287, align 2
  %289 = icmp ugt i16 %288, 4
  br i1 %289, label %290, label %303

290:                                              ; preds = %278
  %291 = getelementptr inbounds i8, i8* %286, i64 4
  %292 = bitcast i8* %291 to i16*
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i64
  %295 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %281, i64 0, i32 0, i32 0, i64 %294
  %296 = icmp eq i16 %293, 0
  br i1 %296, label %303, label %297

297:                                              ; preds = %290
  %298 = bitcast i8* %295 to i32*
  %299 = load i32, i32* %298, align 4
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds i8, i8* %295, i64 %300
  %302 = bitcast i8* %301 to %"struct.url_pattern_index::flat::UrlRule"*
  br label %303

303:                                              ; preds = %297, %290, %278
  %304 = phi %"struct.url_pattern_index::flat::UrlRule"* [ %302, %297 ], [ null, %290 ], [ null, %278 ]
  %305 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %304 to i32*
  %306 = load i32, i32* %305, align 4
  %307 = sext i32 %306 to i64
  %308 = sub nsw i64 0, %307
  %309 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %304, i64 0, i32 0, i32 0, i64 %308
  %310 = bitcast i8* %309 to i16*
  %311 = load i16, i16* %310, align 2
  %312 = icmp ugt i16 %311, 26
  br i1 %312, label %313, label %323

313:                                              ; preds = %303
  %314 = getelementptr inbounds i8, i8* %309, i64 26
  %315 = bitcast i8* %314 to i16*
  %316 = load i16, i16* %315, align 2
  %317 = icmp eq i16 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %313
  %319 = zext i16 %316 to i64
  %320 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %304, i64 0, i32 0, i32 0, i64 %319
  %321 = bitcast i8* %320 to i64*
  %322 = load i64, i64* %321, align 8
  br label %323

323:                                              ; preds = %303, %313, %318
  %324 = phi i64 [ %322, %318 ], [ 0, %313 ], [ 0, %303 ]
  %325 = icmp ugt i64 %279, %324
  br i1 %325, label %230, label %326

326:                                              ; preds = %230, %323
  %327 = phi %"struct.extensions::declarative_net_request::RegexRuleInfo"* [ %0, %230 ], [ %232, %323 ]
  %328 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %327, i64 0, i32 0
  store %"struct.extensions::declarative_net_request::flat::RegexRule"* %136, %"struct.extensions::declarative_net_request::flat::RegexRule"** %328, align 8
  %329 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %327, i64 0, i32 1
  %330 = bitcast %"class.re2::RE2"** %329 to i64*
  store i64 %229, i64* %330, align 8
  %331 = add i32 %133, 1
  %332 = icmp eq i32 %331, 8
  br i1 %332, label %337, label %333

333:                                              ; preds = %326, %223
  %334 = phi i32 [ %331, %326 ], [ %133, %223 ]
  %335 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %132, i64 1
  %336 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %335, %1
  br i1 %336, label %340, label %131

337:                                              ; preds = %326
  %338 = getelementptr inbounds %"struct.extensions::declarative_net_request::RegexRuleInfo", %"struct.extensions::declarative_net_request::RegexRuleInfo"* %132, i64 1
  %339 = icmp eq %"struct.extensions::declarative_net_request::RegexRuleInfo"* %338, %1
  br label %340

340:                                              ; preds = %333, %337, %125, %98, %101, %2, %2, %119, %114, %110
  %341 = phi i1 [ true, %119 ], [ true, %114 ], [ true, %110 ], [ true, %2 ], [ true, %2 ], [ true, %101 ], [ true, %98 ], [ true, %125 ], [ %339, %337 ], [ true, %333 ]
  ret i1 %341
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !11
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #14
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #13
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK11flatbuffers6VectorINS_6OffsetIN10extensions23declarative_net_request4flat9RegexRuleEEEE3endEv: argument 0"}
!4 = distinct !{!4, !"_ZNK11flatbuffers6VectorINS_6OffsetIN10extensions23declarative_net_request4flat9RegexRuleEEEE3endEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE16__construct_nodeIJNS_4pairIKiS7_EEEEENS_10unique_ptrINS_11__tree_nodeIS8_PvEENS_22__tree_node_destructorINSD_ISN_EEEEEEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__16__treeINS_12__value_typeIiPKN10extensions23declarative_net_request4flat9RegexRuleEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS_9allocatorIS8_EEE16__construct_nodeIJNS_4pairIKiS7_EEEEENS_10unique_ptrINS_11__tree_nodeIS8_PvEENS_22__tree_node_destructorINSD_ISN_EEEEEEDpOT_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__19make_pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS2_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__19make_pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS2_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_"}
!11 = !{i8 0, i8 2}
!12 = !{!"branch_weights", i32 1, i32 2000}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNSt3__19make_pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS2_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__19make_pairIPKN10extensions23declarative_net_request17RegexRulesMatcherENS_6vectorINS2_13RegexRuleInfoENS_9allocatorIS7_EEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_"}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
