; ModuleID = '../../third_party/s2cellid/src/s2/s2coords.cc'
source_filename = "../../third_party/s2cellid/src/s2/s2coords.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.Vector3 = type { [3 x double] }

@_ZN2S28internal8kIJtoPosE = hidden local_unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 0, i32 1, i32 3, i32 2], [4 x i32] [i32 0, i32 3, i32 1, i32 2], [4 x i32] [i32 2, i32 3, i32 1, i32 0], [4 x i32] [i32 2, i32 1, i32 3, i32 0]], align 16
@_ZN2S28internal8kPosToIJE = hidden local_unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 0, i32 1, i32 3, i32 2], [4 x i32] [i32 0, i32 2, i32 3, i32 1], [4 x i32] [i32 3, i32 2, i32 0, i32 1], [4 x i32] [i32 3, i32 1, i32 0, i32 2]], align 16
@_ZN2S28internal17kPosToOrientationE = hidden local_unnamed_addr constant [4 x i32] [i32 1, i32 0, i32 0, i32 3], align 16
@_ZN2S28internal13kFaceUVWFacesE = hidden local_unnamed_addr constant [6 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 4, i32 1], [2 x i32] [i32 5, i32 2], [2 x i32] [i32 3, i32 0]], [3 x [2 x i32]] [[2 x i32] [i32 0, i32 3], [2 x i32] [i32 5, i32 2], [2 x i32] [i32 4, i32 1]], [3 x [2 x i32]] [[2 x i32] [i32 0, i32 3], [2 x i32] [i32 1, i32 4], [2 x i32] [i32 5, i32 2]], [3 x [2 x i32]] [[2 x i32] [i32 2, i32 5], [2 x i32] [i32 1, i32 4], [2 x i32] [i32 0, i32 3]], [3 x [2 x i32]] [[2 x i32] [i32 2, i32 5], [2 x i32] [i32 3, i32 0], [2 x i32] [i32 1, i32 4]], [3 x [2 x i32]] [[2 x i32] [i32 4, i32 1], [2 x i32] [i32 3, i32 0], [2 x i32] [i32 2, i32 5]]], align 16
@_ZN2S28internal12kFaceUVWAxesE = hidden local_unnamed_addr constant [6 x [3 x [3 x double]]] [[3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00]], [3 x [3 x double]] [[3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00]], [3 x [3 x double]] [[3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00]], [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00]], [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00]], [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00]]], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2S212FaceXYZtoUVWEiRK7Vector3IdE(%class.Vector3* noalias nocapture sret, i32, %class.Vector3* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  switch i32 %1, label %58 [
    i32 0, label %4
    i32 1, label %13
    i32 2, label %24
    i32 3, label %34
    i32 4, label %45
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 1
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = bitcast %class.Vector3* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.Vector3* %0 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %10, align 8
  %11 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  %12 = bitcast double* %11 to i64*
  store i64 %9, i64* %12, align 8
  br label %67

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 0
  %15 = load double, double* %14, align 8
  %16 = fsub double -0.000000e+00, %15
  %17 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 1
  %18 = bitcast double* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %21 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 0
  store double %16, double* %21, align 8
  %22 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 1
  %23 = bitcast double* %22 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %23, align 8
  br label %67

24:                                               ; preds = %3
  %25 = bitcast %class.Vector3* %2 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %26
  %28 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 2
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %class.Vector3* %0 to <2 x double>*
  store <2 x double> %27, <2 x double>* %31, align 8
  %32 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  %33 = bitcast double* %32 to i64*
  store i64 %30, i64* %33, align 8
  br label %67

34:                                               ; preds = %3
  %35 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 1
  %36 = bitcast double* %35 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %37
  %39 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %40 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 0
  %41 = load double, double* %40, align 8
  %42 = fsub double -0.000000e+00, %41
  %43 = bitcast %class.Vector3* %0 to <2 x double>*
  store <2 x double> %39, <2 x double>* %43, align 8
  %44 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  store double %42, double* %44, align 8
  br label %67

45:                                               ; preds = %3
  %46 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 2
  %47 = load double, double* %46, align 8
  %48 = fsub double -0.000000e+00, %47
  %49 = bitcast %class.Vector3* %2 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 1
  %52 = load double, double* %51, align 8
  %53 = fsub double -0.000000e+00, %52
  %54 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 0
  store double %48, double* %54, align 8
  %55 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 1
  %56 = bitcast double* %55 to i64*
  store i64 %50, i64* %56, align 8
  %57 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  store double %53, double* %57, align 8
  br label %67

58:                                               ; preds = %3
  %59 = bitcast %class.Vector3* %2 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 8
  %61 = shufflevector <2 x i64> %60, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %62 = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i64 0, i32 0, i64 2
  %63 = load double, double* %62, align 8
  %64 = fsub double -0.000000e+00, %63
  %65 = bitcast %class.Vector3* %0 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %65, align 8
  %66 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  store double %64, double* %66, align 8
  br label %67

67:                                               ; preds = %58, %45, %34, %24, %13, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2S213XYZtoFaceSiTiERK7Vector3IdEPiPjS5_(%class.Vector3* nocapture readonly dereferenceable(24), i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 0
  %6 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 1
  %7 = bitcast %class.Vector3* %0 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8, !noalias !2
  %9 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %8)
  %10 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  %11 = load double, double* %10, align 8, !noalias !2
  %12 = tail call double @llvm.fabs.f64(double %11) #5
  %13 = extractelement <2 x double> %9, i32 0
  %14 = extractelement <2 x double> %9, i32 1
  %15 = fcmp ogt double %13, %14
  %16 = fcmp ogt double %13, %12
  %17 = select i1 %16, i32 0, i32 2
  %18 = fcmp ogt double %14, %12
  %19 = select i1 %18, i32 1, i32 2
  %20 = select i1 %15, i32 %17, i32 %19
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fcmp olt double %23, 0.000000e+00
  %25 = add nuw nsw i32 %20, 3
  %26 = select i1 %24, i32 %25, i32 %20
  switch i32 %26, label %57 [
    i32 0, label %27
    i32 1, label %31
    i32 2, label %38
    i32 3, label %44
    i32 4, label %50
  ]

27:                                               ; preds = %4
  %28 = insertelement <2 x double> %8, double %11, i32 0
  %29 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %30 = fdiv <2 x double> %28, %29
  br label %62

31:                                               ; preds = %4
  %32 = extractelement <2 x double> %8, i32 0
  %33 = fsub double -0.000000e+00, %32
  %34 = insertelement <2 x double> undef, double %11, i32 0
  %35 = insertelement <2 x double> %34, double %33, i32 1
  %36 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %37 = fdiv <2 x double> %35, %36
  br label %62

38:                                               ; preds = %4
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %8
  %40 = shufflevector <2 x double> %39, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %41 = insertelement <2 x double> undef, double %11, i32 0
  %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> zeroinitializer
  %43 = fdiv <2 x double> %40, %42
  br label %62

44:                                               ; preds = %4
  %45 = extractelement <2 x double> %8, i32 1
  %46 = insertelement <2 x double> undef, double %45, i32 0
  %47 = insertelement <2 x double> %46, double %11, i32 1
  %48 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %49 = fdiv <2 x double> %47, %48
  br label %62

50:                                               ; preds = %4
  %51 = extractelement <2 x double> %8, i32 0
  %52 = fsub double -0.000000e+00, %51
  %53 = insertelement <2 x double> undef, double %52, i32 0
  %54 = insertelement <2 x double> %53, double %11, i32 1
  %55 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %56 = fdiv <2 x double> %54, %55
  br label %62

57:                                               ; preds = %4
  %58 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %8
  %59 = insertelement <2 x double> undef, double %11, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = fdiv <2 x double> %58, %60
  br label %62

62:                                               ; preds = %27, %31, %38, %44, %50, %57
  %63 = phi <2 x double> [ %61, %57 ], [ %56, %50 ], [ %49, %44 ], [ %43, %38 ], [ %37, %31 ], [ %30, %27 ]
  store i32 %26, i32* %1, align 4
  %64 = extractelement <2 x double> %63, i32 1
  %65 = fcmp ult double %64, 0.000000e+00
  %66 = fmul double %64, 3.000000e+00
  br i1 %65, label %71, label %67

67:                                               ; preds = %62
  %68 = fadd double %66, 1.000000e+00
  %69 = tail call double @sqrt(double %68) #5
  %70 = fmul double %69, 5.000000e-01
  br label %76

71:                                               ; preds = %62
  %72 = fsub double 1.000000e+00, %66
  %73 = tail call double @sqrt(double %72) #5
  %74 = fmul double %73, 5.000000e-01
  %75 = fsub double 1.000000e+00, %74
  br label %76

76:                                               ; preds = %67, %71
  %77 = phi double [ %70, %67 ], [ %75, %71 ]
  %78 = fmul double %77, 0x41E0000000000000
  %79 = tail call i64 asm sideeffect "cvtsd2si $1, $0", "=r,x,~{dirflag},~{fpsr},~{flags}"(double %78) #5, !srcloc !5
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %2, align 4
  %81 = extractelement <2 x double> %63, i32 0
  %82 = fcmp ult double %81, 0.000000e+00
  %83 = fmul double %81, 3.000000e+00
  br i1 %82, label %88, label %84

84:                                               ; preds = %76
  %85 = fadd double %83, 1.000000e+00
  %86 = tail call double @sqrt(double %85) #5
  %87 = fmul double %86, 5.000000e-01
  br label %93

88:                                               ; preds = %76
  %89 = fsub double 1.000000e+00, %83
  %90 = tail call double @sqrt(double %89) #5
  %91 = fmul double %90, 5.000000e-01
  %92 = fsub double 1.000000e+00, %91
  br label %93

93:                                               ; preds = %84, %88
  %94 = phi double [ %87, %84 ], [ %92, %88 ]
  %95 = fmul double %94, 0x41E0000000000000
  %96 = tail call i64 asm sideeffect "cvtsd2si $1, $0", "=r,x,~{dirflag},~{fpsr},~{flags}"(double %95) #5, !srcloc !5
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %3, align 4
  %98 = load i32, i32* %2, align 4
  %99 = or i32 %98, -2147483648
  %100 = tail call i32 @llvm.cttz.i32(i32 %99, i1 true) #5, !range !6
  %101 = sub nsw i32 30, %100
  %102 = icmp eq i32 %100, 31
  br i1 %102, label %177, label %103

103:                                              ; preds = %93
  %104 = or i32 %97, -2147483648
  %105 = tail call i32 @llvm.cttz.i32(i32 %104, i1 true) #5, !range !6
  %106 = sub nsw i32 30, %105
  %107 = icmp eq i32 %101, %106
  br i1 %107, label %108, label %177

108:                                              ; preds = %103
  %109 = load i32, i32* %1, align 4
  %110 = uitofp i32 %98 to double
  %111 = fmul double %110, 0x3E00000000000000
  %112 = fcmp ult double %111, 5.000000e-01
  br i1 %112, label %117, label %113

113:                                              ; preds = %108
  %114 = fmul double %111, 4.000000e+00
  %115 = fmul double %111, %114
  %116 = fadd double %115, -1.000000e+00
  br label %122

117:                                              ; preds = %108
  %118 = fsub double 1.000000e+00, %111
  %119 = fmul double %118, 4.000000e+00
  %120 = fmul double %118, %119
  %121 = fsub double 1.000000e+00, %120
  br label %122

122:                                              ; preds = %117, %113
  %123 = phi double [ %116, %113 ], [ %121, %117 ]
  %124 = fmul double %123, 0x3FD5555555555555
  %125 = uitofp i32 %97 to double
  %126 = fmul double %125, 0x3E00000000000000
  %127 = fcmp ult double %126, 5.000000e-01
  br i1 %127, label %132, label %128

128:                                              ; preds = %122
  %129 = fmul double %126, 4.000000e+00
  %130 = fmul double %126, %129
  %131 = fadd double %130, -1.000000e+00
  br label %137

132:                                              ; preds = %122
  %133 = fsub double 1.000000e+00, %126
  %134 = fmul double %133, 4.000000e+00
  %135 = fmul double %133, %134
  %136 = fsub double 1.000000e+00, %135
  br label %137

137:                                              ; preds = %132, %128
  %138 = phi double [ %131, %128 ], [ %136, %132 ]
  %139 = fmul double %138, 0x3FD5555555555555
  switch i32 %109, label %150 [
    i32 0, label %151
    i32 1, label %140
    i32 2, label %142
    i32 3, label %145
    i32 4, label %148
  ]

140:                                              ; preds = %137
  %141 = fsub double -0.000000e+00, %124
  br label %151

142:                                              ; preds = %137
  %143 = fsub double -0.000000e+00, %124
  %144 = fsub double -0.000000e+00, %139
  br label %151

145:                                              ; preds = %137
  %146 = fsub double -0.000000e+00, %139
  %147 = fsub double -0.000000e+00, %124
  br label %151

148:                                              ; preds = %137
  %149 = fsub double -0.000000e+00, %124
  br label %151

150:                                              ; preds = %137
  br label %151

151:                                              ; preds = %137, %140, %142, %145, %148, %150
  %152 = phi double [ -1.000000e+00, %150 ], [ %149, %148 ], [ %147, %145 ], [ 1.000000e+00, %142 ], [ %139, %140 ], [ %139, %137 ]
  %153 = phi double [ %124, %150 ], [ -1.000000e+00, %148 ], [ %146, %145 ], [ %144, %142 ], [ 1.000000e+00, %140 ], [ %124, %137 ]
  %154 = phi double [ %139, %150 ], [ %139, %148 ], [ -1.000000e+00, %145 ], [ %143, %142 ], [ %141, %140 ], [ 1.000000e+00, %137 ]
  %155 = fmul double %154, %154
  %156 = fadd double %155, 0.000000e+00
  %157 = fmul double %153, %153
  %158 = fadd double %157, %156
  %159 = fmul double %152, %152
  %160 = fadd double %159, %158
  %161 = tail call double @sqrt(double %160) #5, !noalias !7
  %162 = fcmp une double %161, 0.000000e+00
  %163 = fdiv double 1.000000e+00, %161
  %164 = select i1 %162, double %163, double %161
  %165 = fmul double %154, %164
  %166 = load double, double* %5, align 8
  %167 = fcmp oeq double %166, %165
  br i1 %167, label %168, label %176

168:                                              ; preds = %151
  %169 = fmul double %152, %164
  %170 = fmul double %153, %164
  %171 = load double, double* %6, align 8
  %172 = fcmp oeq double %171, %170
  %173 = load double, double* %10, align 8
  %174 = fcmp oeq double %173, %169
  %175 = and i1 %172, %174
  br i1 %175, label %177, label %176

176:                                              ; preds = %151, %168
  br label %177

177:                                              ; preds = %168, %176, %93, %103
  %178 = phi i32 [ -1, %103 ], [ -1, %93 ], [ -1, %176 ], [ %101, %168 ]
  ret i32 %178
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2S213FaceSiTitoXYZEijj(%class.Vector3* noalias nocapture sret, i32, i32, i32) local_unnamed_addr #2 {
  %5 = uitofp i32 %2 to double
  %6 = fmul double %5, 0x3E00000000000000
  %7 = fcmp ult double %6, 5.000000e-01
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = fmul double %6, 4.000000e+00
  %10 = fmul double %6, %9
  %11 = fadd double %10, -1.000000e+00
  br label %17

12:                                               ; preds = %4
  %13 = fsub double 1.000000e+00, %6
  %14 = fmul double %13, 4.000000e+00
  %15 = fmul double %13, %14
  %16 = fsub double 1.000000e+00, %15
  br label %17

17:                                               ; preds = %8, %12
  %18 = phi double [ %11, %8 ], [ %16, %12 ]
  %19 = fmul double %18, 0x3FD5555555555555
  %20 = uitofp i32 %3 to double
  %21 = fmul double %20, 0x3E00000000000000
  %22 = fcmp ult double %21, 5.000000e-01
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = fmul double %21, 4.000000e+00
  %25 = fmul double %21, %24
  %26 = fadd double %25, -1.000000e+00
  br label %32

27:                                               ; preds = %17
  %28 = fsub double 1.000000e+00, %21
  %29 = fmul double %28, 4.000000e+00
  %30 = fmul double %28, %29
  %31 = fsub double 1.000000e+00, %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi double [ %26, %23 ], [ %31, %27 ]
  %34 = fmul double %33, 0x3FD5555555555555
  switch i32 %1, label %45 [
    i32 0, label %46
    i32 1, label %35
    i32 2, label %37
    i32 3, label %40
    i32 4, label %43
  ]

35:                                               ; preds = %32
  %36 = fsub double -0.000000e+00, %19
  br label %46

37:                                               ; preds = %32
  %38 = fsub double -0.000000e+00, %19
  %39 = fsub double -0.000000e+00, %34
  br label %46

40:                                               ; preds = %32
  %41 = fsub double -0.000000e+00, %34
  %42 = fsub double -0.000000e+00, %19
  br label %46

43:                                               ; preds = %32
  %44 = fsub double -0.000000e+00, %19
  br label %46

45:                                               ; preds = %32
  br label %46

46:                                               ; preds = %32, %35, %37, %40, %43, %45
  %47 = phi double [ %36, %35 ], [ %38, %37 ], [ -1.000000e+00, %40 ], [ %34, %43 ], [ %34, %45 ], [ 1.000000e+00, %32 ]
  %48 = phi double [ 1.000000e+00, %35 ], [ %39, %37 ], [ %41, %40 ], [ -1.000000e+00, %43 ], [ %19, %45 ], [ %19, %32 ]
  %49 = phi double [ %34, %35 ], [ 1.000000e+00, %37 ], [ %42, %40 ], [ %44, %43 ], [ -1.000000e+00, %45 ], [ %34, %32 ]
  %50 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 0
  store double %47, double* %50, align 8, !alias.scope !10
  %51 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 1
  store double %48, double* %51, align 8, !alias.scope !10
  %52 = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i64 0, i32 0, i64 2
  store double %49, double* %52, align 8, !alias.scope !10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK7Vector3IdE3AbsEv: argument 0"}
!4 = distinct !{!4, !"_ZNK7Vector3IdE3AbsEv"}
!5 = !{i32 4445115}
!6 = !{i32 0, i32 33}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK4util4math15internal_vector11BasicVectorI7Vector3dLm3EE9NormalizeEv: argument 0"}
!9 = distinct !{!9, !"_ZNK4util4math15internal_vector11BasicVectorI7Vector3dLm3EE9NormalizeEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN2S211FaceUVtoXYZEidd: argument 0"}
!12 = distinct !{!12, !"_ZN2S211FaceUVtoXYZEidd"}
