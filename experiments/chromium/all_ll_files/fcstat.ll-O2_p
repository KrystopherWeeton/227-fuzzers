; ModuleID = '../../third_party/fontconfig/src/src/fcstat.c'
source_filename = "../../third_party/fontconfig/src/src/fcstat.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__dirstream = type opaque
%struct.statfs = type { i64, i64, i64, i64, i64, i64, i64, %struct.__fsid_t, i64, i64, i64, [4 x i64] }
%struct.__fsid_t = type { [2 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcStat(i8*, %struct.stat*) local_unnamed_addr #0 {
  %3 = bitcast %struct.stat* %1 to %struct.stat64*
  %4 = tail call i32 @__xstat64(i32 1, i8* %0, %struct.stat64* %3) #11
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcScandir(i8* nocapture readonly, %struct.dirent*** nocapture, i32 (%struct.dirent*)*, i32 (%struct.dirent**, %struct.dirent**)* nocapture) local_unnamed_addr #0 {
  %5 = tail call %struct.__dirstream* @opendir(i8* %0)
  %6 = icmp eq %struct.__dirstream* %5, null
  br i1 %6, label %100, label %7

7:                                                ; preds = %4
  %8 = tail call noalias i8* @malloc(i64 1024) #11
  %9 = bitcast i8* %8 to %struct.dirent**
  %10 = icmp eq i8* %8, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call i32 @closedir(%struct.__dirstream* nonnull %5)
  %13 = tail call i32* @__errno_location() #12
  store i32 12, i32* %13, align 4
  br label %100

14:                                               ; preds = %7
  store %struct.dirent* null, %struct.dirent** %9, align 8
  %15 = tail call %struct.dirent* @readdir64(%struct.__dirstream* nonnull %5) #11
  %16 = icmp eq %struct.dirent* %15, null
  br i1 %16, label %92, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 (%struct.dirent*)* %2, null
  br label %19

19:                                               ; preds = %17, %83
  %20 = phi %struct.dirent* [ %15, %17 ], [ %90, %83 ]
  %21 = phi i64 [ 0, %17 ], [ %89, %83 ]
  %22 = phi i64 [ 128, %17 ], [ %88, %83 ]
  %23 = phi %struct.dirent** [ %9, %17 ], [ %87, %83 ]
  %24 = phi i8* [ %8, %17 ], [ %86, %83 ]
  %25 = phi i8* [ %8, %17 ], [ %85, %83 ]
  %26 = phi i8* [ %8, %17 ], [ %84, %83 ]
  br i1 %18, label %30, label %27

27:                                               ; preds = %19
  %28 = tail call i32 %2(%struct.dirent* nonnull %20) #11
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %83, label %30

30:                                               ; preds = %27, %19
  %31 = getelementptr inbounds %struct.dirent, %struct.dirent* %20, i64 0, i32 4, i64 0
  %32 = tail call i64 @strlen(i8* %31) #13
  %33 = add i64 %32, 27
  %34 = and i64 %33, -8
  %35 = tail call noalias i8* @malloc(i64 %34) #11
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %50

37:                                               ; preds = %30
  %38 = load %struct.dirent*, %struct.dirent** %23, align 8
  %39 = icmp eq %struct.dirent* %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %37, %40
  %41 = phi %struct.dirent* [ %45, %40 ], [ %38, %37 ]
  %42 = phi %struct.dirent** [ %44, %40 ], [ %23, %37 ]
  %43 = bitcast %struct.dirent* %41 to i8*
  tail call void @free(i8* %43) #11
  %44 = getelementptr inbounds %struct.dirent*, %struct.dirent** %42, i64 1
  %45 = load %struct.dirent*, %struct.dirent** %44, align 8
  %46 = icmp eq %struct.dirent* %45, null
  br i1 %46, label %47, label %40

47:                                               ; preds = %40, %37
  tail call void @free(i8* %24) #11
  %48 = tail call i32 @closedir(%struct.__dirstream* nonnull %5)
  %49 = tail call i32* @__errno_location() #12
  store i32 12, i32* %49, align 4
  br label %100

50:                                               ; preds = %30
  %51 = bitcast %struct.dirent* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* nonnull align 8 %51, i64 %34, i1 false)
  %52 = add i64 %21, 1
  %53 = icmp ult i64 %52, %22
  br i1 %53, label %74, label %54

54:                                               ; preds = %50
  %55 = add i64 %22, 128
  %56 = shl i64 %55, 3
  %57 = tail call i8* @realloc(i8* %25, i64 %56) #11
  %58 = icmp eq i8* %57, null
  br i1 %58, label %59, label %72

59:                                               ; preds = %54
  tail call void @free(i8* nonnull %35) #11
  %60 = load %struct.dirent*, %struct.dirent** %23, align 8
  %61 = icmp eq %struct.dirent* %60, null
  br i1 %61, label %69, label %62

62:                                               ; preds = %59, %62
  %63 = phi %struct.dirent* [ %67, %62 ], [ %60, %59 ]
  %64 = phi %struct.dirent** [ %66, %62 ], [ %23, %59 ]
  %65 = bitcast %struct.dirent* %63 to i8*
  tail call void @free(i8* %65) #11
  %66 = getelementptr inbounds %struct.dirent*, %struct.dirent** %64, i64 1
  %67 = load %struct.dirent*, %struct.dirent** %66, align 8
  %68 = icmp eq %struct.dirent* %67, null
  br i1 %68, label %69, label %62

69:                                               ; preds = %62, %59
  tail call void @free(i8* %24) #11
  %70 = tail call i32 @closedir(%struct.__dirstream* nonnull %5)
  %71 = tail call i32* @__errno_location() #12
  store i32 12, i32* %71, align 4
  br label %100

72:                                               ; preds = %54
  %73 = bitcast i8* %57 to %struct.dirent**
  br label %74

74:                                               ; preds = %72, %50
  %75 = phi i8* [ %57, %72 ], [ %26, %50 ]
  %76 = phi i8* [ %57, %72 ], [ %25, %50 ]
  %77 = phi i8* [ %57, %72 ], [ %24, %50 ]
  %78 = phi %struct.dirent** [ %73, %72 ], [ %23, %50 ]
  %79 = phi i64 [ %55, %72 ], [ %22, %50 ]
  %80 = getelementptr inbounds %struct.dirent*, %struct.dirent** %78, i64 %21
  %81 = bitcast %struct.dirent** %80 to i8**
  store i8* %35, i8** %81, align 8
  %82 = getelementptr inbounds %struct.dirent*, %struct.dirent** %78, i64 %52
  store %struct.dirent* null, %struct.dirent** %82, align 8
  br label %83

83:                                               ; preds = %74, %27
  %84 = phi i8* [ %75, %74 ], [ %26, %27 ]
  %85 = phi i8* [ %76, %74 ], [ %25, %27 ]
  %86 = phi i8* [ %77, %74 ], [ %24, %27 ]
  %87 = phi %struct.dirent** [ %78, %74 ], [ %23, %27 ]
  %88 = phi i64 [ %79, %74 ], [ %22, %27 ]
  %89 = phi i64 [ %52, %74 ], [ %21, %27 ]
  %90 = tail call %struct.dirent* @readdir64(%struct.__dirstream* nonnull %5) #11
  %91 = icmp eq %struct.dirent* %90, null
  br i1 %91, label %92, label %19

92:                                               ; preds = %83, %14
  %93 = phi i8* [ %8, %14 ], [ %84, %83 ]
  %94 = phi i8* [ %8, %14 ], [ %85, %83 ]
  %95 = phi i64 [ 0, %14 ], [ %89, %83 ]
  %96 = tail call i32 @closedir(%struct.__dirstream* nonnull %5)
  %97 = bitcast i32 (%struct.dirent**, %struct.dirent**)* %3 to i32 (i8*, i8*)*
  tail call void @qsort(i8* %94, i64 %95, i64 8, i32 (i8*, i8*)* %97) #11
  %98 = bitcast %struct.dirent*** %1 to i8**
  store i8* %93, i8** %98, align 8
  %99 = trunc i64 %95 to i32
  br label %100

100:                                              ; preds = %47, %69, %4, %92, %11
  %101 = phi i32 [ %99, %92 ], [ -1, %11 ], [ -1, %4 ], [ -1, %69 ], [ -1, %47 ]
  ret i32 %101
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias %struct.__dirstream* @opendir(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @closedir(%struct.__dirstream* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

declare %struct.dirent* @readdir64(%struct.__dirstream*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcStatChecksum(i8*, %struct.stat*) local_unnamed_addr #0 {
  %3 = alloca %struct.dirent**, align 8
  %4 = alloca %struct.stat, align 8
  %5 = alloca %struct.statfs, align 8
  %6 = bitcast %struct.stat* %1 to %struct.stat64*
  %7 = tail call i32 @__xstat64(i32 1, i8* %0, %struct.stat64* %6) #11
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %170, label %9

9:                                                ; preds = %2
  %10 = tail call i32 (i8*, i32, ...) @FcOpen(i8* %0, i32 0) #11
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %170, label %12

12:                                               ; preds = %9
  %13 = bitcast %struct.statfs* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 120, i1 false) #11
  %14 = call i32 @fstatfs64(i32 %10, %struct.statfs* nonnull %5) #11
  %15 = icmp ne i32 %14, 0
  %16 = getelementptr inbounds %struct.statfs, %struct.statfs* %5, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ne i64 %17, 19780
  %19 = or i1 %18, %15
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %13) #11
  %20 = call i32 @close(i32 %10) #11
  br i1 %19, label %170, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.stat, %struct.stat* %1, i64 0, i32 12, i32 0
  %23 = bitcast %struct.dirent*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #11
  store %struct.dirent** inttoptr (i64 -6148914691236517206 to %struct.dirent**), %struct.dirent*** %3, align 8
  %24 = call i64 @strlen(i8* %0) #13
  %25 = call i32 @FcScandir(i8* %0, %struct.dirent*** nonnull %3, i32 (%struct.dirent*)* nonnull @FcDirChecksumScandirFilter, i32 (%struct.dirent**, %struct.dirent**)* nonnull @FcDirChecksumScandirSorter) #11
  switch i32 %25, label %29 [
    i32 -1, label %163
    i32 0, label %26
  ]

26:                                               ; preds = %21
  %27 = bitcast %struct.dirent*** %3 to i8**
  %28 = load i8*, i8** %27, align 8
  call void @free(i8* %28) #11
  br label %164

29:                                               ; preds = %21
  %30 = bitcast %struct.stat* %4 to i8*
  %31 = add i64 %24, 1
  %32 = bitcast %struct.stat* %4 to %struct.stat64*
  %33 = getelementptr inbounds %struct.stat, %struct.stat* %4, i64 0, i32 3
  %34 = sext i32 %25 to i64
  %35 = load %struct.dirent**, %struct.dirent*** %3, align 8
  br label %36

36:                                               ; preds = %154, %29
  %37 = phi i64 [ %34, %29 ], [ %41, %154 ]
  %38 = phi i32 [ 0, %29 ], [ %158, %154 ]
  %39 = phi i32 [ 1, %29 ], [ %157, %154 ]
  %40 = phi i32 [ 0, %29 ], [ %156, %154 ]
  %41 = add nsw i64 %37, -1
  %42 = getelementptr inbounds %struct.dirent*, %struct.dirent** %35, i64 %41
  %43 = load %struct.dirent*, %struct.dirent** %42, align 8
  %44 = getelementptr inbounds %struct.dirent, %struct.dirent* %43, i64 0, i32 4, i64 0
  %45 = call i64 @strlen(i8* %44) #13
  %46 = getelementptr inbounds %struct.dirent, %struct.dirent* %43, i64 0, i32 3
  %47 = load i8, i8* %46, align 2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %78

49:                                               ; preds = %36
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %30) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 144, i1 false) #11
  %50 = add i64 %45, %31
  %51 = add i64 %50, 1
  %52 = call noalias i8* @malloc(i64 %51) #11
  %53 = icmp eq i8* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %52, i8* align 1 %0, i64 %24, i1 false) #11
  %55 = getelementptr inbounds i8, i8* %52, i64 %24
  store i8 47, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %52, i64 %31
  %57 = load %struct.dirent*, %struct.dirent** %42, align 8
  %58 = getelementptr inbounds %struct.dirent, %struct.dirent* %57, i64 0, i32 4, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %58, i64 %45, i1 false) #11
  %59 = getelementptr inbounds i8, i8* %52, i64 %50
  store i8 0, i8* %59, align 1
  %60 = call i32 @__lxstat64(i32 1, i8* nonnull %52, %struct.stat64* nonnull %32) #11
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %54
  call void @free(i8* nonnull %52) #11
  br label %67

63:                                               ; preds = %54
  %64 = load i32, i32* %33, align 8
  %65 = and i32 %64, 61440
  %66 = icmp eq i32 %65, 16384
  call void @free(i8* nonnull %52) #11
  br i1 %66, label %67, label %71

67:                                               ; preds = %63, %62, %49
  %68 = phi i32 [ %38, %63 ], [ -1, %49 ], [ -1, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %30) #11
  %69 = bitcast %struct.dirent** %42 to i8**
  %70 = load i8*, i8** %69, align 8
  br label %154

71:                                               ; preds = %63
  %72 = load i32, i32* %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %30) #11
  %73 = load %struct.dirent*, %struct.dirent** %42, align 8
  %74 = trunc i32 %72 to i8
  %75 = lshr i32 %72, 8
  %76 = lshr i32 %72, 16
  %77 = and i32 %72, -16777216
  br label %78

78:                                               ; preds = %71, %36
  %79 = phi %struct.dirent* [ %73, %71 ], [ %43, %36 ]
  %80 = phi i32 [ %77, %71 ], [ 0, %36 ]
  %81 = phi i32 [ %76, %71 ], [ 0, %36 ]
  %82 = phi i32 [ %75, %71 ], [ 0, %36 ]
  %83 = phi i8 [ %74, %71 ], [ %47, %36 ]
  %84 = bitcast %struct.dirent* %79 to i8*
  %85 = trunc i64 %45 to i32
  %86 = add i32 %85, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %129, label %88

88:                                               ; preds = %78
  %89 = getelementptr inbounds %struct.dirent, %struct.dirent* %79, i64 0, i32 4, i64 0
  %90 = and i32 %86, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.dirent, %struct.dirent* %79, i64 0, i32 4, i64 1
  %94 = load i8, i8* %89, align 1
  %95 = sext i8 %94 to i32
  %96 = add nsw i32 %39, %95
  %97 = srem i32 %96, 65521
  %98 = add nsw i32 %97, %40
  %99 = srem i32 %98, 65521
  br label %100

100:                                              ; preds = %92, %88
  %101 = phi i32 [ %97, %92 ], [ undef, %88 ]
  %102 = phi i32 [ %99, %92 ], [ undef, %88 ]
  %103 = phi i32 [ %99, %92 ], [ %40, %88 ]
  %104 = phi i32 [ %97, %92 ], [ %39, %88 ]
  %105 = phi i32 [ %85, %92 ], [ %86, %88 ]
  %106 = phi i8* [ %93, %92 ], [ %89, %88 ]
  %107 = icmp eq i32 %85, 0
  br i1 %107, label %129, label %108

108:                                              ; preds = %100, %108
  %109 = phi i32 [ %127, %108 ], [ %103, %100 ]
  %110 = phi i32 [ %125, %108 ], [ %104, %100 ]
  %111 = phi i32 [ %120, %108 ], [ %105, %100 ]
  %112 = phi i8* [ %121, %108 ], [ %106, %100 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  %114 = load i8, i8* %112, align 1
  %115 = sext i8 %114 to i32
  %116 = add nsw i32 %110, %115
  %117 = srem i32 %116, 65521
  %118 = add nsw i32 %117, %109
  %119 = srem i32 %118, 65521
  %120 = add nsw i32 %111, -2
  %121 = getelementptr inbounds i8, i8* %112, i64 2
  %122 = load i8, i8* %113, align 1
  %123 = sext i8 %122 to i32
  %124 = add nsw i32 %117, %123
  %125 = srem i32 %124, 65521
  %126 = add nsw i32 %125, %119
  %127 = srem i32 %126, 65521
  %128 = icmp eq i32 %120, 0
  br i1 %128, label %129, label %108

129:                                              ; preds = %100, %108, %78
  %130 = phi i32 [ %40, %78 ], [ %102, %100 ], [ %127, %108 ]
  %131 = phi i32 [ %39, %78 ], [ %101, %100 ], [ %125, %108 ]
  %132 = sext i8 %83 to i32
  %133 = add nsw i32 %131, %132
  %134 = srem i32 %133, 65521
  %135 = add nsw i32 %134, %130
  %136 = srem i32 %135, 65521
  %137 = shl i32 %82, 24
  %138 = ashr exact i32 %137, 24
  %139 = add nsw i32 %134, %138
  %140 = srem i32 %139, 65521
  %141 = add nsw i32 %140, %136
  %142 = srem i32 %141, 65521
  %143 = shl i32 %81, 24
  %144 = ashr exact i32 %143, 24
  %145 = add nsw i32 %140, %144
  %146 = srem i32 %145, 65521
  %147 = add nsw i32 %146, %142
  %148 = srem i32 %147, 65521
  %149 = ashr exact i32 %80, 24
  %150 = add nsw i32 %146, %149
  %151 = srem i32 %150, 65521
  %152 = add nsw i32 %151, %148
  %153 = srem i32 %152, 65521
  br label %154

154:                                              ; preds = %129, %67
  %155 = phi i8* [ %70, %67 ], [ %84, %129 ]
  %156 = phi i32 [ %40, %67 ], [ %153, %129 ]
  %157 = phi i32 [ %39, %67 ], [ %151, %129 ]
  %158 = phi i32 [ %68, %67 ], [ %38, %129 ]
  call void @free(i8* %155) #11
  %159 = icmp eq i64 %41, 0
  br i1 %159, label %160, label %36

160:                                              ; preds = %154
  %161 = bitcast %struct.dirent** %35 to i8*
  call void @free(i8* %161) #11
  %162 = icmp eq i32 %158, -1
  br i1 %162, label %163, label %164

163:                                              ; preds = %21, %160
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11
  br label %170

164:                                              ; preds = %26, %160
  %165 = phi i32 [ 1, %26 ], [ %157, %160 ]
  %166 = phi i32 [ 0, %26 ], [ %156, %160 ]
  %167 = shl i32 %166, 16
  %168 = add nsw i32 %167, %165
  %169 = sext i32 %168 to i64
  store i64 %169, i64* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11
  br label %170

170:                                              ; preds = %12, %9, %164, %163, %2
  %171 = phi i32 [ -1, %2 ], [ -1, %163 ], [ 0, %164 ], [ 0, %9 ], [ 0, %12 ]
  ret i32 %171
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcIsFsMtimeBroken(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.statfs, align 8
  %3 = tail call i32 (i8*, i32, ...) @FcOpen(i8* %0, i32 0) #11
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.statfs* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 120, i1 false) #11
  %7 = call i32 @fstatfs64(i32 %3, %struct.statfs* nonnull %2) #11
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.statfs, %struct.statfs* %2, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 19780
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %9, %5
  %15 = phi i32 [ 0, %5 ], [ %13, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %6) #11
  %16 = call i32 @close(i32 %3) #11
  %17 = icmp slt i32 %7, 0
  %18 = select i1 %17, i32 0, i32 %15
  br label %19

19:                                               ; preds = %1, %14
  %20 = phi i32 [ %18, %14 ], [ 0, %1 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcIsFsMmapSafe(i32) local_unnamed_addr #0 {
  %2 = alloca %struct.statfs, align 8
  %3 = bitcast %struct.statfs* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 120, i1 false) #11
  %4 = call i32 @fstatfs64(i32 %0, %struct.statfs* nonnull %2) #11
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.statfs, %struct.statfs* %2, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ne i64 %8, 26985
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %3) #11
  %10 = zext i1 %9 to i32
  ret i32 %10

11:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %3) #11
  ret i32 1
}

declare hidden i32 @FcOpen(i8*, i32, ...) local_unnamed_addr #4

declare i32 @close(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #6

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @FcDirChecksumScandirFilter(%struct.dirent* nocapture readonly) #8 {
  %2 = getelementptr inbounds %struct.dirent, %struct.dirent* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 2
  %4 = icmp ne i8 %3, 4
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @FcDirChecksumScandirSorter(%struct.dirent** nocapture readonly, %struct.dirent** nocapture readonly) #9 {
  %3 = load %struct.dirent*, %struct.dirent** %0, align 8
  %4 = getelementptr inbounds %struct.dirent, %struct.dirent* %3, i64 0, i32 4, i64 0
  %5 = load %struct.dirent*, %struct.dirent** %1, align 8
  %6 = getelementptr inbounds %struct.dirent, %struct.dirent* %5, i64 0, i32 4, i64 0
  %7 = tail call i32 @strcmp(i8* %4, i8* %6) #13
  ret i32 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind
declare i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @fstatfs64(i32, %struct.statfs*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
