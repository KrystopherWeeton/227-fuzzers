; ModuleID = '../../third_party/icu/source/common/ustrfmt.cpp'
source_filename = "../../third_party/icu/source/common/ustrfmt.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @uprv_itou_69(i16* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %16, %7 ]
  %9 = phi i32 [ %2, %5 ], [ %11, %7 ]
  %10 = urem i32 %9, %3
  %11 = udiv i32 %9, %3
  %12 = icmp slt i32 %10, 10
  %13 = select i1 %12, i32 48, i32 55
  %14 = add nsw i32 %13, %10
  %15 = trunc i32 %14 to i16
  %16 = add nuw nsw i64 %8, 1
  %17 = getelementptr inbounds i16, i16* %0, i64 %8
  store i16 %15, i16* %17, align 2
  %18 = icmp uge i32 %9, %3
  %19 = icmp slt i64 %16, %6
  %20 = and i1 %18, %19
  br i1 %20, label %7, label %21

21:                                               ; preds = %7
  %22 = trunc i64 %16 to i32
  %23 = icmp slt i32 %22, %4
  br i1 %23, label %24, label %91

24:                                               ; preds = %21
  %25 = and i64 %16, 4294967295
  %26 = zext i32 %4 to i64
  %27 = sub nsw i64 %26, %16
  %28 = icmp ult i64 %27, 16
  br i1 %28, label %84, label %29

29:                                               ; preds = %24
  %30 = and i64 %27, -16
  %31 = add i64 %25, %30
  %32 = add i64 %30, -16
  %33 = lshr exact i64 %32, 4
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 3
  %36 = icmp ult i64 %32, 48
  br i1 %36, label %68, label %37

37:                                               ; preds = %29
  %38 = sub nsw i64 %34, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %65, %39 ]
  %41 = phi i64 [ %38, %37 ], [ %66, %39 ]
  %42 = add i64 %25, %40
  %43 = getelementptr inbounds i16, i16* %0, i64 %42
  %44 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %44, align 2
  %45 = getelementptr inbounds i16, i16* %43, i64 8
  %46 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %46, align 2
  %47 = or i64 %40, 16
  %48 = add i64 %25, %47
  %49 = getelementptr inbounds i16, i16* %0, i64 %48
  %50 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %49, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %52, align 2
  %53 = or i64 %40, 32
  %54 = add i64 %25, %53
  %55 = getelementptr inbounds i16, i16* %0, i64 %54
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %55, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %58, align 2
  %59 = or i64 %40, 48
  %60 = add i64 %25, %59
  %61 = getelementptr inbounds i16, i16* %0, i64 %60
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %64, align 2
  %65 = add i64 %40, 64
  %66 = add i64 %41, -4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %39, !llvm.loop !2

68:                                               ; preds = %39, %29
  %69 = phi i64 [ 0, %29 ], [ %65, %39 ]
  %70 = icmp eq i64 %35, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %68, %71
  %72 = phi i64 [ %79, %71 ], [ %69, %68 ]
  %73 = phi i64 [ %80, %71 ], [ %35, %68 ]
  %74 = add i64 %25, %72
  %75 = getelementptr inbounds i16, i16* %0, i64 %74
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %75, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>, <8 x i16>* %78, align 2
  %79 = add i64 %72, 16
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %71, !llvm.loop !4

82:                                               ; preds = %71, %68
  %83 = icmp eq i64 %27, %30
  br i1 %83, label %91, label %84

84:                                               ; preds = %82, %24
  %85 = phi i64 [ %25, %24 ], [ %31, %82 ]
  br label %86

86:                                               ; preds = %84, %86
  %87 = phi i64 [ %88, %86 ], [ %85, %84 ]
  %88 = add nuw nsw i64 %87, 1
  %89 = getelementptr inbounds i16, i16* %0, i64 %87
  store i16 48, i16* %89, align 2
  %90 = icmp eq i64 %88, %26
  br i1 %90, label %91, label %86, !llvm.loop !6

91:                                               ; preds = %86, %82, %21
  %92 = phi i32 [ %22, %21 ], [ %4, %82 ], [ %4, %86 ]
  %93 = icmp slt i32 %92, %1
  br i1 %93, label %94, label %97

94:                                               ; preds = %91
  %95 = sext i32 %92 to i64
  %96 = getelementptr inbounds i16, i16* %0, i64 %95
  store i16 0, i16* %96, align 2
  br label %97

97:                                               ; preds = %94, %91
  %98 = icmp sgt i32 %92, 1
  br i1 %98, label %99, label %142

99:                                               ; preds = %97
  %100 = lshr i32 %92, 1
  %101 = zext i32 %100 to i64
  %102 = and i64 %101, 1
  %103 = icmp eq i32 %100, 1
  br i1 %103, label %131, label %104

104:                                              ; preds = %99
  %105 = sub nsw i64 %101, %102
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %125, %106 ]
  %108 = phi i32 [ 0, %104 ], [ %126, %106 ]
  %109 = phi i64 [ %105, %104 ], [ %127, %106 ]
  %110 = xor i32 %108, -1
  %111 = add i32 %92, %110
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i16, i16* %0, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %0, i64 %107
  %116 = load i16, i16* %115, align 2
  store i16 %116, i16* %113, align 2
  store i16 %114, i16* %115, align 2
  %117 = or i64 %107, 1
  %118 = sub nuw nsw i32 -2, %108
  %119 = add i32 %92, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %0, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = getelementptr inbounds i16, i16* %0, i64 %117
  %124 = load i16, i16* %123, align 2
  store i16 %124, i16* %121, align 2
  store i16 %122, i16* %123, align 2
  %125 = add nuw nsw i64 %107, 2
  %126 = add nuw nsw i32 %108, 2
  %127 = add i64 %109, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %106

129:                                              ; preds = %106
  %130 = sub nuw i32 -3, %108
  br label %131

131:                                              ; preds = %129, %99
  %132 = phi i64 [ 0, %99 ], [ %125, %129 ]
  %133 = phi i32 [ -1, %99 ], [ %130, %129 ]
  %134 = icmp eq i64 %102, 0
  br i1 %134, label %142, label %135

135:                                              ; preds = %131
  %136 = add i32 %92, %133
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i16, i16* %0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = getelementptr inbounds i16, i16* %0, i64 %132
  %141 = load i16, i16* %140, align 2
  store i16 %141, i16* %138, align 2
  store i16 %139, i16* %140, align 2
  br label %142

142:                                              ; preds = %135, %131, %97
  ret i32 %92
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
