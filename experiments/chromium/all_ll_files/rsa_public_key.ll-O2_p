; ModuleID = '../../device/fido/rsa_public_key.cc'
source_filename = "../../device/fido/rsa_public_key.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.device::cbor_extract::StepOrByte" = type { %union.anon.11 }
%union.anon.11 = type { i8 }
%"struct.device::cbor_extract::internal::Step" = type { %struct.anon }
%struct.anon = type { i8 }
%"struct.device::PublicKey" = type { i32, %"class.std::__1::vector", %"class.absl::optional" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.4" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::pair"* }
%struct.COSEKey = type { i64*, %"class.std::__1::vector"*, %"class.std::__1::vector"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.bssl::internal::StackAllocated" = type { %struct.cbb_st }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"struct.device::cbor_extract::StepOrByte.30" = type opaque
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bn_blinding_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon.25, %struct.evp_pkey_asn1_method_st* }
%union.anon.25 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZZN6device12RSAPublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEEE6kSteps = internal constant <{ { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } } }> <{ { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 7 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 1 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 17 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 -1 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 33 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 -2 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 14 } } } } }>, align 1
@.str = private unnamed_addr constant [36 x i8] c"../../device/fido/rsa_public_key.cc\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"EVP_PKEY_assign_RSA(pkey.get(), rsa.release())\00", align 1
@.str.2 = private unnamed_addr constant [127 x i8] c"CBB_init(cbb.get(), 128) && EVP_marshal_public_key(cbb.get(), pkey.get()) && CBB_finish(cbb.get(), &der_bytes, &der_bytes_len)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.device::PublicKey"* @_ZN6device12RSAPublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEE(i32, i64, i8*, %"class.base::flat_map"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::optional", align 8
  %6 = alloca %struct.COSEKey, align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.bssl::internal::StackAllocated", align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = bitcast %struct.COSEKey* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #7
  %14 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 1
  %15 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 2
  %16 = bitcast %struct.COSEKey* %6 to i8**
  %17 = bitcast %struct.COSEKey* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  %18 = call zeroext i1 @_ZN6device12cbor_extract8internal7ExtractEN4base4spanIPKvLm18446744073709551615EEENS3_IKNS0_10StepOrByteIvEELm18446744073709551615EEERKNS2_8flat_mapIN4cbor5ValueESD_NSD_4LessENSt3__16vectorINSF_4pairISD_SD_EENSF_9allocatorISI_EEEEEE(i64 3, i8** nonnull %16, i64 7, %"struct.device::cbor_extract::StepOrByte.30"* bitcast (<{ { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } } }>* @_ZZN6device12RSAPublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEEE6kSteps to %"struct.device::cbor_extract::StepOrByte.30"*), %"class.base::flat_map"* dereferenceable(24) %3) #7
  br i1 %18, label %19, label %137

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 3
  br i1 %23, label %24, label %137

24:                                               ; preds = %19
  %25 = call %struct.bignum_st* @BN_new() #7
  %26 = call %struct.bignum_st* @BN_new() #7
  %27 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %14, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = ptrtoint i8* %29 to i64
  %34 = sub i64 %32, %33
  %35 = call %struct.bignum_st* @BN_bin2bn(i8* %29, i64 %34, %struct.bignum_st* %25) #7
  %36 = icmp eq %struct.bignum_st* %35, null
  br i1 %36, label %131, label %37

37:                                               ; preds = %24
  %38 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %15, align 8
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 1
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = ptrtoint i8* %40 to i64
  %45 = sub i64 %43, %44
  %46 = call %struct.bignum_st* @BN_bin2bn(i8* %40, i64 %45, %struct.bignum_st* %26) #7
  %47 = icmp eq %struct.bignum_st* %46, null
  br i1 %47, label %131, label %48

48:                                               ; preds = %37
  %49 = call %struct.rsa_st* @RSA_new() #7
  %50 = call i32 @RSA_set0_key(%struct.rsa_st* %49, %struct.bignum_st* %25, %struct.bignum_st* %26, %struct.bignum_st* null) #7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %128, label %52

52:                                               ; preds = %48
  %53 = call %struct.evp_pkey_st* @EVP_PKEY_new() #7
  %54 = call i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st* %53, %struct.rsa_st* %49) #7
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 71, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0)) #7
  %58 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #7
  br label %59

59:                                               ; preds = %52, %56
  %60 = bitcast %"class.bssl::internal::StackAllocated"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 -86, i64 32, i1 false)
  %61 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %8, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %61) #7
  %62 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #7
  store i8* null, i8** %9, align 8
  %63 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #7
  store i64 0, i64* %10, align 8
  %64 = call i32 @CBB_init(%struct.cbb_st* nonnull %61, i64 128) #7
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %72, label %66

66:                                               ; preds = %59
  %67 = call i32 @EVP_marshal_public_key(%struct.cbb_st* nonnull %61, %struct.evp_pkey_st* %53) #7
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %66
  %70 = call i32 @CBB_finish(%struct.cbb_st* nonnull %61, i8** nonnull %9, i64* nonnull %10) #7
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %69, %66, %59
  %73 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.2, i64 0, i64 0)) #7
  %74 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #7
  br label %75

75:                                               ; preds = %69, %72
  %76 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #7
  %77 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %79 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  %80 = load i8*, i8** %9, align 8
  %81 = load i64, i64* %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 0, i64 24, i1 false) #7
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %75
  %84 = bitcast i8** %78 to i64*
  br label %94

85:                                               ; preds = %75
  %86 = icmp slt i64 %81, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %85
  %88 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %88) #8
  unreachable

89:                                               ; preds = %85
  %90 = call i8* @_Znwm(i64 %81) #9
  store i8* %90, i8** %78, align 8
  store i8* %90, i8** %77, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %81
  store i8* %91, i8** %79, align 8
  %92 = bitcast i8** %78 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %90, i8* align 1 %80, i64 %81, i1 false) #7
  %93 = ptrtoint i8* %91 to i64
  store i64 %93, i64* %92, align 8
  br label %94

94:                                               ; preds = %83, %89
  %95 = phi i64* [ %84, %83 ], [ %92, %89 ]
  call void @OPENSSL_free(i8* %80) #7
  %96 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %96)
  %97 = call i8* @_Znwm(i64 64) #9
  %98 = bitcast i8* %97 to %"struct.device::PublicKey"*
  store i8 1, i8* %96, align 8
  %99 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %100 = bitcast %"class.std::__1::vector"* %12 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.std::__1::vector"* %99 to i64*
  store i64 %101, i64* %102, align 8
  %103 = load i64, i64* %95, align 8
  %104 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %105 = bitcast i8** %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = bitcast i8** %79 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast i8** %108 to i64*
  store i64 %107, i64* %109, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 0, i64 24, i1 false) #7
  call void @_ZN6device9PublicKeyC1EiN4base4spanIKhLm18446744073709551615EEEN4absl8optionalINSt3__16vectorIhNS7_9allocatorIhEEEEEE(%"struct.device::PublicKey"* nonnull %98, i32 %0, i64 %1, i8* %2, %"class.absl::optional"* nonnull %5) #7
  %110 = load i8, i8* %96, align 8, !range !2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %119, label %112

112:                                              ; preds = %94
  %113 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = icmp eq i8* %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = ptrtoint i8* %114 to i64
  store i64 %117, i64* %105, align 8
  call void @_ZdlPv(i8* nonnull %114) #9
  br label %118

118:                                              ; preds = %116, %112
  store i8 0, i8* %96, align 8
  br label %119

119:                                              ; preds = %94, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %96)
  %120 = ptrtoint i8* %97 to i64
  %121 = load i8*, i8** %77, align 8
  %122 = icmp eq i8* %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %119
  %124 = ptrtoint i8* %121 to i64
  store i64 %124, i64* %95, align 8
  call void @_ZdlPv(i8* nonnull %121) #9
  br label %125

125:                                              ; preds = %119, %123
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #7
  call void @CBB_cleanup(%struct.cbb_st* nonnull %61) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %60) #7
  %126 = icmp eq %struct.evp_pkey_st* %53, null
  br i1 %126, label %137, label %127

127:                                              ; preds = %125
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %53) #7
  br label %137

128:                                              ; preds = %48
  %129 = icmp eq %struct.rsa_st* %49, null
  br i1 %129, label %137, label %130

130:                                              ; preds = %128
  call void @RSA_free(%struct.rsa_st* nonnull %49) #7
  br label %137

131:                                              ; preds = %24, %37
  %132 = icmp eq %struct.bignum_st* %26, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %131
  call void @BN_free(%struct.bignum_st* nonnull %26) #7
  br label %134

134:                                              ; preds = %131, %133
  %135 = icmp eq %struct.bignum_st* %25, null
  br i1 %135, label %137, label %136

136:                                              ; preds = %134
  call void @BN_free(%struct.bignum_st* nonnull %25) #7
  br label %137

137:                                              ; preds = %128, %130, %125, %127, %136, %134, %4, %19
  %138 = phi i64 [ 0, %19 ], [ 0, %4 ], [ 0, %134 ], [ 0, %136 ], [ 0, %130 ], [ 0, %128 ], [ %120, %125 ], [ %120, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  %139 = inttoptr i64 %138 to %"struct.device::PublicKey"*
  ret %"struct.device::PublicKey"* %139
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.bignum_st* @BN_new() local_unnamed_addr #2

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #2

declare %struct.rsa_st* @RSA_new() local_unnamed_addr #2

declare i32 @RSA_set0_key(%struct.rsa_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) local_unnamed_addr #2

declare %struct.evp_pkey_st* @EVP_PKEY_new() local_unnamed_addr #2

declare i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st*, %struct.rsa_st*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @EVP_marshal_public_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN6device12cbor_extract8internal7ExtractEN4base4spanIPKvLm18446744073709551615EEENS3_IKNS0_10StepOrByteIvEELm18446744073709551615EEERKNS2_8flat_mapIN4cbor5ValueESD_NSD_4LessENSt3__16vectorINSF_4pairISD_SD_EENSF_9allocatorISI_EEEEEE(i64, i8**, i64, %"struct.device::cbor_extract::StepOrByte.30"*, %"class.base::flat_map"* dereferenceable(24)) local_unnamed_addr #2

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN6device9PublicKeyC1EiN4base4spanIKhLm18446744073709551615EEEN4absl8optionalINSt3__16vectorIhNS7_9allocatorIhEEEEEE(%"struct.device::PublicKey"*, i32, i64, i8*, %"class.absl::optional"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
