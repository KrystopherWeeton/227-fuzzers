; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsintrp.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsintrp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsInterpPluginChunkType = type { void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)* }
%struct._cms_interp_struc = type { %struct._cmsContext_struct*, i32, i32, i32, [8 x i32], [8 x i32], [8 x i32], i8*, %union.cmsInterpFunction }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%union.cmsInterpFunction = type { void (i16*, i16*, %struct._cms_interp_struc*)* }
%struct._cmsPluginBaseStruct = type { i32, i32, i32, %struct._cmsPluginBaseStruct* }

@_cmsInterpPluginChunk = hidden local_unnamed_addr global %struct._cmsInterpPluginChunkType zeroinitializer, align 8
@_cmsAllocInterpPluginChunk.InterpPluginChunk = internal global %struct._cmsInterpPluginChunkType zeroinitializer, align 8
@.str = private unnamed_addr constant [46 x i8] c"Too many input channels (%d channels, max=%d)\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Unsupported interpolation (%d->%d channels)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_cmsAllocInterpPluginChunk(%struct._cmsContext_struct* nocapture, %struct._cmsContext_struct* readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct._cmsContext_struct* %1, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %1, i64 0, i32 2, i64 5
  %6 = load i8*, i8** %5, align 8
  br label %7

7:                                                ; preds = %2, %4
  %8 = phi i8* [ %6, %4 ], [ bitcast (%struct._cmsInterpPluginChunkType* @_cmsAllocInterpPluginChunk.InterpPluginChunk to i8*), %2 ]
  %9 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 1
  %10 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %9, align 8
  %11 = tail call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %10, i8* %8, i32 8) #6
  %12 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 2, i64 5
  store i8* %11, i8** %12, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_cmsSubAllocDup(%struct._cmsSubAllocator*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsRegisterInterpPlugin(%struct._cmsContext_struct*, %struct._cmsPluginBaseStruct* readonly) local_unnamed_addr #0 {
  %3 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 5) #6
  %4 = icmp eq %struct._cmsPluginBaseStruct* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = bitcast i8* %3 to void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)**
  store void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)* null, void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)** %6, align 8
  br label %12

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct._cmsPluginBaseStruct, %struct._cmsPluginBaseStruct* %1, i64 1
  %9 = bitcast %struct._cmsPluginBaseStruct* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast i8* %3 to i64*
  store i64 %10, i64* %11, align 8
  br label %12

12:                                               ; preds = %7, %5
  ret i32 1
}

declare i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsSetInterpolationRoutine(%struct._cmsContext_struct*, %struct._cms_interp_struc* nocapture) local_unnamed_addr #0 {
  %3 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 5) #6
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 8, i32 0
  store void (i16*, i16*, %struct._cms_interp_struc*)* null, void (i16*, i16*, %struct._cms_interp_struc*)** %4, align 8
  %5 = bitcast i8* %3 to void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)**
  %6 = load void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)*, void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)** %5, align 8
  %7 = icmp eq void (i16*, i16*, %struct._cms_interp_struc*)* (i32, i32, i32)* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = tail call void (i16*, i16*, %struct._cms_interp_struc*)* %6(i32 %10, i32 %12, i32 %14) #6
  store void (i16*, i16*, %struct._cms_interp_struc*)* %15, void (i16*, i16*, %struct._cms_interp_struc*)** %4, align 8
  %16 = icmp eq void (i16*, i16*, %struct._cms_interp_struc*)* %15, null
  br i1 %16, label %17, label %64

17:                                               ; preds = %2, %8
  %18 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 1
  %25 = and i32 %23, 256
  %26 = icmp ugt i32 %19, 3
  %27 = icmp ugt i32 %21, 127
  %28 = and i1 %26, %27
  br i1 %28, label %62, label %29

29:                                               ; preds = %17
  switch i32 %19, label %62 [
    i32 1, label %30
    i32 2, label %37
    i32 3, label %40
    i32 4, label %47
    i32 5, label %50
    i32 6, label %53
    i32 7, label %56
    i32 8, label %59
  ]

30:                                               ; preds = %29
  %31 = icmp eq i32 %21, 1
  %32 = icmp ne i32 %24, 0
  br i1 %31, label %33, label %35

33:                                               ; preds = %30
  %34 = select i1 %32, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @LinLerp1Dfloat to void (i16*, i16*, %struct._cms_interp_struc*)*), void (i16*, i16*, %struct._cms_interp_struc*)* @LinLerp1D
  br label %62

35:                                               ; preds = %30
  %36 = select i1 %32, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval1InputFloat to void (i16*, i16*, %struct._cms_interp_struc*)*), void (i16*, i16*, %struct._cms_interp_struc*)* @Eval1Input
  br label %62

37:                                               ; preds = %29
  %38 = icmp eq i32 %24, 0
  %39 = select i1 %38, void (i16*, i16*, %struct._cms_interp_struc*)* @BilinearInterp16, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @BilinearInterpFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

40:                                               ; preds = %29
  %41 = icmp eq i32 %25, 0
  %42 = icmp ne i32 %24, 0
  br i1 %41, label %45, label %43

43:                                               ; preds = %40
  %44 = select i1 %42, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @TrilinearInterpFloat to void (i16*, i16*, %struct._cms_interp_struc*)*), void (i16*, i16*, %struct._cms_interp_struc*)* @TrilinearInterp16
  br label %62

45:                                               ; preds = %40
  %46 = select i1 %42, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @TetrahedralInterpFloat to void (i16*, i16*, %struct._cms_interp_struc*)*), void (i16*, i16*, %struct._cms_interp_struc*)* @TetrahedralInterp16
  br label %62

47:                                               ; preds = %29
  %48 = icmp eq i32 %24, 0
  %49 = select i1 %48, void (i16*, i16*, %struct._cms_interp_struc*)* @Eval4Inputs, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval4InputsFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

50:                                               ; preds = %29
  %51 = icmp eq i32 %24, 0
  %52 = select i1 %51, void (i16*, i16*, %struct._cms_interp_struc*)* @Eval5Inputs, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval5InputsFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

53:                                               ; preds = %29
  %54 = icmp eq i32 %24, 0
  %55 = select i1 %54, void (i16*, i16*, %struct._cms_interp_struc*)* @Eval6Inputs, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval6InputsFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

56:                                               ; preds = %29
  %57 = icmp eq i32 %24, 0
  %58 = select i1 %57, void (i16*, i16*, %struct._cms_interp_struc*)* @Eval7Inputs, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval7InputsFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

59:                                               ; preds = %29
  %60 = icmp eq i32 %24, 0
  %61 = select i1 %60, void (i16*, i16*, %struct._cms_interp_struc*)* @Eval8Inputs, void (i16*, i16*, %struct._cms_interp_struc*)* bitcast (void (float*, float*, %struct._cms_interp_struc*)* @Eval8InputsFloat to void (i16*, i16*, %struct._cms_interp_struc*)*)
  br label %62

62:                                               ; preds = %17, %29, %33, %35, %37, %43, %45, %47, %50, %53, %56, %59
  %63 = phi void (i16*, i16*, %struct._cms_interp_struc*)* [ null, %17 ], [ %34, %33 ], [ %36, %35 ], [ %39, %37 ], [ %44, %43 ], [ %46, %45 ], [ %49, %47 ], [ %52, %50 ], [ %55, %53 ], [ %58, %56 ], [ %61, %59 ], [ null, %29 ]
  store void (i16*, i16*, %struct._cms_interp_struc*)* %63, void (i16*, i16*, %struct._cms_interp_struc*)** %4, align 8
  br label %64

64:                                               ; preds = %62, %8
  %65 = phi void (i16*, i16*, %struct._cms_interp_struc*)* [ %63, %62 ], [ %15, %8 ]
  %66 = icmp ne void (i16*, i16*, %struct._cms_interp_struc*)* %65, null
  %67 = zext i1 %66 to i32
  ret i32 %67
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_interp_struc* @_cmsComputeInterpParamsEx(%struct._cmsContext_struct*, i32* nocapture readonly, i32, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = bitcast i32* %1 to i8*
  %8 = icmp ugt i32 %2, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 %2, i32 8) #6
  br label %230

10:                                               ; preds = %6
  %11 = tail call i8* @_cmsMallocZero(%struct._cmsContext_struct* %0, i32 136) #6
  %12 = bitcast i8* %11 to %struct._cms_interp_struc*
  %13 = icmp eq i8* %11, null
  br i1 %13, label %230, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %11, i64 8
  %16 = bitcast i8* %15 to i32*
  store i32 %5, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %11, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 %2, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %11, i64 16
  %20 = bitcast i8* %19 to i32*
  store i32 %3, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %11, i64 120
  %22 = bitcast i8* %21 to i8**
  store i8* %4, i8** %22, align 8
  %23 = bitcast i8* %11 to %struct._cmsContext_struct**
  store %struct._cmsContext_struct* %0, %struct._cmsContext_struct** %23, align 8
  %24 = icmp eq i32 %2, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %14
  %26 = getelementptr inbounds i8, i8* %11, i64 84
  %27 = bitcast i8* %26 to i32*
  store i32 %3, i32* %27, align 4
  br label %226

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %11, i64 20
  %30 = bitcast i8* %29 to [8 x i32]*
  %31 = getelementptr inbounds i8, i8* %11, i64 52
  %32 = bitcast i8* %31 to [8 x i32]*
  %33 = zext i32 %2 to i64
  %34 = icmp ult i32 %2, 4
  br i1 %34, label %123, label %35

35:                                               ; preds = %28
  %36 = shl nuw nsw i64 %33, 2
  %37 = add nuw nsw i64 %36, 52
  %38 = getelementptr i8, i8* %11, i64 %37
  %39 = getelementptr i32, i32* %1, i64 %33
  %40 = bitcast i32* %39 to i8*
  %41 = icmp ult i8* %29, %40
  %42 = icmp ugt i8* %38, %7
  %43 = and i1 %41, %42
  br i1 %43, label %123, label %44

44:                                               ; preds = %35
  %45 = and i64 %33, 4294967292
  %46 = add nsw i64 %45, -4
  %47 = lshr exact i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 12
  br i1 %50, label %102, label %51

51:                                               ; preds = %44
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr inbounds i32, i32* %1, i64 %54
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !2
  %59 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %54
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %60, align 4, !alias.scope !5, !noalias !2
  %61 = bitcast i32* %56 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4, !alias.scope !2
  %63 = add <4 x i32> %62, <i32 -1, i32 -1, i32 -1, i32 -1>
  %64 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %54
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %65, align 4, !alias.scope !5, !noalias !2
  %66 = or i64 %54, 4
  %67 = getelementptr inbounds i32, i32* %1, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !2
  %70 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %66
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %71, align 4, !alias.scope !5, !noalias !2
  %72 = bitcast i32* %67 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !alias.scope !2
  %74 = add <4 x i32> %73, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %66
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %76, align 4, !alias.scope !5, !noalias !2
  %77 = or i64 %54, 8
  %78 = getelementptr inbounds i32, i32* %1, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !2
  %81 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %77
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %82, align 4, !alias.scope !5, !noalias !2
  %83 = bitcast i32* %78 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !2
  %85 = add <4 x i32> %84, <i32 -1, i32 -1, i32 -1, i32 -1>
  %86 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %77
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %87, align 4, !alias.scope !5, !noalias !2
  %88 = or i64 %54, 12
  %89 = getelementptr inbounds i32, i32* %1, i64 %88
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !2
  %92 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %88
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %93, align 4, !alias.scope !5, !noalias !2
  %94 = bitcast i32* %89 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !2
  %96 = add <4 x i32> %95, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %88
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %98, align 4, !alias.scope !5, !noalias !2
  %99 = add i64 %54, 16
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !7

102:                                              ; preds = %53, %44
  %103 = phi i64 [ 0, %44 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr inbounds i32, i32* %1, i64 %106
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !2
  %111 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %106
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %112, align 4, !alias.scope !5, !noalias !2
  %113 = bitcast i32* %108 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !2
  %115 = add <4 x i32> %114, <i32 -1, i32 -1, i32 -1, i32 -1>
  %116 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %106
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 4, !alias.scope !5, !noalias !2
  %118 = add i64 %106, 4
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !9

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %45, %33
  br i1 %122, label %157, label %123

123:                                              ; preds = %121, %35, %28
  %124 = phi i64 [ 0, %35 ], [ 0, %28 ], [ %45, %121 ]
  %125 = xor i64 %124, -1
  %126 = and i64 %33, 1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %136, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds i32, i32* %1, i64 %124
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %124
  store i32 %130, i32* %131, align 4
  %132 = load i32, i32* %129, align 4
  %133 = add i32 %132, -1
  %134 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %124
  store i32 %133, i32* %134, align 4
  %135 = or i64 %124, 1
  br label %136

136:                                              ; preds = %123, %128
  %137 = phi i64 [ %124, %123 ], [ %135, %128 ]
  %138 = sub nsw i64 0, %33
  %139 = icmp eq i64 %125, %138
  br i1 %139, label %157, label %140

140:                                              ; preds = %136, %140
  %141 = phi i64 [ %155, %140 ], [ %137, %136 ]
  %142 = getelementptr inbounds i32, i32* %1, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %141
  store i32 %143, i32* %144, align 4
  %145 = load i32, i32* %142, align 4
  %146 = add i32 %145, -1
  %147 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %141
  store i32 %146, i32* %147, align 4
  %148 = add nuw nsw i64 %141, 1
  %149 = getelementptr inbounds i32, i32* %1, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %148
  store i32 %150, i32* %151, align 4
  %152 = load i32, i32* %149, align 4
  %153 = add i32 %152, -1
  %154 = getelementptr inbounds [8 x i32], [8 x i32]* %32, i64 0, i64 %148
  store i32 %153, i32* %154, align 4
  %155 = add nuw nsw i64 %141, 2
  %156 = icmp eq i64 %155, %33
  br i1 %156, label %157, label %140, !llvm.loop !11

157:                                              ; preds = %136, %140, %121
  %158 = getelementptr inbounds i8, i8* %11, i64 84
  %159 = bitcast i8* %158 to [8 x i32]*
  %160 = bitcast i8* %158 to i32*
  store i32 %3, i32* %160, align 4
  %161 = icmp ugt i32 %2, 1
  br i1 %161, label %162, label %226

162:                                              ; preds = %157
  %163 = zext i32 %2 to i64
  %164 = add nsw i64 %163, -1
  %165 = add nsw i64 %163, -2
  %166 = and i64 %164, 3
  %167 = icmp ult i64 %165, 3
  br i1 %167, label %208, label %168

168:                                              ; preds = %162
  %169 = sub nsw i64 %164, %166
  br label %170

170:                                              ; preds = %170, %168
  %171 = phi i32 [ %3, %168 ], [ %203, %170 ]
  %172 = phi i64 [ 1, %168 ], [ %205, %170 ]
  %173 = phi i64 [ %169, %168 ], [ %206, %170 ]
  %174 = trunc i64 %172 to i32
  %175 = sub i32 %2, %174
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i32, i32* %1, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = mul i32 %178, %171
  %180 = getelementptr inbounds [8 x i32], [8 x i32]* %159, i64 0, i64 %172
  store i32 %179, i32* %180, align 4
  %181 = add nuw nsw i64 %172, 1
  %182 = trunc i64 %181 to i32
  %183 = sub i32 %2, %182
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i32, i32* %1, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = mul i32 %186, %179
  %188 = getelementptr inbounds [8 x i32], [8 x i32]* %159, i64 0, i64 %181
  store i32 %187, i32* %188, align 4
  %189 = add nuw nsw i64 %172, 2
  %190 = trunc i64 %189 to i32
  %191 = sub i32 %2, %190
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %1, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = mul i32 %194, %187
  %196 = getelementptr inbounds [8 x i32], [8 x i32]* %159, i64 0, i64 %189
  store i32 %195, i32* %196, align 4
  %197 = add nuw nsw i64 %172, 3
  %198 = trunc i64 %197 to i32
  %199 = sub i32 %2, %198
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i32, i32* %1, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = mul i32 %202, %195
  %204 = getelementptr inbounds [8 x i32], [8 x i32]* %159, i64 0, i64 %197
  store i32 %203, i32* %204, align 4
  %205 = add nuw nsw i64 %172, 4
  %206 = add i64 %173, -4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %170

208:                                              ; preds = %170, %162
  %209 = phi i32 [ %3, %162 ], [ %203, %170 ]
  %210 = phi i64 [ 1, %162 ], [ %205, %170 ]
  %211 = icmp eq i64 %166, 0
  br i1 %211, label %226, label %212

212:                                              ; preds = %208, %212
  %213 = phi i32 [ %221, %212 ], [ %209, %208 ]
  %214 = phi i64 [ %223, %212 ], [ %210, %208 ]
  %215 = phi i64 [ %224, %212 ], [ %166, %208 ]
  %216 = trunc i64 %214 to i32
  %217 = sub i32 %2, %216
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds i32, i32* %1, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = mul i32 %220, %213
  %222 = getelementptr inbounds [8 x i32], [8 x i32]* %159, i64 0, i64 %214
  store i32 %221, i32* %222, align 4
  %223 = add nuw nsw i64 %214, 1
  %224 = add i64 %215, -1
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %212, !llvm.loop !12

226:                                              ; preds = %208, %212, %25, %157
  %227 = tail call i32 @_cmsSetInterpolationRoutine(%struct._cmsContext_struct* %0, %struct._cms_interp_struc* nonnull %12)
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %226
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 8, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 %2, i32 %3) #6
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %11) #6
  br label %230

230:                                              ; preds = %226, %10, %229, %9
  %231 = phi %struct._cms_interp_struc* [ null, %9 ], [ null, %229 ], [ null, %10 ], [ %12, %226 ]
  ret %struct._cms_interp_struc* %231
}

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #2

declare i8* @_cmsMallocZero(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_interp_struc* @_cmsComputeInterpParams(%struct._cmsContext_struct*, i32, i32, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = alloca [8 x i32], align 16
  %8 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #6
  %9 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %10 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
  %11 = insertelement <4 x i32> undef, i32 %1, i32 0
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> zeroinitializer
  %13 = bitcast [8 x i32]* %7 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %13, align 16
  %14 = bitcast i32* %10 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %14, align 16
  %15 = call %struct._cms_interp_struc* @_cmsComputeInterpParamsEx(%struct._cmsContext_struct* %0, i32* nonnull %9, i32 %2, i32 %3, i8* %4, i32 %5)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #6
  ret %struct._cms_interp_struc* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_cmsFreeInterpParams(%struct._cms_interp_struc*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._cms_interp_struc* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %0, i64 0, i32 0
  %5 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %4, align 8
  %6 = bitcast %struct._cms_interp_struc* %0 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %5, i8* nonnull %6) #6
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @LinLerp1Dfloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = load float, float* %0, align 4
  %8 = fcmp olt float %7, 0x3E112E0BE0000000
  %9 = fcmp uno float %7, 0.000000e+00
  %10 = or i1 %8, %9
  %11 = fcmp ogt float %7, 1.000000e+00
  %12 = select i1 %11, float 1.000000e+00, float %7
  %13 = select i1 %10, float 0.000000e+00, float %12
  %14 = fcmp oeq float %13, 1.000000e+00
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %21

17:                                               ; preds = %3
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds float, float* %6, i64 %18
  %20 = load float, float* %19, align 4
  br label %40

21:                                               ; preds = %3
  %22 = uitofp i32 %16 to float
  %23 = fmul float %13, %22
  %24 = fpext float %23 to double
  %25 = tail call double @llvm.floor.f64(double %24)
  %26 = fptosi double %25 to i32
  %27 = tail call double @llvm.ceil.f64(double %24)
  %28 = fptosi double %27 to i32
  %29 = sitofp i32 %26 to float
  %30 = fsub float %23, %29
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds float, float* %6, i64 %31
  %33 = load float, float* %32, align 4
  %34 = sext i32 %28 to i64
  %35 = getelementptr inbounds float, float* %6, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fsub float %36, %33
  %38 = fmul float %30, %37
  %39 = fadd float %33, %38
  br label %40

40:                                               ; preds = %21, %17
  %41 = phi float [ %39, %21 ], [ %20, %17 ]
  store float %41, float* %1, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @LinLerp1D(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #4 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = load i16, i16* %0, align 2
  %8 = icmp eq i16 %7, -1
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i16, i16* %6, i64 %12
  %14 = load i16, i16* %13, align 2
  br label %40

15:                                               ; preds = %3
  %16 = zext i16 %7 to i32
  %17 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %18, %16
  %20 = add nsw i32 %19, 32767
  %21 = sdiv i32 %20, 65535
  %22 = add nsw i32 %21, %19
  %23 = ashr i32 %22, 16
  %24 = and i32 %22, 65535
  %25 = sext i32 %23 to i64
  %26 = getelementptr inbounds i16, i16* %6, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = add nsw i32 %23, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %6, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %27 to i32
  %33 = zext i16 %31 to i32
  %34 = sub nsw i32 %33, %32
  %35 = mul i32 %24, %34
  %36 = add i32 %35, 32768
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  %39 = add i16 %27, %38
  br label %40

40:                                               ; preds = %15, %9
  %41 = phi i16 [ %39, %15 ], [ %14, %9 ]
  store i16 %41, i16* %1, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @Eval1InputFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = load float, float* %0, align 4
  %8 = fcmp olt float %7, 0x3E112E0BE0000000
  %9 = fcmp uno float %7, 0.000000e+00
  %10 = or i1 %8, %9
  %11 = fcmp ogt float %7, 1.000000e+00
  %12 = select i1 %11, float 1.000000e+00, float %7
  %13 = select i1 %10, float 0.000000e+00, float %12
  %14 = fcmp oeq float %13, 1.000000e+00
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %33

17:                                               ; preds = %3
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds float, float* %6, i64 %18
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %69, label %25

25:                                               ; preds = %17, %25
  %26 = phi i64 [ %29, %25 ], [ 0, %17 ]
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = bitcast float* %27 to i32*
  store i32 %21, i32* %28, align 4
  %29 = add nuw nsw i64 %26, 1
  %30 = load i32, i32* %22, align 8
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %25, label %69

33:                                               ; preds = %3
  %34 = uitofp i32 %16 to float
  %35 = fmul float %13, %34
  %36 = fpext float %35 to double
  %37 = tail call double @llvm.floor.f64(double %36)
  %38 = fptosi double %37 to i32
  %39 = tail call double @llvm.ceil.f64(double %36)
  %40 = fptosi double %39 to i32
  %41 = sitofp i32 %38 to float
  %42 = fsub float %35, %41
  %43 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 %44, %38
  %46 = mul i32 %44, %40
  %47 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %69, label %50

50:                                               ; preds = %33, %50
  %51 = phi i64 [ %65, %50 ], [ 0, %33 ]
  %52 = trunc i64 %51 to i32
  %53 = add i32 %45, %52
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds float, float* %6, i64 %54
  %56 = load float, float* %55, align 4
  %57 = add i32 %46, %52
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %6, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fsub float %60, %56
  %62 = fmul float %42, %61
  %63 = fadd float %56, %62
  %64 = getelementptr inbounds float, float* %1, i64 %51
  store float %63, float* %64, align 4
  %65 = add nuw nsw i64 %51, 1
  %66 = load i32, i32* %47, align 8
  %67 = zext i32 %66 to i64
  %68 = icmp ult i64 %65, %67
  br i1 %68, label %50, label %69

69:                                               ; preds = %50, %25, %17, %33
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @Eval1Input(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #4 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = load i16, i16* %0, align 2
  %8 = zext i16 %7 to i32
  %9 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = mul i32 %10, %8
  %12 = add nsw i32 %11, 32767
  %13 = sdiv i32 %12, 65535
  %14 = add nsw i32 %13, %11
  %15 = ashr i32 %14, 16
  %16 = and i32 %14, 65535
  %17 = icmp ne i16 %7, -1
  %18 = zext i1 %17 to i32
  %19 = add nsw i32 %15, %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = mul i32 %15, %21
  %23 = mul i32 %19, %21
  %24 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %51, label %27

27:                                               ; preds = %3, %27
  %28 = phi i64 [ %47, %27 ], [ 0, %3 ]
  %29 = trunc i64 %28 to i32
  %30 = add i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %6, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = add i32 %23, %29
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %6, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = sub nsw i32 %39, %34
  %41 = mul i32 %40, %16
  %42 = add i32 %41, 32768
  %43 = lshr i32 %42, 16
  %44 = trunc i32 %43 to i16
  %45 = add i16 %33, %44
  %46 = getelementptr inbounds i16, i16* %1, i64 %28
  store i16 %45, i16* %46, align 2
  %47 = add nuw nsw i64 %28, 1
  %48 = load i32, i32* %24, align 8
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %27, label %51

51:                                               ; preds = %27, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @BilinearInterpFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load float, float* %0, align 4
  %10 = fcmp olt float %9, 0x3E112E0BE0000000
  %11 = fcmp uno float %9, 0.000000e+00
  %12 = or i1 %10, %11
  %13 = fcmp ogt float %9, 1.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %9
  %15 = select i1 %12, float 0.000000e+00, float %14
  %16 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = uitofp i32 %17 to float
  %19 = fmul float %15, %18
  %20 = getelementptr inbounds float, float* %0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fcmp olt float %21, 0x3E112E0BE0000000
  %23 = fcmp uno float %21, 0.000000e+00
  %24 = or i1 %22, %23
  %25 = fcmp ogt float %21, 1.000000e+00
  %26 = select i1 %25, float 1.000000e+00, float %21
  %27 = select i1 %24, float 0.000000e+00, float %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %29 = load i32, i32* %28, align 4
  %30 = uitofp i32 %29 to float
  %31 = fmul float %27, %30
  %32 = tail call float @llvm.floor.f32(float %19)
  %33 = fptosi float %32 to i32
  %34 = sitofp i32 %33 to float
  %35 = fsub float %19, %34
  %36 = tail call float @llvm.floor.f32(float %31)
  %37 = fptosi float %36 to i32
  %38 = sitofp i32 %37 to float
  %39 = fsub float %31, %38
  %40 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 %41, %33
  %43 = fcmp ult float %15, 1.000000e+00
  %44 = select i1 %43, i32 %41, i32 0
  %45 = add i32 %42, %44
  %46 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %47 = load i32, i32* %46, align 4
  %48 = mul i32 %47, %37
  %49 = fcmp ult float %27, 1.000000e+00
  %50 = select i1 %49, i32 %47, i32 0
  %51 = add i32 %48, %50
  %52 = icmp sgt i32 %8, 0
  br i1 %52, label %53, label %211

53:                                               ; preds = %3
  %54 = zext i32 %8 to i64
  %55 = icmp ult i32 %8, 4
  br i1 %55, label %176, label %56

56:                                               ; preds = %53
  %57 = add nsw i64 %54, -1
  %58 = add i32 %48, %42
  %59 = trunc i64 %57 to i32
  %60 = add i32 %58, %59
  %61 = icmp slt i32 %60, %58
  %62 = icmp ugt i64 %57, 4294967295
  %63 = or i1 %61, %62
  %64 = add i32 %50, %48
  %65 = add i32 %64, %42
  %66 = trunc i64 %57 to i32
  %67 = add i32 %65, %66
  %68 = icmp slt i32 %67, %65
  %69 = icmp ugt i64 %57, 4294967295
  %70 = or i1 %68, %69
  %71 = or i1 %63, %70
  %72 = add i32 %44, %42
  %73 = add i32 %72, %48
  %74 = trunc i64 %57 to i32
  %75 = add i32 %73, %74
  %76 = icmp slt i32 %75, %73
  %77 = icmp ugt i64 %57, 4294967295
  %78 = or i1 %76, %77
  %79 = or i1 %71, %78
  %80 = add i32 %44, %50
  %81 = add i32 %80, %42
  %82 = add i32 %81, %48
  %83 = trunc i64 %57 to i32
  %84 = add i32 %82, %83
  %85 = icmp slt i32 %84, %82
  %86 = icmp ugt i64 %57, 4294967295
  %87 = or i1 %85, %86
  %88 = or i1 %79, %87
  br i1 %88, label %176, label %89

89:                                               ; preds = %56
  %90 = getelementptr float, float* %1, i64 %54
  %91 = add i32 %44, %50
  %92 = add i32 %91, %42
  %93 = add i32 %92, %48
  %94 = sext i32 %93 to i64
  %95 = getelementptr float, float* %6, i64 %94
  %96 = add nsw i64 %94, %54
  %97 = getelementptr float, float* %6, i64 %96
  %98 = add i32 %44, %42
  %99 = add i32 %98, %48
  %100 = sext i32 %99 to i64
  %101 = getelementptr float, float* %6, i64 %100
  %102 = add nsw i64 %100, %54
  %103 = getelementptr float, float* %6, i64 %102
  %104 = add i32 %50, %48
  %105 = add i32 %104, %42
  %106 = sext i32 %105 to i64
  %107 = getelementptr float, float* %6, i64 %106
  %108 = add nsw i64 %106, %54
  %109 = getelementptr float, float* %6, i64 %108
  %110 = add i32 %48, %42
  %111 = sext i32 %110 to i64
  %112 = getelementptr float, float* %6, i64 %111
  %113 = add nsw i64 %111, %54
  %114 = getelementptr float, float* %6, i64 %113
  %115 = icmp ugt float* %97, %1
  %116 = icmp ult float* %95, %90
  %117 = and i1 %115, %116
  %118 = icmp ugt float* %103, %1
  %119 = icmp ult float* %101, %90
  %120 = and i1 %118, %119
  %121 = or i1 %117, %120
  %122 = icmp ugt float* %109, %1
  %123 = icmp ult float* %107, %90
  %124 = and i1 %122, %123
  %125 = or i1 %121, %124
  %126 = icmp ugt float* %114, %1
  %127 = icmp ult float* %112, %90
  %128 = and i1 %126, %127
  %129 = or i1 %125, %128
  br i1 %129, label %176, label %130

130:                                              ; preds = %89
  %131 = and i64 %54, 4294967292
  %132 = insertelement <4 x float> undef, float %35, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = insertelement <4 x float> undef, float %39, i32 0
  %135 = shufflevector <4 x float> %134, <4 x float> undef, <4 x i32> zeroinitializer
  br label %136

136:                                              ; preds = %136, %130
  %137 = phi i64 [ 0, %130 ], [ %172, %136 ]
  %138 = trunc i64 %137 to i32
  %139 = add i32 %48, %138
  %140 = add i32 %139, %42
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %6, i64 %141
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 4, !alias.scope !13
  %145 = add i32 %51, %138
  %146 = add i32 %145, %42
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %6, i64 %147
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 4, !alias.scope !16
  %151 = add i32 %139, %45
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %6, i64 %152
  %154 = bitcast float* %153 to <4 x float>*
  %155 = load <4 x float>, <4 x float>* %154, align 4, !alias.scope !18
  %156 = add i32 %145, %45
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %6, i64 %157
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 4, !alias.scope !20
  %161 = fsub <4 x float> %155, %144
  %162 = fmul <4 x float> %133, %161
  %163 = fadd <4 x float> %144, %162
  %164 = fsub <4 x float> %160, %150
  %165 = fmul <4 x float> %133, %164
  %166 = fadd <4 x float> %150, %165
  %167 = fsub <4 x float> %166, %163
  %168 = fmul <4 x float> %135, %167
  %169 = fadd <4 x float> %163, %168
  %170 = getelementptr inbounds float, float* %1, i64 %137
  %171 = bitcast float* %170 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 4, !alias.scope !22, !noalias !24
  %172 = add i64 %137, 4
  %173 = icmp eq i64 %172, %131
  br i1 %173, label %174, label %136, !llvm.loop !25

174:                                              ; preds = %136
  %175 = icmp eq i64 %131, %54
  br i1 %175, label %211, label %176

176:                                              ; preds = %174, %89, %56, %53
  %177 = phi i64 [ 0, %89 ], [ 0, %56 ], [ 0, %53 ], [ %131, %174 ]
  br label %178

178:                                              ; preds = %176, %178
  %179 = phi i64 [ %209, %178 ], [ %177, %176 ]
  %180 = trunc i64 %179 to i32
  %181 = add i32 %48, %180
  %182 = add i32 %181, %42
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %6, i64 %183
  %185 = load float, float* %184, align 4
  %186 = add i32 %51, %180
  %187 = add i32 %186, %42
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds float, float* %6, i64 %188
  %190 = load float, float* %189, align 4
  %191 = add i32 %181, %45
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds float, float* %6, i64 %192
  %194 = load float, float* %193, align 4
  %195 = add i32 %186, %45
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds float, float* %6, i64 %196
  %198 = load float, float* %197, align 4
  %199 = fsub float %194, %185
  %200 = fmul float %35, %199
  %201 = fadd float %185, %200
  %202 = fsub float %198, %190
  %203 = fmul float %35, %202
  %204 = fadd float %190, %203
  %205 = fsub float %204, %201
  %206 = fmul float %39, %205
  %207 = fadd float %201, %206
  %208 = getelementptr inbounds float, float* %1, i64 %179
  store float %207, float* %208, align 4
  %209 = add nuw nsw i64 %179, 1
  %210 = icmp eq i64 %209, %54
  br i1 %210, label %211, label %178, !llvm.loop !26

211:                                              ; preds = %178, %174, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @BilinearInterp16(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #4 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load i16, i16* %0, align 2
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, %10
  %14 = add nsw i32 %13, 32767
  %15 = sdiv i32 %14, 65535
  %16 = add nsw i32 %15, %13
  %17 = ashr i32 %16, 16
  %18 = and i32 %16, 65535
  %19 = getelementptr inbounds i16, i16* %0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = mul i32 %23, %21
  %25 = add nsw i32 %24, 32767
  %26 = sdiv i32 %25, 65535
  %27 = add nsw i32 %26, %24
  %28 = ashr i32 %27, 16
  %29 = and i32 %27, 65535
  %30 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = mul i32 %17, %31
  %33 = icmp eq i16 %9, -1
  %34 = select i1 %33, i32 0, i32 %31
  %35 = add i32 %32, %34
  %36 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %37 = load i32, i32* %36, align 4
  %38 = mul i32 %28, %37
  %39 = icmp eq i16 %20, -1
  %40 = select i1 %39, i32 0, i32 %37
  %41 = add i32 %38, %40
  %42 = icmp sgt i32 %8, 0
  br i1 %42, label %43, label %231

43:                                               ; preds = %3
  %44 = zext i32 %8 to i64
  %45 = icmp ult i32 %8, 8
  br i1 %45, label %181, label %46

46:                                               ; preds = %43
  %47 = add nsw i64 %44, -1
  %48 = add i32 %38, %32
  %49 = trunc i64 %47 to i32
  %50 = add i32 %48, %49
  %51 = icmp slt i32 %50, %48
  %52 = icmp ugt i64 %47, 4294967295
  %53 = or i1 %51, %52
  %54 = add i32 %40, %38
  %55 = add i32 %54, %32
  %56 = trunc i64 %47 to i32
  %57 = add i32 %55, %56
  %58 = icmp slt i32 %57, %55
  %59 = icmp ugt i64 %47, 4294967295
  %60 = or i1 %58, %59
  %61 = or i1 %53, %60
  %62 = add i32 %34, %32
  %63 = add i32 %62, %38
  %64 = trunc i64 %47 to i32
  %65 = add i32 %63, %64
  %66 = icmp slt i32 %65, %63
  %67 = icmp ugt i64 %47, 4294967295
  %68 = or i1 %66, %67
  %69 = or i1 %61, %68
  %70 = add i32 %34, %40
  %71 = add i32 %70, %32
  %72 = add i32 %71, %38
  %73 = trunc i64 %47 to i32
  %74 = add i32 %72, %73
  %75 = icmp slt i32 %74, %72
  %76 = icmp ugt i64 %47, 4294967295
  %77 = or i1 %75, %76
  %78 = or i1 %69, %77
  br i1 %78, label %181, label %79

79:                                               ; preds = %46
  %80 = getelementptr i16, i16* %1, i64 %44
  %81 = add i32 %34, %40
  %82 = add i32 %81, %32
  %83 = add i32 %82, %38
  %84 = sext i32 %83 to i64
  %85 = getelementptr i16, i16* %6, i64 %84
  %86 = add nsw i64 %84, %44
  %87 = getelementptr i16, i16* %6, i64 %86
  %88 = add i32 %34, %32
  %89 = add i32 %88, %38
  %90 = sext i32 %89 to i64
  %91 = getelementptr i16, i16* %6, i64 %90
  %92 = add nsw i64 %90, %44
  %93 = getelementptr i16, i16* %6, i64 %92
  %94 = add i32 %40, %38
  %95 = add i32 %94, %32
  %96 = sext i32 %95 to i64
  %97 = getelementptr i16, i16* %6, i64 %96
  %98 = add nsw i64 %96, %44
  %99 = getelementptr i16, i16* %6, i64 %98
  %100 = add i32 %38, %32
  %101 = sext i32 %100 to i64
  %102 = getelementptr i16, i16* %6, i64 %101
  %103 = add nsw i64 %101, %44
  %104 = getelementptr i16, i16* %6, i64 %103
  %105 = icmp ugt i16* %87, %1
  %106 = icmp ult i16* %85, %80
  %107 = and i1 %105, %106
  %108 = icmp ugt i16* %93, %1
  %109 = icmp ult i16* %91, %80
  %110 = and i1 %108, %109
  %111 = or i1 %107, %110
  %112 = icmp ugt i16* %99, %1
  %113 = icmp ult i16* %97, %80
  %114 = and i1 %112, %113
  %115 = or i1 %111, %114
  %116 = icmp ugt i16* %104, %1
  %117 = icmp ult i16* %102, %80
  %118 = and i1 %116, %117
  %119 = or i1 %115, %118
  br i1 %119, label %181, label %120

120:                                              ; preds = %79
  %121 = and i64 %44, 4294967288
  %122 = insertelement <8 x i32> undef, i32 %18, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  %124 = insertelement <8 x i32> undef, i32 %29, i32 0
  %125 = shufflevector <8 x i32> %124, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %126

126:                                              ; preds = %126, %120
  %127 = phi i64 [ 0, %120 ], [ %177, %126 ]
  %128 = trunc i64 %127 to i32
  %129 = add i32 %38, %128
  %130 = add i32 %129, %32
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i16, i16* %6, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !27
  %135 = zext <8 x i16> %134 to <8 x i32>
  %136 = add i32 %41, %128
  %137 = add i32 %136, %32
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i16, i16* %6, i64 %138
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !30
  %142 = zext <8 x i16> %141 to <8 x i32>
  %143 = add i32 %129, %35
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i16, i16* %6, i64 %144
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2, !alias.scope !32
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = add i32 %136, %35
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i16, i16* %6, i64 %150
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !34
  %154 = zext <8 x i16> %153 to <8 x i32>
  %155 = sub nsw <8 x i32> %148, %135
  %156 = mul nsw <8 x i32> %155, %123
  %157 = add nsw <8 x i32> %156, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %158 = lshr <8 x i32> %157, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %159 = trunc <8 x i32> %158 to <8 x i16>
  %160 = add <8 x i16> %134, %159
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = sub nsw <8 x i32> %154, %142
  %163 = mul nsw <8 x i32> %162, %123
  %164 = add nsw <8 x i32> %163, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %165 = lshr <8 x i32> %164, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = add <8 x i16> %141, %166
  %168 = zext <8 x i16> %167 to <8 x i32>
  %169 = sub nsw <8 x i32> %168, %161
  %170 = mul nsw <8 x i32> %169, %125
  %171 = add nsw <8 x i32> %170, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %172 = lshr <8 x i32> %171, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %173 = trunc <8 x i32> %172 to <8 x i16>
  %174 = add <8 x i16> %160, %173
  %175 = getelementptr inbounds i16, i16* %1, i64 %127
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %176, align 2, !alias.scope !36, !noalias !38
  %177 = add i64 %127, 8
  %178 = icmp eq i64 %177, %121
  br i1 %178, label %179, label %126, !llvm.loop !39

179:                                              ; preds = %126
  %180 = icmp eq i64 %121, %44
  br i1 %180, label %231, label %181

181:                                              ; preds = %179, %79, %46, %43
  %182 = phi i64 [ 0, %79 ], [ 0, %46 ], [ 0, %43 ], [ %121, %179 ]
  br label %183

183:                                              ; preds = %181, %183
  %184 = phi i64 [ %229, %183 ], [ %182, %181 ]
  %185 = trunc i64 %184 to i32
  %186 = add i32 %38, %185
  %187 = add i32 %186, %32
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %6, i64 %188
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add i32 %41, %185
  %193 = add i32 %192, %32
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i16, i16* %6, i64 %194
  %196 = load i16, i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = add i32 %186, %35
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i16, i16* %6, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = add i32 %192, %35
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i16, i16* %6, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = sub nsw i32 %202, %191
  %209 = mul nsw i32 %208, %18
  %210 = add nsw i32 %209, 32768
  %211 = lshr i32 %210, 16
  %212 = trunc i32 %211 to i16
  %213 = add i16 %190, %212
  %214 = zext i16 %213 to i32
  %215 = sub nsw i32 %207, %197
  %216 = mul nsw i32 %215, %18
  %217 = add nsw i32 %216, 32768
  %218 = lshr i32 %217, 16
  %219 = trunc i32 %218 to i16
  %220 = add i16 %196, %219
  %221 = zext i16 %220 to i32
  %222 = sub nsw i32 %221, %214
  %223 = mul nsw i32 %222, %29
  %224 = add nsw i32 %223, 32768
  %225 = lshr i32 %224, 16
  %226 = trunc i32 %225 to i16
  %227 = add i16 %213, %226
  %228 = getelementptr inbounds i16, i16* %1, i64 %184
  store i16 %227, i16* %228, align 2
  %229 = add nuw nsw i64 %184, 1
  %230 = icmp eq i64 %229, %44
  br i1 %230, label %231, label %183, !llvm.loop !40

231:                                              ; preds = %183, %179, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @TrilinearInterpFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load float, float* %0, align 4
  %10 = fcmp olt float %9, 0x3E112E0BE0000000
  %11 = fcmp uno float %9, 0.000000e+00
  %12 = or i1 %10, %11
  %13 = fcmp ogt float %9, 1.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %9
  %15 = select i1 %12, float 0.000000e+00, float %14
  %16 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = uitofp i32 %17 to float
  %19 = fmul float %15, %18
  %20 = getelementptr inbounds float, float* %0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fcmp olt float %21, 0x3E112E0BE0000000
  %23 = fcmp uno float %21, 0.000000e+00
  %24 = or i1 %22, %23
  %25 = fcmp ogt float %21, 1.000000e+00
  %26 = select i1 %25, float 1.000000e+00, float %21
  %27 = select i1 %24, float 0.000000e+00, float %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %29 = load i32, i32* %28, align 4
  %30 = uitofp i32 %29 to float
  %31 = fmul float %27, %30
  %32 = getelementptr inbounds float, float* %0, i64 2
  %33 = load float, float* %32, align 4
  %34 = fcmp olt float %33, 0x3E112E0BE0000000
  %35 = fcmp uno float %33, 0.000000e+00
  %36 = or i1 %34, %35
  %37 = fcmp ogt float %33, 1.000000e+00
  %38 = select i1 %37, float 1.000000e+00, float %33
  %39 = select i1 %36, float 0.000000e+00, float %38
  %40 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 2
  %41 = load i32, i32* %40, align 4
  %42 = uitofp i32 %41 to float
  %43 = fmul float %39, %42
  %44 = tail call float @llvm.floor.f32(float %19)
  %45 = fptosi float %44 to i32
  %46 = sitofp i32 %45 to float
  %47 = fsub float %19, %46
  %48 = tail call float @llvm.floor.f32(float %31)
  %49 = fptosi float %48 to i32
  %50 = sitofp i32 %49 to float
  %51 = fsub float %31, %50
  %52 = tail call float @llvm.floor.f32(float %43)
  %53 = fptosi float %52 to i32
  %54 = sitofp i32 %53 to float
  %55 = fsub float %43, %54
  %56 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 2
  %57 = load i32, i32* %56, align 4
  %58 = mul i32 %57, %45
  %59 = fcmp ult float %15, 1.000000e+00
  %60 = select i1 %59, i32 %57, i32 0
  %61 = add i32 %58, %60
  %62 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %63 = load i32, i32* %62, align 4
  %64 = mul i32 %63, %49
  %65 = fcmp ult float %27, 1.000000e+00
  %66 = select i1 %65, i32 %63, i32 0
  %67 = add i32 %64, %66
  %68 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %69 = load i32, i32* %68, align 4
  %70 = mul i32 %69, %53
  %71 = fcmp ult float %39, 1.000000e+00
  %72 = select i1 %71, i32 %69, i32 0
  %73 = add i32 %70, %72
  %74 = icmp sgt i32 %8, 0
  br i1 %74, label %75, label %395

75:                                               ; preds = %3
  %76 = add nsw i32 %64, %58
  %77 = add nsw i32 %67, %58
  %78 = add nsw i32 %64, %61
  %79 = add nsw i32 %67, %61
  %80 = zext i32 %8 to i64
  %81 = icmp ult i32 %8, 4
  br i1 %81, label %332, label %82

82:                                               ; preds = %75
  %83 = add nsw i64 %80, -1
  %84 = add i32 %64, %58
  %85 = add i32 %84, %70
  %86 = trunc i64 %83 to i32
  %87 = add i32 %85, %86
  %88 = icmp slt i32 %87, %85
  %89 = icmp ugt i64 %83, 4294967295
  %90 = or i1 %88, %89
  %91 = add i32 %72, %64
  %92 = add i32 %91, %58
  %93 = add i32 %92, %70
  %94 = trunc i64 %83 to i32
  %95 = add i32 %93, %94
  %96 = icmp slt i32 %95, %93
  %97 = icmp ugt i64 %83, 4294967295
  %98 = or i1 %96, %97
  %99 = or i1 %90, %98
  %100 = add i32 %66, %64
  %101 = add i32 %100, %58
  %102 = add i32 %101, %70
  %103 = trunc i64 %83 to i32
  %104 = add i32 %102, %103
  %105 = icmp slt i32 %104, %102
  %106 = icmp ugt i64 %83, 4294967295
  %107 = or i1 %105, %106
  %108 = or i1 %99, %107
  %109 = add i32 %66, %72
  %110 = add i32 %109, %64
  %111 = add i32 %110, %58
  %112 = add i32 %111, %70
  %113 = trunc i64 %83 to i32
  %114 = add i32 %112, %113
  %115 = icmp slt i32 %114, %112
  %116 = icmp ugt i64 %83, 4294967295
  %117 = or i1 %115, %116
  %118 = or i1 %108, %117
  %119 = add i32 %60, %58
  %120 = add i32 %119, %64
  %121 = add i32 %120, %70
  %122 = trunc i64 %83 to i32
  %123 = add i32 %121, %122
  %124 = icmp slt i32 %123, %121
  %125 = icmp ugt i64 %83, 4294967295
  %126 = or i1 %124, %125
  %127 = or i1 %118, %126
  %128 = add i32 %60, %72
  %129 = add i32 %128, %58
  %130 = add i32 %129, %64
  %131 = add i32 %130, %70
  %132 = trunc i64 %83 to i32
  %133 = add i32 %131, %132
  %134 = icmp slt i32 %133, %131
  %135 = icmp ugt i64 %83, 4294967295
  %136 = or i1 %134, %135
  %137 = or i1 %127, %136
  %138 = add i32 %60, %66
  %139 = add i32 %138, %58
  %140 = add i32 %139, %64
  %141 = add i32 %140, %70
  %142 = trunc i64 %83 to i32
  %143 = add i32 %141, %142
  %144 = icmp slt i32 %143, %141
  %145 = icmp ugt i64 %83, 4294967295
  %146 = or i1 %144, %145
  %147 = or i1 %137, %146
  %148 = add i32 %60, %66
  %149 = add i32 %148, %72
  %150 = add i32 %149, %58
  %151 = add i32 %150, %64
  %152 = add i32 %151, %70
  %153 = trunc i64 %83 to i32
  %154 = add i32 %152, %153
  %155 = icmp slt i32 %154, %152
  %156 = icmp ugt i64 %83, 4294967295
  %157 = or i1 %155, %156
  %158 = or i1 %147, %157
  br i1 %158, label %332, label %159

159:                                              ; preds = %82
  %160 = getelementptr float, float* %1, i64 %80
  %161 = add i32 %60, %66
  %162 = add i32 %161, %72
  %163 = add i32 %162, %58
  %164 = add i32 %163, %64
  %165 = add i32 %164, %70
  %166 = sext i32 %165 to i64
  %167 = getelementptr float, float* %6, i64 %166
  %168 = add nsw i64 %166, %80
  %169 = getelementptr float, float* %6, i64 %168
  %170 = add i32 %60, %66
  %171 = add i32 %170, %58
  %172 = add i32 %171, %64
  %173 = add i32 %172, %70
  %174 = sext i32 %173 to i64
  %175 = getelementptr float, float* %6, i64 %174
  %176 = add nsw i64 %174, %80
  %177 = getelementptr float, float* %6, i64 %176
  %178 = add i32 %60, %72
  %179 = add i32 %178, %58
  %180 = add i32 %179, %64
  %181 = add i32 %180, %70
  %182 = sext i32 %181 to i64
  %183 = getelementptr float, float* %6, i64 %182
  %184 = add nsw i64 %182, %80
  %185 = getelementptr float, float* %6, i64 %184
  %186 = add i32 %60, %58
  %187 = add i32 %186, %64
  %188 = add i32 %187, %70
  %189 = sext i32 %188 to i64
  %190 = getelementptr float, float* %6, i64 %189
  %191 = add nsw i64 %189, %80
  %192 = getelementptr float, float* %6, i64 %191
  %193 = add i32 %66, %72
  %194 = add i32 %193, %64
  %195 = add i32 %194, %58
  %196 = add i32 %195, %70
  %197 = sext i32 %196 to i64
  %198 = getelementptr float, float* %6, i64 %197
  %199 = add nsw i64 %197, %80
  %200 = getelementptr float, float* %6, i64 %199
  %201 = add i32 %66, %64
  %202 = add i32 %201, %58
  %203 = add i32 %202, %70
  %204 = sext i32 %203 to i64
  %205 = getelementptr float, float* %6, i64 %204
  %206 = add nsw i64 %204, %80
  %207 = getelementptr float, float* %6, i64 %206
  %208 = add i32 %72, %64
  %209 = add i32 %208, %58
  %210 = add i32 %209, %70
  %211 = sext i32 %210 to i64
  %212 = getelementptr float, float* %6, i64 %211
  %213 = add nsw i64 %211, %80
  %214 = getelementptr float, float* %6, i64 %213
  %215 = add i32 %64, %58
  %216 = add i32 %215, %70
  %217 = sext i32 %216 to i64
  %218 = getelementptr float, float* %6, i64 %217
  %219 = add nsw i64 %217, %80
  %220 = getelementptr float, float* %6, i64 %219
  %221 = icmp ugt float* %169, %1
  %222 = icmp ult float* %167, %160
  %223 = and i1 %221, %222
  %224 = icmp ugt float* %177, %1
  %225 = icmp ult float* %175, %160
  %226 = and i1 %224, %225
  %227 = or i1 %223, %226
  %228 = icmp ugt float* %185, %1
  %229 = icmp ult float* %183, %160
  %230 = and i1 %228, %229
  %231 = or i1 %227, %230
  %232 = icmp ugt float* %192, %1
  %233 = icmp ult float* %190, %160
  %234 = and i1 %232, %233
  %235 = or i1 %231, %234
  %236 = icmp ugt float* %200, %1
  %237 = icmp ult float* %198, %160
  %238 = and i1 %236, %237
  %239 = or i1 %235, %238
  %240 = icmp ugt float* %207, %1
  %241 = icmp ult float* %205, %160
  %242 = and i1 %240, %241
  %243 = or i1 %239, %242
  %244 = icmp ugt float* %214, %1
  %245 = icmp ult float* %212, %160
  %246 = and i1 %244, %245
  %247 = or i1 %243, %246
  %248 = icmp ugt float* %220, %1
  %249 = icmp ult float* %218, %160
  %250 = and i1 %248, %249
  %251 = or i1 %247, %250
  br i1 %251, label %332, label %252

252:                                              ; preds = %159
  %253 = and i64 %80, 4294967292
  %254 = insertelement <4 x float> undef, float %47, i32 0
  %255 = shufflevector <4 x float> %254, <4 x float> undef, <4 x i32> zeroinitializer
  %256 = insertelement <4 x float> undef, float %51, i32 0
  %257 = shufflevector <4 x float> %256, <4 x float> undef, <4 x i32> zeroinitializer
  %258 = insertelement <4 x float> undef, float %55, i32 0
  %259 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> zeroinitializer
  br label %260

260:                                              ; preds = %260, %252
  %261 = phi i64 [ 0, %252 ], [ %328, %260 ]
  %262 = trunc i64 %261 to i32
  %263 = add i32 %70, %262
  %264 = add i32 %263, %76
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds float, float* %6, i64 %265
  %267 = bitcast float* %266 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 4, !alias.scope !41
  %269 = add i32 %73, %262
  %270 = add i32 %269, %76
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds float, float* %6, i64 %271
  %273 = bitcast float* %272 to <4 x float>*
  %274 = load <4 x float>, <4 x float>* %273, align 4, !alias.scope !44
  %275 = add i32 %263, %77
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds float, float* %6, i64 %276
  %278 = bitcast float* %277 to <4 x float>*
  %279 = load <4 x float>, <4 x float>* %278, align 4, !alias.scope !46
  %280 = add i32 %269, %77
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds float, float* %6, i64 %281
  %283 = bitcast float* %282 to <4 x float>*
  %284 = load <4 x float>, <4 x float>* %283, align 4, !alias.scope !48
  %285 = add i32 %263, %78
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds float, float* %6, i64 %286
  %288 = bitcast float* %287 to <4 x float>*
  %289 = load <4 x float>, <4 x float>* %288, align 4, !alias.scope !50
  %290 = add i32 %269, %78
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds float, float* %6, i64 %291
  %293 = bitcast float* %292 to <4 x float>*
  %294 = load <4 x float>, <4 x float>* %293, align 4, !alias.scope !52
  %295 = add i32 %263, %79
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds float, float* %6, i64 %296
  %298 = bitcast float* %297 to <4 x float>*
  %299 = load <4 x float>, <4 x float>* %298, align 4, !alias.scope !54
  %300 = add i32 %269, %79
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, float* %6, i64 %301
  %303 = bitcast float* %302 to <4 x float>*
  %304 = load <4 x float>, <4 x float>* %303, align 4, !alias.scope !56
  %305 = fsub <4 x float> %289, %268
  %306 = fmul <4 x float> %255, %305
  %307 = fadd <4 x float> %268, %306
  %308 = fsub <4 x float> %294, %274
  %309 = fmul <4 x float> %255, %308
  %310 = fadd <4 x float> %274, %309
  %311 = fsub <4 x float> %299, %279
  %312 = fmul <4 x float> %255, %311
  %313 = fadd <4 x float> %279, %312
  %314 = fsub <4 x float> %304, %284
  %315 = fmul <4 x float> %255, %314
  %316 = fadd <4 x float> %284, %315
  %317 = fsub <4 x float> %313, %307
  %318 = fmul <4 x float> %257, %317
  %319 = fadd <4 x float> %307, %318
  %320 = fsub <4 x float> %316, %310
  %321 = fmul <4 x float> %257, %320
  %322 = fadd <4 x float> %310, %321
  %323 = fsub <4 x float> %322, %319
  %324 = fmul <4 x float> %259, %323
  %325 = fadd <4 x float> %319, %324
  %326 = getelementptr inbounds float, float* %1, i64 %261
  %327 = bitcast float* %326 to <4 x float>*
  store <4 x float> %325, <4 x float>* %327, align 4, !alias.scope !58, !noalias !60
  %328 = add i64 %261, 4
  %329 = icmp eq i64 %328, %253
  br i1 %329, label %330, label %260, !llvm.loop !61

330:                                              ; preds = %260
  %331 = icmp eq i64 %253, %80
  br i1 %331, label %395, label %332

332:                                              ; preds = %330, %159, %82, %75
  %333 = phi i64 [ 0, %159 ], [ 0, %82 ], [ 0, %75 ], [ %253, %330 ]
  br label %334

334:                                              ; preds = %332, %334
  %335 = phi i64 [ %393, %334 ], [ %333, %332 ]
  %336 = trunc i64 %335 to i32
  %337 = add i32 %70, %336
  %338 = add i32 %337, %76
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds float, float* %6, i64 %339
  %341 = load float, float* %340, align 4
  %342 = add i32 %73, %336
  %343 = add i32 %342, %76
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds float, float* %6, i64 %344
  %346 = load float, float* %345, align 4
  %347 = add i32 %337, %77
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds float, float* %6, i64 %348
  %350 = load float, float* %349, align 4
  %351 = add i32 %342, %77
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds float, float* %6, i64 %352
  %354 = load float, float* %353, align 4
  %355 = add i32 %337, %78
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds float, float* %6, i64 %356
  %358 = load float, float* %357, align 4
  %359 = add i32 %342, %78
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds float, float* %6, i64 %360
  %362 = load float, float* %361, align 4
  %363 = add i32 %337, %79
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds float, float* %6, i64 %364
  %366 = load float, float* %365, align 4
  %367 = add i32 %342, %79
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds float, float* %6, i64 %368
  %370 = load float, float* %369, align 4
  %371 = fsub float %358, %341
  %372 = fmul float %47, %371
  %373 = fadd float %341, %372
  %374 = fsub float %362, %346
  %375 = fmul float %47, %374
  %376 = fadd float %346, %375
  %377 = fsub float %366, %350
  %378 = fmul float %47, %377
  %379 = fadd float %350, %378
  %380 = fsub float %370, %354
  %381 = fmul float %47, %380
  %382 = fadd float %354, %381
  %383 = fsub float %379, %373
  %384 = fmul float %51, %383
  %385 = fadd float %373, %384
  %386 = fsub float %382, %376
  %387 = fmul float %51, %386
  %388 = fadd float %376, %387
  %389 = fsub float %388, %385
  %390 = fmul float %55, %389
  %391 = fadd float %385, %390
  %392 = getelementptr inbounds float, float* %1, i64 %335
  store float %391, float* %392, align 4
  %393 = add nuw nsw i64 %335, 1
  %394 = icmp eq i64 %393, %80
  br i1 %394, label %395, label %334, !llvm.loop !62

395:                                              ; preds = %334, %330, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TrilinearInterp16(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #4 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load i16, i16* %0, align 2
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, %10
  %14 = add nsw i32 %13, 32767
  %15 = sdiv i32 %14, 65535
  %16 = add nsw i32 %15, %13
  %17 = ashr i32 %16, 16
  %18 = and i32 %16, 65535
  %19 = getelementptr inbounds i16, i16* %0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = mul i32 %23, %21
  %25 = add nsw i32 %24, 32767
  %26 = sdiv i32 %25, 65535
  %27 = add nsw i32 %26, %24
  %28 = ashr i32 %27, 16
  %29 = and i32 %27, 65535
  %30 = getelementptr inbounds i16, i16* %0, i64 2
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 2
  %34 = load i32, i32* %33, align 4
  %35 = mul i32 %34, %32
  %36 = add nsw i32 %35, 32767
  %37 = sdiv i32 %36, 65535
  %38 = add nsw i32 %37, %35
  %39 = ashr i32 %38, 16
  %40 = and i32 %38, 65535
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 2
  %42 = load i32, i32* %41, align 4
  %43 = mul i32 %42, %17
  %44 = icmp eq i16 %9, -1
  %45 = select i1 %44, i32 0, i32 %42
  %46 = add i32 %43, %45
  %47 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %48 = load i32, i32* %47, align 4
  %49 = mul i32 %28, %48
  %50 = icmp eq i16 %20, -1
  %51 = select i1 %50, i32 0, i32 %48
  %52 = add i32 %49, %51
  %53 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %54 = load i32, i32* %53, align 4
  %55 = mul i32 %39, %54
  %56 = icmp eq i16 %31, -1
  %57 = select i1 %56, i32 0, i32 %54
  %58 = add i32 %55, %57
  %59 = icmp sgt i32 %8, 0
  br i1 %59, label %60, label %450

60:                                               ; preds = %3
  %61 = add nsw i32 %49, %43
  %62 = add nsw i32 %52, %43
  %63 = add nsw i32 %49, %46
  %64 = add nsw i32 %52, %46
  %65 = zext i32 %8 to i64
  %66 = icmp ult i32 %8, 8
  br i1 %66, label %352, label %67

67:                                               ; preds = %60
  %68 = add nsw i64 %65, -1
  %69 = add i32 %49, %43
  %70 = add i32 %69, %55
  %71 = trunc i64 %68 to i32
  %72 = add i32 %70, %71
  %73 = icmp slt i32 %72, %70
  %74 = icmp ugt i64 %68, 4294967295
  %75 = or i1 %73, %74
  %76 = add i32 %57, %49
  %77 = add i32 %76, %43
  %78 = add i32 %77, %55
  %79 = trunc i64 %68 to i32
  %80 = add i32 %78, %79
  %81 = icmp slt i32 %80, %78
  %82 = icmp ugt i64 %68, 4294967295
  %83 = or i1 %81, %82
  %84 = or i1 %75, %83
  %85 = add i32 %51, %49
  %86 = add i32 %85, %43
  %87 = add i32 %86, %55
  %88 = trunc i64 %68 to i32
  %89 = add i32 %87, %88
  %90 = icmp slt i32 %89, %87
  %91 = icmp ugt i64 %68, 4294967295
  %92 = or i1 %90, %91
  %93 = or i1 %84, %92
  %94 = add i32 %51, %57
  %95 = add i32 %94, %49
  %96 = add i32 %95, %43
  %97 = add i32 %96, %55
  %98 = trunc i64 %68 to i32
  %99 = add i32 %97, %98
  %100 = icmp slt i32 %99, %97
  %101 = icmp ugt i64 %68, 4294967295
  %102 = or i1 %100, %101
  %103 = or i1 %93, %102
  %104 = add i32 %45, %43
  %105 = add i32 %104, %49
  %106 = add i32 %105, %55
  %107 = trunc i64 %68 to i32
  %108 = add i32 %106, %107
  %109 = icmp slt i32 %108, %106
  %110 = icmp ugt i64 %68, 4294967295
  %111 = or i1 %109, %110
  %112 = or i1 %103, %111
  %113 = add i32 %45, %57
  %114 = add i32 %113, %43
  %115 = add i32 %114, %49
  %116 = add i32 %115, %55
  %117 = trunc i64 %68 to i32
  %118 = add i32 %116, %117
  %119 = icmp slt i32 %118, %116
  %120 = icmp ugt i64 %68, 4294967295
  %121 = or i1 %119, %120
  %122 = or i1 %112, %121
  %123 = add i32 %45, %51
  %124 = add i32 %123, %43
  %125 = add i32 %124, %49
  %126 = add i32 %125, %55
  %127 = trunc i64 %68 to i32
  %128 = add i32 %126, %127
  %129 = icmp slt i32 %128, %126
  %130 = icmp ugt i64 %68, 4294967295
  %131 = or i1 %129, %130
  %132 = or i1 %122, %131
  %133 = add i32 %45, %51
  %134 = add i32 %133, %57
  %135 = add i32 %134, %43
  %136 = add i32 %135, %49
  %137 = add i32 %136, %55
  %138 = trunc i64 %68 to i32
  %139 = add i32 %137, %138
  %140 = icmp slt i32 %139, %137
  %141 = icmp ugt i64 %68, 4294967295
  %142 = or i1 %140, %141
  %143 = or i1 %132, %142
  br i1 %143, label %352, label %144

144:                                              ; preds = %67
  %145 = getelementptr i16, i16* %1, i64 %65
  %146 = add i32 %45, %51
  %147 = add i32 %146, %57
  %148 = add i32 %147, %43
  %149 = add i32 %148, %49
  %150 = add i32 %149, %55
  %151 = sext i32 %150 to i64
  %152 = getelementptr i16, i16* %6, i64 %151
  %153 = add nsw i64 %151, %65
  %154 = getelementptr i16, i16* %6, i64 %153
  %155 = add i32 %45, %51
  %156 = add i32 %155, %43
  %157 = add i32 %156, %49
  %158 = add i32 %157, %55
  %159 = sext i32 %158 to i64
  %160 = getelementptr i16, i16* %6, i64 %159
  %161 = add nsw i64 %159, %65
  %162 = getelementptr i16, i16* %6, i64 %161
  %163 = add i32 %45, %57
  %164 = add i32 %163, %43
  %165 = add i32 %164, %49
  %166 = add i32 %165, %55
  %167 = sext i32 %166 to i64
  %168 = getelementptr i16, i16* %6, i64 %167
  %169 = add nsw i64 %167, %65
  %170 = getelementptr i16, i16* %6, i64 %169
  %171 = add i32 %45, %43
  %172 = add i32 %171, %49
  %173 = add i32 %172, %55
  %174 = sext i32 %173 to i64
  %175 = getelementptr i16, i16* %6, i64 %174
  %176 = add nsw i64 %174, %65
  %177 = getelementptr i16, i16* %6, i64 %176
  %178 = add i32 %51, %57
  %179 = add i32 %178, %49
  %180 = add i32 %179, %43
  %181 = add i32 %180, %55
  %182 = sext i32 %181 to i64
  %183 = getelementptr i16, i16* %6, i64 %182
  %184 = add nsw i64 %182, %65
  %185 = getelementptr i16, i16* %6, i64 %184
  %186 = add i32 %51, %49
  %187 = add i32 %186, %43
  %188 = add i32 %187, %55
  %189 = sext i32 %188 to i64
  %190 = getelementptr i16, i16* %6, i64 %189
  %191 = add nsw i64 %189, %65
  %192 = getelementptr i16, i16* %6, i64 %191
  %193 = add i32 %57, %49
  %194 = add i32 %193, %43
  %195 = add i32 %194, %55
  %196 = sext i32 %195 to i64
  %197 = getelementptr i16, i16* %6, i64 %196
  %198 = add nsw i64 %196, %65
  %199 = getelementptr i16, i16* %6, i64 %198
  %200 = add i32 %49, %43
  %201 = add i32 %200, %55
  %202 = sext i32 %201 to i64
  %203 = getelementptr i16, i16* %6, i64 %202
  %204 = add nsw i64 %202, %65
  %205 = getelementptr i16, i16* %6, i64 %204
  %206 = icmp ugt i16* %154, %1
  %207 = icmp ult i16* %152, %145
  %208 = and i1 %206, %207
  %209 = icmp ugt i16* %162, %1
  %210 = icmp ult i16* %160, %145
  %211 = and i1 %209, %210
  %212 = or i1 %208, %211
  %213 = icmp ugt i16* %170, %1
  %214 = icmp ult i16* %168, %145
  %215 = and i1 %213, %214
  %216 = or i1 %212, %215
  %217 = icmp ugt i16* %177, %1
  %218 = icmp ult i16* %175, %145
  %219 = and i1 %217, %218
  %220 = or i1 %216, %219
  %221 = icmp ugt i16* %185, %1
  %222 = icmp ult i16* %183, %145
  %223 = and i1 %221, %222
  %224 = or i1 %220, %223
  %225 = icmp ugt i16* %192, %1
  %226 = icmp ult i16* %190, %145
  %227 = and i1 %225, %226
  %228 = or i1 %224, %227
  %229 = icmp ugt i16* %199, %1
  %230 = icmp ult i16* %197, %145
  %231 = and i1 %229, %230
  %232 = or i1 %228, %231
  %233 = icmp ugt i16* %205, %1
  %234 = icmp ult i16* %203, %145
  %235 = and i1 %233, %234
  %236 = or i1 %232, %235
  br i1 %236, label %352, label %237

237:                                              ; preds = %144
  %238 = and i64 %65, 4294967288
  %239 = insertelement <8 x i32> undef, i32 %18, i32 0
  %240 = shufflevector <8 x i32> %239, <8 x i32> undef, <8 x i32> zeroinitializer
  %241 = insertelement <8 x i32> undef, i32 %29, i32 0
  %242 = shufflevector <8 x i32> %241, <8 x i32> undef, <8 x i32> zeroinitializer
  %243 = insertelement <8 x i32> undef, i32 %40, i32 0
  %244 = shufflevector <8 x i32> %243, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %245

245:                                              ; preds = %245, %237
  %246 = phi i64 [ 0, %237 ], [ %348, %245 ]
  %247 = trunc i64 %246 to i32
  %248 = add i32 %55, %247
  %249 = add i32 %248, %61
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds i16, i16* %6, i64 %250
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !63
  %254 = zext <8 x i16> %253 to <8 x i32>
  %255 = add i32 %58, %247
  %256 = add i32 %255, %61
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i16, i16* %6, i64 %257
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 2, !alias.scope !66
  %261 = zext <8 x i16> %260 to <8 x i32>
  %262 = add i32 %248, %62
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i16, i16* %6, i64 %263
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !68
  %267 = zext <8 x i16> %266 to <8 x i32>
  %268 = add i32 %255, %62
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i16, i16* %6, i64 %269
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !70
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = add i32 %248, %63
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i16, i16* %6, i64 %275
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !72
  %279 = zext <8 x i16> %278 to <8 x i32>
  %280 = add i32 %255, %63
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i16, i16* %6, i64 %281
  %283 = bitcast i16* %282 to <8 x i16>*
  %284 = load <8 x i16>, <8 x i16>* %283, align 2, !alias.scope !74
  %285 = zext <8 x i16> %284 to <8 x i32>
  %286 = add i32 %248, %64
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i16, i16* %6, i64 %287
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2, !alias.scope !76
  %291 = zext <8 x i16> %290 to <8 x i32>
  %292 = add i32 %255, %64
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i16, i16* %6, i64 %293
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !78
  %297 = zext <8 x i16> %296 to <8 x i32>
  %298 = sub nsw <8 x i32> %279, %254
  %299 = mul nsw <8 x i32> %298, %240
  %300 = add nsw <8 x i32> %299, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %301 = lshr <8 x i32> %300, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %302 = trunc <8 x i32> %301 to <8 x i16>
  %303 = add <8 x i16> %253, %302
  %304 = zext <8 x i16> %303 to <8 x i32>
  %305 = sub nsw <8 x i32> %285, %261
  %306 = mul nsw <8 x i32> %305, %240
  %307 = add nsw <8 x i32> %306, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %308 = lshr <8 x i32> %307, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %309 = trunc <8 x i32> %308 to <8 x i16>
  %310 = add <8 x i16> %260, %309
  %311 = zext <8 x i16> %310 to <8 x i32>
  %312 = sub nsw <8 x i32> %291, %267
  %313 = mul nsw <8 x i32> %312, %240
  %314 = add nsw <8 x i32> %313, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %315 = lshr <8 x i32> %314, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %316 = trunc <8 x i32> %315 to <8 x i16>
  %317 = add <8 x i16> %266, %316
  %318 = zext <8 x i16> %317 to <8 x i32>
  %319 = sub nsw <8 x i32> %297, %273
  %320 = mul nsw <8 x i32> %319, %240
  %321 = add nsw <8 x i32> %320, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %322 = lshr <8 x i32> %321, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = add <8 x i16> %272, %323
  %325 = zext <8 x i16> %324 to <8 x i32>
  %326 = sub nsw <8 x i32> %318, %304
  %327 = mul nsw <8 x i32> %326, %242
  %328 = add nsw <8 x i32> %327, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %329 = lshr <8 x i32> %328, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %330 = trunc <8 x i32> %329 to <8 x i16>
  %331 = add <8 x i16> %303, %330
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = sub nsw <8 x i32> %325, %311
  %334 = mul nsw <8 x i32> %333, %242
  %335 = add nsw <8 x i32> %334, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %336 = lshr <8 x i32> %335, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = add <8 x i16> %310, %337
  %339 = zext <8 x i16> %338 to <8 x i32>
  %340 = sub nsw <8 x i32> %339, %332
  %341 = mul nsw <8 x i32> %340, %244
  %342 = add nsw <8 x i32> %341, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %343 = lshr <8 x i32> %342, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %344 = trunc <8 x i32> %343 to <8 x i16>
  %345 = add <8 x i16> %331, %344
  %346 = getelementptr inbounds i16, i16* %1, i64 %246
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !80, !noalias !82
  %348 = add i64 %246, 8
  %349 = icmp eq i64 %348, %238
  br i1 %349, label %350, label %245, !llvm.loop !83

350:                                              ; preds = %245
  %351 = icmp eq i64 %238, %65
  br i1 %351, label %450, label %352

352:                                              ; preds = %350, %144, %67, %60
  %353 = phi i64 [ 0, %144 ], [ 0, %67 ], [ 0, %60 ], [ %238, %350 ]
  br label %354

354:                                              ; preds = %352, %354
  %355 = phi i64 [ %448, %354 ], [ %353, %352 ]
  %356 = trunc i64 %355 to i32
  %357 = add i32 %55, %356
  %358 = add i32 %357, %61
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i16, i16* %6, i64 %359
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = add i32 %58, %356
  %364 = add i32 %363, %61
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i16, i16* %6, i64 %365
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = add i32 %357, %62
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i16, i16* %6, i64 %370
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add i32 %363, %62
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i16, i16* %6, i64 %375
  %377 = load i16, i16* %376, align 2
  %378 = zext i16 %377 to i32
  %379 = add i32 %357, %63
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i16, i16* %6, i64 %380
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = add i32 %363, %63
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i16, i16* %6, i64 %385
  %387 = load i16, i16* %386, align 2
  %388 = zext i16 %387 to i32
  %389 = add i32 %357, %64
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds i16, i16* %6, i64 %390
  %392 = load i16, i16* %391, align 2
  %393 = zext i16 %392 to i32
  %394 = add i32 %363, %64
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i16, i16* %6, i64 %395
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = sub nsw i32 %383, %362
  %400 = mul nsw i32 %399, %18
  %401 = add nsw i32 %400, 32768
  %402 = lshr i32 %401, 16
  %403 = trunc i32 %402 to i16
  %404 = add i16 %361, %403
  %405 = zext i16 %404 to i32
  %406 = sub nsw i32 %388, %368
  %407 = mul nsw i32 %406, %18
  %408 = add nsw i32 %407, 32768
  %409 = lshr i32 %408, 16
  %410 = trunc i32 %409 to i16
  %411 = add i16 %367, %410
  %412 = zext i16 %411 to i32
  %413 = sub nsw i32 %393, %373
  %414 = mul nsw i32 %413, %18
  %415 = add nsw i32 %414, 32768
  %416 = lshr i32 %415, 16
  %417 = trunc i32 %416 to i16
  %418 = add i16 %372, %417
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %398, %378
  %421 = mul nsw i32 %420, %18
  %422 = add nsw i32 %421, 32768
  %423 = lshr i32 %422, 16
  %424 = trunc i32 %423 to i16
  %425 = add i16 %377, %424
  %426 = zext i16 %425 to i32
  %427 = sub nsw i32 %419, %405
  %428 = mul nsw i32 %427, %29
  %429 = add nsw i32 %428, 32768
  %430 = lshr i32 %429, 16
  %431 = trunc i32 %430 to i16
  %432 = add i16 %404, %431
  %433 = zext i16 %432 to i32
  %434 = sub nsw i32 %426, %412
  %435 = mul nsw i32 %434, %29
  %436 = add nsw i32 %435, 32768
  %437 = lshr i32 %436, 16
  %438 = trunc i32 %437 to i16
  %439 = add i16 %411, %438
  %440 = zext i16 %439 to i32
  %441 = sub nsw i32 %440, %433
  %442 = mul nsw i32 %441, %40
  %443 = add nsw i32 %442, 32768
  %444 = lshr i32 %443, 16
  %445 = trunc i32 %444 to i16
  %446 = add i16 %432, %445
  %447 = getelementptr inbounds i16, i16* %1, i64 %355
  store i16 %446, i16* %447, align 2
  %448 = add nuw nsw i64 %355, 1
  %449 = icmp eq i64 %448, %65
  br i1 %449, label %450, label %354, !llvm.loop !84

450:                                              ; preds = %354, %350, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @TetrahedralInterpFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load float, float* %0, align 4
  %10 = fcmp olt float %9, 0x3E112E0BE0000000
  %11 = fcmp uno float %9, 0.000000e+00
  %12 = or i1 %10, %11
  %13 = fcmp ogt float %9, 1.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %9
  %15 = select i1 %12, float 0.000000e+00, float %14
  %16 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = uitofp i32 %17 to float
  %19 = fmul float %15, %18
  %20 = getelementptr inbounds float, float* %0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fcmp olt float %21, 0x3E112E0BE0000000
  %23 = fcmp uno float %21, 0.000000e+00
  %24 = or i1 %22, %23
  %25 = fcmp ogt float %21, 1.000000e+00
  %26 = select i1 %25, float 1.000000e+00, float %21
  %27 = select i1 %24, float 0.000000e+00, float %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %29 = load i32, i32* %28, align 4
  %30 = uitofp i32 %29 to float
  %31 = fmul float %27, %30
  %32 = getelementptr inbounds float, float* %0, i64 2
  %33 = load float, float* %32, align 4
  %34 = fcmp olt float %33, 0x3E112E0BE0000000
  %35 = fcmp uno float %33, 0.000000e+00
  %36 = or i1 %34, %35
  %37 = fcmp ogt float %33, 1.000000e+00
  %38 = select i1 %37, float 1.000000e+00, float %33
  %39 = select i1 %36, float 0.000000e+00, float %38
  %40 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 2
  %41 = load i32, i32* %40, align 4
  %42 = uitofp i32 %41 to float
  %43 = fmul float %39, %42
  %44 = tail call float @llvm.floor.f32(float %19)
  %45 = fptosi float %44 to i32
  %46 = sitofp i32 %45 to float
  %47 = fsub float %19, %46
  %48 = tail call float @llvm.floor.f32(float %31)
  %49 = fptosi float %48 to i32
  %50 = sitofp i32 %49 to float
  %51 = fsub float %31, %50
  %52 = tail call float @llvm.floor.f32(float %43)
  %53 = fptosi float %52 to i32
  %54 = sitofp i32 %53 to float
  %55 = fsub float %43, %54
  %56 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 2
  %57 = load i32, i32* %56, align 4
  %58 = mul i32 %57, %45
  %59 = fcmp ult float %15, 1.000000e+00
  %60 = select i1 %59, i32 %57, i32 0
  %61 = add i32 %58, %60
  %62 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %63 = load i32, i32* %62, align 4
  %64 = mul i32 %63, %49
  %65 = fcmp ult float %27, 1.000000e+00
  %66 = select i1 %65, i32 %63, i32 0
  %67 = add i32 %64, %66
  %68 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %69 = load i32, i32* %68, align 4
  %70 = mul i32 %69, %53
  %71 = fcmp ult float %39, 1.000000e+00
  %72 = select i1 %71, i32 %69, i32 0
  %73 = add i32 %70, %72
  %74 = icmp sgt i32 %8, 0
  br i1 %74, label %75, label %228

75:                                               ; preds = %3
  %76 = add nsw i32 %64, %58
  %77 = fcmp ult float %47, %51
  %78 = fcmp ult float %51, %55
  %79 = or i1 %77, %78
  %80 = add nsw i32 %67, %61
  %81 = fcmp ult float %47, %55
  %82 = fcmp ult float %55, %51
  %83 = or i1 %81, %82
  %84 = add nsw i32 %64, %61
  %85 = fcmp ult float %55, %47
  %86 = or i1 %77, %85
  %87 = fcmp ult float %51, %47
  %88 = or i1 %87, %81
  %89 = or i1 %78, %85
  %90 = add nsw i32 %67, %58
  %91 = or i1 %87, %82
  %92 = zext i32 %8 to i64
  br label %93

93:                                               ; preds = %215, %75
  %94 = phi i64 [ 0, %75 ], [ %226, %215 ]
  %95 = trunc i64 %94 to i32
  %96 = add i32 %70, %95
  %97 = add i32 %96, %76
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %6, i64 %98
  %100 = load float, float* %99, align 4
  br i1 %79, label %119, label %101

101:                                              ; preds = %93
  %102 = add i32 %96, %61
  %103 = add i32 %102, %64
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %6, i64 %104
  %106 = load float, float* %105, align 4
  %107 = fsub float %106, %100
  %108 = add i32 %96, %80
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %6, i64 %109
  %111 = load float, float* %110, align 4
  %112 = fsub float %111, %106
  %113 = add i32 %73, %95
  %114 = add i32 %113, %80
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %6, i64 %115
  %117 = load float, float* %116, align 4
  %118 = fsub float %117, %111
  br label %215

119:                                              ; preds = %93
  br i1 %83, label %138, label %120

120:                                              ; preds = %119
  %121 = add i32 %96, %84
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %6, i64 %122
  %124 = load float, float* %123, align 4
  %125 = fsub float %124, %100
  %126 = add i32 %73, %95
  %127 = add i32 %126, %61
  %128 = add i32 %127, %67
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds float, float* %6, i64 %129
  %131 = load float, float* %130, align 4
  %132 = add i32 %126, %84
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %6, i64 %133
  %135 = load float, float* %134, align 4
  %136 = fsub float %131, %135
  %137 = fsub float %135, %124
  br label %215

138:                                              ; preds = %119
  br i1 %86, label %157, label %139

139:                                              ; preds = %138
  %140 = add i32 %73, %95
  %141 = add i32 %140, %61
  %142 = add i32 %141, %64
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %6, i64 %143
  %145 = load float, float* %144, align 4
  %146 = add i32 %140, %76
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %6, i64 %147
  %149 = load float, float* %148, align 4
  %150 = fsub float %145, %149
  %151 = add i32 %141, %67
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %6, i64 %152
  %154 = load float, float* %153, align 4
  %155 = fsub float %154, %145
  %156 = fsub float %149, %100
  br label %215

157:                                              ; preds = %138
  br i1 %88, label %176, label %158

158:                                              ; preds = %157
  %159 = add i32 %96, %80
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %6, i64 %160
  %162 = load float, float* %161, align 4
  %163 = add i32 %96, %58
  %164 = add i32 %163, %67
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %6, i64 %165
  %167 = load float, float* %166, align 4
  %168 = fsub float %162, %167
  %169 = fsub float %167, %100
  %170 = add i32 %73, %95
  %171 = add i32 %170, %80
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds float, float* %6, i64 %172
  %174 = load float, float* %173, align 4
  %175 = fsub float %174, %162
  br label %215

176:                                              ; preds = %157
  br i1 %89, label %195, label %177

177:                                              ; preds = %176
  %178 = add i32 %73, %95
  %179 = add i32 %178, %61
  %180 = add i32 %179, %67
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float, float* %6, i64 %181
  %183 = load float, float* %182, align 4
  %184 = add i32 %178, %90
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float* %6, i64 %185
  %187 = load float, float* %186, align 4
  %188 = fsub float %183, %187
  %189 = add i32 %96, %90
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %6, i64 %190
  %192 = load float, float* %191, align 4
  %193 = fsub float %192, %100
  %194 = fsub float %187, %192
  br label %215

195:                                              ; preds = %176
  br i1 %91, label %215, label %196

196:                                              ; preds = %195
  %197 = add i32 %73, %95
  %198 = add i32 %197, %61
  %199 = add i32 %198, %67
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %6, i64 %200
  %202 = load float, float* %201, align 4
  %203 = add i32 %197, %58
  %204 = add i32 %203, %67
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %6, i64 %205
  %207 = load float, float* %206, align 4
  %208 = fsub float %202, %207
  %209 = add i32 %197, %76
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float* %6, i64 %210
  %212 = load float, float* %211, align 4
  %213 = fsub float %207, %212
  %214 = fsub float %212, %100
  br label %215

215:                                              ; preds = %195, %120, %158, %196, %177, %139, %101
  %216 = phi float [ %107, %101 ], [ %125, %120 ], [ %150, %139 ], [ %168, %158 ], [ %188, %177 ], [ %208, %196 ], [ 0.000000e+00, %195 ]
  %217 = phi float [ %112, %101 ], [ %136, %120 ], [ %155, %139 ], [ %169, %158 ], [ %193, %177 ], [ %213, %196 ], [ 0.000000e+00, %195 ]
  %218 = phi float [ %118, %101 ], [ %137, %120 ], [ %156, %139 ], [ %175, %158 ], [ %194, %177 ], [ %214, %196 ], [ 0.000000e+00, %195 ]
  %219 = fmul float %47, %216
  %220 = fadd float %100, %219
  %221 = fmul float %51, %217
  %222 = fadd float %220, %221
  %223 = fmul float %55, %218
  %224 = fadd float %222, %223
  %225 = getelementptr inbounds float, float* %1, i64 %94
  store float %224, float* %225, align 4
  %226 = add nuw nsw i64 %94, 1
  %227 = icmp eq i64 %226, %92
  br i1 %227, label %228, label %93

228:                                              ; preds = %215, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TetrahedralInterp16(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #4 {
  %4 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %5 = bitcast i8** %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load i16, i16* %0, align 2
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, %10
  %14 = add nsw i32 %13, 32767
  %15 = sdiv i32 %14, 65535
  %16 = add nsw i32 %15, %13
  %17 = getelementptr inbounds i16, i16* %0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = mul i32 %21, %19
  %23 = add nsw i32 %22, 32767
  %24 = sdiv i32 %23, 65535
  %25 = add nsw i32 %24, %22
  %26 = getelementptr inbounds i16, i16* %0, i64 2
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 2
  %30 = load i32, i32* %29, align 4
  %31 = mul i32 %30, %28
  %32 = add nsw i32 %31, 32767
  %33 = sdiv i32 %32, 65535
  %34 = add nsw i32 %33, %31
  %35 = ashr i32 %16, 16
  %36 = ashr i32 %25, 16
  %37 = ashr i32 %34, 16
  %38 = and i32 %16, 65535
  %39 = and i32 %25, 65535
  %40 = and i32 %34, 65535
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 2
  %42 = load i32, i32* %41, align 4
  %43 = mul i32 %42, %35
  %44 = icmp eq i16 %9, -1
  %45 = select i1 %44, i32 0, i32 %42
  %46 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = mul i32 %36, %47
  %49 = icmp eq i16 %18, -1
  %50 = select i1 %49, i32 0, i32 %47
  %51 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 %37, %52
  %54 = icmp eq i16 %27, -1
  %55 = select i1 %54, i32 0, i32 %52
  %56 = add nsw i32 %48, %43
  %57 = add nsw i32 %56, %53
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %6, i64 %58
  %60 = icmp ult i32 %38, %39
  br i1 %60, label %473, label %61

61:                                               ; preds = %3
  %62 = icmp ult i32 %39, %40
  br i1 %62, label %200, label %63

63:                                               ; preds = %61
  %64 = add nsw i32 %50, %45
  %65 = icmp eq i32 %8, 0
  br i1 %65, label %885, label %66

66:                                               ; preds = %63
  %67 = add nsw i32 %55, %64
  %68 = sext i32 %45 to i64
  %69 = sext i32 %64 to i64
  %70 = sext i32 %67 to i64
  %71 = add i32 %8, -1
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 8
  br i1 %74, label %163, label %75

75:                                               ; preds = %66
  %76 = add i32 %8, -1
  %77 = zext i32 %76 to i64
  %78 = add nuw nsw i64 %77, 1
  %79 = getelementptr i16, i16* %1, i64 %78
  %80 = add nsw i64 %58, %77
  %81 = add nsw i64 %80, 1
  %82 = getelementptr i16, i16* %6, i64 %81
  %83 = add nsw i64 %70, %58
  %84 = getelementptr i16, i16* %6, i64 %83
  %85 = add nsw i64 %83, %77
  %86 = add nsw i64 %85, 1
  %87 = getelementptr i16, i16* %6, i64 %86
  %88 = add nsw i64 %58, %69
  %89 = getelementptr i16, i16* %6, i64 %88
  %90 = add nsw i64 %88, %77
  %91 = add nsw i64 %90, 1
  %92 = getelementptr i16, i16* %6, i64 %91
  %93 = add nsw i64 %68, %58
  %94 = getelementptr i16, i16* %6, i64 %93
  %95 = add nsw i64 %93, %77
  %96 = add nsw i64 %95, 1
  %97 = getelementptr i16, i16* %6, i64 %96
  %98 = icmp ugt i16* %82, %1
  %99 = icmp ult i16* %59, %79
  %100 = and i1 %98, %99
  %101 = icmp ugt i16* %87, %1
  %102 = icmp ult i16* %84, %79
  %103 = and i1 %101, %102
  %104 = or i1 %100, %103
  %105 = icmp ugt i16* %92, %1
  %106 = icmp ult i16* %89, %79
  %107 = and i1 %105, %106
  %108 = or i1 %104, %107
  %109 = icmp ugt i16* %97, %1
  %110 = icmp ult i16* %94, %79
  %111 = and i1 %109, %110
  %112 = or i1 %108, %111
  br i1 %112, label %163, label %113

113:                                              ; preds = %75
  %114 = and i64 %73, 8589934584
  %115 = trunc i64 %114 to i32
  %116 = sub i32 %8, %115
  %117 = getelementptr i16, i16* %1, i64 %114
  %118 = getelementptr i16, i16* %59, i64 %114
  %119 = insertelement <8 x i32> undef, i32 %38, i32 0
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> zeroinitializer
  %121 = insertelement <8 x i32> undef, i32 %39, i32 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> undef, <8 x i32> zeroinitializer
  %123 = insertelement <8 x i32> undef, i32 %40, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %125

125:                                              ; preds = %125, %113
  %126 = phi i64 [ 0, %113 ], [ %159, %125 ]
  %127 = getelementptr i16, i16* %1, i64 %126
  %128 = getelementptr i16, i16* %59, i64 %126
  %129 = getelementptr inbounds i16, i16* %128, i64 %68
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !85
  %132 = zext <8 x i16> %131 to <8 x i32>
  %133 = getelementptr inbounds i16, i16* %128, i64 %69
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !88
  %136 = zext <8 x i16> %135 to <8 x i32>
  %137 = getelementptr inbounds i16, i16* %128, i64 %70
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !90
  %140 = zext <8 x i16> %139 to <8 x i32>
  %141 = bitcast i16* %128 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !92
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = sub nsw <8 x i32> %140, %136
  %145 = sub nsw <8 x i32> %136, %132
  %146 = sub nsw <8 x i32> %132, %143
  %147 = mul nsw <8 x i32> %146, %120
  %148 = mul nsw <8 x i32> %145, %122
  %149 = mul nsw <8 x i32> %144, %124
  %150 = add <8 x i32> %148, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %151 = add <8 x i32> %150, %149
  %152 = add <8 x i32> %151, %147
  %153 = ashr <8 x i32> %152, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %154 = add nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = add <8 x i16> %142, %156
  %158 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2, !alias.scope !94, !noalias !96
  %159 = add i64 %126, 8
  %160 = icmp eq i64 %159, %114
  br i1 %160, label %161, label %125, !llvm.loop !97

161:                                              ; preds = %125
  %162 = icmp eq i64 %73, %114
  br i1 %162, label %885, label %163

163:                                              ; preds = %161, %75, %66
  %164 = phi i32 [ %8, %75 ], [ %8, %66 ], [ %116, %161 ]
  %165 = phi i16* [ %1, %75 ], [ %1, %66 ], [ %117, %161 ]
  %166 = phi i16* [ %59, %75 ], [ %59, %66 ], [ %118, %161 ]
  br label %167

167:                                              ; preds = %163, %167
  %168 = phi i32 [ %198, %167 ], [ %164, %163 ]
  %169 = phi i16* [ %197, %167 ], [ %165, %163 ]
  %170 = phi i16* [ %180, %167 ], [ %166, %163 ]
  %171 = getelementptr inbounds i16, i16* %170, i64 %68
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = getelementptr inbounds i16, i16* %170, i64 %69
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = getelementptr inbounds i16, i16* %170, i64 %70
  %178 = load i16, i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = getelementptr inbounds i16, i16* %170, i64 1
  %181 = load i16, i16* %170, align 2
  %182 = zext i16 %181 to i32
  %183 = sub nsw i32 %179, %176
  %184 = sub nsw i32 %176, %173
  %185 = sub nsw i32 %173, %182
  %186 = mul nsw i32 %185, %38
  %187 = mul nsw i32 %184, %39
  %188 = mul nsw i32 %183, %40
  %189 = add i32 %187, 32769
  %190 = add i32 %189, %188
  %191 = add i32 %190, %186
  %192 = ashr i32 %191, 16
  %193 = add nsw i32 %192, %191
  %194 = lshr i32 %193, 16
  %195 = trunc i32 %194 to i16
  %196 = add i16 %181, %195
  %197 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %196, i16* %169, align 2
  %198 = add i32 %168, -1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %885, label %167, !llvm.loop !98

200:                                              ; preds = %61
  %201 = icmp ult i32 %40, %38
  %202 = add nsw i32 %55, %45
  %203 = add nsw i32 %202, %50
  %204 = icmp eq i32 %8, 0
  br i1 %201, label %339, label %205

205:                                              ; preds = %200
  br i1 %204, label %885, label %206

206:                                              ; preds = %205
  %207 = sext i32 %202 to i64
  %208 = sext i32 %203 to i64
  %209 = sext i32 %55 to i64
  %210 = add i32 %8, -1
  %211 = zext i32 %210 to i64
  %212 = add nuw nsw i64 %211, 1
  %213 = icmp ult i64 %212, 8
  br i1 %213, label %302, label %214

214:                                              ; preds = %206
  %215 = add i32 %8, -1
  %216 = zext i32 %215 to i64
  %217 = add nuw nsw i64 %216, 1
  %218 = getelementptr i16, i16* %1, i64 %217
  %219 = add nsw i64 %58, %216
  %220 = add nsw i64 %219, 1
  %221 = getelementptr i16, i16* %6, i64 %220
  %222 = add nsw i64 %209, %58
  %223 = getelementptr i16, i16* %6, i64 %222
  %224 = add nsw i64 %222, %216
  %225 = add nsw i64 %224, 1
  %226 = getelementptr i16, i16* %6, i64 %225
  %227 = add nsw i64 %208, %58
  %228 = getelementptr i16, i16* %6, i64 %227
  %229 = add nsw i64 %227, %216
  %230 = add nsw i64 %229, 1
  %231 = getelementptr i16, i16* %6, i64 %230
  %232 = add nsw i64 %58, %207
  %233 = getelementptr i16, i16* %6, i64 %232
  %234 = add nsw i64 %232, %216
  %235 = add nsw i64 %234, 1
  %236 = getelementptr i16, i16* %6, i64 %235
  %237 = icmp ugt i16* %221, %1
  %238 = icmp ult i16* %59, %218
  %239 = and i1 %237, %238
  %240 = icmp ugt i16* %226, %1
  %241 = icmp ult i16* %223, %218
  %242 = and i1 %240, %241
  %243 = or i1 %239, %242
  %244 = icmp ugt i16* %231, %1
  %245 = icmp ult i16* %228, %218
  %246 = and i1 %244, %245
  %247 = or i1 %243, %246
  %248 = icmp ugt i16* %236, %1
  %249 = icmp ult i16* %233, %218
  %250 = and i1 %248, %249
  %251 = or i1 %247, %250
  br i1 %251, label %302, label %252

252:                                              ; preds = %214
  %253 = and i64 %212, 8589934584
  %254 = trunc i64 %253 to i32
  %255 = sub i32 %8, %254
  %256 = getelementptr i16, i16* %1, i64 %253
  %257 = getelementptr i16, i16* %59, i64 %253
  %258 = insertelement <8 x i32> undef, i32 %38, i32 0
  %259 = shufflevector <8 x i32> %258, <8 x i32> undef, <8 x i32> zeroinitializer
  %260 = insertelement <8 x i32> undef, i32 %39, i32 0
  %261 = shufflevector <8 x i32> %260, <8 x i32> undef, <8 x i32> zeroinitializer
  %262 = insertelement <8 x i32> undef, i32 %40, i32 0
  %263 = shufflevector <8 x i32> %262, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %264

264:                                              ; preds = %264, %252
  %265 = phi i64 [ 0, %252 ], [ %298, %264 ]
  %266 = getelementptr i16, i16* %1, i64 %265
  %267 = getelementptr i16, i16* %59, i64 %265
  %268 = getelementptr inbounds i16, i16* %267, i64 %207
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !99
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = getelementptr inbounds i16, i16* %267, i64 %208
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !102
  %275 = zext <8 x i16> %274 to <8 x i32>
  %276 = getelementptr inbounds i16, i16* %267, i64 %209
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !104
  %279 = zext <8 x i16> %278 to <8 x i32>
  %280 = bitcast i16* %267 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2, !alias.scope !106
  %282 = zext <8 x i16> %281 to <8 x i32>
  %283 = sub nsw <8 x i32> %275, %271
  %284 = sub nsw <8 x i32> %271, %279
  %285 = sub nsw <8 x i32> %279, %282
  %286 = mul nsw <8 x i32> %284, %259
  %287 = mul nsw <8 x i32> %283, %261
  %288 = mul nsw <8 x i32> %285, %263
  %289 = add <8 x i32> %287, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %290 = add <8 x i32> %289, %286
  %291 = add <8 x i32> %290, %288
  %292 = ashr <8 x i32> %291, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %293 = add nsw <8 x i32> %292, %291
  %294 = lshr <8 x i32> %293, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %295 = trunc <8 x i32> %294 to <8 x i16>
  %296 = add <8 x i16> %281, %295
  %297 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %297, align 2, !alias.scope !108, !noalias !110
  %298 = add i64 %265, 8
  %299 = icmp eq i64 %298, %253
  br i1 %299, label %300, label %264, !llvm.loop !111

300:                                              ; preds = %264
  %301 = icmp eq i64 %212, %253
  br i1 %301, label %885, label %302

302:                                              ; preds = %300, %214, %206
  %303 = phi i32 [ %8, %214 ], [ %8, %206 ], [ %255, %300 ]
  %304 = phi i16* [ %1, %214 ], [ %1, %206 ], [ %256, %300 ]
  %305 = phi i16* [ %59, %214 ], [ %59, %206 ], [ %257, %300 ]
  br label %306

306:                                              ; preds = %302, %306
  %307 = phi i32 [ %337, %306 ], [ %303, %302 ]
  %308 = phi i16* [ %336, %306 ], [ %304, %302 ]
  %309 = phi i16* [ %319, %306 ], [ %305, %302 ]
  %310 = getelementptr inbounds i16, i16* %309, i64 %207
  %311 = load i16, i16* %310, align 2
  %312 = zext i16 %311 to i32
  %313 = getelementptr inbounds i16, i16* %309, i64 %208
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i32
  %316 = getelementptr inbounds i16, i16* %309, i64 %209
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %309, i64 1
  %320 = load i16, i16* %309, align 2
  %321 = zext i16 %320 to i32
  %322 = sub nsw i32 %315, %312
  %323 = sub nsw i32 %312, %318
  %324 = sub nsw i32 %318, %321
  %325 = mul nsw i32 %323, %38
  %326 = mul nsw i32 %322, %39
  %327 = mul nsw i32 %324, %40
  %328 = add i32 %326, 32769
  %329 = add i32 %328, %325
  %330 = add i32 %329, %327
  %331 = ashr i32 %330, 16
  %332 = add nsw i32 %331, %330
  %333 = lshr i32 %332, 16
  %334 = trunc i32 %333 to i16
  %335 = add i16 %320, %334
  %336 = getelementptr inbounds i16, i16* %308, i64 1
  store i16 %335, i16* %308, align 2
  %337 = add i32 %307, -1
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %885, label %306, !llvm.loop !112

339:                                              ; preds = %200
  br i1 %204, label %885, label %340

340:                                              ; preds = %339
  %341 = sext i32 %45 to i64
  %342 = sext i32 %203 to i64
  %343 = sext i32 %202 to i64
  %344 = add i32 %8, -1
  %345 = zext i32 %344 to i64
  %346 = add nuw nsw i64 %345, 1
  %347 = icmp ult i64 %346, 8
  br i1 %347, label %436, label %348

348:                                              ; preds = %340
  %349 = add i32 %8, -1
  %350 = zext i32 %349 to i64
  %351 = add nuw nsw i64 %350, 1
  %352 = getelementptr i16, i16* %1, i64 %351
  %353 = add nsw i64 %58, %350
  %354 = add nsw i64 %353, 1
  %355 = getelementptr i16, i16* %6, i64 %354
  %356 = add nsw i64 %58, %343
  %357 = getelementptr i16, i16* %6, i64 %356
  %358 = add nsw i64 %356, %350
  %359 = add nsw i64 %358, 1
  %360 = getelementptr i16, i16* %6, i64 %359
  %361 = add nsw i64 %342, %58
  %362 = getelementptr i16, i16* %6, i64 %361
  %363 = add nsw i64 %361, %350
  %364 = add nsw i64 %363, 1
  %365 = getelementptr i16, i16* %6, i64 %364
  %366 = add nsw i64 %341, %58
  %367 = getelementptr i16, i16* %6, i64 %366
  %368 = add nsw i64 %366, %350
  %369 = add nsw i64 %368, 1
  %370 = getelementptr i16, i16* %6, i64 %369
  %371 = icmp ugt i16* %355, %1
  %372 = icmp ult i16* %59, %352
  %373 = and i1 %371, %372
  %374 = icmp ugt i16* %360, %1
  %375 = icmp ult i16* %357, %352
  %376 = and i1 %374, %375
  %377 = or i1 %373, %376
  %378 = icmp ugt i16* %365, %1
  %379 = icmp ult i16* %362, %352
  %380 = and i1 %378, %379
  %381 = or i1 %377, %380
  %382 = icmp ugt i16* %370, %1
  %383 = icmp ult i16* %367, %352
  %384 = and i1 %382, %383
  %385 = or i1 %381, %384
  br i1 %385, label %436, label %386

386:                                              ; preds = %348
  %387 = and i64 %346, 8589934584
  %388 = trunc i64 %387 to i32
  %389 = sub i32 %8, %388
  %390 = getelementptr i16, i16* %1, i64 %387
  %391 = getelementptr i16, i16* %59, i64 %387
  %392 = insertelement <8 x i32> undef, i32 %38, i32 0
  %393 = shufflevector <8 x i32> %392, <8 x i32> undef, <8 x i32> zeroinitializer
  %394 = insertelement <8 x i32> undef, i32 %39, i32 0
  %395 = shufflevector <8 x i32> %394, <8 x i32> undef, <8 x i32> zeroinitializer
  %396 = insertelement <8 x i32> undef, i32 %40, i32 0
  %397 = shufflevector <8 x i32> %396, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %398

398:                                              ; preds = %398, %386
  %399 = phi i64 [ 0, %386 ], [ %432, %398 ]
  %400 = getelementptr i16, i16* %1, i64 %399
  %401 = getelementptr i16, i16* %59, i64 %399
  %402 = getelementptr inbounds i16, i16* %401, i64 %341
  %403 = bitcast i16* %402 to <8 x i16>*
  %404 = load <8 x i16>, <8 x i16>* %403, align 2, !alias.scope !113
  %405 = zext <8 x i16> %404 to <8 x i32>
  %406 = getelementptr inbounds i16, i16* %401, i64 %342
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2, !alias.scope !116
  %409 = zext <8 x i16> %408 to <8 x i32>
  %410 = getelementptr inbounds i16, i16* %401, i64 %343
  %411 = bitcast i16* %410 to <8 x i16>*
  %412 = load <8 x i16>, <8 x i16>* %411, align 2, !alias.scope !118
  %413 = zext <8 x i16> %412 to <8 x i32>
  %414 = bitcast i16* %401 to <8 x i16>*
  %415 = load <8 x i16>, <8 x i16>* %414, align 2, !alias.scope !120
  %416 = zext <8 x i16> %415 to <8 x i32>
  %417 = sub nsw <8 x i32> %409, %413
  %418 = sub nsw <8 x i32> %413, %405
  %419 = sub nsw <8 x i32> %405, %416
  %420 = mul nsw <8 x i32> %419, %393
  %421 = mul nsw <8 x i32> %417, %395
  %422 = mul nsw <8 x i32> %418, %397
  %423 = add <8 x i32> %421, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %424 = add <8 x i32> %423, %422
  %425 = add <8 x i32> %424, %420
  %426 = ashr <8 x i32> %425, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %427 = add nsw <8 x i32> %426, %425
  %428 = lshr <8 x i32> %427, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %429 = trunc <8 x i32> %428 to <8 x i16>
  %430 = add <8 x i16> %415, %429
  %431 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %431, align 2, !alias.scope !122, !noalias !124
  %432 = add i64 %399, 8
  %433 = icmp eq i64 %432, %387
  br i1 %433, label %434, label %398, !llvm.loop !125

434:                                              ; preds = %398
  %435 = icmp eq i64 %346, %387
  br i1 %435, label %885, label %436

436:                                              ; preds = %434, %348, %340
  %437 = phi i32 [ %8, %348 ], [ %8, %340 ], [ %389, %434 ]
  %438 = phi i16* [ %1, %348 ], [ %1, %340 ], [ %390, %434 ]
  %439 = phi i16* [ %59, %348 ], [ %59, %340 ], [ %391, %434 ]
  br label %440

440:                                              ; preds = %436, %440
  %441 = phi i32 [ %471, %440 ], [ %437, %436 ]
  %442 = phi i16* [ %470, %440 ], [ %438, %436 ]
  %443 = phi i16* [ %453, %440 ], [ %439, %436 ]
  %444 = getelementptr inbounds i16, i16* %443, i64 %341
  %445 = load i16, i16* %444, align 2
  %446 = zext i16 %445 to i32
  %447 = getelementptr inbounds i16, i16* %443, i64 %342
  %448 = load i16, i16* %447, align 2
  %449 = zext i16 %448 to i32
  %450 = getelementptr inbounds i16, i16* %443, i64 %343
  %451 = load i16, i16* %450, align 2
  %452 = zext i16 %451 to i32
  %453 = getelementptr inbounds i16, i16* %443, i64 1
  %454 = load i16, i16* %443, align 2
  %455 = zext i16 %454 to i32
  %456 = sub nsw i32 %449, %452
  %457 = sub nsw i32 %452, %446
  %458 = sub nsw i32 %446, %455
  %459 = mul nsw i32 %458, %38
  %460 = mul nsw i32 %456, %39
  %461 = mul nsw i32 %457, %40
  %462 = add i32 %460, 32769
  %463 = add i32 %462, %461
  %464 = add i32 %463, %459
  %465 = ashr i32 %464, 16
  %466 = add nsw i32 %465, %464
  %467 = lshr i32 %466, 16
  %468 = trunc i32 %467 to i16
  %469 = add i16 %454, %468
  %470 = getelementptr inbounds i16, i16* %442, i64 1
  store i16 %469, i16* %442, align 2
  %471 = add i32 %441, -1
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %885, label %440, !llvm.loop !126

473:                                              ; preds = %3
  %474 = icmp ult i32 %38, %40
  br i1 %474, label %612, label %475

475:                                              ; preds = %473
  %476 = add nsw i32 %50, %45
  %477 = icmp eq i32 %8, 0
  br i1 %477, label %885, label %478

478:                                              ; preds = %475
  %479 = add nsw i32 %55, %476
  %480 = sext i32 %476 to i64
  %481 = sext i32 %50 to i64
  %482 = sext i32 %479 to i64
  %483 = add i32 %8, -1
  %484 = zext i32 %483 to i64
  %485 = add nuw nsw i64 %484, 1
  %486 = icmp ult i64 %485, 8
  br i1 %486, label %575, label %487

487:                                              ; preds = %478
  %488 = add i32 %8, -1
  %489 = zext i32 %488 to i64
  %490 = add nuw nsw i64 %489, 1
  %491 = getelementptr i16, i16* %1, i64 %490
  %492 = add nsw i64 %58, %489
  %493 = add nsw i64 %492, 1
  %494 = getelementptr i16, i16* %6, i64 %493
  %495 = add nsw i64 %482, %58
  %496 = getelementptr i16, i16* %6, i64 %495
  %497 = add nsw i64 %495, %489
  %498 = add nsw i64 %497, 1
  %499 = getelementptr i16, i16* %6, i64 %498
  %500 = add nsw i64 %481, %58
  %501 = getelementptr i16, i16* %6, i64 %500
  %502 = add nsw i64 %500, %489
  %503 = add nsw i64 %502, 1
  %504 = getelementptr i16, i16* %6, i64 %503
  %505 = add nsw i64 %58, %480
  %506 = getelementptr i16, i16* %6, i64 %505
  %507 = add nsw i64 %505, %489
  %508 = add nsw i64 %507, 1
  %509 = getelementptr i16, i16* %6, i64 %508
  %510 = icmp ugt i16* %494, %1
  %511 = icmp ult i16* %59, %491
  %512 = and i1 %510, %511
  %513 = icmp ugt i16* %499, %1
  %514 = icmp ult i16* %496, %491
  %515 = and i1 %513, %514
  %516 = or i1 %512, %515
  %517 = icmp ugt i16* %504, %1
  %518 = icmp ult i16* %501, %491
  %519 = and i1 %517, %518
  %520 = or i1 %516, %519
  %521 = icmp ugt i16* %509, %1
  %522 = icmp ult i16* %506, %491
  %523 = and i1 %521, %522
  %524 = or i1 %520, %523
  br i1 %524, label %575, label %525

525:                                              ; preds = %487
  %526 = and i64 %485, 8589934584
  %527 = trunc i64 %526 to i32
  %528 = sub i32 %8, %527
  %529 = getelementptr i16, i16* %1, i64 %526
  %530 = getelementptr i16, i16* %59, i64 %526
  %531 = insertelement <8 x i32> undef, i32 %38, i32 0
  %532 = shufflevector <8 x i32> %531, <8 x i32> undef, <8 x i32> zeroinitializer
  %533 = insertelement <8 x i32> undef, i32 %39, i32 0
  %534 = shufflevector <8 x i32> %533, <8 x i32> undef, <8 x i32> zeroinitializer
  %535 = insertelement <8 x i32> undef, i32 %40, i32 0
  %536 = shufflevector <8 x i32> %535, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %537

537:                                              ; preds = %537, %525
  %538 = phi i64 [ 0, %525 ], [ %571, %537 ]
  %539 = getelementptr i16, i16* %1, i64 %538
  %540 = getelementptr i16, i16* %59, i64 %538
  %541 = getelementptr inbounds i16, i16* %540, i64 %480
  %542 = bitcast i16* %541 to <8 x i16>*
  %543 = load <8 x i16>, <8 x i16>* %542, align 2, !alias.scope !127
  %544 = zext <8 x i16> %543 to <8 x i32>
  %545 = getelementptr inbounds i16, i16* %540, i64 %481
  %546 = bitcast i16* %545 to <8 x i16>*
  %547 = load <8 x i16>, <8 x i16>* %546, align 2, !alias.scope !130
  %548 = zext <8 x i16> %547 to <8 x i32>
  %549 = getelementptr inbounds i16, i16* %540, i64 %482
  %550 = bitcast i16* %549 to <8 x i16>*
  %551 = load <8 x i16>, <8 x i16>* %550, align 2, !alias.scope !132
  %552 = zext <8 x i16> %551 to <8 x i32>
  %553 = bitcast i16* %540 to <8 x i16>*
  %554 = load <8 x i16>, <8 x i16>* %553, align 2, !alias.scope !134
  %555 = zext <8 x i16> %554 to <8 x i32>
  %556 = sub nsw <8 x i32> %552, %544
  %557 = sub nsw <8 x i32> %544, %548
  %558 = sub nsw <8 x i32> %548, %555
  %559 = mul nsw <8 x i32> %557, %532
  %560 = mul nsw <8 x i32> %558, %534
  %561 = mul nsw <8 x i32> %556, %536
  %562 = add <8 x i32> %559, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %563 = add <8 x i32> %562, %561
  %564 = add <8 x i32> %563, %560
  %565 = ashr <8 x i32> %564, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %566 = add nsw <8 x i32> %565, %564
  %567 = lshr <8 x i32> %566, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %568 = trunc <8 x i32> %567 to <8 x i16>
  %569 = add <8 x i16> %554, %568
  %570 = bitcast i16* %539 to <8 x i16>*
  store <8 x i16> %569, <8 x i16>* %570, align 2, !alias.scope !136, !noalias !138
  %571 = add i64 %538, 8
  %572 = icmp eq i64 %571, %526
  br i1 %572, label %573, label %537, !llvm.loop !139

573:                                              ; preds = %537
  %574 = icmp eq i64 %485, %526
  br i1 %574, label %885, label %575

575:                                              ; preds = %573, %487, %478
  %576 = phi i32 [ %8, %487 ], [ %8, %478 ], [ %528, %573 ]
  %577 = phi i16* [ %1, %487 ], [ %1, %478 ], [ %529, %573 ]
  %578 = phi i16* [ %59, %487 ], [ %59, %478 ], [ %530, %573 ]
  br label %579

579:                                              ; preds = %575, %579
  %580 = phi i32 [ %610, %579 ], [ %576, %575 ]
  %581 = phi i16* [ %609, %579 ], [ %577, %575 ]
  %582 = phi i16* [ %592, %579 ], [ %578, %575 ]
  %583 = getelementptr inbounds i16, i16* %582, i64 %480
  %584 = load i16, i16* %583, align 2
  %585 = zext i16 %584 to i32
  %586 = getelementptr inbounds i16, i16* %582, i64 %481
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i32
  %589 = getelementptr inbounds i16, i16* %582, i64 %482
  %590 = load i16, i16* %589, align 2
  %591 = zext i16 %590 to i32
  %592 = getelementptr inbounds i16, i16* %582, i64 1
  %593 = load i16, i16* %582, align 2
  %594 = zext i16 %593 to i32
  %595 = sub nsw i32 %591, %585
  %596 = sub nsw i32 %585, %588
  %597 = sub nsw i32 %588, %594
  %598 = mul nsw i32 %596, %38
  %599 = mul nsw i32 %597, %39
  %600 = mul nsw i32 %595, %40
  %601 = add i32 %598, 32769
  %602 = add i32 %601, %600
  %603 = add i32 %602, %599
  %604 = ashr i32 %603, 16
  %605 = add nsw i32 %604, %603
  %606 = lshr i32 %605, 16
  %607 = trunc i32 %606 to i16
  %608 = add i16 %593, %607
  %609 = getelementptr inbounds i16, i16* %581, i64 1
  store i16 %608, i16* %581, align 2
  %610 = add i32 %580, -1
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %885, label %579, !llvm.loop !140

612:                                              ; preds = %473
  %613 = icmp ult i32 %39, %40
  %614 = add nsw i32 %55, %50
  %615 = add nsw i32 %614, %45
  %616 = icmp eq i32 %8, 0
  br i1 %613, label %751, label %617

617:                                              ; preds = %612
  br i1 %616, label %885, label %618

618:                                              ; preds = %617
  %619 = sext i32 %615 to i64
  %620 = sext i32 %50 to i64
  %621 = sext i32 %614 to i64
  %622 = add i32 %8, -1
  %623 = zext i32 %622 to i64
  %624 = add nuw nsw i64 %623, 1
  %625 = icmp ult i64 %624, 8
  br i1 %625, label %714, label %626

626:                                              ; preds = %618
  %627 = add i32 %8, -1
  %628 = zext i32 %627 to i64
  %629 = add nuw nsw i64 %628, 1
  %630 = getelementptr i16, i16* %1, i64 %629
  %631 = add nsw i64 %58, %628
  %632 = add nsw i64 %631, 1
  %633 = getelementptr i16, i16* %6, i64 %632
  %634 = add nsw i64 %58, %621
  %635 = getelementptr i16, i16* %6, i64 %634
  %636 = add nsw i64 %634, %628
  %637 = add nsw i64 %636, 1
  %638 = getelementptr i16, i16* %6, i64 %637
  %639 = add nsw i64 %620, %58
  %640 = getelementptr i16, i16* %6, i64 %639
  %641 = add nsw i64 %639, %628
  %642 = add nsw i64 %641, 1
  %643 = getelementptr i16, i16* %6, i64 %642
  %644 = add nsw i64 %619, %58
  %645 = getelementptr i16, i16* %6, i64 %644
  %646 = add nsw i64 %644, %628
  %647 = add nsw i64 %646, 1
  %648 = getelementptr i16, i16* %6, i64 %647
  %649 = icmp ugt i16* %633, %1
  %650 = icmp ult i16* %59, %630
  %651 = and i1 %649, %650
  %652 = icmp ugt i16* %638, %1
  %653 = icmp ult i16* %635, %630
  %654 = and i1 %652, %653
  %655 = or i1 %651, %654
  %656 = icmp ugt i16* %643, %1
  %657 = icmp ult i16* %640, %630
  %658 = and i1 %656, %657
  %659 = or i1 %655, %658
  %660 = icmp ugt i16* %648, %1
  %661 = icmp ult i16* %645, %630
  %662 = and i1 %660, %661
  %663 = or i1 %659, %662
  br i1 %663, label %714, label %664

664:                                              ; preds = %626
  %665 = and i64 %624, 8589934584
  %666 = trunc i64 %665 to i32
  %667 = sub i32 %8, %666
  %668 = getelementptr i16, i16* %1, i64 %665
  %669 = getelementptr i16, i16* %59, i64 %665
  %670 = insertelement <8 x i32> undef, i32 %38, i32 0
  %671 = shufflevector <8 x i32> %670, <8 x i32> undef, <8 x i32> zeroinitializer
  %672 = insertelement <8 x i32> undef, i32 %39, i32 0
  %673 = shufflevector <8 x i32> %672, <8 x i32> undef, <8 x i32> zeroinitializer
  %674 = insertelement <8 x i32> undef, i32 %40, i32 0
  %675 = shufflevector <8 x i32> %674, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %676

676:                                              ; preds = %676, %664
  %677 = phi i64 [ 0, %664 ], [ %710, %676 ]
  %678 = getelementptr i16, i16* %1, i64 %677
  %679 = getelementptr i16, i16* %59, i64 %677
  %680 = getelementptr inbounds i16, i16* %679, i64 %619
  %681 = bitcast i16* %680 to <8 x i16>*
  %682 = load <8 x i16>, <8 x i16>* %681, align 2, !alias.scope !141
  %683 = zext <8 x i16> %682 to <8 x i32>
  %684 = getelementptr inbounds i16, i16* %679, i64 %620
  %685 = bitcast i16* %684 to <8 x i16>*
  %686 = load <8 x i16>, <8 x i16>* %685, align 2, !alias.scope !144
  %687 = zext <8 x i16> %686 to <8 x i32>
  %688 = getelementptr inbounds i16, i16* %679, i64 %621
  %689 = bitcast i16* %688 to <8 x i16>*
  %690 = load <8 x i16>, <8 x i16>* %689, align 2, !alias.scope !146
  %691 = zext <8 x i16> %690 to <8 x i32>
  %692 = bitcast i16* %679 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 2, !alias.scope !148
  %694 = zext <8 x i16> %693 to <8 x i32>
  %695 = sub nsw <8 x i32> %683, %691
  %696 = sub nsw <8 x i32> %691, %687
  %697 = sub nsw <8 x i32> %687, %694
  %698 = mul nsw <8 x i32> %695, %671
  %699 = mul nsw <8 x i32> %697, %673
  %700 = mul nsw <8 x i32> %696, %675
  %701 = add <8 x i32> %698, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %702 = add <8 x i32> %701, %700
  %703 = add <8 x i32> %702, %699
  %704 = ashr <8 x i32> %703, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %705 = add nsw <8 x i32> %704, %703
  %706 = lshr <8 x i32> %705, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %707 = trunc <8 x i32> %706 to <8 x i16>
  %708 = add <8 x i16> %693, %707
  %709 = bitcast i16* %678 to <8 x i16>*
  store <8 x i16> %708, <8 x i16>* %709, align 2, !alias.scope !150, !noalias !152
  %710 = add i64 %677, 8
  %711 = icmp eq i64 %710, %665
  br i1 %711, label %712, label %676, !llvm.loop !153

712:                                              ; preds = %676
  %713 = icmp eq i64 %624, %665
  br i1 %713, label %885, label %714

714:                                              ; preds = %712, %626, %618
  %715 = phi i32 [ %8, %626 ], [ %8, %618 ], [ %667, %712 ]
  %716 = phi i16* [ %1, %626 ], [ %1, %618 ], [ %668, %712 ]
  %717 = phi i16* [ %59, %626 ], [ %59, %618 ], [ %669, %712 ]
  br label %718

718:                                              ; preds = %714, %718
  %719 = phi i32 [ %749, %718 ], [ %715, %714 ]
  %720 = phi i16* [ %748, %718 ], [ %716, %714 ]
  %721 = phi i16* [ %731, %718 ], [ %717, %714 ]
  %722 = getelementptr inbounds i16, i16* %721, i64 %619
  %723 = load i16, i16* %722, align 2
  %724 = zext i16 %723 to i32
  %725 = getelementptr inbounds i16, i16* %721, i64 %620
  %726 = load i16, i16* %725, align 2
  %727 = zext i16 %726 to i32
  %728 = getelementptr inbounds i16, i16* %721, i64 %621
  %729 = load i16, i16* %728, align 2
  %730 = zext i16 %729 to i32
  %731 = getelementptr inbounds i16, i16* %721, i64 1
  %732 = load i16, i16* %721, align 2
  %733 = zext i16 %732 to i32
  %734 = sub nsw i32 %724, %730
  %735 = sub nsw i32 %730, %727
  %736 = sub nsw i32 %727, %733
  %737 = mul nsw i32 %734, %38
  %738 = mul nsw i32 %736, %39
  %739 = mul nsw i32 %735, %40
  %740 = add i32 %737, 32769
  %741 = add i32 %740, %739
  %742 = add i32 %741, %738
  %743 = ashr i32 %742, 16
  %744 = add nsw i32 %743, %742
  %745 = lshr i32 %744, 16
  %746 = trunc i32 %745 to i16
  %747 = add i16 %732, %746
  %748 = getelementptr inbounds i16, i16* %720, i64 1
  store i16 %747, i16* %720, align 2
  %749 = add i32 %719, -1
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %885, label %718, !llvm.loop !154

751:                                              ; preds = %612
  br i1 %616, label %885, label %752

752:                                              ; preds = %751
  %753 = sext i32 %615 to i64
  %754 = sext i32 %614 to i64
  %755 = sext i32 %55 to i64
  %756 = add i32 %8, -1
  %757 = zext i32 %756 to i64
  %758 = add nuw nsw i64 %757, 1
  %759 = icmp ult i64 %758, 8
  br i1 %759, label %848, label %760

760:                                              ; preds = %752
  %761 = add i32 %8, -1
  %762 = zext i32 %761 to i64
  %763 = add nuw nsw i64 %762, 1
  %764 = getelementptr i16, i16* %1, i64 %763
  %765 = add nsw i64 %58, %762
  %766 = add nsw i64 %765, 1
  %767 = getelementptr i16, i16* %6, i64 %766
  %768 = add nsw i64 %755, %58
  %769 = getelementptr i16, i16* %6, i64 %768
  %770 = add nsw i64 %768, %762
  %771 = add nsw i64 %770, 1
  %772 = getelementptr i16, i16* %6, i64 %771
  %773 = add nsw i64 %58, %754
  %774 = getelementptr i16, i16* %6, i64 %773
  %775 = add nsw i64 %773, %762
  %776 = add nsw i64 %775, 1
  %777 = getelementptr i16, i16* %6, i64 %776
  %778 = add nsw i64 %753, %58
  %779 = getelementptr i16, i16* %6, i64 %778
  %780 = add nsw i64 %778, %762
  %781 = add nsw i64 %780, 1
  %782 = getelementptr i16, i16* %6, i64 %781
  %783 = icmp ugt i16* %767, %1
  %784 = icmp ult i16* %59, %764
  %785 = and i1 %783, %784
  %786 = icmp ugt i16* %772, %1
  %787 = icmp ult i16* %769, %764
  %788 = and i1 %786, %787
  %789 = or i1 %785, %788
  %790 = icmp ugt i16* %777, %1
  %791 = icmp ult i16* %774, %764
  %792 = and i1 %790, %791
  %793 = or i1 %789, %792
  %794 = icmp ugt i16* %782, %1
  %795 = icmp ult i16* %779, %764
  %796 = and i1 %794, %795
  %797 = or i1 %793, %796
  br i1 %797, label %848, label %798

798:                                              ; preds = %760
  %799 = and i64 %758, 8589934584
  %800 = trunc i64 %799 to i32
  %801 = sub i32 %8, %800
  %802 = getelementptr i16, i16* %1, i64 %799
  %803 = getelementptr i16, i16* %59, i64 %799
  %804 = insertelement <8 x i32> undef, i32 %38, i32 0
  %805 = shufflevector <8 x i32> %804, <8 x i32> undef, <8 x i32> zeroinitializer
  %806 = insertelement <8 x i32> undef, i32 %39, i32 0
  %807 = shufflevector <8 x i32> %806, <8 x i32> undef, <8 x i32> zeroinitializer
  %808 = insertelement <8 x i32> undef, i32 %40, i32 0
  %809 = shufflevector <8 x i32> %808, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %810

810:                                              ; preds = %810, %798
  %811 = phi i64 [ 0, %798 ], [ %844, %810 ]
  %812 = getelementptr i16, i16* %1, i64 %811
  %813 = getelementptr i16, i16* %59, i64 %811
  %814 = getelementptr inbounds i16, i16* %813, i64 %753
  %815 = bitcast i16* %814 to <8 x i16>*
  %816 = load <8 x i16>, <8 x i16>* %815, align 2, !alias.scope !155
  %817 = zext <8 x i16> %816 to <8 x i32>
  %818 = getelementptr inbounds i16, i16* %813, i64 %754
  %819 = bitcast i16* %818 to <8 x i16>*
  %820 = load <8 x i16>, <8 x i16>* %819, align 2, !alias.scope !158
  %821 = zext <8 x i16> %820 to <8 x i32>
  %822 = getelementptr inbounds i16, i16* %813, i64 %755
  %823 = bitcast i16* %822 to <8 x i16>*
  %824 = load <8 x i16>, <8 x i16>* %823, align 2, !alias.scope !160
  %825 = zext <8 x i16> %824 to <8 x i32>
  %826 = bitcast i16* %813 to <8 x i16>*
  %827 = load <8 x i16>, <8 x i16>* %826, align 2, !alias.scope !162
  %828 = zext <8 x i16> %827 to <8 x i32>
  %829 = sub nsw <8 x i32> %817, %821
  %830 = sub nsw <8 x i32> %821, %825
  %831 = sub nsw <8 x i32> %825, %828
  %832 = mul nsw <8 x i32> %829, %805
  %833 = mul nsw <8 x i32> %830, %807
  %834 = mul nsw <8 x i32> %831, %809
  %835 = add <8 x i32> %832, <i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769, i32 32769>
  %836 = add <8 x i32> %835, %833
  %837 = add <8 x i32> %836, %834
  %838 = ashr <8 x i32> %837, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %839 = add nsw <8 x i32> %838, %837
  %840 = lshr <8 x i32> %839, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %841 = trunc <8 x i32> %840 to <8 x i16>
  %842 = add <8 x i16> %827, %841
  %843 = bitcast i16* %812 to <8 x i16>*
  store <8 x i16> %842, <8 x i16>* %843, align 2, !alias.scope !164, !noalias !166
  %844 = add i64 %811, 8
  %845 = icmp eq i64 %844, %799
  br i1 %845, label %846, label %810, !llvm.loop !167

846:                                              ; preds = %810
  %847 = icmp eq i64 %758, %799
  br i1 %847, label %885, label %848

848:                                              ; preds = %846, %760, %752
  %849 = phi i32 [ %8, %760 ], [ %8, %752 ], [ %801, %846 ]
  %850 = phi i16* [ %1, %760 ], [ %1, %752 ], [ %802, %846 ]
  %851 = phi i16* [ %59, %760 ], [ %59, %752 ], [ %803, %846 ]
  br label %852

852:                                              ; preds = %848, %852
  %853 = phi i32 [ %883, %852 ], [ %849, %848 ]
  %854 = phi i16* [ %882, %852 ], [ %850, %848 ]
  %855 = phi i16* [ %865, %852 ], [ %851, %848 ]
  %856 = getelementptr inbounds i16, i16* %855, i64 %753
  %857 = load i16, i16* %856, align 2
  %858 = zext i16 %857 to i32
  %859 = getelementptr inbounds i16, i16* %855, i64 %754
  %860 = load i16, i16* %859, align 2
  %861 = zext i16 %860 to i32
  %862 = getelementptr inbounds i16, i16* %855, i64 %755
  %863 = load i16, i16* %862, align 2
  %864 = zext i16 %863 to i32
  %865 = getelementptr inbounds i16, i16* %855, i64 1
  %866 = load i16, i16* %855, align 2
  %867 = zext i16 %866 to i32
  %868 = sub nsw i32 %858, %861
  %869 = sub nsw i32 %861, %864
  %870 = sub nsw i32 %864, %867
  %871 = mul nsw i32 %868, %38
  %872 = mul nsw i32 %869, %39
  %873 = mul nsw i32 %870, %40
  %874 = add i32 %871, 32769
  %875 = add i32 %874, %872
  %876 = add i32 %875, %873
  %877 = ashr i32 %876, 16
  %878 = add nsw i32 %877, %876
  %879 = lshr i32 %878, 16
  %880 = trunc i32 %879 to i16
  %881 = add i16 %866, %880
  %882 = getelementptr inbounds i16, i16* %854, i64 1
  store i16 %881, i16* %854, align 2
  %883 = add i32 %853, -1
  %884 = icmp eq i32 %883, 0
  br i1 %884, label %885, label %852, !llvm.loop !168

885:                                              ; preds = %167, %306, %440, %579, %718, %852, %161, %300, %434, %573, %712, %846, %63, %205, %339, %475, %617, %751
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval4InputsFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [128 x float], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 512, i1 false)
  %11 = bitcast [128 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 512, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load float, float* %0, align 4
  %14 = fcmp olt float %13, 0x3E112E0BE0000000
  %15 = fcmp uno float %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp ogt float %13, 1.000000e+00
  %18 = select i1 %17, float 1.000000e+00, float %13
  %19 = select i1 %16, float 0.000000e+00, float %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = uitofp i32 %21 to float
  %23 = fmul float %19, %22
  %24 = tail call float @llvm.floor.f32(float %23)
  %25 = fptosi float %24 to i32
  %26 = sitofp i32 %25 to float
  %27 = fsub float %23, %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %25
  %31 = fcmp ult float %19, 1.000000e+00
  %32 = select i1 %31, i32 %29, i32 0
  %33 = add i32 %30, %32
  %34 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %34, i64 136, i1 false)
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %36 = bitcast i32* %35 to i8*
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %38, i64 12, i1 false)
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds float, float* %9, i64 %39
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %42 = bitcast i8** %41 to float**
  store float* %40, float** %42, align 8
  %43 = getelementptr inbounds float, float* %0, i64 1
  %44 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @TetrahedralInterpFloat(float* %43, float* nonnull %44, %struct._cms_interp_struc* nonnull %6)
  %45 = sext i32 %33 to i64
  %46 = getelementptr inbounds float, float* %9, i64 %45
  store float* %46, float** %42, align 8
  %47 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 0
  call void @TetrahedralInterpFloat(float* %43, float* nonnull %47, %struct._cms_interp_struc* nonnull %6)
  %48 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %61, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = fsub float %56, %54
  %58 = fmul float %27, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %52
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %52, 1
  %62 = load i32, i32* %48, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %51, label %65

65:                                               ; preds = %51, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval4Inputs(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x i16], align 16
  %5 = alloca [128 x i16], align 16
  %6 = bitcast [128 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 256, i1 false)
  %7 = bitcast [128 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = load i16, i16* %0, align 2
  %9 = zext i16 %8 to i32
  %10 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, %9
  %13 = add nsw i32 %12, 32767
  %14 = sdiv i32 %13, 65535
  %15 = add nsw i32 %14, %12
  %16 = getelementptr inbounds i16, i16* %0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = mul i32 %20, %18
  %22 = add nsw i32 %21, 32767
  %23 = sdiv i32 %22, 65535
  %24 = add nsw i32 %23, %21
  %25 = getelementptr inbounds i16, i16* %0, i64 2
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 2
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %27
  %31 = add nsw i32 %30, 32767
  %32 = sdiv i32 %31, 65535
  %33 = add nsw i32 %32, %30
  %34 = getelementptr inbounds i16, i16* %0, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 %38, %36
  %40 = add nsw i32 %39, 32767
  %41 = sdiv i32 %40, 65535
  %42 = add nsw i32 %41, %39
  %43 = ashr i32 %15, 16
  %44 = ashr i32 %24, 16
  %45 = ashr i32 %33, 16
  %46 = ashr i32 %42, 16
  %47 = and i32 %15, 65535
  %48 = and i32 %24, 65535
  %49 = and i32 %33, 65535
  %50 = and i32 %42, 65535
  %51 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 3
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 %52, %43
  %54 = icmp eq i16 %8, -1
  %55 = select i1 %54, i32 0, i32 %52
  %56 = add i32 %53, %55
  %57 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 2
  %58 = load i32, i32* %57, align 4
  %59 = mul i32 %58, %44
  %60 = icmp eq i16 %17, -1
  %61 = select i1 %60, i32 0, i32 %58
  %62 = add i32 %59, %61
  %63 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = mul i32 %64, %45
  %66 = icmp eq i16 %26, -1
  %67 = select i1 %66, i32 0, i32 %64
  %68 = add i32 %65, %67
  %69 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 0
  %70 = load i32, i32* %69, align 4
  %71 = mul i32 %46, %70
  %72 = icmp eq i16 %35, -1
  %73 = select i1 %72, i32 0, i32 %70
  %74 = add i32 %71, %73
  %75 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %76 = bitcast i8** %75 to i16**
  %77 = load i16*, i16** %76, align 8
  %78 = sext i32 %53 to i64
  %79 = getelementptr inbounds i16, i16* %77, i64 %78
  %80 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %459, label %83

83:                                               ; preds = %3
  %84 = add nsw i32 %65, %59
  %85 = icmp ult i32 %48, %49
  %86 = icmp ult i32 %49, %50
  %87 = or i1 %85, %86
  %88 = add nsw i32 %68, %62
  %89 = icmp ult i32 %48, %50
  %90 = icmp ult i32 %50, %49
  %91 = or i1 %89, %90
  %92 = add nsw i32 %62, %65
  %93 = add nsw i32 %88, %74
  %94 = icmp ult i32 %50, %48
  %95 = or i1 %85, %94
  %96 = icmp ult i32 %49, %48
  %97 = or i1 %96, %89
  %98 = or i1 %86, %94
  %99 = add nsw i32 %68, %59
  %100 = or i1 %96, %90
  %101 = zext i32 %81 to i64
  br label %102

102:                                              ; preds = %83, %240
  %103 = phi i64 [ 0, %83 ], [ %257, %240 ]
  %104 = trunc i64 %103 to i32
  %105 = add i32 %71, %104
  %106 = add i32 %105, %84
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %79, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  br i1 %87, label %132, label %111

111:                                              ; preds = %102
  %112 = add i32 %105, %65
  %113 = add i32 %112, %62
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i16, i16* %79, i64 %114
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = sub nsw i32 %117, %110
  %119 = add i32 %105, %88
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %79, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = sub nsw i32 %123, %117
  %125 = add i32 %74, %104
  %126 = add i32 %125, %88
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %79, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = sub nsw i32 %130, %123
  br label %240

132:                                              ; preds = %102
  br i1 %91, label %153, label %133

133:                                              ; preds = %132
  %134 = add i32 %105, %92
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %79, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = sub nsw i32 %138, %110
  %140 = add i32 %93, %104
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i16, i16* %79, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = add i32 %74, %104
  %146 = add i32 %145, %92
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i16, i16* %79, i64 %147
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = sub nsw i32 %144, %150
  %152 = sub nsw i32 %150, %138
  br label %240

153:                                              ; preds = %132
  br i1 %95, label %175, label %154

154:                                              ; preds = %153
  %155 = add i32 %74, %104
  %156 = add i32 %155, %65
  %157 = add i32 %156, %62
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i16, i16* %79, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add i32 %155, %84
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %79, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = sub nsw i32 %161, %166
  %168 = add i32 %93, %104
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i16, i16* %79, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = sub nsw i32 %172, %161
  %174 = sub nsw i32 %166, %110
  br label %240

175:                                              ; preds = %153
  br i1 %97, label %197, label %176

176:                                              ; preds = %175
  %177 = add i32 %105, %88
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %79, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add i32 %105, %59
  %183 = add i32 %182, %68
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i16, i16* %79, i64 %184
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = sub nsw i32 %181, %187
  %189 = sub nsw i32 %187, %110
  %190 = add i32 %74, %104
  %191 = add i32 %190, %88
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i16, i16* %79, i64 %192
  %194 = load i16, i16* %193, align 2
  %195 = zext i16 %194 to i32
  %196 = sub nsw i32 %195, %181
  br label %240

197:                                              ; preds = %175
  br i1 %98, label %218, label %198

198:                                              ; preds = %197
  %199 = add i32 %93, %104
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i16, i16* %79, i64 %200
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = add i32 %74, %104
  %205 = add i32 %204, %99
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds i16, i16* %79, i64 %206
  %208 = load i16, i16* %207, align 2
  %209 = zext i16 %208 to i32
  %210 = sub nsw i32 %203, %209
  %211 = add i32 %105, %99
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i16, i16* %79, i64 %212
  %214 = load i16, i16* %213, align 2
  %215 = zext i16 %214 to i32
  %216 = sub nsw i32 %215, %110
  %217 = sub nsw i32 %209, %215
  br label %240

218:                                              ; preds = %197
  br i1 %100, label %240, label %219

219:                                              ; preds = %218
  %220 = add i32 %93, %104
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i16, i16* %79, i64 %221
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = add i32 %74, %104
  %226 = add i32 %225, %59
  %227 = add i32 %226, %68
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i16, i16* %79, i64 %228
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = sub nsw i32 %224, %231
  %233 = add i32 %225, %84
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %79, i64 %234
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = sub nsw i32 %231, %237
  %239 = sub nsw i32 %237, %110
  br label %240

240:                                              ; preds = %218, %133, %176, %219, %198, %154, %111
  %241 = phi i32 [ %118, %111 ], [ %139, %133 ], [ %167, %154 ], [ %188, %176 ], [ %210, %198 ], [ %232, %219 ], [ 0, %218 ]
  %242 = phi i32 [ %124, %111 ], [ %151, %133 ], [ %173, %154 ], [ %189, %176 ], [ %216, %198 ], [ %238, %219 ], [ 0, %218 ]
  %243 = phi i32 [ %131, %111 ], [ %152, %133 ], [ %174, %154 ], [ %196, %176 ], [ %217, %198 ], [ %239, %219 ], [ 0, %218 ]
  %244 = mul nsw i32 %241, %48
  %245 = mul nsw i32 %242, %49
  %246 = add nsw i32 %245, %244
  %247 = mul nsw i32 %243, %50
  %248 = add nsw i32 %246, %247
  %249 = add nsw i32 %248, 32767
  %250 = sdiv i32 %249, 65535
  %251 = add i32 %248, 32768
  %252 = add i32 %251, %250
  %253 = lshr i32 %252, 16
  %254 = trunc i32 %253 to i16
  %255 = add i16 %109, %254
  %256 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %103
  store i16 %255, i16* %256, align 2
  %257 = add nuw nsw i64 %103, 1
  %258 = icmp ult i64 %257, %101
  br i1 %258, label %102, label %259

259:                                              ; preds = %240
  %260 = sext i32 %56 to i64
  %261 = getelementptr inbounds i16, i16* %77, i64 %260
  %262 = icmp eq i32 %81, 0
  br i1 %262, label %282, label %263

263:                                              ; preds = %259
  %264 = add nsw i32 %65, %59
  %265 = icmp ult i32 %48, %49
  %266 = icmp ult i32 %49, %50
  %267 = or i1 %265, %266
  %268 = add nsw i32 %68, %62
  %269 = icmp ult i32 %48, %50
  %270 = icmp ult i32 %50, %49
  %271 = or i1 %269, %270
  %272 = add nsw i32 %62, %65
  %273 = add nsw i32 %268, %74
  %274 = icmp ult i32 %50, %48
  %275 = or i1 %265, %274
  %276 = icmp ult i32 %49, %48
  %277 = or i1 %276, %269
  %278 = or i1 %266, %274
  %279 = add nsw i32 %68, %59
  %280 = or i1 %276, %270
  %281 = zext i32 %81 to i64
  br label %283

282:                                              ; preds = %421, %259
  br i1 %82, label %459, label %440

283:                                              ; preds = %421, %263
  %284 = phi i64 [ 0, %263 ], [ %438, %421 ]
  %285 = trunc i64 %284 to i32
  %286 = add i32 %71, %285
  %287 = add i32 %286, %264
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds i16, i16* %261, i64 %288
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  br i1 %267, label %313, label %292

292:                                              ; preds = %283
  %293 = add i32 %286, %65
  %294 = add i32 %293, %62
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds i16, i16* %261, i64 %295
  %297 = load i16, i16* %296, align 2
  %298 = zext i16 %297 to i32
  %299 = sub nsw i32 %298, %291
  %300 = add i32 %286, %268
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i16, i16* %261, i64 %301
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %304, %298
  %306 = add i32 %74, %285
  %307 = add i32 %306, %268
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds i16, i16* %261, i64 %308
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = sub nsw i32 %311, %304
  br label %421

313:                                              ; preds = %283
  br i1 %271, label %334, label %314

314:                                              ; preds = %313
  %315 = add i32 %286, %272
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds i16, i16* %261, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i32
  %320 = sub nsw i32 %319, %291
  %321 = add i32 %273, %285
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i16, i16* %261, i64 %322
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = add i32 %74, %285
  %327 = add i32 %326, %272
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %261, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i32
  %332 = sub nsw i32 %325, %331
  %333 = sub nsw i32 %331, %319
  br label %421

334:                                              ; preds = %313
  br i1 %275, label %356, label %335

335:                                              ; preds = %334
  %336 = add i32 %74, %285
  %337 = add i32 %336, %65
  %338 = add i32 %337, %62
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds i16, i16* %261, i64 %339
  %341 = load i16, i16* %340, align 2
  %342 = zext i16 %341 to i32
  %343 = add i32 %336, %264
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds i16, i16* %261, i64 %344
  %346 = load i16, i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = sub nsw i32 %342, %347
  %349 = add i32 %273, %285
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds i16, i16* %261, i64 %350
  %352 = load i16, i16* %351, align 2
  %353 = zext i16 %352 to i32
  %354 = sub nsw i32 %353, %342
  %355 = sub nsw i32 %347, %291
  br label %421

356:                                              ; preds = %334
  br i1 %277, label %378, label %357

357:                                              ; preds = %356
  %358 = add i32 %286, %268
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds i16, i16* %261, i64 %359
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = add i32 %286, %59
  %364 = add i32 %363, %68
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds i16, i16* %261, i64 %365
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = sub nsw i32 %362, %368
  %370 = sub nsw i32 %368, %291
  %371 = add i32 %74, %285
  %372 = add i32 %371, %268
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds i16, i16* %261, i64 %373
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = sub nsw i32 %376, %362
  br label %421

378:                                              ; preds = %356
  br i1 %278, label %399, label %379

379:                                              ; preds = %378
  %380 = add i32 %273, %285
  %381 = zext i32 %380 to i64
  %382 = getelementptr inbounds i16, i16* %261, i64 %381
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = add i32 %74, %285
  %386 = add i32 %385, %279
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds i16, i16* %261, i64 %387
  %389 = load i16, i16* %388, align 2
  %390 = zext i16 %389 to i32
  %391 = sub nsw i32 %384, %390
  %392 = add i32 %286, %279
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i16, i16* %261, i64 %393
  %395 = load i16, i16* %394, align 2
  %396 = zext i16 %395 to i32
  %397 = sub nsw i32 %396, %291
  %398 = sub nsw i32 %390, %396
  br label %421

399:                                              ; preds = %378
  br i1 %280, label %421, label %400

400:                                              ; preds = %399
  %401 = add i32 %273, %285
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds i16, i16* %261, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = add i32 %74, %285
  %407 = add i32 %406, %59
  %408 = add i32 %407, %68
  %409 = zext i32 %408 to i64
  %410 = getelementptr inbounds i16, i16* %261, i64 %409
  %411 = load i16, i16* %410, align 2
  %412 = zext i16 %411 to i32
  %413 = sub nsw i32 %405, %412
  %414 = add i32 %406, %264
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds i16, i16* %261, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = sub nsw i32 %412, %418
  %420 = sub nsw i32 %418, %291
  br label %421

421:                                              ; preds = %399, %314, %357, %400, %379, %335, %292
  %422 = phi i32 [ %299, %292 ], [ %320, %314 ], [ %348, %335 ], [ %369, %357 ], [ %391, %379 ], [ %413, %400 ], [ 0, %399 ]
  %423 = phi i32 [ %305, %292 ], [ %332, %314 ], [ %354, %335 ], [ %370, %357 ], [ %397, %379 ], [ %419, %400 ], [ 0, %399 ]
  %424 = phi i32 [ %312, %292 ], [ %333, %314 ], [ %355, %335 ], [ %377, %357 ], [ %398, %379 ], [ %420, %400 ], [ 0, %399 ]
  %425 = mul nsw i32 %422, %48
  %426 = mul nsw i32 %423, %49
  %427 = add nsw i32 %426, %425
  %428 = mul nsw i32 %424, %50
  %429 = add nsw i32 %427, %428
  %430 = add nsw i32 %429, 32767
  %431 = sdiv i32 %430, 65535
  %432 = add i32 %429, 32768
  %433 = add i32 %432, %431
  %434 = lshr i32 %433, 16
  %435 = trunc i32 %434 to i16
  %436 = add i16 %290, %435
  %437 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %284
  store i16 %436, i16* %437, align 2
  %438 = add nuw nsw i64 %284, 1
  %439 = icmp eq i64 %438, %281
  br i1 %439, label %282, label %283

440:                                              ; preds = %282, %440
  %441 = phi i64 [ %455, %440 ], [ 0, %282 ]
  %442 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %441
  %443 = load i16, i16* %442, align 2
  %444 = zext i16 %443 to i32
  %445 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %441
  %446 = load i16, i16* %445, align 2
  %447 = zext i16 %446 to i32
  %448 = sub nsw i32 %447, %444
  %449 = mul i32 %448, %47
  %450 = add i32 %449, 32768
  %451 = lshr i32 %450, 16
  %452 = trunc i32 %451 to i16
  %453 = add i16 %443, %452
  %454 = getelementptr inbounds i16, i16* %1, i64 %441
  store i16 %453, i16* %454, align 2
  %455 = add nuw nsw i64 %441, 1
  %456 = load i32, i32* %80, align 8
  %457 = zext i32 %456 to i64
  %458 = icmp ult i64 %455, %457
  br i1 %458, label %440, label %459

459:                                              ; preds = %440, %3, %282
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval5InputsFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [128 x float], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 512, i1 false)
  %11 = bitcast [128 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 512, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load float, float* %0, align 4
  %14 = fcmp olt float %13, 0x3E112E0BE0000000
  %15 = fcmp uno float %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp ogt float %13, 1.000000e+00
  %18 = select i1 %17, float 1.000000e+00, float %13
  %19 = select i1 %16, float 0.000000e+00, float %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = uitofp i32 %21 to float
  %23 = fmul float %19, %22
  %24 = tail call float @llvm.floor.f32(float %23)
  %25 = fptosi float %24 to i32
  %26 = sitofp i32 %25 to float
  %27 = fsub float %23, %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 4
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %25
  %31 = fcmp ult float %19, 1.000000e+00
  %32 = select i1 %31, i32 %29, i32 0
  %33 = add i32 %30, %32
  %34 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %34, i64 136, i1 false)
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %36 = bitcast i32* %35 to i8*
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %38, i64 16, i1 false)
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds float, float* %9, i64 %39
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %42 = bitcast i8** %41 to float**
  store float* %40, float** %42, align 8
  %43 = getelementptr inbounds float, float* %0, i64 1
  %44 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @Eval4InputsFloat(float* %43, float* nonnull %44, %struct._cms_interp_struc* nonnull %6)
  %45 = sext i32 %33 to i64
  %46 = getelementptr inbounds float, float* %9, i64 %45
  store float* %46, float** %42, align 8
  %47 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 0
  call void @Eval4InputsFloat(float* %43, float* nonnull %47, %struct._cms_interp_struc* nonnull %6)
  %48 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %61, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = fsub float %56, %54
  %58 = fmul float %27, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %52
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %52, 1
  %62 = load i32, i32* %48, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %51, label %65

65:                                               ; preds = %51, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval5Inputs(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x i16], align 16
  %5 = alloca [128 x i16], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast [128 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 256, i1 false)
  %11 = bitcast [128 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load i16, i16* %0, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = mul i32 %16, %14
  %18 = add nsw i32 %17, 32767
  %19 = sdiv i32 %18, 65535
  %20 = add nsw i32 %19, %17
  %21 = ashr i32 %20, 16
  %22 = and i32 %20, 65535
  %23 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 4
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 %21, %24
  %26 = icmp ne i16 %13, -1
  %27 = zext i1 %26 to i32
  %28 = add nsw i32 %21, %27
  %29 = mul i32 %28, %24
  %30 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %30, i64 136, i1 false)
  %31 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %34 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %34, i64 16, i1 false)
  %35 = sext i32 %25 to i64
  %36 = getelementptr inbounds i16, i16* %9, i64 %35
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %38 = bitcast i8** %37 to i16**
  store i16* %36, i16** %38, align 8
  %39 = getelementptr inbounds i16, i16* %0, i64 1
  %40 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 0
  call void @Eval4Inputs(i16* %39, i16* nonnull %40, %struct._cms_interp_struc* nonnull %6)
  %41 = sext i32 %29 to i64
  %42 = getelementptr inbounds i16, i16* %9, i64 %41
  store i16* %42, i16** %38, align 8
  %43 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 0
  call void @Eval4Inputs(i16* %39, i16* nonnull %43, %struct._cms_interp_struc* nonnull %6)
  %44 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %3, %47
  %48 = phi i64 [ %62, %47 ], [ 0, %3 ]
  %49 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %48
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %54, %51
  %56 = mul i32 %55, %22
  %57 = add i32 %56, 32768
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i16
  %60 = add i16 %50, %59
  %61 = getelementptr inbounds i16, i16* %1, i64 %48
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i64 %48, 1
  %63 = load i32, i32* %44, align 8
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %47, label %66

66:                                               ; preds = %47, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval6InputsFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [128 x float], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 512, i1 false)
  %11 = bitcast [128 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 512, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load float, float* %0, align 4
  %14 = fcmp olt float %13, 0x3E112E0BE0000000
  %15 = fcmp uno float %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp ogt float %13, 1.000000e+00
  %18 = select i1 %17, float 1.000000e+00, float %13
  %19 = select i1 %16, float 0.000000e+00, float %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = uitofp i32 %21 to float
  %23 = fmul float %19, %22
  %24 = tail call float @llvm.floor.f32(float %23)
  %25 = fptosi float %24 to i32
  %26 = sitofp i32 %25 to float
  %27 = fsub float %23, %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 5
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %25
  %31 = fcmp ult float %19, 1.000000e+00
  %32 = select i1 %31, i32 %29, i32 0
  %33 = add i32 %30, %32
  %34 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %34, i64 136, i1 false)
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %36 = bitcast i32* %35 to i8*
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %38, i64 20, i1 false)
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds float, float* %9, i64 %39
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %42 = bitcast i8** %41 to float**
  store float* %40, float** %42, align 8
  %43 = getelementptr inbounds float, float* %0, i64 1
  %44 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @Eval5InputsFloat(float* %43, float* nonnull %44, %struct._cms_interp_struc* nonnull %6)
  %45 = sext i32 %33 to i64
  %46 = getelementptr inbounds float, float* %9, i64 %45
  store float* %46, float** %42, align 8
  %47 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 0
  call void @Eval5InputsFloat(float* %43, float* nonnull %47, %struct._cms_interp_struc* nonnull %6)
  %48 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %61, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = fsub float %56, %54
  %58 = fmul float %27, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %52
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %52, 1
  %62 = load i32, i32* %48, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %51, label %65

65:                                               ; preds = %51, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval6Inputs(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x i16], align 16
  %5 = alloca [128 x i16], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast [128 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 256, i1 false)
  %11 = bitcast [128 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load i16, i16* %0, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = mul i32 %16, %14
  %18 = add nsw i32 %17, 32767
  %19 = sdiv i32 %18, 65535
  %20 = add nsw i32 %19, %17
  %21 = ashr i32 %20, 16
  %22 = and i32 %20, 65535
  %23 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 %21, %24
  %26 = icmp ne i16 %13, -1
  %27 = zext i1 %26 to i32
  %28 = add nsw i32 %21, %27
  %29 = mul i32 %28, %24
  %30 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %30, i64 136, i1 false)
  %31 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %34 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %34, i64 20, i1 false)
  %35 = sext i32 %25 to i64
  %36 = getelementptr inbounds i16, i16* %9, i64 %35
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %38 = bitcast i8** %37 to i16**
  store i16* %36, i16** %38, align 8
  %39 = getelementptr inbounds i16, i16* %0, i64 1
  %40 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 0
  call void @Eval5Inputs(i16* %39, i16* nonnull %40, %struct._cms_interp_struc* nonnull %6)
  %41 = sext i32 %29 to i64
  %42 = getelementptr inbounds i16, i16* %9, i64 %41
  store i16* %42, i16** %38, align 8
  %43 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 0
  call void @Eval5Inputs(i16* %39, i16* nonnull %43, %struct._cms_interp_struc* nonnull %6)
  %44 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %3, %47
  %48 = phi i64 [ %62, %47 ], [ 0, %3 ]
  %49 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %48
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %54, %51
  %56 = mul i32 %55, %22
  %57 = add i32 %56, 32768
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i16
  %60 = add i16 %50, %59
  %61 = getelementptr inbounds i16, i16* %1, i64 %48
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i64 %48, 1
  %63 = load i32, i32* %44, align 8
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %47, label %66

66:                                               ; preds = %47, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval7InputsFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [128 x float], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 512, i1 false)
  %11 = bitcast [128 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 512, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load float, float* %0, align 4
  %14 = fcmp olt float %13, 0x3E112E0BE0000000
  %15 = fcmp uno float %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp ogt float %13, 1.000000e+00
  %18 = select i1 %17, float 1.000000e+00, float %13
  %19 = select i1 %16, float 0.000000e+00, float %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = uitofp i32 %21 to float
  %23 = fmul float %19, %22
  %24 = tail call float @llvm.floor.f32(float %23)
  %25 = fptosi float %24 to i32
  %26 = sitofp i32 %25 to float
  %27 = fsub float %23, %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 6
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %25
  %31 = fcmp ult float %19, 1.000000e+00
  %32 = select i1 %31, i32 %29, i32 0
  %33 = add i32 %30, %32
  %34 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %34, i64 136, i1 false)
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %36 = bitcast i32* %35 to i8*
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %38, i64 24, i1 false)
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds float, float* %9, i64 %39
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %42 = bitcast i8** %41 to float**
  store float* %40, float** %42, align 8
  %43 = getelementptr inbounds float, float* %0, i64 1
  %44 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @Eval6InputsFloat(float* %43, float* nonnull %44, %struct._cms_interp_struc* nonnull %6)
  %45 = sext i32 %33 to i64
  %46 = getelementptr inbounds float, float* %9, i64 %45
  store float* %46, float** %42, align 8
  %47 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 0
  call void @Eval6InputsFloat(float* %43, float* nonnull %47, %struct._cms_interp_struc* nonnull %6)
  %48 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %61, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = fsub float %56, %54
  %58 = fmul float %27, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %52
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %52, 1
  %62 = load i32, i32* %48, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %51, label %65

65:                                               ; preds = %51, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval7Inputs(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x i16], align 16
  %5 = alloca [128 x i16], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast [128 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 256, i1 false)
  %11 = bitcast [128 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load i16, i16* %0, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = mul i32 %16, %14
  %18 = add nsw i32 %17, 32767
  %19 = sdiv i32 %18, 65535
  %20 = add nsw i32 %19, %17
  %21 = ashr i32 %20, 16
  %22 = and i32 %20, 65535
  %23 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 %21, %24
  %26 = icmp ne i16 %13, -1
  %27 = zext i1 %26 to i32
  %28 = add nsw i32 %21, %27
  %29 = mul i32 %28, %24
  %30 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %30, i64 136, i1 false)
  %31 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %34 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %34, i64 24, i1 false)
  %35 = sext i32 %25 to i64
  %36 = getelementptr inbounds i16, i16* %9, i64 %35
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %38 = bitcast i8** %37 to i16**
  store i16* %36, i16** %38, align 8
  %39 = getelementptr inbounds i16, i16* %0, i64 1
  %40 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 0
  call void @Eval6Inputs(i16* %39, i16* nonnull %40, %struct._cms_interp_struc* nonnull %6)
  %41 = sext i32 %29 to i64
  %42 = getelementptr inbounds i16, i16* %9, i64 %41
  store i16* %42, i16** %38, align 8
  %43 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 0
  call void @Eval6Inputs(i16* %39, i16* nonnull %43, %struct._cms_interp_struc* nonnull %6)
  %44 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %3, %47
  %48 = phi i64 [ %62, %47 ], [ 0, %3 ]
  %49 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %48
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %54, %51
  %56 = mul i32 %55, %22
  %57 = add i32 %56, 32768
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i16
  %60 = add i16 %50, %59
  %61 = getelementptr inbounds i16, i16* %1, i64 %48
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i64 %48, 1
  %63 = load i32, i32* %44, align 8
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %47, label %66

66:                                               ; preds = %47, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval8InputsFloat(float* nocapture readonly, float* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x float], align 16
  %5 = alloca [128 x float], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = bitcast [128 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 512, i1 false)
  %11 = bitcast [128 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 512, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load float, float* %0, align 4
  %14 = fcmp olt float %13, 0x3E112E0BE0000000
  %15 = fcmp uno float %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp ogt float %13, 1.000000e+00
  %18 = select i1 %17, float 1.000000e+00, float %13
  %19 = select i1 %16, float 0.000000e+00, float %18
  %20 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = uitofp i32 %21 to float
  %23 = fmul float %19, %22
  %24 = tail call float @llvm.floor.f32(float %23)
  %25 = fptosi float %24 to i32
  %26 = sitofp i32 %25 to float
  %27 = fsub float %23, %26
  %28 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 7
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %25
  %31 = fcmp ult float %19, 1.000000e+00
  %32 = select i1 %31, i32 %29, i32 0
  %33 = add i32 %30, %32
  %34 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %34, i64 136, i1 false)
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %36 = bitcast i32* %35 to i8*
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %38 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %38, i64 28, i1 false)
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds float, float* %9, i64 %39
  %41 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %42 = bitcast i8** %41 to float**
  store float* %40, float** %42, align 8
  %43 = getelementptr inbounds float, float* %0, i64 1
  %44 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 0
  call void @Eval7InputsFloat(float* %43, float* nonnull %44, %struct._cms_interp_struc* nonnull %6)
  %45 = sext i32 %33 to i64
  %46 = getelementptr inbounds float, float* %9, i64 %45
  store float* %46, float** %42, align 8
  %47 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 0
  call void @Eval7InputsFloat(float* %43, float* nonnull %47, %struct._cms_interp_struc* nonnull %6)
  %48 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %61, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds [128 x float], [128 x float]* %4, i64 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds [128 x float], [128 x float]* %5, i64 0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = fsub float %56, %54
  %58 = fmul float %27, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %52
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %52, 1
  %62 = load i32, i32* %48, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %51, label %65

65:                                               ; preds = %51, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Eval8Inputs(i16* nocapture readonly, i16* nocapture, %struct._cms_interp_struc* nocapture readonly) #0 {
  %4 = alloca [128 x i16], align 16
  %5 = alloca [128 x i16], align 16
  %6 = alloca %struct._cms_interp_struc, align 8
  %7 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 7
  %8 = bitcast i8** %7 to i16**
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast [128 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 256, i1 false)
  %11 = bitcast [128 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = bitcast %struct._cms_interp_struc* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 136, i1 false)
  %13 = load i16, i16* %0, align 2
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = mul i32 %16, %14
  %18 = add nsw i32 %17, 32767
  %19 = sdiv i32 %18, 65535
  %20 = add nsw i32 %19, %17
  %21 = ashr i32 %20, 16
  %22 = and i32 %20, 65535
  %23 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 6, i64 7
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 %21, %24
  %26 = icmp ne i16 %13, -1
  %27 = zext i1 %26 to i32
  %28 = add nsw i32 %21, %27
  %29 = mul i32 %28, %24
  %30 = bitcast %struct._cms_interp_struc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %30, i64 136, i1 false)
  %31 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 5, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 5, i64 1
  %34 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %34, i64 28, i1 false)
  %35 = sext i32 %25 to i64
  %36 = getelementptr inbounds i16, i16* %9, i64 %35
  %37 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 7
  %38 = bitcast i8** %37 to i16**
  store i16* %36, i16** %38, align 8
  %39 = getelementptr inbounds i16, i16* %0, i64 1
  %40 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 0
  call void @Eval7Inputs(i16* %39, i16* nonnull %40, %struct._cms_interp_struc* nonnull %6)
  %41 = sext i32 %29 to i64
  %42 = getelementptr inbounds i16, i16* %9, i64 %41
  store i16* %42, i16** %38, align 8
  %43 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 0
  call void @Eval7Inputs(i16* %39, i16* nonnull %43, %struct._cms_interp_struc* nonnull %6)
  %44 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %2, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %3, %47
  %48 = phi i64 [ %62, %47 ], [ 0, %3 ]
  %49 = getelementptr inbounds [128 x i16], [128 x i16]* %4, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [128 x i16], [128 x i16]* %5, i64 0, i64 %48
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %54, %51
  %56 = mul i32 %55, %22
  %57 = add i32 %56, 32768
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i16
  %60 = add i16 %50, %59
  %61 = getelementptr inbounds i16, i16* %1, i64 %48
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i64 %48, 1
  %63 = load i32, i32* %44, align 8
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %47, label %66

66:                                               ; preds = %47, %3
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !10}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!21}
!21 = distinct !{!21, !15}
!22 = !{!23}
!23 = distinct !{!23, !15}
!24 = !{!21, !19, !17, !14}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = !{!33}
!33 = distinct !{!33, !29}
!34 = !{!35}
!35 = distinct !{!35, !29}
!36 = !{!37}
!37 = distinct !{!37, !29}
!38 = !{!35, !33, !31, !28}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = !{!47}
!47 = distinct !{!47, !43}
!48 = !{!49}
!49 = distinct !{!49, !43}
!50 = !{!51}
!51 = distinct !{!51, !43}
!52 = !{!53}
!53 = distinct !{!53, !43}
!54 = !{!55}
!55 = distinct !{!55, !43}
!56 = !{!57}
!57 = distinct !{!57, !43}
!58 = !{!59}
!59 = distinct !{!59, !43}
!60 = !{!57, !55, !53, !51, !49, !47, !45, !42}
!61 = distinct !{!61, !8}
!62 = distinct !{!62, !8}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = !{!69}
!69 = distinct !{!69, !65}
!70 = !{!71}
!71 = distinct !{!71, !65}
!72 = !{!73}
!73 = distinct !{!73, !65}
!74 = !{!75}
!75 = distinct !{!75, !65}
!76 = !{!77}
!77 = distinct !{!77, !65}
!78 = !{!79}
!79 = distinct !{!79, !65}
!80 = !{!81}
!81 = distinct !{!81, !65}
!82 = !{!79, !77, !75, !73, !71, !69, !67, !64}
!83 = distinct !{!83, !8}
!84 = distinct !{!84, !8}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = !{!91}
!91 = distinct !{!91, !87}
!92 = !{!93}
!93 = distinct !{!93, !87}
!94 = !{!95}
!95 = distinct !{!95, !87}
!96 = !{!93, !91, !89, !86}
!97 = distinct !{!97, !8}
!98 = distinct !{!98, !8}
!99 = !{!100}
!100 = distinct !{!100, !101}
!101 = distinct !{!101, !"LVerDomain"}
!102 = !{!103}
!103 = distinct !{!103, !101}
!104 = !{!105}
!105 = distinct !{!105, !101}
!106 = !{!107}
!107 = distinct !{!107, !101}
!108 = !{!109}
!109 = distinct !{!109, !101}
!110 = !{!107, !105, !103, !100}
!111 = distinct !{!111, !8}
!112 = distinct !{!112, !8}
!113 = !{!114}
!114 = distinct !{!114, !115}
!115 = distinct !{!115, !"LVerDomain"}
!116 = !{!117}
!117 = distinct !{!117, !115}
!118 = !{!119}
!119 = distinct !{!119, !115}
!120 = !{!121}
!121 = distinct !{!121, !115}
!122 = !{!123}
!123 = distinct !{!123, !115}
!124 = !{!121, !119, !117, !114}
!125 = distinct !{!125, !8}
!126 = distinct !{!126, !8}
!127 = !{!128}
!128 = distinct !{!128, !129}
!129 = distinct !{!129, !"LVerDomain"}
!130 = !{!131}
!131 = distinct !{!131, !129}
!132 = !{!133}
!133 = distinct !{!133, !129}
!134 = !{!135}
!135 = distinct !{!135, !129}
!136 = !{!137}
!137 = distinct !{!137, !129}
!138 = !{!135, !133, !131, !128}
!139 = distinct !{!139, !8}
!140 = distinct !{!140, !8}
!141 = !{!142}
!142 = distinct !{!142, !143}
!143 = distinct !{!143, !"LVerDomain"}
!144 = !{!145}
!145 = distinct !{!145, !143}
!146 = !{!147}
!147 = distinct !{!147, !143}
!148 = !{!149}
!149 = distinct !{!149, !143}
!150 = !{!151}
!151 = distinct !{!151, !143}
!152 = !{!149, !147, !145, !142}
!153 = distinct !{!153, !8}
!154 = distinct !{!154, !8}
!155 = !{!156}
!156 = distinct !{!156, !157}
!157 = distinct !{!157, !"LVerDomain"}
!158 = !{!159}
!159 = distinct !{!159, !157}
!160 = !{!161}
!161 = distinct !{!161, !157}
!162 = !{!163}
!163 = distinct !{!163, !157}
!164 = !{!165}
!165 = distinct !{!165, !157}
!166 = !{!163, !161, !159, !156}
!167 = distinct !{!167, !8}
!168 = distinct !{!168, !8}
