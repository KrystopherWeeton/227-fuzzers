; ModuleID = '../../third_party/ffmpeg/libavformat/oggparsevp8.c'
source_filename = "../../third_party/ffmpeg/libavformat/oggparsevp8.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ogg_codec = type { i8*, i8, i8*, i32 (%struct.AVFormatContext*, i32)*, i32 (%struct.AVFormatContext*, i32)*, i64 (%struct.AVFormatContext*, i32, i64, i64*)*, i32, i32, void (%struct.AVFormatContext*, i32)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.ogg = type { %struct.ogg_stream*, i32, i32, i32, i64, %struct.ogg_state* }
%struct.ogg_stream = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, %struct.ogg_codec*, i32, i32, i32, [255 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i8* }
%struct.ogg_state = type { i64, i32, %struct.ogg_state*, i32, [1 x %struct.ogg_stream] }

@.str = private unnamed_addr constant [6 x i8] c"OVP80\00", align 1
@ff_vp8_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8 5, i8* null, i32 (%struct.AVFormatContext*, i32)* @vp8_header, i32 (%struct.AVFormatContext*, i32)* @vp8_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* @vp8_gptopts, i32 0, i32 1, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"Invalid OggVP8 header packet\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"Unknown OggVP8 version %d.%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Unknown VP8 header type 0x%02X\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_header(%struct.AVFormatContext*, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %16 = load %struct.AVStream**, %struct.AVStream*** %15, align 8
  %17 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %16, i64 %8
  %18 = load %struct.AVStream*, %struct.AVStream** %17, align 8
  %19 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = icmp ult i32 %20, 7
  br i1 %21, label %110, label %22

22:                                               ; preds = %2
  %23 = load i8, i8* %14, align 1
  %24 = icmp eq i8 %23, 79
  br i1 %24, label %25, label %110

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, i8* %14, i64 5
  %27 = load i8, i8* %26, align 1
  switch i8 %27, label %107 [
    i8 1, label %28
    i8 2, label %99
  ]

28:                                               ; preds = %25
  %29 = icmp ult i32 %20, 26
  br i1 %29, label %30, label %32

30:                                               ; preds = %28
  %31 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %31, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %110

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %14, i64 6
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 1
  br i1 %35, label %42, label %36

36:                                               ; preds = %32
  %37 = zext i8 %34 to i32
  %38 = bitcast %struct.AVFormatContext* %0 to i8*
  %39 = getelementptr inbounds i8, i8* %14, i64 7
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %38, i32 24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 %37, i32 %41) #4
  br label %110

42:                                               ; preds = %32
  %43 = getelementptr inbounds i8, i8* %14, i64 8
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 1
  %46 = tail call i16 @llvm.bswap.i16(i16 %45) #4
  %47 = zext i16 %46 to i32
  %48 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %18, i64 0, i32 19
  %49 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %48, align 8
  %50 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %49, i64 0, i32 11
  store i32 %47, i32* %50, align 8
  %51 = getelementptr inbounds i8, i8* %14, i64 10
  %52 = bitcast i8* %51 to i16*
  %53 = load i16, i16* %52, align 1
  %54 = tail call i16 @llvm.bswap.i16(i16 %53) #4
  %55 = zext i16 %54 to i32
  %56 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %48, align 8
  %57 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %56, i64 0, i32 12
  store i32 %55, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %14, i64 12
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 16
  %62 = getelementptr inbounds i8, i8* %58, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 8
  %66 = or i32 %65, %61
  %67 = getelementptr inbounds i8, i8* %58, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %66, %69
  %71 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %18, i64 0, i32 10, i32 0
  store i32 %70, i32* %71, align 8
  %72 = getelementptr inbounds i8, i8* %14, i64 15
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 16
  %76 = getelementptr inbounds i8, i8* %72, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 8
  %80 = or i32 %79, %75
  %81 = getelementptr inbounds i8, i8* %72, i64 2
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = or i32 %80, %83
  %85 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %18, i64 0, i32 10, i32 1
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds i8, i8* %14, i64 18
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 1
  %89 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %88) #5, !srcloc !2
  %90 = getelementptr inbounds i8, i8* %14, i64 22
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %92) #5, !srcloc !2
  tail call void @avpriv_set_pts_info(%struct.AVStream* %18, i32 64, i32 %93, i32 %89) #4
  %94 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %48, align 8
  %95 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %94, i64 0, i32 0
  store i32 0, i32* %95, align 8
  %96 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %48, align 8
  %97 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %96, i64 0, i32 1
  store i32 139, i32* %97, align 4
  %98 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %18, i64 0, i32 28
  store i32 2, i32* %98, align 4
  br label %110

99:                                               ; preds = %25
  %100 = getelementptr inbounds i8, i8* %14, i64 6
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  br i1 %102, label %103, label %110

103:                                              ; preds = %99
  %104 = getelementptr inbounds i8, i8* %14, i64 7
  %105 = add i32 %20, -7
  %106 = tail call i32 @ff_vorbis_stream_comment(%struct.AVFormatContext* %0, %struct.AVStream* %18, i8* %104, i32 %105) #4
  br label %110

107:                                              ; preds = %25
  %108 = zext i8 %27 to i32
  %109 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %109, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i32 %108) #4
  br label %110

110:                                              ; preds = %42, %103, %99, %2, %22, %107, %36, %30
  %111 = phi i32 [ -1094995529, %107 ], [ -1094995529, %30 ], [ -1094995529, %36 ], [ 0, %22 ], [ 0, %2 ], [ -1094995529, %99 ], [ 1, %103 ], [ 1, %42 ]
  ret i32 %111
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @vp8_packet(%struct.AVFormatContext* nocapture readonly, i32) #1 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 10
  %16 = load i64, i64* %15, align 8
  switch i64 %16, label %130 [
    i64 0, label %17
    i64 -9223372036854775808, label %17
  ]

17:                                               ; preds = %2, %2
  %18 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 14
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %130

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 18
  %24 = load i32, i32* %23, align 8
  %25 = load i8, i8* %14, align 1
  %26 = lshr i8 %25, 4
  %27 = and i8 %26, 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %14, i64 %31
  %33 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 17
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %24, %34
  br i1 %35, label %36, label %94

36:                                               ; preds = %22
  %37 = sext i32 %24 to i64
  %38 = sext i32 %34 to i64
  %39 = sub nsw i64 %38, %37
  %40 = xor i64 %37, -1
  %41 = and i64 %39, 1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %61, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %37
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, -1
  br i1 %46, label %55, label %47

47:                                               ; preds = %43
  %48 = load i8, i8* %32, align 1
  %49 = lshr i8 %48, 4
  %50 = and i8 %49, 1
  %51 = add nuw nsw i8 %27, %50
  %52 = zext i8 %51 to i32
  %53 = zext i8 %45 to i64
  %54 = getelementptr inbounds i8, i8* %32, i64 %53
  br label %55

55:                                               ; preds = %47, %43
  %56 = phi i64 [ %53, %47 ], [ 255, %43 ]
  %57 = phi i32 [ %52, %47 ], [ %28, %43 ]
  %58 = phi i8* [ %54, %47 ], [ %32, %43 ]
  %59 = getelementptr inbounds i8, i8* %32, i64 %56
  %60 = add nsw i64 %37, 1
  br label %61

61:                                               ; preds = %36, %55
  %62 = phi i64 [ %37, %36 ], [ %60, %55 ]
  %63 = phi i8* [ %32, %36 ], [ %59, %55 ]
  %64 = phi i8* [ %32, %36 ], [ %58, %55 ]
  %65 = phi i32 [ %28, %36 ], [ %57, %55 ]
  %66 = phi i32 [ undef, %36 ], [ %57, %55 ]
  %67 = sub nsw i64 0, %38
  %68 = icmp eq i64 %40, %67
  br i1 %68, label %94, label %69

69:                                               ; preds = %61, %149
  %70 = phi i64 [ %154, %149 ], [ %62, %61 ]
  %71 = phi i8* [ %153, %149 ], [ %63, %61 ]
  %72 = phi i8* [ %152, %149 ], [ %64, %61 ]
  %73 = phi i32 [ %151, %149 ], [ %65, %61 ]
  %74 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %70
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, -1
  br i1 %76, label %85, label %77

77:                                               ; preds = %69
  %78 = load i8, i8* %72, align 1
  %79 = lshr i8 %78, 4
  %80 = and i8 %79, 1
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %73, %81
  %83 = zext i8 %75 to i64
  %84 = getelementptr inbounds i8, i8* %71, i64 %83
  br label %85

85:                                               ; preds = %69, %77
  %86 = phi i64 [ %83, %77 ], [ 255, %69 ]
  %87 = phi i32 [ %82, %77 ], [ %73, %69 ]
  %88 = phi i8* [ %84, %77 ], [ %72, %69 ]
  %89 = getelementptr inbounds i8, i8* %71, i64 %86
  %90 = add nsw i64 %70, 1
  %91 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, -1
  br i1 %93, label %149, label %141

94:                                               ; preds = %61, %149, %22
  %95 = phi i32 [ %28, %22 ], [ %66, %61 ], [ %151, %149 ]
  %96 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 8
  %97 = load i64, i64* %96, align 8
  %98 = and i64 %97, 3221225472
  %99 = icmp eq i64 %98, 0
  %100 = lshr i64 %97, 32
  %101 = zext i1 %99 to i64
  %102 = sub nsw i64 %100, %101
  %103 = and i64 %97, 1073741816
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %94
  %106 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 5
  %107 = load i32, i32* %106, align 8
  %108 = or i32 %107, 1
  store i32 %108, i32* %106, align 8
  br label %109

109:                                              ; preds = %94, %105
  %110 = sext i32 %95 to i64
  %111 = sub nsw i64 %102, %110
  %112 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 11
  store i64 %111, i64* %112, align 8
  store i64 %111, i64* %15, align 8
  %113 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %114 = load %struct.AVStream**, %struct.AVStream*** %113, align 8
  %115 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %114, i64 %8
  %116 = load %struct.AVStream*, %struct.AVStream** %115, align 8
  %117 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %116, i64 0, i32 5
  %118 = load i64, i64* %117, align 8
  %119 = icmp eq i64 %118, -9223372036854775808
  br i1 %119, label %120, label %130

120:                                              ; preds = %109
  store i64 %111, i64* %117, align 8
  %121 = load %struct.AVStream**, %struct.AVStream*** %113, align 8
  %122 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %121, i64 %8
  %123 = load %struct.AVStream*, %struct.AVStream** %122, align 8
  %124 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %123, i64 0, i32 6
  %125 = load i64, i64* %124, align 8
  switch i64 %125, label %126 [
    i64 0, label %130
    i64 -9223372036854775808, label %130
  ]

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %123, i64 0, i32 5
  %128 = load i64, i64* %127, align 8
  %129 = sub nsw i64 %125, %128
  store i64 %129, i64* %124, align 8
  br label %130

130:                                              ; preds = %109, %126, %120, %120, %2, %17
  %131 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %140, label %134

134:                                              ; preds = %130
  %135 = load i8, i8* %14, align 1
  %136 = lshr i8 %135, 4
  %137 = and i8 %136, 1
  %138 = zext i8 %137 to i32
  %139 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 6
  store i32 %138, i32* %139, align 4
  br label %140

140:                                              ; preds = %130, %134
  ret i32 0

141:                                              ; preds = %85
  %142 = load i8, i8* %88, align 1
  %143 = lshr i8 %142, 4
  %144 = and i8 %143, 1
  %145 = zext i8 %144 to i32
  %146 = add nsw i32 %87, %145
  %147 = zext i8 %92 to i64
  %148 = getelementptr inbounds i8, i8* %89, i64 %147
  br label %149

149:                                              ; preds = %141, %85
  %150 = phi i64 [ %147, %141 ], [ 255, %85 ]
  %151 = phi i32 [ %146, %141 ], [ %87, %85 ]
  %152 = phi i8* [ %148, %141 ], [ %88, %85 ]
  %153 = getelementptr inbounds i8, i8* %89, i64 %150
  %154 = add nsw i64 %70, 2
  %155 = icmp slt i64 %154, %38
  br i1 %155, label %69, label %94
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i64 @vp8_gptopts(%struct.AVFormatContext* nocapture readonly, i32, i64, i64*) #1 {
  %5 = and i64 %2, 3221225472
  %6 = icmp eq i64 %5, 0
  %7 = lshr i64 %2, 32
  %8 = zext i1 %6 to i64
  %9 = sub nsw i64 %7, %8
  %10 = and i64 %2, 1073741816
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %22

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %14 = bitcast i8** %13 to %struct.ogg**
  %15 = load %struct.ogg*, %struct.ogg** %14, align 8
  %16 = getelementptr inbounds %struct.ogg, %struct.ogg* %15, i64 0, i32 0
  %17 = load %struct.ogg_stream*, %struct.ogg_stream** %16, align 8
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %17, i64 %18, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 1
  store i32 %21, i32* %19, align 8
  br label %22

22:                                               ; preds = %4, %12
  %23 = icmp eq i64* %3, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %22
  store i64 %9, i64* %3, align 8
  br label %25

25:                                               ; preds = %22, %24
  ret i64 %9
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #2

declare i32 @ff_vorbis_stream_comment(%struct.AVFormatContext*, %struct.AVStream*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 234417}
