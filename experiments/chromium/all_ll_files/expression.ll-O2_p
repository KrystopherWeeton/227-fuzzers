; ModuleID = '../../third_party/dawn/third_party/tint/src/ast/expression.cc'
source_filename = "../../third_party/dawn/third_party/tint/src/ast/expression.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.tint::TypeInfo" = type { %"struct.tint::TypeInfo"*, i8* }
%"class.tint::ast::Expression" = type { %"class.tint::Castable" }
%"class.tint::Castable" = type { %"class.tint::ast::Node" }
%"class.tint::ast::Node" = type { %"class.tint::Castable.0", %"class.tint::ProgramID", %"class.tint::Source" }
%"class.tint::Castable.0" = type { %"class.tint::Cloneable" }
%"class.tint::Cloneable" = type { %"class.tint::Castable.1" }
%"class.tint::Castable.1" = type { %"class.tint::CastableBase" }
%"class.tint::CastableBase" = type { i32 (...)** }
%"class.tint::ProgramID" = type { i32 }
%"class.tint::Source" = type { %"class.tint::Source::Range", %"class.std::__1::basic_string", %"class.tint::Source::FileContent"* }
%"class.tint::Source::Range" = type { %"class.tint::Source::Location", %"class.tint::Source::Location" }
%"class.tint::Source::Location" = type { i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.tint::Source::FileContent" = type { %"class.std::__1::basic_string", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::basic_string"* }
%"class.tint::sem::Info" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.21", %"class.std::__1::__compressed_pair.23", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { float }
%"class.tint::sem::Type" = type { %"class.tint::Castable.28" }
%"class.tint::Castable.28" = type { %"class.tint::sem::Node" }
%"class.tint::sem::Node" = type { %"class.tint::Castable.27" }
%"class.tint::Castable.27" = type { %"class.tint::CastableBase" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNK4tint8CastableINS_3ast10ExpressionENS1_4NodeEE8TypeInfoEv = comdat any

@_ZN4tint6detail10TypeInfoOfINS_3ast4NodeEE4infoE = external global %"struct.tint::TypeInfo", align 8
@.str = private unnamed_addr constant [22 x i8] c"tint::ast::Expression\00", align 1
@_ZN4tint6detail10TypeInfoOfINS_3ast10ExpressionEE4infoE = hidden constant %"struct.tint::TypeInfo" { %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3ast4NodeEE4infoE, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0) }, align 8
@_ZTVN4tint3ast10ExpressionE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.tint::ast::Expression"*)* @_ZN4tint3ast10ExpressionD2Ev to i8*), i8* bitcast (void (%"class.tint::ast::Expression"*)* @_ZN4tint3ast10ExpressionD0Ev to i8*), i8* bitcast (%"struct.tint::TypeInfo"* (%"class.tint::Castable"*)* @_ZNK4tint8CastableINS_3ast10ExpressionENS1_4NodeEE8TypeInfoEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"not set\00", align 1
@_ZN4tint6detail10TypeInfoOfINS_3sem10ExpressionEE4infoE = external global %"struct.tint::TypeInfo", align 8

@_ZN4tint3ast10ExpressionD1Ev = hidden unnamed_addr alias void (%"class.tint::ast::Expression"*), void (%"class.tint::ast::Expression"*)* @_ZN4tint3ast10ExpressionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3ast10ExpressionC2ENS_9ProgramIDERKNS_6SourceE(%"class.tint::ast::Expression"*, i32, %"class.tint::Source"* dereferenceable(64)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3ast4NodeC2ENS_9ProgramIDERKNS_6SourceE(%"class.tint::ast::Node"* %4, i32 %1, %"class.tint::Source"* dereferenceable(64) %2) #7
  %5 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3ast10ExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3ast10ExpressionC2EOS1_(%"class.tint::ast::Expression"*, %"class.tint::ast::Expression"* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3ast4NodeC2EOS1_(%"class.tint::ast::Node"* %3, %"class.tint::ast::Node"* dereferenceable(80) %4) #7
  %5 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3ast10ExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3ast10ExpressionD2Ev(%"class.tint::ast::Expression"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3ast4NodeD2Ev(%"class.tint::ast::Node"* %2) #7
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4tint3ast10ExpressionD0Ev(%"class.tint::ast::Expression"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4tint3ast10Expression15result_type_strERKNS_3sem4InfoE(%"class.std::__1::basic_string"* noalias sret, %"class.tint::ast::Expression"*, %"class.tint::sem::Info"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.tint::ast::Expression", %"class.tint::ast::Expression"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = ptrtoint %"class.tint::ast::Expression"* %1 to i64
  %6 = lshr i64 %5, 32
  %7 = shl i64 %5, 3
  %8 = and i64 %7, 4294967288
  %9 = add nuw nsw i64 %8, 8
  %10 = xor i64 %9, %6
  %11 = mul i64 %10, -7070675565921424023
  %12 = lshr i64 %11, 47
  %13 = xor i64 %11, %6
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  %16 = lshr i64 %15, 47
  %17 = xor i64 %16, %15
  %18 = mul i64 %17, -7070675565921424023
  %19 = getelementptr inbounds %"class.tint::sem::Info", %"class.tint::sem::Info"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %90, label %22

22:                                               ; preds = %3
  %23 = tail call i64 @llvm.ctpop.i64(i64 %20) #7, !range !2
  %24 = icmp ugt i64 %23, 1
  br i1 %24, label %28, label %25

25:                                               ; preds = %22
  %26 = add i64 %20, -1
  %27 = and i64 %26, %18
  br label %32

28:                                               ; preds = %22
  %29 = icmp ult i64 %18, %20
  br i1 %29, label %32, label %30

30:                                               ; preds = %28
  %31 = urem i64 %18, %20
  br label %32

32:                                               ; preds = %30, %28, %25
  %33 = phi i64 [ %27, %25 ], [ %31, %30 ], [ %18, %28 ]
  %34 = getelementptr inbounds %"class.tint::sem::Info", %"class.tint::sem::Info"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %34, align 8
  %36 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %35, i64 %33
  %37 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %36, align 8
  %38 = icmp eq %"struct.std::__1::__hash_node_base"* %37, null
  br i1 %38, label %90, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %37, i64 0, i32 0
  %41 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %40, align 8
  %42 = icmp eq %"struct.std::__1::__hash_node_base"* %41, null
  br i1 %42, label %90, label %43

43:                                               ; preds = %39
  %44 = add i64 %20, -1
  br label %45

45:                                               ; preds = %66, %43
  %46 = phi %"struct.std::__1::__hash_node_base"* [ %41, %43 ], [ %68, %66 ]
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %46, i64 1
  %48 = bitcast %"struct.std::__1::__hash_node_base"* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %18, %49
  br i1 %50, label %61, label %51

51:                                               ; preds = %45
  br i1 %24, label %54, label %52

52:                                               ; preds = %51
  %53 = and i64 %49, %44
  br label %58

54:                                               ; preds = %51
  %55 = icmp ult i64 %49, %20
  br i1 %55, label %58, label %56

56:                                               ; preds = %54
  %57 = urem i64 %49, %20
  br label %58

58:                                               ; preds = %56, %54, %52
  %59 = phi i64 [ %53, %52 ], [ %57, %56 ], [ %49, %54 ]
  %60 = icmp eq i64 %59, %33
  br i1 %60, label %66, label %90

61:                                               ; preds = %45
  %62 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %46, i64 2
  %63 = bitcast %"struct.std::__1::__hash_node_base"* %62 to %"class.tint::CastableBase"**
  %64 = load %"class.tint::CastableBase"*, %"class.tint::CastableBase"** %63, align 8
  %65 = icmp eq %"class.tint::CastableBase"* %64, %4
  br i1 %65, label %70, label %66

66:                                               ; preds = %61, %58
  %67 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %46, i64 0, i32 0
  %68 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %67, align 8
  %69 = icmp eq %"struct.std::__1::__hash_node_base"* %68, null
  br i1 %69, label %90, label %45

70:                                               ; preds = %61
  %71 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %46, i64 3
  %72 = bitcast %"struct.std::__1::__hash_node_base"* %71 to %"class.tint::CastableBase"**
  %73 = load %"class.tint::CastableBase"*, %"class.tint::CastableBase"** %72, align 8
  %74 = icmp eq %"class.tint::CastableBase"* %73, null
  br i1 %74, label %90, label %75

75:                                               ; preds = %70
  %76 = bitcast %"class.tint::CastableBase"* %73 to %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)***
  %77 = load %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)**, %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)*** %76, align 8
  %78 = getelementptr inbounds %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)*, %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)** %77, i64 2
  %79 = load %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)*, %"struct.tint::TypeInfo"* (%"class.tint::CastableBase"*)** %78, align 8
  %80 = tail call dereferenceable(16) %"struct.tint::TypeInfo"* %79(%"class.tint::CastableBase"* nonnull %73) #7
  %81 = tail call zeroext i1 @_ZNK4tint8TypeInfo2IsERKS0_(%"struct.tint::TypeInfo"* %80, %"struct.tint::TypeInfo"* nonnull dereferenceable(16) @_ZN4tint6detail10TypeInfoOfINS_3sem10ExpressionEE4infoE) #7
  br i1 %81, label %82, label %90

82:                                               ; preds = %75
  %83 = getelementptr inbounds %"class.tint::CastableBase", %"class.tint::CastableBase"* %73, i64 2
  %84 = bitcast %"class.tint::CastableBase"* %83 to %"class.tint::sem::Type"**
  %85 = load %"class.tint::sem::Type"*, %"class.tint::sem::Type"** %84, align 8
  %86 = bitcast %"class.tint::sem::Type"* %85 to void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)***
  %87 = load void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)**, void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)*** %86, align 8
  %88 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)*, void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)** %87, i64 3
  %89 = load void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)*, void (%"class.std::__1::basic_string"*, %"class.tint::sem::Type"*)** %88, align 8
  tail call void %89(%"class.std::__1::basic_string"* sret %0, %"class.tint::sem::Type"* %85) #7
  br label %95

90:                                               ; preds = %66, %58, %75, %39, %3, %32, %70
  %91 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %92 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %91, i64 0, i32 1, i32 0
  store i8 7, i8* %92, align 1
  %93 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i64 7, i1 false) #7
  %94 = getelementptr inbounds i8, i8* %93, i64 7
  store i8 0, i8* %94, align 1
  br label %95

95:                                               ; preds = %90, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.tint::TypeInfo"* @_ZNK4tint8CastableINS_3ast10ExpressionENS1_4NodeEE8TypeInfoEv(%"class.tint::Castable"*) unnamed_addr #0 comdat align 2 {
  ret %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3ast10ExpressionEE4infoE
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN4tint3ast4NodeC2ENS_9ProgramIDERKNS_6SourceE(%"class.tint::ast::Node"*, i32, %"class.tint::Source"* dereferenceable(64)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4tint3ast4NodeD2Ev(%"class.tint::ast::Node"*) unnamed_addr #5

declare void @_ZN4tint3ast4NodeC2EOS1_(%"class.tint::ast::Node"*, %"class.tint::ast::Node"* dereferenceable(80)) unnamed_addr #4

declare zeroext i1 @_ZNK4tint8TypeInfo2IsERKS0_(%"struct.tint::TypeInfo"*, %"struct.tint::TypeInfo"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
