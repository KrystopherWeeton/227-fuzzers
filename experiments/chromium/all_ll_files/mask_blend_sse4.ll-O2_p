; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/mask_blend_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/mask_blend_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp20MaskBlendInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #6
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 0, i64 0
  store void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi0ELi0EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %2, align 8
  %3 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 1, i64 0
  store void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi1ELi0EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %3, align 8
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 2, i64 0
  store void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi1ELi1EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %4, align 8
  %5 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 13, i64 0
  %6 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32)** %5 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*> <void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi0ELi0EEEvPKhPhlS5_lii, void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi1ELi0EEEvPKhPhlS5_lii>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*>* %6, align 8
  %7 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 13, i64 2
  store void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi1ELi1EEEvPKhPhlS5_lii, void (i8*, i8*, i64, i8*, i64, i32, i32)** %7, align 8
  %8 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #6
  %9 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %8, i64 0, i32 20, i64 0, i64 0
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %8, i64 0, i32 20, i64 1, i64 0
  %11 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %8, i64 0, i32 20, i64 2, i64 0
  %12 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %9 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi0ELi0EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi0ELi0EEEvPKvS5_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %12, align 8
  %13 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %10 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi1ELi0EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi1ELi0EEEvPKvS5_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %13, align 8
  %14 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %11 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi1ELi1EEEvPKvS5_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi1ELi1EEEvPKvS5_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %14, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi0ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %0 to i16*
  %11 = bitcast i8* %1 to i16*
  %12 = sext i32 %5 to i64
  %13 = icmp eq i32 %5, 4
  br i1 %13, label %14, label %278

14:                                               ; preds = %9
  %15 = icmp eq i32 %6, 4
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  %17 = shl i64 %4, 1
  %18 = shl i64 %8, 1
  br label %102

19:                                               ; preds = %14
  %20 = bitcast i8* %3 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %21, i32 0
  %23 = getelementptr inbounds i8, i8* %3, i64 %4
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = insertelement <4 x i32> undef, i32 %25, i32 0
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %27, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = bitcast <4 x i32> %22 to <16 x i8>
  %30 = or <16 x i8> %28, %29
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %32
  %34 = bitcast i8* %0 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 16
  %36 = bitcast i8* %1 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 16
  %38 = shufflevector <8 x i16> %32, <8 x i16> %33, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %32, <8 x i16> %33, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = shufflevector <8 x i16> %35, <8 x i16> %37, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %35, <8 x i16> %37, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %40, <8 x i16> %38) #6
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> %39) #6
  %44 = lshr <4 x i32> %42, <i32 6, i32 6, i32 6, i32 6>
  %45 = lshr <4 x i32> %43, <i32 6, i32 6, i32 6, i32 6>
  %46 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %44, <4 x i32> %45) #6
  %47 = add <8 x i16> %46, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %48 = ashr <8 x i16> %47, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %49 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %48, <8 x i16> %48) #6
  %50 = bitcast <16 x i8> %49 to <4 x i32>
  %51 = extractelement <4 x i32> %50, i32 0
  %52 = bitcast i8* %7 to i32*
  store i32 %51, i32* %52, align 1
  %53 = getelementptr inbounds i8, i8* %7, i64 %8
  %54 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = bitcast <16 x i8> %54 to <4 x i32>
  %56 = extractelement <4 x i32> %55, i32 0
  %57 = bitcast i8* %53 to i32*
  store i32 %56, i32* %57, align 1
  %58 = getelementptr inbounds i8, i8* %0, i64 16
  %59 = getelementptr inbounds i8, i8* %1, i64 16
  %60 = shl i64 %4, 1
  %61 = getelementptr inbounds i8, i8* %3, i64 %60
  %62 = shl i64 %8, 1
  %63 = getelementptr inbounds i8, i8* %7, i64 %62
  %64 = bitcast i8* %61 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %65, i32 0
  %67 = getelementptr inbounds i8, i8* %61, i64 %4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = insertelement <4 x i32> undef, i32 %69, i32 0
  %71 = bitcast <4 x i32> %70 to <16 x i8>
  %72 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %71, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <4 x i32> %66 to <16 x i8>
  %74 = or <16 x i8> %72, %73
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %76 = zext <8 x i8> %75 to <8 x i16>
  %77 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %76
  %78 = bitcast i8* %58 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 16
  %80 = bitcast i8* %59 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 16
  %82 = shufflevector <8 x i16> %76, <8 x i16> %77, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %76, <8 x i16> %77, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = shufflevector <8 x i16> %79, <8 x i16> %81, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = shufflevector <8 x i16> %79, <8 x i16> %81, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %84, <8 x i16> %82) #6
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %83) #6
  %88 = lshr <4 x i32> %86, <i32 6, i32 6, i32 6, i32 6>
  %89 = lshr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %90 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %88, <4 x i32> %89) #6
  %91 = add <8 x i16> %90, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %92 = ashr <8 x i16> %91, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %92, <8 x i16> %92) #6
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = extractelement <4 x i32> %94, i32 0
  %96 = bitcast i8* %63 to i32*
  store i32 %95, i32* %96, align 1
  %97 = getelementptr inbounds i8, i8* %63, i64 %8
  %98 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = bitcast <16 x i8> %98 to <4 x i32>
  %100 = extractelement <4 x i32> %99, i32 0
  %101 = bitcast i8* %97 to i32*
  store i32 %100, i32* %101, align 1
  br label %325

102:                                              ; preds = %102, %16
  %103 = phi i8* [ %275, %102 ], [ %7, %16 ]
  %104 = phi i8* [ %274, %102 ], [ %3, %16 ]
  %105 = phi i32 [ %276, %102 ], [ 0, %16 ]
  %106 = phi i16* [ %273, %102 ], [ %11, %16 ]
  %107 = phi i16* [ %272, %102 ], [ %10, %16 ]
  %108 = bitcast i8* %104 to i32*
  %109 = load i32, i32* %108, align 1
  %110 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %109, i32 0
  %111 = getelementptr inbounds i8, i8* %104, i64 %4
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 1
  %114 = insertelement <4 x i32> undef, i32 %113, i32 0
  %115 = bitcast <4 x i32> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %117 = bitcast <4 x i32> %110 to <16 x i8>
  %118 = or <16 x i8> %116, %117
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %120 = zext <8 x i8> %119 to <8 x i16>
  %121 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %120
  %122 = bitcast i16* %107 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 16
  %124 = bitcast i16* %106 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 16
  %126 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %128 = shufflevector <8 x i16> %123, <8 x i16> %125, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = shufflevector <8 x i16> %123, <8 x i16> %125, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %128, <8 x i16> %126) #6
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %127) #6
  %132 = lshr <4 x i32> %130, <i32 6, i32 6, i32 6, i32 6>
  %133 = lshr <4 x i32> %131, <i32 6, i32 6, i32 6, i32 6>
  %134 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %132, <4 x i32> %133) #6
  %135 = add <8 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = ashr <8 x i16> %135, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %137 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %136, <8 x i16> %136) #6
  %138 = bitcast <16 x i8> %137 to <4 x i32>
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = bitcast i8* %103 to i32*
  store i32 %139, i32* %140, align 1
  %141 = getelementptr inbounds i8, i8* %103, i64 %8
  %142 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %143 = bitcast <16 x i8> %142 to <4 x i32>
  %144 = extractelement <4 x i32> %143, i32 0
  %145 = bitcast i8* %141 to i32*
  store i32 %144, i32* %145, align 1
  %146 = getelementptr inbounds i16, i16* %107, i64 8
  %147 = getelementptr inbounds i16, i16* %106, i64 8
  %148 = getelementptr inbounds i8, i8* %104, i64 %17
  %149 = getelementptr inbounds i8, i8* %103, i64 %18
  %150 = bitcast i8* %148 to i32*
  %151 = load i32, i32* %150, align 1
  %152 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %151, i32 0
  %153 = getelementptr inbounds i8, i8* %148, i64 %4
  %154 = bitcast i8* %153 to i32*
  %155 = load i32, i32* %154, align 1
  %156 = insertelement <4 x i32> undef, i32 %155, i32 0
  %157 = bitcast <4 x i32> %156 to <16 x i8>
  %158 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %157, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <4 x i32> %152 to <16 x i8>
  %160 = or <16 x i8> %158, %159
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %162 = zext <8 x i8> %161 to <8 x i16>
  %163 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %162
  %164 = bitcast i16* %146 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 16
  %166 = bitcast i16* %147 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 16
  %168 = shufflevector <8 x i16> %162, <8 x i16> %163, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %169 = shufflevector <8 x i16> %162, <8 x i16> %163, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %170 = shufflevector <8 x i16> %165, <8 x i16> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %165, <8 x i16> %167, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %168) #6
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %169) #6
  %174 = lshr <4 x i32> %172, <i32 6, i32 6, i32 6, i32 6>
  %175 = lshr <4 x i32> %173, <i32 6, i32 6, i32 6, i32 6>
  %176 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %174, <4 x i32> %175) #6
  %177 = add <8 x i16> %176, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %178 = ashr <8 x i16> %177, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %179 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %178, <8 x i16> %178) #6
  %180 = bitcast <16 x i8> %179 to <4 x i32>
  %181 = extractelement <4 x i32> %180, i32 0
  %182 = bitcast i8* %149 to i32*
  store i32 %181, i32* %182, align 1
  %183 = getelementptr inbounds i8, i8* %149, i64 %8
  %184 = shufflevector <16 x i8> %179, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = bitcast <16 x i8> %184 to <4 x i32>
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = bitcast i8* %183 to i32*
  store i32 %186, i32* %187, align 1
  %188 = getelementptr inbounds i16, i16* %107, i64 16
  %189 = getelementptr inbounds i16, i16* %106, i64 16
  %190 = getelementptr inbounds i8, i8* %148, i64 %17
  %191 = getelementptr inbounds i8, i8* %149, i64 %18
  %192 = bitcast i8* %190 to i32*
  %193 = load i32, i32* %192, align 1
  %194 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %193, i32 0
  %195 = getelementptr inbounds i8, i8* %190, i64 %4
  %196 = bitcast i8* %195 to i32*
  %197 = load i32, i32* %196, align 1
  %198 = insertelement <4 x i32> undef, i32 %197, i32 0
  %199 = bitcast <4 x i32> %198 to <16 x i8>
  %200 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %199, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = bitcast <4 x i32> %194 to <16 x i8>
  %202 = or <16 x i8> %200, %201
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %204 = zext <8 x i8> %203 to <8 x i16>
  %205 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %204
  %206 = bitcast i16* %188 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 16
  %208 = bitcast i16* %189 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 16
  %210 = shufflevector <8 x i16> %204, <8 x i16> %205, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %211 = shufflevector <8 x i16> %204, <8 x i16> %205, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %212 = shufflevector <8 x i16> %207, <8 x i16> %209, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %207, <8 x i16> %209, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %214 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %212, <8 x i16> %210) #6
  %215 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %213, <8 x i16> %211) #6
  %216 = lshr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %217 = lshr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %218 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %216, <4 x i32> %217) #6
  %219 = add <8 x i16> %218, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %220 = ashr <8 x i16> %219, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %221 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %220, <8 x i16> %220) #6
  %222 = bitcast <16 x i8> %221 to <4 x i32>
  %223 = extractelement <4 x i32> %222, i32 0
  %224 = bitcast i8* %191 to i32*
  store i32 %223, i32* %224, align 1
  %225 = getelementptr inbounds i8, i8* %191, i64 %8
  %226 = shufflevector <16 x i8> %221, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %227 = bitcast <16 x i8> %226 to <4 x i32>
  %228 = extractelement <4 x i32> %227, i32 0
  %229 = bitcast i8* %225 to i32*
  store i32 %228, i32* %229, align 1
  %230 = getelementptr inbounds i16, i16* %107, i64 24
  %231 = getelementptr inbounds i16, i16* %106, i64 24
  %232 = getelementptr inbounds i8, i8* %190, i64 %17
  %233 = getelementptr inbounds i8, i8* %191, i64 %18
  %234 = bitcast i8* %232 to i32*
  %235 = load i32, i32* %234, align 1
  %236 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %235, i32 0
  %237 = getelementptr inbounds i8, i8* %232, i64 %4
  %238 = bitcast i8* %237 to i32*
  %239 = load i32, i32* %238, align 1
  %240 = insertelement <4 x i32> undef, i32 %239, i32 0
  %241 = bitcast <4 x i32> %240 to <16 x i8>
  %242 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %241, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %243 = bitcast <4 x i32> %236 to <16 x i8>
  %244 = or <16 x i8> %242, %243
  %245 = shufflevector <16 x i8> %244, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %246 = zext <8 x i8> %245 to <8 x i16>
  %247 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %246
  %248 = bitcast i16* %230 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 16
  %250 = bitcast i16* %231 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 16
  %252 = shufflevector <8 x i16> %246, <8 x i16> %247, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %253 = shufflevector <8 x i16> %246, <8 x i16> %247, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %254 = shufflevector <8 x i16> %249, <8 x i16> %251, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %255 = shufflevector <8 x i16> %249, <8 x i16> %251, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %254, <8 x i16> %252) #6
  %257 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %255, <8 x i16> %253) #6
  %258 = lshr <4 x i32> %256, <i32 6, i32 6, i32 6, i32 6>
  %259 = lshr <4 x i32> %257, <i32 6, i32 6, i32 6, i32 6>
  %260 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %258, <4 x i32> %259) #6
  %261 = add <8 x i16> %260, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %262 = ashr <8 x i16> %261, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %263 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %262, <8 x i16> %262) #6
  %264 = bitcast <16 x i8> %263 to <4 x i32>
  %265 = extractelement <4 x i32> %264, i32 0
  %266 = bitcast i8* %233 to i32*
  store i32 %265, i32* %266, align 1
  %267 = getelementptr inbounds i8, i8* %233, i64 %8
  %268 = shufflevector <16 x i8> %263, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = bitcast <16 x i8> %268 to <4 x i32>
  %270 = extractelement <4 x i32> %269, i32 0
  %271 = bitcast i8* %267 to i32*
  store i32 %270, i32* %271, align 1
  %272 = getelementptr inbounds i16, i16* %107, i64 32
  %273 = getelementptr inbounds i16, i16* %106, i64 32
  %274 = getelementptr inbounds i8, i8* %232, i64 %17
  %275 = getelementptr inbounds i8, i8* %233, i64 %18
  %276 = add nuw nsw i32 %105, 8
  %277 = icmp slt i32 %276, %6
  br i1 %277, label %102, label %325

278:                                              ; preds = %9, %318
  %279 = phi i32 [ %323, %318 ], [ 0, %9 ]
  %280 = phi i8* [ %322, %318 ], [ %3, %9 ]
  %281 = phi i16* [ %321, %318 ], [ %11, %9 ]
  %282 = phi i16* [ %320, %318 ], [ %10, %9 ]
  %283 = phi i8* [ %319, %318 ], [ %7, %9 ]
  br label %284

284:                                              ; preds = %284, %278
  %285 = phi i64 [ %316, %284 ], [ 0, %278 ]
  %286 = getelementptr inbounds i8, i8* %280, i64 %285
  %287 = bitcast i8* %286 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = insertelement <2 x i64> undef, i64 %288, i32 0
  %290 = bitcast <2 x i64> %289 to <16 x i8>
  %291 = shufflevector <16 x i8> %290, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %292 = zext <8 x i8> %291 to <8 x i16>
  %293 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %292
  %294 = shufflevector <8 x i16> %292, <8 x i16> %293, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %295 = shufflevector <8 x i16> %292, <8 x i16> %293, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %296 = getelementptr inbounds i16, i16* %282, i64 %285
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 16
  %299 = getelementptr inbounds i16, i16* %281, i64 %285
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 16
  %302 = shufflevector <8 x i16> %298, <8 x i16> %301, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %303 = shufflevector <8 x i16> %298, <8 x i16> %301, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %304 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %302, <8 x i16> %294) #6
  %305 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %303, <8 x i16> %295) #6
  %306 = lshr <4 x i32> %304, <i32 6, i32 6, i32 6, i32 6>
  %307 = lshr <4 x i32> %305, <i32 6, i32 6, i32 6, i32 6>
  %308 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %306, <4 x i32> %307) #6
  %309 = add <8 x i16> %308, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %310 = ashr <8 x i16> %309, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %311 = getelementptr inbounds i8, i8* %283, i64 %285
  %312 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %310, <8 x i16> undef) #6
  %313 = bitcast <16 x i8> %312 to <2 x i64>
  %314 = extractelement <2 x i64> %313, i32 0
  %315 = bitcast i8* %311 to i64*
  store i64 %314, i64* %315, align 1
  %316 = add nuw nsw i64 %285, 8
  %317 = icmp slt i64 %316, %12
  br i1 %317, label %284, label %318

318:                                              ; preds = %284
  %319 = getelementptr inbounds i8, i8* %283, i64 %8
  %320 = getelementptr inbounds i16, i16* %282, i64 %12
  %321 = getelementptr inbounds i16, i16* %281, i64 %12
  %322 = getelementptr inbounds i8, i8* %280, i64 %4
  %323 = add nuw nsw i32 %279, 1
  %324 = icmp slt i32 %323, %6
  br i1 %324, label %278, label %325

325:                                              ; preds = %318, %102, %19
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi1ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %0 to i16*
  %11 = bitcast i8* %1 to i16*
  %12 = sext i32 %5 to i64
  %13 = icmp eq i32 %5, 4
  br i1 %13, label %14, label %290

14:                                               ; preds = %9
  %15 = icmp eq i32 %6, 4
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  %17 = shl i64 %4, 1
  %18 = shl i64 %8, 1
  br label %106

19:                                               ; preds = %14
  %20 = bitcast i8* %3 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %25 = zext <8 x i8> %24 to <8 x i16>
  %26 = getelementptr inbounds i8, i8* %3, i64 %4
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = bitcast <2 x i64> %29 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %25, <8 x i16> %32) #6
  %34 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %33, <8 x i16> zeroinitializer) #6
  %35 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %34
  %36 = bitcast i8* %0 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 16
  %38 = bitcast i8* %1 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 16
  %40 = shufflevector <8 x i16> %34, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %34, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = shufflevector <8 x i16> %37, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %43 = shufflevector <8 x i16> %37, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %40) #6
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %41) #6
  %46 = lshr <4 x i32> %44, <i32 6, i32 6, i32 6, i32 6>
  %47 = lshr <4 x i32> %45, <i32 6, i32 6, i32 6, i32 6>
  %48 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %46, <4 x i32> %47) #6
  %49 = add <8 x i16> %48, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %50 = ashr <8 x i16> %49, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> %50) #6
  %52 = bitcast <16 x i8> %51 to <4 x i32>
  %53 = extractelement <4 x i32> %52, i32 0
  %54 = bitcast i8* %7 to i32*
  store i32 %53, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %7, i64 %8
  %56 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = bitcast <16 x i8> %56 to <4 x i32>
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = bitcast i8* %55 to i32*
  store i32 %58, i32* %59, align 1
  %60 = getelementptr inbounds i8, i8* %0, i64 16
  %61 = getelementptr inbounds i8, i8* %1, i64 16
  %62 = shl i64 %4, 1
  %63 = getelementptr inbounds i8, i8* %3, i64 %62
  %64 = shl i64 %8, 1
  %65 = getelementptr inbounds i8, i8* %7, i64 %64
  %66 = bitcast i8* %63 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %71 = zext <8 x i8> %70 to <8 x i16>
  %72 = getelementptr inbounds i8, i8* %63, i64 %4
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %78 = zext <8 x i8> %77 to <8 x i16>
  %79 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %78) #6
  %80 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %79, <8 x i16> zeroinitializer) #6
  %81 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %80
  %82 = bitcast i8* %60 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 16
  %84 = bitcast i8* %61 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 16
  %86 = shufflevector <8 x i16> %80, <8 x i16> %81, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = shufflevector <8 x i16> %80, <8 x i16> %81, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = shufflevector <8 x i16> %83, <8 x i16> %85, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = shufflevector <8 x i16> %83, <8 x i16> %85, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %86) #6
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %87) #6
  %92 = lshr <4 x i32> %90, <i32 6, i32 6, i32 6, i32 6>
  %93 = lshr <4 x i32> %91, <i32 6, i32 6, i32 6, i32 6>
  %94 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %92, <4 x i32> %93) #6
  %95 = add <8 x i16> %94, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %96 = ashr <8 x i16> %95, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %97 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %96, <8 x i16> %96) #6
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = extractelement <4 x i32> %98, i32 0
  %100 = bitcast i8* %65 to i32*
  store i32 %99, i32* %100, align 1
  %101 = getelementptr inbounds i8, i8* %65, i64 %8
  %102 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <16 x i8> %102 to <4 x i32>
  %104 = extractelement <4 x i32> %103, i32 0
  %105 = bitcast i8* %101 to i32*
  store i32 %104, i32* %105, align 1
  br label %342

106:                                              ; preds = %106, %16
  %107 = phi i8* [ %287, %106 ], [ %7, %16 ]
  %108 = phi i8* [ %286, %106 ], [ %3, %16 ]
  %109 = phi i32 [ %288, %106 ], [ 0, %16 ]
  %110 = phi i16* [ %285, %106 ], [ %11, %16 ]
  %111 = phi i16* [ %284, %106 ], [ %10, %16 ]
  %112 = bitcast i8* %108 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %117 = zext <8 x i8> %116 to <8 x i16>
  %118 = getelementptr inbounds i8, i8* %108, i64 %4
  %119 = bitcast i8* %118 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = insertelement <2 x i64> undef, i64 %120, i32 0
  %122 = bitcast <2 x i64> %121 to <16 x i8>
  %123 = shufflevector <16 x i8> %122, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = zext <8 x i8> %123 to <8 x i16>
  %125 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %117, <8 x i16> %124) #6
  %126 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %125, <8 x i16> zeroinitializer) #6
  %127 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %126
  %128 = bitcast i16* %111 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 16
  %130 = bitcast i16* %110 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 16
  %132 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %133 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %134 = shufflevector <8 x i16> %129, <8 x i16> %131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = shufflevector <8 x i16> %129, <8 x i16> %131, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %132) #6
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> %133) #6
  %138 = lshr <4 x i32> %136, <i32 6, i32 6, i32 6, i32 6>
  %139 = lshr <4 x i32> %137, <i32 6, i32 6, i32 6, i32 6>
  %140 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %138, <4 x i32> %139) #6
  %141 = add <8 x i16> %140, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %142 = ashr <8 x i16> %141, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %143 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %142) #6
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = bitcast i8* %107 to i32*
  store i32 %145, i32* %146, align 1
  %147 = getelementptr inbounds i8, i8* %107, i64 %8
  %148 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = bitcast <16 x i8> %148 to <4 x i32>
  %150 = extractelement <4 x i32> %149, i32 0
  %151 = bitcast i8* %147 to i32*
  store i32 %150, i32* %151, align 1
  %152 = getelementptr inbounds i16, i16* %111, i64 8
  %153 = getelementptr inbounds i16, i16* %110, i64 8
  %154 = getelementptr inbounds i8, i8* %108, i64 %17
  %155 = getelementptr inbounds i8, i8* %107, i64 %18
  %156 = bitcast i8* %154 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> undef, i64 %157, i32 0
  %159 = bitcast <2 x i64> %158 to <16 x i8>
  %160 = shufflevector <16 x i8> %159, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %161 = zext <8 x i8> %160 to <8 x i16>
  %162 = getelementptr inbounds i8, i8* %154, i64 %4
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %168 = zext <8 x i8> %167 to <8 x i16>
  %169 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %161, <8 x i16> %168) #6
  %170 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %169, <8 x i16> zeroinitializer) #6
  %171 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %170
  %172 = bitcast i16* %152 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 16
  %174 = bitcast i16* %153 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 16
  %176 = shufflevector <8 x i16> %170, <8 x i16> %171, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %177 = shufflevector <8 x i16> %170, <8 x i16> %171, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %178 = shufflevector <8 x i16> %173, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %179 = shufflevector <8 x i16> %173, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %178, <8 x i16> %176) #6
  %181 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> %177) #6
  %182 = lshr <4 x i32> %180, <i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <4 x i32> %181, <i32 6, i32 6, i32 6, i32 6>
  %184 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %182, <4 x i32> %183) #6
  %185 = add <8 x i16> %184, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %186 = ashr <8 x i16> %185, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %187 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %186, <8 x i16> %186) #6
  %188 = bitcast <16 x i8> %187 to <4 x i32>
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = bitcast i8* %155 to i32*
  store i32 %189, i32* %190, align 1
  %191 = getelementptr inbounds i8, i8* %155, i64 %8
  %192 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = bitcast <16 x i8> %192 to <4 x i32>
  %194 = extractelement <4 x i32> %193, i32 0
  %195 = bitcast i8* %191 to i32*
  store i32 %194, i32* %195, align 1
  %196 = getelementptr inbounds i16, i16* %111, i64 16
  %197 = getelementptr inbounds i16, i16* %110, i64 16
  %198 = getelementptr inbounds i8, i8* %154, i64 %17
  %199 = getelementptr inbounds i8, i8* %155, i64 %18
  %200 = bitcast i8* %198 to i64*
  %201 = load i64, i64* %200, align 1
  %202 = insertelement <2 x i64> undef, i64 %201, i32 0
  %203 = bitcast <2 x i64> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %205 = zext <8 x i8> %204 to <8 x i16>
  %206 = getelementptr inbounds i8, i8* %198, i64 %4
  %207 = bitcast i8* %206 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = insertelement <2 x i64> undef, i64 %208, i32 0
  %210 = bitcast <2 x i64> %209 to <16 x i8>
  %211 = shufflevector <16 x i8> %210, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %212 = zext <8 x i8> %211 to <8 x i16>
  %213 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %205, <8 x i16> %212) #6
  %214 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %213, <8 x i16> zeroinitializer) #6
  %215 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %214
  %216 = bitcast i16* %196 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 16
  %218 = bitcast i16* %197 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 16
  %220 = shufflevector <8 x i16> %214, <8 x i16> %215, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %221 = shufflevector <8 x i16> %214, <8 x i16> %215, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %217, <8 x i16> %219, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %223 = shufflevector <8 x i16> %217, <8 x i16> %219, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> %220) #6
  %225 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %223, <8 x i16> %221) #6
  %226 = lshr <4 x i32> %224, <i32 6, i32 6, i32 6, i32 6>
  %227 = lshr <4 x i32> %225, <i32 6, i32 6, i32 6, i32 6>
  %228 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %226, <4 x i32> %227) #6
  %229 = add <8 x i16> %228, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %230 = ashr <8 x i16> %229, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %231 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %230, <8 x i16> %230) #6
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = extractelement <4 x i32> %232, i32 0
  %234 = bitcast i8* %199 to i32*
  store i32 %233, i32* %234, align 1
  %235 = getelementptr inbounds i8, i8* %199, i64 %8
  %236 = shufflevector <16 x i8> %231, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = bitcast <16 x i8> %236 to <4 x i32>
  %238 = extractelement <4 x i32> %237, i32 0
  %239 = bitcast i8* %235 to i32*
  store i32 %238, i32* %239, align 1
  %240 = getelementptr inbounds i16, i16* %111, i64 24
  %241 = getelementptr inbounds i16, i16* %110, i64 24
  %242 = getelementptr inbounds i8, i8* %198, i64 %17
  %243 = getelementptr inbounds i8, i8* %199, i64 %18
  %244 = bitcast i8* %242 to i64*
  %245 = load i64, i64* %244, align 1
  %246 = insertelement <2 x i64> undef, i64 %245, i32 0
  %247 = bitcast <2 x i64> %246 to <16 x i8>
  %248 = shufflevector <16 x i8> %247, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %249 = zext <8 x i8> %248 to <8 x i16>
  %250 = getelementptr inbounds i8, i8* %242, i64 %4
  %251 = bitcast i8* %250 to i64*
  %252 = load i64, i64* %251, align 1
  %253 = insertelement <2 x i64> undef, i64 %252, i32 0
  %254 = bitcast <2 x i64> %253 to <16 x i8>
  %255 = shufflevector <16 x i8> %254, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %256 = zext <8 x i8> %255 to <8 x i16>
  %257 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %249, <8 x i16> %256) #6
  %258 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %257, <8 x i16> zeroinitializer) #6
  %259 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %258
  %260 = bitcast i16* %240 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 16
  %262 = bitcast i16* %241 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = shufflevector <8 x i16> %258, <8 x i16> %259, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %265 = shufflevector <8 x i16> %258, <8 x i16> %259, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %266 = shufflevector <8 x i16> %261, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %267 = shufflevector <8 x i16> %261, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %268 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %266, <8 x i16> %264) #6
  %269 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %267, <8 x i16> %265) #6
  %270 = lshr <4 x i32> %268, <i32 6, i32 6, i32 6, i32 6>
  %271 = lshr <4 x i32> %269, <i32 6, i32 6, i32 6, i32 6>
  %272 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %270, <4 x i32> %271) #6
  %273 = add <8 x i16> %272, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %274 = ashr <8 x i16> %273, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %275 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %274, <8 x i16> %274) #6
  %276 = bitcast <16 x i8> %275 to <4 x i32>
  %277 = extractelement <4 x i32> %276, i32 0
  %278 = bitcast i8* %243 to i32*
  store i32 %277, i32* %278, align 1
  %279 = getelementptr inbounds i8, i8* %243, i64 %8
  %280 = shufflevector <16 x i8> %275, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <16 x i8> %280 to <4 x i32>
  %282 = extractelement <4 x i32> %281, i32 0
  %283 = bitcast i8* %279 to i32*
  store i32 %282, i32* %283, align 1
  %284 = getelementptr inbounds i16, i16* %111, i64 32
  %285 = getelementptr inbounds i16, i16* %110, i64 32
  %286 = getelementptr inbounds i8, i8* %242, i64 %17
  %287 = getelementptr inbounds i8, i8* %243, i64 %18
  %288 = add nuw nsw i32 %109, 8
  %289 = icmp slt i32 %288, %6
  br i1 %289, label %106, label %342

290:                                              ; preds = %9, %335
  %291 = phi i32 [ %340, %335 ], [ 0, %9 ]
  %292 = phi i8* [ %339, %335 ], [ %3, %9 ]
  %293 = phi i16* [ %338, %335 ], [ %11, %9 ]
  %294 = phi i16* [ %337, %335 ], [ %10, %9 ]
  %295 = phi i8* [ %336, %335 ], [ %7, %9 ]
  br label %296

296:                                              ; preds = %296, %290
  %297 = phi i64 [ %333, %296 ], [ 0, %290 ]
  %298 = trunc i64 %297 to i32
  %299 = shl i32 %298, 1
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds i8, i8* %292, i64 %300
  %302 = bitcast i8* %301 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1
  %304 = shufflevector <16 x i8> %303, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %305 = zext <8 x i8> %304 to <8 x i16>
  %306 = shufflevector <16 x i8> %303, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %307 = zext <8 x i8> %306 to <8 x i16>
  %308 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %305, <8 x i16> %307) #6
  %309 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %308, <8 x i16> zeroinitializer) #6
  %310 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %309
  %311 = shufflevector <8 x i16> %309, <8 x i16> %310, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %312 = shufflevector <8 x i16> %309, <8 x i16> %310, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = getelementptr inbounds i16, i16* %294, i64 %297
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 16
  %316 = getelementptr inbounds i16, i16* %293, i64 %297
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 16
  %319 = shufflevector <8 x i16> %315, <8 x i16> %318, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %320 = shufflevector <8 x i16> %315, <8 x i16> %318, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %319, <8 x i16> %311) #6
  %322 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> %312) #6
  %323 = lshr <4 x i32> %321, <i32 6, i32 6, i32 6, i32 6>
  %324 = lshr <4 x i32> %322, <i32 6, i32 6, i32 6, i32 6>
  %325 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %323, <4 x i32> %324) #6
  %326 = add <8 x i16> %325, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %327 = ashr <8 x i16> %326, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %328 = getelementptr inbounds i8, i8* %295, i64 %297
  %329 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %327, <8 x i16> undef) #6
  %330 = bitcast <16 x i8> %329 to <2 x i64>
  %331 = extractelement <2 x i64> %330, i32 0
  %332 = bitcast i8* %328 to i64*
  store i64 %331, i64* %332, align 1
  %333 = add nuw nsw i64 %297, 8
  %334 = icmp slt i64 %333, %12
  br i1 %334, label %296, label %335

335:                                              ; preds = %296
  %336 = getelementptr inbounds i8, i8* %295, i64 %8
  %337 = getelementptr inbounds i16, i16* %294, i64 %12
  %338 = getelementptr inbounds i16, i16* %293, i64 %12
  %339 = getelementptr inbounds i8, i8* %292, i64 %4
  %340 = add nuw nsw i32 %291, 1
  %341 = icmp slt i32 %340, %6
  br i1 %341, label %290, label %342

342:                                              ; preds = %335, %106, %19
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_114MaskBlend_SSE4ILi1ELi1EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %0 to i16*
  %11 = bitcast i8* %1 to i16*
  %12 = sext i32 %5 to i64
  %13 = icmp eq i32 %5, 4
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = shl i64 %4, 1
  br label %398

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %23, label %18

18:                                               ; preds = %16
  %19 = shl i64 %4, 1
  %20 = mul nsw i64 %4, 3
  %21 = shl i64 %4, 2
  %22 = shl i64 %8, 1
  br label %146

23:                                               ; preds = %16
  %24 = bitcast i8* %3 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %29 = zext <8 x i8> %28 to <8 x i16>
  %30 = shl i64 %4, 1
  %31 = getelementptr inbounds i8, i8* %3, i64 %30
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %37 = zext <8 x i8> %36 to <8 x i16>
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %29, <8 x i16> %37) #6
  %39 = getelementptr inbounds i8, i8* %3, i64 %4
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = zext <8 x i8> %44 to <8 x i16>
  %46 = mul nsw i64 %4, 3
  %47 = getelementptr inbounds i8, i8* %3, i64 %46
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %53 = zext <8 x i8> %52 to <8 x i16>
  %54 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %45, <8 x i16> %53) #6
  %55 = add <8 x i16> %54, %38
  %56 = lshr <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %56, <8 x i16> zeroinitializer) #6
  %58 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %57
  %59 = bitcast i8* %0 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 16
  %61 = bitcast i8* %1 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 16
  %63 = shufflevector <8 x i16> %57, <8 x i16> %58, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %57, <8 x i16> %58, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %65 = shufflevector <8 x i16> %60, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %66 = shufflevector <8 x i16> %60, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> %63) #6
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %64) #6
  %69 = lshr <4 x i32> %67, <i32 6, i32 6, i32 6, i32 6>
  %70 = lshr <4 x i32> %68, <i32 6, i32 6, i32 6, i32 6>
  %71 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %69, <4 x i32> %70) #6
  %72 = add <8 x i16> %71, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %73 = ashr <8 x i16> %72, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %73, <8 x i16> %73) #6
  %75 = bitcast <16 x i8> %74 to <4 x i32>
  %76 = extractelement <4 x i32> %75, i32 0
  %77 = bitcast i8* %7 to i32*
  store i32 %76, i32* %77, align 1
  %78 = getelementptr inbounds i8, i8* %7, i64 %8
  %79 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <16 x i8> %79 to <4 x i32>
  %81 = extractelement <4 x i32> %80, i32 0
  %82 = bitcast i8* %78 to i32*
  store i32 %81, i32* %82, align 1
  %83 = getelementptr inbounds i8, i8* %0, i64 16
  %84 = getelementptr inbounds i8, i8* %1, i64 16
  %85 = shl i64 %4, 2
  %86 = getelementptr inbounds i8, i8* %3, i64 %85
  %87 = shl i64 %8, 1
  %88 = getelementptr inbounds i8, i8* %7, i64 %87
  %89 = bitcast i8* %86 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = insertelement <2 x i64> undef, i64 %90, i32 0
  %92 = bitcast <2 x i64> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %94 = zext <8 x i8> %93 to <8 x i16>
  %95 = getelementptr inbounds i8, i8* %86, i64 %30
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %94, <8 x i16> %101) #6
  %103 = getelementptr inbounds i8, i8* %86, i64 %4
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %109 = zext <8 x i8> %108 to <8 x i16>
  %110 = getelementptr inbounds i8, i8* %86, i64 %46
  %111 = bitcast i8* %110 to i64*
  %112 = load i64, i64* %111, align 1
  %113 = insertelement <2 x i64> undef, i64 %112, i32 0
  %114 = bitcast <2 x i64> %113 to <16 x i8>
  %115 = shufflevector <16 x i8> %114, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %116 = zext <8 x i8> %115 to <8 x i16>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %109, <8 x i16> %116) #6
  %118 = add <8 x i16> %117, %102
  %119 = lshr <8 x i16> %118, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %120 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %119, <8 x i16> zeroinitializer) #6
  %121 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %120
  %122 = bitcast i8* %83 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 16
  %124 = bitcast i8* %84 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 16
  %126 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %128 = shufflevector <8 x i16> %123, <8 x i16> %125, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = shufflevector <8 x i16> %123, <8 x i16> %125, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %128, <8 x i16> %126) #6
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %127) #6
  %132 = lshr <4 x i32> %130, <i32 6, i32 6, i32 6, i32 6>
  %133 = lshr <4 x i32> %131, <i32 6, i32 6, i32 6, i32 6>
  %134 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %132, <4 x i32> %133) #6
  %135 = add <8 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = ashr <8 x i16> %135, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %137 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %136, <8 x i16> %136) #6
  %138 = bitcast <16 x i8> %137 to <4 x i32>
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = bitcast i8* %88 to i32*
  store i32 %139, i32* %140, align 1
  %141 = getelementptr inbounds i8, i8* %88, i64 %8
  %142 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %143 = bitcast <16 x i8> %142 to <4 x i32>
  %144 = extractelement <4 x i32> %143, i32 0
  %145 = bitcast i8* %141 to i32*
  store i32 %144, i32* %145, align 1
  br label %460

146:                                              ; preds = %146, %18
  %147 = phi i8* [ %395, %146 ], [ %7, %18 ]
  %148 = phi i8* [ %394, %146 ], [ %3, %18 ]
  %149 = phi i32 [ %396, %146 ], [ 0, %18 ]
  %150 = phi i16* [ %393, %146 ], [ %11, %18 ]
  %151 = phi i16* [ %392, %146 ], [ %10, %18 ]
  %152 = bitcast i8* %148 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = insertelement <2 x i64> undef, i64 %153, i32 0
  %155 = bitcast <2 x i64> %154 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %157 = zext <8 x i8> %156 to <8 x i16>
  %158 = getelementptr inbounds i8, i8* %148, i64 %19
  %159 = bitcast i8* %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = insertelement <2 x i64> undef, i64 %160, i32 0
  %162 = bitcast <2 x i64> %161 to <16 x i8>
  %163 = shufflevector <16 x i8> %162, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %164 = zext <8 x i8> %163 to <8 x i16>
  %165 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %157, <8 x i16> %164) #6
  %166 = getelementptr inbounds i8, i8* %148, i64 %4
  %167 = bitcast i8* %166 to i64*
  %168 = load i64, i64* %167, align 1
  %169 = insertelement <2 x i64> undef, i64 %168, i32 0
  %170 = bitcast <2 x i64> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %172 = zext <8 x i8> %171 to <8 x i16>
  %173 = getelementptr inbounds i8, i8* %148, i64 %20
  %174 = bitcast i8* %173 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = insertelement <2 x i64> undef, i64 %175, i32 0
  %177 = bitcast <2 x i64> %176 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %179 = zext <8 x i8> %178 to <8 x i16>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %172, <8 x i16> %179) #6
  %181 = add <8 x i16> %180, %165
  %182 = lshr <8 x i16> %181, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %183 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %182, <8 x i16> zeroinitializer) #6
  %184 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %183
  %185 = bitcast i16* %151 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 16
  %187 = bitcast i16* %150 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 16
  %189 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %190 = shufflevector <8 x i16> %183, <8 x i16> %184, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %191 = shufflevector <8 x i16> %186, <8 x i16> %188, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %192 = shufflevector <8 x i16> %186, <8 x i16> %188, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %193 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %191, <8 x i16> %189) #6
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %192, <8 x i16> %190) #6
  %195 = lshr <4 x i32> %193, <i32 6, i32 6, i32 6, i32 6>
  %196 = lshr <4 x i32> %194, <i32 6, i32 6, i32 6, i32 6>
  %197 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %195, <4 x i32> %196) #6
  %198 = add <8 x i16> %197, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %199 = ashr <8 x i16> %198, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %200 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %199, <8 x i16> %199) #6
  %201 = bitcast <16 x i8> %200 to <4 x i32>
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = bitcast i8* %147 to i32*
  store i32 %202, i32* %203, align 1
  %204 = getelementptr inbounds i8, i8* %147, i64 %8
  %205 = shufflevector <16 x i8> %200, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = bitcast <16 x i8> %205 to <4 x i32>
  %207 = extractelement <4 x i32> %206, i32 0
  %208 = bitcast i8* %204 to i32*
  store i32 %207, i32* %208, align 1
  %209 = getelementptr inbounds i16, i16* %151, i64 8
  %210 = getelementptr inbounds i16, i16* %150, i64 8
  %211 = getelementptr inbounds i8, i8* %148, i64 %21
  %212 = getelementptr inbounds i8, i8* %147, i64 %22
  %213 = bitcast i8* %211 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = insertelement <2 x i64> undef, i64 %214, i32 0
  %216 = bitcast <2 x i64> %215 to <16 x i8>
  %217 = shufflevector <16 x i8> %216, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %218 = zext <8 x i8> %217 to <8 x i16>
  %219 = getelementptr inbounds i8, i8* %211, i64 %19
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> undef, i64 %221, i32 0
  %223 = bitcast <2 x i64> %222 to <16 x i8>
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %225 = zext <8 x i8> %224 to <8 x i16>
  %226 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %218, <8 x i16> %225) #6
  %227 = getelementptr inbounds i8, i8* %211, i64 %4
  %228 = bitcast i8* %227 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = insertelement <2 x i64> undef, i64 %229, i32 0
  %231 = bitcast <2 x i64> %230 to <16 x i8>
  %232 = shufflevector <16 x i8> %231, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %233 = zext <8 x i8> %232 to <8 x i16>
  %234 = getelementptr inbounds i8, i8* %211, i64 %20
  %235 = bitcast i8* %234 to i64*
  %236 = load i64, i64* %235, align 1
  %237 = insertelement <2 x i64> undef, i64 %236, i32 0
  %238 = bitcast <2 x i64> %237 to <16 x i8>
  %239 = shufflevector <16 x i8> %238, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = zext <8 x i8> %239 to <8 x i16>
  %241 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %233, <8 x i16> %240) #6
  %242 = add <8 x i16> %241, %226
  %243 = lshr <8 x i16> %242, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %244 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %243, <8 x i16> zeroinitializer) #6
  %245 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %244
  %246 = bitcast i16* %209 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 16
  %248 = bitcast i16* %210 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 16
  %250 = shufflevector <8 x i16> %244, <8 x i16> %245, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = shufflevector <8 x i16> %244, <8 x i16> %245, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = shufflevector <8 x i16> %247, <8 x i16> %249, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %253 = shufflevector <8 x i16> %247, <8 x i16> %249, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %254 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> %250) #6
  %255 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %253, <8 x i16> %251) #6
  %256 = lshr <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %257 = lshr <4 x i32> %255, <i32 6, i32 6, i32 6, i32 6>
  %258 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %256, <4 x i32> %257) #6
  %259 = add <8 x i16> %258, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %260 = ashr <8 x i16> %259, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %261 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %260, <8 x i16> %260) #6
  %262 = bitcast <16 x i8> %261 to <4 x i32>
  %263 = extractelement <4 x i32> %262, i32 0
  %264 = bitcast i8* %212 to i32*
  store i32 %263, i32* %264, align 1
  %265 = getelementptr inbounds i8, i8* %212, i64 %8
  %266 = shufflevector <16 x i8> %261, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = bitcast <16 x i8> %266 to <4 x i32>
  %268 = extractelement <4 x i32> %267, i32 0
  %269 = bitcast i8* %265 to i32*
  store i32 %268, i32* %269, align 1
  %270 = getelementptr inbounds i16, i16* %151, i64 16
  %271 = getelementptr inbounds i16, i16* %150, i64 16
  %272 = getelementptr inbounds i8, i8* %211, i64 %21
  %273 = getelementptr inbounds i8, i8* %212, i64 %22
  %274 = bitcast i8* %272 to i64*
  %275 = load i64, i64* %274, align 1
  %276 = insertelement <2 x i64> undef, i64 %275, i32 0
  %277 = bitcast <2 x i64> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %279 = zext <8 x i8> %278 to <8 x i16>
  %280 = getelementptr inbounds i8, i8* %272, i64 %19
  %281 = bitcast i8* %280 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = insertelement <2 x i64> undef, i64 %282, i32 0
  %284 = bitcast <2 x i64> %283 to <16 x i8>
  %285 = shufflevector <16 x i8> %284, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %286 = zext <8 x i8> %285 to <8 x i16>
  %287 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %279, <8 x i16> %286) #6
  %288 = getelementptr inbounds i8, i8* %272, i64 %4
  %289 = bitcast i8* %288 to i64*
  %290 = load i64, i64* %289, align 1
  %291 = insertelement <2 x i64> undef, i64 %290, i32 0
  %292 = bitcast <2 x i64> %291 to <16 x i8>
  %293 = shufflevector <16 x i8> %292, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %294 = zext <8 x i8> %293 to <8 x i16>
  %295 = getelementptr inbounds i8, i8* %272, i64 %20
  %296 = bitcast i8* %295 to i64*
  %297 = load i64, i64* %296, align 1
  %298 = insertelement <2 x i64> undef, i64 %297, i32 0
  %299 = bitcast <2 x i64> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %301 = zext <8 x i8> %300 to <8 x i16>
  %302 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %294, <8 x i16> %301) #6
  %303 = add <8 x i16> %302, %287
  %304 = lshr <8 x i16> %303, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %305 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %304, <8 x i16> zeroinitializer) #6
  %306 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %305
  %307 = bitcast i16* %270 to <8 x i16>*
  %308 = load <8 x i16>, <8 x i16>* %307, align 16
  %309 = bitcast i16* %271 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 16
  %311 = shufflevector <8 x i16> %305, <8 x i16> %306, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %312 = shufflevector <8 x i16> %305, <8 x i16> %306, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %313 = shufflevector <8 x i16> %308, <8 x i16> %310, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %314 = shufflevector <8 x i16> %308, <8 x i16> %310, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %315 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %313, <8 x i16> %311) #6
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %312) #6
  %317 = lshr <4 x i32> %315, <i32 6, i32 6, i32 6, i32 6>
  %318 = lshr <4 x i32> %316, <i32 6, i32 6, i32 6, i32 6>
  %319 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %317, <4 x i32> %318) #6
  %320 = add <8 x i16> %319, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %321 = ashr <8 x i16> %320, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %322 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %321, <8 x i16> %321) #6
  %323 = bitcast <16 x i8> %322 to <4 x i32>
  %324 = extractelement <4 x i32> %323, i32 0
  %325 = bitcast i8* %273 to i32*
  store i32 %324, i32* %325, align 1
  %326 = getelementptr inbounds i8, i8* %273, i64 %8
  %327 = shufflevector <16 x i8> %322, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = bitcast <16 x i8> %327 to <4 x i32>
  %329 = extractelement <4 x i32> %328, i32 0
  %330 = bitcast i8* %326 to i32*
  store i32 %329, i32* %330, align 1
  %331 = getelementptr inbounds i16, i16* %151, i64 24
  %332 = getelementptr inbounds i16, i16* %150, i64 24
  %333 = getelementptr inbounds i8, i8* %272, i64 %21
  %334 = getelementptr inbounds i8, i8* %273, i64 %22
  %335 = bitcast i8* %333 to i64*
  %336 = load i64, i64* %335, align 1
  %337 = insertelement <2 x i64> undef, i64 %336, i32 0
  %338 = bitcast <2 x i64> %337 to <16 x i8>
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %340 = zext <8 x i8> %339 to <8 x i16>
  %341 = getelementptr inbounds i8, i8* %333, i64 %19
  %342 = bitcast i8* %341 to i64*
  %343 = load i64, i64* %342, align 1
  %344 = insertelement <2 x i64> undef, i64 %343, i32 0
  %345 = bitcast <2 x i64> %344 to <16 x i8>
  %346 = shufflevector <16 x i8> %345, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %347 = zext <8 x i8> %346 to <8 x i16>
  %348 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %340, <8 x i16> %347) #6
  %349 = getelementptr inbounds i8, i8* %333, i64 %4
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350, align 1
  %352 = insertelement <2 x i64> undef, i64 %351, i32 0
  %353 = bitcast <2 x i64> %352 to <16 x i8>
  %354 = shufflevector <16 x i8> %353, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %355 = zext <8 x i8> %354 to <8 x i16>
  %356 = getelementptr inbounds i8, i8* %333, i64 %20
  %357 = bitcast i8* %356 to i64*
  %358 = load i64, i64* %357, align 1
  %359 = insertelement <2 x i64> undef, i64 %358, i32 0
  %360 = bitcast <2 x i64> %359 to <16 x i8>
  %361 = shufflevector <16 x i8> %360, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %362 = zext <8 x i8> %361 to <8 x i16>
  %363 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %355, <8 x i16> %362) #6
  %364 = add <8 x i16> %363, %348
  %365 = lshr <8 x i16> %364, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %366 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %365, <8 x i16> zeroinitializer) #6
  %367 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %366
  %368 = bitcast i16* %331 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 16
  %370 = bitcast i16* %332 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 16
  %372 = shufflevector <8 x i16> %366, <8 x i16> %367, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %373 = shufflevector <8 x i16> %366, <8 x i16> %367, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %374 = shufflevector <8 x i16> %369, <8 x i16> %371, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %375 = shufflevector <8 x i16> %369, <8 x i16> %371, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %376 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %374, <8 x i16> %372) #6
  %377 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> %373) #6
  %378 = lshr <4 x i32> %376, <i32 6, i32 6, i32 6, i32 6>
  %379 = lshr <4 x i32> %377, <i32 6, i32 6, i32 6, i32 6>
  %380 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %378, <4 x i32> %379) #6
  %381 = add <8 x i16> %380, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %382 = ashr <8 x i16> %381, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %383 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %382, <8 x i16> %382) #6
  %384 = bitcast <16 x i8> %383 to <4 x i32>
  %385 = extractelement <4 x i32> %384, i32 0
  %386 = bitcast i8* %334 to i32*
  store i32 %385, i32* %386, align 1
  %387 = getelementptr inbounds i8, i8* %334, i64 %8
  %388 = shufflevector <16 x i8> %383, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %389 = bitcast <16 x i8> %388 to <4 x i32>
  %390 = extractelement <4 x i32> %389, i32 0
  %391 = bitcast i8* %387 to i32*
  store i32 %390, i32* %391, align 1
  %392 = getelementptr inbounds i16, i16* %151, i64 32
  %393 = getelementptr inbounds i16, i16* %150, i64 32
  %394 = getelementptr inbounds i8, i8* %333, i64 %21
  %395 = getelementptr inbounds i8, i8* %334, i64 %22
  %396 = add nuw nsw i32 %149, 8
  %397 = icmp slt i32 %396, %6
  br i1 %397, label %146, label %460

398:                                              ; preds = %14, %453
  %399 = phi i32 [ %458, %453 ], [ 0, %14 ]
  %400 = phi i8* [ %457, %453 ], [ %3, %14 ]
  %401 = phi i16* [ %456, %453 ], [ %11, %14 ]
  %402 = phi i16* [ %455, %453 ], [ %10, %14 ]
  %403 = phi i8* [ %454, %453 ], [ %7, %14 ]
  br label %404

404:                                              ; preds = %404, %398
  %405 = phi i64 [ %451, %404 ], [ 0, %398 ]
  %406 = trunc i64 %405 to i32
  %407 = shl i32 %406, 1
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %400, i64 %408
  %410 = bitcast i8* %409 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1
  %412 = shufflevector <16 x i8> %411, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %413 = zext <8 x i8> %412 to <8 x i16>
  %414 = shufflevector <16 x i8> %411, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %415 = zext <8 x i8> %414 to <8 x i16>
  %416 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %413, <8 x i16> %415) #6
  %417 = getelementptr inbounds i8, i8* %409, i64 %4
  %418 = bitcast i8* %417 to <16 x i8>*
  %419 = load <16 x i8>, <16 x i8>* %418, align 1
  %420 = shufflevector <16 x i8> %419, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %421 = zext <8 x i8> %420 to <8 x i16>
  %422 = shufflevector <16 x i8> %419, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %423 = zext <8 x i8> %422 to <8 x i16>
  %424 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %421, <8 x i16> %423) #6
  %425 = add <8 x i16> %424, %416
  %426 = lshr <8 x i16> %425, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %427 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %426, <8 x i16> zeroinitializer) #6
  %428 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %427
  %429 = shufflevector <8 x i16> %427, <8 x i16> %428, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %430 = shufflevector <8 x i16> %427, <8 x i16> %428, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %431 = getelementptr inbounds i16, i16* %402, i64 %405
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 16
  %434 = getelementptr inbounds i16, i16* %401, i64 %405
  %435 = bitcast i16* %434 to <8 x i16>*
  %436 = load <8 x i16>, <8 x i16>* %435, align 16
  %437 = shufflevector <8 x i16> %433, <8 x i16> %436, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %438 = shufflevector <8 x i16> %433, <8 x i16> %436, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %439 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %437, <8 x i16> %429) #6
  %440 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %438, <8 x i16> %430) #6
  %441 = lshr <4 x i32> %439, <i32 6, i32 6, i32 6, i32 6>
  %442 = lshr <4 x i32> %440, <i32 6, i32 6, i32 6, i32 6>
  %443 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %441, <4 x i32> %442) #6
  %444 = add <8 x i16> %443, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %445 = ashr <8 x i16> %444, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %446 = getelementptr inbounds i8, i8* %403, i64 %405
  %447 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %445, <8 x i16> undef) #6
  %448 = bitcast <16 x i8> %447 to <2 x i64>
  %449 = extractelement <2 x i64> %448, i32 0
  %450 = bitcast i8* %446 to i64*
  store i64 %449, i64* %450, align 1
  %451 = add nuw nsw i64 %405, 8
  %452 = icmp slt i64 %451, %12
  br i1 %452, label %404, label %453

453:                                              ; preds = %404
  %454 = getelementptr inbounds i8, i8* %403, i64 %8
  %455 = getelementptr inbounds i16, i16* %402, i64 %12
  %456 = getelementptr inbounds i16, i16* %401, i64 %12
  %457 = getelementptr inbounds i8, i8* %400, i64 %15
  %458 = add nuw nsw i32 %399, 1
  %459 = icmp slt i32 %458, %6
  br i1 %459, label %398, label %460

460:                                              ; preds = %453, %146, %23
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi0ELi0EEEvPKhPhlS5_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #3 {
  %8 = icmp eq i32 %5, 4
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = sext i32 %5 to i64
  br label %289

11:                                               ; preds = %7
  %12 = icmp eq i32 %6, 4
  br i1 %12, label %18, label %13

13:                                               ; preds = %11
  %14 = shl i64 %4, 1
  %15 = shl i64 %2, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %4, 2
  br label %106

18:                                               ; preds = %11
  %19 = bitcast i8* %3 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %3, i64 %4
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = insertelement <4 x i32> undef, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %26, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <4 x i32> %21 to <16 x i8>
  %29 = or <16 x i8> %27, %28
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = shl i64 %4, 1
  %33 = getelementptr inbounds i8, i8* %3, i64 %32
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %33, i64 %4
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = insertelement <4 x i32> undef, i32 %39, i32 0
  %41 = bitcast <4 x i32> %40 to <16 x i8>
  %42 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %41, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = bitcast <4 x i32> %36 to <16 x i8>
  %44 = or <16 x i8> %42, %43
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %46 = zext <8 x i8> %45 to <8 x i16>
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %31, <8 x i16> %46) #6
  %48 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %47
  %49 = shufflevector <16 x i8> %48, <16 x i8> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = bitcast i8* %0 to i64*
  %51 = load i64, i64* %50, align 1
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast i8* %1 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %54, i32 0
  %56 = getelementptr inbounds i8, i8* %1, i64 %2
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 1
  %59 = insertelement <4 x i32> undef, i32 %58, i32 0
  %60 = bitcast <4 x i32> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %60, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = bitcast <2 x i64> %52 to <16 x i8>
  %63 = bitcast <4 x i32> %55 to <16 x i8>
  %64 = or <16 x i8> %61, %63
  %65 = shufflevector <16 x i8> %62, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %49) #6
  %67 = lshr <8 x i16> %66, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %68 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %67, <8 x i16> zeroinitializer) #6
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %68) #6
  %70 = bitcast <16 x i8> %69 to <4 x i32>
  %71 = extractelement <4 x i32> %70, i32 0
  store i32 %71, i32* %53, align 1
  %72 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <4 x i32>
  %74 = extractelement <4 x i32> %73, i32 0
  store i32 %74, i32* %57, align 1
  %75 = getelementptr inbounds i8, i8* %0, i64 8
  %76 = shl i64 %2, 1
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  %78 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %79 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %78
  %80 = shufflevector <16 x i8> %79, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = bitcast i8* %75 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast i8* %77 to i32*
  %85 = load i32, i32* %84, align 1
  %86 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %85, i32 0
  %87 = getelementptr inbounds i8, i8* %77, i64 %2
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 1
  %90 = insertelement <4 x i32> undef, i32 %89, i32 0
  %91 = bitcast <4 x i32> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %91, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = bitcast <2 x i64> %83 to <16 x i8>
  %94 = bitcast <4 x i32> %86 to <16 x i8>
  %95 = or <16 x i8> %92, %94
  %96 = shufflevector <16 x i8> %93, <16 x i8> %95, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %96, <16 x i8> %80) #6
  %98 = lshr <8 x i16> %97, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %99 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %98, <8 x i16> zeroinitializer) #6
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %99, <8 x i16> %99) #6
  %101 = bitcast <16 x i8> %100 to <4 x i32>
  %102 = extractelement <4 x i32> %101, i32 0
  store i32 %102, i32* %84, align 1
  %103 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = extractelement <4 x i32> %104, i32 0
  store i32 %105, i32* %88, align 1
  br label %328

106:                                              ; preds = %106, %13
  %107 = phi i8* [ %285, %106 ], [ %1, %13 ]
  %108 = phi i8* [ %284, %106 ], [ %0, %13 ]
  %109 = phi i8* [ %286, %106 ], [ %3, %13 ]
  %110 = phi i32 [ %287, %106 ], [ 0, %13 ]
  %111 = bitcast i8* %109 to i32*
  %112 = load i32, i32* %111, align 1
  %113 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %112, i32 0
  %114 = getelementptr inbounds i8, i8* %109, i64 %4
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 1
  %117 = insertelement <4 x i32> undef, i32 %116, i32 0
  %118 = bitcast <4 x i32> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %118, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <4 x i32> %113 to <16 x i8>
  %121 = or <16 x i8> %119, %120
  %122 = shufflevector <16 x i8> %121, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %123 = zext <8 x i8> %122 to <8 x i16>
  %124 = getelementptr inbounds i8, i8* %109, i64 %14
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 1
  %127 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %124, i64 %4
  %129 = bitcast i8* %128 to i32*
  %130 = load i32, i32* %129, align 1
  %131 = insertelement <4 x i32> undef, i32 %130, i32 0
  %132 = bitcast <4 x i32> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %132, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <4 x i32> %127 to <16 x i8>
  %135 = or <16 x i8> %133, %134
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %137 = zext <8 x i8> %136 to <8 x i16>
  %138 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %137) #6
  %139 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %138
  %140 = shufflevector <16 x i8> %139, <16 x i8> %138, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = bitcast i8* %108 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = bitcast i8* %107 to i32*
  %145 = load i32, i32* %144, align 1
  %146 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %145, i32 0
  %147 = getelementptr inbounds i8, i8* %107, i64 %2
  %148 = bitcast i8* %147 to i32*
  %149 = load i32, i32* %148, align 1
  %150 = insertelement <4 x i32> undef, i32 %149, i32 0
  %151 = bitcast <4 x i32> %150 to <16 x i8>
  %152 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %151, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = bitcast <2 x i64> %143 to <16 x i8>
  %154 = bitcast <4 x i32> %146 to <16 x i8>
  %155 = or <16 x i8> %152, %154
  %156 = shufflevector <16 x i8> %153, <16 x i8> %155, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %156, <16 x i8> %140) #6
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #6
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %159, <8 x i16> %159) #6
  %161 = bitcast <16 x i8> %160 to <4 x i32>
  %162 = extractelement <4 x i32> %161, i32 0
  store i32 %162, i32* %144, align 1
  %163 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = bitcast <16 x i8> %163 to <4 x i32>
  %165 = extractelement <4 x i32> %164, i32 0
  store i32 %165, i32* %148, align 1
  %166 = getelementptr inbounds i8, i8* %108, i64 8
  %167 = getelementptr inbounds i8, i8* %107, i64 %15
  %168 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %169 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %168
  %170 = shufflevector <16 x i8> %169, <16 x i8> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %171 = bitcast i8* %166 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> undef, i64 %172, i32 0
  %174 = bitcast i8* %167 to i32*
  %175 = load i32, i32* %174, align 1
  %176 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %175, i32 0
  %177 = getelementptr inbounds i8, i8* %167, i64 %2
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = bitcast <4 x i32> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %181, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <2 x i64> %173 to <16 x i8>
  %184 = bitcast <4 x i32> %176 to <16 x i8>
  %185 = or <16 x i8> %182, %184
  %186 = shufflevector <16 x i8> %183, <16 x i8> %185, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %186, <16 x i8> %170) #6
  %188 = lshr <8 x i16> %187, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %189 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %188, <8 x i16> zeroinitializer) #6
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %189, <8 x i16> %189) #6
  %191 = bitcast <16 x i8> %190 to <4 x i32>
  %192 = extractelement <4 x i32> %191, i32 0
  store i32 %192, i32* %174, align 1
  %193 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = bitcast <16 x i8> %193 to <4 x i32>
  %195 = extractelement <4 x i32> %194, i32 0
  store i32 %195, i32* %178, align 1
  %196 = getelementptr inbounds i8, i8* %108, i64 16
  %197 = getelementptr inbounds i8, i8* %107, i64 %16
  %198 = getelementptr inbounds i8, i8* %109, i64 %17
  %199 = bitcast i8* %198 to i32*
  %200 = load i32, i32* %199, align 1
  %201 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %200, i32 0
  %202 = getelementptr inbounds i8, i8* %198, i64 %4
  %203 = bitcast i8* %202 to i32*
  %204 = load i32, i32* %203, align 1
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = bitcast <4 x i32> %205 to <16 x i8>
  %207 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %206, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %208 = bitcast <4 x i32> %201 to <16 x i8>
  %209 = or <16 x i8> %207, %208
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %211 = zext <8 x i8> %210 to <8 x i16>
  %212 = getelementptr inbounds i8, i8* %198, i64 %14
  %213 = bitcast i8* %212 to i32*
  %214 = load i32, i32* %213, align 1
  %215 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %214, i32 0
  %216 = getelementptr inbounds i8, i8* %212, i64 %4
  %217 = bitcast i8* %216 to i32*
  %218 = load i32, i32* %217, align 1
  %219 = insertelement <4 x i32> undef, i32 %218, i32 0
  %220 = bitcast <4 x i32> %219 to <16 x i8>
  %221 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %220, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %222 = bitcast <4 x i32> %215 to <16 x i8>
  %223 = or <16 x i8> %221, %222
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %225 = zext <8 x i8> %224 to <8 x i16>
  %226 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %211, <8 x i16> %225) #6
  %227 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %226
  %228 = shufflevector <16 x i8> %227, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = bitcast i8* %196 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = insertelement <2 x i64> undef, i64 %230, i32 0
  %232 = bitcast i8* %197 to i32*
  %233 = load i32, i32* %232, align 1
  %234 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %233, i32 0
  %235 = getelementptr inbounds i8, i8* %197, i64 %2
  %236 = bitcast i8* %235 to i32*
  %237 = load i32, i32* %236, align 1
  %238 = insertelement <4 x i32> undef, i32 %237, i32 0
  %239 = bitcast <4 x i32> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %239, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %241 = bitcast <2 x i64> %231 to <16 x i8>
  %242 = bitcast <4 x i32> %234 to <16 x i8>
  %243 = or <16 x i8> %240, %242
  %244 = shufflevector <16 x i8> %241, <16 x i8> %243, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %245 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %244, <16 x i8> %228) #6
  %246 = lshr <8 x i16> %245, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %247 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %246, <8 x i16> zeroinitializer) #6
  %248 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %247, <8 x i16> %247) #6
  %249 = bitcast <16 x i8> %248 to <4 x i32>
  %250 = extractelement <4 x i32> %249, i32 0
  store i32 %250, i32* %232, align 1
  %251 = shufflevector <16 x i8> %248, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  store i32 %253, i32* %236, align 1
  %254 = getelementptr inbounds i8, i8* %108, i64 24
  %255 = getelementptr inbounds i8, i8* %197, i64 %15
  %256 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %257 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %256
  %258 = shufflevector <16 x i8> %257, <16 x i8> %256, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %259 = bitcast i8* %254 to i64*
  %260 = load i64, i64* %259, align 1
  %261 = insertelement <2 x i64> undef, i64 %260, i32 0
  %262 = bitcast i8* %255 to i32*
  %263 = load i32, i32* %262, align 1
  %264 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %263, i32 0
  %265 = getelementptr inbounds i8, i8* %255, i64 %2
  %266 = bitcast i8* %265 to i32*
  %267 = load i32, i32* %266, align 1
  %268 = insertelement <4 x i32> undef, i32 %267, i32 0
  %269 = bitcast <4 x i32> %268 to <16 x i8>
  %270 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %269, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %271 = bitcast <2 x i64> %261 to <16 x i8>
  %272 = bitcast <4 x i32> %264 to <16 x i8>
  %273 = or <16 x i8> %270, %272
  %274 = shufflevector <16 x i8> %271, <16 x i8> %273, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %275 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %274, <16 x i8> %258) #6
  %276 = lshr <8 x i16> %275, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %277 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %276, <8 x i16> zeroinitializer) #6
  %278 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %277, <8 x i16> %277) #6
  %279 = bitcast <16 x i8> %278 to <4 x i32>
  %280 = extractelement <4 x i32> %279, i32 0
  store i32 %280, i32* %262, align 1
  %281 = shufflevector <16 x i8> %278, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = bitcast <16 x i8> %281 to <4 x i32>
  %283 = extractelement <4 x i32> %282, i32 0
  store i32 %283, i32* %266, align 1
  %284 = getelementptr inbounds i8, i8* %108, i64 32
  %285 = getelementptr inbounds i8, i8* %197, i64 %16
  %286 = getelementptr inbounds i8, i8* %198, i64 %17
  %287 = add nuw nsw i32 %110, 8
  %288 = icmp slt i32 %287, %6
  br i1 %288, label %106, label %328

289:                                              ; preds = %9, %322
  %290 = phi i32 [ %326, %322 ], [ 0, %9 ]
  %291 = phi i8* [ %325, %322 ], [ %3, %9 ]
  %292 = phi i8* [ %324, %322 ], [ %1, %9 ]
  %293 = phi i8* [ %323, %322 ], [ %0, %9 ]
  br label %294

294:                                              ; preds = %294, %289
  %295 = phi i64 [ %320, %294 ], [ 0, %289 ]
  %296 = getelementptr inbounds i8, i8* %291, i64 %295
  %297 = bitcast i8* %296 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %298, i32 0
  %300 = bitcast <2 x i64> %299 to <16 x i8>
  %301 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %300
  %302 = shufflevector <16 x i8> %301, <16 x i8> %300, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %303 = getelementptr inbounds i8, i8* %293, i64 %295
  %304 = bitcast i8* %303 to i64*
  %305 = load i64, i64* %304, align 1
  %306 = insertelement <2 x i64> undef, i64 %305, i32 0
  %307 = getelementptr inbounds i8, i8* %292, i64 %295
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308, align 1
  %310 = insertelement <2 x i64> undef, i64 %309, i32 0
  %311 = bitcast <2 x i64> %306 to <16 x i8>
  %312 = bitcast <2 x i64> %310 to <16 x i8>
  %313 = shufflevector <16 x i8> %311, <16 x i8> %312, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %314 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %313, <16 x i8> %302) #6
  %315 = lshr <8 x i16> %314, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %316 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %315, <8 x i16> zeroinitializer) #6
  %317 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %316, <8 x i16> undef) #6
  %318 = bitcast <16 x i8> %317 to <2 x i64>
  %319 = extractelement <2 x i64> %318, i32 0
  store i64 %319, i64* %308, align 1
  %320 = add nuw nsw i64 %295, 8
  %321 = icmp slt i64 %320, %10
  br i1 %321, label %294, label %322

322:                                              ; preds = %294
  %323 = getelementptr inbounds i8, i8* %293, i64 %10
  %324 = getelementptr inbounds i8, i8* %292, i64 %2
  %325 = getelementptr inbounds i8, i8* %291, i64 %4
  %326 = add nuw nsw i32 %290, 1
  %327 = icmp slt i32 %326, %6
  br i1 %327, label %289, label %328

328:                                              ; preds = %322, %106, %18
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi1ELi0EEEvPKhPhlS5_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #3 {
  %8 = icmp eq i32 %5, 4
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = sext i32 %5 to i64
  br label %301

11:                                               ; preds = %7
  %12 = icmp eq i32 %6, 4
  br i1 %12, label %18, label %13

13:                                               ; preds = %11
  %14 = shl i64 %4, 1
  %15 = shl i64 %2, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %4, 2
  br label %110

18:                                               ; preds = %11
  %19 = bitcast i8* %3 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = zext <8 x i8> %23 to <8 x i16>
  %25 = getelementptr inbounds i8, i8* %3, i64 %4
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = bitcast <2 x i64> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %24, <8 x i16> %31) #6
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #6
  %34 = shl i64 %4, 1
  %35 = getelementptr inbounds i8, i8* %3, i64 %34
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %41 = zext <8 x i8> %40 to <8 x i16>
  %42 = getelementptr inbounds i8, i8* %35, i64 %4
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = zext <8 x i8> %47 to <8 x i16>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %41, <8 x i16> %48) #6
  %50 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %49, <8 x i16> zeroinitializer) #6
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %50) #6
  %52 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %51
  %53 = shufflevector <16 x i8> %52, <16 x i8> %51, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast i8* %0 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = insertelement <2 x i64> undef, i64 %55, i32 0
  %57 = bitcast i8* %1 to i32*
  %58 = load i32, i32* %57, align 1
  %59 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %58, i32 0
  %60 = getelementptr inbounds i8, i8* %1, i64 %2
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = insertelement <4 x i32> undef, i32 %62, i32 0
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %64, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <2 x i64> %56 to <16 x i8>
  %67 = bitcast <4 x i32> %59 to <16 x i8>
  %68 = or <16 x i8> %65, %67
  %69 = shufflevector <16 x i8> %66, <16 x i8> %68, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %69, <16 x i8> %53) #6
  %71 = lshr <8 x i16> %70, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %72 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %71, <8 x i16> zeroinitializer) #6
  %73 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %72, <8 x i16> %72) #6
  %74 = bitcast <16 x i8> %73 to <4 x i32>
  %75 = extractelement <4 x i32> %74, i32 0
  store i32 %75, i32* %57, align 1
  %76 = shufflevector <16 x i8> %73, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %77 = bitcast <16 x i8> %76 to <4 x i32>
  %78 = extractelement <4 x i32> %77, i32 0
  store i32 %78, i32* %61, align 1
  %79 = getelementptr inbounds i8, i8* %0, i64 8
  %80 = shl i64 %2, 1
  %81 = getelementptr inbounds i8, i8* %1, i64 %80
  %82 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %83 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %82
  %84 = shufflevector <16 x i8> %83, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = bitcast i8* %79 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = insertelement <2 x i64> undef, i64 %86, i32 0
  %88 = bitcast i8* %81 to i32*
  %89 = load i32, i32* %88, align 1
  %90 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %89, i32 0
  %91 = getelementptr inbounds i8, i8* %81, i64 %2
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = insertelement <4 x i32> undef, i32 %93, i32 0
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %95, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = bitcast <2 x i64> %87 to <16 x i8>
  %98 = bitcast <4 x i32> %90 to <16 x i8>
  %99 = or <16 x i8> %96, %98
  %100 = shufflevector <16 x i8> %97, <16 x i8> %99, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %100, <16 x i8> %84) #6
  %102 = lshr <8 x i16> %101, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %103 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %102, <8 x i16> zeroinitializer) #6
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %103, <8 x i16> %103) #6
  %105 = bitcast <16 x i8> %104 to <4 x i32>
  %106 = extractelement <4 x i32> %105, i32 0
  store i32 %106, i32* %88, align 1
  %107 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = bitcast <16 x i8> %107 to <4 x i32>
  %109 = extractelement <4 x i32> %108, i32 0
  store i32 %109, i32* %92, align 1
  br label %348

110:                                              ; preds = %110, %13
  %111 = phi i8* [ %297, %110 ], [ %1, %13 ]
  %112 = phi i8* [ %296, %110 ], [ %0, %13 ]
  %113 = phi i8* [ %298, %110 ], [ %3, %13 ]
  %114 = phi i32 [ %299, %110 ], [ 0, %13 ]
  %115 = bitcast i8* %113 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = insertelement <2 x i64> undef, i64 %116, i32 0
  %118 = bitcast <2 x i64> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %120 = zext <8 x i8> %119 to <8 x i16>
  %121 = getelementptr inbounds i8, i8* %113, i64 %4
  %122 = bitcast i8* %121 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = insertelement <2 x i64> undef, i64 %123, i32 0
  %125 = bitcast <2 x i64> %124 to <16 x i8>
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %127 = zext <8 x i8> %126 to <8 x i16>
  %128 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %120, <8 x i16> %127) #6
  %129 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %128, <8 x i16> zeroinitializer) #6
  %130 = getelementptr inbounds i8, i8* %113, i64 %14
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> undef, i64 %132, i32 0
  %134 = bitcast <2 x i64> %133 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %136 = zext <8 x i8> %135 to <8 x i16>
  %137 = getelementptr inbounds i8, i8* %130, i64 %4
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %143 = zext <8 x i8> %142 to <8 x i16>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %136, <8 x i16> %143) #6
  %145 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %144, <8 x i16> zeroinitializer) #6
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %145) #6
  %147 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %146
  %148 = shufflevector <16 x i8> %147, <16 x i8> %146, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast i8* %112 to i64*
  %150 = load i64, i64* %149, align 1
  %151 = insertelement <2 x i64> undef, i64 %150, i32 0
  %152 = bitcast i8* %111 to i32*
  %153 = load i32, i32* %152, align 1
  %154 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %153, i32 0
  %155 = getelementptr inbounds i8, i8* %111, i64 %2
  %156 = bitcast i8* %155 to i32*
  %157 = load i32, i32* %156, align 1
  %158 = insertelement <4 x i32> undef, i32 %157, i32 0
  %159 = bitcast <4 x i32> %158 to <16 x i8>
  %160 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %159, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <2 x i64> %151 to <16 x i8>
  %162 = bitcast <4 x i32> %154 to <16 x i8>
  %163 = or <16 x i8> %160, %162
  %164 = shufflevector <16 x i8> %161, <16 x i8> %163, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %164, <16 x i8> %148) #6
  %166 = lshr <8 x i16> %165, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %167 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %166, <8 x i16> zeroinitializer) #6
  %168 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %167, <8 x i16> %167) #6
  %169 = bitcast <16 x i8> %168 to <4 x i32>
  %170 = extractelement <4 x i32> %169, i32 0
  store i32 %170, i32* %152, align 1
  %171 = shufflevector <16 x i8> %168, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = extractelement <4 x i32> %172, i32 0
  store i32 %173, i32* %156, align 1
  %174 = getelementptr inbounds i8, i8* %112, i64 8
  %175 = getelementptr inbounds i8, i8* %111, i64 %15
  %176 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %177 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %176
  %178 = shufflevector <16 x i8> %177, <16 x i8> %176, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %179 = bitcast i8* %174 to i64*
  %180 = load i64, i64* %179, align 1
  %181 = insertelement <2 x i64> undef, i64 %180, i32 0
  %182 = bitcast i8* %175 to i32*
  %183 = load i32, i32* %182, align 1
  %184 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %183, i32 0
  %185 = getelementptr inbounds i8, i8* %175, i64 %2
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = insertelement <4 x i32> undef, i32 %187, i32 0
  %189 = bitcast <4 x i32> %188 to <16 x i8>
  %190 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %189, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = bitcast <2 x i64> %181 to <16 x i8>
  %192 = bitcast <4 x i32> %184 to <16 x i8>
  %193 = or <16 x i8> %190, %192
  %194 = shufflevector <16 x i8> %191, <16 x i8> %193, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %195 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %194, <16 x i8> %178) #6
  %196 = lshr <8 x i16> %195, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %197 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %196, <8 x i16> zeroinitializer) #6
  %198 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %197, <8 x i16> %197) #6
  %199 = bitcast <16 x i8> %198 to <4 x i32>
  %200 = extractelement <4 x i32> %199, i32 0
  store i32 %200, i32* %182, align 1
  %201 = shufflevector <16 x i8> %198, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = bitcast <16 x i8> %201 to <4 x i32>
  %203 = extractelement <4 x i32> %202, i32 0
  store i32 %203, i32* %186, align 1
  %204 = getelementptr inbounds i8, i8* %112, i64 16
  %205 = getelementptr inbounds i8, i8* %111, i64 %16
  %206 = getelementptr inbounds i8, i8* %113, i64 %17
  %207 = bitcast i8* %206 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = insertelement <2 x i64> undef, i64 %208, i32 0
  %210 = bitcast <2 x i64> %209 to <16 x i8>
  %211 = shufflevector <16 x i8> %210, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %212 = zext <8 x i8> %211 to <8 x i16>
  %213 = getelementptr inbounds i8, i8* %206, i64 %4
  %214 = bitcast i8* %213 to i64*
  %215 = load i64, i64* %214, align 1
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %216 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %219 = zext <8 x i8> %218 to <8 x i16>
  %220 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %212, <8 x i16> %219) #6
  %221 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %220, <8 x i16> zeroinitializer) #6
  %222 = getelementptr inbounds i8, i8* %206, i64 %14
  %223 = bitcast i8* %222 to i64*
  %224 = load i64, i64* %223, align 1
  %225 = insertelement <2 x i64> undef, i64 %224, i32 0
  %226 = bitcast <2 x i64> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = getelementptr inbounds i8, i8* %222, i64 %4
  %230 = bitcast i8* %229 to i64*
  %231 = load i64, i64* %230, align 1
  %232 = insertelement <2 x i64> undef, i64 %231, i32 0
  %233 = bitcast <2 x i64> %232 to <16 x i8>
  %234 = shufflevector <16 x i8> %233, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %235 = zext <8 x i8> %234 to <8 x i16>
  %236 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %228, <8 x i16> %235) #6
  %237 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %236, <8 x i16> zeroinitializer) #6
  %238 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %221, <8 x i16> %237) #6
  %239 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %238
  %240 = shufflevector <16 x i8> %239, <16 x i8> %238, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %241 = bitcast i8* %204 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <2 x i64> undef, i64 %242, i32 0
  %244 = bitcast i8* %205 to i32*
  %245 = load i32, i32* %244, align 1
  %246 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %245, i32 0
  %247 = getelementptr inbounds i8, i8* %205, i64 %2
  %248 = bitcast i8* %247 to i32*
  %249 = load i32, i32* %248, align 1
  %250 = insertelement <4 x i32> undef, i32 %249, i32 0
  %251 = bitcast <4 x i32> %250 to <16 x i8>
  %252 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %251, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %253 = bitcast <2 x i64> %243 to <16 x i8>
  %254 = bitcast <4 x i32> %246 to <16 x i8>
  %255 = or <16 x i8> %252, %254
  %256 = shufflevector <16 x i8> %253, <16 x i8> %255, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %257 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %256, <16 x i8> %240) #6
  %258 = lshr <8 x i16> %257, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %259 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %258, <8 x i16> zeroinitializer) #6
  %260 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %259, <8 x i16> %259) #6
  %261 = bitcast <16 x i8> %260 to <4 x i32>
  %262 = extractelement <4 x i32> %261, i32 0
  store i32 %262, i32* %244, align 1
  %263 = shufflevector <16 x i8> %260, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %264 = bitcast <16 x i8> %263 to <4 x i32>
  %265 = extractelement <4 x i32> %264, i32 0
  store i32 %265, i32* %248, align 1
  %266 = getelementptr inbounds i8, i8* %112, i64 24
  %267 = getelementptr inbounds i8, i8* %205, i64 %15
  %268 = shufflevector <16 x i8> %238, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %269 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %268
  %270 = shufflevector <16 x i8> %269, <16 x i8> %268, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %271 = bitcast i8* %266 to i64*
  %272 = load i64, i64* %271, align 1
  %273 = insertelement <2 x i64> undef, i64 %272, i32 0
  %274 = bitcast i8* %267 to i32*
  %275 = load i32, i32* %274, align 1
  %276 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %275, i32 0
  %277 = getelementptr inbounds i8, i8* %267, i64 %2
  %278 = bitcast i8* %277 to i32*
  %279 = load i32, i32* %278, align 1
  %280 = insertelement <4 x i32> undef, i32 %279, i32 0
  %281 = bitcast <4 x i32> %280 to <16 x i8>
  %282 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %281, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %283 = bitcast <2 x i64> %273 to <16 x i8>
  %284 = bitcast <4 x i32> %276 to <16 x i8>
  %285 = or <16 x i8> %282, %284
  %286 = shufflevector <16 x i8> %283, <16 x i8> %285, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %286, <16 x i8> %270) #6
  %288 = lshr <8 x i16> %287, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %289 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %288, <8 x i16> zeroinitializer) #6
  %290 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %289, <8 x i16> %289) #6
  %291 = bitcast <16 x i8> %290 to <4 x i32>
  %292 = extractelement <4 x i32> %291, i32 0
  store i32 %292, i32* %274, align 1
  %293 = shufflevector <16 x i8> %290, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %294 = bitcast <16 x i8> %293 to <4 x i32>
  %295 = extractelement <4 x i32> %294, i32 0
  store i32 %295, i32* %278, align 1
  %296 = getelementptr inbounds i8, i8* %112, i64 32
  %297 = getelementptr inbounds i8, i8* %205, i64 %16
  %298 = getelementptr inbounds i8, i8* %206, i64 %17
  %299 = add nuw nsw i32 %114, 8
  %300 = icmp slt i32 %299, %6
  br i1 %300, label %110, label %348

301:                                              ; preds = %9, %342
  %302 = phi i32 [ %346, %342 ], [ 0, %9 ]
  %303 = phi i8* [ %345, %342 ], [ %3, %9 ]
  %304 = phi i8* [ %344, %342 ], [ %1, %9 ]
  %305 = phi i8* [ %343, %342 ], [ %0, %9 ]
  br label %306

306:                                              ; preds = %306, %301
  %307 = phi i64 [ %340, %306 ], [ 0, %301 ]
  %308 = trunc i64 %307 to i32
  %309 = shl i32 %308, 1
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %303, i64 %310
  %312 = bitcast i8* %311 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 1
  %314 = shufflevector <16 x i8> %313, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %315 = zext <8 x i8> %314 to <8 x i16>
  %316 = shufflevector <16 x i8> %313, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %317 = zext <8 x i8> %316 to <8 x i16>
  %318 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %315, <8 x i16> %317) #6
  %319 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %318, <8 x i16> zeroinitializer) #6
  %320 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %319, <8 x i16> %319) #6
  %321 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %320
  %322 = shufflevector <16 x i8> %321, <16 x i8> %320, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %323 = getelementptr inbounds i8, i8* %305, i64 %307
  %324 = bitcast i8* %323 to i64*
  %325 = load i64, i64* %324, align 1
  %326 = insertelement <2 x i64> undef, i64 %325, i32 0
  %327 = getelementptr inbounds i8, i8* %304, i64 %307
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %328, align 1
  %330 = insertelement <2 x i64> undef, i64 %329, i32 0
  %331 = bitcast <2 x i64> %326 to <16 x i8>
  %332 = bitcast <2 x i64> %330 to <16 x i8>
  %333 = shufflevector <16 x i8> %331, <16 x i8> %332, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %334 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %333, <16 x i8> %322) #6
  %335 = lshr <8 x i16> %334, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %336 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %335, <8 x i16> zeroinitializer) #6
  %337 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %336, <8 x i16> undef) #6
  %338 = bitcast <16 x i8> %337 to <2 x i64>
  %339 = extractelement <2 x i64> %338, i32 0
  store i64 %339, i64* %328, align 1
  %340 = add nuw nsw i64 %307, 8
  %341 = icmp slt i64 %340, %10
  br i1 %341, label %306, label %342

342:                                              ; preds = %306
  %343 = getelementptr inbounds i8, i8* %305, i64 %10
  %344 = getelementptr inbounds i8, i8* %304, i64 %2
  %345 = getelementptr inbounds i8, i8* %303, i64 %4
  %346 = add nuw nsw i32 %302, 1
  %347 = icmp slt i32 %346, %6
  br i1 %347, label %301, label %348

348:                                              ; preds = %342, %110, %18
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128InterIntraMaskBlend8bpp_SSE4ILi1ELi1EEEvPKhPhlS5_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #3 {
  %8 = icmp eq i32 %5, 4
  br i1 %8, label %12, label %9

9:                                                ; preds = %7
  %10 = sext i32 %5 to i64
  %11 = shl i64 %4, 1
  br label %408

12:                                               ; preds = %7
  %13 = icmp eq i32 %6, 4
  br i1 %13, label %21, label %14

14:                                               ; preds = %12
  %15 = shl i64 %4, 1
  %16 = mul nsw i64 %4, 3
  %17 = shl i64 %4, 2
  %18 = shl i64 %2, 1
  %19 = shl i64 %2, 2
  %20 = shl i64 %4, 3
  br label %149

21:                                               ; preds = %12
  %22 = bitcast i8* %3 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = shl i64 %4, 1
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %27, <8 x i16> %35) #6
  %37 = getelementptr inbounds i8, i8* %3, i64 %4
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = bitcast <2 x i64> %40 to <16 x i8>
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %43 = zext <8 x i8> %42 to <8 x i16>
  %44 = mul nsw i64 %4, 3
  %45 = getelementptr inbounds i8, i8* %3, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = bitcast <2 x i64> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %43, <8 x i16> %51) #6
  %53 = add <8 x i16> %52, %36
  %54 = lshr <8 x i16> %53, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %55 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %54, <8 x i16> zeroinitializer) #6
  %56 = shl i64 %4, 2
  %57 = getelementptr inbounds i8, i8* %3, i64 %56
  %58 = bitcast i8* %57 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = bitcast <2 x i64> %60 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %63 = zext <8 x i8> %62 to <8 x i16>
  %64 = getelementptr inbounds i8, i8* %57, i64 %28
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %70 = zext <8 x i8> %69 to <8 x i16>
  %71 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %63, <8 x i16> %70) #6
  %72 = getelementptr inbounds i8, i8* %57, i64 %4
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %78 = zext <8 x i8> %77 to <8 x i16>
  %79 = getelementptr inbounds i8, i8* %57, i64 %44
  %80 = bitcast i8* %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %85 = zext <8 x i8> %84 to <8 x i16>
  %86 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %78, <8 x i16> %85) #6
  %87 = add <8 x i16> %86, %71
  %88 = lshr <8 x i16> %87, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %89 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %88, <8 x i16> zeroinitializer) #6
  %90 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %89) #6
  %91 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %90
  %92 = shufflevector <16 x i8> %91, <16 x i8> %90, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = bitcast i8* %0 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> undef, i64 %94, i32 0
  %96 = bitcast i8* %1 to i32*
  %97 = load i32, i32* %96, align 1
  %98 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %97, i32 0
  %99 = getelementptr inbounds i8, i8* %1, i64 %2
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 1
  %102 = insertelement <4 x i32> undef, i32 %101, i32 0
  %103 = bitcast <4 x i32> %102 to <16 x i8>
  %104 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %103, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = bitcast <2 x i64> %95 to <16 x i8>
  %106 = bitcast <4 x i32> %98 to <16 x i8>
  %107 = or <16 x i8> %104, %106
  %108 = shufflevector <16 x i8> %105, <16 x i8> %107, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %108, <16 x i8> %92) #6
  %110 = lshr <8 x i16> %109, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %111 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %110, <8 x i16> zeroinitializer) #6
  %112 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %111) #6
  %113 = bitcast <16 x i8> %112 to <4 x i32>
  %114 = extractelement <4 x i32> %113, i32 0
  store i32 %114, i32* %96, align 1
  %115 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = bitcast <16 x i8> %115 to <4 x i32>
  %117 = extractelement <4 x i32> %116, i32 0
  store i32 %117, i32* %100, align 1
  %118 = getelementptr inbounds i8, i8* %0, i64 8
  %119 = shl i64 %2, 1
  %120 = getelementptr inbounds i8, i8* %1, i64 %119
  %121 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %122 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %121
  %123 = shufflevector <16 x i8> %122, <16 x i8> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %124 = bitcast i8* %118 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = bitcast i8* %120 to i32*
  %128 = load i32, i32* %127, align 1
  %129 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %128, i32 0
  %130 = getelementptr inbounds i8, i8* %120, i64 %2
  %131 = bitcast i8* %130 to i32*
  %132 = load i32, i32* %131, align 1
  %133 = insertelement <4 x i32> undef, i32 %132, i32 0
  %134 = bitcast <4 x i32> %133 to <16 x i8>
  %135 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %134, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <2 x i64> %126 to <16 x i8>
  %137 = bitcast <4 x i32> %129 to <16 x i8>
  %138 = or <16 x i8> %135, %137
  %139 = shufflevector <16 x i8> %136, <16 x i8> %138, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %139, <16 x i8> %123) #6
  %141 = lshr <8 x i16> %140, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %142 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %141, <8 x i16> zeroinitializer) #6
  %143 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %142) #6
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = extractelement <4 x i32> %144, i32 0
  store i32 %145, i32* %127, align 1
  %146 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  store i32 %148, i32* %131, align 1
  br label %465

149:                                              ; preds = %149, %14
  %150 = phi i8* [ %404, %149 ], [ %1, %14 ]
  %151 = phi i8* [ %403, %149 ], [ %0, %14 ]
  %152 = phi i8* [ %405, %149 ], [ %3, %14 ]
  %153 = phi i32 [ %406, %149 ], [ 0, %14 ]
  %154 = bitcast i8* %152 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast <2 x i64> %156 to <16 x i8>
  %158 = shufflevector <16 x i8> %157, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %159 = zext <8 x i8> %158 to <8 x i16>
  %160 = getelementptr inbounds i8, i8* %152, i64 %15
  %161 = bitcast i8* %160 to i64*
  %162 = load i64, i64* %161, align 1
  %163 = insertelement <2 x i64> undef, i64 %162, i32 0
  %164 = bitcast <2 x i64> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %166 = zext <8 x i8> %165 to <8 x i16>
  %167 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %159, <8 x i16> %166) #6
  %168 = getelementptr inbounds i8, i8* %152, i64 %4
  %169 = bitcast i8* %168 to i64*
  %170 = load i64, i64* %169, align 1
  %171 = insertelement <2 x i64> undef, i64 %170, i32 0
  %172 = bitcast <2 x i64> %171 to <16 x i8>
  %173 = shufflevector <16 x i8> %172, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %174 = zext <8 x i8> %173 to <8 x i16>
  %175 = getelementptr inbounds i8, i8* %152, i64 %16
  %176 = bitcast i8* %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = insertelement <2 x i64> undef, i64 %177, i32 0
  %179 = bitcast <2 x i64> %178 to <16 x i8>
  %180 = shufflevector <16 x i8> %179, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %181 = zext <8 x i8> %180 to <8 x i16>
  %182 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %174, <8 x i16> %181) #6
  %183 = add <8 x i16> %182, %167
  %184 = lshr <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %184, <8 x i16> zeroinitializer) #6
  %186 = getelementptr inbounds i8, i8* %152, i64 %17
  %187 = bitcast i8* %186 to i64*
  %188 = load i64, i64* %187, align 1
  %189 = insertelement <2 x i64> undef, i64 %188, i32 0
  %190 = bitcast <2 x i64> %189 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %192 = zext <8 x i8> %191 to <8 x i16>
  %193 = getelementptr inbounds i8, i8* %186, i64 %15
  %194 = bitcast i8* %193 to i64*
  %195 = load i64, i64* %194, align 1
  %196 = insertelement <2 x i64> undef, i64 %195, i32 0
  %197 = bitcast <2 x i64> %196 to <16 x i8>
  %198 = shufflevector <16 x i8> %197, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %199 = zext <8 x i8> %198 to <8 x i16>
  %200 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %192, <8 x i16> %199) #6
  %201 = getelementptr inbounds i8, i8* %186, i64 %4
  %202 = bitcast i8* %201 to i64*
  %203 = load i64, i64* %202, align 1
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = bitcast <2 x i64> %204 to <16 x i8>
  %206 = shufflevector <16 x i8> %205, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %207 = zext <8 x i8> %206 to <8 x i16>
  %208 = getelementptr inbounds i8, i8* %186, i64 %16
  %209 = bitcast i8* %208 to i64*
  %210 = load i64, i64* %209, align 1
  %211 = insertelement <2 x i64> undef, i64 %210, i32 0
  %212 = bitcast <2 x i64> %211 to <16 x i8>
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %214 = zext <8 x i8> %213 to <8 x i16>
  %215 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %207, <8 x i16> %214) #6
  %216 = add <8 x i16> %215, %200
  %217 = lshr <8 x i16> %216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %218 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %217, <8 x i16> zeroinitializer) #6
  %219 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %218) #6
  %220 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %219
  %221 = shufflevector <16 x i8> %220, <16 x i8> %219, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %222 = bitcast i8* %151 to i64*
  %223 = load i64, i64* %222, align 1
  %224 = insertelement <2 x i64> undef, i64 %223, i32 0
  %225 = bitcast i8* %150 to i32*
  %226 = load i32, i32* %225, align 1
  %227 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %226, i32 0
  %228 = getelementptr inbounds i8, i8* %150, i64 %2
  %229 = bitcast i8* %228 to i32*
  %230 = load i32, i32* %229, align 1
  %231 = insertelement <4 x i32> undef, i32 %230, i32 0
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %232, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = bitcast <2 x i64> %224 to <16 x i8>
  %235 = bitcast <4 x i32> %227 to <16 x i8>
  %236 = or <16 x i8> %233, %235
  %237 = shufflevector <16 x i8> %234, <16 x i8> %236, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %237, <16 x i8> %221) #6
  %239 = lshr <8 x i16> %238, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %240 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %239, <8 x i16> zeroinitializer) #6
  %241 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %240, <8 x i16> %240) #6
  %242 = bitcast <16 x i8> %241 to <4 x i32>
  %243 = extractelement <4 x i32> %242, i32 0
  store i32 %243, i32* %225, align 1
  %244 = shufflevector <16 x i8> %241, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %245 = bitcast <16 x i8> %244 to <4 x i32>
  %246 = extractelement <4 x i32> %245, i32 0
  store i32 %246, i32* %229, align 1
  %247 = getelementptr inbounds i8, i8* %151, i64 8
  %248 = getelementptr inbounds i8, i8* %150, i64 %18
  %249 = shufflevector <16 x i8> %219, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %250 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %249
  %251 = shufflevector <16 x i8> %250, <16 x i8> %249, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %252 = bitcast i8* %247 to i64*
  %253 = load i64, i64* %252, align 1
  %254 = insertelement <2 x i64> undef, i64 %253, i32 0
  %255 = bitcast i8* %248 to i32*
  %256 = load i32, i32* %255, align 1
  %257 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %256, i32 0
  %258 = getelementptr inbounds i8, i8* %248, i64 %2
  %259 = bitcast i8* %258 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = insertelement <4 x i32> undef, i32 %260, i32 0
  %262 = bitcast <4 x i32> %261 to <16 x i8>
  %263 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %262, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %264 = bitcast <2 x i64> %254 to <16 x i8>
  %265 = bitcast <4 x i32> %257 to <16 x i8>
  %266 = or <16 x i8> %263, %265
  %267 = shufflevector <16 x i8> %264, <16 x i8> %266, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %268 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> %251) #6
  %269 = lshr <8 x i16> %268, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %270 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %269, <8 x i16> zeroinitializer) #6
  %271 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %270, <8 x i16> %270) #6
  %272 = bitcast <16 x i8> %271 to <4 x i32>
  %273 = extractelement <4 x i32> %272, i32 0
  store i32 %273, i32* %255, align 1
  %274 = shufflevector <16 x i8> %271, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %275 = bitcast <16 x i8> %274 to <4 x i32>
  %276 = extractelement <4 x i32> %275, i32 0
  store i32 %276, i32* %259, align 1
  %277 = getelementptr inbounds i8, i8* %151, i64 16
  %278 = getelementptr inbounds i8, i8* %150, i64 %19
  %279 = getelementptr inbounds i8, i8* %152, i64 %20
  %280 = bitcast i8* %279 to i64*
  %281 = load i64, i64* %280, align 1
  %282 = insertelement <2 x i64> undef, i64 %281, i32 0
  %283 = bitcast <2 x i64> %282 to <16 x i8>
  %284 = shufflevector <16 x i8> %283, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %285 = zext <8 x i8> %284 to <8 x i16>
  %286 = getelementptr inbounds i8, i8* %279, i64 %15
  %287 = bitcast i8* %286 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = insertelement <2 x i64> undef, i64 %288, i32 0
  %290 = bitcast <2 x i64> %289 to <16 x i8>
  %291 = shufflevector <16 x i8> %290, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %292 = zext <8 x i8> %291 to <8 x i16>
  %293 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %285, <8 x i16> %292) #6
  %294 = getelementptr inbounds i8, i8* %279, i64 %4
  %295 = bitcast i8* %294 to i64*
  %296 = load i64, i64* %295, align 1
  %297 = insertelement <2 x i64> undef, i64 %296, i32 0
  %298 = bitcast <2 x i64> %297 to <16 x i8>
  %299 = shufflevector <16 x i8> %298, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %300 = zext <8 x i8> %299 to <8 x i16>
  %301 = getelementptr inbounds i8, i8* %279, i64 %16
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> undef, i64 %303, i32 0
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %307 = zext <8 x i8> %306 to <8 x i16>
  %308 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %300, <8 x i16> %307) #6
  %309 = add <8 x i16> %308, %293
  %310 = lshr <8 x i16> %309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %311 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %310, <8 x i16> zeroinitializer) #6
  %312 = getelementptr inbounds i8, i8* %279, i64 %17
  %313 = bitcast i8* %312 to i64*
  %314 = load i64, i64* %313, align 1
  %315 = insertelement <2 x i64> undef, i64 %314, i32 0
  %316 = bitcast <2 x i64> %315 to <16 x i8>
  %317 = shufflevector <16 x i8> %316, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %318 = zext <8 x i8> %317 to <8 x i16>
  %319 = getelementptr inbounds i8, i8* %312, i64 %15
  %320 = bitcast i8* %319 to i64*
  %321 = load i64, i64* %320, align 1
  %322 = insertelement <2 x i64> undef, i64 %321, i32 0
  %323 = bitcast <2 x i64> %322 to <16 x i8>
  %324 = shufflevector <16 x i8> %323, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %325 = zext <8 x i8> %324 to <8 x i16>
  %326 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %318, <8 x i16> %325) #6
  %327 = getelementptr inbounds i8, i8* %312, i64 %4
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %328, align 1
  %330 = insertelement <2 x i64> undef, i64 %329, i32 0
  %331 = bitcast <2 x i64> %330 to <16 x i8>
  %332 = shufflevector <16 x i8> %331, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %333 = zext <8 x i8> %332 to <8 x i16>
  %334 = getelementptr inbounds i8, i8* %312, i64 %16
  %335 = bitcast i8* %334 to i64*
  %336 = load i64, i64* %335, align 1
  %337 = insertelement <2 x i64> undef, i64 %336, i32 0
  %338 = bitcast <2 x i64> %337 to <16 x i8>
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %340 = zext <8 x i8> %339 to <8 x i16>
  %341 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %333, <8 x i16> %340) #6
  %342 = add <8 x i16> %341, %326
  %343 = lshr <8 x i16> %342, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %344 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %343, <8 x i16> zeroinitializer) #6
  %345 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %311, <8 x i16> %344) #6
  %346 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %345
  %347 = shufflevector <16 x i8> %346, <16 x i8> %345, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %348 = bitcast i8* %277 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = insertelement <2 x i64> undef, i64 %349, i32 0
  %351 = bitcast i8* %278 to i32*
  %352 = load i32, i32* %351, align 1
  %353 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %352, i32 0
  %354 = getelementptr inbounds i8, i8* %278, i64 %2
  %355 = bitcast i8* %354 to i32*
  %356 = load i32, i32* %355, align 1
  %357 = insertelement <4 x i32> undef, i32 %356, i32 0
  %358 = bitcast <4 x i32> %357 to <16 x i8>
  %359 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %358, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %360 = bitcast <2 x i64> %350 to <16 x i8>
  %361 = bitcast <4 x i32> %353 to <16 x i8>
  %362 = or <16 x i8> %359, %361
  %363 = shufflevector <16 x i8> %360, <16 x i8> %362, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %364 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %363, <16 x i8> %347) #6
  %365 = lshr <8 x i16> %364, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %366 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %365, <8 x i16> zeroinitializer) #6
  %367 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %366, <8 x i16> %366) #6
  %368 = bitcast <16 x i8> %367 to <4 x i32>
  %369 = extractelement <4 x i32> %368, i32 0
  store i32 %369, i32* %351, align 1
  %370 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %371 = bitcast <16 x i8> %370 to <4 x i32>
  %372 = extractelement <4 x i32> %371, i32 0
  store i32 %372, i32* %355, align 1
  %373 = getelementptr inbounds i8, i8* %151, i64 24
  %374 = getelementptr inbounds i8, i8* %278, i64 %18
  %375 = shufflevector <16 x i8> %345, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %376 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %375
  %377 = shufflevector <16 x i8> %376, <16 x i8> %375, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %378 = bitcast i8* %373 to i64*
  %379 = load i64, i64* %378, align 1
  %380 = insertelement <2 x i64> undef, i64 %379, i32 0
  %381 = bitcast i8* %374 to i32*
  %382 = load i32, i32* %381, align 1
  %383 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %382, i32 0
  %384 = getelementptr inbounds i8, i8* %374, i64 %2
  %385 = bitcast i8* %384 to i32*
  %386 = load i32, i32* %385, align 1
  %387 = insertelement <4 x i32> undef, i32 %386, i32 0
  %388 = bitcast <4 x i32> %387 to <16 x i8>
  %389 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %388, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %390 = bitcast <2 x i64> %380 to <16 x i8>
  %391 = bitcast <4 x i32> %383 to <16 x i8>
  %392 = or <16 x i8> %389, %391
  %393 = shufflevector <16 x i8> %390, <16 x i8> %392, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %394 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %393, <16 x i8> %377) #6
  %395 = lshr <8 x i16> %394, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %396 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %395, <8 x i16> zeroinitializer) #6
  %397 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %396, <8 x i16> %396) #6
  %398 = bitcast <16 x i8> %397 to <4 x i32>
  %399 = extractelement <4 x i32> %398, i32 0
  store i32 %399, i32* %381, align 1
  %400 = shufflevector <16 x i8> %397, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %401 = bitcast <16 x i8> %400 to <4 x i32>
  %402 = extractelement <4 x i32> %401, i32 0
  store i32 %402, i32* %385, align 1
  %403 = getelementptr inbounds i8, i8* %151, i64 32
  %404 = getelementptr inbounds i8, i8* %278, i64 %19
  %405 = getelementptr inbounds i8, i8* %279, i64 %20
  %406 = add nuw nsw i32 %153, 8
  %407 = icmp slt i32 %406, %6
  br i1 %407, label %149, label %465

408:                                              ; preds = %9, %459
  %409 = phi i32 [ %463, %459 ], [ 0, %9 ]
  %410 = phi i8* [ %462, %459 ], [ %3, %9 ]
  %411 = phi i8* [ %461, %459 ], [ %1, %9 ]
  %412 = phi i8* [ %460, %459 ], [ %0, %9 ]
  br label %413

413:                                              ; preds = %413, %408
  %414 = phi i64 [ %457, %413 ], [ 0, %408 ]
  %415 = trunc i64 %414 to i32
  %416 = shl i32 %415, 1
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i8, i8* %410, i64 %417
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = shufflevector <16 x i8> %420, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %422 = zext <8 x i8> %421 to <8 x i16>
  %423 = shufflevector <16 x i8> %420, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %424 = zext <8 x i8> %423 to <8 x i16>
  %425 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %422, <8 x i16> %424) #6
  %426 = getelementptr inbounds i8, i8* %418, i64 %4
  %427 = bitcast i8* %426 to <16 x i8>*
  %428 = load <16 x i8>, <16 x i8>* %427, align 1
  %429 = shufflevector <16 x i8> %428, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %430 = zext <8 x i8> %429 to <8 x i16>
  %431 = shufflevector <16 x i8> %428, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %432 = zext <8 x i8> %431 to <8 x i16>
  %433 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %430, <8 x i16> %432) #6
  %434 = add <8 x i16> %433, %425
  %435 = lshr <8 x i16> %434, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %436 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %435, <8 x i16> zeroinitializer) #6
  %437 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %436, <8 x i16> %436) #6
  %438 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %437
  %439 = shufflevector <16 x i8> %438, <16 x i8> %437, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %440 = getelementptr inbounds i8, i8* %412, i64 %414
  %441 = bitcast i8* %440 to i64*
  %442 = load i64, i64* %441, align 1
  %443 = insertelement <2 x i64> undef, i64 %442, i32 0
  %444 = getelementptr inbounds i8, i8* %411, i64 %414
  %445 = bitcast i8* %444 to i64*
  %446 = load i64, i64* %445, align 1
  %447 = insertelement <2 x i64> undef, i64 %446, i32 0
  %448 = bitcast <2 x i64> %443 to <16 x i8>
  %449 = bitcast <2 x i64> %447 to <16 x i8>
  %450 = shufflevector <16 x i8> %448, <16 x i8> %449, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %451 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %450, <16 x i8> %439) #6
  %452 = lshr <8 x i16> %451, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %453 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %452, <8 x i16> zeroinitializer) #6
  %454 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %453, <8 x i16> undef) #6
  %455 = bitcast <16 x i8> %454 to <2 x i64>
  %456 = extractelement <2 x i64> %455, i32 0
  store i64 %456, i64* %445, align 1
  %457 = add nuw nsw i64 %414, 8
  %458 = icmp slt i64 %457, %10
  br i1 %458, label %413, label %459

459:                                              ; preds = %413
  %460 = getelementptr inbounds i8, i8* %412, i64 %10
  %461 = getelementptr inbounds i8, i8* %411, i64 %2
  %462 = getelementptr inbounds i8, i8* %410, i64 %11
  %463 = add nuw nsw i32 %409, 1
  %464 = icmp slt i32 %463, %6
  br i1 %464, label %408, label %465

465:                                              ; preds = %459, %149, %21
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #4

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi0ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %390

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %138

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %3, i64 %4
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = insertelement <4 x i32> undef, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %26, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <4 x i32> %21 to <16 x i8>
  %29 = or <16 x i8> %27, %28
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %31
  %33 = bitcast i8* %0 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = bitcast i8* %1 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = getelementptr inbounds i16, i16* %13, i64 %2
  %39 = bitcast <2 x i64> %37 to <4 x float>
  %40 = bitcast i16* %38 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = shufflevector <2 x float> %41, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x float> %39, <4 x float> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = mul <8 x i16> %34, %31
  %45 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %34, <8 x i16> %31) #6
  %46 = bitcast <4 x float> %43 to <8 x i16>
  %47 = mul <8 x i16> %32, %46
  %48 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %46, <8 x i16> %32) #6
  %49 = shufflevector <8 x i16> %44, <8 x i16> %45, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = shufflevector <8 x i16> %44, <8 x i16> %45, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %51 = shufflevector <8 x i16> %47, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = shufflevector <8 x i16> %47, <8 x i16> %48, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %53 = bitcast <8 x i16> %49 to <4 x i32>
  %54 = bitcast <8 x i16> %51 to <4 x i32>
  %55 = add <4 x i32> %54, %53
  %56 = bitcast <8 x i16> %50 to <4 x i32>
  %57 = bitcast <8 x i16> %52 to <4 x i32>
  %58 = add <4 x i32> %57, %56
  %59 = lshr <4 x i32> %55, <i32 6, i32 6, i32 6, i32 6>
  %60 = lshr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %61 = add nsw <4 x i32> %59, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %62 = ashr <4 x i32> %61, <i32 4, i32 4, i32 4, i32 4>
  %63 = add nsw <4 x i32> %60, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %64 = ashr <4 x i32> %63, <i32 4, i32 4, i32 4, i32 4>
  %65 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %62, <4 x i32> %64) #6
  %66 = icmp slt <8 x i16> %65, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %68 = bitcast <8 x i16> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = bitcast i8* %7 to i64*
  store i64 %69, i64* %70, align 1
  %71 = getelementptr inbounds i16, i16* %10, i64 %11
  %72 = bitcast <8 x i16> %67 to <4 x float>
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %74 = bitcast i16* %71 to <2 x float>*
  store <2 x float> %73, <2 x float>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %0, i64 16
  %76 = shl i64 %2, 1
  %77 = getelementptr inbounds i16, i16* %13, i64 %76
  %78 = shl i64 %4, 1
  %79 = getelementptr inbounds i8, i8* %3, i64 %78
  %80 = and i64 %8, -2
  %81 = getelementptr inbounds i16, i16* %10, i64 %80
  %82 = bitcast i8* %79 to i32*
  %83 = load i32, i32* %82, align 1
  %84 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %83, i32 0
  %85 = getelementptr inbounds i8, i8* %79, i64 %4
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = insertelement <4 x i32> undef, i32 %87, i32 0
  %89 = bitcast <4 x i32> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %89, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <4 x i32> %84 to <16 x i8>
  %92 = or <16 x i8> %90, %91
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %94 = zext <8 x i8> %93 to <8 x i16>
  %95 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %94
  %96 = bitcast i8* %75 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = bitcast i16* %77 to i64*
  %99 = load i64, i64* %98, align 1
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = getelementptr inbounds i16, i16* %77, i64 %2
  %102 = bitcast <2 x i64> %100 to <4 x float>
  %103 = bitcast i16* %101 to <2 x float>*
  %104 = load <2 x float>, <2 x float>* %103, align 1
  %105 = shufflevector <2 x float> %104, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <4 x float> %102, <4 x float> %105, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %107 = mul <8 x i16> %97, %94
  %108 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %97, <8 x i16> %94) #6
  %109 = bitcast <4 x float> %106 to <8 x i16>
  %110 = mul <8 x i16> %95, %109
  %111 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %109, <8 x i16> %95) #6
  %112 = shufflevector <8 x i16> %107, <8 x i16> %108, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = shufflevector <8 x i16> %107, <8 x i16> %108, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = shufflevector <8 x i16> %110, <8 x i16> %111, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %115 = shufflevector <8 x i16> %110, <8 x i16> %111, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %116 = bitcast <8 x i16> %112 to <4 x i32>
  %117 = bitcast <8 x i16> %114 to <4 x i32>
  %118 = add <4 x i32> %117, %116
  %119 = bitcast <8 x i16> %113 to <4 x i32>
  %120 = bitcast <8 x i16> %115 to <4 x i32>
  %121 = add <4 x i32> %120, %119
  %122 = lshr <4 x i32> %118, <i32 6, i32 6, i32 6, i32 6>
  %123 = lshr <4 x i32> %121, <i32 6, i32 6, i32 6, i32 6>
  %124 = add nsw <4 x i32> %122, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %125 = ashr <4 x i32> %124, <i32 4, i32 4, i32 4, i32 4>
  %126 = add nsw <4 x i32> %123, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %127 = ashr <4 x i32> %126, <i32 4, i32 4, i32 4, i32 4>
  %128 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %125, <4 x i32> %127) #6
  %129 = icmp slt <8 x i16> %128, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %130 = select <8 x i1> %129, <8 x i16> %128, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = bitcast i16* %81 to i64*
  store i64 %132, i64* %133, align 1
  %134 = getelementptr inbounds i16, i16* %81, i64 %11
  %135 = bitcast <8 x i16> %130 to <4 x float>
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %137 = bitcast i16* %134 to <2 x float>*
  store <2 x float> %136, <2 x float>* %137, align 1
  br label %446

138:                                              ; preds = %16
  %139 = shl i64 %2, 1
  %140 = shl i64 %4, 1
  %141 = and i64 %8, -2
  br label %142

142:                                              ; preds = %142, %138
  %143 = phi i16* [ %10, %138 ], [ %387, %142 ]
  %144 = phi i16* [ %13, %138 ], [ %385, %142 ]
  %145 = phi i8* [ %3, %138 ], [ %386, %142 ]
  %146 = phi i16* [ %12, %138 ], [ %384, %142 ]
  %147 = phi i32 [ %6, %138 ], [ %388, %142 ]
  %148 = bitcast i8* %145 to i32*
  %149 = load i32, i32* %148, align 1
  %150 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %149, i32 0
  %151 = getelementptr inbounds i8, i8* %145, i64 %4
  %152 = bitcast i8* %151 to i32*
  %153 = load i32, i32* %152, align 1
  %154 = insertelement <4 x i32> undef, i32 %153, i32 0
  %155 = bitcast <4 x i32> %154 to <16 x i8>
  %156 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %155, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <4 x i32> %150 to <16 x i8>
  %158 = or <16 x i8> %156, %157
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %160 = zext <8 x i8> %159 to <8 x i16>
  %161 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %160
  %162 = bitcast i16* %146 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 1
  %164 = bitcast i16* %144 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> undef, i64 %165, i32 0
  %167 = getelementptr inbounds i16, i16* %144, i64 %2
  %168 = bitcast <2 x i64> %166 to <4 x float>
  %169 = bitcast i16* %167 to <2 x float>*
  %170 = load <2 x float>, <2 x float>* %169, align 1
  %171 = shufflevector <2 x float> %170, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = shufflevector <4 x float> %168, <4 x float> %171, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %173 = mul <8 x i16> %163, %160
  %174 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %163, <8 x i16> %160) #6
  %175 = bitcast <4 x float> %172 to <8 x i16>
  %176 = mul <8 x i16> %161, %175
  %177 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %175, <8 x i16> %161) #6
  %178 = shufflevector <8 x i16> %173, <8 x i16> %174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %179 = shufflevector <8 x i16> %173, <8 x i16> %174, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %180 = shufflevector <8 x i16> %176, <8 x i16> %177, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %181 = shufflevector <8 x i16> %176, <8 x i16> %177, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %182 = bitcast <8 x i16> %178 to <4 x i32>
  %183 = bitcast <8 x i16> %180 to <4 x i32>
  %184 = add <4 x i32> %183, %182
  %185 = bitcast <8 x i16> %179 to <4 x i32>
  %186 = bitcast <8 x i16> %181 to <4 x i32>
  %187 = add <4 x i32> %186, %185
  %188 = lshr <4 x i32> %184, <i32 6, i32 6, i32 6, i32 6>
  %189 = lshr <4 x i32> %187, <i32 6, i32 6, i32 6, i32 6>
  %190 = add nsw <4 x i32> %188, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %191 = ashr <4 x i32> %190, <i32 4, i32 4, i32 4, i32 4>
  %192 = add nsw <4 x i32> %189, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %193 = ashr <4 x i32> %192, <i32 4, i32 4, i32 4, i32 4>
  %194 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %191, <4 x i32> %193) #6
  %195 = icmp slt <8 x i16> %194, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %196 = select <8 x i1> %195, <8 x i16> %194, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %197 = bitcast <8 x i16> %196 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = bitcast i16* %143 to i64*
  store i64 %198, i64* %199, align 1
  %200 = getelementptr inbounds i16, i16* %143, i64 %11
  %201 = bitcast <8 x i16> %196 to <4 x float>
  %202 = shufflevector <4 x float> %201, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %203 = bitcast i16* %200 to <2 x float>*
  store <2 x float> %202, <2 x float>* %203, align 1
  %204 = getelementptr inbounds i16, i16* %146, i64 8
  %205 = getelementptr inbounds i16, i16* %144, i64 %139
  %206 = getelementptr inbounds i8, i8* %145, i64 %140
  %207 = getelementptr inbounds i16, i16* %143, i64 %141
  %208 = bitcast i8* %206 to i32*
  %209 = load i32, i32* %208, align 1
  %210 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %209, i32 0
  %211 = getelementptr inbounds i8, i8* %206, i64 %4
  %212 = bitcast i8* %211 to i32*
  %213 = load i32, i32* %212, align 1
  %214 = insertelement <4 x i32> undef, i32 %213, i32 0
  %215 = bitcast <4 x i32> %214 to <16 x i8>
  %216 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %215, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %217 = bitcast <4 x i32> %210 to <16 x i8>
  %218 = or <16 x i8> %216, %217
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %220 = zext <8 x i8> %219 to <8 x i16>
  %221 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %220
  %222 = bitcast i16* %204 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = bitcast i16* %205 to i64*
  %225 = load i64, i64* %224, align 1
  %226 = insertelement <2 x i64> undef, i64 %225, i32 0
  %227 = getelementptr inbounds i16, i16* %205, i64 %2
  %228 = bitcast <2 x i64> %226 to <4 x float>
  %229 = bitcast i16* %227 to <2 x float>*
  %230 = load <2 x float>, <2 x float>* %229, align 1
  %231 = shufflevector <2 x float> %230, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <4 x float> %228, <4 x float> %231, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %233 = mul <8 x i16> %223, %220
  %234 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %223, <8 x i16> %220) #6
  %235 = bitcast <4 x float> %232 to <8 x i16>
  %236 = mul <8 x i16> %221, %235
  %237 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %235, <8 x i16> %221) #6
  %238 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %240 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %241 = shufflevector <8 x i16> %236, <8 x i16> %237, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %242 = bitcast <8 x i16> %238 to <4 x i32>
  %243 = bitcast <8 x i16> %240 to <4 x i32>
  %244 = add <4 x i32> %243, %242
  %245 = bitcast <8 x i16> %239 to <4 x i32>
  %246 = bitcast <8 x i16> %241 to <4 x i32>
  %247 = add <4 x i32> %246, %245
  %248 = lshr <4 x i32> %244, <i32 6, i32 6, i32 6, i32 6>
  %249 = lshr <4 x i32> %247, <i32 6, i32 6, i32 6, i32 6>
  %250 = add nsw <4 x i32> %248, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %251 = ashr <4 x i32> %250, <i32 4, i32 4, i32 4, i32 4>
  %252 = add nsw <4 x i32> %249, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %253 = ashr <4 x i32> %252, <i32 4, i32 4, i32 4, i32 4>
  %254 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %251, <4 x i32> %253) #6
  %255 = icmp slt <8 x i16> %254, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %256 = select <8 x i1> %255, <8 x i16> %254, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %257 = bitcast <8 x i16> %256 to <2 x i64>
  %258 = extractelement <2 x i64> %257, i32 0
  %259 = bitcast i16* %207 to i64*
  store i64 %258, i64* %259, align 1
  %260 = getelementptr inbounds i16, i16* %207, i64 %11
  %261 = bitcast <8 x i16> %256 to <4 x float>
  %262 = shufflevector <4 x float> %261, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %263 = bitcast i16* %260 to <2 x float>*
  store <2 x float> %262, <2 x float>* %263, align 1
  %264 = getelementptr inbounds i16, i16* %146, i64 16
  %265 = getelementptr inbounds i16, i16* %205, i64 %139
  %266 = getelementptr inbounds i8, i8* %206, i64 %140
  %267 = getelementptr inbounds i16, i16* %207, i64 %141
  %268 = bitcast i8* %266 to i32*
  %269 = load i32, i32* %268, align 1
  %270 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %269, i32 0
  %271 = getelementptr inbounds i8, i8* %266, i64 %4
  %272 = bitcast i8* %271 to i32*
  %273 = load i32, i32* %272, align 1
  %274 = insertelement <4 x i32> undef, i32 %273, i32 0
  %275 = bitcast <4 x i32> %274 to <16 x i8>
  %276 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %275, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = bitcast <4 x i32> %270 to <16 x i8>
  %278 = or <16 x i8> %276, %277
  %279 = shufflevector <16 x i8> %278, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %280 = zext <8 x i8> %279 to <8 x i16>
  %281 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %280
  %282 = bitcast i16* %264 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = bitcast i16* %265 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = insertelement <2 x i64> undef, i64 %285, i32 0
  %287 = getelementptr inbounds i16, i16* %265, i64 %2
  %288 = bitcast <2 x i64> %286 to <4 x float>
  %289 = bitcast i16* %287 to <2 x float>*
  %290 = load <2 x float>, <2 x float>* %289, align 1
  %291 = shufflevector <2 x float> %290, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %292 = shufflevector <4 x float> %288, <4 x float> %291, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %293 = mul <8 x i16> %283, %280
  %294 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %283, <8 x i16> %280) #6
  %295 = bitcast <4 x float> %292 to <8 x i16>
  %296 = mul <8 x i16> %281, %295
  %297 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %295, <8 x i16> %281) #6
  %298 = shufflevector <8 x i16> %293, <8 x i16> %294, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %299 = shufflevector <8 x i16> %293, <8 x i16> %294, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %300 = shufflevector <8 x i16> %296, <8 x i16> %297, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %301 = shufflevector <8 x i16> %296, <8 x i16> %297, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %302 = bitcast <8 x i16> %298 to <4 x i32>
  %303 = bitcast <8 x i16> %300 to <4 x i32>
  %304 = add <4 x i32> %303, %302
  %305 = bitcast <8 x i16> %299 to <4 x i32>
  %306 = bitcast <8 x i16> %301 to <4 x i32>
  %307 = add <4 x i32> %306, %305
  %308 = lshr <4 x i32> %304, <i32 6, i32 6, i32 6, i32 6>
  %309 = lshr <4 x i32> %307, <i32 6, i32 6, i32 6, i32 6>
  %310 = add nsw <4 x i32> %308, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %311 = ashr <4 x i32> %310, <i32 4, i32 4, i32 4, i32 4>
  %312 = add nsw <4 x i32> %309, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %313 = ashr <4 x i32> %312, <i32 4, i32 4, i32 4, i32 4>
  %314 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %311, <4 x i32> %313) #6
  %315 = icmp slt <8 x i16> %314, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %316 = select <8 x i1> %315, <8 x i16> %314, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %317 = bitcast <8 x i16> %316 to <2 x i64>
  %318 = extractelement <2 x i64> %317, i32 0
  %319 = bitcast i16* %267 to i64*
  store i64 %318, i64* %319, align 1
  %320 = getelementptr inbounds i16, i16* %267, i64 %11
  %321 = bitcast <8 x i16> %316 to <4 x float>
  %322 = shufflevector <4 x float> %321, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %323 = bitcast i16* %320 to <2 x float>*
  store <2 x float> %322, <2 x float>* %323, align 1
  %324 = getelementptr inbounds i16, i16* %146, i64 24
  %325 = getelementptr inbounds i16, i16* %265, i64 %139
  %326 = getelementptr inbounds i8, i8* %266, i64 %140
  %327 = getelementptr inbounds i16, i16* %267, i64 %141
  %328 = bitcast i8* %326 to i32*
  %329 = load i32, i32* %328, align 1
  %330 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %329, i32 0
  %331 = getelementptr inbounds i8, i8* %326, i64 %4
  %332 = bitcast i8* %331 to i32*
  %333 = load i32, i32* %332, align 1
  %334 = insertelement <4 x i32> undef, i32 %333, i32 0
  %335 = bitcast <4 x i32> %334 to <16 x i8>
  %336 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %335, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %337 = bitcast <4 x i32> %330 to <16 x i8>
  %338 = or <16 x i8> %336, %337
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %340 = zext <8 x i8> %339 to <8 x i16>
  %341 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %340
  %342 = bitcast i16* %324 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 1
  %344 = bitcast i16* %325 to i64*
  %345 = load i64, i64* %344, align 1
  %346 = insertelement <2 x i64> undef, i64 %345, i32 0
  %347 = getelementptr inbounds i16, i16* %325, i64 %2
  %348 = bitcast <2 x i64> %346 to <4 x float>
  %349 = bitcast i16* %347 to <2 x float>*
  %350 = load <2 x float>, <2 x float>* %349, align 1
  %351 = shufflevector <2 x float> %350, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %352 = shufflevector <4 x float> %348, <4 x float> %351, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %353 = mul <8 x i16> %343, %340
  %354 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %343, <8 x i16> %340) #6
  %355 = bitcast <4 x float> %352 to <8 x i16>
  %356 = mul <8 x i16> %341, %355
  %357 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %355, <8 x i16> %341) #6
  %358 = shufflevector <8 x i16> %353, <8 x i16> %354, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %359 = shufflevector <8 x i16> %353, <8 x i16> %354, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %360 = shufflevector <8 x i16> %356, <8 x i16> %357, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %361 = shufflevector <8 x i16> %356, <8 x i16> %357, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %362 = bitcast <8 x i16> %358 to <4 x i32>
  %363 = bitcast <8 x i16> %360 to <4 x i32>
  %364 = add <4 x i32> %363, %362
  %365 = bitcast <8 x i16> %359 to <4 x i32>
  %366 = bitcast <8 x i16> %361 to <4 x i32>
  %367 = add <4 x i32> %366, %365
  %368 = lshr <4 x i32> %364, <i32 6, i32 6, i32 6, i32 6>
  %369 = lshr <4 x i32> %367, <i32 6, i32 6, i32 6, i32 6>
  %370 = add nsw <4 x i32> %368, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %371 = ashr <4 x i32> %370, <i32 4, i32 4, i32 4, i32 4>
  %372 = add nsw <4 x i32> %369, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %373 = ashr <4 x i32> %372, <i32 4, i32 4, i32 4, i32 4>
  %374 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %371, <4 x i32> %373) #6
  %375 = icmp slt <8 x i16> %374, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %376 = select <8 x i1> %375, <8 x i16> %374, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %377 = bitcast <8 x i16> %376 to <2 x i64>
  %378 = extractelement <2 x i64> %377, i32 0
  %379 = bitcast i16* %327 to i64*
  store i64 %378, i64* %379, align 1
  %380 = getelementptr inbounds i16, i16* %327, i64 %11
  %381 = bitcast <8 x i16> %376 to <4 x float>
  %382 = shufflevector <4 x float> %381, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %383 = bitcast i16* %380 to <2 x float>*
  store <2 x float> %382, <2 x float>* %383, align 1
  %384 = getelementptr inbounds i16, i16* %146, i64 32
  %385 = getelementptr inbounds i16, i16* %325, i64 %139
  %386 = getelementptr inbounds i8, i8* %326, i64 %140
  %387 = getelementptr inbounds i16, i16* %327, i64 %141
  %388 = add nsw i32 %147, -8
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %446, label %142

390:                                              ; preds = %9, %439
  %391 = phi i32 [ %444, %439 ], [ %6, %9 ]
  %392 = phi i8* [ %443, %439 ], [ %3, %9 ]
  %393 = phi i16* [ %442, %439 ], [ %13, %9 ]
  %394 = phi i16* [ %441, %439 ], [ %12, %9 ]
  %395 = phi i16* [ %440, %439 ], [ %10, %9 ]
  br label %396

396:                                              ; preds = %396, %390
  %397 = phi i64 [ %437, %396 ], [ 0, %390 ]
  %398 = getelementptr inbounds i8, i8* %392, i64 %397
  %399 = bitcast i8* %398 to i64*
  %400 = load i64, i64* %399, align 1
  %401 = insertelement <2 x i64> undef, i64 %400, i32 0
  %402 = bitcast <2 x i64> %401 to <16 x i8>
  %403 = shufflevector <16 x i8> %402, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %404 = zext <8 x i8> %403 to <8 x i16>
  %405 = getelementptr inbounds i16, i16* %394, i64 %397
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 1
  %408 = getelementptr inbounds i16, i16* %393, i64 %397
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 1
  %411 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %404
  %412 = mul <8 x i16> %407, %404
  %413 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %407, <8 x i16> %404) #6
  %414 = mul <8 x i16> %411, %410
  %415 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %410, <8 x i16> %411) #6
  %416 = shufflevector <8 x i16> %412, <8 x i16> %413, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %417 = shufflevector <8 x i16> %412, <8 x i16> %413, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %418 = shufflevector <8 x i16> %414, <8 x i16> %415, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %419 = shufflevector <8 x i16> %414, <8 x i16> %415, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %420 = bitcast <8 x i16> %416 to <4 x i32>
  %421 = bitcast <8 x i16> %418 to <4 x i32>
  %422 = add <4 x i32> %421, %420
  %423 = bitcast <8 x i16> %417 to <4 x i32>
  %424 = bitcast <8 x i16> %419 to <4 x i32>
  %425 = add <4 x i32> %424, %423
  %426 = lshr <4 x i32> %422, <i32 6, i32 6, i32 6, i32 6>
  %427 = lshr <4 x i32> %425, <i32 6, i32 6, i32 6, i32 6>
  %428 = add nsw <4 x i32> %426, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %429 = ashr <4 x i32> %428, <i32 4, i32 4, i32 4, i32 4>
  %430 = add nsw <4 x i32> %427, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %431 = ashr <4 x i32> %430, <i32 4, i32 4, i32 4, i32 4>
  %432 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %429, <4 x i32> %431) #6
  %433 = icmp slt <8 x i16> %432, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %434 = select <8 x i1> %433, <8 x i16> %432, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %435 = getelementptr inbounds i16, i16* %395, i64 %397
  %436 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %436, align 1
  %437 = add nuw nsw i64 %397, 8
  %438 = icmp slt i64 %437, %14
  br i1 %438, label %396, label %439

439:                                              ; preds = %396
  %440 = getelementptr inbounds i16, i16* %395, i64 %11
  %441 = getelementptr inbounds i16, i16* %394, i64 %14
  %442 = getelementptr inbounds i16, i16* %393, i64 %2
  %443 = getelementptr inbounds i8, i8* %392, i64 %4
  %444 = add nsw i32 %391, -1
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %446, label %390

446:                                              ; preds = %439, %142, %18
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi1ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %402

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %142

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = zext <8 x i8> %23 to <8 x i16>
  %25 = getelementptr inbounds i8, i8* %3, i64 %4
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = bitcast <2 x i64> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %24, <8 x i16> %31) #6
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #6
  %34 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %33
  %35 = bitcast i8* %0 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = bitcast i8* %1 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = getelementptr inbounds i16, i16* %13, i64 %2
  %41 = bitcast <2 x i64> %39 to <4 x float>
  %42 = bitcast i16* %40 to <2 x float>*
  %43 = load <2 x float>, <2 x float>* %42, align 1
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x float> %41, <4 x float> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = mul <8 x i16> %36, %33
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %36, <8 x i16> %33) #6
  %48 = bitcast <4 x float> %45 to <8 x i16>
  %49 = mul <8 x i16> %34, %48
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> %34) #6
  %51 = shufflevector <8 x i16> %46, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = shufflevector <8 x i16> %46, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %53 = shufflevector <8 x i16> %49, <8 x i16> %50, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = shufflevector <8 x i16> %49, <8 x i16> %50, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %55 = bitcast <8 x i16> %51 to <4 x i32>
  %56 = bitcast <8 x i16> %53 to <4 x i32>
  %57 = add <4 x i32> %56, %55
  %58 = bitcast <8 x i16> %52 to <4 x i32>
  %59 = bitcast <8 x i16> %54 to <4 x i32>
  %60 = add <4 x i32> %59, %58
  %61 = lshr <4 x i32> %57, <i32 6, i32 6, i32 6, i32 6>
  %62 = lshr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %63 = add nsw <4 x i32> %61, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %64 = ashr <4 x i32> %63, <i32 4, i32 4, i32 4, i32 4>
  %65 = add nsw <4 x i32> %62, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %66 = ashr <4 x i32> %65, <i32 4, i32 4, i32 4, i32 4>
  %67 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %64, <4 x i32> %66) #6
  %68 = icmp slt <8 x i16> %67, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %69 = select <8 x i1> %68, <8 x i16> %67, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %70 = bitcast <8 x i16> %69 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = bitcast i8* %7 to i64*
  store i64 %71, i64* %72, align 1
  %73 = getelementptr inbounds i16, i16* %10, i64 %11
  %74 = bitcast <8 x i16> %69 to <4 x float>
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %76 = bitcast i16* %73 to <2 x float>*
  store <2 x float> %75, <2 x float>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %0, i64 16
  %78 = shl i64 %2, 1
  %79 = getelementptr inbounds i16, i16* %13, i64 %78
  %80 = shl i64 %4, 1
  %81 = getelementptr inbounds i8, i8* %3, i64 %80
  %82 = and i64 %8, -2
  %83 = getelementptr inbounds i16, i16* %10, i64 %82
  %84 = bitcast i8* %81 to i64*
  %85 = load i64, i64* %84, align 1
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = bitcast <2 x i64> %86 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = zext <8 x i8> %88 to <8 x i16>
  %90 = getelementptr inbounds i8, i8* %81, i64 %4
  %91 = bitcast i8* %90 to i64*
  %92 = load i64, i64* %91, align 1
  %93 = insertelement <2 x i64> undef, i64 %92, i32 0
  %94 = bitcast <2 x i64> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %96 = zext <8 x i8> %95 to <8 x i16>
  %97 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %89, <8 x i16> %96) #6
  %98 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %97, <8 x i16> zeroinitializer) #6
  %99 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %98
  %100 = bitcast i8* %77 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 1
  %102 = bitcast i16* %79 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i16, i16* %79, i64 %2
  %106 = bitcast <2 x i64> %104 to <4 x float>
  %107 = bitcast i16* %105 to <2 x float>*
  %108 = load <2 x float>, <2 x float>* %107, align 1
  %109 = shufflevector <2 x float> %108, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x float> %106, <4 x float> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = mul <8 x i16> %101, %98
  %112 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %101, <8 x i16> %98) #6
  %113 = bitcast <4 x float> %110 to <8 x i16>
  %114 = mul <8 x i16> %99, %113
  %115 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %113, <8 x i16> %99) #6
  %116 = shufflevector <8 x i16> %111, <8 x i16> %112, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %117 = shufflevector <8 x i16> %111, <8 x i16> %112, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = shufflevector <8 x i16> %114, <8 x i16> %115, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = shufflevector <8 x i16> %114, <8 x i16> %115, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %120 = bitcast <8 x i16> %116 to <4 x i32>
  %121 = bitcast <8 x i16> %118 to <4 x i32>
  %122 = add <4 x i32> %121, %120
  %123 = bitcast <8 x i16> %117 to <4 x i32>
  %124 = bitcast <8 x i16> %119 to <4 x i32>
  %125 = add <4 x i32> %124, %123
  %126 = lshr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %127 = lshr <4 x i32> %125, <i32 6, i32 6, i32 6, i32 6>
  %128 = add nsw <4 x i32> %126, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %129 = ashr <4 x i32> %128, <i32 4, i32 4, i32 4, i32 4>
  %130 = add nsw <4 x i32> %127, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %131 = ashr <4 x i32> %130, <i32 4, i32 4, i32 4, i32 4>
  %132 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %129, <4 x i32> %131) #6
  %133 = icmp slt <8 x i16> %132, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %134 = select <8 x i1> %133, <8 x i16> %132, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %135 = bitcast <8 x i16> %134 to <2 x i64>
  %136 = extractelement <2 x i64> %135, i32 0
  %137 = bitcast i16* %83 to i64*
  store i64 %136, i64* %137, align 1
  %138 = getelementptr inbounds i16, i16* %83, i64 %11
  %139 = bitcast <8 x i16> %134 to <4 x float>
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %141 = bitcast i16* %138 to <2 x float>*
  store <2 x float> %140, <2 x float>* %141, align 1
  br label %463

142:                                              ; preds = %16
  %143 = shl i64 %2, 1
  %144 = shl i64 %4, 1
  %145 = and i64 %8, -2
  br label %146

146:                                              ; preds = %146, %142
  %147 = phi i16* [ %10, %142 ], [ %399, %146 ]
  %148 = phi i16* [ %13, %142 ], [ %397, %146 ]
  %149 = phi i8* [ %3, %142 ], [ %398, %146 ]
  %150 = phi i16* [ %12, %142 ], [ %396, %146 ]
  %151 = phi i32 [ %6, %142 ], [ %400, %146 ]
  %152 = bitcast i8* %149 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = insertelement <2 x i64> undef, i64 %153, i32 0
  %155 = bitcast <2 x i64> %154 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %157 = zext <8 x i8> %156 to <8 x i16>
  %158 = getelementptr inbounds i8, i8* %149, i64 %4
  %159 = bitcast i8* %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = insertelement <2 x i64> undef, i64 %160, i32 0
  %162 = bitcast <2 x i64> %161 to <16 x i8>
  %163 = shufflevector <16 x i8> %162, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %164 = zext <8 x i8> %163 to <8 x i16>
  %165 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %157, <8 x i16> %164) #6
  %166 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %165, <8 x i16> zeroinitializer) #6
  %167 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %166
  %168 = bitcast i16* %150 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 1
  %170 = bitcast i16* %148 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = insertelement <2 x i64> undef, i64 %171, i32 0
  %173 = getelementptr inbounds i16, i16* %148, i64 %2
  %174 = bitcast <2 x i64> %172 to <4 x float>
  %175 = bitcast i16* %173 to <2 x float>*
  %176 = load <2 x float>, <2 x float>* %175, align 1
  %177 = shufflevector <2 x float> %176, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %178 = shufflevector <4 x float> %174, <4 x float> %177, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %179 = mul <8 x i16> %169, %166
  %180 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %169, <8 x i16> %166) #6
  %181 = bitcast <4 x float> %178 to <8 x i16>
  %182 = mul <8 x i16> %167, %181
  %183 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %181, <8 x i16> %167) #6
  %184 = shufflevector <8 x i16> %179, <8 x i16> %180, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %185 = shufflevector <8 x i16> %179, <8 x i16> %180, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %186 = shufflevector <8 x i16> %182, <8 x i16> %183, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %187 = shufflevector <8 x i16> %182, <8 x i16> %183, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %188 = bitcast <8 x i16> %184 to <4 x i32>
  %189 = bitcast <8 x i16> %186 to <4 x i32>
  %190 = add <4 x i32> %189, %188
  %191 = bitcast <8 x i16> %185 to <4 x i32>
  %192 = bitcast <8 x i16> %187 to <4 x i32>
  %193 = add <4 x i32> %192, %191
  %194 = lshr <4 x i32> %190, <i32 6, i32 6, i32 6, i32 6>
  %195 = lshr <4 x i32> %193, <i32 6, i32 6, i32 6, i32 6>
  %196 = add nsw <4 x i32> %194, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %197 = ashr <4 x i32> %196, <i32 4, i32 4, i32 4, i32 4>
  %198 = add nsw <4 x i32> %195, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %199 = ashr <4 x i32> %198, <i32 4, i32 4, i32 4, i32 4>
  %200 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %197, <4 x i32> %199) #6
  %201 = icmp slt <8 x i16> %200, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %202 = select <8 x i1> %201, <8 x i16> %200, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %203 = bitcast <8 x i16> %202 to <2 x i64>
  %204 = extractelement <2 x i64> %203, i32 0
  %205 = bitcast i16* %147 to i64*
  store i64 %204, i64* %205, align 1
  %206 = getelementptr inbounds i16, i16* %147, i64 %11
  %207 = bitcast <8 x i16> %202 to <4 x float>
  %208 = shufflevector <4 x float> %207, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %209 = bitcast i16* %206 to <2 x float>*
  store <2 x float> %208, <2 x float>* %209, align 1
  %210 = getelementptr inbounds i16, i16* %150, i64 8
  %211 = getelementptr inbounds i16, i16* %148, i64 %143
  %212 = getelementptr inbounds i8, i8* %149, i64 %144
  %213 = getelementptr inbounds i16, i16* %147, i64 %145
  %214 = bitcast i8* %212 to i64*
  %215 = load i64, i64* %214, align 1
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %216 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %219 = zext <8 x i8> %218 to <8 x i16>
  %220 = getelementptr inbounds i8, i8* %212, i64 %4
  %221 = bitcast i8* %220 to i64*
  %222 = load i64, i64* %221, align 1
  %223 = insertelement <2 x i64> undef, i64 %222, i32 0
  %224 = bitcast <2 x i64> %223 to <16 x i8>
  %225 = shufflevector <16 x i8> %224, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %226 = zext <8 x i8> %225 to <8 x i16>
  %227 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %219, <8 x i16> %226) #6
  %228 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %227, <8 x i16> zeroinitializer) #6
  %229 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %228
  %230 = bitcast i16* %210 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 1
  %232 = bitcast i16* %211 to i64*
  %233 = load i64, i64* %232, align 1
  %234 = insertelement <2 x i64> undef, i64 %233, i32 0
  %235 = getelementptr inbounds i16, i16* %211, i64 %2
  %236 = bitcast <2 x i64> %234 to <4 x float>
  %237 = bitcast i16* %235 to <2 x float>*
  %238 = load <2 x float>, <2 x float>* %237, align 1
  %239 = shufflevector <2 x float> %238, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %240 = shufflevector <4 x float> %236, <4 x float> %239, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %241 = mul <8 x i16> %231, %228
  %242 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %231, <8 x i16> %228) #6
  %243 = bitcast <4 x float> %240 to <8 x i16>
  %244 = mul <8 x i16> %229, %243
  %245 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %243, <8 x i16> %229) #6
  %246 = shufflevector <8 x i16> %241, <8 x i16> %242, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %247 = shufflevector <8 x i16> %241, <8 x i16> %242, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %248 = shufflevector <8 x i16> %244, <8 x i16> %245, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %249 = shufflevector <8 x i16> %244, <8 x i16> %245, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %250 = bitcast <8 x i16> %246 to <4 x i32>
  %251 = bitcast <8 x i16> %248 to <4 x i32>
  %252 = add <4 x i32> %251, %250
  %253 = bitcast <8 x i16> %247 to <4 x i32>
  %254 = bitcast <8 x i16> %249 to <4 x i32>
  %255 = add <4 x i32> %254, %253
  %256 = lshr <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %257 = lshr <4 x i32> %255, <i32 6, i32 6, i32 6, i32 6>
  %258 = add nsw <4 x i32> %256, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %259 = ashr <4 x i32> %258, <i32 4, i32 4, i32 4, i32 4>
  %260 = add nsw <4 x i32> %257, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %261 = ashr <4 x i32> %260, <i32 4, i32 4, i32 4, i32 4>
  %262 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %259, <4 x i32> %261) #6
  %263 = icmp slt <8 x i16> %262, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %264 = select <8 x i1> %263, <8 x i16> %262, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %265 = bitcast <8 x i16> %264 to <2 x i64>
  %266 = extractelement <2 x i64> %265, i32 0
  %267 = bitcast i16* %213 to i64*
  store i64 %266, i64* %267, align 1
  %268 = getelementptr inbounds i16, i16* %213, i64 %11
  %269 = bitcast <8 x i16> %264 to <4 x float>
  %270 = shufflevector <4 x float> %269, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %271 = bitcast i16* %268 to <2 x float>*
  store <2 x float> %270, <2 x float>* %271, align 1
  %272 = getelementptr inbounds i16, i16* %150, i64 16
  %273 = getelementptr inbounds i16, i16* %211, i64 %143
  %274 = getelementptr inbounds i8, i8* %212, i64 %144
  %275 = getelementptr inbounds i16, i16* %213, i64 %145
  %276 = bitcast i8* %274 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> undef, i64 %277, i32 0
  %279 = bitcast <2 x i64> %278 to <16 x i8>
  %280 = shufflevector <16 x i8> %279, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %281 = zext <8 x i8> %280 to <8 x i16>
  %282 = getelementptr inbounds i8, i8* %274, i64 %4
  %283 = bitcast i8* %282 to i64*
  %284 = load i64, i64* %283, align 1
  %285 = insertelement <2 x i64> undef, i64 %284, i32 0
  %286 = bitcast <2 x i64> %285 to <16 x i8>
  %287 = shufflevector <16 x i8> %286, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %288 = zext <8 x i8> %287 to <8 x i16>
  %289 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %281, <8 x i16> %288) #6
  %290 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %289, <8 x i16> zeroinitializer) #6
  %291 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %290
  %292 = bitcast i16* %272 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = bitcast i16* %273 to i64*
  %295 = load i64, i64* %294, align 1
  %296 = insertelement <2 x i64> undef, i64 %295, i32 0
  %297 = getelementptr inbounds i16, i16* %273, i64 %2
  %298 = bitcast <2 x i64> %296 to <4 x float>
  %299 = bitcast i16* %297 to <2 x float>*
  %300 = load <2 x float>, <2 x float>* %299, align 1
  %301 = shufflevector <2 x float> %300, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %302 = shufflevector <4 x float> %298, <4 x float> %301, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %303 = mul <8 x i16> %293, %290
  %304 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %293, <8 x i16> %290) #6
  %305 = bitcast <4 x float> %302 to <8 x i16>
  %306 = mul <8 x i16> %291, %305
  %307 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %305, <8 x i16> %291) #6
  %308 = shufflevector <8 x i16> %303, <8 x i16> %304, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %309 = shufflevector <8 x i16> %303, <8 x i16> %304, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = shufflevector <8 x i16> %306, <8 x i16> %307, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %311 = shufflevector <8 x i16> %306, <8 x i16> %307, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = bitcast <8 x i16> %308 to <4 x i32>
  %313 = bitcast <8 x i16> %310 to <4 x i32>
  %314 = add <4 x i32> %313, %312
  %315 = bitcast <8 x i16> %309 to <4 x i32>
  %316 = bitcast <8 x i16> %311 to <4 x i32>
  %317 = add <4 x i32> %316, %315
  %318 = lshr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %319 = lshr <4 x i32> %317, <i32 6, i32 6, i32 6, i32 6>
  %320 = add nsw <4 x i32> %318, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %321 = ashr <4 x i32> %320, <i32 4, i32 4, i32 4, i32 4>
  %322 = add nsw <4 x i32> %319, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %323 = ashr <4 x i32> %322, <i32 4, i32 4, i32 4, i32 4>
  %324 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %321, <4 x i32> %323) #6
  %325 = icmp slt <8 x i16> %324, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %326 = select <8 x i1> %325, <8 x i16> %324, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %327 = bitcast <8 x i16> %326 to <2 x i64>
  %328 = extractelement <2 x i64> %327, i32 0
  %329 = bitcast i16* %275 to i64*
  store i64 %328, i64* %329, align 1
  %330 = getelementptr inbounds i16, i16* %275, i64 %11
  %331 = bitcast <8 x i16> %326 to <4 x float>
  %332 = shufflevector <4 x float> %331, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %333 = bitcast i16* %330 to <2 x float>*
  store <2 x float> %332, <2 x float>* %333, align 1
  %334 = getelementptr inbounds i16, i16* %150, i64 24
  %335 = getelementptr inbounds i16, i16* %273, i64 %143
  %336 = getelementptr inbounds i8, i8* %274, i64 %144
  %337 = getelementptr inbounds i16, i16* %275, i64 %145
  %338 = bitcast i8* %336 to i64*
  %339 = load i64, i64* %338, align 1
  %340 = insertelement <2 x i64> undef, i64 %339, i32 0
  %341 = bitcast <2 x i64> %340 to <16 x i8>
  %342 = shufflevector <16 x i8> %341, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %343 = zext <8 x i8> %342 to <8 x i16>
  %344 = getelementptr inbounds i8, i8* %336, i64 %4
  %345 = bitcast i8* %344 to i64*
  %346 = load i64, i64* %345, align 1
  %347 = insertelement <2 x i64> undef, i64 %346, i32 0
  %348 = bitcast <2 x i64> %347 to <16 x i8>
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %350 = zext <8 x i8> %349 to <8 x i16>
  %351 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %343, <8 x i16> %350) #6
  %352 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %351, <8 x i16> zeroinitializer) #6
  %353 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %352
  %354 = bitcast i16* %334 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 1
  %356 = bitcast i16* %335 to i64*
  %357 = load i64, i64* %356, align 1
  %358 = insertelement <2 x i64> undef, i64 %357, i32 0
  %359 = getelementptr inbounds i16, i16* %335, i64 %2
  %360 = bitcast <2 x i64> %358 to <4 x float>
  %361 = bitcast i16* %359 to <2 x float>*
  %362 = load <2 x float>, <2 x float>* %361, align 1
  %363 = shufflevector <2 x float> %362, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = shufflevector <4 x float> %360, <4 x float> %363, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %365 = mul <8 x i16> %355, %352
  %366 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %355, <8 x i16> %352) #6
  %367 = bitcast <4 x float> %364 to <8 x i16>
  %368 = mul <8 x i16> %353, %367
  %369 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %367, <8 x i16> %353) #6
  %370 = shufflevector <8 x i16> %365, <8 x i16> %366, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %371 = shufflevector <8 x i16> %365, <8 x i16> %366, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %372 = shufflevector <8 x i16> %368, <8 x i16> %369, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %373 = shufflevector <8 x i16> %368, <8 x i16> %369, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %374 = bitcast <8 x i16> %370 to <4 x i32>
  %375 = bitcast <8 x i16> %372 to <4 x i32>
  %376 = add <4 x i32> %375, %374
  %377 = bitcast <8 x i16> %371 to <4 x i32>
  %378 = bitcast <8 x i16> %373 to <4 x i32>
  %379 = add <4 x i32> %378, %377
  %380 = lshr <4 x i32> %376, <i32 6, i32 6, i32 6, i32 6>
  %381 = lshr <4 x i32> %379, <i32 6, i32 6, i32 6, i32 6>
  %382 = add nsw <4 x i32> %380, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %383 = ashr <4 x i32> %382, <i32 4, i32 4, i32 4, i32 4>
  %384 = add nsw <4 x i32> %381, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %385 = ashr <4 x i32> %384, <i32 4, i32 4, i32 4, i32 4>
  %386 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %383, <4 x i32> %385) #6
  %387 = icmp slt <8 x i16> %386, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %388 = select <8 x i1> %387, <8 x i16> %386, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %389 = bitcast <8 x i16> %388 to <2 x i64>
  %390 = extractelement <2 x i64> %389, i32 0
  %391 = bitcast i16* %337 to i64*
  store i64 %390, i64* %391, align 1
  %392 = getelementptr inbounds i16, i16* %337, i64 %11
  %393 = bitcast <8 x i16> %388 to <4 x float>
  %394 = shufflevector <4 x float> %393, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %395 = bitcast i16* %392 to <2 x float>*
  store <2 x float> %394, <2 x float>* %395, align 1
  %396 = getelementptr inbounds i16, i16* %150, i64 32
  %397 = getelementptr inbounds i16, i16* %335, i64 %143
  %398 = getelementptr inbounds i8, i8* %336, i64 %144
  %399 = getelementptr inbounds i16, i16* %337, i64 %145
  %400 = add nsw i32 %151, -8
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %463, label %146

402:                                              ; preds = %9, %456
  %403 = phi i32 [ %461, %456 ], [ %6, %9 ]
  %404 = phi i8* [ %460, %456 ], [ %3, %9 ]
  %405 = phi i16* [ %459, %456 ], [ %13, %9 ]
  %406 = phi i16* [ %458, %456 ], [ %12, %9 ]
  %407 = phi i16* [ %457, %456 ], [ %10, %9 ]
  br label %408

408:                                              ; preds = %408, %402
  %409 = phi i64 [ %454, %408 ], [ 0, %402 ]
  %410 = trunc i64 %409 to i32
  %411 = shl i32 %410, 1
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %404, i64 %412
  %414 = bitcast i8* %413 to <16 x i8>*
  %415 = load <16 x i8>, <16 x i8>* %414, align 1
  %416 = shufflevector <16 x i8> %415, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %417 = zext <8 x i8> %416 to <8 x i16>
  %418 = shufflevector <16 x i8> %415, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %419 = zext <8 x i8> %418 to <8 x i16>
  %420 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %417, <8 x i16> %419) #6
  %421 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %420, <8 x i16> zeroinitializer) #6
  %422 = getelementptr inbounds i16, i16* %406, i64 %409
  %423 = bitcast i16* %422 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 1
  %425 = getelementptr inbounds i16, i16* %405, i64 %409
  %426 = bitcast i16* %425 to <8 x i16>*
  %427 = load <8 x i16>, <8 x i16>* %426, align 1
  %428 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %421
  %429 = mul <8 x i16> %424, %421
  %430 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %424, <8 x i16> %421) #6
  %431 = mul <8 x i16> %427, %428
  %432 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %427, <8 x i16> %428) #6
  %433 = shufflevector <8 x i16> %429, <8 x i16> %430, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %434 = shufflevector <8 x i16> %429, <8 x i16> %430, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %435 = shufflevector <8 x i16> %431, <8 x i16> %432, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %436 = shufflevector <8 x i16> %431, <8 x i16> %432, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %437 = bitcast <8 x i16> %433 to <4 x i32>
  %438 = bitcast <8 x i16> %435 to <4 x i32>
  %439 = add <4 x i32> %438, %437
  %440 = bitcast <8 x i16> %434 to <4 x i32>
  %441 = bitcast <8 x i16> %436 to <4 x i32>
  %442 = add <4 x i32> %441, %440
  %443 = lshr <4 x i32> %439, <i32 6, i32 6, i32 6, i32 6>
  %444 = lshr <4 x i32> %442, <i32 6, i32 6, i32 6, i32 6>
  %445 = add nsw <4 x i32> %443, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %446 = ashr <4 x i32> %445, <i32 4, i32 4, i32 4, i32 4>
  %447 = add nsw <4 x i32> %444, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %448 = ashr <4 x i32> %447, <i32 4, i32 4, i32 4, i32 4>
  %449 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %446, <4 x i32> %448) #6
  %450 = icmp slt <8 x i16> %449, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %451 = select <8 x i1> %450, <8 x i16> %449, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %452 = getelementptr inbounds i16, i16* %407, i64 %409
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 1
  %454 = add nuw nsw i64 %409, 8
  %455 = icmp slt i64 %454, %14
  br i1 %455, label %408, label %456

456:                                              ; preds = %408
  %457 = getelementptr inbounds i16, i16* %407, i64 %11
  %458 = getelementptr inbounds i16, i16* %406, i64 %14
  %459 = getelementptr inbounds i16, i16* %405, i64 %2
  %460 = getelementptr inbounds i8, i8* %404, i64 %4
  %461 = add nsw i32 %403, -1
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %463, label %402

463:                                              ; preds = %456, %146, %18
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_121MaskBlend10bpp_SSE4_1ILi1ELi1EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %464

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %163

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = shl i64 %4, 1
  %23 = getelementptr inbounds i8, i8* %3, i64 %22
  %24 = bitcast <2 x i64> %21 to <4 x float>
  %25 = bitcast i8* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 1
  %27 = shufflevector <2 x float> %26, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <4 x float> %24, <4 x float> %27, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = getelementptr inbounds i8, i8* %3, i64 %4
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = getelementptr inbounds i8, i8* %23, i64 %4
  %34 = bitcast <2 x i64> %32 to <4 x float>
  %35 = bitcast i8* %33 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x float> %34, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = bitcast <4 x float> %28 to <16 x i8>
  %40 = bitcast <4 x float> %38 to <16 x i8>
  %41 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %39, <16 x i8> %40) #6
  %42 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %41, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %43 = lshr <8 x i16> %42, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %44 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %43, <8 x i16> zeroinitializer) #6
  %45 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %44
  %46 = bitcast i8* %0 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = bitcast i8* %1 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = getelementptr inbounds i16, i16* %13, i64 %2
  %52 = bitcast <2 x i64> %50 to <4 x float>
  %53 = bitcast i16* %51 to <2 x float>*
  %54 = load <2 x float>, <2 x float>* %53, align 1
  %55 = shufflevector <2 x float> %54, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x float> %52, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = mul <8 x i16> %47, %44
  %58 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %47, <8 x i16> %44) #6
  %59 = bitcast <4 x float> %56 to <8 x i16>
  %60 = mul <8 x i16> %45, %59
  %61 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %59, <8 x i16> %45) #6
  %62 = shufflevector <8 x i16> %57, <8 x i16> %58, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %63 = shufflevector <8 x i16> %57, <8 x i16> %58, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = shufflevector <8 x i16> %60, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = shufflevector <8 x i16> %60, <8 x i16> %61, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %66 = bitcast <8 x i16> %62 to <4 x i32>
  %67 = bitcast <8 x i16> %64 to <4 x i32>
  %68 = add <4 x i32> %67, %66
  %69 = bitcast <8 x i16> %63 to <4 x i32>
  %70 = bitcast <8 x i16> %65 to <4 x i32>
  %71 = add <4 x i32> %70, %69
  %72 = lshr <4 x i32> %68, <i32 6, i32 6, i32 6, i32 6>
  %73 = lshr <4 x i32> %71, <i32 6, i32 6, i32 6, i32 6>
  %74 = add nsw <4 x i32> %72, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %75 = ashr <4 x i32> %74, <i32 4, i32 4, i32 4, i32 4>
  %76 = add nsw <4 x i32> %73, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %77 = ashr <4 x i32> %76, <i32 4, i32 4, i32 4, i32 4>
  %78 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %75, <4 x i32> %77) #6
  %79 = icmp slt <8 x i16> %78, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = bitcast i8* %7 to i64*
  store i64 %82, i64* %83, align 1
  %84 = getelementptr inbounds i16, i16* %10, i64 %11
  %85 = bitcast <8 x i16> %80 to <4 x float>
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast i16* %84 to <2 x float>*
  store <2 x float> %86, <2 x float>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %0, i64 16
  %89 = shl i64 %2, 1
  %90 = getelementptr inbounds i16, i16* %13, i64 %89
  %91 = shl i64 %4, 2
  %92 = getelementptr inbounds i8, i8* %3, i64 %91
  %93 = and i64 %8, -2
  %94 = getelementptr inbounds i16, i16* %10, i64 %93
  %95 = bitcast i8* %92 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = getelementptr inbounds i8, i8* %92, i64 %22
  %99 = bitcast <2 x i64> %97 to <4 x float>
  %100 = bitcast i8* %98 to <2 x float>*
  %101 = load <2 x float>, <2 x float>* %100, align 1
  %102 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <4 x float> %99, <4 x float> %102, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %104 = getelementptr inbounds i8, i8* %92, i64 %4
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = getelementptr inbounds i8, i8* %98, i64 %4
  %109 = bitcast <2 x i64> %107 to <4 x float>
  %110 = bitcast i8* %108 to <2 x float>*
  %111 = load <2 x float>, <2 x float>* %110, align 1
  %112 = shufflevector <2 x float> %111, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <4 x float> %109, <4 x float> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = bitcast <4 x float> %103 to <16 x i8>
  %115 = bitcast <4 x float> %113 to <16 x i8>
  %116 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %114, <16 x i8> %115) #6
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %116, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %118 = lshr <8 x i16> %117, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #6
  %120 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %119
  %121 = bitcast i8* %88 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = bitcast i16* %90 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = insertelement <2 x i64> undef, i64 %124, i32 0
  %126 = getelementptr inbounds i16, i16* %90, i64 %2
  %127 = bitcast <2 x i64> %125 to <4 x float>
  %128 = bitcast i16* %126 to <2 x float>*
  %129 = load <2 x float>, <2 x float>* %128, align 1
  %130 = shufflevector <2 x float> %129, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %131 = shufflevector <4 x float> %127, <4 x float> %130, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %132 = mul <8 x i16> %122, %119
  %133 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %122, <8 x i16> %119) #6
  %134 = bitcast <4 x float> %131 to <8 x i16>
  %135 = mul <8 x i16> %120, %134
  %136 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %134, <8 x i16> %120) #6
  %137 = shufflevector <8 x i16> %132, <8 x i16> %133, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = shufflevector <8 x i16> %132, <8 x i16> %133, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %139 = shufflevector <8 x i16> %135, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %140 = shufflevector <8 x i16> %135, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %141 = bitcast <8 x i16> %137 to <4 x i32>
  %142 = bitcast <8 x i16> %139 to <4 x i32>
  %143 = add <4 x i32> %142, %141
  %144 = bitcast <8 x i16> %138 to <4 x i32>
  %145 = bitcast <8 x i16> %140 to <4 x i32>
  %146 = add <4 x i32> %145, %144
  %147 = lshr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %148 = lshr <4 x i32> %146, <i32 6, i32 6, i32 6, i32 6>
  %149 = add nsw <4 x i32> %147, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %150 = ashr <4 x i32> %149, <i32 4, i32 4, i32 4, i32 4>
  %151 = add nsw <4 x i32> %148, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %152 = ashr <4 x i32> %151, <i32 4, i32 4, i32 4, i32 4>
  %153 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %150, <4 x i32> %152) #6
  %154 = icmp slt <8 x i16> %153, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %155 = select <8 x i1> %154, <8 x i16> %153, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = bitcast i16* %94 to i64*
  store i64 %157, i64* %158, align 1
  %159 = getelementptr inbounds i16, i16* %94, i64 %11
  %160 = bitcast <8 x i16> %155 to <4 x float>
  %161 = shufflevector <4 x float> %160, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %162 = bitcast i16* %159 to <2 x float>*
  store <2 x float> %161, <2 x float>* %162, align 1
  br label %528

163:                                              ; preds = %16
  %164 = shl i64 %2, 1
  %165 = shl i64 %4, 2
  %166 = and i64 %8, -2
  %167 = shl i64 %4, 1
  br label %168

168:                                              ; preds = %168, %163
  %169 = phi i16* [ %10, %163 ], [ %461, %168 ]
  %170 = phi i16* [ %13, %163 ], [ %459, %168 ]
  %171 = phi i8* [ %3, %163 ], [ %460, %168 ]
  %172 = phi i16* [ %12, %163 ], [ %458, %168 ]
  %173 = phi i32 [ %6, %163 ], [ %462, %168 ]
  %174 = bitcast i8* %171 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = insertelement <2 x i64> undef, i64 %175, i32 0
  %177 = getelementptr inbounds i8, i8* %171, i64 %167
  %178 = bitcast <2 x i64> %176 to <4 x float>
  %179 = bitcast i8* %177 to <2 x float>*
  %180 = load <2 x float>, <2 x float>* %179, align 1
  %181 = shufflevector <2 x float> %180, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %182 = shufflevector <4 x float> %178, <4 x float> %181, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %183 = getelementptr inbounds i8, i8* %171, i64 %4
  %184 = bitcast i8* %183 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = getelementptr inbounds i8, i8* %177, i64 %4
  %188 = bitcast <2 x i64> %186 to <4 x float>
  %189 = bitcast i8* %187 to <2 x float>*
  %190 = load <2 x float>, <2 x float>* %189, align 1
  %191 = shufflevector <2 x float> %190, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = shufflevector <4 x float> %188, <4 x float> %191, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %193 = bitcast <4 x float> %182 to <16 x i8>
  %194 = bitcast <4 x float> %192 to <16 x i8>
  %195 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %193, <16 x i8> %194) #6
  %196 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %195, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %197 = lshr <8 x i16> %196, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %198 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %197, <8 x i16> zeroinitializer) #6
  %199 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %198
  %200 = bitcast i16* %172 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = bitcast i16* %170 to i64*
  %203 = load i64, i64* %202, align 1
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = getelementptr inbounds i16, i16* %170, i64 %2
  %206 = bitcast <2 x i64> %204 to <4 x float>
  %207 = bitcast i16* %205 to <2 x float>*
  %208 = load <2 x float>, <2 x float>* %207, align 1
  %209 = shufflevector <2 x float> %208, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %210 = shufflevector <4 x float> %206, <4 x float> %209, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %211 = mul <8 x i16> %201, %198
  %212 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %201, <8 x i16> %198) #6
  %213 = bitcast <4 x float> %210 to <8 x i16>
  %214 = mul <8 x i16> %199, %213
  %215 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %213, <8 x i16> %199) #6
  %216 = shufflevector <8 x i16> %211, <8 x i16> %212, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %217 = shufflevector <8 x i16> %211, <8 x i16> %212, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %214, <8 x i16> %215, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %219 = shufflevector <8 x i16> %214, <8 x i16> %215, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %220 = bitcast <8 x i16> %216 to <4 x i32>
  %221 = bitcast <8 x i16> %218 to <4 x i32>
  %222 = add <4 x i32> %221, %220
  %223 = bitcast <8 x i16> %217 to <4 x i32>
  %224 = bitcast <8 x i16> %219 to <4 x i32>
  %225 = add <4 x i32> %224, %223
  %226 = lshr <4 x i32> %222, <i32 6, i32 6, i32 6, i32 6>
  %227 = lshr <4 x i32> %225, <i32 6, i32 6, i32 6, i32 6>
  %228 = add nsw <4 x i32> %226, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %229 = ashr <4 x i32> %228, <i32 4, i32 4, i32 4, i32 4>
  %230 = add nsw <4 x i32> %227, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %231 = ashr <4 x i32> %230, <i32 4, i32 4, i32 4, i32 4>
  %232 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %229, <4 x i32> %231) #6
  %233 = icmp slt <8 x i16> %232, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %234 = select <8 x i1> %233, <8 x i16> %232, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %235 = bitcast <8 x i16> %234 to <2 x i64>
  %236 = extractelement <2 x i64> %235, i32 0
  %237 = bitcast i16* %169 to i64*
  store i64 %236, i64* %237, align 1
  %238 = getelementptr inbounds i16, i16* %169, i64 %11
  %239 = bitcast <8 x i16> %234 to <4 x float>
  %240 = shufflevector <4 x float> %239, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %241 = bitcast i16* %238 to <2 x float>*
  store <2 x float> %240, <2 x float>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %172, i64 8
  %243 = getelementptr inbounds i16, i16* %170, i64 %164
  %244 = getelementptr inbounds i8, i8* %171, i64 %165
  %245 = getelementptr inbounds i16, i16* %169, i64 %166
  %246 = bitcast i8* %244 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> undef, i64 %247, i32 0
  %249 = getelementptr inbounds i8, i8* %244, i64 %167
  %250 = bitcast <2 x i64> %248 to <4 x float>
  %251 = bitcast i8* %249 to <2 x float>*
  %252 = load <2 x float>, <2 x float>* %251, align 1
  %253 = shufflevector <2 x float> %252, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = shufflevector <4 x float> %250, <4 x float> %253, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %255 = getelementptr inbounds i8, i8* %244, i64 %4
  %256 = bitcast i8* %255 to i64*
  %257 = load i64, i64* %256, align 1
  %258 = insertelement <2 x i64> undef, i64 %257, i32 0
  %259 = getelementptr inbounds i8, i8* %249, i64 %4
  %260 = bitcast <2 x i64> %258 to <4 x float>
  %261 = bitcast i8* %259 to <2 x float>*
  %262 = load <2 x float>, <2 x float>* %261, align 1
  %263 = shufflevector <2 x float> %262, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %264 = shufflevector <4 x float> %260, <4 x float> %263, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %265 = bitcast <4 x float> %254 to <16 x i8>
  %266 = bitcast <4 x float> %264 to <16 x i8>
  %267 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %265, <16 x i8> %266) #6
  %268 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %269 = lshr <8 x i16> %268, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %270 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %269, <8 x i16> zeroinitializer) #6
  %271 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = bitcast i16* %242 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = bitcast i16* %243 to i64*
  %275 = load i64, i64* %274, align 1
  %276 = insertelement <2 x i64> undef, i64 %275, i32 0
  %277 = getelementptr inbounds i16, i16* %243, i64 %2
  %278 = bitcast <2 x i64> %276 to <4 x float>
  %279 = bitcast i16* %277 to <2 x float>*
  %280 = load <2 x float>, <2 x float>* %279, align 1
  %281 = shufflevector <2 x float> %280, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %282 = shufflevector <4 x float> %278, <4 x float> %281, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %283 = mul <8 x i16> %273, %270
  %284 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %273, <8 x i16> %270) #6
  %285 = bitcast <4 x float> %282 to <8 x i16>
  %286 = mul <8 x i16> %271, %285
  %287 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %285, <8 x i16> %271) #6
  %288 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %289 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %290 = shufflevector <8 x i16> %286, <8 x i16> %287, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %291 = shufflevector <8 x i16> %286, <8 x i16> %287, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %292 = bitcast <8 x i16> %288 to <4 x i32>
  %293 = bitcast <8 x i16> %290 to <4 x i32>
  %294 = add <4 x i32> %293, %292
  %295 = bitcast <8 x i16> %289 to <4 x i32>
  %296 = bitcast <8 x i16> %291 to <4 x i32>
  %297 = add <4 x i32> %296, %295
  %298 = lshr <4 x i32> %294, <i32 6, i32 6, i32 6, i32 6>
  %299 = lshr <4 x i32> %297, <i32 6, i32 6, i32 6, i32 6>
  %300 = add nsw <4 x i32> %298, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %301 = ashr <4 x i32> %300, <i32 4, i32 4, i32 4, i32 4>
  %302 = add nsw <4 x i32> %299, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %303 = ashr <4 x i32> %302, <i32 4, i32 4, i32 4, i32 4>
  %304 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %301, <4 x i32> %303) #6
  %305 = icmp slt <8 x i16> %304, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %306 = select <8 x i1> %305, <8 x i16> %304, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %307 = bitcast <8 x i16> %306 to <2 x i64>
  %308 = extractelement <2 x i64> %307, i32 0
  %309 = bitcast i16* %245 to i64*
  store i64 %308, i64* %309, align 1
  %310 = getelementptr inbounds i16, i16* %245, i64 %11
  %311 = bitcast <8 x i16> %306 to <4 x float>
  %312 = shufflevector <4 x float> %311, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %313 = bitcast i16* %310 to <2 x float>*
  store <2 x float> %312, <2 x float>* %313, align 1
  %314 = getelementptr inbounds i16, i16* %172, i64 16
  %315 = getelementptr inbounds i16, i16* %243, i64 %164
  %316 = getelementptr inbounds i8, i8* %244, i64 %165
  %317 = getelementptr inbounds i16, i16* %245, i64 %166
  %318 = bitcast i8* %316 to i64*
  %319 = load i64, i64* %318, align 1
  %320 = insertelement <2 x i64> undef, i64 %319, i32 0
  %321 = getelementptr inbounds i8, i8* %316, i64 %167
  %322 = bitcast <2 x i64> %320 to <4 x float>
  %323 = bitcast i8* %321 to <2 x float>*
  %324 = load <2 x float>, <2 x float>* %323, align 1
  %325 = shufflevector <2 x float> %324, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %326 = shufflevector <4 x float> %322, <4 x float> %325, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %327 = getelementptr inbounds i8, i8* %316, i64 %4
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %328, align 1
  %330 = insertelement <2 x i64> undef, i64 %329, i32 0
  %331 = getelementptr inbounds i8, i8* %321, i64 %4
  %332 = bitcast <2 x i64> %330 to <4 x float>
  %333 = bitcast i8* %331 to <2 x float>*
  %334 = load <2 x float>, <2 x float>* %333, align 1
  %335 = shufflevector <2 x float> %334, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %336 = shufflevector <4 x float> %332, <4 x float> %335, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %337 = bitcast <4 x float> %326 to <16 x i8>
  %338 = bitcast <4 x float> %336 to <16 x i8>
  %339 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %337, <16 x i8> %338) #6
  %340 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %339, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %341 = lshr <8 x i16> %340, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %342 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %341, <8 x i16> zeroinitializer) #6
  %343 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %342
  %344 = bitcast i16* %314 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 1
  %346 = bitcast i16* %315 to i64*
  %347 = load i64, i64* %346, align 1
  %348 = insertelement <2 x i64> undef, i64 %347, i32 0
  %349 = getelementptr inbounds i16, i16* %315, i64 %2
  %350 = bitcast <2 x i64> %348 to <4 x float>
  %351 = bitcast i16* %349 to <2 x float>*
  %352 = load <2 x float>, <2 x float>* %351, align 1
  %353 = shufflevector <2 x float> %352, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %354 = shufflevector <4 x float> %350, <4 x float> %353, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %355 = mul <8 x i16> %345, %342
  %356 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %345, <8 x i16> %342) #6
  %357 = bitcast <4 x float> %354 to <8 x i16>
  %358 = mul <8 x i16> %343, %357
  %359 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %357, <8 x i16> %343) #6
  %360 = shufflevector <8 x i16> %355, <8 x i16> %356, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %361 = shufflevector <8 x i16> %355, <8 x i16> %356, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %362 = shufflevector <8 x i16> %358, <8 x i16> %359, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %363 = shufflevector <8 x i16> %358, <8 x i16> %359, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %364 = bitcast <8 x i16> %360 to <4 x i32>
  %365 = bitcast <8 x i16> %362 to <4 x i32>
  %366 = add <4 x i32> %365, %364
  %367 = bitcast <8 x i16> %361 to <4 x i32>
  %368 = bitcast <8 x i16> %363 to <4 x i32>
  %369 = add <4 x i32> %368, %367
  %370 = lshr <4 x i32> %366, <i32 6, i32 6, i32 6, i32 6>
  %371 = lshr <4 x i32> %369, <i32 6, i32 6, i32 6, i32 6>
  %372 = add nsw <4 x i32> %370, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %373 = ashr <4 x i32> %372, <i32 4, i32 4, i32 4, i32 4>
  %374 = add nsw <4 x i32> %371, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %375 = ashr <4 x i32> %374, <i32 4, i32 4, i32 4, i32 4>
  %376 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %373, <4 x i32> %375) #6
  %377 = icmp slt <8 x i16> %376, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %378 = select <8 x i1> %377, <8 x i16> %376, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %379 = bitcast <8 x i16> %378 to <2 x i64>
  %380 = extractelement <2 x i64> %379, i32 0
  %381 = bitcast i16* %317 to i64*
  store i64 %380, i64* %381, align 1
  %382 = getelementptr inbounds i16, i16* %317, i64 %11
  %383 = bitcast <8 x i16> %378 to <4 x float>
  %384 = shufflevector <4 x float> %383, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %385 = bitcast i16* %382 to <2 x float>*
  store <2 x float> %384, <2 x float>* %385, align 1
  %386 = getelementptr inbounds i16, i16* %172, i64 24
  %387 = getelementptr inbounds i16, i16* %315, i64 %164
  %388 = getelementptr inbounds i8, i8* %316, i64 %165
  %389 = getelementptr inbounds i16, i16* %317, i64 %166
  %390 = bitcast i8* %388 to i64*
  %391 = load i64, i64* %390, align 1
  %392 = insertelement <2 x i64> undef, i64 %391, i32 0
  %393 = getelementptr inbounds i8, i8* %388, i64 %167
  %394 = bitcast <2 x i64> %392 to <4 x float>
  %395 = bitcast i8* %393 to <2 x float>*
  %396 = load <2 x float>, <2 x float>* %395, align 1
  %397 = shufflevector <2 x float> %396, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %398 = shufflevector <4 x float> %394, <4 x float> %397, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %399 = getelementptr inbounds i8, i8* %388, i64 %4
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 1
  %402 = insertelement <2 x i64> undef, i64 %401, i32 0
  %403 = getelementptr inbounds i8, i8* %393, i64 %4
  %404 = bitcast <2 x i64> %402 to <4 x float>
  %405 = bitcast i8* %403 to <2 x float>*
  %406 = load <2 x float>, <2 x float>* %405, align 1
  %407 = shufflevector <2 x float> %406, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %408 = shufflevector <4 x float> %404, <4 x float> %407, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %409 = bitcast <4 x float> %398 to <16 x i8>
  %410 = bitcast <4 x float> %408 to <16 x i8>
  %411 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %409, <16 x i8> %410) #6
  %412 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %411, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %413 = lshr <8 x i16> %412, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %414 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %413, <8 x i16> zeroinitializer) #6
  %415 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %414
  %416 = bitcast i16* %386 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 1
  %418 = bitcast i16* %387 to i64*
  %419 = load i64, i64* %418, align 1
  %420 = insertelement <2 x i64> undef, i64 %419, i32 0
  %421 = getelementptr inbounds i16, i16* %387, i64 %2
  %422 = bitcast <2 x i64> %420 to <4 x float>
  %423 = bitcast i16* %421 to <2 x float>*
  %424 = load <2 x float>, <2 x float>* %423, align 1
  %425 = shufflevector <2 x float> %424, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %426 = shufflevector <4 x float> %422, <4 x float> %425, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %427 = mul <8 x i16> %417, %414
  %428 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %417, <8 x i16> %414) #6
  %429 = bitcast <4 x float> %426 to <8 x i16>
  %430 = mul <8 x i16> %415, %429
  %431 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %429, <8 x i16> %415) #6
  %432 = shufflevector <8 x i16> %427, <8 x i16> %428, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %433 = shufflevector <8 x i16> %427, <8 x i16> %428, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %434 = shufflevector <8 x i16> %430, <8 x i16> %431, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %435 = shufflevector <8 x i16> %430, <8 x i16> %431, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %436 = bitcast <8 x i16> %432 to <4 x i32>
  %437 = bitcast <8 x i16> %434 to <4 x i32>
  %438 = add <4 x i32> %437, %436
  %439 = bitcast <8 x i16> %433 to <4 x i32>
  %440 = bitcast <8 x i16> %435 to <4 x i32>
  %441 = add <4 x i32> %440, %439
  %442 = lshr <4 x i32> %438, <i32 6, i32 6, i32 6, i32 6>
  %443 = lshr <4 x i32> %441, <i32 6, i32 6, i32 6, i32 6>
  %444 = add nsw <4 x i32> %442, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %445 = ashr <4 x i32> %444, <i32 4, i32 4, i32 4, i32 4>
  %446 = add nsw <4 x i32> %443, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %447 = ashr <4 x i32> %446, <i32 4, i32 4, i32 4, i32 4>
  %448 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %445, <4 x i32> %447) #6
  %449 = icmp slt <8 x i16> %448, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %450 = select <8 x i1> %449, <8 x i16> %448, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %451 = bitcast <8 x i16> %450 to <2 x i64>
  %452 = extractelement <2 x i64> %451, i32 0
  %453 = bitcast i16* %389 to i64*
  store i64 %452, i64* %453, align 1
  %454 = getelementptr inbounds i16, i16* %389, i64 %11
  %455 = bitcast <8 x i16> %450 to <4 x float>
  %456 = shufflevector <4 x float> %455, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %457 = bitcast i16* %454 to <2 x float>*
  store <2 x float> %456, <2 x float>* %457, align 1
  %458 = getelementptr inbounds i16, i16* %172, i64 32
  %459 = getelementptr inbounds i16, i16* %387, i64 %164
  %460 = getelementptr inbounds i8, i8* %388, i64 %165
  %461 = getelementptr inbounds i16, i16* %389, i64 %166
  %462 = add nsw i32 %173, -8
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %528, label %168

464:                                              ; preds = %9
  %465 = shl i64 %4, 1
  br label %466

466:                                              ; preds = %521, %464
  %467 = phi i32 [ %6, %464 ], [ %526, %521 ]
  %468 = phi i8* [ %3, %464 ], [ %525, %521 ]
  %469 = phi i16* [ %13, %464 ], [ %524, %521 ]
  %470 = phi i16* [ %12, %464 ], [ %523, %521 ]
  %471 = phi i16* [ %10, %464 ], [ %522, %521 ]
  br label %472

472:                                              ; preds = %472, %466
  %473 = phi i64 [ %519, %472 ], [ 0, %466 ]
  %474 = trunc i64 %473 to i32
  %475 = shl i32 %474, 1
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %468, i64 %476
  %478 = bitcast i8* %477 to <16 x i8>*
  %479 = load <16 x i8>, <16 x i8>* %478, align 1
  %480 = getelementptr inbounds i8, i8* %477, i64 %4
  %481 = bitcast i8* %480 to <16 x i8>*
  %482 = load <16 x i8>, <16 x i8>* %481, align 1
  %483 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %479, <16 x i8> %482) #6
  %484 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %483, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %485 = lshr <8 x i16> %484, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %486 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %485, <8 x i16> zeroinitializer) #6
  %487 = getelementptr inbounds i16, i16* %470, i64 %473
  %488 = bitcast i16* %487 to <8 x i16>*
  %489 = load <8 x i16>, <8 x i16>* %488, align 1
  %490 = getelementptr inbounds i16, i16* %469, i64 %473
  %491 = bitcast i16* %490 to <8 x i16>*
  %492 = load <8 x i16>, <8 x i16>* %491, align 1
  %493 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %486
  %494 = mul <8 x i16> %489, %486
  %495 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %489, <8 x i16> %486) #6
  %496 = mul <8 x i16> %492, %493
  %497 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %492, <8 x i16> %493) #6
  %498 = shufflevector <8 x i16> %494, <8 x i16> %495, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %499 = shufflevector <8 x i16> %494, <8 x i16> %495, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %500 = shufflevector <8 x i16> %496, <8 x i16> %497, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %501 = shufflevector <8 x i16> %496, <8 x i16> %497, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %502 = bitcast <8 x i16> %498 to <4 x i32>
  %503 = bitcast <8 x i16> %500 to <4 x i32>
  %504 = add <4 x i32> %503, %502
  %505 = bitcast <8 x i16> %499 to <4 x i32>
  %506 = bitcast <8 x i16> %501 to <4 x i32>
  %507 = add <4 x i32> %506, %505
  %508 = lshr <4 x i32> %504, <i32 6, i32 6, i32 6, i32 6>
  %509 = lshr <4 x i32> %507, <i32 6, i32 6, i32 6, i32 6>
  %510 = add nsw <4 x i32> %508, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %511 = ashr <4 x i32> %510, <i32 4, i32 4, i32 4, i32 4>
  %512 = add nsw <4 x i32> %509, <i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %513 = ashr <4 x i32> %512, <i32 4, i32 4, i32 4, i32 4>
  %514 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %511, <4 x i32> %513) #6
  %515 = icmp slt <8 x i16> %514, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %516 = select <8 x i1> %515, <8 x i16> %514, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %517 = getelementptr inbounds i16, i16* %471, i64 %473
  %518 = bitcast i16* %517 to <8 x i16>*
  store <8 x i16> %516, <8 x i16>* %518, align 1
  %519 = add nuw nsw i64 %473, 8
  %520 = icmp slt i64 %519, %14
  br i1 %520, label %472, label %521

521:                                              ; preds = %472
  %522 = getelementptr inbounds i16, i16* %471, i64 %11
  %523 = getelementptr inbounds i16, i16* %470, i64 %14
  %524 = getelementptr inbounds i16, i16* %469, i64 %2
  %525 = getelementptr inbounds i8, i8* %468, i64 %465
  %526 = add nsw i32 %467, -1
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %528, label %466

528:                                              ; preds = %521, %168, %18
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi0ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %318

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %114

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %3, i64 %4
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = insertelement <4 x i32> undef, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %26, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <4 x i32> %21 to <16 x i8>
  %29 = or <16 x i8> %27, %28
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %31
  %33 = bitcast i8* %0 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = bitcast i8* %1 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = getelementptr inbounds i16, i16* %13, i64 %2
  %39 = bitcast <2 x i64> %37 to <4 x float>
  %40 = bitcast i16* %38 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = shufflevector <2 x float> %41, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x float> %39, <4 x float> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = shufflevector <8 x i16> %32, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = shufflevector <8 x i16> %32, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %46 = bitcast <4 x float> %43 to <8 x i16>
  %47 = shufflevector <8 x i16> %34, <8 x i16> %46, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %48 = shufflevector <8 x i16> %34, <8 x i16> %46, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %44) #6
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %45) #6
  %51 = add <4 x i32> %49, <i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = add <4 x i32> %50, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %52, <4 x i32> %54) #6
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %7 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i16, i16* %10, i64 %11
  %60 = bitcast <8 x i16> %55 to <4 x float>
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %62 = bitcast i16* %59 to <2 x float>*
  store <2 x float> %61, <2 x float>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 16
  %64 = shl i64 %2, 1
  %65 = getelementptr inbounds i16, i16* %13, i64 %64
  %66 = shl i64 %4, 1
  %67 = getelementptr inbounds i8, i8* %3, i64 %66
  %68 = and i64 %8, -2
  %69 = getelementptr inbounds i16, i16* %10, i64 %68
  %70 = bitcast i8* %67 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %71, i32 0
  %73 = getelementptr inbounds i8, i8* %67, i64 %4
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 1
  %76 = insertelement <4 x i32> undef, i32 %75, i32 0
  %77 = bitcast <4 x i32> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %77, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %79 = bitcast <4 x i32> %72 to <16 x i8>
  %80 = or <16 x i8> %78, %79
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %82 = zext <8 x i8> %81 to <8 x i16>
  %83 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %82
  %84 = bitcast i8* %63 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 1
  %86 = bitcast i16* %65 to i64*
  %87 = load i64, i64* %86, align 1
  %88 = insertelement <2 x i64> undef, i64 %87, i32 0
  %89 = getelementptr inbounds i16, i16* %65, i64 %2
  %90 = bitcast <2 x i64> %88 to <4 x float>
  %91 = bitcast i16* %89 to <2 x float>*
  %92 = load <2 x float>, <2 x float>* %91, align 1
  %93 = shufflevector <2 x float> %92, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <4 x float> %90, <4 x float> %93, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %95 = shufflevector <8 x i16> %83, <8 x i16> %82, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %83, <8 x i16> %82, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = bitcast <4 x float> %94 to <8 x i16>
  %98 = shufflevector <8 x i16> %85, <8 x i16> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %99 = shufflevector <8 x i16> %85, <8 x i16> %97, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %95) #6
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> %96) #6
  %102 = add <4 x i32> %100, <i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <4 x i32> %102, <i32 6, i32 6, i32 6, i32 6>
  %104 = add <4 x i32> %101, <i32 32, i32 32, i32 32, i32 32>
  %105 = ashr <4 x i32> %104, <i32 6, i32 6, i32 6, i32 6>
  %106 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %103, <4 x i32> %105) #6
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  %109 = bitcast i16* %69 to i64*
  store i64 %108, i64* %109, align 1
  %110 = getelementptr inbounds i16, i16* %69, i64 %11
  %111 = bitcast <8 x i16> %106 to <4 x float>
  %112 = shufflevector <4 x float> %111, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %113 = bitcast i16* %110 to <2 x float>*
  store <2 x float> %112, <2 x float>* %113, align 1
  br label %362

114:                                              ; preds = %16
  %115 = shl i64 %2, 1
  %116 = shl i64 %4, 1
  %117 = and i64 %8, -2
  br label %118

118:                                              ; preds = %118, %114
  %119 = phi i16* [ %10, %114 ], [ %315, %118 ]
  %120 = phi i16* [ %13, %114 ], [ %313, %118 ]
  %121 = phi i8* [ %3, %114 ], [ %314, %118 ]
  %122 = phi i16* [ %12, %114 ], [ %312, %118 ]
  %123 = phi i32 [ %6, %114 ], [ %316, %118 ]
  %124 = bitcast i8* %121 to i32*
  %125 = load i32, i32* %124, align 1
  %126 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %125, i32 0
  %127 = getelementptr inbounds i8, i8* %121, i64 %4
  %128 = bitcast i8* %127 to i32*
  %129 = load i32, i32* %128, align 1
  %130 = insertelement <4 x i32> undef, i32 %129, i32 0
  %131 = bitcast <4 x i32> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %131, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <4 x i32> %126 to <16 x i8>
  %134 = or <16 x i8> %132, %133
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %136 = zext <8 x i8> %135 to <8 x i16>
  %137 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %136
  %138 = bitcast i16* %122 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = bitcast i16* %120 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = insertelement <2 x i64> undef, i64 %141, i32 0
  %143 = getelementptr inbounds i16, i16* %120, i64 %2
  %144 = bitcast <2 x i64> %142 to <4 x float>
  %145 = bitcast i16* %143 to <2 x float>*
  %146 = load <2 x float>, <2 x float>* %145, align 1
  %147 = shufflevector <2 x float> %146, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = shufflevector <4 x float> %144, <4 x float> %147, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %149 = shufflevector <8 x i16> %137, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %150 = shufflevector <8 x i16> %137, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %151 = bitcast <4 x float> %148 to <8 x i16>
  %152 = shufflevector <8 x i16> %139, <8 x i16> %151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %153 = shufflevector <8 x i16> %139, <8 x i16> %151, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %154 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %152, <8 x i16> %149) #6
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %153, <8 x i16> %150) #6
  %156 = add <4 x i32> %154, <i32 32, i32 32, i32 32, i32 32>
  %157 = ashr <4 x i32> %156, <i32 6, i32 6, i32 6, i32 6>
  %158 = add <4 x i32> %155, <i32 32, i32 32, i32 32, i32 32>
  %159 = ashr <4 x i32> %158, <i32 6, i32 6, i32 6, i32 6>
  %160 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %157, <4 x i32> %159) #6
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = extractelement <2 x i64> %161, i32 0
  %163 = bitcast i16* %119 to i64*
  store i64 %162, i64* %163, align 1
  %164 = getelementptr inbounds i16, i16* %119, i64 %11
  %165 = bitcast <8 x i16> %160 to <4 x float>
  %166 = shufflevector <4 x float> %165, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %167 = bitcast i16* %164 to <2 x float>*
  store <2 x float> %166, <2 x float>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %122, i64 8
  %169 = getelementptr inbounds i16, i16* %120, i64 %115
  %170 = getelementptr inbounds i8, i8* %121, i64 %116
  %171 = getelementptr inbounds i16, i16* %119, i64 %117
  %172 = bitcast i8* %170 to i32*
  %173 = load i32, i32* %172, align 1
  %174 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %173, i32 0
  %175 = getelementptr inbounds i8, i8* %170, i64 %4
  %176 = bitcast i8* %175 to i32*
  %177 = load i32, i32* %176, align 1
  %178 = insertelement <4 x i32> undef, i32 %177, i32 0
  %179 = bitcast <4 x i32> %178 to <16 x i8>
  %180 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %179, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = bitcast <4 x i32> %174 to <16 x i8>
  %182 = or <16 x i8> %180, %181
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %184 = zext <8 x i8> %183 to <8 x i16>
  %185 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %184
  %186 = bitcast i16* %168 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 1
  %188 = bitcast i16* %169 to i64*
  %189 = load i64, i64* %188, align 1
  %190 = insertelement <2 x i64> undef, i64 %189, i32 0
  %191 = getelementptr inbounds i16, i16* %169, i64 %2
  %192 = bitcast <2 x i64> %190 to <4 x float>
  %193 = bitcast i16* %191 to <2 x float>*
  %194 = load <2 x float>, <2 x float>* %193, align 1
  %195 = shufflevector <2 x float> %194, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %196 = shufflevector <4 x float> %192, <4 x float> %195, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %197 = shufflevector <8 x i16> %185, <8 x i16> %184, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %198 = shufflevector <8 x i16> %185, <8 x i16> %184, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %199 = bitcast <4 x float> %196 to <8 x i16>
  %200 = shufflevector <8 x i16> %187, <8 x i16> %199, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %201 = shufflevector <8 x i16> %187, <8 x i16> %199, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> %197) #6
  %203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> %198) #6
  %204 = add <4 x i32> %202, <i32 32, i32 32, i32 32, i32 32>
  %205 = ashr <4 x i32> %204, <i32 6, i32 6, i32 6, i32 6>
  %206 = add <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %207 = ashr <4 x i32> %206, <i32 6, i32 6, i32 6, i32 6>
  %208 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %205, <4 x i32> %207) #6
  %209 = bitcast <8 x i16> %208 to <2 x i64>
  %210 = extractelement <2 x i64> %209, i32 0
  %211 = bitcast i16* %171 to i64*
  store i64 %210, i64* %211, align 1
  %212 = getelementptr inbounds i16, i16* %171, i64 %11
  %213 = bitcast <8 x i16> %208 to <4 x float>
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %215 = bitcast i16* %212 to <2 x float>*
  store <2 x float> %214, <2 x float>* %215, align 1
  %216 = getelementptr inbounds i16, i16* %122, i64 16
  %217 = getelementptr inbounds i16, i16* %169, i64 %115
  %218 = getelementptr inbounds i8, i8* %170, i64 %116
  %219 = getelementptr inbounds i16, i16* %171, i64 %117
  %220 = bitcast i8* %218 to i32*
  %221 = load i32, i32* %220, align 1
  %222 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %221, i32 0
  %223 = getelementptr inbounds i8, i8* %218, i64 %4
  %224 = bitcast i8* %223 to i32*
  %225 = load i32, i32* %224, align 1
  %226 = insertelement <4 x i32> undef, i32 %225, i32 0
  %227 = bitcast <4 x i32> %226 to <16 x i8>
  %228 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %227, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %229 = bitcast <4 x i32> %222 to <16 x i8>
  %230 = or <16 x i8> %228, %229
  %231 = shufflevector <16 x i8> %230, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %232 = zext <8 x i8> %231 to <8 x i16>
  %233 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %232
  %234 = bitcast i16* %216 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 1
  %236 = bitcast i16* %217 to i64*
  %237 = load i64, i64* %236, align 1
  %238 = insertelement <2 x i64> undef, i64 %237, i32 0
  %239 = getelementptr inbounds i16, i16* %217, i64 %2
  %240 = bitcast <2 x i64> %238 to <4 x float>
  %241 = bitcast i16* %239 to <2 x float>*
  %242 = load <2 x float>, <2 x float>* %241, align 1
  %243 = shufflevector <2 x float> %242, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %244 = shufflevector <4 x float> %240, <4 x float> %243, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %245 = shufflevector <8 x i16> %233, <8 x i16> %232, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %246 = shufflevector <8 x i16> %233, <8 x i16> %232, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %247 = bitcast <4 x float> %244 to <8 x i16>
  %248 = shufflevector <8 x i16> %235, <8 x i16> %247, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %249 = shufflevector <8 x i16> %235, <8 x i16> %247, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %250 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %248, <8 x i16> %245) #6
  %251 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> %246) #6
  %252 = add <4 x i32> %250, <i32 32, i32 32, i32 32, i32 32>
  %253 = ashr <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %254 = add <4 x i32> %251, <i32 32, i32 32, i32 32, i32 32>
  %255 = ashr <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %256 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %253, <4 x i32> %255) #6
  %257 = bitcast <8 x i16> %256 to <2 x i64>
  %258 = extractelement <2 x i64> %257, i32 0
  %259 = bitcast i16* %219 to i64*
  store i64 %258, i64* %259, align 1
  %260 = getelementptr inbounds i16, i16* %219, i64 %11
  %261 = bitcast <8 x i16> %256 to <4 x float>
  %262 = shufflevector <4 x float> %261, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %263 = bitcast i16* %260 to <2 x float>*
  store <2 x float> %262, <2 x float>* %263, align 1
  %264 = getelementptr inbounds i16, i16* %122, i64 24
  %265 = getelementptr inbounds i16, i16* %217, i64 %115
  %266 = getelementptr inbounds i8, i8* %218, i64 %116
  %267 = getelementptr inbounds i16, i16* %219, i64 %117
  %268 = bitcast i8* %266 to i32*
  %269 = load i32, i32* %268, align 1
  %270 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %269, i32 0
  %271 = getelementptr inbounds i8, i8* %266, i64 %4
  %272 = bitcast i8* %271 to i32*
  %273 = load i32, i32* %272, align 1
  %274 = insertelement <4 x i32> undef, i32 %273, i32 0
  %275 = bitcast <4 x i32> %274 to <16 x i8>
  %276 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %275, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = bitcast <4 x i32> %270 to <16 x i8>
  %278 = or <16 x i8> %276, %277
  %279 = shufflevector <16 x i8> %278, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %280 = zext <8 x i8> %279 to <8 x i16>
  %281 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %280
  %282 = bitcast i16* %264 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = bitcast i16* %265 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = insertelement <2 x i64> undef, i64 %285, i32 0
  %287 = getelementptr inbounds i16, i16* %265, i64 %2
  %288 = bitcast <2 x i64> %286 to <4 x float>
  %289 = bitcast i16* %287 to <2 x float>*
  %290 = load <2 x float>, <2 x float>* %289, align 1
  %291 = shufflevector <2 x float> %290, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %292 = shufflevector <4 x float> %288, <4 x float> %291, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %293 = shufflevector <8 x i16> %281, <8 x i16> %280, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %294 = shufflevector <8 x i16> %281, <8 x i16> %280, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %295 = bitcast <4 x float> %292 to <8 x i16>
  %296 = shufflevector <8 x i16> %283, <8 x i16> %295, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %297 = shufflevector <8 x i16> %283, <8 x i16> %295, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %296, <8 x i16> %293) #6
  %299 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %297, <8 x i16> %294) #6
  %300 = add <4 x i32> %298, <i32 32, i32 32, i32 32, i32 32>
  %301 = ashr <4 x i32> %300, <i32 6, i32 6, i32 6, i32 6>
  %302 = add <4 x i32> %299, <i32 32, i32 32, i32 32, i32 32>
  %303 = ashr <4 x i32> %302, <i32 6, i32 6, i32 6, i32 6>
  %304 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %301, <4 x i32> %303) #6
  %305 = bitcast <8 x i16> %304 to <2 x i64>
  %306 = extractelement <2 x i64> %305, i32 0
  %307 = bitcast i16* %267 to i64*
  store i64 %306, i64* %307, align 1
  %308 = getelementptr inbounds i16, i16* %267, i64 %11
  %309 = bitcast <8 x i16> %304 to <4 x float>
  %310 = shufflevector <4 x float> %309, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %311 = bitcast i16* %308 to <2 x float>*
  store <2 x float> %310, <2 x float>* %311, align 1
  %312 = getelementptr inbounds i16, i16* %122, i64 32
  %313 = getelementptr inbounds i16, i16* %265, i64 %115
  %314 = getelementptr inbounds i8, i8* %266, i64 %116
  %315 = getelementptr inbounds i16, i16* %267, i64 %117
  %316 = add nsw i32 %123, -8
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %362, label %118

318:                                              ; preds = %9, %355
  %319 = phi i32 [ %360, %355 ], [ %6, %9 ]
  %320 = phi i8* [ %359, %355 ], [ %3, %9 ]
  %321 = phi i16* [ %358, %355 ], [ %13, %9 ]
  %322 = phi i16* [ %357, %355 ], [ %12, %9 ]
  %323 = phi i16* [ %356, %355 ], [ %10, %9 ]
  br label %324

324:                                              ; preds = %324, %318
  %325 = phi i64 [ %353, %324 ], [ 0, %318 ]
  %326 = getelementptr inbounds i8, i8* %320, i64 %325
  %327 = bitcast i8* %326 to i64*
  %328 = load i64, i64* %327, align 1
  %329 = insertelement <2 x i64> undef, i64 %328, i32 0
  %330 = bitcast <2 x i64> %329 to <16 x i8>
  %331 = shufflevector <16 x i8> %330, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %332 = zext <8 x i8> %331 to <8 x i16>
  %333 = getelementptr inbounds i16, i16* %322, i64 %325
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 1
  %336 = getelementptr inbounds i16, i16* %321, i64 %325
  %337 = bitcast i16* %336 to <8 x i16>*
  %338 = load <8 x i16>, <8 x i16>* %337, align 1
  %339 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %332
  %340 = shufflevector <8 x i16> %339, <8 x i16> %332, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %341 = shufflevector <8 x i16> %339, <8 x i16> %332, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %342 = shufflevector <8 x i16> %335, <8 x i16> %338, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %343 = shufflevector <8 x i16> %335, <8 x i16> %338, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %344 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %342, <8 x i16> %340) #6
  %345 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %343, <8 x i16> %341) #6
  %346 = add <4 x i32> %344, <i32 32, i32 32, i32 32, i32 32>
  %347 = ashr <4 x i32> %346, <i32 6, i32 6, i32 6, i32 6>
  %348 = add <4 x i32> %345, <i32 32, i32 32, i32 32, i32 32>
  %349 = ashr <4 x i32> %348, <i32 6, i32 6, i32 6, i32 6>
  %350 = getelementptr inbounds i16, i16* %323, i64 %325
  %351 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %347, <4 x i32> %349) #6
  %352 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %352, align 1
  %353 = add nuw nsw i64 %325, 8
  %354 = icmp slt i64 %353, %14
  br i1 %354, label %324, label %355

355:                                              ; preds = %324
  %356 = getelementptr inbounds i16, i16* %323, i64 %11
  %357 = getelementptr inbounds i16, i16* %322, i64 %14
  %358 = getelementptr inbounds i16, i16* %321, i64 %2
  %359 = getelementptr inbounds i8, i8* %320, i64 %4
  %360 = add nsw i32 %319, -1
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %362, label %318

362:                                              ; preds = %355, %118, %18
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi1ELi0EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %330

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %118

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = zext <8 x i8> %23 to <8 x i16>
  %25 = getelementptr inbounds i8, i8* %3, i64 %4
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = bitcast <2 x i64> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %24, <8 x i16> %31) #6
  %33 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %32, <8 x i16> zeroinitializer) #6
  %34 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %33
  %35 = bitcast i8* %0 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = bitcast i8* %1 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = getelementptr inbounds i16, i16* %13, i64 %2
  %41 = bitcast <2 x i64> %39 to <4 x float>
  %42 = bitcast i16* %40 to <2 x float>*
  %43 = load <2 x float>, <2 x float>* %42, align 1
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x float> %41, <4 x float> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = shufflevector <8 x i16> %34, <8 x i16> %33, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %47 = shufflevector <8 x i16> %34, <8 x i16> %33, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %48 = bitcast <4 x float> %45 to <8 x i16>
  %49 = shufflevector <8 x i16> %36, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = shufflevector <8 x i16> %36, <8 x i16> %48, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %46) #6
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %47) #6
  %53 = add <4 x i32> %51, <i32 32, i32 32, i32 32, i32 32>
  %54 = ashr <4 x i32> %53, <i32 6, i32 6, i32 6, i32 6>
  %55 = add <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %56 = ashr <4 x i32> %55, <i32 6, i32 6, i32 6, i32 6>
  %57 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %54, <4 x i32> %56) #6
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = bitcast i8* %7 to i64*
  store i64 %59, i64* %60, align 1
  %61 = getelementptr inbounds i16, i16* %10, i64 %11
  %62 = bitcast <8 x i16> %57 to <4 x float>
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %64 = bitcast i16* %61 to <2 x float>*
  store <2 x float> %63, <2 x float>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %0, i64 16
  %66 = shl i64 %2, 1
  %67 = getelementptr inbounds i16, i16* %13, i64 %66
  %68 = shl i64 %4, 1
  %69 = getelementptr inbounds i8, i8* %3, i64 %68
  %70 = and i64 %8, -2
  %71 = getelementptr inbounds i16, i16* %10, i64 %70
  %72 = bitcast i8* %69 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = bitcast <2 x i64> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %77 = zext <8 x i8> %76 to <8 x i16>
  %78 = getelementptr inbounds i8, i8* %69, i64 %4
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = bitcast <2 x i64> %81 to <16 x i8>
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %84 = zext <8 x i8> %83 to <8 x i16>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %77, <8 x i16> %84) #6
  %86 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %85, <8 x i16> zeroinitializer) #6
  %87 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %86
  %88 = bitcast i8* %65 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 1
  %90 = bitcast i16* %67 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> undef, i64 %91, i32 0
  %93 = getelementptr inbounds i16, i16* %67, i64 %2
  %94 = bitcast <2 x i64> %92 to <4 x float>
  %95 = bitcast i16* %93 to <2 x float>*
  %96 = load <2 x float>, <2 x float>* %95, align 1
  %97 = shufflevector <2 x float> %96, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x float> %94, <4 x float> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = shufflevector <8 x i16> %87, <8 x i16> %86, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %87, <8 x i16> %86, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast <4 x float> %98 to <8 x i16>
  %102 = shufflevector <8 x i16> %89, <8 x i16> %101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = shufflevector <8 x i16> %89, <8 x i16> %101, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %99) #6
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %103, <8 x i16> %100) #6
  %106 = add <4 x i32> %104, <i32 32, i32 32, i32 32, i32 32>
  %107 = ashr <4 x i32> %106, <i32 6, i32 6, i32 6, i32 6>
  %108 = add <4 x i32> %105, <i32 32, i32 32, i32 32, i32 32>
  %109 = ashr <4 x i32> %108, <i32 6, i32 6, i32 6, i32 6>
  %110 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %107, <4 x i32> %109) #6
  %111 = bitcast <8 x i16> %110 to <2 x i64>
  %112 = extractelement <2 x i64> %111, i32 0
  %113 = bitcast i16* %71 to i64*
  store i64 %112, i64* %113, align 1
  %114 = getelementptr inbounds i16, i16* %71, i64 %11
  %115 = bitcast <8 x i16> %110 to <4 x float>
  %116 = shufflevector <4 x float> %115, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %117 = bitcast i16* %114 to <2 x float>*
  store <2 x float> %116, <2 x float>* %117, align 1
  br label %379

118:                                              ; preds = %16
  %119 = shl i64 %2, 1
  %120 = shl i64 %4, 1
  %121 = and i64 %8, -2
  br label %122

122:                                              ; preds = %122, %118
  %123 = phi i16* [ %10, %118 ], [ %327, %122 ]
  %124 = phi i16* [ %13, %118 ], [ %325, %122 ]
  %125 = phi i8* [ %3, %118 ], [ %326, %122 ]
  %126 = phi i16* [ %12, %118 ], [ %324, %122 ]
  %127 = phi i32 [ %6, %118 ], [ %328, %122 ]
  %128 = bitcast i8* %125 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %133 = zext <8 x i8> %132 to <8 x i16>
  %134 = getelementptr inbounds i8, i8* %125, i64 %4
  %135 = bitcast i8* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> undef, i64 %136, i32 0
  %138 = bitcast <2 x i64> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %140 = zext <8 x i8> %139 to <8 x i16>
  %141 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %133, <8 x i16> %140) #6
  %142 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %141, <8 x i16> zeroinitializer) #6
  %143 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %142
  %144 = bitcast i16* %126 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 1
  %146 = bitcast i16* %124 to i64*
  %147 = load i64, i64* %146, align 1
  %148 = insertelement <2 x i64> undef, i64 %147, i32 0
  %149 = getelementptr inbounds i16, i16* %124, i64 %2
  %150 = bitcast <2 x i64> %148 to <4 x float>
  %151 = bitcast i16* %149 to <2 x float>*
  %152 = load <2 x float>, <2 x float>* %151, align 1
  %153 = shufflevector <2 x float> %152, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %154 = shufflevector <4 x float> %150, <4 x float> %153, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %155 = shufflevector <8 x i16> %143, <8 x i16> %142, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %156 = shufflevector <8 x i16> %143, <8 x i16> %142, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %157 = bitcast <4 x float> %154 to <8 x i16>
  %158 = shufflevector <8 x i16> %145, <8 x i16> %157, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %159 = shufflevector <8 x i16> %145, <8 x i16> %157, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> %155) #6
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> %156) #6
  %162 = add <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = add <4 x i32> %161, <i32 32, i32 32, i32 32, i32 32>
  %165 = ashr <4 x i32> %164, <i32 6, i32 6, i32 6, i32 6>
  %166 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %163, <4 x i32> %165) #6
  %167 = bitcast <8 x i16> %166 to <2 x i64>
  %168 = extractelement <2 x i64> %167, i32 0
  %169 = bitcast i16* %123 to i64*
  store i64 %168, i64* %169, align 1
  %170 = getelementptr inbounds i16, i16* %123, i64 %11
  %171 = bitcast <8 x i16> %166 to <4 x float>
  %172 = shufflevector <4 x float> %171, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %173 = bitcast i16* %170 to <2 x float>*
  store <2 x float> %172, <2 x float>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %126, i64 8
  %175 = getelementptr inbounds i16, i16* %124, i64 %119
  %176 = getelementptr inbounds i8, i8* %125, i64 %120
  %177 = getelementptr inbounds i16, i16* %123, i64 %121
  %178 = bitcast i8* %176 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = bitcast <2 x i64> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %183 = zext <8 x i8> %182 to <8 x i16>
  %184 = getelementptr inbounds i8, i8* %176, i64 %4
  %185 = bitcast i8* %184 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> undef, i64 %186, i32 0
  %188 = bitcast <2 x i64> %187 to <16 x i8>
  %189 = shufflevector <16 x i8> %188, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %190 = zext <8 x i8> %189 to <8 x i16>
  %191 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %183, <8 x i16> %190) #6
  %192 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %191, <8 x i16> zeroinitializer) #6
  %193 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %192
  %194 = bitcast i16* %174 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = bitcast i16* %175 to i64*
  %197 = load i64, i64* %196, align 1
  %198 = insertelement <2 x i64> undef, i64 %197, i32 0
  %199 = getelementptr inbounds i16, i16* %175, i64 %2
  %200 = bitcast <2 x i64> %198 to <4 x float>
  %201 = bitcast i16* %199 to <2 x float>*
  %202 = load <2 x float>, <2 x float>* %201, align 1
  %203 = shufflevector <2 x float> %202, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %204 = shufflevector <4 x float> %200, <4 x float> %203, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %205 = shufflevector <8 x i16> %193, <8 x i16> %192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = shufflevector <8 x i16> %193, <8 x i16> %192, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %207 = bitcast <4 x float> %204 to <8 x i16>
  %208 = shufflevector <8 x i16> %195, <8 x i16> %207, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %209 = shufflevector <8 x i16> %195, <8 x i16> %207, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %208, <8 x i16> %205) #6
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %206) #6
  %212 = add <4 x i32> %210, <i32 32, i32 32, i32 32, i32 32>
  %213 = ashr <4 x i32> %212, <i32 6, i32 6, i32 6, i32 6>
  %214 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %215 = ashr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %216 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %213, <4 x i32> %215) #6
  %217 = bitcast <8 x i16> %216 to <2 x i64>
  %218 = extractelement <2 x i64> %217, i32 0
  %219 = bitcast i16* %177 to i64*
  store i64 %218, i64* %219, align 1
  %220 = getelementptr inbounds i16, i16* %177, i64 %11
  %221 = bitcast <8 x i16> %216 to <4 x float>
  %222 = shufflevector <4 x float> %221, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %223 = bitcast i16* %220 to <2 x float>*
  store <2 x float> %222, <2 x float>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %126, i64 16
  %225 = getelementptr inbounds i16, i16* %175, i64 %119
  %226 = getelementptr inbounds i8, i8* %176, i64 %120
  %227 = getelementptr inbounds i16, i16* %177, i64 %121
  %228 = bitcast i8* %226 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = insertelement <2 x i64> undef, i64 %229, i32 0
  %231 = bitcast <2 x i64> %230 to <16 x i8>
  %232 = shufflevector <16 x i8> %231, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %233 = zext <8 x i8> %232 to <8 x i16>
  %234 = getelementptr inbounds i8, i8* %226, i64 %4
  %235 = bitcast i8* %234 to i64*
  %236 = load i64, i64* %235, align 1
  %237 = insertelement <2 x i64> undef, i64 %236, i32 0
  %238 = bitcast <2 x i64> %237 to <16 x i8>
  %239 = shufflevector <16 x i8> %238, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = zext <8 x i8> %239 to <8 x i16>
  %241 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %233, <8 x i16> %240) #6
  %242 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %241, <8 x i16> zeroinitializer) #6
  %243 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %242
  %244 = bitcast i16* %224 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = bitcast i16* %225 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> undef, i64 %247, i32 0
  %249 = getelementptr inbounds i16, i16* %225, i64 %2
  %250 = bitcast <2 x i64> %248 to <4 x float>
  %251 = bitcast i16* %249 to <2 x float>*
  %252 = load <2 x float>, <2 x float>* %251, align 1
  %253 = shufflevector <2 x float> %252, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = shufflevector <4 x float> %250, <4 x float> %253, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %255 = shufflevector <8 x i16> %243, <8 x i16> %242, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %256 = shufflevector <8 x i16> %243, <8 x i16> %242, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %257 = bitcast <4 x float> %254 to <8 x i16>
  %258 = shufflevector <8 x i16> %245, <8 x i16> %257, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %259 = shufflevector <8 x i16> %245, <8 x i16> %257, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %260 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> %255) #6
  %261 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %259, <8 x i16> %256) #6
  %262 = add <4 x i32> %260, <i32 32, i32 32, i32 32, i32 32>
  %263 = ashr <4 x i32> %262, <i32 6, i32 6, i32 6, i32 6>
  %264 = add <4 x i32> %261, <i32 32, i32 32, i32 32, i32 32>
  %265 = ashr <4 x i32> %264, <i32 6, i32 6, i32 6, i32 6>
  %266 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %263, <4 x i32> %265) #6
  %267 = bitcast <8 x i16> %266 to <2 x i64>
  %268 = extractelement <2 x i64> %267, i32 0
  %269 = bitcast i16* %227 to i64*
  store i64 %268, i64* %269, align 1
  %270 = getelementptr inbounds i16, i16* %227, i64 %11
  %271 = bitcast <8 x i16> %266 to <4 x float>
  %272 = shufflevector <4 x float> %271, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %273 = bitcast i16* %270 to <2 x float>*
  store <2 x float> %272, <2 x float>* %273, align 1
  %274 = getelementptr inbounds i16, i16* %126, i64 24
  %275 = getelementptr inbounds i16, i16* %225, i64 %119
  %276 = getelementptr inbounds i8, i8* %226, i64 %120
  %277 = getelementptr inbounds i16, i16* %227, i64 %121
  %278 = bitcast i8* %276 to i64*
  %279 = load i64, i64* %278, align 1
  %280 = insertelement <2 x i64> undef, i64 %279, i32 0
  %281 = bitcast <2 x i64> %280 to <16 x i8>
  %282 = shufflevector <16 x i8> %281, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %283 = zext <8 x i8> %282 to <8 x i16>
  %284 = getelementptr inbounds i8, i8* %276, i64 %4
  %285 = bitcast i8* %284 to i64*
  %286 = load i64, i64* %285, align 1
  %287 = insertelement <2 x i64> undef, i64 %286, i32 0
  %288 = bitcast <2 x i64> %287 to <16 x i8>
  %289 = shufflevector <16 x i8> %288, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %290 = zext <8 x i8> %289 to <8 x i16>
  %291 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %283, <8 x i16> %290) #6
  %292 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %291, <8 x i16> zeroinitializer) #6
  %293 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %292
  %294 = bitcast i16* %274 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = bitcast i16* %275 to i64*
  %297 = load i64, i64* %296, align 1
  %298 = insertelement <2 x i64> undef, i64 %297, i32 0
  %299 = getelementptr inbounds i16, i16* %275, i64 %2
  %300 = bitcast <2 x i64> %298 to <4 x float>
  %301 = bitcast i16* %299 to <2 x float>*
  %302 = load <2 x float>, <2 x float>* %301, align 1
  %303 = shufflevector <2 x float> %302, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %304 = shufflevector <4 x float> %300, <4 x float> %303, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %305 = shufflevector <8 x i16> %293, <8 x i16> %292, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %306 = shufflevector <8 x i16> %293, <8 x i16> %292, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = bitcast <4 x float> %304 to <8 x i16>
  %308 = shufflevector <8 x i16> %295, <8 x i16> %307, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %309 = shufflevector <8 x i16> %295, <8 x i16> %307, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %308, <8 x i16> %305) #6
  %311 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %309, <8 x i16> %306) #6
  %312 = add <4 x i32> %310, <i32 32, i32 32, i32 32, i32 32>
  %313 = ashr <4 x i32> %312, <i32 6, i32 6, i32 6, i32 6>
  %314 = add <4 x i32> %311, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %313, <4 x i32> %315) #6
  %317 = bitcast <8 x i16> %316 to <2 x i64>
  %318 = extractelement <2 x i64> %317, i32 0
  %319 = bitcast i16* %277 to i64*
  store i64 %318, i64* %319, align 1
  %320 = getelementptr inbounds i16, i16* %277, i64 %11
  %321 = bitcast <8 x i16> %316 to <4 x float>
  %322 = shufflevector <4 x float> %321, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %323 = bitcast i16* %320 to <2 x float>*
  store <2 x float> %322, <2 x float>* %323, align 1
  %324 = getelementptr inbounds i16, i16* %126, i64 32
  %325 = getelementptr inbounds i16, i16* %275, i64 %119
  %326 = getelementptr inbounds i8, i8* %276, i64 %120
  %327 = getelementptr inbounds i16, i16* %277, i64 %121
  %328 = add nsw i32 %127, -8
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %379, label %122

330:                                              ; preds = %9, %372
  %331 = phi i32 [ %377, %372 ], [ %6, %9 ]
  %332 = phi i8* [ %376, %372 ], [ %3, %9 ]
  %333 = phi i16* [ %375, %372 ], [ %13, %9 ]
  %334 = phi i16* [ %374, %372 ], [ %12, %9 ]
  %335 = phi i16* [ %373, %372 ], [ %10, %9 ]
  br label %336

336:                                              ; preds = %336, %330
  %337 = phi i64 [ %370, %336 ], [ 0, %330 ]
  %338 = trunc i64 %337 to i32
  %339 = shl i32 %338, 1
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i8, i8* %332, i64 %340
  %342 = bitcast i8* %341 to <16 x i8>*
  %343 = load <16 x i8>, <16 x i8>* %342, align 1
  %344 = shufflevector <16 x i8> %343, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %345 = zext <8 x i8> %344 to <8 x i16>
  %346 = shufflevector <16 x i8> %343, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %347 = zext <8 x i8> %346 to <8 x i16>
  %348 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %345, <8 x i16> %347) #6
  %349 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %348, <8 x i16> zeroinitializer) #6
  %350 = getelementptr inbounds i16, i16* %334, i64 %337
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 1
  %353 = getelementptr inbounds i16, i16* %333, i64 %337
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 1
  %356 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %349
  %357 = shufflevector <8 x i16> %356, <8 x i16> %349, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %358 = shufflevector <8 x i16> %356, <8 x i16> %349, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %359 = shufflevector <8 x i16> %352, <8 x i16> %355, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %360 = shufflevector <8 x i16> %352, <8 x i16> %355, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %361 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %359, <8 x i16> %357) #6
  %362 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %360, <8 x i16> %358) #6
  %363 = add <4 x i32> %361, <i32 32, i32 32, i32 32, i32 32>
  %364 = ashr <4 x i32> %363, <i32 6, i32 6, i32 6, i32 6>
  %365 = add <4 x i32> %362, <i32 32, i32 32, i32 32, i32 32>
  %366 = ashr <4 x i32> %365, <i32 6, i32 6, i32 6, i32 6>
  %367 = getelementptr inbounds i16, i16* %335, i64 %337
  %368 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %364, <4 x i32> %366) #6
  %369 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %369, align 1
  %370 = add nuw nsw i64 %337, 8
  %371 = icmp slt i64 %370, %14
  br i1 %371, label %336, label %372

372:                                              ; preds = %336
  %373 = getelementptr inbounds i16, i16* %335, i64 %11
  %374 = getelementptr inbounds i16, i16* %334, i64 %14
  %375 = getelementptr inbounds i16, i16* %333, i64 %2
  %376 = getelementptr inbounds i8, i8* %332, i64 %4
  %377 = add nsw i32 %331, -1
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %330

379:                                              ; preds = %372, %122, %18
  ret void
}

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131InterIntraMaskBlend10bpp_SSE4_1ILi1ELi1EEEvPKvS5_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = bitcast i8* %7 to i16*
  %11 = lshr i64 %8, 1
  %12 = bitcast i8* %0 to i16*
  %13 = bitcast i8* %1 to i16*
  %14 = sext i32 %5 to i64
  %15 = icmp eq i32 %5, 4
  br i1 %15, label %16, label %392

16:                                               ; preds = %9
  %17 = icmp eq i32 %6, 4
  br i1 %17, label %18, label %139

18:                                               ; preds = %16
  %19 = bitcast i8* %3 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = shl i64 %4, 1
  %23 = getelementptr inbounds i8, i8* %3, i64 %22
  %24 = bitcast <2 x i64> %21 to <4 x float>
  %25 = bitcast i8* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 1
  %27 = shufflevector <2 x float> %26, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <4 x float> %24, <4 x float> %27, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = getelementptr inbounds i8, i8* %3, i64 %4
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = getelementptr inbounds i8, i8* %23, i64 %4
  %34 = bitcast <2 x i64> %32 to <4 x float>
  %35 = bitcast i8* %33 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x float> %34, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = bitcast <4 x float> %28 to <16 x i8>
  %40 = bitcast <4 x float> %38 to <16 x i8>
  %41 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %39, <16 x i8> %40) #6
  %42 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %41, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %43 = lshr <8 x i16> %42, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %44 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %43, <8 x i16> zeroinitializer) #6
  %45 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %44
  %46 = bitcast i8* %0 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = bitcast i8* %1 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = getelementptr inbounds i16, i16* %13, i64 %2
  %52 = bitcast <2 x i64> %50 to <4 x float>
  %53 = bitcast i16* %51 to <2 x float>*
  %54 = load <2 x float>, <2 x float>* %53, align 1
  %55 = shufflevector <2 x float> %54, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x float> %52, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = shufflevector <8 x i16> %45, <8 x i16> %44, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = shufflevector <8 x i16> %45, <8 x i16> %44, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %59 = bitcast <4 x float> %56 to <8 x i16>
  %60 = shufflevector <8 x i16> %47, <8 x i16> %59, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %47, <8 x i16> %59, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %57) #6
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %61, <8 x i16> %58) #6
  %64 = add <4 x i32> %62, <i32 32, i32 32, i32 32, i32 32>
  %65 = ashr <4 x i32> %64, <i32 6, i32 6, i32 6, i32 6>
  %66 = add <4 x i32> %63, <i32 32, i32 32, i32 32, i32 32>
  %67 = ashr <4 x i32> %66, <i32 6, i32 6, i32 6, i32 6>
  %68 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %65, <4 x i32> %67) #6
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  %70 = extractelement <2 x i64> %69, i32 0
  %71 = bitcast i8* %7 to i64*
  store i64 %70, i64* %71, align 1
  %72 = getelementptr inbounds i16, i16* %10, i64 %11
  %73 = bitcast <8 x i16> %68 to <4 x float>
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %75 = bitcast i16* %72 to <2 x float>*
  store <2 x float> %74, <2 x float>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %0, i64 16
  %77 = shl i64 %2, 1
  %78 = getelementptr inbounds i16, i16* %13, i64 %77
  %79 = shl i64 %4, 2
  %80 = getelementptr inbounds i8, i8* %3, i64 %79
  %81 = and i64 %8, -2
  %82 = getelementptr inbounds i16, i16* %10, i64 %81
  %83 = bitcast i8* %80 to i64*
  %84 = load i64, i64* %83, align 1
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = getelementptr inbounds i8, i8* %80, i64 %22
  %87 = bitcast <2 x i64> %85 to <4 x float>
  %88 = bitcast i8* %86 to <2 x float>*
  %89 = load <2 x float>, <2 x float>* %88, align 1
  %90 = shufflevector <2 x float> %89, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x float> %87, <4 x float> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = getelementptr inbounds i8, i8* %80, i64 %4
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> undef, i64 %94, i32 0
  %96 = getelementptr inbounds i8, i8* %86, i64 %4
  %97 = bitcast <2 x i64> %95 to <4 x float>
  %98 = bitcast i8* %96 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 1
  %100 = shufflevector <2 x float> %99, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x float> %97, <4 x float> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x float> %91 to <16 x i8>
  %103 = bitcast <4 x float> %101 to <16 x i8>
  %104 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %102, <16 x i8> %103) #6
  %105 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %104, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %106 = lshr <8 x i16> %105, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %107 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %106, <8 x i16> zeroinitializer) #6
  %108 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %107
  %109 = bitcast i8* %76 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = bitcast i16* %78 to i64*
  %112 = load i64, i64* %111, align 1
  %113 = insertelement <2 x i64> undef, i64 %112, i32 0
  %114 = getelementptr inbounds i16, i16* %78, i64 %2
  %115 = bitcast <2 x i64> %113 to <4 x float>
  %116 = bitcast i16* %114 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 1
  %118 = shufflevector <2 x float> %117, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %119 = shufflevector <4 x float> %115, <4 x float> %118, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %120 = shufflevector <8 x i16> %108, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = shufflevector <8 x i16> %108, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %122 = bitcast <4 x float> %119 to <8 x i16>
  %123 = shufflevector <8 x i16> %110, <8 x i16> %122, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %124 = shufflevector <8 x i16> %110, <8 x i16> %122, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %123, <8 x i16> %120) #6
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %121) #6
  %127 = add <4 x i32> %125, <i32 32, i32 32, i32 32, i32 32>
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %130 = ashr <4 x i32> %129, <i32 6, i32 6, i32 6, i32 6>
  %131 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %128, <4 x i32> %130) #6
  %132 = bitcast <8 x i16> %131 to <2 x i64>
  %133 = extractelement <2 x i64> %132, i32 0
  %134 = bitcast i16* %82 to i64*
  store i64 %133, i64* %134, align 1
  %135 = getelementptr inbounds i16, i16* %82, i64 %11
  %136 = bitcast <8 x i16> %131 to <4 x float>
  %137 = shufflevector <4 x float> %136, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %138 = bitcast i16* %135 to <2 x float>*
  store <2 x float> %137, <2 x float>* %138, align 1
  br label %444

139:                                              ; preds = %16
  %140 = shl i64 %2, 1
  %141 = shl i64 %4, 2
  %142 = and i64 %8, -2
  %143 = shl i64 %4, 1
  br label %144

144:                                              ; preds = %144, %139
  %145 = phi i16* [ %10, %139 ], [ %389, %144 ]
  %146 = phi i16* [ %13, %139 ], [ %387, %144 ]
  %147 = phi i8* [ %3, %139 ], [ %388, %144 ]
  %148 = phi i16* [ %12, %139 ], [ %386, %144 ]
  %149 = phi i32 [ %6, %139 ], [ %390, %144 ]
  %150 = bitcast i8* %147 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> undef, i64 %151, i32 0
  %153 = getelementptr inbounds i8, i8* %147, i64 %143
  %154 = bitcast <2 x i64> %152 to <4 x float>
  %155 = bitcast i8* %153 to <2 x float>*
  %156 = load <2 x float>, <2 x float>* %155, align 1
  %157 = shufflevector <2 x float> %156, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x float> %154, <4 x float> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = getelementptr inbounds i8, i8* %147, i64 %4
  %160 = bitcast i8* %159 to i64*
  %161 = load i64, i64* %160, align 1
  %162 = insertelement <2 x i64> undef, i64 %161, i32 0
  %163 = getelementptr inbounds i8, i8* %153, i64 %4
  %164 = bitcast <2 x i64> %162 to <4 x float>
  %165 = bitcast i8* %163 to <2 x float>*
  %166 = load <2 x float>, <2 x float>* %165, align 1
  %167 = shufflevector <2 x float> %166, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %168 = shufflevector <4 x float> %164, <4 x float> %167, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %169 = bitcast <4 x float> %158 to <16 x i8>
  %170 = bitcast <4 x float> %168 to <16 x i8>
  %171 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %169, <16 x i8> %170) #6
  %172 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %171, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %173 = lshr <8 x i16> %172, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %174 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %173, <8 x i16> zeroinitializer) #6
  %175 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %174
  %176 = bitcast i16* %148 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 1
  %178 = bitcast i16* %146 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = getelementptr inbounds i16, i16* %146, i64 %2
  %182 = bitcast <2 x i64> %180 to <4 x float>
  %183 = bitcast i16* %181 to <2 x float>*
  %184 = load <2 x float>, <2 x float>* %183, align 1
  %185 = shufflevector <2 x float> %184, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %186 = shufflevector <4 x float> %182, <4 x float> %185, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %187 = shufflevector <8 x i16> %175, <8 x i16> %174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %188 = shufflevector <8 x i16> %175, <8 x i16> %174, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %189 = bitcast <4 x float> %186 to <8 x i16>
  %190 = shufflevector <8 x i16> %177, <8 x i16> %189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %191 = shufflevector <8 x i16> %177, <8 x i16> %189, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %190, <8 x i16> %187) #6
  %193 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %191, <8 x i16> %188) #6
  %194 = add <4 x i32> %192, <i32 32, i32 32, i32 32, i32 32>
  %195 = ashr <4 x i32> %194, <i32 6, i32 6, i32 6, i32 6>
  %196 = add <4 x i32> %193, <i32 32, i32 32, i32 32, i32 32>
  %197 = ashr <4 x i32> %196, <i32 6, i32 6, i32 6, i32 6>
  %198 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %195, <4 x i32> %197) #6
  %199 = bitcast <8 x i16> %198 to <2 x i64>
  %200 = extractelement <2 x i64> %199, i32 0
  %201 = bitcast i16* %145 to i64*
  store i64 %200, i64* %201, align 1
  %202 = getelementptr inbounds i16, i16* %145, i64 %11
  %203 = bitcast <8 x i16> %198 to <4 x float>
  %204 = shufflevector <4 x float> %203, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %205 = bitcast i16* %202 to <2 x float>*
  store <2 x float> %204, <2 x float>* %205, align 1
  %206 = getelementptr inbounds i16, i16* %148, i64 8
  %207 = getelementptr inbounds i16, i16* %146, i64 %140
  %208 = getelementptr inbounds i8, i8* %147, i64 %141
  %209 = getelementptr inbounds i16, i16* %145, i64 %142
  %210 = bitcast i8* %208 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = insertelement <2 x i64> undef, i64 %211, i32 0
  %213 = getelementptr inbounds i8, i8* %208, i64 %143
  %214 = bitcast <2 x i64> %212 to <4 x float>
  %215 = bitcast i8* %213 to <2 x float>*
  %216 = load <2 x float>, <2 x float>* %215, align 1
  %217 = shufflevector <2 x float> %216, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %218 = shufflevector <4 x float> %214, <4 x float> %217, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %219 = getelementptr inbounds i8, i8* %208, i64 %4
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> undef, i64 %221, i32 0
  %223 = getelementptr inbounds i8, i8* %213, i64 %4
  %224 = bitcast <2 x i64> %222 to <4 x float>
  %225 = bitcast i8* %223 to <2 x float>*
  %226 = load <2 x float>, <2 x float>* %225, align 1
  %227 = shufflevector <2 x float> %226, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %228 = shufflevector <4 x float> %224, <4 x float> %227, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %229 = bitcast <4 x float> %218 to <16 x i8>
  %230 = bitcast <4 x float> %228 to <16 x i8>
  %231 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %229, <16 x i8> %230) #6
  %232 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %231, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %233 = lshr <8 x i16> %232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %234 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %233, <8 x i16> zeroinitializer) #6
  %235 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %234
  %236 = bitcast i16* %206 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = bitcast i16* %207 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = insertelement <2 x i64> undef, i64 %239, i32 0
  %241 = getelementptr inbounds i16, i16* %207, i64 %2
  %242 = bitcast <2 x i64> %240 to <4 x float>
  %243 = bitcast i16* %241 to <2 x float>*
  %244 = load <2 x float>, <2 x float>* %243, align 1
  %245 = shufflevector <2 x float> %244, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %246 = shufflevector <4 x float> %242, <4 x float> %245, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %247 = shufflevector <8 x i16> %235, <8 x i16> %234, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %248 = shufflevector <8 x i16> %235, <8 x i16> %234, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %249 = bitcast <4 x float> %246 to <8 x i16>
  %250 = shufflevector <8 x i16> %237, <8 x i16> %249, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = shufflevector <8 x i16> %237, <8 x i16> %249, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %250, <8 x i16> %247) #6
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %248) #6
  %254 = add <4 x i32> %252, <i32 32, i32 32, i32 32, i32 32>
  %255 = ashr <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %256 = add <4 x i32> %253, <i32 32, i32 32, i32 32, i32 32>
  %257 = ashr <4 x i32> %256, <i32 6, i32 6, i32 6, i32 6>
  %258 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %255, <4 x i32> %257) #6
  %259 = bitcast <8 x i16> %258 to <2 x i64>
  %260 = extractelement <2 x i64> %259, i32 0
  %261 = bitcast i16* %209 to i64*
  store i64 %260, i64* %261, align 1
  %262 = getelementptr inbounds i16, i16* %209, i64 %11
  %263 = bitcast <8 x i16> %258 to <4 x float>
  %264 = shufflevector <4 x float> %263, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %265 = bitcast i16* %262 to <2 x float>*
  store <2 x float> %264, <2 x float>* %265, align 1
  %266 = getelementptr inbounds i16, i16* %148, i64 16
  %267 = getelementptr inbounds i16, i16* %207, i64 %140
  %268 = getelementptr inbounds i8, i8* %208, i64 %141
  %269 = getelementptr inbounds i16, i16* %209, i64 %142
  %270 = bitcast i8* %268 to i64*
  %271 = load i64, i64* %270, align 1
  %272 = insertelement <2 x i64> undef, i64 %271, i32 0
  %273 = getelementptr inbounds i8, i8* %268, i64 %143
  %274 = bitcast <2 x i64> %272 to <4 x float>
  %275 = bitcast i8* %273 to <2 x float>*
  %276 = load <2 x float>, <2 x float>* %275, align 1
  %277 = shufflevector <2 x float> %276, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %278 = shufflevector <4 x float> %274, <4 x float> %277, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %279 = getelementptr inbounds i8, i8* %268, i64 %4
  %280 = bitcast i8* %279 to i64*
  %281 = load i64, i64* %280, align 1
  %282 = insertelement <2 x i64> undef, i64 %281, i32 0
  %283 = getelementptr inbounds i8, i8* %273, i64 %4
  %284 = bitcast <2 x i64> %282 to <4 x float>
  %285 = bitcast i8* %283 to <2 x float>*
  %286 = load <2 x float>, <2 x float>* %285, align 1
  %287 = shufflevector <2 x float> %286, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <4 x float> %284, <4 x float> %287, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %289 = bitcast <4 x float> %278 to <16 x i8>
  %290 = bitcast <4 x float> %288 to <16 x i8>
  %291 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %289, <16 x i8> %290) #6
  %292 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %291, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %293 = lshr <8 x i16> %292, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %294 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %293, <8 x i16> zeroinitializer) #6
  %295 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %294
  %296 = bitcast i16* %266 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = bitcast i16* %267 to i64*
  %299 = load i64, i64* %298, align 1
  %300 = insertelement <2 x i64> undef, i64 %299, i32 0
  %301 = getelementptr inbounds i16, i16* %267, i64 %2
  %302 = bitcast <2 x i64> %300 to <4 x float>
  %303 = bitcast i16* %301 to <2 x float>*
  %304 = load <2 x float>, <2 x float>* %303, align 1
  %305 = shufflevector <2 x float> %304, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %306 = shufflevector <4 x float> %302, <4 x float> %305, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %307 = shufflevector <8 x i16> %295, <8 x i16> %294, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = shufflevector <8 x i16> %295, <8 x i16> %294, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %309 = bitcast <4 x float> %306 to <8 x i16>
  %310 = shufflevector <8 x i16> %297, <8 x i16> %309, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %311 = shufflevector <8 x i16> %297, <8 x i16> %309, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %312 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %310, <8 x i16> %307) #6
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %311, <8 x i16> %308) #6
  %314 = add <4 x i32> %312, <i32 32, i32 32, i32 32, i32 32>
  %315 = ashr <4 x i32> %314, <i32 6, i32 6, i32 6, i32 6>
  %316 = add <4 x i32> %313, <i32 32, i32 32, i32 32, i32 32>
  %317 = ashr <4 x i32> %316, <i32 6, i32 6, i32 6, i32 6>
  %318 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %315, <4 x i32> %317) #6
  %319 = bitcast <8 x i16> %318 to <2 x i64>
  %320 = extractelement <2 x i64> %319, i32 0
  %321 = bitcast i16* %269 to i64*
  store i64 %320, i64* %321, align 1
  %322 = getelementptr inbounds i16, i16* %269, i64 %11
  %323 = bitcast <8 x i16> %318 to <4 x float>
  %324 = shufflevector <4 x float> %323, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %325 = bitcast i16* %322 to <2 x float>*
  store <2 x float> %324, <2 x float>* %325, align 1
  %326 = getelementptr inbounds i16, i16* %148, i64 24
  %327 = getelementptr inbounds i16, i16* %267, i64 %140
  %328 = getelementptr inbounds i8, i8* %268, i64 %141
  %329 = getelementptr inbounds i16, i16* %269, i64 %142
  %330 = bitcast i8* %328 to i64*
  %331 = load i64, i64* %330, align 1
  %332 = insertelement <2 x i64> undef, i64 %331, i32 0
  %333 = getelementptr inbounds i8, i8* %328, i64 %143
  %334 = bitcast <2 x i64> %332 to <4 x float>
  %335 = bitcast i8* %333 to <2 x float>*
  %336 = load <2 x float>, <2 x float>* %335, align 1
  %337 = shufflevector <2 x float> %336, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %338 = shufflevector <4 x float> %334, <4 x float> %337, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %339 = getelementptr inbounds i8, i8* %328, i64 %4
  %340 = bitcast i8* %339 to i64*
  %341 = load i64, i64* %340, align 1
  %342 = insertelement <2 x i64> undef, i64 %341, i32 0
  %343 = getelementptr inbounds i8, i8* %333, i64 %4
  %344 = bitcast <2 x i64> %342 to <4 x float>
  %345 = bitcast i8* %343 to <2 x float>*
  %346 = load <2 x float>, <2 x float>* %345, align 1
  %347 = shufflevector <2 x float> %346, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %348 = shufflevector <4 x float> %344, <4 x float> %347, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %349 = bitcast <4 x float> %338 to <16 x i8>
  %350 = bitcast <4 x float> %348 to <16 x i8>
  %351 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %349, <16 x i8> %350) #6
  %352 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %351, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %353 = lshr <8 x i16> %352, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %354 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %353, <8 x i16> zeroinitializer) #6
  %355 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %354
  %356 = bitcast i16* %326 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 1
  %358 = bitcast i16* %327 to i64*
  %359 = load i64, i64* %358, align 1
  %360 = insertelement <2 x i64> undef, i64 %359, i32 0
  %361 = getelementptr inbounds i16, i16* %327, i64 %2
  %362 = bitcast <2 x i64> %360 to <4 x float>
  %363 = bitcast i16* %361 to <2 x float>*
  %364 = load <2 x float>, <2 x float>* %363, align 1
  %365 = shufflevector <2 x float> %364, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %366 = shufflevector <4 x float> %362, <4 x float> %365, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %367 = shufflevector <8 x i16> %355, <8 x i16> %354, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %368 = shufflevector <8 x i16> %355, <8 x i16> %354, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %369 = bitcast <4 x float> %366 to <8 x i16>
  %370 = shufflevector <8 x i16> %357, <8 x i16> %369, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %371 = shufflevector <8 x i16> %357, <8 x i16> %369, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %372 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %370, <8 x i16> %367) #6
  %373 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %371, <8 x i16> %368) #6
  %374 = add <4 x i32> %372, <i32 32, i32 32, i32 32, i32 32>
  %375 = ashr <4 x i32> %374, <i32 6, i32 6, i32 6, i32 6>
  %376 = add <4 x i32> %373, <i32 32, i32 32, i32 32, i32 32>
  %377 = ashr <4 x i32> %376, <i32 6, i32 6, i32 6, i32 6>
  %378 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %375, <4 x i32> %377) #6
  %379 = bitcast <8 x i16> %378 to <2 x i64>
  %380 = extractelement <2 x i64> %379, i32 0
  %381 = bitcast i16* %329 to i64*
  store i64 %380, i64* %381, align 1
  %382 = getelementptr inbounds i16, i16* %329, i64 %11
  %383 = bitcast <8 x i16> %378 to <4 x float>
  %384 = shufflevector <4 x float> %383, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %385 = bitcast i16* %382 to <2 x float>*
  store <2 x float> %384, <2 x float>* %385, align 1
  %386 = getelementptr inbounds i16, i16* %148, i64 32
  %387 = getelementptr inbounds i16, i16* %327, i64 %140
  %388 = getelementptr inbounds i8, i8* %328, i64 %141
  %389 = getelementptr inbounds i16, i16* %329, i64 %142
  %390 = add nsw i32 %149, -8
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %444, label %144

392:                                              ; preds = %9
  %393 = shl i64 %4, 1
  br label %394

394:                                              ; preds = %437, %392
  %395 = phi i32 [ %6, %392 ], [ %442, %437 ]
  %396 = phi i8* [ %3, %392 ], [ %441, %437 ]
  %397 = phi i16* [ %13, %392 ], [ %440, %437 ]
  %398 = phi i16* [ %12, %392 ], [ %439, %437 ]
  %399 = phi i16* [ %10, %392 ], [ %438, %437 ]
  br label %400

400:                                              ; preds = %400, %394
  %401 = phi i64 [ %435, %400 ], [ 0, %394 ]
  %402 = trunc i64 %401 to i32
  %403 = shl i32 %402, 1
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %396, i64 %404
  %406 = bitcast i8* %405 to <16 x i8>*
  %407 = load <16 x i8>, <16 x i8>* %406, align 1
  %408 = getelementptr inbounds i8, i8* %405, i64 %4
  %409 = bitcast i8* %408 to <16 x i8>*
  %410 = load <16 x i8>, <16 x i8>* %409, align 1
  %411 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %407, <16 x i8> %410) #6
  %412 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %411, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #6
  %413 = lshr <8 x i16> %412, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %414 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %413, <8 x i16> zeroinitializer) #6
  %415 = getelementptr inbounds i16, i16* %398, i64 %401
  %416 = bitcast i16* %415 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 1
  %418 = getelementptr inbounds i16, i16* %397, i64 %401
  %419 = bitcast i16* %418 to <8 x i16>*
  %420 = load <8 x i16>, <8 x i16>* %419, align 1
  %421 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %414
  %422 = shufflevector <8 x i16> %421, <8 x i16> %414, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %423 = shufflevector <8 x i16> %421, <8 x i16> %414, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %424 = shufflevector <8 x i16> %417, <8 x i16> %420, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %425 = shufflevector <8 x i16> %417, <8 x i16> %420, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %426 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %424, <8 x i16> %422) #6
  %427 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %425, <8 x i16> %423) #6
  %428 = add <4 x i32> %426, <i32 32, i32 32, i32 32, i32 32>
  %429 = ashr <4 x i32> %428, <i32 6, i32 6, i32 6, i32 6>
  %430 = add <4 x i32> %427, <i32 32, i32 32, i32 32, i32 32>
  %431 = ashr <4 x i32> %430, <i32 6, i32 6, i32 6, i32 6>
  %432 = getelementptr inbounds i16, i16* %399, i64 %401
  %433 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %429, <4 x i32> %431) #6
  %434 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %433, <8 x i16>* %434, align 1
  %435 = add nuw nsw i64 %401, 8
  %436 = icmp slt i64 %435, %14
  br i1 %436, label %400, label %437

437:                                              ; preds = %400
  %438 = getelementptr inbounds i16, i16* %399, i64 %11
  %439 = getelementptr inbounds i16, i16* %398, i64 %14
  %440 = getelementptr inbounds i16, i16* %397, i64 %2
  %441 = getelementptr inbounds i8, i8* %396, i64 %393
  %442 = add nsw i32 %395, -1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %394

444:                                              ; preds = %437, %144, %18
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
