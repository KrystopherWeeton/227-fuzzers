; ModuleID = '../../third_party/pdfium/xfa/fgas/layout/cfgas_breakpiece.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/layout/cfgas_breakpiece.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_BreakPiece = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr" }
%"class.fxcrt::UnownedPtr" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFGAS_Char*, %class.CFGAS_Char*, %"class.std::__1::__compressed_pair.13" }
%class.CFGAS_Char = type <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32, [4 x i8], %"class.fxcrt::RetainPtr", i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CFGAS_Char* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_TextUserData* }
%class.CFGAS_TextUserData = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_CSSComputedStyle* }
%class.CFX_CSSComputedStyle = type opaque
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.CFGAS_LinkUserData* }
%class.CFGAS_LinkUserData = type opaque
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.16" }
%"class.fxcrt::RetainPtr.16" = type { %"class.std::__1::unique_ptr.17" }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { i32*, i32*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN16CFGAS_BreakPieceC1Ev = hidden unnamed_addr alias void (%class.CFGAS_BreakPiece*), void (%class.CFGAS_BreakPiece*)* @_ZN16CFGAS_BreakPieceC2Ev
@_ZN16CFGAS_BreakPieceC1ERKS_ = hidden unnamed_addr alias void (%class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece*), void (%class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece*)* @_ZN16CFGAS_BreakPieceC2ERKS_
@_ZN16CFGAS_BreakPieceD1Ev = hidden unnamed_addr alias void (%class.CFGAS_BreakPiece*), void (%class.CFGAS_BreakPiece*)* @_ZN16CFGAS_BreakPieceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN16CFGAS_BreakPieceC2Ev(%class.CFGAS_BreakPiece* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 0
  store i8 1, i8* %2, align 8
  %3 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 2
  store i32 -1, i32* %4, align 8
  %5 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 8
  %7 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 20, i1 false)
  store i32 100, i32* %6, align 8
  %8 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 9
  store i32 100, i32* %8, align 4
  %9 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 10
  %10 = bitcast i32* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFGAS_BreakPieceC2ERKS_(%class.CFGAS_BreakPiece* nocapture, %class.CFGAS_BreakPiece* nocapture readonly dereferenceable(64)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 56, i1 false)
  %5 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 13
  %6 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %6, align 8
  %8 = ptrtoint %class.CFGAS_TextUserData* %7 to i64
  %9 = bitcast %"class.fxcrt::RetainPtr"* %5 to i64*
  store i64 %8, i64* %9, align 8
  %10 = icmp eq %class.CFGAS_TextUserData* %7, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %7, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, 1
  store i64 %14, i64* %12, align 8
  br label %15

15:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFGAS_BreakPieceD2Ev(%class.CFGAS_BreakPiece* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %2, align 8
  store %class.CFGAS_TextUserData* null, %class.CFGAS_TextUserData** %2, align 8
  %4 = icmp eq %class.CFGAS_TextUserData* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %3, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %3, i64 0, i32 0
  %12 = bitcast %class.CFGAS_TextUserData* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #9
  br label %16

16:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK16CFGAS_BreakPiece9GetEndPosEv(%class.CFGAS_BreakPiece* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %3, 0
  %7 = select i1 %6, i32 %3, i32 0
  %8 = add nsw i32 %7, %5
  ret i32 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 12, i32 0
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %3, align 8
  %5 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, %1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %10 = load %class.CFGAS_Char*, %class.CFGAS_Char** %9, align 8
  %11 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %10, i64 %8
  ret %class.CFGAS_Char* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16CFGAS_BreakPiece9GetStringEv(%"class.fxcrt::WideString"* noalias sret, %class.CFGAS_BreakPiece* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %3, align 8
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #9
  %4 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  tail call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* %0, i64 %6) #9
  %7 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 3
  %8 = load i32, i32* %4, align 8
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %2
  %11 = load i32, i32* %7, align 4
  %12 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 12, i32 0
  %13 = sext i32 %11 to i64
  br label %14

14:                                               ; preds = %10, %14
  %15 = phi i64 [ %13, %10 ], [ %23, %14 ]
  %16 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %18 = load %class.CFGAS_Char*, %class.CFGAS_Char** %17, align 8
  %19 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %18, i64 %15, i32 14
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext %21) #9
  %23 = add nsw i64 %15, 1
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %4, align 8
  %26 = add nsw i32 %25, %24
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %23, %27
  br i1 %28, label %14, label %29

29:                                               ; preds = %14, %2
  ret void
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #4

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #4

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16CFGAS_BreakPiece9GetWidthsEv(%"class.std::__1::vector.22"* noalias sret, %class.CFGAS_BreakPiece* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.22"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = bitcast i32** %4 to i64*
  %10 = bitcast %"class.std::__1::vector.22"* %0 to i64*
  %11 = icmp eq i32 %7, 0
  br i1 %11, label %100, label %12

12:                                               ; preds = %2
  %13 = icmp slt i32 %7, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @abort() #10
  unreachable

15:                                               ; preds = %12
  %16 = bitcast i32** %3 to i64*
  %17 = shl nsw i64 %8, 2
  %18 = tail call i8* @_Znwm(i64 %17) #11
  %19 = bitcast i8* %18 to i32*
  %20 = ptrtoint i8* %18 to i64
  %21 = getelementptr inbounds i32, i32* %19, i64 %8
  %22 = ptrtoint i32* %21 to i64
  %23 = ptrtoint i8* %18 to i64
  store i64 %23, i64* %10, align 8
  store i64 %20, i64* %16, align 8
  store i64 %22, i64* %9, align 8
  %24 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %1, i64 0, i32 12, i32 0
  %27 = bitcast i32** %3 to i64*
  %28 = sext i32 %25 to i64
  br label %29

29:                                               ; preds = %96, %15
  %30 = phi i64 [ %20, %15 ], [ %99, %96 ]
  %31 = phi i32* [ %21, %15 ], [ %98, %96 ]
  %32 = phi i32* [ %19, %15 ], [ %97, %96 ]
  %33 = phi i64 [ %28, %15 ], [ %90, %96 ]
  %34 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %26, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %34, i64 0, i32 0, i32 0
  %36 = load %class.CFGAS_Char*, %class.CFGAS_Char** %35, align 8
  %37 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %36, i64 %33, i32 5
  %38 = icmp eq i32* %32, %31
  br i1 %38, label %43, label %39

39:                                               ; preds = %29
  %40 = load i32, i32* %37, align 4
  store i32 %40, i32* %32, align 4
  %41 = getelementptr inbounds i32, i32* %32, i64 1
  %42 = ptrtoint i32* %41 to i64
  store i64 %42, i64* %27, align 8
  br label %89

43:                                               ; preds = %29
  %44 = ptrtoint i32* %31 to i64
  %45 = load i64, i64* %10, align 8
  %46 = sub i64 %44, %45
  %47 = ashr exact i64 %46, 2
  %48 = add nsw i64 %47, 1
  %49 = icmp ugt i64 %48, 4611686018427387903
  br i1 %49, label %50, label %52

50:                                               ; preds = %43
  %51 = bitcast %"class.std::__1::vector.22"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #10
  unreachable

52:                                               ; preds = %43
  %53 = icmp ult i64 %47, 2305843009213693951
  br i1 %53, label %54, label %62

54:                                               ; preds = %52
  %55 = ashr exact i64 %46, 1
  %56 = icmp ult i64 %55, %48
  %57 = select i1 %56, i64 %48, i64 %55
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %54
  %60 = icmp ugt i64 %57, 4611686018427387903
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  tail call void @abort() #10
  unreachable

62:                                               ; preds = %59, %52
  %63 = phi i64 [ %57, %59 ], [ 4611686018427387903, %52 ]
  %64 = shl i64 %63, 2
  %65 = tail call i8* @_Znwm(i64 %64) #11
  %66 = bitcast i8* %65 to i32*
  br label %67

67:                                               ; preds = %62, %54
  %68 = phi i64 [ %63, %62 ], [ 0, %54 ]
  %69 = phi i32* [ %66, %62 ], [ null, %54 ]
  %70 = getelementptr inbounds i32, i32* %69, i64 %47
  %71 = getelementptr inbounds i32, i32* %69, i64 %68
  %72 = ptrtoint i32* %71 to i64
  %73 = load i32, i32* %37, align 4
  store i32 %73, i32* %70, align 4
  %74 = getelementptr inbounds i32, i32* %70, i64 1
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %30, %45
  %77 = ashr exact i64 %76, 2
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds i32, i32* %70, i64 %78
  %80 = ptrtoint i32* %79 to i64
  %81 = icmp sgt i64 %76, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %67
  %83 = bitcast i32* %79 to i8*
  %84 = inttoptr i64 %45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %76, i1 false) #9
  br label %85

85:                                               ; preds = %82, %67
  store i64 %80, i64* %10, align 8
  store i64 %75, i64* %27, align 8
  store i64 %72, i64* %9, align 8
  %86 = icmp eq i64 %45, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %85
  %88 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %88) #11
  br label %89

89:                                               ; preds = %39, %85, %87
  %90 = add nsw i64 %33, 1
  %91 = load i32, i32* %24, align 4
  %92 = load i32, i32* %6, align 8
  %93 = add nsw i32 %92, %91
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %90, %94
  br i1 %95, label %96, label %100

96:                                               ; preds = %89
  %97 = load i32*, i32** %3, align 8
  %98 = load i32*, i32** %4, align 8
  %99 = ptrtoint i32* %97 to i64
  br label %29

100:                                              ; preds = %89, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
