; ModuleID = '../../third_party/lzma_sdk/Delta.c'
source_filename = "../../third_party/lzma_sdk/Delta.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @Delta_Init(i8* nocapture) local_unnamed_addr #0 {
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 256, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @Delta_Encode(i8* nocapture, i32, i8* nocapture, i64) local_unnamed_addr #2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = zext i32 %1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 1 %0, i64 %10, i1 false)
  br label %11

11:                                               ; preds = %9, %4
  %12 = icmp eq i64 %3, 0
  br i1 %12, label %132, label %13

13:                                               ; preds = %11
  %14 = icmp ne i32 %1, 0
  %15 = zext i32 %1 to i64
  %16 = add nsw i64 %15, -1
  br label %25

17:                                               ; preds = %119, %114
  %18 = phi i64 [ %38, %114 ], [ %127, %119 ]
  %19 = phi i64 [ %37, %114 ], [ %128, %119 ]
  %20 = trunc i64 %19 to i32
  br label %21

21:                                               ; preds = %17, %25
  %22 = phi i64 [ %26, %25 ], [ %18, %17 ]
  %23 = phi i32 [ 0, %25 ], [ %20, %17 ]
  %24 = icmp ult i64 %22, %3
  br i1 %24, label %25, label %132

25:                                               ; preds = %13, %21
  %26 = phi i64 [ 0, %13 ], [ %22, %21 ]
  %27 = icmp ult i64 %26, %3
  %28 = and i1 %27, %14
  br i1 %28, label %29, label %21

29:                                               ; preds = %25
  %30 = xor i64 %26, -1
  %31 = add i64 %30, %3
  %32 = icmp ult i64 %31, %16
  %33 = select i1 %32, i64 %31, i64 %16
  %34 = add i64 %33, 1
  %35 = icmp ult i64 %34, 32
  br i1 %35, label %116, label %36

36:                                               ; preds = %29
  %37 = and i64 %34, -32
  %38 = add i64 %26, %37
  %39 = add i64 %37, -32
  %40 = lshr exact i64 %39, 5
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %91, label %44

44:                                               ; preds = %36
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = add i64 %26, %47
  %50 = getelementptr inbounds i8, i8* %2, i64 %49
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1
  %53 = getelementptr inbounds i8, i8* %50, i64 16
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %47
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 16
  %59 = getelementptr inbounds i8, i8* %56, i64 16
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 16
  %62 = sub <16 x i8> %52, %58
  %63 = sub <16 x i8> %55, %61
  %64 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1
  %65 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %52, <16 x i8>* %66, align 16
  %67 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %67, align 16
  %68 = or i64 %47, 32
  %69 = add i64 %26, %68
  %70 = getelementptr inbounds i8, i8* %2, i64 %69
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %70, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 16
  %79 = getelementptr inbounds i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 16
  %82 = sub <16 x i8> %72, %78
  %83 = sub <16 x i8> %75, %81
  %84 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  %85 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %85, align 1
  %86 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %86, align 16
  %87 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %87, align 16
  %88 = add i64 %47, 64
  %89 = add i64 %48, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !2

91:                                               ; preds = %46, %36
  %92 = phi i64 [ 0, %36 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %114, label %94

94:                                               ; preds = %91
  %95 = add i64 %26, %92
  %96 = getelementptr inbounds i8, i8* %2, i64 %95
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %96, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %92
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 16
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 16
  %108 = sub <16 x i8> %98, %104
  %109 = sub <16 x i8> %101, %107
  %110 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %110, align 1
  %111 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %111, align 1
  %112 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %112, align 16
  %113 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %113, align 16
  br label %114

114:                                              ; preds = %91, %94
  %115 = icmp eq i64 %34, %37
  br i1 %115, label %17, label %116

116:                                              ; preds = %114, %29
  %117 = phi i64 [ 0, %29 ], [ %37, %114 ]
  %118 = phi i64 [ %26, %29 ], [ %38, %114 ]
  br label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %128, %119 ], [ %117, %116 ]
  %121 = phi i64 [ %127, %119 ], [ %118, %116 ]
  %122 = getelementptr inbounds i8, i8* %2, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %120
  %125 = load i8, i8* %124, align 1
  %126 = sub i8 %123, %125
  store i8 %126, i8* %122, align 1
  store i8 %123, i8* %124, align 1
  %127 = add nuw i64 %121, 1
  %128 = add nuw nsw i64 %120, 1
  %129 = icmp ult i64 %128, %15
  %130 = icmp ult i64 %127, %3
  %131 = and i1 %130, %129
  br i1 %131, label %119, label %17, !llvm.loop !4

132:                                              ; preds = %21, %11
  %133 = phi i32 [ 0, %11 ], [ %23, %21 ]
  %134 = icmp eq i32 %133, %1
  %135 = select i1 %134, i32 0, i32 %133
  %136 = zext i32 %135 to i64
  %137 = sub i32 %1, %135
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %142, label %139

139:                                              ; preds = %132
  %140 = getelementptr [256 x i8], [256 x i8]* %5, i64 0, i64 %136
  %141 = zext i32 %137 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %140, i64 %141, i1 false)
  br label %142

142:                                              ; preds = %139, %132
  %143 = icmp eq i32 %135, 0
  br i1 %143, label %149, label %144

144:                                              ; preds = %142
  %145 = zext i32 %1 to i64
  %146 = getelementptr inbounds i8, i8* %0, i64 %145
  %147 = sub nsw i64 0, %136
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* nonnull align 16 %6, i64 %136, i1 false)
  br label %149

149:                                              ; preds = %144, %142
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @Delta_Decode(i8* nocapture, i32, i8* nocapture, i64) local_unnamed_addr #2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = zext i32 %1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 1 %0, i64 %10, i1 false)
  br label %11

11:                                               ; preds = %9, %4
  %12 = icmp eq i64 %3, 0
  br i1 %12, label %132, label %13

13:                                               ; preds = %11
  %14 = icmp ne i32 %1, 0
  %15 = zext i32 %1 to i64
  %16 = add nsw i64 %15, -1
  br label %25

17:                                               ; preds = %119, %114
  %18 = phi i64 [ %38, %114 ], [ %127, %119 ]
  %19 = phi i64 [ %37, %114 ], [ %128, %119 ]
  %20 = trunc i64 %19 to i32
  br label %21

21:                                               ; preds = %17, %25
  %22 = phi i32 [ 0, %25 ], [ %20, %17 ]
  %23 = phi i64 [ %26, %25 ], [ %18, %17 ]
  %24 = icmp ult i64 %23, %3
  br i1 %24, label %25, label %132

25:                                               ; preds = %13, %21
  %26 = phi i64 [ 0, %13 ], [ %23, %21 ]
  %27 = icmp ult i64 %26, %3
  %28 = and i1 %14, %27
  br i1 %28, label %29, label %21

29:                                               ; preds = %25
  %30 = xor i64 %26, -1
  %31 = add i64 %30, %3
  %32 = icmp ult i64 %31, %16
  %33 = select i1 %32, i64 %31, i64 %16
  %34 = add i64 %33, 1
  %35 = icmp ult i64 %34, 32
  br i1 %35, label %116, label %36

36:                                               ; preds = %29
  %37 = and i64 %34, -32
  %38 = add i64 %26, %37
  %39 = add i64 %37, -32
  %40 = lshr exact i64 %39, 5
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %91, label %44

44:                                               ; preds = %36
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = add i64 %26, %47
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %47
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 16
  %53 = getelementptr inbounds i8, i8* %50, i64 16
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 16
  %56 = getelementptr inbounds i8, i8* %2, i64 %49
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = getelementptr inbounds i8, i8* %56, i64 16
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = add <16 x i8> %58, %52
  %63 = add <16 x i8> %61, %55
  %64 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1
  %65 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 16
  %67 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %67, align 16
  %68 = or i64 %47, 32
  %69 = add i64 %26, %68
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 16
  %73 = getelementptr inbounds i8, i8* %70, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 16
  %76 = getelementptr inbounds i8, i8* %2, i64 %69
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = getelementptr inbounds i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = add <16 x i8> %78, %72
  %83 = add <16 x i8> %81, %75
  %84 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  %85 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %85, align 1
  %86 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %86, align 16
  %87 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %87, align 16
  %88 = add i64 %47, 64
  %89 = add i64 %48, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !6

91:                                               ; preds = %46, %36
  %92 = phi i64 [ 0, %36 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %114, label %94

94:                                               ; preds = %91
  %95 = add i64 %26, %92
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %92
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 16
  %99 = getelementptr inbounds i8, i8* %96, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 16
  %102 = getelementptr inbounds i8, i8* %2, i64 %95
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1
  %108 = add <16 x i8> %104, %98
  %109 = add <16 x i8> %107, %101
  %110 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %110, align 1
  %111 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %111, align 1
  %112 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %112, align 16
  %113 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %113, align 16
  br label %114

114:                                              ; preds = %91, %94
  %115 = icmp eq i64 %34, %37
  br i1 %115, label %17, label %116

116:                                              ; preds = %114, %29
  %117 = phi i64 [ 0, %29 ], [ %37, %114 ]
  %118 = phi i64 [ %26, %29 ], [ %38, %114 ]
  br label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %128, %119 ], [ %117, %116 ]
  %121 = phi i64 [ %127, %119 ], [ %118, %116 ]
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %120
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds i8, i8* %2, i64 %121
  %125 = load i8, i8* %124, align 1
  %126 = add i8 %125, %123
  store i8 %126, i8* %124, align 1
  store i8 %126, i8* %122, align 1
  %127 = add nuw i64 %121, 1
  %128 = add nuw nsw i64 %120, 1
  %129 = icmp ult i64 %128, %15
  %130 = icmp ult i64 %127, %3
  %131 = and i1 %129, %130
  br i1 %131, label %119, label %17, !llvm.loop !7

132:                                              ; preds = %21, %11
  %133 = phi i32 [ 0, %11 ], [ %22, %21 ]
  %134 = icmp eq i32 %133, %1
  %135 = select i1 %134, i32 0, i32 %133
  %136 = zext i32 %135 to i64
  %137 = sub i32 %1, %135
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %142, label %139

139:                                              ; preds = %132
  %140 = getelementptr [256 x i8], [256 x i8]* %5, i64 0, i64 %136
  %141 = zext i32 %137 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %140, i64 %141, i1 false)
  br label %142

142:                                              ; preds = %139, %132
  %143 = icmp eq i32 %135, 0
  br i1 %143, label %149, label %144

144:                                              ; preds = %142
  %145 = zext i32 %1 to i64
  %146 = getelementptr inbounds i8, i8* %0, i64 %145
  %147 = sub nsw i64 0, %136
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* nonnull align 16 %6, i64 %136, i1 false)
  br label %149

149:                                              ; preds = %144, %142
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
