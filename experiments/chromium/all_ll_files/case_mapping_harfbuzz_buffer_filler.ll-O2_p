; ModuleID = '../../third_party/blink/renderer/platform/fonts/shaping/case_mapping_harfbuzz_buffer_filler.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/shaping/case_mapping_harfbuzz_buffer_filler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CaseMappingHarfBuzzBufferFiller" = type { %struct.hb_buffer_t* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.hb_buffer_t = type opaque
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::CaseMap::Locale" = type { i8* }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::CaseMap" = type { i8* }
%"class.WTF::TextOffsetMap" = type opaque

@_ZN5blink31CaseMappingHarfBuzzBufferFillerC1ENS_13CaseMapIntendEN3WTF12AtomicStringEP11hb_buffer_tRKNS2_6StringEjj = hidden unnamed_addr alias void (%"class.blink::CaseMappingHarfBuzzBufferFiller"*, i32, %"class.WTF::StringImpl"*, %struct.hb_buffer_t*, %"class.WTF::String"*, i32, i32), void (%"class.blink::CaseMappingHarfBuzzBufferFiller"*, i32, %"class.WTF::StringImpl"*, %struct.hb_buffer_t*, %"class.WTF::String"*, i32, i32)* @_ZN5blink31CaseMappingHarfBuzzBufferFillerC2ENS_13CaseMapIntendEN3WTF12AtomicStringEP11hb_buffer_tRKNS2_6StringEjj

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31CaseMappingHarfBuzzBufferFillerC2ENS_13CaseMapIntendEN3WTF12AtomicStringEP11hb_buffer_tRKNS2_6StringEjj(%"class.blink::CaseMappingHarfBuzzBufferFiller"* nocapture, i32, %"class.WTF::StringImpl"*, %struct.hb_buffer_t*, %"class.WTF::String"* dereferenceable(8), i32, i32) unnamed_addr #0 align 2 {
  %8 = alloca %"class.WTF::CaseMap::Locale", align 8
  %9 = alloca %"class.WTF::AtomicString", align 8
  %10 = alloca %"class.WTF::CaseMap", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %13, align 8
  %14 = getelementptr inbounds %"class.blink::CaseMappingHarfBuzzBufferFiller", %"class.blink::CaseMappingHarfBuzzBufferFiller"* %0, i64 0, i32 0
  store %struct.hb_buffer_t* %3, %struct.hb_buffer_t** %14, align 8
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %16, label %41

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp eq %"class.WTF::StringImpl"* %18, null
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  br i1 %22, label %33, label %25

25:                                               ; preds = %16
  %26 = bitcast %"class.WTF::StringImpl"* %24 to i8*
  %27 = select i1 %23, i8* null, i8* %26
  br i1 %23, label %31, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  br label %31

31:                                               ; preds = %25, %28
  %32 = phi i32 [ %30, %28 ], [ 0, %25 ]
  tail call void @hb_buffer_add_latin1(%struct.hb_buffer_t* %3, i8* %27, i32 %32, i32 %5, i32 %6) #5
  br label %182

33:                                               ; preds = %16
  %34 = bitcast %"class.WTF::StringImpl"* %24 to i16*
  %35 = select i1 %23, i16* null, i16* %34
  br i1 %23, label %39, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %33, %36
  %40 = phi i32 [ %38, %36 ], [ 0, %33 ]
  tail call void @hb_buffer_add_utf16(%struct.hb_buffer_t* %3, i16* %35, i32 %40, i32 %5, i32 %6) #5
  br label %182

41:                                               ; preds = %7
  %42 = bitcast %"class.WTF::CaseMap"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #5
  %43 = getelementptr inbounds %"class.WTF::CaseMap", %"class.WTF::CaseMap"* %10, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %43, align 8
  %44 = bitcast %"class.WTF::CaseMap::Locale"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #5
  call void @_ZN3WTF7CaseMap6LocaleC1ERKNS_12AtomicStringE(%"class.WTF::CaseMap::Locale"* nonnull %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9) #5
  %45 = bitcast %"class.WTF::CaseMap::Locale"* %8 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.WTF::CaseMap"* %10 to i64*
  store i64 %46, i64* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #5
  %48 = bitcast %"class.WTF::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #5
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %49, align 8
  %50 = icmp eq i32 %1, 1
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = call %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToUpperERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nonnull %10, %"class.WTF::String"* dereferenceable(8) %4, %"class.WTF::TextOffsetMap"* null) #5
  br label %55

53:                                               ; preds = %41
  %54 = call %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToLowerERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nonnull %10, %"class.WTF::String"* dereferenceable(8) %4, %"class.WTF::TextOffsetMap"* null) #5
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi %"class.WTF::StringImpl"* [ %54, %53 ], [ %52, %51 ]
  store %"class.WTF::StringImpl"* %56, %"class.WTF::StringImpl"** %49, align 8
  call void @_ZN3WTF6String11Ensure16BitEv(%"class.WTF::String"* nonnull %11) #5
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  br label %62

62:                                               ; preds = %55, %59
  %63 = phi i32 [ %61, %59 ], [ 0, %55 ]
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i32 [ %69, %67 ], [ 0, %62 ]
  %72 = icmp eq i32 %63, %71
  br i1 %72, label %156, label %73

73:                                               ; preds = %70
  %74 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #5
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %75, align 8
  br i1 %66, label %93, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %93

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i33
  %85 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #5
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !2

90:                                               ; preds = %81
  call void @llvm.trap() #5
  unreachable

91:                                               ; preds = %81
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %82, align 4
  br label %93

93:                                               ; preds = %73, %76, %91
  call void @_ZN3WTF6String11Ensure16BitEv(%"class.WTF::String"* nonnull %12) #5
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, null
  br i1 %95, label %113, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %113

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i33
  %105 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %104, i33 1) #5
  %106 = extractvalue { i33, i1 } %105, 1
  %107 = extractvalue { i33, i1 } %105, 0
  %108 = icmp slt i33 %107, 0
  %109 = or i1 %106, %108
  br i1 %109, label %110, label %111, !prof !2

110:                                              ; preds = %101
  call void @llvm.trap() #5
  unreachable

111:                                              ; preds = %101
  %112 = trunc i33 %107 to i32
  store i32 %112, i32* %102, align 4
  br label %113

113:                                              ; preds = %93, %96, %111
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 1
  %117 = bitcast %"class.WTF::StringImpl"* %116 to i16*
  %118 = select i1 %115, i16* null, i16* %117
  br i1 %115, label %122, label %119

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 1
  %121 = load i32, i32* %120, align 4
  br label %122

122:                                              ; preds = %113, %119
  %123 = phi i32 [ %121, %119 ], [ 0, %113 ]
  call void @_ZN5blink31CaseMappingHarfBuzzBufferFiller12FillSlowCaseENS_13CaseMapIntendEN3WTF12AtomicStringEPKDsjjj(%"class.blink::CaseMappingHarfBuzzBufferFiller"* %0, i32 %1, %"class.WTF::StringImpl"* %94, i16* %118, i32 %123, i32 %5, i32 %6)
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %125 = icmp eq %"class.WTF::StringImpl"* %124, null
  br i1 %125, label %139, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  br i1 %130, label %133, label %135

133:                                              ; preds = %126
  %134 = add i32 %132, -1
  store i32 %134, i32* %131, align 4
  br label %135

135:                                              ; preds = %133, %126
  %136 = phi i32 [ %134, %133 ], [ %132, %126 ]
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %124) #5
  br label %139

139:                                              ; preds = %122, %135, %138
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #5
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %141 = icmp eq %"class.WTF::StringImpl"* %140, null
  br i1 %141, label %155, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = and i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 0
  %148 = load i32, i32* %147, align 4
  br i1 %146, label %149, label %151

149:                                              ; preds = %142
  %150 = add i32 %148, -1
  store i32 %150, i32* %147, align 4
  br label %151

151:                                              ; preds = %149, %142
  %152 = phi i32 [ %150, %149 ], [ %148, %142 ]
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %151
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %140) #5
  br label %155

155:                                              ; preds = %139, %151, %154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #5
  br label %182

156:                                              ; preds = %70
  %157 = load %struct.hb_buffer_t*, %struct.hb_buffer_t** %14, align 8
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 1
  %159 = bitcast %"class.WTF::StringImpl"* %158 to i16*
  %160 = select i1 %58, i16* null, i16* %159
  br i1 %66, label %164, label %161

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 1
  %163 = load i32, i32* %162, align 4
  br label %164

164:                                              ; preds = %156, %161
  %165 = phi i32 [ %163, %161 ], [ 0, %156 ]
  call void @hb_buffer_add_utf16(%struct.hb_buffer_t* %157, i16* %160, i32 %165, i32 %5, i32 %6) #5
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %181, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %166) #5
  br label %181

181:                                              ; preds = %164, %177, %180
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #5
  br label %182

182:                                              ; preds = %39, %31, %181, %155
  %183 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %184 = icmp eq %"class.WTF::StringImpl"* %183, null
  br i1 %184, label %198, label %185

185:                                              ; preds = %182
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load atomic i32, i32* %186 monotonic, align 4
  %188 = and i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 0
  %191 = load i32, i32* %190, align 4
  br i1 %189, label %192, label %194

192:                                              ; preds = %185
  %193 = add i32 %191, -1
  store i32 %193, i32* %190, align 4
  br label %194

194:                                              ; preds = %192, %185
  %195 = phi i32 [ %193, %192 ], [ %191, %185 ]
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %194
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %183) #5
  br label %198

198:                                              ; preds = %182, %194, %197
  ret void
}

declare void @hb_buffer_add_latin1(%struct.hb_buffer_t*, i8*, i32, i32, i32) local_unnamed_addr #1

declare void @hb_buffer_add_utf16(%struct.hb_buffer_t*, i16*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToUpperERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::TextOffsetMap"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToLowerERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::TextOffsetMap"*) local_unnamed_addr #1

declare void @_ZN3WTF6String11Ensure16BitEv(%"class.WTF::String"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31CaseMappingHarfBuzzBufferFiller12FillSlowCaseENS_13CaseMapIntendEN3WTF12AtomicStringEPKDsjjj(%"class.blink::CaseMappingHarfBuzzBufferFiller"* nocapture readonly, i32, %"class.WTF::StringImpl"*, i16*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.WTF::CaseMap::Locale", align 8
  %9 = alloca %"class.WTF::AtomicString", align 8
  %10 = alloca %"class.WTF::CaseMap", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %12, align 8
  %13 = getelementptr inbounds %"class.blink::CaseMappingHarfBuzzBufferFiller", %"class.blink::CaseMappingHarfBuzzBufferFiller"* %0, i64 0, i32 0
  %14 = load %struct.hb_buffer_t*, %struct.hb_buffer_t** %13, align 8
  tail call void @hb_buffer_add_utf16(%struct.hb_buffer_t* %14, i16* %3, i32 %4, i32 %5, i32 0) #5
  %15 = bitcast %"class.WTF::CaseMap"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #5
  %16 = bitcast %"class.WTF::CaseMap::Locale"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  call void @_ZN3WTF7CaseMap6LocaleC1ERKNS_12AtomicStringE(%"class.WTF::CaseMap::Locale"* nonnull %8, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9) #5
  %17 = bitcast %"class.WTF::CaseMap::Locale"* %8 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.WTF::CaseMap"* %10 to i64*
  store i64 %18, i64* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  %20 = add i32 %6, %5
  %21 = icmp ugt i32 %20, %5
  br i1 %21, label %22, label %26

22:                                               ; preds = %7
  %23 = bitcast %"class.WTF::String"* %11 to i8*
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %25 = icmp eq i32 %1, 1
  br label %44

26:                                               ; preds = %113, %7
  %27 = load %struct.hb_buffer_t*, %struct.hb_buffer_t** %13, align 8
  call void @hb_buffer_add_utf16(%struct.hb_buffer_t* %27, i16* %3, i32 %4, i32 %20, i32 0) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #5
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #5
  br label %43

43:                                               ; preds = %26, %39, %42
  ret void

44:                                               ; preds = %22, %113
  %45 = phi i32 [ %5, %22 ], [ %63, %113 ]
  %46 = add nuw i32 %45, 1
  %47 = zext i32 %45 to i64
  %48 = getelementptr inbounds i16, i16* %3, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = and i16 %49, -1024
  %51 = icmp ne i16 %50, -10240
  %52 = icmp eq i32 %46, %6
  %53 = or i1 %52, %51
  br i1 %53, label %62, label %54

54:                                               ; preds = %44
  %55 = zext i32 %46 to i64
  %56 = getelementptr inbounds i16, i16* %3, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = and i16 %57, -1024
  %59 = icmp eq i16 %58, -9216
  %60 = add i32 %45, 2
  %61 = select i1 %59, i32 %60, i32 %46
  br label %62

62:                                               ; preds = %54, %44
  %63 = phi i32 [ %46, %44 ], [ %61, %54 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %24, align 8
  %64 = sub i32 %63, %45
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %11, i16* %48, i32 %64) #5
  br i1 %25, label %65, label %67

65:                                               ; preds = %62
  %66 = call %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToUpperERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nonnull %10, %"class.WTF::String"* nonnull dereferenceable(8) %11, %"class.WTF::TextOffsetMap"* null) #5
  br label %69

67:                                               ; preds = %62
  %68 = call %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToLowerERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nonnull %10, %"class.WTF::String"* nonnull dereferenceable(8) %11, %"class.WTF::TextOffsetMap"* null) #5
  br label %69

69:                                               ; preds = %67, %65
  %70 = phi %"class.WTF::StringImpl"* [ %66, %65 ], [ %68, %67 ]
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 1
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 1
  %74 = bitcast %"class.WTF::StringImpl"* %73 to i16*
  %75 = select i1 %71, i16* null, i16* %74
  br label %76

76:                                               ; preds = %139, %69
  %77 = phi i32 [ 0, %69 ], [ %140, %139 ]
  br i1 %71, label %80, label %78

78:                                               ; preds = %76
  %79 = load i32, i32* %72, align 4
  br label %80

80:                                               ; preds = %76, %78
  %81 = phi i32 [ %79, %78 ], [ 0, %76 ]
  %82 = icmp ult i32 %77, %81
  br i1 %82, label %115, label %83

83:                                               ; preds = %80
  br i1 %71, label %97, label %84

84:                                               ; preds = %83
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  br i1 %88, label %91, label %93

91:                                               ; preds = %84
  %92 = add i32 %90, -1
  store i32 %92, i32* %89, align 4
  br label %93

93:                                               ; preds = %91, %84
  %94 = phi i32 [ %92, %91 ], [ %90, %84 ]
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %70) #5
  br label %97

97:                                               ; preds = %83, %93, %96
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #5
  br label %113

113:                                              ; preds = %97, %109, %112
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  %114 = icmp ult i32 %63, %20
  br i1 %114, label %44, label %26

115:                                              ; preds = %80
  %116 = add nuw i32 %77, 1
  %117 = zext i32 %77 to i64
  %118 = getelementptr inbounds i16, i16* %75, i64 %117
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = and i32 %120, 64512
  %122 = icmp eq i32 %121, 55296
  br i1 %122, label %123, label %139

123:                                              ; preds = %115
  br i1 %71, label %127, label %124

124:                                              ; preds = %123
  %125 = load i32, i32* %72, align 4
  %126 = icmp eq i32 %116, %125
  br i1 %126, label %139, label %127

127:                                              ; preds = %123, %124
  %128 = zext i32 %116 to i64
  %129 = getelementptr inbounds i16, i16* %75, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = and i32 %131, 64512
  %133 = icmp eq i32 %132, 56320
  br i1 %133, label %134, label %139

134:                                              ; preds = %127
  %135 = add i32 %77, 2
  %136 = shl nuw nsw i32 %120, 10
  %137 = add nsw i32 %136, -56613888
  %138 = add nsw i32 %137, %131
  br label %139

139:                                              ; preds = %127, %134, %124, %115
  %140 = phi i32 [ %116, %115 ], [ %135, %134 ], [ %116, %127 ], [ %116, %124 ]
  %141 = phi i32 [ %120, %115 ], [ %138, %134 ], [ %120, %127 ], [ %120, %124 ]
  %142 = load %struct.hb_buffer_t*, %struct.hb_buffer_t** %13, align 8
  call void @hb_buffer_add(%struct.hb_buffer_t* %142, i32 %141, i32 %45) #5
  br label %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #1

declare void @hb_buffer_add(%struct.hb_buffer_t*, i32, i32) local_unnamed_addr #1

declare void @_ZN3WTF7CaseMap6LocaleC1ERKNS_12AtomicStringE(%"class.WTF::CaseMap::Locale"*, %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
