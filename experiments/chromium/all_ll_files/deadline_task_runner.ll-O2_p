; ModuleID = '../../third_party/blink/renderer/platform/scheduler/main_thread/deadline_task_runner.cc'
source_filename = "../../third_party/blink/renderer/platform/scheduler/main_thread/deadline_task_runner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::scheduler::DeadlineTaskRunner" = type { %"class.blink::scheduler::CancelableClosureHolder", %"class.base::RepeatingCallback", %"class.base::TimeTicks", %class.scoped_refptr.8 }
%"class.blink::scheduler::CancelableClosureHolder" = type { %"class.base::RepeatingCallback", %"class.base::internal::CancelableCallbackImpl" }
%"class.base::internal::CancelableCallbackImpl" = type { %"class.base::RepeatingCallback", %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.2", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%class.scoped_refptr.8 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.9" }>
%"class.base::RefCountedThreadSafe.9" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.9", [4 x i8] }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZN4base8internal7InvokerINS0_9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE3RunEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN5blink9scheduler18DeadlineTaskRunnerC1ERKN4base17RepeatingCallbackIFvvEEE13scoped_refptrINS2_22SingleThreadTaskRunnerEE = hidden unnamed_addr alias void (%"class.blink::scheduler::DeadlineTaskRunner"*, %"class.base::RepeatingCallback"*, %"class.base::SingleThreadTaskRunner"*), void (%"class.blink::scheduler::DeadlineTaskRunner"*, %"class.base::RepeatingCallback"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN5blink9scheduler18DeadlineTaskRunnerC2ERKN4base17RepeatingCallbackIFvvEEE13scoped_refptrINS2_22SingleThreadTaskRunnerEE
@_ZN5blink9scheduler18DeadlineTaskRunnerD1Ev = hidden unnamed_addr alias void (%"class.blink::scheduler::DeadlineTaskRunner"*), void (%"class.blink::scheduler::DeadlineTaskRunner"*)* @_ZN5blink9scheduler18DeadlineTaskRunnerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler18DeadlineTaskRunnerC2ERKN4base17RepeatingCallbackIFvvEEE13scoped_refptrINS2_22SingleThreadTaskRunnerEE(%"class.blink::scheduler::DeadlineTaskRunner"*, %"class.base::RepeatingCallback"* dereferenceable(8), %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::RepeatingCallback", align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 0
  tail call void @_ZN5blink9scheduler23CancelableClosureHolderC1Ev(%"class.blink::scheduler::CancelableClosureHolder"* %5) #7
  %6 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %6, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %7) #7
  %8 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 2, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 3, i32 0
  store %"class.base::SingleThreadTaskRunner"* %2, %"class.base::SingleThreadTaskRunner"** %9, align 8
  %10 = icmp eq %"class.base::SingleThreadTaskRunner"* %2, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic
  br label %14

14:                                               ; preds = %3, %11
  %15 = bitcast %"class.base::RepeatingCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7
  %16 = ptrtoint %"class.blink::scheduler::DeadlineTaskRunner"* %0 to i64
  %17 = tail call i8* @_Znwm(i64 56) #8, !noalias !2
  %18 = bitcast i8* %17 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %18, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE3RunEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE) #7, !noalias !2
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.blink::scheduler::DeadlineTaskRunner"*)* @_ZN5blink9scheduler18DeadlineTaskRunner11RunInternalEv to i64), i64 0>, <2 x i64>* %20, align 8, !noalias !2
  %21 = getelementptr inbounds i8, i8* %17, i64 48
  %22 = bitcast i8* %21 to i64*
  store i64 %16, i64* %22, align 8, !noalias !2
  %23 = bitcast %"class.base::RepeatingCallback"* %4 to i8**
  store i8* %17, i8** %23, align 8, !alias.scope !2
  call void @_ZN5blink9scheduler23CancelableClosureHolder5ResetERKN4base17RepeatingCallbackIFvvEEE(%"class.blink::scheduler::CancelableClosureHolder"* %5, %"class.base::RepeatingCallback"* nonnull dereferenceable(8) %4) #7
  %24 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7
  br i1 %10, label %33, label %25

25:                                               ; preds = %14
  %26 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %2, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe.9", %"class.base::RefCountedThreadSafe.9"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe.9", %"class.base::RefCountedThreadSafe.9"* %26, i64 -2
  %32 = bitcast %"class.base::RefCountedThreadSafe.9"* %31 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %32) #7
  br label %33

33:                                               ; preds = %14, %25, %30
  ret void
}

declare void @_ZN5blink9scheduler23CancelableClosureHolderC1Ev(%"class.blink::scheduler::CancelableClosureHolder"*) unnamed_addr #1

declare void @_ZN5blink9scheduler23CancelableClosureHolder5ResetERKN4base17RepeatingCallbackIFvvEEE(%"class.blink::scheduler::CancelableClosureHolder"*, %"class.base::RepeatingCallback"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler18DeadlineTaskRunner11RunInternalEv(%"class.blink::scheduler::DeadlineTaskRunner"* nocapture) #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 2, i32 0, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 1
  %6 = bitcast void ()** %5 to void (%"class.base::internal::BindStateBase"*)**
  %7 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %6, align 8
  tail call void %7(%"class.base::internal::BindStateBase"* %4) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler18DeadlineTaskRunnerD2Ev(%"class.blink::scheduler::DeadlineTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 3, i32 0
  %3 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %2, align 8
  %4 = icmp eq %"class.base::SingleThreadTaskRunner"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe.9", %"class.base::RefCountedThreadSafe.9"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe.9", %"class.base::RefCountedThreadSafe.9"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe.9"* %11 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %12) #7
  br label %13

13:                                               ; preds = %1, %5, %10
  %14 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %14) #7
  %15 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 0
  tail call void @_ZN5blink9scheduler23CancelableClosureHolderD1Ev(%"class.blink::scheduler::CancelableClosureHolder"* %15) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink9scheduler23CancelableClosureHolderD1Ev(%"class.blink::scheduler::CancelableClosureHolder"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler18DeadlineTaskRunner11SetDeadlineERKN4base8LocationENS2_9TimeDeltaENS2_9TimeTicksE(%"class.blink::scheduler::DeadlineTaskRunner"*, %"class.base::Location"* dereferenceable(32), i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::RepeatingCallback", align 8
  %8 = add i64 %2, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %17, label %10

10:                                               ; preds = %4
  %11 = icmp slt i64 %2, 0
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %3, i64 %2) #7
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !7
  br label %25

17:                                               ; preds = %4
  %18 = add i64 %3, -9223372036854775807
  %19 = icmp ugt i64 %18, 1
  %20 = icmp eq i64 %3, %2
  %21 = or i1 %20, %19
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #7
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #7
  br label %25

25:                                               ; preds = %10, %17, %22
  %26 = phi i64 [ %16, %10 ], [ %2, %17 ], [ %2, %22 ]
  %27 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 2, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  %30 = icmp slt i64 %26, %28
  %31 = or i1 %29, %30
  br i1 %31, label %32, label %44

32:                                               ; preds = %25
  store i64 %26, i64* %27, align 8
  %33 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 0
  call void @_ZN5blink9scheduler23CancelableClosureHolder6CancelEv(%"class.blink::scheduler::CancelableClosureHolder"* %33) #7
  %34 = getelementptr inbounds %"class.blink::scheduler::DeadlineTaskRunner", %"class.blink::scheduler::DeadlineTaskRunner"* %0, i64 0, i32 3, i32 0
  %35 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %34, align 8
  %36 = bitcast %"class.base::SingleThreadTaskRunner"* %35 to %"class.base::TaskRunner"*
  call void @_ZNK5blink9scheduler23CancelableClosureHolder11GetCallbackEv(%"class.base::RepeatingCallback"* nonnull sret %7, %"class.blink::scheduler::CancelableClosureHolder"* %33) #7
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  %38 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* nonnull %37, %"class.base::internal::CallbackBaseCopyable"* nonnull dereferenceable(8) %38) #7
  %39 = bitcast %"class.base::SingleThreadTaskRunner"* %35 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %40 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %39, align 8
  %41 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %40, align 8
  %42 = call zeroext i1 %41(%"class.base::TaskRunner"* %36, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %6, i64 %2) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %37) #7
  %43 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %43) #7
  br label %44

44:                                               ; preds = %25, %32
  ret void
}

declare void @_ZN5blink9scheduler23CancelableClosureHolder6CancelEv(%"class.blink::scheduler::CancelableClosureHolder"*) local_unnamed_addr #1

declare void @_ZNK5blink9scheduler23CancelableClosureHolder11GetCallbackEv(%"class.base::RepeatingCallback"* sret, %"class.blink::scheduler::CancelableClosureHolder"*) local_unnamed_addr #1

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE3RunEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.blink::scheduler::DeadlineTaskRunner"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.blink::scheduler::DeadlineTaskRunner"*)**
  %21 = load void (%"class.blink::scheduler::DeadlineTaskRunner"*)*, void (%"class.blink::scheduler::DeadlineTaskRunner"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.blink::scheduler::DeadlineTaskRunner"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.blink::scheduler::DeadlineTaskRunner"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.blink::scheduler::DeadlineTaskRunner"* %12) #7
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS_8internal17UnretainedWrapperIS3_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIMN5blink9scheduler18DeadlineTaskRunnerEFvvEJNS_8internal17UnretainedWrapperIS3_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!7 = !{!"branch_weights", i32 1, i32 2000}
