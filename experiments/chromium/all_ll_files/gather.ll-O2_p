; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/gather.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/gather.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteGatherParams = type { i32 }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"class.tflite::DynamicBuffer" = type { %"class.std::__1::vector", %"class.std::__1::vector.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { i32*, i32*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i32* }

$_ZN6tflite3ops7builtin6gather6GatherIfiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIhiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIaiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIiiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIliEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIbiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather13GatherStringsIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIflEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIhlEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIalEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIilEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIllEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather6GatherIblEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_ = comdat any

$_ZN6tflite3ops7builtin6gather13GatherStringsIlEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/gather.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8 = private unnamed_addr constant [52 x i8] c"Positions of type '%s' are not supported by gather.\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"NumDimensions(input)\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"Type '%s' is not supported by gather.\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.12 = private unnamed_addr constant [41 x i8] c"0 <= axis && axis < NumDimensions(input)\00", align 1
@_ZZN6tflite3ops7builtin15Register_GATHEREvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6gather7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6gather4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.15 = private unnamed_addr constant [18 x i8] c"pos < num_strings\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin6gather7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 2) #6
  br label %201

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %15, i32 1) #6
  br label %201

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %22 = bitcast i8** %21 to %struct.TfLiteGatherParams**
  %23 = load %struct.TfLiteGatherParams*, %struct.TfLiteGatherParams** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %49 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %48, align 8
  %50 = sext i32 %45 to i64
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %49, i64 %50
  br label %52

52:                                               ; preds = %42, %47
  %53 = phi %struct.TfLiteTensor* [ %51, %47 ], [ null, %42 ]
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  switch i32 %55, label %56 [
    i32 4, label %60
    i32 2, label %60
  ]

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %58 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %57, align 8
  %59 = tail call i8* @TfLiteTypeGetName(i32 %55) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %58(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.8, i64 0, i64 0), i8* %59) #6
  br label %201

60:                                               ; preds = %52, %52
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 0
  store i32 %62, i32* %63, align 8
  %64 = load i32, i32* %61, align 8
  switch i32 %64, label %74 [
    i32 1, label %78
    i32 3, label %78
    i32 9, label %78
    i32 4, label %78
    i32 2, label %78
    i32 6, label %78
    i32 5, label %65
  ]

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %67 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %73 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %72, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %73(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 70, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %69, i32 1) #6
  br label %201

74:                                               ; preds = %60
  %75 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %76 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %75, align 8
  %77 = tail call i8* @TfLiteTypeGetName(i32 %64) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %76(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %77) #6
  br label %201

78:                                               ; preds = %65, %60, %60, %60, %60, %60, %60
  %79 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %23, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = icmp slt i32 %80, 0
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %81, label %86, label %89

86:                                               ; preds = %78
  %87 = add nsw i32 %85, %80
  %88 = icmp sgt i32 %87, -1
  br i1 %88, label %89, label %93

89:                                               ; preds = %78, %86
  %90 = phi i32 [ %87, %86 ], [ %80, %78 ]
  %91 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %92 = icmp slt i32 %90, %85
  br i1 %92, label %96, label %93

93:                                               ; preds = %86, %89
  %94 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %95 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %94, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %95(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i64 0, i64 0)) #6
  br label %201

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 2
  %98 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %97, align 8
  %99 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %98, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %85, -1
  %102 = add i32 %101, %100
  %103 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %102) #6
  %104 = icmp sgt i32 %90, 0
  br i1 %104, label %105, label %125

105:                                              ; preds = %96
  %106 = zext i32 %90 to i64
  %107 = add nsw i64 %106, -1
  %108 = and i64 %106, 3
  %109 = icmp ult i64 %107, 3
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = sub nsw i64 %106, %108
  br label %132

112:                                              ; preds = %132, %105
  %113 = phi i64 [ 0, %105 ], [ %153, %132 ]
  %114 = icmp eq i64 %108, 0
  br i1 %114, label %125, label %115

115:                                              ; preds = %112, %115
  %116 = phi i64 [ %121, %115 ], [ %113, %112 ]
  %117 = phi i64 [ %123, %115 ], [ %108, %112 ]
  %118 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %119 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %118, i64 0, i32 1, i64 %116
  %120 = load i32, i32* %119, align 4
  %121 = add nuw nsw i64 %116, 1
  %122 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %116
  store i32 %120, i32* %122, align 4
  %123 = add i64 %117, -1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %115, !llvm.loop !2

125:                                              ; preds = %112, %115, %96
  %126 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %97, align 8
  %127 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %126, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %159

130:                                              ; preds = %125
  %131 = zext i32 %90 to i64
  br label %169

132:                                              ; preds = %132, %110
  %133 = phi i64 [ 0, %110 ], [ %153, %132 ]
  %134 = phi i64 [ %111, %110 ], [ %155, %132 ]
  %135 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %136 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %135, i64 0, i32 1, i64 %133
  %137 = load i32, i32* %136, align 4
  %138 = or i64 %133, 1
  %139 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %133
  store i32 %137, i32* %139, align 4
  %140 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %141 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %140, i64 0, i32 1, i64 %138
  %142 = load i32, i32* %141, align 4
  %143 = or i64 %133, 2
  %144 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %138
  store i32 %142, i32* %144, align 4
  %145 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %146 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %145, i64 0, i32 1, i64 %143
  %147 = load i32, i32* %146, align 4
  %148 = or i64 %133, 3
  %149 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %143
  store i32 %147, i32* %149, align 4
  %150 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %151 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %150, i64 0, i32 1, i64 %148
  %152 = load i32, i32* %151, align 4
  %153 = add nuw nsw i64 %133, 4
  %154 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %148
  store i32 %152, i32* %154, align 4
  %155 = add i64 %134, -4
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %112, label %132

157:                                              ; preds = %169
  %158 = trunc i64 %175 to i32
  br label %159

159:                                              ; preds = %157, %125
  %160 = phi i32 [ %90, %125 ], [ %158, %157 ]
  %161 = add i32 %90, 1
  %162 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = icmp slt i32 %161, %164
  br i1 %165, label %166, label %183

166:                                              ; preds = %159
  %167 = sext i32 %161 to i64
  %168 = zext i32 %160 to i64
  br label %187

169:                                              ; preds = %130, %169
  %170 = phi i64 [ %131, %130 ], [ %175, %169 ]
  %171 = phi i64 [ 0, %130 ], [ %177, %169 ]
  %172 = phi %struct.TfLiteIntArray* [ %126, %130 ], [ %178, %169 ]
  %173 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %171
  %174 = load i32, i32* %173, align 4
  %175 = add nuw nsw i64 %170, 1
  %176 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %170
  store i32 %174, i32* %176, align 4
  %177 = add nuw nsw i64 %171, 1
  %178 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %97, align 8
  %179 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %178, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = icmp slt i64 %177, %181
  br i1 %182, label %169, label %157

183:                                              ; preds = %187, %159
  %184 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %185 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %184, align 8
  %186 = tail call i32 %185(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %53, %struct.TfLiteIntArray* %103) #6
  br label %201

187:                                              ; preds = %166, %187
  %188 = phi i64 [ %168, %166 ], [ %193, %187 ]
  %189 = phi i64 [ %167, %166 ], [ %195, %187 ]
  %190 = phi %struct.TfLiteIntArray* [ %162, %166 ], [ %196, %187 ]
  %191 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %190, i64 0, i32 1, i64 %189
  %192 = load i32, i32* %191, align 4
  %193 = add nuw nsw i64 %188, 1
  %194 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %103, i64 0, i32 1, i64 %188
  store i32 %192, i32* %194, align 4
  %195 = add nsw i64 %189, 1
  %196 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %91, align 8
  %197 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = sext i32 %198 to i64
  %200 = icmp slt i64 %195, %199
  br i1 %200, label %187, label %183

201:                                              ; preds = %56, %71, %74, %183, %93, %17, %8
  %202 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %56 ], [ 1, %74 ], [ 1, %71 ], [ %186, %183 ], [ 1, %93 ]
  ret i32 %202
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin6gather4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteGatherParams**
  %5 = load %struct.TfLiteGatherParams*, %struct.TfLiteGatherParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %13 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 %14
  br label %16

16:                                               ; preds = %2, %11
  %17 = phi %struct.TfLiteTensor* [ %15, %11 ], [ null, %2 ]
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %23 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %22, align 8
  %24 = sext i32 %19 to i64
  %25 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 %24
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi %struct.TfLiteTensor* [ %25, %21 ], [ null, %16 ]
  %28 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %29 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %28, align 8
  %30 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %29, i64 0, i32 1, i64 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %35 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %34, align 8
  %36 = sext i32 %31 to i64
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 %36
  br label %38

38:                                               ; preds = %26, %33
  %39 = phi %struct.TfLiteTensor* [ %37, %33 ], [ null, %26 ]
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 0, i32 0
  %41 = load i32, i32* %40, align 8
  switch i32 %41, label %84 [
    i32 2, label %42
    i32 4, label %63
  ]

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %59 [
    i32 1, label %45
    i32 3, label %47
    i32 9, label %49
    i32 2, label %51
    i32 4, label %53
    i32 6, label %55
    i32 5, label %57
  ]

45:                                               ; preds = %42
  %46 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIfiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

47:                                               ; preds = %42
  %48 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIhiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

49:                                               ; preds = %42
  %50 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIaiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

51:                                               ; preds = %42
  %52 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIiiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

53:                                               ; preds = %42
  %54 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIliEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

55:                                               ; preds = %42
  %56 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIbiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

57:                                               ; preds = %42
  %58 = tail call i32 @_ZN6tflite3ops7builtin6gather13GatherStringsIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

59:                                               ; preds = %42
  %60 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %61 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %60, align 8
  %62 = tail call i8* @TfLiteTypeGetName(i32 %44) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %61(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %62) #6
  br label %88

63:                                               ; preds = %38
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  switch i32 %65, label %80 [
    i32 1, label %66
    i32 3, label %68
    i32 9, label %70
    i32 2, label %72
    i32 4, label %74
    i32 6, label %76
    i32 5, label %78
  ]

66:                                               ; preds = %63
  %67 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIflEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

68:                                               ; preds = %63
  %69 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIhlEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

70:                                               ; preds = %63
  %71 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIalEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

72:                                               ; preds = %63
  %73 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIilEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

74:                                               ; preds = %63
  %75 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIllEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

76:                                               ; preds = %63
  %77 = tail call i32 @_ZN6tflite3ops7builtin6gather6GatherIblEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4) %5, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

78:                                               ; preds = %63
  %79 = tail call i32 @_ZN6tflite3ops7builtin6gather13GatherStringsIlEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %17, %struct.TfLiteTensor* %27, %struct.TfLiteTensor* %39)
  br label %88

80:                                               ; preds = %63
  %81 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %82 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %81, align 8
  %83 = tail call i8* @TfLiteTypeGetName(i32 %65) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %82(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %83) #6
  br label %88

84:                                               ; preds = %38
  %85 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %86 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %85, align 8
  %87 = tail call i8* @TfLiteTypeGetName(i32 %41) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %86(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.8, i64 0, i64 0), i8* %87) #6
  br label %88

88:                                               ; preds = %84, %80, %78, %76, %74, %72, %70, %68, %66, %59, %57, %55, %53, %51, %49, %47, %45
  %89 = phi i32 [ 1, %59 ], [ %58, %57 ], [ %56, %55 ], [ %54, %53 ], [ %52, %51 ], [ %50, %49 ], [ %48, %47 ], [ %46, %45 ], [ 1, %80 ], [ %79, %78 ], [ %77, %76 ], [ %75, %74 ], [ %73, %72 ], [ %71, %70 ], [ %69, %68 ], [ %67, %66 ], [ 1, %84 ]
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIfiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !4
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !4
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !4
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !4
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !4
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !4
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to float**
  %42 = load float*, float** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi float* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !7
  br label %77

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !7
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !7
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !7
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !7
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !7
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %76 = load i32*, i32** %75, align 8
  br label %77

77:                                               ; preds = %48, %70
  %78 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %79 = phi i32* [ %76, %70 ], [ null, %48 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !10
  br label %112

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !10
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !10
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !10
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !10
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !10
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %110 = bitcast %union.TfLitePtrUnion* %109 to float**
  %111 = load float*, float** %110, align 8
  br label %112

112:                                              ; preds = %82, %104
  %113 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %114 = phi float* [ %111, %104 ], [ null, %82 ]
  %115 = shl i32 %9, 16
  %116 = ashr exact i32 %115, 16
  %117 = icmp slt i16 %10, 0
  %118 = select i1 %117, i32 %44, i32 0
  %119 = add i32 %118, %116
  %120 = icmp sgt i32 %44, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %78, 5
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %130, label %132, label %135

132:                                              ; preds = %112
  %133 = getelementptr inbounds %union.anon, %union.anon* %131, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %138

135:                                              ; preds = %112
  %136 = bitcast %union.anon* %131 to i32*
  %137 = icmp sgt i32 %78, 0
  br i1 %137, label %138, label %238

138:                                              ; preds = %135, %132
  %139 = phi i32* [ %134, %132 ], [ %136, %135 ]
  %140 = zext i32 %78 to i64
  %141 = icmp ult i32 %78, 8
  br i1 %141, label %227, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, 4294967288
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 24
  br i1 %148, label %194, label %149

149:                                              ; preds = %142
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %191, %151 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %189, %151 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %190, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %192, %151 ]
  %156 = getelementptr inbounds i32, i32* %139, i64 %152
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %152, 8
  %165 = getelementptr inbounds i32, i32* %139, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = or i64 %152, 16
  %174 = getelementptr inbounds i32, i32* %139, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = mul nsw <4 x i32> %176, %171
  %181 = mul nsw <4 x i32> %179, %172
  %182 = or i64 %152, 24
  %183 = getelementptr inbounds i32, i32* %139, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %152, 32
  %192 = add i64 %155, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %151, !llvm.loop !13

194:                                              ; preds = %151, %142
  %195 = phi <4 x i32> [ undef, %142 ], [ %189, %151 ]
  %196 = phi <4 x i32> [ undef, %142 ], [ %190, %151 ]
  %197 = phi i64 [ 0, %142 ], [ %191, %151 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %189, %151 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %190, %151 ]
  %200 = icmp eq i64 %147, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %194, %201
  %202 = phi i64 [ %214, %201 ], [ %197, %194 ]
  %203 = phi <4 x i32> [ %212, %201 ], [ %198, %194 ]
  %204 = phi <4 x i32> [ %213, %201 ], [ %199, %194 ]
  %205 = phi i64 [ %215, %201 ], [ %147, %194 ]
  %206 = getelementptr inbounds i32, i32* %139, i64 %202
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4
  %212 = mul nsw <4 x i32> %208, %203
  %213 = mul nsw <4 x i32> %211, %204
  %214 = add i64 %202, 8
  %215 = add i64 %205, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !15

217:                                              ; preds = %201, %194
  %218 = phi <4 x i32> [ %195, %194 ], [ %212, %201 ]
  %219 = phi <4 x i32> [ %196, %194 ], [ %213, %201 ]
  %220 = mul <4 x i32> %219, %218
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %143, %140
  br i1 %226, label %238, label %227

227:                                              ; preds = %217, %138
  %228 = phi i64 [ 0, %138 ], [ %143, %217 ]
  %229 = phi i32 [ 1, %138 ], [ %225, %217 ]
  br label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %236, %230 ], [ %228, %227 ]
  %232 = phi i32 [ %235, %230 ], [ %229, %227 ]
  %233 = getelementptr inbounds i32, i32* %139, i64 %231
  %234 = load i32, i32* %233, align 4
  %235 = mul nsw i32 %234, %232
  %236 = add nuw nsw i64 %231, 1
  %237 = icmp eq i64 %236, %140
  br i1 %237, label %238, label %230, !llvm.loop !16

238:                                              ; preds = %230, %217, %135
  %239 = phi i32 [ 1, %135 ], [ %225, %217 ], [ %235, %230 ]
  %240 = icmp sgt i32 %119, 0
  br i1 %240, label %241, label %265

241:                                              ; preds = %238
  %242 = zext i32 %119 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %248, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %283

248:                                              ; preds = %283, %241
  %249 = phi i32 [ undef, %241 ], [ %309, %283 ]
  %250 = phi i64 [ 0, %241 ], [ %310, %283 ]
  %251 = phi i32 [ 1, %241 ], [ %309, %283 ]
  %252 = icmp eq i64 %244, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %248, %253
  %254 = phi i64 [ %262, %253 ], [ %250, %248 ]
  %255 = phi i32 [ %261, %253 ], [ %251, %248 ]
  %256 = phi i64 [ %263, %253 ], [ %244, %248 ]
  %257 = getelementptr inbounds i32, i32* %123, i64 %254
  %258 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %254
  %259 = select i1 %120, i32* %257, i32* %258
  %260 = load i32, i32* %259, align 4
  %261 = mul nsw i32 %260, %255
  %262 = add nuw nsw i64 %254, 1
  %263 = add i64 %256, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !18

265:                                              ; preds = %248, %253, %238
  %266 = phi i32 [ 1, %238 ], [ %249, %248 ], [ %261, %253 ]
  %267 = add i32 %119, 1
  %268 = icmp slt i32 %267, %44
  br i1 %268, label %269, label %330

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = xor i32 %118, -1
  %272 = add i32 %44, %271
  %273 = shl i32 %9, 16
  %274 = ashr exact i32 %273, 16
  %275 = sub i32 %272, %274
  %276 = add i32 %44, -2
  %277 = sub i32 %276, %118
  %278 = sub i32 %277, %274
  %279 = and i32 %275, 3
  %280 = icmp ult i32 %278, 3
  br i1 %280, label %313, label %281

281:                                              ; preds = %269
  %282 = sub i32 %275, %279
  br label %344

283:                                              ; preds = %283, %246
  %284 = phi i64 [ 0, %246 ], [ %310, %283 ]
  %285 = phi i32 [ 1, %246 ], [ %309, %283 ]
  %286 = phi i64 [ %247, %246 ], [ %311, %283 ]
  %287 = getelementptr inbounds i32, i32* %123, i64 %284
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %284
  %289 = select i1 %120, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = mul nsw i32 %290, %285
  %292 = or i64 %284, 1
  %293 = getelementptr inbounds i32, i32* %123, i64 %292
  %294 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %292
  %295 = select i1 %120, i32* %293, i32* %294
  %296 = load i32, i32* %295, align 4
  %297 = mul nsw i32 %296, %291
  %298 = or i64 %284, 2
  %299 = getelementptr inbounds i32, i32* %123, i64 %298
  %300 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %298
  %301 = select i1 %120, i32* %299, i32* %300
  %302 = load i32, i32* %301, align 4
  %303 = mul nsw i32 %302, %297
  %304 = or i64 %284, 3
  %305 = getelementptr inbounds i32, i32* %123, i64 %304
  %306 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %304
  %307 = select i1 %120, i32* %305, i32* %306
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %303
  %310 = add nuw nsw i64 %284, 4
  %311 = add i64 %286, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %248, label %283

313:                                              ; preds = %344, %269
  %314 = phi i32 [ undef, %269 ], [ %370, %344 ]
  %315 = phi i64 [ %270, %269 ], [ %371, %344 ]
  %316 = phi i32 [ 1, %269 ], [ %370, %344 ]
  %317 = icmp eq i32 %279, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %313, %318
  %319 = phi i64 [ %327, %318 ], [ %315, %313 ]
  %320 = phi i32 [ %326, %318 ], [ %316, %313 ]
  %321 = phi i32 [ %328, %318 ], [ %279, %313 ]
  %322 = getelementptr inbounds i32, i32* %123, i64 %319
  %323 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %319
  %324 = select i1 %120, i32* %322, i32* %323
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %320
  %327 = add nsw i64 %319, 1
  %328 = add i32 %321, -1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %318, !llvm.loop !19

330:                                              ; preds = %313, %318, %265
  %331 = phi i32 [ 1, %265 ], [ %314, %313 ], [ %326, %318 ]
  %332 = icmp sgt i32 %266, 0
  br i1 %332, label %333, label %426

333:                                              ; preds = %330
  %334 = icmp sgt i32 %239, 0
  %335 = sext i32 %331 to i64
  %336 = shl nsw i64 %335, 2
  %337 = sext i32 %239 to i64
  %338 = zext i32 %266 to i64
  %339 = zext i32 %239 to i64
  %340 = and i64 %339, 1
  %341 = icmp eq i32 %239, 1
  %342 = sub nsw i64 %339, %340
  %343 = icmp eq i64 %340, 0
  br label %374

344:                                              ; preds = %344, %281
  %345 = phi i64 [ %270, %281 ], [ %371, %344 ]
  %346 = phi i32 [ 1, %281 ], [ %370, %344 ]
  %347 = phi i32 [ %282, %281 ], [ %372, %344 ]
  %348 = getelementptr inbounds i32, i32* %123, i64 %345
  %349 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %345
  %350 = select i1 %120, i32* %348, i32* %349
  %351 = load i32, i32* %350, align 4
  %352 = mul nsw i32 %351, %346
  %353 = add nsw i64 %345, 1
  %354 = getelementptr inbounds i32, i32* %123, i64 %353
  %355 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %353
  %356 = select i1 %120, i32* %354, i32* %355
  %357 = load i32, i32* %356, align 4
  %358 = mul nsw i32 %357, %352
  %359 = add nsw i64 %345, 2
  %360 = getelementptr inbounds i32, i32* %123, i64 %359
  %361 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %359
  %362 = select i1 %120, i32* %360, i32* %361
  %363 = load i32, i32* %362, align 4
  %364 = mul nsw i32 %363, %358
  %365 = add nsw i64 %345, 3
  %366 = getelementptr inbounds i32, i32* %123, i64 %365
  %367 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %365
  %368 = select i1 %120, i32* %366, i32* %367
  %369 = load i32, i32* %368, align 4
  %370 = mul nsw i32 %369, %364
  %371 = add nsw i64 %345, 4
  %372 = add i32 %347, -4
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %313, label %344

374:                                              ; preds = %394, %333
  %375 = phi i64 [ 0, %333 ], [ %395, %394 ]
  br i1 %334, label %376, label %394

376:                                              ; preds = %374
  %377 = mul nsw i64 %375, %337
  %378 = trunc i64 %375 to i32
  %379 = mul i32 %129, %378
  br i1 %341, label %380, label %397

380:                                              ; preds = %397, %376
  %381 = phi i64 [ 0, %376 ], [ %423, %397 ]
  br i1 %343, label %394, label %382

382:                                              ; preds = %380
  %383 = add nsw i64 %381, %377
  %384 = mul nsw i64 %383, %335
  %385 = getelementptr inbounds float, float* %114, i64 %384
  %386 = bitcast float* %385 to i8*
  %387 = getelementptr inbounds i32, i32* %79, i64 %381
  %388 = load i32, i32* %387, align 4
  %389 = add nsw i32 %388, %379
  %390 = mul nsw i32 %389, %331
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds float, float* %45, i64 %391
  %393 = bitcast float* %392 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %386, i8* align 4 %393, i64 %336, i1 false) #6
  br label %394

394:                                              ; preds = %382, %380, %374
  %395 = add nuw nsw i64 %375, 1
  %396 = icmp eq i64 %395, %338
  br i1 %396, label %426, label %374

397:                                              ; preds = %376, %397
  %398 = phi i64 [ %423, %397 ], [ 0, %376 ]
  %399 = phi i64 [ %424, %397 ], [ %342, %376 ]
  %400 = add nsw i64 %398, %377
  %401 = mul nsw i64 %400, %335
  %402 = getelementptr inbounds float, float* %114, i64 %401
  %403 = bitcast float* %402 to i8*
  %404 = getelementptr inbounds i32, i32* %79, i64 %398
  %405 = load i32, i32* %404, align 4
  %406 = add nsw i32 %405, %379
  %407 = mul nsw i32 %406, %331
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds float, float* %45, i64 %408
  %410 = bitcast float* %409 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %403, i8* align 4 %410, i64 %336, i1 false) #6
  %411 = or i64 %398, 1
  %412 = add nsw i64 %411, %377
  %413 = mul nsw i64 %412, %335
  %414 = getelementptr inbounds float, float* %114, i64 %413
  %415 = bitcast float* %414 to i8*
  %416 = getelementptr inbounds i32, i32* %79, i64 %411
  %417 = load i32, i32* %416, align 4
  %418 = add nsw i32 %417, %379
  %419 = mul nsw i32 %418, %331
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds float, float* %45, i64 %420
  %422 = bitcast float* %421 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %415, i8* align 4 %422, i64 %336, i1 false) #6
  %423 = add nuw nsw i64 %398, 2
  %424 = add i64 %399, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %380, label %397

426:                                              ; preds = %394, %330
  %427 = icmp sgt i32 %113, 5
  br i1 %427, label %428, label %434

428:                                              ; preds = %426
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %426, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %130, label %435, label %441

435:                                              ; preds = %434
  %436 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %437 = load i32*, i32** %436, align 8
  %438 = icmp eq i32* %437, null
  br i1 %438, label %441, label %439

439:                                              ; preds = %435
  %440 = bitcast i32* %437 to i8*
  tail call void @_ZdaPv(i8* %440) #7
  br label %441

441:                                              ; preds = %434, %435, %439
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %442 = xor i1 %120, true
  %443 = icmp eq i32* %123, null
  %444 = or i1 %443, %442
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %446) #7
  br label %447

447:                                              ; preds = %441, %445
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIhiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !20
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !20
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !20
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !20
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !20
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !20
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !23
  br label %77

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !23
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !23
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !23
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !23
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !23
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %76 = load i32*, i32** %75, align 8
  br label %77

77:                                               ; preds = %48, %70
  %78 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %79 = phi i32* [ %76, %70 ], [ null, %48 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !26
  br label %112

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !26
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !26
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !26
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !26
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !26
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %110 = bitcast %union.TfLitePtrUnion* %109 to i8**
  %111 = load i8*, i8** %110, align 8
  br label %112

112:                                              ; preds = %82, %104
  %113 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %114 = phi i8* [ %111, %104 ], [ null, %82 ]
  %115 = shl i32 %9, 16
  %116 = ashr exact i32 %115, 16
  %117 = icmp slt i16 %10, 0
  %118 = select i1 %117, i32 %44, i32 0
  %119 = add i32 %118, %116
  %120 = icmp sgt i32 %44, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %78, 5
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %130, label %132, label %135

132:                                              ; preds = %112
  %133 = getelementptr inbounds %union.anon, %union.anon* %131, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %138

135:                                              ; preds = %112
  %136 = bitcast %union.anon* %131 to i32*
  %137 = icmp sgt i32 %78, 0
  br i1 %137, label %138, label %238

138:                                              ; preds = %135, %132
  %139 = phi i32* [ %134, %132 ], [ %136, %135 ]
  %140 = zext i32 %78 to i64
  %141 = icmp ult i32 %78, 8
  br i1 %141, label %227, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, 4294967288
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 24
  br i1 %148, label %194, label %149

149:                                              ; preds = %142
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %191, %151 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %189, %151 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %190, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %192, %151 ]
  %156 = getelementptr inbounds i32, i32* %139, i64 %152
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %152, 8
  %165 = getelementptr inbounds i32, i32* %139, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = or i64 %152, 16
  %174 = getelementptr inbounds i32, i32* %139, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = mul nsw <4 x i32> %176, %171
  %181 = mul nsw <4 x i32> %179, %172
  %182 = or i64 %152, 24
  %183 = getelementptr inbounds i32, i32* %139, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %152, 32
  %192 = add i64 %155, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %151, !llvm.loop !29

194:                                              ; preds = %151, %142
  %195 = phi <4 x i32> [ undef, %142 ], [ %189, %151 ]
  %196 = phi <4 x i32> [ undef, %142 ], [ %190, %151 ]
  %197 = phi i64 [ 0, %142 ], [ %191, %151 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %189, %151 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %190, %151 ]
  %200 = icmp eq i64 %147, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %194, %201
  %202 = phi i64 [ %214, %201 ], [ %197, %194 ]
  %203 = phi <4 x i32> [ %212, %201 ], [ %198, %194 ]
  %204 = phi <4 x i32> [ %213, %201 ], [ %199, %194 ]
  %205 = phi i64 [ %215, %201 ], [ %147, %194 ]
  %206 = getelementptr inbounds i32, i32* %139, i64 %202
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4
  %212 = mul nsw <4 x i32> %208, %203
  %213 = mul nsw <4 x i32> %211, %204
  %214 = add i64 %202, 8
  %215 = add i64 %205, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !30

217:                                              ; preds = %201, %194
  %218 = phi <4 x i32> [ %195, %194 ], [ %212, %201 ]
  %219 = phi <4 x i32> [ %196, %194 ], [ %213, %201 ]
  %220 = mul <4 x i32> %219, %218
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %143, %140
  br i1 %226, label %238, label %227

227:                                              ; preds = %217, %138
  %228 = phi i64 [ 0, %138 ], [ %143, %217 ]
  %229 = phi i32 [ 1, %138 ], [ %225, %217 ]
  br label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %236, %230 ], [ %228, %227 ]
  %232 = phi i32 [ %235, %230 ], [ %229, %227 ]
  %233 = getelementptr inbounds i32, i32* %139, i64 %231
  %234 = load i32, i32* %233, align 4
  %235 = mul nsw i32 %234, %232
  %236 = add nuw nsw i64 %231, 1
  %237 = icmp eq i64 %236, %140
  br i1 %237, label %238, label %230, !llvm.loop !31

238:                                              ; preds = %230, %217, %135
  %239 = phi i32 [ 1, %135 ], [ %225, %217 ], [ %235, %230 ]
  %240 = icmp sgt i32 %119, 0
  br i1 %240, label %241, label %265

241:                                              ; preds = %238
  %242 = zext i32 %119 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %248, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %283

248:                                              ; preds = %283, %241
  %249 = phi i32 [ undef, %241 ], [ %309, %283 ]
  %250 = phi i64 [ 0, %241 ], [ %310, %283 ]
  %251 = phi i32 [ 1, %241 ], [ %309, %283 ]
  %252 = icmp eq i64 %244, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %248, %253
  %254 = phi i64 [ %262, %253 ], [ %250, %248 ]
  %255 = phi i32 [ %261, %253 ], [ %251, %248 ]
  %256 = phi i64 [ %263, %253 ], [ %244, %248 ]
  %257 = getelementptr inbounds i32, i32* %123, i64 %254
  %258 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %254
  %259 = select i1 %120, i32* %257, i32* %258
  %260 = load i32, i32* %259, align 4
  %261 = mul nsw i32 %260, %255
  %262 = add nuw nsw i64 %254, 1
  %263 = add i64 %256, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !32

265:                                              ; preds = %248, %253, %238
  %266 = phi i32 [ 1, %238 ], [ %249, %248 ], [ %261, %253 ]
  %267 = add i32 %119, 1
  %268 = icmp slt i32 %267, %44
  br i1 %268, label %269, label %330

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = xor i32 %118, -1
  %272 = add i32 %44, %271
  %273 = shl i32 %9, 16
  %274 = ashr exact i32 %273, 16
  %275 = sub i32 %272, %274
  %276 = add i32 %44, -2
  %277 = sub i32 %276, %118
  %278 = sub i32 %277, %274
  %279 = and i32 %275, 3
  %280 = icmp ult i32 %278, 3
  br i1 %280, label %313, label %281

281:                                              ; preds = %269
  %282 = sub i32 %275, %279
  br label %343

283:                                              ; preds = %283, %246
  %284 = phi i64 [ 0, %246 ], [ %310, %283 ]
  %285 = phi i32 [ 1, %246 ], [ %309, %283 ]
  %286 = phi i64 [ %247, %246 ], [ %311, %283 ]
  %287 = getelementptr inbounds i32, i32* %123, i64 %284
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %284
  %289 = select i1 %120, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = mul nsw i32 %290, %285
  %292 = or i64 %284, 1
  %293 = getelementptr inbounds i32, i32* %123, i64 %292
  %294 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %292
  %295 = select i1 %120, i32* %293, i32* %294
  %296 = load i32, i32* %295, align 4
  %297 = mul nsw i32 %296, %291
  %298 = or i64 %284, 2
  %299 = getelementptr inbounds i32, i32* %123, i64 %298
  %300 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %298
  %301 = select i1 %120, i32* %299, i32* %300
  %302 = load i32, i32* %301, align 4
  %303 = mul nsw i32 %302, %297
  %304 = or i64 %284, 3
  %305 = getelementptr inbounds i32, i32* %123, i64 %304
  %306 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %304
  %307 = select i1 %120, i32* %305, i32* %306
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %303
  %310 = add nuw nsw i64 %284, 4
  %311 = add i64 %286, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %248, label %283

313:                                              ; preds = %343, %269
  %314 = phi i32 [ undef, %269 ], [ %369, %343 ]
  %315 = phi i64 [ %270, %269 ], [ %370, %343 ]
  %316 = phi i32 [ 1, %269 ], [ %369, %343 ]
  %317 = icmp eq i32 %279, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %313, %318
  %319 = phi i64 [ %327, %318 ], [ %315, %313 ]
  %320 = phi i32 [ %326, %318 ], [ %316, %313 ]
  %321 = phi i32 [ %328, %318 ], [ %279, %313 ]
  %322 = getelementptr inbounds i32, i32* %123, i64 %319
  %323 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %319
  %324 = select i1 %120, i32* %322, i32* %323
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %320
  %327 = add nsw i64 %319, 1
  %328 = add i32 %321, -1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %318, !llvm.loop !33

330:                                              ; preds = %313, %318, %265
  %331 = phi i32 [ 1, %265 ], [ %314, %313 ], [ %326, %318 ]
  %332 = icmp sgt i32 %266, 0
  br i1 %332, label %333, label %419

333:                                              ; preds = %330
  %334 = icmp sgt i32 %239, 0
  %335 = sext i32 %331 to i64
  %336 = sext i32 %239 to i64
  %337 = zext i32 %266 to i64
  %338 = zext i32 %239 to i64
  %339 = and i64 %338, 1
  %340 = icmp eq i32 %239, 1
  %341 = sub nsw i64 %338, %339
  %342 = icmp eq i64 %339, 0
  br label %373

343:                                              ; preds = %343, %281
  %344 = phi i64 [ %270, %281 ], [ %370, %343 ]
  %345 = phi i32 [ 1, %281 ], [ %369, %343 ]
  %346 = phi i32 [ %282, %281 ], [ %371, %343 ]
  %347 = getelementptr inbounds i32, i32* %123, i64 %344
  %348 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %344
  %349 = select i1 %120, i32* %347, i32* %348
  %350 = load i32, i32* %349, align 4
  %351 = mul nsw i32 %350, %345
  %352 = add nsw i64 %344, 1
  %353 = getelementptr inbounds i32, i32* %123, i64 %352
  %354 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %352
  %355 = select i1 %120, i32* %353, i32* %354
  %356 = load i32, i32* %355, align 4
  %357 = mul nsw i32 %356, %351
  %358 = add nsw i64 %344, 2
  %359 = getelementptr inbounds i32, i32* %123, i64 %358
  %360 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %358
  %361 = select i1 %120, i32* %359, i32* %360
  %362 = load i32, i32* %361, align 4
  %363 = mul nsw i32 %362, %357
  %364 = add nsw i64 %344, 3
  %365 = getelementptr inbounds i32, i32* %123, i64 %364
  %366 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %364
  %367 = select i1 %120, i32* %365, i32* %366
  %368 = load i32, i32* %367, align 4
  %369 = mul nsw i32 %368, %363
  %370 = add nsw i64 %344, 4
  %371 = add i32 %346, -4
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %313, label %343

373:                                              ; preds = %391, %333
  %374 = phi i64 [ 0, %333 ], [ %392, %391 ]
  br i1 %334, label %375, label %391

375:                                              ; preds = %373
  %376 = mul nsw i64 %374, %336
  %377 = trunc i64 %374 to i32
  %378 = mul i32 %129, %377
  br i1 %340, label %379, label %394

379:                                              ; preds = %394, %375
  %380 = phi i64 [ 0, %375 ], [ %416, %394 ]
  br i1 %342, label %391, label %381

381:                                              ; preds = %379
  %382 = add nsw i64 %380, %376
  %383 = mul nsw i64 %382, %335
  %384 = getelementptr inbounds i8, i8* %114, i64 %383
  %385 = getelementptr inbounds i32, i32* %79, i64 %380
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %386, %378
  %388 = mul nsw i32 %387, %331
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %45, i64 %389
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 1 %390, i64 %335, i1 false) #6
  br label %391

391:                                              ; preds = %381, %379, %373
  %392 = add nuw nsw i64 %374, 1
  %393 = icmp eq i64 %392, %337
  br i1 %393, label %419, label %373

394:                                              ; preds = %375, %394
  %395 = phi i64 [ %416, %394 ], [ 0, %375 ]
  %396 = phi i64 [ %417, %394 ], [ %341, %375 ]
  %397 = add nsw i64 %395, %376
  %398 = mul nsw i64 %397, %335
  %399 = getelementptr inbounds i8, i8* %114, i64 %398
  %400 = getelementptr inbounds i32, i32* %79, i64 %395
  %401 = load i32, i32* %400, align 4
  %402 = add nsw i32 %401, %378
  %403 = mul nsw i32 %402, %331
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %45, i64 %404
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %399, i8* align 1 %405, i64 %335, i1 false) #6
  %406 = or i64 %395, 1
  %407 = add nsw i64 %406, %376
  %408 = mul nsw i64 %407, %335
  %409 = getelementptr inbounds i8, i8* %114, i64 %408
  %410 = getelementptr inbounds i32, i32* %79, i64 %406
  %411 = load i32, i32* %410, align 4
  %412 = add nsw i32 %411, %378
  %413 = mul nsw i32 %412, %331
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %409, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %395, 2
  %417 = add i64 %396, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %379, label %394

419:                                              ; preds = %391, %330
  %420 = icmp sgt i32 %113, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %130, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %120, true
  %436 = icmp eq i32* %123, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIaiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !34
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !34
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !34
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !34
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !34
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !34
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !37
  br label %77

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !37
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !37
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !37
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !37
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !37
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %76 = load i32*, i32** %75, align 8
  br label %77

77:                                               ; preds = %48, %70
  %78 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %79 = phi i32* [ %76, %70 ], [ null, %48 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !40
  br label %112

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !40
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !40
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !40
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !40
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !40
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %110 = bitcast %union.TfLitePtrUnion* %109 to i8**
  %111 = load i8*, i8** %110, align 8
  br label %112

112:                                              ; preds = %82, %104
  %113 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %114 = phi i8* [ %111, %104 ], [ null, %82 ]
  %115 = shl i32 %9, 16
  %116 = ashr exact i32 %115, 16
  %117 = icmp slt i16 %10, 0
  %118 = select i1 %117, i32 %44, i32 0
  %119 = add i32 %118, %116
  %120 = icmp sgt i32 %44, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %78, 5
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %130, label %132, label %135

132:                                              ; preds = %112
  %133 = getelementptr inbounds %union.anon, %union.anon* %131, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %138

135:                                              ; preds = %112
  %136 = bitcast %union.anon* %131 to i32*
  %137 = icmp sgt i32 %78, 0
  br i1 %137, label %138, label %238

138:                                              ; preds = %135, %132
  %139 = phi i32* [ %134, %132 ], [ %136, %135 ]
  %140 = zext i32 %78 to i64
  %141 = icmp ult i32 %78, 8
  br i1 %141, label %227, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, 4294967288
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 24
  br i1 %148, label %194, label %149

149:                                              ; preds = %142
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %191, %151 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %189, %151 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %190, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %192, %151 ]
  %156 = getelementptr inbounds i32, i32* %139, i64 %152
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %152, 8
  %165 = getelementptr inbounds i32, i32* %139, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = or i64 %152, 16
  %174 = getelementptr inbounds i32, i32* %139, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = mul nsw <4 x i32> %176, %171
  %181 = mul nsw <4 x i32> %179, %172
  %182 = or i64 %152, 24
  %183 = getelementptr inbounds i32, i32* %139, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %152, 32
  %192 = add i64 %155, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %151, !llvm.loop !43

194:                                              ; preds = %151, %142
  %195 = phi <4 x i32> [ undef, %142 ], [ %189, %151 ]
  %196 = phi <4 x i32> [ undef, %142 ], [ %190, %151 ]
  %197 = phi i64 [ 0, %142 ], [ %191, %151 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %189, %151 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %190, %151 ]
  %200 = icmp eq i64 %147, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %194, %201
  %202 = phi i64 [ %214, %201 ], [ %197, %194 ]
  %203 = phi <4 x i32> [ %212, %201 ], [ %198, %194 ]
  %204 = phi <4 x i32> [ %213, %201 ], [ %199, %194 ]
  %205 = phi i64 [ %215, %201 ], [ %147, %194 ]
  %206 = getelementptr inbounds i32, i32* %139, i64 %202
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4
  %212 = mul nsw <4 x i32> %208, %203
  %213 = mul nsw <4 x i32> %211, %204
  %214 = add i64 %202, 8
  %215 = add i64 %205, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !44

217:                                              ; preds = %201, %194
  %218 = phi <4 x i32> [ %195, %194 ], [ %212, %201 ]
  %219 = phi <4 x i32> [ %196, %194 ], [ %213, %201 ]
  %220 = mul <4 x i32> %219, %218
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %143, %140
  br i1 %226, label %238, label %227

227:                                              ; preds = %217, %138
  %228 = phi i64 [ 0, %138 ], [ %143, %217 ]
  %229 = phi i32 [ 1, %138 ], [ %225, %217 ]
  br label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %236, %230 ], [ %228, %227 ]
  %232 = phi i32 [ %235, %230 ], [ %229, %227 ]
  %233 = getelementptr inbounds i32, i32* %139, i64 %231
  %234 = load i32, i32* %233, align 4
  %235 = mul nsw i32 %234, %232
  %236 = add nuw nsw i64 %231, 1
  %237 = icmp eq i64 %236, %140
  br i1 %237, label %238, label %230, !llvm.loop !45

238:                                              ; preds = %230, %217, %135
  %239 = phi i32 [ 1, %135 ], [ %225, %217 ], [ %235, %230 ]
  %240 = icmp sgt i32 %119, 0
  br i1 %240, label %241, label %265

241:                                              ; preds = %238
  %242 = zext i32 %119 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %248, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %283

248:                                              ; preds = %283, %241
  %249 = phi i32 [ undef, %241 ], [ %309, %283 ]
  %250 = phi i64 [ 0, %241 ], [ %310, %283 ]
  %251 = phi i32 [ 1, %241 ], [ %309, %283 ]
  %252 = icmp eq i64 %244, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %248, %253
  %254 = phi i64 [ %262, %253 ], [ %250, %248 ]
  %255 = phi i32 [ %261, %253 ], [ %251, %248 ]
  %256 = phi i64 [ %263, %253 ], [ %244, %248 ]
  %257 = getelementptr inbounds i32, i32* %123, i64 %254
  %258 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %254
  %259 = select i1 %120, i32* %257, i32* %258
  %260 = load i32, i32* %259, align 4
  %261 = mul nsw i32 %260, %255
  %262 = add nuw nsw i64 %254, 1
  %263 = add i64 %256, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !46

265:                                              ; preds = %248, %253, %238
  %266 = phi i32 [ 1, %238 ], [ %249, %248 ], [ %261, %253 ]
  %267 = add i32 %119, 1
  %268 = icmp slt i32 %267, %44
  br i1 %268, label %269, label %330

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = xor i32 %118, -1
  %272 = add i32 %44, %271
  %273 = shl i32 %9, 16
  %274 = ashr exact i32 %273, 16
  %275 = sub i32 %272, %274
  %276 = add i32 %44, -2
  %277 = sub i32 %276, %118
  %278 = sub i32 %277, %274
  %279 = and i32 %275, 3
  %280 = icmp ult i32 %278, 3
  br i1 %280, label %313, label %281

281:                                              ; preds = %269
  %282 = sub i32 %275, %279
  br label %343

283:                                              ; preds = %283, %246
  %284 = phi i64 [ 0, %246 ], [ %310, %283 ]
  %285 = phi i32 [ 1, %246 ], [ %309, %283 ]
  %286 = phi i64 [ %247, %246 ], [ %311, %283 ]
  %287 = getelementptr inbounds i32, i32* %123, i64 %284
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %284
  %289 = select i1 %120, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = mul nsw i32 %290, %285
  %292 = or i64 %284, 1
  %293 = getelementptr inbounds i32, i32* %123, i64 %292
  %294 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %292
  %295 = select i1 %120, i32* %293, i32* %294
  %296 = load i32, i32* %295, align 4
  %297 = mul nsw i32 %296, %291
  %298 = or i64 %284, 2
  %299 = getelementptr inbounds i32, i32* %123, i64 %298
  %300 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %298
  %301 = select i1 %120, i32* %299, i32* %300
  %302 = load i32, i32* %301, align 4
  %303 = mul nsw i32 %302, %297
  %304 = or i64 %284, 3
  %305 = getelementptr inbounds i32, i32* %123, i64 %304
  %306 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %304
  %307 = select i1 %120, i32* %305, i32* %306
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %303
  %310 = add nuw nsw i64 %284, 4
  %311 = add i64 %286, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %248, label %283

313:                                              ; preds = %343, %269
  %314 = phi i32 [ undef, %269 ], [ %369, %343 ]
  %315 = phi i64 [ %270, %269 ], [ %370, %343 ]
  %316 = phi i32 [ 1, %269 ], [ %369, %343 ]
  %317 = icmp eq i32 %279, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %313, %318
  %319 = phi i64 [ %327, %318 ], [ %315, %313 ]
  %320 = phi i32 [ %326, %318 ], [ %316, %313 ]
  %321 = phi i32 [ %328, %318 ], [ %279, %313 ]
  %322 = getelementptr inbounds i32, i32* %123, i64 %319
  %323 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %319
  %324 = select i1 %120, i32* %322, i32* %323
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %320
  %327 = add nsw i64 %319, 1
  %328 = add i32 %321, -1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %318, !llvm.loop !47

330:                                              ; preds = %313, %318, %265
  %331 = phi i32 [ 1, %265 ], [ %314, %313 ], [ %326, %318 ]
  %332 = icmp sgt i32 %266, 0
  br i1 %332, label %333, label %419

333:                                              ; preds = %330
  %334 = icmp sgt i32 %239, 0
  %335 = sext i32 %331 to i64
  %336 = sext i32 %239 to i64
  %337 = zext i32 %266 to i64
  %338 = zext i32 %239 to i64
  %339 = and i64 %338, 1
  %340 = icmp eq i32 %239, 1
  %341 = sub nsw i64 %338, %339
  %342 = icmp eq i64 %339, 0
  br label %373

343:                                              ; preds = %343, %281
  %344 = phi i64 [ %270, %281 ], [ %370, %343 ]
  %345 = phi i32 [ 1, %281 ], [ %369, %343 ]
  %346 = phi i32 [ %282, %281 ], [ %371, %343 ]
  %347 = getelementptr inbounds i32, i32* %123, i64 %344
  %348 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %344
  %349 = select i1 %120, i32* %347, i32* %348
  %350 = load i32, i32* %349, align 4
  %351 = mul nsw i32 %350, %345
  %352 = add nsw i64 %344, 1
  %353 = getelementptr inbounds i32, i32* %123, i64 %352
  %354 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %352
  %355 = select i1 %120, i32* %353, i32* %354
  %356 = load i32, i32* %355, align 4
  %357 = mul nsw i32 %356, %351
  %358 = add nsw i64 %344, 2
  %359 = getelementptr inbounds i32, i32* %123, i64 %358
  %360 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %358
  %361 = select i1 %120, i32* %359, i32* %360
  %362 = load i32, i32* %361, align 4
  %363 = mul nsw i32 %362, %357
  %364 = add nsw i64 %344, 3
  %365 = getelementptr inbounds i32, i32* %123, i64 %364
  %366 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %364
  %367 = select i1 %120, i32* %365, i32* %366
  %368 = load i32, i32* %367, align 4
  %369 = mul nsw i32 %368, %363
  %370 = add nsw i64 %344, 4
  %371 = add i32 %346, -4
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %313, label %343

373:                                              ; preds = %391, %333
  %374 = phi i64 [ 0, %333 ], [ %392, %391 ]
  br i1 %334, label %375, label %391

375:                                              ; preds = %373
  %376 = mul nsw i64 %374, %336
  %377 = trunc i64 %374 to i32
  %378 = mul i32 %129, %377
  br i1 %340, label %379, label %394

379:                                              ; preds = %394, %375
  %380 = phi i64 [ 0, %375 ], [ %416, %394 ]
  br i1 %342, label %391, label %381

381:                                              ; preds = %379
  %382 = add nsw i64 %380, %376
  %383 = mul nsw i64 %382, %335
  %384 = getelementptr inbounds i8, i8* %114, i64 %383
  %385 = getelementptr inbounds i32, i32* %79, i64 %380
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %386, %378
  %388 = mul nsw i32 %387, %331
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %45, i64 %389
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 1 %390, i64 %335, i1 false) #6
  br label %391

391:                                              ; preds = %381, %379, %373
  %392 = add nuw nsw i64 %374, 1
  %393 = icmp eq i64 %392, %337
  br i1 %393, label %419, label %373

394:                                              ; preds = %375, %394
  %395 = phi i64 [ %416, %394 ], [ 0, %375 ]
  %396 = phi i64 [ %417, %394 ], [ %341, %375 ]
  %397 = add nsw i64 %395, %376
  %398 = mul nsw i64 %397, %335
  %399 = getelementptr inbounds i8, i8* %114, i64 %398
  %400 = getelementptr inbounds i32, i32* %79, i64 %395
  %401 = load i32, i32* %400, align 4
  %402 = add nsw i32 %401, %378
  %403 = mul nsw i32 %402, %331
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %45, i64 %404
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %399, i8* align 1 %405, i64 %335, i1 false) #6
  %406 = or i64 %395, 1
  %407 = add nsw i64 %406, %376
  %408 = mul nsw i64 %407, %335
  %409 = getelementptr inbounds i8, i8* %114, i64 %408
  %410 = getelementptr inbounds i32, i32* %79, i64 %406
  %411 = load i32, i32* %410, align 4
  %412 = add nsw i32 %411, %378
  %413 = mul nsw i32 %412, %331
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %409, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %395, 2
  %417 = add i64 %396, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %379, label %394

419:                                              ; preds = %391, %330
  %420 = icmp sgt i32 %113, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %130, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %120, true
  %436 = icmp eq i32* %123, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIiiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !48
  br label %42

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !48
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !48
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !48
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !48
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !48
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1, i32 0
  %41 = load i32*, i32** %40, align 8
  br label %42

42:                                               ; preds = %13, %35
  %43 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %44 = phi i32* [ %41, %35 ], [ null, %13 ]
  %45 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #6
  %46 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %48, align 8, !alias.scope !51
  br label %76

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %51 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %50, align 8, !noalias !51
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 4, !noalias !51
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 0
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %53, i32* %55, align 8, !alias.scope !51
  %56 = icmp sgt i32 %53, 5
  br i1 %56, label %57, label %64

57:                                               ; preds = %49
  %58 = sext i32 %53 to i64
  %59 = shl nsw i64 %58, 2
  %60 = tail call i8* @_Znam(i64 %59) #7, !noalias !51
  %61 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %62 = bitcast i32** %61 to i8**
  store i8* %60, i8** %62, align 8, !alias.scope !51
  %63 = bitcast i8* %60 to i32*
  br label %69

64:                                               ; preds = %49
  %65 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %66 = bitcast %union.anon* %65 to i32*
  %67 = sext i32 %53 to i64
  %68 = shl nsw i64 %67, 2
  br label %69

69:                                               ; preds = %64, %57
  %70 = phi i64 [ %59, %57 ], [ %68, %64 ]
  %71 = phi i32* [ %63, %57 ], [ %66, %64 ]
  %72 = bitcast i32* %71 to i8*
  %73 = bitcast i32* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73, i64 %70, i1 false) #6
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %75 = load i32*, i32** %74, align 8
  br label %76

76:                                               ; preds = %47, %69
  %77 = phi i32 [ %53, %69 ], [ 0, %47 ]
  %78 = phi i32* [ %75, %69 ], [ null, %47 ]
  %79 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %79) #6
  %80 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %82, align 8, !alias.scope !54
  br label %110

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %85 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %84, align 8, !noalias !54
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 0
  %87 = load i32, i32* %86, align 4, !noalias !54
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 1, i64 0
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %87, i32* %89, align 8, !alias.scope !54
  %90 = icmp sgt i32 %87, 5
  br i1 %90, label %91, label %98

91:                                               ; preds = %83
  %92 = sext i32 %87 to i64
  %93 = shl nsw i64 %92, 2
  %94 = tail call i8* @_Znam(i64 %93) #7, !noalias !54
  %95 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %96 = bitcast i32** %95 to i8**
  store i8* %94, i8** %96, align 8, !alias.scope !54
  %97 = bitcast i8* %94 to i32*
  br label %103

98:                                               ; preds = %83
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i32*
  %101 = sext i32 %87 to i64
  %102 = shl nsw i64 %101, 2
  br label %103

103:                                              ; preds = %98, %91
  %104 = phi i64 [ %93, %91 ], [ %102, %98 ]
  %105 = phi i32* [ %97, %91 ], [ %100, %98 ]
  %106 = bitcast i32* %105 to i8*
  %107 = bitcast i32* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %107, i64 %104, i1 false) #6
  %108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  br label %110

110:                                              ; preds = %81, %103
  %111 = phi i32 [ %87, %103 ], [ 0, %81 ]
  %112 = phi i32* [ %109, %103 ], [ null, %81 ]
  %113 = shl i32 %9, 16
  %114 = ashr exact i32 %113, 16
  %115 = icmp slt i16 %10, 0
  %116 = select i1 %115, i32 %43, i32 0
  %117 = add i32 %116, %114
  %118 = icmp sgt i32 %43, 5
  %119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %120 = getelementptr inbounds %union.anon, %union.anon* %119, i64 0, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = sext i32 %117 to i64
  %123 = getelementptr inbounds i32, i32* %121, i64 %122
  %124 = bitcast %union.anon* %119 to [5 x i32]*
  %125 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %122
  %126 = select i1 %118, i32* %123, i32* %125
  %127 = load i32, i32* %126, align 4
  %128 = icmp sgt i32 %77, 5
  %129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %128, label %130, label %133

130:                                              ; preds = %110
  %131 = getelementptr inbounds %union.anon, %union.anon* %129, i64 0, i32 0
  %132 = load i32*, i32** %131, align 8
  br label %136

133:                                              ; preds = %110
  %134 = bitcast %union.anon* %129 to i32*
  %135 = icmp sgt i32 %77, 0
  br i1 %135, label %136, label %236

136:                                              ; preds = %133, %130
  %137 = phi i32* [ %132, %130 ], [ %134, %133 ]
  %138 = zext i32 %77 to i64
  %139 = icmp ult i32 %77, 8
  br i1 %139, label %225, label %140

140:                                              ; preds = %136
  %141 = and i64 %138, 4294967288
  %142 = add nsw i64 %141, -8
  %143 = lshr exact i64 %142, 3
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 3
  %146 = icmp ult i64 %142, 24
  br i1 %146, label %192, label %147

147:                                              ; preds = %140
  %148 = sub nsw i64 %144, %145
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %189, %149 ]
  %151 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %147 ], [ %187, %149 ]
  %152 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %147 ], [ %188, %149 ]
  %153 = phi i64 [ %148, %147 ], [ %190, %149 ]
  %154 = getelementptr inbounds i32, i32* %137, i64 %150
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = getelementptr inbounds i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = mul nsw <4 x i32> %156, %151
  %161 = mul nsw <4 x i32> %159, %152
  %162 = or i64 %150, 8
  %163 = getelementptr inbounds i32, i32* %137, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = getelementptr inbounds i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = mul nsw <4 x i32> %165, %160
  %170 = mul nsw <4 x i32> %168, %161
  %171 = or i64 %150, 16
  %172 = getelementptr inbounds i32, i32* %137, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = mul nsw <4 x i32> %174, %169
  %179 = mul nsw <4 x i32> %177, %170
  %180 = or i64 %150, 24
  %181 = getelementptr inbounds i32, i32* %137, i64 %180
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = getelementptr inbounds i32, i32* %181, i64 4
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = mul nsw <4 x i32> %183, %178
  %188 = mul nsw <4 x i32> %186, %179
  %189 = add i64 %150, 32
  %190 = add i64 %153, -4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %149, !llvm.loop !57

192:                                              ; preds = %149, %140
  %193 = phi <4 x i32> [ undef, %140 ], [ %187, %149 ]
  %194 = phi <4 x i32> [ undef, %140 ], [ %188, %149 ]
  %195 = phi i64 [ 0, %140 ], [ %189, %149 ]
  %196 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %140 ], [ %187, %149 ]
  %197 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %140 ], [ %188, %149 ]
  %198 = icmp eq i64 %145, 0
  br i1 %198, label %215, label %199

199:                                              ; preds = %192, %199
  %200 = phi i64 [ %212, %199 ], [ %195, %192 ]
  %201 = phi <4 x i32> [ %210, %199 ], [ %196, %192 ]
  %202 = phi <4 x i32> [ %211, %199 ], [ %197, %192 ]
  %203 = phi i64 [ %213, %199 ], [ %145, %192 ]
  %204 = getelementptr inbounds i32, i32* %137, i64 %200
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4
  %207 = getelementptr inbounds i32, i32* %204, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = mul nsw <4 x i32> %206, %201
  %211 = mul nsw <4 x i32> %209, %202
  %212 = add i64 %200, 8
  %213 = add i64 %203, -1
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %199, !llvm.loop !58

215:                                              ; preds = %199, %192
  %216 = phi <4 x i32> [ %193, %192 ], [ %210, %199 ]
  %217 = phi <4 x i32> [ %194, %192 ], [ %211, %199 ]
  %218 = mul <4 x i32> %217, %216
  %219 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %220 = mul <4 x i32> %218, %219
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = extractelement <4 x i32> %222, i32 0
  %224 = icmp eq i64 %141, %138
  br i1 %224, label %236, label %225

225:                                              ; preds = %215, %136
  %226 = phi i64 [ 0, %136 ], [ %141, %215 ]
  %227 = phi i32 [ 1, %136 ], [ %223, %215 ]
  br label %228

228:                                              ; preds = %225, %228
  %229 = phi i64 [ %234, %228 ], [ %226, %225 ]
  %230 = phi i32 [ %233, %228 ], [ %227, %225 ]
  %231 = getelementptr inbounds i32, i32* %137, i64 %229
  %232 = load i32, i32* %231, align 4
  %233 = mul nsw i32 %232, %230
  %234 = add nuw nsw i64 %229, 1
  %235 = icmp eq i64 %234, %138
  br i1 %235, label %236, label %228, !llvm.loop !59

236:                                              ; preds = %228, %215, %133
  %237 = phi i32 [ 1, %133 ], [ %223, %215 ], [ %233, %228 ]
  %238 = icmp sgt i32 %117, 0
  br i1 %238, label %239, label %263

239:                                              ; preds = %236
  %240 = zext i32 %117 to i64
  %241 = add nsw i64 %240, -1
  %242 = and i64 %240, 3
  %243 = icmp ult i64 %241, 3
  br i1 %243, label %246, label %244

244:                                              ; preds = %239
  %245 = sub nsw i64 %240, %242
  br label %281

246:                                              ; preds = %281, %239
  %247 = phi i32 [ undef, %239 ], [ %307, %281 ]
  %248 = phi i64 [ 0, %239 ], [ %308, %281 ]
  %249 = phi i32 [ 1, %239 ], [ %307, %281 ]
  %250 = icmp eq i64 %242, 0
  br i1 %250, label %263, label %251

251:                                              ; preds = %246, %251
  %252 = phi i64 [ %260, %251 ], [ %248, %246 ]
  %253 = phi i32 [ %259, %251 ], [ %249, %246 ]
  %254 = phi i64 [ %261, %251 ], [ %242, %246 ]
  %255 = getelementptr inbounds i32, i32* %121, i64 %252
  %256 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %252
  %257 = select i1 %118, i32* %255, i32* %256
  %258 = load i32, i32* %257, align 4
  %259 = mul nsw i32 %258, %253
  %260 = add nuw nsw i64 %252, 1
  %261 = add i64 %254, -1
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %251, !llvm.loop !60

263:                                              ; preds = %246, %251, %236
  %264 = phi i32 [ 1, %236 ], [ %247, %246 ], [ %259, %251 ]
  %265 = add i32 %117, 1
  %266 = icmp slt i32 %265, %43
  br i1 %266, label %267, label %328

267:                                              ; preds = %263
  %268 = sext i32 %265 to i64
  %269 = xor i32 %116, -1
  %270 = add i32 %43, %269
  %271 = shl i32 %9, 16
  %272 = ashr exact i32 %271, 16
  %273 = sub i32 %270, %272
  %274 = add i32 %43, -2
  %275 = sub i32 %274, %116
  %276 = sub i32 %275, %272
  %277 = and i32 %273, 3
  %278 = icmp ult i32 %276, 3
  br i1 %278, label %311, label %279

279:                                              ; preds = %267
  %280 = sub i32 %273, %277
  br label %342

281:                                              ; preds = %281, %244
  %282 = phi i64 [ 0, %244 ], [ %308, %281 ]
  %283 = phi i32 [ 1, %244 ], [ %307, %281 ]
  %284 = phi i64 [ %245, %244 ], [ %309, %281 ]
  %285 = getelementptr inbounds i32, i32* %121, i64 %282
  %286 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %282
  %287 = select i1 %118, i32* %285, i32* %286
  %288 = load i32, i32* %287, align 4
  %289 = mul nsw i32 %288, %283
  %290 = or i64 %282, 1
  %291 = getelementptr inbounds i32, i32* %121, i64 %290
  %292 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %290
  %293 = select i1 %118, i32* %291, i32* %292
  %294 = load i32, i32* %293, align 4
  %295 = mul nsw i32 %294, %289
  %296 = or i64 %282, 2
  %297 = getelementptr inbounds i32, i32* %121, i64 %296
  %298 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %296
  %299 = select i1 %118, i32* %297, i32* %298
  %300 = load i32, i32* %299, align 4
  %301 = mul nsw i32 %300, %295
  %302 = or i64 %282, 3
  %303 = getelementptr inbounds i32, i32* %121, i64 %302
  %304 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %302
  %305 = select i1 %118, i32* %303, i32* %304
  %306 = load i32, i32* %305, align 4
  %307 = mul nsw i32 %306, %301
  %308 = add nuw nsw i64 %282, 4
  %309 = add i64 %284, -4
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %246, label %281

311:                                              ; preds = %342, %267
  %312 = phi i32 [ undef, %267 ], [ %368, %342 ]
  %313 = phi i64 [ %268, %267 ], [ %369, %342 ]
  %314 = phi i32 [ 1, %267 ], [ %368, %342 ]
  %315 = icmp eq i32 %277, 0
  br i1 %315, label %328, label %316

316:                                              ; preds = %311, %316
  %317 = phi i64 [ %325, %316 ], [ %313, %311 ]
  %318 = phi i32 [ %324, %316 ], [ %314, %311 ]
  %319 = phi i32 [ %326, %316 ], [ %277, %311 ]
  %320 = getelementptr inbounds i32, i32* %121, i64 %317
  %321 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %317
  %322 = select i1 %118, i32* %320, i32* %321
  %323 = load i32, i32* %322, align 4
  %324 = mul nsw i32 %323, %318
  %325 = add nsw i64 %317, 1
  %326 = add i32 %319, -1
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %316, !llvm.loop !61

328:                                              ; preds = %311, %316, %263
  %329 = phi i32 [ 1, %263 ], [ %312, %311 ], [ %324, %316 ]
  %330 = icmp sgt i32 %264, 0
  br i1 %330, label %331, label %424

331:                                              ; preds = %328
  %332 = icmp sgt i32 %237, 0
  %333 = sext i32 %329 to i64
  %334 = shl nsw i64 %333, 2
  %335 = sext i32 %237 to i64
  %336 = zext i32 %264 to i64
  %337 = zext i32 %237 to i64
  %338 = and i64 %337, 1
  %339 = icmp eq i32 %237, 1
  %340 = sub nsw i64 %337, %338
  %341 = icmp eq i64 %338, 0
  br label %372

342:                                              ; preds = %342, %279
  %343 = phi i64 [ %268, %279 ], [ %369, %342 ]
  %344 = phi i32 [ 1, %279 ], [ %368, %342 ]
  %345 = phi i32 [ %280, %279 ], [ %370, %342 ]
  %346 = getelementptr inbounds i32, i32* %121, i64 %343
  %347 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %343
  %348 = select i1 %118, i32* %346, i32* %347
  %349 = load i32, i32* %348, align 4
  %350 = mul nsw i32 %349, %344
  %351 = add nsw i64 %343, 1
  %352 = getelementptr inbounds i32, i32* %121, i64 %351
  %353 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %351
  %354 = select i1 %118, i32* %352, i32* %353
  %355 = load i32, i32* %354, align 4
  %356 = mul nsw i32 %355, %350
  %357 = add nsw i64 %343, 2
  %358 = getelementptr inbounds i32, i32* %121, i64 %357
  %359 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %357
  %360 = select i1 %118, i32* %358, i32* %359
  %361 = load i32, i32* %360, align 4
  %362 = mul nsw i32 %361, %356
  %363 = add nsw i64 %343, 3
  %364 = getelementptr inbounds i32, i32* %121, i64 %363
  %365 = getelementptr inbounds [5 x i32], [5 x i32]* %124, i64 0, i64 %363
  %366 = select i1 %118, i32* %364, i32* %365
  %367 = load i32, i32* %366, align 4
  %368 = mul nsw i32 %367, %362
  %369 = add nsw i64 %343, 4
  %370 = add i32 %345, -4
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %311, label %342

372:                                              ; preds = %392, %331
  %373 = phi i64 [ 0, %331 ], [ %393, %392 ]
  br i1 %332, label %374, label %392

374:                                              ; preds = %372
  %375 = mul nsw i64 %373, %335
  %376 = trunc i64 %373 to i32
  %377 = mul i32 %127, %376
  br i1 %339, label %378, label %395

378:                                              ; preds = %395, %374
  %379 = phi i64 [ 0, %374 ], [ %421, %395 ]
  br i1 %341, label %392, label %380

380:                                              ; preds = %378
  %381 = add nsw i64 %379, %375
  %382 = mul nsw i64 %381, %333
  %383 = getelementptr inbounds i32, i32* %112, i64 %382
  %384 = bitcast i32* %383 to i8*
  %385 = getelementptr inbounds i32, i32* %78, i64 %379
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %386, %377
  %388 = mul nsw i32 %387, %329
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32, i32* %44, i64 %389
  %391 = bitcast i32* %390 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %384, i8* align 4 %391, i64 %334, i1 false) #6
  br label %392

392:                                              ; preds = %380, %378, %372
  %393 = add nuw nsw i64 %373, 1
  %394 = icmp eq i64 %393, %336
  br i1 %394, label %424, label %372

395:                                              ; preds = %374, %395
  %396 = phi i64 [ %421, %395 ], [ 0, %374 ]
  %397 = phi i64 [ %422, %395 ], [ %340, %374 ]
  %398 = add nsw i64 %396, %375
  %399 = mul nsw i64 %398, %333
  %400 = getelementptr inbounds i32, i32* %112, i64 %399
  %401 = bitcast i32* %400 to i8*
  %402 = getelementptr inbounds i32, i32* %78, i64 %396
  %403 = load i32, i32* %402, align 4
  %404 = add nsw i32 %403, %377
  %405 = mul nsw i32 %404, %329
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i32, i32* %44, i64 %406
  %408 = bitcast i32* %407 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %401, i8* align 4 %408, i64 %334, i1 false) #6
  %409 = or i64 %396, 1
  %410 = add nsw i64 %409, %375
  %411 = mul nsw i64 %410, %333
  %412 = getelementptr inbounds i32, i32* %112, i64 %411
  %413 = bitcast i32* %412 to i8*
  %414 = getelementptr inbounds i32, i32* %78, i64 %409
  %415 = load i32, i32* %414, align 4
  %416 = add nsw i32 %415, %377
  %417 = mul nsw i32 %416, %329
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i32, i32* %44, i64 %418
  %420 = bitcast i32* %419 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %413, i8* align 4 %420, i64 %334, i1 false) #6
  %421 = add nuw nsw i64 %396, 2
  %422 = add i64 %397, -2
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %378, label %395

424:                                              ; preds = %392, %328
  %425 = icmp sgt i32 %111, 5
  br i1 %425, label %426, label %432

426:                                              ; preds = %424
  %427 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %428 = load i32*, i32** %427, align 8
  %429 = icmp eq i32* %428, null
  br i1 %429, label %432, label %430

430:                                              ; preds = %426
  %431 = bitcast i32* %428 to i8*
  tail call void @_ZdaPv(i8* %431) #7
  br label %432

432:                                              ; preds = %424, %426, %430
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %79) #6
  br i1 %128, label %433, label %439

433:                                              ; preds = %432
  %434 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %435 = load i32*, i32** %434, align 8
  %436 = icmp eq i32* %435, null
  br i1 %436, label %439, label %437

437:                                              ; preds = %433
  %438 = bitcast i32* %435 to i8*
  tail call void @_ZdaPv(i8* %438) #7
  br label %439

439:                                              ; preds = %432, %433, %437
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #6
  %440 = xor i1 %118, true
  %441 = icmp eq i32* %121, null
  %442 = or i1 %441, %440
  br i1 %442, label %445, label %443

443:                                              ; preds = %439
  %444 = bitcast i32* %121 to i8*
  tail call void @_ZdaPv(i8* %444) #7
  br label %445

445:                                              ; preds = %439, %443
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIliEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !62
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !62
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !62
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !62
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !62
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !62
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i64**
  %42 = load i64*, i64** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i64* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !65
  br label %77

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !65
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !65
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !65
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !65
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !65
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %76 = load i32*, i32** %75, align 8
  br label %77

77:                                               ; preds = %48, %70
  %78 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %79 = phi i32* [ %76, %70 ], [ null, %48 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !68
  br label %112

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !68
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !68
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !68
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !68
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !68
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %110 = bitcast %union.TfLitePtrUnion* %109 to i64**
  %111 = load i64*, i64** %110, align 8
  br label %112

112:                                              ; preds = %82, %104
  %113 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %114 = phi i64* [ %111, %104 ], [ null, %82 ]
  %115 = shl i32 %9, 16
  %116 = ashr exact i32 %115, 16
  %117 = icmp slt i16 %10, 0
  %118 = select i1 %117, i32 %44, i32 0
  %119 = add i32 %118, %116
  %120 = icmp sgt i32 %44, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %78, 5
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %130, label %132, label %135

132:                                              ; preds = %112
  %133 = getelementptr inbounds %union.anon, %union.anon* %131, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %138

135:                                              ; preds = %112
  %136 = bitcast %union.anon* %131 to i32*
  %137 = icmp sgt i32 %78, 0
  br i1 %137, label %138, label %238

138:                                              ; preds = %135, %132
  %139 = phi i32* [ %134, %132 ], [ %136, %135 ]
  %140 = zext i32 %78 to i64
  %141 = icmp ult i32 %78, 8
  br i1 %141, label %227, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, 4294967288
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 24
  br i1 %148, label %194, label %149

149:                                              ; preds = %142
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %191, %151 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %189, %151 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %190, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %192, %151 ]
  %156 = getelementptr inbounds i32, i32* %139, i64 %152
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %152, 8
  %165 = getelementptr inbounds i32, i32* %139, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = or i64 %152, 16
  %174 = getelementptr inbounds i32, i32* %139, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = mul nsw <4 x i32> %176, %171
  %181 = mul nsw <4 x i32> %179, %172
  %182 = or i64 %152, 24
  %183 = getelementptr inbounds i32, i32* %139, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %152, 32
  %192 = add i64 %155, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %151, !llvm.loop !71

194:                                              ; preds = %151, %142
  %195 = phi <4 x i32> [ undef, %142 ], [ %189, %151 ]
  %196 = phi <4 x i32> [ undef, %142 ], [ %190, %151 ]
  %197 = phi i64 [ 0, %142 ], [ %191, %151 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %189, %151 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %190, %151 ]
  %200 = icmp eq i64 %147, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %194, %201
  %202 = phi i64 [ %214, %201 ], [ %197, %194 ]
  %203 = phi <4 x i32> [ %212, %201 ], [ %198, %194 ]
  %204 = phi <4 x i32> [ %213, %201 ], [ %199, %194 ]
  %205 = phi i64 [ %215, %201 ], [ %147, %194 ]
  %206 = getelementptr inbounds i32, i32* %139, i64 %202
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4
  %212 = mul nsw <4 x i32> %208, %203
  %213 = mul nsw <4 x i32> %211, %204
  %214 = add i64 %202, 8
  %215 = add i64 %205, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !72

217:                                              ; preds = %201, %194
  %218 = phi <4 x i32> [ %195, %194 ], [ %212, %201 ]
  %219 = phi <4 x i32> [ %196, %194 ], [ %213, %201 ]
  %220 = mul <4 x i32> %219, %218
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %143, %140
  br i1 %226, label %238, label %227

227:                                              ; preds = %217, %138
  %228 = phi i64 [ 0, %138 ], [ %143, %217 ]
  %229 = phi i32 [ 1, %138 ], [ %225, %217 ]
  br label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %236, %230 ], [ %228, %227 ]
  %232 = phi i32 [ %235, %230 ], [ %229, %227 ]
  %233 = getelementptr inbounds i32, i32* %139, i64 %231
  %234 = load i32, i32* %233, align 4
  %235 = mul nsw i32 %234, %232
  %236 = add nuw nsw i64 %231, 1
  %237 = icmp eq i64 %236, %140
  br i1 %237, label %238, label %230, !llvm.loop !73

238:                                              ; preds = %230, %217, %135
  %239 = phi i32 [ 1, %135 ], [ %225, %217 ], [ %235, %230 ]
  %240 = icmp sgt i32 %119, 0
  br i1 %240, label %241, label %265

241:                                              ; preds = %238
  %242 = zext i32 %119 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %248, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %283

248:                                              ; preds = %283, %241
  %249 = phi i32 [ undef, %241 ], [ %309, %283 ]
  %250 = phi i64 [ 0, %241 ], [ %310, %283 ]
  %251 = phi i32 [ 1, %241 ], [ %309, %283 ]
  %252 = icmp eq i64 %244, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %248, %253
  %254 = phi i64 [ %262, %253 ], [ %250, %248 ]
  %255 = phi i32 [ %261, %253 ], [ %251, %248 ]
  %256 = phi i64 [ %263, %253 ], [ %244, %248 ]
  %257 = getelementptr inbounds i32, i32* %123, i64 %254
  %258 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %254
  %259 = select i1 %120, i32* %257, i32* %258
  %260 = load i32, i32* %259, align 4
  %261 = mul nsw i32 %260, %255
  %262 = add nuw nsw i64 %254, 1
  %263 = add i64 %256, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !74

265:                                              ; preds = %248, %253, %238
  %266 = phi i32 [ 1, %238 ], [ %249, %248 ], [ %261, %253 ]
  %267 = add i32 %119, 1
  %268 = icmp slt i32 %267, %44
  br i1 %268, label %269, label %330

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = xor i32 %118, -1
  %272 = add i32 %44, %271
  %273 = shl i32 %9, 16
  %274 = ashr exact i32 %273, 16
  %275 = sub i32 %272, %274
  %276 = add i32 %44, -2
  %277 = sub i32 %276, %118
  %278 = sub i32 %277, %274
  %279 = and i32 %275, 3
  %280 = icmp ult i32 %278, 3
  br i1 %280, label %313, label %281

281:                                              ; preds = %269
  %282 = sub i32 %275, %279
  br label %344

283:                                              ; preds = %283, %246
  %284 = phi i64 [ 0, %246 ], [ %310, %283 ]
  %285 = phi i32 [ 1, %246 ], [ %309, %283 ]
  %286 = phi i64 [ %247, %246 ], [ %311, %283 ]
  %287 = getelementptr inbounds i32, i32* %123, i64 %284
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %284
  %289 = select i1 %120, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = mul nsw i32 %290, %285
  %292 = or i64 %284, 1
  %293 = getelementptr inbounds i32, i32* %123, i64 %292
  %294 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %292
  %295 = select i1 %120, i32* %293, i32* %294
  %296 = load i32, i32* %295, align 4
  %297 = mul nsw i32 %296, %291
  %298 = or i64 %284, 2
  %299 = getelementptr inbounds i32, i32* %123, i64 %298
  %300 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %298
  %301 = select i1 %120, i32* %299, i32* %300
  %302 = load i32, i32* %301, align 4
  %303 = mul nsw i32 %302, %297
  %304 = or i64 %284, 3
  %305 = getelementptr inbounds i32, i32* %123, i64 %304
  %306 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %304
  %307 = select i1 %120, i32* %305, i32* %306
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %303
  %310 = add nuw nsw i64 %284, 4
  %311 = add i64 %286, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %248, label %283

313:                                              ; preds = %344, %269
  %314 = phi i32 [ undef, %269 ], [ %370, %344 ]
  %315 = phi i64 [ %270, %269 ], [ %371, %344 ]
  %316 = phi i32 [ 1, %269 ], [ %370, %344 ]
  %317 = icmp eq i32 %279, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %313, %318
  %319 = phi i64 [ %327, %318 ], [ %315, %313 ]
  %320 = phi i32 [ %326, %318 ], [ %316, %313 ]
  %321 = phi i32 [ %328, %318 ], [ %279, %313 ]
  %322 = getelementptr inbounds i32, i32* %123, i64 %319
  %323 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %319
  %324 = select i1 %120, i32* %322, i32* %323
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %320
  %327 = add nsw i64 %319, 1
  %328 = add i32 %321, -1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %318, !llvm.loop !75

330:                                              ; preds = %313, %318, %265
  %331 = phi i32 [ 1, %265 ], [ %314, %313 ], [ %326, %318 ]
  %332 = icmp sgt i32 %266, 0
  br i1 %332, label %333, label %426

333:                                              ; preds = %330
  %334 = icmp sgt i32 %239, 0
  %335 = sext i32 %331 to i64
  %336 = shl nsw i64 %335, 3
  %337 = sext i32 %239 to i64
  %338 = zext i32 %266 to i64
  %339 = zext i32 %239 to i64
  %340 = and i64 %339, 1
  %341 = icmp eq i32 %239, 1
  %342 = sub nsw i64 %339, %340
  %343 = icmp eq i64 %340, 0
  br label %374

344:                                              ; preds = %344, %281
  %345 = phi i64 [ %270, %281 ], [ %371, %344 ]
  %346 = phi i32 [ 1, %281 ], [ %370, %344 ]
  %347 = phi i32 [ %282, %281 ], [ %372, %344 ]
  %348 = getelementptr inbounds i32, i32* %123, i64 %345
  %349 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %345
  %350 = select i1 %120, i32* %348, i32* %349
  %351 = load i32, i32* %350, align 4
  %352 = mul nsw i32 %351, %346
  %353 = add nsw i64 %345, 1
  %354 = getelementptr inbounds i32, i32* %123, i64 %353
  %355 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %353
  %356 = select i1 %120, i32* %354, i32* %355
  %357 = load i32, i32* %356, align 4
  %358 = mul nsw i32 %357, %352
  %359 = add nsw i64 %345, 2
  %360 = getelementptr inbounds i32, i32* %123, i64 %359
  %361 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %359
  %362 = select i1 %120, i32* %360, i32* %361
  %363 = load i32, i32* %362, align 4
  %364 = mul nsw i32 %363, %358
  %365 = add nsw i64 %345, 3
  %366 = getelementptr inbounds i32, i32* %123, i64 %365
  %367 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %365
  %368 = select i1 %120, i32* %366, i32* %367
  %369 = load i32, i32* %368, align 4
  %370 = mul nsw i32 %369, %364
  %371 = add nsw i64 %345, 4
  %372 = add i32 %347, -4
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %313, label %344

374:                                              ; preds = %394, %333
  %375 = phi i64 [ 0, %333 ], [ %395, %394 ]
  br i1 %334, label %376, label %394

376:                                              ; preds = %374
  %377 = mul nsw i64 %375, %337
  %378 = trunc i64 %375 to i32
  %379 = mul i32 %129, %378
  br i1 %341, label %380, label %397

380:                                              ; preds = %397, %376
  %381 = phi i64 [ 0, %376 ], [ %423, %397 ]
  br i1 %343, label %394, label %382

382:                                              ; preds = %380
  %383 = add nsw i64 %381, %377
  %384 = mul nsw i64 %383, %335
  %385 = getelementptr inbounds i64, i64* %114, i64 %384
  %386 = bitcast i64* %385 to i8*
  %387 = getelementptr inbounds i32, i32* %79, i64 %381
  %388 = load i32, i32* %387, align 4
  %389 = add nsw i32 %388, %379
  %390 = mul nsw i32 %389, %331
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i64, i64* %45, i64 %391
  %393 = bitcast i64* %392 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %386, i8* align 8 %393, i64 %336, i1 false) #6
  br label %394

394:                                              ; preds = %382, %380, %374
  %395 = add nuw nsw i64 %375, 1
  %396 = icmp eq i64 %395, %338
  br i1 %396, label %426, label %374

397:                                              ; preds = %376, %397
  %398 = phi i64 [ %423, %397 ], [ 0, %376 ]
  %399 = phi i64 [ %424, %397 ], [ %342, %376 ]
  %400 = add nsw i64 %398, %377
  %401 = mul nsw i64 %400, %335
  %402 = getelementptr inbounds i64, i64* %114, i64 %401
  %403 = bitcast i64* %402 to i8*
  %404 = getelementptr inbounds i32, i32* %79, i64 %398
  %405 = load i32, i32* %404, align 4
  %406 = add nsw i32 %405, %379
  %407 = mul nsw i32 %406, %331
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i64, i64* %45, i64 %408
  %410 = bitcast i64* %409 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %403, i8* align 8 %410, i64 %336, i1 false) #6
  %411 = or i64 %398, 1
  %412 = add nsw i64 %411, %377
  %413 = mul nsw i64 %412, %335
  %414 = getelementptr inbounds i64, i64* %114, i64 %413
  %415 = bitcast i64* %414 to i8*
  %416 = getelementptr inbounds i32, i32* %79, i64 %411
  %417 = load i32, i32* %416, align 4
  %418 = add nsw i32 %417, %379
  %419 = mul nsw i32 %418, %331
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds i64, i64* %45, i64 %420
  %422 = bitcast i64* %421 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %415, i8* align 8 %422, i64 %336, i1 false) #6
  %423 = add nuw nsw i64 %398, 2
  %424 = add i64 %399, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %380, label %397

426:                                              ; preds = %394, %330
  %427 = icmp sgt i32 %113, 5
  br i1 %427, label %428, label %434

428:                                              ; preds = %426
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %426, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %130, label %435, label %441

435:                                              ; preds = %434
  %436 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %437 = load i32*, i32** %436, align 8
  %438 = icmp eq i32* %437, null
  br i1 %438, label %441, label %439

439:                                              ; preds = %435
  %440 = bitcast i32* %437 to i8*
  tail call void @_ZdaPv(i8* %440) #7
  br label %441

441:                                              ; preds = %434, %435, %439
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %442 = xor i1 %120, true
  %443 = icmp eq i32* %123, null
  %444 = or i1 %443, %442
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %446) #7
  br label %447

447:                                              ; preds = %441, %445
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIbiEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !76
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !76
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !76
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !76
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !76
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !76
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !79
  br label %77

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !79
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !79
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !79
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !79
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !79
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %76 = load i32*, i32** %75, align 8
  br label %77

77:                                               ; preds = %48, %70
  %78 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %79 = phi i32* [ %76, %70 ], [ null, %48 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !82
  br label %112

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !82
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !82
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !82
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !82
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !82
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %110 = bitcast %union.TfLitePtrUnion* %109 to i8**
  %111 = load i8*, i8** %110, align 8
  br label %112

112:                                              ; preds = %82, %104
  %113 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %114 = phi i8* [ %111, %104 ], [ null, %82 ]
  %115 = shl i32 %9, 16
  %116 = ashr exact i32 %115, 16
  %117 = icmp slt i16 %10, 0
  %118 = select i1 %117, i32 %44, i32 0
  %119 = add i32 %118, %116
  %120 = icmp sgt i32 %44, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %78, 5
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %130, label %132, label %135

132:                                              ; preds = %112
  %133 = getelementptr inbounds %union.anon, %union.anon* %131, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %138

135:                                              ; preds = %112
  %136 = bitcast %union.anon* %131 to i32*
  %137 = icmp sgt i32 %78, 0
  br i1 %137, label %138, label %238

138:                                              ; preds = %135, %132
  %139 = phi i32* [ %134, %132 ], [ %136, %135 ]
  %140 = zext i32 %78 to i64
  %141 = icmp ult i32 %78, 8
  br i1 %141, label %227, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, 4294967288
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 24
  br i1 %148, label %194, label %149

149:                                              ; preds = %142
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %191, %151 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %189, %151 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %149 ], [ %190, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %192, %151 ]
  %156 = getelementptr inbounds i32, i32* %139, i64 %152
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %152, 8
  %165 = getelementptr inbounds i32, i32* %139, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = or i64 %152, 16
  %174 = getelementptr inbounds i32, i32* %139, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = mul nsw <4 x i32> %176, %171
  %181 = mul nsw <4 x i32> %179, %172
  %182 = or i64 %152, 24
  %183 = getelementptr inbounds i32, i32* %139, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %152, 32
  %192 = add i64 %155, -4
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %151, !llvm.loop !85

194:                                              ; preds = %151, %142
  %195 = phi <4 x i32> [ undef, %142 ], [ %189, %151 ]
  %196 = phi <4 x i32> [ undef, %142 ], [ %190, %151 ]
  %197 = phi i64 [ 0, %142 ], [ %191, %151 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %189, %151 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %142 ], [ %190, %151 ]
  %200 = icmp eq i64 %147, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %194, %201
  %202 = phi i64 [ %214, %201 ], [ %197, %194 ]
  %203 = phi <4 x i32> [ %212, %201 ], [ %198, %194 ]
  %204 = phi <4 x i32> [ %213, %201 ], [ %199, %194 ]
  %205 = phi i64 [ %215, %201 ], [ %147, %194 ]
  %206 = getelementptr inbounds i32, i32* %139, i64 %202
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4
  %212 = mul nsw <4 x i32> %208, %203
  %213 = mul nsw <4 x i32> %211, %204
  %214 = add i64 %202, 8
  %215 = add i64 %205, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !86

217:                                              ; preds = %201, %194
  %218 = phi <4 x i32> [ %195, %194 ], [ %212, %201 ]
  %219 = phi <4 x i32> [ %196, %194 ], [ %213, %201 ]
  %220 = mul <4 x i32> %219, %218
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = mul <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %143, %140
  br i1 %226, label %238, label %227

227:                                              ; preds = %217, %138
  %228 = phi i64 [ 0, %138 ], [ %143, %217 ]
  %229 = phi i32 [ 1, %138 ], [ %225, %217 ]
  br label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %236, %230 ], [ %228, %227 ]
  %232 = phi i32 [ %235, %230 ], [ %229, %227 ]
  %233 = getelementptr inbounds i32, i32* %139, i64 %231
  %234 = load i32, i32* %233, align 4
  %235 = mul nsw i32 %234, %232
  %236 = add nuw nsw i64 %231, 1
  %237 = icmp eq i64 %236, %140
  br i1 %237, label %238, label %230, !llvm.loop !87

238:                                              ; preds = %230, %217, %135
  %239 = phi i32 [ 1, %135 ], [ %225, %217 ], [ %235, %230 ]
  %240 = icmp sgt i32 %119, 0
  br i1 %240, label %241, label %265

241:                                              ; preds = %238
  %242 = zext i32 %119 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %248, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %283

248:                                              ; preds = %283, %241
  %249 = phi i32 [ undef, %241 ], [ %309, %283 ]
  %250 = phi i64 [ 0, %241 ], [ %310, %283 ]
  %251 = phi i32 [ 1, %241 ], [ %309, %283 ]
  %252 = icmp eq i64 %244, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %248, %253
  %254 = phi i64 [ %262, %253 ], [ %250, %248 ]
  %255 = phi i32 [ %261, %253 ], [ %251, %248 ]
  %256 = phi i64 [ %263, %253 ], [ %244, %248 ]
  %257 = getelementptr inbounds i32, i32* %123, i64 %254
  %258 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %254
  %259 = select i1 %120, i32* %257, i32* %258
  %260 = load i32, i32* %259, align 4
  %261 = mul nsw i32 %260, %255
  %262 = add nuw nsw i64 %254, 1
  %263 = add i64 %256, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !88

265:                                              ; preds = %248, %253, %238
  %266 = phi i32 [ 1, %238 ], [ %249, %248 ], [ %261, %253 ]
  %267 = add i32 %119, 1
  %268 = icmp slt i32 %267, %44
  br i1 %268, label %269, label %330

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = xor i32 %118, -1
  %272 = add i32 %44, %271
  %273 = shl i32 %9, 16
  %274 = ashr exact i32 %273, 16
  %275 = sub i32 %272, %274
  %276 = add i32 %44, -2
  %277 = sub i32 %276, %118
  %278 = sub i32 %277, %274
  %279 = and i32 %275, 3
  %280 = icmp ult i32 %278, 3
  br i1 %280, label %313, label %281

281:                                              ; preds = %269
  %282 = sub i32 %275, %279
  br label %343

283:                                              ; preds = %283, %246
  %284 = phi i64 [ 0, %246 ], [ %310, %283 ]
  %285 = phi i32 [ 1, %246 ], [ %309, %283 ]
  %286 = phi i64 [ %247, %246 ], [ %311, %283 ]
  %287 = getelementptr inbounds i32, i32* %123, i64 %284
  %288 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %284
  %289 = select i1 %120, i32* %287, i32* %288
  %290 = load i32, i32* %289, align 4
  %291 = mul nsw i32 %290, %285
  %292 = or i64 %284, 1
  %293 = getelementptr inbounds i32, i32* %123, i64 %292
  %294 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %292
  %295 = select i1 %120, i32* %293, i32* %294
  %296 = load i32, i32* %295, align 4
  %297 = mul nsw i32 %296, %291
  %298 = or i64 %284, 2
  %299 = getelementptr inbounds i32, i32* %123, i64 %298
  %300 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %298
  %301 = select i1 %120, i32* %299, i32* %300
  %302 = load i32, i32* %301, align 4
  %303 = mul nsw i32 %302, %297
  %304 = or i64 %284, 3
  %305 = getelementptr inbounds i32, i32* %123, i64 %304
  %306 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %304
  %307 = select i1 %120, i32* %305, i32* %306
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %303
  %310 = add nuw nsw i64 %284, 4
  %311 = add i64 %286, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %248, label %283

313:                                              ; preds = %343, %269
  %314 = phi i32 [ undef, %269 ], [ %369, %343 ]
  %315 = phi i64 [ %270, %269 ], [ %370, %343 ]
  %316 = phi i32 [ 1, %269 ], [ %369, %343 ]
  %317 = icmp eq i32 %279, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %313, %318
  %319 = phi i64 [ %327, %318 ], [ %315, %313 ]
  %320 = phi i32 [ %326, %318 ], [ %316, %313 ]
  %321 = phi i32 [ %328, %318 ], [ %279, %313 ]
  %322 = getelementptr inbounds i32, i32* %123, i64 %319
  %323 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %319
  %324 = select i1 %120, i32* %322, i32* %323
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %320
  %327 = add nsw i64 %319, 1
  %328 = add i32 %321, -1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %318, !llvm.loop !89

330:                                              ; preds = %313, %318, %265
  %331 = phi i32 [ 1, %265 ], [ %314, %313 ], [ %326, %318 ]
  %332 = icmp sgt i32 %266, 0
  br i1 %332, label %333, label %419

333:                                              ; preds = %330
  %334 = icmp sgt i32 %239, 0
  %335 = sext i32 %331 to i64
  %336 = sext i32 %239 to i64
  %337 = zext i32 %266 to i64
  %338 = zext i32 %239 to i64
  %339 = and i64 %338, 1
  %340 = icmp eq i32 %239, 1
  %341 = sub nsw i64 %338, %339
  %342 = icmp eq i64 %339, 0
  br label %373

343:                                              ; preds = %343, %281
  %344 = phi i64 [ %270, %281 ], [ %370, %343 ]
  %345 = phi i32 [ 1, %281 ], [ %369, %343 ]
  %346 = phi i32 [ %282, %281 ], [ %371, %343 ]
  %347 = getelementptr inbounds i32, i32* %123, i64 %344
  %348 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %344
  %349 = select i1 %120, i32* %347, i32* %348
  %350 = load i32, i32* %349, align 4
  %351 = mul nsw i32 %350, %345
  %352 = add nsw i64 %344, 1
  %353 = getelementptr inbounds i32, i32* %123, i64 %352
  %354 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %352
  %355 = select i1 %120, i32* %353, i32* %354
  %356 = load i32, i32* %355, align 4
  %357 = mul nsw i32 %356, %351
  %358 = add nsw i64 %344, 2
  %359 = getelementptr inbounds i32, i32* %123, i64 %358
  %360 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %358
  %361 = select i1 %120, i32* %359, i32* %360
  %362 = load i32, i32* %361, align 4
  %363 = mul nsw i32 %362, %357
  %364 = add nsw i64 %344, 3
  %365 = getelementptr inbounds i32, i32* %123, i64 %364
  %366 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %364
  %367 = select i1 %120, i32* %365, i32* %366
  %368 = load i32, i32* %367, align 4
  %369 = mul nsw i32 %368, %363
  %370 = add nsw i64 %344, 4
  %371 = add i32 %346, -4
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %313, label %343

373:                                              ; preds = %391, %333
  %374 = phi i64 [ 0, %333 ], [ %392, %391 ]
  br i1 %334, label %375, label %391

375:                                              ; preds = %373
  %376 = mul nsw i64 %374, %336
  %377 = trunc i64 %374 to i32
  %378 = mul i32 %129, %377
  br i1 %340, label %379, label %394

379:                                              ; preds = %394, %375
  %380 = phi i64 [ 0, %375 ], [ %416, %394 ]
  br i1 %342, label %391, label %381

381:                                              ; preds = %379
  %382 = add nsw i64 %380, %376
  %383 = mul nsw i64 %382, %335
  %384 = getelementptr inbounds i8, i8* %114, i64 %383
  %385 = getelementptr inbounds i32, i32* %79, i64 %380
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %386, %378
  %388 = mul nsw i32 %387, %331
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %45, i64 %389
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 1 %390, i64 %335, i1 false) #6
  br label %391

391:                                              ; preds = %381, %379, %373
  %392 = add nuw nsw i64 %374, 1
  %393 = icmp eq i64 %392, %337
  br i1 %393, label %419, label %373

394:                                              ; preds = %375, %394
  %395 = phi i64 [ %416, %394 ], [ 0, %375 ]
  %396 = phi i64 [ %417, %394 ], [ %341, %375 ]
  %397 = add nsw i64 %395, %376
  %398 = mul nsw i64 %397, %335
  %399 = getelementptr inbounds i8, i8* %114, i64 %398
  %400 = getelementptr inbounds i32, i32* %79, i64 %395
  %401 = load i32, i32* %400, align 4
  %402 = add nsw i32 %401, %378
  %403 = mul nsw i32 %402, %331
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %45, i64 %404
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %399, i8* align 1 %405, i64 %335, i1 false) #6
  %406 = or i64 %395, 1
  %407 = add nsw i64 %406, %376
  %408 = mul nsw i64 %407, %335
  %409 = getelementptr inbounds i8, i8* %114, i64 %408
  %410 = getelementptr inbounds i32, i32* %79, i64 %406
  %411 = load i32, i32* %410, align 4
  %412 = add nsw i32 %411, %378
  %413 = mul nsw i32 %412, %331
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %409, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %395, 2
  %417 = add i64 %396, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %379, label %394

419:                                              ; preds = %391, %330
  %420 = icmp sgt i32 %113, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %130, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %120, true
  %436 = icmp eq i32* %123, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather13GatherStringsIiEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::DynamicBuffer", align 8
  %6 = bitcast %"class.tflite::DynamicBuffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 1
  %11 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #6
  %13 = tail call i8* @_Znwm(i64 4) #7
  %14 = bitcast %"class.std::__1::vector.2"* %12 to i8**
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 4
  %16 = bitcast i32** %11 to i8**
  store i8* %15, i8** %16, align 8
  %17 = bitcast i32** %10 to i64*
  %18 = bitcast i8* %13 to i32*
  store i32 0, i32* %18, align 4
  %19 = ptrtoint i8* %15 to i64
  store i64 %19, i64* %17, align 8
  %20 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %23 = load i32*, i32** %22, align 8
  br label %24

24:                                               ; preds = %4, %21
  %25 = phi i32* [ %23, %21 ], [ null, %4 ]
  %26 = tail call i32 @_ZN6tflite14GetStringCountEPK12TfLiteTensor(%struct.TfLiteTensor* %1) #6
  %27 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %28 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %27, align 8
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %105

32:                                               ; preds = %24
  %33 = sext i32 %30 to i64
  %34 = add nsw i64 %33, -1
  %35 = and i64 %33, 7
  %36 = icmp ult i64 %34, 7
  br i1 %36, label %85, label %37

37:                                               ; preds = %32
  %38 = sub nsw i64 %33, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %82, %39 ]
  %41 = phi i64 [ 1, %37 ], [ %81, %39 ]
  %42 = phi i64 [ %38, %37 ], [ %83, %39 ]
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %40
  %44 = load i32, i32* %43, align 4
  %45 = sext i32 %44 to i64
  %46 = mul nsw i64 %41, %45
  %47 = or i64 %40, 1
  %48 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %46, %50
  %52 = or i64 %40, 2
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %51, %55
  %57 = or i64 %40, 3
  %58 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %56, %60
  %62 = or i64 %40, 4
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = mul nsw i64 %61, %65
  %67 = or i64 %40, 5
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = sext i32 %69 to i64
  %71 = mul nsw i64 %66, %70
  %72 = or i64 %40, 6
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %71, %75
  %77 = or i64 %40, 7
  %78 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %76, %80
  %82 = add nuw nsw i64 %40, 8
  %83 = add i64 %42, -8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %39

85:                                               ; preds = %39, %32
  %86 = phi i64 [ undef, %32 ], [ %81, %39 ]
  %87 = phi i64 [ 0, %32 ], [ %82, %39 ]
  %88 = phi i64 [ 1, %32 ], [ %81, %39 ]
  %89 = icmp eq i64 %35, 0
  br i1 %89, label %101, label %90

90:                                               ; preds = %85, %90
  %91 = phi i64 [ %98, %90 ], [ %87, %85 ]
  %92 = phi i64 [ %97, %90 ], [ %88, %85 ]
  %93 = phi i64 [ %99, %90 ], [ %35, %85 ]
  %94 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 %91
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = mul nsw i64 %92, %96
  %98 = add nuw nsw i64 %91, 1
  %99 = add i64 %93, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %90, !llvm.loop !90

101:                                              ; preds = %90, %85
  %102 = phi i64 [ %86, %85 ], [ %97, %90 ]
  %103 = trunc i64 %102 to i32
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %123

105:                                              ; preds = %24, %101
  %106 = phi i64 [ %102, %101 ], [ 1, %24 ]
  %107 = and i64 %106, 4294967295
  br label %108

108:                                              ; preds = %113, %105
  %109 = phi i64 [ 0, %105 ], [ %118, %113 ]
  %110 = getelementptr inbounds i32, i32* %25, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = icmp slt i32 %111, %26
  br i1 %112, label %113, label %120

113:                                              ; preds = %108
  %114 = call { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor* %1, i32 %111) #6
  %115 = extractvalue { i8*, i32 } %114, 0
  %116 = extractvalue { i8*, i32 } %114, 1
  %117 = sext i32 %116 to i64
  call void @_ZN6tflite13DynamicBuffer9AddStringEPKcm(%"class.tflite::DynamicBuffer"* nonnull %5, i8* %115, i64 %117) #6
  %118 = add nuw nsw i64 %109, 1
  %119 = icmp eq i64 %118, %107
  br i1 %119, label %123, label %108

120:                                              ; preds = %108
  %121 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %122 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %121, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %122(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 123, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %124

123:                                              ; preds = %113, %101
  call void @_ZN6tflite13DynamicBuffer13WriteToTensorEP12TfLiteTensorP14TfLiteIntArray(%"class.tflite::DynamicBuffer"* nonnull %5, %struct.TfLiteTensor* %3, %struct.TfLiteIntArray* null) #6
  br label %124

124:                                              ; preds = %120, %123
  %125 = phi i32 [ 0, %123 ], [ 1, %120 ]
  %126 = load i32*, i32** %9, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = ptrtoint i32* %126 to i64
  store i64 %129, i64* %17, align 8
  %130 = bitcast i32* %126 to i8*
  call void @_ZdlPv(i8* %130) #7
  br label %131

131:                                              ; preds = %128, %124
  %132 = load i8*, i8** %7, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %137, label %134

134:                                              ; preds = %131
  %135 = ptrtoint i8* %132 to i64
  %136 = bitcast i8** %8 to i64*
  store i64 %135, i64* %136, align 8
  call void @_ZdlPv(i8* nonnull %132) #7
  br label %137

137:                                              ; preds = %131, %134
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #6
  ret i32 %125
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIflEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !91
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !91
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !91
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !91
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !91
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !91
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to float**
  %42 = load float*, float** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi float* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !94
  br label %78

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !94
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !94
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !94
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !94
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !94
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to i64**
  %77 = load i64*, i64** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi i64* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #6
  %82 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !97
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !97
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !97
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !97
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #7, !noalias !97
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !97
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #6
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to float**
  %112 = load float*, float** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi float* [ %112, %105 ], [ null, %83 ]
  %116 = shl i32 %9, 16
  %117 = ashr exact i32 %116, 16
  %118 = icmp slt i16 %10, 0
  %119 = select i1 %118, i32 %44, i32 0
  %120 = add i32 %119, %117
  %121 = icmp sgt i32 %44, 5
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds i32, i32* %124, i64 %125
  %127 = bitcast %union.anon* %122 to [5 x i32]*
  %128 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %125
  %129 = select i1 %121, i32* %126, i32* %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %79, 5
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %131, label %133, label %136

133:                                              ; preds = %113
  %134 = getelementptr inbounds %union.anon, %union.anon* %132, i64 0, i32 0
  %135 = load i32*, i32** %134, align 8
  br label %139

136:                                              ; preds = %113
  %137 = bitcast %union.anon* %132 to i32*
  %138 = icmp sgt i32 %79, 0
  br i1 %138, label %139, label %239

139:                                              ; preds = %136, %133
  %140 = phi i32* [ %135, %133 ], [ %137, %136 ]
  %141 = zext i32 %79 to i64
  %142 = icmp ult i32 %79, 8
  br i1 %142, label %228, label %143

143:                                              ; preds = %139
  %144 = and i64 %141, 4294967288
  %145 = add nsw i64 %144, -8
  %146 = lshr exact i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp ult i64 %145, 24
  br i1 %149, label %195, label %150

150:                                              ; preds = %143
  %151 = sub nsw i64 %147, %148
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %192, %152 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %190, %152 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %191, %152 ]
  %156 = phi i64 [ %151, %150 ], [ %193, %152 ]
  %157 = getelementptr inbounds i32, i32* %140, i64 %153
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %153, 8
  %166 = getelementptr inbounds i32, i32* %140, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %153, 16
  %175 = getelementptr inbounds i32, i32* %140, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = or i64 %153, 24
  %184 = getelementptr inbounds i32, i32* %140, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = mul nsw <4 x i32> %186, %181
  %191 = mul nsw <4 x i32> %189, %182
  %192 = add i64 %153, 32
  %193 = add i64 %156, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %152, !llvm.loop !100

195:                                              ; preds = %152, %143
  %196 = phi <4 x i32> [ undef, %143 ], [ %190, %152 ]
  %197 = phi <4 x i32> [ undef, %143 ], [ %191, %152 ]
  %198 = phi i64 [ 0, %143 ], [ %192, %152 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %190, %152 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %191, %152 ]
  %201 = icmp eq i64 %148, 0
  br i1 %201, label %218, label %202

202:                                              ; preds = %195, %202
  %203 = phi i64 [ %215, %202 ], [ %198, %195 ]
  %204 = phi <4 x i32> [ %213, %202 ], [ %199, %195 ]
  %205 = phi <4 x i32> [ %214, %202 ], [ %200, %195 ]
  %206 = phi i64 [ %216, %202 ], [ %148, %195 ]
  %207 = getelementptr inbounds i32, i32* %140, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = mul nsw <4 x i32> %209, %204
  %214 = mul nsw <4 x i32> %212, %205
  %215 = add i64 %203, 8
  %216 = add i64 %206, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %202, !llvm.loop !101

218:                                              ; preds = %202, %195
  %219 = phi <4 x i32> [ %196, %195 ], [ %213, %202 ]
  %220 = phi <4 x i32> [ %197, %195 ], [ %214, %202 ]
  %221 = mul <4 x i32> %220, %219
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %225 = mul <4 x i32> %223, %224
  %226 = extractelement <4 x i32> %225, i32 0
  %227 = icmp eq i64 %144, %141
  br i1 %227, label %239, label %228

228:                                              ; preds = %218, %139
  %229 = phi i64 [ 0, %139 ], [ %144, %218 ]
  %230 = phi i32 [ 1, %139 ], [ %226, %218 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %237, %231 ], [ %229, %228 ]
  %233 = phi i32 [ %236, %231 ], [ %230, %228 ]
  %234 = getelementptr inbounds i32, i32* %140, i64 %232
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %235, %233
  %237 = add nuw nsw i64 %232, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %231, !llvm.loop !102

239:                                              ; preds = %231, %218, %136
  %240 = phi i32 [ 1, %136 ], [ %226, %218 ], [ %236, %231 ]
  %241 = icmp sgt i32 %120, 0
  br i1 %241, label %242, label %266

242:                                              ; preds = %239
  %243 = zext i32 %120 to i64
  %244 = add nsw i64 %243, -1
  %245 = and i64 %243, 3
  %246 = icmp ult i64 %244, 3
  br i1 %246, label %249, label %247

247:                                              ; preds = %242
  %248 = sub nsw i64 %243, %245
  br label %284

249:                                              ; preds = %284, %242
  %250 = phi i32 [ undef, %242 ], [ %310, %284 ]
  %251 = phi i64 [ 0, %242 ], [ %311, %284 ]
  %252 = phi i32 [ 1, %242 ], [ %310, %284 ]
  %253 = icmp eq i64 %245, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %263, %254 ], [ %251, %249 ]
  %256 = phi i32 [ %262, %254 ], [ %252, %249 ]
  %257 = phi i64 [ %264, %254 ], [ %245, %249 ]
  %258 = getelementptr inbounds i32, i32* %124, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %255
  %260 = select i1 %121, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nuw nsw i64 %255, 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %254, !llvm.loop !103

266:                                              ; preds = %249, %254, %239
  %267 = phi i32 [ 1, %239 ], [ %250, %249 ], [ %262, %254 ]
  %268 = add i32 %120, 1
  %269 = icmp slt i32 %268, %44
  br i1 %269, label %270, label %334

270:                                              ; preds = %266
  %271 = sext i32 %268 to i64
  %272 = xor i32 %119, -1
  %273 = add i32 %44, %272
  %274 = shl i32 %9, 16
  %275 = ashr exact i32 %274, 16
  %276 = sub i32 %273, %275
  %277 = add i32 %44, -2
  %278 = sub i32 %277, %119
  %279 = sub i32 %278, %275
  %280 = and i32 %276, 3
  %281 = icmp ult i32 %279, 3
  br i1 %281, label %314, label %282

282:                                              ; preds = %270
  %283 = sub i32 %276, %280
  br label %348

284:                                              ; preds = %284, %247
  %285 = phi i64 [ 0, %247 ], [ %311, %284 ]
  %286 = phi i32 [ 1, %247 ], [ %310, %284 ]
  %287 = phi i64 [ %248, %247 ], [ %312, %284 ]
  %288 = getelementptr inbounds i32, i32* %124, i64 %285
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %285
  %290 = select i1 %121, i32* %288, i32* %289
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 %291, %286
  %293 = or i64 %285, 1
  %294 = getelementptr inbounds i32, i32* %124, i64 %293
  %295 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %293
  %296 = select i1 %121, i32* %294, i32* %295
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %292
  %299 = or i64 %285, 2
  %300 = getelementptr inbounds i32, i32* %124, i64 %299
  %301 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %299
  %302 = select i1 %121, i32* %300, i32* %301
  %303 = load i32, i32* %302, align 4
  %304 = mul nsw i32 %303, %298
  %305 = or i64 %285, 3
  %306 = getelementptr inbounds i32, i32* %124, i64 %305
  %307 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %305
  %308 = select i1 %121, i32* %306, i32* %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %304
  %311 = add nuw nsw i64 %285, 4
  %312 = add i64 %287, -4
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %249, label %284

314:                                              ; preds = %348, %270
  %315 = phi i32 [ undef, %270 ], [ %374, %348 ]
  %316 = phi i64 [ %271, %270 ], [ %375, %348 ]
  %317 = phi i32 [ 1, %270 ], [ %374, %348 ]
  %318 = icmp eq i32 %280, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %314, %319
  %320 = phi i64 [ %328, %319 ], [ %316, %314 ]
  %321 = phi i32 [ %327, %319 ], [ %317, %314 ]
  %322 = phi i32 [ %329, %319 ], [ %280, %314 ]
  %323 = getelementptr inbounds i32, i32* %124, i64 %320
  %324 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %320
  %325 = select i1 %121, i32* %323, i32* %324
  %326 = load i32, i32* %325, align 4
  %327 = mul nsw i32 %326, %321
  %328 = add nsw i64 %320, 1
  %329 = add i32 %322, -1
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %319, !llvm.loop !104

331:                                              ; preds = %319, %314
  %332 = phi i32 [ %315, %314 ], [ %327, %319 ]
  %333 = sext i32 %332 to i64
  br label %334

334:                                              ; preds = %331, %266
  %335 = phi i64 [ 1, %266 ], [ %333, %331 ]
  %336 = icmp sgt i32 %267, 0
  br i1 %336, label %337, label %426

337:                                              ; preds = %334
  %338 = icmp sgt i32 %240, 0
  %339 = shl nsw i64 %335, 2
  %340 = sext i32 %130 to i64
  %341 = sext i32 %240 to i64
  %342 = zext i32 %267 to i64
  %343 = zext i32 %240 to i64
  %344 = and i64 %343, 1
  %345 = icmp eq i32 %240, 1
  %346 = sub nsw i64 %343, %344
  %347 = icmp eq i64 %344, 0
  br label %378

348:                                              ; preds = %348, %282
  %349 = phi i64 [ %271, %282 ], [ %375, %348 ]
  %350 = phi i32 [ 1, %282 ], [ %374, %348 ]
  %351 = phi i32 [ %283, %282 ], [ %376, %348 ]
  %352 = getelementptr inbounds i32, i32* %124, i64 %349
  %353 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %349
  %354 = select i1 %121, i32* %352, i32* %353
  %355 = load i32, i32* %354, align 4
  %356 = mul nsw i32 %355, %350
  %357 = add nsw i64 %349, 1
  %358 = getelementptr inbounds i32, i32* %124, i64 %357
  %359 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %357
  %360 = select i1 %121, i32* %358, i32* %359
  %361 = load i32, i32* %360, align 4
  %362 = mul nsw i32 %361, %356
  %363 = add nsw i64 %349, 2
  %364 = getelementptr inbounds i32, i32* %124, i64 %363
  %365 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %363
  %366 = select i1 %121, i32* %364, i32* %365
  %367 = load i32, i32* %366, align 4
  %368 = mul nsw i32 %367, %362
  %369 = add nsw i64 %349, 3
  %370 = getelementptr inbounds i32, i32* %124, i64 %369
  %371 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %369
  %372 = select i1 %121, i32* %370, i32* %371
  %373 = load i32, i32* %372, align 4
  %374 = mul nsw i32 %373, %368
  %375 = add nsw i64 %349, 4
  %376 = add i32 %351, -4
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %314, label %348

378:                                              ; preds = %396, %337
  %379 = phi i64 [ 0, %337 ], [ %397, %396 ]
  br i1 %338, label %380, label %396

380:                                              ; preds = %378
  %381 = mul nsw i64 %379, %341
  %382 = mul nsw i64 %379, %340
  br i1 %345, label %383, label %399

383:                                              ; preds = %399, %380
  %384 = phi i64 [ 0, %380 ], [ %423, %399 ]
  br i1 %347, label %396, label %385

385:                                              ; preds = %383
  %386 = add nsw i64 %384, %381
  %387 = mul nsw i64 %386, %335
  %388 = getelementptr inbounds float, float* %115, i64 %387
  %389 = bitcast float* %388 to i8*
  %390 = getelementptr inbounds i64, i64* %80, i64 %384
  %391 = load i64, i64* %390, align 8
  %392 = add nsw i64 %391, %382
  %393 = mul nsw i64 %392, %335
  %394 = getelementptr inbounds float, float* %45, i64 %393
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %389, i8* align 4 %395, i64 %339, i1 false) #6
  br label %396

396:                                              ; preds = %385, %383, %378
  %397 = add nuw nsw i64 %379, 1
  %398 = icmp eq i64 %397, %342
  br i1 %398, label %426, label %378

399:                                              ; preds = %380, %399
  %400 = phi i64 [ %423, %399 ], [ 0, %380 ]
  %401 = phi i64 [ %424, %399 ], [ %346, %380 ]
  %402 = add nsw i64 %400, %381
  %403 = mul nsw i64 %402, %335
  %404 = getelementptr inbounds float, float* %115, i64 %403
  %405 = bitcast float* %404 to i8*
  %406 = getelementptr inbounds i64, i64* %80, i64 %400
  %407 = load i64, i64* %406, align 8
  %408 = add nsw i64 %407, %382
  %409 = mul nsw i64 %408, %335
  %410 = getelementptr inbounds float, float* %45, i64 %409
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %405, i8* align 4 %411, i64 %339, i1 false) #6
  %412 = or i64 %400, 1
  %413 = add nsw i64 %412, %381
  %414 = mul nsw i64 %413, %335
  %415 = getelementptr inbounds float, float* %115, i64 %414
  %416 = bitcast float* %415 to i8*
  %417 = getelementptr inbounds i64, i64* %80, i64 %412
  %418 = load i64, i64* %417, align 8
  %419 = add nsw i64 %418, %382
  %420 = mul nsw i64 %419, %335
  %421 = getelementptr inbounds float, float* %45, i64 %420
  %422 = bitcast float* %421 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %416, i8* align 4 %422, i64 %339, i1 false) #6
  %423 = add nuw nsw i64 %400, 2
  %424 = add i64 %401, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %383, label %399

426:                                              ; preds = %396, %334
  %427 = icmp sgt i32 %114, 5
  br i1 %427, label %428, label %434

428:                                              ; preds = %426
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %426, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #6
  br i1 %131, label %435, label %441

435:                                              ; preds = %434
  %436 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %437 = load i32*, i32** %436, align 8
  %438 = icmp eq i32* %437, null
  br i1 %438, label %441, label %439

439:                                              ; preds = %435
  %440 = bitcast i32* %437 to i8*
  tail call void @_ZdaPv(i8* %440) #7
  br label %441

441:                                              ; preds = %434, %435, %439
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %442 = xor i1 %121, true
  %443 = icmp eq i32* %124, null
  %444 = or i1 %443, %442
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = bitcast i32* %124 to i8*
  tail call void @_ZdaPv(i8* %446) #7
  br label %447

447:                                              ; preds = %441, %445
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIhlEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !105
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !105
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !105
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !105
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !105
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !105
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !108
  br label %78

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !108
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !108
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !108
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !108
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !108
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to i64**
  %77 = load i64*, i64** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi i64* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #6
  %82 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !111
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !111
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !111
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !111
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #7, !noalias !111
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !111
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #6
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to i8**
  %112 = load i8*, i8** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi i8* [ %112, %105 ], [ null, %83 ]
  %116 = shl i32 %9, 16
  %117 = ashr exact i32 %116, 16
  %118 = icmp slt i16 %10, 0
  %119 = select i1 %118, i32 %44, i32 0
  %120 = add i32 %119, %117
  %121 = icmp sgt i32 %44, 5
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds i32, i32* %124, i64 %125
  %127 = bitcast %union.anon* %122 to [5 x i32]*
  %128 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %125
  %129 = select i1 %121, i32* %126, i32* %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %79, 5
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %131, label %133, label %136

133:                                              ; preds = %113
  %134 = getelementptr inbounds %union.anon, %union.anon* %132, i64 0, i32 0
  %135 = load i32*, i32** %134, align 8
  br label %139

136:                                              ; preds = %113
  %137 = bitcast %union.anon* %132 to i32*
  %138 = icmp sgt i32 %79, 0
  br i1 %138, label %139, label %239

139:                                              ; preds = %136, %133
  %140 = phi i32* [ %135, %133 ], [ %137, %136 ]
  %141 = zext i32 %79 to i64
  %142 = icmp ult i32 %79, 8
  br i1 %142, label %228, label %143

143:                                              ; preds = %139
  %144 = and i64 %141, 4294967288
  %145 = add nsw i64 %144, -8
  %146 = lshr exact i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp ult i64 %145, 24
  br i1 %149, label %195, label %150

150:                                              ; preds = %143
  %151 = sub nsw i64 %147, %148
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %192, %152 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %190, %152 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %191, %152 ]
  %156 = phi i64 [ %151, %150 ], [ %193, %152 ]
  %157 = getelementptr inbounds i32, i32* %140, i64 %153
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %153, 8
  %166 = getelementptr inbounds i32, i32* %140, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %153, 16
  %175 = getelementptr inbounds i32, i32* %140, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = or i64 %153, 24
  %184 = getelementptr inbounds i32, i32* %140, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = mul nsw <4 x i32> %186, %181
  %191 = mul nsw <4 x i32> %189, %182
  %192 = add i64 %153, 32
  %193 = add i64 %156, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %152, !llvm.loop !114

195:                                              ; preds = %152, %143
  %196 = phi <4 x i32> [ undef, %143 ], [ %190, %152 ]
  %197 = phi <4 x i32> [ undef, %143 ], [ %191, %152 ]
  %198 = phi i64 [ 0, %143 ], [ %192, %152 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %190, %152 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %191, %152 ]
  %201 = icmp eq i64 %148, 0
  br i1 %201, label %218, label %202

202:                                              ; preds = %195, %202
  %203 = phi i64 [ %215, %202 ], [ %198, %195 ]
  %204 = phi <4 x i32> [ %213, %202 ], [ %199, %195 ]
  %205 = phi <4 x i32> [ %214, %202 ], [ %200, %195 ]
  %206 = phi i64 [ %216, %202 ], [ %148, %195 ]
  %207 = getelementptr inbounds i32, i32* %140, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = mul nsw <4 x i32> %209, %204
  %214 = mul nsw <4 x i32> %212, %205
  %215 = add i64 %203, 8
  %216 = add i64 %206, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %202, !llvm.loop !115

218:                                              ; preds = %202, %195
  %219 = phi <4 x i32> [ %196, %195 ], [ %213, %202 ]
  %220 = phi <4 x i32> [ %197, %195 ], [ %214, %202 ]
  %221 = mul <4 x i32> %220, %219
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %225 = mul <4 x i32> %223, %224
  %226 = extractelement <4 x i32> %225, i32 0
  %227 = icmp eq i64 %144, %141
  br i1 %227, label %239, label %228

228:                                              ; preds = %218, %139
  %229 = phi i64 [ 0, %139 ], [ %144, %218 ]
  %230 = phi i32 [ 1, %139 ], [ %226, %218 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %237, %231 ], [ %229, %228 ]
  %233 = phi i32 [ %236, %231 ], [ %230, %228 ]
  %234 = getelementptr inbounds i32, i32* %140, i64 %232
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %235, %233
  %237 = add nuw nsw i64 %232, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %231, !llvm.loop !116

239:                                              ; preds = %231, %218, %136
  %240 = phi i32 [ 1, %136 ], [ %226, %218 ], [ %236, %231 ]
  %241 = icmp sgt i32 %120, 0
  br i1 %241, label %242, label %266

242:                                              ; preds = %239
  %243 = zext i32 %120 to i64
  %244 = add nsw i64 %243, -1
  %245 = and i64 %243, 3
  %246 = icmp ult i64 %244, 3
  br i1 %246, label %249, label %247

247:                                              ; preds = %242
  %248 = sub nsw i64 %243, %245
  br label %284

249:                                              ; preds = %284, %242
  %250 = phi i32 [ undef, %242 ], [ %310, %284 ]
  %251 = phi i64 [ 0, %242 ], [ %311, %284 ]
  %252 = phi i32 [ 1, %242 ], [ %310, %284 ]
  %253 = icmp eq i64 %245, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %263, %254 ], [ %251, %249 ]
  %256 = phi i32 [ %262, %254 ], [ %252, %249 ]
  %257 = phi i64 [ %264, %254 ], [ %245, %249 ]
  %258 = getelementptr inbounds i32, i32* %124, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %255
  %260 = select i1 %121, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nuw nsw i64 %255, 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %254, !llvm.loop !117

266:                                              ; preds = %249, %254, %239
  %267 = phi i32 [ 1, %239 ], [ %250, %249 ], [ %262, %254 ]
  %268 = add i32 %120, 1
  %269 = icmp slt i32 %268, %44
  br i1 %269, label %270, label %334

270:                                              ; preds = %266
  %271 = sext i32 %268 to i64
  %272 = xor i32 %119, -1
  %273 = add i32 %44, %272
  %274 = shl i32 %9, 16
  %275 = ashr exact i32 %274, 16
  %276 = sub i32 %273, %275
  %277 = add i32 %44, -2
  %278 = sub i32 %277, %119
  %279 = sub i32 %278, %275
  %280 = and i32 %276, 3
  %281 = icmp ult i32 %279, 3
  br i1 %281, label %314, label %282

282:                                              ; preds = %270
  %283 = sub i32 %276, %280
  br label %347

284:                                              ; preds = %284, %247
  %285 = phi i64 [ 0, %247 ], [ %311, %284 ]
  %286 = phi i32 [ 1, %247 ], [ %310, %284 ]
  %287 = phi i64 [ %248, %247 ], [ %312, %284 ]
  %288 = getelementptr inbounds i32, i32* %124, i64 %285
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %285
  %290 = select i1 %121, i32* %288, i32* %289
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 %291, %286
  %293 = or i64 %285, 1
  %294 = getelementptr inbounds i32, i32* %124, i64 %293
  %295 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %293
  %296 = select i1 %121, i32* %294, i32* %295
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %292
  %299 = or i64 %285, 2
  %300 = getelementptr inbounds i32, i32* %124, i64 %299
  %301 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %299
  %302 = select i1 %121, i32* %300, i32* %301
  %303 = load i32, i32* %302, align 4
  %304 = mul nsw i32 %303, %298
  %305 = or i64 %285, 3
  %306 = getelementptr inbounds i32, i32* %124, i64 %305
  %307 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %305
  %308 = select i1 %121, i32* %306, i32* %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %304
  %311 = add nuw nsw i64 %285, 4
  %312 = add i64 %287, -4
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %249, label %284

314:                                              ; preds = %347, %270
  %315 = phi i32 [ undef, %270 ], [ %373, %347 ]
  %316 = phi i64 [ %271, %270 ], [ %374, %347 ]
  %317 = phi i32 [ 1, %270 ], [ %373, %347 ]
  %318 = icmp eq i32 %280, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %314, %319
  %320 = phi i64 [ %328, %319 ], [ %316, %314 ]
  %321 = phi i32 [ %327, %319 ], [ %317, %314 ]
  %322 = phi i32 [ %329, %319 ], [ %280, %314 ]
  %323 = getelementptr inbounds i32, i32* %124, i64 %320
  %324 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %320
  %325 = select i1 %121, i32* %323, i32* %324
  %326 = load i32, i32* %325, align 4
  %327 = mul nsw i32 %326, %321
  %328 = add nsw i64 %320, 1
  %329 = add i32 %322, -1
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %319, !llvm.loop !118

331:                                              ; preds = %319, %314
  %332 = phi i32 [ %315, %314 ], [ %327, %319 ]
  %333 = sext i32 %332 to i64
  br label %334

334:                                              ; preds = %331, %266
  %335 = phi i64 [ 1, %266 ], [ %333, %331 ]
  %336 = icmp sgt i32 %267, 0
  br i1 %336, label %337, label %419

337:                                              ; preds = %334
  %338 = icmp sgt i32 %240, 0
  %339 = sext i32 %130 to i64
  %340 = sext i32 %240 to i64
  %341 = zext i32 %267 to i64
  %342 = zext i32 %240 to i64
  %343 = and i64 %342, 1
  %344 = icmp eq i32 %240, 1
  %345 = sub nsw i64 %342, %343
  %346 = icmp eq i64 %343, 0
  br label %377

347:                                              ; preds = %347, %282
  %348 = phi i64 [ %271, %282 ], [ %374, %347 ]
  %349 = phi i32 [ 1, %282 ], [ %373, %347 ]
  %350 = phi i32 [ %283, %282 ], [ %375, %347 ]
  %351 = getelementptr inbounds i32, i32* %124, i64 %348
  %352 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %348
  %353 = select i1 %121, i32* %351, i32* %352
  %354 = load i32, i32* %353, align 4
  %355 = mul nsw i32 %354, %349
  %356 = add nsw i64 %348, 1
  %357 = getelementptr inbounds i32, i32* %124, i64 %356
  %358 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %356
  %359 = select i1 %121, i32* %357, i32* %358
  %360 = load i32, i32* %359, align 4
  %361 = mul nsw i32 %360, %355
  %362 = add nsw i64 %348, 2
  %363 = getelementptr inbounds i32, i32* %124, i64 %362
  %364 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %362
  %365 = select i1 %121, i32* %363, i32* %364
  %366 = load i32, i32* %365, align 4
  %367 = mul nsw i32 %366, %361
  %368 = add nsw i64 %348, 3
  %369 = getelementptr inbounds i32, i32* %124, i64 %368
  %370 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %368
  %371 = select i1 %121, i32* %369, i32* %370
  %372 = load i32, i32* %371, align 4
  %373 = mul nsw i32 %372, %367
  %374 = add nsw i64 %348, 4
  %375 = add i32 %350, -4
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %314, label %347

377:                                              ; preds = %393, %337
  %378 = phi i64 [ 0, %337 ], [ %394, %393 ]
  br i1 %338, label %379, label %393

379:                                              ; preds = %377
  %380 = mul nsw i64 %378, %340
  %381 = mul nsw i64 %378, %339
  br i1 %344, label %382, label %396

382:                                              ; preds = %396, %379
  %383 = phi i64 [ 0, %379 ], [ %416, %396 ]
  br i1 %346, label %393, label %384

384:                                              ; preds = %382
  %385 = add nsw i64 %383, %380
  %386 = mul nsw i64 %385, %335
  %387 = getelementptr inbounds i8, i8* %115, i64 %386
  %388 = getelementptr inbounds i64, i64* %80, i64 %383
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, %381
  %391 = mul nsw i64 %390, %335
  %392 = getelementptr inbounds i8, i8* %45, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %387, i8* align 1 %392, i64 %335, i1 false) #6
  br label %393

393:                                              ; preds = %384, %382, %377
  %394 = add nuw nsw i64 %378, 1
  %395 = icmp eq i64 %394, %341
  br i1 %395, label %419, label %377

396:                                              ; preds = %379, %396
  %397 = phi i64 [ %416, %396 ], [ 0, %379 ]
  %398 = phi i64 [ %417, %396 ], [ %345, %379 ]
  %399 = add nsw i64 %397, %380
  %400 = mul nsw i64 %399, %335
  %401 = getelementptr inbounds i8, i8* %115, i64 %400
  %402 = getelementptr inbounds i64, i64* %80, i64 %397
  %403 = load i64, i64* %402, align 8
  %404 = add nsw i64 %403, %381
  %405 = mul nsw i64 %404, %335
  %406 = getelementptr inbounds i8, i8* %45, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %401, i8* align 1 %406, i64 %335, i1 false) #6
  %407 = or i64 %397, 1
  %408 = add nsw i64 %407, %380
  %409 = mul nsw i64 %408, %335
  %410 = getelementptr inbounds i8, i8* %115, i64 %409
  %411 = getelementptr inbounds i64, i64* %80, i64 %407
  %412 = load i64, i64* %411, align 8
  %413 = add nsw i64 %412, %381
  %414 = mul nsw i64 %413, %335
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %410, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %397, 2
  %417 = add i64 %398, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %382, label %396

419:                                              ; preds = %393, %334
  %420 = icmp sgt i32 %114, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #6
  br i1 %131, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %121, true
  %436 = icmp eq i32* %124, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %124 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIalEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !119
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !119
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !119
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !119
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !119
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !119
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !122
  br label %78

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !122
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !122
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !122
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !122
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !122
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to i64**
  %77 = load i64*, i64** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi i64* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #6
  %82 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !125
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !125
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !125
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !125
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #7, !noalias !125
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !125
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #6
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to i8**
  %112 = load i8*, i8** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi i8* [ %112, %105 ], [ null, %83 ]
  %116 = shl i32 %9, 16
  %117 = ashr exact i32 %116, 16
  %118 = icmp slt i16 %10, 0
  %119 = select i1 %118, i32 %44, i32 0
  %120 = add i32 %119, %117
  %121 = icmp sgt i32 %44, 5
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds i32, i32* %124, i64 %125
  %127 = bitcast %union.anon* %122 to [5 x i32]*
  %128 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %125
  %129 = select i1 %121, i32* %126, i32* %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %79, 5
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %131, label %133, label %136

133:                                              ; preds = %113
  %134 = getelementptr inbounds %union.anon, %union.anon* %132, i64 0, i32 0
  %135 = load i32*, i32** %134, align 8
  br label %139

136:                                              ; preds = %113
  %137 = bitcast %union.anon* %132 to i32*
  %138 = icmp sgt i32 %79, 0
  br i1 %138, label %139, label %239

139:                                              ; preds = %136, %133
  %140 = phi i32* [ %135, %133 ], [ %137, %136 ]
  %141 = zext i32 %79 to i64
  %142 = icmp ult i32 %79, 8
  br i1 %142, label %228, label %143

143:                                              ; preds = %139
  %144 = and i64 %141, 4294967288
  %145 = add nsw i64 %144, -8
  %146 = lshr exact i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp ult i64 %145, 24
  br i1 %149, label %195, label %150

150:                                              ; preds = %143
  %151 = sub nsw i64 %147, %148
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %192, %152 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %190, %152 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %191, %152 ]
  %156 = phi i64 [ %151, %150 ], [ %193, %152 ]
  %157 = getelementptr inbounds i32, i32* %140, i64 %153
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %153, 8
  %166 = getelementptr inbounds i32, i32* %140, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %153, 16
  %175 = getelementptr inbounds i32, i32* %140, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = or i64 %153, 24
  %184 = getelementptr inbounds i32, i32* %140, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = mul nsw <4 x i32> %186, %181
  %191 = mul nsw <4 x i32> %189, %182
  %192 = add i64 %153, 32
  %193 = add i64 %156, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %152, !llvm.loop !128

195:                                              ; preds = %152, %143
  %196 = phi <4 x i32> [ undef, %143 ], [ %190, %152 ]
  %197 = phi <4 x i32> [ undef, %143 ], [ %191, %152 ]
  %198 = phi i64 [ 0, %143 ], [ %192, %152 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %190, %152 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %191, %152 ]
  %201 = icmp eq i64 %148, 0
  br i1 %201, label %218, label %202

202:                                              ; preds = %195, %202
  %203 = phi i64 [ %215, %202 ], [ %198, %195 ]
  %204 = phi <4 x i32> [ %213, %202 ], [ %199, %195 ]
  %205 = phi <4 x i32> [ %214, %202 ], [ %200, %195 ]
  %206 = phi i64 [ %216, %202 ], [ %148, %195 ]
  %207 = getelementptr inbounds i32, i32* %140, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = mul nsw <4 x i32> %209, %204
  %214 = mul nsw <4 x i32> %212, %205
  %215 = add i64 %203, 8
  %216 = add i64 %206, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %202, !llvm.loop !129

218:                                              ; preds = %202, %195
  %219 = phi <4 x i32> [ %196, %195 ], [ %213, %202 ]
  %220 = phi <4 x i32> [ %197, %195 ], [ %214, %202 ]
  %221 = mul <4 x i32> %220, %219
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %225 = mul <4 x i32> %223, %224
  %226 = extractelement <4 x i32> %225, i32 0
  %227 = icmp eq i64 %144, %141
  br i1 %227, label %239, label %228

228:                                              ; preds = %218, %139
  %229 = phi i64 [ 0, %139 ], [ %144, %218 ]
  %230 = phi i32 [ 1, %139 ], [ %226, %218 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %237, %231 ], [ %229, %228 ]
  %233 = phi i32 [ %236, %231 ], [ %230, %228 ]
  %234 = getelementptr inbounds i32, i32* %140, i64 %232
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %235, %233
  %237 = add nuw nsw i64 %232, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %231, !llvm.loop !130

239:                                              ; preds = %231, %218, %136
  %240 = phi i32 [ 1, %136 ], [ %226, %218 ], [ %236, %231 ]
  %241 = icmp sgt i32 %120, 0
  br i1 %241, label %242, label %266

242:                                              ; preds = %239
  %243 = zext i32 %120 to i64
  %244 = add nsw i64 %243, -1
  %245 = and i64 %243, 3
  %246 = icmp ult i64 %244, 3
  br i1 %246, label %249, label %247

247:                                              ; preds = %242
  %248 = sub nsw i64 %243, %245
  br label %284

249:                                              ; preds = %284, %242
  %250 = phi i32 [ undef, %242 ], [ %310, %284 ]
  %251 = phi i64 [ 0, %242 ], [ %311, %284 ]
  %252 = phi i32 [ 1, %242 ], [ %310, %284 ]
  %253 = icmp eq i64 %245, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %263, %254 ], [ %251, %249 ]
  %256 = phi i32 [ %262, %254 ], [ %252, %249 ]
  %257 = phi i64 [ %264, %254 ], [ %245, %249 ]
  %258 = getelementptr inbounds i32, i32* %124, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %255
  %260 = select i1 %121, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nuw nsw i64 %255, 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %254, !llvm.loop !131

266:                                              ; preds = %249, %254, %239
  %267 = phi i32 [ 1, %239 ], [ %250, %249 ], [ %262, %254 ]
  %268 = add i32 %120, 1
  %269 = icmp slt i32 %268, %44
  br i1 %269, label %270, label %334

270:                                              ; preds = %266
  %271 = sext i32 %268 to i64
  %272 = xor i32 %119, -1
  %273 = add i32 %44, %272
  %274 = shl i32 %9, 16
  %275 = ashr exact i32 %274, 16
  %276 = sub i32 %273, %275
  %277 = add i32 %44, -2
  %278 = sub i32 %277, %119
  %279 = sub i32 %278, %275
  %280 = and i32 %276, 3
  %281 = icmp ult i32 %279, 3
  br i1 %281, label %314, label %282

282:                                              ; preds = %270
  %283 = sub i32 %276, %280
  br label %347

284:                                              ; preds = %284, %247
  %285 = phi i64 [ 0, %247 ], [ %311, %284 ]
  %286 = phi i32 [ 1, %247 ], [ %310, %284 ]
  %287 = phi i64 [ %248, %247 ], [ %312, %284 ]
  %288 = getelementptr inbounds i32, i32* %124, i64 %285
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %285
  %290 = select i1 %121, i32* %288, i32* %289
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 %291, %286
  %293 = or i64 %285, 1
  %294 = getelementptr inbounds i32, i32* %124, i64 %293
  %295 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %293
  %296 = select i1 %121, i32* %294, i32* %295
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %292
  %299 = or i64 %285, 2
  %300 = getelementptr inbounds i32, i32* %124, i64 %299
  %301 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %299
  %302 = select i1 %121, i32* %300, i32* %301
  %303 = load i32, i32* %302, align 4
  %304 = mul nsw i32 %303, %298
  %305 = or i64 %285, 3
  %306 = getelementptr inbounds i32, i32* %124, i64 %305
  %307 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %305
  %308 = select i1 %121, i32* %306, i32* %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %304
  %311 = add nuw nsw i64 %285, 4
  %312 = add i64 %287, -4
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %249, label %284

314:                                              ; preds = %347, %270
  %315 = phi i32 [ undef, %270 ], [ %373, %347 ]
  %316 = phi i64 [ %271, %270 ], [ %374, %347 ]
  %317 = phi i32 [ 1, %270 ], [ %373, %347 ]
  %318 = icmp eq i32 %280, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %314, %319
  %320 = phi i64 [ %328, %319 ], [ %316, %314 ]
  %321 = phi i32 [ %327, %319 ], [ %317, %314 ]
  %322 = phi i32 [ %329, %319 ], [ %280, %314 ]
  %323 = getelementptr inbounds i32, i32* %124, i64 %320
  %324 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %320
  %325 = select i1 %121, i32* %323, i32* %324
  %326 = load i32, i32* %325, align 4
  %327 = mul nsw i32 %326, %321
  %328 = add nsw i64 %320, 1
  %329 = add i32 %322, -1
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %319, !llvm.loop !132

331:                                              ; preds = %319, %314
  %332 = phi i32 [ %315, %314 ], [ %327, %319 ]
  %333 = sext i32 %332 to i64
  br label %334

334:                                              ; preds = %331, %266
  %335 = phi i64 [ 1, %266 ], [ %333, %331 ]
  %336 = icmp sgt i32 %267, 0
  br i1 %336, label %337, label %419

337:                                              ; preds = %334
  %338 = icmp sgt i32 %240, 0
  %339 = sext i32 %130 to i64
  %340 = sext i32 %240 to i64
  %341 = zext i32 %267 to i64
  %342 = zext i32 %240 to i64
  %343 = and i64 %342, 1
  %344 = icmp eq i32 %240, 1
  %345 = sub nsw i64 %342, %343
  %346 = icmp eq i64 %343, 0
  br label %377

347:                                              ; preds = %347, %282
  %348 = phi i64 [ %271, %282 ], [ %374, %347 ]
  %349 = phi i32 [ 1, %282 ], [ %373, %347 ]
  %350 = phi i32 [ %283, %282 ], [ %375, %347 ]
  %351 = getelementptr inbounds i32, i32* %124, i64 %348
  %352 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %348
  %353 = select i1 %121, i32* %351, i32* %352
  %354 = load i32, i32* %353, align 4
  %355 = mul nsw i32 %354, %349
  %356 = add nsw i64 %348, 1
  %357 = getelementptr inbounds i32, i32* %124, i64 %356
  %358 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %356
  %359 = select i1 %121, i32* %357, i32* %358
  %360 = load i32, i32* %359, align 4
  %361 = mul nsw i32 %360, %355
  %362 = add nsw i64 %348, 2
  %363 = getelementptr inbounds i32, i32* %124, i64 %362
  %364 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %362
  %365 = select i1 %121, i32* %363, i32* %364
  %366 = load i32, i32* %365, align 4
  %367 = mul nsw i32 %366, %361
  %368 = add nsw i64 %348, 3
  %369 = getelementptr inbounds i32, i32* %124, i64 %368
  %370 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %368
  %371 = select i1 %121, i32* %369, i32* %370
  %372 = load i32, i32* %371, align 4
  %373 = mul nsw i32 %372, %367
  %374 = add nsw i64 %348, 4
  %375 = add i32 %350, -4
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %314, label %347

377:                                              ; preds = %393, %337
  %378 = phi i64 [ 0, %337 ], [ %394, %393 ]
  br i1 %338, label %379, label %393

379:                                              ; preds = %377
  %380 = mul nsw i64 %378, %340
  %381 = mul nsw i64 %378, %339
  br i1 %344, label %382, label %396

382:                                              ; preds = %396, %379
  %383 = phi i64 [ 0, %379 ], [ %416, %396 ]
  br i1 %346, label %393, label %384

384:                                              ; preds = %382
  %385 = add nsw i64 %383, %380
  %386 = mul nsw i64 %385, %335
  %387 = getelementptr inbounds i8, i8* %115, i64 %386
  %388 = getelementptr inbounds i64, i64* %80, i64 %383
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, %381
  %391 = mul nsw i64 %390, %335
  %392 = getelementptr inbounds i8, i8* %45, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %387, i8* align 1 %392, i64 %335, i1 false) #6
  br label %393

393:                                              ; preds = %384, %382, %377
  %394 = add nuw nsw i64 %378, 1
  %395 = icmp eq i64 %394, %341
  br i1 %395, label %419, label %377

396:                                              ; preds = %379, %396
  %397 = phi i64 [ %416, %396 ], [ 0, %379 ]
  %398 = phi i64 [ %417, %396 ], [ %345, %379 ]
  %399 = add nsw i64 %397, %380
  %400 = mul nsw i64 %399, %335
  %401 = getelementptr inbounds i8, i8* %115, i64 %400
  %402 = getelementptr inbounds i64, i64* %80, i64 %397
  %403 = load i64, i64* %402, align 8
  %404 = add nsw i64 %403, %381
  %405 = mul nsw i64 %404, %335
  %406 = getelementptr inbounds i8, i8* %45, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %401, i8* align 1 %406, i64 %335, i1 false) #6
  %407 = or i64 %397, 1
  %408 = add nsw i64 %407, %380
  %409 = mul nsw i64 %408, %335
  %410 = getelementptr inbounds i8, i8* %115, i64 %409
  %411 = getelementptr inbounds i64, i64* %80, i64 %407
  %412 = load i64, i64* %411, align 8
  %413 = add nsw i64 %412, %381
  %414 = mul nsw i64 %413, %335
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %410, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %397, 2
  %417 = add i64 %398, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %382, label %396

419:                                              ; preds = %393, %334
  %420 = icmp sgt i32 %114, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #6
  br i1 %131, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %121, true
  %436 = icmp eq i32* %124, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %124 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIilEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !133
  br label %42

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !133
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !133
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !133
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !133
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !133
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1, i32 0
  %41 = load i32*, i32** %40, align 8
  br label %42

42:                                               ; preds = %13, %35
  %43 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %44 = phi i32* [ %41, %35 ], [ null, %13 ]
  %45 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #6
  %46 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %48, align 8, !alias.scope !136
  br label %77

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %51 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %50, align 8, !noalias !136
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 4, !noalias !136
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 0
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %53, i32* %55, align 8, !alias.scope !136
  %56 = icmp sgt i32 %53, 5
  br i1 %56, label %57, label %64

57:                                               ; preds = %49
  %58 = sext i32 %53 to i64
  %59 = shl nsw i64 %58, 2
  %60 = tail call i8* @_Znam(i64 %59) #7, !noalias !136
  %61 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %62 = bitcast i32** %61 to i8**
  store i8* %60, i8** %62, align 8, !alias.scope !136
  %63 = bitcast i8* %60 to i32*
  br label %69

64:                                               ; preds = %49
  %65 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %66 = bitcast %union.anon* %65 to i32*
  %67 = sext i32 %53 to i64
  %68 = shl nsw i64 %67, 2
  br label %69

69:                                               ; preds = %64, %57
  %70 = phi i64 [ %59, %57 ], [ %68, %64 ]
  %71 = phi i32* [ %63, %57 ], [ %66, %64 ]
  %72 = bitcast i32* %71 to i8*
  %73 = bitcast i32* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73, i64 %70, i1 false) #6
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %75 = bitcast %union.TfLitePtrUnion* %74 to i64**
  %76 = load i64*, i64** %75, align 8
  br label %77

77:                                               ; preds = %47, %69
  %78 = phi i32 [ %53, %69 ], [ 0, %47 ]
  %79 = phi i64* [ %76, %69 ], [ null, %47 ]
  %80 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %83, align 8, !alias.scope !139
  br label %111

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8, !noalias !139
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !139
  %89 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %88, i32* %90, align 8, !alias.scope !139
  %91 = icmp sgt i32 %88, 5
  br i1 %91, label %92, label %99

92:                                               ; preds = %84
  %93 = sext i32 %88 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call i8* @_Znam(i64 %94) #7, !noalias !139
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %97 = bitcast i32** %96 to i8**
  store i8* %95, i8** %97, align 8, !alias.scope !139
  %98 = bitcast i8* %95 to i32*
  br label %104

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %101 = bitcast %union.anon* %100 to i32*
  %102 = sext i32 %88 to i64
  %103 = shl nsw i64 %102, 2
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %94, %92 ], [ %103, %99 ]
  %106 = phi i32* [ %98, %92 ], [ %101, %99 ]
  %107 = bitcast i32* %106 to i8*
  %108 = bitcast i32* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 %105, i1 false) #6
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1, i32 0
  %110 = load i32*, i32** %109, align 8
  br label %111

111:                                              ; preds = %82, %104
  %112 = phi i32 [ %88, %104 ], [ 0, %82 ]
  %113 = phi i32* [ %110, %104 ], [ null, %82 ]
  %114 = shl i32 %9, 16
  %115 = ashr exact i32 %114, 16
  %116 = icmp slt i16 %10, 0
  %117 = select i1 %116, i32 %43, i32 0
  %118 = add i32 %117, %115
  %119 = icmp sgt i32 %43, 5
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %121 = getelementptr inbounds %union.anon, %union.anon* %120, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8
  %123 = sext i32 %118 to i64
  %124 = getelementptr inbounds i32, i32* %122, i64 %123
  %125 = bitcast %union.anon* %120 to [5 x i32]*
  %126 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %123
  %127 = select i1 %119, i32* %124, i32* %126
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %78, 5
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %129, label %131, label %134

131:                                              ; preds = %111
  %132 = getelementptr inbounds %union.anon, %union.anon* %130, i64 0, i32 0
  %133 = load i32*, i32** %132, align 8
  br label %137

134:                                              ; preds = %111
  %135 = bitcast %union.anon* %130 to i32*
  %136 = icmp sgt i32 %78, 0
  br i1 %136, label %137, label %237

137:                                              ; preds = %134, %131
  %138 = phi i32* [ %133, %131 ], [ %135, %134 ]
  %139 = zext i32 %78 to i64
  %140 = icmp ult i32 %78, 8
  br i1 %140, label %226, label %141

141:                                              ; preds = %137
  %142 = and i64 %139, 4294967288
  %143 = add nsw i64 %142, -8
  %144 = lshr exact i64 %143, 3
  %145 = add nuw nsw i64 %144, 1
  %146 = and i64 %145, 3
  %147 = icmp ult i64 %143, 24
  br i1 %147, label %193, label %148

148:                                              ; preds = %141
  %149 = sub nsw i64 %145, %146
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %190, %150 ]
  %152 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %148 ], [ %188, %150 ]
  %153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %148 ], [ %189, %150 ]
  %154 = phi i64 [ %149, %148 ], [ %191, %150 ]
  %155 = getelementptr inbounds i32, i32* %138, i64 %151
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4
  %158 = getelementptr inbounds i32, i32* %155, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4
  %161 = mul nsw <4 x i32> %157, %152
  %162 = mul nsw <4 x i32> %160, %153
  %163 = or i64 %151, 8
  %164 = getelementptr inbounds i32, i32* %138, i64 %163
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4
  %167 = getelementptr inbounds i32, i32* %164, i64 4
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = mul nsw <4 x i32> %166, %161
  %171 = mul nsw <4 x i32> %169, %162
  %172 = or i64 %151, 16
  %173 = getelementptr inbounds i32, i32* %138, i64 %172
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 4
  %176 = getelementptr inbounds i32, i32* %173, i64 4
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 4
  %179 = mul nsw <4 x i32> %175, %170
  %180 = mul nsw <4 x i32> %178, %171
  %181 = or i64 %151, 24
  %182 = getelementptr inbounds i32, i32* %138, i64 %181
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4
  %185 = getelementptr inbounds i32, i32* %182, i64 4
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4
  %188 = mul nsw <4 x i32> %184, %179
  %189 = mul nsw <4 x i32> %187, %180
  %190 = add i64 %151, 32
  %191 = add i64 %154, -4
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %150, !llvm.loop !142

193:                                              ; preds = %150, %141
  %194 = phi <4 x i32> [ undef, %141 ], [ %188, %150 ]
  %195 = phi <4 x i32> [ undef, %141 ], [ %189, %150 ]
  %196 = phi i64 [ 0, %141 ], [ %190, %150 ]
  %197 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %188, %150 ]
  %198 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %189, %150 ]
  %199 = icmp eq i64 %146, 0
  br i1 %199, label %216, label %200

200:                                              ; preds = %193, %200
  %201 = phi i64 [ %213, %200 ], [ %196, %193 ]
  %202 = phi <4 x i32> [ %211, %200 ], [ %197, %193 ]
  %203 = phi <4 x i32> [ %212, %200 ], [ %198, %193 ]
  %204 = phi i64 [ %214, %200 ], [ %146, %193 ]
  %205 = getelementptr inbounds i32, i32* %138, i64 %201
  %206 = bitcast i32* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4
  %208 = getelementptr inbounds i32, i32* %205, i64 4
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4
  %211 = mul nsw <4 x i32> %207, %202
  %212 = mul nsw <4 x i32> %210, %203
  %213 = add i64 %201, 8
  %214 = add i64 %204, -1
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %200, !llvm.loop !143

216:                                              ; preds = %200, %193
  %217 = phi <4 x i32> [ %194, %193 ], [ %211, %200 ]
  %218 = phi <4 x i32> [ %195, %193 ], [ %212, %200 ]
  %219 = mul <4 x i32> %218, %217
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %221 = mul <4 x i32> %219, %220
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = extractelement <4 x i32> %223, i32 0
  %225 = icmp eq i64 %142, %139
  br i1 %225, label %237, label %226

226:                                              ; preds = %216, %137
  %227 = phi i64 [ 0, %137 ], [ %142, %216 ]
  %228 = phi i32 [ 1, %137 ], [ %224, %216 ]
  br label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %235, %229 ], [ %227, %226 ]
  %231 = phi i32 [ %234, %229 ], [ %228, %226 ]
  %232 = getelementptr inbounds i32, i32* %138, i64 %230
  %233 = load i32, i32* %232, align 4
  %234 = mul nsw i32 %233, %231
  %235 = add nuw nsw i64 %230, 1
  %236 = icmp eq i64 %235, %139
  br i1 %236, label %237, label %229, !llvm.loop !144

237:                                              ; preds = %229, %216, %134
  %238 = phi i32 [ 1, %134 ], [ %224, %216 ], [ %234, %229 ]
  %239 = icmp sgt i32 %118, 0
  br i1 %239, label %240, label %264

240:                                              ; preds = %237
  %241 = zext i32 %118 to i64
  %242 = add nsw i64 %241, -1
  %243 = and i64 %241, 3
  %244 = icmp ult i64 %242, 3
  br i1 %244, label %247, label %245

245:                                              ; preds = %240
  %246 = sub nsw i64 %241, %243
  br label %282

247:                                              ; preds = %282, %240
  %248 = phi i32 [ undef, %240 ], [ %308, %282 ]
  %249 = phi i64 [ 0, %240 ], [ %309, %282 ]
  %250 = phi i32 [ 1, %240 ], [ %308, %282 ]
  %251 = icmp eq i64 %243, 0
  br i1 %251, label %264, label %252

252:                                              ; preds = %247, %252
  %253 = phi i64 [ %261, %252 ], [ %249, %247 ]
  %254 = phi i32 [ %260, %252 ], [ %250, %247 ]
  %255 = phi i64 [ %262, %252 ], [ %243, %247 ]
  %256 = getelementptr inbounds i32, i32* %122, i64 %253
  %257 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %253
  %258 = select i1 %119, i32* %256, i32* %257
  %259 = load i32, i32* %258, align 4
  %260 = mul nsw i32 %259, %254
  %261 = add nuw nsw i64 %253, 1
  %262 = add i64 %255, -1
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %252, !llvm.loop !145

264:                                              ; preds = %247, %252, %237
  %265 = phi i32 [ 1, %237 ], [ %248, %247 ], [ %260, %252 ]
  %266 = add i32 %118, 1
  %267 = icmp slt i32 %266, %43
  br i1 %267, label %268, label %332

268:                                              ; preds = %264
  %269 = sext i32 %266 to i64
  %270 = xor i32 %117, -1
  %271 = add i32 %43, %270
  %272 = shl i32 %9, 16
  %273 = ashr exact i32 %272, 16
  %274 = sub i32 %271, %273
  %275 = add i32 %43, -2
  %276 = sub i32 %275, %117
  %277 = sub i32 %276, %273
  %278 = and i32 %274, 3
  %279 = icmp ult i32 %277, 3
  br i1 %279, label %312, label %280

280:                                              ; preds = %268
  %281 = sub i32 %274, %278
  br label %346

282:                                              ; preds = %282, %245
  %283 = phi i64 [ 0, %245 ], [ %309, %282 ]
  %284 = phi i32 [ 1, %245 ], [ %308, %282 ]
  %285 = phi i64 [ %246, %245 ], [ %310, %282 ]
  %286 = getelementptr inbounds i32, i32* %122, i64 %283
  %287 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %283
  %288 = select i1 %119, i32* %286, i32* %287
  %289 = load i32, i32* %288, align 4
  %290 = mul nsw i32 %289, %284
  %291 = or i64 %283, 1
  %292 = getelementptr inbounds i32, i32* %122, i64 %291
  %293 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %291
  %294 = select i1 %119, i32* %292, i32* %293
  %295 = load i32, i32* %294, align 4
  %296 = mul nsw i32 %295, %290
  %297 = or i64 %283, 2
  %298 = getelementptr inbounds i32, i32* %122, i64 %297
  %299 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %297
  %300 = select i1 %119, i32* %298, i32* %299
  %301 = load i32, i32* %300, align 4
  %302 = mul nsw i32 %301, %296
  %303 = or i64 %283, 3
  %304 = getelementptr inbounds i32, i32* %122, i64 %303
  %305 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %303
  %306 = select i1 %119, i32* %304, i32* %305
  %307 = load i32, i32* %306, align 4
  %308 = mul nsw i32 %307, %302
  %309 = add nuw nsw i64 %283, 4
  %310 = add i64 %285, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %247, label %282

312:                                              ; preds = %346, %268
  %313 = phi i32 [ undef, %268 ], [ %372, %346 ]
  %314 = phi i64 [ %269, %268 ], [ %373, %346 ]
  %315 = phi i32 [ 1, %268 ], [ %372, %346 ]
  %316 = icmp eq i32 %278, 0
  br i1 %316, label %329, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %326, %317 ], [ %314, %312 ]
  %319 = phi i32 [ %325, %317 ], [ %315, %312 ]
  %320 = phi i32 [ %327, %317 ], [ %278, %312 ]
  %321 = getelementptr inbounds i32, i32* %122, i64 %318
  %322 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %318
  %323 = select i1 %119, i32* %321, i32* %322
  %324 = load i32, i32* %323, align 4
  %325 = mul nsw i32 %324, %319
  %326 = add nsw i64 %318, 1
  %327 = add i32 %320, -1
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %317, !llvm.loop !146

329:                                              ; preds = %317, %312
  %330 = phi i32 [ %313, %312 ], [ %325, %317 ]
  %331 = sext i32 %330 to i64
  br label %332

332:                                              ; preds = %329, %264
  %333 = phi i64 [ 1, %264 ], [ %331, %329 ]
  %334 = icmp sgt i32 %265, 0
  br i1 %334, label %335, label %424

335:                                              ; preds = %332
  %336 = icmp sgt i32 %238, 0
  %337 = shl nsw i64 %333, 2
  %338 = sext i32 %128 to i64
  %339 = sext i32 %238 to i64
  %340 = zext i32 %265 to i64
  %341 = zext i32 %238 to i64
  %342 = and i64 %341, 1
  %343 = icmp eq i32 %238, 1
  %344 = sub nsw i64 %341, %342
  %345 = icmp eq i64 %342, 0
  br label %376

346:                                              ; preds = %346, %280
  %347 = phi i64 [ %269, %280 ], [ %373, %346 ]
  %348 = phi i32 [ 1, %280 ], [ %372, %346 ]
  %349 = phi i32 [ %281, %280 ], [ %374, %346 ]
  %350 = getelementptr inbounds i32, i32* %122, i64 %347
  %351 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %347
  %352 = select i1 %119, i32* %350, i32* %351
  %353 = load i32, i32* %352, align 4
  %354 = mul nsw i32 %353, %348
  %355 = add nsw i64 %347, 1
  %356 = getelementptr inbounds i32, i32* %122, i64 %355
  %357 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %355
  %358 = select i1 %119, i32* %356, i32* %357
  %359 = load i32, i32* %358, align 4
  %360 = mul nsw i32 %359, %354
  %361 = add nsw i64 %347, 2
  %362 = getelementptr inbounds i32, i32* %122, i64 %361
  %363 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %361
  %364 = select i1 %119, i32* %362, i32* %363
  %365 = load i32, i32* %364, align 4
  %366 = mul nsw i32 %365, %360
  %367 = add nsw i64 %347, 3
  %368 = getelementptr inbounds i32, i32* %122, i64 %367
  %369 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i64 0, i64 %367
  %370 = select i1 %119, i32* %368, i32* %369
  %371 = load i32, i32* %370, align 4
  %372 = mul nsw i32 %371, %366
  %373 = add nsw i64 %347, 4
  %374 = add i32 %349, -4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %312, label %346

376:                                              ; preds = %394, %335
  %377 = phi i64 [ 0, %335 ], [ %395, %394 ]
  br i1 %336, label %378, label %394

378:                                              ; preds = %376
  %379 = mul nsw i64 %377, %339
  %380 = mul nsw i64 %377, %338
  br i1 %343, label %381, label %397

381:                                              ; preds = %397, %378
  %382 = phi i64 [ 0, %378 ], [ %421, %397 ]
  br i1 %345, label %394, label %383

383:                                              ; preds = %381
  %384 = add nsw i64 %382, %379
  %385 = mul nsw i64 %384, %333
  %386 = getelementptr inbounds i32, i32* %113, i64 %385
  %387 = bitcast i32* %386 to i8*
  %388 = getelementptr inbounds i64, i64* %79, i64 %382
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, %380
  %391 = mul nsw i64 %390, %333
  %392 = getelementptr inbounds i32, i32* %44, i64 %391
  %393 = bitcast i32* %392 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %387, i8* align 4 %393, i64 %337, i1 false) #6
  br label %394

394:                                              ; preds = %383, %381, %376
  %395 = add nuw nsw i64 %377, 1
  %396 = icmp eq i64 %395, %340
  br i1 %396, label %424, label %376

397:                                              ; preds = %378, %397
  %398 = phi i64 [ %421, %397 ], [ 0, %378 ]
  %399 = phi i64 [ %422, %397 ], [ %344, %378 ]
  %400 = add nsw i64 %398, %379
  %401 = mul nsw i64 %400, %333
  %402 = getelementptr inbounds i32, i32* %113, i64 %401
  %403 = bitcast i32* %402 to i8*
  %404 = getelementptr inbounds i64, i64* %79, i64 %398
  %405 = load i64, i64* %404, align 8
  %406 = add nsw i64 %405, %380
  %407 = mul nsw i64 %406, %333
  %408 = getelementptr inbounds i32, i32* %44, i64 %407
  %409 = bitcast i32* %408 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %403, i8* align 4 %409, i64 %337, i1 false) #6
  %410 = or i64 %398, 1
  %411 = add nsw i64 %410, %379
  %412 = mul nsw i64 %411, %333
  %413 = getelementptr inbounds i32, i32* %113, i64 %412
  %414 = bitcast i32* %413 to i8*
  %415 = getelementptr inbounds i64, i64* %79, i64 %410
  %416 = load i64, i64* %415, align 8
  %417 = add nsw i64 %416, %380
  %418 = mul nsw i64 %417, %333
  %419 = getelementptr inbounds i32, i32* %44, i64 %418
  %420 = bitcast i32* %419 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %414, i8* align 4 %420, i64 %337, i1 false) #6
  %421 = add nuw nsw i64 %398, 2
  %422 = add i64 %399, -2
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %381, label %397

424:                                              ; preds = %394, %332
  %425 = icmp sgt i32 %112, 5
  br i1 %425, label %426, label %432

426:                                              ; preds = %424
  %427 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %428 = load i32*, i32** %427, align 8
  %429 = icmp eq i32* %428, null
  br i1 %429, label %432, label %430

430:                                              ; preds = %426
  %431 = bitcast i32* %428 to i8*
  tail call void @_ZdaPv(i8* %431) #7
  br label %432

432:                                              ; preds = %424, %426, %430
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  br i1 %129, label %433, label %439

433:                                              ; preds = %432
  %434 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %435 = load i32*, i32** %434, align 8
  %436 = icmp eq i32* %435, null
  br i1 %436, label %439, label %437

437:                                              ; preds = %433
  %438 = bitcast i32* %435 to i8*
  tail call void @_ZdaPv(i8* %438) #7
  br label %439

439:                                              ; preds = %432, %433, %437
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #6
  %440 = xor i1 %119, true
  %441 = icmp eq i32* %122, null
  %442 = or i1 %441, %440
  br i1 %442, label %445, label %443

443:                                              ; preds = %439
  %444 = bitcast i32* %122 to i8*
  tail call void @_ZdaPv(i8* %444) #7
  br label %445

445:                                              ; preds = %439, %443
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIllEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !147
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !147
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !147
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !147
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !147
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !147
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i64**
  %42 = load i64*, i64** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i64* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !150
  br label %78

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !150
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !150
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !150
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !150
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !150
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to i64**
  %77 = load i64*, i64** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi i64* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #6
  %82 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !153
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !153
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !153
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !153
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #7, !noalias !153
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !153
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #6
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to i64**
  %112 = load i64*, i64** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi i64* [ %112, %105 ], [ null, %83 ]
  %116 = shl i32 %9, 16
  %117 = ashr exact i32 %116, 16
  %118 = icmp slt i16 %10, 0
  %119 = select i1 %118, i32 %44, i32 0
  %120 = add i32 %119, %117
  %121 = icmp sgt i32 %44, 5
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds i32, i32* %124, i64 %125
  %127 = bitcast %union.anon* %122 to [5 x i32]*
  %128 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %125
  %129 = select i1 %121, i32* %126, i32* %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %79, 5
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %131, label %133, label %136

133:                                              ; preds = %113
  %134 = getelementptr inbounds %union.anon, %union.anon* %132, i64 0, i32 0
  %135 = load i32*, i32** %134, align 8
  br label %139

136:                                              ; preds = %113
  %137 = bitcast %union.anon* %132 to i32*
  %138 = icmp sgt i32 %79, 0
  br i1 %138, label %139, label %239

139:                                              ; preds = %136, %133
  %140 = phi i32* [ %135, %133 ], [ %137, %136 ]
  %141 = zext i32 %79 to i64
  %142 = icmp ult i32 %79, 8
  br i1 %142, label %228, label %143

143:                                              ; preds = %139
  %144 = and i64 %141, 4294967288
  %145 = add nsw i64 %144, -8
  %146 = lshr exact i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp ult i64 %145, 24
  br i1 %149, label %195, label %150

150:                                              ; preds = %143
  %151 = sub nsw i64 %147, %148
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %192, %152 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %190, %152 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %191, %152 ]
  %156 = phi i64 [ %151, %150 ], [ %193, %152 ]
  %157 = getelementptr inbounds i32, i32* %140, i64 %153
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %153, 8
  %166 = getelementptr inbounds i32, i32* %140, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %153, 16
  %175 = getelementptr inbounds i32, i32* %140, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = or i64 %153, 24
  %184 = getelementptr inbounds i32, i32* %140, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = mul nsw <4 x i32> %186, %181
  %191 = mul nsw <4 x i32> %189, %182
  %192 = add i64 %153, 32
  %193 = add i64 %156, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %152, !llvm.loop !156

195:                                              ; preds = %152, %143
  %196 = phi <4 x i32> [ undef, %143 ], [ %190, %152 ]
  %197 = phi <4 x i32> [ undef, %143 ], [ %191, %152 ]
  %198 = phi i64 [ 0, %143 ], [ %192, %152 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %190, %152 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %191, %152 ]
  %201 = icmp eq i64 %148, 0
  br i1 %201, label %218, label %202

202:                                              ; preds = %195, %202
  %203 = phi i64 [ %215, %202 ], [ %198, %195 ]
  %204 = phi <4 x i32> [ %213, %202 ], [ %199, %195 ]
  %205 = phi <4 x i32> [ %214, %202 ], [ %200, %195 ]
  %206 = phi i64 [ %216, %202 ], [ %148, %195 ]
  %207 = getelementptr inbounds i32, i32* %140, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = mul nsw <4 x i32> %209, %204
  %214 = mul nsw <4 x i32> %212, %205
  %215 = add i64 %203, 8
  %216 = add i64 %206, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %202, !llvm.loop !157

218:                                              ; preds = %202, %195
  %219 = phi <4 x i32> [ %196, %195 ], [ %213, %202 ]
  %220 = phi <4 x i32> [ %197, %195 ], [ %214, %202 ]
  %221 = mul <4 x i32> %220, %219
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %225 = mul <4 x i32> %223, %224
  %226 = extractelement <4 x i32> %225, i32 0
  %227 = icmp eq i64 %144, %141
  br i1 %227, label %239, label %228

228:                                              ; preds = %218, %139
  %229 = phi i64 [ 0, %139 ], [ %144, %218 ]
  %230 = phi i32 [ 1, %139 ], [ %226, %218 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %237, %231 ], [ %229, %228 ]
  %233 = phi i32 [ %236, %231 ], [ %230, %228 ]
  %234 = getelementptr inbounds i32, i32* %140, i64 %232
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %235, %233
  %237 = add nuw nsw i64 %232, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %231, !llvm.loop !158

239:                                              ; preds = %231, %218, %136
  %240 = phi i32 [ 1, %136 ], [ %226, %218 ], [ %236, %231 ]
  %241 = icmp sgt i32 %120, 0
  br i1 %241, label %242, label %266

242:                                              ; preds = %239
  %243 = zext i32 %120 to i64
  %244 = add nsw i64 %243, -1
  %245 = and i64 %243, 3
  %246 = icmp ult i64 %244, 3
  br i1 %246, label %249, label %247

247:                                              ; preds = %242
  %248 = sub nsw i64 %243, %245
  br label %284

249:                                              ; preds = %284, %242
  %250 = phi i32 [ undef, %242 ], [ %310, %284 ]
  %251 = phi i64 [ 0, %242 ], [ %311, %284 ]
  %252 = phi i32 [ 1, %242 ], [ %310, %284 ]
  %253 = icmp eq i64 %245, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %263, %254 ], [ %251, %249 ]
  %256 = phi i32 [ %262, %254 ], [ %252, %249 ]
  %257 = phi i64 [ %264, %254 ], [ %245, %249 ]
  %258 = getelementptr inbounds i32, i32* %124, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %255
  %260 = select i1 %121, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nuw nsw i64 %255, 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %254, !llvm.loop !159

266:                                              ; preds = %249, %254, %239
  %267 = phi i32 [ 1, %239 ], [ %250, %249 ], [ %262, %254 ]
  %268 = add i32 %120, 1
  %269 = icmp slt i32 %268, %44
  br i1 %269, label %270, label %334

270:                                              ; preds = %266
  %271 = sext i32 %268 to i64
  %272 = xor i32 %119, -1
  %273 = add i32 %44, %272
  %274 = shl i32 %9, 16
  %275 = ashr exact i32 %274, 16
  %276 = sub i32 %273, %275
  %277 = add i32 %44, -2
  %278 = sub i32 %277, %119
  %279 = sub i32 %278, %275
  %280 = and i32 %276, 3
  %281 = icmp ult i32 %279, 3
  br i1 %281, label %314, label %282

282:                                              ; preds = %270
  %283 = sub i32 %276, %280
  br label %348

284:                                              ; preds = %284, %247
  %285 = phi i64 [ 0, %247 ], [ %311, %284 ]
  %286 = phi i32 [ 1, %247 ], [ %310, %284 ]
  %287 = phi i64 [ %248, %247 ], [ %312, %284 ]
  %288 = getelementptr inbounds i32, i32* %124, i64 %285
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %285
  %290 = select i1 %121, i32* %288, i32* %289
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 %291, %286
  %293 = or i64 %285, 1
  %294 = getelementptr inbounds i32, i32* %124, i64 %293
  %295 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %293
  %296 = select i1 %121, i32* %294, i32* %295
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %292
  %299 = or i64 %285, 2
  %300 = getelementptr inbounds i32, i32* %124, i64 %299
  %301 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %299
  %302 = select i1 %121, i32* %300, i32* %301
  %303 = load i32, i32* %302, align 4
  %304 = mul nsw i32 %303, %298
  %305 = or i64 %285, 3
  %306 = getelementptr inbounds i32, i32* %124, i64 %305
  %307 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %305
  %308 = select i1 %121, i32* %306, i32* %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %304
  %311 = add nuw nsw i64 %285, 4
  %312 = add i64 %287, -4
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %249, label %284

314:                                              ; preds = %348, %270
  %315 = phi i32 [ undef, %270 ], [ %374, %348 ]
  %316 = phi i64 [ %271, %270 ], [ %375, %348 ]
  %317 = phi i32 [ 1, %270 ], [ %374, %348 ]
  %318 = icmp eq i32 %280, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %314, %319
  %320 = phi i64 [ %328, %319 ], [ %316, %314 ]
  %321 = phi i32 [ %327, %319 ], [ %317, %314 ]
  %322 = phi i32 [ %329, %319 ], [ %280, %314 ]
  %323 = getelementptr inbounds i32, i32* %124, i64 %320
  %324 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %320
  %325 = select i1 %121, i32* %323, i32* %324
  %326 = load i32, i32* %325, align 4
  %327 = mul nsw i32 %326, %321
  %328 = add nsw i64 %320, 1
  %329 = add i32 %322, -1
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %319, !llvm.loop !160

331:                                              ; preds = %319, %314
  %332 = phi i32 [ %315, %314 ], [ %327, %319 ]
  %333 = sext i32 %332 to i64
  br label %334

334:                                              ; preds = %331, %266
  %335 = phi i64 [ 1, %266 ], [ %333, %331 ]
  %336 = icmp sgt i32 %267, 0
  br i1 %336, label %337, label %426

337:                                              ; preds = %334
  %338 = icmp sgt i32 %240, 0
  %339 = shl nsw i64 %335, 3
  %340 = sext i32 %130 to i64
  %341 = sext i32 %240 to i64
  %342 = zext i32 %267 to i64
  %343 = zext i32 %240 to i64
  %344 = and i64 %343, 1
  %345 = icmp eq i32 %240, 1
  %346 = sub nsw i64 %343, %344
  %347 = icmp eq i64 %344, 0
  br label %378

348:                                              ; preds = %348, %282
  %349 = phi i64 [ %271, %282 ], [ %375, %348 ]
  %350 = phi i32 [ 1, %282 ], [ %374, %348 ]
  %351 = phi i32 [ %283, %282 ], [ %376, %348 ]
  %352 = getelementptr inbounds i32, i32* %124, i64 %349
  %353 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %349
  %354 = select i1 %121, i32* %352, i32* %353
  %355 = load i32, i32* %354, align 4
  %356 = mul nsw i32 %355, %350
  %357 = add nsw i64 %349, 1
  %358 = getelementptr inbounds i32, i32* %124, i64 %357
  %359 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %357
  %360 = select i1 %121, i32* %358, i32* %359
  %361 = load i32, i32* %360, align 4
  %362 = mul nsw i32 %361, %356
  %363 = add nsw i64 %349, 2
  %364 = getelementptr inbounds i32, i32* %124, i64 %363
  %365 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %363
  %366 = select i1 %121, i32* %364, i32* %365
  %367 = load i32, i32* %366, align 4
  %368 = mul nsw i32 %367, %362
  %369 = add nsw i64 %349, 3
  %370 = getelementptr inbounds i32, i32* %124, i64 %369
  %371 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %369
  %372 = select i1 %121, i32* %370, i32* %371
  %373 = load i32, i32* %372, align 4
  %374 = mul nsw i32 %373, %368
  %375 = add nsw i64 %349, 4
  %376 = add i32 %351, -4
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %314, label %348

378:                                              ; preds = %396, %337
  %379 = phi i64 [ 0, %337 ], [ %397, %396 ]
  br i1 %338, label %380, label %396

380:                                              ; preds = %378
  %381 = mul nsw i64 %379, %341
  %382 = mul nsw i64 %379, %340
  br i1 %345, label %383, label %399

383:                                              ; preds = %399, %380
  %384 = phi i64 [ 0, %380 ], [ %423, %399 ]
  br i1 %347, label %396, label %385

385:                                              ; preds = %383
  %386 = add nsw i64 %384, %381
  %387 = mul nsw i64 %386, %335
  %388 = getelementptr inbounds i64, i64* %115, i64 %387
  %389 = bitcast i64* %388 to i8*
  %390 = getelementptr inbounds i64, i64* %80, i64 %384
  %391 = load i64, i64* %390, align 8
  %392 = add nsw i64 %391, %382
  %393 = mul nsw i64 %392, %335
  %394 = getelementptr inbounds i64, i64* %45, i64 %393
  %395 = bitcast i64* %394 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %389, i8* align 8 %395, i64 %339, i1 false) #6
  br label %396

396:                                              ; preds = %385, %383, %378
  %397 = add nuw nsw i64 %379, 1
  %398 = icmp eq i64 %397, %342
  br i1 %398, label %426, label %378

399:                                              ; preds = %380, %399
  %400 = phi i64 [ %423, %399 ], [ 0, %380 ]
  %401 = phi i64 [ %424, %399 ], [ %346, %380 ]
  %402 = add nsw i64 %400, %381
  %403 = mul nsw i64 %402, %335
  %404 = getelementptr inbounds i64, i64* %115, i64 %403
  %405 = bitcast i64* %404 to i8*
  %406 = getelementptr inbounds i64, i64* %80, i64 %400
  %407 = load i64, i64* %406, align 8
  %408 = add nsw i64 %407, %382
  %409 = mul nsw i64 %408, %335
  %410 = getelementptr inbounds i64, i64* %45, i64 %409
  %411 = bitcast i64* %410 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %405, i8* align 8 %411, i64 %339, i1 false) #6
  %412 = or i64 %400, 1
  %413 = add nsw i64 %412, %381
  %414 = mul nsw i64 %413, %335
  %415 = getelementptr inbounds i64, i64* %115, i64 %414
  %416 = bitcast i64* %415 to i8*
  %417 = getelementptr inbounds i64, i64* %80, i64 %412
  %418 = load i64, i64* %417, align 8
  %419 = add nsw i64 %418, %382
  %420 = mul nsw i64 %419, %335
  %421 = getelementptr inbounds i64, i64* %45, i64 %420
  %422 = bitcast i64* %421 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %416, i8* align 8 %422, i64 %339, i1 false) #6
  %423 = add nuw nsw i64 %400, 2
  %424 = add i64 %401, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %383, label %399

426:                                              ; preds = %396, %334
  %427 = icmp sgt i32 %114, 5
  br i1 %427, label %428, label %434

428:                                              ; preds = %426
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %426, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #6
  br i1 %131, label %435, label %441

435:                                              ; preds = %434
  %436 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %437 = load i32*, i32** %436, align 8
  %438 = icmp eq i32* %437, null
  br i1 %438, label %441, label %439

439:                                              ; preds = %435
  %440 = bitcast i32* %437 to i8*
  tail call void @_ZdaPv(i8* %440) #7
  br label %441

441:                                              ; preds = %434, %435, %439
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %442 = xor i1 %121, true
  %443 = icmp eq i32* %124, null
  %444 = or i1 %443, %442
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = bitcast i32* %124 to i8*
  tail call void @_ZdaPv(i8* %446) #7
  br label %447

447:                                              ; preds = %441, %445
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather6GatherIblEE12TfLiteStatusRK18TfLiteGatherParamsPK12TfLiteTensorSA_PS8_(%struct.TfLiteGatherParams* dereferenceable(4), %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteGatherParams, %struct.TfLiteGatherParams* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  %11 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %14, align 8, !alias.scope !161
  br label %43

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8, !noalias !161
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4, !noalias !161
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %19, i32* %21, align 8, !alias.scope !161
  %22 = icmp sgt i32 %19, 5
  br i1 %22, label %23, label %30

23:                                               ; preds = %15
  %24 = sext i32 %19 to i64
  %25 = shl nsw i64 %24, 2
  %26 = tail call i8* @_Znam(i64 %25) #7, !noalias !161
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !alias.scope !161
  %29 = bitcast i8* %26 to i32*
  br label %35

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = sext i32 %19 to i64
  %34 = shl nsw i64 %33, 2
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi i64 [ %25, %23 ], [ %34, %30 ]
  %37 = phi i32* [ %29, %23 ], [ %32, %30 ]
  %38 = bitcast i32* %37 to i8*
  %39 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %36, i1 false) #6
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %13, %35
  %44 = phi i32 [ %19, %35 ], [ 0, %13 ]
  %45 = phi i8* [ %42, %35 ], [ null, %13 ]
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #6
  %47 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !164
  br label %78

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !164
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !164
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !164
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #7, !noalias !164
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !164
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #6
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to i64**
  %77 = load i64*, i64** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi i64* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #6
  %82 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !167
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !167
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !167
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !167
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #7, !noalias !167
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !167
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #6
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to i8**
  %112 = load i8*, i8** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi i8* [ %112, %105 ], [ null, %83 ]
  %116 = shl i32 %9, 16
  %117 = ashr exact i32 %116, 16
  %118 = icmp slt i16 %10, 0
  %119 = select i1 %118, i32 %44, i32 0
  %120 = add i32 %119, %117
  %121 = icmp sgt i32 %44, 5
  %122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds i32, i32* %124, i64 %125
  %127 = bitcast %union.anon* %122 to [5 x i32]*
  %128 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %125
  %129 = select i1 %121, i32* %126, i32* %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %79, 5
  %132 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %131, label %133, label %136

133:                                              ; preds = %113
  %134 = getelementptr inbounds %union.anon, %union.anon* %132, i64 0, i32 0
  %135 = load i32*, i32** %134, align 8
  br label %139

136:                                              ; preds = %113
  %137 = bitcast %union.anon* %132 to i32*
  %138 = icmp sgt i32 %79, 0
  br i1 %138, label %139, label %239

139:                                              ; preds = %136, %133
  %140 = phi i32* [ %135, %133 ], [ %137, %136 ]
  %141 = zext i32 %79 to i64
  %142 = icmp ult i32 %79, 8
  br i1 %142, label %228, label %143

143:                                              ; preds = %139
  %144 = and i64 %141, 4294967288
  %145 = add nsw i64 %144, -8
  %146 = lshr exact i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp ult i64 %145, 24
  br i1 %149, label %195, label %150

150:                                              ; preds = %143
  %151 = sub nsw i64 %147, %148
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %192, %152 ]
  %154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %190, %152 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %150 ], [ %191, %152 ]
  %156 = phi i64 [ %151, %150 ], [ %193, %152 ]
  %157 = getelementptr inbounds i32, i32* %140, i64 %153
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %153, 8
  %166 = getelementptr inbounds i32, i32* %140, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %153, 16
  %175 = getelementptr inbounds i32, i32* %140, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = or i64 %153, 24
  %184 = getelementptr inbounds i32, i32* %140, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = mul nsw <4 x i32> %186, %181
  %191 = mul nsw <4 x i32> %189, %182
  %192 = add i64 %153, 32
  %193 = add i64 %156, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %152, !llvm.loop !170

195:                                              ; preds = %152, %143
  %196 = phi <4 x i32> [ undef, %143 ], [ %190, %152 ]
  %197 = phi <4 x i32> [ undef, %143 ], [ %191, %152 ]
  %198 = phi i64 [ 0, %143 ], [ %192, %152 ]
  %199 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %190, %152 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %143 ], [ %191, %152 ]
  %201 = icmp eq i64 %148, 0
  br i1 %201, label %218, label %202

202:                                              ; preds = %195, %202
  %203 = phi i64 [ %215, %202 ], [ %198, %195 ]
  %204 = phi <4 x i32> [ %213, %202 ], [ %199, %195 ]
  %205 = phi <4 x i32> [ %214, %202 ], [ %200, %195 ]
  %206 = phi i64 [ %216, %202 ], [ %148, %195 ]
  %207 = getelementptr inbounds i32, i32* %140, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = mul nsw <4 x i32> %209, %204
  %214 = mul nsw <4 x i32> %212, %205
  %215 = add i64 %203, 8
  %216 = add i64 %206, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %202, !llvm.loop !171

218:                                              ; preds = %202, %195
  %219 = phi <4 x i32> [ %196, %195 ], [ %213, %202 ]
  %220 = phi <4 x i32> [ %197, %195 ], [ %214, %202 ]
  %221 = mul <4 x i32> %220, %219
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %223 = mul <4 x i32> %221, %222
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %225 = mul <4 x i32> %223, %224
  %226 = extractelement <4 x i32> %225, i32 0
  %227 = icmp eq i64 %144, %141
  br i1 %227, label %239, label %228

228:                                              ; preds = %218, %139
  %229 = phi i64 [ 0, %139 ], [ %144, %218 ]
  %230 = phi i32 [ 1, %139 ], [ %226, %218 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %237, %231 ], [ %229, %228 ]
  %233 = phi i32 [ %236, %231 ], [ %230, %228 ]
  %234 = getelementptr inbounds i32, i32* %140, i64 %232
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %235, %233
  %237 = add nuw nsw i64 %232, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %231, !llvm.loop !172

239:                                              ; preds = %231, %218, %136
  %240 = phi i32 [ 1, %136 ], [ %226, %218 ], [ %236, %231 ]
  %241 = icmp sgt i32 %120, 0
  br i1 %241, label %242, label %266

242:                                              ; preds = %239
  %243 = zext i32 %120 to i64
  %244 = add nsw i64 %243, -1
  %245 = and i64 %243, 3
  %246 = icmp ult i64 %244, 3
  br i1 %246, label %249, label %247

247:                                              ; preds = %242
  %248 = sub nsw i64 %243, %245
  br label %284

249:                                              ; preds = %284, %242
  %250 = phi i32 [ undef, %242 ], [ %310, %284 ]
  %251 = phi i64 [ 0, %242 ], [ %311, %284 ]
  %252 = phi i32 [ 1, %242 ], [ %310, %284 ]
  %253 = icmp eq i64 %245, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %263, %254 ], [ %251, %249 ]
  %256 = phi i32 [ %262, %254 ], [ %252, %249 ]
  %257 = phi i64 [ %264, %254 ], [ %245, %249 ]
  %258 = getelementptr inbounds i32, i32* %124, i64 %255
  %259 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %255
  %260 = select i1 %121, i32* %258, i32* %259
  %261 = load i32, i32* %260, align 4
  %262 = mul nsw i32 %261, %256
  %263 = add nuw nsw i64 %255, 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %254, !llvm.loop !173

266:                                              ; preds = %249, %254, %239
  %267 = phi i32 [ 1, %239 ], [ %250, %249 ], [ %262, %254 ]
  %268 = add i32 %120, 1
  %269 = icmp slt i32 %268, %44
  br i1 %269, label %270, label %334

270:                                              ; preds = %266
  %271 = sext i32 %268 to i64
  %272 = xor i32 %119, -1
  %273 = add i32 %44, %272
  %274 = shl i32 %9, 16
  %275 = ashr exact i32 %274, 16
  %276 = sub i32 %273, %275
  %277 = add i32 %44, -2
  %278 = sub i32 %277, %119
  %279 = sub i32 %278, %275
  %280 = and i32 %276, 3
  %281 = icmp ult i32 %279, 3
  br i1 %281, label %314, label %282

282:                                              ; preds = %270
  %283 = sub i32 %276, %280
  br label %347

284:                                              ; preds = %284, %247
  %285 = phi i64 [ 0, %247 ], [ %311, %284 ]
  %286 = phi i32 [ 1, %247 ], [ %310, %284 ]
  %287 = phi i64 [ %248, %247 ], [ %312, %284 ]
  %288 = getelementptr inbounds i32, i32* %124, i64 %285
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %285
  %290 = select i1 %121, i32* %288, i32* %289
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 %291, %286
  %293 = or i64 %285, 1
  %294 = getelementptr inbounds i32, i32* %124, i64 %293
  %295 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %293
  %296 = select i1 %121, i32* %294, i32* %295
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %292
  %299 = or i64 %285, 2
  %300 = getelementptr inbounds i32, i32* %124, i64 %299
  %301 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %299
  %302 = select i1 %121, i32* %300, i32* %301
  %303 = load i32, i32* %302, align 4
  %304 = mul nsw i32 %303, %298
  %305 = or i64 %285, 3
  %306 = getelementptr inbounds i32, i32* %124, i64 %305
  %307 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %305
  %308 = select i1 %121, i32* %306, i32* %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %304
  %311 = add nuw nsw i64 %285, 4
  %312 = add i64 %287, -4
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %249, label %284

314:                                              ; preds = %347, %270
  %315 = phi i32 [ undef, %270 ], [ %373, %347 ]
  %316 = phi i64 [ %271, %270 ], [ %374, %347 ]
  %317 = phi i32 [ 1, %270 ], [ %373, %347 ]
  %318 = icmp eq i32 %280, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %314, %319
  %320 = phi i64 [ %328, %319 ], [ %316, %314 ]
  %321 = phi i32 [ %327, %319 ], [ %317, %314 ]
  %322 = phi i32 [ %329, %319 ], [ %280, %314 ]
  %323 = getelementptr inbounds i32, i32* %124, i64 %320
  %324 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %320
  %325 = select i1 %121, i32* %323, i32* %324
  %326 = load i32, i32* %325, align 4
  %327 = mul nsw i32 %326, %321
  %328 = add nsw i64 %320, 1
  %329 = add i32 %322, -1
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %319, !llvm.loop !174

331:                                              ; preds = %319, %314
  %332 = phi i32 [ %315, %314 ], [ %327, %319 ]
  %333 = sext i32 %332 to i64
  br label %334

334:                                              ; preds = %331, %266
  %335 = phi i64 [ 1, %266 ], [ %333, %331 ]
  %336 = icmp sgt i32 %267, 0
  br i1 %336, label %337, label %419

337:                                              ; preds = %334
  %338 = icmp sgt i32 %240, 0
  %339 = sext i32 %130 to i64
  %340 = sext i32 %240 to i64
  %341 = zext i32 %267 to i64
  %342 = zext i32 %240 to i64
  %343 = and i64 %342, 1
  %344 = icmp eq i32 %240, 1
  %345 = sub nsw i64 %342, %343
  %346 = icmp eq i64 %343, 0
  br label %377

347:                                              ; preds = %347, %282
  %348 = phi i64 [ %271, %282 ], [ %374, %347 ]
  %349 = phi i32 [ 1, %282 ], [ %373, %347 ]
  %350 = phi i32 [ %283, %282 ], [ %375, %347 ]
  %351 = getelementptr inbounds i32, i32* %124, i64 %348
  %352 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %348
  %353 = select i1 %121, i32* %351, i32* %352
  %354 = load i32, i32* %353, align 4
  %355 = mul nsw i32 %354, %349
  %356 = add nsw i64 %348, 1
  %357 = getelementptr inbounds i32, i32* %124, i64 %356
  %358 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %356
  %359 = select i1 %121, i32* %357, i32* %358
  %360 = load i32, i32* %359, align 4
  %361 = mul nsw i32 %360, %355
  %362 = add nsw i64 %348, 2
  %363 = getelementptr inbounds i32, i32* %124, i64 %362
  %364 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %362
  %365 = select i1 %121, i32* %363, i32* %364
  %366 = load i32, i32* %365, align 4
  %367 = mul nsw i32 %366, %361
  %368 = add nsw i64 %348, 3
  %369 = getelementptr inbounds i32, i32* %124, i64 %368
  %370 = getelementptr inbounds [5 x i32], [5 x i32]* %127, i64 0, i64 %368
  %371 = select i1 %121, i32* %369, i32* %370
  %372 = load i32, i32* %371, align 4
  %373 = mul nsw i32 %372, %367
  %374 = add nsw i64 %348, 4
  %375 = add i32 %350, -4
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %314, label %347

377:                                              ; preds = %393, %337
  %378 = phi i64 [ 0, %337 ], [ %394, %393 ]
  br i1 %338, label %379, label %393

379:                                              ; preds = %377
  %380 = mul nsw i64 %378, %340
  %381 = mul nsw i64 %378, %339
  br i1 %344, label %382, label %396

382:                                              ; preds = %396, %379
  %383 = phi i64 [ 0, %379 ], [ %416, %396 ]
  br i1 %346, label %393, label %384

384:                                              ; preds = %382
  %385 = add nsw i64 %383, %380
  %386 = mul nsw i64 %385, %335
  %387 = getelementptr inbounds i8, i8* %115, i64 %386
  %388 = getelementptr inbounds i64, i64* %80, i64 %383
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, %381
  %391 = mul nsw i64 %390, %335
  %392 = getelementptr inbounds i8, i8* %45, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %387, i8* align 1 %392, i64 %335, i1 false) #6
  br label %393

393:                                              ; preds = %384, %382, %377
  %394 = add nuw nsw i64 %378, 1
  %395 = icmp eq i64 %394, %341
  br i1 %395, label %419, label %377

396:                                              ; preds = %379, %396
  %397 = phi i64 [ %416, %396 ], [ 0, %379 ]
  %398 = phi i64 [ %417, %396 ], [ %345, %379 ]
  %399 = add nsw i64 %397, %380
  %400 = mul nsw i64 %399, %335
  %401 = getelementptr inbounds i8, i8* %115, i64 %400
  %402 = getelementptr inbounds i64, i64* %80, i64 %397
  %403 = load i64, i64* %402, align 8
  %404 = add nsw i64 %403, %381
  %405 = mul nsw i64 %404, %335
  %406 = getelementptr inbounds i8, i8* %45, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %401, i8* align 1 %406, i64 %335, i1 false) #6
  %407 = or i64 %397, 1
  %408 = add nsw i64 %407, %380
  %409 = mul nsw i64 %408, %335
  %410 = getelementptr inbounds i8, i8* %115, i64 %409
  %411 = getelementptr inbounds i64, i64* %80, i64 %407
  %412 = load i64, i64* %411, align 8
  %413 = add nsw i64 %412, %381
  %414 = mul nsw i64 %413, %335
  %415 = getelementptr inbounds i8, i8* %45, i64 %414
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %410, i8* align 1 %415, i64 %335, i1 false) #6
  %416 = add nuw nsw i64 %397, 2
  %417 = add i64 %398, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %382, label %396

419:                                              ; preds = %393, %334
  %420 = icmp sgt i32 %114, 5
  br i1 %420, label %421, label %427

421:                                              ; preds = %419
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %423 = load i32*, i32** %422, align 8
  %424 = icmp eq i32* %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = bitcast i32* %423 to i8*
  tail call void @_ZdaPv(i8* %426) #7
  br label %427

427:                                              ; preds = %419, %421, %425
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #6
  br i1 %131, label %428, label %434

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = bitcast i32* %430 to i8*
  tail call void @_ZdaPv(i8* %433) #7
  br label %434

434:                                              ; preds = %427, %428, %432
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #6
  %435 = xor i1 %121, true
  %436 = icmp eq i32* %124, null
  %437 = or i1 %436, %435
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %124 to i8*
  tail call void @_ZdaPv(i8* %439) #7
  br label %440

440:                                              ; preds = %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6gather13GatherStringsIlEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorS9_PS7_(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::DynamicBuffer", align 8
  %6 = bitcast %"class.tflite::DynamicBuffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 1
  %11 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.tflite::DynamicBuffer", %"class.tflite::DynamicBuffer"* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #6
  %13 = tail call i8* @_Znwm(i64 4) #7
  %14 = bitcast %"class.std::__1::vector.2"* %12 to i8**
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 4
  %16 = bitcast i32** %11 to i8**
  store i8* %15, i8** %16, align 8
  %17 = bitcast i32** %10 to i64*
  %18 = bitcast i8* %13 to i32*
  store i32 0, i32* %18, align 4
  %19 = ptrtoint i8* %15 to i64
  store i64 %19, i64* %17, align 8
  %20 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %23 = bitcast %union.TfLitePtrUnion* %22 to i64**
  %24 = load i64*, i64** %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi i64* [ %24, %21 ], [ null, %4 ]
  %27 = tail call i32 @_ZN6tflite14GetStringCountEPK12TfLiteTensor(%struct.TfLiteTensor* %1) #6
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %30 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %29, align 8
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %107

34:                                               ; preds = %25
  %35 = sext i32 %32 to i64
  %36 = add nsw i64 %35, -1
  %37 = and i64 %35, 7
  %38 = icmp ult i64 %36, 7
  br i1 %38, label %87, label %39

39:                                               ; preds = %34
  %40 = sub nsw i64 %35, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %84, %41 ]
  %43 = phi i64 [ 1, %39 ], [ %83, %41 ]
  %44 = phi i64 [ %40, %39 ], [ %85, %41 ]
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %42
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = mul nsw i64 %43, %47
  %49 = or i64 %42, 1
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = sext i32 %51 to i64
  %53 = mul nsw i64 %48, %52
  %54 = or i64 %42, 2
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %53, %57
  %59 = or i64 %42, 3
  %60 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  %63 = mul nsw i64 %58, %62
  %64 = or i64 %42, 4
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %63, %67
  %69 = or i64 %42, 5
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %68, %72
  %74 = or i64 %42, 6
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = mul nsw i64 %73, %77
  %79 = or i64 %42, 7
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %78, %82
  %84 = add nuw nsw i64 %42, 8
  %85 = add i64 %44, -8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %41

87:                                               ; preds = %41, %34
  %88 = phi i64 [ undef, %34 ], [ %83, %41 ]
  %89 = phi i64 [ 0, %34 ], [ %84, %41 ]
  %90 = phi i64 [ 1, %34 ], [ %83, %41 ]
  %91 = icmp eq i64 %37, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %87, %92
  %93 = phi i64 [ %100, %92 ], [ %89, %87 ]
  %94 = phi i64 [ %99, %92 ], [ %90, %87 ]
  %95 = phi i64 [ %101, %92 ], [ %37, %87 ]
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 %93
  %97 = load i32, i32* %96, align 4
  %98 = sext i32 %97 to i64
  %99 = mul nsw i64 %94, %98
  %100 = add nuw nsw i64 %93, 1
  %101 = add i64 %95, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %92, !llvm.loop !175

103:                                              ; preds = %92, %87
  %104 = phi i64 [ %88, %87 ], [ %99, %92 ]
  %105 = trunc i64 %104 to i32
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %126

107:                                              ; preds = %25, %103
  %108 = phi i64 [ %104, %103 ], [ 1, %25 ]
  %109 = and i64 %108, 4294967295
  br label %110

110:                                              ; preds = %115, %107
  %111 = phi i64 [ 0, %107 ], [ %121, %115 ]
  %112 = getelementptr inbounds i64, i64* %26, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = icmp slt i64 %113, %28
  br i1 %114, label %115, label %123

115:                                              ; preds = %110
  %116 = trunc i64 %113 to i32
  %117 = call { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor* %1, i32 %116) #6
  %118 = extractvalue { i8*, i32 } %117, 0
  %119 = extractvalue { i8*, i32 } %117, 1
  %120 = sext i32 %119 to i64
  call void @_ZN6tflite13DynamicBuffer9AddStringEPKcm(%"class.tflite::DynamicBuffer"* nonnull %5, i8* %118, i64 %120) #6
  %121 = add nuw nsw i64 %111, 1
  %122 = icmp eq i64 %121, %109
  br i1 %122, label %126, label %110

123:                                              ; preds = %110
  %124 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %125 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %124, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %125(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 123, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %127

126:                                              ; preds = %115, %103
  call void @_ZN6tflite13DynamicBuffer13WriteToTensorEP12TfLiteTensorP14TfLiteIntArray(%"class.tflite::DynamicBuffer"* nonnull %5, %struct.TfLiteTensor* %3, %struct.TfLiteIntArray* null) #6
  br label %127

127:                                              ; preds = %123, %126
  %128 = phi i32 [ 0, %126 ], [ 1, %123 ]
  %129 = load i32*, i32** %9, align 8
  %130 = icmp eq i32* %129, null
  br i1 %130, label %134, label %131

131:                                              ; preds = %127
  %132 = ptrtoint i32* %129 to i64
  store i64 %132, i64* %17, align 8
  %133 = bitcast i32* %129 to i8*
  call void @_ZdlPv(i8* %133) #7
  br label %134

134:                                              ; preds = %131, %127
  %135 = load i8*, i8** %7, align 8
  %136 = icmp eq i8* %135, null
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = ptrtoint i8* %135 to i64
  %139 = bitcast i8** %8 to i64*
  store i64 %138, i64* %139, align 8
  call void @_ZdlPv(i8* nonnull %135) #7
  br label %140

140:                                              ; preds = %134, %137
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #6
  ret i32 %128
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin15Register_GATHEREv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin15Register_GATHEREvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN6tflite14GetStringCountEPK12TfLiteTensor(%struct.TfLiteTensor*) local_unnamed_addr #2

declare { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor*, i32) local_unnamed_addr #2

declare void @_ZN6tflite13DynamicBuffer9AddStringEPKcm(%"class.tflite::DynamicBuffer"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN6tflite13DynamicBuffer13WriteToTensorEP12TfLiteTensorP14TfLiteIntArray(%"class.tflite::DynamicBuffer"*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!6 = distinct !{!6, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!9 = distinct !{!9, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!12 = distinct !{!12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !17, !14}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!22 = distinct !{!22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!25 = distinct !{!25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!28 = distinct !{!28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!29 = distinct !{!29, !14}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !17, !14}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!36 = distinct !{!36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!39 = distinct !{!39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!42 = distinct !{!42, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!43 = distinct !{!43, !14}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !17, !14}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !3}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!50 = distinct !{!50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!53 = distinct !{!53, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!56 = distinct !{!56, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!57 = distinct !{!57, !14}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !17, !14}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !3}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!64 = distinct !{!64, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!67 = distinct !{!67, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!70 = distinct !{!70, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!71 = distinct !{!71, !14}
!72 = distinct !{!72, !3}
!73 = distinct !{!73, !17, !14}
!74 = distinct !{!74, !3}
!75 = distinct !{!75, !3}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!78 = distinct !{!78, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!81 = distinct !{!81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!84 = distinct !{!84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!85 = distinct !{!85, !14}
!86 = distinct !{!86, !3}
!87 = distinct !{!87, !17, !14}
!88 = distinct !{!88, !3}
!89 = distinct !{!89, !3}
!90 = distinct !{!90, !3}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!93 = distinct !{!93, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!96 = distinct !{!96, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!99 = distinct !{!99, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!100 = distinct !{!100, !14}
!101 = distinct !{!101, !3}
!102 = distinct !{!102, !17, !14}
!103 = distinct !{!103, !3}
!104 = distinct !{!104, !3}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!107 = distinct !{!107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!108 = !{!109}
!109 = distinct !{!109, !110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!110 = distinct !{!110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!111 = !{!112}
!112 = distinct !{!112, !113, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!113 = distinct !{!113, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!114 = distinct !{!114, !14}
!115 = distinct !{!115, !3}
!116 = distinct !{!116, !17, !14}
!117 = distinct !{!117, !3}
!118 = distinct !{!118, !3}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!121 = distinct !{!121, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!124 = distinct !{!124, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!127 = distinct !{!127, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!128 = distinct !{!128, !14}
!129 = distinct !{!129, !3}
!130 = distinct !{!130, !17, !14}
!131 = distinct !{!131, !3}
!132 = distinct !{!132, !3}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!135 = distinct !{!135, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!138 = distinct !{!138, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!141 = distinct !{!141, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!142 = distinct !{!142, !14}
!143 = distinct !{!143, !3}
!144 = distinct !{!144, !17, !14}
!145 = distinct !{!145, !3}
!146 = distinct !{!146, !3}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!149 = distinct !{!149, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!150 = !{!151}
!151 = distinct !{!151, !152, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!152 = distinct !{!152, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!155 = distinct !{!155, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!156 = distinct !{!156, !14}
!157 = distinct !{!157, !3}
!158 = distinct !{!158, !17, !14}
!159 = distinct !{!159, !3}
!160 = distinct !{!160, !3}
!161 = !{!162}
!162 = distinct !{!162, !163, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!163 = distinct !{!163, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!166 = distinct !{!166, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!169 = distinct !{!169, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!170 = distinct !{!170, !14}
!171 = distinct !{!171, !3}
!172 = distinct !{!172, !17, !14}
!173 = distinct !{!173, !3}
!174 = distinct !{!174, !3}
!175 = distinct !{!175, !3}
