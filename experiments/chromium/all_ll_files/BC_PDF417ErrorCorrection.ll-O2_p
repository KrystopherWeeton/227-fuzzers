; ModuleID = '../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417ErrorCorrection.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417ErrorCorrection.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"class.fxcrt::WideString" }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>

@_ZN12_GLOBAL__N_115EC_COEFFICIENTSE = internal unnamed_addr constant [9 x i16*] [i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_0_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_1_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([8 x i16], [8 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_2_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([16 x i16], [16 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_3_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([32 x i16], [32 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_4_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([64 x i16], [64 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_5_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([128 x i16], [128 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_6_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([256 x i16], [256 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_7_COEFFICIENTSE, i32 0, i32 0), i16* getelementptr inbounds ([512 x i16], [512 x i16]* @_ZN12_GLOBAL__N_123EC_LEVEL_8_COEFFICIENTSE, i32 0, i32 0)], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_0_COEFFICIENTSE = internal constant [2 x i16] [i16 27, i16 917], align 2
@_ZN12_GLOBAL__N_123EC_LEVEL_1_COEFFICIENTSE = internal constant [4 x i16] [i16 522, i16 568, i16 723, i16 809], align 2
@_ZN12_GLOBAL__N_123EC_LEVEL_2_COEFFICIENTSE = internal constant [8 x i16] [i16 237, i16 308, i16 436, i16 284, i16 646, i16 653, i16 428, i16 379], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_3_COEFFICIENTSE = internal constant [16 x i16] [i16 274, i16 562, i16 232, i16 755, i16 599, i16 524, i16 801, i16 132, i16 295, i16 116, i16 442, i16 428, i16 295, i16 42, i16 176, i16 65], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_4_COEFFICIENTSE = internal constant [32 x i16] [i16 361, i16 575, i16 922, i16 525, i16 176, i16 586, i16 640, i16 321, i16 536, i16 742, i16 677, i16 742, i16 687, i16 284, i16 193, i16 517, i16 273, i16 494, i16 263, i16 147, i16 593, i16 800, i16 571, i16 320, i16 803, i16 133, i16 231, i16 390, i16 685, i16 330, i16 63, i16 410], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_5_COEFFICIENTSE = internal constant [64 x i16] [i16 539, i16 422, i16 6, i16 93, i16 862, i16 771, i16 453, i16 106, i16 610, i16 287, i16 107, i16 505, i16 733, i16 877, i16 381, i16 612, i16 723, i16 476, i16 462, i16 172, i16 430, i16 609, i16 858, i16 822, i16 543, i16 376, i16 511, i16 400, i16 672, i16 762, i16 283, i16 184, i16 440, i16 35, i16 519, i16 31, i16 460, i16 594, i16 225, i16 535, i16 517, i16 352, i16 605, i16 158, i16 651, i16 201, i16 488, i16 502, i16 648, i16 733, i16 717, i16 83, i16 404, i16 97, i16 280, i16 771, i16 840, i16 629, i16 4, i16 381, i16 843, i16 623, i16 264, i16 543], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_6_COEFFICIENTSE = internal constant [128 x i16] [i16 521, i16 310, i16 864, i16 547, i16 858, i16 580, i16 296, i16 379, i16 53, i16 779, i16 897, i16 444, i16 400, i16 925, i16 749, i16 415, i16 822, i16 93, i16 217, i16 208, i16 928, i16 244, i16 583, i16 620, i16 246, i16 148, i16 447, i16 631, i16 292, i16 908, i16 490, i16 704, i16 516, i16 258, i16 457, i16 907, i16 594, i16 723, i16 674, i16 292, i16 272, i16 96, i16 684, i16 432, i16 686, i16 606, i16 860, i16 569, i16 193, i16 219, i16 129, i16 186, i16 236, i16 287, i16 192, i16 775, i16 278, i16 173, i16 40, i16 379, i16 712, i16 463, i16 646, i16 776, i16 171, i16 491, i16 297, i16 763, i16 156, i16 732, i16 95, i16 270, i16 447, i16 90, i16 507, i16 48, i16 228, i16 821, i16 808, i16 898, i16 784, i16 663, i16 627, i16 378, i16 382, i16 262, i16 380, i16 602, i16 754, i16 336, i16 89, i16 614, i16 87, i16 432, i16 670, i16 616, i16 157, i16 374, i16 242, i16 726, i16 600, i16 269, i16 375, i16 898, i16 845, i16 454, i16 354, i16 130, i16 814, i16 587, i16 804, i16 34, i16 211, i16 330, i16 539, i16 297, i16 827, i16 865, i16 37, i16 517, i16 834, i16 315, i16 550, i16 86, i16 801, i16 4, i16 108, i16 539], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_7_COEFFICIENTSE = internal constant [256 x i16] [i16 524, i16 894, i16 75, i16 766, i16 882, i16 857, i16 74, i16 204, i16 82, i16 586, i16 708, i16 250, i16 905, i16 786, i16 138, i16 720, i16 858, i16 194, i16 311, i16 913, i16 275, i16 190, i16 375, i16 850, i16 438, i16 733, i16 194, i16 280, i16 201, i16 280, i16 828, i16 757, i16 710, i16 814, i16 919, i16 89, i16 68, i16 569, i16 11, i16 204, i16 796, i16 605, i16 540, i16 913, i16 801, i16 700, i16 799, i16 137, i16 439, i16 418, i16 592, i16 668, i16 353, i16 859, i16 370, i16 694, i16 325, i16 240, i16 216, i16 257, i16 284, i16 549, i16 209, i16 884, i16 315, i16 70, i16 329, i16 793, i16 490, i16 274, i16 877, i16 162, i16 749, i16 812, i16 684, i16 461, i16 334, i16 376, i16 849, i16 521, i16 307, i16 291, i16 803, i16 712, i16 19, i16 358, i16 399, i16 908, i16 103, i16 511, i16 51, i16 8, i16 517, i16 225, i16 289, i16 470, i16 637, i16 731, i16 66, i16 255, i16 917, i16 269, i16 463, i16 830, i16 730, i16 433, i16 848, i16 585, i16 136, i16 538, i16 906, i16 90, i16 2, i16 290, i16 743, i16 199, i16 655, i16 903, i16 329, i16 49, i16 802, i16 580, i16 355, i16 588, i16 188, i16 462, i16 10, i16 134, i16 628, i16 320, i16 479, i16 130, i16 739, i16 71, i16 263, i16 318, i16 374, i16 601, i16 192, i16 605, i16 142, i16 673, i16 687, i16 234, i16 722, i16 384, i16 177, i16 752, i16 607, i16 640, i16 455, i16 193, i16 689, i16 707, i16 805, i16 641, i16 48, i16 60, i16 732, i16 621, i16 895, i16 544, i16 261, i16 852, i16 655, i16 309, i16 697, i16 755, i16 756, i16 60, i16 231, i16 773, i16 434, i16 421, i16 726, i16 528, i16 503, i16 118, i16 49, i16 795, i16 32, i16 144, i16 500, i16 238, i16 836, i16 394, i16 280, i16 566, i16 319, i16 9, i16 647, i16 550, i16 73, i16 914, i16 342, i16 126, i16 32, i16 681, i16 331, i16 792, i16 620, i16 60, i16 609, i16 441, i16 180, i16 791, i16 893, i16 754, i16 605, i16 383, i16 228, i16 749, i16 760, i16 213, i16 54, i16 297, i16 134, i16 54, i16 834, i16 299, i16 922, i16 191, i16 910, i16 532, i16 609, i16 829, i16 189, i16 20, i16 167, i16 29, i16 872, i16 449, i16 83, i16 402, i16 41, i16 656, i16 505, i16 579, i16 481, i16 173, i16 404, i16 251, i16 688, i16 95, i16 497, i16 555, i16 642, i16 543, i16 307, i16 159, i16 924, i16 558, i16 648, i16 55, i16 497, i16 10], align 16
@_ZN12_GLOBAL__N_123EC_LEVEL_8_COEFFICIENTSE = internal constant [512 x i16] [i16 352, i16 77, i16 373, i16 504, i16 35, i16 599, i16 428, i16 207, i16 409, i16 574, i16 118, i16 498, i16 285, i16 380, i16 350, i16 492, i16 197, i16 265, i16 920, i16 155, i16 914, i16 299, i16 229, i16 643, i16 294, i16 871, i16 306, i16 88, i16 87, i16 193, i16 352, i16 781, i16 846, i16 75, i16 327, i16 520, i16 435, i16 543, i16 203, i16 666, i16 249, i16 346, i16 781, i16 621, i16 640, i16 268, i16 794, i16 534, i16 539, i16 781, i16 408, i16 390, i16 644, i16 102, i16 476, i16 499, i16 290, i16 632, i16 545, i16 37, i16 858, i16 916, i16 552, i16 41, i16 542, i16 289, i16 122, i16 272, i16 383, i16 800, i16 485, i16 98, i16 752, i16 472, i16 761, i16 107, i16 784, i16 860, i16 658, i16 741, i16 290, i16 204, i16 681, i16 407, i16 855, i16 85, i16 99, i16 62, i16 482, i16 180, i16 20, i16 297, i16 451, i16 593, i16 913, i16 142, i16 808, i16 684, i16 287, i16 536, i16 561, i16 76, i16 653, i16 899, i16 729, i16 567, i16 744, i16 390, i16 513, i16 192, i16 516, i16 258, i16 240, i16 518, i16 794, i16 395, i16 768, i16 848, i16 51, i16 610, i16 384, i16 168, i16 190, i16 826, i16 328, i16 596, i16 786, i16 303, i16 570, i16 381, i16 415, i16 641, i16 156, i16 237, i16 151, i16 429, i16 531, i16 207, i16 676, i16 710, i16 89, i16 168, i16 304, i16 402, i16 40, i16 708, i16 575, i16 162, i16 864, i16 229, i16 65, i16 861, i16 841, i16 512, i16 164, i16 477, i16 221, i16 92, i16 358, i16 785, i16 288, i16 357, i16 850, i16 836, i16 827, i16 736, i16 707, i16 94, i16 8, i16 494, i16 114, i16 521, i16 2, i16 499, i16 851, i16 543, i16 152, i16 729, i16 771, i16 95, i16 248, i16 361, i16 578, i16 323, i16 856, i16 797, i16 289, i16 51, i16 684, i16 466, i16 533, i16 820, i16 669, i16 45, i16 902, i16 452, i16 167, i16 342, i16 244, i16 173, i16 35, i16 463, i16 651, i16 51, i16 699, i16 591, i16 452, i16 578, i16 37, i16 124, i16 298, i16 332, i16 552, i16 43, i16 427, i16 119, i16 662, i16 777, i16 475, i16 850, i16 764, i16 364, i16 578, i16 911, i16 283, i16 711, i16 472, i16 420, i16 245, i16 288, i16 594, i16 394, i16 511, i16 327, i16 589, i16 777, i16 699, i16 688, i16 43, i16 408, i16 842, i16 383, i16 721, i16 521, i16 560, i16 644, i16 714, i16 559, i16 62, i16 145, i16 873, i16 663, i16 713, i16 159, i16 672, i16 729, i16 624, i16 59, i16 193, i16 417, i16 158, i16 209, i16 563, i16 564, i16 343, i16 693, i16 109, i16 608, i16 563, i16 365, i16 181, i16 772, i16 677, i16 310, i16 248, i16 353, i16 708, i16 410, i16 579, i16 870, i16 617, i16 841, i16 632, i16 860, i16 289, i16 536, i16 35, i16 777, i16 618, i16 586, i16 424, i16 833, i16 77, i16 597, i16 346, i16 269, i16 757, i16 632, i16 695, i16 751, i16 331, i16 247, i16 184, i16 45, i16 787, i16 680, i16 18, i16 66, i16 407, i16 369, i16 54, i16 492, i16 228, i16 613, i16 830, i16 922, i16 437, i16 519, i16 644, i16 905, i16 789, i16 420, i16 305, i16 441, i16 207, i16 300, i16 892, i16 827, i16 141, i16 537, i16 381, i16 662, i16 513, i16 56, i16 252, i16 341, i16 242, i16 797, i16 838, i16 837, i16 720, i16 224, i16 307, i16 631, i16 61, i16 87, i16 560, i16 310, i16 756, i16 665, i16 397, i16 808, i16 851, i16 309, i16 473, i16 795, i16 378, i16 31, i16 647, i16 915, i16 459, i16 806, i16 590, i16 731, i16 425, i16 216, i16 548, i16 249, i16 321, i16 881, i16 699, i16 535, i16 673, i16 782, i16 210, i16 815, i16 905, i16 303, i16 843, i16 922, i16 281, i16 73, i16 469, i16 791, i16 660, i16 162, i16 498, i16 308, i16 155, i16 422, i16 907, i16 817, i16 187, i16 62, i16 16, i16 425, i16 535, i16 336, i16 286, i16 437, i16 375, i16 273, i16 610, i16 296, i16 183, i16 923, i16 116, i16 667, i16 751, i16 353, i16 62, i16 366, i16 691, i16 379, i16 687, i16 842, i16 37, i16 357, i16 720, i16 742, i16 330, i16 5, i16 39, i16 923, i16 311, i16 424, i16 242, i16 749, i16 321, i16 54, i16 669, i16 316, i16 342, i16 299, i16 534, i16 105, i16 667, i16 488, i16 640, i16 672, i16 576, i16 540, i16 316, i16 486, i16 721, i16 610, i16 46, i16 656, i16 447, i16 171, i16 616, i16 464, i16 190, i16 531, i16 297, i16 321, i16 762, i16 752, i16 533, i16 175, i16 134, i16 14, i16 381, i16 433, i16 717, i16 45, i16 111, i16 20, i16 596, i16 284, i16 736, i16 138, i16 646, i16 411, i16 877, i16 669, i16 141, i16 919, i16 45, i16 780, i16 407, i16 164, i16 332, i16 899, i16 165, i16 726, i16 600, i16 325, i16 498, i16 655, i16 357, i16 752, i16 768, i16 223, i16 849, i16 647, i16 63, i16 310, i16 863, i16 251, i16 366, i16 304, i16 282, i16 738, i16 675, i16 410, i16 389, i16 244, i16 31, i16 121, i16 303, i16 263], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN25CBC_PDF417ErrorCorrection31GetErrorCorrectionCodewordCountEi(i32) local_unnamed_addr #0 align 2 {
  %2 = icmp ugt i32 %0, 8
  %3 = add nsw i32 %0, 1
  %4 = shl i32 1, %3
  %5 = select i1 %2, i32 -1, i32 %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25CBC_PDF417ErrorCorrection23GenerateErrorCorrectionERKN5fxcrt10WideStringEi(%"class.pdfium::Optional"* noalias sret, %"class.fxcrt::WideString"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.fxcrt::WideString", align 8
  %5 = icmp ugt i32 %2, 8
  %6 = add nsw i32 %2, 1
  %7 = shl i32 1, %6
  %8 = select i1 %5, i32 -1, i32 %7
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  br label %99

12:                                               ; preds = %3
  %13 = sext i32 %8 to i64
  %14 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %13, i64 4) #5
  %15 = bitcast i8* %14 to i32*
  %16 = ptrtoint i8* %14 to i64
  %17 = add nsw i64 %13, -1
  %18 = getelementptr i32, i32* %15, i64 %17
  %19 = ptrtoint i32* %18 to i64
  %20 = sub i64 4, %16
  %21 = add i64 %20, %19
  %22 = and i64 %21, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %22, i1 false) #5
  %23 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %23, align 8
  %25 = icmp eq %"class.fxcrt::StringDataTemplate"* %24, null
  br i1 %25, label %37, label %26

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %24, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %26
  %31 = add nsw i32 %8, -1
  %32 = sext i32 %31 to i64
  %33 = icmp sgt i32 %31, 0
  %34 = sext i32 %2 to i64
  %35 = getelementptr inbounds [9 x i16*], [9 x i16*]* @_ZN12_GLOBAL__N_115EC_COEFFICIENTSE, i64 0, i64 %34
  %36 = getelementptr inbounds i32, i32* %15, i64 %32
  br label %41

37:                                               ; preds = %55, %12, %26
  %38 = bitcast %"class.fxcrt::WideString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #5
  %39 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %39, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %4) #5
  call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* nonnull %4, i64 %13) #5
  %40 = icmp sgt i32 %8, 0
  br i1 %40, label %87, label %82

41:                                               ; preds = %30, %64
  %42 = phi i64 [ 0, %30 ], [ %62, %64 ]
  %43 = phi %"class.fxcrt::StringDataTemplate"* [ %24, %30 ], [ %65, %64 ]
  %44 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %43, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %45, %42
  br i1 %46, label %48, label %47, !prof !2

47:                                               ; preds = %64, %41
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %43, i64 0, i32 3, i64 %42
  %50 = load i32, i32* %49, align 4
  %51 = load i32, i32* %36, align 4
  %52 = add nsw i32 %51, %50
  %53 = srem i32 %52, 929
  %54 = load i16*, i16** %35, align 8
  br i1 %33, label %67, label %55

55:                                               ; preds = %67, %48
  %56 = load i16, i16* %54, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nsw i32 %53, %57
  %59 = srem i32 %58, 929
  %60 = sub nsw i32 929, %59
  %61 = srem i32 %60, 929
  store i32 %61, i32* %15, align 4
  %62 = add nuw i64 %42, 1
  %63 = icmp eq i64 %62, %28
  br i1 %63, label %37, label %64

64:                                               ; preds = %55
  %65 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %23, align 8
  %66 = icmp eq %"class.fxcrt::StringDataTemplate"* %65, null
  br i1 %66, label %47, label %41

67:                                               ; preds = %48, %67
  %68 = phi i64 [ %74, %67 ], [ %17, %48 ]
  %69 = getelementptr inbounds i16, i16* %54, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nsw i32 %53, %71
  %73 = srem i32 %72, 929
  %74 = add i64 %68, -1
  %75 = getelementptr inbounds i32, i32* %15, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, 929
  %78 = sub i32 %77, %73
  %79 = srem i32 %78, 929
  %80 = getelementptr inbounds i32, i32* %15, i64 %68
  store i32 %79, i32* %80, align 4
  %81 = icmp sgt i64 %74, 0
  br i1 %81, label %67, label %55

82:                                               ; preds = %95, %37
  %83 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %83, align 8
  %84 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5fxcrt10WideStringC1EOS0_(%"class.fxcrt::WideString"* %84, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %4) #5
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #5
  %85 = icmp eq i8* %14, null
  br i1 %85, label %99, label %86

86:                                               ; preds = %82
  call void @_Z7FX_FreePv(i8* nonnull %14) #5
  br label %99

87:                                               ; preds = %37, %95
  %88 = phi i64 [ %89, %95 ], [ %13, %37 ]
  %89 = add nsw i64 %88, -1
  %90 = getelementptr inbounds i32, i32* %15, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %87
  %94 = sub nsw i32 929, %91
  store i32 %94, i32* %90, align 4
  br label %95

95:                                               ; preds = %87, %93
  %96 = phi i32 [ 0, %87 ], [ %94, %93 ]
  %97 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %4, i32 signext %96) #5
  %98 = icmp sgt i64 %89, 0
  br i1 %98, label %87, label %82

99:                                               ; preds = %86, %82, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #3

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringC1EOS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #4

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #3

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143829057}
!4 = !{i32 -2143829036}
