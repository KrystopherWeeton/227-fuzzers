; ModuleID = '../../media/video/half_float_maker.cc'
source_filename = "../../media/video/half_float_maker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.media::HalfFloatMaker" = type { i32 (...)** }
%"class.media::HalfFloatMaker_xor" = type <{ %"class.media::HalfFloatMaker", i32, [4 x i8] }>
%"class.media::HalfFloatMaker_libyuv" = type { %"class.media::HalfFloatMaker", float, float }

$_ZN5media18HalfFloatMaker_xorD0Ev = comdat any

$_ZN5media18HalfFloatMaker_xor14MakeHalfFloatsEPKtmPt = comdat any

$_ZNK5media18HalfFloatMaker_xor6OffsetEv = comdat any

$_ZNK5media18HalfFloatMaker_xor10MultiplierEv = comdat any

$_ZN5media21HalfFloatMaker_libyuvD0Ev = comdat any

$_ZN5media21HalfFloatMaker_libyuv14MakeHalfFloatsEPKtmPt = comdat any

$_ZNK5media21HalfFloatMaker_libyuv6OffsetEv = comdat any

$_ZNK5media21HalfFloatMaker_libyuv10MultiplierEv = comdat any

$_ZTVN5media18HalfFloatMaker_xorE = comdat any

$_ZTVN5media21HalfFloatMaker_libyuvE = comdat any

@_ZTVN5media14HalfFloatMakerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::HalfFloatMaker"*)* @_ZN5media14HalfFloatMakerD2Ev to i8*), i8* bitcast (void (%"class.media::HalfFloatMaker"*)* @_ZN5media14HalfFloatMakerD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN5media18HalfFloatMaker_xorE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::HalfFloatMaker"*)* @_ZN5media14HalfFloatMakerD2Ev to i8*), i8* bitcast (void (%"class.media::HalfFloatMaker_xor"*)* @_ZN5media18HalfFloatMaker_xorD0Ev to i8*), i8* bitcast (void (%"class.media::HalfFloatMaker_xor"*, i16*, i64, i16*)* @_ZN5media18HalfFloatMaker_xor14MakeHalfFloatsEPKtmPt to i8*), i8* bitcast (float (%"class.media::HalfFloatMaker_xor"*)* @_ZNK5media18HalfFloatMaker_xor6OffsetEv to i8*), i8* bitcast (float (%"class.media::HalfFloatMaker_xor"*)* @_ZNK5media18HalfFloatMaker_xor10MultiplierEv to i8*)] }, comdat, align 8
@_ZTVN5media21HalfFloatMaker_libyuvE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::HalfFloatMaker"*)* @_ZN5media14HalfFloatMakerD2Ev to i8*), i8* bitcast (void (%"class.media::HalfFloatMaker_libyuv"*)* @_ZN5media21HalfFloatMaker_libyuvD0Ev to i8*), i8* bitcast (void (%"class.media::HalfFloatMaker_libyuv"*, i16*, i64, i16*)* @_ZN5media21HalfFloatMaker_libyuv14MakeHalfFloatsEPKtmPt to i8*), i8* bitcast (float (%"class.media::HalfFloatMaker_libyuv"*)* @_ZNK5media21HalfFloatMaker_libyuv6OffsetEv to i8*), i8* bitcast (float (%"class.media::HalfFloatMaker_libyuv"*)* @_ZNK5media21HalfFloatMaker_libyuv10MultiplierEv to i8*)] }, comdat, align 8

@_ZN5media14HalfFloatMakerD1Ev = hidden unnamed_addr alias void (%"class.media::HalfFloatMaker"*), void (%"class.media::HalfFloatMaker"*)* @_ZN5media14HalfFloatMakerD2Ev

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5media14HalfFloatMakerD0Ev(%"class.media::HalfFloatMaker"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden %"class.media::HalfFloatMaker"* @_ZN5media14HalfFloatMaker17NewHalfFloatMakerEi(i32) local_unnamed_addr #2 align 2 {
  %2 = icmp slt i32 %0, 11
  %3 = tail call i8* @_Znwm(i64 16) #10
  %4 = bitcast i8* %3 to i32 (...)***
  br i1 %2, label %5, label %8

5:                                                ; preds = %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5media18HalfFloatMaker_xorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i32*
  store i32 %0, i32* %7, align 8
  br label %20

8:                                                ; preds = %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5media21HalfFloatMaker_libyuvE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %9 = shl nsw i32 -1, %0
  %10 = xor i32 %9, -1
  %11 = icmp slt i32 %0, 16
  %12 = getelementptr inbounds i8, i8* %3, i64 8
  %13 = bitcast i8* %12 to float*
  %14 = select i1 %11, float 1.000000e+00, float 0x3F30000000000000
  store float %14, float* %13, align 8
  %15 = fdiv float 1.000000e+00, %14
  %16 = sitofp i32 %10 to float
  %17 = fdiv float %15, %16
  %18 = getelementptr inbounds i8, i8* %3, i64 12
  %19 = bitcast i8* %18 to float*
  store float %17, float* %19, align 4
  br label %20

20:                                               ; preds = %8, %5
  %21 = bitcast i8* %3 to %"class.media::HalfFloatMaker"*
  ret %"class.media::HalfFloatMaker"* %21
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media14HalfFloatMakerD2Ev(%"class.media::HalfFloatMaker"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media18HalfFloatMaker_xorD0Ev(%"class.media::HalfFloatMaker_xor"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.media::HalfFloatMaker_xor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media18HalfFloatMaker_xor14MakeHalfFloatsEPKtmPt(%"class.media::HalfFloatMaker_xor"*, i16*, i64, i16*) unnamed_addr #6 comdat align 2 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %91, label %6

6:                                                ; preds = %4
  %7 = icmp ult i64 %2, 16
  br i1 %7, label %8, label %27

8:                                                ; preds = %89, %27, %6
  %9 = phi i64 [ 0, %27 ], [ 0, %6 ], [ %34, %89 ]
  %10 = xor i64 %9, -1
  %11 = add i64 %10, %2
  %12 = and i64 %2, 3
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %8, %14
  %15 = phi i64 [ %21, %14 ], [ %9, %8 ]
  %16 = phi i64 [ %22, %14 ], [ %12, %8 ]
  %17 = getelementptr inbounds i16, i16* %1, i64 %15
  %18 = load i16, i16* %17, align 2
  %19 = or i16 %18, 14336
  %20 = getelementptr inbounds i16, i16* %3, i64 %15
  store i16 %19, i16* %20, align 2
  %21 = add nuw i64 %15, 1
  %22 = add i64 %16, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %14, !llvm.loop !2

24:                                               ; preds = %14, %8
  %25 = phi i64 [ %9, %8 ], [ %21, %14 ]
  %26 = icmp ult i64 %11, 3
  br i1 %26, label %91, label %92

27:                                               ; preds = %6
  %28 = getelementptr i16, i16* %3, i64 %2
  %29 = getelementptr i16, i16* %1, i64 %2
  %30 = icmp ugt i16* %29, %3
  %31 = icmp ugt i16* %28, %1
  %32 = and i1 %30, %31
  br i1 %32, label %8, label %33

33:                                               ; preds = %27
  %34 = and i64 %2, -16
  %35 = add i64 %34, -16
  %36 = lshr exact i64 %35, 4
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %73, label %40

40:                                               ; preds = %33
  %41 = sub nuw nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %70, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %71, %42 ]
  %45 = getelementptr inbounds i16, i16* %1, i64 %43
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !4
  %48 = getelementptr inbounds i16, i16* %45, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !4
  %51 = or <8 x i16> %47, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %52 = or <8 x i16> %50, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %53 = getelementptr inbounds i16, i16* %3, i64 %43
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %54, align 2, !alias.scope !7, !noalias !4
  %55 = getelementptr inbounds i16, i16* %53, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %56, align 2, !alias.scope !7, !noalias !4
  %57 = or i64 %43, 16
  %58 = getelementptr inbounds i16, i16* %1, i64 %57
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !4
  %61 = getelementptr inbounds i16, i16* %58, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !4
  %64 = or <8 x i16> %60, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %65 = or <8 x i16> %63, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %66 = getelementptr inbounds i16, i16* %3, i64 %57
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %67, align 2, !alias.scope !7, !noalias !4
  %68 = getelementptr inbounds i16, i16* %66, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %69, align 2, !alias.scope !7, !noalias !4
  %70 = add i64 %43, 32
  %71 = add i64 %44, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %42, !llvm.loop !9

73:                                               ; preds = %42, %33
  %74 = phi i64 [ 0, %33 ], [ %70, %42 ]
  %75 = icmp eq i64 %38, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i16, i16* %1, i64 %74
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !4
  %80 = getelementptr inbounds i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !4
  %83 = or <8 x i16> %79, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %84 = or <8 x i16> %82, <i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336, i16 14336>
  %85 = getelementptr inbounds i16, i16* %3, i64 %74
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !7, !noalias !4
  %87 = getelementptr inbounds i16, i16* %85, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %88, align 2, !alias.scope !7, !noalias !4
  br label %89

89:                                               ; preds = %73, %76
  %90 = icmp eq i64 %34, %2
  br i1 %90, label %91, label %8

91:                                               ; preds = %24, %92, %89, %4
  ret void

92:                                               ; preds = %24, %92
  %93 = phi i64 [ %113, %92 ], [ %25, %24 ]
  %94 = getelementptr inbounds i16, i16* %1, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = or i16 %95, 14336
  %97 = getelementptr inbounds i16, i16* %3, i64 %93
  store i16 %96, i16* %97, align 2
  %98 = add nuw i64 %93, 1
  %99 = getelementptr inbounds i16, i16* %1, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = or i16 %100, 14336
  %102 = getelementptr inbounds i16, i16* %3, i64 %98
  store i16 %101, i16* %102, align 2
  %103 = add nuw i64 %93, 2
  %104 = getelementptr inbounds i16, i16* %1, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = or i16 %105, 14336
  %107 = getelementptr inbounds i16, i16* %3, i64 %103
  store i16 %106, i16* %107, align 2
  %108 = add nuw i64 %93, 3
  %109 = getelementptr inbounds i16, i16* %1, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = or i16 %110, 14336
  %112 = getelementptr inbounds i16, i16* %3, i64 %108
  store i16 %111, i16* %112, align 2
  %113 = add nuw i64 %93, 4
  %114 = icmp eq i64 %113, %2
  br i1 %114, label %91, label %92, !llvm.loop !11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5media18HalfFloatMaker_xor6OffsetEv(%"class.media::HalfFloatMaker_xor"*) unnamed_addr #6 comdat align 2 {
  ret float 5.000000e-01
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5media18HalfFloatMaker_xor10MultiplierEv(%"class.media::HalfFloatMaker_xor"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.media::HalfFloatMaker_xor", %"class.media::HalfFloatMaker_xor"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = shl nsw i32 -1, %3
  %5 = xor i32 %4, -1
  %6 = sitofp i32 %5 to double
  %7 = fdiv double 2.048000e+03, %6
  %8 = fptrunc double %7 to float
  ret float %8
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media21HalfFloatMaker_libyuvD0Ev(%"class.media::HalfFloatMaker_libyuv"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.media::HalfFloatMaker_libyuv"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media21HalfFloatMaker_libyuv14MakeHalfFloatsEPKtmPt(%"class.media::HalfFloatMaker_libyuv"*, i16*, i64, i16*) unnamed_addr #6 comdat align 2 {
  %5 = getelementptr inbounds %"class.media::HalfFloatMaker_libyuv", %"class.media::HalfFloatMaker_libyuv"* %0, i64 0, i32 1
  %6 = load float, float* %5, align 8
  %7 = trunc i64 %2 to i32
  %8 = tail call i32 @HalfFloatPlane(i16* %1, i32 0, i16* %3, i32 0, float %6, i32 %7, i32 1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5media21HalfFloatMaker_libyuv6OffsetEv(%"class.media::HalfFloatMaker_libyuv"*) unnamed_addr #6 comdat align 2 {
  ret float 0.000000e+00
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5media21HalfFloatMaker_libyuv10MultiplierEv(%"class.media::HalfFloatMaker_libyuv"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.media::HalfFloatMaker_libyuv", %"class.media::HalfFloatMaker_libyuv"* %0, i64 0, i32 2
  %3 = load float, float* %2, align 4
  ret float %3
}

declare i32 @HalfFloatPlane(i16*, i32, i16*, i32, float, i32, i32) local_unnamed_addr #8

attributes #0 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
